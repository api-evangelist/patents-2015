---

title: Multi stream deduplicated backup of collaboration server data
abstract: Techniques to backup collaboration server data are disclosed. An indication to begin backup of a collaboration server dataset is received. An associated directory is walked in a prescribed order to divide the dataset into a prescribe number of approximately equal-sized subsets. A separate subset-specific thread is used to back up the subsets in parallel. In some embodiments in which the collaboration data is stored in multiple volumes, a volume-based approach is used to back up the volumes in parallel, e.g., one volume per thread. In some embodiments, transaction logs are backed up in parallel with volumes of collaboration data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09542276&OS=09542276&RS=09542276
owner: EMC Corporation
number: 09542276
owner_city: Hopkinton
owner_country: US
publication_date: 20150918
---
This application is a continuation of co pending U.S. patent application Ser. No. 13 720 814 entitled MULTI STREAM DEDUPLICATED BACKUP OF COLLABORATION SERVER DATA filed Dec. 19 2012 which is incorporated herein by reference for all purposes.

Enterprise and other collaboration applications and servers such as the IBM Lotus Domino server facilitate communication e.g. email messaging and other collaboration via network communications. EMC Avamar is a de duplication backup software and system. Avamar maintains a cache file on the client system being backed up which contains SHA 1 hashes of the data which has already been backed up to the Avamar server. This file will be referred during each backup operation to identify the data that has been backed up onto the Avamar server e.g. to avoid duplicative back up of the same data in a current or subsequent backup.

In the case of the IBM Lotus Domino server a backup agent interacts with the server to obtain user data and feeds the data to a de duplicating backup process. The backup process computes the SHA 1 hash of the data during backup and looks it up in the local cache. If it finds the computed hash in the cache then the data will not be transferred to the Avamar server instead just the hash of the data is sent to the server which is much smaller in size as compared to original data. If the computed hash is not present in the local cache then the data is transferred to the Avamar server and its hash is added to the cache.

The invention can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer program product embodied on a computer readable storage medium and or a processor such as a processor configured to execute instructions stored on and or provided by a memory coupled to the processor. In this specification these implementations or any other form that the invention may take may be referred to as techniques. In general the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein the term processor refers to one or more devices circuits and or processing cores configured to process data such as computer program instructions.

A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.

Multi stream de duplicated backup of collaboration server data is disclosed. In various embodiments collaboration server backup is performed using a configurable number of threads. The threads may be used to backup collaboration data based on size i.e. dividing the data to be backed up into n sets of roughly equal size where n is the configured number of threads and having each thread work on an assigned set of data in parallel or in a multi volume installation by assigning one thread per volume up to the configured number of threads. De duplication cache hits are maximized in the sized based approach by walking the dataset directory structure in a consistent way. In the volume based approach a local cache per volume is used and named in a way that ensures the same cache is used for the same volume each backup. In some embodiments transaction logs are backed up in parallel with underlying data with a second pass being made of the transaction logs once all dataset backup is complete to ensure any transactions received during backup are captured.

Typically in prior approaches to performing de duplicated backup of collaboration data a single backup thread has been used. For very large datasets such an approach can result in backups taking a long time. Techniques to perform multi thread de duplicated backup of collaboration data are disclosed. In various embodiments either a size based or a volume based division of work among multiple backup threads running in parallel is used. Each backup thread has its own associated local cache. The backups are performed in a manner that maximizes the chances of a cache hit for example by dividing work among the threads so that the same thread and associated cache are most likely to back up the same data since once a particular data has been backed up by a thread the corresponding hash will be stored in that thread s local cache and the thread will know based on its own local cache not to send the same data to the remote backup server.

In some embodiments an administrative user interface is provided to enable an administrator to configure one or more settings associated with multi thread de duplicated backup of collaboration server data. For example in some embodiments an administrator can configured a prescribed and or maximum number of threads to be used in parallel to perform backup. In some embodiments an administrator may indicate via configuration data whether a size based or volume based backup should be performed. In some embodiments a volume based backup is performed if more than one volume is present in the dataset to be backed up. In the case of IBM Lotus Domino Server for example a common use case arises as an enterprise or other organizational user grows and adds further user accounts. It is very common for example to add an additional storage disk and to set up a new volume for the added disk. In such a case a volume based approach described more fully below in connection with may be advantageous since only one thread will make I O requests to any given disk at any one time. In some embodiments the presence of multiple volumes may be detected programmatically and the volume based approach selected and or used automatically based on the detected presence of multiple volumes.

In some embodiments an IBM Lotus Domino server contains a SINGLE data directory e.g. C data which contains all the information that needs to be backed up. The Data directory can also contain in various embodiments 

1. Multiple database links Which can point to a database outside data directory and possibly on a different volume outside C drive volume let s say it has two database links named dblink1.nsf C data dblink1.nsf and dblink2.nsf D data dblink2.nsf which points to C newdata database1.nsf D data databasese2.nsf.

2. Multiple Directory links Which can point to directory outside data directory and possibly to a directory on separate volume let s say it has two directory links dirlink1.dir C data dirlink1.dir and dirlink2.dir C data dirlink2.dir which point to C data2 D data2 respectively.

During backup a user typically will select just Lotus Domino data directory i.e. C data for backup. It is backup agent s duty to protect entire data i.e. everything inside 1. C data 2. C data dblink1.nsf 3. D data dblink2.nsf 4. C data2 5. D data2.

In some embodiments a backup agent automatically without manual intervention or input categorizes data based on volumes it resides on. So the discovery thread will go through the Domino data directory C data and will identify all database and directory links and find out the locations they point to and then divide them into lists based on volumes. So the output of discovery thread in our example will be two lists 

Domino server transaction logs typically reside in a single directory which can be configured while setting up the Domino server. Domino recommends that these transaction logs reside on a separate disk from that of other Domino data for performance reasons. For example if transaction logs are configured to reside in the E txnlog directory now all transaction logs for Domino server all databases reside in this directory.

If transaction logging is enabled user can take an Incremental backup of Domino server. During incremental backup only newly created databases and databases whose certain properties have changed like DBIID are supposed to be backed up followed by the backup of the transaction logs.

The traditional approach is to first backup the data i.e. to walk through all the databases see if they need to be backed up or skipped if the database needs to be backed up it is backed up. Then in the end all transaction logs are backed up.

In various embodiments the above transaction log backup task is performed in parallel with database backup when the volume based approach is used. One backup thread backs up the transaction logs and other normal backup threads take incremental backup of databases these backup threads have to walk the directory structure have to decide whether to backup a database or skip it and backup the data .

Once all normal backup threads finish we again check if additional transaction logs are generated and back them up. There are many advantages of this a Normal backup threads are mostly skipping the databases most of the time they are executing logic of deciding whether to skip the database or to back them up. During this time network bandwidth is unutilized. The transaction log backup thread can back up data during this time and there by maximizing backup throughput. B Since transaction log thread is running on its own disk it gives same advantages as that of volume based backups.

Using techniques disclosed herein multi thread backup of collaboration server data may be performed in a manner that maximizes the efficiency of the collaboration server side de duplication and completes the backup of collaboration server data including in some embodiments associated transaction logs in an efficient and timely manner.

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.

