---

title: Persistent and resilient worker processes
abstract: In the field of computing, many scenarios involve the execution of an application within a virtual environment (e.g., web applications executing within a web browser). In order to perform background processing, such applications may invoke worker processes within the virtual environment; however, this configuration couples the life cycle of worker processes to the life cycle of the application and/or virtual environment. Presented herein are techniques for executing worker processes outside of the virtual environment and independently of the life cycle of the application, such that background computation may persist after the application and/or virtual environment are terminated and even after a computing environment restart, and for notifying the application upon the worker process achieving an execution event (e.g., detecting device events even while the application is not executing). Such techniques may heighten the resiliency and persistence of worker processes and expand the capabilities of applications executing within virtual environments.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600353&OS=09600353&RS=09600353
owner: Microsoft Technology Licensing, LLC
number: 09600353
owner_city: Redmond
owner_country: US
publication_date: 20150728
---
This application is a continuation of U.S. Pat. No. 9 092 247 also entitled PERSISTENT AND RESILIENT WORKER PROCESSES filed on Dec. 13 2012 which in turn claims benefit under 35 U.S.C. 119 e to U.S. Provisional Patent Application No. 61 617 474 filed on Mar. 29 2012. The entirety of both U.S. patent application Ser. No. 13 713 536 and 61 617 474 are hereby incorporated by reference in their entirety as if fully rewritten herein.

Within the field of computing many scenarios involve an execution of applications within virtual environments of a device such as web applications executing within a web browser code that is developed for a computational environment other than that provided by the device e.g. Java code designed for a Java virtual machine and untrusted code executing within an isolated virtual machine. The execution of the application within the virtual machine rather than as a native process of the device may facilitate the compatibility and security of the application during execution.

Such applications often involve background processing such as long running computationally intensive processes. For example an application may seek to monitor hardware components of the device for a particular type of event such as an incoming call on a mobile phone. However if such processing is performed by the application other responsibilities of the application may be undesirably delayed e.g. computationally intensive processing may preempt the handling of graphical user interface GUI messages and may cause the application to present reduced interactivity or performance. In order to achieve such background processing while reducing interruption of other processing responsibilities of the application the application may invoke one or more worker processes within the virtual environment. For example the web workers model provided in recent versions of the Hypertext Markup Language HTML enables applications to request the web browser to initiate separate worker processes within the web browser thus achieving background processing on behalf of the application in a secured and performant manner.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

While the instantiation of worker processes on behalf of applications executing within a virtual environment presents some advantages models that also execute those worker processes within the virtual environment may present significant disadvantages. As a first example the web workers model typically couples the life cycle of the web worker to the life cycle of the web application i.e. when the web application is suspended or terminated such as by closing the page hosting the web application the web worker is also terminated. The worker processes may also be terminated upon termination of the virtual environment hosting the worker process e.g. closing the web browser and or upon restarting the computing environment of the device e.g. suspending or rebooting the operating system of the device . In some scenarios associating the life cycle of the worker process with the life cycle of the application and or virtual environment may be desirable. However in other scenarios it may be desirable to enable the worker process to persist after such events and or to persist through device events such as a reboot of the operating system.

Presented herein are techniques for extending the resiliency of worker processes executing on behalf of an application within a virtual environment such as a web browser or virtual machine. In accordance with such techniques rather than executing the worker process within the virtual environment the device may execute the worker process outside of the virtual environment. When the application and or virtual environment is terminated the device may refrain from terminating the worker process thus separating the life cycle of the worker process from the life cycle of the application. Optionally the worker process may also be configured to persist through potentially interrupting events arising outside of the virtual environment such as a fault in the process hosting the worker process or an operating system reboot. When the worker process achieves an execution event e.g. completing a complex computational process or detecting a particular type of device event the application executing within the virtual environment may be notified optionally re initiating the application if it is not currently executing in order to fulfill the handling of the execution event achieved by the worker process. By decoupling the execution of worker processes from the execution of the application within the virtual environment the techniques presented herein may expand the resiliency and capabilities of background processing achievable by applications within the virtual environment.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

Within the field of computing many scenarios involve the execution of applications on a device within a virtual environment rather than within the native computing environment of the device. As a first example a web browser may provide a standardized platform for executing device independent code such as JavaScript and Hypertext Markup Language HTML content. As a second example a Java virtual machine JVM may provide a bridge between a generalized computing device and the native capabilities of the device on behalf of a Java application e.g. translating generalized memory allocation requests to the memory model of the device . As a third example code designed for the native environment of a first device may be executed on a second completely device through an emulator that provides a simulation of the first device within the second device. As a fourth example untrusted code may be executed within a sandbox or an artificial machine such that malicious operations may be isolated to the artificial machine and the effects of the untrusted code on the artificial device may be evaluated by the device without risk of damage to the device.

These and other scenarios present the execution of an application within a virtual environment. In many such scenarios the application may involve some foreground responsibilities to be handled in a performant manner e.g. applications presenting a graphical user interface GUI may be designed to fulfill interactions with visual controls with a high degree of responsiveness as even small delays are noticeable to the user. Such applications may also involve extensive background processing that may be performed in a more relaxed manner such as long running computations maintenance tasks to be performed during idle moments and monitoring events of the device.

In order to balance the handling of both foreground processing and background processing virtual environments and applications may provide techniques such as preemptive multitasking wherein the application may designate priorities for respective tasks. However such techniques may not be completely adequate for scheduling the variety of processing tasks involved in an application. As a first such example it may not be possible or efficient to preempt some types of background processing e.g. background processing involving an exclusive locking of a resource in order to handle foreground processing. As a second such example if background processing that involves the monitoring of device events the interruption of such background processing may result in a failure to detect such device events.

In view of these difficulties some virtual environments permit applications to initiate a separate worker process within the virtual environment. By separating the worker process from the execution thread of the application the virtual environment may utilize the concurrent processing capabilities of the computing environment e.g. a more sophisticated preemptive scheduler provided by the operating system and or the computational hardware of the device e.g. concurrent execution of the worker process and application thread on different processors in a multiprocessor device or on different cores of a multicore processor . Moreover the execution of the worker process within the same virtual environment as the application may provide advantages in security e.g. applying the same security policy to the worker process as to the application and or efficiency e.g. enabling a tight coupling of the application and the worker process as peers within the virtual environment .

While the architecture presented in the exemplary scenario of may present some advantages it may be appreciated that some disadvantages may also arise therein. In particular the execution of the worker process within the virtual environment alongside the application may be disadvantageous in certain respects. For example in some scenarios it may be desirable to couple the life cycle of the worker process with the application such that suspension or termination of the application also results in suspension or termination of the worker process . However in other scenarios it may be desirable to decouple the application and the worker process . For example the worker process may comprise a long running process that the user may wish to complete but the user may not wish to retain the application within the virtual environment e.g. the user may intentionally or inadvertently navigate away from a web page hosting a web application thus causing the termination of web workers associated with the web application . As another example the user may wish the worker process to persist indefinitely such as a handler for particular types of device events arising on the device e.g. a notification process to notify the user upon receipt of a text message or incoming phone call . Moreover in some scenarios it may be desirable to enable the worker process not only to persist after suspension or termination of the application but also after suspension or termination of the virtual environment e.g. after the user entirely terminates a web browser and or after interruption of the computing environment e.g. after rebooting or otherwise restarting the device . However models that strictly involve the coupling of the life cycle of the worker process with the life cycle of the application may be incapable of providing such persistent and resilient worker processes .

Presented herein are techniques for improving the persistence and or resilience of worker processes executed on behalf of applications executing within a virtual environment. In accordance with these techniques and in contrast with other techniques such as those illustrated in the exemplary scenario of rather than executing the worker process within the virtual environment the device may execute the worker process on behalf of the application but outside of the virtual environment . Moreover when the device terminates the application e.g. temporarily or indefinitely suspending the application or upon completing or aborting the execution of the application the device may refrain from terminating one or more worker processes associated with the application . In this manner the device may enable the execution of persistent worker processes that continue serving the computational processing of the application even while the application is not currently executing.

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to apply the techniques presented herein. Such computer readable media may include e.g. computer readable storage media involving a tangible device such as a memory semiconductor e.g. a semiconductor utilizing static random access memory SRAM dynamic random access memory DRAM and or synchronous dynamic random access memory SDRAM technologies a platter of a hard disk drive a flash memory device or a magnetic or optical disc such as a CD R DVD R or floppy disc encoding a set of computer readable instructions that when executed by a processor of a device cause the device to implement the techniques presented herein. Such computer readable media may also include as a class of technologies that are distinct from computer readable storage media various types of communications media such as a signal that may be propagated through various physical phenomena e.g. an electromagnetic signal a sound wave signal or an optical signal and in various wired scenarios e.g. via an Ethernet or fiber optic cable and or wireless scenarios e.g. a wireless local area network WLAN such as WiFi a personal area network PAN such as Bluetooth or a cellular or radio network and which encodes a set of computer readable instructions that when executed by a processor of a device cause the device to implement the techniques presented herein.

An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to the principles set forth herein. In one such embodiment the processor executable instructions may be configured to perform a method of fulfilling requests of client applications related to local events such as the exemplary method of . In another such embodiment the processor executable instructions may be configured to implement a system for fulfilling requests of client applications related to local events such as the exemplary system of . Some embodiments of this computer readable medium may comprise a computer readable storage medium e.g. a hard disk drive an optical disc or a flash memory device that is configured to store processor executable instructions configured in this manner. Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

The techniques discussed herein may be devised with variations in many aspects and some variations may present additional advantages and or reduce disadvantages with respect to other variations of these and other techniques. Moreover some variations may be implemented in combination and some combinations may feature additional advantages and or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments e.g. the exemplary method of and the exemplary system of to confer individual and or synergistic advantages upon such embodiments.

A first aspect that may vary among embodiments of these techniques relates to the scenarios wherein such techniques may be utilized.

As a first variation of this first aspect the techniques presented herein may be utilized with many types of devices such as servers server farms workstations laptops tablets mobile phones game consoles and network appliances. Such devices may also provide a variety of computing components such as wired or wireless communications devices human input devices such as keyboards mice touchpads touch sensitive displays microphones and gesture based input components automated input devices such as still or motion cameras global positioning service GPS devices and other sensors output devices such as displays and speakers and communication devices such as wired and or wireless network components.

As a second variation of this first aspect the techniques presented herein may be utilized with various types of servers such as webservers file servers application servers media servers peer to peer sharing coordination servers database servers email servers physical metric monitoring servers and supervisory control and data acquisition SCADA automation servers.

As a third variation of this first aspect the techniques presented herein may be utilized to service applications executing in many types of virtual environments such as a web browsers a simulated and or emulated virtual machine a middleware platforms and or an isolation construct.

As a fourth variation of this first aspect the techniques presented herein may be utilized to service many types of applications such as web applications written in various interpreted and or compiled languages file sharing applications media rendering applications and data driven client applications.

As a fifth variation of this first aspect the techniques presented herein may involve executing many types of worker processes within many types of worker process hosts . For example the worker process may comprise a JavaScript script executed according to the HTML 5 web workers model but executed in a separate shell outside of the web browser hosting the application . Alternatively the worker process may comprise a partially or wholly compiled and natively executing application executing in a managed context wherein the managing runtime comprises the worker process host within the device . As another alternative the worker process host may comprise a local webserver configured to perform persistent background processing on behalf of applications executing within a web browser on the same device. Moreover the worker process may comprise a JavaScript script utilizing the Node.js server side JavaScript environment.

As a sixth variation of this first aspect the worker process may perform many types of background processing on behalf of the application including long running computational processes and wherein the execution event comprises a completion of the computational process a scheduling or timer process and wherein the execution event comprises a timeout or elapsing of the timer persistently available functionality such as a daemon process and wherein the execution event comprises an invocation of the functionality by another process executing on the device and or monitoring of various types of device events and wherein the execution event comprises a detected instance of the device event such as a detection of user input from the user of the device or a hardware or software event arising within the computing environment such as the receipt of an incoming call or message of a mobile phone device . The worker process may apply many types of processing to such device events such as reporting the device event to the application logging the occurrence of the device event or applying additional logic during the handling of the device event . These and other scenarios may be compatible with and may advantageously utilize the techniques presented herein.

A second aspect that may vary among embodiments of the techniques presented herein involves the manner of hosting the execution of the worker process outside of the virtual environment . That is while the worker process is received from the application and executed outside of the virtual environment it may be disadvantageous and or difficult to allow the worker process to execute outside of the virtual environment without some type of process host as this may result in the execution of arbitrary and untrusted code as a native process within the computing environment of the device . Accordingly although separated from the virtual environment the execution of the worker process may be attended by a worker host component providing various types of hosting services to the worker process .

As a first variation of this second aspect a worker host component may apply many forms of hosting to the worker process . As a first example the worker host component may also provide a virtual environment for the worker process so long as the virtual environment provided for the worker process is separate from the virtual environment provided for the application . Indeed the virtual environment provided for the worker process may be quite similar to the virtual environment provided for the application e.g. both processes may execute within the context of a web browser and the separation of the virtual environments enables the persistence of the worker process independent of the life cycle of the application as provided herein. Additionally similarities between a first virtual environment provided for the application and a second separate virtual environment provided for the worker process may enable some conveniences and efficiencies e.g. the same security policy applied to the application may be applied to the worker process . For example web applications executing within a web browser are often restricted according to a cross domain security policy e.g. enabling the web application only to communicate over the internet with the domain from which the web application was received. The worker host component may restrict the execution of worker processes according to the same cross domain security policy applied to the web applications executing within the web browser and associated with the worker processes e.g. restricting the worker processes from communicating with any domains servers or devices outside of the domain that provided the application to the device .

Alternatively the worker host component may present a different execution model to the worker process with different details. Such differences may be selected and or designed in view of the different contexts of the application e.g. an execution environment suitable for ad hoc front end code presenting a user interface and the worker process e.g. an execution environment suitable for computationally complex long running processing without a user interface . As a first such example because worker processes may utilize more computationally complex processes than the application the worker host component may partially and or wholly compile the worker process before or during execution thus providing more performant execution through the use of code optimization techniques while the application may be executed as an interpretable script. As a second such example the worker host component may schedule the execution of worker processes within the computing environment differently than the scheduling of the application within the virtual environment . For example the worker process may be scheduled as a long running process particularly suitable for long stretches of comparatively uninterrupted processing during idle periods of the device while the application may be scheduled as a set of highly responsive but short lived invocations of code such as responses to user interface events. As a third such example the worker process may be provided a different set of application programming interfaces APIs than the application e.g. lower level hardware and network communication modules for the worker process and user interface type modules for the application . As a fourth such example the worker host component may present a different security model than the virtual environment of the application e.g. in view of the expanded capabilities of the worker process executing outside of the virtual environment the security processes the worker host component may apply more rigorous code evaluation before and or during execution to detect and block malicious operations . Conversely in other respects the security model of the worker process may be more relaxed than for applications executing within the virtual environment e.g. because communication between the worker process and other devices may be more closely scrutinized with an acceptable increase in communication latency the worker process may not be restricted according to the cross domain security policy applied to the application . For example where the device is accessible to a remote process executing on a second device the worker host component may upon receiving a request to connect the remote process executing on the second device with the worker process connect the remote process with the worker process . The expansion of functionality may reflect a higher level of trust in the worker process than the application and may be contingent upon user consent e.g. the worker host component may present to the user an offer to initiate execution of the worker process outside of the virtual environment and may initiate such execution only upon receiving an acceptance of the offer from the user . The user may also be permitted to examine the worker processes persisting after the termination of associated applications and to alter the execution thereof e.g. fulfilling requests by the user to suspend and or terminate the worker processes .

In these and other ways the execution model provided for the worker process may significantly differ from the execution model provided for the application . As a first such example the worker host component may comprise a managing runtime that enables managed execution of the worker process e.g. facilitating memory allocation and component access requests according to the architecture of the device . As a second such example the worker host component may comprise a local webserver that is deployed on the device in the service of web applications also executing within a web browser of the device and configured to executed worker processes as local webserver processes. For example the worker host components may be designed as JavaScript scripts targeting the Node.js server side scripting module of a local webserver. As a third such example the worker hot component may provide a virtual machine such as a Java virtual machine that executes separately from the virtual environment in order to separate the life cycle of the worker process from the life cycle of the application . Many choices in the execution environment provided by the worker host component to worker processes may be available and compatible with the techniques presented herein.

A third aspect that may vary among embodiments of these techniques involves the persistence of the worker process . In addition to refraining from terminating the execution of the worker process upon detecting the termination of the application the techniques presented herein may utilize additional techniques to facilitate the persistence and resiliency of the worker process .

As a first variation of this third aspect the worker host component may also enable the worker process to persist despite termination not just of the application but of the virtual environment e.g. not just persisting after the user closes the web page hosting the application but persisting after the web browser is entirely terminated and unloaded from memory . Thus the device may refrain from terminating the worker process even upon terminating the virtual environment .

As a second variation of this third aspect the worker host component may enable the worker process to persist despite faults in the worker host component e.g. an exception crash or termination of the component managing the worker process . For example the worker host component may periodically record the list of executing worker processes and the sources thereof. If a fault arises within the worker host component the device may terminate the worker host component reinitiate execution of the worker host component within the computing environment of the device and reinitiate execution of the worker processes that were executing within the worker host component at the time of the fault.

As a third variation of this third aspect the worker host component may even enable the worker process to persist despite significant changes in the computing environment of the device . For example the termination of the application and or virtual environment may arise during the process of restarting the computing environment of the device such as a reboot. Accordingly after restarting the computing environment the device may reinitiate execution of the worker processes outside of the virtual environment . As a first such example the device may store the worker process and may periodically record its state such that after restarting the computing environment the device may reinitate execution of the worker process with a comparatively recent state. As a second such example if the worker process is received from and or remains in communication with a service the device may after restarting the computing environment request a second worker process from the service e.g. a worker process configured to resume execution based on a recent observation or reporting of the state of the first worker process and may upon receiving the second worker process from the service execute the second worker process outside of the virtual environment of the device . Such persistence may even enable the worker process to persist upon restarting or transitioning the computing environment on a different device e.g. upon transitioning the worker process to a second device within the device mesh of the user .

As a fourth variation of this third aspect the resilience of the worker process may be shared with the application . For example in addition to refraining from terminating the worker process upon terminating the application the worker host component may upon detecting a reinitiation of the execution of the application within the virtual environment identify any currently executing worker processes that were initiated by the application before termination and may reconnect the application with the identified worker processes . The worker processes may for example notify the application of any relevant device events arising on the device during the period of termination of the application . These and other techniques for expanding the persistence and resiliency of the worker processes may be devised during and compatible with the implementation of the techniques presented herein.

A fourth aspect that may vary among embodiments of these techniques involves the manner of notifying an application upon an associated worker process achieving an execution event .

As a first variation of this fourth aspect the notification of the application may be achieved through many types of notification mechanisms. As a first such example the worker host component may simply log the execution event and the application may periodically examine the log of execution events achieved by the worker process . As a second such example the notification may be achieved through message passing e.g. the worker process may generate an execution event notification identifying and describing the execution event and the virtual environment may present the execution event notification to the application . As a third such example the notification may be achieved through a callback mechanism wherein the application indicates a memory location of code to be invoked upon the worker process achieving the execution event . This code may comprise e.g. a portion of the application to be executed within the virtual environment a portion of the worker process to be executed by the worker host component a function of the computing environment such as an API call or a separate code portion such as a mobile agent an abstract syntax tree or a script.

As a second variation of this fourth aspect the resiliency of the worker process may extend to the application during the notification. As a first such example if the worker process achieved the execution event after the application has been terminated the device may reinitiate the application in the virtual environment as part of the notification process e.g. by reloading a web page of a web application that created the web worker. As a second such example the application may be automatically presented to the user as part of the notification process. For example upon achieving the execution event the device may raise the virtual environment and or the application to a foreground presentation within the computing environment e.g. bringing the web browser to the foreground and switching to a tab containing the application .

At a second time point a termination of the web browser may be initiated by the user and or the device and such termination may include terminating the application executing within the web browser . However in accordance with the techniques presented herein the execution of the worker process outside of the web browser enables the worker process to persist despite the termination of the application and the virtual environment .

At a third time point the computing environment may also experience a termination e.g. during a reboot of the device . At a fourth time point following the termination the computing environment may be restarted. The restart may involve an automatic reinitiation of the local webserver which may examine the recording of the worker processes hosted by the local webserver at the time of termination of the computing environment . The local webserver may then contact the server and may receive from the server a second worker process e.g. an identical instance to the worker process initiated at the first time point or an altered worker process reflecting the state of the worker process at the time of termination . The computing environment may thus automatically reinitiate execution of the worker process following a restart of the computing environment .

At a fourth time point a device event may arise within the computing environment e.g. an incoming call for the user . If the worker process is associated with the device event e.g. as an execution event of the worker process the local webserver may notify the worker process of the device event . Additionally the worker process may notify the application of the device event . Moreover if the application and or web browser are not currently executing the device may reinitiate the web browser and or the application e.g. by reloading the page within the web browser and additionally may bring the web browser to a foreground presentation within the computing environment . In this manner the device may achieve resilient execution the worker process that persists despite the termination of the application the termination of the virtual environment and even the restarting of the computing environment through the application of the techniques presented herein.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB Firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

