---

title: Effective feature location in large legacy systems
abstract: A fine-grained behavior model matching based method and system for effective feature location in large legacy systems. A feature behavior analyzer extracts internal behaviors of a feature under requesting based on NLP techniques or writing rules of the feature specification and generates a feature behavior model. A method uses multiple information sources associated with each method under analyzing to generate an expressive behavior signature for each method. The method integrates control flow information of each method and the signature information of its callees, and generates a CFG-based behavior model. A feature location identifier identifies and ranks the feature-related code locations based on a similarity between the feature behavior and the code behavior models. In one aspect, “use cases”, “source code repository” and “issue tracking system” are historical information of existing applications that are used to help understand each code unit of legacy systems applications, and recommend code units related with the given feature description.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09582270&OS=09582270&RS=09582270
owner: International Business Machines Corporation
number: 09582270
owner_city: Armonk
owner_country: US
publication_date: 20150430
---
The present disclosure generally relates to data management systems and methods and particularly a technique for determining effective features in large legacy systems with both high precision and recall.

A feature is a functional requirement of a program that produces an observable behavior which users can trigger.

Feature location is the activity of identifying the source code elements i.e. methods that implement a feature e.g. by implementing techniques systems and methods for identifying locating an initial location in a source code that corresponds to a specific functionality. Such techniques are referred to herein as Feature Location Techniques FLTs .

While source code itself may be broken down for analysis according to different granularity levels e.g. classes files methods or functions and statements i.e. basic blocks lines of code variables etc. the located code entry is also called a feature location. Existing FLTs solutions for determining an initial location in a source code include dynamic static textual historical and hybrid techniques.

Identifying Locating an initial location in the source code that corresponds to a specific functionality feature is challenging. Existing approaches however currently have problems including that such techniques do not consider the internal behavior information of each method which leads to a precision loss or recall loss.

For example shows a first example excerpt of a C program fragment that includes a method named sellHolding obtained as part of a legacy system source code. This sellHolding function is defined as importing three variables userID string symbol and index integer and includes an assignment of a value to a variable success based on a call to a further object removeHolding at method step . shows a second example instance of the same source code method name sellHolding however found in a more recent version of the same example legacy software. This sellHolding method function imports an additional variable userID string symbol index integer and quantity integer and also includes an assignment of a value to a variable success at method step however based on a call to a completely different object reduceHolding . Thus identifying this feature may lead to precision loss or recall loss given that a call to this method may provide an inconsistency given the different internal behaviors of this same method.

As large systems are componentized by hundreds of applications middlewares etc. the system could contain thousands of components interfaces millions of lines of code which does far exceed the upper limit of what can be handled by humans. Not only because of an architecture that is complex but also because the system may rapidly change e.g. banking system.

Thus it is a challenge how to effectively identify feature locations in large systems such as legacy computer systems with high precision and recall.

A system and method that leverages static code analysis and other techniques to identify code internal behaviors to support better feature location in large legacy system source code.

The computer implemented system and methods implement a behavior model feature location approach that effectively combine multiple technologies including use of static code analysis mining revision history information and issue database and natural language processing NLP techniques.

A system and method implementing fine grained behavior model matching for effective feature location of software of large legacy systems.

According to an aspect of the present disclosure there is provided a computer implemented method for effective feature location in software code. The method comprises receiving a specification of a software feature implementation to be located in software code generating a feature behavior model specifying one or more of an action and or entity master behavior and an action and or entity slave behaviors accessing methods from a source code repository and generating an expressive behavior signature for an accessed method identifying one or more feature related code scope methods exhibiting the feature implementation using the expressive behavior signature for the method and the generated feature behavior model associated with the feature description generating a code behavior model for each one or more feature related code scope method determining a similarity between the feature behavior model and the code behavior models and identifying and ranking a feature location feature related code locations based on the similarity determining wherein a hardware processor device performs one or more the receiving the feature behavior model generating the accessing the analyzing the expressive behavior signature generating the feature related code scope identifying the code behavior model generating determining and the feature related code locations identifying and ranking.

According to another aspect of the present disclosure a system for effective feature location in software code n apparatus is provided. The system comprises a memory storage device storing a program of instructions a hardware processor device receiving the program of instructions to configure the processor device to receive a specification of a software feature implementation to be located in software code generate a feature behavior model specifying one or more of an action and or entity master behavior and an action and or entity slave behaviors access methods from a source code repository and generate an expressive behavior signature for an accessed method identify one or more feature related code scope methods exhibiting the feature implementation using the expressive behavior signature for the method and the generated feature behavior model associated with the feature description generate a code behavior model for each one or more feature related code scope method determine a similarity between the feature behavior model and the code behavior models and identify and rank a feature location feature related code locations based on the similarity determining.

In a further aspect there is provided a computer program product for performing operations. The computer program product includes a storage medium readable by a processing circuit and storing instructions run by the processing circuit for running a method. The method is the same as listed above.

The present disclosure relates to feature location in software code of large legacy systems. Typically such legacy systems include computer systems applications which continue to be used because of the cost of replacing or redesigning it and often despite its poor competitiveness and compatibility with modern equivalents. The implication is that the legacy system code is large monolithic and difficult to modify. However it is understood that the systems and methods described herein can be applied for all kinds of existing software systems e.g. that could include many applications middleware components a database system etc. .

In one aspect expressive means describing the features of each corresponding method more expressively e.g. not only show internal behaviors but also control flows of internal behaviors . Use of information of multiple sources helps narrow down code scope avoid path explosion and facilitates obtaining a control flow of source code by associating and sequencing historical information.

For example as shown in the behavior signature analyzer performs methods to access a source code repository to which the behavior signature analyzer performs analysis upon the software legacy code to generate an expressive behavior signature . Further information sources used in the behavior signature analysis may include information of from an issue tracking system . In one embodiment a source code repository is a file archive and web hosting facility where large amounts of source code for software but also for web pages are kept either publicly or privately. They are often used by open source projects and other multi developer projects to handle various versions. They help developers submit patches of code in an organized fashion. Often these web sites support version control bug tracking release management mailing lists and other related artifacts. System further implements a feature related code scope identification module that receives the generated expressive behavior signature and the generated feature behavior model associated with the feature description and implements processing to identify the source code methods exhibiting the feature. The feature related code scope identification module also generates control flow information for the subject methods being analyzed. The methods that are identified by processing module as including the feature related code are then input to a method behavior model analysis module for determining the method s behavior. In one embodiment the method behavior model analyzer integrates control flow graph CFG information generated for each method and the signature information of its callees to generate an extended CFG based code behavior model for each method . That is the behavior signatures of callees are used to construct a behavior model of a caller. The generated feature behavior model and the generated code behavior model are both input to a feature location identifier and ranking module which identifies and ranks the initial code locations related to the feature under querying based on the similarity between the feature behavior model and the method behavior models.

An example illustration of feature behavior analysis module functionality for building a feature behavior model is now described with reference to the example code segment of . An example feature description that is input to the system may describe a feature relating to the method s Master behavior and the method s Slave behavior. For example code segment of includes a feature s Master behavior supporting a user to sell any stock holding in his her account via the system. In this example to implement this feature the system needs to first get the stock holding the user wants to sell second get and remove the stock holding from the user s account and third update the balance of the user s account. Summarily the master behavior feature description input to the system may be described as an action and an entity e.g. sell stocks . From the example code segment of a feature s Slave behaviors may include a sequence of internal behaviors. For example based on the example of legacy code segment such Slave behaviors specified may be actions including get to obtain the entities e.g. user s stock holding remove entities and update entities such as the balance of the account.

In one embodiment master and slave behaviors may be generated based on patterns e.g. summary info detail info first . . . second . . . third . . . . These patterns could be predefined e.g. mined from data or knowledge bases.

Thus an example feature behavior model generated by module includes a description of the feature s Master behavior action sell entities stock holding and Slave behaviors action get entities stock holding action remove entities stock holding and action update entities balance account .

In one embodiment the method infers the hidden feature behavior model in the user input for use in searching codes using this behavior model.

Returning to there is depicted the method behavior signature analyzer implementing functionality for obtaining information from multiple information sources associated with each method being analyzed to generate an expressive behavior signature for each method in the source code. shows an example processing and results obtained from the module s processing of the source code to obtain a behavior signature of an example method. With reference to for example there is depicted a further example source code segment corresponding to the functional source code segment example of . That is the behavior signature analysis performed identifies a further example source code segment defining a HoldingObject object including a findHolding method that is called from each of the source code segment methods and of respective to invoke functionality for obtaining in the example legacy system application the user sell Holding for a given symbol and index. In a database context as a commit is an application of a single transaction and from related artifacts information e.g. the commit log record of transactions not shown the method behavior signature analyzer identifies a commit log record having an example commit log message from which expressive behavior signature of the findHolding method is determined. That is for example based on the commit log msg the method applies existing NLP techniques e.g. Apache OpenNLP to extract verb noun pairs e.g. check validity get holding . Based on code analysis e.g. method name verb noun pairs e.g. find holding may also be extracted. Then in response the method behavior signature analysis module generates an expressive behavior signature that includes a sequence of slave behaviors e.g. in this example including behaviors of checking validity get a holding and finding the holding.

Returning to there is depicted the feature related code scope identification method implementing functionality to receive the generated expressive behavior signature and the generated feature behavior model associated with the feature description and implement processing to identify the source code methods in the legacy source code exhibiting the feature.

Returning to there is depicted the further method behavior analysis model that operates on identified methods having the feature related code and that implements processing for determining an identified method s behavior. In one embodiment method behavior analysis model implements control flow graph techniques for generating a behavior model for each method in the feature related code scope. For example in one embodiment static code analysis techniques are applied e.g. with Soot API http en.wikipedia.org wiki Soot  software or WALA http wala.sourceforge.net wiki index.php Main Page or any like existing tool to extract a control flow graph CFG of each method under analyzing. Then an attempt is made to simplify the CFG of each method e.g. by removing all nodes except method call nodes i.e. all nodes in simplified CFGs will only contain method call nodes.

As an example of CFG based behavior model generation shows a first example excerpt of a C program fragment that includes a method named sell identified as having feature related code scope. This sell function is defined as passing three variables userID string symbol and index integer and is determined as invoking e.g. calling three methods including a call to a findHolding method a call to a removeHolding method and an updateAccount method call . Operating on software of the method using existing CFG based model generation techniques method behavior analysis module constructs a corresponding CFG graph structure such as shown in . As shown via method a calling top level executed method findHolding maps to the representative top node of the CFG graph . Additionally based on a method step in method that evaluates a condition the CFG will model either result by showing that the method will traverse a path A that includes terminating at exit node or traverse a path B that includes running a step making a further call to the removeHolding method as shown in the graph as corresponds to the method in method . Likewise as shown in based on a further method step in method that evaluates a further condition in the example method the CFG will model either result by showing that this method will traverse a path C and terminate at exit node or traverse a further path D that includes running a step making a further call to the updateAccount call as shown in the graph as corresponds to the method in method . Finally in the constructed model behavior graph from the modeled method step node there is traversed a path E that includes terminating at exit node .

Returning to there is depicted the feature location identification and ranking method implementing functionality to receive the generated code behavior model and feature behavior model associated with the feature description and implement processing to identify and rank the identified feature locations .

At a first step there is depicted obtaining a method in the feature related code scope and then at extracting all paths in the code behavior model. For example the paths A B i.e. the behavior signatures of the method call statements would be extracted. In one embodiment any code loops may be ignored. Then for each path i extracted at the method includes generating a path i behavior model at . A path i behavior model is for a path i. The generation of a path behavior model at comprises performing a sequencing of the behavior signatures of the method call statements in the path e.g. based on their appearance orders in the path. For example in a path i behavior model would comprise findHolding removeHolding updateAccount .

The method continues to step to compute a similarity between the path behavior model for method i and the feature behavior model .

Then returning from step processing the method proceeds back to step where a ranking determination is made. Ranking determining involves process to compare a currently computed similarity value computed form the current path i against all other similarity values in order to determine a maximum value of all the similarity values computed for all the other extracted paths i of that method. The highest ranked similarity value among all the identified paths i determined for that feature code scope method is treated as the Similarity method.

At this point processing may include determining which method Similarity value is the greatest of all the method Similarity values computed for all the methods tested from the identified feature related code scope methods . The method of the identified feature related code scope methods having the highest similarity value is deemed most related to with the given feature request.

If at it is determined that the computed Similarity measure for a path i of a current method is the greater than the other computed so far then at the current method i is set as the Similarity method for the initial feature description and the method proceeds to step . The Similarity method is the method most related to the user specified features. Otherwise at if it is determined that the computed similarity value for the current method is not greater than the other values for the other methods computed so far then the process proceeds directly to step .

At step a further determination is made as to whether the current feature related code scope method having path behaviors paths i models for which a method Similarity value has just been compared is the last method of the identified feature related code scope methods having code scope behaviors. If at it is determined that there are other remaining identified feature code scope methods having code scope behaviors then the process proceeds to step to get the new method and return to step to repeat process steps for the retrieved new method. Otherwise if the last identified feature code scope method has been processed at the method implemented for feature location identification and ranking terminates. As a result the method having the highest Similarity measure i.e. a feature related code scope method having most matched features is the Similarity method. That is of the identified methods of feature related code scope the system will recommend a method having a maximum similarity value for a path behavior model generated and the greatest Similarity measure value.

In one embodiment the recommended code unit s related with the given feature description may be implemented for purposes of generating new application programming interfaces API to legacy data storage systems such as implemented for human resources applications customer resource management CRM applications enterprise resource planning applications legacy databases etc. That is API enablement services may benefit from the system and methods herein to facilitate the creation of APIs to integrate existing system data and function with new systems of engagement. For example such API s generated using techniques for feature location described herein may be closely bound to mobile devices e.g. via HTTP Notification Data sync or other systems of engagement to provide seamless client experience.

Although not shown each of these programmed instructions may operate on by different computing elements or distributed machines each operatively connected together via a system bus not shown . In one example communication between and among the various system components may be bi directional. In another example communication amongst the elements may be carried out via network e.g. the Internet an intranet a local area network a wide area network and or any other desired communication channel s . In another example some or all of these elements may be implemented in a computer system of the type shown in .

Thus the methods of the described herein can be used to expedite creation and development of APIs for enterprise legacy systems. These API s may be developed for Platform Selection Targeted Expansion Re platforming of Core Legacy Systems or as a Business as a Service Built on the Web Enterprise solution.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions. These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

While the disclosure has been described in terms of specific embodiments it is evident in view of the foregoing description that numerous alternatives modifications and variations will be apparent to those skilled in the art. Various embodiments of the present disclosure can be employed either alone or in combination with any other embodiment unless expressly stated otherwise or otherwise clearly incompatible among one another. Accordingly the disclosure is intended to encompass all such alternatives modifications and variations which fall within the scope and spirit of the disclosure and the following claims.

