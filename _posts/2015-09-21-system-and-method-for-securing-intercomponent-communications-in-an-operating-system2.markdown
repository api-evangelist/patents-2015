---

title: System and method for securing inter-component communications in an operating system
abstract: System and methods for securing inter-component communications in an operating system are provided. Systems and methods provided herein secure inter-component communications in an operating system by selectively generating instances when inter-component communication requests occur, whereby each of the generated instances are attached to a newly created blocked permissions list. System and methods further manage the invocation of Application Programming Interfaces by applications or instances in the operating system by determining whether the invocation of the Application Programming Interface is allowed or declined based on the blocked permissions list and default permission list associated with each invoking application or instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09652608&OS=09652608&RS=09652608
owner: Singapore Management University
number: 09652608
owner_city: Singapore
owner_country: SG
publication_date: 20150921
---
This application claims priority to Singapore Patent Application No. SG10201406235W filed with the Singapore Patent Office on Sep. 30 2014 which is hereby incorporated by reference in its entirety.

This invention relates to a system and method for securing inter component communications in an operating system such as a mobile device operating system. More particularly this invention relates to a system and method for securing inter component communications in an operating system by selectively generating instances when inter component communication requests occur whereby each of the generated instances are attached to a newly created blocked permissions list. Still more particularly this invention relates to a system and method that further manages the invocation of Application Programming Interfaces by applications or instances in the operating system. The system and method determines whether the invocation of the Application Programming Interface is allowed or declined based on the blocked permissions list and default permission list associated with each invoking application or instance.

An operating system designed for mobile devices such as smartphones or tablet computers may be roughly divided into four main layers. The core of the operating system or the base layer of the four layers in the operating system is the kernel layer. The kernel layer is followed by the middleware layer in which e.g. the Java libraries and the runtime machine reside. The second topmost layer comprises the application framework layer and the topmost layer comprises the application layer. Each application residing in the application layer of the operating system comprises four component types. The first component type is an activity component that defines an application s user interface the second component type is a service component that performs background processing the third component type is a content provider component that stores and shares data using relational database interfaces and the fourth component type is a broadcast receiver component that acts as a mailbox for messages from other applications.

When one component initiates communication with another this communication process is known as inter component communication ICC . In an ICC process a message object that contains a destination or target component address and data will be sent from the initiating component to a target component. The action associated with each ICC varies depending on the component that is the target of the ICC. As an example a first application is set up with a first activity component and a first service component and a second application is set up with a second broadcast receiver component. In this example the first activity component in the first application may initiate an ICC targeting the first service component to control the operation of the first service component in the first application. It should be noted that the inter component communications are not limited to communications between components residing in a single application only. ICCs may also be used to facilitate the interaction between components in two different applications. Returning to the previous example this would mean that the first activity component in the first application may initiate an ICC targeting the second broadcast receiver component in the second application to broadcast any messages that may be contained within the first application using the broadcast receiver of the second application.

To increase the portability of applications the libraries in the middleware layer implement device specific functions so that applications in the application layer and software modules in the application framework layer need not concern themselves with the variations between devices that utilize such an operating system. However this results in an increase in the overall complexity of the operating system. Due to the increased complexity of the operating system most application developers tend to overlook security loopholes. These loopholes may be exploited by malicious applications or services programmed to carry out malicious tasks or execute malicious codes. For example these malicious applications or services may exploit the inter component communications to gain access to sensitive components or data residing within applications.

By default such operating systems have in place a security policy that protects applications and data at the ICC level. In particular the operating system is provided with a reference monitor that resides at the application framework layer. The reference monitor provides mandatory access control MAC enforcement of how applications are to access components. In its simplest form access to each component is restricted by assigning it an access permission label. These permission labels are typically assigned by the developers of the application and are usually not modifiable by a general user of the application. When a component initiates an ICC the reference monitor checks the collection of permission labels assigned to the application that contains the initiating component as the initiating component will inherit the permission labels of the application. If the collection contains all the permission labels required by the target component of the ICC the reference monitor allows the ICC to continue. Alternatively if any required label is not in the initiating component s collection the establishment of the ICC is denied. In having such a security policy in place the developer of the application is actually the only person who is able to define the application s security policy or in particular each component s required permission label or the list of permission labels associated with the particular application.

Throughout the years various permission management applications have been developed to address the shortcomings of existing permission controls for such operating systems. These permission management applications provide for dynamic permission management which allow a user to independently revoke and grant some permission labels associated with certain applications after the applications have been installed. In general these permission management applications may be broadly grouped into four categories application package modification based applications Read Only Memory based applications Application Ops based applications and Root based application. These various types of applications attempt to address some of the shortcomings of existing permission controls for such operating systems.

An embodiment is provided herein that has as a first advantage that the permission management policy of such operating systems is strengthened and shielded against malicious attacks in particular against privilege escalation attacks as the mapping of inter component communications and invocations of Application Programming Interfaces are all managed by the invention. An embodiment is provided herein that has as a second advantage that the size of the new unified blocked permission list associated with the new instance is limited to the size of the union of the blocked permission lists associated with the initiating component and the target component. As such this minimizes the invention s impact on the normal operation of existing applications. An embodiment is provided herein that has as a third advantage that the invention may be easily deployed in such existing operating systems as the modules that make up the invention reside in the application framework layer of such an operating system.

A system is provided herein that has a processing unit and media readable by the processing unit. The media is configured to store instructions that when executed by the processing unit cause the processing unit to intercept using a reference module an inter component communication request from the first application to the second application wherein the first application is associated with a first blocked permission list and the second application is associated with a second blocked permission list. The first and second blocked permission lists are provided by a user of the operating system and are stored in a blocked permission database. The instructions when executed by the processing unit also directs the processing unit to determine if a new instance is to be created and if a new instance is to be created by retrieving the first blocked permission list and the second blocked permission list from the blocked permission database by determining if the first blocked permission list is a subset of the second blocked permission list and if the first blocked permission list is determined not to be a subset of the second blocked permission list notify the reference monitor to create the new instance and calculate a new unified blocked permission list that is to be associated with the new instance using the first blocked permission list and the second blocked permission list. In this embodiment of the invention the reference monitor and the blocked permission database both reside in the application framework layer of the operating system and a blocked permission service resides in the application framework layer of the operating system.

In accordance with an embodiment of the invention the instructions to calculate the new unified blocked permission list comprise additional instructions for directing the processing unit to unify the first blocked permission list and the second blocked permission list to form the unified blocked permission list.

In accordance with an embodiment of the invention the instructions further comprise additional instructions for directing the processing unit to instruct using the reference monitor an instance creation module residing in the application framework layer to create the new instance. The additional instructions also direct the processing unit to associate the new unified blocked permission list to the new instance and to store using the blocked permission service the unified blocked permission list in the blocked permission database.

In accordance with embodiments of the invention the instructions further comprise additional instructions for directing the processing unit to establish using the reference monitor an inter component communication between the first application and the new instance.

In accordance with an embodiment of the invention the instructions further comprise additional instructions for directing the processing unit to intercept using a privilege Application Programming Interface decision module a privileged Application Programming Interface request invoked by an application or an instance wherein the privileged Application Programming Interface is provided with a required permission list. The additional instructions also direct the processing unit to retrieve using the blocked permission service a blocked permission list associated with the invoking application or instance from the blocked permission database. The processing unit is then directed by the additional instructions to determine using the privilege Application Programming Interface decision module if the required permission list matches with the retrieved blocked permission list and if a match does not exist between the required permission list and the retrieved blocked permission list the processing unit is directed to retrieve a permission list associated with the invoking application or instance from a permission database. The additional instructions then direct the processing unit to determine using the privilege Application Programming Interface decision module if the required permission list matches with the retrieved permission list and if a match exists between the required permission list and the retrieved permission list the processing unit is directed to allow the invocation of the privileged Application Programming Interface to proceed. In this embodiment of the invention the Application Programming Interface decision module and the permission database both reside in the application framework layer.

This invention relates to systems and methods for securing inter component communications in an operating system such as a mobile device operating system. More particularly this invention relates to systems and methods for securing an inter component communication ICC in an operating system by selectively generating instances when ICC requests occur whereby each of the generated instances are attached to a newly created blocked permissions list. Still more particularly this invention relates to systems and methods that further manage the invocation of an Application Programming Interface API by applications or instances in the operating system. The systems and methods determine whether the invocation of the API is allowed or declined based on the blocked permissions list and default permission list associated with each invoking application or instance.

The new function modules in system are instance creation module instance decision module privilege API decision module and blocked permission service . One skilled in the art will recognize that these four new function modules may be written using development codes for such operating systems or may be modified from existing classes or components coded for such operating systems to perform the processes required by each module as described below.

Instance creation module is used by system to create application instances at runtime and as such instance creation module is added to Activity Manager Service in application framework layer . As for instance decision module this module is added to Activity Manager Service in application framework layer and is used to determine whether a new instance should be created based on specific relevant blocked permission lists.

The other function module added to Package Manager Service is privilege API decision module which is used to determine whether the invocation of a privileged API by an application or instance is allowed or denied. From hereinafter one skilled in the art will recognize that the term privileged API refers to an API that is invoked by an application or instance that possesses a list of required permission labels to access specific sensitive resources in such operating systems.

In other words in such existing operating systems when a privileged API is invoked by an application or an instance the security policy of the existing operating system will carry out a check using the permission lists contained in permission database to ascertain whether the invoking instance or application possesses the necessary permission labels required by the privileged API. The invoking instance or application may possess a plurality of permission labels but in order to access a particular resource on the operating system the invoking instance or application will have to possess the required permission label associated with that particular resource and as contained in the privileged API s required permission list. If the check returns a positive result the privileged API will be invoked by the instance or application and if the check returns a negative result the invocation of the privilege API will be rejected.

In addition to having permission database that stores permission lists associated with existing applications and or instances system is also provided with a new storage module which is blocked permission database that may be accessed by blocked permission service . Blocked permission service allows user to modify the contents of blocked permission lists stored in blocked permission database via permission manager app . The purpose of blocked permission database is to store the lists of blocked permissions associated with each installed application in system . For example if a camera application is associated with a blocked permission for reading a phonebook application this would mean that the camera application cannot access the phonebook application at runtime. If a particular application possesses a great number of blocked permissions this would mean that the function of that particular application is actually quite limited.

In operation this would mean that applications and instances in system would be associated with two different types of permission lists. The first type would be the conventional permission list that sets out the various permission labels possessed by the application or instance as declared by the developers of the application or instance while the second type would be the list of blocked permissions associated with the application or instance as defined by a user of system . After an application is installed in system the user may configure the blocked permission list associated with the application using permission manager app . If so required permission manager app may also be used to block permissions declared by an application s developer or access to other sensitive resources on system .

In the embodiment shown in App is shown to be associated with blocked permission list which contains blocked permissions P and P while App is shown to be associated with blocked permission list which contains blocked permissions P and P. What this means is that in system App will not be able to access resources that require permission labels P or P as App is associated with blocked permissions P and P while App will not be able to access resources that require permission labels P or P and App is associated with blocked permissions P and P.

Processes provided by instructions stored in a media are executed by a processing unit in a computer system. A computer system may be provided in one or more mobile devices to provide this invention. The instructions may be stored as firmware hardware or software. illustrates an example of such a processing system. Processing system may be the processing system in the mobile devices that execute the instructions to perform the processes for providing a method and or system in accordance with an embodiment of this invention. One skilled in the art will recognize that the exact configuration of each processing system may be different and the exact configuration of the processing system in each mobile device may vary and is given by way of example only.

Processing system includes Central Processing Unit CPU . CPU is a processor microprocessor or any combination of processors and microprocessors that execute instructions to perform the processes in accordance with the present invention. CPU connects to memory bus and Input Output I O bus . Memory bus connects CPU to memories and to transmit data and instructions between memories and CPU . I O bus connects CPU to peripheral devices to transmit data between CPU and the peripheral devices. One skilled in the art will recognize that I O bus and memory bus may be combined into one bus or subdivided into many other busses and the exact configuration is left to those skilled in the art.

A non volatile memory such as a Read Only Memory ROM is connected to memory bus . Non volatile memory stores instructions and data needed to operate various sub systems of processing system and to boot the system at start up. One skilled in the art will recognize that any number of types of memory may be used to perform this function.

A volatile memory such as Random Access Memory RAM is also connected to memory bus . Volatile memory stores the instructions and data needed by CPU to perform software instructions for processes such as the processes required for providing a system in accordance with an embodiment of this invention. One skilled in the art will recognize that any number of types of memory may be used as volatile memory and the exact type used is left as a design choice to those skilled in the art.

I O device keyboard display memory network device and any number of other peripheral devices connect to I O bus to exchange data with CPU for use in applications being executed by CPU . I O device is any device that transmits and or receives data from CPU . Keyboard is a specific type of I O that receives user input and transmits the input to CPU . Display receives display data from CPU and display images on a screen for a user to see. Memory is a device that transmits and receives data to and from CPU for storing data to a media. Network device connects CPU to a network for transmission of data to and from other processing systems.

When an ICC request is initiated by application App targeting application App this ICC request will be intercepted by reference monitor . This occurs at step . One skilled in the art will recognize that reference monitor has been modified from an existing Reference Monitor commonly used in development environments for such operating systems so that reference monitor is able to communicate with instance creation module and instance decision module . Reference monitor then transmits the intercepted ICC request to instance decision module at step . Instance decision module will then determine whether a new instance is to be created. If instance decision module decides that a new instance need not be created reference monitor will then allow the ICC to be established between applications App and App. If instance decision module decides that a new instance is required instance decision module will proceed to calculate a new unified blocked permission list based on the blocked permission lists of the initiating application and the target application i.e. blocked permission lists . The new unified blocked permission list will then be associated with the new instance which is hereinafter identified as new instance .

The decision made by instance decision module will then be sent to reference monitor at step . For the creation of new instance reference monitor will send a new instance request to instance creation module at step . Instance creation module will then generate new instance with the assistance of a process creation API found in the framework for such operating systems. This process creation API uses the Zygote process which is a core process in such operating systems to fork any new process.

Once new instance is generated new instance will be accorded a process identity PID . The PID of new instance is then sent to reference monitor at step . At step reference monitor will send a user identity UID PID and new unified blocked permission list of new instance to block permission service . An ICC is then established between application App and new instance .

In the example illustrated in it is shown that instance invokes privileged API request . In this example it is also shown that privileged API request requires permission labels P and P. After privileged API request has been intercepted at step privilege API decision module will obtain the blocked permission list associated with instance at steps . In this example it is shown that instance is associated with blocked permission label P. As the permission labels required by privileged API request does not match with the blocked permission label associated with instance privilege API decision module will proceed to step . In other words there is no conflict between the permission labels required by privileged API request and the permission labels that are off limits to privileged APIs invoked by instance .

At step privilege API decision module will compare the permission labels required by privileged API request with the permission lists associated with instance as stored in permission database . If there is a match the invocation of privileged API request by instance will be allowed to proceed else the invocation of the API will be rejected. In this example as instance is shown to be associated with permission labels P P and P this would mean that a match would occur at step i.e. privileged API request requires permission labels P and P and these labels are associated with instance . As such the invocation of privileged API will be allowed to proceed.

In order to provide such a system or method a process is needed for securing an inter component communication call from a first application to a second application in such an operating system and for securing the invocation of privilege APIs. The following description and describe embodiments of processes that provide such a securing process in accordance with this invention.

What this means is that process will essentially not create a new instance if process determines that the second application has lesser or equal access to sensitive resources in the operating system as compared to the first application that is when the blocked permission list of the first application is a subset of the blocked permission list of second application. A new instance will only be created at step by process if the second application is able to access more sensitive resources in the operating system as compared to the first application.

At step process will then calculate the new blocked permission list that is to be attached to the newly created instance. This is done by unifying the blocked permission list of the first application with the blocked permission list of the second application. With regard to the blocked permission lists as illustrated in what this means is that the union of these two blocked permission lists would result in a unified blocked permission list having the blocked permission labels P P and P.

Process would then carry out a check amongst all the existing instances in the operating system at step to determine whether the second application has an existing instance having the same unified blocked permission list as that created in step . If process determines that such an instance does not exist in the operating system process will then progress to step . At step process will notify reference monitor that a new instance is to be created and process then ends. As mentioned above the creation of the new instance is carried out by processes in instance creation module .

Alternatively if process determines that such an instance exists in system process would then proceed to step . At step process will select the existing instance associated with the second application and having the same unified blocked permission list as that previously created in step . Process will then notify reference monitor about the details of the existing instance such as the name of the instance the instance s UID PID etc. so that reference monitor may retrieve the identified instance at a later stage. All this occurs at step . Process will also at this step notify reference monitor that a new instance will not be created and process will then end.

At step process will retrieve the permission list associated with the invoking instance from permission database . In an embodiment of the invention the permission list may be retrieved using the invoking instance s UID and PID. If the retrieved permission list contains permission labels that match with the permission labels required by the privileged API process will proceed to step . At step process approves the invocation of the privileged API and the invocation process is allowed to continue. Process then ends. Alternatively if the retrieved permission list does not contain permission labels that match with the permission labels required by the privileged API process will end and the invocation of the privileged API will end as well.

Although process was described above with reference to an instance one skilled in the art will recognize that process may be applied to a privileged API request invoked by an application without departing from this invention.

The above is a description of embodiments of systems and processes in accordance with the present invention as set forth in the following claims. It is envisioned that others may and will design alternatives that fall within the scope of the following claims.

