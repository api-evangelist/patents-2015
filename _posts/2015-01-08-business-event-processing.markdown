---

title: Business event processing
abstract: In one example embodiment, a system comprises an event processing module accessible over a network; an event producer module associated with the event processing module and configured to monitor an action or directive of a consumer resource and, in response to a detected action or directive, generate an event and event metadata. The system further includes a conversion module associated with the event processing module and configured to acquire the event metadata and generate a generic event based on the acquired event metadata, and a transport module configured to distribute the generic event to a plurality of consumer resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09152989&OS=09152989&RS=09152989
owner: eBay, Inc.
number: 09152989
owner_city: San Jose
owner_country: US
publication_date: 20150108
---
This application is a continuation of U.S. patent application Ser. No. 14 230 576 filed on Mar. 31 2014 which is a continuation of U.S. patent application Ser. No. 14 100 223 filed on Dec. 9 2013 now issued as U.S. Pat. No. 8 769 538 which is a continuation of U.S. patent application Ser. No. 13 602 936 filed Sep. 4 2012 now issued as U.S. Pat. No. 8 631 422 which is a continuation of U.S. patent application Ser. No. 12 772 609 filed on May 3 2010 now issued as U.S. Pat. No. 8 261 289 which is a continuation of U.S. patent application Ser. No. 11 171 595 filed on Jun. 30 2005 now issued as U.S. Pat. No. 7 779 421 the benefit of priority of each of which is claimed hereby and each are incorporated herein by reference in their entirety.

Various embodiments relate generally to techniques for transaction processing for example to processing business events in a networked environment.

Business is increasingly being conducted in an electronic environment over network connections. This has rapidly increased the speed with which business is conducted but has also presented a number of challenges for the infrastructure that supports these business transactions.

For example an infrastructure has to perform a variety of actions each time a directive is issued by a seller or merchant. If a particular merchant issues a large number of directives or if a plurality of merchants all attempt to issue directives at largely the same time then latency can be experienced and processing load within the infrastructure can become degraded.

Typically directives of a merchant or other participant involved in a business transaction are queued and sequentially processed in a synchronized fashion This processing linearity does not fully take advantage of more modern multiprocessing architectures which means that latency may be experienced while some resources of the business infrastructure remain idle or underutilized. In a similar manner the processing associated with the actions is typically not multithreaded which means that multiple instances of a same action cannot process concurrently within a same environment.

In addition typical business transaction architectures are tightly coupled which means that changes to the processing flow or the applications processing within the processing flow necessitate additional changes that have to be propagated throughout the infrastructure. As a result businesses have been reluctant to address latency and load problems associated with their infrastructure rather the desired approach has been to add additional hardware resources. But as stated above in many cases existing hardware resources are underutilized and adding more hardware resources does little to address the real problem. Moreover in order to take advantage of more modern architectures the processing flow of the business infrastructure has to be modified and decoupled. The perceived enormity of this task associated with modifying the processing flow of a business s infrastructure has kept businesses on the sidelines and has not produced any viable solutions to infrastructure problems.

Methods and systems for business event processing are described. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of various embodiments. It will be evident however to one of ordinary skill in the art that other embodiments may be practiced without these specific details.

In various embodiments a request to perform an operation on a listing previously published by an online marketplace may be received. At least one additional listing having certain characteristics in common with the listing may be identified from a plurality of previously published listings including the listing. The operation may be automatically performed on the at least one additional listing. Other features will be apparent from the accompanying drawings and from the detailed description that follows.

The business event processing system includes a producer interface a transport interface A and a consumer interface A. The transport interface may further include a plurality of data store tables B. Furthermore the consumer interface A may also include a plurality of consumers B. The three interfaces A and A are decoupled from one another which means that each interface A and A do not depend on the other remaining interfaces A or A for their operation and functionality.

The producer interface generates events which are managed by the transport interface A and processed by the consumer interface A. Each of the interfaces A and A will now be discussed in turn.

The producer interface is an application a service and or an Application Programming Interface API that includes a suite of modules that when accessed perform one or more functions. The producer interface detects directives or actions occurring within a business infrastructure that warrant the creation of an event. The directives or actions are generated by resources. A resource may be an automated program a service and or a user.

The producer interface is designed to monitor or detect when a resource makes a directive or an action that is being watched by the producer interface . When such a directive or action is detected the producer interface generates one or more events to define a subsequent action that the business event processing system should process. An event is defined in terms of business concepts that are relevant to a business entity e.g. good service user account bid transaction etc. .

In some embodiments the producer interface may not directly interface with the transport interface A or may do so in an indirect fashion. For example the producer interface may write to data store tables managed or monitored by the transport interface A. These writes may generate triggers that the transport interface A recognizes and processes in the manners discussed herein and below. In fact the producer interface may directly and indirectly interface with the transport interface in a variety of fashions such as but not limited to communicate through a data access layer DAL on a transactional basis to write to tables managed by the transport interface A communicate via a data store trigger writes to a table that causes a trigger to file altering the transport interface A and or communicates through a database view where the event table is overlaid on a primary table . Thus the producer interface can directly or indirectly communicate with the transport interface A in a variety of configurable manners. The teachings presented herein are not to be limited to any particular method of interfacing or communication.

Each event is associated with an event type. Moreover each event may include a payload associated with information supplied by the resource or added by the producer interface . The payload portion of the event may be generically represented as name value pairs such as price 10 00 where price is the name and 10.00 is the value associated with the name. Again each payload for a particular event can include a plurality of name value pairs some of which are acquired or derived from the directives of the resource and some of which are added by the producer interface . It should be noted that in some cases the producer interface may solely generate the payload without any information supplied by the resource.

Some example events corresponding payloads and event types for an online auction business event processing system are provided in the following table. It is noted that the example events and payloads are presented for purposes of illustration and that other desired events payloads and types of services may be used with the teachings presented herein.

The producer interface may execute a variety of calls to its API or to functions of its service for purposes of recognizing an event assigning an event type and forming or constructing the payload associated with an event. It should also be noted that the producer interface may be threaded and portions of it may operate in duplicate on the same or different machines. In this manner the producer interface can generate events their event types and payloads from a plurality of resources concurrently and in parallel within a same machine or across a plurality of machines. The producer interface is thus scalable and can be deployed in a distributed fashion over a plurality of servers within a network. Production of events and their accompanying metadata is achieved in an asynchronous manner that is conducive to the dynamic and chaotic online business environment.

Once the producer interface generates an event identifies its event type and forms its payload data the producer interface represents this data as an intermediate data format such as a generic object or via an extensible markup language XML definition XSD . This global and generic object of representation is then communicated from the producer interface to the transport interface A. Each generically represented event may also include with its metadata a unique transaction identifier an identifier for the resource the producer interface and other desired information. An event is not lost if a consumer B is down events are available when the consumer B becomes operational after having been down.

The transport interface A includes one or more modules or services to acquire an event s name its type its unique transaction identifier and its payload. The event type and transaction identifier are used by the transport interface to manage events produced and received from the producer interface .

For example in an embodiment the transport interface A maintains one or more data store tables B. Each table B is used to house entries for a particular event type and includes the events indexed thereon by transaction identifier. Each row of a table B is associated with a specific event type and includes a unique transaction identifier and unique payload. Because the size of some tables B may be large for a given event type multiple tables B may be used for any given event type.

In an embodiment there are three types of tables B used by the transport interface A in managing events and in distributing events to the consumer interface A. A first table type B are queue tables that house events to be delivered to the consumer interface entries within any given queue table are associated with a single event type as described above. Alternatively a queue table may contain multiple different event types and may be searchable on desired event types. A second table type B is a high watermark table. The high watermark table identifies specific consumers B of the consumer interface A and a transaction identifier representing a last event that was delivered to that particular consumer B. This permits the transport interface A to determine what has and has not been delivered to particular consumers B. A third type of table B is a retry or abandon table this table B is used to determine which events are to be resent to which consumers B based on policies and which are to be abandoned based on policies.

In an embodiment there is yet another type of table called a reserved event range table where a range of events which define a batch are reserved for a given consumer instance which is a thread . Once this reservation is complete the high water mark is moved up to match then last event specified by this reservation.

The transport interface A uses one or more conversion or generic interfaces to acquire an event s name its transaction identifier its event type and its payload. Armed with this information the transport interface A internally determines how to store and represent this information for purposes of delivering it to one or more consumers B of the consumer interface A. Additionally the transport interface A uses one or more conversion or generic interfaces associated with the consumer interface A to acquire identifiers for consumers B armed with this information the transport interface A internally determines how to distribute events to those consumers B and determines how to manage the events such as when it is appropriate to resend events to a particular consumer B or when it is appropriate to abandon attempts to send events to a particular consumer B.

The transport interface A provides an external interface that permits the producer interface to communicate events that are produced in a generic representation format and an external interface that permits the consumer interface A to request events for processing.

In an embodiment the transport interface A determines which event types to deliver to the consumer interface A based on consumer identifiers. A particular consumer B of the consumer interface A is mapped or associated with a given event type this mapping permits the transport interface to deliver the appropriate events to a consumer B that is designed to process actions in response to a given event type. In some cases a particular consumer B may register and be associated with multiple different event types.

According to an embodiment the transport interface A delivers groupings of events fir a given event type to particular consumer B as a batch of events. The last transaction identifier for the last event in the batch is recorded along with an identifier for the consumer B in a high watermark table B.

In some cases the transport interface A delivers a same event associated with a given event type to a plurality of different consumers B of the consumer interface A. This may occur when a given event type warrants multiple disparate actions to be processed within the business event processing system and each consumer B is designed to handle a different one of the actions.

The transport interface A is designed to abstract and hide the details associated with storing and distributing events for processing. The modules associated with distributing and managing the events may be multithreaded and processed in duplicate across the same or different machines or devices. The tables B uniquely house specific events such that even if the transport interface A is multithreaded deadlocks and conflicts are resolved when access is made to a specific one of the tables B for a given event which is uniquely identified by a transaction identifier.

The consumer interface A includes a plurality of consumers B. Consumers B consume the events and their payloads and perform actions within the business event processing system in response to receiving events from the transport interface A. Each consumer B is associated with a specific event type or with multiple different event types for which they have registered via the transport interface A. Multiple consumers B may exist for a given event type. Therefore multiple actions may be processed on a single event when two consumers B are both designed to process or take some action for a given event type associated with the single event.

The consumers B are functions operations applications or services that are designed to take some action in response to an event of its type and the payload associated with the event. The consumers B may be multithreaded and processed in duplicate within a same machine or across different machines.

During operation of the business event processing system the producer interface generates events and their associated metadata and puts the events in generic formats or objects which are communicated to the transport interface A. The transport interface A stores manages and distributes the events and their payloads to specific consumers B of the consumer interface A. In some cases events are distributed in batches to the consumers B. The consumers B asynchronously process and or concurrently process the events. The size of the batches and or how often consumers B receive batches may vary based on profiles configurations or environmental settings and the batch sizes or frequency of receiving batches may be dynamically changed in real time during execution. In some embodiments the events and their metadata may be communicated and processed in stream formats such as Universal Resource Locator URL stream formats or Java stream formats.

In an embodiment statistical information about the generated events their distribution and their processing may be gathered in generic objects or formats by each of the interfaces A and A. The statistical information may be visualized on a screen in configurable and real time formats or housed in one or more togs or data stores for subsequent evaluation and or reporting. In addition security may be used to verify the authenticity of any given event and the parties associated with that event.

As an example processing scenario associated with the business event processing system . Consider an electronic auctioning and bidding system such as eBay that implements the business event processing system as an underlying infrastructure. Assume that a merchant desires to re list 10 000 auctions associated with selling a pair of jeans such that the original starting price of 20 is to be reduced to 10. Here the producer interface detects a re list operation as a directive from a resource the merchant in response thereto the producer interface generates 10 000 events or type relist and formulates the payload for each event with an item number and a new price. The transport interface A then stores all 10 000 events in a same table B or multiple distributed tables B and asynchronously delivers different batches of the events to different instances of a same consumer B for concurrent processing. The duplicate instances of the consumers B asynchronously update data stores within eBay to reflect the 10 000 jeans are to be relisted with a new start price of 10.

The above example was presented for purposes of illustration only and is not intended to limit the embodiments presented herein. The example illustrates that processing may be asynchronously achieved in a concurrent fashion to more efficiently load balance and effectuate business transactions in a networked environment.

The business event processing system includes an event producer an event consumer A and an event distributor A. In an embodiment the business event processing system also includes one or more event tables B a high watermark table C and or one or more event consumer services B. Each of these will now be discussed in turn.

In an embodiment the event producer is an event producer means for detecting events and for generating generically represented events and their associated payloads and other metadata. An example of one such means for detecting events and generically representing the events was presented above with respect to the producer interface of the business event processing system depicted in .

According to an embodiment the event consumer A is a means for processing actions in response to events received from an event distributor A. The means for processing actions includes a plurality of services B each service B is associated with a specific event type. There may be duplicate processing instances of any given service B such that the services B may be multithreaded. The services B may process event asynchronously and concurrently with one another on a same or a plurality of machines. An example of one such means for processing actions or events was presented above with respect to the consumer interface of the business event processing system depicted in .

In an embodiment the event distributor A is an event distributing means for distributing one or more events to the event consumer A. The events are produced by the event producer . Services B of the event consumer A process the events. The event distributing means maintains events received from the event producer in event tables B. Each row of a particular event table B represents a unique event and each table B is associated with a given event type. Multiple event tables B may exist for a single event type.

The event distributing means also maintains a high watermark table C. The high watermark table C records the identity of services B along with a last processed event for each of those services B. The event distributing means distributes batches of events housed within a given event table B to specific services B associated with that event table based on event type.

Different batches may be provided to different instances of the same service B and same batches may be provided to different services B where each different service B performs a different action for the same event type. An example event distributing means was presented above with respect to the transport interface A of the business event processing system depicted in .

The business event processing system may be implemented as a series of decoupled services or a decoupled set of object oriented interfaces. The event producer may be multithreaded and processed in duplicate on the same or a variety of machines and so may the event consumer A and the event distributor A. In an embodiment the event producer may be associated with an actions being monitored for an online merchant or actions being monitored for a login resource associated with a business service.

The business event processing system provides a processing flow for business transactions in a tripartite fashion. Each portion of the flow is independent of the remaining portions. Thus the processing of the event producer is independent of the event consumer A and the event distributor A. Likewise the processing of the event consumer A is independent of the processing of the event producer and the event distributor A. Finally the processing of the event distributor A is independent of the event producer and the event consumer A. This decoupled processing flow within the business event processing system permits events to be detected generated housed distributed and processed in an asynchronous and concurrent fashion across a single machine or a plurality of machines cooperating with one another. This improves the efficiency of the resources of a business enterprise and reduces processing latency associated with processing business transactions.

The event processing service may be processed across multiple processors and may be multithreaded meaning that duplicate instances of the event processing service may process within the same environment and cooperate with one another to perform the processing of the method depicted in .

At the event processing service produces an event using a producer service associated with the event processing service. The producer service is designed to monitor actions or directives of resources. When a particular action or directive is detected by the producer service the producer service generates an event which will subsequently be processed by a consumer service associated with the event processing service.

In an embodiment at the producer service may add a variety of parameter data or other metadata to a produced event as name value pairs. The event may also be associated with a specific unique identifier such as a transaction number or identifier. Moreover the event is associated with an event type that represents a class or category associated with a given produced event. The parameter data the event type and the transaction identifier represent metadata associated with a produced event.

The event and its metadata are then generically represented in an intermediate format e.g. XML XSD etc. or encapsulated in a generic a global class interface such as when an objected oriented implementation is being used.

At the generic formatted or represented event is then sent to a transport service associated with the event processing service. The uses a conversion or translation service or public methods associate with an interface of the generic event to acquire the metadata associated with the event. In an embodiment at an identity of a particular table for an event type associated with the event is acquired and the event is populated to that particular table. The table is acquired based on the event type by the transport service and the event is entered within the table based on its transaction identifier. The table is searchable by the transport service.

In still another embodiment at the transport service maintains a last event processed for a given action of a consumer service associated with the event processing service. The last event processed may be housed in a high watermark table such as the one depicted and described with the business event processing system of . The last event processed assists the transport service in determining which events have and have not been delivered or distributed to a given action of the consumer service. This assist in managing the events produced by the producer service and determining when they have been delivered and thus processed.

At the transport service distributes the event in the generic format that it received from the producer service from its tables to the consumer service. The consumer service includes one or more actions assigned to the event based on the event s type assignment. Accordingly at once the consumer service has the event from the transport service the actions are processed. In an embodiment the event may be processed by two different actions associated with the same event type. In another embodiment at at least two of the actions that process the event concurrently process or process in parallel. In still another embodiment at at least two of the actions that process due so in an asynchronous fashion.

In yet more embodiments at the processing associated with the sub services of the event processing service namely the producer service the transport service and the consumer service each maintain statistics associated with the event. The type of information captured and the manner in which the information is evaluated consumed and presented can be configured based on the desires of a business enterprise.

At the business event framework service detects actions associated with a resource. In an embodiment at the resource may be an online merchant an automated application or a user logging into a business service. The resource issues commands or directives associated with an interface of the resource. These commands or directives are monitored by the business event framework service and when detected cause the business event framework service to generate events in response thereto at .

Once an event is generated the business event framework service at assigns an event type or class to each generated event. Events may also include other metadata such as a unique transaction identifier and a payload. The payload may be derived wholly or partly from information supplied by the resource. Alternatively the payload may be generated entirely by the business event framework service.

At the events are stored along with their accompanying metadata within one or more data store tables. The specific table is identified based on the event type assigned to a given event. In some cases at two events with the same event type may be stored in two different data store tables. This may be useful when there are an excessively large number of events with the same event type. This provides for improved load balancing of events.

At batches of events having the same event type are distributed to select consumer services for processing. The size of each batch is configurable and the frequency with which a consumer receives a batch is configurable. This configuration may also be altered or modified at runtime. In an embodiment at a single batch may be distributed to two different consumer services. This may occur when two different consumer services perform different actions on a same event having the same event type. For example one consumer service may use one portion of the payload to detect fraud conditions for a login event type while another consumer service may use another portion of the payload to authenticate a resource for access to a business service.

In some embodiments at the business event framework service may actively load balance the batches that are distributed to the consumer services. The conditions for load balancing may be configurable. For example the load balancing may consider processing loads associated with the consumer services and or processing loads associated with machines or devices that are executing the consumer services.

In yet another embodiment at the business event framework service may asynchronously distribute the batches to the consumer services and distribute the batches concurrently to the consumer services. Additionally the consumer services may concurrently process with one another.

In still further embodiments at the business event framework service may execute across a plurality of processors in a parallel fashion.

Additionally the methods and may be implemented as instructions in machine accessible and readable medium. The medium when loaded to a machine and accessed performs the methods and . The medium does not have to reside on a single medium and may be logically associated across a plurality of different media. Additionally the medium may be removable medium that is interfaced to a machine and uploaded to the machine for processing. Still further the instructions may be prefabricated within memory or storage of a machine or downloaded from one machine to another machine over a network. In addition the instructions may be multithreaded meaning that duplicate instances of the instructions may process within the same machine or across different machines without colliding with one another and in cooperation with one another.

An API server and a web server are coupled to and provide programmatic and web interfaces respectively to one or more application servers . The application servers host one or more marketplace applications and payment applications . The application servers are in turn shown to be coupled to one or more databases servers that facilitate access to one or more databases .

The marketplace applications provide a number of marketplace functions and services to users that access the commerce system . The payment applications likewise provide a number of payment services and functions to users. The payment applications may allow users to accumulate value e.g. in a commercial currency such as the U.S. dollar or a proprietary currency such as points in accounts and then later to redeem the accumulated value for products e.g. goods or services that are made available via the marketplace applications . While the marketplace and payment applications and are shown in to both form part of the commerce system it will be appreciated that in alternative embodiments the payment applications may form part of a payment service that is separate and distinct from the commerce system .

Further while the system shown in employs client server architecture other embodiments are of course not limited to such an architecture and could equally well find application in a distributed or peer to peer architecture system for example. The various marketplace and payment applications and could also be implemented as standalone software programs which do not necessarily have networking capabilities.

The web client accesses the various marketplace and payment applications and via the web interface supported by the web server . Similarly the programmatic client accesses the various services and functions provided by the marketplace and payment applications and via the programmatic interface provided by the API server . The programmatic client may for example be a seller application e.g. the TurboLister application developed by eBay Inc. of San Jose Calif. to enable sellers to author and manage listings on the commerce system in an off line manner and to perform batch mode communications between the programmatic client and the network based commerce system .

The business event processing applications provide the novel business event processing services described herein. These applications are coupled or interfaced with a variety of other applications in a commerce system .

The commerce system may provide a number of listing and price setting mechanisms whereby a seller may list or publish information concerning goods or services for sale a buyer can express interest in or indicate a desire to purchase such goods or services and a price can be set for a transaction pertaining to the goods or services. To this end the marketplace applications are shown to include one or more auction applications which support auction format listing and price setting mechanisms e.g. English Dutch Vickrey Chinese Double Reverse auctions etc. . The various auction applications may also provide a number of features in support of such auction format listings such as a reserve price feature whereby a seller may specify a reserve price in connection with a listing and a proxy bidding feature whereby a bidder may invoke automated proxy bidding.

A number of fixed price applications support fixed price listing formats e.g. the traditional classified advertisement type listing or a catalogue listing and buyout type listings. Specifically buyout type listings e.g. including the Buy It Now BIN technology developed by eBay Inc. of San Jose Calif. may be offered in conjunction with an auction format listing and allow a buyer to purchase goods or services which are also being offered for sale via an auction for a fixed price that is typically higher than the starting price of the auction.

Store applications allow sellers to group their listings within a virtual store which may be branded and otherwise personalized by and for the sellers. Such a virtual store may also offer promotions incentives and features that are specific and personalized to a relevant seller.

Reputation applications allow parties that transact utilizing the network based commerce system to establish build and maintain reputations which may be made available and published to potential trading partners. Consider that where for example the network based commerce system supports person to person trading users may have no history or other reference information whereby the trustworthiness and credibility of potential trading partners may be assessed. The reputation applications allow a user for example through feedback provided by other transaction partners to establish a reputation within the network based commerce system over time. Other potential trading partners may then reference such a reputation for the purposes of assessing credibility and trustworthiness.

Personalization applications allow users of the commerce system to personalize various aspects of their interactions with the commerce system . For example a user may utilizing an appropriate personalization application create a personalized reference page at which information regarding transactions to which the user is or has been a party may be viewed. Further a personalization application may enable a user to personalize listings and other aspects of their interactions with the commerce system and other parties.

The network based commerce system may support a number of marketplaces that are customized for example for specific geographic regions. A version of the commerce system may be customized for the United Kingdom whereas another version of the commerce system may be customized for the United States. Each of these versions may operate as an independent marketplace or may be customized or internationalized presentations of a common underlying marketplace. These are represented as the internationalization applications in .

Navigation of the network based commerce system may be facilitated by one or more navigation applications . For example a search application enables key word searches of listings published via the commerce system . A browse application allows users to browse various category catalogue or inventory data structures according to which listings may be classified within the commerce system . Various other navigation applications may be provided to supplement the search and browsing applications.

In order to make listings available via the network based commerce system as visually informing and attractive as possible the marketplace applications may include one or more imaging applications utilizing which users may upload images for inclusion within listings. An imaging application also operates to incorporate images within viewed listings. The imaging applications may also support one or more promotional features such as image galleries that are presented to potential buyers. For example setters may pay an additional fee to have an image included within a gallery of images for promoted items.

Listing creation applications allow sellers conveniently to author listings pertaining to goods or services that they wish to transact via the commerce system and listing management applications allow sellers to manage such listings. Specifically where a particular seller has authored and or published a large number of listings the management of such listings may present a challenge The listing management applications provide a number of features e.g. auto re listing inventory level monitors etc. to assist the seller in managing such listings. One or more post listing management applications also assist sellers with a number of activities that typically occurs post listing. For example upon completion of an auction facilitated by one or more auction applications a seller may wish to leave feedback regarding a particular buyer. To this end a post listing management application may provide an interface to one or more reputation applications so as to allow the seller conveniently to provide feedback regarding multiple buyers to the reputation applications .

Dispute resolution applications provide mechanisms whereby disputes arising between transacting parties may be resolved. For example the dispute resolution applications may provide guided procedures whereby the parties are guided through a number of steps in an attempt to settle a dispute. In the event that the dispute cannot be settled via the guided procedures the dispute may be escalated to a third party mediator or arbitrator.

A number of fraud prevention applications implement fraud detection and prevention mechanisms to reduce the occurrence of fraud within the commerce system .

Messaging applications are responsible for the generation and delivery of messages to users of the network based commerce system such messages for example advising users regarding the status of listings at the commerce system e.g. providing outbid notices to bidders during an auction process or to provide promotional and merchandising information to users .

Merchandising applications support various merchandising functions that are made available to sellers to enable sellers to increase sales via the commerce system . The merchandising applications also operate the various merchandising features that may be invoked by sellers and may monitor and track the success of merchandising strategies employed by sellers.

The network based commerce system itself or one or more parties that transact via the commerce system may operate loyalty programs that are supported by one or more loyalty promotions applications . For example a buyer may earn loyalty or promotions points for each transaction established and or concluded with a particular seller and may be offered a reward for which accumulated loyalty points can be redeemed.

The disk drive unit includes a machine readable medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the architecture the main memory and the processor also constituting machine readable media.

The software may further be transmitted or received over a network via the network interface device .

While the machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of methods described herein. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media and carrier wave signals.

Thus a method and system to provide novel business event processing have been described. Although various embodiments have been described with reference to specific example embodiments it will be evident that various modifications and changes may be made to these embodiments without departing from their broader spirits and scopes. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

The above description is illustrative and not restrictive. Many other embodiments will be apparent to those of ordinary skill in the art upon reviewing the above description. The scope of embodiments should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

The Abstract is provided to comply with 37 C.F.R. 1.72 b and will allow the reader to quickly ascertain the nature and gist of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims.

In the foregoing description of the embodiments various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting that the claimed embodiments have more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate example embodiment.

