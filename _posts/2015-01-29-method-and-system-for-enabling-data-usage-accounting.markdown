---

title: Method and system for enabling data usage accounting
abstract: A method and system for enabling data usage accounting are described herein. As an example, the method can be practiced on a computing device that has secure applications and unsecure applications installed thereon. Initially, a request for a data session can be received through a secure application. The request for the data session can be intercepted, and the request for the data session can be modified to cause the request to be re-directed back to the secure application. In addition, a connection can be initiated to enable retrieval of data in response to the request and to enable an accounting of the data session. In one arrangement, this process of modifying the request for a data session may be restricted to secure applications such that data usage of the secure applications is tabulated separately from data usage associated with the unsecure applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09232013&OS=09232013&RS=09232013
owner: OpenPeak Inc.
number: 09232013
owner_city: Boca Raton
owner_country: US
publication_date: 20150129
---
This patent application is a continuation in part of U.S. patent application Ser. No. 14 573 601 filed on Dec. 17 2014 which is a continuation of U.S. patent application Ser. No. 14 478 066 filed on Sep. 5 2014 now issued as U.S. Pat. No. 8 938 547 on Jan. 20 2015 each of which is incorporated herein by reference in its entirety.

The present description relates to methods and systems for data usage accounting and more particularly to methods and systems for data usage accounting in computing devices with secure enterprise applications and personal applications.

In an effort to increase productivity many employers allow their workers to conduct business related to the employer on their personal mobile devices. In some cases employers also provide some of their employees with company issued mobile devices. In either arrangement an employer understands that a single device may include sensitive data related to that employer in addition to data that is personal to the employee. Several advances have been made in an effort to protect an employer s data in these circumstances. For example OpenPeak Inc. of Boca Raton Fla. has developed solutions that enable a mobile device to include both enterprise and personal data but that isolate the enterprise data from the personal data. As part of these solutions an employee may download secure applications that may be used to conduct transactions related to the enterprise.

Because the employee s device may include both personal and secure applications it may be desirable to bifurcate the process of data usage accounting. In particular the employer may wish to receive an accounting of the data usage associated with the secure applications that have been installed on the employee s device on behalf of the employer. This accounting however needs to be separate from data accounting that may be attributable to unsecure applications that the employee may have installed for personal use.

A method of data usage accounting is described herein. This method may be particularly applicable in a setting that includes both secure applications and unsecure applications although it is not limited to such a configuration. Via one of the secure applications a request to access data can be received in which the request is intended for a content provider via a system service. The request that is intended for the content provider via the system service can be intercepted and modified to cause the system service to direct the request back to the secure application instead of the content provider. Further a connection can be established with the content provider for the request through the secure application to enable data usage accounting of data that is returned by the content provider. An amount of data that is carried over the established connection and that is associated with the secure application can be determined. As an example the amount of data that is determined in relation to the secure application can be separate from an amount of data that is determined on behalf of one or more unsecure applications.

Establishing the connection with the content provider can include establishing a secure connection with the content provider through the secure application. As an example the secure connection with the content provider can be a virtual private network VPN connection that is individual to the secure application. The method can also include the steps of receiving content from the content provider at the secure application and forwarding the received content from the content provider to the system service for processing. As another example modifying the intercepted request can include modifying an original uniform resource identifier URI of the request by changing the URI associated with the content provider.

In another embodiment the method can also include the steps of receiving data from the content provider over the established connection and reading the data to determine whether a redirect from the content provider is present. If or when a redirect from the content provider is detected the redirect from the content provider can be modified to ensure that the system service will direct the redirect to the secure application. Receiving data from the content provider may include receiving from the content provider a playlist that includes a plurality of original URIs and modifying the redirect can include modifying at least some of the URIs of the playlist. In one non limiting example the system service can be a media playback service and the media playback service is a system application that is also an unsecure application.

Another method of data usage accounting in a computing device that has one or more secure applications installed thereon is presented herein. This method can include the steps of receiving an original URI request through one of the secure applications intercepting the original URI request and modifying the original URI request such that the modified original URI request is to be directed back to the secure application once the modified original URI request has been initially processed by a system service. The method can also include the step of tracking data usage associated with the modified original URI request.

In one embodiment the modified original URI request can be converted back to the original URI request and a connection can be established between the secure application and a content provider for the original URI request. The computing device can also have one or more unsecure applications installed thereon. Tracking data usage associated with the modified original URI can include tracking data usage associated with the modified original URI through the secure application. The method can also include the step of segregating the data usage tracking associated with the modified original URI from data usage tracking associated with the unsecure applications. Moreover establishing the connection between the secure application and the content provider can include establishing a secure connection between the secure application and the content provider. As an example the secure connection can be individual to the secure application.

Yet another method of data usage accounting on a computing device is described herein. On a computing device that has secure applications and unsecure applications installed thereon multiple sessions of the secure applications can be conducted. An amount of data that is consumed during the sessions of the secure applications can be determined. A data usage total can be tallied for the secure application sessions such that the data usage total for the secure applications is separate from a data usage total associated with the unsecure applications.

A computing device is also described herein. The computing device can include a display that is configured to display both secure and unsecure applications that are installed on the computing device. The device can also include a processing unit that is communicatively coupled to the display. The processing unit can be configured to receive a data access request through one of the secure applications in which the data request is supported by an unsecure application that is a system service of the computing device. The processing unit can also be configured to cause the data access request to be intercepted prior to processing by the unsecure application and to cause the data access request to be modified. Such a modification can cause the unsecure application to direct the data access request to the secure application instead of an intended location of the data access request. The processing unit can also be configured to cause a connection between the secure application and the intended location of the data access request to be established. The computing device may also include a calculation unit communicatively coupled to the processing unit. The calculation unit can be configured to determine an amount of data that is associated with the data access request through the secure application.

As an example the connection between the secure application and the intended location of the data access request can be a VPN connection that is individual to the secure application. As another example the data access request can be a uniform resource locator URL based on hypertext transfer protocol HTTP or hypertext transfer secure protocol secure HTTPS . The computing device can also include memory that can be associated with the secure application and can be configured to store the data access request for mapping the data access request to the modified data access request. In one embodiment the processing unit can be further configured to convert the modified data access request back to its original form to establish the connection between the secure application and the intended location.

Another method for enabling data usage accounting is described herein. This method may be practiced on a computing device that has secure applications and unsecure applications installed thereon. A request for a data session can be received through a secure application. The request for the data session can be intercepted and modified to cause the request to be re directed back to the secure application. In addition a connection can be initiated to enable retrieval of data in response to the request and to enable an accounting of the data session.

As an example initiating the connection can include initiating the connection between the secure application and an external network entity. As another example initiating the connection can include establishing the connection between a hub application and an external network entity.

In one arrangement the intercepted request may be a call to the operating system from the secure application or from a system framework and the call may include addressing information for an external entity. In another arrangement intercepting the request and modifying the request may be performed transparently such that the secure application generates the request for the data session in a native fashion. As another example a listening socket can be created and modifying the request for the data session may include re writing the addressing information of the request for the data session to point to the listening socket.

In some cases it can be determined that the computing device is connected to a Wi Fi connection. If so a setting can be activated that may prevent the interception and modification of the request for the data session from occurring.

Another method of enabling segregated data usage accounting on a computing device is described herein. In particular a secure application that is installed on the device can be launched and the device may have unsecure applications installed thereon in addition to the secure application. Through the secure application content from a content provider can be requested. The content request can be natively redirected back to the secure application. In addition a connection can be established to enable retrieval of the requested content and to enable an accounting of data of the retrieved content. The native redirection of the content request may only occur for the secure application and not for the unsecure applications.

Natively redirecting the content request back to the secure application may include intercepting the content request from the secure application or a system framework and modifying the content request from the secure application or the system framework to cause the redirection of the content request to the secure application. As an example modifying the content request may include changing addressing information associated with the requested content. As another example a listening socket can be created to receive the content request redirected back to the secure application in which changing the addressing information can include re writing with addressing information associated with the listening socket. The listening socket can be torn down once the connection to enable retrieval of the requested content and to enable the accounting of data is initiated or established.

In one arrangement addressing information for a final destination of the content request can be retrieved and the final destination addressing information can be used to establish the connection to enable retrieval of the requested content and to enable an accounting of data of the retrieved content. Moreover the content request may be natively redirected back to the secure application and the connection to enable retrieval of the requested content and to enable the accounting of data of the retrieved content may be established only when the computing device is connected to a predetermined cellular network.

A computing device is also described herein. The computing device can include a display that is configured to display both secure and unsecure applications that are installed on the computing device and a processing unit that is communicatively coupled to the display. The processing unit may be configured to receive a data access request through one of the secure applications and to cause a transparent redirection of the data access request back to the secure application. The processing unit may also be configured to cause a connection of the secure application to be established to enable an accounting of data associated with the data access request such that data usage of the secure applications is tabulated separately from data usage associated with the unsecure applications.

The computing device may also include a calculation unit that is communicatively coupled to the processing unit and that is configured to perform the accounting of the data associated with the data access request. As an example the processing unit can be further configured to report to an external entity predetermined threshold counts that are based on the accounting performed by the calculation unit.

In another arrangement the processing unit can be configured to cause the data access request to be transparently redirected by causing the data access request to be intercepted and causing the data access request to be modified to enable the transparent redirection of the data access request back to the secure application. The processing unit may be further configured to cause the data access request to be intercepted from the secure application or a system framework.

The computing device may also include a Wi Fi communications stack. Further the processing unit can be further configured to cause the transparent redirection of the data access request to be deactivated when the computing device is connected to a Wi Fi network through the Wi Fi communications stack. The processing unit can be further configured to cause a temporary listening socket to be generated to enable the transparent redirection of the data access request.

Another computing device is described herein. The computing device can include a display that is configured to display both secure and unsecure applications that are installed on the computing device and a processing unit that is communicatively coupled to the display. The processing unit can be configured to receive a data access request through one of the secure applications and cause a transparent redirection of the data access request from an operating system of the computing device back to the secure application. The processing unit can also be configured to cause a connection of the secure application to be established to enable an accounting of data associated with the data access request such that data usage of the secure applications is tabulated separately from data usage associated with the unsecure applications.

In one arrangement the processing unit can be configured to cause the transparent redirection of the data access request from the system by the modification of a uniform resource locator URL associated with the data access request or by re writing addressing information associated with the data access request. In another arrangement the processing unit can be configured to cause the transparent redirection of the data access request by intercepting the data access request from the secure application or from a system framework of the computing device. The processing unit can be further configured to cause a listening socket to be created to enable the transparent redirection of the data access request from the system service or the operating system.

Further features and advantage as well as the structure and operation of various embodiments are described in detail below with reference to the accompanying drawings. It is noted that this description is not limited to the specific embodiments presented herein. Such embodiments are provided for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The features and advantages of the embodiments herein will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

The following detailed description refers to the accompanying drawings that illustrate exemplary embodiments however the scope of the present claims is not limited to these embodiments. Thus embodiments beyond those shown in the accompanying drawings such as modified versions of the illustrated embodiments may nevertheless be encompassed by the present claims.

References in the specification to one embodiment an embodiment an example embodiment one arrangement an arrangement or the like indicate that the embodiment or arrangement described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment or arrangement. Furthermore when a particular feature structure or characteristic is described in connection with an embodiment or arrangement it is submitted that it is within the knowledge of one skilled in the art to implement such feature structure or characteristic in connection with other embodiments or arrangements whether or not explicitly described. The word among as it is used throughout this description should not necessarily be interpreted as requiring exchanges or interaction among three or more applications irrespective of grammar rules. The word a is not necessarily limited to a singular instance of something as it may mean one or more.

Several definitions that apply throughout this document will now be presented. The term exemplary as used herein is defined as an example or an instance of an object apparatus system entity composition method step or process. The term communicatively coupled is defined as a state in which two or more components are connected such that communication signals are able to be exchanged directly or indirectly between the components on a unidirectional or bidirectional or multi directional manner either wirelessly through a wired connection or a combination of both. A computing device is defined as a component that is configured to perform some process or function for a user and includes both mobile and non mobile devices. The term computer readable storage medium is defined as one or more components that are configured to store instructions that are to be executed by one or more processing units.

An application is defined as a program or programs that perform one or more particular tasks on a computing device. Examples of an application include programs that may present a user interface for interaction with a user or that may run in the background of an operating environment that may not present a user interface while in the background. The term operating system is defined as a collection of software components that directs a computing device s operations including controlling and scheduling the execution of other programs and managing storage input output and communication resources. A processing unit or processor is defined as one or more components that execute sets of instructions and the components may be disparate parts or part of a whole unit and may not necessarily be located in the same physical location.

The terms memory memory element or repository are defined as one or more components that are configured to store data either on a temporary or persistent basis. The term shared memory is memory a memory element or a repository that is accessible directly or indirectly by two or more applications or other processes. An interface is defined as a component or a group of components that enable s a device to communicate with one or more different devices whether through hard wired connections wireless connections or a combination of both. An input output device is defined as a device that is configured to at least receive input from a user or a machine that is intended to cause some action or other effect on a component with which the input device is associated. A display is defined as an apparatus that presents information in visual form and may or may not receive input through a touch screen.

The term file system is defined as an abstraction that is used to organize store and retrieve data. The term secure application is defined as an application that has been modified from its original form to restrict communications between the application and unauthorized programs applications or devices and to restrict operation of the application based on policy or to alter augment or add features associated with the operation of the application or any combination thereof or in the case of the application not being modified an application that is part of a secure workspace that is protected from data exchanges with applications that are part of a personal or an unsecure workspace. A target application is defined as an application that has been selected for conversion into a secure application. An unsecure application is defined as an application that has not undergone the modification required to convert the application into a secure application and as such is unable to obtain data from a secure application in view of an obfuscation scheme employed by that secure application or is an application that is not part of a secure workspace and is restricted from accessing data from the secure workspace. A hub application is defined as an application that receives input from one or more secure applications and establishes connections with external entities on behalf of the secure applications that provide such input. A virtual machine is defined as a platform independent execution environment that emulates a physical machine.

The term personal workspace is defined as a workspace profile or partition that is configured to contain the personal content and unsecure applications or other unsecure programs associated with a user of a computing device on which the personal workspace sits. The term secure workspace is defined as a workspace profile or partition that is configured to contain secure content secure applications and other secure programs and requires some form of authentication to be accessed.

The term content provider is defined as a site that offers data for consumption by a computing device. The term system service is defined as an application or a set of applications on a computing device that offer one or more features for access by an unsecure application or a secure application. A secure connection is defined as a connection in which at least some portion of the data that is exchanged over the connection is encrypted or otherwise obfuscated from unauthorized parties entities or processes. To consume data means to receive data from a source transmit data to a recipient or both. An external network entity means an entity such as a component or a service that is part of a network that is external to or located remotely from a computing device. An external entity is defined as an entity to which an application wishes to establish a connection.

As explained earlier solutions have been developed that enable a mobile device to include both personal and enterprise data. Accordingly it may be useful to segregate data usage accounting associated with the enterprise side from usage associated with the personal space. This process can enable an enterprise to determine how much data that is consumed by the mobile device is the responsibility of the enterprise.

In view of this need a method and system for enabling data usage accounting are described herein. As an example the method can be practiced on a computing device that has secure applications and unsecure applications installed thereon. Initially a request for a data session can be received through a secure application. The request for the data session can be intercepted and modified to cause the request to be re directed back to the secure application. Subsequently a connection can be initiated to enable retrieval of data in response to the request and to enable an accounting of the data session. This connection for example can be initiated by the secure application. Moreover this technique can be limited to the secure applications on the computing device meaning the unsecure applications are unaffected.

Through this arrangement data tracking can be conducted for virtually any secure application or otherwise any application associated with an enterprise. This tracking can also be kept apart from any accounting performed for a user s personal usage. Accordingly an enterprise can accurately determine its accountability for data usage by a computing device that includes both enterprise and personal data.

Referring to an example of a block diagram of the system architecture of a computing device is shown. In this arrangement the computing device can include a hardware layer a kernel layer and a libraries layer which may include a plurality of native libraries. This architecture may also include a runtime environment a system server a secure framework and an application layer .

In one arrangement the hardware layer may include any number and type of hardware components such as one or more displays one or more input output I O devices one or more processing units and any suitable type and number of memory devices and interfaces . Examples of the I O devices include speakers microphones physical keypads etc. In addition the display can serve as an I O device in the form of a touch screen display. The interface can be configured to support various types of communications including wired or wireless and through any suitable type of standards and protocols. As an example the interface can include one or more cellular communication stacks and one or more Wi Fi communication stacks to enable the computing device to conduct bidirectional communications with one or more cellular networks and one or more Wi Fi networks respectively. In one arrangement the hardware layer may also include a calculation unit which can be configured to calculate or determine or at least assist in the determination or calculation of data usage totals associated with any type of session conducted on the computing device including those originating from the application layer . The calculation unit may be a separate component or may be part of the processing unit . In another arrangement the calculation unit may be remotely located such that it is external to the computing device . In such a case information regarding the sessions may be sent to a remote location that supports the calculation unit and the unit can perform its calculation functions once it receives the information.

In addition the runtime environment can support any suitable number of virtual machines and core libraries although a virtual machine may not be needed in other arrangements such as where native code is employed. The system server can serve as an abstraction for the underlying layers for the applications in the application layer and can provide numerous system services for the applications. As is known in the art a system framework which may be part of an application s process can be employed to enable interaction with the system server or other components. In this example the application layer may include any number of unsecure applications and any number of secure applications one of which may be a core secure application . The secure framework can function in a manner similar to that of a conventional framework but the secure framework can facilitate the encapsulation of a number of secure applications to selectively restrict their data exchanges with the unsecure applications . In particular the secure framework can be configured to intercept and modify certain calls from the secure applications prior to passing them to the system server . In one arrangement these calls may be from the secure applications or the system framework.

In many cases the unsecure applications are associated with the personal data of a user of the computing device . In contrast the secure applications are typically associated with confidential or otherwise sensitive information that belongs to or is associated with an enterprise or some other organization and the user of the device may work for such an entity. In one arrangement a virtual partition or workspace may be created on the computing device in which the secure applications and the core secure application are part of a secure workspace and the unsecure applications are part of a personal workspace . In certain cases a user may be required to provide authentication information such as a password PIN or biometric data to gain access to the secure workspace or to any individual or group of secure applications .

In some cases some of the unsecure applications may be system services that provide features or functionality that is associated with the type of operating system that is installed on the computing device . In some cases the system service may be an application or a set of applications that live in the background and support different tasks associated with the operating system of the device . System services may facilitate the exposure of low level functions of the hardware layer and the kernel layer to the higher level application layer . Many system services may operate with elevated privileges in comparison to other applications. For example a common system service that is typically found on computing devices is a media player which processes and presents media data for a user. Another example of a system service may be a photo viewer which presents digital images for the user. As those skilled in the art will appreciate the examples listed here are not meant to be limiting and there are other system services that may be available on the computing device .

In another embodiment the system services may be trusted unsecure applications that secure applications are permitted to share or otherwise exchange data with. An example of a trusted unsecure application may be an unsecure application that is by default installed on the computing device such as by the manufacturer of the device or a wireless carrier or other entity that provides services to the device . Another example of a trusted unsecure application may be an unsecure application that is listed on an application whitelist for one or more secure applications . By being part of the application whitelist the trusted unsecure application may be preapproved for data exchange with the relevant secure application s . Additional information on application whitelisting can be found in U.S. patent application No. 61 973 898 filed on Apr. 2 2014 which is incorporated by reference herein in its entirety.

As noted above the secure applications and the system architecture may be configured to enable at least some of the calls to the system server to be intercepted. There are several processes available for such a process. For example U.S. patent application No. 62 033 142 which was filed on Aug. 5 2014 and is herein incorporated by reference in its entirety describes a method and system in which some of the system classes are overridden by classes associated with the core secure application which can allow runtime hooks to be applied against certain system calls. Based on this technique some of the calls that the secure applications or a system framework make to the system services can be intercepted and modified a process that will described below.

As another example U.S. patent application Ser. No. 14 205 661 which was filed on Mar. 12 2014 and U.S. patent application Ser. No. 14 205 686 which was also filed on Mar. 12 2014 each of which is herein incorporated by reference in its entirety present methods and systems by which target applications are encapsulated as secure applications for distribution. Once installed and initiated on a computing device the encapsulated application described in these references is loaded into memory and runtime hooks are set to enable application programming interface API calls from the secure application to be intercepted. Similar to the description above at least some of the calls to the system services from the secure applications or a system framework can be modified once they are intercepted. Other information on the process of intercepting certain functions of secure applications can be found in U.S. Pat. No. 8 695 060 issued on Apr. 8 2014 which is also herein incorporated by reference in its entirety.

As described in these incorporated references a secure application can be configured to provide additional features that may not have been otherwise available prior to it being converted into a secure application . As an example a secure application can be arranged to track the amount of data that it uses for a particular session. This process enables an administrator to determine data usage on a per application basis. Of course secure applications may be managed in accordance with many other policies or configurations as is known in the art.

While many applications or target applications are able to be converted into secure applications there are some applications that may not be so modified. For example many system services are default applications that are provided as part of the base configuration of the computing device . The developer of the operating system that provides these system services may not permit the system services to be converted into secure applications . As such many system services may remain as unsecure applications on the computing device . Accordingly the operation of a system service may not be amenable to being controlled or managed as is the case with secure applications . The relevance of this condition will be explained below.

In one embodiment a hub application may be part of the application layer . The hub application may serve as a connection point for any number of secure applications to enable the secure applications to connect to any suitable external entity including various network components. In particular if a secure application requires a connection with an external entity the secure application can request the hub application to facilitate the communication. The hub application can accept such requests from any of the secure applications including from a single secure application at a time or from multiple secure applications simultaneously. In accordance with the description herein such a technique can facilitate the accounting of data usage associated with secure applications . In one example the hub application can be a daemon or some other process that runs in the background. Because the hub application accepts requests from the secure applications it may be considered as part of the secure workspace and may not be permitted to accept requests from the unsecure applications . As an option a similar arrangement can be made for the unsecure applications or alternatively the hub application can be configured to accept requests from both secure applications and unsecure applications .

Referring to a system that shows the computing device in communication with one or more remote servers is shown. One or more communication networks may facilitate the communications between the computing devices and the remote servers . In this example the computing device may be a mobile computing device although the principles described herein may apply to desktop computers or other fixed equipment. In addition a mobile computing device may be for example a smartphone laptop tablet or other devices that may be carried by an individual. The network s may be composed of various types of components to support wireless or wired communications including both . The network s may also be configured to support local or wide area communications or both . The remote servers may host any number of web sites that offer content that may be retrieved by the computing device and may also be configured to accept data from the computing device . Because the servers offer content they may also be referred to as content providers although the term content provider is certainly not limited to this particular example.

When operating the computing device a user may wish to access data from any one of the remote servers . In some cases the data access request may originate from an unsecure application . In the standard flow the unsecure application may sometimes forward the request to a relevant system service . For example if a user wishes to view a video associated with one of the remote servers through an unsecure application the unsecure application passes the request to a media player of the computing device . The media player then retrieves the data from the appropriate server and presents such data to the user.

In the case of a secure application a similar request would normally be passed to the media player as well. In addition the media player would conventionally establish a connection with the relevant remote server and would present the requested data to the user. But because the system services are typically not permitted to be converted into secure applications implementing the feature of data accounting in them as can be done with secure applications may not be possible. In this instance difficulties are presented in determining the percentage of data usage that is associated with secure applications in comparison to the consumption of data by unsecure applications .

A solution is described here however that enables such an accounting to take place. In particular the initial data request from the secure application can be intercepted and modified prior to being passed to the media player. In view of the modification the media player or other system service can direct the request back to the secure application and a connection can be established between the secure application and the appropriate remote server to facilitate the exchange of data between the secure application and the remote server . This redirection of the request through the secure application can enable an accounting of the amount of data that is associated with this particular session a feature that can be incorporated into secure applications . Accordingly an accurate accounting of data usage associated with at least some or all secure applications on the computing device is now possible. As previously mentioned the counting of the data associated with a secure application is not limited to being performed by the secure application or even the computing device as the calculation can be performed remotely.

This arrangement can enable an entity to determine the percentage of data usage that is attributable to it and to the user on a personal basis. Because data usage may be segregated between enterprise use and personal use the enterprise may be able to craft more accurate data plans with wireless carriers or other similar entities. Moreover the user who may own the computing device would understand that the user would not be charged for data usage associated with that user s work or business and that the user would only be paying for personal data consumption.

Referring to a method of data usage accounting is shown. The method however may include additional or even fewer steps or processes in comparison to what is illustrated in . Moreover the method is not necessarily limited to the chronological order that is shown in . In describing the method reference may be made to and although it is understood that the method may be practiced with any other suitable systems and components and may take advantage of other suitable processes.

At step in a setting that includes both secure applications and unsecure applications a request to access data can be received via one of the secure applications in which the request is intended for a content provider via a system service. The request intended for the content provider via the system service can be intercepted as shown at step . At step the intercepted request can be modified which can cause the system service to direct the request back to the secure application instead of the content provider. A connection can be established with the content provider for the request through the secure application to enable data usage accounting of data that is returned by the content provider as shown at step . Additionally at step content from the content provider can be received at the secure application and the received content from the content provider can be forwarded to the system service for processing as shown at step . An amount of data that is carried over the established connection associated with the secure application can be determined as shown at step .

Referring to a user may wish to access data through for example a secure application that is installed on the computing device . As an example the user may desire to retrieve some type of content such as video through the secure application . The content may need to be retrieved from one of the remote servers . Conventionally the data access request would be passed to the relevant system service and the system service would fetch the content from the remote server . Here however the data access request may be intercepted prior to being handled by the operating system and can be modified to direct the request back to the secure application instead of the remote server . Reference will be made to to help explain this process.

In an example of an interaction between the secure application the system service and the remote server is shown. In the initial step the data access request is received and is intercepted and modified. In this example the data access request is for video that is stored at one of the remote servers that is associated with a website or some other form of digital content and the system service is a media playback application. As such in accordance with earlier discussion the API that is associated with the media playback service can be hooked.

Based on conventional techniques the uniform resource indicator URI related to this data request may be a uniform resource locator URL with the associated content available via the hypertext transfer protocol HTTP or the hypertext transfer protocol secure HTTPS . As part of the modification process the URL may be changed prior to being passed to the system service . The modification of the URL in one embodiment may be based on a port number that is provided by the operating system. For example the secure application may create a listening socket on a loopback interface by requesting a socket and port number from the operating system. As is known in the art the loopback interface can support inter process or inter app communications on the computing device . The requested port may be a predetermined value or may be simply a request to the operating system to provide an available port number. Continuing with the example the URL may be converted into a local host URL that includes the assigned port number and the rest of the information from the original URL. The modified URL may then be passed across to the system service in this case the media player. As will be explained later multiple listening sockets and ports may be requested from the operating system as part of this process.

Consider the following specific but non limiting example. A user may select a link through a secure application which may have the following exemplary URL associated with it 

As noted earlier the secure application may request a socket and port value from the operating system and the port value can factor into the modified URL. In this example the original URL may be transformed into the following local host URL 

Here the port value 4444 is now part of the URL string which can cause the system service to point back to this port created by the secure application . In addition as can be seen the original hostname can be encoded in the t parameter the original path can be encoded in the p parameter and the original parameters can be encoded in the r parameter. Thus the modified URL can include the port value and the remote information can be added as parameters in the modified URL. A similar example for an HTTPS request will be presented below.

In some arrangements as part of this process the secure application can create a proxy when the data is initially requested through the secure application . The proxy can act as the intermediary between the system service and the remote server . In doing so the proxy may listen in on any sockets that were created for the overall modification of the data access request. As an example each secure application can be individually configured to generate the proxy for relevant data requests that it receives.

In another arrangement the secure application may record a copy of the information associated with the original data request and can map that information to the redirect address that has been created. For example in the example above the secure application may record the information associated with the original URL in any suitable database such as the memory of and can map this information to the port that was assigned to the modified URL. This way the secure application can easily determine the original remote server when it receives the modified URL. In an alternative embodiment the information of the original data request may not need to be stored and mapped to the redirect address. In the URL example the original information from the URL can simply be obtained from the modified URL because the original information may be part of the modified information.

Moving back to in the second step the modified data access request can cause the system service to direct the request back to the secure application instead of the original remote server . That is the system service will establish a connection with the secure application via the port that the secure application created. In view of the mapping process described above the secure application is able to determine the original data access request and can establish a connection with the relevant content provider such as an appropriate remote server . In particular based on the example above the secure application can determine the original URL request and can open a connection with the location specified by the original URL. This process is reflected in the third step of . At this point the secure application can fetch the content from the remote server and can return this content to the system service for processing as shown in the fourth step. The user may then consume the requested data similar to a normal session. As will be explained below there may be scenarios where a similar re routing process can be performed to enable data usage tracking but without the invocation of a system service .

As previously noted the secure application may be configured to track data usage. In this case the secure application can determine an amount of data that is carried over the connection that is established with the remote server . This can include both incoming i.e. from remote server to secure application and outgoing i.e. from secure application to remote server content. For example the calculation unit of can work with the secure application to tally the amount of data consumed by this particular session. In addition because each session associated with this particular secure application can be tracked a cumulative amount of data usage for the secure application over a certain time period can be determined. This process may also be conducted for all or at least some of the other secure applications that are installed on the computing device . As previously mentioned the data usage associated with the secure applications may also be counted at a location that is remote to the computing device .

If the secure applications are associated with an enterprise the enterprise can determine the amount of data usage that is tied to each of its secure applications . This feature can enable the enterprise to determine data usage on the device that is solely attributable to it. As a result data usage tracking associated with the secure applications can be segregated from data usage that originates from the unsecure applications.

In one embodiment the connection that is established between the secure application and the remote server can be a secure connection. For example as is known in the art the secure application can be configured to establish virtual private network VPN connections with remote locations. Such a VPN connection is individual to the secure application and is different from a system level VPN. If desired however the connection between the secure application and the remote server is not required to be a secure connection. In addition in another embodiment the secure application may use a system level VPN.

The description above may apply to other protocols that facilitate the exchange of data. For example HTTPS traffic may also be tracked in accordance with the procedures presented herein. In one embodiment additional steps can be taken when dealing with HTTPS traffic to ensure accurate and complete accounting. For example if a user is accessing an HTTPS link through the secure application the original URL may be modified similar to the HTTP examples above but the connection between the system service and the secure application may be left in the open.

Consider the following example. If an HTTPS request is generated the secure application can convert the HTTPS request to an HTTP request when the secure application modifies the URL for purposes of directing the system service back to the secure application . That is the secure application can change the connection type of the data request from a secure connection to an open connection when the data request is modified. Referring back to the URL example above the following HTTPS URL may be received 

The secure application can determine that this is an HTTPS request and can modify the URL. An exemplary conversion is presented here 

As reflected in the string the HTTPS request is converted to an HTTP request. As a result the connection between the system service and the secure application can be out in the open. As will be explained below this feature can enable the secure application to handle re directs from the remote server .

As can also be seen in the string the s parameter can provide an indication that the original URL was an HTTPS request. Accordingly when the secure application establishes the connection between it and the remote server an HTTPS connection can be created. In other words the system service may not be responsible for establishing the HTTPS connection and the secure application may be in control of any security related handshaking and getting the encryption keys in place. The session between the secure application and the remote server can be a transport layer security TLS connection which can terminate at the secure application .

As explained earlier the secure application may be configured to arrange VPN connections in an individual manner. Such an application level VPN can support any type of traffic that is exchanged between the secure application and the remote server including both HTTP and HTTPS streams. In other words the ability of the secure application to provide an application level VPN does not impede the ability of the secure application to modify data access requests and then convert them back to their original form as described above. Further these techniques can be practiced if the secure application is using a system level VPN or is not relying on a VPN connection at all.

As is known in the art some initial data access requests are answered with a re direct which instructs the requesting source to another destination to retrieve the desired content. For example in the case of an HTTP request the requesting device may receive an HTTP re direct from the server which causes the device to generate another HTTP request based on the re direct destination. In addition in some cases a URL playlist may be sent from the server which may include a plurality of URLs. This particular feature may support HTTP live streaming a protocol that enables a client to select from a number of different alternate streams containing the same material encoded at a variety of data rates which can allow the streaming session to adapt to the available data rate.

In one arrangement the secure application may be configured to account for these re directs. For example if the initial data request is an HTTP request and the remote server returns an HTTP re direct the secure application may transform that HTTP re direct in accordance with the modification process described above. By doing so the secure application can ensure that the system service establishes the new re direct connection with the secure application . As such when the secure application detects a re direct the secure application can request another socket and port from the operating system to account for the new destination that originates from the re direct. The secure application can then open a connection between itself and the new and appropriate remote server . This process can be expanded to account for re direct playlists such that socket port pairs are generated when needed for the URLs that make up the playlists.

As can be gleaned from this example the secure application may be required to detect the re directs in the incoming streams. If the original data access request is not based on a secure protocol like HTTPS then the secure application is easily able to detect the re directs. If the original request is based on a secure protocol however complications may arise because the traffic being streamed to the system service may be encrypted. As noted above when dealing with a secure protocol the termination point for the secure connection can be placed at the secure application not the system service . As a result the secure application can decrypt the incoming traffic and can detect the re directs similar to how it would for an unsecure protocol. Thus as an example re directs can be handled for both HTTP and HTTPS.

In some cases other components may assist in the calculation of data for purposes of usage accounting. For example some system services may offer notifications based on certain events that may be related to data usage. In one particular example the secure applications can register for certain callbacks from the system services that are equipped to provide such notifications. As an example if a data session is initiated through a secure application the system service can provide one or more notifications that inform the secure application of the start of the session and its eventual ending. Statistics related to the amount of data that was consumed during the session can be incorporated into the notifications which the secure application can use to track its data usage. The overall total usage related to all or at least some of the secure applications can be determined which can allow the segregation of data consumption between secure and personal profiles as described earlier. In this case however the modification of the data access requests is not required and the system service may fetch data in its conventional manner. When available with the system services this feature may be useful for data accounting particularly when application level VPNs are not incorporated into the secure applications .

The description herein has been presented primarily in terms of a secure application handling the modification of data requests and the data usage tracking. The description however is not so limited. In particular these features can be implemented into an unsecure application such that data usage can be tracked for these types of applications on an individual basis. Similarly the system service that is involved in this process is not limited to a media player. In fact any system service that is involved in the exchange of data with a remote location may be applicable to the description provided herein. For example other system services that apply here may include a texting application a dialer or any other application that facilitates or otherwise supports voice communications a video or camera application or a map application or other application that supports mapping features. In fact the description herein may apply to any type of application whether secure or unsecure that may involve the consumption of content or the use of services in which it may be necessary to distinguish between personal use of such content and services and secure or workspace or enterprise use of the content and services.

In some cases it may not be necessary to invoke the system service to handle a request for a data session. That is the request for the data session may not require the launching of a separate application to handle the request. For example the secure application may be a secure web browser through which a user may attempt to retrieve some data. As is known in the art in prior art cases an application may work with the operating system of a computing device to establish a connection to an external entity such as a web server. In a typical mobile device setting the application may be configured to generate calls for an application programming interface API defined by the portable operating system interface POSIX . In response the operating system can establish a connection to the external entity on behalf of the application.

Similar to the description above techniques can be implemented that enable secure applications to have such calls natively redirected back to them for the purpose of establishing a connection with the appropriate external entity and for enabling an accounting of the data session. This process can also make possible a scheme in which data usage for secure applications is counted separately from that associated with unsecure applications .

Referring to a method for enabling data usage accounting is shown. The method however may include additional or even fewer steps or processes in comparison to what is illustrated in . Moreover the method is not necessarily limited to the chronological order that is shown in . In describing the method reference may be made to the drawings attached hereto although it is understood that the method may be practiced with any other suitable systems and components and may take advantage of other suitable processes.

At step a request for a data session can be received through a secure application and at step in response a listening socket can be created. The request for the data session can be intercepted as shown at step and the request for the data session can be modified to cause the request to be re directed back to the secure application as shown at step . At step a connection can be initiated to enable retrieval of the data in response to the request and an accounting of the data session. At step the listening socket can be torn down. In addition at decision block it can be determined whether a connection with a Wi Fi network is in place. If no the method can resume at decision block . If yes a setting can be activated that prevents the request for the data session from being intercepted and modified as shown at step .

To help explain the method reference will be made to which presents an example of an interaction between a secure application and the system server with the secure framework facilitating the operation. Although the secure framework may be considered part of and can work in conjunction with the secure application to carry out the operations described herein reference may in some cases be made solely to the secure application when explaining this interaction for purposes of convenience. Initially a user may be interacting with the secure application and the user may wish to retrieve some content from for example an external entity. As noted earlier the computing device may have both secure applications and unsecure applications installed thereon.

In response to the user interaction the secure application may generate a request for a data session. As an example the request may be a POSIX connect call although the principles outlined herein are not limited to such an arrangement. This request may include addressing information that is intended to be used to establish the connection with the external entity. Examples of addressing information include the following arguments socket specifies the file descriptor associated with the socket address points to a sockaddr structure containing the peer address and address len specifies the length of the sockaddr structure pointed to by the address argument. Other exemplary arguments and parameters may also be applicable here. In addition the term addressing information is defined as data that is configured to facilitate or enable a connection with one or more destinations. This request may be from the secure application or the system framework associated with the secure application . In either case in response the secure application can generate a listening socket on the loopback interface similar to the procedures previously described. In one arrangement the listening socket can be a temporary socket in that it can be torn down once it serves its purpose of establishing a connection through the secure application .

Once the listening socket is created the secure application can intercept the request for the data session. This interception can occur because the secure framework can be shimmed between the system framework and the operating system and can be configured to recognize predetermined calls for modification or other processing while allowing others to pass unfettered. In any event the data session request can be modified by re writing portions of the request based on the newly created listening socket. For example the addressing information of the connect call may be re written with the addressing information associated with the listening socket. As shown in the modified data session request can then be passed to the system server . This modified call may still be in the native format or in the form that is normally used by the secure application and other applications on the computing device to make calls to the operating system. That is the native version of the relevant function can be called at this stage where it is modified to include the new addressing information for the listening socket.

As part of the modification process the original addressing information or at least some portion of it can be stored and assigned to the listening socket. The original addressing information includes the final destination address and can be used to establish the intended connection as will be explained below. As another part of this process a return can be generated to inform the system framework or the secure application that the requested connect is in progress.

When the operating system receives the data session request the operating system can redirect the data session request back to the secure application as opposed to the intended final destination address. In particular the data session request is returned to the listening socket based on the re written addressing information that replaced the original addressing information. In this case the operating system can wire up a connection between the relevant socket of the secure application and the listening socket through the loopback interface. Once the redirected connection is established on the listening socket the secure application can retrieve the original addressing information and can initiate and establish the connection with the external entity using the original addressing information. Specifically a connect socket can be generated and this connect socket can be used to establish a connection with the appropriate socket of the external entity. Further once the connection with the intended external entity has been initiated or completed the secure application can tear down the listening socket to return system resources.

In this case similar to the process associated with the system service redirection described above the redirection here can be transparent to the secure application or the system framework. That is no changes are required to be made to the secure application or the system framework to enable the interception and modification of the data session request. These objects can continue to make their native calls when seeking to exchange data with an external entity and they are unaware that their calls are being manipulated in this manner. The terms transparent redirection of a request or transparently redirecting a request are defined as a redirection of a request in which the source of the request is unaware of its redirection and examples of a request include a call command or function. The terms native redirection of a request or natively redirecting a request are defined as a redirection of a request in which the source of the request maintains its reliance on native or pre existing protocols or structure to generate or to facilitate the request.

The connection between the secure application and the external entity may support various types of formats or protocols. In some cases the connection to the external entity may be through an application level virtual private network VPN as the secure application may be configured to provide such a feature. The connection may also utilize a system level VPN if desired. In this case the socket of the external entity can be the appropriate socket of the VPN as opposed to a native socket for the back end location. Moreover the connection with the external entity is not necessarily limited to being a secure connection as unsecure connections may be used.

As noted earlier the computing device in which the previously described techniques may be practiced may include a Wi Fi communications stack. The Wi Fi stack can enable the device to exchange data with external entities over a Wi Fi network using any of the protocols within that family for which the device is configured. In some cases it may not be necessary to track data usage associated with secure applications or even unsecure applications when the device is camped on a Wi Fi network. In fact it may not be necessary to do so when the device is operating on any non cellular network or other networks that do not bill users for access. In this instance when the device is using a Wi Fi network or other non billable or free network for data access a setting in the device may be activated to prevent the process of redirecting data access requests. That is because users are typically permitted to access Wi Fi networks for free it may not be necessary to track data usage when the device is using such a network thereby obviating the need to intercept and modify the data access requests in accordance with the processes described above. When the computing device leaves the Wi Fi network and returns to the billing network the setting can be deactivated and the process of data usage counting can begin again.

In another arrangement the tracking of data usage may be limited to a particular network such as a predefined cellular network. Thus the processes described herein may only be executed on this predetermined network. When the computing device is operating on any other network the redirection process may not be carried out. For example if the computing device is roaming on a network or operating on a network that is not its home network the setting that prevents the redirection process may be activated even though use of the roaming network may cause the user to incur data usage charges. Nonetheless if desired data usage tracking based on the techniques described herein may be conducted on roaming networks or Wi Fi or other free access networks.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. It will be understood by those skilled in the relevant art s that various changes in form and details may be made therein without departing from the spirit and scope of the subject matter as defined in the appended claims. Accordingly the breadth and scope of the present subject matter should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved.

