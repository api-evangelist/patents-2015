---

title: System and method for detecting malicious software using malware trigger scenarios in a modified computer environment
abstract: Disclosed system and methods for malware testing of software programs. An example method includes storing a plurality of malware trigger scenarios specifying different sets of malware trigger events known to trigger malicious behavior in software programs; in response to obtaining a software program, modifying a computer environment for operating the software program by creating malware trigger events associated with a selected one of the plurality of malware trigger scenarios; analyzing an execution of the software program in the modified computer environment in response to the malware trigger events; upon detecting that the software program exhibits malicious behavior, performing remedial actions on the software program; and upon detecting that the software program exhibits no malicious behavior, selecting a different malware trigger scenario from the plurality of malware trigger scenarios for malware testing of the software program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09230106&OS=09230106&RS=09230106
owner: Kaspersky Lab AO
number: 09230106
owner_city: Moscow
owner_country: RU
publication_date: 20150128
---
This application is a continuation of U.S. application Ser. No. 14 052 718 filed on Oct. 12 2013 which claims benefit of priority under 35 U.S.C. 119 a d to a Russian Application No. 2013129555 filed on Jun. 28 2013 both of which are incorporated by reference herein.

The disclosure relates generally to the field of information security and more specifically to systems methods and computer program products for detecting malicious software by performing behavioral malware analysis using malware trigger scenarios.

The amount of malicious software also known as malware is steadily growing. The number of computing platforms for which malware is created is also increasing and malicious applications for Android OS and Apple iOS are no longer a rarity. Therefore antivirus companies are faced with new challenges to create new methods of detecting malware.

Known methods for detection of malicious software which were successful in detecting malware in the past often fail to detect new types of malware. Currently the most popular malware detection methods include heuristic analysis signature analysis behavioural analysis and hash sum analysis. The signature and hash sum techniques are well suited for detecting known malware i.e. software that has already been investigated and a specimen of which has been entered in a database of malicious software . However these techniques may fail to detect modified malware code. The heuristic analysis overcomes this shortcoming but may be ineffective in detecting obfuscated malware. The behavioural analysis often proves most effective in detecting modified malware but even this method has a number of shortcomings. For example in order to analyze behaviour of a program using this method the program needs to be triggered first which also constitutes the major shortcoming of behavioural analysis since malicious software before being detected can already inflict harm to the system on which it has been triggered. Moreover the behavioural analysis adversely affects the productivity of the system as a whole and the tested program in particular.

Disclosed systems methods and computer program products for detecting malicious software by performing behavioral malware analysis using malware trigger scenarios. In one example aspect a method includes storing a plurality of malware trigger scenarios specifying different sets of malware trigger events known to trigger malicious behaviour in software programs in response to obtaining a software program modifying a computer environment for operating the software program by creating malware trigger events associated with a selected one of the plurality of malware trigger scenarios analyzing an execution of the software program in the modified computer environment in response to the malware trigger events upon detecting that the software program exhibits malicious behaviour performing remedial actions on the software program identifying one or more malware trigger events triggering the malicious behaviour and placing the identified malware trigger events in an optimized malware trigger scenario of popular events and upon detecting that the software program exhibits no malicious behaviour selecting a different malware trigger scenario from the plurality of malware trigger scenarios for malware testing of the software program.

In one example the remedial actions comprise blocking program application programming interface API function calls and quarantining the software program exhibiting malicious behaviour.

In one example the method further comprises executing the software program in the modified computer environment using a plurality of interrupt handlers operable to monitor application events operating system OS events and hardware events of the computer environment.

In one example the method further comprises creating corresponding malware trigger events associated with each of remaining malware trigger scenarios and repeating the execution of the software program in the modified computer environment in response to the corresponding malware trigger events.

In one example executing the software program in the modified computer environment comprises analyzing application program interface API functions of the software program and selecting from the plurality of malware trigger scenarios a malware trigger scenario having similar API calls.

In one example the method further comprises determining and storing malicious behaviour templates in an order of popularity each template having corresponding malware trigger events wherein executing the software program in the modified computer environment comprises identifying a template among the malicious behaviour templates based on the malware trigger events and analyzing the execution of the software program in the modified computer environment based on defined characteristics of the template.

In one example the method further comprises determining an order of popularity of the plurality of malware trigger scenarios and repeating the execution of the software program in the modified computer environment in accordance with the determined order of popularity of the plurality of malware trigger scenarios.

In one example a system for malware testing of software programs comprises a data store storing a plurality of malware trigger scenarios specifying different sets of malware trigger events known to trigger malicious behaviour in software programs a hardware processor coupled to the data store and configured to modify in response to obtaining a software program a computer environment for operating the software program by creating malware trigger events associated with a selected one of the plurality of malware trigger scenarios analyze an execution of the software program in the modified computer environment in response to the malware trigger events upon detecting that the software program exhibits malicious behaviour perform remedial actions on the software program identify one or more malware trigger events triggering the malicious behaviour and place the identified malware trigger events in an optimized malware trigger scenario of popular events and upon detecting that the software program exhibits no malicious behaviour select a different malware trigger scenario from the plurality of malware trigger scenarios for malware testing of the software program.

In one example a computer program product stored on a non transitory computer readable storage medium comprises computer executable instructions for malware testing of software programs including instructions for storing a plurality of malware trigger scenarios specifying different sets of malware trigger events known to trigger malicious behaviour in software programs in response to obtaining a software program modifying a computer environment for operating the software program by creating malware trigger events associated with a selected one of the plurality of malware trigger scenarios analyzing an execution of the software program in the modified computer environment in response to the malware trigger events upon detecting that the software program exhibits malicious behaviour performing by the hardware processor remedial actions on the software program identifying one or more malware trigger events triggering the malicious behaviour and placing the identified malware trigger events in an optimized malware trigger scenario of popular events and upon detecting that the software program exhibits no malicious behaviour selecting a different malware trigger scenario from the plurality of malware trigger scenarios for malware testing of the software program.

The above simplified summary of example aspects serves to provide a basic understanding of the invention. This summary is not an extensive overview of all contemplated aspects and is intended to neither identify key or critical elements of all aspects nor delineate the scope of any or all aspects of the invention. Its sole purpose is to present one or more aspects in a simplified form as a prelude to the more detailed description of the invention that follows. To the accomplishment of the foregoing the one or more aspects of the invention include the features described and particularly pointed out in the claims.

Example aspects of the present invention are described herein in the context of system method and computer program product for detecting malicious software by performing behavioral malware analysis using malware trigger scenarios. Those of ordinary skill in the art will realize that the following description is illustrative only and is not intended to be in any way limiting. Other aspects will readily suggest themselves to those skilled in the art having the benefit of this disclosure. Reference will now be made in detail to implementations of the example aspects as illustrated in the accompanying drawings. The same reference indicators will be used to the extent possible throughout the drawings and the following description to refer to the same or like items.

The disclosed malware detection techniques provide broad control over events of execution of a tested program at different levels of a computer system including software OS and hardware by utilizing malicious behaviour scenarios for detecting activation of harmful functions of the program. The term hardware as used herein includes central and peripheral hardware of the computer device such as CPUs storage devices communication modules e.g. GSM Bluetooth etc. The computer system that is used to support the execution of tested applications and programs is called the program execution environment. The computer system may have a multilevel architecture shown in described next.

To understand execution of the application it is desirable to monitor all levels of architecture of the OS and hardware if possible. In one example aspect this can be achieved by modifying elements of the levels of architecture of the OS and adding new elements the monitor each level of the computer architecture. This modification to the computer system will not only allow monitoring of the execution of the application at all levels of its execution on the computer system but will also allow to control the execution of the application at any level of the system architecture with the possibility of halting the execution of the application at any of the levels of the computer architecture.

Therefore the modified computer systems A and B allow collection of information about behaviour of applications executed on these systems at multiple levels of the system architecture. In one aspect system modification may also include adding a function capable of halting the execution of the applications at any architecture level or introducing corrections in their execution. For this reason the modified computer systems A and B may control execution of the application and prohibit execution of the application in case harmful or malicious actions of application are detected.

Malicious software is highly diverse it varies in its function purpose and the nature of its interaction with the computer devices on which it runs. Even after starting an application in the systems A and B and obtaining information on events caused by the execution of the application at each system level it is still may not be possible to determine whether the tested application is harmful or clean. This is primarily because the application may require a number of conditions i.e. malware trigger events to activate its malicious functionality. Such events may include but not limited to communication ports being switched on specific type of active windows open network connection status date and time type of device on which the investigated application was started operating system version presence of other applications on the device current location of the device active actions of the user incoming calls and SMS device turned on rebooting of the device and so on.

Therefore to detect a malicious program it may be desirable to not only monitor the software and hardware of the computer device on which this program executes but also to create certain conditions in the environment of the application while it is being executed. shows one example implementation of a system for malware detection which utilizes malware trigger scenarios for detection of malicious software. As used herein a scenario refers to a list of malware trigger events that trigger malicious activity in the tested application. In one example aspect the scenario may be executed by the control module of system .

Particularly in one aspect the control module of system may be configured to select a malware trigger scenario from scenario database start application on the system and create malware trigger events described in the selected scenario. The control module may have feedback with the levels and and the execution of the scenario may involve the creation by the levels and of the malware trigger events under the command of the control module . During its execution the application may cause a series of events on each level and involved in the execution of the application . The functions at modified levels and or in handlers of may record information about events of execution of the application and the control module may accumulate this information. The collected information may be analyzed by the behaviour analysis module . If as a result of the analysis the behaviour of the application is found to be harmful the control module may take remedial action such as halting the execution of the application and place it in quarantine. If no harmful activity was detected in the behaviour of the application the control module may select another scenario from database for testing of the application. This cycle may continue until the application produces a harmful activity or until the control module uses up all available scenarios.

In one example aspect the scenario database is generated on remote antivirus server and transmitted to the user computer system by means of an update.

In one example aspect the system may also include a collector which gathers information on which events in the environment and which trigger malicious activity in the application . Based on the data gathered by the collector the scenario generator may create optimized scenarios and transmit them to the scenario database . Optimization of scenarios is used to improve the performance of the malware detection system. In one example aspect optimization of scenarios is performed as follows On the basis of the information collected by the collector a list of popular malware trigger events is compiled for different malware trigger scenarios. The scenario generator then forms the popular scenarios from the list of popular malware trigger events and transmits them to the scenario database . In the scenario database the scenarios are ordered in order of popularity so that control module selects most popular scenarios first for testing applications for presence of malware followed by less popular scenarios.

In one example aspect the information gathered by the collector may also be used by a template classifier which classifies malicious behaviour templates used by the behaviour analysis module for purpose of conducing malware analysis of the tested application. The template classifier determines which malware behaviour templates work with which malware trigger events and establishes the popularity of the malicious behaviour templates. In the template database the templates may be placed in order of popularity of use as established by the template classifier . For example there is a malware trigger event of an incoming call and the most popular programs activating its malicious function in such a scenario incoming call are for example spyware programs which track the user s incoming calls and reroute this information to the hacker. The template classifier immediately matches up this malware trigger event i.e. incoming call with the behaviour template characteristic of this type of malware. If in the analysis of the programs triggered by the indicated malware trigger scenario no corresponding behaviour template was identified all remaining templates may be used for the malware analysis. Such a solution makes it possible to increase the operating efficiency of the malware detection system .

In one example aspect the Android Runtime level and specifically its virtual machine Dalvik may be modified according to principles disclosed herein to generate a virtual machine DAlvik in order to test applications for presence of malware. Various malware trigger events may be created in the environment e.g. simulating the pressing of the buttons of the application interface arrival of new messages or calls rebooting of the system change of network registration and so on . The application is started by control module in a separate process not having a visible user interface and not having any system authorizations i.e. the application is not able to cause any harm to the environment. The virtual machine Dalvik records information on the events caused by the tested application in response to the various malware trigger events created by the control module . The recorded information is analyzed by the analysis module . If on the basis of the analysis by comparing the recorded information on behaviour against malware behaviour templates from the template database the tested application is found to be malicious the control module may delete this application from system for example.

An example of the operation of the system for detection of malware is to detect on the computer system a spyware program which waits for the arrival of an SMS at the computer system and reroutes it to the remote hacker s device. Having started this application to check its behaviour no events indicating a malicious function i.e. sending of incoming messages to the hacker s device will be detected in the information gathered by the behaviour analyzer since the malware trigger event of an incoming SMS message is necessary to activate the malicious function. Therefore the tested application may be started in the modified virtual machine of computer system and control module may create in the virtual machine event s of the receipt of a SMS message in accordance with one of the selected malware trigger scenarios. The virtual machine records information on the events caused by the execution of the tested application . Since an event occurred in the environment of the spyware program that activates the malicious function the analysis module will detect events characteristic of malicious software in the information recorded by the virtual machine and the spyware application may be halted and deleted.

In one example aspect the control module may select malware trigger scenarios for testing of applications based on the analysis of the installation package of the application being tested for malware. For example it is possible to analyze a list of necessary authorizations to access protected parts of the API and interactions with other applications. The authorizations are contained in a manifest file which encapsulates the entire architecture of the Android application its functional capabilities and configuration. If the analysis of the authorizations shows that the application does not work with SMS activation events associated with the sending and receiving of SMS should be eliminated from the list of malware trigger scenarios suitable for testing of this application for presence of malware.

In another example aspect the control module may select malware trigger scenarios for testing of the application based on a static analysis of the application. For example control module may analyse APIs used by the application and on the basis of this analysis excluding from the malware trigger scenarios those malware trigger events whose activation does not trigger the tested application.

System memory may include a read only memory ROM and random access memory RAM . Memory may be implemented as in DRAM dynamic RAM EPROM EEPROM Flash or other type of memory architecture. ROM stores a basic input output system BIOS containing the basic routines that help to transfer information between the components of computer system such as during start up. RAM stores operating system OS such as Windows XP Professional or other type of operating system that is responsible for management and coordination of processes and allocation and sharing of hardware resources in computer system . Memory also stores applications and programs . Memory also stores various runtime data used by programs .

Computer system may further include hard disk drive s such as SATA HDD and optical disk drive s for reading from or writing to a removable optical disk such as a CD ROM DVD ROM or other optical media. Drives and and their associated computer readable media provide non volatile storage of computer readable instructions data structures applications and program modules subroutines that implement algorithms and methods disclosed herein. Although the exemplary computer system employs magnetic and optical disks it should be appreciated by those skilled in the art that other types of computer readable media that can store data accessible by a computer system such as magnetic cassettes flash memory cards digital video disks RAMs ROMs EPROMs and other types of memory may also be used in alternative aspects of the computer system .

Computer system further includes a plurality of serial ports such as Universal Serial Bus USB for connecting data input device s such as keyboard mouse touch pad and other. Serial ports may be also be used to connect data output device s such as printer scanner and other as well as other peripheral device s such as external data storage devices and the like. System may also include graphics card such as nVidia GeForce GT 240M or other video card for interfacing with a monitor or other video reproduction device. System may also include an audio card for reproducing sound via internal or external speakers . In addition system may include network card s such as Ethernet WiFi GSM Bluetooth or other wired wireless or cellular network interface for connecting computer system to network such as the Internet.

In various aspects the systems and methods described herein may be implemented in hardware software firmware or any combination thereof. If implemented in software the methods may be stored as one or more instructions or code on a non transitory computer readable medium. Computer readable medium includes data storage. By way of example and not limitation such computer readable medium can comprise RAM ROM EEPROM CD ROM Flash memory or other types of electric magnetic or optical storage medium or any other medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a processor of a general purpose computer.

In various aspects the systems and methods described in the present disclosure in terms of modules. The term module as used herein means a real world device component or arrangement of components implemented using hardware such as by an application specific integrated circuit ASIC or field programmable gate array FPGA for example or as a combination of hardware and software such as by a microprocessor system and a set of instructions to implement the module s functionality which while being executed transform the microprocessor system into a special purpose device. A module can also be implemented as a combination of the two with certain functions facilitated by hardware alone and other functions facilitated by a combination of hardware and software. In certain implementations at least a portion and in some cases all of a module can be executed on the processor of a general purpose computer such as the one described in greater detail in above . Accordingly each module can be realized in a variety of suitable configurations and should not be limited to any particular implementation exemplified herein.

In the interest of clarity not all of the routine features of the aspects are disclosed herein. It will be appreciated that in the development of any actual implementation of the invention numerous implementation specific decisions must be made in order to achieve the developer s specific goals and that these specific goals will vary for different implementations and different developers. It will be appreciated that such a development effort might be complex and time consuming but would nevertheless be a routine undertaking of engineering for those of ordinary skill in the art having the benefit of this disclosure.

Furthermore it is to be understood that the phraseology or terminology used herein is for the purpose of description and not of restriction such that the terminology or phraseology of the present specification is to be interpreted by the skilled in the art in light of the teachings and guidance presented herein in combination with the knowledge of the skilled in the relevant art s . Moreover it is not intended for any term in the specification or claims to be ascribed an uncommon or special meaning unless explicitly set forth as such.

The various aspects disclosed herein encompass present and future known equivalents to the known components referred to herein by way of illustration. Moreover while aspects and applications have been shown and described it would be apparent to those skilled in the art having the benefit of this disclosure that many more modifications than mentioned above are possible without departing from the inventive concepts disclosed herein.

