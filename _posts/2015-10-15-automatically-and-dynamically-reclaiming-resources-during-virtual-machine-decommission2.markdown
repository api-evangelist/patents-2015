---

title: Automatically and dynamically reclaiming resources during virtual machine decommission
abstract: Embodiments of the present invention provide a method, computer program product, and computer system for reclaiming resources during virtual machine decommission. The method includes determining a virtual machine (VM) resource utilization and a cluster utilization. If the VM resource utilization is less than a first predetermined threshold and the cluster utilization is greater than a second predetermined threshold, the method then determines whether an active timer exists. If the active timer exists and has expired, then dynamic decommission of the VM is triggered.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09658894&OS=09658894&RS=09658894
owner: International Business Machines Corporation
number: 09658894
owner_city: Armonk
owner_country: US
publication_date: 20151015
---
The present invention relates generally to the field of virtual machines and more particularly to optimizing the process of virtual machine decommission to reclaim resources.

In computing a virtual machine VM is an emulation of a particular computer system. Virtual machines operate based on the computer architecture and functions of a real or hypothetical computer and their implementations may involve specialized hardware software or a combination of both. Virtual machines can be Linux Containers Dockers or ZeroVM etc.

Classification of virtual machines can be based on the degree to which they implement functionality of targeted real machines. That way system virtual machines also known as full virtualization VMs provide a complete substitute for the targeted real machine and a level of functionality required for the execution of a complete operating system. On the other hand process virtual machines are designed to execute a single computer program by providing an abstracted and platform independent program execution environment.

Some computer architectures are capable of hardware assisted virtualization which enables efficient full virtualization by using virtualization specific hardware capabilities primarily from the host CPUs.

A zombie VM is a VM that is not functioning properly in a software environment but continues to operate sucking up resources and providing no value. The term zombie VM is sometimes used interchangeably with the term orphaned VM which is a machine that has been disconnected from its host. However with a zombie VM there is the implication that the VM is still actively using resources since it is still connected to its host. Along with incorrectly configured VMs system administrators also look for disconnected or otherwise useless VMDK files the files held on these systems to try to clean up and prevent what is often called VM sprawl. VM sprawl happens when more VMs are deployed or created than are necessary. This occurs largely because of inefficiencies in building out systems and because of changes in systems over time where without rigorous analysis and constant management resources become tied up in obsolete configurations.

A method computer program product and computer system for reclaiming resources during virtual machine decommission the method comprising receiving by one or more computer processors information regarding resource utilization of a virtual machine VM determining by one or more computer processors whether the resource utilization of the VM is less than a first predetermined threshold determining by one or more computer processors whether a cluster utilization of the VM is greater than a second predetermined threshold determining by one or more computer processors whether a timer is active in response to determining that the timer is active determining by one or more computer processors whether the timer has expired and in response to determining that the timer has expired triggering by one or more computer processors a dynamic decommission of the VM.

The process of virtual machine VM decommission may last for a long period of time. During this process the requirement of the resources for the VM may be different from the running status. During the VM servicing period the resource consumption will fluctuate due to different apps different jobs and different phases. However the resources needed in the decommission process will tend to decrease. Therefore some of the resources of the VM can be released to make the utilization of the information technology IT infrastructure more efficient. Embodiments of the present invention provide systems methods and computer program products to reclaim resources during virtual machine decommission.

The present invention will now be described in detail with reference to the figures. is a functional block diagram illustrating a computing environment generally designated in accordance with one embodiment of the present invention. provides only an illustration of one implementation and does not imply any limitations with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environment may be made by those skilled in the art without departing from the scope of the invention as recited by the claims. In an exemplary embodiment computing environment includes slave node slave node and master node .

Slave node includes app administrator notifier system administrator decommission arbitrator and system resource monitor . Slave node includes app administrator notifier system administrator decommission arbitrator and system resource monitor . The components of slave node and slave node are functionally similar. For the purposes of this description the components of slave node will be described it being understood that the description of the components of slave node may also be used as the description of the corresponding components of slave node . Master node includes resource manager and virtualization management interface .

System administrator determines when to retrieve the VM. App administrator determines when the app starts the finishing jobs and when it stops the finishing jobs. Notifier notifies app administrator that is should not assign new jobs to the VM after system administrator decided to retrieve it and notifies master node that the VM can be destroyed.

Decommission arbitrator provides interfaces which are called by app administrator and system administrator . These calls include retrieve decommission start and decommission stop . Retrieve is called by system administrator to notify the system that the virtual machine VM should be retrieved. Decommission start is called by app administrator to notify the system that the running app has finished its main job and started the finishing jobs. Decommission stop is called by app administrator to let the system know the app has finished all of its jobs. Decommission arbitrator will make a decision based on these calls. For example if retrieve hasn t been called then calling both decommission start and decommission stop will do nothing. If retrieve has been called then calling decommission start will notify system resource monitor to start the decommission phase and calling decommission stop will notify system resource monitor that the decommission phase is completed. Slave node also includes notifier to notify app administrator that no new task should come to the current VM. This ensures that app administrator should no longer assign new jobs to the current VM. System resource monitor monitors system resource i.e. CPU memory and disk utilization and submits information to resource manager during the decommission stage.

Resource manager is responsible for determining i how many resources should be released and ii if the current VM is a zombie. Resource manager determines how many resources should be released based on i resource utilization and the maximum resources the VM holds which is reported by the VM during the decommission stage and ii resource utilization of the entire cluster which can be retrieved from virtualization management interface . When resource manager decides that there are resources that can be released it notifies virtualization management interface to release the resource for the VM. There are two triggers for resource manager to notify system administrator to release the VM i receiving the decommission stop from app administrator or ii determining that the VM has become a zombie.

Slave node receives inputs from app administrator and system administrator . These inputs are transferred to decommission arbitrator to decide whether the VM has entered an extended decommission stage. This decision triggers system resource monitor to detect the resource usage during the decommission stage of the VM and report its resource utilization to resource manager located on master node which normally is the VM management node . Master node gathers the resource utilization information to determine whether the VM should release resources and if so how many resources the VM should release. This determination will be sent to virtualization management interface to adjust the VM resources.

In step resource manager receives VM resource utilization information from other nodes. In this exemplary embodiment resource manager receives VM resource utilization information from system resource monitors and located on slave nodes and respectively. During the decommission phase resource manager will also try to identify the zombie VMs by monitoring the resource usage. If resource manager finds the network usage is zero and the zero usage lasts for a predetermined period of time resource manager will mark the current VM as a zombie and also call the application programming interface API adaptor to destroy it.

In step resource manager determines if VM resource utilization is below a predetermined threshold and if cluster utilization is above a predetermined threshold.

If in step resource manager determines that VM resource utilization is not below the predetermined threshold or cluster utilization is not greater than the predetermined threshold then in step resource manager releases the timer if a timer is active i.e. if a timer exists . It should be appreciated that if only one threshold is not met resource manager will release the timer if a timer is active. A cluster or computer cluster consists of a set of loosely or tightly connected computers that work together so that in many respects they can be viewed as a single system. In this exemplary embodiment resource manager determines if the cluster is busy because resource utilization is very high in a cluster. A timer is an input setting that is set to check VM resource utilization and cluster utilization every unit of time e.g. 1 minute 10 minutes etc. . In this exemplary embodiment if a timer is active the timer is removed or deleted. The process then begins again from step . If a timer is not active i.e. does not exist the process simply begins again from step .

If in step resource manager determines that both VM resource utilization is below the predetermined threshold and cluster utilization is above the predetermined threshold then in step resource manager determines whether a timer is active.

If in step resource manager determines that a timer is not active then in step resource manager triggers a timer. In this exemplary embodiment resource manager creates a timer and sets it to the preferred unit of time e.g. 1 minute 10 minutes etc. . After the timer is triggered the process begins again from step .

If in step resource manager determines that a timer is not active then in step resource manager determines whether the timer has expired. In this exemplary embodiment resource manager determines whether the preset unit of time e.g. 1 minute 10 minutes etc. has expired.

If in step resource manager determines that the timer has not expired then the process begins again from step .

If in step resource manager determines that the timer has expired then in step resource manager triggers dynamic decommission of the VM. In this exemplary embodiment the VM is decommissioned dynamically by the process depicted in flowchart . During the decommission stage system resource monitor detects the resource usage of the VM and submits this information to resource manager in master node which is normally the VM management node . Master node will decide how many resources can be released periodically based on the VM resource utilization information. When resource manager determines that is a resource that can be released it notifies virtualization management interface to release the resource for VM. Resource manager determines how many resources should be released based on i resource utilization and the maximum resources the VM holds which is reported by the VM during the decommission stage and ii resource utilization of the entire cluster which can be retrieved from virtualization management interface . There are two triggers for resource manager to notify system administrator to release the VM i receiving the decommission stop from app administrator or ii determining that the VM has become a zombie. After resource manager triggers the dynamic decommission of the VM the process begins again from step . It should be appreciated that the decision to trigger dynamic decommission of the VM is determined in part by app administrator and system administrator . Resource manager will also call the corresponding API to terminate VMs when it receives the terminal signal from system resource monitor . Once the decommission phase is completed by decommission arbitrator resource manager will call API adapter to destroy the current VM.

Accordingly by performing the operational steps of the system reclaims resources by releasing unneeded resources during VM decommission.

Computing device includes communications fabric which provides for communications between one or more processing units memory persistent storage communications unit and one or more input output I O interfaces . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are computerreadable storage media. In this embodiment memory includes random access memory RAM and cache memory . In general memory can include any suitable volatile or non volatile computer readable storage media. Software is stored in persistent storage for execution and or access by one or more of the respective processors via one or more memories of memory .

Persistent storage may include for example a plurality of magnetic hard disk drives. Alternatively or in addition to magnetic hard disk drives persistent storage can include one or more solid state hard drives semiconductor storage devices read only memories ROM erasable programmable read only memories EPROM flash memories or any other computerreadable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage can also be removable. For example a removable hard drive can be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computerreadable storage medium that is also part of persistent storage .

Communications unit provides for communications with other computer systems or devices via a network. In this exemplary embodiment communications unit includes network adapters or interfaces such as a TCP IP adapter cards wireless Wi Fi interface cards or 3G or 4G wireless interface cards or other wired or wireless communications links. The network can comprise for example copper wires optical fibers wireless transmission routers firewalls switches gateway computers and or edge servers. Software and data used to practice embodiments of the present invention can be downloaded to computing device through communications unit i.e. via the Internet a local area network or other wide area network . From communications unit the software and data can be loaded onto persistent storage .

One or more I O interfaces allow for input and output of data with other devices that may be connected to computing device . For example I O interface can provide a connection to one or more external devices such as a keyboard computer mouse touch screen virtual keyboard touch pad pointing device or other human interface devices. External devices can also include portable computerreadable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. I O interface also connects to display .

Display provides a mechanism to display data to a user and can be for example a computer monitor. Display can also be an incorporated display and may function as a touch screen such as a built in display of a tablet computer.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The terminology used herein was chosen to best explain the principles of the embodiment the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

