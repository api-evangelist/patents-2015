---

title: Secure virtual sector erasure method and system
abstract: Systems and methods for sanitizing physical storage in cloud computing and virtual environments. When logical storage is decommissioned in a virtual environment, the underlying physical storage is logically disassociated. However, the underlying physical data blocks remain intact until they are overwritten. Since there is no control over when, or even if, the physical data is ever overwritten, the remaining data is susceptible to compromise. The present disclosure provides a secure erase application that securely erases physical storage associated with to-be deleted resources, such as virtual data stores, virtual images, snapshots and raw virtual disks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09519433&OS=09519433&RS=09519433
owner: Vsector Security Technologies, LLC
number: 09519433
owner_city: Atlanta
owner_country: US
publication_date: 20150513
---
The advent of the cloud and virtualization of computing environments has led to new ways of storing data. Computer algorithms store data virtually across many different machines and Storage Media. For example a single file containing a single data instance is stored using a virtual identifier. The virtual identifier is an identifier like a serial number that is unique across multiple machines.

The data could be sensitive confidential information like all of the HR files for an organization or user data for a large gaming company. The data is spread across multiple physical devices in one or more data centers using the virtual identifier. Without the virtual identifier the data owner cannot access the data.

Currently users delete cloud or virtual data by merely deleting the virtual identifier. Deletion of the virtual identifier disconnects the users of the cloud or virtual environment from the data stored at the physical locations e.g. on hard drives . A problem arises however in that the data itself still exists at those physical locations. Someone with access to those physical locations either physically or through a network may be able to access the data. Thus the data owner has no reassurance that the data has been securely deleted.

Disclosed herein are systems and methods for providing secure erasing of virtual resources. In accordance with an aspect of the disclosure there is a secure erasing method that includes presenting a virtual resource in a user interface receiving a selection of the virtual resource the selection indicating that the virtual resource is to be securely erased isolating the selected virtual resource obtaining access to the selected virtual resource and securely erasing the selected virtual resource by overwriting all virtual sectors of the selected virtual resource.

In accordance with another aspect of the disclosure there is disclosed a method that includes authenticating a user to present virtual resources in accordance with privileges associated with the user receiving a selection of a virtual resource to be securely erased mounting the selected virtual resource with an exclusive lock computing a first hash value for same sized zero byte data file as the selected resource reading virtual disk sectors associated with the selected resource determining a second hash value of the selected resource from the virtual sectors read overwriting the selected virtual resource and verifying that the selected resource was erased by determining a third hash value from the virtual sectors read and comparing it to the first computed hash value.

Other systems methods features and or advantages will be or may become apparent to one with skill in the art upon examination of the following drawings and detailed description. It is intended that all such additional systems methods features and or advantages be included within this description and be protected by the accompanying claims.

Unless defined otherwise all technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art. Methods and materials similar or equivalent to those described herein can be used in the practice or testing of the present disclosure. While implementations will be described for providing a highly scalable fault tolerant remote access architecture and methods for connecting clients to remotely accessed applications and services provided by the remote access architecture it will become evident to those skilled in the art that the implementations are not limited thereto.

The present disclosure is directed to systems and methods for secure erasure of virtual sectors that are physically located in storage in cloud computing and virtual environments. When logical storage is decommissioned in a virtual environment the underlying physical storage is logically disassociated. However the underlying physical data blocks remain intact until they are overwritten. Since there is no control over when or even if the physical data is ever overwritten the remaining data is susceptible to compromise. The present disclosure provides a secure erase application that securely erases physical storage associated with to be deleted resources such as but not limited to virtual data stores virtual images snapshots and raw virtual disks.

With reference to there is illustrated an example environment in which the present disclosure may be implemented. A virtual environment includes virtual machine monitors A B . . . N running on respective physical servers A . . . N that are each connected to a storage area networks SAN A B. The servers A . . . N may be industry standard servers having a general configuration shown in that run a virtualization layer that abstracts processor memory storage and networking resources that are provisioned to multiple virtual machines. An example virtualization layer is VMware ESX Server. In some virtual environments the servers A . . . N can be grouped together with connections to the same network and storage subsystems to provide a cluster.

The SANs A B may be large storage arrays of any type having a large number of physical disks . The SANs A B may be shared between one or more of the servers via A . . . N to provide for aggregation of the storage resources and to provide flexibility in provisioning the resources to virtual machines. The physical disks of the SANs A B may be divided into logical unit numbers LUNs that are presented to virtual resources within the virtual environment . The SANs A B may implement RAID10 or other RAID variation to protect from data loss through individual disk failures as well as to increase I O throughput. As such virtual objects are striped over a multitude of disks see . The actual physical locations of the data blocks that make up any virtual object are abstracted and therefore hidden to the virtual environment . However this also means that command sets supported by individual disks e.g. SCSI SANITIZE are not available.

A management server provides a single point of control in the virtual environment . The management server provides services such as access control performance monitoring and configuration.

The virtual machine monitors A B . . . N are each a virtual representation of the computing and memory resources of its corresponding server A . . . N. Data stores DS DS DS shown in are virtual representations of combinations of underlying physical storage resources in the virtual environment . Virtual machines VM VM VM . . . VMN are designated to a particular virtual machine monitor A B or N or cluster and a data store when they are created. In some virtual environments virtual machines can be migrated from one server to another.

Users can access a particular virtual machine from using a client computing device using a client application a Web browser or terminal services. For example as shown in the client computing device is accessing VM running in virtual host of server . The client computing device may have the configuration shown in .

With reference to in accordance with aspects of the present disclosure a user desirous of securely erasing a virtual resource e.g. VM may be provided with a secure erase application that securely erases resources within in the virtual environment . The secure erase application may be hosted at a web server running on a virtual machine in the virtual environment and accessed by e.g. a thin client and or Web browser at a predetermined Uniform Resource Locator URL . Once accessed the secure erase application is presented to a user in a thick client . The thin client and or Web browser communicates with flow control business logic via an API as described below.

In some implementations an external application e.g. a thick client may be used instead of or in addition to the thin client and or thick client . The external application may directly call the API on the web server to perform the functions described below.

In each of the above implementations i.e. accessing by the thin client thick client or external application the secure erase application operatively controls the secure erase process in accordance with flow control business logic that is detailed more fully in . Adapters A B C are provided to interact with specific types of virtual environments e.g. VMWARE XEN AMAZON GOOGLE MICROSOFT RACKSPACE HYPERV and others. While shows three adapters any number of adapters may be provided. The adapters A B C may be multithreaded and each may call a corresponding API A B C to implement the secure erase operates within a particular virtual environment . The operations performed by the flow control business logic may be the same for any or all virtual environments as the adapters logically abstract the specifics of the virtual environment from the logic of the flow control business logic .

In the secure erase application by the flow control business logic provides erasure instructions over the entire logical storage the virtual disk sectors of the resource to be deleted. This may be over e.g. two read and three write cycles. Performance will be enhanced if the secure erase application is deployed as close as possible to the underlying physical storage e.g. SAN A . As such the secure erase application may be deployed in any virtual machine in the virtual environment the management server . If the secure erase application cannot be deployed in the virtual environment it may be operated over a LAN or WAN.

At the user selects a virtual resource to be erased. Depending on the type of virtual resource or object the hypervisor product or cloud provider supports and that are exposed through their respective APIs the following types of resources may be selected for secure erasure in accordance with the present disclosure. The virtual resources include but are not limited to virtual data stores virtual images bootable images containing an operating system snapshots saved backups of changes to a virtual image and raw virtual disks a mountable disk image . The hierarchy of these resources may be as follows 

Each erasure of a virtual resource will generate a separate job running on its own dedicated thread to perform secure erasing.

At the secure erase application mounts opens the selected virtual resource s with exclusive read write access an exclusive lock . In case of data stores and virtual disks if an exclusive lock cannot be obtained the operational flow may wait and retry for a user definable period of time or amount of tries. In case of running virtual machines a stop command may be issued and the process will continue after the virtual machine is powered down. If the virtual environment supports dynamic redistribution of resources this feature will be disabled to ensure uninterrupted operation. Also at a hash value is determined for same sized zero byte data file as the selected resource. The hash value may be an MD5 hash value. Other hash values may be used. For example if the selected resource is 10 MB e.g. 10 485 760 bytes the MD5 hash of a zero byte 10 MB data file is determined and saved as a first hash value. The first MD5 hash value is used as part of a verification process performed in .

At the virtual disk sectors associated with each selected resource are read. A second MD5 hash value of the selected resource is determined. The second MD5 hash value will be different than the first MD5 hash value if there is data in the selected resource.

At the secure erase application overwrites the selected virtual resource. As noted above virtual resources are stored in data stores that are physically located on the SAN A and or B. Reference is now made to which shows additional details of the SAN A or B . The SAN A is exposed within the virtual environment as the data store . A virtual layer abstracts a physical layer comprised of the physical disks . As shown in resources such as VM and its associated snapshots may be spread across many physical disks . Thus at a three pass process may be used for example to securely erase data on each of the physical disks on which the virtual resource resides. In a first pass the secure erase application overwrites all the virtual disk sectors with random bits. In a second pass the secure erase application overwrites all the virtual disk sectors with another set of random bits. In a third pass the secure erase application overwrites all the virtual disk sectors with zero bits. It is noted that any number of passes may be used at . The After portion of illustrates the zeroed sectors on the physical disks .

To verify that the selected resource was erased the secure erase application reads all the virtual disk sectors and calculates a third MD5 hash value. If the resource was successfully securely erased then a comparison of the third MD5 hash value to the first MD5 hash value will result in an identical value. If the comparison of third MD5 hash value to the first MD5 hash value results in different values then it is determined that there is a failure of the secure erase process. A failure may be reported see below to the user or the process at may be rerun.

At it is determined if the select resource s is to be permanently released for reuse in the virtual environment . If not then at the secure erase application releases the exclusive lock s and unmounts closes the selected resource s . The selected resource s would remain available to the user however in a sanitized condition. If the selected resource s is to be permanently released at then at the virtual identifier of the selected resource s is disassociated from the selected resource s and the selected resource s is made available for reuse within the virtual environment . After either or if the virtual environment supports dynamic redistribution of resources the secure erase application will re enable this feature.

At the end of the operational flow a Certificate of Sanitization report may be generated in accordance with NIST 800 88 revision 1 containing the following non limiting information 

In the operational flow there are certain considerations that may be made if for example the selected resource exists on a solid state disk drive SSD . Unlike with magnetic media there is no ghosting of data on SSDs. As such a single pass of zeros may be used to securely erase virtual sectors associated with the selected resource. Furthermore a three pass or more overwrite process may shorten the life span of the SSD. It is noted that enterprise class SSDs implement wear leveling algorithms that do not guarantee that a physical block will be overwritten in place. As this feature cannot be bypassed the Certificate of Sanitization may include a disclaimer.

With respect to the virtual environment itself if there are active passive hosts in the virtual environment the operational flow of the secure erase application may be run on the passive node. From a storage perspective the secure erase application may provide three non limiting settings 

The secure erase application may detect if thin provisioning is used. If so the secure erase application only erases what has been provisioned at the time of the erase operation.

Some virtual environments support automatic relocation of virtual storage based on configurable triggers. Once a copy process has been completed and the virtual storage relocated pointers are redirected to the new location. However while the original data has been disassociated it is still physically present. In accordance with aspects of the present disclosure the secure erase application is notified of any such event and a secure erase operation of the original virtual storage is also initiated.

Finally it will be understood that the present disclosure may be implemented in both private clouds i.e. hypervisor products such as VMWARE XEN and HYPER V as well as public cloud providers such as AWS GOOGLE CLOUD AZURE and OPENSTACK.

Numerous other general purpose or special purpose computing system environments or configurations may be used. Examples of well known computing systems environments and or configurations that may be suitable for use include but are not limited to personal computers servers handheld or laptop devices multiprocessor systems microprocessor based systems network personal computers PCs minicomputers mainframe computers embedded systems distributed computing environments that include any of the above systems or devices and the like.

Computer executable instructions such as program modules being executed by a computer may be used. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Distributed computing environments may be used where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules and other data may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing aspects described herein includes a computing device such as computing device . In its most basic configuration computing device typically includes at least one processing unit and memory . Depending on the exact configuration and type of computing device memory may be volatile such as random access memory RAM non volatile such as read only memory ROM flash memory etc. or some combination of the two. This most basic configuration is illustrated in by dashed line .

Computing device may have additional features functionality. For example computing device may include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage .

Computing device typically includes a variety of tangible computer readable media. Computer readable media can be any available tangible media that can be accessed by device and includes both volatile and non volatile media removable and non removable media.

Tangible computer storage media include volatile and non volatile and removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Memory removable storage and non removable storage are all examples of computer storage media. Tangible computer storage media include but are not limited to RAM ROM electrically erasable program read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of computing device .

Computing device may contain communications connection s that allow the device to communicate with other devices. Computing device may also have input device s such as a keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. All these devices are well known in the art and need not be discussed at length here.

It should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the presently disclosed subject matter or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the presently disclosed subject matter. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs may implement or utilize the processes described in connection with the presently disclosed subject matter e.g. through the use of an application programming interface API reusable controls or the like. Such programs may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and it may be combined with hardware implementations.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

