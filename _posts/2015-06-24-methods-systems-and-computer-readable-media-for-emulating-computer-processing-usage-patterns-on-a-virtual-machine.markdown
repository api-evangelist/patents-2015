---

title: Methods, systems, and computer readable media for emulating computer processing usage patterns on a virtual machine
abstract: According to one aspect, the disclosed subject matter describes herein a method for emulating computer processing usage patterns on a virtual machine that includes generating a usage pattern specification based on a plurality of computer processing usage patterns provided by a user and receiving, by a virtual machine hosted by a device under test (DUT), the usage pattern specification containing the plurality of computer processing usage patterns. The method also includes generating a plurality of pattern instruction sequences using execution parameters included in each of the plurality of computer processing usage patterns and distributing each of the plurality of pattern instruction sequences among a plurality of virtual processing cores of the virtual machine. The method further includes emulating the operation of the application on the virtual machine by executing the pattern instruction sequences on the virtual processing cores in a manner specified by the execution parameters.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09507616&OS=09507616&RS=09507616
owner: IXIA
number: 09507616
owner_city: Calabasas
owner_country: US
publication_date: 20150624
---
The subject matter described herein relates to methods and devices used for testing virtual deployments. More particularly the subject matter described herein relates to methods systems and computer readable media for emulating computer processing usage patterns on a virtual machine.

At present numerous network elements and service nodes are being deployed in continuously expanding telecommunications networks by system administrators. In order to properly address the processing needs of a network by provisioning the optimal number or amount of resources a system administrator typically requires knowledge of the processing capabilities of a network element in light of the likely demands it will be subjected to by network users. To obtain this pertinent information a system administrator would ideally be able to simulate specific CPU and IO usage patterns on a virtual machine hosted by a network element in a testing environment. Notably such specific simulations enable test managers to stress test a virtual machine setup in a device under test DUT and subsequently monitor and measure the resulting performance behavior.

Accordingly there exists a need for methods systems and computer readable media for emulating computer processing usage patterns on a virtual machine.

Methods systems and computer readable media for emulating computer processing usage patterns on a virtual machine are disclosed. According to one aspect the subject matter described herein includes a method that generates a usage pattern specification based on a plurality of computer processing usage patterns provided by a user and receiving by a virtual machine hosted by a device under test DUT the usage pattern specification containing the plurality of computer processing usage patterns wherein each of the plurality of computer processing usage patterns includes execution parameters associated with the execution of simulated actions of an application. The method also includes generating a plurality of pattern instruction sequences using the execution parameters included in each of the plurality of computer processing usage patterns and distributing each of the plurality of pattern instruction sequences among a plurality of virtual processing cores of the virtual machine. The method further includes emulating the operation of the application on the virtual machine by executing the pattern instruction sequences on the virtual processing cores in a manner specified by the execution parameters.

The subject matter described herein may be implemented in hardware software firmware or any combination thereof. As such the terms function or module as used herein refer to hardware which may also include software and or firmware components for implementing the feature being described e.g. conducting simulations and emulations via executed software . In one exemplary implementation the subject matter described herein may be implemented using a non transitory computer readable medium having stored thereon computer executable instructions that when executed by the processor of a computer cause the computer to perform steps. Exemplary computer readable media suitable for implementing the subject matter described herein include non transitory computer readable media such as disk memory devices chip memory devices programmable logic devices and application specific integrated circuits. In addition a computer readable medium that implements the subject matter described herein may be located on a single device or computing platform or may be distributed across multiple devices or computing platforms.

The subject matter described herein relates to methods systems and computer readable media for emulating computer processing usage patterns on a virtual machine. The present subject matter facilitates the simulation of computer processing usage patterns to follow user defined application actions or activities. As used herein a usage pattern may include a processing activity or load associated with the operation of an application or a combination of applications. Further the usage pattern can represent the activity generated by a single user or multiple users e.g. multiple and contemporaneous instances of bank account access . In some embodiments the subject matter simulates the CPU usage by performing the actions specified in user defined usage patterns such as pre canned simulation usage patterns or by customized usage patterns. In some embodiments the present subject matter provisions pre canned CPU usage patterns for specific actions. Notably the disclosed subject matter affords a user the ability to define a specific pattern of computer processing usage that can be used in a test tool environment to generate CPU consumption file input output I O access e.g. non cache storage access disk access etc. and or memory usage e.g. RAM consumption cache utilization processor cache consumption and the like . The predefined levels of generated computer processing usage e.g. CPU consumption file I O access and or memory usage may therefore be used to validate the CPU management solution being employed by a physical device and or virtual machine being tested.

Reference will now be made in detail to exemplary embodiments of the presently disclosed subject matter examples of which are illustrated in the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts. Various embodiments of the present subject matter are disclosed and described herein.

In some examples design module can be utilized by a user e.g. a system administrator network manager test administrator etc. to create and or construct computer processing usage patterns that emulates a user defined pattern of user interaction associated with the execution of a software application e.g. user activity corresponding to the operation of word processing application . In some embodiments design module enables a user to specify certain parameters and or values that are to be included in the customized specification. For example design module may comprise a module configured to receive input and or specifications from a user via a user interface. Specifically design module may be used to customize a computer processing usage pattern specification that specifies the individual activities inputs and or commands a software application may experience under the operation of a user. In some embodiments a user may initially select the executable actions of the application operation that need to be emulated on a device e.g. a DUT and or associated virtual machines to be tested. Exemplary user actions may include the launching opening the application the closing of the application the operation of the application and the like . Examples of applications in this context may include a word processing application a media player application a spreadsheet application web browsing application and the like. In some embodiments user defined activities and actions may be represented in a graphical manner as opposed to a task based manner . For instance the user defined activities may include a timeline that defines and or specifies different usage patterns of activity such as a ramp up of processing activity a ramp down of processing activity a Poisson distribution pattern of processing activity and the like.

In addition to specifying the actions to be emulated the user may subsequently select associated execution parameters e.g. number of cores to run the application etc. that will be applied to the specified actions of the user defined computer processing usage pattern. In some instances the execution parameters operate to establish and or provide the rules for the execution of the selected actions on the DUT. For example a user may utilize design module e.g. via a GUI or command line interface to specify a number of execution parameters such as i a computer processing usage pattern count ii an amount of total time for executing the patterns iii a designation as to whether the patterns are to be executed serially or in parallel iv a designation as to whether the patterns should load processing cores in an evenly distributed manner and the like. In addition to these global input execution parameters each of the patterns may further include pattern specific execution parameters including i a specified thread count for executing the computer processing usage pattern ii the number of cores to use to execute the computer processing usage pattern iii an indication e.g. a flag a bit indicator etc. whether to automatically scale the computer processing usage pattern to run on all of the virtual processing cores iv a number of instances e.g. P times to repeat the execution of the computer processing usage pattern and or v the total time e.g. a timeline and or a time limit duration to execute the computer processing usage pattern. In some embodiments the execution parameters may further include a central processing unit CPU usage threshold limit a file I O access threshold limit and or a memory usage threshold limit to be adhered to in the simulation testing. Notably each of these threshold limits may include a minimum threshold limit and or a maximum threshold limit.

After the actions activities and associated execution parameters are designated by the user as described above design module may generate a computer processing usage pattern specification such as a CPU usage pattern specification a file I O access pattern specification and or a memory usage pattern specification. Notably design module may combine or aggregate the designated actions and execution parameters to form a CPU usage pattern specification which may be embodied as a software based package or object comprising XML data binary data or file data.

After being created by design module the usage pattern specification may be forwarded to provisioning module by design module for delivery to DUT . Alternatively the usage pattern specification may be stored in usage pattern database by design module via provisioning module for future test use and or DUT provisioning.

As indicated above processing activity emulator further includes capture module . In some examples capture module can include any software entity that is configured to monitor and record actual CPU usage patterns being executed by a deployed computing device and or network element. For example capture module may comprise a utility software element that is executed by at least one processor of emulator and that provides diagnostic tools for monitoring interactions such as system calls signal deliveries changes in process state etc. between the simulated application processes and the processor. In other embodiments capture module includes a diagnostic software tool that monitors and records system calls. After capture module records a plurality of the observed system calls and or signal deliveries capture module may forward the recorded information to design module e.g. via an application programming interface API . Design module can then process the information received from capture module to generate one or more usage pattern specifications.

In some embodiments usage pattern database may comprise any data storage device configured to store a plurality of defined and or customized usage pattern specifications. The usage pattern specifications stored in database may be a customized usage pattern specification generated by design module or a usage pattern specification based on data captured by capture module . Moreover usage pattern database may also be configured to receive and store pre canned CPU usage patterns generated and or designed by a separate system. In some embodiments provisioning module may be configured to access database per a user s direction or via a system call in order to obtain a stored usage pattern specification for delivery to and provisioning on DUT .

As shown in processing activity emulator may include a statistics and reporting module . In some embodiments statistics and reporting module is configured to generate reports the statistics and test status to the users of the system e.g. via messages and or a graphical user interface GUI display .

In some embodiments DUT can comprise a processor and memory . Memory may include a virtual machine monitoring VMM module that when executed by processor establishes a virtual environment on DUT . In some embodiments VMM module may comprise a hypervisor or other software application that is configured to manage and support a virtual environment that includes a plurality of virtual machines or virtual ports . Within each virtual machine or port there is an ability to specify the pattern as an input. As described below each virtual machine has a pattern generation module that understands the input and generates the pattern. For example each of virtual machines depicted in may include a usage pattern generation module along with a publisher module . Virtual environment may be further supported by the underlying hardware components e.g. processor memory and data storage elements residing on DUT .

In some embodiments usage pattern generation module includes a software module that can be configured to receive a usage pattern specification as input from emulator . The functionality of usage pattern generation module is discussed in greater detail below with regard to e.g. usage pattern generation module .

In some embodiments publishing module may include a software module that is configured to monitor CPU usage across multiple processing cores e.g. cores in . Publishing module further reports the execution status information to a test manager via processing activity emulator . In some embodiments emulator may be configured to aggregate execution status information received from multiple virtual machines e.g. virtual machines and display the processing statistics to a test manager or other user. Notably the publishing of the pattern and associated processing statistics is used to confirm that the performance the virtual machine is exhibiting from the hypervisor is real accurate.

In some embodiments parser module in UPGM receives a CPU usage pattern specification for processing. For example parser module may be configured to extract one or more patterns from the received usage pattern specification . Moreover parser module may further extract pattern parameters from each of the patterns and convert each of the execution patterns into a machine compatible format. For example parser module may convert the execution parameters into an XML file. Likewise illustrates that execution parameters data specifying i a thread count ii a processing core count iii scalability to all cores iv a number of times to repeat and v an execution time is obtained from each of the patterns to be processed e.g. patterns . After the translation by parser module the aforementioned pattern parameters can be forwarded to pattern instruction sequence generation module where the parameters are collected and aggregated. In some embodiments pattern instruction sequence generation module receives individual CPU usage pattern information. In some embodiments pattern instruction sequence generation module may be configured to further receive global CPU usage pattern information as input from parser module . Notably global CPU usage pattern information includes an aggregation of the individual CPU usage pattern information provided by parser module .

Upon receiving the execution parameters included in usage patterns pattern instruction sequence generation module may generate a unique instruction sequence for each of the plurality of usage patterns. As used herein an exemplary instruction sequence may include a software program and or object. For example the instruction sequence may be embodied in an XML format a binary format JavaScript Object Notation JSON format or as file data. Once generated by pattern instruction sequence generation module the instruction sequences are forwarded to pattern execution module as input. For example depicts instruction sequences being utilized e.g. accessed from memory or a database by pattern execution module for processing and or distribution. Pattern execution module is configured to execute the rules established by the instruction sequences and serves as an aggregator for all the instruction sequences. Notably pattern execution module generates an execution sequence for each of the pattern instruction sequences to be processed and or translated by pattern execution module . In some examples the execution sequences may be represented as a timeline to be simulated by one or more of the virtual cores.

In some embodiments pattern execution module initiates the distribution and or loading of the instruction sequences among virtual processing cores of virtual machine for execution of a CPU usage simulation . For example pattern execution module may implement a round robin distribution of instruction sequences across virtual processing cores . Each of virtual processing cores subsequently executes instruction sequences which in turn simulates CPU usage as originally defined by the user. For example the CPU usage may be defined via the pre canned simulation patterns and or the custom defined patterns managed by a processing activity emulator e.g. processing activity emulator .

By provisioning the instruction sequences across virtual processing cores the selected CPU usage patterns are being emulated on a virtual machine of the DUT. Such a simulation test affords a user the ability to control CPU usage and correlate it to underlying system comprising hardware and or hypervisor to determine if the system is performing correctly. Notably the simulation of multiple users utilizing multiple applications based on the number of instruction sequences are being generated and applied to processing cores . In some embodiments the disclosed subject matter is configured to allow a user to simulate multiple CPU usage patterns via profiles e.g. pre canned CPU usage patterns across multiple servers and to monitor the performance.

After the pattern instruction sequences are executed by the virtual processing cores pattern execution module can generate an electronic status report that indicates the state and or status of execution for all of the executed pattern instruction sequences . Notably pattern execution module may be configured to assess the status of the executed pattern instruction sequence and send the electronic status report reflecting such stats to statistics and reporting module shown in FIG. . Publisher module may then provide and or present the collected status information in a visual manner such as via a graphical user interface GUI or a printed report.

After one or more CPU usage patterns is defined by the user as described above a design module in the processing activity emulator may generate one or more usage pattern specifications by aggregating the CPU usage patterns into one or more usage pattern specifications. The design module may also be configured to forward the generated usage pattern specifications to a provisioning module in the processing activity emulator for distribution.

In step a computer processing usage pattern specification containing a plurality of usage patterns is received. In some embodiments a virtual machine hosted by a DUT receives a computer processing usage pattern specification such as a CPU usage pattern specification from the processing activity emulator via the provisioning module . The usage pattern specification may comprise a CPU usage pattern specification including one or more CPU usage patterns that i were customized by a user and or ii were predefined CPU usage patterns e.g. as described in step . In some embodiments a parser module in the virtual machine receives the CPU usage pattern specification and extracts the CPU usage patterns to conduct a translation process e.g. convert the patterns included CPU usage pattern specification to a format that is comprehended by the pattern instruction sequence generator .

In step a plurality of pattern instruction sequences using execution parameters included in each of the plurality of CPU usage patterns is generated. In some embodiments the pattern instruction sequence generation module in the virtual machine processes the extracted execution parameters and subsequently generates a pattern instruction sequence for each respective usage pattern containing said execution parameters . After being generated the pattern instruction sequences are sent to a pattern execution module residing in the virtual machine.

In step the pattern instruction sequences are distributed. In some embodiments the pattern execution module is configured to distribute the pattern instruction sequences among a plurality of virtual processing cores e.g. virtual CPU cores utilized by the virtual machine. For example the pattern execution may distribute the pattern instruction sequences among the virtual processing cores in a round robin fashion or in accordance with some performance based or load based parameters.

In step the operation of the application is emulated on the virtual machine. In some embodiments the operation of the application is emulated by executing the pattern instruction sequences on the virtual processing cores in a manner specified by the execution parameters. Further the performance of each of the virtual processing cores conducting the simulation may be monitored or measured by the statistics and reporting module .

It should be noted that processing activity emulator DUT and or functionality described herein e.g. see can constitute a special purpose computing system. Further processing activity emulator DUT and or functionality described herein can improve the technological field of simulation testing by emulating CPU usage patterns to follow predefined and or customized user defined activities or actions thereby facilitating reliable stress tests in virtual machine environments and subsequently observing the behavior exhibited by individual virtual machines in the virtual machine environment.

It will be understood that various details of the subject matter described herein may be changed without departing from the scope of the subject matter described herein. Furthermore the foregoing description is for the purpose of illustration only and not for the purpose of limitation as the subject matter described herein is defined by the claims as set forth hereinafter.

