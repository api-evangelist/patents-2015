---

title: Packet processing in a multi-tenant software defined network (SDN)
abstract: An SDN controller associated with a switch maintains unique tenant/port association data, and pushes to the switch per-tenant policies. A per-tenant information processing port (IPP) on the switch enables traffic sent to or from a tenant to be distinguished from that of another tenant, even with respect to packet processing devices (PPDs) that share a particular switch. With the described approach, the properties of a non-overlay SDN are leveraged to support multi-tenancy in an efficient manner, preferably by associating a specific tenant with a specific port (on the virtual switch) once, rather than continuously parsing tenant data from the information flow. The technique enables the application of tenant-specific policy to tenant-specific network flows in a multi-tenant network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09584477&OS=09584477&RS=09584477
owner: International Business Machines Corporation
number: 09584477
owner_city: Armonk
owner_country: US
publication_date: 20150226
---
An emerging information technology IT delivery model is cloud computing by which shared resources software and information are provided over the Internet to computers and other devices on demand. Cloud computing can significantly reduce IT costs and complexities while improving workload optimization and service delivery. With this approach an application instance can be hosted and made available from Internet based resources that are accessible through a conventional Web browser over HTTP. An example application might be one that provides a common set of messaging functions such as email calendaring contact management and instant messaging. A user would then access the service directly over the Internet. Using this service an enterprise would place its email calendar and or collaboration infrastructure in the cloud and an end user would use an appropriate client to access his or her email or perform a calendar operation.

Cloud compute resources are typically housed in large server farms that run network applications typically using a virtualized architecture wherein applications run inside virtual servers or so called virtual machines VMs that are mapped onto physical servers in a data center facility. The virtual machines typically run on top of a hypervisor which is a control program that allocates physical resources to the virtual machines.

Software Defined Networking SDN is a new network paradigm that separates each network service from its point of attachment to the network creating a far more dynamic flexible automated and manageable architecture. Using this approach administrators can easily move virtual resources throughout the network create private virtual networks that meet specific performance and security needs and use a host of other high value applications. SDN abstracts flow control from individual devices to the network level. Similar to server virtualization where virtual machines are de coupled from the physical server network wide virtualization gives administrators the power to define network flows that meet the connectivity requirements of end stations and to address the specific needs of discrete user communities. SDN pulls the intelligence away from the hardware while still implementing rich feature sets. SDN uses a modular approach that is structured and layered to provide the same functions as a traditional network device yet in a centralized and highly available fashion.

SDNs address the administration requirements of large scale networks both physical and virtual. Using an SDN service providers that deliver network capability to multiple clients are able to manage their policy and event data distinctly and separately. This multi tenant capability is an important value proposition to service providers and tenants alike.

There are two common mechanisms for information transmission in an SDN direct and overlay. Direct information transmission uses raw network frames and the information they convey in contrast overlay networks use encapsulation tunneling to transmit additional information e.g. tenant identity in addition to the encapsulated information. An SDN tunneling protocol associates a tenant specific flow with a protocol tunnel which contains tenant identification information. While both types of information transmission are commonly used there is significant overhead associated with processing flows encapsulated in tunneling protocols. As a consequence the application of tenant specific policy to tenant specific network flows is difficult to carry out in a highly performant manner.

There is need to provide for high performance tenant specific processing using direct SDN properties while avoiding overlay overhead that is incurred by the need to process tenant specific flows encapsulated in tunneling protocols.

According to this disclosure the properties of a non overlay SDN are leveraged to support multi tenancy in an efficient manner preferably by associating a specific tenant with a specific port on a virtual switch once rather than continuously parsing tenant data from the information flow. The technique enables the application of tenant specific policy to tenant specific network flows.

To facilitate this operation an SDN controller maintains unique tenant port association data and pushes to the switch per tenant policies e.g. packet forwarding rules to ensure compliance with the multi tenant security policy requirements. A per tenant information processing port IPP on the switch enables traffic sent to or from a tenant to be distinguished from that of another tenant even with respect to packet processing devices PPDs that share a particular switch.

In one particular aspect the disclosure describes a method to process packets in a multi tenant Software Defined Network SDN having a switch which may be physical or virtual. The method preferably is implemented in an SDN controller that manages the switch. According to the method preferably each tenant of a set of multiple tenants that use the SDN is assigned a particular port of the switch as an information processing port IPP for the tenant. The SDN controller maintains the port tenant associations in a data set. The SDN controller configures the switch according to information in the data set and one or more tenant specific policies. At least one tenant specific policy is then applied to a tenant specific packet flow based on the IPP for the tenant.

The foregoing has outlined some of the more pertinent features of the disclosed subject matter. These features should be construed to be merely illustrative. Many other beneficial results can be attained by applying the disclosed subject matter in a different manner or by modifying the subject matter as will be described.

With reference now to the drawings and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments of the disclosure may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the disclosed subject matter may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

With reference now to the drawings depicts a pictorial representation of an exemplary distributed data processing system in which aspects of the illustrative embodiments may be implemented. Distributed data processing system may include a network of computers in which aspects of the illustrative embodiments may be implemented. The distributed data processing system contains at least one network which is the medium used to provide communication links between various devices and computers connected together within distributed data processing system . The network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server and server are connected to network along with storage unit . In addition clients and are also connected to network . These clients and may be for example personal computers network computers or the like. In the depicted example server provides data such as boot files operating system images and applications to the clients and . Clients and are clients to server in the depicted example. Distributed data processing system may include additional servers clients and other devices not shown.

In the depicted example distributed data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course the distributed data processing system may also be implemented to include a number of different types of networks such as for example an intranet a local area network LAN a wide area network WAN or the like. As stated above is intended as an example not as an architectural limitation for different embodiments of the disclosed subject matter and therefore the particular elements shown in should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.

With reference now to a block diagram of an exemplary data processing system is shown in which aspects of the illustrative embodiments may be implemented. Data processing system is an example of a computer such as client in in which computer usable code or instructions implementing the processes for illustrative embodiments of the disclosure may be located.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor SMP system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices. A storage device is any piece of hardware that is capable of storing information either on a temporary basis and or a permanent basis. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer recordable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code. The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. As one example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C C Objective C or the like and conventional procedural programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system other than the SMP system mentioned previously without departing from the spirit and scope of the disclosed subject matter.

The techniques described herein may operate in conjunction within the standard client server paradigm such as illustrated in in which client machines communicate with an Internet accessible cloud based portal or application executing on a set of one or more machines. End users operate Internet connectable devices e.g. desktop computers notebook computers Internet enabled mobile devices or the like that are capable of accessing and interacting with the portal or application. Typically each client or server machine is a data processing system such as illustrated in comprising hardware and software and these entities communicate with one another over a network such as the Internet an intranet an extranet a private network or any other communications medium or link. A data processing system typically includes one or more processors an operating system one or more applications and one or more utilities. The applications on the data processing system provide native support for Web services including without limitation support for HTTP SOAP XML WSDL UDDI and WSFL among others. Information regarding SOAP WSDL UDDI and WSFL is available from the World Wide Web Consortium W3C which is responsible for developing and maintaining these standards further information regarding HTTP and XML is available from Internet Engineering Task Force IETF . Familiarity with these standards is presumed.

By way of additional background virtualization techniques enable the configuration of physical resources. One such virtualization technique is logical partitioning. Logical partitioning is the ability to make a server run as if it were two or more independent servers. When a server is logically partitioned the resources on the server are divided into subsets called logical partitions. Software may be installed on a logical partition and the logical partition runs as an independent logical server with the resources that are allocated to the logical partition. Processors memory and input output I O devices can be assigned to logical partitions. I O devices include network adapters.

With virtual adapters logical partitions can be connected with each other without using physical hardware. Operating systems can display configure and use virtual adapters just like they can display configure and use physical adapters. Depending on the operating environment used by the logical partition virtual Ethernet adapters virtual Fibre Channel adapters virtual Small Computer Serial Interface SCSI adapters and virtual serial adapters for a logical partition can be created and managed. Similarly the Ethernet adapters are visible in the same way as physical Ethernet adapters. By default virtual Ethernet Media Access Control MAC addresses are created from the locally administered range. Using the default MAC addresses it is possible that different servers will have virtual Ethernet adapters with the same addresses.

Virtual Ethernet allows logical partitions to communicate with each other without having to assign physical hardware to the logical partitions. Virtual Ethernet adapters can be created on each logical partition and connected to virtual LANs. TCP IP communications over these virtual LANs is routed through the server firmware. A logical partition can use virtual Ethernet adapters to establish multiple high speed inter partition connections within a single managed system. Logical partitions can communicate with each other using TCP IP over the virtual Ethernet communications ports. Virtual Ethernet adapters are connected to an IEEE 802.1q VLAN style virtual Ethernet switch. Using this switch function logical partitions can communicate with each other by using virtual Ethernet adapters and assigning VLAN IDs that enable them to share a common logical network. The virtual Ethernet adapters are created and the VLAN ID assignments typically are done using a hardware management console. When configured the system transmits packets by copying the packet directly from the memory of the sender logical partition to the receive buffers of the receiver logical partition preferably without any intermediate buffering of the packet. An Ethernet bridge may be configured between the virtual LAN and a physical Ethernet adapter that is owned by a virtual server or a logical partition. The logical partitions on the virtual LAN can communicate with an external Ethernet network through the Ethernet bridge.

In an example virtual machine hosting environment sometimes referred to herein as a data center or cloud is illustrated. This environment comprises host machines HM e.g. servers or like physical machine computing devices connected via a network and a management server . As shown in physical servers . . . are each adapted to dynamically provide one or more virtual machines VM. . . VMdenoted as through respectively using virtualization technology. Such technology is available commercially e.g. from VMware or others. Server virtualization is a technique that is well known in the art. As depicted multiple VMs can be placed into a single host machine and share the host machine s CPU memory and other resources thereby increasing the utilization of an organization s data center. The management server may be connected to a client console or to a global management system that manages larger scale infrastructure if the data center is being managed with other data centers . The management server monitors the infrastructure and automatically manipulates the VM placement as needed e.g. by moving virtual machines between hosts suspending resuming virtual machines and the like.

As noted above Software Defined Networking SDN is a network paradigm that separates each network service from its point of attachment to the network creating a far more dynamic flexible automated and manageable architecture. Using SDN administrators can move virtual resources throughout the network create private virtual networks that meet specific performance and security needs and use a host of other high value applications. The key to SDN is an innovative approach to controlling how data flows through a network.

In a traditional network data flow is controlled by switches and routers. Each switch and router contains several basic elements a data plane a control plane and a management plane. The data plane physically carries data packets from one port to another by following rules that are programmed into the device hardware and typically plane operates at the speed of the network wire speed . The control plane contains the logic that the device uses to program the data plane so packets are forwarded correctly throughout the network. The management plane enables an administrator to log in to the device and configure it for basic activities. Most devices can be configured locally or through a network management tool. Vendors use control plane software to optimize data flow to achieve high performance and a competitive advantage. The switch based control plane paradigm however gives network administrators little opportunity to increase data flow efficiency across the network as a whole. SDN abstracts flow control from individual devices to the network level. Similar to server virtualization where virtual machines are de coupled from the physical server network wide virtualization gives administrators the power to define network flows that meet the connectivity requirements of end stations and to address the specific needs of discrete user communities. SDN uses a modular approach that is structured and layered to provide the same functions as a traditional network device yet in a centralized and highly available fashion.

As further background it is known to use a software defined network SDN controller to segregate and prioritize SDN controlled routes in a switch routing table. One goal of a SDN is to allow the network to be programmable via a SDN controller. The SDN controller typically is physically separated from any of the controlled network switches but is not necessarily located remotely therefrom. One method that allows for programmability of the network may involve the use of the OpenFlow communication protocol. Other applications that may allow for programmability of the network may be used in addition to or in place of OpenFlow. Other methods that allow for the network to be programmable involve more traditional approaches such as simple network management protocol SNMP network configuration protocol NetConf etc. In future versions of OpenFlow support may be added for programming layer 3 IPv4 and layer 3 IPv6 Forwarding Elements via OpenFlow. Layer 3 forwarding element programming via OpenFlow may add support to program the Layer 3 forwarding table also referred to as a Forwarding Information Base FIB . In contrast to the Routing Information Base RIB the FIB is optimized for fast longest prefix match lookup of a destination internet protocol IP address and may be used for data path forwarding. OpenFlow Layer 3 forwarding element programming may be used by SDN user applications to program the Layer 3 forwarding tables in some conventional uses.

The SDN controller has logic integrated with and or executable by a processor wherein the logic is adapted to determine SDN routes through the network between the one or more devices and each of the plurality of switches and to send one or more SDN routes to each switch in the network capable of communicating with the SDN controller. illustrates this known functionality.

In a system comprises switches A G with each switch connected in a network via connections of any known type such as Ethernet Cat 5 Cat5e etc. fiber channel FC optical fiber coaxial cabling multi mode fiber etc. The switches may make use of a media access control MAC table and a route table within each switch for choosing transmission routes between devices in the network depending on whether the traffic is Layer 2 or Layer 3. In particular the MAC table may be used to determine destination addresses for Layer 2 traffic while the route table may be used to determination routes for delivery of Layer 3 traffic. With a SDN route calculation functionality for each of the switches may be moved from the processors CPUs of the switches to a different system which is not a switch or a router namely the SDN controller . The SDN controller may perform the route calculations and send the route calculations to the switches but not necessarily the route information. In this manner the SDN moves away from a distributed to a centralized mechanism where the controller learns about the whole network and configures the route tables and MAC tables in a status that ultimately is used to decide which packet is delivered through which route.

An SDN based virtual environment VE is shown in . This architecture provides an exemplary implementation to support SDN in the context of a virtual network such as shown in . It provides for a multi tenant SDN.

The SDN VE virtualized network is built as an overlay on existing IP or OpenFlow network . A connectivity server is the control place for the virtual network. It is a logically centralized entity that is responsible for determining forwarding decisions and network policy enforcement in the virtual network. This server corresponds to the SDN controller in . An overlay enabled vSwitch is the data plane of the virtual network. It is responsible for data traffic from source end station to destination end station. A management console is the management plane. Users can create and manage virtual networks through the management console. One or more overlay gateways are used to connect to non virtualized end stations and connecting to physical networks. The network virtual solution provides application programming interfaces APIs that orchestration tools and applications can use to programmatically access the network. In this example there are three 3 virtual networks corresponding to three 3 distinct tenants. A representative commercial implementation of this architecture may be implemented using IBM SDN VE Virtualized Network.

As illustrated the above described architecture comprises a hardware layer that includes the physical machines and resources a hypervisor and individual virtual machines. The virtual machines run on virtual networking technologies such as VMware ESX ESXi. An operating system one or more applications and other virtual resources may be associated with a virtual machine. Representative platform technologies are without limitation IBM System X servers with VMware vSphere 4.1 Update 1 and 5.0.

With the above as background the subject matter of this disclosure is now described. Without limitation the subject matter may be implemented within or in association with an SDN switch and SDN controller operating within a virtualized network environment as has been described above.

Multi tenant support in this type of operating environment relies on several elements data segregation tenant awareness and multi tenant capable. Data segregation refers to the notion that tenant specific data e.g. policy information configuration information and event information is separated between and among tenants. Tenant awareness refers to the notion of information processing devices that protect both physical and virtual network paths. Multi tenant capable refers to the notion of information processing that applies specific tenant policy to tenant specific information flows.

According to this disclosure an SDN switch e.g. vSwitch as shown in has one or more dedicated ports which are referred to below as information processing ports or IPPs . The smallest unit in each tenant is one such port namely the IPP on the switch. Thus a particular IPP on the switch can only be associated with one and only one tenant. Accordingly the particular port tenant association is unique and as will be seen these associations facilitate the tracking and enforcing of routing within or across the switch while at the same time assuring the data segregation and tenant isolation properties that are necessary to facilitate multi tenant support. In this manner the characteristics of a non overlay SDN are leveraged to support multi tenancy in an efficient manner namely by associating a specific tenant with a specific port an IPP on the virtual switch once rather than continuously parsing tenant data from the information flow as is required for processing flows encapsulated in tunneling protocols . As will be seen the technique enables the application of tenant specific policy to tenant specific network flows.

In this approach tenant flows are identified by associating their flows with specific ports IPPs on the virtual switch to which they are connected. A specific tenant is associated with a specific port once rather than continuously. Direct network flow processing is then enabled in a manner for any type of packet processing device PPD coupled to that IPP.

As used herein a PPD may any type of virtual flow processor such as a firewall an intrusion prevention system IPS a content filters and the like.

As will be seen the technique of this disclosure includes several aspects. The first aspect is that the SDN controller maintains the tenancy on the SDN network using the notion of an IPP and port tenant association table. As an example depicts an SDN switch and its associated SDN controller . In this embodiment there are two tenants tenant A having two machines and and tenant B having two machines and . Of course the number of tenants and their associated machines are merely representative. A machine may be a physical machine or a virtual machine. Each machine is coupled to a port on the switch . Thus machine is coupled to port machine is coupled to port machine is coupled to port and machine is coupled to port . The switch may belong to one or more than one tenant as long as there is more than one tenant running on the single switch the SDN controller needs to maintain the tenancy on the switch. As also shown in this example there is one PPD namely IPS which PPD is coupled to two other switch ports namely port and port . As will be described each port and also is dedicated as an IPP.

To maintain the tenancy illustrated in the SDN controller needs to know which port on the switch or any other switch belongs to which tenant. To that end the controller preferably maintains a port tenant association table such as illustrated in . In this embodiment table includes three 3 columns a switch ID column a port number column and a tenant ID column . The structure of the table maintaining the tenancy data is not limited to any form. The information may be maintained in other types of data structures such as data arrays linked lists relational tables or the like. Tenancy support can be added in the SDN controller provided the controller can look up the tenant information using the Tenant ID using the switch port information.

The use of dedicated information processing ports IPPs on the switch enables each IPP to provide its own processing capability which may be the same as or different from the processing capability of any other IPP. Further a PPD can be coupled connected to the SDN switch via one or more IPP. Using network traffic flow as an example the processing capability may an IPS a firewall or some other packet flow processor. To process information from each tenant in the tenancy the SDN controller may provision one PPD for each tenant or multiple IPPs may be provisioned on one PPD. illustrates the former case and illustrates the latter case. In there are once again two tenants A and B and in this example two PPDs and . In this example tenant A uses PPD and tenant B uses PPD . In there is just one PPD and this PPD is used by both tenant A and tenant B . In and as illustrated there are multiple IPPs ports and with each IPP associated with a specific tenant. Thus for example tenant A uses IPP port while tenant B uses IPP port .

By dedicating IPPs to specific tenants network flows across the switch may be managed while preserving tenancy. illustrates this process for switch having an associated SDN controller in which the port tenant association table such as shown in is maintained. Once again there are two tenants tenant A and tenant B and a pair of PPDs and . This is the embodiment illustrated in . Here there are two IPPs with switch port the first IPP coupled to the PPD and with switch port the second IPP coupled to the PPD . As described above in the SDN controller has the native capability to push one or more packet forwarding rules to the SDN switch to output a packet to any port. illustrates a representative packet forwarding rule table that may be used for this purpose. This particular forwarding rule table is merely exemplary and it includes a set of columns an input port column a source MAC address column a destination MAC address column a source IP address column a destination IP address column and an action column . The particular values in the table are not intended to be limiting. The format of the packet forwarding rules depends on the SDN protocol. Table conforms to the OpenFlow protocol. Referring back to it can be seen that the network flow s sent from the different tenants are then directed to different tenant ports according to the packet forwarding rules in the table. Thus for example the flow that originates from machine machine A for Tenant A is sent to port table first row but the flow that originates from machine machine B for Tenant B is sent to port table fourth row . The other network flows are determined by the other packet forwarding rules as specified in the table .

By maintaining both the port tenant association table and the packet forwarding rules table the SDN controller thus has the capability of determining whether any changes to the packet forwarding rules or more generally policy changes might conflict with the tenancy established and maintained by the SDN controller. By using the managed table tenant port associations the SDN controller thus can evaluate policy changes before they are activated in the SDN to ensure that such changes do not conflict with existing configurations. This administration monitoring function thus enables improved tenant awareness because the SDN controller only distributes to the SDN switch fabric those policy changes that comply with the multi tenant security policy.

Of course the two tenants may send out two identical information flows. To process the flow using the corresponding policy in each tenant the PPD must also know which tenant sent the flow. As noted above the subject technique addresses this concern by binding the tenant information to the IPP i.e. ensuring that each IPP only belongs to one tenant . Therefore when the PPD receive the flow from an IPP to which it is coupled the PPD can determine which tenant sent the flow. If the PPD has more than IPP the PPD has the responsibility to use the correct policy to process the flow once it receives the tenant information bound to the flow.

With reference now to and as previously described there may be multiple PPDs coupled to the switch . Each PPD can provide a different function. In this example PPD provides a first packet processing function and PPD provides a second processing function distinct from the first processing function. As a concrete example PPD may be an IPS and PPD may be a firewall. If the multiple PPDs need to be coordinated the SDN controller can provide the SDN switch with a suitable policy to control such coordination. The particular details of the coordination policy and its format will depend on the nature of the SDN controller but a sample policy is shown in . There are multiple ways to define the forwarding behavior in the policy and the table shown in uses a firewall rule like format. This is not intended to be limiting. Generalizing the table or more generally the policy specifies which network flow sent from which place should be forwarded to which device. To that end the policy is defined by a table that includes a set of columns an input column a tenant ID column a source MAC address column a destination MAC address column a source IP address column a destination IP address column a source port column a destination port column and an action column . In this example which is merely representative every packet sent out from the tenant 123 on Vswitch 001 is forwarded to PPD in after PPD processes the packet and according to the policy it sends the packet to PPD in unless the source IP addresss src ip is 1.2.3.4. According to the policy if the src ip is 1.2.3.4 the packet is forwarded to the destination. After PPD processes the packet it forwards the packet to the destination.

Referring back to this operation is shown. In particular at step 1 machine associated with the first tenant sends the packet to port which couples it to PPD . Once the packet is processed it is forwarded at step 2 to PPD . PPD and PPD each have different processing capability as has been described. After PPD processes it the packet is forwarded back to machine associated with the tenant .

Generalizing the SDN controller of this disclosure maintains tenant port association data and pushes to the switch per tenant policy e.g. packet forwarding rules to ensure compliance with the multi tenant security policy requirements. A per tenant IPP on the switch enables traffic sent to or from a tenant to be distinguished from that of another tenant even with respect to PPDs that share a particular switch port. The approach thus leverages direct SDN properties while avoiding overlay overhead required to continuously parse tenant data from the information flows themselves.

The techniques of this disclosure provide significant advantages. As has been described and illustrated the approach advantageously enables the application of tenant specific policy to tenant specific network flows. The approach obviates associating a tenant specific flow with a protocol tunnel or the requirement to continuously parse tenant data from the information flow itself. Rather a specific tenant is associated with a specific IPP just once and the tenant port associations are then used to ensure that policy changes to be delivered to the switch fabric comply with the multi tenant security policy. The SDN controller populates the policies e.g. the packet forwarding rules for the SDN switch or across multiple such switches to isolate each tenant.

As has been described the technique herein preferably leverages several elements maintenance within or in association with the SDN controller of a table of tenant port associations and a monitoring function by the SDN controller that SDN routing tables properly enforce the required properties dictated by those tenant port associations. The managed table of tenant port associations is maintained in the SDN controller and a monitoring process evaluates policy changes prior to their activation in the SDN. Based on that evaluation the SDN controller may alert an SDN administrator operator of potential security property violations. These functions provide for a tenant aware SDN namely by permitting the SDN controller to distribute to the SDN switch fabric only such changes that would comply with multi tenant security policy.

As is well known one benefit of tenant segregation is the ability to insert virtual flow processors i.e. firewalls intrusion detection and content analyzers or other PPDs into tenant specific network flows. By dedicating a port on the vSwitch to act as an IPP according to this disclosure the SDN controller can communicate to each switch in the network the policy required to route various tenant transmissions to dedicated PPDs. In this way an SDN can effectively enforce and monitor a switch configuration to assure the appropriate PPD is assigned to the appropriate tenants. The techniques described herein therefore enrich existing SDN controllers their vSwitch s and the resulting packet flow in the environment to achieve multi tenancy with otherwise non tenant aware SDN infrastructure.

The approach as described herein may be applied to both physical and virtual SDN switches. The technique may apply to all types of network services and as illustrated in it advantageously enables chaining services together. Further the technique is independent of any protocol thereby to reduce overhead that might otherwise be incurred to introduce a client to the network environment.

Preferably the SDN controller is implemented as programmable logic implemented in a processor. This programmable logic uses tenant port association data and the monitoring functionality as described to maintain the multi tenant SDN.

As has been described the functionality described above may be implemented as a standalone approach e.g. a software based function executed by a processor or it may be available as a managed service including as a web service via a SOAP XML interface . The particular hardware and software implementation details described herein are merely for illustrative purposes are not meant to limit the scope of the described subject matter.

More generally computing devices within the context of the disclosed subject matter are each a data processing system such as shown in comprising hardware and software and these entities communicate with one another over a network such as the Internet an intranet an extranet a private network or any other communications medium or link. The applications on the data processing system provide native support for Web and other known services and protocols including without limitation support for HTTP FTP SMTP SOAP XML WSDL UDDI and WSFL among others. Information regarding SOAP WSDL UDDI and WSFL is available from the World Wide Web Consortium W3C which is responsible for developing and maintaining these standards further information regarding HTTP FTP SMTP and XML is available from Internet Engineering Task Force IETF . Familiarity with these known standards and protocols is presumed.

Still more generally the subject matter described herein can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the trusted platform module function is implemented in software which includes but is not limited to firmware resident software microcode and the like. Furthermore the download and delete interfaces and functionality can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain or store the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or a semiconductor system or apparatus or device . Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD. The computer readable medium is a tangible non transitory item.

The computer program product may be a product having program instructions or program code to implement one or more of the described functions. Those instructions or code may be stored in a computer readable storage medium in a data processing system after being downloaded over a network from a remote data processing system. Or those instructions or code may be stored in a computer readable storage medium in a server data processing system and adapted to be downloaded over a network to a remote data processing system for use in a computer readable storage medium within the remote system.

In a representative embodiment the SDN controller is implemented in a special purpose computing platform preferably in software executed by one or more processors. The software is maintained in one or more data stores or memories associated with the one or more processors and the software may be implemented as one or more computer programs. Collectively this special purpose hardware and software comprises the functionality described above.

In the preferred embodiment the functionality provided herein is implemented as an adjunct or extension to an existing cloud compute or virtual networking management solution.

While the above describes a particular order of operations performed by certain embodiments of the invention it should be understood that such order is exemplary as alternative embodiments may perform the operations in a different order combine certain operations overlap certain operations or the like. References in the specification to a given embodiment indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic.

Finally while given components of the system have been described separately one of ordinary skill will appreciate that some of the functions may be combined or shared in given instructions program sequences code portions and the like.

The reference to packet protection device or PPD should not be taken to limit the disclosed subject matter to any particular type or source of packet inspection technology or software. The term is intended to refer generically to packet inspection functionality which need not be a stand alone product or set of code.

The techniques herein provide for improvements to technology or technical field namely virtual networking environments as well as improvements to SDN switches and SDN controllers themselves.

