---

title: Restoring non-transactional messages in queues for advertisement data flow processing
abstract: The disclosed online system includes a number of processing blocks, including a feeding service that sends a data stream and a consuming service that receives a data stream, without sending back acknowledgements for the data (i.e., “nontransactional”). The system handles failure in the feeding service and/or the consuming service by adding reference points into the data stream and backing up a current sum that is maintained by the consuming service. Upon a failure of the consuming service, the system obtains the last reference point, restores the backup copy of the database, and starts reading the backup copy from that check point. To address a failure of the feeding service, the feeding service creates an identifier for each message in the data stream, and upon failure, the consuming service checks for messages that have the same identifier within a specified period of time, and discards any duplicate messages.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09606877&OS=09606877&RS=09606877
owner: Facebook, Inc.
number: 09606877
owner_city: Menlo Park
owner_country: US
publication_date: 20150518
---
This disclosure relates generally to online advertising and more specifically to restoring non transactional messages in queues for advertisement data flow processing.

Online systems such as an advertising platform include one or more ad servers that provide a centralized location for advertisers to manage advertisement or ad campaigns and report information about those campaigns. The online system may perform various processes or services that participate in the data flow processing for serving an advertisement. For each service the online system uses messages to keep track of the service status. For example messages may inform the online system that an ad was shown along with the clearing price of the ad. These messages are stored in queues that decouple the various independent services that process the data stream. In other words the queue allows data to be transferred between independent services without sending back acknowledgements that the data was sent or received.

In a distributed system queues provide availability but typically lack strong guarantees regarding certain queue semantics such as the delivery of messages to and from the queue. For example the queue may guarantee that a message including a notification of an ad being served will be sent from one service. But such a guarantee does not prevent the message from being sent multiple times from the queue. Nor does such a guarantee ensure that the message will be received by the other service. Accordingly conventional queue guarantees do not provide a mechanism to recover from a failure by one or both services on either side of the queue.

An online system includes a number of processing blocks including a feeding service that sends a data stream and a consuming service that receives a data stream without sending back acknowledgements for the data i.e. nontransactional . In a case where the system is an advertisement platform the feeding service may be a limiter which applies limits to ad impressions and the consuming service may be an aggregator which aggregates data about impressions for use e.g. by a pacer and the data streams may comprise pairs of data including a limit identifier and a cost associated with an impression. The system handles failure in the feeding service and or the consuming service by adding checkpoints into the data stream and backing up a current sum that is maintained by the consuming service. Upon a failure of the consuming service the system obtains the last checkpoint restores the sum and starts over from that checkpoint. To address a failure of the feeding service the feeding service creates a unique code or identifier for each data point in the stream and upon failure the consuming service returns to the last checkpoint and restarts ignoring data points containing a code that has already been aggregated.

The figures depict various embodiments of the disclosure for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the embodiments described herein.

The client devices are one or more computing devices capable of receiving user input as well as transmitting and or receiving data via the network . In one embodiment a client device is a conventional computer system such as a desktop or a laptop computer. Alternatively a client device may be a device having computer functionality such as a personal digital assistant PDA a mobile telephone a smartphone or another suitable device. A client device is configured to communicate via the network . In one embodiment a client device executes an application allowing a user of the client device to interact with the online system . For example a client device executes a browser application to enable interaction between the client device and the online system via the network . In another embodiment a client device interacts with the online system through an application programming interface API running on a native operating system of the client device such as IOS or ANDROID .

The client devices are configured to communicate via the network which may comprise any combination of local area and or wide area networks using both wired and or wireless communication systems. In one embodiment the network uses standard communications technologies and or protocols. For example the network includes communication links using technologies such as Ethernet 802.11 worldwide interoperability for microwave access WiMAX 3G 4G code division multiple access CDMA digital subscriber line DSL etc. Examples of networking protocols used for communicating via the network include multiprotocol label switching MPLS transmission control protocol Internet protocol TCP IP hypertext transport protocol HTTP simple mail transfer protocol SMTP and file transfer protocol FTP . Data exchanged over the network may be represented using any suitable format such as hypertext markup language HTML or extensible markup language XML . In some embodiments all or some of the communication links of the network may be encrypted using any suitable technique or techniques.

One or more third party systems may be coupled to the network for communicating with the online system which is further described below in conjunction with . In one embodiment a third party system is an application provider communicating information describing applications for execution by a client device or communicating data to client devices for use by an application executing on the client device. In other embodiments a third party system provides content or other information for presentation via a client device . A third party system may also communicate information to the online system such as advertisements content or information about an application provided by the third party system . For example in one embodiment the third party system is an advertising ad exchange system that provides a digital marketplace that enables advertisers and publishers to buy and sell advertising space through real time auctions.

In some examples the online system is a social networking system though it can take on the form of other online systems as well. illustrates an example of components that might be included in the online system where it is a social networking system. If the online system is something other than a social networking system such as a more general advertising platform then certain of the social networking components such as an edge store may be not included or otherwise modified to fit that system.

Each user of the online system is associated with a user profile which is stored in the user profile store . A user profile includes declarative information about the user that was explicitly shared by the user and may also include profile information inferred by the online system . In one embodiment a user profile includes multiple data fields each describing one or more attributes of the corresponding social networking system user. Examples of information stored in a user profile include biographic demographic and other types of descriptive information such as work experience educational history gender hobbies or preferences location and the like. A user profile may also store other information provided by the user for example images or videos. In certain embodiments images of users may be tagged with information identifying the online system users displayed in an image. A user profile in the user profile store may also maintain references to actions by the corresponding user performed on content items in the content store and stored in the action log . Information stored in the user profile store may be used by the advertising system to place ads on websites accessed by a user of the online system associated with the user profile store .

While user profiles in the user profile store are frequently associated with individuals allowing individuals to interact with each other via the online system user profiles may also be stored for entities such as businesses or organizations. This allows an entity to establish a presence on the online system for connecting and exchanging content with other online system users. The entity may post information about itself about its products or provide other information to users of the social networking system using a brand page associated with the entity s user profile. Other users of the social networking system may connect to the brand page to receive information posted to the brand page or to receive information from the brand page. A user profile associated with the brand page may include information about the entity itself providing users with background or informational data about the entity.

The content store stores objects that each represents various types of content. Examples of content represented by an object include a page post a status update a photograph a video a link a shared content item a gaming application achievement a check in event at a local business a brand page or any other type of content. Social networking system users may create objects stored by the content store such as status updates photos tagged by users to be associated with other objects in the social networking system events groups or applications. In some embodiments objects are received from third party applications or third party applications separate from the online system . In one embodiment objects in the content store represent single pieces of content or content items. Hence online system users are encouraged to communicate with each other by posting text and content items of various types of media to the online system through various communication channels. This increases the amount of interaction of users with each other and increases the frequency with which users interact within the online system .

The action logger receives communications about user actions internal to and or external to the online system populating the action log with information about user actions. Examples of actions include adding a connection to another user sending a message to another user uploading an image reading a message from another user viewing content associated with another user and attending an event posted by another user. In addition a number of actions may involve an object and one or more particular users so these actions are associated with those users as well and stored in the action log .

The action log may be used by the online system to track user actions on the online system as well as actions on third party systems that communicate information to the online system . Users may interact with various objects on the online system and information describing these interactions is stored in the action log . Examples of interactions with objects include commenting on posts sharing links checking in to physical locations via a mobile device accessing content items and any other suitable interactions. Additional examples of interactions with objects on the online system that are included in the action log include commenting on a photo album communicating with a user establishing a connection with an object joining an event joining a group creating an event authorizing an application using an application expressing a preference for an object liking the object and engaging in a transaction. Additionally the action log may record a user s interactions with advertisements on the online system as well as with other applications operating on the online system . In some embodiments data from the action log is used to infer interests or preferences of a user augmenting the interests included in the user s user profile and allowing a more complete understanding of user preferences.

The action log may also store user actions taken on a third party system such as an external website and communicated to the online system . For example an e commerce website may recognize a user of an online system through a social plug in enabling the e commerce website to identify the user of the online system . Because users of the online system are uniquely identifiable e commerce websites such as in the preceding example may communicate information about a user s actions outside of the online system to the online system for association with the user. Hence the action log may record information about actions users perform on a third party system including webpage viewing histories advertisements that were engaged purchases made and other patterns from shopping and buying.

In one embodiment the edge store stores information describing connections between users and other objects on the online system as edges. Some edges may be defined by users allowing users to specify their relationships with other users. For example users may generate edges with other users that parallel the users real life relationships such as friends co workers partners and so forth. Other edges are generated when users interact with objects in the online system such as expressing interest in a page on the online system sharing a link with other users of the online system and commenting on posts made by other users of the online system .

In one embodiment an edge may include various features each representing characteristics of interactions between users interactions between users and objects or interactions between objects. For example features included in an edge describe rate of interaction between two users how recently two users have interacted with each other the rate or amount of information retrieved by one user about an object or the number and types of comments posted by a user about an object. The features may also represent information describing a particular object or user. For example a feature may represent the level of interest that a user has in a particular topic the rate at which the user logs into the online system or information describing demographic information about a user. Each feature may be associated with a source object or user a target object or user and a feature value. A feature may be specified as an expression based on values describing the source object or user the target object or user or interactions between the source object or user and target object or user hence an edge may be represented as one or more feature expressions.

The edge store also stores information about edges such as affinity scores for objects interests and other users. Affinity scores or affinities may be computed by the online system over time to approximate a user s interest in an object or another user in the online system based on the actions performed by the user. A user s affinity may be computed by the online system over time to approximate a user s interest for an object a topic or another user in the online system based on actions performed by the user. Computation of affinity is further described in U.S. patent application Ser. No. 12 978 265 filed on Dec. 23 2010 U.S. patent application Ser. No. 13 690 254 filed on Nov. 30 2012 U.S. patent application Ser. No. 13 689 969 filed on Nov. 30 2012 and U.S. patent application Ser. No. 13 690 088 filed on Nov. 30 2012 each of which is hereby incorporated by reference in its entirety. Multiple interactions between a user and a specific object may be stored as a single edge in the edge store in one embodiment. Alternatively each interaction between a user and a specific object is stored as a separate edge. In some embodiments connections between users may be stored in the user profile store or the user profile store may access the edge store to determine connections between users.

One or more advertisement requests ad requests are included in the ad request store . An advertisement request includes advertisement content and a bid amount. The advertisement content is text image audio video or any other suitable data presented to a user. In various embodiments the advertisement content also includes a landing page specifying a network address to which a user is directed when the advertisement is accessed. The bid amount is associated with an advertisement by an advertiser or another party on behalf of the advertiser. The bid amount is used to determine an expected value such as monetary compensation provided by an advertiser to online system if the advertisement is presented to a user if the advertisement receives a user interaction or based on any other suitable condition. For example the bid amount specifies a monetary amount that the online system receives from the advertiser if the advertisement is displayed and the expected value is determined by multiplying the bid amount by a probability of the advertisement being accessed. In some embodiments the bid amount and bid response are communicated to and from the online system using an ad exchange that facilitates the buying and selling of online media advertising inventory whose prices are determined through bidding from multiple ad networks.

Additionally an advertisement request may include one or more targeting criteria specified by the advertiser. Targeting criteria included in an advertisement request specify one or more characteristics of users eligible to be presented with advertisement content in the advertisement request. For example targeting criteria are used to identify users having user profile information edges or actions satisfying at least one of the targeting criteria. Hence targeting criteria allow an advertiser to identify users having specific characteristics simplifying subsequent distribution of content to different users.

In one embodiment targeting criteria may specify actions or types of connections between a user and another user or object of the online system . Targeting criteria may also specify interactions between a user and objects performed external to the online system such as on a third party system . For example targeting criteria identifies users that have taken a particular action such as sending a message to another user using an application joining a group leaving a group joining an event generating an event description purchasing or reviewing a product or service using an online marketplace requesting information from a third party system or any other suitable action. Including actions in targeting criteria allows advertisers to further refine users eligible to be presented with content from an advertisement request. As another example targeting criteria identifies users having a connection to another user or object or having a particular type of connection to another user or object.

The advertising system includes an ad server and various independent services for processing a data stream of messages related to serving an ad. As explained above the advertising system can be a component of the online system though it can also be a separate entity or advertising platform that interacts with the online system . For example the advertising system may be an advertising platform that allows advertisers to create and manage campaigns and the online system may be a system that serves to users ads from those campaigns within advertising space available on webpages of the online system . In one embodiment an ad server may be a computer system such as a web server and a database server that stores ads for delivery to users of the online system via web sites accessed by the online system users. The ad server delivers ads to users of the online system manages the advertising space of a web site for receiving the ad and provides notifications used by the various independent processing services for counting and tracking information about the distribution of ads. The ad server may serve ads from one or more publishers. The ad server delivers the ads from a central source and thus may track the distribution of ads for multiple advertisers and publishers. The ad server receives a notification universal resource locator URL . In embodiments in which the ad system and online system are separate the ad serve may provide ads to the online system for display on ad space within the online system s website.

The ad server may operate in conjunction with or include one or more services to count the number of ad impressions and or clicks for an ad set of ads or ad campaign and report generation report information about the served ads to the advertisers and track the ad spend compared to the goals of the advertiser for an ad or ad campaign. Example services include an ad monitor an ad limiter an ad aggregator and an ad pacer . The ad monitor may perform validity checks to detect fraudulent traffic fraudulent publishers and fraudulent web site visitors. For example the ad monitor performs behavioral filing to identify fraudulent web site visitors.

The ad limiter receives an input data stream that includes information indicating that an ad was shown for a specified cost maps the ad to a higher order identifier and generates an output data stream that includes an order set comprising a limit identifier and a cost for each ad shown. In an embodiment the input data stream includes an ordered set that specifies for each served ad an ad identifier id and an ad cost for the served ad. An example input data stream received by the ad limiter may include the ordered sets and where Ad1 and C1 specify the ad id and cost for a first served ad. Similarly ordered sets Ad2 C2 and Ad3 C3 specify the ad id and cost for a second and third served ad respectively. The ad id may be represented as a unique numeric or alpha numeric set of characters for a particular ad. The ad id may be specified by the advertiser a third party system or the online system . The cost may be a numeric value that represents a monetary value associated with the ad.

The ad limiter also maintains mapping of each ad id to an ad group id. Example ad groups include an ad set an ad campaign or group of advertisers associated with multiple ads. The ad group id associated with each ad set ad campaign or group of ads may be formatted in a manner similar to the ad id. To enable the online system to optimize the ad budget for specified group of ads the ad limiter maps the ad group id to a unique ad limit identifier id . In one embodiment the ad limit id is a value at which the bidder for a particular group of ads stops bidding. Example ad limits include a monetary value or a range of monetary values. The ad limiter receives information indicating that an ad was served identifies the ad id of the served ad maps the identified ad id to a limit id and increments a count associated with the ad limit id. The ad limiter repeats this operation for each group of ads until the count reaches a threshold corresponding to a value represented by the ad limit id for the specified group of ads. The count is used by the other downstream processes to determine how aggressively the online system bids on an impression and when to stop bidding based on the limit as described later with reference to the ad pacer . In one embodiment the ad limiter may employ different limit ids for different ad group types. For example the ad limiter may use a first set of limit ids for ad sets and a second set of limit ids for ad campaigns. For example a first ad limiter may map a set of ad set ids to limit ids L1 L5. While a second ad limiter may map a set of ad campaign ids to limit ids L6 L10. Structuring the mapping scheme in such a way allows the online system to better manage and optimize a customer s budget to achieve both an overall campaign goal but to also achieve goals for individual ad sets within a specific ad campaign.

The ad aggregator receives the output data stream from the ad limiter aggregates the costs associated with each limit id and manages the restoration of the data in the queue between the ad limiter and the ad aggregator upon a failure of the ad limiter . The ad aggregator aggregates all the costs for each limit id by incrementing a counter and propagates the aggregated information to the ad pacer via a memory cache which operates as a data distribution mechanism. The ad aggregator maintains in an embedded database system for storing portions of the received data stream. Example embedded database systems include a database system that runs locally on a computing system and listens on and is accessible using a single port. The embedded database included in the ad aggregator is a key value store. For example when the ad aggregator receives an ordered set from the ad limiter the embedded database looks up a key associated with L1 adds the value of C1 to a sum S1 and then stores the updated value of S1 in the embedded database. This process is repeated for each received ordered set of limit id and cost. At a specified interval the information stored in the embedded database is transferred to a memory cache and the values of the resets the sums associated with each key.

To aid in the recovery from a data processing service failure the ad aggregator creates backups of the data stored in the embedded database when the ad limiter detects control information included in the data stream received from the ad server . In one implementation the control information includes check points that are included in the data stream received from the ad server . The checkpoints provide a reference point in the data stream where a process can be restarted and resumed in the event of a failure of a data processing service. The check points are included in the data stream by the online system at specified intervals which may be configurable by the online system . Example intervals include every 10 seconds every minute or some other period of time sufficient to recover data from a failure a data processing service. In another implementation the check points are included in the data stream based on the rate at which data enters the data stream. So that the checkpoints may be used by the ad limiter as a reference point in the data stream where a process can be restarted and resumed in the event of a failure of a data processing service the check points are stored in a highly durable consistent and distributed storage engine . In one embodiment the distributed storage engine is a separate system from the advertising system . In one embodiment the backup of the data stream is stored in a distributed file system separate from the advertising system . Information stored in the distributed storage engine and distributed file system may be accessible by the ad limiter or the ad aggregator in the event of a failure of either the ad limiter or the ad aggregator .

As previously discussed the reference points in the data stream refer to locations in the backup of the data stream stored in an embedded database. The contents of the embedded database are backed up from the embedded database associated with the ad aggregator keyed off of the detection of an occurrence a reference point in the data stream. The backup is stored in a distributed file system . Example distributed file systems include Hadoop Distributed File System HDFS and other file system that are highly fault and provide high throughput access to application data and are suitable for applications that have large data sets. By accessing the stored backup of the data stream from the distributed filed system the ad data flow processing from the ad limiter may be resumed upon a failure of the ad aggregator .

The web server links the online system via the network to the one or more client devices as well as to the one or more third party systems . The web server serves web pages as well as other content such as JAVA FLASH XML and so forth. The web server may receive and route messages between the online system and the client device for example instant messages queued messages e.g. email text messages short message service SMS messages or messages sent using any other suitable messaging technique. A user may send a request to the web server to upload information e.g. images or videos that are stored in the content store . Additionally the web server may provide application programming interface API functionality to send data directly to native client device operating systems such as IOS ANDROID WEBOS or BlackberryOS.

During a failure of a sending service such as the ad limiter messages may be sent multiple times to a consuming service such as the ad aggregator or dropped prior to reaching the consuming service. When messages are sent multiple times to the consuming service the ad server may over report. For example in some data message recovery solutions if a consuming service fails upon restart the consuming service queries an ad server for a last check point. In response the ad server provides the last check point to the consuming service which resumes operation from the provided check point. This may result in double counting messages that occurred before the last known check point and over charging the customer. Alternatively when messages are dropped the ad server may under report to the advertiser. For example in some solutions the consuming service may restart from the provided check point responsive to a query read all messages to the next check point and discard them. This situation may result in under counting the messages and undercharging the customer.

The failure recovery mechanism employed by the disclosed advertising system uses a backup system keyed from the check points as previously described with reference to . Upon startup from a failure the ad aggregator queries the distributed storage engine for the last check point receives the check point and uses the check point as a reference to access the backup of the embedded database stored in the distributed file system from a point in time corresponding to the retrieved check point. The ad aggregator replaces the current database instance with the backup instance and replays the messages included in the restored instance of the database from the point of the check point.

The ad aggregator receives the output data stream from the ad limiter and increments a limit count for each received limit. For example when the ad aggregator receives an ordered set from the ad limiter the embedded database looks up a key associated with L1 adds the value of C1 to a sum S1 and then stores the updated value of S1 in the embedded database. This process is repeated for each received ordered set of limit id and cost. Using this example data stream the ad aggregator stores the contents of the embedded database up to the time at which CPoccurred in a distributed file system on a computing system that is separate from the computing system that includes the ad aggregator . As previously described with reference to example distributed file systems include Hadoop Distributed File System HDFS or other type of file system with sufficient availability durability and throughput to backup the state information that includes historical data stream information. The historical data may include data for multiple days of state information describing the data stream. The contents of the backup stored in location R associated with CPwill include the received limit ids. Using the previously example the contents backup R of the embedded database at the time of the occurrence of CPwould include limit ids Land L. The ad aggregator also stores the check point CPin a distributed storage engine for use as a reference point from which to begin reading the stream upon recovery a failure of the ad aggregator .

This cycle is repeated when the ad server includes another check point CPin the data stream. An example data stream may include ordered sets where CPrepresents check point 2. The ad limiter processes the received data that includes CPin a manner similar to that performed in step sending the processed data stream to the ad aggregator . The ad aggregator receives the check point CP updates the limit count creates a storage location in the distributed file system for storing a backup of the contents of the embedded database up to the time at which CPoccurred and stores the check point CPin the distributed storage engine . The storage location within the distributed file system associated with CPstores the backup R that includes the latest copy of the embedded database which is keyed off of the occurrence of CP. Backup R includes limit ids Land L along with limit ids Land Lthat occurred after CPand before CP.

In the event of a failure of the ad aggregator the ad aggregator can resume processing on startup by sending a query to the distributed storage engine to request the last check point. The ad aggregator retrieves the last check point from distributed storage engine retrieves entire backup of the embedded database keyed off of the last check point and replaces the present instance of the embedded database on the computing system that includes the ad aggregator . The ad aggregator uses the last check point to identify the portion of the data stream in the backup from which to restart the data processing of the data stream.

The ad aggregator also may recover from a failure that occurs after the storage of latest check point but prior to copying the instance of the embedded database keyed off of the latest check point. For an example data stream 

In another failure scenario a new machine may be assigned to handle a set of limit ids in the event of a machine failure. The new machine upon startup may query the distributed consensus system for the check point associated with the set of limit ids. In response to the query the distributed storage engine provides the requested check point and the new machine accesses the distributed file system and retrieves the copy of the embedded database keyed off of the retrieved check point and reads the stream from point in the retrieved copy of the embedded database that corresponds to the retrieved check point.

The foregoing description of the embodiments has been presented for the purpose of illustration it is not intended to be exhaustive or to limit the embodiments to the precise forms disclosed. Persons skilled in the relevant art can appreciate that many modifications and variations are possible in light of the above disclosure.

Some portions of this description describe the embodiments in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are commonly used by those skilled in the data processing arts to convey the substance of their work effectively to others skilled in the art. These operations while described functionally computationally or logically are understood to be implemented by computer programs or equivalent electrical circuits microcode or the like. Furthermore it has also proven convenient at times to refer to these arrangements of operations as modules without loss of generality. The described operations and their associated modules may be embodied in software firmware hardware or any combinations thereof.

Any of the steps operations or processes described herein may be performed or implemented with one or more hardware or software modules alone or in combination with other devices. In one embodiment a software module is implemented with a computer program product comprising a computer readable medium containing computer program code which can be executed by a computer processor for performing any or all of the steps operations or processes described.

The disclosed embodiments may also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for specified purposes and or it may comprise a general purpose computing device selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a non transitory tangible computer readable storage medium or any type of media suitable for storing electronic instructions which may be coupled to a computer system bus. Furthermore any computing systems referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

The disclosed embodiments may also relate to a product that is produced by a computing process described herein. Such a product may comprise information resulting from a computing process where the information is stored on a non transitory tangible computer readable storage medium and may include any embodiment of a computer program product or other data combination described herein.

Finally the language used in the specification has been principally selected for readability and instructional purposes and it may not have been selected to delineate or circumscribe the inventive subject matter. It is therefore intended that the scope of the disclosed embodiments be limited not by this detailed description but rather by any claims that issue on an application based hereon. Accordingly the disclosure of the embodiments is intended to be illustrative but not limiting of the scope of the embodiments which is set forth in the following claims.

