---

title: Platform for extension interaction with applications
abstract: Techniques for extension interaction with applications are described. Generally, an extension represents functionality for extending, modifying, customizing, and/or supplementing native functionality of an application. Techniques discussed herein provide a common extension platform that enables an extension to interact with multiple different applications utilizing components of the platform. The common extension platform, for instance, exposes a set of common extension application programming interfaces (APIs) that provide a common interaction surface between extensions and applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09389928&OS=09389928&RS=09389928
owner: Microsoft Technology Licensing, LLC
number: 09389928
owner_city: Redmond
owner_country: US
publication_date: 20150211
---
Computing devices typically leverage different applications and services hereinafter applications to enable various tasks to be performed such as productivity tasks web browsing content editing and so forth. Further applications generally include a default set of functionality for performing such tasks. It has been recognized however that default functionality of applications can be extended and or customized to suit various usage scenarios. Accordingly extensions have been developed that provide customization of default application functionality and or behavior. Generally extensions represent programs that modify or add functionality to an application and are not typically implemented independently of an application. Examples of extensions include ad blockers for web browsers dictionaries for word processors and translation capabilities for mobile applications.

Current ways for developing extensions typically require development of application specific extensions to suit different applications and or computing platforms. This increases the development burden on developers that wish to create common extension experiences that function across different applications and platforms but are currently limited to development of application specific extensions. This is also cumbersome for users who might desire to use extension capabilities e.g. dictionary based extensions across all applications.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Techniques for extension interaction with applications are described. Generally an extension represents functionality for extending modifying customizing and or supplementing native functionality of an application. Techniques discussed herein provide a common extension platform that enables an extension to interact with multiple different applications utilizing components of the platform. The common extension platform for instance exposes a set of common extension application programming interfaces APIs that provide a common interaction surface between extensions and applications.

Techniques described herein provide for extension interaction with applications. Generally an extension represents functionality for extending modifying customizing and or supplementing native functionality of an application. According to various implementations an extension may be implemented as a plug in an add in an add on and so forth. Techniques discussed herein provide a common extension platform that enables an extension to interact with multiple different applications utilizing components of the platform. The common extension platform for instance exposes a set of common application programming interfaces APIs that provide a common interaction surface between extensions and applications. For example an extension may call a particular common extension API to interact with multiple different autonomous applications such as to functionally reconfigure e.g. extend the applications.

Accordingly programming and computing resources are conserved by enabling an individual API to be utilized across multiple different applications such that different APIs are not required to be written stored and called on a per application basis.

Implementations discussed herein enable a common entry point for invoking an extension to be provided across multiple different applications. Examples of a common entry point include a common extension icon a common gesture a common key combination and so forth. Thus user interaction required to invoke an extension across different applications is simplified and a number of user interactions required to invoke an extension is reduced.

Implementations discussed herein support various extension permissions for specifying parameters for interaction between extensions and applications. Extension permissions for instance indicate allowed and or disallowed interactions between an extension and an application. In at least some implementations extension permissions are specified on a per application and or per extension basis.

Implementations discussed herein enable communication of information among different instances of an extension. For instance different instances of a particular extension are bound to different respective applications. Information may be exchanged among the different instances of the extension such as state information for their respective applications. Implementations cause various actions to be performed in response to the exchange of information such as functional reconfiguration of an application in response to state information regarding another application.

Implementations discussed herein provide an extension manager settings graphical user interface GUI that enables various extension related tasks to be performed. Examples of such tasks include disabling enabling and customizing installed extensions.

The extension manager GUI also enables new extensions to be obtained such as by providing an interface to a remote extension store. Thus user interactions required to obtain and manage extensions are reduced by providing a single integrated functionality for performing extension related tasks. Alternatively or additionally an extension store interface for obtaining additional extensions may be presented separately from the extension manager GUI.

In the following discussion an example environment is first described that is operable to employ techniques described herein. Next a section entitled Example Implementation Scenarios describes some example scenarios for extension interaction with applications in accordance with one or more embodiments. Next a section entitled Example Procedures describes some example procedures for extension interaction with applications in accordance with one or more embodiments. Finally a section entitled Example System and Device describes an example system and device that are operable to employ techniques discussed herein in accordance with one or more embodiments.

Thus the computing device may range from full resource devices with substantial memory and processor resources e.g. personal computers game consoles to a low resource device with limited memory and or processing resources such as traditional set top boxes hand held game consoles wearable devices smart appliances e.g. Internet of Things IoT devices and so forth. The computing device also relates to software that causes the computing device to perform various operations.

Computing device includes computer processor s and computer readable storage media media . Media includes an operating system applications an extension platform module extensions a store interface module and an input module .

Computing device also includes or has access to one or more displays and input mechanisms . The displays are generally representative of hardware and logic for visual output. The input mechanisms may include gesture sensitive sensors and devices such as touch based sensors and movement tracking sensors e.g. camera based as well as mice free standing or integral with a keyboard a stylus touch pads accelerometers and microphones with accompanying voice recognition software to name a few. The input mechanisms may be separate or integral with displays integral examples include gesture sensitive displays with integrated touch sensitive or motion sensitive sensors.

The operating system manages resources of computing device and may be implemented using any suitable instruction format. Operating system enables functionalities of computing device to access hardware and logic resources of computing device .

The applications include any suitable type of application and or service such as productivity applications web browsers media viewers navigation applications multimedia editing applications and so forth. According to various implementations the applications may be implemented as locally installed code that is executed as part of a local runtime environment. Additionally or alternatively the applications represent portals to distributed functionality such as web services cloud services distributed enterprise services and so forth. According to various implementations the individual applications represent autonomous applications that are executable independently of one another.

Individual applications include one or more application user interfaces UIs which enable viewing and or interaction with content of an application. The application UIs include predefined properties or preferences e.g. default values or settings for presenting an application such as an aspect ratio maximum size minimum size position primacy display orientation and so forth.

The applications further include and or are associated with application App specific APIs and extension permissions . Generally the app specific APIs enable access to content properties functionalities and or settings of the applications and or respective application UIs . In at least some implementations different instances of the applications include or are associated with different instances and or sets of the app specific APIs . As further detailed below the extensions may leverage the app specific APIs to interact with the applications .

According to various implementations the extension permissions specify various parameters for interaction between the extensions and the applications . For instance the extension permissions specify specific interactions and behaviors that are permitted and or not permitted between an extension and an application . The extension permissions may also specify particular types and instances of extensions that are permitted and or not permitted to interact with particular applications . In at least some implementations individual applications are associated with different extension permissions . Examples of different extension permissions are detailed below.

The extension platform module is representative of functionality to provide a common extension platform across the applications as well as other applications and services not specifically identified herein. For instance the extension platform module represents logic for performing various attributes of techniques for extension interaction with applications discussed herein.

The extension platform module includes and or has access to common extension APIs and an extension manager interface . The common extension APIs are representative of APIs that may be leveraged by the extensions to interact with the applications . For instance the common extension APIs enable the extensions to interact with visual and or functional aspects of the applications such as to augment and or customize the application UIs to receive state information from the applications and so forth. According to various implementations the common extension APIs are not specific to a particular application or extension and may be leveraged by the different extensions to interact with different applications . For instance a particular common extension API enables a common behavior to be applied among different applications .

The extension manager interface is representative of functionality to enable different aspects and attributes of the extensions to be configured. For instance the extension manager interface enables extensions to be enabled disabled customized and so forth. In at least some implementations the extension manager interface enables users to customize various settings of the extensions . The extension manager interface for instance is configured to present a graphical user interface GUI that enables users to view state information for the extensions and to configure various attributes of the extensions .

The extensions are representative of functionalities for extending and customizing various attributes and behaviors of the applications . For instance an extension may interact with an application provide additional functionality on top of native functionality enabled by the application . As another example an extension may extend and or customize existing native functionality of an application . In at least some implementations the extensions represent plug ins that interface with the applications in various ways. According to various implementations different instances of the extensions represent different respective functionalities and thus provide different respective behaviors functionalities customizations and so forth.

The extensions each include respective instances of a manifest a background script and a content script . The manifest includes descriptive information about an extension such as biographical information an extension logo an extension icon and so forth. In at least some implementations the manifest is implemented as a declarative file whereby an extension defines itself

According to various implementations the manifest includes permissions that a respective extension utilizes to interact with the applications . For instance different manifests may specify different types and instances of permissions that specify allowed and disallowed interactions with applications and or specific instances of the applications . A manifest for example may specify types of content that an extension may access from an application and or other functionality of the computing device . The manifest may also specify particular applications that an extension is permitted to interact with and or particular applications that an extension is not permitted to interact with. The manifest may be implemented in various ways such as an Extensible Markup Language XML file a JavaScript Object Notation JSON file and so forth.

The background script is representative of logic that is at the core of the extensions and that enables functionality of the respective extensions . The background script for instance enables the extensions to listen for events respond to events call APIs e.g. the app specific APIs the common extension APIs and so forth and generally execute logic of the extensions . In at least some implementations the background script is implemented as a JavaScript file.

According to various implementations the background script may be common across different instances of the extensions and the applications . Alternatively or additionally different instances of the extensions may include different implementations of the background script . In at least some implementations a background script runs persistently as a background process that listens and responds to various events. Alternatively or additionally a background may hibernate and be awakened in response to various events and or based on a pre defined set of rules.

The content script is representative of logic that runs in the context of the applications and that enables the extensions to interact with the applications in various ways. For instance the content script enables the extensions to inject visuals into the application UIs to extract information from the applications to customize and or extend functionalities of the applications and so forth. For example in the context of a web browser instance of the applications the content script includes executable script that is injected into the web browser UI and that runs concurrently with web pages displayed in the web browser UI. Further aspects and attributes of the extensions and their various components are detailed below. In at least some implementations the content script is implemented as a JavaScript file.

Generally the manifest the background script and the content script represent a common scripting model that is employed by the different extensions to enable various interactions by the extensions with the applications . For instance the configuration of the manifest the background script and the content script will vary among the different extensions but their general architecture remains consistent such that interaction with the different applications e.g. via the common extension APIs is enabled.

The store interface module is representative of functionality to interact with an extension store over a network . The extension store for instance represents a network accessible resource that can be leveraged by users to obtain extensions for the computing device updates for the extensions and so forth. In at least some implementations the store interface module presents a GUI interface to the extension store such that a user may view and select extensions to be downloaded from the extension store to the computing device .

The network may be implemented in various ways such as a wired network a wireless network and combinations thereof. The input module is representative of functionality to enable the computing device to receive input e.g. via the input mechanisms and to process and route the input in various ways.

Having discussed an example environment in which techniques for extension interaction with applications may be employed consider now some example implementation scenarios in accordance with one or more implementations.

This section describes some example implementation scenarios for extension interaction with applications in accordance with one or more implementations. Generally the implementations scenarios are described as being implemented in the environment but may be implemented in any suitable environment.

The scenario further includes an application with an application UI and extension permissions and an application with an application UI and extension permissions . According to various implementations the applications represent different instances of the applications introduced above.

Generally the applications represent different autonomous applications that operate independently of each other and that provide different respective sets of functionality. For purpose of example consider that the application represents a productivity application such as a word processor a spreadsheet application a database management application and so forth. Consider further that the application represents a content consumption application such as a web browser a media viewer an entertainment portal and so forth.

Further to the scenario the extension interacts with the applications via a common extension API . Generally the common extension API represents an instance of the common extension APIs introduced above.

The extension for instance engages in an interaction with the application via the common extension API . Generally the common extension API provides an API surface that enables data to be exchanged between the extension and the application as part of the interaction .

According to various implementations the interaction is initiated based on an event processed by the background script . For instance the application generates an event that is detected by the background script to cause the interaction to be initiated. The event may be generated in various ways such as in response to user input based on an occurrence of a particular application state and so forth.

Further to the scenario parameters of the interaction are controlled by the extension permissions . For instance the extension permissions specify types of interactions that are allowed and or not allowed as part of the interaction . The extension permissions for example may specify that the extension is permitted to obtain data from the application UI such as part of a search functionality performed by the extension . The extension permissions may further specify however that the extension is not permitted to alter certain native functionality of the application such as altering visual aspects of the application UI . Thus the extension permissions include a specific set of parameters and or conditions that dictate how the extension is permitted to interact with the application

According to various implementations the extension permissions are generally applicable to interactions by any extension with the application . For instance the extension permissions are not specific to any particular extension but are applied across all extension interactions with the application . Alternatively or additionally at least some of the extension permissions are specific to particular instances of extensions and thus are applied to a particular extension but not to other extensions.

Generally the interaction may involve one or more different types of interactions such as a data injection by the extension into the application a data extraction by the extension from the application and so forth. The content script generally represents logic for implementing the interaction with the application

Continuing with the scenario the extension engages in an interaction with the application via the common extension API . As with the application the common extension API provides an API surface that enables data exchange between the extension and the application . Further initiation of the interaction is implemented by the content script and based on a particular event related to the application

According to various implementations parameters of the interaction are determined based on the extension permissions . For instance the extension permissions specify various interactions between the extension and the application that are allowed and or not allowed.

Generally the interaction includes one or more different types of interactions such as a communication of data from the application to the extension and or vice versa. Similarly to the interaction the interaction with the application is implemented via logic of the content script

In at least some implementations the interactions occur concurrently. For example the extension may interact with the applications concurrently. Alternatively or additionally the interactions represent interactions that occur at different respective times. Further the interactions enable a common behavior to be applied by the extension to the applications by calling the common extension API

Although the scenario is illustrated utilizing two different applications it is to be appreciated that an instance of a common extension API can be leveraged by extensions to interact with numerous different applications.

Accordingly the scenario demonstrates that techniques for extension interaction with applications may be employed to provide a common extension interaction platform e.g. API surface such that extensions may interact with a variety of different applications via a single integrated extension platform.

The scenario depicts the extension leveraging the common extension API to interact with the application via the interaction and to interact with the application via the interaction . Example aspects and attributes of the interactions are detailed above.

The scenario further depicts the extension engaging in an interaction with an application via the common extension API . Generally the application represents an instance of the applications . According to various implementations the common extension API enables the extension to engage in a common type of interaction with the applications . For instance the common extension API enables a common type of data to be injected into the different applications a common type of data to be extracted from the different applications and so forth.

The scenario further depicts the extension engaging in an interaction with the application via an app specific API . Generally the app specific API represents an instance of the app specific APIs .

According to various implementations the app specific API is specific to the application . For instance the app specific API enables access to functionality of the application that is not applicable to other applications . Consider for example an implementation where the application is a web browser. In this example the app specific API enables interaction with an address bar and or active uniform resource locator URL of the web browser application UI . Such an interaction is typically not relevant and or applicable to other applications that do not include an address bar and or that do not display URL information.

Generally parameters of the interactions are determined based on the extension permissions . Examples of different aspects and attributes of the extension permissions are detailed with regard to other instances of extension permissions discussed elsewhere herein.

In at least some implementations the interactions occur simultaneously e.g. during a concurrent period of time. Alternatively the interactions represent interactions that occur at different periods of time.

Accordingly the scenario demonstrates that techniques for extension interaction with applications support providing a common API surface for some application interactions and application specific API surfaces for other application interactions. The scenario further demonstrates that extensions may engage in some interactions with a particular application utilizing a common API surface and may engage in other interactions with the particular application utilizing an application specific API surface.

Included as part of the GUI is an extension icon which is a visual representation of an extension that is invocable to interact with the application . For purpose of example consider that the extension icon represents the extension introduced above. According to various implementations the extension icon is displayable to indicate that the extension is currently interacting with the application and or that the extension is available to interact with the application . For instance the extension icon is displayed in response to occurrence of one or more of the interactions described above. The extension icon for example is displayed when the extension is actively interacting with the application and is removed from the GUI when the extension is not actively interacting with the application

Alternatively the extension icon is persistently displayed in the GUI while the application is running e.g. whether or not the extension is actively interacting with the application . In such a scenario a visual appearance of the extension icon may depend on whether the extension is interacting with the application . For instance when the extension is not actively interacting with the application the extension icon is visually deemphasized e.g. is greyed out. When the extension begins actively interacting with the application the extension icon is visually emphasized. For instance the extension icon is colorized animated and generally changed in appearance and or behavior from when the extension is not actively interacting with the application

According to one or more implementations the extension icon is user selectable to invoke the extension . For instance a user selection of the extension icon causes the extension to begin interacting with the application . Consider an example where the extension is a search related extension. In such an example a user selects text displayed on the GUI and then selects the extension icon . In response the extension retrieves the selected text and initiates a search e.g. a web search using the text as a search term. According to various implementations results of the search may be displayed in a region of the GUI and or may be displayed in a separate GUI.

In another example the extension is a translation extension such as for translating a word or phrase from one language to another language. In such an example a user selects text displayed on the GUI and then selects the extension icon . In response the extension retrieves the selected text and initiates a translation of the selected text. According to various implementations results of the translation may be displayed in a region of the GUI and or may be displayed in a separate GUI.

Included as part of the GUI is the extension icon attributes of which are detailed above. For instance example attributes of the extension icon discussed above with reference to application and the GUI are equally applicable to the application and the GUI .

Notice that in the extension icon is displayed in the same general region of the different GUIs. For instance the extension icon is displayed in a common GUI region across different GUIs for different applications. Thus according to various implementations common extension entry points are provided across a variety of different autonomous applications.

In at least some implementations the GUIs represent GUIs that are displayed as part of the scenarios and or discussed above. For instance the various interactions between the extension and the respective applications are initiated in response to user selection of the extension icon . Alternatively or additionally the extension icon is displayed and or visually reconfigured to reflect interaction between the extension and the respective applications.

According to various implementations the visual content and layout of the extension icon is based on the manifest . For instance the manifest specifies a particular logo and or other visual element used to generate the extension icon . Further behaviors of the extension icon are implemented by the content script . Execution of the content script for example causes the extension icon to be displayed and or visually configured and specifies respective regions of the GUIs in which the extension icon is to be displayed.

Thus the extension icon represents a common entry point for invoking an extension that applies across multiple different applications and application GUIs. While these scenarios are discussed with reference to a visual icon as an extension entry point it is to be appreciated that a variety of other common entry points may be employed such as a common gesture a common voice command a common key combination and so forth.

According to various implementations the manager GUI is invoked by one or more actions and or events. For instance a user selects an extension manager icon displayed on the display to invoke the manager GUI . As another example a particular gesture invokes the GUI such as a user swiping their finger across the display from a particular edge and or according to a particular gesture. Generally ways in which the manager GUI is invoked are common across multiple different applications.

According to various implementations the manager GUI enables existing extensions to be configured and enables new extensions to be obtained. For instance the manager GUI includes a configure extensions configure region and a get extensions get region .

The configure region identifies different extensions that are currently installed and or deployed i.e. existing extensions. The configure region further provides options for managing existing extensions. For an existing Extension ABC for example a disable control and a customize control are presented. Selection of the disable control causes the Extension ABC to be disabled such that the Extension ABC is inactivated. Selection of the customize control causes a further GUI and or controls to be presented that enables attributes of the Extension ABC to be customized. For instance selection of the customize control causes further controls to be presented that enable permissions and or allowed activities of the Extension ABC to be specified via user input.

For an existing Extension XYZ an enable control and a configure control are presented. The Extension XYZ for example is installed but is currently disabled. Thus selection of the enable control causes the Extension XYZ to be enabled e.g. activated. Selection of the configure control enables attributes of the Extension XYZ to be configured such as discussed above with reference to the Extension ABC.

The get region identifies recommended extensions that are not currently installed but are available to be installed. The recommended extensions may be presented based on various criteria such as most popular extensions extensions that match user preferences and or behaviors highest rated extensions and so forth. Generally selection of a recommended extension initiates an installation process for activating a recommended extension. Once a recommended extension is installed it will be presented in the configure region such that various attributes of the recommended extension are configurable.

The get region further includes a store control that is selectable to navigate to a resource from which additional extensions may be obtained. For instance selection of the store control causes store functionality to be populated to the get region such as for searching obtaining and purchasing extensions. Alternatively or additionally selection of the store control causes a separate store GUI to be presented from which extensions may be searched and downloaded. The store GUI for instance is presented by the store interface module and represents a portal to the extension store .

As referenced above a way of invoking the manager GUI is common across various applications. Further extensions presented in the configure region and or the get region may depend on which application is currently in focus. The application GUI for example corresponds to an application that is currently in focus on the display . For instance existing extensions that are configured and or permitted to interact with an in focus application are presented in the configure region but extensions that are not configured and or not permitted to interact with an in focus application are excluded from the configure region .

Still further the get region displays recommended extensions that are configured and or permitted to interact with an in focus application and excludes extensions that are not configured and or not permitted to interact with an in focus application. Thus common techniques for invoking the manager GUI are provided and extensions displayed and or offered in the manager GUI are filtered based on an application that is currently in focus.

While the manager GUI is illustrated as providing functionality for obtaining new extensions it is to be appreciated that in at least some implementations the get region may be populated to a separate independent interface. For instance a standalone GUI may be presented that provides an interface to the extension store for obtaining additional extensions.

The upper portion of the scenario includes an application GUI displayed on the display which generally represents an instance of the application UIs . The application GUI for instance represents one of the application UIs discussed with reference to .

The application GUI includes an extension icon which generally represents an implementation of the extension icon introduced above. Thus aspects and attributes of the extension icon apply to the extension icon . The extension icon represents an extension which represents an instance of the extensions .

Further to the scenario a user performs a text selection to select a term displayed on the application GUI . The user then selects the extension icon to invoke extension . In this particular example the extension is a dictionary extension that is configured to define terms. This is not intended to be limiting however and the extension may represent an instance of a variety of different extensions that provide a variety of different functionalities.

Proceeding to the lower portion of the scenario an extension invoke event occurs which causes the extension to be invoked. Accordingly the extension searches for a definition for the text selection and presents the definition in an extension GUI . The extension GUI for instance represents a GUI that is presented and managed by the extension .

As illustrated in the scenario the extension GUI is presented separately from the application GUI . For instance extension permissions for an application represented by the application GUI specify that the extension along with other extensions optionally are not permitted to inject content into the application GUI . The extension permissions do however specify that the extension may extract data from the application GUI such as selected text. Thus based on the extension permissions the extension extracts the text selection from the application GUI obtains a definition for the text selection e.g. via a web resource and generates its own respective extension GUI that is populated with the definition. Thus implementations for extension interaction with applications discussed herein enable extensions to provide their own separate output experience to provide extension functionality that complies with different levels of extension permissions across different applications.

The scenario includes the extension with the manifest the background script and the content script . According to various implementations the extension represents an instance of the extensions introduced above. Further illustrated is an extensions instance and an extension instance which represent different running instances of the extension

In the scenario the extension instance engages in an interaction with the application via the common extension API and the extension instance engages in an interaction with the application via the common extension API . Examples aspects and attributes of the interactions are detailed above with regard to the example extension interactions.

Further to the scenario the extension instances engage in a messaging interaction . Generally the messaging interaction represents an exchange of data between the extension instances . For instance the extension instance communicates state data for the application to the extension instance via the messaging interaction . Accordingly the extension instance may take an action based on the state data for the application . The extension for example reconfigures and or customizes the application based on the state data such as by visually reconfiguring the application UI based on the state data.

Alternatively or additionally the extension instance communicates state data for the application to the extension instance . Accordingly the extension instance may take an action based on the state data for the application . For instance the extension reconfigures and or customizes the application based on the state data such as by visually reconfiguring the application UI based on the state data. Thus extensions may take various actions based on data received from other extensions and pertaining to other applications.

In at least some implementations the messaging interaction is performed via execution of the background script and or the content script for the respective extension instances 

These examples of information exchanged among the extension instances are presented for purpose of example only and it is to be appreciated that a wide variety of different types of information may be exchanged between extensions and or extension instances.

Accordingly implementations for extension interaction with applications enable data exchange among different instances of an extension such as between different instances of an extension that each individually associated with different respective applications. Thus an instance of an extension may react to events and changes in state for an application with which the instance of the extension does not directly interact. Further state information may be propagated among multiple different instances of an extension that are each associated and or interacting with different respective applications.

Having discussed some example implementation scenarios for extension interaction with applications consider now some example procedures in accordance with one or more implementations.

This section describes some example procedures for extension interaction with applications in accordance with one or more implementations. The procedures described herein may be used separately or in combination with each other in whole or in part. These procedures are shown as sets of operations or acts performed such as through one or more entities or modules and are not necessarily limited to the order shown for performing the operation. The example procedures may be employed in the environment of the system of and or any other suitable environment. According to one or more implementations the procedures describe example ways for performing various aspects of the example implementation scenarios described herein. In at least some implementations steps described for the various procedures are implemented automatically and independent of user interaction.

Step exposes functionality via an application programming interface API to an extension that enables the extension to interact with multiple different autonomous applications via the API. For instance the operating system and or the extension platform module expose the common extension APIs to enable the extensions to interact with the applications .

Step causes the multiple different autonomous applications to be functionally extended by the extension responsive to the extension calling the API. An extension for instance calls a common extension API to cause several of the applications to be functionally extended.

According to various implementations causing applications to be functionally extended can be implemented in various ways. For instance a common extension behavior is applied across the applications such as a common added functionality a common GUI reconfiguration for GUIs of the applications a common application customization and so forth.

As another example causing the applications to be functionally extended includes causing a common entry point for invoking the extension to be provided across the applications. The common entry point may be implemented in various ways for invoking the extension such as an extension icon e.g. the extension icon that is presented in a common region across GUIs for the applications a touch and or touchless gesture a key combination on a keyboard a voice command and so forth.

According to various implementations parameters for interaction by the extension with the multiple different applications are specified by extension permissions for applications. As referenced above individual applications may have different extension permissions that specify allowed and or disallowed extension interactions and extension behaviors.

Step causes state information to be communicated from an instance of an extension that is bound to a particular application to a different instance of the extension that is bound to a different application. The different instances of the extension for example are interacting with different respective autonomous applications such as described above with reference to . Thus an instance of an extension is bound to an application by virtue of its interaction with the application.

According to various implementations the state information represents different types of information such as a current state of an application and indication of a change in an application state an indication of an occurrence of an application related event an indication of user input and or interaction with an application and so forth.

Step causes the different application to be functionally reconfigured in response to the state information. The different instance of the extension for example performs one or more actions in relation to the different application to cause the different application to be functionally reconfigured based on the state information. For instance a functionality is added to the different application a GUI for the different application is visually reconfigured a customization is applied to the different application and so forth.

Step causes responsive to an extension calling an API information to be extracted from an application and provided to the extension. An extension for instance calls a common extension API which causes information to be extracted from an application and provided to the extension . Various types of information may be extracted such as application state information information displayed on a GUI of the application e.g. text graphics media content and so on user interaction information and so forth.

Step causes a graphical user interface GUI for the extension to be populated based on the information extracted from the application. For instance the GUI for the extension is populated with the information itself. As another example the information is used to perform a search e.g. a web search and results of the search are populated to the GUI for the extension. As another example the information comprises text that is translated into a different language and the translation is populated to the GUI for the extension. As a further example the information comprises media content e.g. a picture a graphical element a video audio content and so forth that is populated to the GUI for the extension such that the media content can be viewed shared edited and so forth via the GUI.

Step receives an indication to present an extension manager graphical user interface GUI . The extension manager interface for instance receives user input requesting that an extension manager GUI be presented.

Step presents the extension manager GUI. For example the extension manager interface causes the extension manager GUI to be displayed. As referenced above the extension manager GUI enables various extension related tasks to be performed such as disabling extensions enabling extensions customizing extensions and so forth. Further the extension manager GUI enables additional extensions to be obtained. For instance the extension manager GUI includes an interface to the extension store .

Having discussed some example procedures for extension interaction with applications consider now a discussion of an example system and device for performing various aspects of the procedures and implementation scenarios for extension interaction with applications in accordance with one or more implementations.

The example computing device as illustrated includes a processing system one or more computer readable media and one or more Input Output I O Interfaces that are communicatively coupled one to another. Although not shown the computing device may further include a system bus or other data and command transfer system that couples the various components one to another. A system bus can include any one or combination of different bus structures such as a memory bus or memory controller a peripheral bus a universal serial bus and or a processor or local bus that utilizes any of a variety of bus architectures. A variety of other examples are also contemplated such as control and data lines.

The processing system is representative of functionality to perform one or more operations using hardware. Accordingly the processing system is illustrated as including hardware element that may be configured as processors functional blocks and so forth. This may include implementation in hardware as an application specific integrated circuit or other logic device formed using one or more semiconductors. The hardware elements are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example processors may be comprised of semiconductor s and or transistors e.g. electronic integrated circuits ICs . In such a context processor executable instructions may be electronically executable instructions.

The computer readable media is illustrated as including memory storage . The memory storage represents memory storage capacity associated with one or more computer readable media. The memory storage may include volatile media such as random access memory RAM and or nonvolatile media such as read only memory ROM Flash memory optical disks magnetic disks and so forth . The memory storage may include fixed media e.g. RAM ROM a fixed hard drive and so on as well as removable media e.g. Flash memory a removable hard drive an optical disc and so forth . The computer readable media may be configured in a variety of other ways as further described below.

Input output interface s are representative of functionality to allow a user to enter commands and information to computing device and also allow information to be presented to the user and or other components or devices using various input output devices. Examples of input devices include a keyboard a cursor control device e.g. a mouse a microphone e.g. for voice recognition and or spoken input a scanner touch functionality e.g. capacitive or other sensors that are configured to detect physical touch a camera e.g. which may employ visible or non visible wavelengths such as infrared frequencies to detect movement that does not involve touch as gestures and so forth. Examples of output devices include a display device e.g. a monitor or projector speakers a printer a network card tactile response device and so forth. Thus the computing device may be configured in a variety of ways as further described below to support user interaction.

Various techniques may be described herein in the general context of software hardware elements or program modules. Generally such modules include routines programs objects elements components data structures and so forth that perform particular tasks or implement particular abstract data types. The terms module functionality entity and component as used herein generally represent software firmware hardware or a combination thereof. The features of the techniques described herein are platform independent meaning that the techniques may be implemented on a variety of commercial computing platforms having a variety of processors.

An implementation of the described modules and techniques may be stored on or transmitted across some form of computer readable media. The computer readable media may include a variety of media that may be accessed by the computing device . By way of example and not limitation computer readable media may include computer readable storage media and computer readable signal media. 

 Computer readable storage media may refer to media and or devices that enable persistent storage of information in contrast to mere signal transmission carrier waves or signals per se. Computer readable storage media do not include signals per se. The computer readable storage media includes hardware such as volatile and non volatile removable and non removable media and or storage devices implemented in a method or technology suitable for storage of information such as computer readable instructions data structures program modules logic elements circuits or other data. Examples of computer readable storage media may include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage hard disks magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other storage device tangible media or article of manufacture suitable to store the desired information and which may be accessed by a computer.

 Computer readable signal media may refer to a signal bearing medium that is configured to transmit instructions to the hardware of the computing device such as via a network. Signal media typically may embody computer readable instructions data structures program modules or other data in a modulated data signal such as carrier waves data signals or other transport mechanism. Signal media also include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media.

As previously described hardware elements and computer readable media are representative of instructions modules programmable device logic and or fixed device logic implemented in a hardware form that may be employed in some embodiments to implement at least some aspects of the techniques described herein. Hardware elements may include components of an integrated circuit or on chip system an application specific integrated circuit ASIC a field programmable gate array FPGA a complex programmable logic device CPLD and other implementations in silicon or other hardware devices. In this context a hardware element may operate as a processing device that performs program tasks defined by instructions modules and or logic embodied by the hardware element as well as a hardware device utilized to store instructions for execution e.g. the computer readable storage media described previously.

Combinations of the foregoing may also be employed to implement various techniques and modules described herein. Accordingly software hardware or program modules and other program modules may be implemented as one or more instructions and or logic embodied on some form of computer readable storage media and or by one or more hardware elements . The computing device may be configured to implement particular instructions and or functions corresponding to the software and or hardware modules. Accordingly implementation of modules that are executable by the computing device as software may be achieved at least partially in hardware e.g. through use of computer readable storage media and or hardware elements of the processing system. The instructions and or functions may be executable operable by one or more articles of manufacture for example one or more computing devices and or processing systems to implement techniques modules and examples described herein.

As further illustrated in the example system enables ubiquitous environments for a seamless user experience when running applications on a personal computer PC a television device and or a mobile device. Services and applications run substantially similar in all three environments for a common user experience when transitioning from one device to the next while utilizing an application playing a video game watching a video and so on.

In the example system multiple devices are interconnected through a central computing device. The central computing device may be local to the multiple devices or may be located remotely from the multiple devices. In one embodiment the central computing device may be a cloud of one or more server computers that are connected to the multiple devices through a network the Internet or other data communication link.

In one embodiment this interconnection architecture enables functionality to be delivered across multiple devices to provide a common and seamless experience to a user of the multiple devices. Each of the multiple devices may have different physical requirements and capabilities and the central computing device uses a platform to enable the delivery of an experience to the device that is both tailored to the device and yet common to all devices. In one embodiment a class of target devices is created and experiences are tailored to the generic class of devices. A class of devices may be defined by physical features types of usage or other common characteristics of the devices.

In various implementations the computing device may assume a variety of different configurations such as for computer mobile and television uses. Each of these configurations includes devices that may have generally different constructs and capabilities and thus the computing device may be configured according to one or more of the different device classes. For instance the computing device may be implemented as the computer class of a device that includes a personal computer desktop computer a multi screen computer laptop computer netbook and so on.

The computing device may also be implemented as the mobile class of device that includes mobile devices such as a mobile phone portable music player portable gaming device a tablet computer a wearable device a multi screen computer and so on. The computing device may also be implemented as the television class of device that includes devices having or connected to generally larger screens in casual viewing environments. These devices include televisions set top boxes gaming consoles and so on.

The techniques described herein may be supported by these various configurations of the computing device and are not limited to the specific examples of the techniques described herein. For example functionalities discussed with reference to the computing device may be implemented all or in part through use of a distributed system such as over a cloud via a platform as described below.

The cloud includes and or is representative of a platform for resources . The platform abstracts underlying functionality of hardware e.g. servers and software resources of the cloud . The resources may include applications and or data that can be utilized while computer processing is executed on servers that are remote from the computing device . Resources can also include services provided over the Internet and or through a subscriber network such as a cellular or Wi Fi network.

The platform may abstract resources and functions to connect the computing device with other computing devices. The platform may also serve to abstract scaling of resources to provide a corresponding level of scale to encountered demand for the resources that are implemented via the platform . Accordingly in an interconnected device embodiment implementation of functionality described herein may be distributed throughout the system . For example the functionality may be implemented in part on the computing device as well as via the platform that abstracts the functionality of the cloud .

Discussed herein are a number of methods that may be implemented to perform techniques discussed herein. Aspects of the methods may be implemented in hardware firmware or software or a combination thereof. The methods are shown as a set of steps that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks. Further an operation shown with respect to a particular method may be combined and or interchanged with an operation of a different method in accordance with one or more implementations. Aspects of the methods can be implemented via interaction between various entities discussed above with reference to the environment and or the system .

A system comprising one or more processors and one or more computer readable media storing processor executable instructions that responsive to execution by the one or more processors cause the system to perform operations including exposing functionality via an application programming interface API to an extension that enables the extension to interact with multiple different autonomous applications via the API and responsive to the extension calling the API causing the multiple different autonomous applications to be functionally extended by the extension.

A system as described in example 1 wherein said causing the multiple different autonomous applications to be functionally extended comprises causing a common behavior to be applied across the multiple different autonomous applications.

A system as described in one or more of examples 1 or 2 wherein said causing the multiple different autonomous applications to be functionally extended comprises causing a common entry point for invoking the extension to be provided across the multiple different autonomous applications.

A system as described in one or more of examples 1 3 wherein said causing the multiple different autonomous applications to be functionally extended comprises causing a common entry point for invoking the extension to be provided across the multiple different autonomous applications the common entry point comprising an extension icon that is presented in a common region across graphical user interfaces GUIs for the multiple different autonomous applications.

A system as described in one or more of examples 1 4 wherein the extension includes a content script comprising logic that is executable to cause the multiple different autonomous applications to be functionally extended.

A system as described in one or more of examples 1 5 wherein one or more parameters for interaction by the extension with a particular application of the multiple different autonomous applications are specified by one or more extension permissions for the particular application.

A system as described in one or more of examples 1 6 wherein one or more parameters for interaction by the extension with a particular application of the multiple different autonomous applications are specified by one or more extension permissions for the particular application the one or more extension permissions specifying an interaction behavior that is not permitted between the extension and the particular application.

A system as described in one or more of examples 1 7 wherein said causing the multiple different autonomous applications to be functionally extended by the extension is implemented via different instances of the extension that are bound to individual applications of the multiple different autonomous applications and wherein the operations further comprise causing state information to be communicated between at least some of the different instances of the extension.

A system as described in one or more of examples 1 8 wherein said causing the multiple different autonomous applications to be functionally extended by the extension is implemented via different instances of the extension that are bound to individual applications of the multiple different autonomous applications and wherein the operations further comprise causing state information to be communicated between at least some of the different instances of the extension and causing the different instance of the extension to perform an action relating to a respective application of the multiple autonomous applications based on the state information.

A system as described in one or more of examples 1 9 wherein the operations further include responsive to a different extension calling the API causing information to be extracted from a particular application of the multiple different autonomous applications and provided to the different extension and causing a graphical user interface GUI for the different extension to be populated based on the information extracted from the particular application the GUI for the different extension being presented separately from a GUI for the particular application.

A system as described in one or more of examples 1 10 wherein the operations further include presenting an extension manager graphical user interface GUI that includes functionality for performing actions including one or more of enabling or disabling the extension customizing the extension and obtaining one or more other extensions.

A computer implemented method comprising exposing functionality via an application programming interface API to an extension that enables the extension to interact with multiple different autonomous applications via the API and responsive to the extension calling the API causing the multiple different autonomous applications to be functionally extended by the extension such that a common entry point for invoking the extension is provided across the multiple different autonomous applications.

A computer implemented method as described in example 12 wherein said exposing further comprises exposing the functionality via the API to multiple different extensions to enable the multiple different extensions to interact with the multiple different autonomous applications via the API.

A computer implemented method as described in one or more of examples 12 or 13 wherein the common entry point comprises an extension icon that is presented in a common region across graphical user interfaces GUIs for the multiple different autonomous applications.

A computer implemented method as described in one or more of examples 12 14 wherein invoking the extension in two or more applications of the multiple different autonomous applications causes a common extension behavior across the two or more applications.

A computer implemented method as described in one or more of examples 12 15 wherein invoking the extension in a particular application of the multiple different autonomous applications causes information to be extracted from the particular application and provided to the extension and a graphical user interface GUI for the extension to be populated based on the information.

A computer implemented method as described in one or more of examples 12 16 further comprising presenting an extension manager interface that includes functionality for performing actions including one or more of enabling or disabling the extension and obtaining one or more other extensions.

A computer implemented method as described in one or more of examples 12 17 wherein parameters for interaction by the extension with a particular application of the multiple different autonomous applications are specified by one or more extension permissions for the particular application the one or more extension permissions specifying an interaction behavior that is not permitted between the extension and the particular application.

A computer implemented method comprising causing state information to be communicated from an instance of an extension that is bound to a particular application to a different instance of the extension that is bound to a different application and causing the different application to be functionally reconfigured in response to the state information.

A computer implemented method as described in example 19 wherein the state information comprises an indication of a change in a state of the particular application.

Although embodiments of techniques and apparatuses enabling extension interaction with applications have been described in language specific to features and or methods it is to be understood that the subject of the appended claims is not necessarily limited to the specific features or methods described. Rather the specific features and methods are disclosed as example implementations enabling extension interaction with applications.

