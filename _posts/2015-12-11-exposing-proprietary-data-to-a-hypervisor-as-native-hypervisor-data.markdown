---

title: Exposing proprietary data to a hypervisor as native hypervisor data
abstract: Exposing proprietary data to a hypervisor as native hypervisor data. In one example embodiment, one or more non-transitory computer-readable media store one or more programs that are configured, when executed, to cause one or more processors to perform a method of exposing proprietary data to a hypervisor as native hypervisor data. The method may include identifying a proprietary disk file having a proprietary file format, identifying a plugin file corresponding to the proprietary disk file with the plugin file having a plugin file format which is different from a native hypervisor disk file format, and intercepting read requests directed to the plugin file. The method may further include, in response to each read request, gathering data gathered from the proprietary disk file, restructuring the data to cause the data to appear to be gathered from a native hypervisor disk file, and responding with the restructured data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09489140&OS=09489140&RS=09489140
owner: STORAGECRAFT TECHNOLOGY CORPORATION
number: 09489140
owner_city: Draper
owner_country: US
publication_date: 20151211
---
This application is a continuation of U.S. patent application Ser. No. 14 569 330 filed Dec. 12 2014 and titled EXPOSING PROPRIETARY DATA TO A HYPERVISOR AS NATIVE HYPERVISOR DATA which is a continuation of U.S. patent application Ser. No. 14 293 122 filed Jun. 2 2014 and titled EXPOSING A PROPRIETARY DISK FILE TO A HYPERVISOR AS A NATIVE HYPERVISOR DISK FILE each of which is incorporated herein by reference in its entirety.

The embodiments disclosed herein relate to exposing proprietary data to a hypervisor as native hypervisor data.

A virtual machine is a software based emulation of a physical machine e.g. a computer that executes programs like the physical machine. Virtual machines generally operate based on the computer architecture and functions of a real computer. Virtual machines generally provide a complete system platform which supports the execution of a complete operating system. Virtual machines usually emulate an existing architecture and are built with the purpose of either providing a platform to run programs where the real hardware is not available for use for example executing on otherwise obsolete platforms or of having multiple instances of virtual machines leading to more efficient use of computing resources both in terms of energy consumption and cost effectiveness. This efficient use of computing resources is known as hardware virtualization. The use of a virtual machine may enable multiple operating system environments to coexist on the same computer in strong isolation from each other an instruction set architecture ISA that is somewhat different from that of the real machine and application provisioning maintenance high availability and disaster recovery.

A hypervisor is computer software computer firmware or computer hardware that creates and runs virtual machines. A computer on which a hypervisor is running one or more virtual machines is generally referred to as a host machine while each virtual machine running on the host machine is generally referred to as a guest machine. The hypervisor presents the guest operating systems with a virtual operating platform and manages the execution of the guest operating systems. Multiple instances of a variety of operating systems may share the virtualized hardware resources.

A host machine generally employs a hypervisor to create a guest virtual machine by accessing a virtual machine disk file that contains or references disk data that is necessary to create the guest virtual machine. One common problem encountered when utilizing a hypervisor is that some hypervisors are only designed to access virtual machine disk files that have a particular file format that is native to the hypervisor. For example Microsoft Hyper V hypervisors are designed to only be capable of accessing virtual machine disk files having the VHD and VHDX file formats which are the native file formats for Microsoft Hyper V hypervisors for the purpose of creating a guest virtual machine. In particular Microsoft Hyper V technology lacks disk plugin application programming interfaces APIs which are necessary to enable third parties to quickly attach disk data from their own disk image formats into Microsoft Hyper V hypervisors for access by virtual machines as virtual machine disk files. This inability of some hypervisors to access a variety of differently formatted virtual machine disk files due to a lack of disk plugin APIs for example limits the virtual machine disk files that can be used to create virtual machines using these hypervisors.

The subject matter claimed herein is not limited to embodiments that solve any disadvantages or that operate only in environments such as those described above. Rather this background is only provided to illustrate one example technology area where some embodiments described herein may be practiced.

In general example embodiments described herein relate to exposing proprietary data to a hypervisor as native hypervisor data. The example methods disclosed herein may be employed to allow a hypervisor on a host machine to create guest virtual machines using proprietary disk files even where the hypervisor is designed to only be capable of creating guest virtual machines using native hypervisor disk files. The example methods disclosed herein therefore enable a hypervisor to access a variety of differently formatted disk files and thereby expand the types of disk files that can be used by the hypervisor to create guest virtual machines.

In one example embodiment one or more non transitory computer readable media store one or more programs that are configured when executed to cause one or more processors to perform a method of exposing proprietary data to a hypervisor as native hypervisor data. The method may include identifying a proprietary disk file having a proprietary file format identifying a plugin file corresponding to the proprietary disk file with the plugin file having a plugin file format which is different from a native hypervisor disk file format and intercepting read requests directed to the plugin file. The method may further include in response to each read request gathering data gathered from the proprietary disk file restructuring the data to cause the data to appear to be gathered from a native hypervisor disk file due to being structured in the native hypervisor disk file format and responding with the restructured data.

In another example embodiment one or more non transitory computer readable media store one or more programs that are configured when executed to cause one or more processors to perform a method of exposing proprietary data to a hypervisor as native hypervisor data. The method may include identifying a proprietary disk file having a proprietary file format identifying a plugin file corresponding to the proprietary disk file with the plugin file having a plugin file format which is different from a native hypervisor disk file format creating a differencing disk file associated with the plugin file receiving write requests directed to the plugin file and redirecting the write requests to the differencing disk file.

In another example embodiment one or more non transitory computer readable media store one or more programs that are configured when executed to cause one or more processors to perform a method of exposing proprietary data to a hypervisor as native hypervisor data. The method may include identifying a proprietary disk file having a proprietary file format creating a plugin file corresponding to the proprietary disk file with the plugin file having a plugin file format which is different from a native hypervisor disk file format intercepting a file open request directed to the plugin file determining that the plugin file has the plugin file format responding to the file open request with a report that the plugin file was opened successfully and intercepting read requests directed to the plugin file. The method may further include in response to each read request gathering data gathered from the proprietary disk file restructuring the data to cause the data to appear to be gathered from a native hypervisor disk file due to being structured in the native hypervisor disk file format and responding with the restructured data.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are not restrictive of the invention as claimed.

The phrase native hypervisor disk file as used herein refers to a virtual machine disk file having a file format that is native to a particular hypervisor. An example is the VHDX file format used by Microsoft Hyper V hypervisors. Another example is the VMDK file format used by VMware hypervisors. The phrase proprietary file format as used herein refers to a file format which is not natively understood by a particular hypervisor. The phrase proprietary disk file as used herein refers to a file or data storage system such as a deduplication vault or database which contains disk data and which is structured in a proprietary file format. An example is the StorageCraft ShadowProtect Full SPF backup image file format. The phrase plugin file as used herein refers to a file corresponding to a native hypervisor disk file which is recognizable by a file system filter driver and which appears to be a native hypervisor disk file to the operating system the hypervisor and to all other applications due to the filtering functionality provided by a file system filter driver. This file generally points to the proprietary disk file and is generally much smaller in size that a corresponding real native hypervisor disk file would be. An example would be a file named vm.vhdx which because of its vhdx file extension and due to the filtering activity of a file system filter driver appears to be a Microsoft Hyper V VHDX native hypervisor disk file but in reality does not necessarily contain the typical content or structure of a native hypervisor disk file and rather is in reality a plugin file that points to a corresponding SPF backup image proprietary disk file named vm.spf that is separate from the plugin file. The phrase plugin file format as used herein refers to a file format of a plugin file which is different from the native hypervisor disk file format of the native hypervisor disk file to which the plugin file corresponds because the structure of the plugin file format is different from the native hypervisor disk file format and or because at least some portion of the data that would typically be stored in the plugin file having the same structure as the native hypervisor disk file format is stored elsewhere. From the example above the plugin file vm.vhdx would have a plugin file format structure that is different from the native hypervisor disk file format structure of VHDX native hypervisor disk files. In another example a plugin file named vm2.vhdx could have a plugin file format structure that is the same as the VHDX native hypervisor disk file format structure but the vm2.vhdx plugin file could be missing some data that would typically be stored in the native hypervisor disk file but is instead retrievable from a corresponding SPF backup image proprietary disk file named vm2.spf using a file system filter driver.

The hypervisor may be computer software computer firmware or computer hardware of a host machine not shown that is configured to create run and manage one or more guest virtual machines such as the virtual machines and . The virtual machines and are virtual machines that were created by run by and managed by the hypervisor . Each of the virtual machines and is a software based emulation of a physical machine e.g. a computer that is configured to execute programs like the physical machine.

The creation of each of the virtual machines and was achieved by the hypervisor accessing a disk file in the storage . In particular the hypervisor created the virtual machine by accessing the native hypervisor disk file which has the native file format of the hypervisor . Similarly the hypervisor created the virtual machine by accessing the native hypervisor disk file which also has the native file format of the hypervisor .

In contrast the hypervisor created the virtual machine by the file system filter driver exposing the proprietary disk file to the hypervisor . The proprietary disk file has a file format which is not natively understood by the hypervisor . Although the hypervisor is not capable of directly accessing the proprietary disk file due to the proprietary disk file having a file format that is not natively understood by the hypervisor the methods disclosed herein enable the file system filter driver to expose the proprietary disk file to the hypervisor in the native file format of the hypervisor .

In one example embodiment the hypervisor may be a Microsoft Hyper V hypervisor and the proprietary disk file may be a StorageCraft ShadowProtect Full SPF backup image file. Using the example methods disclosed herein the Microsoft Hyper V hypervisor may create the virtual machine using the SPF backup image file and or using a corresponding plugin file even though the SPF backup image file format is not natively understood by the Microsoft Hyper V hypervisor. This is accomplished by the file system filter driver intercepting each request sent from the Microsoft Hyper V hypervisor to the SPF backup image file and or to the plugin file and responding to the request in such a way that the SPF backup image file and or the plugin file appears to be a valid VHDX file which is a native hypervisor disk file for Microsoft Hyper V hypervisors. In this manner even though the Microsoft Hyper V hypervisor is not capable of directly accessing the SPF backup image file due to the SPF backup image file having a file format that is not natively understood by the Microsoft Hyper V hypervisor the methods disclosed herein enable the file system filter driver to expose the SPF backup image file to the Microsoft Hyper V hypervisor in the native VHDX file format of the Microsoft Hyper V hypervisor thereby expanding the types of disk files that can be used by the Microsoft Hyper V hypervisor to create guest virtual machines.

Although only a single storage is disclosed in the system in it is understood that the system may instead include two or more storages. Further although the storage is disclosed in being local to the hypervisor it is understood that the storage may be remote from the hypervisor . Further one or more of the files and may be stored remotely from the hypervisor . For example the plugin file may be stored locally to the hypervisor while the proprietary disk file is stored remotely from the hypervisor . Further although the file system filter driver is the only filter driver disclosed in the example system of it is understood that the functionality of the file system filter driver may be replaced or augmented by one or more similar filter drivers residing on the system or another system that is local to or remote from the system . Additionally the proprietary disk file may not be an actual file but may instead be any other data storage system such as a deduplication vault or database which contains disk data and which is structured in a proprietary file format.

Having described one specific environment with respect to it is understood that the specific environment of is only one of countless environments in which the example methods disclosed herein may be employed. The scope of the example embodiments is not intended to be limited to any particular environment.

The method may include a step in which a plugin file corresponding to a proprietary disk file is created. For example the file system filter driver may at step create the plugin file that corresponds to the proprietary disk file . Alternatively another driver or module such as a user mode module that runs on the same host machine as the hypervisor or that runs on another local or remote machine may at step create the plugin file that corresponds to the proprietary disk file . As noted above the proprietary disk file has a proprietary file format and the plugin file has a plugin file format. Also noted above the plugin file may be stored in the storage where the proprietary disk file is stored or the plugin file and or the proprietary disk file may be stored in another local or remote storage. As illustrated in the plugin file may include a pointer that points to the proprietary disk file . Additionally or alternatively the plugin file may be associated with the proprietary disk file using a data storage system that is external to the plugin file such as a database that is stored elsewhere in the storage or in another local or remote storage.

The method may include a step in which a file open request is sent and a step in which the file open request is intercepted. For example the hypervisor may at step send a file open request directed to the plugin file and the file system filter driver may at step intercept the file open request. This interception of this request and the interception of all other requests discussed herein may be possible due to the file system filter driver sitting between the hypervisor and the file system where the plugin file is stored. In this position the file system filter driver is able to intercept examine and modify if desired all requests from the hypervisor to the file system .

Continuing with the above example even though the plugin file has a plugin file format the hypervisor may nevertheless attempt to open the plugin file because the plugin file may falsely appear to have a native file format. For example a portion of a name attribute of the plugin file such as file extension of the name attribute of the plugin file may falsely identify the plugin file as having the native file format of the hypervisor . In this example the hypervisor may be a Microsoft Hyper V hypervisor and the plugin file may be named vm.vhdx the proprietary disk file is an SPF backup image file named vm.spf that is separate from the plugin file . The vhdx file extension falsely identifies the plugin file as having the native VHDX file format of the Microsoft Hyper V hypervisor . In reality of course the plugin file does not contain the typical content and or structure of a native VHDX file but instead is in reality a plugin file that points to the corresponding SPF backup image file named vm.spf that is separate from the plugin file .

The method may include a step in which it is determined that the plugin file has a plugin file format. For example the file system filter driver may at step determine that the plugin file has a plugin file format. This determination may be made in a variety of different ways. For example the file system filter driver may determine that the plugin file has a plugin file format by determining that metadata that identifies the plugin file as having a plugin file format is present in the plugin file . Alternatively or additionally the file system filter driver may determine that the plugin file has a plugin file format by determining that the plugin file is present in a list of files that have the plugin file format this is stored in a data storage system that is external to the plugin file such as a database that is stored elsewhere in the storage or in another storage.

The method may include a step in which success is reported and a step in which the success report is received. For example the file system filter driver may at step respond to the previously received file open request with a report that the plugin file was opened successfully and the hypervisor may at step receive the success report.

This reporting of success may be performed at steps and either after actually having opened the proprietary disk file or without actually having opened the proprietary disk file . In practice it has been discovered that at least some hypervisors perform many reads of metadata of a virtual machine disk file without actually requesting disk data and do so between several consecutive file open and file close requests on the virtual machine disk files. This occurs most often when virtual machine disk files are being attached to guest virtual machines or when virtual machine configuration settings are being modified. Therefore to improve performance the user experience and reduce resource usage the file system filter driver may defer actually opening the proprietary disk file until absolutely necessary. This may involve storing sufficient metadata to respond to other reads of virtual machine disk file metadata within the plugin file itself so that such requests can be responded to without the typically expensive need to open the proprietary disk file .

After the performance of step the hypervisor will believe that a native hypervisor disk file having the native file format of the hypervisor has been opened even though the actual file that has been accessed is the plugin file that has a plugin file format. The plugin file will be subsequently used by the file system filter driver to expose the proprietary disk file to the hypervisor in the native file format of the hypervisor .

After the performance of step the method may proceed to any of the steps or . Although the steps will be disclosed in ascending order below it is understood that any of the groups of steps and may be performed at any time including repeatedly after the performance of step .

The method may include a step in which a file read request is sent and a step in which the file read request is intercepted. For example the hypervisor may at step send a file read request directed to the plugin file and the file system filter driver may at step intercept the file read request.

The method may include a step in which the read request is modified to gather data from a proprietary disk file. For example the file system filter driver may at step modify the read request to direct that data be gathered from the proprietary disk file instead of from the plugin file . This modification may be enabled by the pointer in the plugin file and thereby indicates that the proprietary disk file should be the actual target of any read and or write requests sent by the hypervisor to the plugin file .

The method may include a step in which the modified request is sent and a step in which the modified request is received. For example the file system filter driver may at step send the modified request and the file system may at step receive the modified request.

The method may include a step in which the requested data is gathered from the proprietary disk file. For example the file system may at step gather data from the proprietary disk file as instructed by the modified request.

The method may include a step in which the gathered data is sent and a step in which the gathered data is received. For example the file system may at step send the gathered data and the file system filter driver may at step receive the gathered data.

The method may include a step in which the data is restructured into a native file format of the hypervisor. For example the file system filter driver may at step restructure the data that was received into the native file format of the hypervisor . This restructuring of the data may be intended to make the data appear to the hypervisor to have been gathered from a native hypervisor disk file due to being formatted in the native file format of the hypervisor .

The method may include a step in which the restructured data is sent and a step in which the restructured data is received. For example the file system filter driver may at step send the restructured data and the hypervisor may at step receive the restructured data.

After the performance of step the hypervisor will have been deceived by the file system filter driver to believe that a read request was successfully executed on a native hypervisor disk file having the native file format of the hypervisor even though the actual file that has been read from is the proprietary disk file having a proprietary file format. This deception on the part of the file system filter driver allows the file system filter driver to expose the proprietary disk file to the hypervisor in the native file format of the hypervisor thereby expanding the types of disk files that can be effectively read by the hypervisor .

The method may include a step in which a file write request is sent and a step in which the file write request is intercepted. For example the hypervisor may at step send a file write request directed to a particular location in the plugin file and the file system filter driver may at step intercept the file write request.

The method may include a step in which the file write request is modified to write the data to a location in the proprietary disk file in the proprietary file format. For example the file system filter driver may at step modify the file write request to direct that data be written to a location in the proprietary disk file instead of to the plugin file .

The method may include a step in which the modified request is sent and a step in which the modified request is received. For example the file system filter driver may at step send the modified request and the file system may at step receive the modified request.

The method may include a step in which the data is written to the proprietary disk file. For example the file system may at step write the data from the modified write request to the proprietary disk file as instructed by the modified request.

The method may include a step in which a success is reported and a step in which the success report is received. For example the file system may at step report success and the file system filter driver may at step receive the success report.

The method may include a step in which a success is reported and a step in which the success report is received. For example the file system filter driver may at step report success and the hypervisor may at step receive the success report.

After the performance of step the hypervisor will have been deceived by the file system filter driver to believe that a write request was successfully executed on a native hypervisor disk file having the native file format of the hypervisor even though the actual file that has been written to is the proprietary disk file having a proprietary file format. This deception on the part of the file system filter driver allows the file system filter driver to expose the proprietary disk file to the hypervisor in the native file format of the hypervisor thereby expanding the types of disk files that can be effectively written to by the hypervisor .

The method may include a step in which a file size attribute request is sent and a step in which the file size attribute request is intercepted. For example the hypervisor may at step send a file size attribute request directed to the plugin file and the file system filter driver may at step intercept the file size attribute request.

The method may include a step in which an expected size of a file corresponding to the plugin file having the native file format of the hypervisor is determined. For example the file system filter driver may at step determine an expected size of a file corresponding to the plugin file having the native file format of the hypervisor . In other words the expected size may be the size that a comparable file having the native file format would have were the comparable file to be created to replace the combination of the plugin file and the proprietary disk file .

The method may include a step in which the expected size is sent and a step in which the expected size is received. For example the file system filter driver may at step send the expected size and the hypervisor may at step receive the expected size.

After the performance of step the hypervisor will have been deceived by the file system filter driver to believe that a file size attribute request was successfully executed on a native hypervisor disk file having the expected file size of a native hypervisor disk file of the hypervisor even though the actual file that has been the subject of the file size attribute request is the plugin file whose size may not match the expected size of a native hypervisor disk file. This deception on the part of the file system filter driver allows the file system filter driver to expose the proprietary disk file to the hypervisor in the expected file size of the native hypervisor disk file of the hypervisor thereby expanding the types of disk files that can be used by the hypervisor .

It is understood that the steps and may be performed by a driver or module other than the file system filter driver such as a user mode module that runs on the same host machine as the hypervisor .

It is also understood that the steps may be replaced where the plugin file is a sparse file such as a New Technology File System NTFS sparse file with a size attribute set to an expected size of a corresponding file having the native file format of the hypervisor . In this example the file system filter driver may replace the steps while allowing the file size attribute request to pass through the file system filter driver unaltered and allowing the corresponding response to pass through the file system filter driver unaltered.

It is further understood that the steps and may be modified to allow the data requested in the read request to be gathered from the plugin file and or the proprietary disk file as at least some portion of the requested data may actually be stored in the plugin file . Additionally or alternatively these steps may be modified to allow the data requested to be gathered from any other local or remote data storage system such as a deduplication vault or database.

It is also understood that the steps and may be modified to allow the data specified in the write request to be written to a location in the plugin file or in a location external to the plugin file . Further the data may be stored in the native file format of the hypervisor or in a proprietary file format.

It is also understood that steps may alternatively be modified to allow a hypervisor having native snapshotting differencing disk capability to itself handle all write requests of a guest virtual machine by performing the write requests on a differencing disk file instead of on a plugin file. For example where the hypervisor supports the creation of differencing disk files which are snapshots of a virtual machine disk file the files system filter driver or other driver or module of the system can instruct the hypervisor to create a differencing disk associated with the plugin file . A differencing disk file may be similar in some respects to an incremental backup image file such as a StorageCraft ShadowProtect Incremental SPI backup image file. However unlike SPI backup image files which are updated with sequentially increasing offsets differencing disk files may permit random offset writes of virtual machine disk data. After the creation of the differencing disk file all writes of the guest virtual machine to the plugin file will instead be written by the hypervisor to the differencing disk file. The differencing disk file may have a native hypervisor disk file format such as a VHDX or VMDK file format. In this alternative to steps all of the write requests from the guest virtual machine are handled by the hypervisor itself and are sent directly to the differencing disk file. The hypervisor in this alternative embodiment continues to issue read requests to the plugin file but directs all write requests to the differencing disk file.

It is further understood that each of the steps discussed herein that involve modifying a request may instead be implemented by replacing and or associating the request with one or more new request s that is are configured to accomplish the same end result as a modified request. For example a modification of a read request may involve queuing the read request and initiating an associated read request to a proprietary disk file. The data received in response to the associated read request may then be filled into the queued read request s buffer such as by copying the associated read request s buffer into the buffer for the queued read request. In this example both the queued read request and the associated read request may use a shared buffer or they may have their own distinct buffers.

The embodiments described herein may include the use of a special purpose or general purpose computer including various computer hardware or software modules or filters as discussed in greater detail below.

Embodiments described herein may be implemented using computer readable media for carrying or having computer executable instructions or data structures stored thereon. Such computer readable media may be any available media that may be accessed by a general purpose or special purpose computer. By way of example and not limitation such computer readable media may include non transitory computer readable storage media including RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other storage medium which may be used to carry or store desired program code in the form of computer executable instructions or data structures and which may be accessed by a general purpose computer special purpose computer or virtual computer such as a virtual machine. Combinations of the above may also be included within the scope of computer readable media.

Computer executable instructions comprise for example instructions and data which cause a general purpose computer special purpose computer or virtual computer such as a virtual machine to perform a certain function or group of functions. Although the subject matter has been described in language specific to structural features and or methodological steps it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or steps described above. Rather the specific features and steps described above are disclosed as example forms of implementing the claims.

As used herein the term module or filter may refer to software objects or routines that execute on a computing system. The different modules or filters described herein may be implemented as objects or processes that execute on a computing system e.g. as separate threads . While the system and methods described herein are preferably implemented in software implementations in hardware or a combination of software and hardware are also possible and contemplated.

All examples and conditional language recited herein are intended for pedagogical objects to aid the reader in understanding the example embodiments and the concepts contributed by the inventor to furthering the art and are to be construed as being without limitation to such specifically recited examples and conditions.

