---

title: Providing autonomous self-testing of a processor
abstract: In an embodiment, a processor includes at least one core, a power management unit having a first test register including a first field to store a test patch identifier associated with a test patch and a second field to store a test mode indicator to request a core functionality test, and a microcode storage to store microcode to be executed by the at least one core. Responsive to the test patch identifier, the microcode may access a firmware interface table and obtain the test patch from a non-volatile storage according to an address obtained from the firmware interface table. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09612930&OS=09612930&RS=09612930
owner: Intel Corporation
number: 09612930
owner_city: Santa Clara
owner_country: US
publication_date: 20150612
---
Many computer systems provide a variety of test facilities to ensure reliability availability and serviceability RAS . Some of these tests provide for testing of arrays within a processor while other tests are designed to test functional operation of the processor. In some processors a dedicated validation unit is provided to perform such testing however the inclusion of such additional dedicated logic increases costs and complexity.

Embodiments provide autonomous system analytics ASA technology to perform self testing of a processor and its functionality with reduced overhead. Such testing can be used to provide error predictive capabilities to minimize unplanned downtime and in field diagnostics to improve manufacturing bring up and quicker system failure debug.

Although the scope of the present invention is not limited in this regard embodiments provide ASA features to enable multiple types of in field testing content including testing for arrays and non arrays of a processor and its constituent logic. For programmable built in self test PBIST accessible arrays manufacturing array test algorithms performed during high volume manufacturing HVM testing may be re used to test the arrays. For non arrays test content may be provided to run on processor cores and or other processing engines to target speed paths and specific functionality. While performing these functional tests and array testing embodiments may perform voltage and frequency margining to predict failures.

Embodiments provide a test micro architecture that is built around a microcode patch applied at reset through a firmware interface table FIT mechanism. This micro architecture allows functional requirements of ASA to be met while ensuring security properties to ensure that trusted execution environments such as implemented using Intel Software Guard Extensions SGX technology Intel Trusted Execution Technology TXT technology secure enclaves or an ARM TrustZone among others are not violated.

In an embodiment this microcode patch can be applied at reset to perform the core array tests. At the same time while such testing is being performed techniques are provided to prevent untrusted entities like a manageability engine ME of the processor from being able to compromise the execution environment in which the microcode patch or secure boot authenticated code modules are being executed. In addition embodiments may protect secrets like secure enclave keys residual secrets left in caches and register files by secure enclaves and user secrets from being compromised. By containing the complexity of performing core array tests to a microcode patch the internal details of the core arrays and test requirements restrictions are not exposed to external entities like the manageability engine.

As such embodiments may perform the testing described herein without an additional dedicated microcontroller to act as a trusted agent to expose an application programming interface API for the manageability engine to perform the tests. In this way reduced costs are realized by not providing an additional microcontroller in the socket.

Referring now to shown is a block diagram of a computing environment in accordance with an embodiment of the present invention. As shown in computing environment may be any type of computing environment from a standalone system to a set of interconnected computer systems coupled together in a given network configuration. More specifically environment includes components of a local computer system along with remote components coupled thereto. In some cases the local computer system may correspond to a server computer system of a datacenter that is arranged for high availability. In other cases the local computer system may be a standalone computer system of a given user e.g. a desktop laptop or even mobile computer such as a tablet computer or smartphone . In any case the local system may be configured to perform autonomous self testing throughout its life to maintain a high availability system with reliability availability and serviceability RAS .

As seen environment includes a processor of the local computer system. In an embodiment processor may be a multi core or many core processor or other system on chip SoC . As illustrated processor includes a plurality of cores . As will be described herein each core may be configured to execute microcode that may perform at least some of the self testing described herein. To this end each core may be configured with a microcode storage and a self test unit that may be configured to perform self testing. In different embodiments understand that the various self testing described herein can be performed by microcode to be executed on one or more cores or other processing engines of the processor.

Still with reference to cores couple to a power management unit PMU which may be implemented in an embodiment as a microcontroller including or coupled to a non transitory storage medium to store instructions to perform a variety of different operations to perform power management activities for the processor in addition to performing autonomous self testing described herein. PMU may include various test registers including a first test register and a second test register . Although for ease of illustration these registers are shown as being external to PMU understand that in many embodiments these test registers may be located within the PMU itself.

As will be discussed herein access to these registers may be made via microcode . In addition access may also be performed by way of a manageability engine ME which may perform management and related security operations within processor . As seen ME couples to an interface which in an embodiment is a Peripheral Component Interconnect Express PCIe interface to provide interconnection to a local area network LAN .

For example in a datacenter implementation LAN may provide access to the local computer system by a system administrator which may be implemented as one or more other server computers of the datacenter. In this way test content e.g. stored in a disk storage may be provided by system administrator for execution in the local computer system. In addition other test content may be provided by way of an Internet based network . In different embodiments this test content may include diagnostic programs to be executed on the processor to target speed paths and specific functional units in the processor and or the microcode patch to be applied as described herein to test the core arrays.

In an embodiment a manageability engine and microcode may access one or more test registers referred to generally as ASA registers as described herein to request tests to be carried out on reset and to gather the results of the test. The PMU exposes a set of services over an in band peripheral environmental control interface PECI to access these registers and to select voltage and frequency operating points in an embodiment.

In an embodiment a first control register can be accessed by microcode using a IO transaction using a control register address. In an embodiment this first test register may take the form shown in Table 1.

In an embodiment the ASA PATCH ID and ASA IA TEST MODE fields are sticky and only cleared on a cold reset. The rest of the bits in the register may be cleared on all resets. The manageability engine may access this register using PCS READ PCS WRITE requests over the PECI mailbox with the below restrictions in an embodiment allowed to read and write the ASA PATCH ID prevented from writing a value of 0000 to ASA PATCH ID allowed to read ASA IA TEST MODE and RUN bits in the register allowed to set ASA IA TEST MODE to 1 but not clear it and allowed to write RUN bit in the register.

In an embodiment a second control register can be accessed by microcode using the same addressing mechanism. Microcode and the PMU are allowed to read and write this register. The manageability engine can read but not write to this register in an embodiment.

Referring now to shown is a flow diagram of a method for performing autonomous self testing of a processor in accordance with an embodiment. In the embodiment of method may be performed by various combinations of hardware software and or firmware. To this end some operations of method may be performed by execution of microcode on one or more cores of a processor while other operations may be performed by one or more of a PMU and ME of the processor.

As illustrated method begins by reading an ASA test power on configuration register block . In an embodiment microcode may be configured to perform this read operation on reset of the processor. Based on information in this configuration register it is determined whether an ASA test patch is requested diamond . If so the microcode may select a given test patch based on the ID block . To this end a test patch ID obtained from the configuration register may be used to access a firmware interface table FIT to determine and obtain an appropriate test patch. At block various stored secrets e.g. associated with a trusted execution environment and or user based secrets may be cleared. Thereafter the ASA test patch can be loaded e.g. into microcode storage of block .

Thereafter the microcode may set a safe mode indicator block which may be an indicator within the ASA test result register to indicate that the processor is in a safe mode realized such as by clearing of the secrets . Next it can be determined whether a run indicator present in the ASA test power on configuration register is active diamond . As will be discussed in an embodiment the ME may set this indicator.

Still with reference to when it is determined that this run indicator is active control passes to block where one or more array tests may be run on arrays of the core. Note that these array tests may write strings of predetermined values e.g. zeros and ones into various arrays of the core such as one or more cache memories of the core and processor. By writing predetermined values in given orders e.g. horizontally and vertically within lines of the cache memory it can be determined whether any faults are present in the cache memory. In one embodiment the microcode may employ PBIST engine to perform these tests by programming the PBIST engine with a test vector and waiting for the results of testing from the PBIST engine. Based on the results of such testing the microcode may at block update the ASA test result register with the test result for the particular core. In one embodiment when the microcode utilizes the PBIST engine the microcode may read the status of the tests from the PBIST engine. In an embodiment this test result may be a simple indication of pass or fail. In some cases the fail indication may further provide information regarding the failure such as particular locations within one or more cache memories at which a failure occurred. Thereafter it can be determined whether the processor has been reset diamond . On reset a reset flow is performed block . Thus at this point the ASA testing is completed and normal operations may begin.

Still with reference to if at diamond it is determined that no ASA test patch is requested control next passes to diamond to determine whether a core test is requested. In an embodiment this determination may be based on another indicator within the power on configuration register. If no such core test is requested control passes to block where a normal reset flow may be performed to enable the processor to boot into a normal operating mode.

Instead if a core test is requested control passes to block where a production patch may be obtained. Next control passes to block where any stored secrets may be cleared as discussed above. Thereafter at block a boot to BIOS occurs and any user secrets can next be cleared by BIOS or other firmware software invoked by BIOS block .

At this point the BIOS may request microcode to set a safe mode indicator block . In an embodiment the BIOS may set this safe mode indicator present in the ASA result register to indicate that the processor is in a safe mode. Subsequent to setting the safe mode indicator the BIOS may request the ME for the test programs to be executed on the core and in response the ME provides the test content to the BIOS. As such BIOS may execute the tests of the test content provided by the ME block . Subsequently the BIOS waits for the RUN indicator to be set by the ME. At the conclusion of such tests the results can be reported to the ME block . Thereafter at block a reboot may occur so that normal processor operation may continue or begin. Understand while shown at this high level in the embodiment of understand many variations and alternatives are possible.

Referring now to shown is a flow diagram of an overall autonomous testing method in accordance with an embodiment of the present invention. In an embodiment method may be performed by a manageability engine or other hardware control logic configured to implement autonomous self testing e.g. as directed by a remote entity such as a system administrator or other management logic. As seen method begins by writing a patch ID to the ASA test power on configuration register block . In an embodiment this test patch ID may be an indicator of a desired core array test to be performed that is stored in firmware associated with the computer system to be autonomously tested or an indication of a given functional test to be performed by way of a predetermined value in the patch ID field and an active core test field of the configuration register . Next it is determined whether a safe mode is active diamond . This determination may be based e.g. on a safe mode indicator present within the ASA test result register.

Thereafter at block a voltage and frequency for the ASA test may be set. In an embodiment the manageability engine may instruct a PMU or other power controller to set a particular voltage and frequency for the core to undergo testing to enable voltage and frequency margining to be performed e.g. to determine whether a particular test routine is validly executed at a given voltage and frequency level. In this way relative aging of the processor can be determined such that a good measure of error prediction and or failure can be identified.

Still with reference to at block a run indicator of the ASA test power on configuration register may be set to indicate that the test is ready to be performed. Thus at this point one or more desired tests present in the test code may be executed.

Information regarding test results may be communicated and provided to the ME which may update an ASA test result register based on the results. In an embodiment each of multiple cores of a processor can be tested in this way and counts may be maintained within this test register of the number of passing cores and failing cores. That is to enable test results to be communicated and analyzed while minimizing the area consumption for such additional registers minimal test result information by way of counts of passing and failing cores and an identifier of at least the first failing core may be maintained. Still further in some embodiments an identifier of the first core that failed may also be stored in the test result register. Understand that in other cases instead of such minimal amount of storage greater result storage may be provided such that specific test results for each individual core can be provided.

Thus as illustrated based on the results obtained from reading the test result register block it can be determined whether the sum of the passing and failing cores equals the total number of cores present in the processor diamond . If so the testing has acceptably concluded and control passes to block where the test results can be reported to a requester e.g. a system administrator or other remote entity or to a local user . Understand while described above at this high level in the embodiment of many variations and alternatives are possible.

In an embodiment the PMU provides PECI control services PCS services to the ME to perform ASA tests e.g. voltage frequency margining These and other PCS services for ASA functionality may be provided only if a SAFE MODE ACTIVE indicator is enabled in the second test register. If the SAFE MODE ACTIVE indicator is 0 then only the PCS services to read or ASA TEST POC and ASA TEST RESULT register are provided and all other ASA related PCS requests may be denied with a suitable error code.

In order to perform core array tests one or more microcode patches ASA TEST PATCH may be provided to implement a test sequence to perform core array tests. In some cases these test sequences may be spread across multiple patches due to microcode resource restrictions. The ASA TEST PATCH can be differentiated from other production patches via a field in the microcode patch header ASA ID which in an embodiment is a 4 bit field. On production patches the ASA ID is set to 0000b. The ASA TEST PATCH is a signed microcode patch with a non zero value in the ASA ID of the microcode patch header. The field thus allows for up to 15 unique ASA test patches for a given core product. Embodiments may allow these patches to only be applied at reset through the FIT.

In an embodiment one or more of these ASA TEST PATCHES can be stored in a non volatile storage such as a flash storage that stores a platform BIOS. In turn BIOS may link these test patches to a FIT as patch type entries type 0x01 . The manageability engine can use the ASA TEST POC register to request core microcode to load given ASA test patches linked to the FIT at reset.

The ASA TEST POC register is sampled by the reset microcode on all threads as part of their reset microcode execution if ASA is fuse enabled on a given processor. If the ASA TEST POC register is non zero where a non zero value is programmed into ASA PATCH ID or ASA IA TEST MODE fields by the ME the reset microcode clears any secure secrets in the thread such as secrets of a trusted execution environment e.g. keys secrets in caches etc. and places the thread in debug mode.

The reset microcode uses the value of the ASA TEST POC.ASA PATCH ID as one of the inputs to the algorithm it uses to select the reset microcode patch to apply. The FIT parsing in an embodiment uses family model stepping and platform ID to match against patches linked to the FIT to determine if the patch is an appropriate patch. Among the patches that match the family model stepping and platform ID microcode selects the patch having the highest update version. This matching can be extended to match the ASA TEST POC.ASA PATCH ID to the ASA ID in the patch header as part of the patch. Thus when the ASA TEST POC.ASA PATCH ID is non zero this loop will select the highest ASA TEST PATCH that matches the family mode stepping platform ID and ASA TEST POC.ASA PATCH ID.

If the ASA TEST POC.ASA PATCH ID is not zero then following the patch reset flow the reset microcode on all cores rendezvous. Once all the cores rendezvous the bootstrap processor BSP thread generates a poison cycle if LaGrande Technology LT also known as Intel Trusted Execution Technology TXT is enabled in the platform. Following generation of the LT poison cycle microcode sets the ASA TEST RESULT.SAFE MODE ACTIVE to 1 to indicate that the ASA patching is complete. If an ASA TEST PATCH was not applied due to the patch not being found in the FIT or any failures in application of the patch then the reset microcode enters an infinite loop waiting for a reset. In an embodiment writing 1 to SAFE MODE ACTIVE bit will cause generation of a LT poison cycle to disable a subsequent TXT launch and AC mode entry. Subsequent to generation of the LT poison cycle the SAFE MODE ACTIVE bit may be set in the ASA TEST RESULT register.

If an ASA TEST PATCH was successfully applied then the reset invokes the ASA test sequence that is patched in by this patch. The ASA test sequence polls on ASA TEST POC.RUN bit to be set to 1 for the ME to indicate that the array tests are ready to be run. When the ASA TEST POC.RUN bit is set to 1 the ASA test sequence uses the PBIST and or local direct array testing to implement the array tests on one or more arrays in the core. The result of that testing is recorded in the ASA TEST RESULT register e.g. by incrementing the pass or fail count of the ASA TEST RESULT register. In one embodiment the ASA TEST RESULT register is a shared resource by all cores in a socket. In such an embodiment updates to this register can be protected using an uncore semaphore operation. In an embodiment the first core that increments the fail counter in this register may record its ID and information in the ASA TEST RESULT register. Subsequent to completion of testing the patch enters an infinite loop waiting for a reset with all events disabled.

If the ASA TEST POC.PATCH ID is non zero the core will not execute any non test instructions in a given boot cycle. If ASA TEST POC is not zero then following the patch reset flow the reset microcode does not perform a SGX key derivation.

If ASA TEST POC.PATCH ID is zero then the reset microcode continues the reset flow normally including launching any ACM linked to the FIT e.g. LT SX or AnC startup ACM . Note that the SAFE MODE ACTIVE is still 0 even when ASA IA TEST MODE is 1. This allows software like the SCLEAN ACM and BIOS initial boot block IBB to execute with a good execution environment and clear any user secrets in the platform. The BIOS IBB may set the SAFE MODE ACTIVE when it is ready using a MSR interface to initiate the ASA functional tests to place the part into ASA test mode such that ME can initiate voltage frequency appropriate for running the ASA tests. Setting of the SAFE MODE ACTIVE also leads to generation of a LT poison cycle on the platform.

The below pseudo code of Table 3 illustrates an example reset microcode flow and ASA patching sequence in accordance with an embodiment.

Thus in various embodiments a microcode patch applied at reset can be used to perform core array tests. In addition using a power on configuration to specify when intrusive tests will be conducted enables a safe mode to be activated to carry out these tests.

In an embodiment an indicator may be provided in a MSR PLATFORM INFO register to indicate availability of ASA capability on the platform by reflecting the state of an ASA fuse. In an embodiment the ASA TEST POC is exposed through a model specific package scoped read only MSR. A write to this MSR by software may lead to a general protection fault GP . In an embodiment the ACTIVATE ASA SAFE MODE is a model specific package scoped MSR in which a given bit e.g. can be written to 1 to set the SAFE MODE ACTIVE in ASA TEST RESULT register. All other bits in this MSR are reserved.

The read of this MSR returns the state of the SAFE MODE ACTIVE bit in the ASA TEST RESULT register. This bit is sticky and cannot be cleared once set to 1 and writing 0 to the SAFE MODE ACTIVE bit will be ignored in an embodiment. In an embodiment writing to this MSR will cause a GP if ASA is not fuse enabled reserved bits are set ASA IA TEST MODE is 0 in ASA TEST POC the product is post SENTER.

Understand that embodiments can be used in many different types of systems. One particular use case for performing autonomous self testing as described herein is in the context of an SoC or other processor that is part of an embedded system. As an example the processor may be embedded within a sensing module calculation module or so forth that is a standalone system within a larger system such as a vehicle sensing unit that is part of a larger vehicle electronic system. Another such use case may be for autonomous self testing of an SoC or other processor of and Internet of things IOT device that may be implemented as part of a larger system such as an industrial system consumer appliance or so forth.

To that end embodiments may perform the autonomous self testing described herein on reset as well as responsive to an incoming request for such self testing e.g. from a remote entity such as a system administrator a vehicle service center or other maintenance service that can perform remote monitoring and diagnostics of a system. As such the autonomous self testing may be performed to determine a measure of reliability of the processor and or to make error predictions. For example in some cases based on voltage and frequency margining performed during testing an error prediction value can be determined that in turn may be compared to an allowed error prediction level. If the determined value varies from this allowed level by at least a threshold amount error prediction information may be communicated to a remote entity such as a main system of which an embedded system is a part and or to a remote entity. Of course many other use cases for the autonomous self testing described herein are possible.

In a processor pipeline may include a fetch stage a length decode stage a decode stage an allocation stage a renaming stage a scheduling also known as a dispatch or issue stage a register read memory read stage an execute stage a write back memory write stage an exception handling stage and a commit stage .

In arrows denote a coupling between two or more units and the direction of the arrow indicates a direction of data flow between those units. shows processor core including a front end unit coupled to an execution engine unit and both may be coupled to a memory unit .

Core may be a reduced instruction set computing RISC core a complex instruction set computing CISC core a very long instruction word VLIW core or a hybrid or alternative core type. In one embodiment core may be a special purpose core such as for example a network or communication core compression engine graphics core or the like.

Front end unit may include a branch prediction unit coupled to an instruction cache unit . Instruction cache unit may be coupled to an instruction translation lookaside buffer TLB . TLB may be coupled to an instruction fetch unit which is coupled to a decode unit . Decode unit may decode instructions and generate as an output one or more micro operations micro code entry points microinstructions other instructions or other control signals which may be decoded from or which otherwise reflect or may be derived from the original instructions. The decoder may be implemented using various different mechanisms. Examples of suitable mechanisms include but are not limited to look up tables hardware implementations programmable logic arrays PLAs microcode read only memories ROMs etc. In one embodiment instruction cache unit may be further coupled to a level 2 L2 cache unit in memory unit . Decode unit may be coupled to a rename allocator unit in execution engine unit .

Execution engine unit may include rename allocator unit coupled to a retirement unit and a set of one or more scheduler units . Scheduler units represent any number of different schedulers including reservations stations central instruction window etc. Scheduler units may be coupled to physical register file units . Each of physical register file units represents one or more physical register files different ones of which store one or more different data types such as scalar integer scalar floating point packed integer packed floating point vector integer vector floating point etc. status e.g. an instruction pointer that is the address of the next instruction to be executed etc. Physical register file units may be overlapped by retirement unit to illustrate various ways in which register renaming and out of order execution may be implemented e.g. using one or more reorder buffers and one or more retirement register files using one or more future files one or more history buffers and one or more retirement register files using register maps and a pool of registers etc. . Generally the architectural registers may be visible from the outside of the processor or from a programmer s perspective. The registers might not be limited to any known particular type of circuit. Various different types of registers may be suitable as long as they store and provide data as described herein. Examples of suitable registers include but might not be limited to dedicated physical registers dynamically allocated physical registers using register renaming combinations of dedicated and dynamically allocated physical registers etc. Retirement unit and physical register file units may be coupled to execution clusters . Execution clusters may include a set of one or more execution units and a set of one or more memory access units . Execution units may perform various operations e.g. shifts addition subtraction multiplication and on various types of data e.g. scalar floating point packed integer packed floating point vector integer vector floating point . While some embodiments may include a number of execution units dedicated to specific functions or sets of functions other embodiments may include only one execution unit or multiple execution units that all perform all functions. Scheduler units physical register file units and execution clusters are shown as being possibly plural because certain embodiments create separate pipelines for certain types of data operations e.g. a scalar integer pipeline a scalar floating point packed integer packed floating point vector integer vector floating point pipeline and or a memory access pipeline that each have their own scheduler unit physical register file unit and or execution cluster and in the case of a separate memory access pipeline certain embodiments may be implemented in which only the execution cluster of this pipeline has memory access units . It should also be understood that where separate pipelines are used one or more of these pipelines may be out of order issue execution and the rest in order.

The set of memory access units may be coupled to memory unit which may include a data TLB unit coupled to a data cache unit coupled to a level 2 L2 cache unit . In one exemplary embodiment memory access units may include a load unit a store address unit and a store data unit each of which may be coupled to data TLB unit in memory unit . L2 cache unit may be coupled to one or more other levels of cache and eventually to a main memory.

By way of example the exemplary register renaming out of order issue execution core architecture may implement pipeline as follows 1 instruction fetch may perform fetch and length decoding stages and 2 decode unit may perform decode stage 3 rename allocator unit may perform allocation stage and renaming stage 4 scheduler units may perform schedule stage 5 physical register file units and memory unit may perform register read memory read stage execution cluster may perform execute stage 6 memory unit and physical register file units may perform write back memory write stage 7 various units may be involved in the performance of exception handling stage and 8 retirement unit and physical register file units may perform commit stage .

Core may support one or more instructions sets e.g. the x86 instruction set with some extensions that have been added with newer versions the MIPS instruction set of MIPS Technologies of Sunnyvale Calif. the ARM instruction set with optional additional extensions such as NEON of ARM Holdings of Sunnyvale Calif. .

It should be understood that the core may support multithreading executing two or more parallel sets of operations or threads in a variety of manners. Multithreading support may be performed by for example including time sliced multithreading simultaneous multithreading where a single physical core provides a logical core for each of the threads that physical core is simultaneously multithreading or a combination thereof. Such a combination may include for example time sliced fetching and decoding and simultaneous multithreading thereafter such as in the Intel Hyperthreading technology.

While register renaming may be described in the context of out of order execution it should be understood that register renaming may be used in an in order architecture. While the illustrated embodiment of the processor may also include a separate instruction and data cache units and a shared L2 cache unit other embodiments may have a single internal cache for both instructions and data such as for example a Level 1 L1 internal cache or multiple levels of internal cache. In some embodiments the system may include a combination of an internal cache and an external cache that may be external to the core and or the processor. In other embodiments all of the cache may be external to the core and or the processor.

Core may be included in a general purpose processor such as a Core i3 i5 i7 2 Duo and Quad Xeon Itanium XScale or StrongARM processor which may be available from Intel Corporation of Santa Clara Calif. The processor may be provided from another company such as ARM Holdings Ltd MIPS or others. The processor may be a special purpose processor such as for example a network or communication processor compression engine graphics processor co processor embedded processor or the like. The processor may be implemented on one or more chips and may be a part of and or may be implemented on one or more substrates using any of a number of process technologies such as for example BiCMOS CMOS or NMOS.

A processor designed using one or more cores having pipelines as described above may be implemented in many different end products extending from embedded devices Internet of Things IoT devices mobile devices to server systems. Referring now to shown is a block diagram of a processor in accordance with another embodiment of the present invention. In the embodiment of processor may be a SoC including multiple domains each of which may be controlled to operate at an independent operating voltage and operating frequency. As a specific illustrative example processor may be an Intel Architecture Core based processor such as an i3 i5 i7 or another such processor available from Intel Corporation. However other low power processors such as available from AMD of Sunnyvale Calif. an ARM based design from ARM Holdings Ltd. or licensee thereof or a MIPS based design from MIPS Technologies Inc. of Sunnyvale Calif. or their licensees or adopters may instead be present in other embodiments such as an Apple A7 processor a Qualcomm Snapdragon processor or Texas Instruments OMAP processor. Such SoC may be used in a low power system such as an embedded system smartphone tablet computer phablet computer Ultrabook computer or other portable computing device which may incorporate a heterogeneous system architecture having a heterogeneous system architecture based processor design.

In the high level view shown in processor includes a plurality of core units . Each core unit may include one or more processor cores one or more cache memories and other circuitry. Each core unit may support one or more instruction sets e.g. an x86 instruction set with some extensions that have been added with newer versions a MIPS instruction set an ARM instruction set with optional additional extensions such as NEON or other instruction set or combinations thereof. Note that some of the core units may be heterogeneous resources e.g. of a different design . In addition each such core may be coupled to a cache memory not shown which in an embodiment may be a shared level two L2 cache memory. A non volatile storage may be used to store various program and other data. For example this storage may be used to store at least portions of microcode boot information such as a BIOS other system software or so forth including the autonomous self testing test patches described herein.

Each core unit may also include an interface such as a bus interface unit to enable interconnection to additional circuitry of the processor. In an embodiment each core unit couples to a coherent fabric that may act as a primary cache coherent on die interconnect that in turn couples to a memory controller . In turn memory controller controls communications with a memory such as a DRAM not shown for ease of illustration in .

In addition to core units additional processing engines are present within the processor including at least one graphics unit which may include one or more graphics processing units GPUs to perform graphics processing as well as to possibly execute general purpose operations on the graphics processor so called GPGPU operation . In addition at least one image signal processor may be present. Signal processor may be configured to process incoming image data received from one or more capture devices either internal to the SoC or off chip.

Other accelerators also may be present. In the illustration of a video coder may perform coding operations including encoding and decoding for video information e.g. providing hardware acceleration support for high definition video content. A display controller further may be provided to accelerate display operations including providing support for internal and external displays of a system. In addition a security processor may be present to perform security operations such as secure boot operations various cryptography operations and so forth. Each of the units may have its power consumption controlled via a power manager .

In some embodiments SoC may further include a non coherent fabric coupled to the coherent fabric to which various peripheral devices may couple. One or more interfaces enable communication with one or more off chip devices. Such communications may be via a variety of communication protocols such as PCIe GPIO USB IC UART MIPI SDIO DDR SPI HDMI among other types of communication protocols. Although shown at this high level in the embodiment of understand the scope of the present invention is not limited in this regard.

Referring now to shown is a block diagram of another example SoC. In the embodiment of SoC may include various circuitry to enable high performance for multimedia applications communications and other functions. As such SoC is suitable for incorporation into a wide variety of embedded portable and other devices such as smartphones tablet computers smart TVs and so forth. In the example shown SoC includes a central processor unit CPU domain . In an embodiment a plurality of individual processor cores may be present in CPU domain . As one example CPU domain may be a quad core processor having 4 multithreaded cores. Such processors may be homogeneous or heterogeneous processors e.g. a mix of low power and high power processor cores and may be configured to perform the autonomous self testing described herein.

In turn a GPU domain is provided to perform advanced graphics processing in one or more GPUs to handle graphics and compute APIs. A DSP unit may provide one or more low power DSPs for handling low power multimedia applications such as music playback audio video and so forth in addition to advanced calculations that may occur during execution of multimedia instructions. In turn a communication unit may include various components to provide connectivity via various wireless protocols such as cellular communications including 3G 4G LTE wireless local area protocols such as Bluetooth IEEE 802.11 and so forth.

Still further a multimedia processor may be used to perform capture and playback of high definition video and audio content including processing of user gestures. A sensor unit may include a plurality of sensors and or a sensor controller to interface to various off chip sensors present in a given platform. An image signal processor may be provided with one or more separate ISPs to perform image processing with regard to captured content from one or more cameras of a platform including still and video cameras.

A display processor may provide support for connection to a high definition display of a given pixel density including the ability to wirelessly communicate content for playback on such display. Still further a location unit may include a GPS receiver with support for multiple GPS constellations to provide applications highly accurate positioning information obtained using as such GPS receiver. Understand that while shown with this particular set of components in the example of many variations and alternatives are possible.

Referring now to shown is a block diagram of an example system with which embodiments can be used. As seen system may be a smartphone or other wireless communicator. A baseband processor is configured to perform various signal processing with regard to communication signals to be transmitted from or received by the system. In turn baseband processor is coupled to an application processor which may be a main CPU of the system to execute an OS and other system software including the microcode based autonomous self testing described herein in addition to user applications such as many well known social media and multimedia apps. Application processor may further be configured to perform a variety of other computing operations for the device.

In turn application processor can couple to a user interface display e.g. a touch screen display. In addition application processor may couple to a memory system including a non volatile memory namely a flash memory and a system memory namely a dynamic random access memory DRAM . As further seen application processor further couples to a capture device such as one or more image capture devices that can record video and or still images.

Still referring to a universal integrated circuit card UICC comprising a subscriber identity module and possibly a secure storage and cryptoprocessor is also coupled to application processor . System may further include a security processor that may couple to application processor . A plurality of sensors may couple to application processor to enable input of a variety of sensed information such as accelerometer and other environmental information. An audio output device may provide an interface to output sound e.g. in the form of voice communications played or streaming audio data and so forth.

As further illustrated a near field communication NFC contactless interface is provided that communicates in a NFC near field via an NFC antenna . While separate antennae are shown in understand that in some implementations one antenna or a different set of antennae may be provided to enable various wireless functionality.

A power management integrated circuit PMIC couples to application processor to perform platform level power management. To this end PMIC may issue power management requests to application processor to enter certain low power states as desired. Furthermore based on platform constraints PMIC may also control the power level of other components of system .

To enable communications to be transmitted and received various circuitry may be coupled between baseband processor and an antenna . Specifically a radio frequency RF transceiver and a wireless local area network WLAN transceiver may be present. In general RF transceiver may be used to receive and transmit wireless data and calls according to a given wireless communication protocol such as 3G or 4G wireless communication protocol such as in accordance with a code division multiple access CDMA global system for mobile communication GSM long term evolution LTE or other protocol. In addition a GPS sensor may be present. Other wireless communications such as receipt or transmission of radio signals e.g. AM FM and other signals may also be provided. In addition via WLAN transceiver local wireless communications can also be realized.

Referring now to shown is a block diagram of another example system with which embodiments may be used. In the illustration of system may be mobile low power system such as a tablet computer 2 1 tablet phablet or other convertible or standalone tablet system. As illustrated a SoC is present and may be configured to operate as an application processor for the device.

A variety of devices may couple to SoC . In the illustration shown a memory subsystem includes a flash memory and a DRAM coupled to SoC . In addition a touch panel is coupled to the SoC to provide display capability and user input via touch including provision of a virtual keyboard on a display of touch panel . To provide wired network connectivity SoC couples to an Ethernet interface . A peripheral hub is coupled to SoC to enable interfacing with various peripheral devices such as may be coupled to system by any of various ports or other connectors.

In addition to internal power management circuitry and functionality within SoC a PMIC is coupled to SoC to provide platform based power management e.g. based on whether the system is powered by a battery or AC power via an AC adapter . In addition to this power source based power management PMIC may further perform platform power management activities based on environmental and usage conditions. Still further PMIC may communicate control and status information to SoC to cause various power management actions within SoC .

Still referring to to provide for wireless capabilities a WLAN unit is coupled to SoC and in turn to an antenna . In various implementations WLAN unit may provide for communication according to one or more wireless protocols.

As further illustrated a plurality of sensors may couple to SoC . These sensors may include various accelerometer environmental and other sensors including user gesture sensors. Finally an audio codec is coupled to SoC to provide an interface to an audio output device . Of course understand that while shown with this particular implementation in many variations and alternatives are possible.

Referring now to shown is a block diagram of a representative computer system such as notebook Ultrabook or other small form factor system. A processor in one embodiment includes a microprocessor multi core processor multithreaded processor an ultra low voltage processor an embedded processor or other known processing element. In the illustrated implementation processor acts as a main processing unit and central hub for communication with many of the various components of the system . As one example processor is implemented as a SoC which may be configured to perform the autonomous self testing described herein.

Processor in one embodiment communicates with a system memory . As an illustrative example the system memory is implemented via multiple memory devices or modules to provide for a given amount of system memory.

To provide for persistent storage of information such as data applications one or more operating systems and so forth a mass storage may also couple to processor . In various embodiments to enable a thinner and lighter system design as well as to improve system responsiveness this mass storage may be implemented via a SSD or the mass storage may primarily be implemented using a hard disk drive HDD with a smaller amount of SSD storage to act as a SSD cache to enable non volatile storage of context state and other such information during power down events so that a fast power up can occur on re initiation of system activities. Also shown in a flash device may be coupled to processor e.g. via a serial peripheral interface SPI . This flash device may provide for non volatile storage of system software including a basic input output software BIOS as well as other firmware of the system.

Various input output I O devices may be present within system . Specifically shown in the embodiment of is a display which may be a high definition LCD or LED panel that further provides for a touch screen . In one embodiment display may be coupled to processor via a display interconnect that can be implemented as a high performance graphics interconnect. Touch screen may be coupled to processor via another interconnect which in an embodiment can be an IC interconnect. As further shown in in addition to touch screen user input by way of touch can also occur via a touch pad which may be configured within the chassis and may also be coupled to the same IC interconnect as touch screen .

For perceptual computing and other purposes various sensors may be present within the system and may be coupled to processor in different manners. Certain inertial and environmental sensors may couple to processor through a sensor hub e.g. via an IC interconnect. In the embodiment shown in these sensors may include an accelerometer an ambient light sensor ALS a compass and a gyroscope . Other environmental sensors may include one or more thermal sensors which in some embodiments couple to processor via a system management bus SMBus bus.

Also seen in various peripheral devices may couple to processor via a low pin count LPC interconnect. In the embodiment shown various components can be coupled through an embedded controller . Such components can include a keyboard e.g. coupled via a PS2 interface a fan and a thermal sensor . In some embodiments touch pad may also couple to EC via a PS2 interface. In addition a security processor such as a trusted platform module TPM may also couple to processor via this LPC interconnect.

System can communicate with external devices in a variety of manners including wirelessly. In the embodiment shown in various wireless modules each of which can correspond to a radio configured for a particular wireless communication protocol are present. One manner for wireless communication in a short range such as a near field may be via a NFC unit which may communicate in one embodiment with processor via an SMBus. Note that via this NFC unit devices in close proximity to each other can communicate.

As further seen in additional wireless units can include other short range wireless engines including a WLAN unit and a Bluetooth unit . Using WLAN unit Wi Fi communications can be realized while via Bluetooth unit short range Bluetooth communications can occur. These units may communicate with processor via a given link.

In addition wireless wide area communications e.g. according to a cellular or other wireless wide area protocol can occur via a WWAN unit which in turn may couple to a subscriber identity module SIM . In addition to enable receipt and use of location information a GPS module may also be present. Note that in the embodiment shown in WWAN unit and an integrated capture device such as a camera module may communicate via a given link.

To provide for audio inputs and outputs an audio processor can be implemented via a digital signal processor DSP which may couple to processor via a high definition audio HDA link. Similarly DSP may communicate with an integrated coder decoder CODEC and amplifier that in turn may couple to output speakers which may be implemented within the chassis. Similarly amplifier and CODEC can be coupled to receive audio inputs from a microphone which in an embodiment can be implemented via dual array microphones such as a digital microphone array to provide for high quality audio inputs to enable voice activated control of various operations within the system. Note also that audio outputs can be provided from amplifier CODEC to a headphone jack . Although shown with these particular components in the embodiment of understand the scope of the present invention is not limited in this regard.

One or more aspects of at least one embodiment may be implemented by representative code stored on a machine readable medium which represents and or defines logic within an integrated circuit such as a processor. For example the machine readable medium may include instructions which represent various logic within the processor. When read by a machine the instructions may cause the machine to fabricate the logic to perform the techniques described herein. Such representations known as IP cores are reusable units of logic for an integrated circuit that may be stored on a tangible machine readable medium as a hardware model that describes the structure of the integrated circuit. The hardware model may be supplied to various customers or manufacturing facilities which load the hardware model on fabrication machines that manufacture the integrated circuit. The integrated circuit may be fabricated such that the circuit performs operations described in association with any of the embodiments described herein.

The RTL design or equivalent may be further synthesized by the design facility into a hardware model which may be in a hardware description language HDL or some other representation of physical design data. The HDL may be further simulated or tested to verify the IP core design. The IP core design can be stored for delivery to a third party fabrication facility using non volatile memory e.g. hard disk flash memory or any non volatile storage medium . Alternately the IP core design may be transmitted e.g. via the Internet over a wired connection or wireless connection . The fabrication facility may then fabricate an integrated circuit that is based at least in part on the IP core design. The fabricated integrated circuit can be configured to perform operations in accordance with at least one embodiment described herein.

In one example a SoC or other processor comprises at least one core a power management unit coupled to the at least one core the power management unit including a first test register having a first field to store an autonomous test patch identifier associated with a test patch and a second field to store a test mode indicator to request a core functionality test and a microcode storage to store microcode to be executed by the at least one core where the microcode is responsive to the test patch identifier to access a firmware interface table and obtain the test patch from a non volatile storage according to an address obtained from the firmware interface table.

In an example the at least one core is to store a result of the test patch in a second test register of the SoC.

In an example the SoC of one or more of the above examples further includes a manageability engine coupled to the power management unit the manageability engine to access the result from the second test register and send the result to a requester.

In an example the manageability engine is to set a run indicator of the first test register after at least one secret is cleared from a storage of the SoC.

In an example the microcode to be executed by the at least one core is to cause the at least one core to execute the test patch responsive to the set run indicator.

In an example the manageability engine is to cause the power management unit to update a frequency and a voltage of the at least one core and thereafter enable the core functionality test to be performed.

In an example the microcode is to update a first field of the second test register with an identifier of at least one core that failed the first array test and update a count field with a count of one or more cores that passed a plurality of array tests and update a count field with a count of one or more cores that failed at least one of the plurality of array tests.

In another example a system comprises a display and a memory and includes the processor of one or more of the above examples.

In another example a method comprises reading a first test register of a processor responsive to a first patch identifier of a test patch field of the first test register selecting a first test patch stored in a firmware storage for execution reading a run indicator of a run field of the first test register and responsive to the run indicator being of a first state executing the first test patch and reporting a result of the first test patch in a second test register of the processor.

In an example the method further comprises clearing one or more secrets stored in a secure storage of the processor and thereafter setting a safe mode indicator of the second test register.

In an example the method further comprises generating a poison cycle to prevent a secure pre boot launch and thereafter setting the safe mode indicator of the second test register.

In an example the method further comprises setting the run indicator via a manageability engine of the processor responsive to the set safe mode indicator of the second test register.

In an example the method further comprises storing the first patch identifier in the test patch field of the first test register via the manageability engine of the processor.

In an example the method further comprises accessing a firmware interface table using the first patch identifier to obtain an address for the first test patch in the firmware storage.

In an example the method further comprises reading the first test register responsive to a self test indicator stored in a fuse storage of the processor.

In an example the method further comprises executing a first test patch in a plurality of cores of the processor updating a first count stored in a first count field of the second test register for each of the plurality of cores that passes the first test patch updating a second count stored in a second count field of the second test register for each of the plurality of cores that fails the first test patch and reading via the manageability engine the second test register and providing test result information therefrom to a requester.

In an example the method further comprises storing an identifier of a first core of the plurality of cores that failed the first test patch in a core identification field of the second test register.

In an example the method further comprises responsive to a functional test mode indicator of the first test register being of a first state executing a functional test of one or more of a plurality of cores of the processor at a plurality of voltage and frequency combinations.

In an example the method further comprises responsive to a second patch identifier of the test patch field of the first test register being a first value causing a first core of the plurality of cores to enter an infinite loop to enable a manageability engine of the processor to perform an autonomous self test of an uncore portion of the processor.

In another example a computer readable medium including instructions is to perform the method of any of the above examples.

In another example a computer readable medium including data is to be used by at least one machine to fabricate at least one integrated circuit to perform the method of any one of the above examples.

In another example an apparatus comprises means for performing the method of any one of the above examples.

In another example a system comprises a processor having a plurality of cores a first interface to couple to a non volatile storage and a power management unit to independently control a voltage and a frequency of the plurality of cores the power management unit to provide access to a first test register having a first field to store an autonomous test patch identifier associated with a test patch stored in the non volatile storage a second field to store a test mode indicator to request a core functionality test and a third field to store a ready indicator to indicate that an autonomous self test of the test patch is ready to begin and a second test register having a first field to indicate that the processor is in a safe mode a second field to indicate a number of the plurality of cores that passed the autonomous self test and a third field to indicate a number of the plurality of cores that failed the autonomous self test. The system may further comprise the non volatile storage coupled to the processor the non volatile storage to store a plurality of test patches and a firmware interface table having a plurality of entries to identify locations of the plurality of test patches where a first core is responsive to the test patch identifier to access the firmware interface table and obtain the test patch from a location of the non volatile storage identified by the firmware interface table.

In an example the processor further comprises a manageability engine coupled to the power management unit the manageability engine to access test result information from the second field and the third field of the second test register and send at least some of the test result information to a second system coupled to the system where the system comprises an embedded system.

In an example the autonomous self test comprises one or more diagnostic tests to determine reliability of the processor.

In an example the processor is to perform the one or more diagnostic tests at a plurality of frequency and voltage levels to determine an error prediction level associated with the processor where if the error prediction level is in variance with a threshold level the processor is to communicate an error prediction report to the second system to enable the second system to report error prediction information to a remote entity.

In an example the first field of the second test register is to be set to indicate that the processor is in the safe mode after one or more secrets have been cleared from the processor where the processor is to execute the autonomous self test after the first field of the second test register is set.

Embodiments may be used in many different types of systems. For example in one embodiment a communication device can be arranged to perform the various methods and techniques described herein. Of course the scope of the present invention is not limited to a communication device and instead other embodiments can be directed to other types of apparatus for processing instructions or one or more machine readable media including instructions that in response to being executed on a computing device cause the device to carry out one or more of the methods and techniques described herein.

Embodiments may be implemented in code and may be stored on a non transitory storage medium having stored thereon instructions which can be used to program a system to perform the instructions. Embodiments also may be implemented in data and may be stored on a non transitory storage medium which if used by at least one machine causes the at least one machine to fabricate at least one integrated circuit to perform one or more operations. The storage medium may include but is not limited to any type of disk including floppy disks optical disks solid state drives SSDs compact disk read only memories CD ROMs compact disk rewritables CD RWs and magneto optical disks semiconductor devices such as read only memories ROMs random access memories RAMs such as dynamic random access memories DRAMs static random access memories SRAMs erasable programmable read only memories EPROMs flash memories electrically erasable programmable read only memories EEPROMs magnetic or optical cards or any other type of media suitable for storing electronic instructions.

While the present invention has been described with respect to a limited number of embodiments those skilled in the art will appreciate numerous modifications and variations therefrom. It is intended that the appended claims cover all such modifications and variations as fall within the true spirit and scope of this present invention.

