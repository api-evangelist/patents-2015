---

title: Managing applications on an electronic device
abstract: An electronic device may offload an application to a network storage to free up storage on the electronic device. For instance, an application file and, in some cases, associated application data and/or saved application state information may be stored at the network storage and deleted from the electronic device. Subsequently, a data management module may receive an instruction to onload the application back onto the electronic device, such as in response to a user input that selects the offloaded application, a determination that an upcoming activity may include use of the offloaded application, or a determination that a user usage pattern indicates that the offloaded application is likely to be used. In response, the data management module may download the corresponding application file from the network storage. In some cases, the electronic device may also receive associated application data and/or saved application state information from the network storage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09654556&OS=09654556&RS=09654556
owner: RAZER (ASIA-PACIFIC) PTE. LTD.
number: 09654556
owner_city: Singapore
owner_country: SG
publication_date: 20150831
---
This application is a continuation in part of U.S. patent application Ser. No. 14 043 034 entitled APPLICATION STATE BACKUP AND RESTORATION ACROSS MULTIPLE DEVICES which was filed on Oct. 1 2013 which is a continuation in part of U.S. patent application Ser. No. 13 772 163 entitled APPLICATION STATE SYNCHRONIZATION ACROSS MULTIPLE DEVICES filed on Feb. 20 2013 which claims the benefit of U.S. Provisional Patent Application No. 61 708 794 entitled CLOUD COMPUTING INTEGRATED OPERATING SYSTEM which was filed on Oct. 2 2012 all of which applications are incorporated by reference herein.

People use electronic devices for communication socializing entertainment work navigation web browsing and a variety of other functions. However electronic devices typically have limited storage space thus restricting the amount of data that a user may maintain on a particular electronic device. For example people often keep various different types of digital content items on their electronic devices such as photographs videos music and so forth and like to have sufficient free storage space to allow addition of more content items when desired without having to first delete existing content items. Furthermore people may often have many applications installed on their electronic devices. Some of these applications and the associated application data may take up a considerable amount of storage space while being used relatively infrequently.

Some implementations herein include techniques and arrangements for managing applications available to a user on an electronic device. For instance an electronic device may offload an application file and in some cases associated application data and or application state information to a network storage to free up storage space on the electronic device. Thus in some examples the application may be uninstalled from the electronic device or otherwise offloaded and deleted from the electronic device. Applications may be onloaded back onto the device in response to a condition including at least one of a user input that selects an offloaded application a determination of an upcoming activity may include use of an offloaded application a determination that a user usage pattern indicates that a particular offloaded application is likely to be used soon or other determined information as discussed below.

In response to determining that a particular application is to be onloaded onto the electronic device the electronic device may send a request to the network storage for the corresponding application file. The application may be onloaded such as by reinstalling the application and or by transferring an application file from the network storage to the storage of the electronic device. Further in some examples the electronic device may receive from the network storage at least one of associated application data or application state information for the application being onloaded. In other examples the application data and or application state information may have been retained on the electronic device and may be used to restore the application after the application is onloaded onto the electronic device. Thus the application may be restored to its former state and executed on the electronic device.

Some examples herein are directed to management of applications on an electronic device. For example a data management module on the electronic device may dynamically manage the amount of available storage on the electronic device by removing user data such as certain applications associated application data and or certain content items from the storage of the electronic device and offloading this user data at least temporarily to a network storage location. An offloaded application may be onloaded back onto the electronic device in response to at least one of a user input that selects the offloaded application a determination of an upcoming event that may include use of the offloaded application a determination that a user usage pattern indicates that the offloaded application is likely to be used in the near future or other information indicating an offloaded application may be used soon. Further in some examples an emulator may execute an offloaded application at a service computing device to enable the receipt by the electronic device of notifications for certain applications that have been offloaded from the electronic device.

User data comprising content items applications and application data typically may consume the largest amount of storage on an electronic device. The electronic device herein may offload a portion of the user data when heuristics indicate that particular applications and or content items are likely to not be used by the user in the near term. For instance a data management module may determine which applications or content items a user is likely to use at what times and on what days and may offload or onload certain user data based on predicted usage patterns. The offloading and onloading of the user data may typically take place in the background without any user interaction to provide a seamless user experience. The applications and application data may be offloaded or onloaded based on the techniques described herein. In some examples the digital content items may be offloaded and or onloaded based on the techniques described in U.S. patent application Ser. No. 14 835 993 entitled MANAGING CONTENT ON AN ELECTRONIC DEVICE filed Aug. 26 2015 which is incorporated by reference herein.

The data management module may offload a particular application based on application usage patterns of the user the detection of an upcoming event or lack thereof and or based on other criteria as discussed below. In some examples the application that is being offloaded may be uninstalled from the electronic device and an application file may be sent to the network storage that may be used to reinstall the application during onloading. In other examples one or more application files of the application may be removed from the electronic device and sent to the network storage without uninstalling the application from the electronic device.

Further in some examples the application data associated with the application and or saved application state information obtained during execution of the application may also be offloaded to the network storage. In other examples the application data associated with the application and or the saved application state information may be retained on the electronic device when the application is offloaded. For instance the data management module might not completely uninstall and remove all information associated with an application from the electronic device when offloading the application. Rather the data management module may leave on the electronic device at least one of application data saved application state information or metadata for the application. The application metadata may include for example an application icon or other representation of the application and other metadata associated with the application such as an application file name application version application size size of the associated application data and so forth.

In some situations the data management module may decide which applications to offload and onload. In other situations the data management module may receive an instruction to onload an application such as from an application launcher or other UI that receives a user input. Further in some examples the data management module may receive information about an upcoming event from an event determination module and or information about an application that may be used during the event. In any of these cases in response to determining that an application is to be onloaded back onto the electronic device the data management module may begin onloading the application. For example the data management module may send a request to the network storage for a corresponding application file and in some cases the offloaded application data and or saved state information associated with the requested application.

As one example of onloading an application the data management module may download from the network storage an application file that was previously sent to the network storage by the data management module. In some examples the associated application data and or saved application state information is also downloaded from the network storage. The data management module may use the downloaded application file to reinstall the application and restore the application data and application state for the application.

As another example of onloading an application the data management module may download from the network storage an application file that was previously sent to the network storage by the data management module. In this example however the application file may be saved to the storage of the electronic device and may be restored and executed without reinstallation of the downloaded application file. In either case the data management module may restore the application to its most recent state using the previously saved application state information which may be downloaded contemporaneously with the application file and or application data or which may have been retained on the electronic device while the application file was offloaded.

In some examples when an application is uninstalled for offloading the data management module may generate an application file that can be used to reinstall the same version of the application back onto the electronic device. Thus the data management module may generate a custom and more precise version of the application file that can be used to reinstall the application onto the electronic device when the application is onloaded to the electronic device. For example an application file received from a developer or application store may typically include elements used for a variety of different types of devices such as smart phones tablets and so forth. In some cases the elements used for a tablet may be significantly different from the elements used for a smart phone such as different resolution images different control features or the like. If the user installs the application on e.g. a smartphone then the tablet oriented elements of the application will not be used and merely consume additional storage space. Thus when the data management module generates a custom application file during offloading of the application the custom application file may be smaller in size than the original application file since the custom application file may only include elements actually useable by the particular electronic device on which the application is installed. The smaller size enables the custom application file to be more quickly moved between the electronic device and network storage.

In addition in some examples an emulator may be executed on the service computing device to emulate the electronic device. For example an offloaded application may be installed on the emulator and may be restored to a recent state using the offloaded application data and application state information. The offloaded application executed on the emulator may function in the same manner as the application functioned on the electronic device. Accordingly as one example the application may communicate with an external resource such as a website and may receive application information therefrom such as notifications messages posts or the like. When the application on the emulator receives a notification message or other application information this information may be forwarded by the service computing device to the electronic device such as for presentation on the electronic device as a notification associated with the offloaded application.

For discussion purposes some example implementations are described in the environment data management including offloading and subsequently onloading applications and associated data on the electronic device for conserving storage space on the electronic device with minimal disruption to the user experience. However implementations herein are not limited to the particular examples provided and may be extended to other types of devices other execution environments other system architectures other even determination techniques and so forth as will be apparent to those of skill in the art in light of the disclosure herein.

The electronic device may include a data management module that executes on the electronic device . The data management module may be executable code or other executable instructions that provide data management functionality to the electronic device for controlling which applications and or content items are maintained locally on the electronic device and which are offloaded at least in part. In some examples the data management module may be an application or other module that is part of an operating system OS on the electronic device . In other examples the data management module may be one or more modules that are separate from the OS such as may be included in one or more applications executable on the electronic device . For instance the data management module may have permission for system level access to user applications and or data stored on the electronic device . Thus the data management module may be an application that the user may be able to see and access via an application launcher such as for adjusting settings of the data management module . Alternatively the data management module may be an application separate from the OS that the user cannot see and or access. As still another alternative the data management module may be implemented as a module of the OS that is not accessible to the user. In addition while the data management module is illustrated in this example as residing on the electronic device in other examples at least some of the functionality of the data management module may reside on another suitable computing device.

The electronic device may further include applications and data which may include one or more applications apps that are installed and maintained on the electronic device . Each application may include one or more application files such as at least one application file including components for the executable application. In some examples the application files may be or may include application files that are installable for execution on the electronic device. Examples of installable application files include an APK file in the case of ANDROID OS variants an IPA file in the case of IOS OS variants or an XAP file in the case of WINDOWS Phone OS variants however implementations herein are not limited to these examples.

Further in some examples the application files may include application asset files that contain media or other content or data provided by the application developer. As one example an OBB opaque binary blob file format is file that may be downloaded for use with an APK file. The OBB file is an expansion file that typically includes additional encrypted format data not stored in the main APK file including graphics and media files. In some examples herein the data management module may remove an APK file and an associated OBB file from the electronic device when performing an uninstallation of the application associated application data or saved application state information . Further the data management module may onload the application files such as an APK file and an associated OBB file such as by using an application programming interface API normally used as an updating tool without performing a reinstallation of the APK file. Thus implementations herein may be able to offload and onload application files without having to perform uninstall and reinstall operations which can save considerable time.

The applications and data may further include the application data which may be user application data that is associated with generated by and or used by respective applications of the applications . For instance each application may have an associated portion of application data respectively. In addition the applications and data may include saved application state information . For example the data management module may be configured to store the state of each application each time the application is accessed on the electronic device . Thus for each application that is used on the electronic device the data management module may take a snapshot of the application when the user stops using the application to obtain the most up to date state information. The saved application state information may be saved incrementally as changes are made during use of the respective application . The data management module may store this saved application state information temporarily on the electronic device and may subsequently backup the saved application state information to the network storage with other application data information sent to the network storage . For instance the app data and saved application state information may be backed up to the network storage on a daily basis such as overnight when the electronic device might otherwise be in a standby mode. Further in other examples the app data and saved application state information may be retained on the electronic device when the corresponding application is offloaded from the electronic device .

In some examples the applications and data may further include application metadata which may include metadata for local applications currently installed and executable on the electronic device as well as metadata for offloaded applications that are not currently executable unless onloaded. As one example when an application is offloaded application metadata of the application may be left on the electronic device so that application launchers on the electronic device are able to determine that an offloaded application exists and is available to be restored onto the electronic device if selected by the user.

In addition the applications and data may include one or more content items . Examples of content items may include digital photographs images videos audio recordings documents books movies television shows and the like. As mentioned above the data management module may manage the offloading and onloading of content items in addition to offloading and onloading applications and application data. The applications and data may further include other types of user data such as user profiles user settings user account information user data used by the OS and or data used by other programs on the electronic device .

The OS may further include an application launcher which may be an OS application or other OS module that may present a launcher UI to the user on a display associated with the electronic device . The application launcher may be included on the electronic device for launching execution of applications on the electronic device . The application launcher may cause an application to launch on the electronic device regardless of whether the application is currently installed on the electronic device or has been offloaded to the network storage . In some cases the launcher may provide a visual indication as to which applications have been offloaded and which applications are currently fully installed on the electronic device . Further if the user attempts to launch an application that has been offloaded the data management module may retrieve reinstall or otherwise onload the application and launch the application on the electronic device in real time

For example as discussed below with respect to the launcher UI may enable the user to search through the applications available to be opened on the electronic device . The launcher UI may present information about applications that are currently installed and executable on the electronic device and also may present information about the applications that have been offloaded from the electronic device to the network storage . Thus the user may use the launcher UI to select an installed application or an offloaded application for launching execution of the application on the electronic device . Additionally in other examples the application launcher may be a native application that is separate from the OS but configured for use with the OS and the data management module as discussed additionally below.

In some examples the user may use the application launcher UI to attempt to launch an application that has been offloaded from the electronic device to the network storage. For instance as discussed below with respect to icons or other representations of applications that have been offloaded from the electronic device may be presented in the launcher UI along with representations of applications currently fully installed on the electronic device . In some cases the representations of applications that have been offloaded may be visually distinguished in the launcher UI from representations of applications that are currently installed on the electronic device . For instance the representations of applications that have been offloaded may be presented in a graphical style that is distinct from the graphical style used for the representations of applications that are currently fully installed on the electronic device such as by being grayed out being presented with broken lines being presented in a larger or smaller size being presented in a different shape being presented along with a graphic element such as a cloud or through any of various other graphical distinguishing techniques.

Furthermore in some examples the applications and data may include one or more third party launchers . For example an application launcher may serve the function of a start screen and or home screen to organize a user s applications and data and to help the user to locate and start applications. In some examples third party launchers may provide different application organization techniques search features or other customizable features that certain users may prefer over the native application launcher . Accordingly implementations herein are configured to accommodate the use of a third party launcher in addition to the native OS application launcher . In some cases the third party launcher may be an application downloaded by the user but is shown and referenced separately from the other applications in this example for discussion purposes.

The display may be used for presenting various types of visual information to the user such as the launcher UI provided by the launcher or the third party launcher as well as other UIs content items text images or other digital information. In addition the OS may include an application management service which may include one or more OS services APIs or the like for identifying and launching applications on the electronic device .

In addition the OS may include an event determination module that may detect identify or otherwise determine events and that may provide instructions to the data management module for offloading or onloading applications based on the determined events. For example the event determination module may identify an upcoming event during which the user may wish to have access to a particular offloaded application. For instance suppose that the user s calendar indicates that the user will be taking a flight in the near future. The event determination module may determine one or more applications recommended for the user to have access to during the upcoming flight. The event determination module may send an instruction to the data management module to onload the recommended applications. Additional functions of the event determination module are discussed below with respect to . Further while several components and data of the electronic device are described and illustrated in this example numerous other components and data may be included in the electronic device as discussed additionally below and or as will be apparent to those of skill in the art having the benefit of the disclosure herein.

In the illustrated example the network storage includes one or more service computing devices that include a storage management module . Further the service computing device may include or may be in communication with one or more storage devices such as by direct connection or via the one or more networks . In some examples the network storage may be provided by a service provider. For instance various service providers may provide commercial cloud storage or other network storage to the public typically for a monthly or yearly fee based at least in part on the amount of storage space consumed by an individual user. However implementations herein are not limited to commercial network storage services and may be extended to other types of network accessible storage and storage services. As several alternative examples the network storage may be a network attached storage NAS a server computing device a desktop computing device or the like such as may be maintained by the user or other entity.

The one or more networks can include any suitable network including a wide area network such as the Internet a local area network such as an intranet a wireless network such as a cellular network a local wireless network such as Wi Fi short range wireless communications such as BLUETOOTH a wired network such as fiber or Ethernet or any other suitable network or any combination thereof. Accordingly the one or more networks may include both wired and or wireless communication technologies. Components used for such communication technologies can depend at least in part upon the type of network and or the environment selected. Protocols for communicating over such networks are well known and will not be discussed herein in detail. Accordingly the electronic device and the service computing device are able to communicate over the one or more networks using wired or wireless connections and combinations thereof.

The storage management module on the service computing device may manage the storage of offloaded application files offloaded application data and or saved application state information offloaded content items and backed up other user data of the user stored on the storage devices . Further the storage management module may control access to the offloaded applications data and content items. In the case that the network storage is provided by a commercial storage service the storage devices may be enterprise level storage arrays such as may be maintained in a storage area network a NAS cluster a RAID redundant array of independent disks array a distributed storage node array or various other types of storage configurations. The storage devices may store offloaded application files that have been offloaded from the electronic device as well as the associated application data and or saved application state information . In addition the storage devices may store the offloaded content items and the other user data such as backup versions the user s profile user settings user account information and or various other types of user data as enumerated elsewhere herein. In addition in some examples the storage devices may store with the application data saved application state information for the offloaded application files . The data management module may use the saved application state information to restore the applications to their most recent states when onloading the application files back onto the electronic device .

In some implementations the data management module may dynamically manage the amount of available storage on the electronic device by offloading some applications from the electronic device . Thus as indicated at the data management module may create space in the local storage by offloading one or more application files from the electronic device for storage at the network storage . Further in some examples the data management module may also offload associated application data and saved application state information . In some cases the data management module may automatically offload one or more of the applications to the network storage such as based on one or more user preferences or according to various heuristics such as based on detected patterns of usage. In other cases prior to moving one or more application files off the electronic device the data management module may present the user with a list of applications to be offloaded and or onloaded and the user may approve disapprove or otherwise determine the applications to be offloaded onloaded from the electronic device . Similarly based on a prediction that the user will want to use one or more applications as indicated at the data management module may automatically onload one or more application files and in some cases as indicated at associated application data and or saved application state information.

In some examples the data management module may identify an application that is not expected to be used for at least some predictable period of time. For instance the data management module may identify an application that the user has only used on the weekends e.g. Saturday and Sunday and not on weekdays such as Monday through Friday. Based at least in part on this determination on Monday mornings the data management module may offload at least one application file of the application and in some examples the associated application data and or saved application state information to the network storage . Subsequently on Friday evenings the data management module may download and restore the application file on the electronic device .

In some examples the application data and the saved application state information may remain on the electronic device during the time that the application is offloaded. In other examples the application data and or the saved application state information may be offloaded with the application file and then onloaded with the application file during onloading of the application. In some examples multiple application files may be offloaded for a particular application such as an application file including code of at least some executable components of the application e.g. an APK file and one or more application asset files e.g. an OBB file . The multiple offloaded files may then be subsequently onloaded back onto the electronic device during onloading.

Additionally in some cases an application may be uninstalled for offloading. Following uninstallation of the application an installable application file e.g. an APK file may remain on the electronic device . The application file may be sent to the network storage and deleted from the storage of the electronic device . In some cases the contents of the application file may be the same as a file received from the application source when the application was installed. In other examples when the application is uninstalled for offloading the data management module may generate a custom installable application file that can be used to reinstall the same version of the application back onto the electronic device . For instance the data management module may generate a custom version of the application file that is smaller than the original application file received from the application source .

For example an application file received from a developer or application store may typically include elements used for a variety of different types of devices such as smart phones tablets and so forth. In some cases the elements used for a tablet may be significantly different from the elements used for a smart phone such as different resolution images different control features or the like. Consequently if the electronic device is a smartphone then the tablet elements of the application file are not used and merely consume additional storage space on the electronic device. Thus the data management module may generate a custom application file during uninstalling of the application. For instance the custom application file may be smaller in size than the original application file since the custom application file may only include elements actually used by the particular electronic device on which the application is installed. The smaller size enables the custom application file to be more quickly moved between the electronic device and network storage or vice versa.

The data management module may observe application usage by the user to determine application usage patterns for the user with the respect to particular onloaded applications and offloaded applications. In addition the data management module may use the observed usage patterns to determine when to download an offloaded application file back on to the electronic device . The offloading and onloading of application files and application data may normally take place in the background without user action. Further in the case that that user attempts to access a particular application that is not currently maintained on the storage of the electronic device such as via the application launcher the data management module may be configured to onload the particular application right away. Depending in part on the connection speed to the network storage this may take place in real time following the user selection of the particular application.

The data management module may take into consideration one or more criteria when determining which applications to offload or onload or to recommend for offloading or onloading. For instance application size may be generally static while the size of application data may vary from person to person and application to application. As an example a photo editing application may be generally the same size on the electronic devices of all users but the size of the application data associated with the photo editing application may vary dramatically from user to user. Accordingly the criteria may take into consider the size of both the application files and the associated application data when selecting applications and application data to onload or offload.

In some cases the data management module may employ one or more observed user data usage patterns priority rules expressed user preferences or other application ranking techniques when determining applications to offload or onload. The data management module may determine which applications are likely to be used by the user in the near future and which applications may be offloaded. As one example the data management module may rank the applications based at least in part on how recently each application has been used how often each application is used how much storage space each application uses or a combination thereof. For instance certain applications that are used less frequently and or that utilize a large amount of storage space may be automatically offloaded to the network storage location or recommended for offloading. Thus an application may be offloaded based on expiration of a threshold length of time since the last use based on how infrequently the application has been used over a period of time based on the application using a threshold amount of storage space based on the amount of storage space remaining on the electronic device falling below a threshold level or the like.

As another example the data management module may select one or more applications for offloading or onloading based on upcoming events or lack thereof as determined by the event determination module . For instance if a user typically uses certain applications on a flight during travel or during similar event categories the event determination module may recommend that those applications and associated application data be offloaded if the user does not have any upcoming travel scheduled. On the other hand if the user s calendar shows a flight scheduled the event determination module may send an instruction to the data management module to onload these applications onto the electronic device prior to the flight. In some cases the offloading and onloading may take place when the electronic device is otherwise not in use such as when the electronic device is in a standby mode connected to Wi Fi and plugged in to a power source. Some application metadata corresponding to each of the offloaded applications may be maintained at the electronic device such as for maintaining user settings an application icon and or other information about the offloaded application.

The storage management module at the network storage may receive an offloaded application file and the associated application data and may store these in association with a user account associated with the user and or the electronic device . As one example a copy of the application file and associated application data may be stored at the network storage in association with a cloud storage account of the user of the electronic device . In some cases the electronic device may send a copy of the application file to the storage management module before during or following installation of the application on the electronic device . For example the data management module on the electronic device may receive the application file initially from an application source such as an application store or other application provider e.g. on a web server computing device or the like.

When the application is offloaded at a later point in time in some examples the offloading may not include the actual sending of the application file at the later point in time since the application file may be already stored at the network storage for each application installed on the electronic device . Alternatively in some examples when an application is offloaded the storage management module may obtain a corresponding application file for the offloaded application from the application source rather than from the electronic device . For example by obtaining the application file in advance from the electronic device or from a separate source the offloading onloading process can be shortened substantially because the onloading of a first application does not have to wait for the transfer of an application file of a second application being offloaded to be completed.

Subsequently when the user of the electronic device attempts to execute an offloaded application or when the data management module otherwise determines to onload an offloaded application the data management module may request that the storage management module send the corresponding offloaded application file to the electronic device . As indicated at the offloaded application file may be sent to the electronic device for onloading. In addition in some examples as indicated at the associated application data and or saved application state information may be sent to the electronic device for restoring the onloaded application on the electronic device . After the application has been onloaded onto the electronic device execution of the application on the electronic device may be initiated using the saved application state information and the corresponding application data so that the onloaded application may begin execution in a state at which the user last used the application.

In some examples during onloading of an offloaded application onto the electronic device the saved application state information for the application may be sent to the electronic device by the network storage . In other examples the saved application state information may also be retained on the electronic device regardless of whether the application file had been offloaded and or a copy of the application state information is also backed up to the network storage. The content of the application state information depends at least in part on the particular application that is being executed. Some examples of application state information may include values for various variables used by the applications values for most recent application settings and graphic user interface configurations values for recently received user inputs or other user selections and so forth. Thus the saved state information for an application may include the stored information to which the application has access at a point in time essentially creating a snapshot of the application at the point in time.

In some cases the application state information may be obtained implicitly from the application by causing the application to save its current state. For instance some applications are configured to save their current states to an application folder or other persistent location when the applications are sent to background processing. For example application development frameworks for mobile electronic devices may require that application developers cause certain functions to take place in response to certain conditions such as causing an application to save its state to a persistent memory location when the application is sent to the background. As one example the use of a moveTaskToBack command or any other suitable OS command that has a similar effect of moving a process to background processing may cause an application to save its current state information to a persistent memory location e.g. as saved application state information associated with the particular application .

Alternatively as another example one or more of the applications may be configured by the application developers to save their respective current states in response to receiving an explicit save state command from the data management module . For example an application developer may configure the application to respond to receipt of a save state command by saving the application state information of the application to a specified location. The application state information may then be retrieved from the specified location stored in association with the application and or backed up to the network storage as the saved application state information .

The data management module or another OS module may cause the recently onloaded application on the electronic device to start execution using the corresponding saved application state information . For instance the application may be started using the saved variables settings and GUIs that were in place in the application at a point at which execution of the application last left off on the electronic device . Accordingly the selected application is restored to its previous state so that the process of offloading the application from the electronic device and onloading the application back onto the electronic device does not affect the user s prior settings screen configurations or the like for the application.

In some examples when certain applications are offloaded from the electronic device the storage management module may determine settings for the emulator at the service computing device that may be used to execute the corresponding offloaded application file . For instance the storage management module may determine the processing capabilities of the electronic device such as by determining a device type of the electronic device a manufacturer or brand of the electronic device a model of the electronic device a processor of the electronic device e.g. processor type or processing capability a memory size of the electronic device an operating system of the electronic device and or other types of device information device resources and the like. Based on this determination the storage management module may determine that a suitable emulator is available for executing the offloaded application .

As one example suppose that a social network application has been offloaded from the electronic device to the network storage as indicated at . For example the data management module may send the corresponding application file application data and the saved application state information for the offloaded social network application to the network storage and may delete at least some of this information from the electronic device to free up storage space. Further the storage management module may maintain a list of applications that are to be executed on the emulator when offloaded from the electronic device . The applications on the list may include applications that might generate notifications or other information to the user on periodic or other occasional basis. For example suppose that the social network application generates notifications to the user whenever a friend or other social connection sends a message to the user .

The use of the emulator enables the user to continue to receive notifications or other application information despite the corresponding application being offloaded. For example when the application is offloaded from the electronic device the storage management module may compare an identifier associated with the offloaded application with the list . For example the identifier may be a name of the application a version of the application a type of the application a source of the application or the like. In response to determining that the offloaded application is on the list the storage management module may install the received application file on the emulator and may use the application data and saved state information to restore the application to the most recent state. The application may then communicate with a web server such as a web server hosting a social network site corresponding to the application executing on the emulator .

As one example the social network site may send application information to the offloaded application such as a message received from a friend of the user . The application in response to receiving this information may generate a notification. An API or other functionality of the storage management module may obtain this notification from the emulator and may send the notification or other application information to the data management module as indicated at . The data management module may employ an application management service such as an API on the electronic device to cause the received notification or other application information to be presented with other notifications in a notifications UI presented by the OS of the electronic device on the display . As discussed below with respect to the user may be able to select the notification in the notifications UI which in some cases may result in the offloaded application being onloaded onto the electronic device . In other examples the data management module may begin onloading the application in response to receiving the notification.

In the illustrated example the launcher UI presents a first plurality of application icons or other representations repr. that may represent applications from that are currently installed on the electronic device such as representations which may represent twelve respective applications that are installed on the electronic device . Furthermore the launcher UI presents a second plurality of application representations repr. that may represent applications that have been offloaded to the network storage . In this example there are four application representations that represent four applications for which the corresponding application files have been offloaded to the network storage . Further while a single screen of application representations is shown in this example the user may be able to scroll left right and or up down to view additional representations and or .

In some cases following offloading of a particular application to the network storage the representation representing the offloaded application may remain visible in the launcher UI to enable the user to select the offloaded application for execution should the user so desire. As one example the application representation may be changed in graphical style to indicate that the application has been offloaded to the network storage such as by placing a cloud symbol on the representation graying out the representation showing the representation with dashed or broken lines showing the representation as larger or smaller than the representations a different shape or the like. In the illustrated example the representations are presented with dashed lines to indicate to the user that the corresponding applications have been offloaded. If one of the corresponding applications were to be onloaded e.g. application representation then following onloading that representation would subsequently be presented in the graphical style of the representations i.e. with a solid outline instead of a dashed outline. In other examples the representations representing the offloaded applications may be moved to a different location in the launcher UI such as to a folder for applications that have been offloaded from the electronic device or to a different page different directory or the like. Alternatively as another example the application representations might not be graphically distinguished from the application representations so that it is not readily apparent to the user that a particular application has been offloaded to the network storage. As still another alternative rather than being distinguished by graphical style or in addition to the representations may be grouped together separately from the representations such as by being located in separate region of the same page as illustrated in .

In the case that the display is a touchscreen the user may be able to use a finger to scroll the launcher UI to view other application representations and or . Additionally the launcher UI may include content item icons system controls folders OS elements and the like not shown in . Further the user may use the finger to tap on or otherwise select a particular application representation or to launch execution of the corresponding application. Thus in the illustrated example suppose that the user has selected application representation which corresponds to a particular offloaded application. In response the offloaded application file for the particular offloaded application may be downloaded from the network storage reinstalled on the electronic device and executed on the electronic device using saved state information to restore the application to its most recent state as discussed above.

In addition if the user selects a representation of an application that is currently fully installed on the electronic device the data management module may record the time and date at which the user opens the application how long the user uses the application whether the application continues to run while the user uses a second application which applications the user uses before during and after the application and so forth. The data management module may also record similar information when the user selects a representation of an offloaded application that is not currently executable on the electronic device.

Further in response to the selection of the offloaded application the launcher may communicate with the data management module to cause the data management module to onload and install the selected application as quickly as possible. In response the data management module may download the application and the associated application data including previously save state information for the application. Further the launcher may provide the user with periodically updated status information as the downloading and other onloading of the selected application progresses. As one example rather than removing all traces of an application during uninstalling and or otherwise offloading of the application the data management module may maintain metadata for each application whether the application is currently installed or offloaded. As one example when an application is offloaded metadata of the application may be left on the electronic device so that the OS launcher and third party launchers on the electronic device are able to determine that an offloaded application exists and is available to be restored onto the electronic device if selected by the user.

Additionally in some examples the application data associated with the application and or saved application state information for the application may also be retained on the electronic device when the application is offloaded. Thus the data management module might not completely uninstall and remove all traces of an application from the electronic device when offloading an application. Rather the data management module may leave on the electronic device one or more of application data saved application state information or metadata including the application icon or other representation of the application and may further leave or generate other metadata associated with the application such as an application file name application version application size size of the associated application data and so forth. This enables the launcher or a third party launcher to be made aware of the offloaded application present an icon or other representation of the offloaded application in the launcher UI and enable selection of the offloaded application by a user even though the application has been offloaded from the electronic device.

As one example an application management service such as a package service may typically be used by the launcher and or a third party launcher for retrieving information related to the application packages that are currently installed on the electronic device. Thus when an application has been offloaded the data management module may place the application into a limbo state such that rather than enabling opening of the application through the launcher or third party launcher the application management service may provide the launcher or third party launcher with at least a portion of the metadata for the offloaded application. For example when the data management module offloads the application the data management module may generate a grayed out icon dashed icon or other graphically distinct representation for the application and store this application representation with the application metadata as the representation to be used by the launcher or at least the third party launcher. Thus the application management service may provide the dashed icon to the launcher and or the third party launcher in place of the actual application representation so long as the application is offloaded from the electronic device. For instance the third party launcher may present the dashed icon as the application representation without being aware that the application has been offloaded from the electronic device.

When the user selects the dash lined application representation the launcher or the third party launcher respectively sends an instruction to or through an application management service such as to an activity manager service provided by the application management service. In some examples the launcher or the third party launcher may use an application programming interface API that configures the instruction in a uniform manner regardless of the source to be delivered to the application management service. In response to receiving the instruction the application management service may then communicate with the data management module to cause the data management module to begin onloading the application. The data management module may onload the requested application and then may notify the application management service. The application management service may then issue an open call to the application as if the application had been fully installed onboard the electronic device when the instruction was received from the launcher or the third party launcher. For instance when a launcher or other service is used to launch an application that is currently installed on the electronic device the launcher may send an open call or similar instruction to the application management service which opens the selected application.

The launcher is configured to communicate with the data management module such as via the application management service to cause the data management module to onload and restore an application. The launcher receives communications from the data management module as the application is restored such as to enable the launcher to inform the user of the status of the application restoration. For instance the launcher may present a UI informing the user of an estimated time until the onload and or installation of the application is complete.

The launcher of as an OS module or native application may itself be able to track which applications are currently installed on the electronic device and which applications have been offloaded from the electronic device . Thus in some examples rather than relying on the data management module to generate a visually distinguished representation the launcher may present representations of the offloaded applications in a different graphical style from the representations of the applications that are currently installed on the electronic device. For instance the representations of the offloaded applications may be visually distinguished from the representations of the applications that are currently installed using any of the graphics techniques discussed above or any other suitable visual techniques for distinguishing between the two types of applications.

In addition implementations herein may be configured to work with third party launchers that users may install on the electronic device. For example as discussed above rather than using a native application launcher that comes with the OS users may install custom third party launchers having various features preferred by certain users. In some cases the third party launchers may not be aware that an application has been offloaded such as in the event that all traces of the application are removed from the electronic device during uninstalling and or otherwise offloading of the application. This may frustrate a user attempting to use the third party launcher to locate and launch an application that has been offloaded. Accordingly implementations herein enable the third party launchers to present application representations or other information about offloaded applications in addition to presenting representations of applications that are currently fully installed on the electronic device.

In the illustrated example the launcher UI presents a first plurality of application icons or other application representations repr. that may represent applications from that are currently fully installed on the electronic device such as representations which may represent four respective applications that are installed on the electronic device . Furthermore the launcher UI presents a second plurality of application representations that may represent applications that have been offloaded to the network storage . In this example there are four application representations that represent four applications for which the corresponding application files have been offloaded to the network storage .

In this example following offloading of a particular application to the network storage the representations representing the offloaded applications may remain visible in the launcher UI to enable the user to select the offloaded application for execution should the user so desire. As one example the application representation may be changed in graphical style to indicate that the application has been moved to the network storage such as by placing a cloud symbol on the representation graying out the representation showing the representation with dashed or broken lines showing the representation as larger or smaller than the representations a different shape or the like. In the illustrated example the representations are presented with dashed lines to indicate to the user that the corresponding applications have been offloaded. In other examples the application representations might not be graphically distinguished from the application representations so that it is not readily apparent to the user that a particular application has been offloaded to the network storage.

In the example of suppose that the user has selected a content item such as a photograph and the selection of the content item causes the launcher UI to present a plurality of application icons and corresponding to applications that may be used to open the selected content item share the selected content item and or perform other functions with respect to the selected content item . In the case that the display is a touchscreen the user may be able to use a finger to scroll the launcher UI to view other application representations and or . Additionally the launcher UI may include content item icons system controls folders OS elements and the like not shown in . Further the user may use the finger to tap on or otherwise select a particular application representation or to launch execution of the corresponding application. Thus in the illustrated example suppose that the user has selected application representation which corresponds to a particular offloaded application. In response the particular offloaded application may be downloaded from the network storage reinstalled on the electronic device and executed on the electronic device using saved state information to restore the application to its most recent state as discussed above. The restored application may then be used to perform desired function with respect to the content item.

In the illustrated example the UI presents a first plurality of application icons or other application representations repr. and that may represent applications from that are currently fully installed on the electronic device . Furthermore the launcher UI presents another application representation that may represent an application that has been offloaded to the network storage such as the social network application executed on the emulator discussed above in the example of .

In this example following offloading of the application to the network storage the representation representing the offloaded application may be presented in the UI to enable the user to select the offloaded application for execution should the user so desire. As one example the application representation may be changed in graphical style to indicate that the application has been moved to the network storage such as by placing a cloud symbol on the representation graying out the representation showing the representation with dashed or broken lines showing the representation as larger or smaller than the representations a different shape or the like. In the illustrated example the representation is presented with dashed lines to indicate to the user that the corresponding application has been offloaded. In other examples the application representation might not be graphically distinguished from the application representations so that it is not readily apparent to the user that a particular application has been offloaded to the network storage.

In the example of a first notification i.e. a message from Sue is associated with a message application that is associated with the first application representation . Furthermore a second notification i.e. a meeting reminder is associated with a calendar application that is associated with the second application representation . In addition a third notification i.e. an invitation from Jay is associated with a social network application that is associated with the dashed line application representation . Accordingly the UI is able to present notifications or other application information received from an offloaded application that is executed by an emulator at the network storage. In some examples the user may be able to select the notification and view the notification without onloading the offloaded application. Further if the user were to select the application icon in some examples this selection may result in the data management module onloading the social network application onto the electronic device . Alternatively in other examples when the electronic device receives the notification the data management module may automatically start onloading the corresponding social network application .

In some implementations one or more additional UIs not shown in may enable the user to interact with the electronic device for additional application management on the electronic device . For instance the user may have an opportunity to select particular applications to be offloaded from the electronic device . As one example a GUI may present a plurality of applications recommended for offloading in a ranked order such as based on infrequency of use amount of storage space consumed or other criteria as enumerated above. For instance a least frequently used or least recently used application may be listed first a next least frequently used application may be listed second and so forth. Further in some examples the applications recommended or selected for offloading may consume an amount of storage space in excess of a threshold amount so that it is worth the overhead costs to offload and onload the application.

In other examples rather than presenting recommended applications for user selection and or approval the data management module may proceed with offloading recommended applications according the ranked order. As still another example the data management module may automatically and dynamically offload an application when a threshold minimum level of remaining free storage space is reached. For example suppose that the user is using the electronic device to take photographs or video. Further suppose that the electronic device determines that that the user is close to running out of storage space on the electronic device e.g. has arrived at a threshold amount of remaining storage capacity. If the electronic device is able to communicate with the network storage the electronic device may proceed with offloading one or more applications such as by a background process based on the ranking criteria discussed above or other suitable criteria.

Further in some examples the user may be able specify how long applications are to be retained at the remote storage before being permanently deleted. For example if the application has been at the network storage for a year or other specified time after offloading and has not been used by the user during that time the storage management module or the data management module may inform the user that the application will be permanently deleted and or may proceed with permanently deleting the application and associated application data from the network storage and deleting the corresponding application metadata from the electronic device .

In addition other launch sources may include a variety of other techniques and circumstances under which an application may be launched on the electronic device . Thus the other launch sources may also present a launcher UI or that enables the user to select an application for execution by making an input via the UI. As one example one or more of the applications may also serve as a launch source . For example a first application may be configured to launch a second application such as based on user inputs or the like. As one example the second application may be a map application opened by user input to the first application such as to show the user a location on a map. If the second application is an offloaded application then the data management module may receive a request to onload the second application based on the launch initiated via the first application .

Additional techniques for launching an application on the electronic device without using a designated launcher application may include a sharing action performed by the user such as when presented with a share button or other virtual control in a UI such as the UI discussed above with respect to which may be provided by an application or an OS module . For example the user may be presented with a list of options to use the share button to share an image such as through email a social network a microblog a pinning site a photo sharing site or various other applications. The user may select the share button associated with the image which may cause a list of applications that may be used to share the image to be presented to the user. Some of the listed applications may have been offloaded but implementations herein may still include the offloaded applications in the list. For instance based on the retained application metadata discussed above the application management service may be used to assemble a list of applications available on the electronic device which may include the immediately executable applications and the offloaded applications. As one example the application management service may include a package service that identifies application packages present on the electronic device . For example the package service may be configured to identify applications on the electronic device based on the metadata in addition to other conventional techniques for identifying applications installed on the electronic device . Accordingly the application launching sources including the application launcher the third party launcher and the other launch sources may use the package service for determining available applications even though some of those applications may have been offloaded from the electronic device. As one example the app launching sources may employ the package service based on an API for determining the applications on the device.

Further implementations herein are not limited to using the application management service for determining applications that are installed on the electronic device and applications that have been offloaded. For example the application launcher may be configured to receive this information directly from the data management module or another OS module.

As another example of the other launch sources when selecting a content item such as a text document the user may be presented with a list of applications able to open the text document. Thus similar to the share button example above some of the applications in the list may be applications that have been offloaded as also discussed above with respect to the UI of . Further another example of a method for opening an application may be a notification presented by the electronic device such as by an OS module in a notification UI as discussed above with respect to . As one example when the user selects the notification or an associated application representation the selection may cause an application associated with the notification to launch. An example of this may be a social network application an email application or microblog application that launches in response to user selection of a notification. Similarly a settings interface provided by the OS may also cause an application to launch in some situations such as when the user is adjusting settings that affect a particular application.

Selection by the user of one of the offloaded applications through the application launching sources may cause the application management service to send the request to the data management module to cause the data management module to immediately begin downloading an offloaded application file corresponding to the selected offloaded application. In response to receiving a selection of an application either one fully installed on the electronic device or one that has been offloaded the launcher the third party launcher and or the other launch sources may communication with an activity service such as through an API to cause the selected application to launch or otherwise execute on the electronic device . For instance the launching source sends an instruction via an activity service API to begin execution of the selected application. If the application is already loaded on the electronic device the activity service may be performed in a conventional manner.

On the other hand if the selected application has been offloaded the activity service may determine that the selected application is not currently executable on the electronic device . Thus the activity service may send the request to the data management module to cause the data management module to onload the corresponding application file. Further in some cases the data management module may also request offloaded application data and offloaded application state information for the selected application. In some examples the launchers and and the other launch sources that launch applications may use a public API to communicate with the activity service which interprets the intent of the communication. For instance if a first application provides a business address the intent may be interpreted by the activity service as opening a map showing the address on the map. Further suppose that there are three applications available for opening a map one of which is currently installed on the electronic device and two others that have been offloaded. Accordingly an intent API may be used for determining a particular application to open. Therefore the activity service may generate an instruction based on the determined intent. If the activity service determines that the intent is to open one of the offloaded applications the activity service sends the request to the data management module which in turn sends via one or more communication interfaces a request for the particular offloaded application file and in some examples the associated application data and or saved application state information .

In response to receiving the request from the data management module the network storage may send the requested application file as indicated at . Further in some examples the network storage may send application data and or saved application state information to the electronic device as indicated at . The data management module may receive the application file and in some cases the application data and the application state information via the communication interfaces and may store the received data in a local storage .

In some implementations following receipt of the application file the data management module may proceed with installing the application. For example the data management module may install the application restore the application data and restore the application to its most recent state based on the saved application state information. The data management module may then send a message to the activity service indicating that the application has been installed. The activity service may then proceed with launching the application in a conventional manner.

In other examples the application file is not reinstalled. Instead the application file may be saved to the local storage and associated with the application data the saved application state information and the application metadata . As one example an API that is used for updating application files by replacing an older application file e.g. an APK file with a newer application file may be used to onload the application file without executing a reinstallation process.

The application launching sources the activity service and the data management module typically only perform the above operations for onboarding an application out of turn if the data management module has made an incorrect prediction as to which applications should be available on the electronic device during a particular period. Accordingly in some examples when the data management module has to onload an application unexpectedly the data management module may make a record of the launch source i.e. where the launch instruction came from and may observe application usage patterns of the user with respect to the onloaded application for adjusting the heuristics used for determining which applications to offload and which applications to onload.

In addition in some examples the data management module may determine particular applications that the user may desire to have installed and executable even if the user does not open the particular applications such as applications that run in the background for performing various functions in certain situations. As one example a coupon application may run in the background and may generate coupons when the user walks past a particular merchant location. The user does not typically open these types of applications and in general may not think about opening such an application until the application produces a coupon or other notification to the user. Accordingly as discussed below with respect to the event module may predict user activity such as determining that the user is going shopping and may restore applications appropriate for the predicted user activity.

The data management module may also continually save backups of applications that have been used e.g. application data and application state information so that when an application is to be offloaded there is no time wasted sending the application file application data or saved application state information to the network storage . Rather because all the application information may typically already have been backed up to the network storage in the background there may be no need to send any addition application data or files. For instance when a first application is to be onloaded onto the electronic device a second application that is to be offloaded to make room for the first application may be offloaded by either uninstalling the second application from the electronic device or by merely deleting the second application file without uninstalling and it may not be necessary to transfer any application information for the second application to the network storage. Alternatively in other examples the second application file may be sent to the network storage as part of the offloading either with or without uninstallation of the second application and then the second application file may be deleted from the electronic device .

Accordingly since the user data on the electronic device may be regularly backed up or otherwise synchronized with the user data at the network storage in some examples offloading a particular application from the electronic device to the network storage may merely include ensuring the latest version of the application file application data and or saved application state information has already be synchronized with the network storage . As mentioned above various techniques may be used to select an application to offload in the case that the user requests onloading of an application that is not currently installed on the electronic device such as least recently used least frequently used largest application not expected to be used within a threshold period or so forth.

In some examples an event may include an activity or other situation during which the user may be predicted to use a particular application. Various types of events may cause the data management module to onload or offload particular applications. One example of such an event may include the user participating in an activity during which substantial amounts of new data will be added to the local storage over a short period of time such as when the user is using the electronic device to take a large number of pictures or video. Another example of such an event may include the user participating in an activity that may use a certain application that is not normally present on the electronic device such as when the user has an upcoming flight an in the past the user has used the certain application while on other flights.

The event determination module may receive the various inputs that can be used for determining upcoming events. As one example the inputs may include calendar information from the user s calendar . For instance the event determination module may periodically access the user s calendar to determine whether any appointments or other scheduled activities may indicate an upcoming event. As one example if the user has a flight scheduled on the calendar the event determination module may determine this to be an event and may forward event information related to the flight to the data management module . In some examples the event information may include an event category for the event. For example different types of events may be categorized into different event categories that may each be associated with different user application usage patterns. Further in other examples the data management module may determine an event category for a particular event while in still other examples event categories might not be used.

As another example the event determination module may receive inputs from one or more sensors on the electronic device such as a GPS Global Positioning System device or other sensor that may indicate a geographic location of the electronic device or an activity of the user. For instance if the sensors indicate that the user is currently located in a city 300 miles from the user s home location this may indicate that the user is traveling in the city any may desire to have certain applications onloaded such as applications for finding restaurants or hotels.

As another example prior user activities may also indicate the likelihood of an upcoming event. For instance if the user has worked as a DJ every Saturday night for the past month then it is likely that the user will also be performing this job on the next Saturday night. Furthermore the inputs may include a direct user input for indicating an event. For example the user may expressly schedule events by providing event information directly to the electronic device such as via a UI.

The event determination module may include event identifying logic that may receive the inputs and determine one or more upcoming events based on the inputs . In some cases the event identifying logic may include or may access an event model that may be used to identify events based on the inputs . As one example the event model may be a statistical model that is initially trained using a set of training data. For instance the training data may be obtained by identifying various different types of events for a plurality of users. The trained model may be checked for accuracy and then used for identifying events for a particular user based on the inputs . The statistical model may be periodically updated and re trained based on new training data and or feedback from the user to keep the event model up to date. Examples of suitable statistical models that may be incorporated into the event model may include regression models such as linear regression models and stochastic models such as Markov models hidden Markov models and so forth. Additionally or alternatively various other algorithms priority rules rule sets computational models and the like may be used by the event identifying logic for determining upcoming events.

The data management module receives the event information from the event determination module and in response may determine one or more applications that are likely to be useful to the user for a particular event. For instance the data management module may include application ranking logic that may prioritize or otherwise rank the applications for determining which applications to move on or off the electronic device for a particular event. In some examples the application ranking logic may include one or more algorithms priority rules rule sets computational models user preferences or the like configured to select particular applications for onloading to the local storage or for offloading from the local storage to the network storage . For instance the application ranking logic may include a plurality of decision making rules that may be applied to generate priority based rankings of the applications for onloading or offloading.

In some examples the application ranking logic may include or may access a user application usage model that may include various other algorithms priority rules rule sets computational models and the like that may be used by the event identifying logic to take into account numerous pieces of information related to various activities of the user events that the user has participated in the past preferences of the user and so forth. Furthermore the user application usage model may include machine learning capability to change the data ranking rules and priorities based on past user actions which may include application usage during various categories of events e.g. particular apps and content items used for particular event categories user responses to past onload or offload recommendations from the data management module and other user feedback determined in response to earlier data rankings and recommendations provided by the data management module . In some examples the user application usage model may include a trained statistical model of a type similar to that discussed above for the event model but trained based on the application onload and offload preferences and actions of the user and or a plurality of other users.

As one example based at least in part on receiving event information related to an upcoming event the data management module may use the application ranking logic and user application usage model to generate a first list of applications that are recommended for onloading to the local storage and a second list of applications that are recommended for offloading to the network storage . For example the applications in the second list may be offloaded from the local storage to provide sufficient space in the local storage to enable onloading of the applications in the first list that are recommended by the data management module for a particular event.

The application ranking logic and or user application usage model may take into consideration a plurality of factors when ranking and determining applications to recommend for onloading and or offloading for a particular event. For instance based on the user application usage model priority rules expressed user preferences or other application ranking techniques the application ranking logic may determine which application is likely to be used by the user during the particular event and which application is unlikely to be used during the particular event and may rank the applications according to these probabilities. In addition in some examples the data control module may operate without receiving the event information .

As one example the application ranking logic may rely on the user application usage model for determining particular applications for onloading on particular days of the week such based on past usage information indicating that the user has used these particular applications on particular days of the week in the past. Further when ranking applications to offload the application ranking logic may rank applications for offloading from the electronic device based at least in part on at least one of an amount of time since the application was last accessed on the electronic device a frequency with which the application has been accessed over a period of time an amount of storage space consumed by the application file or an amount of available storage space remaining on the electronic device.

In some cases the application ranking logic may take into consideration prior usage of applications by the user during similar events in the past e.g. events categorized in a same or similar event category . For instance if the user typically uses certain applications on a flight during travel in a new city while on a road trip or during other particular categories of events the application ranking logic may recommend that those applications and associated application data be onloaded to the local storage for an event categorized in a similar or same category. As another example the application ranking logic may take into consideration seasonal factors and various other time based factors when determining likelihoods that particular applications may be useful to the user during an event.

In addition the data control module may perform various functions for controlling the movement of applications onto or off the local storage . In some examples the user may configure the data management module to automatically offload the applications in a second ranked list and automatically onload the applications in the first ranked list. In other examples the user may retain more control and may individually select or approve particular applications from the first list to be onloaded and or applications from the second list to be offloaded. For instance the user can select some or all of the applications in the first list that are recommended to be loaded onto the electronic device . In either event after the application transfers have been completed the user will be able to access the recommended applications while the electronic device is being used during the event.

The data management module may provide the first list and the second list as the data priority rankings to a user interface module . The user interface module may present on the display the data recommended for onload or offload in one or more UIs. The UIs may provide the user with an opportunity to select content items applications or other user data to be onloaded onto the electronic device and or offloaded from the electronic device. As mentioned above the UIs may present the applications recommended for onloading and or offloading in a ranked order which may be based at least in part on a category of the particular event.

In other examples rather than presenting recommendations for user approval the data management module may proceed with onloading and or offloading the recommended applications according the ranked order. For instance the data control module may interact with the one or more communication interfaces to send any offloaded application files to the network storage and or to receive any onloaded applications files from the network storage .

At the electronic device may install an application on the electronic device. In some examples the electronic device may send a copy of the installable application file used for installation to a network storage before during or after installation of the application on the electronic device. For example a computing device at the network storage may receive the application file from the electronic device or directly from an application store from which the electronic device obtained the application. Alternatively as discussed below with respect to block the application file may be sent to the network storage when the application is offloaded from the electronic device.

At the electronic device executes the application on the electronic device. Further the electronic device may send application data and application state information resulting from the execution of the application to the network storage.

At the electronic device may offload the application from the electronic device. For example the electronic device may determine to offload the application to the network storage based at least in part on at least one of an amount of time since the application was last accessed on the electronic device a frequency with which the application was accessed over a period of time an amount of storage space consumed by the application or an amount of available storage space remaining on the electronic device. In some examples offloading of the application may include uninstalling the application from the electronic device. In such a case the application file for reinstalling the application may have already been saved to the network storage as discussed above at block . The associated application data may have already been backed up and saved at the network storage or may be sent to the network storage during offloading of the application. Further in some examples saved application state information may also be saved at the network storage. In other examples of offloading the application rather than uninstalling the application from the electronic device the application file e.g. an APK file may be removed from the electronic device and saved to the network storage without uninstalling the application or application data. Further if an OBB file or other asset file is associated with the particular application this application file may also be saved to the network storage and deleted from the electronic device. Further in some examples the application data generated by execution of the application and the saved application state information may remain on the electronic device while one or more application files e.g. an APK file and an OBB file in the case of an ANDROID OS may be offloaded from the electronic device to the network storage without uninstalling the application from the electronic device.

At the electronic device may determine to onload the application in response to at least one condition. For example the condition may include at least one of receipt of a user input that selects an application representation corresponding to the offloaded application a determination of an upcoming event that is likely to include use of the offloaded application a determination that a user usage pattern indicates that the offloaded application is likely to be used within a threshold time or receipt of an application notification from execution of the application file on an emulator.

At the electronic device may end a request to the network storage for at least the application file. In some examples the electronic device may also request associated application data saved to the network storage and or saved application state information saved to the network storage. In other examples the associated application data and or the saved application state information may have been retained on the electronic device.

At the electronic device may receive from the from the network storage the application file that was saved to the network storage either in connection with installation of the application on the electronic device as discussed above with respect to block or that was saved during offloading of the application as discussed with respect to block . In some examples multiple application files may be received such as an installable application file e.g. an APK file and an application asset file e.g. an OBB file . In some examples the electronic device may further receive the associated application data and or saved application state information from the network storage. In other examples however the associated application data and or saved application state information may have been retained on the electronic device when the application was offloaded.

At the electronic device may onload the application on the electronic device. As one example the electronic device may reinstall the application onto the electronic device. As another example if the application was not uninstalled during offloading the received application file s may be saved to the storage of the electronic device and restored using the saved application state information and associated application data. In some cases an API associated with the OS may be used for restoring the application file to the electronic device without reinstalling of the application.

At the electronic device may execute the application using the saved application state information and the application data received from the network storage. For instance the electronic device may use the saved application state information when starting the application to cause the application to resume execution at a state at which the application last executed on the electronic device.

At the electronic device may receive inputs from at least one of a calendar a sensor on the electronic device user input or information about prior user activities.

At the electronic device may determine event information about an upcoming event based at least in part on the plurality of inputs. For example the electronic device may determine that the user has an upcoming flight exercise session conference or seminar class or other event occurring within a threshold period of time such as within the next hour next day or the like depending on the type of event.

At the electronic device may determine an offloaded application to onload for the event. For example the electronic device may determine an application used by the user during events in a same event category in the past and may onload the determined application.

At the electronic device may determine an application to offload to make room in storage. For example the electronic device may select an application to offload based at least in part on at least one of an amount of time since the application was last accessed on the electronic device a frequency with which the application was accessed over a period of time an amount of storage space consumed by the application or an amount of available storage space remaining on the electronic device. In some examples the electronic device may present a ranked list of applications eligible to be offloaded and allow the user to select one or more particular applications while in other examples the electronic device may proceed with offloading based on the rankings in the ranked list without first obtaining user input.

At electronic device may offload the selected application to the network storage. In some examples offloading of the application may include uninstalling the application from the electronic device. In such a case the application file for reinstalling the application may have already been saved to the network storage and the associated application data may have already been backed up and saved at the network storage or may be sent to the network storage during offloading of the application. Further in some examples saved application state information may also be saved at the network storage. In other examples of offloading the application rather than uninstalling the application from the electronic device the application file e.g. an APK file may be removed from the electronic device and saved to the network storage without uninstalling the application or application data. Further if an OBB file or other asset file is associated with the particular application this application file may also be saved to the network storage and deleted from the electronic device. Further in some examples the application data generated by execution of the application and the saved application state information may remain on the electronic device while one or more application files e.g. an APK file and an OBB file in the case of an ANDROID OS may be offloaded from the electronic device to the network storage without uninstalling the application from the electronic device.

At the electronic device may send a request to the computing device associated with the network storage for an application file of the application to be onloaded. In some cases the associated application data and saved state information may have been retained on the electronic device and the application file may have been uninstalled or otherwise offloaded without uninstalling. In other cases the application file may have been uninstalled or otherwise offloaded without uninstalling the application and the application data and or saved state information may have also been offloaded to the network storage.

At the electronic device may receive from the computing device the application file and in some cases the saved application state information and or application data previously saved to the network storage.

At the electronic device may execute the application on the electronic device using at least in part the saved application state information and the application data. For example the application state information may include at least one of a value for a variable used by the application on the electronic device a value saved for an application setting set on the electronic device a graphic user interface configuration saved on the electronic device or a value for a user input received on the electronic device.

At the computing device may receive an application file from an electronic device. For example the electronic device may send an offloaded application file to the computing device for storage at the network storage. As one example the application may be uninstalled or otherwise offloaded from the electronic device and the installable application file and application data may be received by the computing device at the network storage. Further in some examples saved application state information may also be received from the electronic device. In some examples rather than uninstalling the application from the electronic device the application file e.g. an APK file may be removed from the electronic device and received by the computing device at the network storage without uninstalling the application or application data. Further if an OBB file or other asset application files are associated with the particular application these may also be received by the computing device at the network storage and deleted from the electronic device.

At the computing device may compare an identifier associated with the application file with a list of application files to be executed on an emulator that emulates execution on the electronic device. For example the computing device may determine that the received application file is for a type of application that receives or generates notifications or other application information as a background process when installed on the electronic device. In some examples the list may identify particular applications or application developers while in other examples the list may merely identify application types. The emulator may be a software device emulator that executes on the computing device and emulates the function and operation of the electronic device on the computing device.

At in response to determining a match between the identifier and the list the computing device may execute the application file using the emulator. For example the computing device may install the application file on the emulator. Further the computing device may restore the application file to its state on the electronic device using the application data and or saved application state information received from the electronic device. Accordingly the application may execute on the emulator in a manner similar to its execution on the electronic device.

At the computing device may receive application information from the application executing on the emulator. For example the computing device may receive notifications messages or other application information received by or generated by the application executing on the emulator. As one example the application may communicate with a website on a remote computing device and may receive an application notification or other application information from the remote computing device.

At the computing device may send the application information to the electronic device. For example the computing device may send the application notification received by or generated by the application executing on the emulator to the electronic device so that the electronic device can present the notification on a display of the electronic device. For example the notification may be presented in a notification UI on the electronic device as if the application were executing on the electronic device rather than on the computing device at the network storage.

At the computing device may receive from the electronic device a request for the application file. In some examples the electronic device may initiate onloading of the application in response to receiving the application information from the application executing on the emulator. In other examples the electronic device may onload the application in response to user selection of an application representation of the application presented in the notifications UI on the electronic device.

At the computing device may send the application file to the electronic device. For example the computing device may cease execution of the application file by the emulator uninstall the application from the emulator and send the application file to the electronic device. Further in some examples the emulator may save an application state of the application on the emulator and the computing device may send the saved application state and saved application data to the electronic device.

The example processes described herein are only examples of processes provided for discussion purposes. Numerous other variations will be apparent to those of skill in the art in light of the disclosure herein. Further while the disclosure herein sets forth several examples of suitable frameworks architectures and environments for executing the processes implementations herein are not limited to the particular examples shown and discussed. Furthermore this disclosure provides various example implementations as described and as illustrated in the drawings. However this disclosure is not limited to the implementations described and illustrated herein but can extend to other implementations as would be known or as would become known to those skilled in the art.

Depending on the configuration of the electronic device the computer readable media may be an example of tangible non transitory computer storage media and may include volatile and nonvolatile memory and or removable and non removable media implemented in any type of technology for storage of information such as computer readable instructions data structures program modules or other data. The computer readable media may include but is not limited to RAM ROM EEPROM flash memory solid state storage magnetic disk storage optical storage and or other computer readable media technology. Further in some cases the electronic device may access external storage such as RAID storage systems storage arrays network attached storage storage area networks cloud storage or any other medium that can be used to store information and that can be accessed by the processor directly or through another computing device or network. Accordingly the computer readable media may be computer storage media able to store instructions modules or components that may be executed by the processor . Further when mentioned non transitory computer readable media exclude media such as energy carrier signals electromagnetic waves and signals per se.

The computer readable media may be used to store and maintain any number of functional components that are executable by the processor . In some implementations these functional components comprise instructions or programs that are executable by the processor and that when executed implement operational logic for performing the actions attributed above to the electronic device . Functional components of the electronic device stored in the computer readable media may include the data management module the application launcher the application management service the event determination module as well as the applications comprising application files and the third party launcher s if any. Additional functional components may include the operating system for controlling and managing various functions of the electronic device and for enabling basic user interactions with the electronic device . In some examples the data management module and or the application launcher may be one or more modules of the operating system while in other examples some or all of these modules may be separate from the operating system .

The computer readable media may store the application data saved application state information application metadata content items and other user data . In addition depending on the type of the electronic device the computer readable media may also store other functional components and data such as other modules and data which may include applications programs drivers etc. and other data used or generated by the functional components. Further the electronic device may include many other logical programmatic and physical components of which those described are merely examples that are related to the discussion herein.

The communication interface s may include one or more interfaces and hardware components for enabling communication with various other devices such as over the network s or directly. For example communication interface s may enable communication through one or more of the Internet cable networks cellular networks wireless networks e.g. Wi Fi and wired networks as well as close range communications such as BLUETOOTH and the like as additionally enumerated elsewhere herein.

The electronic device may further include sensors such as a GPS device an accelerometer gyroscope compass proximity sensor and the like. The electronic device may further include one or more other I O devices . The I O devices may include speakers a microphone a camera and various user controls e.g. buttons a joystick a keyboard a keypad etc. a haptic output device and so forth. Additionally the electronic device may include various other components that are not shown examples of which may include removable storage a power source such as a battery and power control unit and so forth.

Further while the figures illustrate the components and data of the service computing device as being present in a single location these components and data may alternatively be distributed across different computing devices and different locations in any manner. Consequently the functions may be implemented by one or more service computing devices with the various functionality described above distributed in various ways across the different computing devices. Multiple service computing devices may be located together or separately and organized for example as virtual servers server banks and or server farms. The described functionality may be provided by the servers of a single entity or enterprise or may be provided by the servers and or services of multiple different buyers or enterprises.

In the illustrated example each service computing device may include or may have associated therewith one or more processors one or more computer readable media and one or more communication interfaces . Each processor may be a single processing unit or a number of processing units and may include single or multiple computing units or multiple processing cores. The processor s can be implemented as one or more microprocessors microcomputers microcontrollers digital signal processors central processing units state machines logic circuitries and or any devices that manipulate signals based on operational instructions. For instance the processor s may be one or more hardware processors and or logic circuits of any suitable type specifically programmed or configured to execute the algorithms and processes described herein. The processor s can be configured to fetch and execute computer readable instructions stored in the computer readable media which can program the processor s to perform the functions described herein.

The computer readable media may include the storage devices discussed above with respect to not shown in . In some cases the storage devices may be at the same location as the service computing device s while in other examples the storage devices may be remote from the service computing device s . The computer readable media may further include volatile and nonvolatile memory and or removable and non removable media implemented in any type of technology for storage of information such as computer readable instructions data structures program modules or other data. Such computer readable media may include but is not limited to RAM ROM EEPROM flash memory or other memory technology optical storage solid state storage magnetic tape magnetic disk storage RAID storage systems storage arrays network attached storage storage area networks cloud storage or any other medium that can be used to store the desired information and that can be accessed by a computing device. Depending on the configuration of the service computing device the computer readable media may be a type of computer readable storage media and or may be a tangible non transitory media to the extent that when mentioned non transitory computer readable media exclude media such as energy carrier signals electromagnetic waves and signals per se.

The computer readable media may be used to store any number of functional components that are executable by the processors . In many implementations these functional components comprise instructions or programs that are executable by the processors and that when executed specifically configure the one or more processors to perform the actions attributed above to the service computing device . Functional components stored in the computer readable media may include the storage management module and the emulator s . Additional functional components stored in the computer readable media may include an operating system for controlling and managing various functions of the service computing device .

In addition the computer readable media may store data used for performing the functions and services described herein. Thus the computer readable media may store the list of applications to run on the emulator the offloaded application files the offloaded application data and or saved application state information the offloaded content items and the other user data . The service computing device may also include or maintain other functional components and data such as other modules and data which may include programs drivers etc. and the data used or generated by the functional components. Further the service computing device may include many other logical programmatic and physical components of which those described above are merely examples that are related to the discussion herein.

The communication interface s may include one or more interfaces and hardware components for enabling communication with various other devices such as over the network s . For example communication interface s may enable communication through one or more of the Internet cable networks cellular networks wireless networks e.g. Wi Fi and wired networks as well as short range communications such as BLUETOOTH and the like as additionally enumerated elsewhere herein.

The service computing device may further be equipped with various input output I O devices . Such I O devices may include a display various user interface controls e.g. buttons joystick keyboard mouse touch screen etc. audio speakers connection ports and so forth.

Various instructions methods and techniques described herein may be considered in the general context of computer executable instructions such as program modules stored on computer readable media and executed by the processor s herein. Generally program modules include routines programs objects components data structures etc. for performing particular tasks or implementing particular abstract data types. These program modules and the like may be executed as native code or may be downloaded and executed such as in a virtual machine or other just in time compilation execution environment. Typically the functionality of the program modules may be combined or distributed as desired in various implementations. An implementation of these modules and techniques may be stored on computer storage media or transmitted across some form of communication media.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as example forms of implementing the claims.

