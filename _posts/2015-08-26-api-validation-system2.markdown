---

title: API validation system
abstract: A system that validates an application programming interface (API) call is provided. A key and a value associated with the key are read from a test script containing a script. The key and the value are separated by a colon. The key is included in first double quotes, and the value is included in second double quotes. Whether the key matches a plurality of keys defined for an API call is determined. Based on the key matching the plurality of keys defined for the API call, the API call is configured using the key and the value without any of the colon, the first double quotes, or the second double quotes. The configured API call is executed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09552237&OS=09552237&RS=09552237
owner: SAS Institute Inc.
number: 09552237
owner_city: Cary
owner_country: US
publication_date: 20150826
---
The present application claims the benefit of 35 U.S.C. 119 e to U.S. Provisional Patent Application No. 62 084 934 filed Nov. 26 2014 the entire contents of which are hereby incorporated by reference.

An application programming interface API connects a computer program to a programming library. Representational state transfer REST is a software architecture style consisting of guidelines and best practices for creating scalable Web services. REST is a coordinated set of constraints applied to the design of components of the Web services. REST is recognized as a simpler alternative to the simple object access protocol and to Web services description language based Web services. RESTful systems communicate using the hypertext transfer protocol HTTP with the same HTTP verbs GET POST PUT DELETE etc. used by web browsers to retrieve web pages and send data to remote servers.

In an example embodiment a computer readable medium that validates an application programming interface API call is provided. A key and a value associated with the key are read from a test script containing a script. The key and the value are separated by a colon. The key is included in first double quotes and the value is included in second double quotes. Whether the key matches a plurality of keys defined for an API call is determined. Based on the key matching the plurality of keys defined for the API call the API call is configured using the key and the value without any of the colon the first double quotes or the second double quotes. The configured API call is executed.

In another example embodiment a system is provided. The system includes but is not limited to a processor and a computer readable medium operably coupled to the processor. The computer readable medium has instructions stored thereon that when executed by the processor cause the system to validate an API call.

Other principal features of the disclosed subject matter will become apparent to those skilled in the art upon review of the following drawings the detailed description and the appended claims.

REST APIs are network APIs that organizations publish to allow diverse clients such as mobile applications to integrate with the organizations software services and content. Many commonly used applications work using REST APIs as understood by a person of skill in the art. A REST API call includes an HTTP verb e.g. GET POST PUT DELETE HEAD PATCH a uniform resource locator URL of a resource an optional request body data or content to pass to the API and HTTP headers that provide options or parameters for the API call. The REST API call returns an integer HTTP status code an optional response body that includes the content of the request result and optional response HTTP headers that describe the response.

For example Google provides an elevation REST API that returns the elevation in meters of any point on the surface of the Earth. The REST API call is GET http maps.googleapis.com maps api elevation json locations 27.988056 86.925278 sensor false.

The REST API call invokes the API and passes a location in the form of latitude and longitude. The REST API call returns an HTTP status of 200 and a request body that contains the result encoded in JavaScript object notation JSON . For example the output of the call is 

JavaScript object notation JSON is an open standard data interchange format that uses human readable text to transmit data objects consisting of attribute value pairs. JSON is used primarily to transmit data between a server and a web application and as an alternative to XML. Although originally derived from the JavaScript scripting language JSON is a language independent data format. Code for parsing and generating JSON data is readily available in many programming languages. JSON is also easy for machines to parse and generate.

JSON is built on two structures 1 a collection of name value pairs and 2 an ordered list of values. In various languages the collection of name value pairs is realized as an object record struct dictionary hash table keyed list or associative array. In most languages the ordered list of values is realized as an array vector list or sequence. These are universal data structures. Virtually all modern programming languages support them in one form or another.

In JSON an object is an unordered set of name value pairs. An object begins with a left brace and ends with a right brace . Each name is followed by a colon and the name value pairs are separated by a comma in the form string value string value . . . string value.

In JSON an array is an ordered collection of values. An array begins with a left bracket and ends with a right bracket and values are separated by a comma in the form value value . . . value .

In JSON a value can be a string in double quotes a number true or false NULL an object or an array. These structures can be nested. In JSON a string is a sequence of zero or more Unicode characters wrapped in double quotes using backslash escapes. In JSON a character is represented as a single character string. In JSON a number is very much like a C or Java number except that the octal and hexadecimal formats are not used. In JSON whitespace can be inserted between any pair of tokens.

Referring to a block diagram of an API validation system is shown in accordance with an illustrative embodiment. For example API validation system may be used to test or validate a REST API. In an illustrative embodiment API validation system may include API validator systems API implementer systems and a network . The API implementer systems implement the API under test such as the REST API. API validator systems test and validate the API implemented by the API implementer systems .

The components of API validation system may be included in a single computing device may be located in a single room or adjacent rooms in a single facility and or may be distributed geographically from one another. Additionally each of the API validator systems and the API implementer systems may be composed of one or more discrete devices.

Network may include one or more networks of the same or different types. Network can be any type of wired and or wireless public or private network including a cellular network a local area network a wide area network such as the Internet etc. Network further may comprise sub networks and consist of any number of devices.

API validator systems can include any type of computing device. The computing device sends and receives signals through network to from API implementer systems . The one or more computing devices of the API validator systems may include computers of any form factor such as a laptop a desktop a smart phone a personal digital assistant an integrated messaging device a tablet computer etc. API validator systems may communicate using various transmission media that may be wired and or wireless as understood by those skilled in the art.

The one or more computing devices of the API implementer systems may include computers of any form factor such as a laptop a desktop a smart phone a personal digital assistant an integrated messaging device a tablet computer etc. For illustration represents the API implementer systems with a first server computer a second server computer and a third server computer . The API implementer systems can include any number and any combination of form factors of computing devices that may be organized into subnets. The one or more computing devices of the API implementer systems may communicate using various transmission media that may be wired and or wireless as understood by those skilled in the art. The one or more computing devices of the API implementer systems may send and receive signals through network to from other computing devices of the API implementer systems and or to from one or more computing devices of the API validator systems .

Testing or validating a REST API typically uses software that can express the REST API calls capture the result from the calls and validate the results against expected values. Such validation can be done in many different programming languages using a variety of libraries for performing HTTP network calls parsing results and performing comparisons. In most cases the software that invokes the test calls is obscured by the programming language syntax and code structure used to construct the inputs invoke the REST API calls capture and parse the output and process or validate the output. The intent and behavior of such tests may be complicated because the test data which often uses JSON cannot be expressed directly in the programming language so such data must be constructed from numerous operations or steps in the programming language or stored in external data files.

Referring to a block diagram of an API validator device of the API validator systems is shown in accordance with an illustrative embodiment. API validator device is an example computing device of the API validator systems . In the illustrative embodiment of API validator device is connected to communicate with an API implementer device to test the API implemented by API implementer device . API implementer device is an example computing device of the API implementer systems .

API validator device may include an input interface an output interface a communication interface a computer readable medium a processor a keyboard a mouse a display a speaker a printer a test interpreter and a test script . Fewer different and additional components may be incorporated into API validator device .

Input interface provides an interface for receiving information from the user for entry into API validator device as understood by those skilled in the art. Input interface may interface with various input technologies including but not limited to keyboard mouse display a track ball a keypad one or more buttons etc. to allow the user to enter information into API validator device or to make selections presented in a user interface displayed on display . The same interface may support both input interface and output interface . For example a display comprising a touch screen both allows user input and presents output to the user. API validator device may have one or more input interfaces that use the same or a different input interface technology. The input interface technology further may be accessible by API validator device through communication interface .

Output interface provides an interface for outputting information for review by a user of API validator device . For example output interface may interface with various output technologies including but not limited to display speaker printer etc. API validator device may have one or more output interfaces that use the same or a different interface technology. The output interface technology further may be accessible by API validator device through communication interface .

Communication interface provides an interface for receiving and transmitting data between devices using various protocols transmission technologies and media as understood by those skilled in the art. Communication interface may support communication using various transmission media that may be wired and or wireless. API validator device may have one or more communication interfaces that use the same or a different communication interface technology. For example API validator device may support communication using an Ethernet port a Bluetooth antenna a telephone jack a USB port etc. Data and messages may be transferred between API validator device and API implementer systems using communication interface .

Computer readable medium is an electronic holding place or storage for information so the information can be accessed by processor as understood by those skilled in the art. Computer readable medium can include but is not limited to any type of random access memory RAM any type of read only memory ROM any type of flash memory etc. such as magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disc CD digital versatile disc DVD . . . smart cards flash memory devices etc. API validator device may have one or more computer readable media that use the same or a different memory media technology. API validator device also may have one or more drives that support the loading of a memory media such as a CD or DVD an external hard drive etc. One or more external hard drives further may be connected to graphic design device using communication interface .

Processor executes instructions as understood by those skilled in the art. The instructions may be carried out by a special purpose computer logic circuits or hardware circuits. Processor may be implemented in hardware and or firmware. Processor executes an instruction meaning it performs controls the operations called for by that instruction. The term execution is the process of running an application or the carrying out of the operation called for by an instruction. The instructions may be written using one or more programming language scripting language assembly language etc. Processor operably couples with input interface with output interface with communication interface and with computer readable medium to receive to send and to process information. Processor may retrieve a set of instructions from a permanent memory device and copy the instructions in an executable form to a temporary memory device that is generally some form of RAM. API validator device may include a plurality of processors that use the same or a different processing technology.

Test interpreter performs operations associated with testing or validating an API such as the REST API implemented for example by API implementer device . For example test interpreter expresses the variety of REST API calls captures the result from the calls and validates the results against expected values by interpreting test script . Some or all of the operations described herein may be embodied in test interpreter . The operations may be implemented using hardware firmware software or any combination of these methods. Referring to the example embodiment of test interpreter is implemented in software comprised of computer readable and or computer executable instructions stored in computer readable medium and accessible by processor for execution of the instructions that embody the operations of test interpreter . Test interpreter may be written using one or more programming languages assembly languages scripting languages etc. For illustration test interpreter may be implemented as a Java program. For example test interpreter may include a parser that parses test script and an interpreter that transforms test script into machine readable code during execution of test script . A parser is a software component that takes input data and builds a data structure giving a structural representation of the input and checking for correct syntax. Test interpreter further may include one or more plug ins add ins extensions or add ons where a plug in is a software component that adds a specific feature to an existing software application. Test interpreter may be designed to interpret a domain specific language such as a language structured to test or validate a REST API.

Test script is implemented using a concise notation for specifying the inputs to one or more REST API calls and capturing the output without cumbersome programming language boilerplate that obscures the intent of the REST API test. The concise notation accelerates testing of REST APIs. Test script uses JSON which allows REST API input to be expressed directly rather than requiring such content to be stored in separate external files or embedded in test script notation using awkward quoting notations. Being strictly JSON test script can automatically generate tests from various REST specifications such as those based on the RESTful API modeling language developed by the RAML Workgroup or Swagger offered by Reverb Technologies Inc. of Palo Alto Calif. USA. Test script is implemented to support prototype inheritance of testware for easier reuse and more concise tests of the REST API. Testers do not have to learn programming to test REST APIs.

Referring to example operations associated with test interpreter are described. Additional fewer or different operations may be performed depending on the embodiment. The order of presentation of the operations of is not intended to be limiting. Although some of the operational flows are presented in sequence the various operations may be performed in various repetitions concurrently and or in other orders than those that are illustrated. As further understood by a person of skill in the art various operations may be performed in parallel for example using a plurality of threads.

Referring to in an operation an indicator is received indicating a script to interpret. For example a script name may be included on a command line that triggers execution of test interpreter with test script . In an operation the indicated script is opened. In an operation the opened script is parsed. For example test script may be written to follow the syntactic rules of a domain specific language specific to validating REST APIs. Test script may be coded in JSON such that test script includes a JSON description of a REST API call that is expressed as a JSON object structure.

For example each script object parsed from test script may be a JSON object that consists of one or more named values in the form key value defined as the key value pair. The values may be a JSON object an array or a string. The following keys in Table I may be recognized by test interpreter 

In an operation a determination is made concerning whether or not the parsed result is a JSON object. If the parsed result is a JSON object processing continues in an operation shown referring to . After returning from the operations of processing is complete in an operation . If the parsed result is not a JSON object processing continues in an operation .

For example if the parsed result is a JSON object test interpreter may treat the parsed result as a single script object. If the parsed result is a JSON array test interpreter may treat the parsed result as an array of script objects. For example test script may include one or more script objects. Each script object may be a JSON object or a string. A string may be treated as a name of a previously parsed script object unless the string begins with a special character such as an character. If the string begins with the special character the corresponding script object is read from the file or URL that is named after the character.

A first member name GET support ticket is a nested script named GET support ticket with its body GET . . . most of which is omitted for simplicity. A second member GET support ticket is a simple string which is the name of the nested script. Test interpreter runs the nested script GET support ticket a second time when it executes the second element. The third member is an string http script.server scripts test 32.json . Test interpreter reads a script from the specified URI location http script.server scripts test 32.json and parses and executes the read script as another test script .

Each script included in test script can have a name key and a template key. The name key defines the name of the script. If the name ends with the suffix .template the script defines a template. The template key is used to reference an existing template from test script to reuse the env preconditions headers and other elements of the defined template. Many scripts can reference the same template resulting in a large degree of reuse instead of copying those elements into each script.

Referring to in operation a determination is made concerning whether or not the JSON object s name indicates it is a template e.g. name ends with .template . If the JSON object s name indicates it is a template processing continues in an operation . If the JSON object s name does not indicate it is a template processing continues in an operation shown referring to . After returning from the operations of processing is returned to the calling location in an operation . In operation the template is stored and processing is returned to the calling location in operation .

Referring again to in operation a determination is made concerning whether or not the array contains another item. If the array contains another item processing continues in an operation . If the array does not contain another item processing is complete in operation .

In operation a determination is made concerning whether or not the item is a string. If the item is a string processing continues in an operation . If the item is not a string processing continues in operation shown referring again to . After returning from the operations of processing continues in operation to process any remaining array items.

Referring again to in operation a determination is made concerning whether or not the string is an location. If the string is an location processing continues in operation . If the string is not an location processing continues in an operation .

In operation a script is selected based on the string and processing continues in operation . For example a previously parsed script object is identified based on the string matching the name of the previously parsed script object.

Referring to in operation a name value associated with a name key is stored if any are included in test script . In an operation a template value associated with a template key is stored if any are included in test script .

In an operation an environment parameter associated with an env key is processed if any are included in test script . The environment parameter may include one or more items. If test script contains a template key the environment parameter associated with the env key of the named template is also processed.

In an operation a preconditions parameter associated with a preconditions key is processed if any are included in test script . If the script contains a template key the preconditions parameter associated with the precondition key of the named template is also processed. The preconditions parameter may include one or more preconditions items. For example preconditions parameter may be an array of preconditions items. For each preconditions item operations and referring to are performed and processing continues in an operation after all of the preconditions items are processed. In operation a keyword is mapped to an implementation class. For example test interpreter looks up a Java implementation class that has been registered with the key. The registration may occur when test interpreter initializes. The association may be defined with one of several Java annotations for plug in classes. For example a com.sas.unravl.assertions.BoundAssertion class uses an UnRAVLAssertionPlugin annotation 

Below is an example if a preconditions element that tests that the variables named created and updated have been bound in the environment 

In operation the implementation class is instantiated. In operation the instantiated implementation class is executed. For example a call of an associated method of the identified implementation class is made based on a second key. There may be one method per implementation class. Using the example above and the precondition bound the key bound maps to the implementation class com.sas.unravl.assertions.BoundAssertion. The class is instantiated and test interpreter calls a check method of the instance of the implementation class passing it the current script and the value associated with the key. In this case the value is the array created updated . The check method tests each value in the array to see if it is bound within the context of the current script. If any value in the array is not bound the assertion precondition fails and test interpreter stops the processing of test script .

A method in object oriented programming is a procedure associated with an object class that provides the interface that other classes use to access and modify the data properties of an object. For example each of the keys used in preconditions auth body bind and assert elements may have a corresponding Java interface that performs a specific function for that key. As an example the keys used in preconditions and assert elements such as bound may implement a com.sas.unravl.assertions.Assertion for example in the class com.sas.unravl.assertions.BoundAssertion interface which includes the method public void check TestScript script ObjectNode assertion Stage stage ApiCall call 

In an operation a headers parameter associated with a headers key is processed if any are included in test script . The headers parameter may include one or more items. If the script contains a template key the headers parameter associated with the headers key of the template is also processed.

In an operation a body parameter associated with a body key is processed if included in test script . The body parameter may be included from a stored template value. Operations and referring to are performed for the body parameter and processing continues in an operation .

In operation an authentication parameter associated with an auth key is processed if included in test script . The authentication parameter may be included from a stored template value. Operations and referring to are performed for the authentication parameter and processing continues in an operation .

In operation an API call is processed. The API key may be included from a stored template value. For example the API call is configured based on the key and using the value as the API URL and the configured API call is executed. For example the key value pair GET http maps.googleapis.com maps api elevation json locations 27.988056 86.925278 sensor false may be executed as the REST API call GET http maps.googleapis.com maps api elevation json locations 27.988056 86.925278 sensor false.

In an operation a bind parameter associated with a bind key is processed if any are included in test script . If the script contains a template key the bind parameter associated with the bind key of the template is also processed. The bind parameter may include one or more bind items. For example bind parameter may be an array of bind items. For each bind item operations and referring to are performed and processing continues in an operation after all of the bind items are processed.

In operation an assert parameter associated with an assert key is processed if any are included in test script . If the script contains a template key the assert parameter associated with the assert key of the template is also processed. The assert parameter may include one or more assert items. For example assert parameter may be an array of assert items. For each assert item operations and referring to are performed and processing continues in an operation after all of the bind items are processed.

For illustration a key value pair may be assert headers Location http www.example.com some path item which is implemented by looking up a Java class that is associated with the key headers com.sas.unravl.assertions.HeadersAssertion and its check method is called with the JSON object Location http www.example.com some path item as the method parameter ObjectNode assertion. The structure of the value associated with each such key is determined by the implementation class not by test interpreter . Test interpreter simply passes the corresponding JSON value to the implementation class which allows new implementation classes to be added to add new behavior without changing test interpreter . The associated parsed response from the executed API call is compared to expected response results and a result of the comparison such as successful or failed may be provided to a user such as on display .

An example test script to test the Google REST API call GET http maps.googleapis.com maps api elevation json locations 27.988056 86.925278 sensor false is 

The example test script is an example of test script and has two members. The first member is the GET element. The value is the URL of the specific REST API resource or service which in this example case is the Google elevation API with a locations query parameter that contains the latitude and longitude parameters.

The second member of this script is an assert element. Its value is a JSON array of assertions. Assertions are programming logic expressions that provide a testable mechanism that is either true or false. If the assertion is true the test is successful. Thus assertions specify a condition that is expected to be true. This example contains two assertions. The first is a status assertion. This assertion has the form status 200. This assertion is true if the REST API returned an HTTP response code of 200. The value of 200 indicates a successful API operation.

The second assertion is a json assertion. The json assertion has a value which is a JSON object or a JSON array. In this example the value is a JSON object that encodes the expected result. The assertion is true e.g. succeeds if the output of the REST API is a JSON document that is structurally equivalent to the expected JSON. Because test script may be structured as a JSON document test script can express any valid JSON value in a json assertion.

The test script below is a second example of test script that includes an array of eight script objects where the identifiers in italics e.g. First script object are not part of the test script but are labels for reference.

The test script above is built as a JSON array of nested scripts. The square brackets define the array. The elements of the array are JSON objects each enclosed in curly braces .

The first script object named default environment using the name key performs a one time assignment of reusable variables by assigning the variables using the env key. The environment variables are assigned using a JSON array of key value pairs. For example host jiradev.sas.com creates a variable named host and assigns it the value jiradev.sas.com. A variable is referenced in string literals by citing its name within curly braces in the form varName. The notation varName is used in JSON strings in script objects to indicate variable substitution the value of the named variable is substituted whenever a variable is named within braces. Thus host expands to the value of the host variable the text string jiradev.sas.com . For example when assigning the value of the rndjira variable rndjira https host rest api 2 the value https jiradev.sas.com rest api 2 results.

The second script object named jira.template using the name key defines a template or a reusable script that can be included by other scripts so that common elements for executing scripts do not have to be repeated. Templates support reuse of validation scripts. The second script object inherits the constructs in the template including environment variable assignment preconditions and assertions HTTP methods and URIs headers and constructs to extract data from the REST call results. Any script object that has the top level construct template jira.template inherits the precondition from that template. That is the script objects that use this template use basic authentication when invoking the REST API calls. Templates can themselves include template constructs supporting a hierarchy of reusable constructs. Templates are not executed. Rather they define reusable validation elements that other scripts can inherit. The second script object contains a precondition that defines the REST API authentication. In this case the JIRA REST API uses HTTP Basic Authentication . The credentials may be stored in a secured file not in the publicly viewable script.

The third script object named Get JIRA ticket details using the name key invokes the REST API for JIRA an issue tracking service. The third script object invokes the JIRA API to GET a specific issue from JIRA using a specific issue id by applying the HTTP GET verb to the URL https jiradev.sas.com rest api 2 issue RESTTEST 1 fields creator assignee which is the result of expanding the variables in the URL string.

The bind element of the script allows binding values to new variables. It is defined as one or more JSON elements with parameters. In this example json response will capture the REST API response body validate that it is a valid JSON response and bind the variable response to the resulting parsed JSON data structure. The bind constructs included in Table II may be supported 

The third script object also includes assertions that test the result of the API by processing the JSON output. The assert element provides one or more validation assertions which are constructs that when true the test succeeds. The first assertion response null validates that the value of response as bound by the preceding bind element is not the null value. The assertion response.key.textValue issue tests that the JSON response bound from the preceding bind element contains a member with the name key and that its string value is identical to the variable named issue. Validations are performed by executing the assertion as a Boolean expression using the Groovy language. Variables bound in the script object are also available as local variables when the Groovy expression is interpreted by the Groovy runtime. In addition to Groovy Boolean expression assertions the following test types are supported 

The fourth script object named Add comment to existing ticket using the name key uses an HTTP POST operation to create a new comment on an existing JIRA ticket which is a feature of the JIRA REST API. The text of the comment is assigned to the variable named comment in the current environment to facilitate asserting that the comment was added later. The value of the who variable assigned in the first script object is inserted into the comment string. The fourth script object uses the jira.template template previously parsed as the second script object which provides Basic Authentication for the API call. The POST adds the comment to the issue identified by the variable issue which is inserted into the target URL. The body of the POST request is a JSON object and takes the form body This is the text of a comment posted by user who . The fourth script object also specifies an HTTP request header. The Content Type header is set to the value application json that indicates that the request body is JSON. After the API call completes the Location header is extracted from the response headers and stored in the environment variable location .

The fifth script object named Check that the comment was created echo it to stdout using the name key performs a GET on the location URL created by the previous script to validate that the new comment resource exists.

The sixth script object named Update the comment using the name key performs an HTTP PUT of the comment to change the comment text. The sixth script object updates the comment with new text demonstrating how the PUT HTTP verb is used. The location from the POST is used to identify the location of the comment resource that the POST created.

The seventh script object named Check that the comment was updated using the name key performs another HTTP GET to validate that the comment has been changed. The seventh script object compares the actual comment received from the REST API call to the value of the newComment variable in the environment. The seventh script object also validates additional attributes of the request such as the userid of the commenter and the userid of the user that updated the comment.

The eighth script object named Delete the new comment using the name key uses HTTP DELETE to delete the comment.

The word illustrative is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as illustrative is not necessarily to be construed as preferred or advantageous over other aspects or designs. Further for the purposes of this disclosure and unless otherwise specified a or an means one or more . Still further using and or or in the detailed description is intended to include and or unless specifically indicated otherwise. The illustrative embodiments may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed embodiments.

The foregoing description of illustrative embodiments of the disclosed subject matter has been presented for purposes of illustration and of description. It is not intended to be exhaustive or to limit the disclosed subject matter to the precise form disclosed and modifications and variations are possible in light of the above teachings or may be acquired from practice of the disclosed subject matter. The embodiments were chosen and described in order to explain the principles of the disclosed subject matter and as practical applications of the disclosed subject matter to enable one skilled in the art to utilize the disclosed subject matter in various embodiments and with various modifications as suited to the particular use contemplated.

