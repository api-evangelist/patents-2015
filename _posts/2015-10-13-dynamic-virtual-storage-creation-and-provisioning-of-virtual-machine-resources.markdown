---

title: Dynamic virtual storage creation and provisioning of virtual machine resources
abstract: A method and apparatus are disclosed of identifying a virtual machine usage of enterprise network resources, such as memory storage usage. One example method of operation may include transmitting a storage request to a database to determine an amount of physical memory storage available in the enterprise network. The method may also include receiving an alert message indicating a virtual machine currently operating has exceeded a predetermined memory storage threshold value. The method may also include creating a new virtual hard disk (VHD) to accommodate the exceeded predetermined memory storage threshold value.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09436496&OS=09436496&RS=09436496
owner: Open Invention Network LLC
number: 09436496
owner_city: Durham
owner_country: US
publication_date: 20151013
---
This application is a continuation of application Ser. No. 13 552 898 entitled DYNAMIC VIRTUAL STORAGE CREATION AND PROVISIONING OF VIRTUAL MACHINE RESOURCES filed on Jul. 19 2012 now issued U.S. Pat. No. 9 158 940 issued on Oct. 13 2015 which claims the benefit to provisional application 61 509 192 entitled SYSTEM AND METHOD FOR DYNAMIC VIRTUAL STORAGE CREATION AND PROVISIONING filed on Jul. 19 2011 the entire contents of which are hereby incorporated by reference.

The present invention is generally related to a system method and device configured to dynamically determine and allocate resources between physical and virtual machines operating in an enterprise network environment.

Currently traditional enterprise networks may include various nodes that contribute to an overall business process. The network nodes may include both physical and virtual machines. Enterprise networks may include virtual machines and physical hosts which are required to provide an allocation of resources.

Enterprise networks may include virtual machines and physical host devices which are required to provide an allocation of resources. Physical hosts may include hardware devices that provide certain services such as physical storage which may be converted to virtual storage and allocated to corresponding virtual machines depending on the anticipated requirements of an observed use of such virtual machines. The balance between actual physical storage and allocated virtual storage usage may be optimized by monitoring and identifying the activities performed by one or more virtual machines operating in the enterprise network environment.

An example embodiment of the present invention may include a method of transmitting a storage request to a database to determine an amount of physical memory storage available in an enterprise network and receiving an alert message indicating at least one virtual machine currently operating has exceeded a predetermined memory storage threshold value. The method may also include creating via a processor at least one new virtual hard disk VHD to accommodate the exceeded predetermined memory storage threshold value.

Another example embodiment of the present invention may include an apparatus that includes a transmitter configured to transmit a storage request to a database to determine an amount of physical memory storage available in an enterprise network. The apparatus may also include a receiver configured to receive an alert message indicating at least one virtual machine currently operating has exceeded a predetermined memory storage threshold value and a processor configured to create at least one new virtual hard disk VHD to accommodate the exceeded predetermined memory storage threshold value.

It will be readily understood that the components of the present invention as generally described and illustrated in the figures herein may be arranged and designed in a wide variety of different configurations. Thus the following detailed description of the embodiments of a method apparatus and system as represented in the attached figures is not intended to limit the scope of the invention as claimed but is merely representative of selected embodiments of the invention.

The features structures or characteristics of the invention described throughout this specification may be combined in any suitable manner in one or more embodiments. For example the usage of the phrases example embodiments some embodiments or other similar language throughout this specification refers to the fact that a particular feature structure or characteristic described in connection with the embodiment may be included in at least one embodiment of the present invention. Thus appearances of the phrases example embodiments in some embodiments in other embodiments or other similar language throughout this specification do not necessarily all refer to the same group of embodiments and the described features structures or characteristics may be combined in any suitable manner in one or more embodiments.

In addition while the term message has been used in the description of embodiments of the present invention the invention may be applied to many types of network data such as packet frame datagram etc. For purposes of this invention the term message also includes packet frame datagram and any equivalents thereof. Furthermore while certain types of messages and signaling are depicted in exemplary embodiments of the invention the invention is not limited to a certain type of message and the invention is not limited to a certain type of signaling.

Example embodiments of the present disclosure provide a system method and or device configured to perform the dynamic creating and provisioning of virtual hard disks VHDs . Automatically creating a VHD may be achieved by auditing the available storage accessible to the virtual infrastructure. Determining the amount of available storage may be performed by utilizing a query engine to request the physical logical unit number LUN that is designated for a particular virtual machine s among the virtual infrastructure. The query engine requests and processes the LUN connectivity to the available host s associated with each available hypervisor. In response the virtual machine information is transmitted to the query engine which forwards the information to an inference engine. The query engine may establish a VIX API connection to observe the status of the allocated storage in use by the hosts in the environment. The data received provides the inference engine with a basis for the creation of new VHDs.

In computer storage a logical unit number or LUN is a number used to identify a logical unit which is a device addressed by the small computer systems interface SCSI protocol or similar protocols such as Fibre Channel or Internet SCSI iSCSI . A LUN may be used with any device which supports read write operations such as a tape drive but is most often used to refer to a logical disk as created on a storage access network SAN . Though not technically correct the term LUN is often also used to refer to the drive itself.

According to one example if a host operating in the enterprise environment sends a critical storage alert message to the virtual infrastructure provider indicating that a predetermined threshold of storage usage has been exceeded i.e. 90 or greater then the system may send a message to the provider to instantiate a VHD allocation. The size of the VHD allocation may be anywhere between 2 and 4 times the difference between 90 or greater and the full 100 allocation amount. A maximum VHD size may be 40 of the storage allocation to the physical host of the hypervisor. The VHD is provisioned dynamically to the host utilizing the virtual infrastructure providers API for storage instantiation. The VHD may be a logical partition in the physical storage devices that is identified as used by the virtual machine .

Example embodiments of the present invention may include an enterprise environment that includes at least one physical virtual host a network device such as a virtual router capable of virtual networking as well as physical routers capable of providing network access to the physical network infrastructure not shown . Other components may include at least one physical storage device capable of provisioning access to a virtual infrastructure comprised of physical hosts and virtual guests that utilize virtual storage such as a virtual machine file system VMFS . An orchestration engine may be used to dictate the operations of the rules engine inside the virtual host and the physical virtual host.

The application components utilized by the virtual storage creation and provisioning system may include a hypervisor management platform such as a VMWare ESX server. VMWare vSphere management software Microsoft Hyber V Microsoft SCVMM Microsoft 2008 Server Virtual Storage Vendor s API a database such as SQL Server and or Oracle a web based virtual machine console server and an inference engine .

The inference engine may operate an inference tool such as OpenRules which initiates a process by requesting the enterprise virtualization information from the various APIs reflected in the architecture in . The interface is utilized by the system to provide both data and control input and output for the system. By using this type of interface the system may be distributed within an enterprise or external cloud environment. The inference engine then requests and processes the LUN connectivity to the available guest virtual machine APIs associated with each available hypervisor API . The APIs return the active virtual machines and their present virtual storage connectivity allocation both allocated and actual usage.

The hypervisor APIs may provide a detailed list of the virtual machines associated with a virtual environment their corresponding hosts resource allocation network configuration storage device API configuration and a feature contained within the virtual infrastructure for distribution of instructions for the virtual machine s operating system to provide dynamic network connectivity of the virtual machines to other virtual and physical machines operating in the virtual environment of the enterprise network.

The information may be requested through the OS API of the VIX from the host by the host s API at a default time interval of once every 5 minutes. This default setting is established to provide accurate updates without impacting the performance of the virtual environment. The inference engine established a VIX API connection to observe the status of the allocated storage in use by the hosts operating in the enterprise environment. This data provides the inference engine with a basis for the creation of new VHDs. If a HOST in the enterprise environment sends a critical storage alert to the inference engine of 90 or greater storage utilization then the inference engine transmits a message to the provider to create a new VHD allocation of two to four times the size of the difference between 90 or greater and 100 total allocated storage utilization. A maximum VHD size therefore is 40 of the storage allocation to the physical host of the hypervisor. The virtual storage device s is provisioned dynamically to the host utilizing the virtual infrastructure providers API for storage instantiation.

The hypervisor operating as part of the physical virtual host is queried by a query engine as part of a remote network device which connects via a network message request HTTP to the hypervisor API interface . The query engine may perform a query for example and receive the following result fc.5001438005685fb7 5001438005685fb6 fc. 5006048c536915af 5006048c536915af naa.60060480000290301014533030303130 UID fc.5001438005685fb7 5001438005685fb6 fc.5006048c536915af 5006048c536915af naa. 60060480000290301014533030303130 

In operation the hypervisor API checks the State for the LUN. The state may be identified by a Run Time Name and Device Display Name. The VIX API permits the capability to write programs and scripts to automate virtual machine operations and run programs that manipulate files within guest operating systems. VIX programs run on Windows or Linux and support management of VMware Workstation Player and ESX ESXi optionally through vCenter. Bindings may be provided for C Perl and COM Visual Basic VBscript C . Virtual hard disk VHD is a file format which represents a virtual hard disk drive HDD . It may contain what is found on a physical HDD such as disk partitions and a file system which in turn can contain files and folders. It is typically used as the hard disk of a virtual machine.

According to one example if 92 of a memory utilization is utilized the file system will create a new VHD with a size of 8 difference between 92 and 100 times which is equal to 32 . This is based on controlled observations utilizing a series of prototypes to determine the most efficient sizing that will not require a new VHD be spun up. If a physical disk of the storage device is equal to 5 terabytes and the LUN virtual storage is 100 Gigabytes then the VHD would not exceed 40 Gigabytes.

Inference engine may utilize a Drools function which is an object oriented rule engine for JAVE. Drools is an augmented implementation of Forgy s Rete algorithm tailored for the Java language. Adapting the Rete algorithm to an object oriented interface allows for more natural expression of business rules with regards to business objects. Drools provides for declarative logic programming and is flexible enough to match the semantics of problems in an enterprise. The various parts that compose a rule may be extended to lend domain specific sense to the rule.

The storage level request may include a request for a logical unit number LUN available to the at least one virtual machine currently operating in the enterprise network. The amount of physical memory storage available is based on an amount of physical memory storage that is not allocated to any of the virtual machines currently operating in the enterprise network. The physical memory storage allocated to the at least one new VHD is equal to an integer multiple of the difference between the amount of physical memory storage available and 100 percent of the physical memory storage available. According to certain examples the integer multiple may be equal to 4 or 2 or any other integer value that provides a simple basis for creating a new memory or storage allocation. All the communications conducted between the monitoring system and the VMs may be communicated over an established application programming interface API .

Example embodiments are preferably realized in a hardware device such as a computer cellular phone or other mobile terminal device etc. In other embodiments the present invention may be realized in hardware software firmware or a combination of hardware software and or firmware. The above example embodiments may also be implemented in software code and may be stored on a computer readable medium such as for example non volatile memory devices e.g. RAM ROM hard disk etc. . The software code may be accessed from the computer readable medium and may be executed by a processor. The executed program may provide one or more of the features of the example embodiments.

The operations of a method or algorithm described in connection with the embodiments disclosed herein may be embodied directly in hardware in a computer program executed by a processor or in a combination of the two. A computer program may be embodied on a computer readable medium such as a storage medium. For example a computer program may reside in random access memory RAM flash memory read only memory ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM registers hard disk a removable disk a compact disk read only memory CD ROM or any other form of storage medium known in the art.

An exemplary storage medium may be coupled to the processor such that the processor may read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an application specific integrated circuit ASIC . In the alternative the processor and the storage medium may reside as discrete components. For example illustrates an example network element which may represent any of the above described network components of the other figures.

As illustrated in a memory and a processor may be discrete components of the network entity that are used to execute an application or set of operations. The application may be coded in software in a computer language understood by the processor and stored in a computer readable medium such as the memory . The computer readable medium may be a non transitory computer readable medium that includes tangible hardware components in addition to software stored in memory. Furthermore a software module may be another discrete entity that is part of the network entity and which contains software instructions that may be executed by the processor . In addition to the above noted components of the network entity the network entity may also have a transmitter and receiver pair configured to receive and transmit communication signals not shown .

Although an exemplary embodiment of the system method and computer readable medium of the present invention has been illustrated in the accompanied drawings and described in the foregoing detailed description it will be understood that the invention is not limited to the embodiments disclosed but is capable of numerous rearrangements modifications and substitutions without departing from the spirit or scope of the invention as set forth and defined by the following claims. For example the capabilities of the systems of can be performed by one or more of the modules or components described herein or in a distributed architecture. For example all or part of the functionality performed by the individual modules may be performed by one or more of these modules. Further the functionality described herein may be performed at various times and in relation to various events internal or external to the modules or components. Also the information sent between various modules can be sent between the modules via at least one of a data network the Internet a voice network an Internet Protocol network a wireless device a wired device and or via plurality of protocols. Also the messages sent or received by any of the modules may be sent or received directly and or via one or more of the other modules.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

