---

title: Image forming apparatus and resource management method
abstract: A maximum resource use amount for use by an application is acquired for each application, the acquired maximum resource use amount and a resource amount used by the applications are stored for each application, and when an application calls a resource use API in order to acquire or release a resource, it is determined, based on the upper limit of the used resource amount and the used resource amount, whether or not to generate the resource, and, if it is determined to generate the resource, the resource is generated and the used resource amount is updated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09571687&OS=09571687&RS=09571687
owner: CANON KABUSHIKI KAISHA
number: 09571687
owner_city: Tokyo
owner_country: JP
publication_date: 20150807
---
In order realize solutions an increasing number of current multifunction peripherals MFPs have functions for executing applications apart from the functions incorporated in the MFPs such as copying scanning and printing of documents. Many MFPs have an execution environment for Java registered trademark as an application execution environment and can execute applications written in Java. Examples of an application execution environment include Canon s MEAP. In the case of a Java application on a PC one Java process executes one application. On the other hand there are many MFPs that use an OSGi framework or the like and execute a plurality of applications using one Java process due to limitations on the CPU or memory. The OSGi framework is an application platform for executing a plurality of applications on one Java VM. In the case where one of applications that are being executed on an MFP has a bug and a resource leak such as a memory leak for example occurs there is a possibility that an error resulting from a resource shortage such as OutOfMemoryError will occur and all applications will stop. Also since an error resulting from a resource shortage such as OutOfMemoryError for example occurs when an application requests a resource and the resource to be allocated is not available there are cases where such an error occurs while an application that is running normally is being executed.

Incidentally there are techniques for measuring resources for each thread as described in Japanese Patent Laid Open No. 2005 269439. However it is not possible to measure use resources for each application in the case where one thread executes the codes of a plurality of applications as shown in FIG. 13 in Japanese Patent Laid Open No. 2005 269439.

Moreover there are techniques for managing resources by modifying the application execution environment itself as shown in Japanese Patent Laid Open No. 2013 145503. However there are difficulties in performing modification that adds resource management to the application execution environment in an MFP that has limited resources such as memory and CPU.

The present invention provides a resource management apparatus and method that manage resources for each application. Furthermore the present invention provides an image forming apparatus that can additionally carry out resource management in an application execution environment in which resources are limited and a method for resource management by the image forming apparatus.

In order to achieve the above described object the present invention has the following configuration. Specifically according to one aspect of the present invention there is provided an image forming apparatus comprising a holding unit that receives a declared resource amount to be used from each of applications installed on an application platform and holds the declared resource amount for each application and a resource management unit that in response to a resource acquisition API being called from an application determines whether or not a resource amount used by the application exceeds the declared resource amount issues a notification that the resource amount exceeds the declared resource amount to the application in a case where it is determined that the resource amount exceeds the declared resource amount and issues a request to the application platform to generate a resource and delivers a resource object generated in response to the request in a case where it is determined that the resource amount does not exceed the declared resource amount.

According to the present invention it is possible to manage resources for each application in an application execution environment in which a plurality of applications are operated in parallel. Also resource management can be additionally carried out with ease in an application execution environment in which resources are limited.

Further features of the present invention will become apparent from the following description of exemplary embodiments with reference to the attached drawings.

The image forming apparatus provides an application platform such as an OSGi platform for example installs a plurality of application programs written in JAVA registered trademark on the application platform and can execute the programs in parallel. The image forming apparatus in this specification is also called an application management apparatus from the point of view of serving as an apparatus that manages applications and is also called a resource management apparatus from the point of view of serving as an apparatus that manages resources for applications.

The service API management unit acquires the service API unit corresponding to a request made by the application that uses the function from the application providing the function identified by the identifier of the application and sends the service API unit to the application that uses the function. The service API unit is configured by a field storing the identifier of the application that uses the function and an API that is publically released by the application that provides one or more functions. The application that uses the function acquires the service API unit and uses the function of the application providing the function by calling the API implemented in the service API unit . When the application that uses the function calls the service API unit the service API unit adds the application identifier of the application that uses the function and calls an API that realizes the function of the actual application that provides the function. The procedure for requesting and providing a service via this service API will be described later with reference to .

The API that is publically released by a function providing application is specified by combination of a class and a method for example. For example a getFile method of a ResourceService class is specified as ResourceService.getFile or the like and the API is specified and called. Therefore a combination of a class name and a method name belonging to the class that are shown in is registered in the service API .

The API shown in provides the service described in the description field. For example the ResourceService class is a class for the application requesting the resource service to acquire or release a resource and does not wrap the Java standard class. The getFile method of the ResourceService class is a method for acquiring a resource object of a file resource and returns an instance of an RSfile class that is a resource object of the secured resource. The file object corresponds to the file resource. getSocket and getThread methods are methods for respectively acquiring a socket object and a thread object and respectively correspond to a communication resource and a computing resource for example.

Other classes are classes for resource objects and are defined by wrapping the Java standard class. Description of each class indicates a method in which a function specific to the resource service is implemented among methods for the Java standard class wrapped by the class. Description of a method performing the same processing as that performed by the method for the wrapped Java standard class is omitted. For example the RSfile class wraps Java.io.file that is a file class and a delete method executes processing for subtracting a storage use amount equal to the deleted file size from the current use amount in addition to deletion of the file class. Similar processing to that of the file class is performed on the methods of other file classes. Although description of the other classes and methods is omitted can be read similarly to the above described example. Thus the resource object generated by using the resource service can be handled similarly to the resource Java standard resource object generated without using the resource service.

The application that publically releases the function or in other words that provides a service starts the service API registration processing S . The application that publically releases the function issues a service API registration request C to the service API management unit using service API information and an application identifier as arguments S . The service API information includes information for specifying a service such as an identification name. When a registration notification R is returned from the service API management unit the processing transitions to S and the service API registration processing ends S . When an error R is returned error processing is performed S and the service API registration processing ends S .

Upon receiving the service API registration request C the service API management unit starts the processing for registering the service API and the application S . First the service API management unit acquires the service API information and the application identifier from the API registration request C received in S S . Next the service API management unit searches the table and checks whether the service API information acquired in S is already registered in the table S . If the service API information is already registered in the table the service API management unit returns an error R to the application publically releasing the function S and ends the service API registration processing S . If the service API information is not registered the service API management unit registers the service API information and the application identifier acquired in S in the table S . Moreover the service API management unit returns a registration notification R to the application publically releasing the function S and ends the service API registration processing S . In this example the resource service executes the processing for registering the service API shown in as the application providing the service and registers the service API of the resource service and the application identifier of the resource service.

Next service API unit acquisition processing will be described with reference to to . An application that uses a function starts the service API unit acquisition processing S in . Next the application issues a service API unit request C to the service API management unit using the service API information indicating a function that the application desires to use and the application identifier of the application itself as arguments S . The application checks whether the service API unit was acquired from the service API management unit S . In the case where an error is returned and the service API unit was not acquired the application performs error processing S and ends the service API unit acquisition processing S . In the case where the service API unit was acquired the application performs processing in which an application providing the function that is a service to be provided by another application is used via the service API unit Step S and ends the service API unit acquisition processing S . In the application that uses the resource service S is processing for acquiring and using the resource.

Upon receiving a service API unit request C from the application that uses the function the service API management unit starts service API unit generation processing S in . The service API management unit acquires the requested application API information from the service API unit request C S . Next the service API management unit searches the table using the application API information acquired in S as a key and if the service API information is not present the service API management unit issues a notification of an error R to the application that has issued the service API unit request C S and ends the service API unit generation processing S . If the service API information is present the service API management unit acquires an application identifier corresponding to the application API information S . Next the service API management unit issues a service API unit generation request C to the application that is identified by the application identifier acquired in S and publically releases the function using the application identifier of the application that uses the function as an argument S . Upon receiving a service API unit response R including the service API unit the service API management unit provides the service API unit R to the application that uses the function S and ends the service API unit acquisition processing S .

Upon receiving the service API unit generation request C from the service API management unit the application publically releasing the function starts processing for generating the service API unit S in . Next the application acquires the application identifier of the application that uses the function from the service API unit generation request C S . Furthermore the application generates the service API unit stores the application identifier acquired in S of an application that uses the function in the application identifier storage field and performs processing for initializing the service API unit S . The application returns the service API unit to the service API management unit R and ends the service API unit generation processing S . Note that the service API unit is an object and generation and initialization of the service API unit in S are realized by generation and initialization of an instance of the service API in the present example. Therefore in S the application that uses the function uses a service provided through the API by calling the method corresponding to the function used by the generated object. Also details of S will be described later with reference to .

As described above the mechanisms described in are provided on the OSGi platform for example and registration of function providing applications service bundle and acquisition of the service API unit through a function use application service consumption bundle can be realized by functions provided on the OSGi.

The resource service is an application operating on the application platform . The resource service includes an application declaration amount acquisition unit that acquires a declaration of a resource amount to be used from the application and a resource amount storage unit that stores the declared resource amount acquired by the application declaration amount acquisition unit and the resource amount used by the application for each application in association with the application identifier for example. Furthermore the resource service includes for each application a service API unit of the resource service a resource management unit that determines whether a resource is provided to an application and a resource generation unit that generates a resource. The service API unit corresponds to the service API unit shown in and association with the application is implemented by the application identifier .

The application declaration amount acquisition unit acquires information on the resource amount that is declared for use by the application from the resource service correspondence application .

The resource service correspondence application calls the resource service API unit for an application A and issues a resource acquisition request . In the case where there is a resource to be allocated to an application A the resource service returns the resource to the application A . If there is no resource to be allocated the resource service returns an error .

In steps S to S processing of steps S to S is performed on all items in the list included in the application information acquired in S and when all of pieces of application information are checked the processing exits the loop S and the resource service the service API unit initialization processing S ends. The name of the application information is acquired in the loop S . Next it is determined whether a key included in the acquired application information is a predetermined key indicating a resource amount declaration S and if the key indicates the resource amount declaration the processing transitions to S. If the key does not indicate the resource amount declaration in S the processing transitions to S. In S the acquired resource amount is stored in the resource amount storage unit for each application and each resource S and the processing transitions to S. An upper limit for each resource that is used can be stored and set for each application that uses the service through this procedure. The use resource amount is initialized and set to 0.

The application A starts processing for using a resource S . The application A calls an API that is provided by the API unit of the resource service for the application A C and issues a resource request S . At this time information that is transmitted to the API unit of the resource service includes the type of resource and the amount of a resource that the application A wants to acquire.

The application A determines whether the resource corresponding to the resource request was acquired S and if the requested resource was acquired the processing transitions to S. If the requested resource was not acquired the processing transitions to S. If the application A can acquire the requested resource the application A performs processing in which the acquired resource is used S . When S is completed the application A calls a resource release API of the API unit of the resource service for the application A C issues a request to release an unnecessary resource S and ends the resource use processing S .

Although the resource is released soon after use of the acquired resource ends in this flowchart if the acquired resource is also used in other processing release processing may be performed in the other processing. Information transmitted to the API unit of the resource service when the resource release request is made is the type and amount of resource to be released. On the other hand if the requested resource was not acquired the application A performs error processing S and ends the resource use processing S .

Upon receiving the resource acquisition request from the application A C the API unit of the resource service for the application A starts resource acquisition processing S . The API unit of the resource service calls the resource management unit C and issues the resource request S . The information transmitted to the resource management unit at this time is the identifier of the application held by the API and the type and amount delivered from the application of resource that the application A wants to acquire.

If there is a response to the request the API unit of the resource service determines whether the resource was acquired S and if the resource was acquired the processing transitions to S. If the resource was not acquired the processing transitions to S. If the requested resource was acquired the API unit of the resource service returns the resource acquired in S to the application A R and ends the resource acquisition processing S . If the resource was not acquired the API unit returns an error to the application A in S R and ends the resource acquisition processing S .

Upon receiving the resource release request from the application A C the API unit of the resource service starts the resource release processing S . The API unit of the resource service issues the resource release request C to the resource management unit S . Information transmitted to the resource management unit at this time includes the identifier of the application held by the API and the type and amount delivered from the application of the resource that is to be released. Next the API unit of the resource service ends the resource release processing S .

Upon receiving the resource request from the API unit of the resource service C the resource management unit starts the resource acquisition processing S . First the resource management unit acquires the application identifier that uses the resource from the resource request made by the API unit of the resource service S . Next the type of requested resource is acquired S . Furthermore the amount of the requested resource is acquired S . Next the resource management unit acquires the current resource use amount of the resource type acquired in S used by the application identified by the application identifier acquired in S from the resource amount storage unit S . Furthermore the resource management unit acquires the declared resource amount of the resource type acquired in S declared by the application identified by the application identifier acquired in S from the resource amount storage unit S .

Next the resource management unit determines whether the sum of the resource use amount acquired in S and the requested resource amount acquired in S exceeds the declared resource amount acquired in S S . If the sum does not exceed the declared resource amount the processing transitions to S. If the sum exceeds the declared resource amount the processing transitions to error processing S the resource management unit issues a notification of an error to the API unit of the resource service R and the resource acquisition processing ends S . The error means that the requested resource cannot be secured.

The resource management unit acquires the total resource use amount of the resource type acquired in step S by all applications S . Next the resource management unit determines whether the sum of the total amount of use resource acquired in S and the requested resource amount acquired in S exceeds the resource amount provided by the application platform S . The resource amount provided by the application platform is given in advance and the resource management unit holds this resource amount for example. If the sum exceeds the resource amount the processing transitions to the error processing S the resource management unit issues a notification of an error to the API unit of the resource service R and ends the resource acquisition processing S . If the sum does not exceed the resource amount the processing transitions to S.

In S the resource management unit adds the requested resource amount acquired in S to the resource use amount of the resource type acquired in S used by the application identified by the application identifier stored in the resource amount storage unit and acquired in S. Next the resource management unit issues a request to the application platform for the resource generation unit to generate the requested resource S . When the resource is generated the resource management unit returns the requested resource to the API unit of the resource service in S R and ends the resource acquisition processing S . Returning of a resource involves information path name or the like for accessing the generated resource being returned for example. Resources indicate elements of hardware or software that can be used for processing in the image forming apparatus and the resource service manages resources such as those shown in . Specifically resource service manages files as a storage resource sockets as a communication resource and threads as a computing resource. Also a resource object can be an abstraction of a resource as seen from an application including a resource server that is executed on the application platform and is formed by encapsulating information indicating a secured resource together with a method indicating processing to be performed on the resource or the like for example. Alternatively it is possible to view the resource as being expressed by the resource object.

Upon receiving a resource release request from the API unit of the resource service C the resource management unit starts the resource release processing S . The resource management unit acquires the identifier of the application that uses the resource from the resource release request made by the API unit of the resource service S . Next the type of resource to be released is acquired S . Furthermore the resource management unit acquires the amount of the resource to be released S . Next the resource management unit releases the resource designated in S S . The resource management unit issues a request to release the resource acquired for the application platform when the resource is released using a procedure similar to making of a request for a resource. Accordingly the designated resource is released. In S the resource management unit subtracts the requested resource amount acquired in S from the resource use amount of the resource type acquired in S used by the application that is stored in the resource amount storage unit and identified by the application identifier acquired in S. The resource management unit ends the resource release processing in S.

In the case of Java a request for a resource can be made by generating an instance of the requested resource object for example. More specifically the instance of the object for a necessary resource is generated by using the service API unit of the resource service in S. By the constructor of the resource object being called the resource management unit and the application platform the Java VM or the like generate the resource object as shown in . The resource object that is generated is an object defined to wrap the Java standard class as shown in . Therefore the obtained resource may be handled in a similar manner to a normal resource in Java. For example when the application platform is requested to generate a resource the application platform secures the resource and returns information for specifying the secured resource to the application that made the request. Of course this is merely an example. There are also cases where information for specifying the resource is given as a parameter of the resource request. The release of a resource for example calls a delete method in the case of the Java file object shown in and calls a close method in the case of the file input stream object the file output stream object or the socket object shown in . The thread object need not particularly request release.

The application starts file writing processing S . First the application issues a file open request to the resource service S . The resource service having received the file open request C determines whether the file can be opened based on the used amount of the file descriptor and the declared amount of the file descriptor of the application S . If the file can be opened the resource service returns the file object to the application R . If the file cannot be opened the resource service returns an error to the application R . The procedure for acquiring the file resource is as described in .

The application determines whether the file object was acquired from the resource service S and if the file object was acquired the processing transitions to S. If the file object was not acquired the processing transitions to S and the application performs error processing and ends the file writing processing S . In the case where the file object is acquired the application issues a request to the resource service to write data to the file S . The resource service that has received the data writing request C from the application determines whether file writing is possible based on the used amount to the storage and the declared amount of the storage of the application S . If file writing is possible the resource service writes data to the file and returns a notification of success in data writing to the application R . If writing file is impossible the resource service returns an error to the application R .

The application determines whether the resource service can perform file writing S and if the resource service can perform writing the processing transitions to S. If the resource service can not perform writing the processing transitions to S and the application performs error processing and then ends the file writing processing S . The application determines whether all data to be written has been written S . If all data has been written the processing transitions to S and the application ends the file writing processing. If all data has not been written the processing transitions to S and the application continues the file writing processing. The use amount of the file resource is also reflected in the resource amount storage unit using the procedure shown in at the time of file writing by steps S and S in particular.

As described above in Java the function of the resource service is provided via the service API unit and the API unit is specified by the class and method shown in for example. For example in order to obtain a file resource in S the getFile method in the ResourceService class is called so that the resource service generates a resource object of the file that is the instance of the RSFile class. This is as shown in the procedure of . Also when data is written to the file the instance of the RSFileOutputStream class of is generated first for example. In the instance of the RSFileOutputStream class is generated immediately after it is determined to be YES in S using the file object generated in S as the parameter. Accordingly the object of the RSFileOutputStream class that is generated is associated with output stream of the generated file object. Writing is then performed by calling the write method of the object of the generated RSFileOutputStream class in S. It is determined in S whether the use amount exceeds the upper limit based on the size of a storage to which data is to be written at this time with reference to the resource amount storage unit . Similarly to determination as to whether the used amount exceeds the upper limit is made by comparing the storage size used by all applications with not only the upper limit of the declared amount of the storage declared by the application application that uses the service that will perform file writing but also with the upper limit of the storage size that can be provided by the image forming apparatus . Also when writing is performed the storage use amount of the resource amount storage unit is updated.

As described above in the present embodiment it is possible to check for each application whether the resource use amount exceeds the upper limit when acquiring a resource when releasing a resource and when writing to a file resource. Furthermore resource management can be performed by an external application referred to as a resource service executed on the platform thus improving the ease and flexibility of resource management. Moreover even if an application is not compatible with the resource service the application can use resources provided by the application platform as in the past.

Because the resource service of Embodiment 1 is an application that operates on the application platform a user can instruct the application platform to stop the resource service using the PC . When the resource service stops the function that the resource service provides to the application can also no longer be used and therefore the application that uses the resource service to acquire and utilize the resource cannot operate. The resource service of Embodiment 2 is a resource service that can continue the operation of the application even when the resource service is stopped.

Although the resource service is uninstalled by the application platform the RSI service cannot be uninstalled.

The resource service checks whether the RSI service is installed in the application platform S . If the RSI service is not installed the processing transitions to S. If the RSI service is installed the processing transitions to S. In S the resource service fetches a Jar file of the RSI service from the Jar file of the resource service S . The resource service installs the Jar file of the RSI service fetched in S in the application platform S . Furthermore the resource service issues an instruction to the application platform to activate the RSI service S and the processing transitions to S.

In S the resource service acquires the version of the RSI service installed S . Next the resource service fetches the Jar file of the RSI service from the Jar file of the resource service S . The resource service acquires the version of the RSI service from a manifesto area of the Jar file of the RSI service acquired in S S . If the version of the RSI service acquired in S is newer than the version of the RSI service acquired in S the processing transitions to S whereas if the version of the RSI service acquired in S is not newer than the version of the RSI service acquired in S the processing transitions to S.

The resource service in S updates the RSI service S and installs in the application platform using the Jar file of the RSI service acquired in S and the processing transitions to S. In S the resource service executes processing for initializing itself S . Next the resource service performs processing for registering the resource service in the RSI service S and ends the processing for activating the resource service S .

Upon receiving a stop instruction from the application platform the resource service starts stop processing S . Next processing for releasing registration of the resource service registered in the RSI service is performed S . Furthermore the resource service executes processing for stopping itself S and ends the stop processing S . In the resource service stop processing in steps S to S the RSI service stop processing is not performed and thus even if the resource service is stopped or uninstalled the RSI service is not stopped or uninstalled.

On the other hand in the case where the resource service is not activated the RSI service acquires and uses resources. Accordingly the resource service correspondence application can issue a resource request and use the resource using the same service API regardless of whether or not the resource service is operating.

The application uses the application platform to issue a service API unit acquisition request to the RSI service . The RSI service generates the service API unit of the resource service and returns the service API unit of the resource service to the application .

In the case where the resource service is activated the application issues a resource acquisition and usage request to the service API unit of the resource service . The service API unit of the resource service transfers the request made in S to the RSI service .

The RSI service transfers the request made in S to the resource service registered in the resource service reference . The resource service performs resource management processing and resource generation and usage processing and returns the processing to the RSI service S . The RSI service returns the processing to the service API unit of the resource service . The service API unit of the resource service returns the processing to the application .

On the other hand if the resource service is not activated the resource service is not registered in the resource service reference . The application also issues the resource acquisition and usage request to the service API unit of the resource service in this case . The service API unit of the resource service transfers the request made in to the RSI service .

The RSI service uses Java standard resource generation and the usage API to perform the resource generation and usage processing and returns the processing to the service API unit of the resource service . The service API unit of the resource service returns the processing to the application .

According to the above described configuration and procedure once executed the RSI service operates without stopping and if the resource service is operating the RSI service redirects requests to the resource service. Therefore the RSI service correspondence application can acquire and use a resource via the service API of the RSI service regardless of whether or not the resource service is being executed.

The resource service of Embodiment 2 can execute the resource service correspondence application even if the resource service stops. However in the case where the resource service is activated later the resource service cannot manage the resource acquired by the application until the resource service is activated. The RSI service of the resource service of Embodiment 3 is an RSI service that only measures use resources when the RSI service is activated and the resource service is not activated.

Upon receiving the resource service registration request C the RSI service starts the resource service registration processing and the processing for updating the resource amount storage unit S . First reference of the resource service is stored S . Next the processing of S to S is repeated for all applications registered in the table that stores the resource use amount and is held by the RSI service S .

The RSI service first acquires one record from the table and acquires the application identifier of the record S . Next the RSI service acquires a resource amount declaration of the application whose identifier is acquired in S S . Next the RSI service updates the declared resource amount which is stored in the resource amount storage unit of the record of the application whose identifier is acquired in S to the resource amount declaration acquired in S S . The RSI service acquires the used resource amount of the application whose identifier is acquired in S from the table S . The declared resource amount value acquired in S is compared to the used resource amount acquired in S S . In the case where the used amount is greater than the declared amount error processing S is performed and the processing returns to S. If the used amount is less than or equal to the declared amount the used resource amount which is stored in the resource storage unit of the resource service of the application whose identifier is acquired in S is updated to the used resource amount acquired in S S and the processing returns to S.

In the error processing of S the application may be stopped or excess resources that are used may be forcibly released.

When the processing for all applications registered in the table ends in S the RSI service ends the resource service registration processing and the processing for updating the resource amount storage unit S and returns the processing to the resource service R .

As a result of the above described configuration and procedure in the present embodiment even if the resource service is not operating the use amount of resources for each application is managed using the RSI service. Furthermore when the resource service is started or resumed the resource use amount of the application managed by the RSI service is compared to the upper limit of the resource declared by each application and it is determined whether the resource use amount exceeds the upper limit. Moreover by updating the resource amount storage unit it is possible to manage consumption of resources while the resource service is interrupted.

Embodiments of the present invention can also be realized by a computer of a system or apparatus that reads out and executes computer executable instructions e.g. one or more programs recorded on a storage medium which may also be referred to more fully as a non transitory computer readable storage medium to perform the functions of one or more of the above described embodiments and or that includes one or more circuits e.g. application specific integrated circuit ASIC for performing the functions of one or more of the above described embodiments and by a method performed by the computer of the system or apparatus by for example reading out and executing the computer executable instructions from the storage medium to perform the functions of one or more of the above described embodiments and or controlling the one or more circuits to perform the functions of one or more of the above described embodiments. The computer may comprise one or more processors e.g. central processing unit CPU micro processing unit MPU and may include a network of separate computers or separate processors to read out and execute the computer executable instructions. The computer executable instructions may be provided to the computer for example from a network or the storage medium. The storage medium may include for example one or more of a hard disk a random access memory RAM a read only memory ROM a storage of distributed computing systems an optical disk such as a compact disc CD digital versatile disc DVD or Blu ray Disc BD a flash memory device a memory card and the like.

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures and functions.

This application claims the benefit of Japanese Patent Application No. 2014 163049 filed Aug. 8 2014 which is hereby incorporated by reference herein in its entirety.

