---

title: Intercepting and supervising calls to transformed operations and objects
abstract: In an embodiment, a method comprises intercepting a first set of instructions from a server computer that define one or more objects and one or more original operations that are based, at least in part, on the one or more objects; modifying the first set of instructions by adding one or more supervisor operations that are based, at least in part, on the one or more objects; transforming the one or more original operations to produce one or more transformed operations that are based, at least in part, on the one or more supervisor operations; rendering a second set of instructions which define the one or more supervisor operations and the one or more transformed operations; sending the second set of instructions to a remote client computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09356954&OS=09356954&RS=09356954
owner: Shape Security, Inc.
number: 09356954
owner_city: Mountain View
owner_country: US
publication_date: 20150210
---
This application claims the benefit under 35 U.S.C. 120 as a Continuation of application Ser. No. 14 159 374 filed Jan. 20 2014 titled Intercepting and Supervising Calls to Transformed Operations and Objects the entire contents of which are hereby incorporated by reference for all purposes as if fully set forth herein. The applicant s hereby rescind any disclaimer of claim scope in the parent application s or the prosecution history thereof and advise the USPTO that the claims in this application may be broader than any claim in the parent application s .

The present disclosure generally relates to security techniques applicable to client server systems and relates more specifically to techniques for determining whether transformed operations and or objects are successfully transformed and for enforcing use of the transformed operations and or objects.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

Computer fraud such as credential stuffing advanced application denial of service attacks ratings manipulation fake account creation reserving rival goods attacks ballot stuffing attacks web site scraping attacks vulnerability assessments and stack fingerprinting attacks is big business for fraudsters. As a specific example fraud can be perpetrated by obtaining financial or personally identifying information that end users provide while using a browser to communicate with an application server computer. In an exploit commonly termed Man in the Browser a user s computer can be infected with malicious code that collects data from legitimate communications such as communications with the user s bank. After the communications have been decrypted for example by a web browser on the user s computer the malicious code may gather data that is displayed in particular fields or sections in the decrypted web page and provide the data to a malicious user or computer. Malicious code may perform actions on a legitimate user s behalf using already established trust communication channels and trusted browser environments.

Malicious code may also gather data that is entered by a user before the user s data is encrypted and sent to the intended recipient. For example a user may enter account information into a web browser that is displaying a web page from the user s bank. The web page may be a login page to access the user s account information and funds. The malicious code may scan particular fields in the web page for the user s account information before the user s account information is encrypted and sent to the user s bank and then send data obtained from those fields to a malicious user or computer. Web browsers were first developed and deployed in the early 1990 s and thus there has been a need to improve browser security web server security web based application security and data security at and or between end points.

While each of the drawing figures illustrates a particular embodiment for purposes of illustrating a clear example other embodiments may omit add to reorder and or modify any of the elements shown in the drawing figures. Furthermore while the instructions discussed in each example embodiment are HTML and JavaScript instructions in other embodiments the instructions intercepted and generated by the intermediary computer need not be HTML and or JavaScript instructions.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

A computer may be one or more physical computers virtual computers and or computing devices. As an example a computer may be one or more server computers cloud based computers cloud based cluster of computers virtual machine instances or virtual machine computing elements such as virtual processors storage and memory data centers storage devices desktop computers laptop computers mobile devices and or any other special purpose computing devices. Any reference to a computer herein may mean one or more computers unless expressly stated otherwise.

An object may be a data structure that can be identified by an identifier and or a relationship with another object. For example an object may have a unique identifier that is a string such as a name customer number or username. Accordingly the object may be referenced and or retrieved using the identifier. Also for example if a particular object is the first child object of a parent object then the particular object may be referenced and or retrieved using a pointer to the parent object and then retrieving a pointer to the first child object. A browser and or runtime environment may provide one or more Application Programming Interfaces APIs for referencing and or retrieving objects within a Document Object Model DOM . The one or more APIs may allow a user to reference and or retrieve an object by unique identifier and or a relative and or absolute location in a DOM. Selector APIs and XPaths are two examples of APIs that may be available in a browser to reference and or retrieve objects within a DOM. An object may be a particular type of object. For example one object may be a button another object may be an input or specifically a text field and another object may be an image.

An attribute may be data that identifies and or describes the appearance behavior and or content of an object. For example an attribute may be a unique identifier such as a name. An attribute may indicate that an object is a type of text field text area checkbox and or radio button. An attribute may indicate that an object is a type of password text field accordingly a client application rendering the text field object on a monitor need not cause the characters that are entered into the field object to be displayed. An attribute associated with the text field object may be updated to include the value entered in the text field. Other attributes may define or describe dimension position color visibility value and any other functional or visual aspect of an object.

A document object model DOM may be a cross platform and language independent representation of one or more objects that are interrelated. For example a DOM may represent one or more objects in an object tree and or hierarchy. An object within the hierarchy may be a parent object which has one or more child objects. A child object may also have one or more child objects.

 Creating updating and or removing an object or operating on an object may mean creating updating and or removing a data structure in memory that represents an object an object s attributes and or relationships between an object and one or more other objects. Additionally operating on an object may mean performing one or more operations that use an object attribute and or relationship between an object and one or more other objects as input. Because these processes directly or indirectly involve changing the state of registers or other structures in electronic digital memory circuits the processes necessarily involve using a computer to transform the state of tangible things.

An operation may be any function method script and or any other code which when executed operates on an object. In an embodiment operations may be objects and therefore for purposes of brevity an operation may mean an operation or object.

A base operation may mean an operation that is defined by a runtime environment or common library. For example the DOM API method commonly aliased as getElementByld may be a base operation since the method frequently defined in modern JavaScript runtime environments in some embodiments.

 Instructions may mean one or more codes that define one or more objects and or one or more operations. For example instructions may comprise HyperText Markup Language HTML eXtensible Markup Language XML cascading style sheets CSS JavaScript and or any other standard or proprietary languages or codes that define objects attributes relationships between objects and or operations.

 Performing instructions or executing instructions may mean creating one or more objects and or performing one or more operations defined by the instructions.

A runtime environment may mean a software or hardware layer that implements the core behavior and or base operations of a programming language. For example a JavaScript runtime environment may implement the core behavior and or base operations of the JavaScript programming language. Additionally the runtime environment may maintain data structures in memory that are defined in a program written in the programming language. Because these processes directly or indirectly involve changing the state of registers or other structures in electronic digital memory circuits the processes necessarily involve using a computer to transform the state of tangible things.

An attribute map may be a map from one attribute name and or value to one or more other names and or values. For example assume an object has an attribute id which defines a unique identifier MyObject . An attribute map may associate MyObject with a different unique identifier such as MySecureObject . Additionally an attribute map may be used to map a modified attribute name and or value to an original name and or value. An attribute map may be an operation hash map and or any other method or associative data structure.

A DOM map may be a map from a first DOM to a second different DOM. For example a DOM map may be a collection of attribute maps. Each attribute map in the DOM map may be an attribute map for an attribute of an object in a first DOM with a modified attribute in a second DOM. Additionally or alternatively a DOM map may map one hierarchy to another different hierarchy and back again. For example a DOM map may modify a relationship between a first object and a second object such that a first object is not related to a second object in a first DOM and the first object is a parent object to the second object in the second DOM.

A browser may be one or more computer programs or other software elements stored in electronic digital memory and running on a computer that receives instructions from a server computer performs one or more of the received instructions causes to display content provides a user interface UI to receive user inputs and or receives and responds to one or more inputs from a user based on or according to the one or more performed instructions. A browser and or components of a browser may be implemented into an application. For example a browser and or components of a browser may be implemented into a standalone web based and or mobile application as part of a web view and or web view controller to send and or receive data over HTTP and or other protocol. A user may use a browser to send data to a server computer. The server computer may respond with additional instructions.

A headless browser may be a browser that does not cause visually displaying or rendering graphical images of objects that are defined in a set of received instructions according to the received set of instructions. Additionally or alternatively a headless browser may be a browser that does not respond to user inputs according to a set of received instructions. Additionally or alternatively a headless browser may simulate user actions such as scrolling clicking a button and or selecting an element.

 Sending and or receiving data over HTTP may mean sending and or receiving data and or instructions using HyperText Transfer Protocol. Additionally or alternatively sending and or receiving data over HTTP may mean sending and or receiving data and or instructions using HTTP on top of another protocol such as Secure Socket Layer and or Transport Layer Security SSL TLS protocols which add security capabilities to HTTP messages and is commonly known as HTTP Secure HTTPS . Additionally or alternatively one or more other protocols may be used such as SPDY.

A web browser may be a browser that sends and or receives data over HTTP. For example a web browser may receive instructions comprising HTML CSS and or JavaScript over HTTP.

A supervisor operation may be an operation that monitors reports on and or regulates use of one or more objects operations and or operations that reference one or more objects. For example a supervisor operation may monitor enforce and or report how one or more operations reference objects in a DOM whether transformed objects and or operations are transformed correctly whether calls to original objects and or operations are still made despite having been replaced with transformed objects and or operations.

A supervisor unit may be a set of supervisor operations in a layer that is positioned logically between a browser and or runtime environment of a browser and the content loaded and or executed within the browser such as objects within a DOM and or one or more operations that operate on objects in the DOM. A supervisor unit may be implemented as a set of one or more supervisor operations. Instrumentations to monitor enforce and or provide feedback about a set of supervisor operations are further discussed in detail herein.

 Supervisor unit instructions or supervisor instructions may be instructions that define and or implement one or more supervisor operations. Additionally supervisor unit instructions or supervisor instructions may be instructions which when executed generate and or implement a supervisor unit.

 Adding supervisor operations or adding a supervisor unit to a set of instructions may mean adding supervisor instructions to another set of instructions. For example an intermediary computer may intercept instructions from a web server add instructions for a supervisor unit modify the intercepted instructions and send the modified instructions which include the instructions that define one or more supervisor operations to the intended client recipient.

 Telemetry data may mean any data generated and or related to the operations of a supervisor unit. Additionally or alternatively telemetry data may mean data that describes which operation s were called what parameters were passed the call stack that led up to the called operation s which object s were referenced and or any other information regarding the state of a runtime environment or the supervisor unit.

A transformed operation and or a transformed object may mean an operation and or object that has been modified based on any real time polymorphic method. For example assume an alias for an operation is document.getElementByld . The transformed operation may have a different alias such as document.getSecureObjectByld . Also for example assume an object has an attribute id which defines a unique identifier MyObject . The transformed object may have a different unique identifier such as MySecureObject . Additionally or alternatively new functionality may be added to a transformed operation and or object. Additionally or alternatively functionally may be removed from a transformed operation and or object.

A page or web page may be a set of instructions that define one or more objects and or operations that may be executed concurrently and may be visually displayed together. For example in response to a request from a client computer a home page may be sent to the client computer. The home page may be a set of instructions that a web server sends to a remote client computer if no parameters are included in the request.

A bot may mean a computer and or software executed by a computer that automates sending and or receiving data. For example a bot may be a web scraper web crawler automatic web browser headless browser and or any other tool designed to submit and or receive data from one or more web servers. A bot may comprise complex logic designed to respond to data received from one or more web servers.

Modifying instructions sent from a server to a browser may prevent and or reduce the effectiveness of one or more various attacks such as a denial of service DOS attack credential stuffing fake account creation ratings or results manipulation man in the browser attacks reserving rival goods or services scanning for vulnerabilities and or exploitation of vulnerabilities. For example each time a web page is requested such as an account creation page order page voting page and or other page from a web server computer an intermediary computer may intercept the instructions sent from the web server. The intermediary may transform the operations and or objects in the original set of instructions to produce a new set of instructions. The intermediary may send the new set of instructions to the browser that requested the web page.

Each time the intermediary intercepts instructions from the server the intermediary may generate new different instructions to send to the browser. Thus a bot requesting the same page over and over may receive a different set of instructions after each request and may not observe the same one or more operations and or objects twice. Without receiving the same one or more operation aliases and or identifiers the bot may be incapable of determining what data should be entered in and or associated with each field to collect data create a fake account order and or reserve one or more goods or services vote add malicious SQL and or submit any other malicious content.

To manage the new set of instructions including detecting potential operational changes that are introduced the intermediary may include a set of supervisor operations in the new set of instructions. The set of supervisor operations may intercept calls to one or more operations and or objects. In response to intercepting a call the set of supervisor operations may determine whether the call is allowed report telemetry data indicating that the call was made and which operation s and or object s were referenced modify the call report the call and or block the call. The features of the set of supervisor operations are discussed in detail herein.

An administrator may configure the set of supervisor operations for each operation object web page and or web site to which the set of supervisor operations is added. For example based on telemetry data received from previous supervisor operations an administrator may instruct the intermediary to generate a set of supervisor operations that imposes one or more modes on one or more operations and or objects within a page. In an embodiment a mode may prohibit calls that reference an original operation and or object. Additionally the mode may allow calls that reference a corresponding transformed operation and or object. Another mode may allow calls to an original operation and or object but may report whether a corresponding transformed operation and or object returns the same result.

In an embodiment a method comprises intercepting a first set of instructions received from a server computer that define one or more objects and one or more original operations that are based at least in part on the one or more objects modifying the first set of instructions by adding one or more supervisor operations that are based at least in part on the one or more objects transforming the one or more original operations to produce one or more transformed operations that are based at least in part on the one or more supervisor operations rendering a second set of instructions which define the one or more supervisor operations and the one or more transformed operations sending the second set of instructions to a remote client computer.

In an embodiment wherein each object of the one or more objects includes an original identifier the method comprises transforming the original identifier for each object of the one or more objects to produce to a corresponding transformed identifier updating each object of the one or more objects to include the corresponding transformed identifier modifying the first set of instructions to include the one or more supervisor operations which reference the one or more objects by the corresponding transformed identifier for each object rendering the second set of instructions which define the one or more original operations and the one or more objects.

In an embodiment the method comprises transforming an original identifier that is included in each object of the one or more objects to produce to a corresponding transformed identifier updating each object of the one or more objects to include the corresponding transformed identifier modifying the first set of instructions to include the one or more supervisor operations which when executed in a runtime environment cause intercepting a call to an operation determining the operation references a particular object by a particular transformed identifier terminating the call without performing the operation rendering the second set of instructions which define the one or more objects.

In an embodiment the one or more supervisor operations which when executed in a runtime environment cause intercepting a call to an operation sending to an intermediary computer a set of telemetry data indicating that the call to the operation was made performing the operation receiving from the remote client computer the set of telemetry data storing in a database profiling data indicating that the call to the operation was made.

In an embodiment a method comprises intercepting from a web server computer over HTTP an original HTML document and a set of original JavaScript instructions that define one or more objects in an original DOM and one or more original JavaScript methods that are based at least in part on the one or more objects injecting one or more supervisor JavaScript methods that are based at least in part on the one or more objects transforming the one or more original JavaScript methods to produce one or more transformed JavaScript methods that are based at least in part on the one or more supervisor JavaScript methods rendering a new HTML document and a new set of JavaScript instructions which define the one or more supervisor JavaScript methods and the one or more transformed JavaScript methods sending the new HTML document and the new set of JavaScript instructions to a remote client computer.

Browser may be a browser that is executed on client computer and operated by a user using client computer . For example browser may be a web browser that is configured to request data from web infrastructure and receive and execute HTML CSS and or JavaScript. illustrates a more detailed view of a web browser in an example embodiment. While browser may be described in more detail in using the particular arrangement illustrated in is not required in other embodiments. Referring now to browser includes runtime environment and browser frontend . Runtime environment may execute and maintain supervisor unit and DOM .

Browser frontend may cause one or more objects to be presented and or updated visually and or audibly to a user using client computer . Browser frontend may receive one or more inputs. For example in response to a user pressing a particular button on a mouse or keyboard coupled to client computer browser frontend may receive data from the operating system running on client computer indicating that a user pressed the particular button.

Browser frontend and runtime environment may be communicatively coupled. For example in response to receiving the data from the operating system browser frontend may call an operation or cause an operation to be called such as untransformed method call method call and or transformed method call . One or more of the calls may be intercepted by supervisor unit . If an operation is executed which operates on one or more objects in DOM then browser frontend may update the user interface accordingly.

Supervisor unit manages calls to one or more operations and or objects that operate on and or reference one or more objects in DOM such as object and secure object . Additionally or alternatively supervisor unit may log and or send telemetry data describing which operation s were called what parameters were passed the call stack that led up to the called operation s which object s were referenced and or any other information regarding the state of runtime environment or the supervisor unit. For purposes of illustrating clear examples and for convenience the supervisor unit may represent in the form of a single functional unit a set of one or more supervisor operations.

Supervisor unit may manage execution of each operation in one or more modes such as compatibility mode profiling mode and or enforcing mode. Each mode may be applied to one or more operations independently. For example supervisor unit may manage the execution of a first operation in compatibility mode a second operation in profiling mode a third operation in enforcing mode and a forth operation in compatibility mode and profiling mode. However supervisor unit need not manage execution of a fifth operation. Each mode is discussed in detail herein.

Returning to web infrastructure may be one or more server computers that receive requests for data from users such as a user using browser through intermediary computer . In response web infrastructure may send data to browser through intermediary computer . As illustrated in the data sent from web infrastructure may include instructions HTML JavaScript and CSS .

Original web server computer may be a server computer that receives requests for data and responds with data. For example original web server computer may be an HTTP based web server that receives HTTP requests and responds with data comprising HTML CSS and or JavaScript instructions. Additionally or alternatively original web server computer may respond with data that references additional data on other server computers such as third party web server computers .

Third party web server computers may be one or more server computers that store additional data referenced by instructions sent from original web server computer . For example data from original web server computer may include a reference to a JavaScript file stored on third party web server computers . Accordingly a browser or a browser backend may request the referenced JavaScript file from third party web server computers . Also for example data from original web server computer may include a reference to an image stored on third party web server computers . Accordingly a browser may request the referenced image from third party web server computers .

Returning now to intermediary computer may intercept instructions sent from web infrastructure generate new instructions add supervisor instructions and send the new instructions to browser . For example intermediary computer may intercept HTML JavaScript and CSS add supervisor instructions to implement a set of supervisor operations generate HTML JavaScript and CSS which may be different than HTML JavaScript and CSS and send HTML JavaScript CSS and supervisor instructions to browser . Additionally intermediary computer may intercept a request from browser generate a new modified request and send the new modified request to web infrastructure .

In intermediary computer may be an HTTP intermediary that intercepts and modifies HTML JavaScript CSS and HTTP requests for HTTP web browsers. However intermediary computer may be an intermediary for any other standard and or proprietary protocol. Intermediary computer may also add supervisor instructions to the modified HTML JavaScript and or CSS. Furthermore each of the components discussed which intermediary computer is comprised of may be configured to perform any of the processes and or methods discussed herein for any standard and or proprietary protocol.

Intermediary computer may be a server computer that is located on the same network as web infrastructure . Additionally or alternatively intermediary computer may be topologically located between a public facing router and web infrastructure logically and or physically. Accordingly requests from browser to web infrastructure may be passed through and or modified by intermediary computer . Furthermore instructions from web infrastructure to browser may be passed through and or modified by intermediary computer .

Protocol client module may intercept data over any standard or proprietary protocol. For example protocol client module may intercept data over HTTP. Accordingly protocol client module may be communicatively coupled with web infrastructure original web server computer and third party web server computers .

Browser backend may be an HTTP based headless browser. Additionally or alternatively browser backend may be a headless browser based on one or more other standard and or proprietary protocols. Browser backend may make requests for additional data. For example if instructions received from protocol client module reference additional instructions stored on a third party web server browser backend may request the additional instructions through protocol client module .

Browser backend may perform and or parse one or more instructions intercepted by protocol client module . After performing and or parsing the instructions browser backend may notify forward transformer to begin generating new instructions based on the objects and or operations that are currently in memory. Browser backend may generate and or store the objects and or operations in memory by parsing the one or more instructions intercepted by protocol client module . Additionally or alternatively browser backend may be a headless browser that may generate and or store the object and or operations in memory by executing at least a portion of the one or more instructions intercepted by protocol client module .

Forward transformer may operate on the objects and or operations created by browser backend generate one or more attribute maps and or DOM maps render a new set of instructions based on the one or more operations and or objects in memory and add supervisor instructions to the rendered instructions based on one or more configurations specified in configuration . For example browser backend may modify the objects and or operations in memory according to one or more real time polymorphic methods modifying one or more object identifiers attribute or relationship s with one or more other objects. Forward transformer may send the rendered instructions to protocol server module . Forward transformer may send the attribute maps and or DOM maps to transaction store .

The supervisor instructions added need not be same supervisor instructions for each set of instructions rendered. For example if configuration indicates that a set of supervisor operations should profile a particular page then forward transformer may add supervisor instructions which when executed send telemetry data to intermediary computer . However if configuration changes and now indicates that the added set of supervisor operations should enforce transformations in the particular page then forward transformer may add different supervisor instructions which when executed prevent calls to non transformed operations from being executed.

Protocol server module may receive the instructions generated by forward transformer and send the generated instructions to browser . Additionally or alternatively protocol server module may intercept requests from browser and forward the requests to transaction store .

Transaction store may receive requests intercepted by protocol server module from browser . Transaction store may retrieve one or more attribute maps and or DOM maps based on data in the request and forward the request with the retrieved one or more attribute maps and or DOM maps to reverse transformer . Accordingly transaction store may be communicatively coupled with reverse transformer .

Reverse transformer may transform requests intercepted by protocol server module which are based on instructions generated by forward transformer into requests that would have been generated by browser had browser received the original instructions sent from original web server computer . Reverse transformer may transform requests based on the one or more attribute maps and or DOM maps retrieved by transaction store . Reverse transformer may send the transformed request to original web server computer through protocol client module .

Telemetry handler may receive telemetry data from browser . Telemetry handler may store the telemetry data or data derived from the telemetry data in data store . For example telemetry handler may receive telemetry data that transformed method was called and that an object identifier was correctly derived when the modified method was executed.

Returning now to a user such as an administrator for web infrastructure may use management computer to retrieve data from data store . For example management computer may display profiling data stored in data store through profiling interface . Profiling interface may present profiling data in data store to help an administrator determine whether intermediary computer is successfully transforming one or more operations which are defined in one or more pages on one or more sites.

Management interface may present data indicating the current mode s a supervisor unit is implementing for one or more operations defined in one or more pages on one or more sites as defined in configuration . Management interface may also provide controls for a user to change the mode s a supervisor unit should impose on one or more operations for each page and or site. Thus a user through management computer may modify configuration based on the profiling data displayed. Intermediary computer may update the behavior of the added set of supervisor operations based on modified configuration .

While profiling interface and management interface and are illustration as if separate interfaces management interface and profiling interface may be the same interface. For example a single interface may display whether a transformed operation was correctly transformed. The single interface may also present controls to change the mode implemented by the set of supervisor operations for the transformed operation. Accordingly in an embodiment profiling interface and management interface are the same interface. For example management computer may cause profiling data to be displayed which indicates that a particular operation is transformed correctly 100 of the time for a particular web page. Management computer may also cause to display a button near the profiling data which when selected causes configuration to be updated to indicate that the set of supervisor operations added to the particular web page should use enforcement mode for the particular operation.

In an embodiment a data processing method may be configured to intercept the instructions associated with a web page from a server computer and generate new different instructions based on the intercepted instructions and add a set of supervisor operations. In an embodiment a data processing method may be configured to add a new different set of supervisor operations than a previously generated set of supervisor operations based on a configuration that assigns a mode globally and or specifically to one or more operations on one or more pages and or sites. For purposes of illustrating clear example embodiments discussed herein may send and or receive HTML and or JavaScript instructions over HTTP. However in other embodiments the methods and processes discussed herein my use other standard and or proprietary instructions over other standard and or proprietary protocol s .

To illustrate clear examples of various modes in a set of supervisor operations program code snippets are provided herein according an example embodiment. However other embodiments need not use these specific snippets. Furthermore each snippet may be discussed with reference to however the particular embodiment illustrated in is not required in other embodiments.

In profiling mode a set of supervisor operations may report calls made to one or more operations. For example a set of supervisor operations may send and or store telemetry data which may comprise information about one or more calls to one or more operations to an intermediary server computer and or other data store. An administrator may review the telemetry data and determine going forward whether the set of supervisor operations should switch to enforcing mode or compatibility mode for one or more operations. In profiling mode a set of supervisor operations need not prevent the originally called method from being performed.

Snippet 1 is an example set of instructions written in JavaScript for a set of supervisor operations which when executed by a JavaScript runtime environment in an embodiment intercepts a call to an operation in profiling mode.

In line 1 of Snippet 1 an original method which is originally aliased as method is assigned a new alias allowed method . Thus after line 1 is parsed and or executed the original method may be called using the new alias.

In line 2 the original alias method is set as an alias for a new method defined in lines 2 through 5. Thus after lines 2 through 5 are parsed and or executed the new method may be called using the original method s original alias method . Supervisor unit may intercept calls such as method call which was called to invoke the original method. In response supervisor unit may perform the new method currently aliased as method .

In response to intercepting method call supervisor unit may cause line 3 and line 4 to be executed. In line 3 telemetry data is sent to the server which describes the call that was made and which object identifier was used. For example supervisor unit may send DOM telemetry to intermediary computer . In line 4 the original method is called with allowed method call using the new alias allowed method . Thus supervisor unit intercepts method call sends telemetry data to intermediary computer and then executes the original method.

In enforcing mode a set of supervisor operations may block calls to untransformed operations. Additionally or alternatively in enforcing mode a set of supervisor operations may block a call to an original operation if one or more objects and or object identifiers referenced by the operation or the call are not transformed.

Snippet 2 is an example set of instructions written in JavaScript for a set of supervisor operations which when executed by a JavaScript runtime environment in an embodiment blocks calls to untransformed operations.

In line 1 of Snippet 2 an original method which is originally aliased as method is assigned a new alias allowed method . Thus after line 1 is parsed and or executed the original method may be called using the new alias.

In line 2 the original alias method is set as an alias for a first new method defined in lines 2 through 4. Thus after lines 2 through 4 are parsed and or executed the first new method may be called using the original method s original alias method . Supervisor unit may intercept calls such as method call which was called to invoke the original method. In response supervisor unit may perform the first new method currently aliased as method which blocks the original method from being called.

In response to intercepting method call supervisor unit may cause line 3 to be executed. In line 3 supervisor unit calls a blocking method blocked method . The blocking method may return control to the caller. Additionally or alternatively the blocking method may cause an alert to be shown an exception to be raised telemetry data to be sent and or any other method or operation to warn the user or an administrator of the intermediary computer or web infrastructure.

No instruction is included in the first new method to call the original method using the new alias allowed method . Thus supervisor unit may intercept method call and block the original method currently aliased as allowed method from being executed when the method alias is used.

In line 5 a new alias transformed method is set as an alias for a second new method defined in lines 5 through 7. Thus after lines 5 through 7 are parsed and or executed the second new method may be called using the new alias transformed method . Supervisor unit may intercept calls such as transformed method call which was inserted by intermediary computer . In response supervisor unit may perform the second new method aliased as transformed method issuing allowed method call . Allowed method call may cause the original method aliased as allowed method to be called.

Supervisor unit may use enforcing mode to block calls to transformed operations in other embodiments. For example Snippet 3 is an example set of instructions written in JavaScript for a set of supervisor operations which when executed by a JavaScript runtime environment in an embodiment blocks calls that reference one or more objects that are not transformed.

In line 1 of Snippet 3 an original method which is originally aliased as method is assigned a new alias allowed method . Thus after line 1 is parsed and or executed the original method may be called using the new alias.

In line 2 the original alias method is set as an alias for a new method defined in lines 2 through 7. Thus after lines 2 through 7 are parsed and or executed the new method may be called using the original method s original alias method . Supervisor unit may intercept calls such as method call which was called to invoke the original method. In response supervisor unit may perform the new method currently aliased as method which prevents the original method from being called if the identifier stored in objectID is not a transformed object otherwise the original method is executed with the transformed identifier stored in objectID.

In response to intercepting method call supervisor unit may cause line 3 to be executed. In line 3 a method is called that determines whether the object passed to the method is a transformed object or if the object identifier passed to the method is a transformed object identifier. Determining whether an identifier is a transformed identifier may be based on one or more methods. For example a table of transformed object identifiers may be maintained if the object identifier is found in the table then the object identifier is a transformed identifier. Additionally or alternatively a list of original object identifiers that have been transformed may be maintained if the object identifier is found in the table then the object identifier is not a transformed identifier. Additionally or alternatively the identifier may contain data or labels that indicate it is a transformed identifier. For example if the object identifier includes the string secure then the identifier may be determined to be a transformed identifier.

If in line 3 the object identifier is determined to not be a transformed identifier then control proceeds to line 4 and supervisor unit calls a blocking method blocked method . For purposes of illustrating a clear example assume that the identifier stored in variable objectID includes the original identifier to secure object . Accordingly supervisor unit calls a blocking method blocked method .

If in line 3 the object identifier is determined to be a transformed identifier such as secure object then control proceeds to line 6 and supervisor unit may make allowed method call which calls the original method using the new alias allowed method which operates on secure object .

In compatibility mode a set of supervisor operations may allow original operations to be executed regardless of whether the called operation has an alternate transformed alias or references one or more original or transformed object identifiers. For example a set of supervisor operations in compatibility mode may report the results of a transformed method against the results of the corresponding original method to determine whether the transformed method is transformed correctly. The results or the result of the comparison may be sent to intermediary computer as DOM telemetry data .

Snippet 4 is an example set of instructions written in JavaScript for a set of supervisor operations which when executed by a JavaScript runtime environment in an embodiment intercepts a call to an operation in compatibility mode. For purposes of illustrating a clear example assume that some new method is an alias for a new method that was added by intermediary computer which is supposed to be a transformation of the original method originally aliased as method .

In line 1 of Snippet 4 an original method which is originally aliased as method is assigned a first new alias untransformed method . Thus after line 1 is parsed and or executed the original method may be called using the first new alias untransformed method .

In line 2 a second new alias transformed method is set as an alias for a first new method defined in lines 2 through 4. Thus after lines 2 through 4 are parsed and or executed the first new method may be called using the second new alias transformed method . Upon receiving a call for the first new method line 3 is executed which calls a new method which is expected to return the same value as original method.

In line 5 a new alias test transformed method is set as an alias for a second new method defined in lines 5 through 13. Thus after lines 5 through 13 are parsed and or executed the second new method may be called using the new alias test transformed method . In line 6 the original untransformed method is called and the resulting value is stored in a variable v1. In line 7 the transformed method is called and the resulting value is stored in variable v2. In line 8 the results are compared. If the results are determined to be equal then control proceeds to line 9. In line 9 telemetry data indicating that the original method was successfully transformed is sent to intermediary computer . Otherwise if the results are determined not to be equal then control proceeds to line 11. In line 11 telemetry data indicating that the original method was not successfully transformed is sent to intermediary computer . Other embodiments may add to remove from reorder and or modify any of the telemetry data sent to intermediary computer .

A set of supervisor operations need not intercept all calls to all methods. A set of supervisor operations may selectively intercept method calls by selectively reassigning the original aliases for particular methods and or operations. For example in supervisor unit need not reassign the alias for a particular untransformed method which operates on untransformed object . Accordingly supervisor unit may fail to intercept untransformed method call .

When an operation is transformed instructions that make calls to the original operation may be transformed as well. For example if a JavaScript method myMethod is transformed to use a new alias mySecureMethod then instructions that call the original method using the alias myMethod may also be updated to use the new alias mySecureMethod . However malicious code on the remote client computer which has not passed through intermediary computer is not transformed to use the new transformed aliases.

In step the supervisor unit determines whether the intercepted call is allowed. For example supervisor unit may be configured to regulate calls in enforcement mode using one or more methods discussed herein. If supervisor unit determines that the transformed method call is allowed then control proceeds to step otherwise control proceeds to step . For purposes of illustrating a clear example assume that supervisor unit determines that transformed method call is allowed and control proceeds to step .

In step the supervisor unit determines whether the intercepted call is allowed to reference the object using the identifier. For example supervisor unit may use one or more of the methods discussed herein to determine whether the reference to secure object received in step is allowable. If so control proceeds to step otherwise control proceeds to step . For purposes of illustrating a clear example assume that supervisor unit determines that the identifier received in step is a transformed identifier and is allowed.

In step the supervisor unit calls the method to perform the intended operation. For example supervisor unit may make allowed method call which operates on secure object .

In step the supervisor unit determines whether telemetry data should be sent to an intermediary server computer. If so control proceeds to step otherwise control terminates in step . For purposes of illustrating a clear example assume supervisor unit is configured to operate in profiling mode for all calls intercepted by supervisor unit . Thus control proceeds to step .

In step the supervisor unit sends telemetry data to an intermediary computer. For example supervisor unit may send telemetry data describing which call was intercepted and or any other data related to the intercepted call such as whether the call was allowed or successfully transformed. Control then terminates in step .

Turning now to step an intermediary computer intercepts a first set of instructions from a remote server computer. For example protocol client module may receive instructions from original web server computer in response to a request from visitor browser .

In step the intermediary computer parses the intercepted instructions. For example protocol client module may send the HTML and or JavaScript instructions to browser backend . Browser backend may parse the received HTML and JavaScript instructions. For purposes of illustrating a clear example assume that the intercepted set of instructions include instructions that define an original JavaScript method which operates on an original object using an original object identifier.

In step the intermediary computer transforms one or more objects. For example forward transformer may transform the original object to produce a transformed object. Specifically forward transformer may transform the original object identifier to produce a transformed object identifier which identifies the transformed object.

In step the intermediary computer transforms one or more operations and adds a set of supervisor operations to the new set of instructions based on a configuration. For purposes of illustrating a clear example assume that configuration indicates supervisor instructions should be added which when executed perform the original JavaScript method in profiling mode. Accordingly forward transformer transform the original operation and may add supervisor instructions which when executed intercept calls to the original method and implement the original method in profiling mode. As discussed herein the modes that a set of supervisor operations uses for operations in a web page may be different based on changes in the configuration such as configuration . Thus the set of supervisor operations may implement a different set of modes for a first intercepted page than a second intercepted page even if the first intercepted page and the second intercepted page are the same page. Furthermore since operations and or objects may be transformed differently each time the same set of instructions are intercepted the supervisor instructions may be different for each intercepted set of instructions.

In step the intermediary computer sends a second set of instructions to the remote client computer. For example forward transformer sends a second set of HTML and or JavaScript instructions which define the transformed object the transformed JavaScript method and the added set of supervisor operations.

Turning now to step in an intermediary computer receives telemetry data over HTTP. For purposes of illustrating a clear example assume that before step a first set of HTML and JavaScript instructions with a particular JavaScript method was intercepted the instructions were transformed and a set of supervisor operations was added to produce a second set of HTML and JavaScript instructions the second set of HTML and JavaScript instruction were sent to the intended remote client computer. Browser running on client computer may send telemetry data over HTTP to telemetry handler indicating that a transformed JavaScript method aliased as transformed method was executed successfully.

In step the intermediary computer extracts profiling data. For example telemetry handler may store profiling data based on the telemetry data received in step . The profiling data may indicate that the transformed JavaScript method aliased as transformed method was successfully executed for an instance of a web page identified as the home page on a particular web site. The profiling data may comprise data included in or derived from the telemetry data. For example telemetry handler may determine that the original alias of the transformed JavaScript method is method . Also for example the profiling data may comprise data that associates the original alias and or the transformed alias with the particular web page home page for the particular web site. Also for example the profiling data may comprise a set of data that describes how often an operations and or objects are successfully transformed.

In step the intermediary computer stores the profiling data. For example intermediary computer stores the profiling data extracted in step in data store .

In step a management computer displays profiling data through a profiling user interface. For example in response to input from a user management computer may send a request for profiling data to data store . The request may include additional criteria. Data store may return profiling data that matches the criteria to management computer . The criteria may include a one or more object identifiers operations web pages web sites dates times and or any other profiling data stored in data store . The criteria may also specify one or more operations data store should perform before sending the matching profiling data to the management computer such as grouping aggregating and or any other database operations. After receiving the requested profiling data management computer may cause the profiling data to be displayed through profiling interface .

In step the management computer receives input through a management interface and updates a configuration. For example a user may determine that a particular transformed JavaScript method originally aliased as method was successfully transformed and executed more than a particular threshold to begin having the set of supervisor operations use the enforcing mode on calls to the transformed method. Accordingly a user may select an input that indicates going forward when the home page is intercepted a set of supervisor operations may use the enforcing mode to enforce use of the transformed method and block use of the original JavaScript method. Management computer may update configuration accordingly.

In step the intermediary computer intercepts HTML and JavaScript instructions from a web server computer over HTTP to a remote client computer running a web browser. For example protocol client module may receive instructions from original web server computer in response to a request from browser for the particular page home page . The instructions may comprise HTML and JavaScript instructions. For purposes of illustrating a clear example assume that the intercepted JavaScript instructions define a JavaScript method aliased as method .

In step the intermediary computer parses the intercepted HTML and JavaScript instructions and transforms one or more operations and or objects defined in the instructions. For example intermediary computer may parse the intercepted HTML and JavaScript instructions and may transform the JavaScript method originally aliased as method to a transformed method aliased as transformed method .

In step the intermediary computer transforms references from original object identifiers in the intercepted HTML and or JavaScript instructions to transformed identifiers. For example references to the original JavaScript method method in the intercepted HTML and JavaScript instructions may be transformed to reference the transformed JavaScript method transformed method .

In step the intermediary computer adds supervisor instructions to the transformed instructions to produce a new set of HTML and JavaScript instructions. For example intermediary computer may use one or more of the methods discussed herein to add supervisor instructions based on configuration to the new set of HTML and JavaScript instructions. In this example the added supervisor instructions when executed in a runtime environment may intercept and block calls made to the original JavaScript method method and intercept and allow calls to the transformed JavaScript method transformed method . The set of supervisor operations when executed in the runtime environment may also block calls to the transformed JavaScript method transformed method if the calls use original object identifiers rather than transformed object identifiers.

In step the intermediary computer sends the new set of HTML and JavaScript instructions to the remote client computer. For example intermediary computer may send the new set of HTML and JavaScript instructions which define the set of supervisor operations and the transformed operations and or objects to browser over HTTP.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

Using the networked computer arrangements intermediary computer and or processing methods described herein security in client server data processing may be significantly increased. In particular the use of browser programs may become significantly more secure. Employing one or more of the techniques discussed herein may effectively permit obfuscating data field and or container identifiers and DOM modification for data that is financial personal or otherwise sensitive so that attackers cannot determine which fields and or containers in a web page include the sensitive data. Consequently one or more various attacks such as a denial of service DOS attack credential stuffing fake account creation ratings or results manipulation man in the browser attacks reserving rival goods or services scanning for vulnerabilities and or exploitation of vulnerabilities are frustrated because all fields and or containers appear to the attacker to be gibberish or at least cannot be identified as indicating credit card data bank account numbers personally identifying information confidential data sensitive data proprietary data and or other data.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention and what is intended by the applicants to be the scope of the invention is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

