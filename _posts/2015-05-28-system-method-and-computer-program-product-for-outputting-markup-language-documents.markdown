---

title: System, method, and computer program product for outputting markup language documents
abstract: A system, method, and computer program product are provided for use in connection with at least one computer-readable Extensible Markup Language (XML)-compliant data document capable of including: a plurality of line items with a plurality of data values, and a plurality of computer-readable semantic tags that describe a semantic meaning of the data values.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09268748&OS=09268748&RS=09268748
owner: e-Numerate Solutions, Inc.
number: 09268748
owner_city: Great Falls
owner_country: US
publication_date: 20150528
---
This application is a continuation in part for the purposes of providing a glossary in accordance with the Glossary Pilot Program of application Ser. No. 11 819 125 filed Jun. 25 2007 which in turn is a divisional of application Ser. No. 09 573 419 filed May 18 2000 now U.S. Pat. No. 7 249 328 which in turn claims priority to Provisional U.S. Patent Application No. 60 135 525 filed on May 21 1999 and Provisional U.S. Patent Application No. 60 183 152 filed on Feb. 17 2000 which are all incorporated herein by reference.

The following identified U.S. patent applications are also relied upon and are incorporated by reference in this application.

U.S. patent application Ser. No. 09 573 780 now U.S. Pat. No. 7 650 355 entitled Reusable Macro Markup Language filed on May 18 2000.

U.S. patent application Ser. No. 09 573 419 now U.S. Pat. No. 7 249 328 entitled Tree View for Reusable Data Markup Language filed on May 18 2000.

U.S. patent application Ser. No. 09 573 413 now U.S. Pat. No. 6 920 608 entitled Chart View for Reusable Data Markup Language filed on May 18 2000.

The present invention relates generally to data processing systems and more particularly to a computer markup language for use in a data browser and manipulator.

A system method and computer program product are provided for use in connection with at least one computer readable Extensible Markup Language XML compliant data document capable of including a plurality of line items with a plurality of data values and a plurality of computer readable semantic tags that describe a semantic meaning of the data values.

Methods and systems in accordance with the present invention provide a markup language referred to as Reusable Data Markup Language RDML that permits the browsing and manipulation of numbers and provide a related data viewer that acts as a combination Web browser and spreadsheet analytic application that may automatically read numbers from multiple online sources and manipulate them without human intervention. Using the markup language users may browse online sources using numerical based queries and the data viewer may automatically combine and manipulate multiple documents on a single display.

In accordance with an implementation consistent with the present invention a method in a data processing system is provided that receives a first markup document and a second markup document both the first markup document and the second markup document containing numerical values and tags reflecting characteristics of the numerical values. The method automatically combines the first markup document and the second markup document into a single data set and displays the single data set.

In accordance with another implementation a method in a data processing system is provided that receives a document containing numerical values and receives indications of characteristics of the numerical values the characteristics including a unit and a magnitude. Further it adds the received indications into the document as tags associated with the numerical values to create a markup document.

In accordance with yet another implementation a method in a data processing system is provided that receives a markup document having a set of numerical values and tags indicating characteristics of the numerical values and determines a transformation for the set of numerical values to reflect new characteristics. The method then accesses a plurality of the tags of the set of numerical values the plurality of the tags indicating magnitude scale modifier units measure adjustment and aggregation. Furthermore the method determines conversion factors for the magnitude scale modifier units measure adjustment and aggregation tags to accomplish the transformation to the new characteristics and multiplies the set of numerical values by the determined conversion factors to transform the set of numerical values to reflect the new characteristics.

Methods and systems in accordance with the present invention provide a chart view that automatically manipulates and graphically displays numerical data. The manipulation and display is based on attributes associated with the numerical data describing characteristics of the numerical data. The chart view facilitates the simultaneous display of different series of numerical values of different types on a single chart and automatically displays appropriate descriptive textual components e.g. axis labels axis titles chart titles number precision legends footnotes axis scales etc. The chart view allows single click transformations of series of numerical values and provides automatic formatting of descriptive textual components in response.

In accordance with an implementation of the present invention a method in a data processing system having a display showing a chart is provided that receives a series of numerical values with tags indicating characteristics of the numerical values and displays the numerical values on the chart. Further the method automatically determines a title for the numerical values based at least one of the tags and displays the determined title on the chart.

In accordance with another implementation of the present invention a method in a data processing system having a display showing a chart is provided that receives a first series of numerical values having tags indicating characteristics of the numerical values and displays the first series of numerical values on the chart the first series of numerical values corresponding to a first axis on the chart. The method further receives a second series to be added to the chart the second series of numerical values having tags indicating characteristics of the second series of numerical values and automatically generates a second axis on the chart. Finally the method displays the second series of numerical values on the chart corresponding to the second axis while the first series is displayed on the chart.

In accordance with yet another implementation of the present invention a method in a data processing system having a display showing a chart is provided that receives an instruction to display a series of numerical values on the chart on the display the numerical values having tags indicating characteristics of the numerical values and displays the series of numerical values on the chart in response to the received instruction. The method then automatically formats the chart based on at least one of the tags in response to the received instruction.

In accordance with another implementation of the present invention a data processing system is provided comprising a memory storing a charting application configured to manipulate and display numerical data the memory having a selected series of numerical values having a tag indicating text information associated with the numerical values. The data processing system further comprises a display showing a chart having a legend that displays the text information associated with the selected series of numerical values. The legend word wraps and scrolls the text information associated with the series of numerical data when the text information does not fit on the legend on the chart. The system further comprises a processor for running the charting application.

Methods and systems in accordance with the present invention provide a tree view that automatically manipulates and graphically displays numerical data. The tree view facilitates the simultaneous display of different series of numerical values of different types on a single display and automatically displays descriptive textual components. The tree view allows single click transformations of series of numerical values and provides automatic formatting of descriptive textual components in response. It further visually displays the relationship between series of numerical data for a user while supplying the user with hyperlinks associated with a given series of numerical data.

In accordance with an implementation of the present invention a method in a data processing system is provided that receives a first and a second series of numerical values and determines the relationship between the first and second series of numerical values. The method then displays an icon depicting the relationship between the first and second series of numerical values based on the determined relationship.

In accordance with another implementation of the present invention a method in a data processing system is provided that receives a series of numerical values and a link associated with the series of numerical values the link having a list of associated hyperlinks. The method displays the series of numerical values and the associated link and receives an instruction to activate the link. Further the method displays the list of hyperlinks associated with the link in response to the received instruction.

In accordance with yet another implementation of the present invention a method in a data processing system having a display showing a chart is provided that receives a series of numerical values having associated metadata documentation. The method further receives an instruction to select the series of numbers and displays the series of numerical values on the chart while displaying the metadata documentation associated with the series of numerical values.

In accordance with another implementation of the present invention a data processing system is provided that comprises a memory having a program for manipulating numerical values and storing a first series of numerical values and a second series of numerical values. The data processing system further comprises a display that displays the first and second series of numerical values and a relationship icon depicting the relationship between the first series of numerical values and the second series of numerical values. Finally the data processing system further comprises a processor for running the program.

Methods and systems in accordance with the present invention provide a markup language referred to as Reusable Macro Markup Language RMML for producing and utilizing macros which are reusable numerical analysis routines which can be written quickly cheaply and in a form usable by a broad range of data documents in RDML the platform upon which the macros are run.

RMML allows reusable spreadsheet type macros to be posted as web documents to be searched by search engines to be combined into more complex programs and to be reused with many data documents. RMML brings to spreadsheet manipulation routines the economic and productivity benefits of 1 standardization 2 interchangeable parts 3 specialization and assembly line techniques in creation and 4 economies of scale in creation and deployment. In addition RMML brings to spreadsheet macros and numerical programming some of the benefits of the World Wide Web 1 widespread accessibility on demand 2 ability to search for documents in this case search for capabilities and behavior of routines instead of text or data and 3 the ability to hyperlink documents including the ability of macros to call each other remotely .

In accordance with an implementation of the present invention a data processing system method is provided that receives a macro defined to perform an operation on a series of numerical values and receives a series of numerical values having tags indicating characteristics of the numerical values. The method then performs an operation defined by the macro on the series of numerical values using the indicated characteristics.

In accordance with another implementation of the present invention a data processing system method is provided that receives a macro defining an operation on a set of numerical values and receives a vector or matrix of numerical values. The method then performs an operation defined by the macro using the vector or matrix as a variable in the operation.

In accordance with yet another implementation of the present invention a data processing system is provided that includes a memory containing a numerical analysis program having a macro defined to perform an operation on a series of numerical values and a series of numerical values having tags indicating characteristics of the numerical values. It further comprises a processor for running the program such that the program performs an operation defined by the macro on the series of numerical values using the indicated characteristics and a display for displaying results of the operation.

Methods and systems consistent with the present invention provide a markup language referred to as Reusable Data Markup Language RDML and a data viewer referred to as the RDML data viewer that is used to retrieve manipulate and view documents in the RDML format. Generally RDML permits the browsing and manipulation of numbers and allows the viewer to act as a combination Web browser and spreadsheet analytic application that may automatically read numbers from multiple online sources understand their meaning and manipulate them without human intervention. The RDML data viewer may use the Internet to obtain requested sets of numbers like HTML does for text. Using RDML it is possible to form a search on the Internet that is a true query of numbers. One such request is the creation of a list of quarterly revenues from 1996 to 1997 pertaining to companies with sales growth greater than 10 percent and no taxable income. After receiving any requested sets of numerical data the data viewer may automatically transform and combine them even if they are in different formats i.e. one in thousands of U.S. dollars and another in hundreds of French francs on a single graphical display without requiring the user to make manual adjustments. The user may then make single click adjustments to the display e.g. adjust for inflation currencies time periods number precision etc. to see different aspects of the received information. RDML generally facilitates numerical browsing by associating numbers with attributes describing the meaning of the numbers.

Although the preferred embodiment of RDML is a markup language that is a fully compliant implementation of XML version 1.0 other implementations are possible. XML is described in detail in XML Bible Elliotte Rusty Harold IDG Books Worldwide 1999 which is incorporated herein by reference. The RDML data viewer is a data browser data manipulator data viewer in the form of charts spreadsheets etc. and general user interface for data documents. It greatly extends the capabilities provided by current spreadsheet and database management programs. In addition to extended capabilities it lowers costs to businesses by permitting efficient reuse of data functions and report formats.

The RDML data viewer works with RDML formatted data documents which are files that may be stored locally over a network including the Internet or in any combination of sources. The structure of the RDML data files allows the RDML data viewer to act as a combination browser and analytic program such as a spreadsheet which can automatically read interpret and manipulate numbers in its integrated analytic program. The RDML data viewer also provides a macro development and management scheme which allows users to create custom routines for the manipulation transformation and display of RDML formatted data. Macros and related aspects are described in greater detail below.

Analysis routines can be developed for data and placed in their own documents referred to as Reusable Macro Markup Language RMML Macro Documents which are another input to the data viewer and are optional. These routines are reusable they can be applied to virtually any data document meeting the requirements set forth in the RMML document . For example an RMML document may contain routines for converting RDML data to different currencies and any data denominated in currency can use the RMML currency conversion macro. The preferred embodiment of RMML is also a fully compliant implementation of XML version 1.0 although other embodiments are possible.

Similarly Reusable Data Style Language RDSL style sheets another optional input to the data viewer can be applied to data documents to create specially formatted output reports. A RDSL is a fully compliant implementation of Extensible Style Language XSL which is described in detail in XML Bible Elliotte Rusty Harold IDG Books Worldwide 1999. These RDSL documents are XSL compliant style sheets which essentially act as report writers for RDML data documents . A typical use would be for data documents containing corporate financial statements. A single RDML data document may contain a set of financial statements but several different style sheets could be applied one to show the data in annual columns one to show it in a quarterly breakdown one to show it in European format and so forth. The RDML data viewer automatically combines data documents and style documents to create reports.

RDML dramatically reduces the expense time and complexity of data manipulation by addressing the aforementioned problems of documentation of data non standardization of analytic routines and low conceptual level calculations of data. RDML addresses the problem of the separation of data and its documentation by encapsulating data and its documentation together in machine readable form that can be used interactively. This differs from the approach of conventional relational databases in which data is kept in the computer and the documentation typically kept in a three ring binder or other printed document. The separation of data and its documentation often ensures the need for high priced database programmers every time the data must be accessed used or transferred. Documentation in RDML also differs from that of spreadsheets which tend to be personal in that the documentation is in the head and personal notes of the creator. In one implementation consistent with the present invention RDML encapsulates machine readable documentation with the data. The data and its documentation metadata are used together by the data viewer to interpret what the numbers mean how they are to be used and how they are to be displayed. The small up front investment in refining the raw data pays off in the lessened need for human labor to access and reuse the data in the future. RDML incorporates several important types of metadata sources contacts license requirements expirations and update information data types data classes handling instructions e.g. what to do with nulls missing values etc. units and measurements and other information needed to produce the various presentations.

Use of RDML addresses the problem of non standardization by defining standards for both data characteristics and analytic routine interfaces. Standardization leads to component reuse automation of production and more rapid development of product enhancements. While the computer industry has developed standards for file formats and function level interfaces it has not developed general data format or content analysis standards. For example once data is input to an application whether spreadsheet database or other the user may want to manipulate the data and see basic statistics for the different line items sums averages changes variances and so forth adjustments for standard changes adjustments for inflation conformance to industry indexes of stock market averages etc. or standard ratios debt equity price earnings etc. Because there is neither a standard general data format nor a standard analytic routine interface users currently create each of these manipulation routines from primitive coding. In spreadsheets they must input formulas and conversion factors number by number and in databases they must write SQL queries or other programming routines to manipulate the data.

RDML provides both the data standard and the function interface for manipulation routines. This means that a routine can be written to apply to any line item that meets the conditions it imposes and these routines are reusable. Currently conventional spreadsheet macros one analogue to RDML macros are typically only used in the spreadsheet for which they were designed. The macros cannot typically be used in another spreadsheet where the numbers may be in different cells or in different units. RDML macros are not dependent on cell position or human intervention to conform data they can be directly used by others for other data sets. If a user writes a routine which for instance calculates and graphs a moving average of a time series it can be used by any time series in any RDML document .

While solving documentation and standardization problems use of RDML also addresses the problem of calculations occurring at too low a conceptual level by creating data objects at the line item and document levels whereas conventional spreadsheets operate only at the cell single number level. For instance calculations that may be common to a set of data i.e. a line item may operate more efficiently because they can be applied once as opposed to being applied individually to many different single numbers or cells. Furthermore analytic routines macros can be combined applied successively or used by inheritance to create new routines. The line item orientation dramatically reduces the number of formulas that need to be written one per line instead of one per number . It also increases the readability of program code because the user can review the logic at a higher level of abstraction.

In addition to solving these problems RDML reduces costs time and complexity for operations on the side of the data consumer the data publisher and the program developer. To utilize and manipulate data typically a user retrieving data over the Internet views a text version of the data prints the data in HTML ASCII or PDF format and then types the numbers into a spreadsheet or database program. The RDML data viewer automates this process by making the data immediately available to other programs as interpretable data the user does not need to retype it. Upon locating numerical sets of data from multiple online sources the data viewer automatically normalizes collates transforms and formats the data.

Some conventional systems make data available for download as data in either a common spreadsheet format such as Lotus or Excel or in a comma delimited or other common text format. This at least saves the user the necessity of retyping certain numbers but creates a new problem of manipulating the data to get it into a more usable form e.g. normalized standardized .

As such RDML and its related data viewer normalizes data for added efficiency. Normalizing data is primarily a matter of conforming key fields including matching dissimilar fields resolving conflicts in categories resolving the handling of duplicates etc. In order to be useful data should be conformed to a format that can be read by an application such as a graphing routine or calculation routine . For example the application may expect data aggregated by year whereas the incoming data may be aggregated by month. The user must manipulate the input to make it conform to the form expected by the application. RDML performs these tasks automatically using embedded documentation regarding the input data to make any necessary conforming changes to the input. In the time series example above RDML would aggregate the monthly data into yearly data using embedded documentation to determine whether the aggregation should be a sum an average etc.

Additionally comparing data is a primary use of spreadsheets. Examples include comparing the financial statements of different companies comparing the statistics from different states and comparing different economic time series. When these data categories come from different sources they are usually not directly compatible the user must lay out the data items on a spreadsheet or similar program in a manner similar to assembling a jigsaw puzzle. As with normalization RDML uses documentation embedded in the various input files to determine how different line items and values should be collated.

Once data is normalized and collated the RDML data viewer transforms the data automatically. Conventionally users typically make a series of adjustments to the numbers in the data set. The input data may be for example denominated in millions of dollars while output is desired in billions of yen. RDML provides a set of indicators for the most common transformations permitting automatic machine translation of the numbers from their input state to the state desired by the user.

A conventional method of formatting data for output on a PC is to cut and paste the data to a formatting application word processor graph generator spreadsheet or other and then mark up the data to change the format to the desired output. This is time consuming and not repeatable if the data is input again with a slight change the whole formatting process must be repeated. The RDML data viewer avoids the cut and paste approach by saving the original data in a central storage object described below in the data viewer and applying separate formatting instructions to create different views . The user can switch among views with a single mouse click and the program handles all format and numerical conversions for the user.

In some of the more advanced database management systems a report writer approach is used. Like the RDML data viewer this approach applies a template to a centrally stored dataset. The problem is that the data sets are not standardized a report writer template written for one dataset cannot typically be used for another. RDML however provides for reuse of style sheets in the same manner it provides reuse of data and macros.

In addition to the above mentioned problems RDML solves problems relating to live connections of numerical data involving multiple sources that typically require programming expertise. Whether the aim is to draw numbers from multiple sources over a wide area network e.g. the Internet or over a corporate LAN incorporating remote data is complicated by many issues connection protocols programming language dependencies data type inconsistencies error handling data transformations etc. Programmers can surmount these problems at a certain expense but not in a flexible way that permits reuse and users again rely on custom programming. In response to the cost time requirements and inflexibility of the custom programming approaches casual users resort to labor based solutions. In a typical case a financial spreadsheet is created with for example ten assumptions related to interest rates. Every time the spreadsheet is used the creator looks the numbers up in the newspaper and types the results into the appropriate cells and any necessary transformations are made by hand. RDML removes the need for custom programming and manual input by providing a way to include numbers from remote RDML documents in normal formulas. The RDML data viewer automatically looks to the specified address on the web to retrieve the numbers makes any necessary transformations for example from yen to current dollars and places the result in the correct formula. In this way an RDML document or macro can draw on multiple documents at once. Because its documentation is machine readable it can be read by multiple systems none of which need be aware of the physical layout or data types of the others.

Lastly the use of RDML enables client side processing using Internet supplied data thereby realizing a number of advantages. After data is retrieved analytic routines macros are performed on the client side as opposed to the conventional approach in web based data analysis in which the analytic routines are performed on the server side. Whereas sensitive data and calculations can remain local in the RDML data viewer the user need not fear that sensitive data is being misused by a company running a server or that data is being misappropriated over the web. Additionally it increases speed because updates to graphs reports and spreadsheets can be near instantaneous because there is no need for the round trip Internet transmission or the loading and execution of a routine on a busy server. Users may also prefer local copies of data that they control and to which they have immediate access.

Methods and systems in accordance with the present invention provide macros and RMML which allow numerical analysis routines to be written quickly cheaply and in a form that is usable by a broad range of data documents in RDML. RMML macros provide reusable user defined calculations for use in conjunction with RDML that automatically manipulate and display numerical data contained in RDML markup documents. RMML also allows spreadsheet type macros to be posted as web documents to be searched by search engines to be combined into more complex programs and to be reused with many data documents.

For example a user viewing a chart having a series of data in an RDML data viewer may apply with one mouse click a macro to that chart and see an instantaneous or nearly instantaneous transformation of the charted series of data. Not only is the data changed but the titles legends footnotes axis scales and other properties are also changed. As a further example a user may be looking at a time series trend of automobile sales in millions of dollars. By clicking on a macro entitled change the chart recalculates itself according the percentage change from period to period. The y axis title changes from millions to annual change etc. Table manipulation macros may perform such functions as combining two tables into one sorting a table searching for certain line items and other database like tasks. Other transformation macros may perform other functions such as word translation data format translation and report writing.

RMML macros are highly reusable because they are made available in a cross platform text based searchable XML compliant format. Because the macros are portable they have much greater marketability. RMML also builds into its language tags for many types of documentation so that a macro may be reused and understood by the original macro writer as well as other users.

Conventional spreadsheet programs typically base references on physical locations a problem RMML avoids by referring to numbers by their position in a chart or formula or by tag names thus allowing the numbers themselves to be anywhere in a document. RMML macros also use the measurement and the meaning of numbers because RDML tags contain standard vocabularies to identify the measure magnitude scale unit precision class etc. of the numbers and the RMML interpreter handles differences for the user.

Additionally RMML builds error handling into its interpreter and makes available automated testing tools to help increase the quality of the code. Users may also graphically change parameters for the macros using check boxes slider bars input boxes and selection lists and RMML makes it easy for the author of a macro to add those visual components.

Below is a detailed description of RDML the platform upon which RMML macros run followed by a detailed description of RMML.

The main memory may include the RDML data viewer which may be a personal computer based program although one skilled in the art will appreciated that the data viewer may reside elsewhere. In addition to the data viewer which includes views for display the main memory includes related software components that may be used to input RDML documents macro documents and style sheets to the data viewer. It may include the RDML document formatter which a user uses to apply tags to numerical data and or an RDML document server which provides RDML documents to the data viewer . The main memory may also comprise an RDML document editor used to edit the files of RDML documents and RDSL style sheet editor for creating style sheets . The RDML XML search engine which searches RDML documents in response to queries may also reside in memory along with any additional plug in applications . Each of these components and their interactions are described below in greater detail.

The memory may include various software components of the data viewer and related components which may be programmed in object oriented languages such as the Java programming language. The Java programming language is described in further detail in The Java Programming Language 2Ed. Ken Arnold James Gosling Addison Wesley 1998 which is incorporated herein by reference. For further description of the Java Language reference should be made to The Java Language Specification James Gosling Bill Joy Guy Steele Addison Wesley 1996 which is also incorporated herein by reference. However one skilled in the art will appreciate that other programming languages may be used. The RDML data viewer may download RDML data documents from many different sources such as a local storage disk or from a server over network .

The secondary storage may include the RDML image database which stores documentation tag data regarding RDML document and the RMML macro software development kit for developing macros. The secondary storage may also store existing databases for holding original data from which RDML documents are created. These components may also be stored in main memory or on another remote computer and are also described in greater detail below.

One skilled in the art will appreciate that aspects of methods and systems consistent with the present invention may be stored on or read from other computer readable media besides memory like secondary devices such as hard disks floppy disks and CD ROM or a carrier wave from a network such as the Internet . Additionally one skilled in the art will also appreciate that the data processing system may contain additional or different components.

The RDML document formatter is a graphical tool used by the user to reduce the amount of manual labor required to combine data and its documentation. The contents of an existing database may not be enough to create an RDML document because in one system consistent with the present invention RDML uses documentation of the contents. Such documentation often may be found in a printed volume and hence must be manually input and manually combined with the data. The RDML formatter allows a user or data publisher to map data fields from a relational database flat file spreadsheet file or text document to RDML data documents . It also allows a data publisher to add documentation to the data file RDML data document itself.

The RDML image database is a relatively small database maintained by the RDML formatter to hold information necessary to recreate an RDML document should the underlying data change. It eliminates the need for the user to manually input the documentation again because the RDML image database stores it.

An RDML document server functions when RDML documents are being created dynamically. The server queries the existing database for the desired line items queries the image database for documentation items and instructions for constructing the RDML document and finally creates a valid well formed RDML document.

The RDML document editor allows users to edit RDML documents which typically are ASCII text files which may contain UNICODE data . As such they may be edited by any text oriented editor or word processor. This is however a time consuming and error prone approach to marking up an RDML or any XML file. A specialized RDML document editor allows a user to quickly make changes check for errors and view information on the data and metadata. The document editor may operate over the Internet users possessing the correct permissions to modify a file can make updates or changes to the underlying RDML data document by issuing commands from the RDML data viewer .

An RDML document may be an ASCII UNICODE text file used to transmit data and metadata to the RDML Data Viewer . It can be stored locally or can be transmitted over network such as a corporate LAN or the Internet using HTTP FTP email etc. . To be a valid RDML document the file conforms to the RDML Document Type Definition DTD which is described in detail below. The DTD describes required and optional data elements their ordering syntax and the controlled vocabulary for use in certain data elements. DTDs in general are also described in XML Extensible Markup Language Elliotte Rusty Harold IDG Books Worldwide 1998.

The RDML data viewer functions as a combination RDML and HTML browser object oriented spreadsheet report writer and application platform. The browser functions read HTML or RDML documents HTML documents are rendered immediately in a browser window while RDML documents are first cached in an internal data object conforming to the DOM Document Object Model standard discussed below and then rendered in views selected by the user. The default view is typically a chart and a tree listing although several other default views are available. The RDML data viewer uses the cached RDML data objects to create views employing a variety of transformation and manipulation objects to get the data to match either the form expected by the view or to match the form of other data objects with which it is being combined.

The RDML Macro Software Development Kit SDK allows a function designer to create functions that can be applied generally to any data document that contains the types of data necessary for the function. The SDK is a collection of macro writing tools including an IDE Integrated Development Environment an editor an object browser and a validation tester.

RDML generally separates the form of data from general calculation routines that operate on that data. By separating format from functions both the data and the functions can be made reusable. In conventional spreadsheets for example numbers can be placed in arbitrary cells selected by the creator. If a second developer decides to create an analytic function that developer must know what row and column each number is in. That routine will then not work with another spreadsheet unless the exact same row and column structure is followed.

Applying functions generally creates one form of software reuse users need not tell the function where their data is the approach of wizards in traditional spreadsheets . A second form of reuse is that gained by inheritance function developers can choose the existing function that most closely matches what they are trying to do and simply make the necessary edits to create the desired new function. The SDK permits a third type of reuse in the ability to attach to remote data documents and remote macros on the web to take advantage of these extra resources and to provide real time updating of data and functions.

RMML macro documents are text documents that contain routines just as RDML data is contained in a text document. This document contains the heart of the calculation the specification of operations on numbers such as a formula an ordered list of other macros to perform or list of instructions.

RDSL style sheets act as templates for output reports. The RDML data object discussed below in the RDML data viewer can be placed into a report using one or more different style sheets. RDSL a fully compliant implementation of XSL allows a data publisher to provide multiple report formats for its data. They are reusable in that a style sheet written for one RDML data document can be used for another if the specified restrictions are met. For example a style sheet for a time series data set can be used for another time series data set. The style sheet editor is basically a report writer because the user can graphically compose a report from a sample document specify the types of RDML data documents that this report can apply to automatically create a style sheet when the result is acceptable and then use the resulting style sheet to create a report from any qualifying RDML data document .

The RDML search engine searches RDML documents similarly to the way HTML search engines search HTML documents. HTML search engines pick up key words but can only tell a user that a particular document contains the requested word s . They cannot however provide query services. For example a user may wish to search the Internet for all financial statements of computer services companies which have revenue growth 10 and the RDML search engine provides this capacity. The RDML Search Engine however does not index only keywords like the HTML approach but also the element names and key attributes. This permits searching for numerical values or posing complex queries regarding the content and or context of the data. The RDML search engine thus acts as a generalized query processor for RDML data document RMML macros and RDSL stylesheets . Some aspects of the search engine are described in greater detail in co pending U.S. Provisional Patent Application Ser. No. 60 183 152 filed on Feb. 17 2000.

As mentioned earlier each view in the RDML data viewer is essentially a separate application denoted on as various RDML Plug in applications . The chart view for example is a separate charting application that has been plugged in to the RDML data viewer s basic infrastructure of Internet browser XML parser processor RDML transformation and manipulation objects internal object management architecture interfaces to other applications and graphical user interface described below . For example a mapping component can be plugged into the panel in which the chart is seen. Subsequently when a user clicks on a line item the colors of the different countries or states will change to show a thematic map or different dots will appear etc. The RDML data viewer may be designed in modular fashion to permit changing or adding component applications to leverage off the common components.

With further reference to several of the components excluding RMML and RDSL components are described in greater detail below. The existing databases may be relational databases object oriented databases or any other type of database. RDML tags in RDML documents add documentation to the types of pure data found in relational databases. Since the data that already exists in relational databases can be used to create RDML documents the data may be made available to either the RDML formatter or the RDML server and be in a flat file format rows and columns .

For connections both the RDML formatter and the RDML server read Open Database Connectivity ODBC and JDBC database sources. The flat file aspect is based on the idea that RDML documents effectively model a basic row and column matrix. To produce an RDML document therefore the original data source may provide a single table or create one with a query. Relational linking is possible with RDML documents through a server to a relational database or indirectly through hyperlinks to other RDML documents or hyperlinks to RDML document servers . This is similar to many database applications data is collected from various underlying tables to create a single table or screen to show the user. The data table to be used as a source for an RDML document may be oriented to have the fields be one of three basic exemplary RDML data table types time series category or X Y plot described below.

With reference to the RDML formatter once there is a flat file data table of data points in the existing database an RDML document can be created by adding tags that contain documentation regarding the data table. The information contained in these tags are maintained in a separate data table from the original data points. The RDML formatter is an application that assists a user in selecting the proper documentation tags saves the tags in a separate database the RDML image database and creates the actual RDML document .

The formatter references a database shown on specified by the documentation URL . The database holds a list of data tables and the formatter inserts a table that holds stores information regarding the data tables into the database for later reference. This table is referenced by the documentation table name . Similarly the formatter stores a list of line item attributes for the database in the database which are referenced by the li data URL .

The RDML image database contains documentation that relates to a separate set of data records in the existing database . The RDML formatter creates and maintains the RDML image database . The RDML image database standardizes the process of documenting data documents and provides a controlled vocabulary for the metadata. The RDML image database also performs document management and tracking update and version control error checking input validation and the creation of status reports.

The image database contains a list of RDML documents that it can produce. The original data may be in flat files relational tables or a table that results from a query on a relational database. The image database contains document metadata that references the original document table or flat file in the original database . Documentation information contained in the image database is added to this data. It further includes line item set metadata for the set of line items documentation that is typically of a more technical nature and applies to the line item set as a whole. Examples of such information is table types field definitions x values and hyperlinks that apply to the line item set as a whole. A line item set may be generally analogous to a table it is a collection of line items which are analogous to records in the database world. 

The image database also includes line item metadata that references the individual records of the original document table or flat file in the original database . There may be a pointer from each line item s metadata record to the corresponding record in the original data table. Each line item includes the fields of the original record plus in one implementation consistent with the present invention at least 18 additional fields that contain attribute documentation object types unit designators hyperlinks footnotes and so forth. A listing of exemplary attributes of a line item is described below.

The RDML document editor permits users to edit the actual elements and attributes of an RDML RMML or RDSL document and . The documents may be presented in a tree view for selection and direct editing. A text based window may display the contents of the selected document for editing. Besides basic editing it performs a number of utility functions 1 search and replace 2 validation 3 well formedness testing 4 hyperlink validation 5 cut and paste of elements and 6 replacement of elements with defaults.

Before fully describing however it is important to understand an overview of the steps involved which is depicted in and discussed in conjunction with . is a flowchart describing steps in a method for downloading processing and displaying a RDML document in accordance with the present invention. describes an overview of the steps involved and each related component is subsequently described in further detail with relation to . First the RDML reader finds and receives an RDML document in text form formatted according to the structure of the RDML DTD step . The RDML Reader may be a class that runs in a separate thread and has methods for checking the RDML document type Time Series Category XY and handling errors. The RDML Reader then calls the XML parser which parses the text step . The RDML processor receives the parsed text from the XML parser error checks it and creates an object based on the data and structure in the received text. step .

The RDML processor transfers the resulting object to the X value transformer which performs type checking and manipulates the fields x values of the data so that it may be displayed and stored coherently and simultaneously with other active objects of the same type step . The X value transformer makes sure that the data values to be graphed against the x axis are in common units. For example if document A is an annual time series and document B is a quarterly time series the X value transformer in this case would use the li aggregation attributes of the line items in document B to aggregate four quarters at a time into annual data. As a second example if document A is a category document with x values equal to stock ticker symbols F IBM XON etc. and document B contains x values denominated in company names Ford International Business Machines Exxon etc. then the x value transformer will use the li class attributes in the line items of each document to match them up. The X value transformer sends the object to the primary data store PDS for storage with other active objects of the same type step . The views and then display and present information using data from the active objects in the PDS step .

Details of the steps and components involved are now discussed in conjunction with . Described first is an RDML document defined by the RDML Document Type Definition. Description of the various software components of the data viewer follows.

The data and metadata of an RDML document may be formatted inside tags which denote the beginning and ending points of each data element. The element tags may also include attributes to be applied to the data elements a description of what sub elements may be found within an element and vocabulary choices for different attribute values.

A full sample RDML data document is shown at Appendix B. Shown below is a fragment of an RDML document that supplies the data for one line item in the document. Note that element tags are designated within angle brackets and that attributes are listed that can be applied to the data.

RDML documents may be produced by an ordinary text editor by the RDML data formatter or by the RDML data server . XML browsers other than the RDML data viewer are able to do little more than echo the text input to the user s screen since they cannot interpret the RDML tags. 

The DTD data structure is optimized to provide information that is needed in order in which it is required to reduce the learning required on the part of new users to RDML formatting and to avoid unnecessary duplication. The first line of the DTD in Appendix A starts with because all XML documents start with a line that tells the client application in this case the data viewer what type of document it is and the version of XML.

With further reference to the DTD used to define RDML data documents is structured in a hierarchical tree structure of elements. Each element may include a list of attributes displayed in Appendix A but not shown on and or an association with one or more sub elements. The DTD specifies which attributes are required and which are optional for any embodiment of the DTD. Depending on design constraints the required and optional elements may vary. At the highest level the DTD has two elements descending from a root element . The first element contains the metadata for the document as a whole and the second contains the set of the line items.

In one implementation consistent with the present invention the element contains several attributes itself and the optional sub elements and each describing some aspect of the source of the data. In this implementation the element may include ten attributes describing document information as a whole. These attributes are rdml doc ID doc title timestamp version expiration freq of update num line items num datapoints x indexes d first li with data. 

The rdml doc ID attribute is the unique identification of the RDML document and is typically a file name or URL. The doc title is a plain language description of the document that will appear at the top of reports and views for the document for use by a user. The timestamp is typically generated by the application that created the document and may denote the time that the document was created or the time the data was accessed for creation of the document. The version describes which variant of the RDML document it is and may be named by the creator. The expiration describes the date and time that the data in the document may no longer be relied upon typically when the next update is expected to be released. Freq of update describes how frequently the document is updated and may be used by applications that want to schedule updates to the data. The next two attributes num line items and num datapoints are integers describing the total number of line items and number of data values respectively. These attributes are optional and may be used as a checksum by a receiving application to ensure that the data has not been accidently changed or corrupted.

The next field x indexes denotes three data fields to use as representative data fields in the tree view described in detail below . X indexes is a comma delimited string of three integers each of which is an index to a selected field. For efficiency the indexes may denote the end of the list of fields so that for example 3 2 1 shows the last three fields in the tree view . Indexes based on the end are useful because most people reading a time series want to see the most recent data. Along similar lines the first li with data attribute is an integer index that points out which line item is to be displayed on the chart when the document is loaded into the data viewer .

The elements sub elements of element may optionally contain one or more of sub elements of which contains contact information. This element can be used by the target application to create an email letter update a contact list or populate a database of information sources. The same element structure is used for all contact information sub elements so that the application that created the document only has to create one structure.

In one implementation this contact information is represented by eleven attributes role name company address city state zip country email form and comments. Role is the role played by the party in the creation of the document i.e. data source for the formatting source for the element etc. Form determines whether the hyperlink is a simple link or extended link. Under the Xlink specification a language designed to implement links between XML documents and resources hyperlinks may be simple or extended. Xlink is described in XML IE5 Programmer s Reference Alex Homer Wrox Press 1999 which is incorporated herein by reference. Simple links are traditional jump hyperlinks in which clicking on that link will close the current page and open the target page. Extended links are application specific and can identify different types of resources such as multimedia files and other non document resources.

The contact information in the describes who or what collected the data to create the original database while the same attributes in describe who or what added the RDML tags to the original data to create the RDML document . The same information in describes the person or company that created this particular document and made it available to the outside world.

In addition to the sub element in which describes the contact information regarding the licensing of the information the element has its own set of licensing related attributes. These attributes include copyright cite holder license type warranty disclaimer terms date email state and country. The copyright cite is a string that may appear on reports regarding ownership of the particular data set in the RDML document . A typical example might be Copyright 2000 e Numerate Solutions Inc. All Rights Reserved. The holder attribute lists the full legal name of the owner of the copyright. License type lists the type of license such as none proprietary and confidential public domain pay per use etc. and terms lists the payment terms if any such as 1 per download. The information in these attributes may be used by routines associated with the RDML processor to automatically track and implement licenses and payments.

Another sub element of the element is the element which in one implementation has two attributes and its own sub element . A is a collection of hyperlinks. These hyperlinks may be either HTML files or RDML files. The individual elements hold the actual links and attributes. The element s two attributes are form described above and href a standard string for URL or web address and they designate the HTML or RDML page where a page of hyperlinks may be found. This is useful when the creator does not want to list all of the hyperlinks in the document itself.

The element describes hyperlinks to other documents and contains in one implementation nine attributes form href behavior content role content title role title show and actuate. These link related attributes are described in the XML IE5 Programmer s Reference pp 95 97. The title is a string that appears in the application as a hyperlink title. For example in an HTML browser it will appear as highlighted underlined text. Actuate specifies when the link should be traversed when the resource that the link points to is retrieved or accessed and show specifies how the target resource will be displayed. Behavior specifies instructions that control the behavior of the link in the way that the content is displayed or the link is traversed and role describes what role the target resource plays in the link. Content role and content title are alternative places for the title and role but are not specified in Xlink standards.

Finally may have its own having elements . RDML allows users to attach hyperlinks to different elements such as an entire document a particular line item or other element in the RDML document . The reason for the multiple places that hyperlinks may be placed is so that the user can view in one place all the links that apply only to the element under consideration. For example an RDML document may contain the data for a company s financial statement. The creator of the document may decide that certain links apply to the whole company links to product lines competitors etc. and that others only apply to single line items such as a link attached to the Equipment Leasing line item that points to the footnote for that line item or an accounting regulation applicable to that account . Even though they are attached to different elements the links may have the same form. Another reason for multiple linkset elements is to facilitate keeping links together with their logical owners.

Continuing to refer to on the line item side of the the which contains information on the collection of line items in the RDML document also contains several attributes and several elements. These attributes include line item set type time period character set missing values null values zero values dates values and percentages. 

The first attribute the line item set type is in one implementation an important attribute which classifies the line item set into one of three types time series category or cross tab and x y plot. Generally the type in this context is the characterization of the x axis values and whether they represent a time series a categorization a x y plot or other. These line item set types are described in detail below in connection with the x value transformer which manipulates line items of the same set type. Generally line item sets of different line item set types may not be actively manipulated together. If the line item is a time series valid lengths in the time period attribute may be years quarter months days etc.

Character set designates which standard character set is represented thereby allowing for support for foreign languages. Missing values holds a designator for the numerical value that represents a missing value because many views of the data in particular chart views need to know which numbers represent blanks. Otherwise a blank might be interpreted as 0. Null values designates the character to be treated as null so that it is not confused with not applicable or missing or 0. Finally zero values designates characters that should be interpreted as 0 and not null missing not applicable etc.

The has in one implementation several sub elements including and one or more elements . At the line item set level metadata regarding line items as a set is shared among all the line items so that the data need not be repeated. In particular the element contains field information common to all line items in the line item set. The element includes the x values and information regarding the x values of the line items in the set of line items in the RDML document . For example if the line item set is a time series the x values may represent the years months or other timelines e.g. 1990 1991 etc. listed across the bottom of a chart with which all of the data is associated. Because this information is the same for each line item in the line item set it is only included once in the RDML document . In one implementation in addition to the actual x values also contains the following attributes x title format x notes x desc x prec x unit x mag x mod x measure x scale x adjustment and x links. 

In x title is the title displayed on the x axis as the data is displayed on a chart. Format is a string providing a template for the default representation of the x axis values. The strings are those familiar from spreadsheet programs examples may also be seen on 

Other formatting codes can also be used e.g. codes used in scripting languages . X notes may contain miscellaneous footnotes regarding x values of the line item set while x desc may describe additional description regarding the x axis values.

The x prec attribute describes the precision or number of significant digits for purposes of axis label display. In this attribute negative numbers cause rounding of amounts greater than zero. For example a precision of 2 will display a number as 8 254.43 . That same number with a precision of 2 will be displayed as 8 300. The underlying representation of the number will be the full value only the formatting and representation on the screen will change. The data viewer uses this primarily for formatting the axis labels but the attribute is available for default formatting as well in other uses such as reports footnotes etc.

The subsequent attributes x unit x mag x mod x measure x scale and x adjustment represent the meaning of the x values and are used by the data viewer for manipulation reconciliation and display with other RDML documents . In RDML numbers are collectively described by these attributes which describe the numbers units. They are as follows 

Access to these attributes for line items provides enormous power to the data viewer . It facilitates the interpretation and transformation of the numbers. It allows multiple lines to be placed on a single chart without conflict and allows macros to be applied without the requirement of human intervention to answer questions about the units. It further allows reporting templates to make automatic adjustments to provide the most readable reports. In particular the data viewer uses these attributes to construct y axis labels and descriptors when the user has made a transformation and the y axis label attribute is no longer appropriate.

A standard vocabulary for units and measures may be used for efficiency and magnitude and scale may be more simply represented as a power of 10 e.g. 3 for thousands 6 for millions etc. This permits more rapid transformations and eliminates potential confusion of variant usages and spellings e.g. million mille MM etc. 

For an example of the use of these attributes suppose the RDML data viewer has plotted the following value measurement 

The data viewer multiplies the conversion factors or performs any other appropriate mathematical operations to manipulate the display. The user does not have to look up each of the conversion factors marshall them into the correct sequence do the arithmetic and make corrections such as rounding adjustments. The user may simply select a new unit magnitude etc. from a drop down box and make a selection.

In one implementation when the system converts one unit to another unit it converts the original source unit to a base unit known by the system and then converts the base unit to the target unit. The system stores conversion factors from base units to other units in a unit list XML file a portion of which is shown at Appendix C. For instance suppose the base unit used by the system for length is meters and numerical values are to be converted from yards to miles. The viewer converts the yards to meters using the stored conversion factor and then from the meters to miles using the appropriate stored conversion factor. In this way the unit list file need only contain conversion factors from the base unit to various other units and need not list a conversion factor for every possible combination between various units.

The structure of the unit list file is as follows a element is the root and it has one level of child nodes each of which is a element. The unit elements each have a number of attributes and elements that describe the characteristics of that unit necessary to convert it into another unit or set of units.

The conversion element contains the attributes necessary for making a conversion where the source unit and the destination unit are both of the same type. For example converting miles to inches is simply a matter of finding the correct multiplier to apply to the number of miles because both units are measures of type length. 

The conversion element contains six elements 1 conv target describes the target unit of measurement that the following conversion factors will bring you to 2 conv factor is the number to multiply by the source value to arrive at the destination value 3 conv constant is the constant to be added to the product of the source value and the conversion factor. For example in the conversion formula for Fahrenheit to Centigrade F 32 9 5C 32 is the conv constant 4 similarly if the conversion involves a logarithmic conversion the necessary factors are included in conv log 5 conv source is a description of the standards body that set forth this particular conversion factor and 6 conv href contains the URL for the approving standards body.

The type element contains one of the following text strings 1 Length base unit meter 2 Area base unit square meter 3 Volume base unit cubic meter 4 Mass base unit gram 5 Time base unit second 6 Temperature base unit centigrade 7 Energy base unit joule 8 Currency base unit WS 9 Compound no base unit 10 Diverse no base unit 11 Collection no base unit and 12 Occurrences no base unit .

The Compound and Diverse types are constructed from one or more of the basic units. Compound types are simple combinations of others. Example miles per hour is a combination of a length unit and time unit. In order to convert a Compound type into another type it is necessary to be able to make the necessary conversions of the decomposed units.

Diverse types are those that are constructed of descriptions. For example an ohm is an electrical unit described as the resistance offered to an unvarying electrical current by a column of mercury at the temperature of melting ice 14.4521 grams in mass of a constant cross sectional area and 106.3 centimeters in length. 

A Collection type is a collection of persons places things etc. For example a data series denominated in people in millions means that one unit of this type is a collection of one million people. Collection types can use any of the conversion elements. For a simple conversion example suppose there are 2.4 people per family in a sample. Then people could be converted to families by a simple division by the 2.4 conversion factor.

An Occurrence type is a collection of events. Cycle would be an Occurrence type that could be divided by seconds to produce a compound cycles per second unit of measurement.

The subtype element is for finer distinctions among types. The plural element is for constructing new titles legends and labels at the completion of a conversion operation. An alias element is provided for enabling conversions where data has been entered in a common but nonstandard form. For example tables often use in instead of inches. The desc element is provided so that a plain language description can be given the user. The icon element provides a place for giving the unit an icon to be used in lists drop down boxes etc.

Referring back to the elements and attributes of in 924 there is an x links attribute which may be a comma delimited string of URL s for linking to other sources.

In addition to this element the 926 element represents the set of line item class elements and in one implementation has no attributes but has one or more sub elements representing line item class 930. These line item class tags specify categories in various classification systems to which the numbers belong such as or 

The element in one implementation has five attributes. These are class name parent class form href and description. Class name is the name of the class to which the line item set belongs and parent class denotes the name of the parent class. These attributes may be used by more advanced features of the data viewer such as the macros.

The element further contains a similar to the previously described . As before this further has a element previously described.

The element may have in one implementation in accordance with the present invention four sub elements and 18 attributes. The elements are which contains the x values for this line item if they are different from the default x value in the line item set element which contains the y data values the data numbers or values of the line item a having a as previously described and a element . The contains one or more elements which have user readable plain language notes regarding the line item.

The attributes of the line item include li ID li legend li title li cat y axis title level format relation li notes li desc li prec li unit li mag li mod li measure li scale li adjustment and li aggregation. Several of those attributes have the same meaning as attributes previously described except that they specifically describe only the line item and y values to which they are attached.

The li ID is a unique identification number for the element and may be numbered from 0 to n where n is the number of line item elements . In one implementation consistent with the present invention the numbers are unique and in order.

The li legend attribute is a plain language string describing the line item that does not need to be unique. Generally it appears in the leftmost column of the views. The li title is a string defining the general subject of the line item. In the data viewer this may be used as the title of the chart and as titles in reports. Typically titles are the same for line items grouped together but they are not required to be.

The li cat attribute represents a line item category. As opposed to the li legend and the li title which are displayed on the chart in the data viewer the li cat is not normally displayed. It is generally a non printing designator for a category that the line item might belong to. Often this may be a table name or a primary key in a database or some other organizing identifier. It may be used to group line items for reports.

The y axis title attribute is a string which will appear on the y axis as the title of that axis. However if the user applies a transformation to any variable in the descriptor this hard coded y axis title will be replaced by one generated by the data viewer using other attributes.

The level attribute and relationship attribute specify hierarchical relationships between line items. Conventional links in relational databases are maintained by matching records on the basis of key fields. One drawback of this approach is that nothing is known about the character of the relationship except that it exists and there is no way to tell absent specific documentation elsewhere that one record is a child or parent of the other and whether that nature is a containment a derivation and inheritance etc. In RDML the creator of the data may specify the hierarchical level of each line item and the nature of that hierarchical relationship. The data viewer uses the level attribute and the relationship attribute to create a hierarchical tree to place icons representing the relationship in front of each line item to summarize the derivation of numbers and describe their context and to assist macros and updating data tables. The level attribute specifies how many levels down from the parent node a line item is while the relationship attribute specifies the nature of the relationship such as whether the line item is a child of another line item or contained by another. It may also determine whether the line item is an additive or subtractive subcomponent of a parent or a subtotal that is dependent on other child line items. These previously mentioned attributes and elements make up a DTD in accordance with methods and systems consistent with the present invention.

Li aggregation is an attribute useful if a user wants to aggregate or deaggregate data based on differing x axis transformations. This attribute explains to the data viewer how to handle this particular line item when such transformations are attempted. For example if a line item set presents bank account information each line item may be a time series and presents quarterly data but the user may wish to see the data on an annual basis. For some line items in the set it is simply a matter of summing up four quarters worth of data e.g. deposits in which case the attribute value would be sum but for other line items e.g. closing balance only the last quarter s value need be shown in which case the attribute value would be last. Similarly if a minimum annual balance is desired for four quarters of minimum balances only the lowest balance for all four quarters would be needed. Such a line item s li aggregation attribute value would be minimum. Possible accepted values include sum average minimum maximum first last and none. 

With reference back to the RDML reader may be an object within the RDML data viewer which manages the process of finding an RDML document locally on a LAN or on a Wide Area Network such as the Internet passes it to the XML parser relays error notices to the user and coordinates the updating of other components states to reflect a rejected or damaged RDML document . The user of the RDML data viewer may initiate the download of an RDML document in many different ways including clicking on an RDML hyperlink these are like any other hyperlink except that the target document may end in .rdm typing a .rdm URL into the Address box of RDML data viewer or requesting the loading of the document in a macro. Also while conventional HTML browsers have a cache of only HTML documents represented as the history of the browser the browsers may only display one of these documents at a time. Given an URL address the RDML reader reads in Document Object Model DOM compliant documents e.g. RDML documents discussed below. The XML reader may be implemented by a third party set of Java classes such as the XML4J parser developed and licensed by IBM but others may also be used. The RDML reader may cache multiple documents in RAM if they are compatible with the active data set. Not only are these documents immediately available but sub elements of the documents are available immediately because the data viewer may maintain indexes of important data and metadata in the documents. Additionally macros may be used to find specific elements in the document that is read in by the RDML reader .

The XML parser takes a serial stream of text characters from the RDML data document performs basic functions such as eliminating white space dividing input into words and groups of words and searching for opening and closing characters primarily . The XML parser used in the RDML data viewer may also be a third party set of Java classes such as the XML4J parser developed and licensed by IBM but other parsers may also be used.

The processor receives the parsed text and creates a tree shaped data structure of the data elements matching the structure of the RDML DTD hierarchy. The hierarchical structure conforms to the DOM Model meaning that data is available in a standard form and that a standard library of methods and functions are available for accessing data editing elements searching through nodes to find certain elements and so forth. The XML DOM standard is controlled by the World Wide Web Consortium and can be found at http www.w3.org TR REC DOM Level 1 .

The RDML Processor generally performs three primary functions on the incoming parsed text to create an internal software object error checking structuring and adding functionality. The error checking functions of the processor simply compare the output of the parser against the text expected as defined by the DTD . If the incoming document does not conform the processor determines whether the defect is 1 not critical in which case a warning is sent to a log and work continues or 2 critical in which case work stops and an error message is sent to the routine that called the parser .

The structuring function is a matter of assembling the text into a hierarchical data structure matching the hierarchy described in the DTD . The target data structure may be a vector of vectors or other collection of collections. When the data structure is created it is wrapped in a software object an RDMLDoc object that adds an interface to the data so that other software objects can communicate with it. Most of the added functions methods provide access to specific subsets of the data or particular elements or attributes.

The functions of the RDML processor can be performed by the same class as the RDML Reader where the RDML reader has been set up on a callback relationship with the XML Parser . In that way when the parser gets a new element from the RDML document it informs the RDML reader that it found the element and returns it to the reader. In such a way the RDML reader acts as a processor as well as reader even though it may hand off the actual element handling to another class .

Regarding the X value transformer the term X value refers to the fact that the fields of the input data records are plotted along the x axis of the chart view by default. The values of each record for each field are plotted on the Y axis. For example a time series will by default be plotted in the chart year with the time periods plotted on the x axis. When more than one data document is input their data fields must be correlated before they can be presented together in a common view. The X value transformer determines what adjustments have to be made and then accomplishes them.

Generally the RDML data viewer recognizes three different types of line item sets i.e. 1 time series 2 category and 3 X Y Plot which account for the majority of end user tables. The X value transformer by recognizing these types can automatically provide the correct display and transformation routines saving the user the time and expense of changing a broad range of details. To give an example of this when a times series table is encountered the data viewer can recognize that the x values must fit the permissible types of dates check them conform them and format them thus sparing the user the work. In one implementation consistent with the present invention a line item set type is a required attribute of the line item set element .

First the X value transformer receives a new document step . It then determines the type of the active documents in the PDS step . If the newly arrived document is the same line item set type as the active documents step it is added to them in the PDS step . If it is of a different type than the currently active documents in the PDS the user is notified that it does not match the currently active documents step . The user may choose to reject the new document step in which case the object is not added to the PDS step . If the user chooses to erase the currently active documents step the currently active documents are erased step and the new one is loaded step . Otherwise the new document is placed in the PDS as a standby document step . Standby documents are available for providing data to scripts and macros but do not interfere with the active document views. Optionally if the x value transformer need not perform any transformations the RDML reader may store the document in the PDS .

If the newly arriving document is of the same line item set type as the active documents the X value transformer matches the data x fields of the new document to the existing documents. They may be in a different order may be spelled differently be in a different form or otherwise not immediately compatible. The X value transformer makes the necessary adjustment according to the type of line item set. For example time series line item sets have elements which are ordered in time. One obvious incompatibility is that periods may be different. Often one set of data is in years and the other in for example months. The X value transformer uses attributes of the line items to handle each correctly. However monthly data cannot just be added up to produce a yearly value for example because the number might represent a non additive value. For example a line item might be Ending Bank Balance but adding up 12 monthly ending balances does not produce a year ending balance. The line item provides a period length attribute that specifies that it is a period end value and the X value transformer uses the last month only to create a yearly value. In another example monthly deposits would be added together and monthly average interest rate might be a period average. Each line item provides instructions on how it is to be handled in conversion to other periods this is provided by the li aggregation attribute.

Another change that might be made is in the date format. Some data sets might simply display the year YYYY others might use a standard date format YYYY MMDD HHMMSS.MSS or some other variant. The X value transformer puts these all into a common form.

The data viewer additionally provides tags describing how it is to be handled in the event of a period widening shortening or a period shift. Numbers may be tagged as sum median average last value first value or a specified formula. The X value transformer and the data viewer may also handle period shifts a related type of conformance. For example a first data source may be based on a calendar year ending on December 31 while a second data source is based on a fiscal year ending on September 30. The RDML data viewer may use the period length attribute of the x data element to designate the period length of the data in conjunction with the li aggregation attribute of the y data element. The latter attribute is used to estimate a conforming transformation.

Y values the data values in a line item may change when the x values have been conformed. For instance if twelve months of average interest rate is aggregated to produce annual average interest rate the updated designation of the number that will appear in legends or axis titles changes. The data viewer recognizes that the resulting values may possibly undergo a transformation based on unit magnitude modifier scale measure and adjustment attributes. These attributes allow efficient and automatic interpretation translation manipulation and presenting of data in a line items. They further facilitate the automatic changing of text descriptions in charts and reports to be automatically changed by macros.

Additionally to conform differing time periods in separate documents the X value transformer and the data viewer may prompt user assistance if needed. For example a first data source may be denominated by fields such as Week 1 Week 2 etc. while a second data source is denominated by Apr. 4 1999 Apr. 11 1999 and so forth. The X value transformer recognizes this problem and a broad set of similar circumstances and presents a dialog box asking the user for the actual date that Week 1 begins on.

The Category line item set type is a common type of line item set that is often referred to as a crosstab. In this line item set type the x values are categories. On a chart for instance the x axis may be divided into eight categories for eight companies with the y axis showing the values of revenues or profits. Sometimes matching the fields of different source documents by name is too dependent on wording spelling or language to permit efficient matching. The challenge for categories line item sets is to handle these differences in usage. For example company income statements may start with a concept of sales but the actual words used may be revenues total revenues gross income or any other designation used in different languages dialects or industry specific terms. To handle these line item sets the X value transformer lines up categories from multiple data sets by first matching up any actual matches in spelling ignoring cases in the default . Second it looks at the class elements to see if there are standard vocabulary tags these standards may be different for different industries or uses. When dealing with companies for example the ticker symbol may be used as the matching tag. For instance one data set may have a category for Ford another for Ford Motor Company and another for F. All would be matched by the common presence of a tag Ford s ticker symbol in the class element . If this fails to provide matches the data viewer presents the user with a dialog box with two lists of fields. Using drag and drop techniques the user can quickly match the two sets of fields and fields with no match are simply appended as new fields. In addition to creating a mapping dictionary based on text class sets and user input the data viewer can use a mapping file specified by a user or an input document to combine files automatically.

Once the X value transformer has determined an active or standby status for a newly arrived data document and made any necessary modifications to the x values it passes a new RDMLDoc object to the PDS which manages its communications with the various views or plug in applications. This PDS central storage allows the different views and to have access to an object representing the original source data. The individual views described below make their own copies of the portions of the data that they need and in whatever transformed form they require. The PDS object generally does not perform transformations on data it simply holds them adds and removes them and makes them available in a public interface to other objects. Table 1 below shows an exemplary class diagram of the PDS object . Note that vectors are used to hold the RDML documents in this implementation it would also be possible to use a hash table or collection data structure.

In the class diagram the upper section lists the object s variable names followed by their types. The lower section lists the method names with the argument name and type in parentheses followed by the method output type. As shown the PDS provides variables and methods for storing active and standby RDMLDocs and RDMLLineItems . The PDS object includes methods to add retrieve and clear documents and line items in addition to methods for determining the number of documents and line items.

An RDMLDoc object is a full internal representation of the RDML document . It contains as its central attribute the tree structured data elements contained in the document s original tags and implements the DOM interface. Applications that work with DOM objects may also work with RDMLDoc objects . The RDMLDoc object provides a higher level interface for the different views of the RDML data viewer . The Table 2 below shows a class diagram of an exemplary RDMLDoc object in accordance with the present invention.

Described below are class methods shown in Table 2 of an RDMLDoc object in accordance with one implementation consistent with the present invention. First RDMLDoc is a constructor for creating an internal RDMLDoc object . The method createDoc reads in the file indicated by an input URL parses it and creates a new TXDocument which the user then usually assigns to this RDMLDoc object . A TXDocument is an object which implements the Document Object Model DOM interface. The TXDocument creates the DOM structure for the file and wraps it with various access and administrative methods. It is the DOM compliant original representation of the document. The setTXDoc method sets the underlying TXDocument and initializes object properties such as the number of line items and getTXDoc returns the underlying TXDocument.

Whereas an RDML document forms a tree of elements having attributes with values the getAttributeValue method returns the attribute values for the named element and getAttVal returns as a string the attribute value found at an inputted element name and attribute name. The getLinkAttValue method gets the attribute value of a hyperlink element according to the element name and attribute specified and getLinkText gets the corresponding hyperlink text.

When called getNumLineItems returns the number of line items in the RDMLDoc and similarly getNumLinksForElement returns the number of links for an element.

The getRDMLLineItem method supplies the first RDMLLineItem described below based on the value of a particular attribute. For example specifying li ID and 3 will return the RDML Line item in which the Ii ID attribute equals 3. The method called makeRDMLLineItem takes the indicated node assigns it to a new RDMLLineItem object and initializes the object.

The method getData Defaults returns a vector of the default x values. Furthermore parseCommaDelimString takes a comma delimited string as input and returns the values between commas as elements of a vector and returns a vector of the strings. Finally traverseDOMBranch takes an input node as a parameter and then traverses from that node downwards and at each node an operation such as finding an element with a particular name may occur.

Similar to the RDMLDoc object the RDMLLineItem is an object that provides high level methods for retrieving data on a line item any associated links or notes and the attributes. The views of the RDML data viewer work with RDMLDocs and RDMLLineltems to create their presentations. Table 3 shows a class diagram for an exemplary RDMLLineItem object .

Described below are class methods shown on Table 3 of an RDMLLineItem in accordance with one implementation consistent with the present invention. Methods with the same name as described above in connection with the RDMLDoc object have the same general function although since a line item is already specific to an element the methods take different arguments because they typically do not need an element specified in the given arguments.

RDMLLineItem is a constructor that creates an RDML LineItem object and initLineItem initializes the line item to the values found in the RDMLDocument. The method get jcvData X d get jcvData Y return the x and y value vector for the indicated number of the line item. The get strX Value method and get strY Value return the x and y value at the number of the line item in the x values vector as a string.

The getNumDataPoints method is called to receive the number of data points i.e. the number of x values in a line item. The method set li allows the calling routine to set the line item in the RDML document that this particular RDMLLineItem is to represent.

Referring back to in one implementation consistent with the present invention the chart manager object takes up to six RDMLLineItems from the PDS and displays them on a chart displayed on the graphical user interface and is typically used in conjunction with the tree view and the macro panel . When a user clicks a mouse on a line item in the tree view that line item is added to the chart. When the user clicks the mouse on a macro line in the macro panel the selected line items that are charted are transformed according to the programming of the macro. The chart manager may be separated from the graphical chart view to allow the ability to change chart software components easily should different or better graphic chart components become desirable.

The data viewer presents the user with a number of different views and as shown on which the user may use to view the information in RDML documents stored in the PDS . These views include a chart view which shows graphical charts and graphs of the data and a tree view showing hierarchical representations of line items. Additionally the data viewer presents a spreadsheet view which shows a data sheet similar to a spreadsheet and a footnote view which shows the text of footnotes associated with RDML documents . The views are discussed in detail below.

Upon receiving RDML markup documents the chart view transforms formats manipulates and displays data stored in the markup documents using the attributes describing the meaning of the data. The chart view uses the attributes of the numbers to for example facilitate the simultaneous display of different series of numbers of different types on a single chart and automatically display appropriate descriptive textual components.

As an example the chart view automatically determines when a first series is in the U.S. dollars and the second series is in French francs it may automatically place them on separate axes or automatically translate the units. It can also determine the titles for these axes and set the labels on the axes. The chart constructs itself automatically using the attributes of the individual elements of the markup document and these actions may be initiated with a single mouse click.

Generally the chart manager handles updates and manipulations to the chart itself e.g. axes labels etc. while the chart data object handles the plotting of the data on the chart . The chart manager object provides the information the chart data object needs to update its internal data structures. Chart data is a data model that is used by the central graphical chart to paint itself but other components also use the data the footnotes the chart legends and titles and any macros that are operating on the data.

One way to visualize the role of the chart manager and its data partner the chart data object is to view the steps of a method of a complete sample scenario the user has selected a line item in the tree view and the chart manager is notified that this line item is to be added to the chart . There are various ways to set up the chart data chart manager architecture. One way described in detail below is to create the chart up front and then feed it changes in data initialization clearing updating data series etc. A second general approach is to use the data to create a new chart upon every request for a change.

As illustrated in a user selects a line item in the tree view on the graphical interface step . The tree view obtains the ID of the selected line item step and removes any old macros that are applied step . The chart manager then deletes the last series displayed data of a line item from the chart view to make way for the newly selected line item step .

Referring now to the chart data object removes existing data from the chart step . It then obtains the RDMLDoc object from the PDS step and the RDMLLineItem object from the RDMLDoc object step . After doing this the chart data object normalizes the x value data step . For example if one charted series displays data from 1961 to 1998 and the new one displays data from 1973 to 2005 the chart data object ensures that the chart displays data from 1961 to 2005. The chart data object then fills the x axis with data step and fills the y axis with data step .

As shown in a chart may have more than one y axis charted at a time i.e. a different y axis on either side of the chart to display multiple line items simultaneously. Thus the chart data object further marks which y axis the series is on step and if it is on a Y2 axis a second y axis step it adds that axis step . The chart data object sets the number formats for the axis labels and step and sets the number precision step . Finally it updates the footnotes step and runs any macros that are applied step .

Referring now to the chart manager then sets the Y1 title step and the Y2 title step using line item attributes. After that it updates the series styles step the chart title step the legend step and the x axis step . After these updates and the chart manager updates the number precision step the y axis step and the chart types i.e. area bar stacked bar line pies points etc. step . Subsequently it updates the footer step and sets the maximum x value to the extent of the last used value disposing of blanks on the right side of the chart step . Finally the graphical interface repaints the graphical chart with the newly created updates step .

The chart manager and chart view can chart different series types on a single chart and handle transformations automatically. Because two or more data series may be placed on the chart from different source documents they are synchronized for purposes of placing them on the common graph. The chart manager uses data x elements or the metadata tags to automatically transform data to permit different series types to appear together on a chart. It recognizes for example when a first series is in US Dollars and a second series is in French Francs it makes arrangements automatically to place them on separate axes. There is no need for the user to go through a charting wizard or to find understand and translate the various units titles and adjustments. One click on each of the series lines in the tree view potentially with a modifier key e.g. the CTRL key depressed instructs the chart view to construct itself given the metadata of the individual elements. The chart manager and chart data object consider and take into account the following in updating the chart the unit type magnitude scale modifier measure y axis title chart title chart footnote precision number format chart type line bar etc. legend and colors of the various components.

The data viewer also permits the adding of a series to a chart using a single click or command. Adding a series to a chart increases the number of series displayed on the chart. In conventional spreadsheets charting programs and data graphical interfaces this task requires the user to either rebuild the whole chart through the wizard fill in a dialog box with information on the new series or add the numbers by custom programming. When the data viewer adds the new series to the chart with a single mouse click. The existing data is maintained as it was and any necessary changes to the chart s type format scale etc. is made automatically by the chart manager and chart view to accommodate the new series.

Just as a series can be added with one mouse click or one command from the menu so can it be removed. There is no need for the user to worry about accidentally deleting something as no actual information is lost from the data viewer . It can always be added back to the chart with a simple mouse click.

The chart view also supplies an expandable legend as shown on . A significant problem for most users of spreadsheet programs has been the inability of the user to control the size format and handling of the legend . The result is that charts usually end up with legends such as MSFT and SUNW rather than longer descriptions with multiple colors and fonts word wrapping and other readability enhancements. The chart view chart provides legends that 1 can grow to unlimited sizes 2 support word wrapping 3 can contain multiple fonts 4 can contain multiple font types bold italics normal and 5 can contain varying colors for emphasis. If the legend information typically stored in the li legend attribute for a line item is too long for the legend box on the chart the information may word wrap and scroll to accommodate the additional information.

The chart view permits further convenience by automatically specifying the y axis title . Current spreadsheet and charting programs require the user to provide a y axis title usually through a chart wizard or by specifying a location to look up a title. The RDML shifts this burden to the data originator who is in a better position to accurately specify the description of the y axis values. The y axis title specified by the data originator is placed in an attribute field y axis title of the line item element tag and is used by the chart view as the default y axis title when the line item is added to the chart view .

Often however the user wants to make a change to the numbers and display the transformed series on the chart . In this case the default y axis title may no longer be correct. Rather than require the user to manually figure out what the new value description is a process that could take several minutes or longer with current analytic programs the chart manager and chart view data automatically generates a new y axis title upon transformation of values using the information provided in the modified unit magnitude modifier scale measurement and adjustment attributes of the line item .

For example suppose a first series is charted as in Millions and the user applies a macro that divides every number in the series by 1 000. The chart manager automatically creates a new y axis title of in Billions. Number transformations can lead to quite complicated transformations of the y axis title . A user may multiply a first series Gallons in Millions by a second series US per Gallon the result will be a series of numbers a third series US in Millions . If there are ambiguities the data viewer presents the user with a dialog box displaying all the known information regarding the quantities involved and requests that the user supply a title.

Similarly the chart manager and chart view can automatically generate the x axis title and chart titles using the metadata attributes. In addition to generating y axis and x axis titles the data viewer automatically performs the task of creating a new chart title when the charted series are changed or when multiple series are added to the same chart. For example a first series has a default chart title of Total Sales a second series has a default chart title of Total Expenses and a third series has a default chart title of Total Sales. The data viewer will create a combined chart title of Total Sales Total Expenditures by combining the dissimilar elements and eliminating the duplicate elements.

Three examples illustrate other types of automatic title manipulation. In the first example suppose a chart has two series placed on it Series A has a title of GDP and a legend of China and Series B has a title of GDP and a legend of Malaysia . If both are put on the chart the titles will duplicate each other. In one implementation consistent with the present invention duplicate titles are removed such that the title for this chart will be simply GDP . Because the series legends are different the legend on the side of the chart will have two entries China and Malaysia .

As a second example suppose the legends are duplicative Series A has a title of China and a legend of GDP and Series B has a title of Malaysia and a legend of GDP . Because both legend entries would be GDP there may be confusion about which legend applies to which line on the chart. In this case the data viewer transposes the legend and chart title entries such that the result is the same as in the first example above the title of the chart is GDP the duplicate is removed and the legend entries are China and Malaysia .

Finally in a third example suppose the series have different titles and different legends. Series A has a title of GDP and a legend of China and Series B has a title of National Savings and a legend of Malaysia . The legends are left as is and a new chart title is created by appending one to the other separated by a . The chart title on the display thus becomes GDP National Savings and the first legend becomes GDP China and the second legend becomes National Savings Malaysia . All three of these changes are string manipulations selecting and or appending .

The chart manager and chart view can also automatically trim beginning and ending x values thus relieving the user of the need to trim null leading and trailing values from charts. In conventional spreadsheet and charting programs chart pointers must be recreated or manually adjusted when the underlying data is enlarged or shortened. For example if a series is charted that runs from 1990 to 1998 and it is replaced by data from 1990 to 1996 there would be two blank spaces at the right side of the chart. The data viewer and chart manger avoid this and similar problems by handling missing or null values at the front or back of line items as indications that the chart should be automatically restructured.

The chart manager also automatically formats the x and y axis labels and . RDML shifts the burden of formatting the numbers on the x axis and y axis from the user of which there may be thousands or millions each reformatting the numbers manually one or more times to the data originator of which there is one who only has to do it once. The format templates are regular expression strings found in current spreadsheets and programming languages. The data viewer uses the formatting strings for the axis labels on the chart view for the numbers in the tree view and as defaults for the numbers in reports. The formatting templates are automatically changed if a macro moves the numbers outside of the precision range that is legible on the chart or out of a format that makes sense in the tree view or in a report.

As stated previously one of the RDML line item element attributes is the precision of the number the number of significant digits to be displayed in a chart. Unlike conventional products which leave this entirely up to the user to figure out the data viewer uses the specified precision to set the scale of the y axis and the format and precision of its labels and tick marks.

Additionally the chart manager automatically creates and removes a second y axis as shown on . A chart with two dissimilar series plotted on it will require two axes. The y values may not be of the same units measures or scales. A user might for example have plotted a series denominated in Millions and then want to add to the same chart a series denominated of GDP and these two series cannot share a common y axis. Chart manager recognizes this incompatibility creates a new y axis and directs all subsequent formatting macros etc. to the proper axis. Current spreadsheets and charting programs require that the user restructure the chart with a charting wizard entailing many directives to be entered and much trial and error to get the various scales colors etc. correct or by custom programming. The data viewer automates this process creating and formatting a new axis if required by the specifics of the unit and scale attributes of the line items. If the series is removed from the chart the associated axis is removed and the various scales colors etc. of the remaining series are updated to make the chart readable immediately.

Class methods of a chart manager object in accordance with one implementation consistent with the present invention are described below. ChartManager is a constructor for the chart manager object and initChart initializes the chart to be empty and getChartData gets the chart data object .

The method addSeries adds a series to the chart while deleteLastSeries removes the last added series. Similarly deleteSeriesAfterFirst deletes all series beyond the first series.

A series flag is set to true if the next series is to be added in addition to the already charted series. A false flag tells the chart to erase the last current series and replace it with the new series. The methods getAddSeriesFlag and setAddSeriesFlag retrieve and set this flag.

The method getYAxisTitle returns the y axis title and checkYaxisTitle checks the current y axis title to see if the newly plotted series is to be on the current axis or if a new axis is to be created. AddY2Axis adds a second y axis to the chart if needed. The method markWhichYAxis tells the ChartData object which axis the new line item has been plotted on.

The method resetChart resets the chart to the state it was in when the data viewer started while replotChart updates the physical aspects of the chart. Similarly replotSeries replots a series due to changes.

The setChartType method tells the chart manager what chart type to display upon calling replotChart and setDataStore tells the chart manager what data store object it will be dealing with. If the data is a time series setStartPeriod sets the internal variable for the starting period of the chart. Finally the update methods each update the corresponding aspect of the chart in response to potential manipulations or changes e.g. updatePrecision updates the precision of the chart.

Below are class methods shown in Table 5 of a chart data object in accordance with one implementation consistent with the present invention. Methods having names that are the same as methods in the chart manager are not described because they perform the same function on the data alone.

The chart data object uses the methods fillXAxis CT fillXAxis TS fillYAxis CT and fillYAxis TS to fill the x and y axes of time series and chart data sets. The methods decrementNumSeries and incrementNumSeries change a counter storing the number of series on the chart.

The method getChtData returns a vector of chtData which is a vector of vectors each element of the outer vector is a vector of data for one line item. The getChtHeader method returns a vector of chtHeader which contains a vector of header information for each line item. This vector is a list of the values of the attributes of a line item e.g. magnitude title etc. and getChtHeaderElement gets the value of a particular element from chtHeader for the indicated series.

Operating on data sets getName returns the data set name and getNumRows returns the number of rows in the data set. The method getRow returns one row of a series while getSeriesLabel returns the label. The getDifferenceslnX method aligns the time periods for time series charts and getNumSeries returns the number of series in the num series variable. Many of the get methods have corresponding set methods that set the value instead of receiving it.

The chtData variable is a vector of vectors each sub vector is the data for one series and getDataItem returns the data value in a particular row and column of chtData. Used by the constructor zeroChtData posts an empty chart. The getPointLabels method returns an array of strings each of which is a point label of chtData

For a time series getStartPeriod retrieves the start period of the time series and normalizeValues normalizes values upon the addition of a series to the chart. The method getDatalnterpretation returns either array or general to describe what form the data source structure is in. A returned value of array is for Times Series and Category data which share x values and a returned value of general is for XY data in which X values are generally independent. 

Referring back to this screen shot further contains the tree view on the lower half of the screen. The tree view presents a hierarchical view of the data. The tree view serves a different purpose than datasheet view of conventional spreadsheets and database management systems. It shows the numbers in their context visually. The user can see the dependency relationships identify from icons and visual clues how the different line items are related to their parents peers and children. The Units column prominently displays the units scales magnitudes etc. of each line item an important display in mixed data sets where the unit context changes from line item to line item.

Each line item in the various active RDML documents is displayed in the original order. In the tree view each RDML document begins a new top level node. The information displayed in the tree view is a summary of important data from and about the line item not a display of all the data points as would be found in a typical spreadsheet view. Instead of presenting a potentially confusing matrix of raw data digits that make the discerning of patterns difficult the tree view shows in one implementation the following information for each line item legend units three user selectable representative data points and one or more summary columns . In the example on there is some important documentation description units some representative data in this case three years worth and a summary data column in this case the sum of all the data points . The first column displays the legend of the line item. This is the plain language description it is repeated in each view where identification of the line item must be made by a human.

The representative data columns in the tree view give the user visual clues as the relative importance the types and the format of the line items. The RDML data viewer permits the user to select different fields to be displayed. For example one user might want to see 1940 1970 2000 to get a sense of the long term trends while another might only wish to see 1998 1999 2000 to see the recent trends.

The summary column allows the user to choose a statistic that is either desired to understand the lines and their context better or that is desired for purposes of sorting the columns from greatest to least or vice versa. Any of the columns can be sorted simply by clicking on them. The summary column provides much easier statistics for the user than database or spreadsheet formulas because the RDML data viewer provides one click selection of statistical methods thus removing the need to write formulas adjust for missing values handle nulls in the denominators etc. Some examples of summary statistics include 1 sum 2 average 3 median 4 minimum 5 maximum 6 moving average 7 variance standard deviation 8 difference selected periods or categories 9 of parent 10 of specified line item 11 correlation with parent and 12 custom formulas. For each of these statistical measures the RDML data viewer provides a dialog box in which the user can adjust the assumptions. For example the moving average can be for one period five periods ten periods and so forth.

The tree view emphasizes that line items are the primary data unit in the RDML data viewer as opposed to single numbers as are found in spreadsheets as cells. Since each line item is an object the RDML data viewer may be thought of as an object oriented spreadsheet. The icons for each line item identifies that line item s context. For example a icon indicates that adding that line item to its peers will produce the parent line item. This feature addresses a shortcoming of spreadsheets and database datasheet views the inability to view formulas and data at the same time. It shows the user how the numbers are related to one another.

Conventional database management systems spreadsheet and numerical analysis tools have no built in indication of how one record is related to another. In relational databases the position or row may have no relevance to its data. RDML and the tree view changes this by making the position of a line item in a set a usable piece of information by a user and icons may visually designate the relationship of a line item to its parent node.

In one implementation consistent with the present invention the following values are used for relationship icons 1 plus 2 minus 3 times 4 divide 5 equals 6 computed at 7 member 8 collection 9 child 10 parent 11 memo 12 general 13 note 14 none and 15 root.

Sub line items may add up to the parent line item or may be modified by other relationships of their sibling line items. Plus may add to siblings while minus subtracts from them. For example a line item called Net Sales may have two children Total Revenues and Cost of Goods Sold. If Total Revenues has an li relationship attribute of PLUS and Cost of Goods Sold has one of MINUS then the treeview can show that Net Sales is equal to Total Revenues minus Cost of Goods Sold. TIMES and DIVIDE show multiplication and division of line items respectively.

 EQUALS is the same as plus but shows the result of calculations of line items above it in order. COMPUTED AT is used for assumptions such as percentages interest rates etc. while MEMBER denotes that the line item is simply a member of a collection of line items denoted by the parent line item. In this case no assumption is made regarding arithmetic relationship if any.

 COLLECTION denotes that the line item has child members one level directly below it and denotes the concepts of sets or collections. CHILD illustrates that the line item is simply a child of the parent line item. It implies a sort of descent derivation or inheritance. No assumption is made regarding arithmetic relationship if any.

 MEMO is a line item that might be of interest to those looking at the sibling line items but which is not necessarily related to the siblings while GENERAL is a generic designator. NOTE is usually used for line items with text values and NONE denotes that no relationship is implied. ROOT states that the line item is the root line item.

The tree view also provides other capabilities. It allows the user to chart multiple line items by holding down the shift key. Although number browsing can be done in the data viewer with a mouse it is also possible for users to graph line items using arrow keys. When the focus is on the tree view navigating up and down with the arrow keys automatically chart the selected line item . If the shift key is held down the succeeding data series will be added to the chart rather than just replacing the previously selected series.

In one embodiment of the present invention the selection of a contiguous set of lines that is less than all the lines in the tree view is facilitated through a series of mouse events. First a mouse down event is performed over a line e.g. Bristol Center . The mouse is then dragged down highlighting lines in the process to the last line to be included in the group e.g. Hamlet West Center . By delaying the mouse up event while retaining the cursor over the last line to be included the user is able to signal the system and the system is able to detect that all elements in the selected highlighted group are to be added. Accordingly the system checks their corresponding check boxes.

The tree view further provides an easy way of creating an RDML document through drag and drop techniques. In conventional spreadsheet and DBMS applications it is possible to create new tables from existing ones by selecting the data rows and cutting and pasting them or by writing a SQL query. In the tree view creating a new RDML document complete with necessary documentation can be performed by dragging and dropping the desired line items to an icon that represents the new document. Macros may also be created and manipulated in the same manner.

The data viewer may also set macros to be executed automatically as the selected line items are changed. Known as locking of macros this permits browsing through data in a transformed state.

Referring to as line items are added to and subtracted from the chart view or tree view they are added to and subtracted from the spreadsheet . In addition any changes to the lines plotted on the chart view as the result of applying a macro or combination of macros are immediately reflected in the numbers in the spreadsheet . This provides one click addition of information to the spreadsheet view . Therefore the way to copy data into the spreadsheet is simply to add them to the chart . It is also possible to copy an entire data document or collection of data documents from the tree view to the spreadsheet view making any desired macro changes in the process.

Furthermore RDML documents may be created directly from the spreadsheet view . Whereas a data table is shown in the spreadsheet either created from another RDML document or typed in from scratch an RDML document may be created from that data in from the default specified by the user. This performs a task similar to an XML editor but does so in a table format for the data which is a more natural way to enter tabular data not in the tree structure of current XML editors.

The spreadsheet view may also directly read Internet data using a URL . It will except formulas that use Xpointers used by Xlink to specify destination of a link to read in data from remote RDML documents . In this manner data may be incorporated into a single spreadsheet from a number of sources with no need to prepare query or provide custom programming code.

As shown in the class diagram below in Table 6 the spreadsheet manager may be a simple object the chart manager chart data and combination may be the actual repositories of the data. The chart manager feeds data to the spreadsheet manager which places the data in the correct cells. The spreadsheet manager communicates directly with a graphical spreadsheet object which in the case of the RDML data viewer may be a third party component.

The footnotes in the footnotes view are intended to be simple important reminders about the data. Typically these include usual periods a fiscal year adjustments special problems and so forth. By default the footnotes view also shows the source of the RDML document and the original underlying data. In one implementation consistent with the present invention anything requiring more than 255 bytes is represented in an HTML page for which there is a hyperlink in the line item. These longer footnotes may be displayed in the HTML window as HTML documents.

Furthermore as the user adds and subtracts series from a chart the footnotes are automatically updated from the source data even if there are multiple source documents. The footnotes in the RDML Footnotes tab also automatically update their numbers and labels to match the chart. This is in contrast to current spreadsheet and charting programs which require that the user not an automated lookup routine supply the footnotes.

The macro manager manipulates and implements macros in the data viewer . Macros allow a user to apply transformations or calculations to line items on a one click basis instead of having to write formulas or queries.

The data viewer may also create XML and RDML documents from spreadsheet files. To this end it may use a spreadsheet wizard to create tagged documents from a table of data in a spreadsheet. In one implementation consistent with the present invention a wizard using at least one dialog box is created in a scripting language e.g. Excel Visual Basic for Applications allowing tabular data in a spreadsheet e.g. Excel to be used as the source for creating a tagged text document in the RDML format.

The user then highlights the legends in the left most column and opens the first dialog box step shown on which will insert new columns for information in front of the data table each column containing one type of attribute step .

Appendix G provides code used in one implementation to create an RDML document . Generally the process comprises steps of 1 opening file and buffers for writing 2 calling an element creation method for each element in the DTD which can be nested within others and 3 saving and closing the files when finished.

RDML is designed to be used to describe numbers across industries and domains. To do so it provides a basic set of tags and a matching vocabulary to describe six aspects of a table of numbers 1 value 2 structure 3 format 4 semantics 5 provenance and 6 measurement.

Value denotes that numbers are transmitted as strings with additional tags to define their data type degrees of precision handling of missing values handling of nulls and other directives to the end application.

Structure refers to a structuring of the data in within a table. RDML permits records to be arranged hierarchically within a table. Although not a standard approach for relational tables this permits multiple levels of information to be placed in a single two dimensional table. Users desire this for example when viewing financial statements where a single line item e.g. Equipment leasing may have several sub components Autos Trucks Office Equipment. 

Format allows the application to present users with numbers in human readable form. The tags specify default formats for numbers internationalization issues such as comma decimal point handling and default legends and chart titles. These formats may be changed by the users at run time.

Semantics refers to the fact that RDML provides generic tags in which indicators of the meaning of the numbers including the vocabularies of other SGML and XML markup languages can be placed. This allows RDML to act as a wrapper for data from other markup language documents. Semantic meaning is also conveyed in text based attributes legends titles labels footnotes etc.

Provenance is the documentation of various elements. RDML elements include information on the source of the data who marked it up timestamps and link addresses and licensing information etc.

Finally in the context of generic numbers Measurement refers to the characteristics necessary to describe the measurement aspects of the domain the number is taken from units meters feet magnitude millions billions modifiers Adjusted for inflation 1997 index and so forth. This permits macros to ensure the results of any calculation are adequately derived and described to the end user.

The screen shots of and have been of the graphical user interface GUI which has several responsibilities. Generally it creates itself and other visual components upon start up of the application and provides a central storage place for a minimal number of global variables of the application such as file directories etc. . Further it responds to user actions such as mouse clicks and keyboard shortcuts and repaints the screen or portions of the screen at appropriate moments.

The HTML browser may be a third party component which displays HTML files. Although this browser has been designated as an HTML browser one of ordinary skill in the art would appreciate from this disclosure that other browsers e.g. an XML browser can likewise be used. This component provides basic web browsing capabilities and a way to view hyperlinks for RDML documents . Additionally it acts as a display window for certain pages generated by the RDML data viewer such as RDMIL document source code chart documentation etc. 

The RMML DTD data structure is optimized to provide information needed in the order in which it is required to reduce the learning on the part of new users to RMML Macro development and to avoid unnecessary duplication. The first line of the DTD in Appendix D starts with because XML documents start with a line that tells the client application in this case the RMML Interpreter described below and the data viewer what type of document it is and the version of XML.

With further reference to the DTD used to define RMML macro documents is structured in a hierarchical tree structure of elements. Each element may include a list of attributes displayed in Appendix D but not shown on and or an association with one or more sub elements. As with the RDML DTD described above some attributes may be required while others may be optional depending on design parameters. At the highest level the DTD has three elements descending from a root element . The first element contains the metadata for the document as a whole. The second contains the source code expression to be evaluated related variables and instructions to the application regarding the graphical user interfaces for any parameters. The third contains elements related to remote data RDML documents or other macros RMML documents .

The macro header element is designed to match as closely as possible the rdmldoc header element of RDML documents . This saves learning time for developers and end users and allows reusable code modules to be built for both purposes.

Nevertheless in one implementation consistent with the present invention the element contains several attributes that are unique. In this implementation there are 8 unique attributes in the element . The first of these is macro type. This attribute tells the application which general capability this particular macro requires within the context of that application. The application uses this attribute in a factory class to create the correct type of macro object for internal use. Two example types consistent with this implementation are 1 TSL time series line a macro that works with time series to create a new line or lines on the chart and 2 TSO time series overlay a macro that works with time series to create a new overlay on the chart such as gray backgrounds behind certain time periods. 

The result type attribute tells the RDML data viewer how to display the results of any transformation created by the macro. There are in one implementation five permissible values for this string Replace Each Replace All Replace AB Add New Add Annotation and Add Overlay. Replace Each removes every line on the chart in the RDML data viewer and replaces it with the transformed version. For example if there are four series on the chart all denominated in miles and user selects a macro to kilometers then every line will be converted to kilometers the miles lines erased and the kilometers lines placed on the chart in their place.

Replace All is used where all current lines are being replaced by one line. For example if A and B are charted a macro called B as of A would replace them with a single line. Replace AB is a special case of Replace All where there are only two lines charted. Add New adds a line to whatever is plotted. For example a macro called Average might draw a line through the existing line at the average level. Add Annotation adds a label with a pointer to a certain value on a chart e.g. 2 3 Stock Split . Add Overlay adds a shaded area behind certain regions of the chart.

The attribute rdmldoc type designates the type of RDML Document with which the macro is designed to work. Valid strings for this attribute are TS CT and XY corresponding to the types of RDML Documents .

The elements and are identical to and play the same role as and in the RDML Document Type Definition . The element is a container for two sub elements and . The element contains a short string e.g. under 50 characters which describes the basic functionality of the macro. It appears in the description label of the parameters panel shown in and described below For users desiring a more detailed description of the macro the element contains a text block that provides this information. This text block can be read by the data viewer in an HTML pane as part of the regular help system. This text block is intended to provide information on all aspects of the macro that might be of interest to the user its use its code its parameters and its inputs.

The second top level element is . This section contains the actual source code and related variables. The element contains one or more expressions which evaluate to a transformation of certain numbers in the RDML data viewer . In one implementation consistent with this invention the transformations apply to the chart view in the RDML data viewer . But transformations may also be applied to the treeview or other views.

The expression s in this element are formulas similar to those seen in spreadsheet formulas the expression is a series of 1 operators 2 literals 3 variables 4 functions and 5 miscellaneous expression delimiters. The main difference from traditional spreadsheet formulas is that the variables may stand for either scalars or vectors depending on the source or the context. A sample expression follows 2000 3 12 45 

Operators are addition subtraction multiplication division less than or and . The operators have different meanings based on the types of the sub expressions they work on. Operating on two vectors is interpreted as element by element operation on the two vectors. Thus A B where A and B are vectors is C a1 b1 . . . an bn.

Literals are defined either directly in the expression e.g. 46 or assigned to a variable e.g. pi 3.14156 .

Variables can come from one of six different places in RMML. First they can be defined as variables directly in the RMML document . This is done by creating a element and assigning it a default value. Second variables can be associated with graphical components in the parameters panel in the RDML data viewer . In one implementation consistent with this invention there are four different types of gui components. These are listed and described below under element . Third a variable can be defined from a line item element identical to those found in an RDML document . Because they are identical a line item can be simply cut and pasted from an RDML document to an RMML document . Fourth a variable can be drawn from a remote source. In one implementation consistent with the present invention that remote source can be a hyperlink to a line item in an RDML document . This is accomplished by using an Xpointer hyperlink in the href attribute of a variable element. Fifth a variable can be defined as one of the series of data that is currently plotted on the chart. In one implementation in accordance with the present invention there can be a maximum of six series on the chart each can be accessed by using the reserved words A B C D E and F. As would be appreciated by one of ordinary skill in the art any number of uniquely definable series may be used. If the result type attribute of a macro is Replace All then the expression is evaluated once for each series with A being the series currently being transformed. Sixth variables can be taken from an RDML document that is already loaded in the RDML data viewer . In this case the expression indicates the URL and a class string that can be found in one of the li class elements of a line item element. The expression then uses that line item as the variable value.

Functions that are built in are provided by the interpreter in one implementation consistent with the present invention and are a principal means of extending the language. These are in the form FUNCTION NAME expression . Functions include IF x y z SUM x AVERAGE x COUNT x MIN x MAX x and so forth.

Miscellaneous delimiters are implemented by separating expressions by a semi colon . This indicates that the expressions are to be evaluated in order. Expressions can also be grouped in parentheses to tell the interpreter how to evaluate sub expressions.

Any string appearing in the element will be displayed in the parameters panel to give the user any last minute instructions or suggestions. The element contains any number of elements that describe graphical components. These graphical components will appear in the parameters panel to give the user the ability to make changes to the macro s parameters. Four gui components not shown may be and . The is a vector variable where the individual values of the vector can be viewed in a scrolling list box. A element is a scrolling list each time the user clicks on a different item the value of the variable attached to that component is changed to the value associated with that item. A is a collection of radio buttons each is associated with a different value. As the user clicks on different buttons the value associated with the component itself is changed and the macro is re run. A is an input field that allows the user directly to input changes to the macro.

Generally macros are not meant to run blindly on all data. First the interpreter checks if the macro has any qualifiers that must be checked against the data. If there are any strings in the element of the RMML document these are checked against strings in the element or other elements or attributes of the data. If the data is qualified the interpreter will proceed with running the macro. For example if the element of the macro specifies li unit currency then the macro will only be run if the li unit attribute of the data being operated on is a currency value.

The element holds error messages that can be displayed by the RDML data viewer if there are problems of an indicated type. The element holds instructions to testing applications regarding automated testing routines. These applications undertake basic unit testing such as checking for out of bounds problems missing value problems divide by zero issues etc.

The third major section of the RMML document the element holds references to outside macros and data sets that might be incorporated into the macro by reference. The two sub elements are accordingly the element and the element .

Generally there are three major areas of the RMML Macro Package the RMML document handling classes the graphical interface and the macro interpreter . In one implementation consistent with the present invention this package of software classes connects to the RDML data viewer in only a few places it gets data from the ChartManager ChartData objects posts its graphical components through the GUI object and can access the loaded RDML documents in the Primary Data Store .

The RMMLDoc can be structured in two ways either wrapping a TXDocument object to arrive at an RMMLDoc or creating a new RMMLDoc object with the data from the TXDocument.

The RMMLDoc object contains methods for accessing individual elements and attributes of the document in a way that is easy to comprehend in the context of the macro package. The RMML Lib object is a cache for loaded and active RMMLDoc objects .

The RMMLDoc is a raw collection of data about a macro its formula its help text etc. and generally does not act on data sets to transform them. The macro s capabilities first have to be used to create an internal object macro interface that is capable of doing the calculations. This internal macro object is created by a collaboration between the MacroLibrary object which is a cache of the graphic objects for the active macros and the MacroFactory which determines which type of internal macro to create. 

There are four types of internal macros time series TS category CT xy plot XY and overlay OVERLAY . The macro type attribute is used by the MacroFactory to create the correct type of internal macro Macro TSL Macro CT Macro XY and Macro OVER respectively. The MacroAdapter class performs the work of the macros.

Described below are class methods shown in Table 7 of a MacroAdapter object in accordance with one implementation consistent with the present invention. First MacroAdapter is the constructor that creates a MacroAdapter object. Before a macro is run it has a chance to make a copy of the data that it is about to transform so that undo operations can be performed. The createMemento method takes a snapshot of the data plotted on the chart by copying the ChartData object to a Memento object.

Also before a macro is run the method initMacro is run and gives the macro a chance to load any remote data or macro code. The replaceVariable method runs the macro on multiple series on a chart. For example if the result type is Replace Each and there are four series charted on the chart the macro will be run four times. The first time A in the formula represents the first series the second time it represents the second series and so forth. The method performTransformation evaluates the transformation string and updates the various titles and legends. An important part of performTransformation s code is to determine the result type of the macro and call the evaluateFormula method in the correct manner. For Replace Each it is called once for each series while for Replace All it is run only once.

The performTransformation method also calls the four update methods updateChartTitle updateLabels updateLegend and updateYAxisTitle . Each of these modifies the relevant strings in the ChartData object so it can be passed on to the chart.

The NewMacroPanel may be a subclass of a JPanel in Java s Swing set of classes. Those skilled in the art will be able to chose the appropriate class to use for other major platforms. The left side of the NewMacroPanel is a frame for a multiple document interface in this case a Desktop for JinternalFrame objects from Java s Swing Set . Each MacroLibrary that is opened created a new internal frame which allows users to select macros from multiple libraries at the same time.

When a MacroLibrary is opened all macros within it are loaded and registered. Registration is a series of methods wherein the macro s variables are found in various elements of the RMMLDoc and graphical representations of these variables are built for inclusion in the parameter panel .

The graphical components for all of the variables associated with a set of macros are created in the MacroAssumptionGroup class. This class has a factory method that examines the attributes of the variables reported by the RMMLDoc variable name variable value gui type default value etc. and creates the appropriate MacroGUI class MacroGUI List see MacroGUI RadioButton see MacroGUI Vector see or MacroGUI Default see . Each of these graphical compents appears differently in the parameter panel as shown in the screen shots noted.

The registration of macros by the MacroLibrary also involves creating an MVariable object to go with each variable and adding these to a cache of available Mvariables . These Mvariable objects are used in the actual evaluation of expressions. The registration process also involves registering the MacroGUI objects as sources for events that the MacroManager object can use to trigger the running of a macro. Mvariables encapsulate the various characteristics of a variable its value default and source.

The description panel and the parameter panel are populated with graphical components and text when a particular macro is selected in the treeview listing of a MacroLibrary internal frame. The macro that is selected provides the description text the various labels and the MacroGUI components.

The MacroManager object is responsible for detecting that a macro has been selected or a parameter changed getting the various data sets and variables called up and made available to an Evaluator object and that the data set charted or showing on the treeview is obtained and transformed and sent back to be recharted on the chart or relisted on the treeview.

ChartData contains the data from the current chart or active treeview depending on the type of the macro . It makes this data available as just another variable to the Evaluator object and takes the final result of the Evaluator object .

The Evaluator evaluates the string expression s in the element of the RMML document or the various expressions from the macros that have been selected. The expression is broken up into tokens by the Tokenizer classes . These tokens are the various operators variables literals functions and other control symbols used in the RMML expression language detailed above. From these tokens the Formula object builds a parse tree by recursive descent made up of FormulaNode objects created from the tokens. The FormulaNode objects evaluate themselves using the resolver objects VariableResolver and FunctionResolver . These resolvers in turn call the Evaluator objects to give them the current value of a variable or a function. For example the Formulallode evaluation process may have an A token the Evaluator object knows that this means series A on the chart and uses the vector of data it could be an array or other data structure currently found in the chart . The formula exception relays errors associated with the processing of a function.

The foregoing description of an implementation of the present invention has been presented for purposes of illustration and description. It is not exhaustive and does not limit the present invention to the precise form disclosed. Modifications and variations are possible in light of the above teaching or may be acquired from practicing of the present invention. The scope of the present invention is defined by the claims and their equivalents.

