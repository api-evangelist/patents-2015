---

title: Mapping relationships among virtual elements across a system
abstract: A technique for mapping relationships among virtual elements across a system includes: for a server having a virtualized network interface controller (vNIC) with a plurality of vNIC links connected to a switch, identifying relationships between physical ports on the switch and virtual ports on the switch; for each vNIC link, identifying local area network (LAN) interface information on the server; creating data structures establishing topology information between the switch and the server; and creating a mapping of each vNIC link to a respective virtual port on the switch by correlating the topology information with the LAN interface information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09647895&OS=09647895&RS=09647895
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09647895
owner_city: Armonk
owner_country: US
publication_date: 20150608
---
Server virtualization describes a software abstraction that separates a physical resource and its use from the underlying physical machine. Most physical resources can be abstracted and provisioned as virtualized entities. Some examples of virtualized entities include the central processing unit CPU network input output I O and storage I O. A virtual machine VM is a virtualization of a physical machine and its hardware components. A VM typically includes a virtual processor virtual system memory virtual storage and various virtual devices. A single physical machine can host a plurality of VMs. Guest operating systems execute on the VMs and function as though executing on the actual hardware of the physical machine.

A layer of software provides an interface between the VMs resident on a physical machine and the underlying physical hardware commonly referred to as a hypervisor or virtual machine monitor VMM . This interface multiplexes access to the hardware among the VMs. Typical server virtualization implementations have the VMs share the physical network interface e.g. a network adapter network interface card or NIC of the physical machine for performing external network I O operations. In some systems the NIC may also be virtualized. For example an Unified Fabric Port UFP protocol may be used to flexibly allocate reallocate and or adjust bandwidth for a communication link. The UFP protocol logically partitions the physical communication link that connects the port of a physical network interface on a server e.g. the NIC to the port of a network switch into logical subdivisions or channels each a vNIC . To the operating system on the server or to the hypervisor each channel appears as an independent physical network interface having its own unique media access control MAC address. Each channel is independently managed as a separate switch port i.e. virtual port on the network switch. The number of channels and the bandwidth of each channel are configurable from the network switch or through an application programming interface API to the physical network interface.

According to one aspect of the present disclosure a method and technique for mapping relationships among virtual elements across a system is disclosed. The method includes for a server having a virtualized network interface controller vNIC with a plurality of vNIC links connected to a switch identifying relationships between physical ports on the switch and virtual ports on the switch for each vNIC link identifying local area network LAN interface information on the server creating data structures establishing topology information between the switch and the server and creating a mapping of each vNIC link to a respective virtual port on the switch by correlating the topology information with the LAN interface information.

Embodiments of the present disclosure provide a method system and computer program product for mapping relationships among virtual elements across a system. Embodiments of the present disclosure are configured to create a mapping or network topology between virtual network interface card vNIC ports on a server to virtual ports on a switch. Thus for example in some embodiments the method and technique includes for a server having a virtualized network interface controller vNIC with a plurality of vNIC links connected to a switch identifying relationships between physical ports on the switch and virtual ports on the switch for each vNIC link identifying local area network LAN interface information on the server creating data structures establishing topology information between the switch and the server and creating a mapping of each vNIC link to a respective virtual port on the switch by correlating the topology information with the LAN interface information.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

With reference now to the Figures and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments of the present disclosure may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

In some embodiments server and server connect to network along with data store . Server and server may be for example IBM Power Systems servers. In addition clients and connect to network . Clients and may be for example personal computers or network computers. In the depicted example server provides data and or services such as but not limited to data files operating system images and applications to clients and . Network data processing system may include additional servers clients and other devices.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for the different illustrative embodiments.

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

In some embodiments memory may be a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. Persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable such as but not limited to a removable hard drive.

Communications unit provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Modems cable modem and Ethernet cards are just a few of the currently available types of network interface adapters. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit enables input and output of data with other devices that may be connected to data processing system . In some embodiments input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer readable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples.

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. For example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In the two physical interfaces of NIC pNIC and pNIC connect to respective switches switch and switch . For example the multiple virtual pipes created by virtualizing pNIC and pNIC connect to respective internal switch ports and of switches and .

NIC can function according to the following modes 1 pNIC mode or vNIC mode is off 2 Virtual Fabric Mode or vNIC 1 mode 3 Switch Independent Mode or vNIC 2 mode and 4 Unified Fabric Port or vNIC 3 mode . In pNIC mode the adapter operates as a standard adapter e.g. such as a dual port 10 Gbps Ethernet adapter and it functions with any 10 GbE switch. In pNIC mode NIC operates in a traditional Converged Network Adapter CNA mode with two Ethernet ports and two storage ports e.g. iSCSI or FCoE available to the operating system.

In the Virtual Fabric Mode vNIC 1 mode NIC communicates with the switch to obtain vNIC parameters. For example a special tag may be added within each data packet and is later removed by the NIC and or switch for each vNIC group to maintain separation of the virtual data paths. In vNIC 1 mode each physical port is divided into a number of virtual ports per adapter. The bandwidth allocations between the different virtual data paths may be changed through a switch user interface without requiring a reboot of server .

In Switch Independent Mode vNIC 2 mode adapter works with switch and provides the same capabilities as Virtual Fabric Mode in terms of the number of vNICs and the bandwidth that each can be configured to have. Switch Independent Mode extends the existing virtual local area networks VLANs e.g. connected to switches to the vNIC interfaces. In vNIC 2 mode when storage protocols are enabled on VFA the different vNICs may correspond to different protocols e.g. some number of vNICs are Ethernet and another number of vNICs are iSCSI or FCoE.

Unified Fabric Port UFP vNIC 3 mode is most closely related to vNIC Virtual Fabric Mode in that in both sides the switch and the NIC CNA share in controlling bandwidth usage but there are significant differences. Compared to vNIC Unified Fabric Port supports the following modes of operation per vNIC vPort 

VFA and switches can be configured in different modes which makes it difficult to determine the network topology between server and switches . For example there is no direct way to determine the topology information from the data collected via Simple Network Management Protocol SNMP on the switches and via Common Information Model CIM on server . Embodiments of the present disclosure enable the identification of how the vNICs are connected to the virtual ports on the switch. The switch provides information about the connecting server port only for the physical port of the switch in the Link Layer Discovery Protocol LLDP remote device information. It has no information whether vNIC technology is being used. Additionally the link is discovered between a physical port of the switch and one of the virtual ports of the server but this may be an incorrect relationship. Also the common SNMP inventory of the ports may not have the information of the virtual ports either. The server inventory however has the information of the vNICs each with distinct media access control MAC addresses obtained from the driver of VFA .

Embodiments of the present disclosure use the combination of LLDP information which is only partially available and not specific to vNICs and an algorithm to correlate this information with server side vNICs to extract the network topology for virtual ports. SNMP or forwarding database FDB information may also be used instead of LLDP to serve as a foundation input to the algorithm. In a virtual relationship module is illustrated. Module obtains and or otherwise uses the LLDP information to correlate the LLDP information with server side vNICs to extract a network topology for virtual ports of the system. Module may be implemented in any suitable manner using known techniques that may be hardware based software based or some combination of both. For example module may comprise software logic and or executable code for performing various functions as described herein e.g. residing as software and or an algorithm running on a processor unit hardware logic residing in a processor or other type of logic chip centralized in a single integrated circuit or distributed among different chips in a data processing system . In module is illustrated as residing on server however it should be understood that module may be otherwise located.

Module refers to various devices in the network like switches servers operating systems as systems or manageable endpoints. These systems can but not necessarily have network interfaces like LAN IP VLAN and ports interfaces. They are also called as endpoints e.g. a LAN endpoint . For example 

Module performs the following functions operations 1 establishes relations between physical ports and virtual ports on the switch 2 establishes the specific LAN interface information on the server hypervisor 3 creates data structures to establish customized topology links between the switch and the server using available LLDP information and 4 creates new topology links by correlating the information on the switch with the server.

Module establishes relations between the physical ports and the virtual ports on the switch by gathering using information of the switch ports LAN interfaces and VLAN interfaces which is generally accessed through Simple Network Management Protocol SNMP Management Information Bases MIBs and displayed in system management application s . However ports corresponding to the vNIC technology are not the physical ports even though they behave like one . The ports corresponding to the vNIC technology are accessed from different SNMP MIBs and are represented as virtual ports related to the parent physical port. The following exemplary pseudocode describes a process for establishing relations between the physical ports and the virtual ports on the switch 

Module establishes the specific LAN interface information on the server. The server inventory will generally only show the physical NICs. However for only the first vNIC matched will that MAC address which is missing in the LLDP information be obtained from the switch. Thus for a vNIC based environment the system management application s has to create the virtual NIC LANEndpoints. This is resolved in the module by using an adapter specific API to retrieve the LAN interface details for the vNICs and representing them in the systems management application for the server. The following exemplary pseudocode describes a process for establishing establishes the specific LAN interface information on the server 

Module also creates data structures to establish customized topology links between the switch and the server using available LLDP information. For a data center environment system management applications have to create links between servers and switches based on information obtained using protocols like LLDP the FDB etc. This information is directly represented using Ethernet links between the LAN interfaces of the systems.

Module may use different methods to obtain the topology information in vNIC cases and extrapolate for the vNIC connections. For example in one embodiment using vNIC specific SNMP MIBs the server port MAC addresses for the individual vNICs in the switch SNMP data for vNIC MIBs is used. In this method the links of the vNICs on the switch and the server side are directly shown. But this is possible only in the case of Virtual Fabric Mode vNIC Mode 1 . For other modes the server vNIC MAC addresses in the SNMB MIBs are not obtained. Thus using LLDP data from SNMP MIBs e.g. querying the SNMP table for LLDP data the MAC address of one of the vNICs associated with the physical switch port are obtained. So once that link is established e.g. the physical switch port and one of the vNIC ports of server the module traverses to the physical NIC of the server to obtain the server vNIC and based on the virtual indexes the vNIC connectivity is established.

As discussed above for the vNIC modes of the system the information cannot be directly transformed into a link directly because it is partially incorrect information. However the management applications generally depict a consistent view across all the systems be it virtual or physical. Thus module module creates a generic infrastructure to fetch this information from the server and the switches and creates uniform consistent relationships customized for vNIC. The following exemplary pseudocode describes a process for creating data structures to establish customized topology links between the switch and the server 

Module then creates new topology links by correlating the information on the switch with the server. As indicated above all the network interfaces wherever required have already been established. Actual correlations between these interfaces are now established. For example in the above described processes the LAN and port interfaces for the server hypervisor and switches have been created. These systems already have vNIC information distributed but not related to each other. Module traverses some relations and creates the topology links Module create these mappings by treating one set of the server switch system its LAN interface and port interface connected to each other as a trio. depicts an exemplary representation of this trio having a server switch system Ethernet port and LANEndpoint connected to each other as a trio. Module extrapolates the LLDP link found for the physical port. The link is discovered between the physical port of the switch and one of the virtual Ethernet ports of the server. This in itself is an incorrect relationship. Additionally links for the remaining virtual Ethernet ports on the server are missing. Module relies on the index of the port obtained from SNMP inventory data of the switch and the adapter drivers on the server. The following exemplary pseudocode describes a process for extrapolating the LLDP link found for the physical port 

Thus embodiments of the present disclosure generates relationships between physical ports on a switch and virtual ports using vNIC technology based on system configurations. These relationships are then traversed to generate data structures e.g. maps that represent vNIC information on the server. Using these data structures module displays a view of the systems communicating at the vNIC level with each other.

At block module creates data structures to establish customized topology links between the switch and the server. At block module identifies a system switch server Ethernet port and LANEndpoint as a connected trio. At block for the server LANEndpoint and switch LANEndpoint module identifies a virtual port identifies the parent physical port for the virtual port identifies vNIC virtual ports of the trio switch trio identifies an Ethernet port of the server LANEndpoint identifies the parent Ethernet port for the virtual Ethernet port and identifies the vNIC Ethernet ports of the trio server trio . At block for each virtual port of trio which is a vNIC based port module identifies a server trio creates relationship between the switch trio and the server trio and adds the relationship to the topology link mapping.

Thus embodiments of the present disclosure generates relationships between physical ports on a switch and virtual ports using vNIC technology based on system configurations to derive mappings of the topology links between virtual ports on a switch and corresponding vNIC links on a virtualized adapter interface. A virtual relationship module utilizes LLDP or other information to create relationships between physical and virtual ports on a switch identifies LAN interface on a server hypervisor for vNIC links of the adapter on the server creates data structures to establish links between the switch and the server and then creates new topology links by correlating the information on the switch with the server.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the disclosure. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present disclosure has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the disclosure in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the disclosure. The embodiment was chosen and described in order to best explain the principles of the disclosure and the practical application and to enable others of ordinary skill in the art to understand the disclosure for various embodiments with various modifications as are suited to the particular use contemplated.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

