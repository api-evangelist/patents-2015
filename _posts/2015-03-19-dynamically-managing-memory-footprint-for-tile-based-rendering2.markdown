---

title: Dynamically managing memory footprint for tile based rendering
abstract: The introduction of an “out-of-memory” marker in the sorted tile geometry sequence for a tile may aid in handling out-of-memory frames. This marker allows hardware to continue rendering using the original data stream instead of the sorted data stream. This enables use of the original data stream allows the system to continue rendering without requiring any driver intervention. During the visibility generation/sorting phase, the number of memory pages required for storing the data for a rendering pass is continuously tracked. This tracking includes tracking the pages that are required even if the hardware had not run out-of-memory. This information can be monitored by a graphics driver and the driver can provide more memory pages for the system to work at full efficiency.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09601092&OS=09601092&RS=09601092
owner: Intel Corporation
number: 09601092
owner_city: Santa Clara
owner_country: US
publication_date: 20150319
---
Tile based rendering is a hardware rendering technique where the three dimensional 3D geometry for a rendering pass is first sorted into the bins which correspond to tiles in the frame buffer and then each tile is rendered. Tile based rendering hardware derives its efficiency by rendering the full geometry of a render pass for each tile and keeping the rendering buffers associated with tiles in hardware cache. An end user visible application frame consists of a sequence of rendering passes .

Since the tile based renderers derive efficiency from the rendering the full render pass they need to buffer up the geometry information for the full render pass. If the scene is very complex the allocated buffer storage may not be enough. A graphics driver can try to compensate for this by allocating larger buffers but then this triggers another problem. In order to maintain the responsiveness of the overall system it is desirable to minimize the memory footprint of all the running applications. It does not make sense to allocate the same amount of memory for geometry buffers for rendering a widget as it does for rendering a complex 3D scene.

Due to the above trade off there is no good solution. If too little memory is allocated the graphics hardware can run out of memory and then would have to signal to driver components to add more memory which can result in an end user visible stall. If too much memory is allocated per application then overall system responsiveness is adversely affected.

The two conflicting conditions can be balanced by rendering the frames with out of memory somewhat more slowly without any stalls and providing an opportunity for software to recover and increase the memory footprint when increased application footprint is detected. Additionally information is provided on how much additional memory would have been required.

 Visibility recording driven tile based rendering includes two passes. In the first pass the incoming application stream is processed and visibility information for each primitive e.g. triangle is generated per tile. In the second pass the incoming application stream is re processed for each tile together with the recorded visibility information. Visibility information records which triangles have survived back face culling together with information about whether a primitive would be visible in a tile including visibility due to rasterization rules.

Traditional tile based renderers read input object position and output window positions during the first phase and then re read the window position. Input object position typically indicates coordinates of object vertices in some local coordinate system where each object may have its own origin. Output window position indicates the positions of objects relative to the screen space and all objects are now described with respect to a common origin. In contrast to traditional tile based rendering architectures the visibility based tile rendering algorithm reads the input object position writes out a visibility bit per primitive per tile during the first phase to indicate whether a particular primitive is visible within a particular tile and reads the visibility during the rendering phase. If the primitive is visible it re reads the input object position during the rendering phase. This leads to reading the position twice but writing only 1 bit of visibility per primitive instead of a lot of intermediate information.

Visibility information is stored in memory pages. The number of pages required is a function of the application complexity. As was mentioned previously a graphics driver tries to minimize the footprint of this allocation.

A high level flow of tiled rendering using visibility recording is shown in . The sequence shown in may be implemented in software firmware and or hardware. In software and firmware embodiments it may be implemented by computer executed instructions stored in one or more non transitory computer readable media such as optical magnetic or semiconductor storages.

The sequence begins when an application submits a frame for rendering stage . The frame commands in the application are recorded as indicated in stage . Then the flow splits.

At step for each tile primitives that are not visible are culled and whether a primitive is visible in the tile is recorded. Then the tile data is sent to the renderer indicated at . The tile is rendered using the recorded visibility information. A check at diamond determines whether all tiles have been rendered. If not a count is incremented at and the remaining tiles are rendered at . When all the tiles have been rendered the recorded data buffers are reset at block .

While the system described above works robustly when enough memory is available one of the key considerations is how to handle the condition when no more memory is available for recording the visibility information. Introduction of an out of memory token in the sorted tile visibility information helps with handling out of memory frames without requiring additional memory. The visibility generation stage since it does not have any more memory records an out of memory marker as a terminating marker and all subsequent visibility information for that tile is discarded. As a result the visibility generation stage continues to function without requiring any driver intervention.

While the out of memory token handled the processing of the input stream since the visibility information is not complete the rendering systems need to produce the correct image. When the tile is rendered the out of memory token signals to the rendering sub system to continue rendering the tile using the original data stream without the help of the visibility data . Any geometry following the out of memory token for a tile is considered visible in that tile. It may be slower since more geometry even things not intersecting the tile would be processed per tile instead of being discarded right away but is ultimately discarded since it does not intersect the tile. Overall the rendering results are correct and comply with the application program interface API requirements since each tile is rendered one at a time.

During the visibility generation sorting phase the number of memory pages required for storing the data for a rendering pass is continuously tracked. This tracking includes tracking the amount of required memory e.g. pages even if the hardware had not run out of memory. This information can be monitored by a graphics driver as will be explained later and the driver can provide more memory pages for the system to work at full efficiency.

The graphics driver starts off with a conservative number of pages for recording the visibility information. But this conservative or even a generous value may be too small when the application frame is very complex. In such cases the visibility information recording is terminated with an out of memory marker or token.

When a tile is rendered it starts out having visibility for the incoming geometry and that part is processed regularly. However if during the rendering phase for a particular tile the out of memory marker is encountered all the remaining geometry is processed as if everything is visible to the tile i.e. without using culling information. This requires more work since culled primitives are also processed but it produces the right results since the rendering to a tile is constrained by a scissor region which precludes rendering outside the tile.

In other words if a primitive is allowed because of the out of memory condition to be processed initially even though it is not visible the primitive will not be drawn because it is outside the pertinent tile s scissor region so a low level scissor operation will ultimately exclude the primitive that passed because of the out of memory condition. It should be noted that such a scissoring operation is required anyways for processing a primitive that is partly inside the tile and partly outside the tile.

If the driver s conservative guess for memory allocation is based on some measure of incoming vertex count a good chunk of the render pass is drawn at high efficiency using the visibility information. Only the last sub section of the render pass where the out of memory marker was generated may experience performance degradation.

It is not necessary that all tiles have the out of memory condition. For example if a tile contains a very complex object with lots of primitives then that tile may be the only tile with the out of memory condition and all the remaining tiles may all render normally. The out of memory condition is processed automatically in hardware without blocking the rendering sub system by generating an interrupt and requiring an interrupt to be serviced before resumption. Additionally there is no guarantee that a graphics driver is always able to allocate additional memory. But even when additional memory cannot be allocated the out of memory scheme described here will continue to function and allow the scene to be rendered.

While rendering with some performance loss may be fine for a frame or two continuing to render in an out of memory mode may result in overall reduced performance. In order to address the recovery from the out of memory condition a counter in the hardware continuously records the number of memory pages allocated for the visibility information . This counter not only records the number of pages used it also records what would be required when out of memory condition is reached.

Since the system has reach out of memory condition no new pages can be allocated but the count is maintained as if pages were allocated. In the out of memory condition the visibility information is generated as it normally would be and page counts are incremented. However the visibility information for a tile is discarded because of the out of memory condition. Processing of the graphics primitive commands is continued without requiring an agent such as a software driver to resolve the out of memory condition before processing the remaining commands for example by allocating more memory pages to store the tile s visibility information.

An application frame may include several render passes. One render pass may be for generation of shadow information and another may be for generation of deferred lighting parameters and so on. The tiled rendering system is not only consuming pages for recording but is also freeing up pages as rendering is completed for each render pass.

The out of memory marker described previously is per render pass in one embodiment. If render pass 3 generated an out of memory marker this does not mean render pass 4 will generate out of memory marker. Each render pass has its own memory requirements since the processing of render pass 3 will free up memory pages that can be used for render pass 4. Given that each render pass has its own memory requirements a graphics driver can for example do the following 

As the counter values are stored in memory a graphics driver can continuously monitor the values and take actions. Consider as an example below the counter values reported for different render passes.

The driver can subtract two adjacent values to determine how many pages are required for each render pass. As an example render pass 5 requires 125 memory pages and if only 75 pages are provided the graphics driver can add more pages for recording visibility. The driver also has the flexibility to compute the number of pages required for two consecutive render passes ahead when generating visibility information. For example since Render pass 4 and 5 require the maximum number of pages if the driver wants to allow for visibility information to be two render passes ahead it would need to provide 225 memory pages.

Overall with the out of memory marker and a counter that continuously counts the number of pages required for visibility recording together with the proposed usage the solution reduces or eliminates the memory allocation dilemma stalls prevalent in the existing solutions in some embodiments.

The sequence begins by processing visibility information for tiles as indicated in block . In a first pass visibility of different primitives with any given tile may be analyzed for recording and used in a subsequent rendering pass.

A check at diamond determines whether there is sufficient memory available to store the visibility information for a particular tile. If not the tile is marked as indicated in block . Then the tile is processed as if the next set of primitives is entirely visible block . This is done in some embodiments without recording any visibility information. This may mean that extra processing is done but the tile will be correctly processed and processed without being delayed waiting for additional memory.

However if the check at diamond determines that sufficient memory is available then the visibility information is recorded for use in a subsequent pass as indicated in block . As indicated in block the amount of available memory is assessed and additional memory may be allocated asynchronously. For example the amount of remaining available memory may be determined together with an estimate of the amount of memory that may be needed. In this way additional memory can be allocated to deal with the out of memory condition as it exists in any particular rendering pass. As a result the out of memory condition is reduced in duration and improving performance in some embodiments.

While the method described here refers to tiled rendering this method can be extended to other situations. As an example if there is a single tile in the system it as if visibility information is generated for the full render pass and then rendering is performed using the visibility information. Since it is rendering to the full framebuffer while it may not be called tiled rendering the out of memory and asynchronous method of providing more memory can also be used for such conditions.

An embodiment of system can include or be incorporated within a server based gaming platform a game console including a game and media console a mobile gaming console a handheld game console or an online game console. In some embodiments system is a mobile phone smart phone tablet computing device or mobile Internet device. Data processing system can also include couple with or be integrated within a wearable device such as a smart watch wearable device smart eyewear device augmented reality device or virtual reality device. In some embodiments data processing system is a television or set top box device having one or more processors and a graphical interface generated by one or more graphics processors .

In some embodiments the one or more processors each include one or more processor cores to process instructions which when executed perform operations for system and user software. In some embodiments each of the one or more processor cores is configured to process a specific instruction set . In some embodiments instruction set may facilitate Complex Instruction Set Computing CISC Reduced Instruction Set Computing RISC or computing via a Very Long Instruction Word VLIW . Multiple processor cores may each process a different instruction set which may include instructions to facilitate the emulation of other instruction sets. Processor core may also include other processing devices such a Digital Signal Processor DSP .

In some embodiments the processor includes cache memory . Depending on the architecture the processor can have a single internal cache or multiple levels of internal cache. In some embodiments the cache memory is shared among various components of the processor . In some embodiments the processor also uses an external cache e.g. a Level 3 L3 cache or Last Level Cache LLC not shown which may be shared among processor cores using known cache coherency techniques. A register file is additionally included in processor which may include different types of registers for storing different types of data e.g. integer registers floating point registers status registers and an instruction pointer register . Some registers may be general purpose registers while other registers may be specific to the design of the processor .

In some embodiments processor is coupled to a processor bus to transmit communication signals such as address data or control signals between processor and other components in system . In one embodiment the system uses an exemplary hub system architecture including a memory controller hub and an Input Output I O controller hub . A memory controller hub facilitates communication between a memory device and other components of system while an I O Controller Hub ICH provides connections to I O devices via a local I O bus. In one embodiment the logic of the memory controller hub is integrated within the processor.

Memory device can be a dynamic random access memory DRAM device a static random access memory SRAM device flash memory device phase change memory device or some other memory device having suitable performance to serve as process memory. In one embodiment the memory device can operate as system memory for the system to store data and instructions for use when the one or more processors executes an application or process. Memory controller hub also couples with an optional external graphics processor which may communicate with the one or more graphics processors in processors to perform graphics and media operations.

In some embodiments ICH enables peripherals to connect to memory device and processor via a high speed I O bus. The I O peripherals include but are not limited to an audio controller a firmware interface a wireless transceiver e.g. Wi Fi Bluetooth a data storage device e.g. hard disk drive flash memory etc. and a legacy I O controller for coupling legacy e.g. Personal System 2 PS 2 devices to the system. One or more Universal Serial Bus USB controllers connect input devices such as keyboard and mouse combinations. A network controller may also couple to ICH . In some embodiments a high performance network controller not shown couples to processor bus . It will be appreciated that the system shown is exemplary and not limiting as other types of data processing systems that are differently configured may also be used. For example the I O controller hub may be integrated within the one or more processor or the memory controller hub and I O controller hub may be integrated into a discreet external graphics processor such as the external graphics processor .

The internal cache units A N and shared cache units represent a cache memory hierarchy within the processor . The cache memory hierarchy may include at least one level of instruction and data cache within each processor core and one or more levels of shared mid level cache such as a Level 2 L2 Level 3 L3 Level 4 L4 or other levels of cache where the highest level of cache before external memory is classified as the LLC. In some embodiments cache coherency logic maintains coherency between the various cache units and A N.

In some embodiments processor may also include a set of one or more bus controller units and a system agent core . The one or more bus controller units manage a set of peripheral buses such as one or more Peripheral Component Interconnect buses e.g. PCI PCI Express . System agent core provides management functionality for the various processor components. In some embodiments system agent core includes one or more integrated memory controllers to manage access to various external memory devices not shown .

In some embodiments one or more of the processor cores A N include support for simultaneous multi threading. In such embodiment the system agent core includes components for coordinating and operating cores A N during multi threaded processing. System agent core may additionally include a power control unit PCU which includes logic and components to regulate the power state of processor cores A N and graphics processor .

In some embodiments processor additionally includes graphics processor to execute graphics processing operations. In some embodiments the graphics processor couples with the set of shared cache units and the system agent core including the one or more integrated memory controllers . In some embodiments a display controller is coupled with the graphics processor to drive graphics processor output to one or more coupled displays. In some embodiments display controller may be a separate module coupled with the graphics processor via at least one interconnect or may be integrated within the graphics processor or system agent core .

In some embodiments a ring based interconnect unit is used to couple the internal components of the processor . However an alternative interconnect unit may be used such as a point to point interconnect a switched interconnect or other techniques including techniques well known in the art. In some embodiments graphics processor couples with the ring interconnect via an I O link .

The exemplary I O link represents at least one of multiple varieties of I O interconnects including an on package I O interconnect which facilitates communication between various processor components and a high performance embedded memory module such as an eDRAM module. In some embodiments each of the processor cores N and graphics processor use embedded memory modules as a shared Last Level Cache.

In some embodiments processor cores A N are homogenous cores executing the same instruction set architecture. In another embodiment processor cores A N are heterogeneous in terms of instruction set architecture ISA where one or more of processor cores A N execute a first instruction set while at least one of the other cores executes a subset of the first instruction set or a different instruction set. In one embodiment processor cores A N are heterogeneous in terms of microarchitecture where one or more cores having a relatively higher power consumption couple with one or more power cores having a lower power consumption. Additionally processor can be implemented on one or more chips or as an SoC integrated circuit having the illustrated components in addition to other components.

In some embodiments graphics processor also includes a display controller to drive display output data to a display device . Display controller includes hardware for one or more overlay planes for the display and composition of multiple layers of video or user interface elements. In some embodiments graphics processor includes a video codec engine to encode decode or transcode media to from or between one or more media encoding formats including but not limited to Moving Picture Experts Group MPEG formats such as MPEG 2 Advanced Video Coding AVC formats such as H.264 MPEG 4 AVC as well as the Society of Motion Picture Television Engineers SMPTE 421 M VC 1 and Joint Photographic Experts Group JPEG formats such as JPEG and Motion JPEG MJPEG formats.

In some embodiments graphics processor includes a block image transfer BLIT engine to perform two dimensional 2D rasterizer operations including for example bit boundary block transfers. However in one embodiment 2D graphics operations are performed using one or more components of graphics processing engine GPE . In some embodiments graphics processing engine is a compute engine for performing graphics operations including three dimensional 3D graphics operations and media operations.

In some embodiments GPE includes a 3D pipeline for performing 3D operations such as rendering three dimensional images and scenes using processing functions that act upon 3D primitive shapes e.g. rectangle triangle etc. . The 3D pipeline includes programmable and fixed function elements that perform various tasks within the element and or spawn execution threads to a 3D Media sub system . While 3D pipeline can be used to perform media operations an embodiment of GPE also includes a media pipeline that is specifically used to perform media operations such as video post processing and image enhancement.

In some embodiments media pipeline includes fixed function or programmable logic units to perform one or more specialized media operations such as video decode acceleration video de interlacing and video encode acceleration in place of or on behalf of video codec engine . In some embodiments media pipeline additionally includes a thread spawning unit to spawn threads for execution on 3D Media sub system . The spawned threads perform computations for the media operations on one or more graphics execution units included in 3D Media sub system .

In some embodiments 3D Media subsystem includes logic for executing threads spawned by 3D pipeline and media pipeline . In one embodiment the pipelines send thread execution requests to 3D Media subsystem which includes thread dispatch logic for arbitrating and dispatching the various requests to available thread execution resources. The execution resources include an array of graphics execution units to process the 3D and media threads. In some embodiments 3D Media subsystem includes one or more internal caches for thread instructions and data. In some embodiments the subsystem also includes shared memory including registers and addressable memory to share data between threads and to store output data.

In some embodiments GPE couples with a command streamer which provides a command stream to the GPE 3D and media pipelines . In some embodiments command streamer is coupled to memory which can be system memory or one or more of internal cache memory and shared cache memory. In some embodiments command streamer receives commands from the memory and sends the commands to 3D pipeline and or media pipeline . The commands are directives fetched from a ring buffer which stores commands for the 3D and media pipelines . In one embodiment the ring buffer can additionally include batch command buffers storing batches of multiple commands. The 3D and media pipelines process the commands by performing operations via logic within the respective pipelines or by dispatching one or more execution threads to an execution unit array . In some embodiments execution unit array is scalable such that the array includes a variable number of execution units based on the target power and performance level of GPE .

In some embodiments a sampling engine couples with memory e.g. cache memory or system memory and execution unit array . In some embodiments sampling engine provides a memory access mechanism for execution unit array that allows execution array to read graphics and media data from memory. In some embodiments sampling engine includes logic to perform specialized image sampling operations for media.

In some embodiments the specialized media sampling logic in sampling engine includes a de noise de interlace module a motion estimation module and an image scaling and filtering module . In some embodiments de noise de interlace module includes logic to perform one or more of a de noise or a de interlace algorithm on decoded video data. The de interlace logic combines alternating fields of interlaced video content into a single fame of video. The de noise logic reduces or removes data noise from video and image data. In some embodiments the de noise logic and de interlace logic are motion adaptive and use spatial or temporal filtering based on the amount of motion detected in the video data. In some embodiments the de noise de interlace module includes dedicated motion detection logic e.g. within the motion estimation engine .

In some embodiments motion estimation engine provides hardware acceleration for video operations by performing video acceleration functions such as motion vector estimation and prediction on video data. The motion estimation engine determines motion vectors that describe the transformation of image data between successive video frames. In some embodiments a graphics processor media codec uses video motion estimation engine to perform operations on video at the macro block level that may otherwise be too computationally intensive to perform with a general purpose processor. In some embodiments motion estimation engine is generally available to graphics processor components to assist with video decode and processing functions that are sensitive or adaptive to the direction or magnitude of the motion within video data.

In some embodiments image scaling and filtering module performs image processing operations to enhance the visual quality of generated images and video. In some embodiments scaling and filtering module processes image and video data during the sampling operation before providing the data to execution unit array .

In some embodiments the GPE includes a data port which provides an additional mechanism for graphics subsystems to access memory. In some embodiments data port facilitates memory access for operations including render target writes constant buffer reads scratch memory space reads writes and media surface accesses. In some embodiments data port includes cache memory space to cache accesses to memory. The cache memory can be a single data cache or separated into multiple caches for the multiple subsystems that access memory via the data port e.g. a render buffer cache a constant buffer cache etc. . In some embodiments threads executing on an execution unit in execution unit array communicate with the data port by exchanging messages via a data distribution interconnect that couples each of the sub systems of GPE .

In some embodiments graphics processor includes a ring interconnect a pipeline front end a media engine and graphics cores A N. In some embodiments ring interconnect couples the graphics processor to other processing units including other graphics processors or one or more general purpose processor cores. In some embodiments the graphics processor is one of many processors integrated within a multi core processing system.

In some embodiments graphics processor receives batches of commands via ring interconnect . The incoming commands are interpreted by a command streamer in the pipeline front end . In some embodiments graphics processor includes scalable execution logic to perform 3D geometry processing and media processing via the graphics core s A N. For 3D geometry processing commands command streamer supplies commands to geometry pipeline . For at least some media processing commands command streamer supplies the commands to a video front end which couples with a media engine . In some embodiments media engine includes a Video Quality Engine VQE for video and image post processing and a multi format encode decode MFX engine to provide hardware accelerated media data encode and decode. In some embodiments geometry pipeline and media engine each generate execution threads for the thread execution resources provided by at least one graphics core A.

In some embodiments graphics processor includes scalable thread execution resources featuring modular cores A N sometimes referred to as core slices each having multiple sub cores A N A N sometimes referred to as core sub slices . In some embodiments graphics processor can have any number of graphics cores A through N. In some embodiments graphics processor includes a graphics core A having at least a first sub core A and a second core sub core A. In other embodiments the graphics processor is a low power processor with a single sub core e.g. A . In some embodiments graphics processor includes multiple graphics cores A N each including a set of first sub cores A N and a set of second sub cores A N. Each sub core in the set of first sub cores A N includes at least a first set of execution units A N and media texture samplers A N. Each sub core in the set of second sub cores A N includes at least a second set of execution units A N and samplers A N. In some embodiments each sub core A N A N shares a set of shared resources A N. In some embodiments the shared resources include shared cache memory and pixel operation logic. Other shared resources may also be included in the various embodiments of the graphics processor.

In some embodiments thread execution logic includes a pixel shader a thread dispatcher instruction cache a scalable execution unit array including a plurality of execution units A N a sampler a data cache and a data port . In one embodiment the included components are interconnected via an interconnect fabric that links to each of the components. In some embodiments thread execution logic includes one or more connections to memory such as system memory or cache memory through one or more of instruction cache data port sampler and execution unit array A N. In some embodiments each execution unit e.g. A is an individual vector processor capable of executing multiple simultaneous threads and processing multiple data elements in parallel for each thread. In some embodiments execution unit array A N includes any number individual execution units.

In some embodiments execution unit array A N is primarily used to execute shader programs. In some embodiments the execution units in array A N execute an instruction set that includes native support for many standard 3D graphics shader instructions such that shader programs from graphics libraries e.g. Direct 3D and OpenGL are executed with a minimal translation. The execution units support vertex and geometry processing e.g. vertex programs geometry programs vertex shaders pixel processing e.g. pixel shaders fragment shaders and general purpose processing e.g. compute and media shaders .

Each execution unit in execution unit array A N operates on arrays of data elements. The number of data elements is the execution size or the number of channels for the instruction. An execution channel is a logical unit of execution for data element access masking and flow control within instructions. The number of channels may be independent of the number of physical Arithmetic Logic Units ALUs or Floating Point Units FPUs for a particular graphics processor. In some embodiments execution units A N support integer and floating point data types.

The execution unit instruction set includes single instruction multiple data SIMD instructions. The various data elements can be stored as a packed data type in a register and the execution unit will process the various elements based on the data size of the elements. For example when operating on a 256 bit wide vector the 256 bits of the vector are stored in a register and the execution unit operates on the vector as four separate 64 bit packed data elements Quad Word QW size data elements eight separate 32 bit packed data elements Double Word DW size data elements sixteen separate 16 bit packed data elements Word W size data elements or thirty two separate 8 bit data elements byte B size data elements . However different vector widths and register sizes are possible.

One or more internal instruction caches e.g. are included in the thread execution logic to cache thread instructions for the execution units. In some embodiments one or more data caches e.g. are included to cache thread data during thread execution. In some embodiments sampler is included to provide texture sampling for 3D operations and media sampling for media operations. In some embodiments sampler includes specialized texture or media sampling functionality to process texture or media data during the sampling process before providing the sampled data to an execution unit.

During execution the graphics and media pipelines send thread initiation requests to thread execution logic via thread spawning and dispatch logic. In some embodiments thread execution logic includes a local thread dispatcher that arbitrates thread initiation requests from the graphics and media pipelines and instantiates the requested threads on one or more execution units A N. For example the geometry pipeline e.g. of dispatches vertex processing tessellation or geometry processing threads to thread execution logic . In some embodiments thread dispatcher can also process runtime thread spawning requests from the executing shader programs.

Once a group of geometric objects has been processed and rasterized into pixel data pixel shader is invoked to further compute output information and cause results to be written to output surfaces e.g. color buffers depth buffers stencil buffers etc. . In some embodiments pixel shader calculates the values of the various vertex attributes that are to be interpolated across the rasterized object. In some embodiments pixel shader then executes an application programming interface API supplied pixel shader program. To execute the pixel shader program pixel shader dispatches threads to an execution unit e.g. A via thread dispatcher . In some embodiments pixel shader uses texture sampling logic in sampler to access texture data in texture maps stored in memory. Arithmetic operations on the texture data and the input geometry data compute pixel color data for each geometric fragment or discards one or more pixels from further processing.

In some embodiments the data port provides a memory access mechanism for the thread execution logic output processed data to memory for processing on a graphics processor output pipeline. In some embodiments the data port includes or couples to one or more cache memories e.g. data cache to cache data for memory access via the data port.

In some embodiments the graphics processor execution units natively support instructions in a 128 bit format . A 64 bit compacted instruction format is available for some instructions based on the selected instruction instruction options and number of operands. The native 128 bit format provides access to all instruction options while some options and operations are restricted in the 64 bit format . The native instructions available in the 64 bit format vary by embodiment. In some embodiments the instruction is compacted in part using a set of index values in an index field . The execution unit hardware references a set of compaction tables based on the index values and uses the compaction table outputs to reconstruct a native instruction in the 128 bit format .

For each format instruction opcode defines the operation that the execution unit is to perform. The execution units execute each instruction in parallel across the multiple data elements of each operand. For example in response to an add instruction the execution unit performs a simultaneous add operation across each color channel representing a texture element or picture element. By default the execution unit performs each instruction across all data channels of the operands. In some embodiments instruction control field enables control over certain execution options such as channels selection e.g. predication and data channel order e.g. swizzle . For 128 bit instructions an exec size field limits the number of data channels that will be executed in parallel. In some embodiments exec size field is not available for use in the 64 bit compact instruction format .

Some execution unit instructions have up to three operands including two source operands src src and one destination . In some embodiments the execution units support dual destination instructions where one of the destinations is implied. Data manipulation instructions can have a third source operand e.g. SRC where the instruction opcode determines the number of source operands. An instruction s last source operand can be an immediate e.g. hard coded value passed with the instruction.

In some embodiments the 128 bit instruction format includes an access address mode information specifying for example whether direct register addressing mode or indirect register addressing mode is used. When direct register addressing mode is used the register address of one or more operands is directly provided by bits in the instruction .

In some embodiments the 128 bit instruction format includes an access address mode field which specifies an address mode and or an access mode for the instruction. In one embodiment the access mode to define a data access alignment for the instruction. Some embodiments support access modes including a 16 byte aligned access mode and a 1 byte aligned access mode where the byte alignment of the access mode determines the access alignment of the instruction operands. For example when in a first mode the instruction may use byte aligned addressing for source and destination operands and when in a second mode the instruction may use 16 byte aligned addressing for all source and destination operands.

In one embodiment the address mode portion of the access address mode field determines whether the instruction is to use direct or indirect addressing. When direct register addressing mode is used bits in the instruction directly provide the register address of one or more operands. When indirect register addressing mode is used the register address of one or more operands may be computed based on an address register value and an address immediate field in the instruction.

In some embodiments instructions are grouped based on opcode bit fields to simplify Opcode decode . For an 8 bit opcode bits and allow the execution unit to determine the type of opcode. The precise opcode grouping shown is merely an example. In some embodiments a move and logic opcode group includes data movement and logic instructions e.g. move mov compare cmp . In some embodiments move and logic group shares the five most significant bits MSB where move mov instructions are in the form of 0000xxxxb and logic instructions are in the form of 0001xxxxb. A flow control instruction group e.g. call jump jmp includes instructions in the form of 0010xxxxb e.g. 0x20 . A miscellaneous instruction group includes a mix of instructions including synchronization instructions e.g. wait send in the form of 0011xxxxb e.g. 0x30 . A parallel math instruction group includes component wise arithmetic instructions e.g. add multiply mul in the form of 0100xxxxb e.g. 0x40 . The parallel math group performs the arithmetic operations in parallel across data channels. The vector math group includes arithmetic instructions e.g. dp4 in the form of 0101xxxxb e.g. 0x50 . The vector math group performs arithmetic such as dot product calculations on vector operands.

In some embodiments graphics processor includes a graphics pipeline a media pipeline a display engine thread execution logic and a render output pipeline . In some embodiments graphics processor is a graphics processor within a multi core processing system that includes one or more general purpose processing cores. The graphics processor is controlled by register writes to one or more control registers not shown or via commands issued to graphics processor via a ring interconnect . In some embodiments ring interconnect couples graphics processor to other processing components such as other graphics processors or general purpose processors. Commands from ring interconnect are interpreted by a command streamer which supplies instructions to individual components of graphics pipeline or media pipeline .

In some embodiments command streamer directs the operation of a vertex fetcher that reads vertex data from memory and executes vertex processing commands provided by command streamer . In some embodiments vertex fetcher provides vertex data to a vertex shader which performs coordinate space transformation and lighting operations to each vertex. In some embodiments vertex fetcher and vertex shader execute vertex processing instructions by dispatching execution threads to execution units A B via a thread dispatcher .

In some embodiments execution units A B are an array of vector processors having an instruction set for performing graphics and media operations. In some embodiments execution units A B have an attached L1 cache that is specific for each array or shared between the arrays. The cache can be configured as a data cache an instruction cache or a single cache that is partitioned to contain data and instructions in different partitions.

In some embodiments graphics pipeline includes tessellation components to perform hardware accelerated tessellation of 3D objects. In some embodiments a programmable hull shader configures the tessellation operations. A programmable domain shader provides back end evaluation of tessellation output. A tessellator operates at the direction of hull shader and contains special purpose logic to generate a set of detailed geometric objects based on a coarse geometric model that is provided as input to graphics pipeline . In some embodiments if tessellation is not used tessellation components can be bypassed.

In some embodiments complete geometric objects can be processed by a geometry shader via one or more threads dispatched to execution units A B or can proceed directly to the clipper . In some embodiments the geometry shader operates on entire geometric objects rather than vertices or patches of vertices as in previous stages of the graphics pipeline. If the tessellation is disabled the geometry shader receives input from the vertex shader . In some embodiments geometry shader is programmable by a geometry shader program to perform geometry tessellation if the tessellation units are disabled.

Before rasterization a clipper processes vertex data. The clipper may be a fixed function clipper or a programmable clipper having clipping and geometry shader functions. In some embodiments a rasterizer depth in the render output pipeline dispatches pixel shaders to convert the geometric objects into their per pixel representations. In some embodiments pixel shader logic is included in thread execution logic . In some embodiments an application can bypass the rasterizer and access un rasterized vertex data via a stream out unit .

The graphics processor has an interconnect bus interconnect fabric or some other interconnect mechanism that allows data and message passing amongst the major components of the processor. In some embodiments execution units A B and associated cache s texture and media sampler and texture sampler cache interconnect via a data port to perform memory access and communicate with render output pipeline components of the processor. In some embodiments sampler caches and execution units A B each have separate memory access paths.

In some embodiments render output pipeline contains a rasterizer and depth test component that converts vertex based objects into an associated pixel based representation. In some embodiments the rasterizer logic includes a windower masker unit to perform fixed function triangle and line rasterization. An associated render cache and depth cache are also available in some embodiments. A pixel operations component performs pixel based operations on the data though in some instances pixel operations associated with 2D operations e.g. bit block image transfers with blending are performed by the 2D engine or substituted at display time by the display controller using overlay display planes. In some embodiments a shared L3 cache is available to all graphics components allowing the sharing of data without the use of main system memory.

In some embodiments graphics processor media pipeline includes a media engine and a video front end . In some embodiments video front end receives pipeline commands from the command streamer . In some embodiments media pipeline includes a separate command streamer. In some embodiments video front end processes media commands before sending the command to the media engine . In some embodiments media engine includes thread spawning functionality to spawn threads for dispatch to thread execution logic via thread dispatcher .

In some embodiments graphics processor includes a display engine . In some embodiments display engine is external to processor and couples with the graphics processor via the ring interconnect or some other interconnect bus or fabric. In some embodiments display engine includes a 2D engine and a display controller . In some embodiments display engine contains special purpose logic capable of operating independently of the 3D pipeline. In some embodiments display controller couples with a display device not shown which may be a system integrated display device as in a laptop computer or an external display device attached via a display device connector.

In some embodiments graphics pipeline and media pipeline are configurable to perform operations based on multiple graphics and media programming interfaces and are not specific to any one application programming interface API . In some embodiments driver software for the graphics processor translates API calls that are specific to a particular graphics or media library into commands that can be processed by the graphics processor. In some embodiments support is provided for the Open Graphics Library OpenGL and Open Computing Language OpenCL from the Khronos Group the Direct3D library from the Microsoft Corporation or support may be provided to both OpenGL and D3D. Support may also be provided for the Open Source Computer Vision Library OpenCV . A future API with a compatible 3D pipeline would also be supported if a mapping can be made from the pipeline of the future API to the pipeline of the graphics processor.

In some embodiments client specifies the client unit of the graphics device that processes the command data. In some embodiments a graphics processor command parser examines the client field of each command to condition the further processing of the command and route the command data to the appropriate client unit. In some embodiments the graphics processor client units include a memory interface unit a render unit a 2D unit a 3D unit and a media unit. Each client unit has a corresponding processing pipeline that processes the commands. Once the command is received by the client unit the client unit reads the opcode and if present sub opcode to determine the operation to perform. The client unit performs the command using information in data field . For some commands an explicit command size is expected to specify the size of the command. In some embodiments the command parser automatically determines the size of at least some of the commands based on the command opcode. In some embodiments commands are aligned via multiples of a double word.

The flow diagram in shows an exemplary graphics processor command sequence . In some embodiments software or firmware of a data processing system that features an embodiment of a graphics processor uses a version of the command sequence shown to set up execute and terminate a set of graphics operations. A sample command sequence is shown and described for purposes of example only as embodiments are not limited to these specific commands or to this command sequence. Moreover the commands may be issued as batch of commands in a command sequence such that the graphics processor will process the sequence of commands in at least partially concurrence.

In some embodiments the graphics processor command sequence may begin with a pipeline flush command to cause any active graphics pipeline to complete the currently pending commands for the pipeline. In some embodiments the 3D pipeline and the media pipeline do not operate concurrently. The pipeline flush is performed to cause the active graphics pipeline to complete any pending commands. In response to a pipeline flush the command parser for the graphics processor will pause command processing until the active drawing engines complete pending operations and the relevant read caches are invalidated. Optionally any data in the render cache that is marked dirty can be flushed to memory. In some embodiments pipeline flush command can be used for pipeline synchronization or before placing the graphics processor into a low power state.

In some embodiments a pipeline select command is used when a command sequence requires the graphics processor to explicitly switch between pipelines. In some embodiments a pipeline select command is required only once within an execution context before issuing pipeline commands unless the context is to issue commands for both pipelines. In some embodiments a pipeline flush command is is required immediately before a pipeline switch via the pipeline select command .

In some embodiments a pipeline control command configures a graphics pipeline for operation and is used to program the 3D pipeline and the media pipeline . In some embodiments pipeline control command configures the pipeline state for the active pipeline. In one embodiment the pipeline control command is used for pipeline synchronization and to clear data from one or more cache memories within the active pipeline before processing a batch of commands.

In some embodiments return buffer state commands are used to configure a set of return buffers for the respective pipelines to write data. Some pipeline operations require the allocation selection or configuration of one or more return buffers into which the operations write intermediate data during processing. In some embodiments the graphics processor also uses one or more return buffers to store output data and to perform cross thread communication. In some embodiments the return buffer state includes selecting the size and number of return buffers to use for a set of pipeline operations.

The remaining commands in the command sequence differ based on the active pipeline for operations. Based on a pipeline determination the command sequence is tailored to the 3D pipeline beginning with the 3D pipeline state or the media pipeline beginning at the media pipeline state .

The commands for the 3D pipeline state include 3D state setting commands for vertex buffer state vertex element state constant color state depth buffer state and other state variables that are to be configured before 3D primitive commands are processed. The values of these commands are determined at least in part based the particular 3D API in use. In some embodiments 3D pipeline state commands are also able to selectively disable or bypass certain pipeline elements if those elements will not be used.

In some embodiments 3D primitive command is used to submit 3D primitives to be processed by the 3D pipeline. Commands and associated parameters that are passed to the graphics processor via the 3D primitive command are forwarded to the vertex fetch function in the graphics pipeline. The vertex fetch function uses the 3D primitive command data to generate vertex data structures. The vertex data structures are stored in one or more return buffers. In some embodiments 3D primitive command is used to perform vertex operations on 3D primitives via vertex shaders. To process vertex shaders 3D pipeline dispatches shader execution threads to graphics processor execution units.

In some embodiments 3D pipeline is triggered via an execute command or event. In some embodiments a register write triggers command execution. In some embodiments execution is triggered via a go or kick command in the command sequence. In one embodiment command execution is triggered using a pipeline synchronization command to flush the command sequence through the graphics pipeline. The 3D pipeline will perform geometry processing for the 3D primitives. Once operations are complete the resulting geometric objects are rasterized and the pixel engine colors the resulting pixels. Additional commands to control pixel shading and pixel back end operations may also be included for those operations.

In some embodiments the graphics processor command sequence follows the media pipeline path when performing media operations. In general the specific use and manner of programming for the media pipeline depends on the media or compute operations to be performed. Specific media decode operations may be offloaded to the media pipeline during media decode. In some embodiments the media pipeline can also be bypassed and media decode can be performed in whole or in part using resources provided by one or more general purpose processing cores. In one embodiment the media pipeline also includes elements for general purpose graphics processor unit GPGPU operations where the graphics processor is used to perform SIMD vector operations using computational shader programs that are not explicitly related to the rendering of graphics primitives.

In some embodiments media pipeline is configured in a similar manner as the 3D pipeline . A set of media pipeline state commands are dispatched or placed into in a command queue before the media object commands . In some embodiments media pipeline state commands include data to configure the media pipeline elements that will be used to process the media objects. This includes data to configure the video decode and video encode logic within the media pipeline such as encode or decode format. In some embodiments media pipeline state commands also support the use one or more pointers to indirect state elements that contain a batch of state settings.

In some embodiments media object commands supply pointers to media objects for processing by the media pipeline. The media objects include memory buffers containing video data to be processed. In some embodiments all media pipeline states must be valid before issuing a media object command . Once the pipeline state is configured and media object commands are queued the media pipeline is triggered via an execute command or an equivalent execute event e.g. register write . Output from media pipeline may then be post processed by operations provided by the 3D pipeline or the media pipeline . In some embodiments GPGPU operations are configured and executed in a similar manner as media operations.

In some embodiments 3D graphics application contains one or more shader programs including shader instructions . The shader language instructions may be in a high level shader language such as the High Level Shader Language HLSL or the OpenGL Shader Language GLSL . The application also includes executable instructions in a machine language suitable for execution by the general purpose processor core . The application also includes graphics objects defined by vertex data.

In some embodiments operating system is a Microsoft Windows operating system from the Microsoft Corporation a proprietary UNIX like operating system or an open source UNIX like operating system using a variant of the Linux kernel. When the Direct3D API is in use the operating system uses a front end shader compiler to compile any shader instructions in HLSL into a lower level shader language. The compilation may be a just in time JIT compilation or the application can perform shader pre compilation. In some embodiments high level shaders are compiled into low level shaders during the compilation of the 3D graphics application .

In some embodiments user mode graphics driver contains a back end shader compiler to convert the shader instructions into a hardware specific representation. When the OpenGL API is in use shader instructions in the GLSL high level language are passed to a user mode graphics driver for compilation. In some embodiments user mode graphics driver uses operating system kernel mode functions to communicate with a kernel mode graphics driver . In some embodiments kernel mode graphics driver communicates with graphics processor to dispatch commands and instructions.

One or more aspects of at least one embodiment may be implemented by representative code stored on a machine readable medium which represents and or defines logic within an integrated circuit such as a processor. For example the machine readable medium may include instructions which represent various logic within the processor. When read by a machine the instructions may cause the machine to fabricate the logic to perform the techniques described herein. Such representations known as IP cores are reusable units of logic for an integrated circuit that may be stored on a tangible machine readable medium as a hardware model that describes the structure of the integrated circuit. The hardware model may be supplied to various customers or manufacturing facilities which load the hardware model on fabrication machines that manufacture the integrated circuit. The integrated circuit may be fabricated such that the circuit performs operations described in association with any of the embodiments described herein.

The RTL design or equivalent may be further synthesized by the design facility into a hardware model which may be in a hardware description language HDL or some other representation of physical design data. The HDL may be further simulated or tested to verify the IP core design. The IP core design can be stored for delivery to a 3party fabrication facility using non volatile memory e.g. hard disk flash memory or any non volatile storage medium . Alternatively the IP core design may be transmitted e.g. via the Internet over a wired connection or wireless connection . The fabrication facility may then fabricate an integrated circuit that is based at least in part on the IP core design. The fabricated integrated circuit can be configured to perform operations in accordance with at least one embodiment described herein.

Additionally other logic and circuits may be included in the processor of integrated circuit including additional graphics processors cores peripheral interface controllers or general purpose processor cores.

One example embodiment may be a method comprising during tile rendering determining in a hardware processor whether sufficient storage is available in a memory that stores visibility information to store additional visibility information and if an out of memory condition exists because sufficient storage is not available continuing to render without storing visibility information during the out of memory condition before requiring an agent to resolve the out of memory condition. The method may also include resolving an out of memory condition arising in one rendering pass in a subsequent rendering pass. The method may also include recording for each tile memory that would have been needed absent the out of memory condition. The method may also include performing tile based rendering while rendering detecting an out of memory condition in a first rendering pass and marking said condition with a marker and detecting the marker in another rendering pass. The method may also include reducing the rendering speed in response to detecting the marker. The method may also include monitoring during visibility generation an amount of memory needed to store visibility data for a rendering pass and allocating more memory in response to detecting a need for more memory. The method may also include determining an amount of available memory for storing visibility information. The method may also include proceeding to render without culling primitives for a rendering pass with an out of memory condition. The method may also include in response to detection of an out of memory condition rendering as if all primitives in a tile are visible. The method may also include rendering without storing visibility information only during a rendering pass in which an out of memory condition was detected while continuing to render while storing visibility information in another rendering pass.

Another example embodiment may be one or more non transitory computer readable media storing instructions executed by a processor to perform a sequence comprising during tile rendering determining whether sufficient storage is available in a memory that stores visibility information to store additional visibility information and if an out of memory condition exists because sufficient storage is not available continuing to render without storing visibility information during the out of memory condition before requiring an agent to resolve the out of memory condition. The media may include said sequence including resolving an out of memory condition arising in one rendering pass in a subsequent rendering pass. The media may include said sequence including recording for each tile memory that would have been needed absent the out of memory condition. The media may include performing tile based rendering while rendering detecting an out of memory condition in a first rendering pass and marking said condition with a marker and detecting the marker in another rendering pass. The media may include said sequence including reducing the rendering speed in response to detecting the marker. The media may include said sequence further including monitoring during visibility generation an amount of memory needed to store visibility data for a rendering pass and allocating more memory in response to detecting a need for more memory. The media may include said sequence including determining an amount of available memory for storing visibility information. The media may include said sequence including proceeding to render without culling primitives for a rendering pass with an out of memory condition. The media may include said sequence including in response to detection of an out of memory condition rendering as if all primitives in a tile are visible. The media may include said sequence including proceeding with rendering without storing visibility information only during a rendering pass in which an out of memory condition was detected while continuing to render while storing visibility information in another rendering pass.

In another example embodiment it may be an apparatus comprising a hardware processor to determine during tile rendering whether sufficient storage is available in a memory that stores visibility information to store additional visibility information and if an out of memory condition exists because sufficient storage is not available continue to render without storing visibility information during the out of memory condition before requiring an agent to resolve the out of memory condition and a storage coupled to said processor. The apparatus may include said processor to resolve an out of memory condition arising in one rendering pass in a subsequent rendering pass. The apparatus may include said processor to record for each tile memory that would have been needed absent the out of memory condition. The apparatus may include said processor to perform tile based rendering while rendering detect an out of memory condition in a first rendering pass and mark said condition with a marker and detect the marker in another rendering pass. The apparatus may include said processor to reduce the rendering speed in response to detecting the marker. The apparatus may include said processor to monitor during visibility generation an amount of memory needed to store visibility data for a rendering pass and allocate more memory in response to detecting a need for more memory. The apparatus may include said processor to determine an amount of available memory for storing visibility information. The apparatus may include said processor to proceed to render without culling primitives for a rendering pass with an out of memory condition. The apparatus may include said processor in response to detection of an out of memory condition render as if all primitives in a tile are visible. The apparatus may include said processor to proceed with rendering without storing visibility information only during a rendering pass in which an out of memory condition was detected while continuing to render while storing visibility information in another rendering pass.

The graphics processing techniques described herein may be implemented in various hardware architectures. For example graphics functionality may be integrated within a chipset. Alternatively a discrete graphics processor may be used. As still another embodiment the graphics functions may be implemented by a general purpose processor including a multicore processor.

References throughout this specification to one embodiment or an embodiment mean that a particular feature structure or characteristic described in connection with the embodiment is included in at least one implementation encompassed within the present disclosure. Thus appearances of the phrase one embodiment or in an embodiment are not necessarily referring to the same embodiment. Furthermore the particular features structures or characteristics may be instituted in other suitable forms other than the particular embodiment illustrated and all such forms may be encompassed within the claims of the present application.

While a limited number of embodiments have been described those skilled in the art will appreciate numerous modifications and variations therefrom. It is intended that the appended claims cover all such modifications and variations as fall within the true spirit and scope of this disclosure.

