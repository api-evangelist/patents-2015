---

title: Firmware update discovery and distribution
abstract: A firmware update system is described that collectively handles firmware updates for hardware resources of a computing device. The firmware update system may be configured to handle firmware updates in a consistent manner across different computing platforms/architectures. A data structure is defined to associate each updateable resource with a corresponding identifier to enumerate the updateable resources to the firmware update system. The firmware update system may reference the data structure to produce representations of the each individual resource that provide an operating system level abstraction through which detection, analysis, acquisition, deployment, installation, and tracking of firmware updates is managed. Using the representations, the firmware update system operates to discover available firmware updates collectively for the enumerated resources, match the updates to appropriate resources, and initiate installation of the updates.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09262153&OS=09262153&RS=09262153
owner: Microsoft Technology Licensing, LLC
number: 09262153
owner_city: Redmond
owner_country: US
publication_date: 20150302
---
This Application is a continuation of and claims priority under 35 U.S.C. 120 to U.S. patent application Ser. No. 13 534 632 filed on Jun. 27 2012 entitled Firmware Update Discovery and Distribution the disclosure of which is incorporated by reference herein in its entirety.

Different hardware resources e.g. modules components. and devices of a computing system may have firmware for which updates are published from time to time. Traditionally independent hardware vendors IHVs and original equipment manufacturers OEMS are responsible for handling firmware updates for their own hardware resources. Accordingly different vendors and manufacturer not only individually handle creation and testing of firmware for their hardware but may also establish different independent and or proprietary mechanisms and systems for deploying and applying updated firmware. Due in part to inconsistent handling of firmware updates users may have difficulty understanding and managing firmware updates and keeping firmware update to date may be quite time consuming.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A firmware update system is described. In one or more embodiments the firmware update system is implemented to collectively handle firmware updates for a plurality of hardware resources in a defined and consistent manner. The firmware update system may be configured as an operating system component that handles firmware updates across different computing platforms and architectures. In one approach a data structure is defined to associate each updateable resource with a corresponding identifier to enumerate the updateable resources to the firmware update system. The firmware update system may reference the data structure to produce representations of the each individual resource that may be employed to handle firmware updates. The representations provide an operating system level abstraction through which detection analysis acquisition deployment installation and tracking of firmware updates is managed. Using the representations the firmware update system operates to discover available firmware updates collectively for the enumerated resources match the updates to appropriate resources and initiate installation of the updates.

Traditionally independent hardware vendors IHVs and original equipment manufacturers OEMs are responsible for handling firmware updates for their own hardware resources which may make keeping firmware up to date complex and time consuming.

A firmware update system is described that collectively handles firmware updates for hardware resources of a computing device. The firmware update system may be configured to handle firmware updates in a consistent manner across different computing platforms architectures. A data structure is defined to associate each updateable resource with a corresponding identifier to enumerate the updateable resources to the firmware update system. The firmware update system may reference the data structure to produce representations of the each individual resource that provide an operating system level abstraction through which detection analysis acquisition deployment installation and tracking of firmware updates is managed. Using the representations the firmware update system operates to discover available firmware updates collectively for the enumerated resources match the updates to appropriate resources and initiate installation of the updates.

In the discussion that follows a section titled Operating Environment is provided and describes one environment in which one or more embodiments can be employed. Following this a section titled Firmware Update System Examples describes example techniques and details in accordance with one or more embodiments. Last a section titled Example System describes example computing systems and devices that can be utilized to implement one or more embodiments.

The computing device can be embodied as any suitable computing system and or device such as by way of example and not limitation a gaming system a desktop computer a portable computer a tablet or slate computer a handheld computer such as a personal digital assistant PDA a cell phone a set top box and the like. For example as shown in the computing device can be implemented as a television client device a computer and or a gaming system that is connected to a display device to display media content. Alternatively the computing device may be any type of portable computer mobile phone portable device tablet or slate device and may that include an integrated display. Any of the computing devices can be implemented with various components such as one or more processors and memory devices as well as with any combination of differing components. One example of a computing system that can represent various systems and or devices including the computing device is shown and described below in .

The computer readable media can include by way of example and not limitation all forms of volatile and non volatile memory and or storage media that are typically associated with a computing device. Such media can include ROM RAM flash memory hard disk removable media and the like. Computer readable media can include both computer readable storage media and communication media examples of which can be found in the discussion of the example computing system of .

The computing device also includes a variety of different hardware resources that represent different components and devices typically associated with the computing devices. The hardware resources may include integrated components removable components and external peripheral devices connectable to the computing device via wired and or wireless connections. At least some of the hardware resources include firmware that may be updated in accordance with the techniques described above and below.

A variety of different hardware resources are contemplated. By way of example and not limitation depicts generally at some representative hardware resources in relation to an example computing device . The computing device shown in includes system firmware that may be associated with the particular processing system architecture and or platform for the device which in this example is depicted as being a system on chip SoC processor . Various other example hardware resources shown in that may have corresponding device firmware that is updateable include different radios sensors controllers components and devices labeled as hardware resources to . Each resource may have its own associated device firmware . Updates to device firmware may be matched to resources and applied on an individual basis. Additionally or alternatively device firmware for some resources may be updated as part of an update to system firmware in a combined manner further details of which are discussed below.

The computing device of also includes a firmware manager that resides on the computer readable media and which is executable by the processor s . The firmware manager represents functionality to implement a firmware update system and perform various techniques to collectively manage firmware updates for a plurality of hardware resources as described above and below. Although a single firmware manager is depicted multiple firmware managers each configured to manage updates for one or more hardware components may also be employed. The firmware manager may be implemented as a standalone component as depicted in . The firmware manager may also be implemented as an integrated component of the operating system .

Management of firmware updates by the firmware manager may include but is not limited to discovery of resources and detection analysis acquisition distribution installation and tracking of firmware updates for particular resources that are registered or otherwise designated to obtain firmware updates through the firmware update system. For example the firmware manager may include or otherwise make use of resource data that enables the firmware manager to enumerate resources for which handling of firmware updates through the system is designated. As described in greater detail below resource data may be in the form of a table or other suitable data structure that is populated with entries corresponding to each updateable resource.

By way of example and not limitation functionality of the firmware manager may be logically divided into various sub modules such as the example discovery module and update module illustrated in . Generally speaking the discovery module represents functionality to use the resource data to identify resources that are designated for firmware handling by the system and detect available updates. The discovery module may also perform analysis to match available updates to appropriate resources. The update module represents functionality to apply the updates which may include acquiring the updates in a suitable form and deploying the updates to appropriate resources to initiate installation. The update module may also perform tracking of the updates to identify success or failure record version information for installed firmware enable rollbacks of firmware and so forth. Some functionality described herein in relation to the firmware manager may also be implemented by a boot loader for the operating system and or by the operating system itself.

In this manner responsibility for handling of firmware updates may be offloaded to the firmware manager which is configured to collectively manage firmware updates on behalf of different hardware resources and or corresponding IHVs and OEMs. These and other aspects are described in greater detail in relation to the following figures.

Having described an example operating environment consider now example details regarding a firmware update system in accordance with one or more embodiments.

In the following section implementation details and example techniques for a firmware update system configured to collectively manage firmware updates are discussed. The discussion includes some example procedure s that can be implemented in connection with any suitable hardware software firmware or combination thereof. In at least some embodiments the procedures may be implemented by way of a suitability configured computing device such as the example computing device of that includes or otherwise makes use of a firmware manager system firmware and device firmware . Details regarding aspects of a suitable firmware update system are discussed in turn below in different sub sections titled Resource Data Structures Discovery and Distribution and Heterogeneous Firmware Updates respectively.

As noted previously the firmware update system may rely upon resource data that is generally configured to describe hardware resources for a platform that are to be updated via a firmware update system provided by the operating system as a standalone component or otherwise. The resource data can be configured in various ways to enable manufacturers and vendors to opt into firmware update functionality that is implemented by the system.

Resource data may be configured in any suitable way to facilitate firmware updates. Broadly speaking the resource data is configured to identify resources associated with a platform to the firmware manager operating system and convey metadata that describes how to locate resources and corresponding firmware updates. The metadata may also indicate how to interact with the resources to initiate firmware updates. Further the metadata may encompass status information regarding success failure and progress of firmware updates and or version information that indicates the current versions of firmware. Status and version information may be modified as part of the firmware update process to reflect current data for the resource. The resource data may also reflect resource identifiers that may be used to reference the resources and distinguish between resources throughout the system.

The resource data may be configured using designated formats and conventions that the firmware manager recognizes and is configured to process to identify and register resources for firmware update handling. Thus to take advantage of the firmware update capabilities provided by the operating system an IHV OEM associated with a platform may identify advertise selected resources for collective firmware handling through the system by populating resource data in an appropriate format to describe platform resources. The system may use the resource data to create abstract representations of the resources used to manage firmware updates. In this manner handling of the firmware updates for the selected resources of the platform can effectively be offloaded to the firmware manager operating system.

By way of example depicts generally at an example resource data structure which corresponds to the various hardware resources represented in . The resource data structure may represent one or more data files database records tables table entries objects definitions and or other suitable structures that can be used to encode resource data for a platform. Here identifiers may be assigned to each individual resource and the resource data structure may be employed to convey data regarding and or offload firmware handling for any number n of resources associated with the platform. In the depicted example the identifiers are represented as respective globally unique identifiers GUID assigned to resources although any kind of identifiers suitable to reference and distinguish between the resources of a platform may be employed. In addition to the identifiers resource data encoded by a resource data structure is depicted as including corresponding descriptions and metadata that contain various details regarding the resources for use by the system to set up and implement firmware management for the resources.

As mentioned previously resource data structure may be configured in various ways. By way of example and not limitation in some embodiments the resource data structure may be configured as a table for a Unified Extensible Firmware Interface UEFI system. The UEFI is a standard that defines parameters of an interface between an operating system and system firmware for a platform. The UEFI provide standard conventions for describing aspects of a platform to the OS through functions methods tables and so forth. Specifically the UEFI provides infrastructure conventions and techniques for data exchange and interaction between system boot code and a boot loader of the OS during booting as well as at runtime. In at least some embodiments the infrastructure defined per UEFI may be leveraged to create a suitable resource data structure for implementation of a firmware update system. Nonetheless it should be appreciated that a variety of other kinds of techniques systems tables and or structures may also be employed to supply resource data for a platform to the firmware update system in a comparable manner. Using the existing infrastructure of UEFI though may avoid some complexity and duplicative functions effort that may be involved with developing a standalone system and or conventions for implementing the resource data structure described herein.

As mentioned the resource data structure may be implemented as a table such as a UEFI table that includes entries for different resources. The entries in the table may include at least identifiers descriptions and metadata as discussed above. The entries in the table identify and describe hardware resources that have updateable firmware. This may include resource types and categorization data instructions details regarding how to interact with the resources and update the resources links locations and or addresses that may be used to register for download or otherwise obtain updates and so forth. Moreover metadata for the entries may record status version information corresponding to the described resources. A variety of different fields may be defined for entries in the table to capture information that is sufficient to enable the firmware manager to set up and carry out updates.

As but one illustrative example of the foregoing concepts consider the following example tables which represent some example field definitions and entries respectively. Information represented by the example tables may be implemented as a UEFI table or another suitable data structure as described previously.

Table 1 shows and provides descriptions of various example fields that may be populated with resource data . In addition to the descriptions contained in the table consider the following additional points regarding the example fields. The firmware class field may contain the previously described identifier that identifies a firmware component that can be updated via system. The system may use the identifier to target updates to appropriate resources as described in detail later in this document.

The firmware type field describes the firmware resource type. The following table provides one example of different firmware types and values that be defined for resources via the firmware type field.

The update package flags are generally used to convey information regarding packages passed into a resource during the updating of firmware a resource. The values and structure for this field depends upon the particular mechanism used to deliver the update packages. The update package flags are configured to represent and or convey instructions regarding how to handle packages for the firmware updates. For instance in a UEFI implementation the field may contains capsule flags regarding update capsules that are passed into the run time service that consumes the updates.

The last attempt version field describes the last firmware version for which an update was attempted and the last attempt status provides an indication regarding the success or failure of the last update attempt. A variety of values or codes may be used to represent different possible outcomes of an update. The following table provides one example of different status types and values that may be defined for firmware updates via the last attempt status field.

In accordance with the foregoing description of some example fields and metadata Table 4 below provides an example resource data table with example entries for two resources. In general techniques for collective firmware updates described herein apply to both system firmware associated with core hardware of the platform and device firmware that may be updated independently of system firmware. One or more individual components may be updated in a collective manner as part of an update to system firmware. Accordingly the table or other data structure is configured to contain one entry for system firmware that may encompass multiple individual devices resources. In addition the table contains one entry for each additional device that is designated to employ the firmware update system for handling of firmware updates. In this context Table 4 illustrates both a system firmware entry and one example device entry. Additional entries comparable to the example device entry may be included to support any number of updatable devices.

It is once again noted that the above described table and or UEFI implementations are provided as illustrative examples of resource data structures suitable for use by a firmware update system. In practice a variety of different formats and techniques for conveying resource data to the firmware manager may be employed. For example a table or other data structure comparable to the foregoing examples may be configured for other kinds of interfaces between an OS and system boot code including but not limited to Advanced Configuration and Power Interface ACPI custom application programming interfaces APIs and Basic Input Output System BIOS interfaces.

In another approach the firmware manager may be configured to implement an interrogation scheme to request and obtain resource data at various times. In this case the firmware manager may invoke a method or make a function call to query system code for information regarding the resources. This may occur during a boot sequence and periodically and or on demand thereafter. This interrogation technique may be used in addition to or in lieu of populating a table through which the OS may discover and enumerate resources for a platform.

A data structure is instantiated that is configured to designate a plurality of resources of a computing device for which updates to firmware are handled collectively through an operating system block . A variety of different techniques may be used to define a designated format and conventions for resource data that maybe consumed by a firmware manager as discussed above and below. In one approach a table as described above may be defined with various descriptive fields and corresponding metadata.

Identifiers are generated for each of the plurality of resources that are designated block . Here the data structure may be defined to include identifiers for each resource that can be used to reference the resources and distinguish between resources. The identifiers may also be used to target firmware updates to appropriate resources. GUIDs or other suitable identifiers may be employed as discussed previously.

The data structure is populated with entries for each of the plurality of resources that include the identifiers block . Here entries for system firmware and each updatable device are added to the table or other data record. The data structure is exposed to the operating system to enable collective handling of the updates to firmware block . The exposed data structure provides a mechanism for identifying both system firmware and device firmware for updating to the operating system. In at least some embodiments core system firmware is responsible for allocating and populating the data structure in the designated format. This may occur during a boot sequence for the platform. A different instance of the resource data structure may be instantiated for each boot sequence to reflect current data for the firmware resources. The data structure may be exposed to the operating system and or firmware manager via UEFI or another suitable interface e.g. ACPI BIOS custom APIs etc. . The OS firmware manager may make use of the resource data provided via the data structure to discover resources configure firmware updates deploy the updates and otherwise set up and handle firmware updates for devices enumerated in the data structure. Details regarding techniques for discovery and deployment of firmware updates are discussed in the following section.

This section describes example techniques for collective management of firmware updates which may include but is not limited to discovery of updateable resources and distribution of firmware updates to resources that are designated to obtain firmware updates through the firmware update system.

As mentioned a firmware update system implemented by a firmware manager may be configured to collectively handle firmware updates for a plurality of resources. Resources for a particular computing system or platform may be described in a resource data structure in a designated format that the firmware manager is configured to recognize such as the examples described in the preceding section. Accordingly the firmware manager may make use of resource data contained in an appropriate resource data structure to enumerate resources for which handling of firmware updates through the system is designated. Firmware updates for the enumerated resources may be set up and managed by the firmware manager based on resource data that is conveyed via the resource data structure Implementation details regarding techniques to collectively manage firmware updates for resources are described in relation to the following example procedure.

In particular depicts an example procedure in which firmware updates for multiple resources are handled collectively through a firmware update system. In at least some embodiments the procedure may be implemented by firmware manager of a computing device .

Resources for a platform that have updateable firmware are discovered block . This may occur in any suitable way. For example the firmware manager may be configured to interact with system firmware to obtain resource data that describes various resources associated with a computing system. The interaction may occur via UEFI ACPI BIOS and so forth. In one approach the firmware manager discovers resources by referencing a resource data structure in a suitable format as described previously. Each resource may be identified by a corresponding identifier and may be associated with respective descriptions and or metadata . In addition or alternatively the firmware manager may interrogate the system firmware through prescribed methods and or functions to find and or request resource data . In another example system firmware may be configured to supply resource data by broadcasting the data in a defined manner communicating records files message for receipt by the firmware manager and so forth. Thus the firmware manager may obtain resource data in various ways and may use the resource data to enumerate resources that have updateable firmware.

Representations are created to virtualize the resources with respect to an operating system of the platform block . Here the firmware manager may create representations in various formats that are configured to provide software abstractions of the resources within the context of the operating system. The representations may be in the form of objects records list items and or files that correspond to each resource. Representations may be created for each updateable resource that is enumerated. These virtual representations of the underlying hardware may be employed to set up and manage firmware updates for the resources and or to facilitate interaction with the hardware to install the updates. Creating representations for the enumerated resources effectively registers the enumerated resources for handling of firmware updates through the system.

In one example the firmware update system is configured to produce the representations using built in operating system functionality for general device management tasks for plug and play devices and or other devices. For example the operating system may provide functionality to view hardware devices and control the devices including for example viewing a list of devices and information regarding the devices enabling disabling devices updating device drivers matching drivers to devices and so forth. Operating system infrastructure for device management also provide functionality to match driver updates to devices and initiate execution of driver update packages for the devices. Effectively techniques infrastructure and user interfaces provided by the operating system for management of plug and play devices are extended to support collective firmware updates. More generally detecting and distributing of the firmware updates may be performed through built in operating system infrastructure that is designed to handle other types of updates such as driver updates application updates and so forth.

To make use of device management infrastructure for example each resource having updatable firmware may be represented as a plug and play device. Different resources are assigned identifiers as previously described to reference and distinguish between the resources. The resources may then be discoverable via operating system APIs for device management. The representations may also include information that may be used to filter and categorize entries. The filter category information enables the OS to selectively retrieve list expose and or interact with representations for resources having updateable firmware. For example representations may be associated with resource types e.g. system firmware device firmware and or an updateable firmware category indication that can be used to distinguish from and filter out other types of representations such as device driver representations.

Once resources having updatable firmware are represented as plug and play devices firmware updates for the resources may be acquired processed and distributed in manner comparable to updating device drivers. In at least some embodiments the firmware update packages may be formed in the same format as driver packages that the device management infrastructure recognizes and is able to handle. Here the format employed for device driver packages does not constrain the underlying payload of the package with respect to what type of payload can be delivered. Accordingly the device management infrastructure may be leveraged to handle and distribute firmware update packages in addition to other kinds of packages such as driver update packages. In particular firmware update packages payloads are contained in device driver style packages. When update packages are available the packages may be matched to corresponding representations of the resources. This may occur by comparing identifiers associated with the representations to identifiers contained in the packages to match the updates and resources one to another.

Naturally the firmware manager may alternatively rely upon other comparable functionality to create virtual representations of the underlying hardware and to handle firmware updates for the resources. For example rather than relying upon the plug and play infrastructure infrastructure e.g. techniques components and user interfaces for representing and handling firmware updates may be integrated into the firmware manager . In addition or alternatively the firmware manager may rely upon other external content management and update delivery systems designed to handle updates for other types of content such as an application update infrastructure or a notification system to name a few examples. Here resources may be virtually represented as content items with the content management system and updates for the firmware may be handled through the system along with other types of content. For example updatable firmware that is enumerated may be represented as installed applications for the application update infrastructure or as delivery endpoints contacts for the notification system. Further other formats for firmware update packages payloads may also employed. Generally the firmware updates are configured as packages payloads that correspond to the particular content management system used to handle the updates. For example the updates may be configured as attachments to notification system messages as application update packages as custom packages designed specifically for the firmware update system and so forth.

Firmware updates available for one or more of the resources are detected block and the detected firmware updates are distributed to corresponding resources to initiate firmware updates by the resources block . Again a variety of techniques to detect available updates may be employed. For example the firmware manager may automatically check for updates upon start up and or periodically after system boot up. In addition firmware manager may check for updates on demand responsive to an explicit selection to check for updates by user input an application request or otherwise. Updates may be accessed and downloaded from a server over a network on an individual basis e.g. navigation of a browser to obtain selected updates and or automatically as part of an overall software update management scheme implemented by the OS. In addition or alternatively at least some updates may be transferred to a computing device using some form of computer readable media such as a compact disk flash drive or other media device.

In accordance with the foregoing the firmware manager may generate and or reference a list of registered resources using representations for the resources. The list of registered resources may be employed by the firmware manager to check for updates match updates to resources distribute updates to appropriate resources and so forth. Version information and status information may also be associated with the representations list. The version information enables the firmware manager to determine which updates are applicable.

The representations provide a mechanism to target firmware updates to corresponding resources. Updates may be obtained through one or more different distribution mechanisms some examples of which are discussed above. When updates are available the firmware manager may match the updates to representations of the resources. Matches may be found based in part upon version information. For example the firmware manager may recognize the current version of firmware that is installed for a particular resource and determine when a newer version is available. Older versions of the firmware may be ignored and therefore may not produce matches unless a rollback to a previous version is initiated. The firmware manager may also check to make sure that updates are intended for the particular platform. For example some updates may be specific to processor architecture or other specific configuration aspects of the platform. Any updates that are not designated for the particular platform may also be ignored.

The firmware manager may stage any matching firmware packages such that the packages are executed during the next boot sequence to cause installation of the updates. This may involve processing the firmware packages extracting the payloads and or copying the payloads for the updates to a designated storage location. In addition the firmware manager may prepare the system to perform the firmware updates and or trigger a system restart to initiate installation of the updates. Upon system reboot the firmware manager may load the payloads into physical memory and create an array of pointers for installation. The array and the payloads may then be passed into system firmware to perform the updates.

Generally speaking firmware update packages are distributed as payloads that are conveyed by the OS firmware manager for consumption by the resources and or system firmware. This may occur by invoking a service implemented by system firmware through a suitable interface. The package may contain an identifier for a corresponding resource a binary file that encompasses the firmware image for the update and any additional information to enable the system firmware to handle and execute the package. In a UEFI implementation for instance the packages payload may be passed as UEFI update capsules by invoking an update capsule method specified by UEFI. In addition or alternatively binary images for firmware updates may be passed in using other suitable interfaces and techniques such as using ACPI BIOS or custom interfaces.

Generally each firmware update package is targeted to a particular firmware resource by including an identifier for the resource in the package. It is possible though for a single firmware update package to target multiple resources in some circumstances. In addition system firmware updates may encompass multiple individual resources that are updated in combination. It is also possible to designate each updateable resource as part of the system firmware such that a firmware update for the platform occurs monolithically via a single system firmware update package.

It should be noted that the firmware update system itself is configured to target firmware update packages to resources and hand off the packages to the system firmware to initiate the updates. The firmware update system can do so without having to process or understand the underlying format or code of the payloads that are distributed. Rather the system firmware and or a firmware service operate to apply the updates defined by the payloads that are passed in by the update system. Additionally the firmware update system may have little or no knowledge of the updateable resources outside of the identifiers used to target updates to the resources. From the perspective of the firmware update system the updateable resources are abstract representations referenced as respective identifiers. Thus the firmware update system may be unaware of the contents of the payloads it distributes or the details regarding the resources to which the payloads are distributed. Additional details regarding using the described techniques to apply firmware updates to resource across different platforms are discussed in the following section

In accordance with the foregoing discussion a resource data structure may be implemented in various was to provide a mechanism that enables IHV OEMs to advertise identify system and device firmware resources to the operating system so that the operating system can take over handling of firmware updates for these resources. In addition an interface between the OS and system firmware may be employed to expose the resource data structure to the OS and provide a mechanism for the OS to distribute firmware update packages to the resources. In at least some embodiments the firmware update techniques may be implemented through a UEFI system and or a resource data structure configured as a UEFI system table in the manner described above.

The described mechanisms to discover hardware resources and distribute firmware updates may be employed across heterogeneous platforms that may have different respective computing architectures hardware configurations capabilities and so forth. This section describes further details regarding using a firmware update system as described herein to handle updates across heterogeneous platforms.

To support different kinds of platforms the firmware update system may rely upon version information identifiers driver versions and other information that is specific to a platform and may differ for different kinds of platforms. This information may be included as metadata associated with a resource data structure . During processing of firmware updates the firmware manager may analyze the metadata to match available updates to corresponding resources. This may include determining the particular type of platform for the updates and making sure that available updates from a vendor manufacturer are applicable to the platform. In some cases firmware for the same hardware resource may vary according to the particular platform and therefore the firmware manager ensures that updates are appropriate for the current platform. Checking for updates and matching of updates may occur when the operating system boots and or periodically at run time.

In at least some embodiments identifiers that are associated with resources as described above may be configured as platform specific identifiers. In this approach the platform specific identifiers may reflect both the identity of the resource and the particular platform. One way this may occur is by assigning different identifiers for hardware resources associated with different platforms such that each resource platform combination is assigned a different identifier. The firmware manager may then be able to recognize particular resource platform combinations based on the different identifiers. In another approach version information and or other metadata may be used to identify and distinguish between different platforms. In this way the firmware manager may determine platforms to which updates are applicable and decide whether or not to apply the updates.

In operation the OS through the firmware manager or otherwise may check whether any available staged updates apply to the described hardware resources specified in the resource data structure. When applicable updates are detected the OS initiates the delivery of the firmware updates to system firmware which executes the updates. This may occur using the UEFI update capsule method or other suitable interfaces mechanisms as described previously.

The system firmware operates to apply the updates in response to distribution of the update packages. The manner in which the updates are applied depends upon the particular platform and system firmware implementation. By way of example this may involve one or more of copying files to a persistent storage location flashing non volatile memory locations executing firmware native code and or adjusting the system power state. During the update process the system firmware may be configured to display informational text or images branded messages update status progress indications and so forth.

During the updates and or upon completion of updates feedback regarding installation of the updates including the status of each update error information progress indication and so forth may be supplied by the system firmware back to the operating system. For example the system firmware may send a status message or a file describing the status for receipt by the operating system. In addition or alternatively the system firmware may write or modify metadata in the resource data structure that reflects the status of updates and or any new version information for installed firmware. The status may express success or failure information as well as details regarding any errors that were encountered. The status information obtained from the system firmware enables the operating system to track success failure of the updates and versions of installed firmware. This status version information may be associated with representations used to manage the resources and expose the information to users such as through plug and play device representations and corresponding user interfaces described previously. The resource data structure may also be modified to reflect newly installed version information for firmware updates that were successful if such information in not already added as part of the installation process. Generally the resource data structure may be populated with current information metadata for installed firmware when a new instance of the resource data structure is instantiated during a boot sequence.

The firmware update system is also configured to establish and or enforce security policies designed to prevent instabilities failures and to recovery from any unsuccessful installations. The security policies may specify pre install checks to be performed examples of which include validating the source and integrity of update payloads confirming the version of the update and ensuring that there is sufficient power and storage available to perform the updates. Updates may be aborted if one or more pre install checks fail. The security policies may also specify post install checks examples of which include checking the installed firmware image confirming proper installation reporting errors and or handling any errors encountered.

In the case of failed installs and errors a mechanism may be implemented to recover from the failure error. Generally speaking in response to errors the firmware update system may selectively manage the update process. This may include determining whether to halt operation retry installation of the update rollback an update or continue normal operation based on the feedback. For example installation may be attempted a configurable number of times before aborting the installation. If a decision is made to abort the installation the system may automatically rollback the firmware to a last known good firmware version. This may involve locating and executing an install package corresponding to the last known good firmware version. Some errors considered relatively minor in nature may be ignored and normal operations may be continued.

As mentioned for some updates a rollback to a previous version may be prevented. This approach may be employed to prevent rollback past a security update or another critical update. Rollback prevention may occur by specifying a value for the lowest supported firmware version field discussed previously. In another approach a new identifier for the resource may be generated in response to the update so that updates associated with previous identifiers will no longer be determined by the operating system as applicable matches to the resource.

Application of firmware updates to heterogeneous systems in accordance with the foregoing description is reflected by the following example procedure. In particular depicts an example procedure in which firmware updates corresponding to a platform are detected and applied.

One or more resources associated with a platform are registered for collective handling of firmware updates through an operating system of the platform block . This may occur using a suitable resource data structure as described previously. Firmware updates are detected that are available for one or more resources that are registered block and available firmware updates that are applicable to the one or more resources that are registered are ascertained block . As mentioned identifiers associated with update packages may be used to determine applicability of updates and target the updates to matching resources. This may include matching updates to resources on a platform specific basis based on the identifiers and or other metadata. This may also involve checking version information for updates against currently installed versions. The current versions of firmware may be reflected in the resource data structure and may be changed as part of the update process when an update is successfully installed.

Installation is initiated for firmware updates that are applicable to the one or more resources block . Here applicable updates that are determined to match resources are configured for installation. For example update packages and or payloads for the updates may be staged in a designated storage location. The staged updates may then be accessed as part of a boot sequence and delivered to system firmware for installation. In this case updates staged for installation are those determined to be applicable to the particular platform. On another platform the firmware updated process may be performed in a comparable manner which in some instances may result in a different set of platform specific update being discovered and distributed.

Having considered example details and techniques regarding a firmware update system consider a discussion of an example system in accordance with one or more embodiments.

The example computing device as illustrated includes a processing system one or more computer readable media and one or more I O interfaces that are communicatively coupled one to another. Although not shown the computing device may further include a system bus or other data and command transfer system that couples the various components one to another. A system bus can include any one or combination of different bus structures such as a memory bus or memory controller a peripheral bus a universal serial bus and or a processor or local bus that utilizes any of a variety of bus architectures. A variety of other examples are also contemplated such as control and data lines.

The processing system is representative of functionality to perform one or more operations using hardware. Accordingly the processing system is illustrated as including hardware elements that may be configured as processors functional blocks and so forth. This may include implementation in hardware as an application specific integrated circuit or other logic device formed using one or more semiconductors. The hardware elements are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example processors may be comprised of semiconductor s and or transistors e.g. electronic integrated circuits ICs . In such a context processor executable instructions may be electronically executable instructions.

The computer readable media is illustrated as including memory storage . The memory storage represents memory storage capacity associated with one or more computer readable media. The memory storage may include volatile media such as random access memory RAM and or nonvolatile media such as read only memory ROM Flash memory optical disks magnetic disks and so forth . The memory storage may include fixed media e.g. RAM ROM a fixed hard drive and so on as well as removable media e.g. Flash memory a removable hard drive an optical disc and so forth . The computer readable media may be configured in a variety of other ways as further described below.

Input output interface s are representative of functionality to allow a user to enter commands and information to computing device and also allow information to be presented to the user and or other components or devices using various input output devices. Examples of input devices include a keyboard a cursor control device e.g. a mouse a microphone for voice operations a scanner touch functionality e.g. capacitive or other sensors that are configured to detect physical touch a camera e.g. which may employ visible or non visible wavelengths such as infrared frequencies to detect movement that does not involve touch as gestures and so forth. Examples of output devices include a display device e.g. a monitor or projector speakers a printer a network card tactile response device and so forth. Thus the computing device may be configured in a variety of ways as further described below to support user interaction.

Various techniques may be described herein in the general context of software hardware elements or program modules. Generally such modules include routines programs objects elements components data structures and so forth that perform particular tasks or implement particular abstract data types. The terms module functionality and component as used herein generally represent software firmware hardware or a combination thereof. The features of the techniques described herein are platform independent meaning that the techniques may be implemented on a variety of commercial computing platforms having a variety of processors.

An implementation of the described modules and techniques may be stored on or transmitted across some form of computer readable media. The computer readable media may include a variety of media that may be accessed by the computing device . By way of example and not limitation computer readable media may include computer readable storage media and communication media. 

 Computer readable storage media may refer to media and or devices that enable persistent and or non transitory storage of information in contrast to mere signal transmission carrier waves or signals per se. Thus computer readable storage media refers to non signal bearing media. The computer readable storage media includes hardware such as volatile and non volatile removable and non removable media and or storage devices implemented in a method or technology suitable for storage of information such as computer readable instructions data structures program modules logic elements circuits or other data. Examples of computer readable storage media may include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage hard disks magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other storage device tangible media or article of manufacture suitable to store the desired information and which may be accessed by a computer.

 Communication media may refer to a signal bearing medium that is configured to transmit instructions to the hardware of the computing device such as via a network. Communication media typically may embody computer readable instructions data structures program modules or other data in a modulated data signal such as carrier waves data signals or other transport mechanism. Communication media also include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

As previously described hardware elements and computer readable media are representative of instructions modules programmable device logic and or fixed device logic implemented in a hardware form that may be employed in some embodiments to implement at least some aspects of the techniques described herein. Hardware elements may include components of an integrated circuit or on chip system an application specific integrated circuit ASIC a field programmable gate array FPGA a complex programmable logic device CPLD and other implementations in silicon or other hardware devices. In this context a hardware element may operate as a processing device that performs program tasks defined by instructions modules and or logic embodied by the hardware element as well as a hardware device utilized to store instructions for execution e.g. the computer readable storage media described previously.

Combinations of the foregoing may also be employed to implement various techniques and modules described herein. Accordingly software hardware or program modules including the operating system applications firmware manager discovery module update module and other program modules may be implemented as one or more instructions and or logic embodied on some form of computer readable storage media and or by one or more hardware elements . The computing device may be configured to implement particular instructions and or functions corresponding to the software and or hardware modules. Accordingly implementation of modules as a module that is executable by the computing device as software may be achieved at least partially in hardware e.g. through use of computer readable storage media and or hardware elements of the processing system. The instructions and or functions may be executable operable by one or more articles of manufacture for example one or more computing devices and or processing systems to implement techniques modules and examples described herein.

As further illustrated in the example system enables ubiquitous environments for a seamless user experience when running applications on a personal computer PC a television device and or a mobile device. Services and applications run substantially similar in all three environments for a common user experience when transitioning from one device to the next while utilizing an application playing a video game watching a video and so on.

In the example system multiple devices are interconnected through a central computing device. The central computing device may be local to the multiple devices or may be located remotely from the multiple devices. In one embodiment the central computing device may be a cloud of one or more server computers that are connected to the multiple devices through a network the Internet or other data communication link.

In one embodiment this interconnection architecture enables functionality to be delivered across multiple devices to provide a common and seamless experience to a user of the multiple devices. Each of the multiple devices may have different physical requirements and capabilities and the central computing device uses a platform to enable the delivery of an experience to the device that is both tailored to the device and yet common to all devices. In one embodiment a class of target devices is created and experiences are tailored to the generic class of devices. A class of devices may be defined by physical features types of usage or other common characteristics of the devices.

In various implementations the computing device may assume a variety of different configurations such as for computer mobile and television uses. Each of these configurations includes devices that may have generally different constructs and capabilities and thus the computing device may be configured according to one or more of the different device classes. For instance the computing device may be implemented as the computer class of a device that includes a personal computer desktop computer a multi screen computer laptop computer netbook and so on.

The computing device may also be implemented as the mobile class of device that includes mobile devices such as a mobile phone portable music player portable gaming device a tablet computer a multi screen computer and so on. The computing device may also be implemented as the television class of device that includes devices having or connected to generally larger screens in casual viewing environments. These devices include televisions set top boxes gaming consoles and so on.

The techniques described herein may be supported by these various configurations of the computing device and are not limited to the specific examples of the techniques described herein. This is illustrated through inclusion of the firmware manager on the computing device . The functionality represented by the firmware manager and other modules applications may also be implemented all or in part through use of a distributed system such as over a cloud via a platform as described below.

The cloud includes and or is representative of a platform for resources . The platform abstracts underlying functionality of hardware e.g. servers and software resources of the cloud . The resources may include applications and or data that can be utilized while computer processing is executed on servers that are remote from the computing device . Resources can also include services provided over the Internet and or through a subscriber network such as a cellular or Wi Fi network.

The platform may abstract resources and functions to connect the computing device with other computing devices. The platform may also serve to abstract scaling of resources to provide a corresponding level of scale to encountered demand for the resources that are implemented via the platform . Accordingly in an interconnected device embodiment implementation of functionality described herein may be distributed throughout the system . For example the functionality may be implemented in part on the computing device as well as via the platform that abstracts the functionality of the cloud .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

