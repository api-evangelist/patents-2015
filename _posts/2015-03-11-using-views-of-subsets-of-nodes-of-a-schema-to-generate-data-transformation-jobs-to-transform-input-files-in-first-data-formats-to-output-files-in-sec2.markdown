---

title: Using views of subsets of nodes of a schema to generate data transformation jobs to transform input files in first data formats to output files in second data formats
abstract: Provided is a method for processing input data in a storage system and in communication with a repository. Views are generated that comprise a tree of nodes selected from a subset of nodes in a hierarchical representation of a schema. The views are saved to the repository. At least one of the views are used to create a job comprising a sequence of data transformation steps to transform the input data described by input schemas to the output data described by output schemas.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09607061&OS=09607061&RS=09607061
owner: International Business Machines Corporation
number: 09607061
owner_city: Armonk
owner_country: US
publication_date: 20150311
---
This application is a continuation of U.S. patent application Ser. No. 14 070 468 filed on Nov. 1 2013 which is a continuation of U.S. patent application Ser. No. 13 401 679 filed on Feb. 21 2012 which is a continuation of U.S. patent application Ser. No. 13 358 426 filed Jan. 25 2012 which patent applications are incorporated herein by reference in their entirety.

The present invention relates to a computer program product system and method for using views of subsets of nodes of a schema to generate data transformation jobs to transform input files in first data formats to output files in second data formats.

An Extensible Markup Language XML schema is a description of elements in a document encoded using the XML language. The XML schema may also be used to define a data model also known as a meta model comprising a definition of a hierarchical representation of nodes that represent the data and relationship of data content for a data model. XML schemas that define more complex data models may have 1000s of nodes arranged in a complex hierarchy of trees of nodes. A large scale schema may be comprised of multiple XML Schema Definition XSD files and provides a definition of large scale trees of nodes and data content.

For instance the financial industry uses FpML Financial products Markup Language which is an XML meta model providing a message standard for the financial industry OTC Derivatives. The FpML meta model version 4.9 groups more than 100 sub requests within 37 XSD files. Another large scale schema is ACORD family of XML specifications for Life Annuity and Health that enables information exchanges among business partners and one type in the schema has more than hundreds of sub types.

There is a need in the art for improved tools for managing access of very large scale schemas and manipulate the data defined by such schemas.

Provided are a computer program product system and method for processing input data in a storage system and in communication with a repository. Views are generated that comprise a tree of nodes selected from a subset of nodes in a hierarchical representation of a schema. The views are saved to the repository. At least one of the views are used to create a job comprising a sequence of data transformation steps to transform the input data described by input schemas to the output data described by output schemas.

Described embodiments provide techniques to allow a user to utilize views of a large scale schema where a view is defined as a subset of nodes and trees of nodes in the schema to compose output such as an XML file from a plurality of input sources in a different format such as text delimited files. Further the views may be used to parse the input in a structured format such as XML to generate a plurality of outputs in a different format such as text delimited file database tables etc.

The client GUI uses the data transformation service to design data transformation jobs which are executed by data transformation processes running in the engine server . The data transformation processes executing a data transformation job parse XML data content defined by an XML schema or composes XML data content defined by an XML schema . The client GUI utilizes the data transformation service deployed on the application server to create the data transformation jobs which may be stored in the repository and may be accessible to other clients. Views in the repository may be reused in multiple data transformation jobs .

The user accesses the client GUI to invoke the data transformation service to retrieve the data transformation jobs from the repository and invoke data transformation processes that execute on the engine server to run the data transformation job to access or create XML data in the file system .

The application server engine server client GUI repository and file system may interconnect over a network . The components of may be implemented with suitable computing architectures. In one embodiment the client GUI may be web based invoking the services using SOAP Simple Object Access Protocol web services or Hypertext Transport Protocol HTTP based Representational State Transfer REST services. In one embodiment the client GUI and the services and may be integrated into one standalone application or distributed in multiple application components. The repository may comprise a relational database or a non relational database. The application server and engine server may be implemented on separate computers or machines or implemented within the same computer and operating system environment.

The repository and file system may be implemented in storage media in one or more storage devices known in the art such as interconnected hard disk drives e.g. configured as a DASD RAID JBOD etc. solid state storage devices e.g. EEPROM Electrically Erasable Programmable Read Only Memory flash memory solid state disks SSDs flash disk storage class memory SCM electronic memory etc. The repository and file system may be implemented in the same or different storage devices. The network may comprise an interconnected network e.g. Intranet Internet Local Area Network LAN Storage Area Network SAN etc. or comprise direct cable connections between the separate computers implementing the components and .

In described embodiments the schema comprises an XML schema. In alternative embodiments the schema may be implemented in suitable structured document definition languages other than XML. Further the XML schema may comprise a text based meta language for describing data shared between applications as defined for an industry group. A schema is converted and presented as multiple trees. Each tree contains many nodes of various types organized into a hierarchical structure.

Each view node may contain a user selection option . A tree selected attribute indicates that the node in the schema represented by the view node and all the descendant nodes for the node in the schema presented by the view node are selected in the view . A tree selected view node has no child nodes in the view . The view creation and edit service and data transformation service automatically deduce from the tree selected attribute that all the descendants of the node in the schema represent by a tree selected view node are selected in the view .

The selected attribute indicates that the node in the schema represented by the view node is selected to include in the view and that a subset of the descendants of the node in the schema represented by the view node are included in the view but not all descendant nodes. The view nodes created for the children will have selection options indicating the status of the child nodes in the view. View nodes would not be created for sub nodes of the root view node that the user deselected or selected to not include in the view. Thus the view nodes define a view to only include the sub nodes of a root view node indicated as included in the view.

A tree chunked attribute indicates that the node in the schema represented by the view node is selected in the view and the data described by the node tree rooted from the node in the schema represented by the view node is to be processed as a simple XML data chunk. The descendants of the node represented by the view node will not be included the view . When the data transformation service processes a view node with the option of tree chunked selected the data transformation service treats the data chunk in the XML data described by the node tree rooted from the node in the schema represented by the view node as a simple string including all the data for the tree from the view node that is chunked. A separate view can be created to model the data for a chunked view node and its related descendants.

The data transformation services receives at block via the client GUI a definition of one or more data transformations identified in field . Each received data transformation defines a data transformation operation on the data in the inputs. Alternatively the data transformation may define a transformation of data produced by a previous transformation. The defined transformation operates on the nodes defined in the input schema to produce a transformed hierarchical representation of the transformed input defined by the output schema comprised of a plurality of group nodes and content nodes. The mapping maps the nodes in the input schema to the subset of nodes in the selected view or the output schema which is created based on the input schema enhanced by the transformation. For example in the composer transformation the output schema is created based on the input schema and enhanced by the schema nodes describing the composing result produced by the composer transformation. The composing result is produced by mapping the input data described in the input schema to an XML data chunk described by a selected view . In one embodiment the data transformation may comprise a JOIN operation to join two lists of input data defined in the input schema . The data transformation service further receives at block for each data transformation a mapping of the nodes of in the input schema to a subset of nodes in the selected view or the output schema which is created based on the input schema enhanced by the transformation

The data transformation service may further receive at block in from the client GUI a composer step identifying a view and a mapping of nodes in the input schema which contains the definitions of the XML data composed by the previous transformation steps to nodes in the selected merge view. For instance a composer transformation may indicate a composition transform operation identify a selected view and identify a mapping of nodes resulting from previous data transformation operations to the selected view node. The data transformation service may receive at block from the client GUI a definition of an output step identifying an output second format comprising a structured document defining elements corresponding to the subset of nodes in the input schema . The above definitions provided by the client GUI according to the operations of are maintained in the composer data transformation job . The data transformation jobs may be saved in the repository for later retrieval and execution and modification.

The described embodiments provide techniques to create data transformation jobs that transform data in one or many inputs in first data formats to one or many outputs in a different data formats from the inputs by defining a plurality of data transformations that transform and map data described by the input schemas to nodes described by the selected views and output schemas. Further a parsing or composing data transformation use a view to parse or compose XML data chunks where a view comprising a subset of nodes from a schema describes the XML data chunks.

The described operations may be implemented as a method apparatus or computer program product using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof. Accordingly aspects of the embodiments may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the embodiments may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The terms an embodiment embodiment embodiments the embodiment the embodiments one or more embodiments some embodiments and one embodiment mean one or more but not all embodiments of the present invention s unless expressly specified otherwise.

The terms including comprising having and variations thereof mean including but not limited to unless expressly specified otherwise.

The enumerated listing of items does not imply that any or all of the items are mutually exclusive unless expressly specified otherwise.

Devices that are in communication with each other need not be in continuous communication with each other unless expressly specified otherwise. In addition devices that are in communication with each other may communicate directly or indirectly through one or more intermediaries.

A description of an embodiment with several components in communication with each other does not imply that all such components are required. On the contrary a variety of optional components are described to illustrate the wide variety of possible embodiments of the present invention.

Further although process steps method steps algorithms or the like may be described in a sequential order such processes methods and algorithms may be configured to work in alternate orders. In other words any sequence or order of steps that may be described does not necessarily indicate a requirement that the steps be performed in that order. The steps of processes described herein may be performed in any order practical. Further some steps may be performed simultaneously.

When a single device or article is described herein it will be readily apparent that more than one device article whether or not they cooperate may be used in place of a single device article. Similarly where more than one device or article is described herein whether or not they cooperate it will be readily apparent that a single device article may be used in place of the more than one device or article or a different number of devices articles may be used instead of the shown number of devices or programs. The functionality and or the features of a device may be alternatively embodied by one or more other devices which are not explicitly described as having such functionality features. Thus other embodiments of the present invention need not include the device itself.

The illustrated operations of the figures show certain events occurring in a certain order. In alternative embodiments certain operations may be performed in a different order modified or removed. Moreover steps may be added to the above described logic and still conform to the described embodiments. Further operations described herein may occur sequentially or certain operations may be processed in parallel. Yet further operations may be performed by a single processing unit or by distributed processing units.

The elements of the computing environment of including the application server and components engine server and component repository and file system may be implemented in one or more computer systems such as the computer system shown in . Computer system server may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. Computer system server may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

As shown in the computer system server is shown in the form of a general purpose computing device. The components of computer system server may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to processor . Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnects PCI bus.

Computer system server typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system server and it includes both volatile and non volatile media removable and non removable media.

System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . Computer system server may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces. As will be further depicted and described below memory may include at least one program product having a set e.g. at least one of program modules that are configured to carry out the functions of embodiments of the invention.

Program utility having a set at least one of program modules may be stored in memory by way of example and not limitation as well as an operating system one or more application programs other program modules and program data. Each of the operating system one or more application programs other program modules and program data or some combination thereof may include an implementation of a networking environment. The components of the computing environment may be implemented as program modules which generally carry out the functions and or methodologies of embodiments of the invention as described herein. The components and of the computing environment may be implemented in one or more computer systems where if they are implemented in multiple computer systems then the computer systems may communicate over a network.

Computer system server may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with computer system server and or any devices e.g. network card modem etc. that enable computer system server to communicate with one or more other computing devices. Such communication can occur via Input Output I O interfaces . Still yet computer system server can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system server via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

The foregoing description of various embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description but rather by the claims appended hereto. The above specification examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention the invention resides in the claims herein after appended.

