---

title: Converting from incorrect program code to correct program code
abstract: A device may receive input text via a programming environment associated with a programming language. The device may tokenize the input text to generate tokenized text. The device may identify an invalid token string, based on the tokenized text, that is invalid for the programming language. The device may identify a token category pattern based on the invalid token string. The token category pattern may be a first sequence of token categories. The device may identify a replacement pattern based on the token category pattern. The replacement pattern may be a second sequence of token categories that is different from the first sequence of token categories. The device may identify a replacement token string based on the replacement pattern. The device may determine valid program code, associated with the programming language, based on the replacement token string. The device may provide the valid program code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09304743&OS=09304743&RS=09304743
owner: The MathWorks, Inc.
number: 09304743
owner_city: Natick
owner_country: US
publication_date: 20150414
---
This application claims priority under 35 U.S.C. 119 based on U.S. Provisional Patent Application No. 62 007 105 filed on Jun. 3 2014 the content of which is incorporated by reference herein in its entirety.

The following detailed description of example implementations refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

Converting code from a first programming language to a second programming language may be difficult and error prone. Users skilled in one programming language may not possess the specific semantic knowledge of a second programming language to accurately implement their intended code in an efficient and syntactically correct manner and or format in the second programming language. In some cases a user may provide text input that is not specific to a programming language such as a mathematical expression which may be syntactically incorrect for a programming language. Conventional environments may issue an error indicating that an environment is incapable of correctly parsing the syntactically incorrect expression. Implementations described herein provide a user with feedback regarding the semantic accuracy of the user s input code or text. For example the feedback may include an automatic correction of input code an indication on a user interface that input code is incorrect and a suggestion to correct the input code or the like. This feedback may enable more efficient syntactically correct implementation of code when the input code is syntactically incorrect for the intended programming language.

As an example and as shown in assume that the user inputs the text a 7 and a via the user interface. Assume that the text a is syntactically incorrect for a programming language associated with the TCE and that the text a results in an error when compiled and or executed. As shown assume that the text a results in an error of Expression or statement is incomplete or incorrect. Based on detecting the error the client device may identify an invalid token string associated with the text a shown as a where each item in brackets represents a token. An invalid token string may use or represent grammar that is unsupported by or otherwise incompatible with the TCE. The client device may identify a pattern based on the invalid token string and or based on the error and may use the pattern to identify a replacement token string shown as a a 1 .

The client device may provide valid program code based on the replacement token string shown as a a 1. The valid program code may represent syntactically correct program code for a programming language associated with the TCE. Furthermore the valid program code may be program code that the user intended to input had the user known the syntax of the programming language associated with the TCE. In this way the client device and the TCE may make inputting valid program code easier by allowing users to input program code mathematical expressions or the like in a language e.g. a programming language the language of mathematics etc. with which the user is familiar.

As further shown in the client device may employ techniques described herein to correct multiple errors associated with input text. For example assume that the user inputs the text num2str a via the user interface. Assume as above that the text a included in the input text is syntactically incorrect for the programming language associated with the TCE and that the text a results in an error of Expression or statement is incomplete or incorrect. Further assume that the text num2str a results in an error of Expression or statement is incorrect possibly unbalanced or because the input text is missing a closing parenthesis. In this case the client device may use techniques described herein e.g. in an iterative manner to correct both errors and generate the valid program code num2str a a a 1 which is valid for the programming language associated with the TCE. For example the client device may identify a pattern based on an invalid token string may use the pattern to identify a replacement token string and may provide valid program code based on the replacement token string.

In this way the client device may reduce user frustration associated with writing program code in a language with which the user in unfamiliar by correcting invalid input text e.g. program code . Furthermore the client device may assist a user in learning a programming language by teaching the user the syntax of the programming language when the user inputs syntactically incorrect text e.g. by suggesting correct program code via a user interface . Furthermore the client device may save computing resources e.g. memory processing power etc. by preventing execution of incorrect program code.

Client device may include one or more devices capable of receiving generating storing processing and or providing program code and or information associated with program code e.g. text a token an error a pattern etc. . For example client device may include a computing device such as a desktop computer a laptop computer a tablet computer a mobile phone e.g. a smart phone a radiotelephone etc. or a similar device. Client device may receive input text via TCE in a programming language associated with TCE . Client device may process the input text to determine whether the input text is valid. When the input text is invalid client device may determine valid program code based on the input text as described in more detail elsewhere herein. Client device may prompt a user e.g. via a user interface of TCE regarding the valid program code and or may replace the input text with the valid program code. In some implementations client device may receive information from and or transmit information to server device .

Client device may host TCE . TCE may include any hardware based component or a combination of hardware and software based components that provides a computing environment that allows tasks to be performed e.g. by users related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In some implementations TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

For example TCE may use an array as a basic element where the array may not require dimensioning. These arrays may be used to support array based programming where an operation may apply to an entire set of values included in the arrays. Array based programming may allow array based operations to be treated as high level programming that may allow for example operations to be performed on entire aggregations of data without having to resort to explicit loops of individual non array operations. In addition TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics image processing signal processing control design life sciences modeling discrete event analysis and or design state based analysis and or design etc.

TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In some implementations TCE may provide these functions and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . In some implementations TCE may provide these functions as block sets or in another way such as via a library etc.

TCE may be implemented as a text based programming environment e.g. MATLAB software Octave Python Comsol Script MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence Modelica or Dymola from Dynasim etc. a graphically based programming environment e.g. Simulink software Stateflow software SimEvents software Simscape software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dynasim SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhapsody or Tau from Telelogic Ptolemy from the University of California at Berkeley aspects of a Unified Modeling Language UML or SysML environment etc. or another type of programming environment such as a hybrid programming environment that includes one or more text based programming environments and one or more graphically based programming environments.

TCE may include a programming language e.g. the MATLAB language that may be used to express problems and or solutions in mathematical notations. The programming language may allow a user to enter commands to be executed by TCE . The programming language may be dynamically typed and or array based. In a dynamically typed array based computing language data may be contained in arrays and data types of the data may be determined e.g. assigned at program execution time.

For example suppose a program written in a dynamically typed array based computing language includes the following statements 

Now suppose the program is executed for example in a TCE such as TCE . During run time when the statement A hello is executed the data type of variable A may be a string data type. Later when the statement A int32 1 2 is executed the data type of variable A may be a 1 by 2 array containing elements whose data type are 32 bit integers. Later when the statement A 1.1 2.2 3.3 is executed since the language is dynamically typed the data type of variable A may be changed from the above 1 by 2 array to a 1 by 3 array containing elements whose data types are floating point. As can be seen by this example data in a program written in a dynamically typed array based computing language may be contained in an array. Moreover the data type of the data may be determined during execution of the program. Thus in a dynamically type array based computing language data may be represented by arrays and data types of data may be determined at run time.

TCE may provide mathematical routines and a high level programming language suitable for non professional programmers and may provide graphical tools that may be used for creating plots surfaces images volumetric representations or other representations. TCE may provide these routines and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . TCE may also provide these routines in other ways such as for example via a library a local data structure a remote data structure e.g. a database operating in a computing cloud a remote procedure call RPC and or an application programming interface API . TCE may be configured to improve runtime performance when performing computing operations. For example TCE may include a just in time JIT compiler.

Server device may include one or more devices capable of receiving generating storing processing and or providing program code and or information associated with program code. For example server device may include a computing device such as a server a desktop computer a laptop computer a tablet computer or a similar device. In some implementations server device may host TCE . In some implementations client device may be used to access one or more TCEs running on one or more server devices . For example multiple server devices may be used to execute program code e.g. serially or in parallel and may provide respective results of executing the program code to client device .

In some implementations client device and server device may be owned by different entities. For example an end user may own client device and a third party may own server device . In some implementations server device may include a device operating in a cloud computing environment. In this way front end applications e.g. a user interface may be separated from back end applications e.g. program code execution . Additionally or alternatively server device may perform one more or all operations described elsewhere herein as being performed by client device .

Network may include one or more wired and or wireless networks. For example network may include a cellular network a public land mobile network PLMN a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network e.g. the Public Switched Telephone Network PSTN an ad hoc network an intranet the Internet a fiber optic based network a private network a cloud computing network and or a combination of these or other types of networks.

The number and arrangement of devices and networks shown in are provided as an example. In practice there may be additional devices and or networks fewer devices and or networks different devices and or networks or differently arranged devices and or networks than those shown in . Furthermore two or more devices shown in may be implemented within a single device or a single device shown in may be implemented as multiple distributed devices. Additionally or alternatively a set of devices e.g. one or more devices of environment may perform one or more functions described as being performed by another set of devices of environment .

Bus may include a component that permits communication among the components of device . Processor is implemented in hardware firmware or a combination of hardware and software. Processor may include a processor e.g. a central processing unit CPU a graphics processing unit GPU an accelerated processing unit APU etc. a microprocessor and or any processing component e.g. a field programmable gate array FPGA an application specific integrated circuit ASIC etc. that interprets and or executes instructions and or that is designed to implement one or more computing tasks. In some implementations processor may include multiple processor cores for parallel computing. Memory may include a random access memory RAM a read only memory ROM and or another type of dynamic or static storage device e.g. a flash memory a magnetic memory an optical memory etc. that stores information and or instructions for use by processor .

Storage component may store information and or software related to the operation and use of device . For example storage component may include a hard disk e.g. a magnetic disk an optical disk a magneto optic disk a solid state disk etc. a compact disc CD a digital versatile disc DVD a floppy disk a cartridge a magnetic tape and or another type of computer readable medium along with a corresponding drive. In some implementations storage component may store TCE .

Input component may include a component that permits device to receive information such as via user input e.g. a touch screen display a keyboard a keypad a mouse a button a switch a microphone etc. . Additionally or alternatively input component may include a sensor for sensing information e.g. a global positioning system GPS component an accelerometer a gyroscope an actuator etc. . Output component may include a component that provides output information from device e.g. a display a speaker one or more light emitting diodes LEDs etc. .

Communication interface may include a transceiver like component e.g. a transceiver a separate receiver and transmitter etc. that enables device to communicate with other devices such as via a wired connection a wireless connection or a combination of wired and wireless connections. Communication interface may permit device to receive information from another device and or provide information to another device. For example communication interface may include an Ethernet interface an optical interface a coaxial interface an infrared interface a radio frequency RF interface a universal serial bus USB interface a Wi Fi interface a cellular network interface or the like.

Device may perform one or more processes described herein. Device may perform these processes in response to processor executing software instructions stored by a computer readable medium such as memory and or storage component . A computer readable medium is defined herein as a non transitory memory device. A memory device includes memory space within a single physical storage device or memory space spread across multiple physical storage devices.

Software instructions may be read into memory and or storage component from another computer readable medium or from another device via communication interface . When executed software instructions stored in memory and or storage component may cause processor to perform one or more processes described herein. Additionally or alternatively hardwired circuitry may be used in place of or in combination with software instructions to perform one or more processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

The number and arrangement of components shown in are provided as an example. In practice device may include additional components fewer components different components or differently arranged components than those shown in . Additionally or alternatively a set of components e.g. one or more components of device may perform one or more functions described as being performed by another set of components of device .

As shown in and by reference number assume that the user inputs the text a 7 and a via the user interface. Assume that the text a is syntactically incorrect for a programming language associated with TCE and that the text a results in an error when compiled and or executed. As shown by reference number assume that client device receives the input text of a based on the user input. As shown by reference number assume that client device tokenizes the input text by segmenting the input text into meaningful programming elements or tokens e.g. using lexical analysis a lexer a tokenizer or the like . As shown assume that client device tokenizes the input text of a into a string of three tokens shown as a where each token is shown in brackets. As further shown assume that client device determines that this token string is invalid for the programming language associated with TCE .

As shown by reference number assume that client device identifies an error associated with the invalid token string. In this case assume that the token string of a e.g. based on the input text of a results in an error of Expression or statement is incomplete or incorrect. As shown by reference number assume that client device identifies a token category pattern based on the invalid token string. A token category pattern may refer to a pattern of e.g. a particular combination and or sequence of tokens token categories and or literal values. A token category may indicate a type of a token for the purpose of parsing. Examples of token categories include a variable different types of mathematical operations e.g. addition operator subtraction operator multiplication operator division operator etc. an assignment operator e.g. used to assign a value to a variable a number a type of number e.g. an integer date type a floating point data type etc. an array or the like. As an example assume that client device identifies a token category pattern of for the invalid token string of a indicating that a is a variable e.g. represented as and that the plus signs are addition operators e.g. represented as .

As shown in assume that client device uses a data structure to identify a replacement pattern e.g. a different token category pattern based on the error and or the token category pattern. In some implementations client device may determine the replacement pattern based on the token category pattern associated with the input text. Additionally or alternatively client device may determine the replacement pattern based on the error associated with the input text. For the purpose of assume that client device determines the replacement pattern based on both the error and the token category pattern.

As shown by reference number assume that the data structure indicates that the error of Expression or statement is incomplete or incorrect and the token category pattern of are associated with a replacement pattern of . In this example is not a token category but a literal value of 1. As shown by reference number assume that client device identifies this replacement pattern of and generates a replacement token string of a a 1 based on the replacement pattern and the input text. For example in the replacement token string client device may represent the variable token category e.g. with the variable a e.g. a from the input text may represent the assignment operator token category e.g. using an equal sign e.g. may represent the addition operator token category e.g. using a plus sign e.g. and may represent the literal value of 1 with the number 1.

In some implementations client device may validate the replacement token string in a similar manner as the tokenized text e.g. shown in to determine whether the replacement token string is valid for the programming language associated with TCE . If the replacement token string is invalid client device may perform a similar process to that shown in to determine a valid replacement token string based on the invalid replacement token string. For example client device may determine a valid replacement token string based on an error associated with the invalid replacement token string and a token category pattern associated with the invalid replacement token string. For the purpose of implementation assume that the replacement token string of a a is valid.

As further shown data structure may store information that identifies text for an error prompt to be provided for display via a user interface. In this case the text for the error prompt is shown as This TCE does not support the post increment operator x . The error prompt text may provide an indication to the user of why a correction was made to program code input by the user.

As shown in and by reference number assume that client device uses the replacement token string of a a to generate and provide valid program code. As shown by reference number assume that the valid program code is a a 1. As shown in client device may provide a suggestion to the user via the user interface shown as Did you mean . . . and may provide an input mechanism for the user to select for example Yes or No. If the user selects Yes client device may provide the valid program code via the user interface may replace the input text with the valid program code may execute the valid program code or may perform some other action involving the valid program code. If the user selects No client device may attempt to determine other valid program code using the example operations described herein. In some implementations client device may automatically perform an action involving the valid program code e.g. providing the valid program code replacing the input text executing the valid program code etc. without prompting the user for input regarding the valid program code. As shown by reference number client device may provide error prompt text identified from data structure for display via the user interface. For example and as shown client device may provide the text This TCE does not support the post increment operator x . 

In this way client device may increase the ease and efficiency of writing program code in a programming language associated with TCE . By determining valid program code based on invalid input text client device may also save time and computing resources that would otherwise be wasted by attempting to execute input text that is invalid for the programming language associated with TCE .

As indicated above are provided merely as an example. Other examples are possible and may differ from what was described with regard to .

As shown in TCE may include multiple components such as a user interface an interpreter queue manager IQM an interpreter a parser a lexer an error handler a syntax suggester and a pattern matcher.

For the purpose of assume that a user has input the text a via the user interface. Assume that the text a is syntactically incorrect for a programming language associated with TCE and that the text a results in an error when compiled and or executed. As shown by reference number the IQM may receive the input text of a based on the user input and may input this text into a queue for processing by the interpreter. The interpreter may attempt to interpret the text and may pass a result of the interpretation to the parser. The parser may parse the text and may pass result of parsing the text to the lexer.

As shown by reference number the lexer may tokenize the input text by segmenting the input text into meaningful programming elements or tokens. As shown assume that the lexer tokenizes the input text of a into a string of three tokens shown as a where each token is shown in brackets. As shown the lexer may pass the tokens to the parser which may parse the tokens. In this case assume that the parser generates an error base on parsing the tokens as shown by reference number . The parser may pass the error to the interpreter which may in turn pass the error to the IQM.

As shown by reference number the IQM may pass the error and the input text of a to the error handler. As shown by reference number the error handler may provide an error to the user interface which may provide the error for display. Further the error handler may provide the error to the syntax suggester. As shown by reference number the syntax suggester may pass the input text of a to the lexer. The lexer may generate tokens for the input text as shown by reference number e.g. a and may pass the tokens to the syntax suggester which may pass the tokens to the pattern matcher.

As shown by reference number the pattern matcher may identify a replacement token string shown as a a 1 . The pattern matcher may pass the replacement token string to the syntax suggester. As shown by reference number the syntax suggester may identify program code based on the replacement token string shown as a a 1 and may pass the program code to the parser. As shown by reference number the parser may determine that the program code is valid and may pass an indication to the syntax suggester that there the program code is valid e.g. is not associated with an error .

As shown by reference number based on the indication of no error the syntax suggester may provide the valid program code as a suggestion to the user interface which may provide the program code as part of a prompt to the user e.g. Did you mean a a 1 . In this way TCE may convert incorrect program code to correct program code.

As indicated above is provided merely as an example. Other examples are possible and may differ from what was described with regard to .

As shown in and by reference number assume that the user inputs the text x 2y via the user interface. Assume that the text x 2y is syntactically incorrect for a programming language associated with TCE and that the text x 2y results in an error when compiled and or executed. As shown by reference number assume that client device receives the input text of x 2y based on the user input. As shown by reference number assume that client device tokenizes the input text of x 2y into a string of five tokens shown as x 2 y where each token is shown in brackets. As further shown assume that client device determines that this token string is invalid for the programming language associated with TCE .

As shown by reference number assume that client device identifies an error associated with the invalid token string. In this case assume that the token string of x 2 y and more specifically the subset token string of 2 y results in an error of Expression or statement is incomplete or incorrect. As shown by reference number assume that client device identifies a token category pattern of for the invalid token string of x 2 y indicating that x is a variable e.g. represented as that the plus sign is an addition operator e.g. represented as that the equal sign is an assignment operator e.g. represented as that the value of 2 is a number e.g. represented as and that y is also a variable e.g. represented as .

As shown in assume that client device uses a data structure to identify a replacement pattern e.g. a different token category pattern based on the error and the token category pattern. As shown by reference number assume that the data structure indicates that the error of Expression or statement is incomplete or incorrect and the token category pattern of e.g. which is a subset of the token category pattern of identified as shown in are associated with a replacement pattern of . As further shown data structure may store information that identifies text for an error prompt to be provided for display via a user interface. In this case the text for the error prompt is shown as This TCE needs the times operator between a number and a variable. 

As shown by reference number assume that client device identifies this replacement pattern of and generates a replacement token string of 2 y based on the replacement pattern and the input text. Client device may replace 2 y in the invalid token string x 2 y with the token string of 2 y to generate a replacement token string of x 2 y . As further shown client device may validate the replacement token string of x 2 y .

As shown in and by reference number assume that client device determines that the replacement token string is invalid and determines an error associated with the invalid token string. As shown by reference number assume that the error is The expression to the left of the equals sign is not a valid target for an assignment. As shown by reference number assume that client device identifies a token category pattern of for the invalid token string.

As shown in and by reference number assume that data structure indicates that the error of The expression to the left of the equals sign is not a valid target for an assignment and the token category pattern of . . . e.g. where . . . represents a wildcard are associated with a replacement pattern of . . . . As further shown data structure may store information that identifies text for an error prompt to be provided for display via a user interface. In this case the text for the error prompt is shown as This TCE does not support the operator. 

As shown by reference number assume that client device identifies this replacement pattern of . . . and generates a replacement token string of x x 2 y based on the replacement pattern and the input text. Assume that client device successfully validates this replacement token string.

As shown in and by reference number assume that client device uses the replacement token string of x x 2 y to generate and provide valid program code. As shown by reference number assume that the valid program code is x x 2 y. As shown by reference number client device may provide error prompt text identified from data structure for display via the user interface. For example and as shown client device may provide the text This TCE needs the times operator between a number and a variable and This TCE does not support the operator. In this case client device corrected two errors associated with the input program code so client device provides text for two error prompts for display.

As further shown in client device may provide a suggestion to the user to use the valid program code. Alternatively client device may automatically use the valid program code without user input. In this way client device may increase the ease and efficiency of writing program code in a programming language associated with TCE . By determining valid program code based on invalid input text client device may also save time and computing resources that would otherwise be wasted by attempting to execute input text that is invalid for the programming language associated with TCE .

As indicated above are provided merely as an example. Other examples are possible and may differ from what was described with regard to .

As shown in TCE may include multiple components such as a user interface an interpreter queue manager IQM an interpreter a parser a lexer an error handler a syntax suggester and a pattern matcher.

For the purpose of assume that a user has input the text x 2y via the user interface. Assume that the text x 2y is syntactically incorrect for a programming language associated with TCE and that the text x 2y results in an error when compiled and or executed. As shown by reference number the IQM may receive the input text of x 2y based on the user input and may input this text into a queue for processing by the interpreter. The interpreter may attempt to interpret the text and may pass a result of the interpretation to the parser. The parser may parse the text and may pass result of parsing the text to the lexer.

As shown by reference number the lexer may tokenize the input text by segmenting the input text into meaningful programming elements or tokens. As shown assume that the lexer tokenizes the input text of x 2y into a string of three tokens shown as x 2 y where each token is shown in brackets. As shown the lexer may pass the tokens to the parser which may parse the tokens. In this case assume that the parser generates an error base on parsing the tokens as shown by reference number . The parser may pass the error to the interpreter which may in turn pass the error to the IQM.

As shown by reference number the IQM may pass the error and the input text of x 2y to the error handler. As shown by reference number the error handler may provide an error to the user interface which may provide the error for display. Further the error handler may provide the error to the syntax suggester. As shown by reference number the syntax suggester may pass the input text of x 2y to the lexer. The lexer may generate tokens for the input text as shown by reference number e.g. x 2 y and may pass the tokens to the syntax suggester which may pass the tokens to the pattern matcher.

As shown by reference number the pattern matcher may identify a replacement token string shown as x x 2 y . The pattern matcher may pass the replacement token string to the syntax suggester. As shown by reference number the syntax suggester may identify program code based on the replacement token string shown as x x 2y and may pass the program code to the parser. As shown by reference number the parser may determine that the program code is invalid and may pass an indication to the syntax suggester that there the program code is invalid e.g. is associated with an error .

As shown by reference number the pattern matcher may identify another replacement token string shown as x x 2 y . The pattern matcher may pass the replacement token string to the syntax suggester. As shown by reference number the syntax suggester may identify program code based on the replacement token string shown as x x 2 y and may pass the program code to the parser. As shown by reference number the parser may determine that the program code is valid and may pass an indication to the syntax suggester that there the program code is valid e.g. is not associated with an error .

As shown by reference number based on the indication of no error the syntax suggester may provide the valid program code as a suggestion to the user interface which may provide the program code as part of a prompt to the user e.g. Did you mean x x 2 y . In this way TCE may convert incorrect program code to correct program code.

As indicated above is provided merely as an example. Other examples are possible and may differ from what was described with regard to .

As shown in process may include receiving input text via a technical computing environment associated with a programming language block . For example client device may receive input text via TCE which may include a programming environment associated with a programming language. For example TCE may be capable of compiling and or executing program code associated with a first programming language and may not be capable of compiling and or executing program code associated with a second programming language. In some implementations TCE may provide a user interface for receiving input text such as a text editor a code editor a command line interface or the like.

In some implementations the input text may include program code that is valid for a particular programming language but that is invalid for another programming language. Additionally or alternatively the input text may include text that is not valid program code in any programming language. In this case the input text may include a string of characters. For example the input text may include a mathematical expression. In some implementations the input text may be input e.g. typed by a user. Additionally or alternatively the input text may be loaded from a file or may be input in another manner.

As further shown in process may include tokenizing the input text to generate tokenized text block . For example client device may tokenize the input text to generate tokenized text by segmenting the input text into meaningful programming elements or tokens e.g. using lexical analysis a lexer a tokenizer or the like . In some implementations client device may use one or more delimiters e.g. spaces character separators line breaks commas semicolons white space etc. to tokenize the input text. As used herein a token may be represented between brackets. For example the input text Var 1 100 which may represent an assignment of the value 100 to the variable Var 1 may be tokenized to Var 1 100 .

As further shown in process may include identifying an invalid token string based on the tokenized text that is invalid for the programming language block . For example client device may analyze the tokenized text to identify an invalid token string. A token string may include a sequence of two or more tokens e.g. two or more consecutive tokens . An invalid token string may include a token string that is not compilable or executable using the programming language associated with TCE . In other words TCE may not be able to compile and or execute the invalid token string. When attempting to parse the invalid token string for compilation and or execution TCE e.g. a parser associated with TCE may return an error.

As further shown in process may include identifying an error associated with the invalid token string block . For example when parsing the invalid token string client device e.g. TCE executing on client device may generate an error. In some implementations the error may be identified by an error identifier e.g. an error code such as an error number a string of text that identifies the error or the like. In some implementations a parser associated with TCE may identify and or return the error and or the error identifier.

As further shown in process may include identifying a token category pattern based on the invalid token string block . For example client device may analyze the invalid token string to identify a token category pattern associated with the invalid token string. A token category pattern may refer to a pattern of token categories and or literal values e.g. a particular combination and or sequence of token categories and or literal values a sequence of consecutive token categories and or literal value etc. . A token category may indicate a type of a token for the purpose of parsing. Example of token categories include a variable different types of mathematical operations e.g. addition operator subtraction operator multiplication operator division operator etc. an assignment operator e.g. used to assign a value to a variable a number a type of number e.g. an integer date type a floating point data type etc. an array a literal value an end of statement an identifier a wildcard e.g. that represents any type of token category and or literal value or the like. In some implementations a token category pattern may be represented as a regular expression e.g. a sequence of characters that forms a search pattern which may be used in pattern matching .

As further shown in process may include identifying a replacement pattern based on the token category pattern and or the error block . For example client device may identify a replacement pattern using the token category pattern and or the error. The replacement pattern may include another token category pattern that is different from the token category pattern associated with the invalid token string. In some implementations client device may determine the replacement pattern based on the token category pattern associated with the input text. Additionally or alternatively client device may determine the replacement pattern based on the error associated with the input text. In some implementations client device may determine the replacement pattern based on both the error and the token category pattern.

In some implementations client device may use a data structure pattern matching a regular expression search an Internet search or the like to identify the replacement pattern using the token category pattern and or the error. For example client device may store and or access a data structure that indicates an association between a replacement pattern and a token category pattern and or that indicates an association between a replacement pattern and an error. Client device may search the data structure using the token category pattern and or the error to identify the replacement pattern.

The table below represents an example of such as data structure which may store an indication of token category patterns that map to replacement patterns in different scenarios. The below table does not show errors that correspond to the replacement patterns. In some implementations the data structure may include such errors e.g. as shown in . The below table also shows example which may or may not be included in the data structure.

The above scenario types token category patterns and replacement patterns are provided as examples. Other scenario types token category patterns and replacement patterns are possible and may be used in connection with the techniques described herein. Furthermore where one mathematical operator is described e.g. an addition operator other mathematical operators may be substituted e.g. a subtraction operator a multiplication operator a division operator etc. .

As further shown in process may include identifying a replacement token string based on the replacement pattern and or the input text block . For example client device may use the replacement pattern and or the input text or the tokenized text to generate a replacement token string. The replacement token string may include a sequence of two or more tokens e.g. two or more consecutive tokens to replace the invalid token string. The replacement pattern may identify a token category for a token to be included in the replacement token string and the input text and or the tokenized text may identify a corresponding token included in the token category to be included in the replacement token string.

As an example assume that client device tokenizes the input text Var 1 100 to generate the invalid token string Var 1 100 which is associated with an error. Further assume that client device identifies a token category pattern of for this invalid token string. Here the token category of corresponds to the variable Var 1 the token category of corresponds to the plus sign the token category of corresponds to the equal sign and the token category of corresponds to the literal value of 100. In some implementations client device may store an indication of these correspondences between token categories and tokens determined based on the input text. Client device may then use the stored indications to generate the replacement token string based on the replacement pattern.

In some implementations a token category pattern may include multiple instances of the same token category. For example the input text a b c would have three instances of a token category e.g. one for a one for b and one for c . In this case client device may store a correspondence indicator that indicates a correspondence between a token category and a particular token. For example client device may use a correspondence indicator of to represent a to represent b and to represent c. 

Returning to the above example of Var 1 100 which is associated with an error and a token category pattern of client device may search a data structure using the error and or the token category pattern to identify a replacement pattern of . Using this replacement pattern and the tokenized text e.g. using stored correspondence indicators that indicate which tokens correspond to which token categories client device may generate the replacement token string of Var 1 Var 1 100 .

As further shown in process may include determining whether the replacement token string is valid block . For example client device may determine whether the replacement token string is valid in a similar manner as determining whether tokenized text is valid described above in connection with block . For example client device may parse the replacement token string e.g. using a parser to determine whether the replacement token string is compilable executable etc. or whether the replacement token string returns an error.

As further shown in if the replacement token string is invalid block NO then process may include returning to block to identify an invalid token string. For example if client device determines that the replacement token string is invalid then client device may identify the replacement token string as the invalid token string. In this case the replacement token string may be the invalid token string and processing may continue e.g. iteratively until client device determines a valid replacement token string. In some implementations if client device cannot determine a valid replacement token string client device may provide for display via a user interface an indication that the input text is invalid and or that valid program code could not be determined based on the invalid input text. In some implementations client device may provide for display an error message that indicates the error associated with the invalid token string.

As further shown in if the replacement token string is valid block YES then process may include determining valid program code associated with the programming language based on the replacement token string block . For example if client device determines that the replacement token string is valid then client device may generate valid program code based on the replacement token string. The valid program code may be valid e.g. compilable executable etc. with respect to a programming language associated with TCE . In some implementations client device may generate the valid program code by de tokenizing the replacement token string. For example client device may de tokenize the replacement token string of Var 1 Var 1 100 to generate the valid program code of Var 1 Var 1 100. 

As further shown in process may include providing the valid program code block . For example client device may provide the valid program code e.g. for display for execution to another device for display or execution etc. . In some implementations client device may provide a prompt for display via a user interface of TCE . The prompt may include the valid program code and may include one or more input mechanisms that permit a user to accept or reject the valid program code. Additionally or alternatively the prompt may include text or another indicator that indicates to the user that the input text is invalid that the valid program code is recommended as a replacement for the input text or the like.

If the user accepts the valid program code client device may replace the input text with the valid program code e.g. in a user interface of TCE such as a code editor may input the valid program code e.g. as input to a user interface of TCE or the like. If the user rejects the valid program code then client device may not replace the input text with the valid program code may not input the valid program code or the like. In some implementations client device may replace the input text with the valid program code may input the valid program code etc. without prompting the user. In this way client device and TCE may assist users in writing program code using an unfamiliar programming language.

Although shows example blocks of process in some implementations process may include additional blocks fewer blocks different blocks or differently arranged blocks than those depicted in . Additionally or alternatively two or more of the blocks of process may be performed in parallel.

Implementations described herein provide a user with feedback regarding the semantic accuracy of the user s input code or text. For example the feedback may include an automatic correction of input code an indication on a user interface that input code is incorrect and a suggestion to correct the input code or the like. This feedback may enable more efficient syntactically correct implementation of code when the input code is syntactically incorrect for the intended programming language. Furthermore implementations described herein may conserve computing resources that would otherwise be wasted by attempting to execute input text that is invalid for a programming language.

The foregoing disclosure provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above disclosure or may be acquired from practice of the implementations.

As used herein the term component is intended to be broadly construed as hardware firmware and or a combination of hardware and software.

Program code sometimes referred to herein as code is to be broadly interpreted to include text based code that may not require further processing to execute e.g. C code Hardware Description Language HDL code very high speed integrated circuits VHSIC HDL VHDL code Verilog code Java code another type of hardware and or software based code that may be compiled and or synthesized etc. binary code that may be executed e.g. executable files that may be directly executed by an operating system bitstream files that may be used to configure an FPGA Java byte code object files combined together with linker directives source code makefiles etc. text files that may be executed in conjunction with other executables e.g. Python text files Octave files a collection of dynamic link library DLL files with text based combining configuration information that connects pre compiled modules an extensible markup language XML file describing module linkage etc. source code e.g. readable by a human machine code e.g. readable by a machine or the like. In some implementations program code may include different combinations of the above identified classes of code e.g. text based code binary code text files source code machine code etc. . Additionally or alternatively program code may include code generated using a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that may be used to express problems and or solutions using mathematical notations. Additionally or alternatively program code may be of any type such as a function a script an object etc.

Certain user interfaces have been described herein and or shown in the figures. A user interface may include a graphical user interface a non graphical user interface a text based user interface etc. A user interface may provide information for display. In some implementations a user may interact with the information such as by providing input via an input component of a device that provides the user interface for display. In some implementations a user interface may be configurable by a device and or a user e.g. a user may change the size of the user interface information provided via the user interface a position of information provided via the user interface etc. . Additionally or alternatively a user interface may be pre configured to a standard configuration a specific configuration based on a type of device on which the user interface is displayed and or a set of configurations based on capabilities and or specifications associated with a device on which the user interface is displayed.

It will be apparent that systems and or methods described herein may be implemented in different forms of hardware firmware or a combination of hardware and software. The actual specialized control hardware or software code used to implement these systems and or methods is not limiting of the implementations. Thus the operation and behavior of the systems and or methods were described herein without reference to specific software code it being understood that software and hardware can be designed to implement the systems and or methods based on the description herein.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of possible implementations. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one claim the disclosure of possible implementations includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used herein should be construed as critical or essential unless explicitly described as such. Also as used herein the articles a and an are intended to include one or more items and may be used interchangeably with one or more. Furthermore as used herein the term set is intended to include one or more items and may be used interchangeably with one or more. Where only one item is intended the term one or similar language is used. Also as used herein the terms has have having or the like are intended to be open ended terms. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

