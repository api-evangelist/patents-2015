---

title: Method and computer device to control software file downloads
abstract: A computer device includes a download unit which downloads one or more files into a storage device. A file logging unit records a resource locator identifying a source network location of the file, when the file is downloaded, and associates the resource locator with a first fingerprint of the file. A system policy unit stores the resource locator associated with a process control policy relevant to the file. A process control unit is arranged to obtain a second fingerprint of the file upon launching a process in a runtime execution environment, retrieve the resource locator from the file logging unit by matching the second fingerprint with the first fingerprint, retrieve the process control policy from the system policy unit according to the retrieved resource locator, and selectively apply process execution privileges which determine execution of the process in the runtime execution environment according to the retrieved process control policy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09589131&OS=09589131&RS=09589131
owner: AVECTO LIMITED
number: 09589131
owner_city: Manchester
owner_country: GB
publication_date: 20150526
---
This application is a continuation of U.S. patent application Ser. No. 13 689 614 filed Nov. 29 2012 entitled METHOD AND COMPUTER DEVICE TO CONTROL SOFTWARE FILE DOWNLOADS which claims priority from foreign application GB1120611.7 entitled METHOD AND COMPUTER DEVICE TO CONTROL SOFTWARE FILE DOWNLOADS filed in the United Kingdom on Nov. 30 2011. Each of the foregoing applications is hereby incorporated by reference herein in its entirety.

The present invention relates generally to the field of computers and computer devices. More particularly the present invention relates to a method and apparatus for controlling downloaded software files.

A computer device often needs to download and install new software. Typically the new software is provided as one or more files which are downloaded by the computer device from a location on a network such as a local area network LAN or the Internet.

It is well known that downloaded software presents a significant risk to the security and reliability of the computer device by exposing the computer device to unwanted software such as infections and malware malicious software . Therefore there is a need to provide a mechanism to control the downloading of software files to a computer device.

The exemplary embodiments have been provided with a view to addressing at least some of the difficulties that are encountered in current computer devices whether those difficulties have been specifically mentioned above or will otherwise be appreciated from the discussion herein.

According to the present invention there is provided a computer device a method and a computer readable storage medium as set forth in the appended claims. Other optional features of the invention will be apparent from the dependent claims and the description which follows.

At least some of the following exemplary embodiments provide an improved mechanism for downloading software files to a computer device. There now follows a summary of various aspects and advantages according to embodiments of the invention. This summary is provided as an introduction to assist those skilled in the art to more rapidly assimilate the detailed discussion herein and does not and is not intended in any way to limit the scope of the claims that are appended hereto.

In one example aspect there is provided a computer device comprising a file logging unit arranged to record a resource locator identifying a source network location of a file when the file is downloaded to a storage unit of the computer device and to associate the resource locator with a first fingerprint of the file a system policy unit arranged to store the resource locator associated with a process control policy relevant to the file and a process control unit arranged to obtain a second fingerprint of the file upon launching a process in a runtime execution environment based on the file retrieve the resource locator from the file logging unit by matching the second fingerprint with the first fingerprint retrieve the process control policy from the system policy unit according to the retrieved resource locator and selectively apply process execution privileges which determine execution of the process in the runtime execution environment according to the retrieved process control policy.

In one aspect the process control unit is arranged to selectively allow or deny execution of the process in the runtime execution environment according to the process control policy.

In one aspect the process control unit is further arranged to dynamically grant elevated execution privileges to the process when specified by the process control policy.

In one aspect the process control unit is further arranged to dynamically grant local administrator privileges to the process when specified by the process control policy.

In one aspect the system policy unit is arranged to store a plurality of predetermined resource locators each associated with a respective process control policy.

In one aspect each process control policy determines execution privileges of the files downloaded from the source network location identified by the respective resource locator.

In one aspect the file logging unit is arranged to record the resource locator each time a file is downloaded to the computer device thereby logging the resource locator and the fingerprint related to each downloaded file.

In one aspect the computer device further includes a download unit which downloads the one or more files into the storage device. In one aspect the download unit comprises a browser.

In one aspect the file logging unit is applied within a browser of the computer device used to download the files to the computer device from a network. In one aspect the file logging unit is a plug in to the browser.

In one aspect the file logging unit is arranged to obtain the fingerprint of the file as a cryptographic hash.

In one aspect the process control unit includes a dynamic linked library which is hooked into the process upon starting the process in the runtime execution environment.

In one aspect the process control unit intercepts a call made to an application programming interface to an operating system of the computer device to create a new process.

In one aspect the process control unit is a kernel driver within an operating system of the computer device and is arranged to intercept a call made through an application programming interface to the operating system of the computer device to create a new process.

In one aspect the process control unit is a kernel driver within an operating system of the computer device and is arranged to receive a notification when a new process starts.

In one example aspect there is provided a method of controlling downloaded files in a computer device the method including the steps of recording a resource locator identifying a source network location of a file when the file is downloaded to the computer device associating the resource locator with a first fingerprint of the file providing a process control policy relevant to the file wherein the process control policy is associated with the resource locator obtaining a second fingerprint of the file upon launching a process in a runtime execution environment based on the file retrieving the resource locator according to the second fingerprint and the first fingerprint retrieving the process control policy according to the retrieved resource locator and selectively applying process execution privileges which determine execution of the process according to the retrieved process control policy.

In one example aspect there is provided a computer readable storage medium having instructions recorded thereon which when implemented by a computer device cause the computer device to be arranged as set forth herein and or which cause the computer device to perform the method as set forth herein.

At least some embodiments of the invention may be constructed partially or wholly using dedicated special purpose hardware. Terms such as component module or unit used herein may include but are not limited to a hardware device such as a Field Programmable Gate Array FPGA or Application Specific Integrated Circuit ASIC which performs certain tasks. Alternatively elements of the invention may be configured to reside on an addressable storage medium and be configured to execute on one or more processors. Thus functional elements of the invention may in some embodiments include by way of example components such as software components object oriented software components class components and task components processes functions attributes procedures subroutines segments of program code drivers firmware microcode circuitry data databases data structures tables arrays and variables. Further although the exemplary embodiments have been described with reference to the components modules and units discussed below such functional elements may be combined into fewer elements or separated into additional elements.

The exemplary embodiments of the present invention will be discussed in detail in relation to Microsoft Windows operating systems. However the teachings principles and techniques of the present invention are also applicable in other exemplary embodiments. For example the exemplary embodiments are also applicable to other operating systems.

As illustrated in the computer device may take any suitable form. As one example the computer device is a relatively powerful server computer. In another example the computer device is a user oriented computer device such as a desktop PC. As another example the computer device is a portable user oriented computer device such as a laptop computer notebook webbook tablet PDA or smartphone. As further examples the computer device may have other form factors or be incorporated within another device such as an entertainment device for video and or audio processing or output gaming device set top box television music player .

As shown in the computer device employs a resource locator which identifies a location within a network where one or more files are located. For example a network based on Internet protocols may use a uniform resource locator URL with syntax consistent with RFC3986. The computer device may then download the desired file or files from the source location and save these files in a storage unit which is accessible locally to the computer device such as a local hard drive or solid state storage e.g. Flash RAM .

As shown in the example computer device may further comprise a file logging unit FLU a system policy unit SPU and a process control unit PCU .

In one example embodiment the file logging unit is suitably provided as a component associated with the download unit . In one embodiment the file logging unit is a plug in to the Internet browser . The file logging unit is arranged to record the URL each time one of the files is downloaded. Also when a file download process has been completed the file logging unit obtains a fingerprint of the newly downloaded file . The URL and the fingerprint are stored together by the file logging unit . For example the file logging unit may store the URL and the related file fingerprint securely within a table or database locally within the computer device . Alternately the file logging unit may export the URL and fingerprint to another suitable location on the network such as a database on a file logging server not shown . A centrally accessible logging database or logging lookup table advantageously allows data to be combined from many different individual computer devices and shared commonly between them. Also the central file logging server allows users to roam between computers or to share downloads with other users.

The fingerprint is suitably a hash. The hash may be a cryptographic hash. In one example the fingerprint is taken using the SHA 1 hashing algorithm. However many other fingerprinting and hashing algorithms are also available and may be applied in other example embodiments.

In the following example embodiments the system policy unit is provided locally within the computer device as will be further explained below. In another example embodiment the system policy unit may be provided at a remote location such as on a system policy server not shown which is in communication with the computer device across the network .

The system policy unit stores a plurality of resource locators URL . Each URL is associated with a process control policy . Suitably the URLs and the policies stored by the system policy unit are determined and defined in advance. Thus an administrator may determine URLs of interest and set a policy appropriate to each URL or group of URLs. Each policy is used to control execution of processes on the computer device relevant to the files downloaded from that determined location.

The process control unit PCU is provided to selectively enforce the policies stored in the system policy unit . In the example embodiments the process control unit is arranged to retrieve a relevant policy when a process is started or launched into the runtime execution environment RTE . The process control unit suitably allows or denies execution of the process according to the predetermined policy .

In operation the download unit downloads the file or files . At step the file logging unit records the relevant URL indicating the network location as the source of the downloaded file and the fingerprint of the downloaded file . Later at step a user process is started with respect to the downloaded files which will cause the downloaded file or files to be executed on the computer device . For example an executable file or a software installation package is launched. It is possible that the downloaded files are stored within the storage unit for some length of time and then some hours or days later the installation process is initiated. At step the process control unit obtains a fingerprint of the file where execution is now desired. This second fingerprint is compared with the fingerprint s stored earlier by the file logging unit and when matched returns the URL identifying the source network location of this downloaded file . The obtained URL is matched against the predetermined URLs in the system policy unit at step thereby retrieving one of the predefined policies . At step the obtained policy is applied by the process control unit .

As mentioned above the process control unit is suitably arranged to selectively allow or block the intended process based on the conditions set in the policy . That is the process control unit is suitably configured to selectively allow the application to run or install on the computer device . Typically this may involve unpacking the downloaded file and deploying an application program into the runtime environment including providing links between the downloaded software application and supporting resources such as libraries e.g. DLLs on the computer device .

In one example embodiment the process control unit may be arranged to dynamically grant elevated execution privileges when specified by the process control policy such as granting local administrator privileges to the process which allows access to resources of the computer device that would otherwise be restricted. Typically the access rights of the local administrator are required in order to successfully install a new software application.

As shown in the operating system may include a security module SECO which is provided to enforce security within the computer device . As one example the security module is provided by the Windows operating system as supplied by Microsoft Corp of Redmond Wash. USA under the trademarks Windows NT Windows 2000 Windows XP Windows Vista Windows Server 2003 Windows Server 2008 and Windows 7 amongst others. The security module which also termed a security sub system or security manager suitably enacts the Windows security model as described for example in Windows Security Overview published 10 Jun. 2011 by Microsoft Corporation.

Each process that a user initiates will be run in a security context that derives access rights and permissions from the user s account. To this end each process is provided with an access token AT . The access token typically carries the security identity SID of the user and SIDs of any other security groups to which the user belongs. The access token thus defines the privileges as held on this host computer by the user and the relevant security groups.

In the example embodiment the security module is arranged to perform an access check when a user process requests access to any of the resource . The security module performs the access check by comparing the access token of the process against a security descriptor such as an access control list ACL associated with the relevant resource . Here the access control list is suitably a Discretionary Access Control List DACL which identifies SIDs of users and groups that are allowed or denied various types of access read write etc. as appropriate for that resource.

Usually the security module SECO in the operating system is sufficient to prevent the user process from inappropriately accessing certain key resources while allowing the user process to access appropriate user resources according to the respective access control list . For example the user process is able to read from but not write to a file of the key resources . Typically the defined access types will depend upon the type of resource being accessed. For example storage is typically defined by read and write access rights while a process may have terminate access rights which determine whether or not a request to terminate that process will be actioned by the operating system . As noted above a user level security context is based on the user as the security principal and the access token is set accordingly. Suitably in a system which adopts a least privilege access model the user level security context is deliberately restricted to a minimal set of access rights.

In practice it is common for a user to be included in a security group such as the local administrator security group so that application programs desired by the user will install and operate correctly without needing additional support from a higher authorized user account such as IT administrator personnel . Where a user is included in such a privileged security group all of the user process initiated by that user will then be granted the higher level privilege rights such as local administrator rights indiscriminately. Thus granting local administrator rights or similar higher privileges generally allows all user processes to access many of the key resources of the computer system but in an indiscriminate manner. Hence it is desired to achieve the desired operation of the user processes but without granting local administrator rights indiscriminately to the user.

In this example the process control unit includes a privilege management module PPMAN . This module is arranged to perform dynamic process privilege reassignment whereby the user process is examined and selectively provided with an adjusted set of privileges. Typically the privileges of the user process are elevated above an initial level. However it is also possible to selectively degrade the privilege level of a particular user process using the same adjustment mechanism.

As shown in the user process is granted a privileged user security context by the privilege management module . This can be considered as a dynamic elevation of the privilege level of the user process so that the specific user process is able to achieve a desired legitimate function which requires greater access rights than were available initially. The process is to be elevated is provided with a new access token which is created based on the initial access token of that process. As one example the SID of the local administrator group is added to this new access token and consequently the process now obtains the privileges and integrity level of the local administrator. The user process is then assigned the new access token such as by stopping and restarting the process and thus the privileged user security context is now applied to that user process .

The object manager is an executive subsystem which controls access to objects. The object manager considers each of the resources as an object including both physical resources such as storage device or peripheral devices and a logical resource such as files or containers. All other executive subsystems including particularly system calls pass through the object manager in order to gain access to the resources . In operation the object manager creates and inserts new objects which makes the object accessible through a handle. Generally speaking the handle is a unique numerical identifier which identifies that object resource to the object manager . Each object created by the object manager is stored in an object table and each entry in the object table may include the object name security attributes a pointer to its object type and other parameters. Typically the operating system is configured so that every request to access a resource passes through the object manager .

As shown in the example computer device provides the execution environment to execute the user process according to the user security context . As noted above the user security context ordinarily defines the access privileges of the user process with respect to the plurality of resources that are available in the execution environment . A security unit is arranged to selectively permit or deny access by the user process to the plurality of resources . In this example the security unit includes the security module and the object manager as discussed above.

In operation the user process makes a system call toward the security unit to request the creation of a new process within the execution environment . In the example embodiment the hook module is embedded within the user process . In one example the hook module is a DLL dynamic linked library component that hooks into each user process . The hook module suitably hooks into the user process as that process is started within the execution environment . In the example embodiment the hook module is arranged to intercept all relevant system calls. In the Windows operating system the Windows API application programming interface provides a set of well defined system calls including calls which relate to the creation of a new process.

The hook is arranged to intercept the API call and may then communicate with the service module in order to determine the relevant policy to be applied. The hook and the service module may communicate by any suitable form of inter process communication IPC . In the example embodiments the service module executes in a privileged security context . As an example the service module may run in the privileged security context of the SYSTEM account. Typically this privileged security context gives unrestricted access to local resources.

The service module is arranged to validate the request from the hook against the policies as recorded in a policy table . In this example the validation is based on the URL of the downloaded file but may also include checking a file name of the user process the owner of the process i.e. the user or other suitable criteria. The policy table provides a configurable mechanism to determine whether or not the requested access will be permitted or denied. In an example embodiment non exact matching is also permitted within the policy table such as by wild card matching. In the example embodiment the service module suitably identifies whether or not a predetermined policy exists with reference to this request i.e. using the relevant fingerprint of the file as an index to retrieve the related source location URL and using the retrieved URL as an index to the respective policy .

In the example embodiments the WIN32 API functions will call their native API counterparts. Here the native API provides the interface between the user mode and the kernel mode within the operating system as noted above. Therefore in the example embodiments the hook module may be implemented by intercepting the Win32 API or the native API functions. For example a file can be created or opened through the Win32 API via the CreateFile function or through the native API via the ZwCreateFile and ZwOpenFile functions. Thus the process control module of can include the hook module as a kernel driver within the operating system . The process control module can also be configured to receive notifications from the operating system when a new process is created and then intercept the new process at that point.

In summary the exemplary embodiments have described an improved mechanism to control downloaded software files within a computer device. The industrial application of the exemplary embodiments will be clear from the discussion herein.

Although a few preferred embodiments have been shown and described it will be appreciated by those skilled in the art that various changes and modifications might be made without departing from the scope of the invention as defined in the appended claims.

