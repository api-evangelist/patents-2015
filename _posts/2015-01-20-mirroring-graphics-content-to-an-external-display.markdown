---

title: Mirroring graphics content to an external display
abstract: A data processing system composites graphics content, generated by an application program running on the data processing system, to generate image data. The data processing system stores the image data in a first framebuffer and displays an image generated from the image data in the first framebuffer on an internal display device of the data processing system. A scaler in the data processing system performs scaling operations on the image data in the first framebuffer, stores the scaled image data in a second framebuffer and displays an image generated from the scaled image data in the second framebuffer on an external display device coupled to the data processing system. The scaler performs the scaling operations asynchronously with respect to the compositing of the graphics content. The data processing system automatically mirrors the image on the external display device unless the application program is publishing additional graphics content for display on the external display device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09411550&OS=09411550&RS=09411550
owner: Apple Inc.
number: 09411550
owner_city: Cupertion
owner_country: US
publication_date: 20150120
---
This application is a divisional of co pending U.S. application Ser. No. 13 154 268 filed on Jun. 6 2011 which claims the benefit of U.S. Provisional Application No. 61 431 776 filed on Jan. 11 2011 the contents of which are hereby incorporated by reference herein.

This invention relates to the field of display driving architectures and in particular to mirroring graphics content to an external display.

Electronic devices such as computer systems wireless cellular telephones mobile computing devices tablet computing devices or other data processing systems often include a built in internal visual display device. The internal display device is used to display visual content generated by or stored on the electronic device. The internal display device may be for example an internal liquid crystal display LCD device.

Certain electronic devices may additionally include a connector such as an Extended Video Graphics Array XVGA connector or other connector known in the art to connect to an external visual display device. The external display device may be for example a standalone LCD or cathode ray tube CRT display. In some instances the electronic device can be set up such that both the internal display device and the external display device display the same visual content concurrently. This may be referred to as a mirrored mode. Alternatively certain electronic devices can also be set up so that the two display devices will display different images such as portions of an extended desktop which allows a user to move a window from one desktop to another desktop by moving a window between the two displays.

In certain embodiments described herein a data processing system may composite graphics content generated by an application program running on the data processing system to generate image data. The data processing system may store the image data in a first framebuffer and display an image generated from the image data in the first framebuffer on an internal display device of the data processing system. A scaler in the data processing system may perform scaling operations on the image data in the first framebuffer store the scaled image data in a second framebuffer and display an image generated from the scaled image data in the second framebuffer on an external display device coupled to the data processing system. The scaling operations may include adjusting at least one of the size resolution orientation and color of the image data.

The scaler may perform the scaling operations asynchronously with respect to the compositing of the graphics content. In one embodiment the scaled image data may be associated with a first image frame. The scaler is asynchronous in that it operates separately from other components such as a CPU or GPU. The data processing system may begin compositing graphics content to generate image data associated with a subsequent image frame before the scaling operations are complete for the image data associated with the first image frame.

In one embodiment the data processing system may determine if an image generated from scaled image data associated with a previous frame has completed displaying on the external display. If the image generated from scaled image data associated with the previous frame has not completed displaying on the external display the data processing system may drop the scaled image data associated with the first frame.

In another embodiment the data processing system may automatically mirror the image to the external display device unless the application program is publishing additional graphics content for display on the external display device. The data processing system determines whether the application program is publishing a second graphics content for a second image to display on the external display device and if the application program is publishing a second graphics content the data processing system disables the automatic mirroring. In another embodiment the data processing system may first determine whether the application program is publishing additional graphics content and then enable or disable mirroring accordingly. The mirroring may include the asynchronous scaling operations as described above.

In the following detailed description of embodiments of the invention reference is made to the accompanying drawings in which like references indicate similar elements and in which is shown by way of illustration specific embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention and it is to be understood that other embodiments may be utilized and that logical mechanical electrical functional and other changes may be made without departing from the scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

The data processing system may further include a video decoder which can be a hardware video decoder a software video decoder or a video decoder implemented with both hardware and software to decode compressed and optionally encrypted media data. The video decoder may be employed to decode video from a camera or from a storage device which stores the video content such as for example a movie. The data processing system can include one or more memory devices such as RAM flash etc. which can store the data used to generate displayable content as well as the displayable content itself. Memories A B and C can be either separate memories or the same memory such as a single integrated circuit or multiple integrated circuits implementing a single memory space etc. as is known in the art. The CPU and the GPU can generate images or other data to be displayed and store those images in a buffer in memory. As shown in the example of the GPU can generate images to be displayed and store those images into memory B and memory C while the CPU can store images it creates to be displayed into memory B. Alternatively the CPU can write to both memories B and C while the GPU could write to only one or both memories. The memory A can be used to store video data being decoded such as a compressed or encrypted movie. The output from the video decoder provides video data which can be temporarily stored in a memory . Memory B memory C and video data memory may be connected to compositor .

Compositor may receive an output from the memories B and C and video data memory . In addition compositor may receive metadata not shown used to composite using techniques known in the art the images in memories and C with the decoded video content from video data memory using the metadata. The metadata may specify the position of source rectangles and position of video data and the position of the images in memories B and C in order to provide a composited image. For example a movie may be displayed within a window having a position and size specified by the metadata and this window may be displayed over other images such as a desktop or images of a user interface such as images provided by memories B and C. In one embodiment the output from compositor may be a 24 bit RGB output.

The output of compositor may be stored in a framebuffer. The framebuffer may include a video output device that drives a video display e.g. internal display device or external display device from one or more memory buffers e.g. buffers containing a complete frame of data i.e. graphical content . The information in the memory buffers may include color values for every pixel on the screen of the display device. An additional alpha channel may be used to retain information about pixel transparency. In one embodiment the output of compositor is stored in buffer and optionally in buffer if needed . The contents of buffer may be used to drive internal display device .

In one embodiment processing device may also include scaler . Scaler may perform scaling operations on the data stored in buffer . This may allow for a mode of operation where graphical content is cloned i.e. mirrored to a secondary display such as external display device . External display device may have different properties and or capabilities than internal display device and the scaling operations allow the graphical content to be displayed correctly on external display device . The scaling operations performed by scaler may include adjusting the size resolution orientation color or other characteristic of the image. Scaler may perform the scaling operations based on input commands received from CPU GPU or some other source. The output of scaler may be stored in buffer and optionally in buffer if needed. The contents of buffer may be used to drive external display device . It will be appreciated that the display devices and may be any one of a variety of types of display devices such as an LCD liquid crystal display an LED Light Emitting Diode display an organic LED display a CRT cathode ray tube display etc.

In one embodiment internal display device and external display device may support different frame rates. For example internal display device may support 60 frames per sec fps while external display device only supports 24 fps. Through the techniques described herein data processing system may attempt to mirror each frame displayed on internal display device to external display device . However the difference in refresh rates may prevent each frame from being fully mirrored. Scaler may be configured to determine when each frame is rendered to internal display device and when the corresponding frame is rendered to external display device . If data processing device is not finished rendering a previous frame to external display device when it attempts to render a next frame to internal display device scaler may be configured to drop the next frame complete rendering of the previous frame and continue rendering a subsequent frame once the previous frame has been completed. This process helps to synchronize the graphics content displayed on both the internal display device and the external display device .

In one embodiment data processing system may be connected to external display device through cable . In other embodiments data processing system and external display device may be connected in some other fashion such as through wireless communications as discussed above. A large portion of one surface of the device may include an external display . External display device may be one representation of the external display device shown in and may include for example a computer monitor a television a projector or some other display device. External display device may include one or more buttons or switches to allow a user to interact with the device such as buttons . External display device may also include a connector which allows for among other things the connection of data processing system . It will be appreciated that external display device may include other connectors as described above with respect to data processing system . In one embodiment according to the techniques described herein graphics content generated by data processing system and displayed on internal display may be cloned or mirrored to external display device and displayed on external display .

Software stack may include a number of display drivers such as internal display driver and external display driver each of which can be configured to communicate with other software components such as the frame buffer library or other components. Internal display driver and external display driver can perform conventional operations with respect to the control of a display e.g. internal display device and external display device respectively as is known in the art in addition to aspects relating to the embodiments described herein. The software components in the software stack may employ a traditional call and return process in which a calling application calls to another software process and waits for a return of a value which is the response to the call. Moreover the software components can employ an application programming interface API described herein to perform these calls.

The frame buffer library in the software stack may implement software routines for managing frame buffers such as frame buffers to drive the one or more displays of the data processing system. The window server software component may implement known software processes to manage windows for applications. In addition window server may make API calls to manage operations of compositor and scaler . For example window server may instruct compositor to composite media data received from memories B and C into a single image frame which is stored in buffer . In one embodiment a frame may represent the image displayed for 1 60of a second. Window server may also instruct scaler to performed scaling operations on the data in buffer to make it suitable for display on external display device .

The application launcher may be a software process that allows a user to launch multiple applications or just one application at a time depending upon the implementation. In one embodiment the application launcher may be the software program known as Springboard which is an application launcher provided by Apple Inc. on the iPhone. The user application may be any one of a plurality of user applications such as a web browser a document viewer a picture viewer a movie player a word processing or text editing application an email application or other application known in the art. The user application can make use of a software framework or one or more software libraries for creating and drawing user graphical content or user interface objects such as buttons windows and other user interface elements and components as are known in the art.

Referring to at block method receives graphical content from an application. The application may include for example user application which may draw multiple pieces of graphical content intended to be displayed as a single image. The graphical content may be temporarily stored in a memory such as memory B or C. At block method composites the graphical content into an image i.e. a frame and stores the result in the framebuffer. Compositor at the direction of GPU may composite the content from memories B and or C into image data and store the result in buffer . At block method displays the composited image data from buffer on an internal display such as internal display device .

At block method performs scaling operations on the composited image data so that the image may be properly displayed on an external display. The external display may have different characteristics than the internal display and thus the scaling operations may include adjusting the size resolution orientation color or other characteristics of the image. In one embodiment the scaling operations may be performed by scaler . The scaled image data output by scaler may be stored in another framebuffer such as buffer . At block method displays the scaled image data from buffer on an external display such as external display device .

Referring to at block method performs the steps of receiving graphical content from an application compositing the graphical content and storing the result in the framebuffer displaying a frame of the composited image on the internal display and performing scaling operations on the frame of the composited image as described above with respect to blocks of . At block method determines whether a previous frame has completed displaying on the external display device to which the graphics content is being mirrored. For example the window server software component may receive an indication from external display driver when the entire contents of a frame buffer such as frame buffer have been displayed on external display device . Since the operations of scaler are asynchronous processing on a subsequent frame of the image may have already begun. If at block method determines that the previous frame has been completely displayed at block method displays the current frame of the scaled image data on the external display. If however method determines that the previous frame has not been completely displayed rather than displaying the current frame at block method drops the current frame of the scaled image and returns to block to being processing on a subsequent frame. Dropping the current frame in this situation can help to prevent image lag and ensure that the internal display and the external display remain synchronized.

Referring to at block method detects the presence of an external display device connected to the data processing system. In one embodiment external display driver may send a signal to other software components when a cable e.g. cable is connected to a connector of the data processing system . At block method mirrors graphical content drawn by a user application to the external display device. The mirroring may be performed according to the method described above with respect to . In one embodiment the data processing system may be configured to always mirror the graphical content whether or not an external display is connected. In other embodiments however the mirroring may be enabled upon detection of the external display.

At block method determines if a user application running on the data processing system is drawing a separate image specifically intended to be displayed on an external display device. Some application may display separate content on the internal and external displays. For example a media player application e.g. a movie player may display the actual media content on the external display device while displaying controls e.g. play pause stop fast forward rewind etc. on the internal display device. The application may designate specific content for either the internal or external display in metadata with the image or through some other identifier. At block method searches for graphics content that is designated specifically for an external display. If at block method determines that the application has not provided a separate image for the external display device method may continue mirroring the graphics content to the external display at block . If at block method determines that the application has provided a separate image for the external display device at block method disables mirroring to the external display device and displays the separate image on the external display.

Referring to at block method detects the presence of an external display device connected to the data processing system as in . In other embodiments the processing system may be pre configured with a default setting e.g. mirroring enabled or disabled which is used without detecting the presence of an external display device. At block method disables mirroring to the external display device. In one embodiment this may be the default setting and thus no change is required. At block method determines if a user application running on the data processing system is drawing a separate image specifically intended to be displayed on the external display device. If at block method determines that the application has provided a separate image for the external display device method maintains the mirroring in a disabled state and displays the separate image on the external display. If at block method determines that the application has provided a separate image for the external display device at block method enables mirroring and mirrors the graphics content to the external display. In other embodiments the data processing system may first determine if the application is drawing a separate image for display on an external display device and then make the determination whether to enable or disable mirroring accordingly.

In one embodiment the CPU may be responsible for creating a list of compositing commands for a series of frames A B and C. Creating the list of compositing commands may include specifying which pieces of graphics data and their location in memories B C should be composited into each frame. Creating the list of compositing commands for frame A may take a certain amount of time e.g. from time t0 to time t1 . When the CPU has finished creating the list of compositing commands for frame A at t0 the GPU may begin executing the compositing commands for frame A in order to generate content for output buffer A e.g. frame buffer . Executing the composing commands for frame A may take a certain amount of time e.g. from time t1 to time t3 . If the CPU does not have other instructions to process e.g. from other applications the CPU may begin creating a list of compositing commands for a subsequent frame B. This may occur for example at time t2 even before processing of frame A by the entire system is complete.

When the GPU has finished executing the compositing commands for frame A at time t3 the scaler may begin to execute scaling commands on the contents of output buffer A. The scaling commands may include those discussed above for scaler or other commands. If the GPU does not have other operations to perform the CPU may begin executing the compositing commands for frame B to generate content for output buffer B at time t4. When the GPU finishes executing the compositing commands for frame B at time t5 the scaler may begin executing scaling commands on the contents of the output buffer B. Similarly when the GPU begins executing the compositing command for frame B at time t4 the CPU may begin to create a list of compositing commands for another subsequent frame C. At time t6 the CPU may begin executing compositing commands for frame C to generate output buffer C and at time t7 the scaler may begin executing scaling commands on the contents of output buffer C. The execution of operations by the CPU GPU and scaler may continue in a similar asynchronous fashion for all subsequent frames to be processed by the data processing system.

In data processing system and external display device are oriented in the same manner i.e. with the longer edge being horizontal . When the graphical content is mirrored to external display device by data processing system e.g. through method the scaler does not need to rotate the image as it will still be displayed correctly. In however data processing system is rotated so that it is oriented at a different angle with respect to external display device . If the graphics content was mirrored directly to external display device the image would appear to be turned on its side. The scaler e.g. scaler may receive information about the orientation of the data processing system from other system components or through user input and may rotate the image accordingly during the scaling process. This results in the image being oriented correctly when displayed on external display device . Rotating the image may result in a change in the aspect ratio between the internal display and the external display. In some embodiments black bars may be added to the displayed image to maintain the correct ratio as shown in .

The scaling operation illustrated in may additionally include an adjustment of the aspect ratio the displayed image. For example in one embodiment shown in the internal display of data processing system may have a first aspect ratio such as 4 3. External display device may have a different aspect ratio from the internal display such as for example 16 9. The scaler e.g. scaler may receive information about the aspect ratio of external display device from external display device itself or through user input and may adjust the aspect ratio of the image accordingly during the scaling process.

It will be appreciated that the API implementing component may include additional functions methods classes data structures and or other features that are not specified through the API and are not available to the API calling component . It should be understood that the API calling component may be on the same system as the API implementing component or may be located remotely and accesses the API implementing component using the API over a network. While illustrates a single API calling component interacting with the API it should be understood that other API calling components which may be written in different languages or the same language than the API calling component may use the API .

The API implementing component the API and the API calling component may be stored in a machine readable medium which includes any mechanism for storing information in a form readable by a machine e.g. a computer or other data processing system . For example a machine readable medium includes magnetic disks optical disks random access memory read only memory flash memory devices etc.

In Software Stack an exemplary embodiment applications can make calls to Services A or B using Service API and to Operating System OS using OS API. Services A and B can make calls to OS using OS API.

In the foregoing specification the invention has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

The above description sets forth numerous specific details such as examples of specific systems components methods and so forth in order to provide a good understanding of several embodiments of the present invention. It will be apparent to one skilled in the art however that at least some embodiments of the present invention may be practiced without these specific details. In other instances well known components or methods are not described in detail or are presented in simple block diagram format in order to avoid unnecessarily obscuring the present invention. Thus the specific details set forth are merely exemplary. Particular implementations may vary from these exemplary details and still be contemplated to be within the scope of the present invention.

Embodiments of the present invention include various operations which are described above. These operations may be performed by hardware components software firmware or a combination thereof. As used herein the term coupled to may mean coupled directly or indirectly through one or more intervening components. Any of the signals provided over various buses described herein may be time multiplexed with other signals and provided over one or more common buses. Additionally the interconnection between circuit components or blocks may be shown as buses or as single signal lines. Each of the buses may alternatively be one or more single signal lines and each of the single signal lines may alternatively be buses.

Certain embodiments may be implemented as a computer program product that may include instructions stored on a machine readable medium. These instructions may be used to program a general purpose or special purpose processor to perform the described operations. A machine readable medium includes any mechanism for storing or transmitting information in a form e.g. software processing application readable by a machine e.g. a computer . The machine readable medium may include but is not limited to magnetic storage medium e.g. floppy diskette optical storage medium e.g. CD ROM magneto optical storage medium read only memory ROM random access memory RAM erasable programmable memory e.g. EPROM and EEPROM flash memory or another type of medium suitable for storing electronic instructions.

Additionally some embodiments may be practiced in distributed computing environments where the machine readable medium is stored on and or executed by more than one computer system. In addition the information transferred between computer systems may either be pulled or pushed across the communication medium connecting the computer systems.

The digital processing devices described herein may include one or more general purpose processing devices such as a microprocessor or central processing unit a controller or the like. Alternatively the digital processing device may include one or more special purpose processing devices such as a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or the like. In an alternative embodiment for example the digital processing device may be a network processor having multiple processors including a core unit and multiple microengines. Additionally the digital processing device may include any combination of general purpose processing devices and special purpose processing device s .

Although the operations of the methods herein are shown and described in a particular order the order of the operations of each method may be altered so that certain operations may be performed in an inverse order or so that certain operation may be performed at least in part concurrently with other operations. In another embodiment instructions or sub operations of distinct operations may be in an intermittent and or alternating manner.

In the above descriptions embodiments have been described in terms of objects in an object oriented environment. It should be understood that the invention is not limited to embodiments in object oriented environments and that alternative embodiments may be implemented in other programming environments having characteristics similar to object oriented concepts.

In the foregoing specification the invention has been described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader scope of the invention as set forth in the appended claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

