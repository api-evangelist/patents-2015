---

title: Media playback control
abstract: Disclosed herein are systems, methods, and non-transitory computer-readable storage media for performing an action during playback based on a media manifest file. A system, such as a media player, configured to practice the method receives a media manifest, extracts, from the media manifest, a list of media chunks and at least one tag associated with the list of media chunks. The list of media chunks can describe two or more separate media assets. Then the system parses the at least one tag to identify an action to perform during playback and a playback position to perform the action. The system retrieves, for playback, at least one media chunk associated with the playback position from the list of media chunks, and, during playback of the at least one media chunk and at the playback position, performs the action. Modifying the media playback control can include temporarily disabling a media playback control.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09282381&OS=09282381&RS=09282381
owner: CBS Interactive Inc.
number: 09282381
owner_city: San Francisco
owner_country: US
publication_date: 20150417
---
This application is a continuation of U.S. application Ser. No. 13 018 312 entitled Media Playback Control to Jignesh Yashwant Dhruv Shalitha Arosha Senanayake and Christopher Peter Xiques filed on Jan. 31 2011 the contents of which are incorporated by reference herein.

The present disclosure relates to media distribution and more specifically to controlling aspects of a media player during playback based on a media manifest file.

Media distribution including video distribution via the Internet is a source of problems for many reasons including video encoding formats bandwidth playback device capabilities different screen sizes and resolutions and so forth. Some manufacturers provide a set of guidelines for media distributors as a standard or generally accepted way to stream media to that manufacturer s devices such as a standard chunk size for streaming media. Certain video playback devices such as the Apple iPad prefer video content to be streamed not continuously but as a series of discrete chunks of video outlined in a manifest file such as an m3u8 file. The iPad receives the manifest file that contains links to each of the chunks of video content and processes the manifest file to retrieve and play back each chunk in turn. However the m3u8 format imposes several limitations including the inability to control or guide the conduct of the media player. This inability to control the media player may not be a problem for singular content such as a full length motion picture. However for content that is supported by advertising such as a television show this inability is an impediment to delivering advertisements ensuring that the advertisements are not skipped and or controlling other aspects of the media consumption experience. The limitations of a manifest file in controlling a media playback device are apparent in other situations as well.

Additional features and advantages of the disclosure will be set forth in the description which follows and in part will be obvious from the description or can be learned by practice of the herein disclosed principles. The features and advantages of the disclosure can be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the disclosure will become more fully apparent from the following description and appended claims or can be learned by the practice of the principles set forth herein.

Disclosed are systems methods and non transitory computer readable storage media for adapting a media player during playback based on tags in a media manifest file. The system such as a media player receives a media manifest and extracts from the media manifest a list of media chunks and at least one tag associated with the list of media chunks wherein the list of media chunks describes at least two separate media assets. Then the system parses the at least one tag to identify an action to perform during playback and a playback position to perform the action. The system retrieves for playback at least one media chunk from the list of media chunks and during playback of the at least one media chunk and at the playback position performs the action. Some applications of this system can disable playback controls of a media player via tags in a manifest file such as an m3u8 file during an advertisement stitched into the m3u8 file. Example manifest files include an m3u8 file or a Media Player Classic Play List MPCPL file. These manifest files include links to each chunk in a set of media chunks representing a media asset and optionally advertisements inserted in the media asset. A media playback device can process the pointers sequentially to fetch and play the video asset chunk by chunk.

Also disclosed are systems methods and non transitory computer readable storage media for generating a manifest file for playback on a media player. An example system configured to practice this method first receives from the media player a request for a media asset. Then the system identifies a manifest file containing first pointers to media chunks for playing the media asset and inserts in the manifest file second pointers to advertising media chunks. The system also inserts in the manifest file a tag for controlling the media player to perform an action during playback of the advertising media chunks. Then the system transmits the manifest file to the media player causing the media player to receive and play back the streamed media based on the manifest file.

A system for playing back media according to a manifest file includes a processor a receiving module configured to control the processor to receive a media manifest a manifest processing module configured to control the processor to extract from the media manifest a list of media chunks a playback module configured to control the processor to retrieve and play the media chunks listed in the manifest and a tag processing module configured to control the processor to determine while playing the media chunks an action based on a tag in the media manifest and to perform the action. Some possible actions the system can take include disabling media playback controls such as fast forward or seek.

Various embodiments of the disclosure are discussed in detail below. While specific implementations are discussed it should be understood that this is done for illustration purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without departing from the spirit and scope of the disclosure.

The present disclosure addresses the need in the art for streaming video. A brief introductory description of a basic general purpose system or computing device in which can be employed to practice the concepts is disclosed herein. illustrates an exemplary media streaming system architecture. A more detailed description of exemplary video manifest files approaches to stitching advertising into a manifest file and method embodiments will then follow. Variations shall be discussed herein as the various embodiments are set forth. The disclosure now turns to .

With reference to an exemplary system includes a general purpose computing device including a processing unit CPU or processor and a system bus that couples various system components including the system memory such as read only memory ROM and random access memory RAM to the processor . The system can include a cache of high speed memory connected directly with in close proximity to or integrated as part of the processor . The system copies data from the memory and or the storage device to the cache for quick access by the processor . In this way the cache provides a performance boost that avoids processor delays while waiting for data. These and other modules can control or be configured to control the processor to perform various actions. Other system memory may be available for use as well. The memory can include multiple different types of memory with different performance characteristics. It can be appreciated that the disclosure may operate on a computing device with more than one processor or on a group or cluster of computing devices networked together to provide greater processing capability. The processor can include any general purpose processor and a hardware module or software module such as module module and module stored in storage device configured to control the processor as well as a special purpose processor where software instructions are incorporated into the actual processor design. The processor may essentially be a completely self contained computing system containing multiple cores or processors a bus memory controller cache etc. A multi core processor may be symmetric or asymmetric.

The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. A basic input output BIOS stored in ROM or the like may provide the basic routine that helps to transfer information between elements within the computing device such as during start up. The computing device further includes storage devices such as a hard disk drive a magnetic disk drive an optical disk drive tape drive or the like. The storage device can include software modules for controlling the processor . Other hardware or software modules are contemplated. The storage device is connected to the system bus by a drive interface. The drives and the associated computer readable storage media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computing device . In one aspect a hardware module that performs a particular function includes the software component stored in a non transitory computer readable medium in connection with the necessary hardware components such as the processor bus display and so forth to carry out the function. The basic components are known to those of skill in the art and appropriate variations are contemplated depending on the type of device such as whether the device is a small handheld computing device a desktop computer or a computer server.

Although the exemplary embodiment described herein employs the hard disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that are accessible by a computer such as solid state drives magnetic cassettes flash memory cards digital versatile disks cartridges random access memories RAMs read only memory ROM a cable or wireless signal containing a bit stream and the like may also be used in the exemplary operating environment. Non transitory computer readable storage media expressly exclude media such as energy carrier signals electromagnetic waves and signals per se.

To enable user interaction with the computing device an input device represents any number of input mechanisms such as a microphone for speech a touch sensitive screen for gesture or graphical input keyboard mouse motion input speech and so forth. An output device can also be one or more of a number of output mechanisms known to those of skill in the art. In some instances multimodal systems enable a user to provide multiple types of input to communicate with the computing device . The communications interface generally governs and manages the user input and system output. There is no restriction on operating on any particular hardware arrangement and therefore the basic features here may easily be substituted for improved hardware or firmware arrangements as they are developed.

For clarity of explanation the illustrative system embodiment is presented as including individual functional blocks including functional blocks labeled as a processor or processor . The functions these blocks represent may be provided through the use of either shared or dedicated hardware including but not limited to hardware capable of executing software and hardware such as a processor that is purpose built to operate as an equivalent to software executing on a general purpose processor. For example the functions of one or more processors presented in may be provided by a single shared processor or multiple processors. Use of the term processor should not be construed to refer exclusively to hardware capable of executing software. Illustrative embodiments may include application specific integrated circuits ASICs and or field programmable gate arrays FPGAs as well as microprocessor and or digital signal processor DSP hardware read only memory ROM for storing software performing the operations discussed below and random access memory RAM for storing results. Very large scale integration VLSI hardware embodiments as well as custom VLSI circuitry in combination with a general purpose DSP circuit may also be provided.

The logical operations of the various embodiments are implemented as 1 a sequence of computer implemented steps operations or procedures running on a programmable circuit within a general use computer 2 a sequence of computer implemented steps operations or procedures running on a specific use programmable circuit and or 3 interconnected machine modules or program engines within the programmable circuits. The system shown in can practice all or part of the recited methods can be a part of the recited systems and or can operate according to instructions in the recited non transitory computer readable storage media. Such logical operations can be implemented as modules configured to control the processor to perform particular functions according to the programming of the module. For example illustrates three modules Mod Mod and Mod which are modules configured to control the processor . These modules may be stored on the storage device and loaded into RAM or memory at runtime or may be stored as would be known in the art in other computer readable memory locations.

Having disclosed some components of a computing system the disclosure now turns to which illustrates an example media streaming system embodiment . The communications between the entities depicted in can occur via one or more wired or wireless networks. Further the devices can communicate directly via the World Wide Web and or via an application programming interface API . A playback device such as a tablet device smartphone desktop or portable computer set top box Internet enabled television media center PC or any other suitable device first makes a request to a media server for playback of media content such as an episode of Star Trek. Typically the media server resides in a network such as the Internet but can reside entirely or partially in any of the playback device or a local network for example. The media server receives the request and generates or fetches a manifest file to send to the playback device in response to the request. Typically the manifest file is sent in one direction but the communication can be one or two way. The manifest file can include links to the main requested media content as well as links to advertising content metadata formatting information and tags for controlling the media player. Example formats for the manifest file include the m3u m3u8 mpcpl and fpl formats. The mpcpl manifest file format is primarily associated with Media Player Classic . The fpl manifest file format is primarily associated with the foobar2000 media player. The principles disclosed herein can operate using any appropriate manifest file format. An m3u8 file is a specific variation of an m3u encoded using UTF 8 Unicode characters. The m3u file format was initially used in the Winamp Media Player for only audio files but has since become a de facto playlist standard on many media devices for local and or streaming media including music and other media types. Many media devices employ variations of the m3u file format any of which can be used according to the principles set forth herein. A manifest file can include links to media files as relative or absolute paths to a location on a local file system or as a network address such as a Uniform Resource Identifier URI path. The m3u8 format is used herein as a non limiting example to illustrate the principles of manifest files.

The manifest file includes a list of pointers to sequential chunks of the requested media content. The contents of a representative m3u8 manifest file for a 32 second video asset are provided below 

Before or at the time of the request the media server generates or identifies the chunks of the requested media content as streaming media content . The chunks of the streaming media content are generated either by the media server the content producer or some other entity by splitting the original media content . Upon receiving the manifest file the playback device can fetch a first chunk for playback from the streaming media content and during playback of that chunk fetch a next chunk for playback after the first chunk and so on until the end of the media content. The functionality of the entities depicted in can be performed by a larger or smaller number of entities. For example a single entity can perform the combined functionalities of multiple shown entities in . Similarly the functionality of a single shown entity in can be divided among several entities. For example an first ingestion server can ingest the original media content to produce the streaming media content while a second customer facing server can service requests for manifest files and a third media streaming server streams the actual chunks indicated by the links in the manifest file.

Having set forth the general architecture of streaming media to playback devices the disclosure turns to a discussion of stitching advertisements into segmented video for streaming including some specific examples. As set forth above certain devices such as the Apple iPad require a video manifest file such as an m3u8 file for streaming media. One problem with an m3u8 file is that other manifest files cannot be embedded therein. The disclosure now turns to a discussion of how to stitch advertisements into a manifest file for presentation to such a playback device.

The first set of chunks illustrates the existing approach of placing any remaining time in the final chunk. As can be seen the first two chapters have a final 1 second chunk and the third chapter final 3 second chunk each of which can cause video streaming performance problems. Only the last chapter has a final chunk of a reasonable size 8 seconds and that is at the end of the media file where the final chunk size does not matter as much.

Using a best fit algorithm for generating chunks based on the chapter boundaries the segmenter can generate a second set of chunks . The first chapter is divided into a 10 second chunk a 6 second chunk and a 5 second chunk. The second chapter is divided into a 10 second chunk a 6 second chunk and a 5 second chunk. The third chapter is divided into a 10 second chunk a 7 second chunk and a 6 second chunk. The fourth chapter is divided into one 10 second chunks and two 9 second chunks. An example m3u8 file for streaming the second set of chunks without any advertisements is provided below 

As this example illustrates while a manifest file is unable to contain other manifest files the manifest file can contain links to chunks from multiple sources. For instance the manifest file can include links to chunks on a single content server and one or more different advertising servers. Alternatively the manifest file can include links to chunks on a single server that stores both content and advertising. The content chunks for example can be stored at different locations although in a common scenario a content producer stores all the content chunks on a single server or cluster of servers. When the playback device receives the manifest file the playback device fetches a first chunk and begins playing that chunk. As that chunk is playing the playback device fetches the next chunk and so on.

A content provider may desire to perform some action during playback of the advertisements such as disabling certain playback controls making a mobile device vibrate determining and reporting a user s location loading a companion advertisement and so forth. An m3u8 manifest file by itself does not provide any mechanism to accomplish this functionality. However the media player can be made to interpret specially crafted manifest file containing tags or other cues to perform such actions. For example the media player can read a specific tag DISABLE FF 30 to disable a fast forward user interface element for 30 seconds. In such implementations of the technology the media player and manifest file generator operate on a standard set of tags cues or messages that can be embedded in manifest files. The manifest file can include numerous different types of tags to control virtually every aspect of the media player not only user interface elements. For example one tag can trigger a tablet computing device to connect wirelessly to a nearby smart phone to load a companion advertisement on the nearby smart phone and or on the tablet computing device. The manifest file can define a group of tags as a single combination tag then the manifest file can refer to the combination tag and the media player can perform the actions in the defined group of tags. For instance the manifest file can define a 30 SEC AD combination tag as a collection of DISABLE PAUSE 30 DISABLE FF 30 DISABLE MUTE 30 and DISABLE SCREEN ROTATION 30. Then instead of including each of these individual tags at each 30 second advertisement the manifest file can simply include a 30 SEC AD tag. In one aspect the manifest file can include these definitions in the beginning of the file when the combination tag is first encountered at some other location in the manifest file or as a completely separate file. The media player can parse these combination tags and store them in memory for use during playback. This approach enables more complex sets of actions while reducing overall manifest complexity.

In this example manifest the tag DEFINE ACTION BEGIN signals to the media player that a new action is being defined. Two actions are defined in this example 30 sec ad and 15 sec ad. Then the manifest file refers to these actions or collections of tag actions using the tag name. The example manifest also shows a DISPLAY COMPANION AD tag with a URL to a companion ad asset. The ADVERTISEMENT TRANSITION tag can indicate to the player to quickly fade to black then fade into the new advertisement reset the media player controls or perform any other suitable action. The DEVICE VIBRATE tag instructs the media player device to vibrate for the indicated duration. These and other tags can be used within the spirit and scope of the disclosure.

While the examples disclosed herein are primarily provided in terms of disabling advertising controls during playback as shown in the tags can be used not only to disable playback user interface elements but also to control any hardware and or software aspect of the media player the user interface the media player s communications with other devices or with the user and so forth. For example a tag in the manifest file can trigger a tablet media playback device to vibrate or rumble during a portion of the main media content when an explosion occurs or when a gunshot is fired. As such the tag can include a delay and or a duration to time the vibration at a specific time after the current chunk starts. The manifest file can also trigger the media player to identify a nearby device suitable for keyboard input such as a notebook or desktop computer smart phone tablet etc. if the media player is unable to accept keyboard input prompt the user for input on the identified device such as feedback on the media content or participation in a survey or game and or otherwise interact with the user via the identified device through the media player. In one aspect the identified device communicates with the user via the media player but the media player can trigger a connection between the identified device and a remote server at which point the media player simply continues playing the media content.

The user can establish content settings on the media player for responding to the tags. For example if the manifest file contains tags indicating child inappropriate portions of the media the media player encounters such a tag evaluates the tag based on the content settings and decides whether to play or skip the tagged portion. In another variation the manifest file contains tags such as IMPORTANCE xx that mark portions of the media content with a relative importance to the overall story of the media content. For example a major plot point introduction of a main character or other essential portion of the content can have a tag of IMPORTANCE 99 while a less important portion of the content can have a tag of IMPORTANCE 12. The user can indicate on the media player or as part of a user profile a desired viewing threshold or an amount of available time to view the content for example. Then based on the user s indication the media player can determine which portions of the content to play and which to skip over to best accomplish the user s preference.

In another approach the manifest file can provide a set of advertising playback policies for advertisements and merely tag the beginning and end or beginning and duration of each advertising segment in the manifest file. The media player can determine how to treat the advertising segments based on the advertising playback policies and the tags demarcating the beginning and ending of advertising content in the manifest file.

In some variations for additional content security each segment or .ts file is tokenized at the time the advertisement is stitched in. This approach can result in URLs in the manifest file that are only valid for a predetermined time frame. Outside of the predetermined time frame the system can remove access to the tokenized segments delete the tokenized segments and or move the tokenized segments to another URL. The predetermined time frame can be different for each chunk listed in the manifest file. For example the system can determine that chunk X occurs 35 minutes in to the media presentation represented by the manifest file. Then the system can set the predetermined time frame for that chunk to start at the time of the request for the manifest file and to end at the time of the request for the manifest file plus 40 minutes. The beginning and ending of the predetermined time frame can be earlier or later based on a desired access policy such as providing the user with the ability to pause rewind and fast forward through the video.

For content security and or digital rights management purposes the computing device that generates the manifest files can only generate manifest files in response to requests originating from one of a list of allowed domains devices and or users. In this way even if the computing device faces the Internet only specific allowed users can successfully make requests. Requests not originating from an allowed source are thus unable to get any content to play.

Having disclosed some basic segmenting advertising insertion and tag based media player control concepts for streaming media based on manifest files the disclosure now turns to the exemplary method embodiments shown in for performing actions at a media player based on tags in a media manifest and for generating a media manifest containing tags for controlling a media player. For the sake of clarity each of the methods is discussed in terms of an exemplary system as shown in configured to practice the respective method. The steps outlined herein are exemplary and can be implemented in any combination thereof including combinations that exclude add or modify certain steps.

The system parses the at least one tag to identify an action to perform during playback and a playback position to perform the action . Tags can indicate a link to external information associated with the advertising media asset. The advertising media asset can include a plurality of individual advertisements. The system retrieves for playback at least one media chunk corresponding to the playback position from the list of media chunks .

The system performs the action during playback of the at least one media chunk and at the playback position . The action can include one or more sub actions such as modifying at least one media playback control of the media player such as temporarily disabling the at least one media playback control. The action can include for example sub actions of fetching based on the at least one tag a companion advertisement associated with the advertising media asset and displaying the companion advertisement simultaneously with the advertising media asset. The companion advertisement can be displayed on a same device as the media player or on a different device or devices.

The system can be a central media server storing the media presentation chunks the advertising chunks and the video manifest file. Alternatively multiple separate systems can perform different portions of the functionality described herein. In this way the system can overcome the limitations of existing manifest files for inserting advertisements into streaming media while avoiding the stops stutters and imprecise boundary handling in streaming videos with embedded advertisements.

The generation or fetching of a manifest file can be triggered by a request from a playback device for a particular piece of media. A manifest file server can select and stitch advertising chunks into the video manifest file on the fly in response to a request and include tags for controlling the playback device during the advertising chunks playback and or at other times. The manifest file server can further retrieve or infer user information such as user preferences location social networking information demographic information age gender viewing history purchasing history and so forth and select particular advertisements and the particular types and arrangement of tags to stitch in to the manifest file based on all or part of that information. For example if a user has paid for a premium media account the manifest file server can include fewer tags or less restrictive tags in the manifest file controlling how the playback device performs during advertisements.

The manifest file server can identify an advertising slot in a media presentation such as a chapter break or designated commercial break. The system can identify multiple advertising slots of different durations in a single media presentation and provide a different set of tags in the manifest file for each advertisement based on the type of advertisement duration of the advertisement an advertiser profile a user profile the playback device capabilities the main media user demographics date time and so forth.

In one variation the system is a server that provides manifest files to a playback device. The server may not optionally generate the manifest files but only modifies existing manifest files to include appropriate tags for controlling the playback device. The server can then serve the manifest files to the playback device. In another variation the system is a server that provides all aspects of streaming media including dividing the media and advertisements generating the manifest file inserting tags into the manifest file transmitting the manifest file to the playback device and streaming chunks to the playback device based on the manifest file.

Embodiments within the scope of the present disclosure may also include tangible and or non transitory computer readable storage media for carrying or having computer executable instructions or data structures stored thereon. Such non transitory computer readable storage media can be any available media that can be accessed by a general purpose or special purpose computer including the functional design of any special purpose processor as discussed above. By way of example and not limitation such non transitory computer readable media can include RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to carry or store desired program code means in the form of computer executable instructions data structures or processor chip design. When information is transferred or provided over a network or another communications connection either hardwired wireless or combination thereof to a computer the computer properly views the connection as a computer readable medium. Thus any such connection is properly termed a computer readable medium. Combinations of the above should also be included within the scope of the computer readable media.

Computer executable instructions include for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Computer executable instructions also include program modules that are executed by computers in stand alone or network environments. Generally program modules include routines programs components data structures objects and the functions inherent in the design of special purpose processors etc. that perform particular tasks or implement particular abstract data types. Computer executable instructions associated data structures and program modules represent examples of the program code means for executing steps of the methods disclosed herein. The particular sequence of such executable instructions or associated data structures represents examples of corresponding acts for implementing the functions described in such steps.

Those of skill in the art will appreciate that other embodiments of the disclosure may be practiced in network computing environments with many types of computer system configurations including personal computers hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. Embodiments may also be practiced in distributed computing environments where tasks are performed by local and remote processing devices that are linked either by hardwired links wireless links or by a combination thereof through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

The various embodiments described above are provided by way of illustration only and should not be construed to limit the scope of the disclosure. For example the principles herein can be applied to any streaming media that is divided into chunks including audio playback text or elements of an interactive environment. Those skilled in the art will readily recognize various modifications and changes that may be made to the principles described herein without following the example embodiments and applications illustrated and described herein and without departing from the spirit and scope of the disclosure.

