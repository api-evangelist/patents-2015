---

title: System and methods for detecting harmful files of different formats in virtual environments
abstract: Disclosed are systems, methods and computer program products for detection of harmful files of different formats. An example method includes: receiving a suspicious file; determining a file format of the suspicious file; determining, using antivirus software, if the suspicious file is clean or harmful; and when the antivirus software fails to determine whether the suspicious file is clean or harmful, selecting, based on at least the file format of the suspicious file, a configuration of a virtual machine for analyzing a maliciousness of the suspicious file by at least: selecting a program associated with the file format of the suspicious file, opening the suspicious file using the associated program in the virtual machine, collecting data of at least one activity on the virtual machine, and analyzing the data to determine the maliciousness of the suspicious file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09348998&OS=09348998&RS=09348998
owner: AO Kaspersky Lab
number: 09348998
owner_city: Moscow
owner_country: RU
publication_date: 20150309
---
This application is a continuation of U.S. patent application Ser. No. 14 300 716 filed on Jun. 10 2014 which is incorporated by reference herein.

The present disclosure relates to antivirus technologies and more specifically to systems and methods for detecting harmful files of different formats.

Harmful programs known as malware are becoming increasingly common and infect computers of users in various ways. Some malware such as the Trojan programs are generally camouflaged as harmless or useful programs so that the user will download them onto his computer. Viruses and worms have the ability of self copying which can result in rapid spread of malware in the event that there is no antivirus software on the computers.

Until recently the overwhelming majority of harmful programs have been executable files that is they contained machine code but could also contain pseudocode such as byte code or instructions whereof the execution needed an interpreter. An example of an executable file format is the EXE or COFF format. However files of other types are now becoming increasingly more common such as PDF or SWF. This is due to the fact that individual programs are used to open such files such as Adobe Reader and the format of such files is itself a kind of container with resources that are used by the program which opens such a file. Often the resource can be either a malicious URL or a script such as JavaScript .

The existing methods of detecting harmful files are ineffective and in some instances impossible to use for analyzing files of different formats.

Disclosed are example aspects of system methods and computer program products for detecting harmful files of different formats.

In one aspect an example method includes receiving a suspicious file determining a file format of the suspicious file determining using antivirus software if the suspicious file is clean or harmful and when the antivirus software fails to determine whether the suspicious file is clean or harmful selecting based on at least the file format of the suspicious file a configuration of a virtual machine for analyzing a maliciousness of the suspicious file by at least selecting a program associated with the file format of the suspicious file opening the suspicious file using the associated program in the virtual machine collecting data of at least one activity on the virtual machine and analyzing the data to determine the maliciousness of the suspicious file.

In one example aspect analyzing the maliciousness of the suspicious file by the virtual machine with the selected configuration comprises selecting a signature database corresponding to the file format of the suspicious file or performing a heuristic analysis based on the file format of the suspicious file.

In one example aspect when the suspicious file is determined to be harmful by the virtual machine the method further includes creating a signature for the suspicious file and updating a collection of harmful files.

In one example aspect the virtual machine is configured to analyze the maliciousness of the suspicious file with at least one of less time different analysis settings or a different malware database than the antivirus software.

In one example aspect the collection of harmful files are chronologically arranged in a tree structure for tracking a signature and features of each harmful file chronologically.

In one example aspect the method further includes providing a plurality of virtual machines to analyze a plurality of suspicion files with different formats and configuring a master machine for the plurality of virtual machines to allocate malware analysis tasks.

In one example aspect the at least one activity on the virtual machine comprises at least one of registering system application programming interface API calls or recording a memory dump of a process opening the suspicious file.

In one example aspect a system for analyzing suspicious files in different formats the system comprising a hardware processor configured to receive a suspicious file determine a file format of the suspicious file determine using antivirus software if the suspicious file is clean or harmful and when the antivirus software fails to determine whether the suspicious file is clean or harmful select based on at least the file format of the suspicious file a configuration of a virtual machine for analyzing a maliciousness of the suspicious file by at least selecting a program associated with the file format of the suspicious file opening the suspicious file using the associated program in the virtual machine collecting data of at least one activity on the virtual machine and analyzing the data to determine the maliciousness of the suspicious file.

In one example aspect a non transitory computer readable storage medium storing a computer program product thereon for analyzing suspicious files in different formats comprises computer executable instructions for receiving a suspicious file determining a the format of the suspicious file determining using antivirus software if the suspicious file is clean or harmful and when the antivirus software fails to determine whether the suspicious file is clean or harmful selecting based on at least the file format of the suspicious file a configuration of a virtual machine for analyzing a maliciousness of the suspicious file by at least selecting a program associated with the file format of the suspicious file opening the suspicious file using the associated program in the virtual machine collecting data of at least one activity on the virtual machine and analyzing the data to determine the maliciousness of the suspicious file.

The above simplified summary of example aspects serves to provide a basic understanding of the present disclosure. This summary is not an extensive overview of all contemplated aspects and is intended to neither identify key or critical elements of all aspects nor delineate the scope of any or all aspects of the present disclosure. Its sole purpose is to present one or more aspects in a simplified form as a prelude to the more detailed description of the disclosure that follows. To the accomplishment of the foregoing the one or more aspects of the present disclosure include the features described and particularly pointed out in the claims.

Example aspects are described herein in the context of a system method and computer program product for detecting harmful files of different formats. Those of ordinary skill in the art will realize that the following description is illustrative only and is not intended to be in any way limiting. Other aspects will readily suggest themselves to those skilled in the art having the benefit of this disclosure. Reference will now be made in detail to implementations of the example aspects as illustrated in the accompanying drawings. The same reference indicators will be used to the extent possible throughout the drawings and the following description to refer to the same or like items.

Unknown suspicious files can be automatically collected from users computers and other sources by an antivirus application which can identify suspicious files using different ways which may include but not limited to 

After this a format recognition module determines the format of the suspicious file. The format determination can be done using known methods such as those disclosed in the US patent application publication no 2009 0013408 which is incorporated by referenced herein. For example the format determination can be based on an analysis of the header the GIF header includes the bytes GIF an executable file includes the entry MZ and a file of OLE format includes the set of bytes 0xD0 0xCF . The file format can also be identified on the basis of the byte entropy value.

After the format of the file has been determined the file is sent for analysis to the antivirus which checks the file using one or more of the following malware analysis methods signature matching heuristic analysis use of databases of third party manufacturers of antivirus products and other known methods. The distinction between an antivirus analysis using the antivirus and an antivirus analysis which can be performed on the user s computer generally is in the amount of time which can be spent on the analysis and also the analysis settings for example a deeper heuristic check and the use of enlarged antivirus databases not available directly to the user due to large size of such antivirus databases for example . In one example aspect the antivirus analysis can be customized for a certain file format in order to maximize efficiency of the antivirus analysis for example by selecting a corresponding signature database or by setting up the heuristic analyzer for the analyzed files format.

In the event that the antivirus has determined an unknown file to be a known harmful or clean file it will update or modify the local databases in terms of the known harmful clean files of the given format the collections . The database modification may be based on an update of the analysis methods such that a file which was formerly not determined to be harmful is now determined to be such. In future this file will be screened out from the antivirus analysis for example by the hash sum value in order to avoid needless checking.

If the antivirus has not determined the unknown file to be harmful it goes to a virtual machine . The virtual machine can be implemented using any known methods of implementation for example using VirtualBox QEMU Virtual PC or the WMware Workstation. In one example aspect different configurations of virtual machines may be selected for analysis of different file formats. For example for analysis of a PDF file a custom virtual machine may be configured to run one or more different versions of Adobe Reader although other programs for opening PDF files may be used such as Foxit Reader .

The images of the virtual machines may have different configurations e.g. they may run different software for opening files of different formats for example one custom virtual machine may run a Windows OS Microsoft Office and a Internet Explorer browser which can be used for opening Word files in Windows operating environment a different custom virtual machine may run an Android OS and Adobe Reader and Chrome browser for opening PDF files in Android operating environment. In one example aspect the virtual machines themselves may include a master machine which allocates malware analysis tasks and the antivirus checking machines themselves on which the analysis of the suspicious files takes place.

In one example aspect the analysis of a suspicious file in the virtual machine may include opening the file using an associated program running on the virtual machine e.g. Adobe Reader may be used to open PDF files . After the file has been opened actions relating to the user s activity may be performed e.g. simulated in the virtual machine such as consent to initialize a script or action e.g. to automatically perform the user s actions such as pressing the keyboard keys or clicking on URL links or another user action.

After the suspicious file has been opened data may be collected that relates to the activity on the virtual machine such system API calls for the Windows OS these will generally be Win32 API calls may be registered and the memory dump of the process opening the file may be recorded for a PDF file this may be the dump of the Adobe Reader process memory . The termination of the working of the virtual machine may be limited in time or may be based on the activity which is recorded for example file activity or depending on the results of the utilization activity of the basic resources such as the CPU .

After the suspicious file has been opened in the virtual machine an analyzer may perform an analysis of the collected data. An example of an analysis is given below 

The above example shows that a triggering of the signature occurs when a series of actions are performed during the opening of the PDF file such as when the file is downloaded from a URL address starting of a process or a command prompt.

If the analyzer has found a harmful functionality in an unknown file a record creating module may create a signature for the detection of this file in future. The signature may be a set of characteristic bytes from different parts of the file which enables a unique identification of the harmful file. A signature generally includes one of the following fields or parts thereof 

In one example aspect a tree structure of file signatures can also be used to detect harmful files. The tree may be constructed on the basis of the date year month . . . . shows an example tree structure for storing signatures of harmful files in a database. The root catalogues are the years followed by the months and then the days which in turn include the corresponding signatures. Such a structure enables an easy navigation through the signature database and tracking of the history of appearance of new harmful files and their features.

In one example aspect in order to avoid false positives the system can collect various popular e.g. frequently used files of different formats. Examples of such files are various user manuals for popular products e.g. software or press releases in PDF format. The files with the highest frequency of occurrence may be designated as a suspicious file after which they undergo the antivirus analysis in steps and added to the collection of clean files.

The personal computer in turn includes a hard disk for reading and writing of data a magnetic disk drive for reading and writing on removable magnetic disks and an optical drive for reading and writing on removable optical disks such as CD ROM DVD ROM and other optical information media. The hard disk the magnetic disk drive and the optical drive are connected to the system bus across the hard disk interface the magnetic disk interface and the optical drive interface respectively. The drives and the corresponding computer information media are power independent modules for storage of computer instructions data structures program modules and other data of the personal computer .

The present disclosure provides the implementation of a system that uses a hard disk a removable magnetic disk and a removable optical disk but it should be understood that it is possible to employ other types of computer information media which are able to store data in a form readable by a computer solid state drives flash memory cards digital disks random access memory RAM and so on which are connected to the system bus via the controller .

The computer has a file system where the recorded operating system is kept and also additional program applications other program modules and program data . The user is able to enter commands and information into the personal computer by using input devices keyboard mouse . Other input devices not shown can be used microphone joystick game controller scanner and so on. Such input devices usually plug into the computer system through a serial port which in turn is connected to the system bus but they can be connected in other ways for example with the aid of a parallel port a game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus across an interface such as a video adapter . In addition to the monitor the personal computer can be equipped with other peripheral output devices not shown such as loudspeakers a printer and so on.

The personal computer is able to work in a network environment using a network connection to one or more remote computers . The remote computer or computers are also personal computers or servers having the majority or all of the aforementioned elements in describing the nature of a personal computer as shown in . Other devices can also be present in the computer network such as routers network stations peer devices or other network nodes.

Network connections can form a local area computer network LAN and a wide area computer network WAN . Such networks are used in corporate computer networks and internal company networks and they generally have access to the Internet. In LAN or WAN networks the personal computer is connected to the local area network across a network adapter or network interface . When networks are used the personal computer can employ a modem or other modules for providing communications with a wide area computer network such as the Internet. The modern which is an internal or external device is connected to the system bus by a serial port . It should be noted that the network connections are only examples and need not depict the exact configuration of the network i.e. in reality there are other ways of establishing a connection of one computer to another by technical communication modules.

In various aspects the systems and methods described herein may be implemented in hardware software firmware or any combination thereof. If implemented in software the methods may be stored as one or more instructions or code on a non transitory computer readable medium. Computer readable medium includes data storage. By way of example and not limitation such computer readable medium can comprise RAM ROM EEPROM CD ROM Flash memory or other types of electric magnetic or optical storage medium or any other medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a processor of a general purpose computer.

In various aspects the systems and methods described in the present disclosure in terms of modules. The term module as used herein refers to a real world device component or arrangement of components implemented using hardware such as by an application specific integrated circuit ASIC or field programmable gate array FPGA for example or as a combination of hardware and software such as by a microprocessor system and a set of instructions to implement the module s functionality which while being executed transform the microprocessor system into a special purpose device. A module can also be implemented as combination of the two with certain functions facilitated by hardware alone and other functions facilitated by a combination of hardware and software. In certain implementations at least a portion and in some cases all of a module can be executed on the processor of a general purpose computer such as the one described in greater detail in above . Accordingly each module can be realized in a variety of suitable configurations and should not be limited to any particular implementation exemplified herein.

In the interest of clarity not all of the routine features of the aspects are disclosed herein it will be appreciated that in the development of any actual implementation of the present disclosure numerous implementation specific decisions must be made in order to achieve the developer s specific goals and that these specific goals will vary for different implementations and different developers. It will be appreciated that such a development effort might be complex and time consuming but would nevertheless be a routine undertaking of engineering for those of ordinary skill in the art having the benefit of this disclosure.

Furthermore it is to be understood that the phraseology or terminology used herein is for the purpose of description and not of restriction such that the terminology or phraseology of the present specification is to be interpreted by the skilled in the art in light of the teachings and guidance presented herein in combination with the knowledge of the skilled in the relevant art s . Moreover it is not intended for any term in the specification or claims to be ascribed an uncommon or special meaning unless explicitly set forth as such.

The various aspects disclosed herein encompass present and future known equivalents to the known modules referred to herein by way of illustration. Moreover while aspects and applications have been shown and described it would be apparent to those skilled in the art having the benefit of this disclosure that many more modifications than mentioned above are possible without departing from the inventive concepts disclosed herein.

