---

title: Remotely monitoring and scheduling a data integration job
abstract: Systems of computer hardware for remotely monitoring and scheduling data integration (DI) jobs are presented including: an integration module that transforms a request for remotely monitoring or scheduling a DI job from a first enterprise application into one or more customized commands by the first enterprise application suitable for accessing a second enterprise application, where the DI job is executed in at a DI server at the request of the second enterprise application; a listener agent electronically coupled with the integration module and a DI server, where the listener agent receives the one or more customized commands, and monitors or schedules the DI job in the second enterprise application through one or more DI job-control application programming interfaces (DI job-control APIs) specific to the second enterprise application; and a customized commands repository that stores the one or more customized commands.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09639406&OS=09639406&RS=09639406
owner: International Business Machines Corporation
number: 09639406
owner_city: Armonk
owner_country: US
publication_date: 20151106
---
This instant application is a continuation of U.S. patent application Ser .No. 12 343 861 filed on Dec. 24 2008 which is now U.S. Pat. No. 9 286 140 B2 issued on Mar. 15 2016.

Day to day business operations of an organization generate a large amount of information. Organization stores this information on a number of different systems which may be deployed on disparate platforms. Further these systems may use different protocols data structures and databases each system customized to cater to a specific business process within the organization. For example a customer relationship management CRM system may include information unique to a customer domain while another system including an enterprise resource planning ERP application could store sales and inventory related information.

Organizations employ various enterprise application integration EAI solutions to share data across different systems. EAI solutions enable the organization to maintain a comprehensive view of the information relating to a number of operations and resources stored in different systems. A considerable amount of time and complexity however is involved in implementing EAI solutions due to system and data level incompatibilities. Heterogeneity among the data in the different systems must be resolved in order to carry out enterprise wide integration operations. Moreover different data sources must employ their own implementations to shield the data to provide their users with an appearance of a single integrated data source.

To that end organizations often employ one or more data warehouses to integrate enterprise data using extract transform and load ETL processes. In the absence of a real time connection or interaction between the EAI and data warehousing processes however remote monitoring or scheduling of data integration DI jobs from different enterprise applications is quite difficult. Thus most organizations retain two disjointed infrastructures that cannot leverage each other in real time.

Some current techniques enable interaction between enterprise applications and DI jobs by exposing a remote monitoring or scheduling application as a service consumed by the enterprise applications. An example of such a system is WEBSPHERE Datastage produced and offered by IBM Corporation as a part of the IBM Information Server. A component of that system known as the WEBSPHERE Information Server Director WISD employs service oriented architecture SOA to expose DI jobs as a service consumed by other external applications. This service may be deployed on any application server or may be called by other enterprise applications having Web Services clients which may request the WISD component for remotely scheduling a DI job.

Exposing DI jobs as a web service for remote monitoring and scheduling however can be a complex procedure requiring considerable enterprise resources and expert user intervention. Further implementing web services from applications employing lightweight user interfaces such as email instant messaging clients mobile application clients or other applications that do not provide efficient support to web services requires specific technical insights. Further in the absence of tight coupling between the different systems upgraded jobs necessitate changes in implementation of the web service for updating input and output stages. The user thus requires both technical expertise and awareness of various business processes for managing these SOA services efficiently.

Systems of computer hardware for remotely monitoring and scheduling data integration DI jobs are presented including an integration module that transforms a request for remotely monitoring or scheduling a DI job from a first enterprise application into one or more customized commands by the first enterprise application suitable for accessing a second enterprise application where the DI job is executed in at a DI server at the request of the second enterprise application a listener agent electronically coupled with the integration module and a DI server where the listener agent receives the one or more customized commands and monitors or schedules the DI job in the second enterprise application through one or more DI job control application programming interfaces DI job control APIs specific to the second enterprise application a customized commands repository that stores the one or more customized commands where the customized commands repository is electronically coupled with the integration module and supports communication by the integration module and the listener agent and a command interpreter that aids the listener agent in interpreting and extracting relevant parameters from the one or more customized commands. In some embodiments systems further include a request queue that stores requests corresponding with the one or more customized commands by the integration module for later processing by the listener agent. In some embodiments systems further include a response queue that receives an output from the listener agent corresponding with the DI job. In some embodiments the integration module is enabled by a framework that provides an extensible and reusable architecture across all enterprise applications. In some embodiments systems further include all integration modules derived from the framework conform to at least a specified set of specifications to communicate with the listener agent by employing specified formats commands and protocols. In some embodiments the framework enables design development and deployment of the integration module as an embeddable client plug in on the enterprise application. In some embodiments the framework enables a user to add one or more functionalities or components for further customizing the integration module based on a users specific requirements.

In some embodiments the integration module is an extensible interface embedded in the first enterprise application and where the extensible interface is customized for the second enterprise application where any data generated for the second enterprise application is made available to the first enterprise application and through the first enterprise application. In some embodiments the integration module and the listener agent operate in a tightly coupled client server paradigm. In some embodiments the one or more customized commands include requests for authenticating a particular client session enabling querying of DI jobs and retrieving logs of DI jobs in the second application. In some embodiments the relevant parameters include a DI job schedule a view status a query log a DI job type a duration an execution time a user credential a user access modifiers a frequency of execution and an output format. In some embodiments the integration module transforms the request for remotely monitoring or scheduling a DI job from a first enterprise application into one or more XML messages by the first enterprise application suitable for accessing a second enterprise application where the DI job is executed in at the DI server at the request of the second enterprise application. In some embodiments the integration module serves as a client and the listener agent serves as a server coupled to the one or more DI job control APIs.

The following detailed description is made with reference to the figures. Embodiments of the invention described herein do not to limit its scope which is defined by the claims. Those of ordinary skill in the art will recognize a variety of equivalent variations on the description that follows.

Generally the embodiments of the invention set out below discloses a method and a system for remotely monitoring or scheduling data integration DI jobs in an enterprise application. The method employs available DI job control application programming interfaces APIs for facilitating better workflow management between the different enterprise applications. The method and system provide an extensible embeddable client interface for the enterprise application along with a listener agent coupled to one or more data integration servers. The client interface communicates a request for remotely monitoring or scheduling DI jobs to at least one of the data integration servers that services the request by employing the DI job control APIs. This measure enables robust integration and extension of existing DI job control APIs each conventionally employed only by particular enterprise applications to all other enterprise applications.

The enterprise applications can include applications such as an enterprise resource planning ERP application A for managing resources inventory and shipping a customer relationship management CRM application B for managing current and potential customers a mail server C a business intelligence BI application D for finding patterns from existing data and other such applications for managing enterprise data relating to human resources health care internal communications and so on. The enterprise applications can be deployed as computer programs software and firmware stored or running on a standalone or networked systems.

The integration unit provides one or more interfacing functions between the DI server and the enterprise applications . The DI environment can include separate integration units for each of the enterprise applications for interfacing with the DI server . For instance the integration unit can enable an enterprise application say the CRM application B to access data generated by a DI job in another enterprise application such as the BI application D. In order to provide a uniform interface the integration unit is customized for each of the enterprise applications . In some embodiments the DI environment can further include a framework as discussed in connection with for customizing and embedding the integration unit within each of the enterprise applications . Together the integration unit and the DI server ensure intelligent storage and access to the data generated by the different systems and applications thus enabling the enterprise to work as a cohesive unit.

In order to manage data in the enterprise applications the DI environment can include business intelligence tools to extract transform and load ETL data into data warehouses and to manage and retrieve metadata. These business intelligence tools collect data from various sources and then cleanse transform or otherwise manipulate the data and pass it to the enterprise applications in real time or batch mode. The extraction transformation and loading of data into various data sources involve a number of operational phases in which various DI Jobs identify and resolve inconsistencies in extracted data. Subsequently other DI jobs transform the data into customized formats to fit varied business requirements. These DI jobs can include one or more of a data extraction job a data transformation job a loading job data profiling job a mapping job a data auditing job a data cleansing job a data matching job a metadata management job or any other DI job as known in the art.

Some of the DI jobs store the data in data warehouses not shown in managed by the DI server for facilitating reporting and analysis functions. A data warehouse provides a common data model for all data of interest regardless of the data s source. Data warehouses also facilitate decision support system applications such as report generation which can generate trend reports e.g. the items with the most sales in a particular area within the last two years exception reports and reports that show actual performance versus goals. Data warehouses can work in conjunction with and thus enhance the value of business processes notably the CRM application B. Data warehousing technology is well known in the art and numerous implementations are available from suppliers such as ORACLE Corporation and others.

Owing to differences in structures and data handling and storage techniques different enterprise applications require one or more customizations in associated integration modules. The integration modules can further include customizations for fulfilling specific user requirements. To that end the first application includes an integration module for facilitating communication with the listener agent . In some embodiments the integration module can include customizations to provide options for searching for various DI jobs in the enterprise while in other embodiments the integration module may enable addition of available hosts e.g. clusters supercomputers workstations grids and so on . Alternatively the integration module can also query some or all enterprise systems periodically for adding applications and DI processes for remote management.

The integration module receives a request from the first application and subsequently transforms the request into one or more customized commands the customized commands adhering to standard communication protocols or including customized eXtensible Markup Language XML messages. The listener agent and the integration module operate in a tightly coupled client server paradigm and communicate with each other through these customized commands. The customized commands can include one or more parameters characteristic of one or more of the DI job such as job identifier or job type the first application and the second application .

The listener agent extracts relevant parameters from the customized commands and communicates the request to one or more enterprise servers such as the DI server through the job control APIs . The DI server in turn employs the job control APIs associated with the second application to facilitate monitoring or scheduling of DI jobs. In some embodiments the listener agent can invoke a relevant API that the DI server can utilize for remotely accessing information from a particular enterprise application. The job control APIs provide an interface that includes a set of functions procedures or classes to support requests received from the listener agent and the DI server . The job control APIs can further include a commonly used library of functions used by various enterprise applications and systems.

Because the job control APIs facilitate access to different enterprise applications users across the enterprise such as process architects data stewards and managers can access the data generated in one enterprise application from any another enterprise application. For instance a manager may want to manage process control activities such as running a DI job retrieving a DI job state and querying or searching logs in other enterprise applications from the first application . To provide such functionality the integration module can be integrated with the user interface UI of the first application . In one embodiment the integration module can include customizable indicators and thresholds to provide a high level view further including an ability to drill down to individual DI jobs. A user can employ tools provided by the integration module to schedule trigger or monitor a DI job in the second application and further for configuring DI jobs in a workspace using drag and drop drop down menus command lines or other common interface components. The integration module can also enable the user to request running of DI jobs and summarizing status of all requested calculations in one window.

For configuring DI jobs the integration module can provide a variety of options such as icons to select and configure parameters relating to one or more data sources applications and the DI jobs. The integration module can further provide options to associate specific functions and other relationships among the data sources applications and the DI jobs. For instance the user can select relevant icons provided by the integration module to configure one or more parameters of the DI job such as job identifier job type identifiers related to the second application output format duration and so on. The integration module may also provide options to request for monitoring or scheduling DI jobs according to time based or event based schedules while also supporting a number of batch systems and interactive runs. Once the user configures the various parameters the integration module customizes the request including all selected parameters into a predefined format recognized by the listener agent for further processing. In some embodiments the predefined format includes a customized set of commands that negotiates communication between the listener agent and the integration module .

For clarity the description of and included in the following sections will refer to the implementations of

At step the integration module receives a request from the first application . The user can select the DI job to be monitored and other associated parameters such as the second application target application at which the DI job is to be scheduled or monitored scheduled time of monitoring number of jobs output format etc.

Step relates to transforming the request into one or more of the relevant customized commands or XML messages. The integration module analyzes the request and the associated parameters subsequently transforming the request into the appropriate customized commands. The integration module sends the customized commands or the XML messages to the listener agent at step . In some embodiments the customized commands or the XML messages may be queued until a specified time or until the listener agent can further process these commands. The listener agent parses through the customized commands or the XML messages to interpret and extract relevant information relating to the request. The relevant information can include information relating to the DI job to be monitored access restrictions related to the user the target application .e.g. the second application and any other relevant parameters.

At step the listener agent invokes one of the relevant job control APIs to communicate the request to the DI server based on extracted information. The job control APIs can include interfaces and a common library of functions to facilitate access to enterprise applications deployed on disparate platforms or using different data sources or protocols.

The DI server fetches requested information from the second application by employing the associated job control APIs at step . The requested information can include one or more parameters related to the DI job such as execution time and data volumes number of batches run success and failure rates warnings and so on. At step the listener agent transmits the requested information to the first application as output. In some embodiments the listener agent may queue the output. The integration module retrieves and customizes the output to a presentation format required by the first application or as requested by the user.

At step the integration module receives the user s request and one or more associated parameters such as the target application identifier scheduled time of monitoring number of jobs and output format. The integration module transforms the request into one or more customized commands or XML messages at step . Subsequently the integration module sends the customized commands or XML messages to the listener agent at step .

The listener agent receives the customized commands or XML messages and extracts relevant parameters for identifying one or more of the relevant job control APIs . The listener agent at step invokes the relevant job control APIs to access the DI server and communicate the request. The DI server subsequently executes the DI job by employing the job control APIs associated with the second application at step . In one embodiment the listener agent can transmit an acknowledgement of initialization or termination of the DI job from the second application to the first application . The listener agent thus by employing the job control APIs and the DI server extends the ability of remotely executing a DI job in one enterprise application to all other enterprise applications.

An enterprise DI environment can include a framework for providing the first application with the integration module adhering to a specified set of specifications. In one embodiment the framework can be implemented as a J2EE JAVA Platform Enterprise Edition application providing various functionalities including a unified security model and transaction control mechanisms. The framework provides an extensible and reusable architecture for integration modules that can be used for further customization across all enterprise applications. All integration modules derived from the framework conform to at least the specified set of specifications to communicate with the listener agent by employing specified formats commands and protocols. The framework enables design development and deployment of the customized integration modules as embeddable client plugins on each enterprise application. The framework can also enable users to add one or more functionalities or components for further customizing the integration modules based on the users specific requirements. For instance the framework can provide the first application with the integration module serving as an embedded client in communication with the listener agent serving as a server in the DI environment.

A user can request for remote monitoring or scheduling of DI jobs through the integration module which in some embodiments can be integrated with the user interface of the first application . The integration module provides selectable interfaces to configure the DI job and one or more associated parameters such as scheduled time output format notifications etc. The integration module can further include selectable options for generating notifications periodically or when the DI job changes status. In another embodiment for remotely scheduling or scheduling DI jobs in batch mode the integration module can provide options to allow the user to receive notifications through email a popup or a dialog box when one or more jobs finish.

Once the user configures the request the integration module customizes the request into a format fit for processing by the listener agent . To that end the integration module processes the request user credentials selected options and the other associated parameters related to the DI job or target applications. The integration module in some embodiments can append relevant parameters to the user request for remote monitoring or scheduling of DI jobs. These relevant parameters enable the user to remotely login search retrieve logs schedule or execute DI jobs in the second application . Subsequently the integration module transforms the request including all relevant parameters into customized commands adhering to a custom protocol that can be processed by the listener agent . In some embodiments standard protocols such as Uni casting or remote method invocation RMI facilitate communication between the listener agent and the integration module . Other embodiments employ the custom protocol including one or more customized commands or XML messages supported by both the listener agent and the integration module . The customized commands or XML messages can include requests for authenticating a particular client session enabling querying of DI jobs retrieving logs of DI jobs in the second application and so on. In some embodiments the integration module transmits the customized commands or XML messages to the listener agent using the custom protocol or stores in a request queue for later processing.

The listener agent processes the request and extracts relevant information related to user access requested DI job and the second application . A command interpreter or an XML handler aids the listener agent in interpreting and extracting relevant parameters from the customized commands or XML messages . The parameters can include the DI job identifier such as the DI job schedule view status query log the DI job type duration or execution time user credentials user access modifiers frequency of execution output format and any other related parameters. Based on these extracted parameters the listener agent invokes one or more of the appropriate job control APIs for accessing the DI server that manages the DI job for servicing the request.

In order to access the DI job the DI server employs the available job control APIs associated with the second application to facilitate login search or execution access to the DI job. Once the DI job is executing the DI server fetches requested information related to the DI job from the second application . The requested information can include an acknowledgement of initialization or termination of the DI job the DI job status volume of jobs finished resource utilization and other such details. The DI server subsequently transmits the requested information to the listener agent . Alternately once the DI job is executed the listener agent fetches relevant output relating to the DI job from the DI server through the job control APIs and transmits the output back to the first application through a response queue .

The listener agent can transmit the requested information to the integration module continuously periodically or once the DI job terminates and in one or more formats. This measure enables monitoring or scheduling the DI job from the first application at different levels. In some embodiments the listener agent may transform the information to be transmitted into the customized commands or XML messages .

Upon receiving the customized commands or XML messages or the requested information the integration module interprets and customizes the requested information for user review. The integration module customizes the requested information to a default format suitable for the first application or to a format requested by the user. In some embodiments the integration module can provide a minimized summary window of the requested information say only showing job totals for each remote machine. For example an output of a request for monitoring DI jobs executing in a SAP application can be viewed from a chat client window. The window can expand to reveal full details of running jobs. This measure makes it very easy to monitor changes in the DI environment without a remote activity window taking up much of the screen space. The method thus can be extended to include the DI job and process integration for other enterprise applications like COGNOS HYPERION or other production systems by employing the job control APIs associated with these applications.

The method uses publicly available APIs and enables tight coupling of the integration module to the listener agent thus enabling even upgraded DI jobs to be remotely monitored and scheduled without changing any implementation details. The claimed system provides a unique platform for leveraging remote monitoring and scheduling ability of one application to all other applications thus providing for a more robust monitoring and scheduling of DI processes in the enterprise.

The methods and depict an exemplary sequence of operations that can be implemented in hardware software or a combination thereof. The order in which the methods are described is not intended to be construed as a limitation and any number of the described blocks can be combined in any order to implement the method or an alternate method. Additionally individual blocks may be deleted from the method without departing from the spirit and scope of the subject matter described herein.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

