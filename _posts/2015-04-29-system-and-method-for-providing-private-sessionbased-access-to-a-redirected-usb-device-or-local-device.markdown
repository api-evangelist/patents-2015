---

title: System and method for providing private session-based access to a redirected USB device or local device
abstract: Restricting access to a device from a server, where the device is remote to the server and is connected locally to a client that is remote to the server, is described. The operations may include facilitating interception, at the server, of a function call to create a symbolic link; facilitating determination that the intercepted function call to create the symbolic link corresponds to a device object associated with the device that is remote to the server and is connected locally to a client that is remote to the server; facilitating obtaining configuration data indicating whether access to the device is to be restricted; and facilitating creation of the symbolic link in a local namespace of an object manager namespace of the server, upon obtaining configuration data indicating that access to the device is to be restricted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09319452&OS=09319452&RS=09319452
owner: Wyse Technology L.L.C.
number: 09319452
owner_city: San Jose
owner_country: US
publication_date: 20150429
---
This application is a continuation of pending U.S. patent application Ser. No. 14 044 474 filed Oct. 2 2013 which is a continuation of U.S. patent application Ser. No. 13 287 982 filed Nov. 2 2011 now U.S. Pat. No. 8 555 409 issued Oct. 8 2013 the contents of which are incorporated herewith in its entirety by reference.

The subject technology relates in general to remote computing and more particularly to providing private session based access to a redirected USB device or local device.

One approach to the design and implementation of computer networks particularly with regard to the development of client server applications includes designing client applications and client terminals so that the majority of the heavily used resources are at a remote computing machine such as a centralized server connected via network. The client terminals generally have minimal memory disk storage and processor power but are designed under the premise that most users connected to a powerful server do not need the additional processing power. With these client terminals the total cost of ownership is minimized because of the reduced resources and because the clients can be centrally administered and updated from the server. As such these client terminals are suited for a network which can handle a significant number of terminals. If the client terminals have devices attached to them then when the client terminals are connected to the server not only the client terminals but also the client terminals devices can become available to the server.

In one aspect of the disclosure a method for restricting access to a device from a server may comprise facilitating interception at the server of a function call to create a symbolic link facilitating determination that the intercepted function call to create the symbolic link corresponds to a device object associated with the device that is remote to the server and is connected locally to a client that is remote to the server facilitating obtaining configuration data indicating whether access to the device is to be restricted and facilitating creation of the symbolic link in a local namespace of an object manager namespace of the server upon obtaining configuration data indicating that access to the device is to be restricted.

In one aspect of the disclosure a machine readable storage medium may be encoded with instructions executable by one or more processors to perform one or more operations. The one or more operations may comprise facilitating interception at a server of a function call to create a symbolic link facilitating determination that the intercepted function call to create the symbolic link corresponds to a device object associated with a device that is remote to the server and is connected locally to a client that is remote to the server facilitating obtaining configuration data indicating whether access to the device is to be restricted and facilitating creation of the symbolic link in a local namespace of an object manager namespace of the server upon obtaining configuration data indicating that access to the device is to be restricted.

In one aspect of the disclosure a hardware apparatus may comprise one or more modules configured to perform one or more operations comprising facilitating interception at a server of a function call to create a symbolic link facilitating determination that the intercepted function call to create the symbolic link corresponds to a device object associated with a device that is remote to the server and is connected locally to a client that is remote to the server facilitating obtaining configuration data indicating whether access to the device is to be restricted and facilitating creation of the symbolic link in a local namespace of an object manager namespace of the server upon obtaining configuration data indicating that access to the device is to be restricted.

In one aspect of the disclosure an apparatus may comprise means for facilitating interception at a server of a function call to create a symbolic link means for facilitating determination that the intercepted function call to create the symbolic link corresponds to a device object associated with a device that is remote to the server and is connected locally to a client that is remote to the server means for facilitating obtaining configuration data indicating whether access to the device is to be restricted and means for facilitating creation of the symbolic link in a local namespace of an object manager namespace of the server upon obtaining configuration data indicating that access to the device is to be restricted.

It is understood that various configurations of the subject technology will become readily apparent to those skilled in the art from the disclosure wherein various configurations of the subject technology are shown and described by way of illustration. As will be realized the subject technology is capable of other and different configurations and its several details are capable of modification in various other respects all without departing from the scope of the subject technology. Accordingly the summary drawings and detailed description are to be regarded as illustrative in nature and not as restrictive.

The detailed description set forth below is intended as a description of various configurations of the subject technology and is not intended to represent the only configurations in which the subject technology may be practiced. The appended drawings are incorporated herein and constitute a part of the detailed description. The detailed description includes specific details for the purpose of providing a thorough understanding of the subject technology. However it will be apparent to those skilled in the art that the subject technology may be practiced without these specific details. In some instances well known structures and components are shown in block diagram form in order to avoid obscuring the concepts of the subject technology. Like components are labeled with identical element numbers for ease of understanding.

Frequently devices connected to client terminals client side devices are virtualized on a server to provide access to the devices from user sessions on the server. The virtualized devices or redirected devices however are accessible from a large number of user sessions and or client terminals. For example in an office environment multiple user sessions and or clients may be connected to a server on which the device is virtualized or redirected and all of the multiple user sessions and or clients connected to the server may have access to the device. A user s virtualized device connected to the user s client terminal may thus be subject to unwanted or unauthorized access or use by other users sessions and or from other users clients. A need therefore exists for systems and methods that allow access to virtualized devices to be restricted such that secure and private access to such devices can be provided from selected user sessions while access from other user sessions can be blocked.

In one aspect the client terminal may represent a computer a mobile phone e.g. smart phone a laptop computer a thin client terminal a personal digital assistant PDA a portable computing terminal or a suitable terminal or device with a processor. In one aspect a server may represent a computer a laptop computer a computing terminal a virtual machine e.g. VMware Virtual Machine a desktop session e.g. Microsoft Terminal Server a published application e.g. Microsoft Terminal Server or a suitable terminal with a processor.

In one aspect the client may initiate a remote session with the server by sending a request for remote access and credentials e.g. login name and password to the server . If the server accepts the credentials from the client then the server may establish a remote session which allows a user at the client to access applications and data at the server . During the remote session the server sends display data to the client over the network which may include display data of a desktop and or one or more applications running on the server . The desktop may include for example icons corresponding to different applications that can be launched on the server . The display data allows the client to locally display the desktop and or application running on the server .

During the remote session the client may send user commands e.g. inputted via a mouse or keyboard at the client to the server over the network . The server may process the user commands from the client similar to user commands received from an input device that is local to the server . For example if the user commands include mouse movements then the server may move a pointer on the desktop running on the server accordingly. When the display data of the desktop and or application changes in response to the user commands the server sends the updated display data to the client . The client locally displays the updated display data so that the user at the client can view changes at the server in response to the user commands. Together these aspects allow the user at the client to locally view and input commands to the desktop and or application that is running remotely on the server . From the perspective of the client side the desktop running on the server may represent a virtual desktop environment.

According to the illustrated configuration while the device is not locally or physically connected to the server and is remote to the server the device appears to the server as if it is locally connected to the server as discussed further below. Thus the device appears to the server as a virtual device .

By way of illustration and not limitation the device may be a machine readable storage medium e.g. flash storage device a printer a scanner a camera a facsimile machine a phone an audio device e.g. a headset a video device e.g. a camera a peripheral device or other suitable device that can be connected to the client . The device may be an external device i.e. external to the client or an internal device i.e. internal to the client .

In one aspect of the disclosure the device is a Universal Serial Bus USB device that can be locally connected to the client using a wired USB or wireless USB connection and communicates with the client according to a USB communications protocol. In another aspect the device may be a device other than a USB device.

As used herein a local device of a system or a device locally connected to a system may be a device directly connected to the system using one or more wires or connectors e.g. physically connected to the system or a device directly connected to the system using a wireless link e.g. Bluetooth . For example device is a local device of client . Furthermore in one aspect of the disclosure a local device of a system or a device locally connected to a system may include a device within the system e.g. an internal device of client .

A remote device or a device remote to a system may be a device that is not directly connected to the system. For example the server is remote to both client and device because server is not directly connected to client or device but connected indirectly through network illustrated in which can include for example another server or the Internet.

The bus driver can be configured to allow the operating system and programs of the client to interact with the device . In one aspect when the device is connected to the client e.g. plugged into a port of the client the bus driver may detect the presence of the device and read information regarding the device device information from the device . The device information may include features characteristics and other information specific to the device. For an example of a USB device the device information may comprise a device descriptor e.g. product ID vendor ID and or other information a configuration descriptor an interface descriptor an endpoint descriptor and or a string descriptor. The bus driver may communicate with the device through a computer bus or other wired or wireless communications interface.

In one aspect a program e.g. application running locally on the client may access the device . For example the device may be accessed locally when the client is not connected to the server . In this aspect the operating system e.g. Microsoft Window of the client may use the device information to find and load an appropriate device driver not shown for the device . The device driver may provide the program with a high level interface to the device .

In one aspect the device may be accessed from the server as if the device were connected locally to the server . The device may be accessed from the server when the client is connected to the server through a user session running on the server . For example the device may be accessible from the desktop running on the server i.e. virtual desktop environment . In this aspect the bus driver may be configured to load the stub driver as the default driver for the device . The stub driver may be configured to report the presence of the device to the proxy and to provide the device information e.g. device descriptor to the proxy .

The proxy may be configured to report the presence of the device along with the device information to the agent of the server over the network illustrated in . Thus the stub driver redirects the device to the server via the proxy .

The agent may be configured to receive the report from the proxy that the device is connected to the client and the device information. The agent may further be configured to associate with the report from the proxy one or more identifiers for the client and or for a user session through which the client is connected to the server such as a session number or a session local unit identifier LUID . The agent can provide notification of the device along with the device information to the virtual bus driver . The virtual bus driver which may be a TCX USB bus driver or any other bus driver may be configured to create and store in memory a record corresponding to the device the record including at least part of the device information and session identifiers received from agent . The virtual bus driver may be configured to report to the operating system or to a kernel of the operating system of the server that the device is connected and to provide the device information to the operating system. This allows the operating system of the server to recognize the presence of the device even though the device is connected to the client .

The operating system of the server may use the device information to find and load one or more appropriate device drivers for the device at the server . Each driver may have an associated device object object s . . . referred to generally as device object s as illustratively shown in . A device object is a software implementation of a real device or a virtualized or conceptual device . Different device objects layer over each other to provide the complete functionality. In an example a device such as a USB flash drive may have associated device objects including objects corresponding to a USB driver a storage driver a volume manager driver and a file system driver for the device. The device objects corresponding to a same device form a layered device stack for the device . For example for a USB device a USB bus driver will create a device object stating that a new device has been plugged in. Next a plug and play PNP component of the operating system kernel e.g. Windows kernel will search for and load the best driver for the device which will create another device object that is layered over the previous device object . The layering of device objects will create the device stack .

The device objects may be stored in a memory of the server associated with the bus driver . In particular the device objects and resulting device stack may be stored in random access memory of the server . Different devices can have device stacks having different device objects and different numbers of device objects. The device stack may be ordered such that lower level device objects corresponding to lower level device drivers have lower numbers than higher level device objects corresponding to higher level device drivers . The device stack may be traversed downwards by traversing the stack from higher level objects to lower level objects. For example in the case of an illustrative device stack corresponding to a USB flash drive the ordered device stack may be traversed downwards from a high level file system driver device object to a volume manager driver device object to a storage driver device object to a USB driver device object and finally to a low level virtual bus driver device object. Different device stacks can be layered over each other to provide the functionality of the devices inside devices like USB Headset or USB pen drive. A USB pen drive for example can create an USB device stack first over which it can create a storage device stack where each of the device stacks have two or more device objects.

Once one or more device object s are loaded by the operating system of the server each device object can create a symbolic link also referred to as a device interface to the device object and associated driver. The symbolic link is used by applications running on the server to access the device object and the device . The symbolic link can be created by a call to a function such as IOCreateSymbolicLink including such arguments as a name for the symbolic link and a name of the device object or associated device . In one example for example a symbolic link to a USB flash drive device is created by a call from a device object for the device to the function IOCreateSymbolicLink including arguments GLOBAL C i.e. the name for the symbolic link and Device HarddiskVolume1 i.e. a name of the device object .

A device interface is similar to a symbolic link and the terms are used interchangeably herein. In Windows based operating systems a device interface may be a symbolic link for which the name is chosen by Windows based on device type. The creation or registration of a device interface can use the same application program interfaces APIs as those used in the creation of symbolic links.

The creation of a symbolic link results in an entry being created in an object manager namespace OMN described in more detail in relation to below of the operating system . The OMN stores information on symbolic links created for and used by the operating system including symbolic links for devices virtualized devices and applications running on the server .

As a result of the symbolic link creation process a symbolic link to the device is enumerated in the OMN of the server . Once the presence of the device is reported to the operating system of the server the device may be accessible from a user session and associated desktop running on the server i.e. virtual desktop environment . For example the device may appear as an icon on the virtual desktop environment and or may be accessed by applications running on the server .

In one aspect an application running on the server may access the device by sending a transaction request including the symbolic link for the device to the operating system . The operating system may consult the Object Manager Namespace to retrieve an address or other identifier for the device itself or for a device object associated with the device . Using the retrieved address or identifier the operating system forwards the transaction request for the device either directly through a device object of the device stack and or through the virtual bus driver . The virtual bus driver may direct the transaction request to the agent which sends the transaction request to the proxy over the network . The proxy receives the transaction request from the agent and directs the received transaction request to the stub driver . The stub driver then directs the transaction request to the device through the bus driver .

The bus driver receives the result of the transaction request from the device and sends the result of the transaction request to the stub driver . The stub driver directs the result of the transaction request to the proxy which sends the result of the transaction request to the agent over the network . The agent directs the result of the transaction request to the virtual bus driver . The virtual bus driver then directs the result of the transaction request to the application either directly or through a device object of the device stack .

Thus the virtual bus driver may receive transaction requests for the device from the application and send results of the transaction requests back to the application either directly or through a device object of the device stack . As such the application may interact with the virtual bus driver in the same way as with a bus driver for a device that is connected locally to the server . The virtual bus driver may hide the fact that it sends transaction requests to the agent and receives the results of the transaction requests from the agent instead of a device that is connected locally to the server . As a result the device connected to the client may appear to the application as if the physical device is connected locally to the server .

The Object Manager Namespace OMN stores information on symbolic links created for use by the operating system including symbolic links for devices and for applications running on the server . The Object Manager Namespace generally includes several different namespaces for storing symbolic link information for applications and devices. For example the Object Manager Namespace can include namespaces such as a Global namespace used to store symbolic link information for devices and applications that are shared by all user sessions running on the server various Local namespaces each associated with a user session running on the server used to store information for applications used by and restricted to the associated user session and a Device namespace used to store symbolic link information on devices and virtual devices accessible by the server .

As described herein symbolic links can be of two types global or local. Global symbolic links may be available to the entire system i.e. to all user sessions running on server while local symbolic links may only be seen and accessed by the session for which they are created. For example GLOBAL c may be a symbolic link to a device identified as Device HarddiskVolume1 . Because c is a symbolic link in the global namespace directory such a symbolic link may be accessed by the entire system including all the users logged in through their respective user sessions.

In certain operating systems such as the Windows operating system the creation of the symbolic link for a device results in an entry being created in a Global namespace of the Object Manager Namespace. Because the symbolic link is created in the Global namespace the symbolic link can be access from any user session running on server . As a result the device associated with the symbolic link can be accessed from any user session on the server and or from any client terminal having an active user session on server .

As described in relation to above each device can be virtualized on the server to provide access to the device from a user session on the server through a corresponding virtual device . For example when device is connected to client terminal drivers for device may be loaded in operating system of server the device may be virtualized on server as virtual device and a symbolic link to the device may be created in the Object Manager Namespace of operating system . Once the symbolic link is created a user of client terminal may be able to access device through a user session on server . Similarly when device is connected to client terminal a symbolic link to the device may be created in the Object Manager Namespace of operating system of server . Once the symbolic link is created a user of client terminal may be able to access device through a user session on server .

The symbolic links to the devices are created in a Global namespace of the Object Manager Namespace of operating system . As a result the symbolic links and associated devices can be accessed from and used by any user session running on server . For example as illustratively shown in a user of client terminal having a user session on server may access both device as well as virtual device from the user session. Similarly a user of client terminal having a user session on server may access both device as well as virtual device from the user session. Finally a user of client terminal having a user session on server may access both virtual device and from the user session.

Hence the device virtualization described in relation to provides unrestricted access to devices connected locally to client terminals from any user session on server . As such a redirected device on a terminal server becomes a local device to the server and can be accessed by all the users sessions connected to that server. For example a printer or a mass storage device when redirected by one user connected through a session on the server will show up as a local device and all the users can read write the mass storage device and print using the printer.

While the unrestricted access enables users of client terminals to share access to and use of devices the device virtualization does not permit a user to restrict access to a device . In this respect the unrestricted device virtualization does not permit secure or private access to the device . The device virtualization thus presents security and privacy concerns as a device may be accessed or used by any number of unauthorized users having user sessions on server . In order to address these security and privacy concerns a device virtualization system may require that a device connected through a session only be accessible in that session.

In order to enable restricting access to a device in a local device virtualization system an enhanced server system is represented in . is a block diagram of a system according to the disclosure. The system may include a client in communication with a server over network illustrated in . The client including proxy stub driver bus driver and one or more optional device s is substantially similar to the client shown in and described in relation to . The server includes agent virtual bus driver device stack including device objects . . . operating system application and one or more optional virtualized device s which function substantially similarly to the corresponding elements of server of . Server additionally includes a Device Access Restriction Module DARM in the communication path between device stack and operating system .

Server functions substantially similarly to server described in relation to in terms of loading drivers and device objects for device on the server. However the similarities in functioning between servers and do not extend to the symbolic link creation process. DARM of server is configured to intercept function calls for creating symbolic links on server and to block the creation by operating system of symbolic links for devices that are virtualized on virtual bus driver . DARM can thus restrict a redirected device to be only accessible from the user session e.g. a Microsoft windows terminal server session it is redirected from. DARM functions independently of the particular remote session protocol used in communications between client and server e.g. RDP or ICA or any other .

When a device object issues a call to the symbolic link creation function e.g. a call to the function IOCreateSymbolicLink the call is intercepted and redirected to the DARM instead of invoking the symbolic link creation module of the operating system . As a result of the redirection the symbolic link creation process that is generally undertaken by a module of the operating system may not be performed. Instead DARM may perform an alternate symbolic creation process.

Upon receiving the redirected call to the symbolic link creation function DARM determines whether the symbolic link creation call is for a device object . If the call does not relate to a device object DARM may forward the call to the symbolic link creation module of operating system and the symbolic link creation module of the operating system may create a symbolic link. For example a call for creating a symbolic link to an application running on the server may be a call that does not relate to a device object and such a call may be forwarded to the symbolic link creation module of operating system for creation of a symbolic link as described above in relation to .

If the call relates to symbolic link creation for a device object. DARM may traverse the device stack in order to identify the bus driver that the target device s device stack is associated with. A server can include multiple bus driver including for example one or more of a USB bus driver a PCMCIA bus driver a COM bus driver or the like. The server also includes virtual bus driver . If DARM determines that the device stack for the target device is not associated with virtual bus driver DARM may forward the call to the symbolic link creation module of operating system and the symbolic link creation module of the operating system may create a symbolic link. However if DARM determines that the device stack is associated with virtual bus driver DARM obtains device configuration data for the target device and create a symbolic link for the target device based on the device configuration data. If the device configuration data indicates that the device should be local or restricted for example a local symbolic link can be created in one or more local namespaces of the Object Manager Namespace. However if the device configuration data indicates that the device should be shared a global symbolic link can be created in the Object Manager Namespace.

Hence DARM enables symbolic links for devices to be selectively created in global or local namespaces of the Object Manager Namespace. Devices having symbolic links created in the Global namespace will be accessible from any user session running on server . However devices having symbolic links created in local namespaces will only be accessible from user sessions associated with the corresponding local namespaces. As such privacy and security of devices can be provided.

In one aspect a Microsoft terminal server technology and license can provide a way for many users to connect to the same server using the same user account or different user accounts. A device can be redirected to a terminal server where many users may be connected. The device may only be accessible from the terminal session it got redirected from. All the other user sessions may be able to see the presence of the device using some tools but may not be able to access the device. The DARM may thus keep the device access restricted to a session which is redirected on the terminal server and may thus only allow the access to the device to the terminal server session from which it is redirected. The session level restriction can enable the device to be accessed by the tools and processes which are executing in the same session and or using windows supported interface to devices from the same session. From other users sessions however the device may not be accessible to the tools or processes using the Windows supported interfaces to device. By restricting access to the device such that access is only granted to the particular client session the device is physically connected to through DARM provides private session based access to the device. In addition by verifying the identity of a session seeking to access the device through the symbolic link and by blocking unauthorized access to the device from unauthorized or unassociated user sessions including both read access and write access DARM provides secure access to the device.

In the server is configured to provide restricted access to virtualized local devices. As such server includes a Device Access Restriction Module DARM for intercepting calls for creating symbolic links on server . When device is connected to client a corresponding virtualized device is created on server . The function call for creating a symbolic link to device however is intercepted by the DARM . DARM determines whether the symbolic link creation call is for a device object traverses the device stack to identify that the device object is associated with the virtual bus driver and obtains device configuration data for the target device. In the example of the device configuration data associated with device indicates that the device is a local device or a device to be restricted. A symbolic link for device is therefore created by DARM in a local namespace associated with the user session of client terminal in the OMN of server . Because the symbolic link is created in a local namespace associated with the user session of client terminal device is only accessible from client terminal

When device is connected to client terminal a corresponding virtualized device is created on server . As in the case of device described above the function call for creating a symbolic link to device is intercepted by the DARM . The device configuration data associated with device however may indicate that the device is a global device. A symbolic link for device is therefore created in a global namespace of server . Because the symbolic link is created in a global namespace device is not only accessible from a user session running on client terminal but is also accessible as a virtual device from user sessions on client terminals and

Method begins with operation in which a symbolic link creation process is hooked on the server . Function calls to a symbolic link creation function such as call to a IOCreateSymbolicLink function are generally by default directed to a symbolic link creation module of an operating system running on server . However the hooking operation results in function calls to the symbolic link creation function being redirected to or intercepted by a Device Access Restriction Module DARM of server . As a result once the hooking operation is successfully completed functions calls to IOCreateSymbolicLink are intercepted and redirected to a symbolic link creation module of the DARM . In a server having a system service description table such as SSDT for example the hooking operation may include modifying an entry in the SSDT associated with a symbolic link creation function such as entry . In particular the hooking operation can include changing the address stored in entry from an original address pointing to the symbolic link creation module of the operating system or pointing to a location in memory storing instructions to perform operations of the symbolic link creation module of the operating system to a new address pointing to the symbolic link creation module of the DARM or pointing to a location in memory storing instructions to perform operations of the symbolic link creation module of the DARM . In addition the hooking operation can also include recording in a memory accessible by DARM the original address stored in entry to enable DARM to make functions calls to the symbolic link creation module of the operating system .

Once the hooking is completed operation all function calls for symbolic link creation in server are intercepted and redirected to the symbolic link creation module of DARM . Operations may then be completed by various modules of the DARM . In operation one or more such symbolic link creation request s are intercepted and redirected to DARM . In general the symbolic link creation function call may include arguments such as a name for the symbolic link e.g. GLOBAL C and an object name associated with the symbolic link e.g. Device HarddiskVolume1 . The object name may be the name of a device object e.g. device object or of a device e.g. device or or the object name can refer to another type of object such as a section object an event object or the like. As part of the intercepting operation the arguments included as part of the original symbolic link creation function call are provided to the DARM .

In response to receiving an intercepted symbolic link creation request the DARM determines whether the request is for a device object in operation . The DARM may determine that the request is for a device object based on the name for the object i.e. the Object Name included as an argument as part of the symbolic link creation function call. In one example the DARM may search for the Object Name in the OMN and once a match with the name is located in the OMN determine whether the matching entry in the OMN is for a device object. The DARM may consult the Object Manager Namespace of the server use the Object Name to retrieve an entry in the namespace that is associated with the object and based on the retrieved entry determine whether or not the associated object is a device object. In general the DARM may determine that a request relating to an application and or associated with an application in the OMN for example is not for a device object. Similarly the DARM may determine that a request relating to a section object or to an event object is not for a device object. If the DARM determines that the request is for a device object operation proceeds to operation . However if the DARM determines that the request is not for a device object the DARM may forward the symbolic link creation request to the symbolic link creation module of the operating system e.g. by forwarding the request to the original address stored in entry for a symbolic link to be created according to the operating system s normal process.

In operation the DARM traverses the device stack associated with the device object to identify the bus driver on which the device stack is formed. The traversal of the device stack may involve identifying the driver having created the symbolic link creation request and identifying other drivers associated with the identified driver and or with the address identified in the request.

In one aspect the traversal of the device stack is performed downwards starting from the device object retrieved in the previous operation operation . The traversal is accompanied by checking whether the device stack ends at or includes a device object which is created by a driver of the virtual bus driver . The traversing down from the device object enables the DARM to check whether the device object corresponds to a device that is a redirected device by virtual bus driver . If the device is determined to be a redirected device the DARM also obtains a reference to the device which can be used in a following operation such as in operation . The traversal of the stack can be used to identify the first device object for a redirected device i.e. the device object that is created by the virtual bus or associated with a virtual bus driver because the first device object can include more details information and or data about the device.

In operation device configuration data for the device is obtained by the DARM . The device configuration data generally includes an indication of whether access to a device should be shared or restricted on server . The device configuration data can be obtained from the virtual bus driver . Alternatively the device configuration data may be obtained from a memory of the server from a user input of device configuration data or the like. In the case of user input configuration data the device configuration data can be input by a user of the client terminal having the device connected for example in response to a prompt being presented to the user at the time the device is connected to the client and asking the user for device configuration data to be provided. The obtained device configuration data may correspond to the particular device object e.g. device configuration data indicating that a particular device is to be shared or restricted to a type of the device object e.g. device configuration data indicating whether all storage devices all peripheral devices e.g. camera mouse etc. and or other types of device objects are to be shared or restricted to a particular user e.g. device configuration data indicating that devices connected to client terminals associated with particular user sessions are to be shared or restricted to particular types of users e.g. device configuration data indicating that access to the device from user sessions of users having administrator access privileges should not be restricted to default configuration data e.g. device configuration data indicating that all devices not having device specific configuration data are to be shared or restricted or other appropriate user data.

Once the device configuration data is obtained DARM checks whether the device s access is configured to be restricted to the user s session based on the obtained configuration data. If device access is to be restricted to the user s session DARM proceeds to operation . However if device access is not to be restricted e.g. if the configuration data indicates that access to the device is to be granted to all user sessions on server DARM may forward the symbolic link creation request to the symbolic link creation module of the operating system e.g. by forwarding the request to the original address stored in entry for an unrestricted symbolic link to be created according to the operating system s normal process. The device configuration data can be retrieved based on a device reference or other identifier for a device for a device type for a user session associated with the device or the like. If a device is determined to be configured to be restricted. DARM may retrieve device information including the session Local Unit Identifier LUID or session number of the session that the device is connected through so as to restrict access to the device such that only a session associated with the retrieved LUID or number may access the device.

In operation DARM creates a symbolic link that is local to the session associated with the device. Operation is performed when the device configuration data indicates that access to the device should be restricted so as to block the creation of an unrestricted or global symbolic link and enable creation of a session local symbolic link with the same name.

In order to create a local symbolic link DARM creates a symbolic link for the device in the local namespace e.g. local namespace of the object manager namespace of the operating system . In particular DARM creates a symbolic link associated with the particular session associated with the device such as the user session through which the device is connecting to the server . The particular session may correspond to the session LUID or session number identified in operation for example. As such. DARM avoids the creation of the symbolic link in the global namespace e.g. global namespace by changing the directory part in the requested Symbolic Link such that the symbolic link is created in a session local directory of the local namespace instead of being created in the global directory.

Following creation of the session local symbolic link the device operates as a session local device in operation . When operating system receives a request to access a device using a symbolic link the operating system determines a user session associated with the request e.g. by identifying a LUID or session number for the user session and retrieves the determined session s local namespace. The operating system then determines whether the symbolic link identified in the request is included in the determined session s local namespace. If the symbolic link is found in the determined session s local namespace the operating system may grant access to the device object associated with the symbolic link by forwarding the request to the device . If the symbolic link is not found in the session s local namespace the operating system can search the global namespace for the symbolic link. If the symbolic link is found in the global namespace the operating system may grant access to the device object associated with the symbolic link by forwarding the request to the device . If the symbolic link is neither found in the determined session s local namespace nor found in the global namespace the operating system returns an error message indicating that the symbolic link and or associated device is not present on the system.

In particular the operating system will generally not search for the symbolic link in other sessions local namespaces. As a result a device for which the symbolic link is created in one session s local namespace may be virtually invisible to all the other sessions. A request to access the device or the device s symbolic link from any session other than the one session can result in the operating system returning the same error message that the operating system returns when a device is not at all present on the system e.g. a device not found error message .

Method begins with operation in which a device operates as a session local device. Operation is substantially similar to operation described in relation to method and reference can therefore be made to the description of operation provided above in relation to method .

In operation a symbolic link deletion process is hooked on the server . The hooking process is substantially similar to the hooking process described in relation to operation above though hooking in operation is performed with respect to a symbolic link deletion or removal function such as call to a IODeleteSymbolicLink function . The hooking operation results in function calls to the symbolic link deletion function being redirected to or intercepted by the Device Access Restriction Module DARM of server . As a result once the hooking operation is successfully completed functions calls to IODeleteSymbolicLink are intercepted and redirected to a symbolic link deletion module of the DARM . In a server having a system service description table such as SSDT for example the hooking operation may include modifying an entry in the SSDT associated with a symbolic link deletion function such as entry . In particular the hooking operation can include changing the address of entry from an original address pointing to the symbolic link deletion module of the operating system or pointing to a location in memory storing instructions to perform operations of the symbolic link deletion module of the operating system to a new address pointing to the symbolic link deletion module of the DARM or pointing to a location in memory storing instructions to perform operations of the symbolic link deletion module of the DARM . In addition the hooking operation can also include recording in a memory accessible by DARM the original address stored in entry to enable DARM to make functions calls to the symbolic link deletion module of the operating system .

While operation is shown in as occurring after operation the order of the operations may be modified. For example operation may take place before operation for example by taking place at substantially the same time as operation of method .

Operations may take place at any time after operations and have been completed. In the flow diagram of method for example operation may take place after operation . In operation one or more such symbolic link deletion request s are intercepted and redirected to DARM . In general the symbolic link deletion function call may include argument s such as a name for a symbolic link e.g. GLOBAL C . As part of the intercepting operation the argument s included as part or the original symbolic link deletion function call are provided to the DARM .

In operation the DARM determines whether the intercepted symbolic link deletion request is for a local symbolic link created by the DARM e.g. a symbolic link created as part of operation . The DARM can perform the determination by checking whether the symbolic link is included in either a global namespace e.g. global namespace or a local namespace e.g. local namespace of an object manager namespace . If the symbolic link is located in the global namespace the symbolic link is determined to be a global link. Conversely if the symbolic link is located in the local namespace the symbolic link is determined to be a local link. If the symbolic link is determined to be global the DARM may forward the symbolic link deletion request to the symbolic link deletion module of the operating system e.g. by forwarding the request to the original address stored in entry for the symbolic link to be deleted or removed according to the operating system s normal process. However if the symbolic link is determined to be local the DARM may proceed to operation .

In operation the local symbolic link is deleted. In particular the DARM may check the local namespace of the object manager namespace and clean up or remove all instances of the symbolic link from the local namespace. The DARM may perform the deletion removal and or clean up process to ensure that all instances are removed from the local namespace. In contrast a symbolic link deletion module of an operating system may only delete symbolic links from a global namespace of an object manager namespace and thereby fail to properly remove a local symbolic link.

The processes of methods and provide for symbolic links and device interfaces to be created by a device driver to provide user programs to the device. The symbolic links and device interfaces are generally kept in a Global directory GLOBAL of an object manager namespace to provide a system wide access to the devices from any user session on the server. DARM however checks the process of creation of symbolic links and device interfaces and restricts the device access to the session for which it is redirected based on the configuration data for the device. In particular DARM hooks the symbolic link creation and removal APIs and system calls which are used by the device drivers in operating systems such as Windows operating systems to create the symbolic links and device interfaces to redirected the APIs and system calls to the DARM. When a device is redirected an intercept or redirection module records the session number and or Session LUID which specifies from which session the system call got redirected from. The session information is saved with the rest of the device information in the virtual bus driver. When a new symbolic link or device interface is created for a new device object DARM can intercept it and can verify if the device object created by the driver is a device object mounted over a virtual bus either directly or indirectly. The verification is accomplished by parsing all the device objects until a device object corresponding to a virtual bus device object is reached or until the root bottom device is reached. If the virtual bus created device object is reached in the device stack DARM can collect more information about the device can check if the device is selected by the user not to be shared and can keep the access restricted to only a user s session. If the device object is identified to be one for which access is to be restricted the DARM can block the creation of the symbolic link requested by the driver and can instead create a local symbolic link for the session from which the device is redirected. DARM performs similar operations at the time of removal of the symbolic link or device interface so as to clean up the symbolic link and device interface created by the DARM in the local session directories. The processes of methods and thus provide examples of systems and methods for providing secure private session based access to devices such as USB devices and local devices.

Method begins with operation . The DARM hooks the symbolic link creation and removal or deletion application programming interfaces APIs and system calls in operation . In particular operation can include hooking or modifying the symbolic link creation and removal APIs and system calls in order to keep check on all new symbolic links or device interfaces being created. The hooking provides a comprehensive mechanism not to let any symbolic link or device interface getting created without check. In operation the DARM intercepts a symbolic link or device interface creation request and obtains the target name from the request. After the hooking operation is complete all symbolic link and device interface creation requests will come to the DARM first and will then be redirected based on the device. From the creation request the DARM can fetch the symbolic link directory and name to be created and a target name to which or for which the symbolic link is being created. DARM can thereby intercept and block the creation of a symbolic link until the device details are identified. DARM can also get the target name of the symbolic link which can be used to discover more details about the device.

The DARM can use the target name to determine the object associated with the request operation and determine whether the object is a device object operation . In particular DARM can identify the object from the target name and verify if the object is a device object. DARM may parse the object manager namespace and search for the object in the OMN. After the object is found the DARM can check if the object is a device object. DARM can get or retrieve or identify the device object for which the symbolic link is being created which can help in reaching or identifying the first device object created for the device . If the identified object is not a device object then the DARM may not need to do anything and can pass control of the symbolic link creation operation to the original function i.e. to the symbolic link creation function of the operating system. If the object is not a device object the symbolic link creation request is passed on to the original symbolic link creation function such as a symbolic link creation function implemented by the operating system operation .

However if the object is a device object the DARM traverses the device stacks downward one step at a time operation . At each step the DARM determines whether the driver for the current device in the stack is a virtual bus driver operation such as a TCX USB bus driver. If the driver for the current device is not a virtual bus driver DARM determines whether the current device is the lowest level device in the device stack i.e. the root device . If the lower most device in the stack is reached operation the DARM proceeds to operation . However if the current device is not the lowest device the DARM proceeds to operation to retrieve the next lower device from the stack. In operation if the driver for the current device is determined to be a virtual bus driver the DARM retrieves the configuration data for the device from the virtual bus driver operation and determines whether the device is to be restricted based on the configuration data operation . In the case of a device to be restricted the DARM blocks the requested symbolic link creation process and instead creates a session local symbolic link operation . In the case of a non restricted device the DARM passes the symbolic link creation request on to the original symbolic link creation function operation such as a symbolic link creation function implemented by the operating system. In the case that a session local symbolic link is created operation the DARM is further configured to intercept a symbolic link removal request for the local symbolic link and to do the proper clean up from the session local directory of an object manager namespace operation . Once either of operations or are completed operation ends operation .

The systems and methods described herein may additionally or alternatively be used to provide private session based access to local devices. In one aspect a device may be connected directly to a bus driver of a server such as server . In the example the device may be a USB device connected to a USB bus of the server a PCMCIA device connected to a PCMCIA bus of the server a COM device connected to a COM bus of the server or another appropriate type of local device that is locally connected to the server. A device stack including device objects having associated device drivers may be created for the device on the bus driver. A symbolic link creation process may be hooked by a DARM on the server such that a symbolic link creation request for the device is intercepted and redirected to the DARM. The DARM may determine that the request is for a device object may traverse the device stack to identify the bus driver and may obtain device configuration data for the device. If the DARM is configured to create symbolic links for devices connected to the bus driver having the local device and if the configuration data indicates that access to the device should be restricted to one or more sessions the DARM may create one or more local symbolic links for the device in the appropriate local namespaces of the server s object manager namespace. Once created the local symbolic link may restrict access to the local device from only those user sessions associated with the symbolic link in the object manager namespace. In one example access to a device locally connected to the server may be restricted such that the device may be accessed from only certain user sessions and from only certain client terminals connected through those user sessions on the server.

The system includes a processing system . The processing system is capable of communication with a receiver and a transmitter through a bus or other structures or devices. It should be understood that communication means other than busses can be utilized with the disclosed configurations. The processing system can generate audio video multimedia and or other types of data to be provided to the transmitter for communication. In addition audio video multimedia and or other types of data can be received at the receiver and processed by the processing system .

The processing system may include a general purpose processor or a specific purpose processor for executing instructions and may further include a machine readable medium such as a volatile or non volatile memory for storing data and or instructions for software programs. The instructions which may be stored in a machine readable medium and or may be executed by the processing system to control and manage access to the various networks as well as provide other communication and processing functions. The instructions may also include instructions executed by the processing system for various user interface devices such as a display and a keypad . For the example of a client the display may be used to locally display the virtual desktop environment at the client and the keypad may be used to receive user input command which may be forwarded to the server over the network . The processing system may include an input port and an output port . Each of the input port and the output port may include one or more ports. The input port and the output port may be the same port e.g. a bi directional port or may be different ports.

The processing system may be implemented using software hardware or a combination of both. By way of example the processing system may be implemented with one or more processors. A processor may be a general purpose microprocessor a microcontroller a Digital Signal Processor DSP an Application Specific Integrated Circuit ASIC a Field Programmable Gate Array FPGA a Programmable Logic Device PLD a controller a state machine gated logic discrete hardware components or any other suitable device that can perform calculations or other manipulations of information.

A machine readable medium can be one or more machine readable media. Software shall be construed broadly to mean instructions data or any combination thereof whether referred to as software firmware middleware microcode hardware description language or otherwise. Instructions may include code e.g. in source code format binary code format executable code format or any other suitable format of code .

Machine readable media e.g. may include storage integrated into a processing system such as might be the case with an ASIC. Machine readable media e.g. may also include storage external to a processing system such as a Random Access Memory RAM a flash memory a Read Only Memory ROM a Programmable Read Only Memory PROM an Erasable PROM EPROM registers a hard disk a removable disk a CD ROM a DVD or any other suitable storage device. In addition machine readable media may include a transmission line or a carrier wave that encodes a data signal. Those skilled in the art will recognize how best to implement the described functionality for the processing system . According to one aspect of the disclosure a machine readable medium is a computer readable medium encoded or stored with instructions and is a computing element which defines structural and functional interrelationships between the instructions and the rest of the system which permit the instructions functionality to be realized. Instructions may be executable for example by a client terminal or server or by a processing system of a client terminal or server. Instructions can be for example a computer program including code.

A network interface may be any type of interface to a network e.g. an Internet network interface and may reside between any of the components shown in . For the example of a client the network interface may be used to send user commands and responses from the device to the server over the network and to receive display data e.g. display data for the virtual desktop and instructions e.g. string descriptor requests from the server over the network .

A device interface may be any type of interface to a device and may reside between any of the components shown in . A device interface may for example be an interface to an external device e.g. USB device that plugs into a port e.g. USB port of the system . For the example of a client the bus driver may be configured to detect the presence of a device connected to the client via the device interface and to read device information e.g. device descriptor from the device via the device interface to identify the device .

A transceiver block may represent one or more transceivers and each transceiver may include a receiver and a transmitter . A functionality implemented in a processing system may be implemented in a portion of a receiver a portion of a transmitter a portion of a machine readable medium a portion of a display a portion of a keypad or a portion of an interface and vice versa.

For the example of a client the bus driver may be implemented by the processing system the device interface the machine readable medium or any combination thereof and the proxy may be implemented by the processing system the network interface the machine readable medium or any combination thereof. The stub driver may be implemented by the processing system the machine readable medium or any combination thereof. For example the machine readable medium may comprise software programs that may be executed by the processing system to realize various functions of the bus driver stub driver and the proxy .

For the example of a server the virtual bus driver device stack DARM and application may be implemented by the processing system the machine readable medium or any combination thereof and the agent may be implemented by the network interface the processing system the machine readable medium or any combination thereof.

In a preferred embodiment the modules e.g. through are implemented in hardware using software e.g. a machine readable medium comprising subroutines or code . In another embodiment some or all of the modules may be implemented in hardware e.g. an Application Specific Integrated Circuit ASIC a Field Programmable Gate Array FPGA a Programmable Logic Device PLD a controller a state machine gated logic discrete hardware components or any other suitable devices and or a combination of both. Additional features and functions of these modules according to various aspects of the present disclosure are further described in the disclosure.

The various modules may perform various functions described in relation to above. For example hook module may perform some or all of operations and intercept module may perform some or all of operations and device identification module may perform some or all of operations and stack traverse module may perform some or all of operations and device configuration module may perform some or all of operations and local link creation module may perform some or all of operations and and local link deletion module may perform some or all of operations and . The link creation module may perform some or all of operations and and link removal module may perform some or all of operations and . The operating system module may perform some or all of operations or other operations described herein as being performed by operating system or a module thereof.

Illustration of Method Machine Readable Storage Medium Apparatus Proving Private Session Based Access to a Redirected Device Wherein the Device is Connected Locally to a Client and the Server is Remote to the Client and the Device Described as Clauses 

Various examples of aspects of the subject technology are described as numbered clauses 1 2 3 etc. for convenience. These are provided as examples and do not limit the subject technology. Identifications of the figures and reference numbers are provided below merely as examples and for illustrative purposes and the clauses are not limited by those identifications.

facilitating determination that the intercepted function call to create the symbolic link corresponds to a device object associated with the device that is remote to the server and is connected locally to a client that is remote to the server see e.g. A in 

facilitating obtaining configuration data indicating whether access to the device is to be restricted see e.g. A in and

facilitating creation of the symbolic link in a local namespace of an object manager namespace of the server upon obtaining configuration data indicating that access to the device is to be restricted see e.g. A in .

3. The method according to clause 1 wherein the facilitating creation of the symbolic link comprises facilitating creation of the symbolic link in a local namespace associated with the client s user session on the server the client having the device locally connected.

facilitating modification of a system service description table SSDT of the server to redirect function calls to create symbolic links to an intercept module and

facilitating determination that the intercepted function call to create the symbolic link corresponds to the device object 

facilitating traversal of a device stack associated with the device object to identify a lowest bus driver associated with the device object and

facilitating determination that the device object is associated with the device that is remote to the server and is connected locally to the client that is remote to the server based on the identification of the bus driver.

facilitating retrieving configuration data associated with the device from a storage device of the server.

facilitating receiving configuration data associated with the device object from a user session of the client having the device connected locally.

facilitating providing secure session based access to the device using the symbolic link created in the local namespace of the object manager namespace of the server.

9. The method according to clause 1 wherein the facilitating creation of the symbolic link comprises facilitating creation of the symbolic link in a local namespace associated with a first user session the method further comprising 

facilitating receiving at the server a request including the created symbolic link from a second user session 

facilitating determining whether the created symbolic link is in a local namespace associated with the second user session or in a global namespace and

facilitating blocking the received request upon determining that the created symbolic link is not in the local namespace associated with the second user session and not in the global namespace.

facilitating determining that the function call to delete the symbolic link corresponds to a symbolic link in the local namespace of the object manager namespace of the server and

facilitating deletion of the symbolic link from the local namespace of the object manager namespace of the server.

12. A machine readable storage medium see e.g. B in encoded with instructions executable by one or more processors to perform one or more operations the one or more operations comprising 

facilitating determination that the intercepted function call to create the symbolic link corresponds to a device object associated with a device that is remote to the server and is connected locally to a client that is remote to the server see e.g. B in 

facilitating obtaining configuration data indicating whether access to the device is to be restricted see e.g. B in and

facilitating creation of the symbolic link in a local namespace of an object manager namespace of the server upon obtaining configuration data indicating that access to the device is to be restricted see e.g. B in .

14. The machine readable storage medium according to clause 12 wherein the facilitating creation of the symbolic link comprises facilitating creation of the symbolic link in a local namespace associated with the client s user session on the server the client having the device locally connected.

15. The machine readable storage medium according to clause 12 wherein the facilitating interception comprises 

facilitating modification of a system service description table SSDT of the server to redirect function calls to create symbolic links to an intercept module and

16. The machine readable storage medium according to clause 12 wherein the facilitating determination comprises 

facilitating determination that the intercepted function call to create the symbolic link corresponds to the device object 

facilitating traversal of a device stack associated with the device object to identify a lowest bus driver associated with the device object and

facilitating determination that the device object is associated with the device that is remote to the server and is connected locally to the client that is remote to the server based on the identification of the bus driver.

17. The machine readable storage medium according to clause 12 wherein the facilitating obtaining configuration data comprises 

facilitating retrieving configuration data associated with the device from a storage device of the server.

18. The machine readable storage medium according to clause 12 wherein the facilitating obtaining configuration data comprises 

facilitating receiving configuration data associated with the device object from a user session of the client having the device connected locally.

19. The machine readable storage medium according to clause 12 wherein the one or more operations further comprise 

facilitating providing secure session based access to the device using the symbolic link created in the local namespace of the object manager namespace of the server.

20. The machine readable storage medium according to clause 12 wherein the facilitating creation of the symbolic link comprises facilitating creation of the symbolic link in a local namespace associated with a first user session and wherein the one or more operations further comprise 

facilitating receiving at the server a request including the created symbolic link from a second user session 

facilitating determining whether the created symbolic link is in a local namespace associated with the second user session or in a global namespace and

facilitating blocking the received request upon determining that the created symbolic link is not in the local namespace associated with the second user session and not in the global namespace.

21. The machine readable storage medium according to clause 12 wherein the one or more operations further comprise 

22. The machine readable storage medium according to clause 21 wherein the facilitating deletion comprises 

facilitating determining that the function call to delete the symbolic link corresponds to a symbolic link in the local namespace of the object manager namespace of the server and

facilitating deletion of the symbolic link from the local namespace of the object manager namespace of the server.

25. The hardware apparatus according to clause 23 wherein the facilitating creation of the symbolic link comprises facilitating creation of the symbolic link in a local namespace associated with the client s user session on the server the client having the device locally connected.

facilitating modification of a system service description table SSDT of the server to redirect function calls to create symbolic links to an intercept module and

facilitating determination that the intercepted function call to create the symbolic link corresponds to the device object 

facilitating traversal of a device stack associated with the device object to identify a lowest bus driver associated with the device object and

facilitating determination that the device object is associated with the device that is remote to the server and is connected locally to the client that is remote to the server based on the identification of the bus driver.

28. The hardware apparatus according to clause 23 wherein the facilitating obtaining configuration data comprises 

facilitating retrieving configuration data associated with the device from a storage device of the server.

29. The hardware apparatus according to clause 23 wherein the facilitating obtaining configuration data comprises 

facilitating receiving configuration data associated with the device object from a user session of the client having the device connected locally.

30. The hardware apparatus according to clause 23 wherein the one or more operations further comprise 

facilitating providing secure session based access to the device using the symbolic link created in the local namespace of the object manager namespace of the server.

31. The hardware apparatus according to clause 23 wherein the facilitating creation of the symbolic link comprises facilitating creation of the symbolic link in a local namespace associated with a first user session and wherein the one or more operations further comprise 

facilitating receiving at the server a request including the created symbolic link from a second user session 

facilitating determining whether the created symbolic link is in a local namespace associated with the second user session or in a global namespace and

facilitating blocking the received request upon determining that the created symbolic link is not in the local namespace associated with the second user session and not in the global namespace.

32. The hardware apparatus according to clause 23 wherein the one or more operations further comprise 

facilitating determining that the function call to delete the symbolic link corresponds to a symbolic link in the local namespace of the object manager namespace of the server and

facilitating deletion of the symbolic link from the local namespace of the object manager namespace of the server.

means for facilitating interception at a server of a function call to create a symbolic link see e.g. C in 

means for facilitating determination that the intercepted function call to create the symbolic link corresponds to a device object associated with a device that is remote to the server and is connected locally to a client that is remote to the server see e.g. C in 

means for facilitating obtaining configuration data indicating whether access to the device is to be restricted see e.g. C in and

means for facilitating creation of the symbolic link in a local namespace of an object manager namespace of the server upon obtaining configuration data indicating that access to the device is to be restricted see e.g. C in .

36. The apparatus according to clause 34 wherein the means for facilitating creation of the symbolic link comprises means for facilitating creation of the symbolic link in a local namespace associated with the client s user session on the server the client having the device locally connected.

means for facilitating modification of a system service description table SSDT of the server to redirect function calls to create symbolic links to an intercept module and

means for facilitating redirection of a function call to create the symbolic link to the intercept module.

means for facilitating determination that the intercepted function call to create the symbolic link corresponds to the device object 

means for facilitating traversal of a device stack associated with the device object to identify a lowest bus driver associated with the device object and

means for facilitating determination that the device object is associated with the device that is remote to the server and is connected locally to the client that is remote to the server based on the identification of the bus driver.

39. The apparatus according to clause 34 wherein the means for facilitating obtaining configuration data comprises 

means for facilitating retrieving configuration data associated with the device from a storage device of the server.

40. The apparatus according to clause 34 wherein the means for facilitating obtaining configuration data comprises 

means for facilitating receiving configuration data associated with the device object from a user session of the client having the device connected locally.

means for facilitating providing secure session based access to the device using the symbolic link created in the local namespace of the object manager namespace of the server.

42. The apparatus according to clause 34 wherein the means for facilitating creation of the symbolic link comprises means for facilitating creation of the symbolic link in a local namespace associated with a first user session the apparatus further comprising 

means for facilitating receiving at the server a request including the created symbolic link from a second user session 

means for facilitating determining whether the created symbolic link is in a local namespace associated with the second user session or in a global namespace and

means for facilitating blocking the received request upon determining that the created symbolic link is not in the local namespace associated with the second user session and not in the global namespace.

means for facilitating deletion of the symbolic link from the object manager namespace of the server.

means for facilitating determining that the function call to delete the symbolic link corresponds to a symbolic link in the local namespace of the object manager namespace of the server and

means for facilitating deletion of the symbolic link from the local namespace of the object manager namespace of the server.

In one aspect any of the clauses herein may depend from any one of the independent clauses or any one of the dependent clauses. In one aspect any of the clauses e.g. dependent or independent clauses may be combined with any other clauses e.g. dependent or independent clauses . In one aspect a claim may include some or all of the words e.g. steps operations means or components recited in a clause a sentence a phrase or a paragraph. In one aspect a claim may include some or all of the words recited in one or more clauses sentences phrases or paragraphs. In one aspect some of the words in each of the clauses sentences phrases or paragraphs may be removed. In one aspect additional words or elements may be added to a clause a sentence a phrase or a paragraph. In one aspect the subject technology may be implemented without utilizing some of the components elements functions or operations described herein. In one aspect the subject technology may be implemented utilizing additional components elements functions or operations.

In one aspect any methods instructions code means logic components blocks modules and the like e.g. software or hardware described or claimed herein can be represented in drawings e.g. flow charts block diagrams such drawings regardless of whether explicitly shown or not are expressly incorporated herein by reference and such drawings if not yet explicitly shown can be added to the disclosure without constituting new matter. For brevity some but not necessarily all of the clauses descriptions claims are explicitly represented in drawings but any of the clauses descriptions claims can be represented in drawings in a manner similar to those drawings explicitly shown. For example a flow chart can be drawn for any of the clauses sentences or claims for a method such that each operation or step is connected to the next operation or step by an arrow. In another example a block diagram can be drawn for any of the clauses sentences or claims having means for elements e.g. means for performing an action such that each means for element can be represented as a module for element e.g. a module for performing an action .

Those of skill in the art would appreciate that items such as the various illustrative blocks modules elements components methods operations steps and algorithms described herein e.g. client server and the components therein may be implemented as hardware computer software or a combination of both.

To illustrate the interchangeability of hardware and software items such as the various illustrative blocks modules elements components methods operations steps and algorithms have been described generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application.

In one aspect means a block a module an element a component or a processor may be an item e.g. one or more of blocks modules elements components or processors for performing one or more functions or operations. In one aspect such an item may be an apparatus hardware or a portion thereof. In one example an item may have a structure in the form of for example an instruction s for performing the function s or operation s where the instruction s are encoded or stored on a machine readable medium on another device or on a portion thereof where an instruction s may be software an application s a subroutine s or a portion thereof. In an example an item may be implemented as one or more circuits configured to perform the function s or operation s . A circuit may include one or more circuits and or logic. A circuit may be analog and or digital. A circuit may be electrical and or optical. A circuit may include transistors. In an example one or more items may be implemented as a processing system e.g. a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA etc. . Those skilled in the art will recognize how to implement the instructions circuits and processing systems.

A reference to an element in the singular is not intended to mean one and only one unless specifically so stated but rather one or more. For example a client may refer to one or more clients a server may refer to one or more servers an operation may refer to one or more operations and a signal message or communication may refer to one or more signals messages or communications.

Unless specifically stated otherwise the term some refers to one or more. Pronouns in the masculine e.g. his include the feminine and neuter gender e.g. her and its and vice versa. Headings and subheadings if any are used for convenience only and do not limit the invention.

The word exemplary is used herein to mean serving as an example or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs. In one aspect various alternative configurations and operations described herein may be considered to be at least equivalent.

A phrase such as an aspect does not imply that such aspect is essential to the subject technology or that such aspect applies to all configurations of the subject technology. A disclosure relating to an aspect may apply to all configurations or one or more configurations. An aspect may provide one or more examples. A phrase such as an aspect may refer to one or more aspects and vice versa. A phrase such as an embodiment does not imply that such embodiment is essential to the subject technology or that such embodiment applies to all configurations of the subject technology. A disclosure relating to an embodiment may apply to all embodiments or one or more embodiments. An embodiment may provide one or more examples. A phrase such an embodiment may refer to one or more embodiments and vice versa. A phrase such as a configuration does not imply that such configuration is essential to the subject technology or that such configuration applies to all configurations of the subject technology. A disclosure relating to a configuration may apply to all configurations or one or more configurations. A configuration may provide one or more examples. A phrase such a configuration may refer to one or more configurations and vice versa.

In one aspect of the disclosure when actions or functions are described as being performed by an item e.g. hooking modifying intercepting redirecting determining traversing obtaining creating operating deleting removing receiving providing generating converting displaying notifying accepting selecting controlling transmitting reporting sending or any other action or function it is understood that such actions or functions may be performed by the item directly or indirectly. In one aspect when a module is described as performing an action the module may be understood to perform the action directly. In one aspect when a module is described as performing an action the module may be understood to perform the action indirectly for example by facilitating enabling or causing such an action.

In one aspect unless otherwise stated all measurements values ratings positions magnitudes sizes and other specifications that are set forth in this specification including in the claims that follow are approximate not exact. In one aspect they are intended to have a reasonable range that is consistent with the functions to which they relate and with what is customary in the art to which they pertain.

In one aspect the term coupled or the like may refer to being directly coupled. In another aspect the term coupled or the like may refer to being indirectly coupled.

Various items may be arranged differently e.g. arranged in a different order or partitioned in a different way all without departing from the scope of the subject technology. In one aspect of the disclosure the elements recited in the accompanying claims may be performed by one or more modules or sub modules. For example a local link creation module and a local link deletion module may be combined into one module. A hook module and an intercept module may be combined into one module. A device identification module and a stack traverse module may be combined into one module. In another example these modules may be divided into a larger number of modules.

It is understood that the specific order or hierarchy of steps operations or processes disclosed is an illustration of exemplary approaches. Based upon design preferences it is understood that the specific order or hierarchy of steps operations or processes may be rearranged. Some of the steps operations or processes may be performed simultaneously. Some or all of the steps operations or processes may be performed automatically without the intervention of a user. The accompanying method claims if any present elements of the various steps operations or processes in a sample order and are not meant to be limited to the specific order or hierarchy presented.

The disclosure is provided to enable any person skilled in the art to practice the various aspects described herein. The disclosure provides various examples of the subject technology and the subject technology is not limited to these examples. Various modifications to these aspects will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other aspects.

All structural and functional equivalents to the elements of the various aspects described throughout this disclosure that are known or later come to be known to those of ordinary skill in the art are expressly incorporated herein by reference and are intended to be encompassed by the claims. Moreover nothing disclosed herein is intended to be dedicated to the public regardless of whether such disclosure is explicitly recited in the claims. No claim element is to be construed under the provisions of 35 U.S.C. 112 sixth paragraph unless the element is expressly recited using the phrase means for or in the case of a method claim the element is recited using the phrase step for. Furthermore to the extent that the term include. have or the like is used such term is intended to be inclusive in a manner similar to the term comprise as comprise is interpreted when employed as a transitional word in a claim.

The Title Background Summary Brief Description of the Drawings and Abstract of the disclosure are hereby incorporated into the disclosure and are provided as illustrative examples of the disclosure not as restrictive descriptions. It is submitted with the understanding that they will not be used to limit the scope or meaning of the claims. In addition in the Detailed Description it can be seen that the description provides illustrative examples and the various features are grouped together in various embodiments for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed subject matter requires more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed configuration or operation. The following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separately claimed subject matter.

The claims are not intended to be limited to the aspects described herein but is to be accorded the full scope consistent with the language claims and to encompass all legal equivalents. Notwithstanding none of the claims are intended to embrace subject matter that fails to satisfy the requirement of 35 U.S.C. 101 102 or 103 nor should they be interpreted in such a way. Any unintended embracement of such subject matter is hereby disclaimed.

