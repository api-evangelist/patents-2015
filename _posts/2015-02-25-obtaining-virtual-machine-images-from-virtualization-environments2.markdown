---

title: Obtaining virtual machine images from virtualization environments
abstract: Techniques are described for facilitating sharing and reuse of executable software images between multiple execution environments. In at least some situations, the executable software images are virtual machine images (e.g., images that are bootable or otherwise loadable by a virtual machine in a particular virtualization environment, and that each include operating system software and/or software for one or more application programs, optionally along with one or more hard disks or other representations of stored data). The described techniques may include use of an image conversion tool that is configured to support interactions with multiple distinct types of source execution environments to extract executable software images from those environments, and to modify extracted software images for execution in one or more distinct types of destination execution environments, optionally as directed by one or more users via a GUI provided by the image conversion tool.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09558024&OS=09558024&RS=09558024
owner: Amazon Technologies, Inc.
number: 09558024
owner_city: Reno
owner_country: US
publication_date: 20150225
---
The advent of virtualization technologies for commodity hardware has provided benefits for many customers with diverse needs allowing various computing resources to be efficiently and securely shared between multiple customers. For example virtualization environments such as those provided by VMWare XEN Hyper V and User Mode Linux may allow a single physical computing machine to be shared among multiple users by providing each user with one or more virtual machines hosted by the single physical computing machine. Each such virtual machine may be a software simulation acting as a distinct logical computing system that provides users with the illusion that they are the sole operators and administrators of a given hardware computing resource while also providing application isolation and security among the various virtual machines. Furthermore some virtualization technologies are capable of providing virtual resources that span one or more physical resources such as a single virtual machine with multiple virtual processors that actually spans multiple distinct physical computing systems. However each virtualization environment typically operates using data formats and interfaces specific to that virtualization environment inhibiting interoperability between virtualization environments.

Techniques are described for facilitating sharing and reuse of executable software images between multiple execution environments. The described techniques include use of an image conversion tool in at least some embodiments such as an image conversion tool that is configured to support interactions with multiple distinct types of source execution environments to extract executable software images from those source execution environments and to modify extracted software images for execution in one or more distinct types of destination execution environments. In at least some such embodiments the image conversion tool may provide a GUI graphical user interface via which one or more users of the image conversion tool specify and configure particular types of operations to be performed. In at least some embodiments the executable software images are virtual machine images e.g. images that are bootable or otherwise loadable by a virtual machine in a particular source virtualization environment and that each include operating system software and or software for one or more application programs optionally along with one or more hard disks or other representations of stored data . Additional details related to sharing and reuse of executable software images are included below and the described techniques are automatically performed in at least some embodiments by one or more image conversion tools.

The described techniques may be provided in a variety of manners in various environments and situations. For example some software execution environments may provide one or more executing pieces of software that provide defined APIs application programming interfaces or other defined interfaces and the image conversion tool may programmatically invoke or otherwise access such provided interfaces e.g. over one or more intervening connections or networks including to initiate the providing by the software execution environment of data corresponding to a particular software image of interest. In addition some software execution environments may store data corresponding to some or all software images in a manner that is remotely accessible and with the data in a format that may be manipulated by the image conversion tool and if so the image conversion tool may programmatically access and retrieve such data for a software image of interest. Other types of interactions may be performed between the image conversion tool and a software execution environment in other embodiments in order to extract data corresponding to a software image of interest e.g. by executing software of the image conversion tool within a virtual machine or other execution environment of the software execution environment . In addition in some embodiments and situations the image conversion tool may receive data corresponding to a software image of interest in other manners such as if a user uploads that data directly to the image conversion tool e.g. after the user obtains the data from a particular execution environment .

In addition a particular image conversion tool may be designed and or configured to support particular source execution environments in various manners such as by storing configuration information that is specific to each source execution environment. In at least some embodiments the image conversion tool may further be designed with an architecture that enables support for additional execution environments to be later added to the image conversion tool such as by providing a standardized group of types of interactions that may be performed with execution environments and then storing information specific to each execution environment to indicate which types of interactions are available and the details of how they are performed in a manner specific to that execution environment. In some such embodiments the configuration information specific to a particular software execution environment may be provided in whole or in part in a module specific to that software execution environment such as in a plug in module that is added to the image conversion tool or accessed by the image conversion tool after the image conversion tool creation is completed.

After the data corresponding to a software image is obtained by the image conversion tool the image conversion tool may modify or otherwise manipulate the data in various manners in order to prepare it to be executed in one or more distinct destination execution environments. The image conversion tool may further provide the data for the software image for use in a destination execution environment in various manners including by transmitting the data over one or more connections or networks to the destination execution environment. Non exclusive examples of types of data manipulations of a software image may include changing a data format in which the data is stored adding additional data e.g. to correspond to one or more software libraries or drivers or other programs that are available for execution or other use while the software image is executing changing references within the software image to how and where data for use by the software image is stored combining or separating the data into different sizes or configurations supported by the destination execution environment compressing the data encrypting the data etc.

The use of the described techniques provides a variety of benefits in various embodiments. For example by enabling a user to direct an image conversion tool to interact with and extract executable virtual machine images from any of multiple distinct types of source virtualization environments the user may consolidate use of multiple distinct types of virtual machine images in a single destination virtualization environment without losing time and effort involved in creating the various virtual machine images. Furthermore in at least some such embodiments and situations some or all of the various source virtual machine images may be modified in various manners that are supported by the destination virtualization environment including to optionally standardize aspects of the various source virtual machine images and or to add new capabilities available in the destination virtualization environment that were not previously available or used in source virtualization environments from which the source virtual machine images are extracted.

Various types of virtualization environments and other software image execution environments may be supported in various embodiments. A non exclusive list of examples of such software image execution environments include those provided by or with VMWare Server VMWare Workstation XenServer Hyper V Server VirtualBox KVM Kernel based Virtual Machine User Mode Linux OpenVZ Open Virtualization etc. In addition virtual machine images and other software images executable by or otherwise supported by such software image execution environments may store different types of programs and or non executable data in various manners.

For illustrative purposes some embodiments are described below in which specific types of operations are performed and specific types of data used including to interact with virtualization environments to extract modify and execute virtual machine images. These examples are provided for illustrative purposes and are simplified for the sake of brevity and the inventive techniques may be used in a wide variety of other situations some of which are discussed below.

In particular in the illustrated embodiment the user has access to one or more virtual machine images that execute as part of a source virtualization environment A . For example in some such situations the user may execute the virtualization environment A on one or more computing systems not shown that are under control of the user such as may be executing at a facility or location of the user or the user may instead interact with the virtualization environment A over one or more intervening networks not shown .

In the illustrated example the user desires to convert at least one of the virtual machine images from source virtualization environment A to enable the converted virtual machine image to be executed in a distinct destination execution environment with the destination execution environment being of a different type of virtualization environment than that of source virtualization environment A in this example. Accordingly in this example the user obtains access to e.g. downloads a copy of the virtual machine image conversion tool for use in the virtual machine image conversion process. The user may for example execute the image conversion tool on one or more computing systems not shown that are local to the virtualization environment A such as at the same facility or other location e.g. on a common local area network including in some embodiments and situations to optionally execute the conversion tool on one or more computing systems that are part of the virtualization environment A . In other embodiments the conversion tool may execute remotely from the virtualization environment A such as over one or more public networks.

In the illustrated embodiment the image conversion tool supports interactions with multiple distinct types of source virtualization environments from which virtual machine images or other software images may be extracted so that the extracted software images may be manipulated to enable their execution in a distinct destination execution environment. For example the image conversion tool may be designed and or configured to support a fixed number and type of source virtualization environments or may instead have an architecture that enables configuration information specific to a particular source virtualization environment to be provided to the image conversion tool after its initial creation. In the illustrated embodiment the image conversion tool may support multiple plug in modules that each provides an interface to one of multiple distinct types of source virtualization environments.

Accordingly in the illustrated example the user performs one or more interactions with GUI of the image conversion tool . Such interactions may include for example identifying a specific source virtualization environment with which the image conversion tool will interact specifying a particular source image to be extracted from a source virtualization environment and providing configuration information to control the manipulation and provision of the extracted image for a particular destination execution environment.

In this example the interactions of the user with the GUI include the user identifying source virtualization environment A and accordingly the image conversion tool selects a module specific to that source virtualization environment. The image conversion tool then uses the selected module to perform one or more interactions with the virtualization environment A such as in some embodiments to interact with a manager module of the source virtualization environment to obtain data for at least one virtual machine image that is executing in the source virtualization environment or stored in or accessible to the source virtualization environment. For example the manager module may provide one or more APIs not shown that enable programmatic interactions between the module and the manager module while in other embodiments the interactions may include the image conversion tool interacting directly with stored data corresponding to a particular virtual machine image of interest. For example each virtual machine image may include one or more hard disks that store data representing the virtual machine image and such hard disk data may be persistently stored on non volatile storage accessible to the virtualization environment A e.g. on one or more local physical hard disks of one or more computing systems executing the virtualization environment A while the virtual machine image is not executing. Thus the interactions may instead in some embodiments and situations interact directly with one or more non volatile storage devices or a storage manager interface to such devices in order to obtain access to stored data for such hard disks.

The data corresponding to a particular virtual machine image that is extracted from the source virtualization environment A may have various forms in various embodiments such as one or more streams of raw data one or more streams of compressed data one or more downloadable pieces of data e.g. files etc. In some source virtualization environments the hard disk data may be stored in a standardized format for that source virtualization environment which the corresponding interface module may access and download. Such data formats may include for example VHD Virtual Hard Disk VMDK Virtual Machine Disk VDI Virtual Disk Image OVF Open Virtualization Format etc.

After the data corresponding to a particular virtual machine image is extracted via the interactions the image conversion tool performs one or more modifications or other manipulations of the extracted data in order to prepare it for a distinct virtualization environment available in the destination execution environment . For example the data manipulations of the data for the virtual machine image may include changing a data format in which the data is stored adding additional data e.g. to correspond to one or more software libraries or drivers or other programs that are available for execution or other use while the virtual machine image is executing changing references within the virtual machine image to how and where data for use by the virtual machine image is stored etc. While not illustrated in the image conversion tool may store copies of some or all virtual machine images that it handles whether temporarily while the processing is performed or more permanently e.g. until the user indicates that processing of the virtual machine image is done . Such stored copies may correspond to the virtual machine image data before during and or after its manipulation and may be stored local to the image conversion tool or on one or more remote storage devices.

After the extracted data for a particular virtual machine image is prepared for the destination execution environment an interface specific to the destination environment is used to perform one or more interactions with the destination execution environment to provide the modified data of the virtual machine image to the destination execution environment to enable the virtual machine image to be executed by the destination execution environment based on the modified data. In the illustrated embodiment the interactions occur over one or more networks although in other embodiments the image conversion tool may execute locally to a particular destination execution environment e.g. within that destination execution environment or otherwise as part of the capabilities provided by that destination execution environment . The interactions may in this example involve interacting with a manager module at the destination execution environment such as to interact with one or more APIs provided by the manager module.

After the modified data for the virtual machine image is provided to the destination execution environment the data may be stored as part of a virtual machine image in the destination execution environment such as to correspond to one or more hard disks that represent the virtual machine image. While not illustrated in this example in other embodiments the interactions may include providing the modified data for the virtual machine image in other manners such as to instead store the modified data in a separate storage service that is distinct from but accessible to the destination execution environment to provide a copy of the modified data to the user e.g. on a transportable computer readable storage medium etc. In addition in this example the image conversion tool interacts directly with the destination execution environment although in other embodiments the image conversion tool may instead first interact with one or more optional modules such as if functionality of the image conversion tool is in some embodiments separated into multiple modules such as one module local to the source virtualization environment and another module local to the destination execution environment. If so the module may perform some or all of the interactions with the destination execution environment that occur in a manner specific to that destination execution environment.

As previously noted the image conversion tool may in at least some embodiments and situations be configured to support interactions with multiple different types of source virtualization environments. Thus in the illustrated example the user or a different user not shown may perform additional interactions with the image conversion tool in order to similarly access and extract data for one or more virtual machine images or other software images from a distinct virtualization environment of a distinct type from that of the source virtualization environment A such as to interact with a distinct virtualization environment N . To do so the image conversion tool in the illustrated embodiment uses a distinct interface module that is configured to perform interactions in a manner specific to the source virtualization environment N by performing one or more interactions . In addition in this example the source virtualization environment N is remote from the image conversion tool and thus the interactions occur over one or more networks . It will be appreciated that other configurations of systems and corresponding interactions may be provided in other embodiments.

In particular in the example of after a user not shown interacts with a GUI provided by a module the GUI module perform one or more interactions with an image extractor module of the image conversion tool . In this example the image extractor module may for example control interactions with various source virtualization environments in a manner that is partially or wholly independent of the particular interaction techniques used by particular source virtualization environments. The image extractor module may further perform additional operations such as to provide information received from a source virtualization environment to the GUI to enable further user interactions and to initiate additional actions involving extracted data that is received from a source virtualization environment as discussed further below. In other embodiments directions may be provided to the image extractor module in other manners such as may be initiated by a user via programmatic interactions with the tool that do not use the GUI or via an automated determination by the tool that is not initiated by a user.

In this example the user has indicated to interact with the source virtualization environment A of and accordingly the interface plug in module of the image conversion tool is used by the image extractor module . Thus the image extractor module performs one or more interactions with the interface plug in module to initiate interactions with the source virtualization environment A in order to obtain corresponding information and to extract one or more virtual machine images as designated. For example the image extractor module may specify types of interactions to perform with the source virtualization environment A e.g. to obtain data about available virtual machine images or other software images to extract data for an indicated virtual machine image or other software image etc. and the module may implement those interaction types in a manner specific to the source virtualization environment A.

In the illustrated embodiment the source virtualization environment A of includes or is supported by one or more computing systems with an illustrated example computing system illustrated in . In this example the computing system may include one or more CPU processors various types of I O components memory and storage with additional details related to such hardware components discussed with respect to . In this example the computing system provides multiple virtual machines that are part of the memory such as with each virtual machine having a dedicated portion of memory for use in executing a virtual machine image. In addition the memory in this example executes a hypervisor monitor manager module that controls operations of the virtual machines .

In this example the manager module provides an API specific to the source virtualization environment A that enables programmatic interactions with the manager module by other executing programs although in other embodiments such an API may be provided for a source virtualization environment in other manners. Accordingly the interface plug in module of the image conversion tool may perform one or more interactions with the API of the manager module in order to obtain information about one or more of the virtual machine images being executed in one or more of the virtual machines or otherwise to obtain information about virtual machine images of the source virtualization environment e.g. that are registered or stored but not currently executing . In addition the interactions may include supplying user specific information to the source virtualization environment A such as after that information is received from the user of the image conversion tool to enable the source virtualization environment A to authenticate the user and or access information specific to the user. In some embodiments the manager module may obtain and provide data corresponding to one or more such virtual machine images such as data corresponding to a current state in memory of an executing virtual machine image.

In addition as previously noted at least some such virtual machine images that are executable by the source virtualization environment A may each include one or more hard disks that store data corresponding to the virtual machine image including to store such hard disk data on nonvolatile storage while the virtual machine image is not executing. In this example the storage of the computing system may include one or more such virtual machine hard disks although in other embodiments the hard disks may be stored remotely from the computing system on which the virtual machines execute. Accordingly in at least some embodiments and situations the interface plug in module may be able to perform interactions directly with the computing system to obtain access to one or much such hard disks from storage such as to download or otherwise obtain copies of one or more such hard disks . Such interactions may be performed instead of or in addition to interactions such as based on the types of interfaces available from a particular source virtualization environment and the types of interactions to be performed.

After the data corresponding to a particular source virtual machine image is obtained in this example by the interface plug in module from the computing system the data is received by the image extractor module from the interface plug in module. The image extractor module then provides the data via one or more interactions to an internal image data manipulator module of the image conversion tool . The image data manipulator module performs one or more modifications to the obtained data in order to prepare the data for execution in the destination execution environment as described in greater detail elsewhere including to use data not shown specific to the destination execution environment that is stored by or accessible to the image conversion tool such as to optionally add such data to the modified obtained data. The operations of the image data manipulator module may in some embodiments be directed at least in part based on configuration information specific to the destination execution environment such as to support an ability of the image conversion tool to modify data for multiple distinct destination execution environments in some such embodiments optionally by having distinct output interface modules specific to each such destination execution environment. In addition the operations of the image data manipulator module may be directed at least in part by the user in some embodiments and situations such as to control particular manipulations that are performed based on interactions of the user with the GUI and as provided to the image data manipulator module whether directly not shown or via the image extractor module .

In the illustrated embodiment after the image data manipulator module modifies the obtained data for the virtual machine image to correspond to the destination execution environment the module performs one or more interactions with the destination environment interface module of the image conversion tool which in this example initiates one or more interactions with the destination execution environment to provide the modified data to the destination execution environment for execution as part of the virtual machine image in the destination environment as described with respect to . The operations of the modules and or may further in some embodiments be directed based at least in part on other interactions by the user with the GUI such as to enable the user to specify configuration information for parameters related to execution of the virtual machine image in the destination execution environment. Such configuration information may include details related to how and when the destination execution environment will execute the virtual machine image including based on types of computing resources to be used to perform the execution an account of the user with the destination execution environment etc.

In at least some embodiments the image conversion tool may further perform activities to assist the user in identifying virtual machine images or other software images of source virtualization environments that are not eligible or available to be modified and executed in a particular destination execution environment. For example the image conversion tool may identify information within a particular software image that is not compatible with a particular destination execution environment such as by inspecting portions of the software image or its metadata and provide corresponding warnings or functionality to the user. Such information for a software image may include for example a particular operating system or other particular software program that is included or not included in the software image particular types of data formats particular software image sizes or data configurations etc.

In the illustrated embodiment the computing system s each includes one or more CPU processors various I O components storage and memory with the I O components including a display a network connection a computer readable media drive and other I O devices e.g. a keyboard mouse speakers etc. in other embodiments each computing may include additional hardware components and or lack some of the illustrated hardware components. The computing systems are each similarly illustrated as including one or more CPU processors various I O components storage and memory and the computing systems are each similarly illustrated as including one or more CPU processors various I O components storage and memory although particular I O components are not illustrated in this example.

In the illustrated embodiment the image conversion tool system executes in memory of a computing system such as to include software instructions that when executed by one or more CPU processors program or otherwise configure the computing system to perform automated operations to provide some or all of the described techniques. In addition in the illustrated embodiment one or more optional environment specific interface modules may also execute in memory such as to perform operations similar to those of interface modules of but in the illustrated embodiment may execute separately from the image conversion tool rather than being loaded within the image conversion tool. In other embodiments such modules may instead be implemented as part of the system or alternatively may execute on another computing system not shown and interact with the image conversion tool system over one or more networks .

The image conversion tool system interacts with one or more users not shown of the computing system to provide information about software image conversion activities and to receive corresponding instructions. In particular the system may interact with one or more multiple supported source execution environments that are provided by the computing systems in order to obtain data corresponding to one or more source software images such as by interacting with one or more manager modules executing in memory of each source execution environment to obtain data corresponding to software images and or by directly interacting with software images . While the various source execution environments are illustrated in this example as being separated from the system by one or more networks in other embodiments the system may execute locally to at least one of the source execution environments. After data is obtained for a source image the system may further modify that data in a manner specific to a particular destination execution environment and interact with one or more computing systems of that destination execution environment e.g. with one or more manager modules executing in memory to create a new corresponding software image that is executable within the destination execution environment. As part of the operation of the system it may store and use various environment specific configuration information e.g. as part of one or more plug in interface modules for the system and user information and may also optionally store copies of modified data for software images. Additional details related to operation of embodiments of an image conversion tool are described elsewhere herein.

It will be appreciated that computing systems and are merely illustrative and are not intended to limit the scope of embodiments of the present disclosure. The image conversion tool system may instead be executed by multiple interacting computing systems or devices and computing system s may be connected to other devices that are not illustrated including through one or more networks such as the Internet via the World Wide Web Web or other electronic communications network e.g. cellular based network public switched telephone network . More generally a client or server computing system may comprise any combination of hardware and or firmware that may interact in the described manners optionally when programmed or otherwise configured with particular software including without limitation desktop or other computers e.g. laptops tablets smart phones etc. cell phones network devices PDAs wireless phones pagers electronic organizers Internet appliances network attached storage devices in a storage area network television based systems e.g. using set top boxes and or personal digital video recorders game consoles media players and various other consumer products that include appropriate inter communication capabilities. In addition the functionality provided by the image conversion tool system may in some embodiments be integrated as part of one or more other programs and systems and or may be separated into multiple modules as described in greater detail elsewhere.

It will also be appreciated that while various items are discussed or illustrated as being stored in volatile memory or on non volatile storage while being used these items or portions of them can be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software systems and or modules may execute in memory on another device and communicate with the illustrated computing systems via inter computer communication. Thus in some embodiments some or all of the described techniques may be performed by hardware means that include one or more processors and or memory and or storage when configured by one or more software programs e.g. the image conversion tool and or data structures such as by execution of software instructions of the one or more software programs and or by storage of such software instructions and or data structures. Furthermore in some embodiments some or all of the described techniques of the indicated systems and or modules may be implemented or provided in other manners such as at least partially using firmware and or hardware means including but not limited to one or more application specific integrated circuits ASICs standard integrated circuits controllers e.g. by executing appropriate instructions and including microcontrollers and or embedded controllers field programmable gate arrays FPGAs complex programmable logic devices CPLDs etc. Some or all of the systems modules and or data structures may also be stored e.g. as software instructions or structured data on one or more non transitory computer readable storage mediums such as a hard disk or flash drive or other non volatile storage device volatile or non volatile memory e.g. RAM or flash RAM a network storage device or a portable media article e.g. a DVD disk a CD disk an optical disk a flash memory device etc. to be read by an appropriate drive or via an appropriate connection. The systems modules and data structures may also in some embodiments be transmitted via generated data signals e.g. as part of a carrier wave or other analog or digital propagated signal on a variety of computer readable transmission mediums including wireless based and wired cable based mediums and may take a variety of forms e.g. as part of a single or multiplexed analog signal or as multiple discrete digital packets or frames . Such computer program products may also take other forms in other embodiments. Accordingly embodiments of the present disclosure may be practiced with other computer system configurations.

The routine begins at block of where information is retrieved about multiple supported virtualization environments. For example upon initialization of the image conversion tool the tool may retrieve configuration information regarding multiple supported source virtualization environments and optionally one or more supported destination virtualization environments. As discussed in greater detail elsewhere in some embodiments some or all of the configuration information for a specific virtualization environment may be included as part of a plug in or other interface module that may be loaded by the image conversion tool although in other embodiments the configuration information for a specific virtualization environment may be obtained by the image conversion tool in other manners. In the illustrated embodiment after block the routine continues to block to present a graphical user interface to one or more users of the image conversion tool such as to enable a user of the image conversion tool to specify image conversion activities to be performed. In blocks the routine then proceeds to perform particular conversion activities for virtual machine images as directed by the user.

In particular after block the routine continues to block and waits until an indication of user input or other data is received. The routine then continues to block to determine if the input received is information specific to a current user. If so the routine continues to block to receive and store the user specific information. As discussed in greater detail elsewhere the user specific information may be of various types such as login or other access information for the user with respect to a specific source virtualization environment and or a specific destination virtualization environment user preferences with respect to configuration options particular user selections or other designations of configuration parameters or other data to use etc.

After block or if it is instead determined in block that the received user input was not user specific information the routine continues to block to determine if the received input is a selection by the user of a particular source virtualization environment such as from information presented to the user via the graphical user interface of one or more such available source virtualization environments or instead as otherwise specified e.g. by the user manually typing in or otherwise designating a particular source virtualization environment . If so the routine continues to block to interact with one or more APIs of the selected source virtualization environment to obtain information about one or more virtual machine images that are available in that source environment and to update the GUI accordingly. The interactions with the source environment may for example be based in part on a particular user such as based on use of user specific information supplied with respect to block . In addition the interactions with the source environment may be based in part or in whole on use of an interface module specific to the source virtualization environment e.g. to use APIs of the source environment that are specific to that source environment or to otherwise use configuration information specific to the source virtualization environment. In other embodiments e.g. embodiments in which the source virtualization environment does not provide appropriate APIs the routine may instead access data corresponding to one or more virtual machine images in other manners such as to download hard disk files from the source virtualization environment.

After block or if it is instead determined in block that a selection of a source virtualization environment is not made the routine continues instead to block to determine if a user selection is made of a particular source virtual machine image available in a particular source virtualization environment such as for a source virtualization environment previously selected in block or as otherwise indicated if so the routine continues to block . The particular source virtual machine image may be indicated by the user in various manners such as via a selection from information presented to the user via the graphical user interface of one or more such available virtual machine images or instead as otherwise specified e.g. by the user manually typing in or otherwise designating a particular virtual machine image . In other embodiments and situations a particular user may supply a particular source virtual machine image to the routine such as with information about a type of source virtualization environment with which the source virtual machine image and if so block may not be performed in such situations.

The routine in block interacts with one or more APIs of the selected or otherwise indicated source virtualization environment to extract and receive data corresponding to the selected source virtual machine image such as a copy of that virtual machine image or of one or more hard disks represented within that virtual machine image. In a manner similar to that previously indicated with respect to block the interactions with the source virtualization environment may be performed based in part or in whole via use of a module specific to that source virtualization environment such as to enable interactions with the source environment specific to that source environment e.g. to use APIs of the source environment that are specific to that source environment . In other embodiments e.g. embodiments in which the source virtualization environment does not provide appropriate APIs the routine may instead access data corresponding to one or more virtual machine images in other manners such as to download hard disk files from the source virtualization environment. In addition in embodiments in which a source virtual machine image copy is supplied to the routine by the user the interactions with the source environment in block may not be performed or instead the interactions may be performed only to retrieve additional data if any corresponding to the source virtual machine image.

After block the routine continues to block to determine if the user has additional configuration information to specify with respect to modifying the source virtual machine image to execute in a particular destination virtualization environment such as a selection of the destination virtualization environment from multiple available destination environment options selections of capabilities available from a particular destination virtualization environment to be used by the virtual machine image when executing etc. If so the routine continues to block to receive one or more additional user selections or entries that specify configuration information for aspects of use of the source virtual machine image in a destination environment. In some situations additional user configuration information may not be specified in block such as if the user determines to use default configuration capabilities of the image conversion tool if the user previously specified configuration information to be used if the user will later specify some configuration information that is not immediately needed with respect to the modification activities of block or the later execution of the virtual machine image in the destination environment etc.

After block or if it was instead determined in block that no additional user configuration information was received the routine continues to block . In block the routine performs one or more modifications to the extracted data or the source virtual machine to enable the modified data to be used to execute the virtual machine as part of a particular destination virtualization environment with the modifications being performed using any user specified configuration information as described in greater detail elsewhere.

After block the routine continues to block to provide the modified data copy for use in the destination virtualization environment including to use any user specified configuration information related to activities to be performed as part of providing the modified data copy. In some embodiments the routine in block will transmit or otherwise send the modified data copy to the destination virtualization environment such as if the image conversion tool is executing on one or more computing systems that are remote from e.g. separated over one or more computer networks the destination virtualization environment. In addition while blocks and are illustrated as being performed with respect to only a single destination virtualization environment in the illustrated embodiment of the routine in other embodiments the extracted source virtual machine data may be modified for and used with multiple distinct destination virtualization environments whether immediately or at later times. In other embodiments the providing of the modified data may include providing a copy of the modified data to the user e.g. by storing it in a user specified location such as to enable the user to later supply the modified data to the destination virtualization environment.

If it is instead determined in block that the received input is not a selection or other indication of a particular source virtual machine image the routine continues instead to block to perform one or more other indicated operations as appropriate. Other types of indicated operations may include for example one or more of the following receiving a request from a user for status information and responding accordingly such as to enable a user to monitor current status of performing a virtual machine conversion and or to retrieve information about historical conversions that were previously performed receiving one or more types of data from a particular virtualization environment and storing the data or updating the GUI accordingly e.g. if a response is received from a virtualization environment to an asynchronous request previously sent by the image conversion tool etc.

After blocks or the routine continues to block to determine whether to continue such as until an explicit indication to terminate is received. If it is determined to continue the routine returns to block to wait for other input and otherwise continues to block and ends.

The routine begins at block where a request or data is received using one or more provided APIs. The routine continues to block to determine if a request is received from an embodiment of the image conversion tool for information about one or more virtual machine images that are available in the source virtualization environment. If so the routine continues to block to retrieve and provide corresponding information for the request. If it is instead determined in block that a request is not received for information about virtual machine images the routine continues to block to determine whether a request is received from an embodiment of the image conversion tool to provide data for an indicated virtual machine image. If so the routine continues to block to retrieve one or more hard disks for the indicated virtual machine image and to output the hard disk data in a manner specific to the source environment APIs or to otherwise retrieve and supply data corresponding to the indicated virtual machine image. If it is instead determined in block that a request is not received for data corresponding to a particular indicated virtual machine image the routine continues instead to block to perform one or more other indicated operations as appropriate such as to receive and respond to other types of requests from the image conversion tool to receive and respond to other types of requests from programs of users of the source virtualization environment to receive and respond to a user request via the image conversion tool for information about an account of the user with the destination virtualization environment etc.

After blocks or the routine continues to block to determine whether to continue such as until an explicit indication to terminate is received. If it is determined to continue the routine returns to block and otherwise continues to block and ends.

The routine begins at block where a request or data is received using one or more provided APIs. The routine continues to block to determine if a request is received from an embodiment of the image conversion tool related to data to be provided to the routine from the image conversion tool corresponding to a virtual machine image. If so the routine continues to block to receive data corresponding to one or more hard disks of a virtual machine image specified in a manner specific to the destination virtualization environment and stores the data for later use. In some embodiments and situations the received data may further include additional information such as a user with whom the virtual machine image is associated about parameter values to use during later execution of the virtual machine as described in greater detail elsewhere. If it is instead determined in block that the received request is not to provide data for a virtual machine image the routine continues instead to block to determine whether a request is received from an embodiment of the image conversion tool to execute an indicated virtual image such as a virtual image previously provided by the image conversion tool and stored with respect to block . If so the routine continues to block to retrieve the data for the indicated virtual machine image and to initiate execution of the indicated virtual machine image as part of a virtual machine provided by the destination virtualization environment. The execution of the virtual machine image may be performed in accordance with any configuration information specified along with the request or previously specified with respect to the indicated virtual machine image or with respect to a user on whose behalf the image is being executed. If it is instead determined in block that the received request is not to execute an indicated virtual machine image the routine continues instead to block to perform one or more other indicated types of operations as appropriate. Such other operations may include for example responding to other types of requests from the image conversion tool and or from other executing programs of users such as to provide status information for a user regarding ongoing execution of an indicated virtual machine e.g. to enable monitoring of the execution to provide historical information for a user about previous execution of virtual machine images to receive and respond to a user request for information about an account of the user with the destination virtualization environment etc.

After blocks or the routine continues to block to determine whether to continue such as until an explicit indication to terminate is received. If it is determined to continue the routine returns to block and otherwise continues to block and ends.

It will also be appreciated that in some embodiments the functionality provided by the routines discussed above may be provided in alternative ways such as being split among more routines or consolidated into fewer routines. Similarly in some embodiments illustrated routines may provide more or less functionality than is described such as when other illustrated routines instead lack or include such functionality respectively or when the amount of functionality that is provided is altered. In addition while various operations may be illustrated as being performed in a particular manner e.g. in serial or in parallel and or in a particular order it will be appreciated that in other embodiments the operations may be performed in other orders and in other manners. It will also be appreciated that the data structures discussed above may be structured in different manners including with respect to database data structures and Web page data structures such as by having a single data structure split into multiple data structures or by having multiple data structures consolidated into a single data structure. Similarly in some embodiments illustrated data structures may store more or less information than is described such as when other illustrated data structures instead lack or include such information respectively or when the amount or types of information that is stored is altered.

From the foregoing it will be appreciated that although specific embodiments have been described herein for purposes of illustration various modifications may be made without deviating from the spirit and scope of the disclosure. In addition while certain aspects are presented below in certain claim forms the inventors contemplate the various aspects in any available claim form. For example while only some aspects of the disclosure may currently be recited as being embodied in a computer readable medium other aspects may likewise be so embodied.

