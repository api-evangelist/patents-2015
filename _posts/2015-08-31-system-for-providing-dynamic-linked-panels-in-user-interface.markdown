---

title: System for providing dynamic linked panels in user interface
abstract: A computer system may be configured to: execute a first query associated with a first panel; display the first panel in a user interface based on first display settings of the first panel, the first panel displaying at least a portion of the result of the first query, the result of the first query associated with a variable; execute a second query associated with a second panel, wherein the second query refers to the variable associated with the first query; display the second panel in the user interface based on second display settings of the second panel, the second panel displaying at least a portion of the result of the second query; and in response to user input changing the displayed result in the first panel: re-execute the second query; and update the display of the second panel in the user interface based on results of the re-executed second query.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09454281&OS=09454281&RS=09454281
owner: Palantir Technologies Inc.
number: 09454281
owner_city: Palo Alto
owner_country: US
publication_date: 20150831
---
This application claims the benefit of U.S. Provisional Application No. 62 045 488 filed Sep. 3 2014 and U.S. Provisional Application No. 62 135 448 filed Mar. 19 2015 each of which is incorporated herein by reference in its entirety. Any and all applications if any for which a foreign or domestic priority claim is identified in the Application Data Sheet of the present application are hereby incorporated by reference under 37 CFR 1.57.

The present disclosure relates to systems and techniques for data integration analysis and visualization. More specifically the present disclosure relates to dynamic linked panels associated with queries performed on data sources and visualization of results of the queries.

Organizations and or companies are producing increasingly large amounts of data. Such data may be queried and presented in a user interface.

The systems methods and devices described herein each have several aspects no single one of which is solely responsible for its desirable attributes. Without limiting the scope of this disclosure several non limiting features will now be discussed briefly.

In one embodiment a computer system configured to display data from one or more data sources comprises one or more hardware computer processors configured to execute code in order to cause the system to generate a user interface configured to display a plurality of panels including a first panel and a second panel each of the plurality of panels having respective display settings and queries including code for querying one more data sources execute a first query associated with the first panel display the first panel in the user interface based on first display settings of the first panel the first panel displaying at least a portion of the result of the first query the result of the first query being associated with a variable execute a second query associated with the second panel wherein the second query refers to the variable associated with the first query of the first panel display the second panel in the user interface based on second display settings of the second panel the second panel displaying at least a portion of the result of the second query and in response to user input changing the displayed result in the first panel re execute the second query associated with the second panel and update the display of the second panel in the user interface based on results of the re executed second query of the second panel.

According to certain aspects the code can be further configured to receive a third query from the first panel for writing data to the one or more data sources process one or more parameters in the third query by invoking a function and perform the third query with the processed one or more parameters to write data to the one or more data sources. The processing of the one or more parameters in the third query may be performed at least in part by replacing the one or more parameters with respective placeholders and storing respective values corresponding to the one or more parameters in an array. The processing of the one or more parameters in the third query may be performed at least in part by changing respective values corresponding to the one or more parameters to string format. Each of the plurality of panels can be referenced as a template that is rendered by a template engine and the function can be registered with the template engine. The code may be further configured to prior to running the query of the first panel invoke one or more functions to determine whether a table a row or a column referenced in the query exists in the one or more data sources.

In another embodiment a method of displaying data from one or more data sources comprises using one or more hardware computer processors generating a user interface configured to display a plurality of panels including a first panel and a second panel each of the plurality of panels having respective display settings and queries including code for querying one more data sources executing a first query associated with the first panel displaying the first panel in the user interface based on first display settings of the first panel the first panel displaying at least a portion of the result of the first query the result of the first query being associated with a variable executing a second query associated with the second panel wherein the second query refers to the variable associated with the first query of the first panel displaying the second panel in the user interface based on second display settings of the second panel the second panel displaying at least a portion of the result of the second query and in response to user input changing the displayed result in the first panel re executing the second query associated with the second panel and updating the display of the second panel in the user interface based on results of the re executed second query of the second panel.

According to certain aspects the method may further comprise receiving a third query from the first panel for writing data to the one or more data sources processing one or more parameters in the third query by invoking a function and performing the third query with the processed one or more parameters to write data to the one or more data sources. Said processing the one or more parameters in the third query can comprise replacing the one or more parameters with respective placeholders and storing respective values corresponding to the one or more parameters in an array. Said processing the one or more parameters in the third query can comprise changing respective values corresponding to the one or more parameters to string format. Each of the plurality of panels may be referenced as a template that is rendered by a template engine and the function may be registered with the template engine. The method may further comprise prior to running the query of the first panel invoking one or more functions to determine whether a table a row or a column referenced in the query exists in the one or more data sources.

In some embodiments a non transitory compute readable medium comprises instructions for displaying data from one or more data sources that cause a computer processor to generate a user interface configured to display a plurality of panels including a first panel and a second panel each of the plurality of panels having respective display settings and queries including code for querying one more data sources execute a first query associated with the first panel display the first panel in the user interface based on first display settings of the first panel the first panel displaying at least a portion of the result of the first query the result of the first query being associated with a variable execute a second query associated with the second panel wherein the second query refers to the variable associated with the first query of the first panel display the second panel in the user interface based on second display settings of the second panel the second panel displaying at least a portion of the result of the second query and in response to user input changing the displayed result in the first panel re execute the second query associated with the second panel and update the display of the second panel in the user interface based on results of the re executed second query of the second panel.

According to certain aspects the instructions can be further configured to cause the computer processor to receive a third query from the first panel for writing data to the one or more data sources process one or more parameters in the third query by invoking a function and perform the third query with the processed one or more parameters to write data to the one or more data sources. The processing of the one or more parameters in the third query may be performed at least in part by replacing the one or more parameters with respective placeholders and storing respective values corresponding to the one or more parameters in an array. The processing of the one or more parameters in the third query may be performed at least in part by changing respective values corresponding to the one or more parameters to string format. Each of the plurality of panels can be referenced as a template that is rendered by a template engine and the function can be registered with the template engine. The instructions may be further configured to cause the computer processor to prior to running the query of the first panel invoke one or more functions to determine whether a table a row or a column referenced in the query exists in the one or more data sources.

Disclosed herein are various systems and methods for providing a plurality of dynamic panels in a user interface UI . The dynamic panels or panels can display different pieces of data from one or more data sources. For example a query can be run on one or more data sources and different parts of the result from the query can be output using different dynamic panels. For instance each dynamic panel can be associated with a variable to output. Different types of dynamic panels can be provided such as charts e.g. line chart bar chart etc. controls e.g. dropdown multiselect box search box etc. maps tables text boxes etc. The panels can be data source agnostic. For example the panels can be associated with data from different types of data sources such as relational databases e.g. SQL Server Elasticsearch etc. In some embodiments individual panels may each be referred to as widgets. In some embodiments the user interface including multiple panels may be referred to as a dashboard. 

A dynamic panel can be linked to one or more other dynamic panels. As mentioned above the output of a panel can be used in another panel. When the data of a panel depends or relies on the data of another panel if the data in the source panel changes the data in the panel that relies on the source panel may also change or be refreshed. For example in an example query obtains data regarding National Football League teams from multiple data sources. Panel can be a dropdown control that selects the team to view. Panel can be a dropdown control that selects the season for which to display the games. Panel can be a table that displays the games for the team selected in panel for the season selected in panel . Changes to the selected team in panel or the selected season in panel can update the games displayed in panel . In some embodiments panel and panel display statistics related to the games displayed in panel when games displayed in panel change panel and panel update accordingly.

The query and the settings relating to the display of particular panels can be managed separately. For example a user interface can provide a section for entering the query and another section for entering display related settings. Separate management of the query and the display settings can allow the panels to be easily updated within the user interface and allow reuse of queries. The page that contains the panels may be referred to as a document. 

In this manner multiple panels can be used to display different aspects of the result from a query. One query can be run to obtain the needed information and the result can be parsed and displayed using multiple panels. Display of information can be simplified by using multiple panels. Also the query can be reused across panels since each panel can extract a portion of the result to display. In certain embodiments each panel may have its own query and display the result of the query. The panels can also be linked together so that the data from one panel can be used to display the data in another panel.

Using the main page the user can create edit delete and manage one or more panels. In one embodiment the main page includes a top section that displays the name of the document selected if any links to the query page the global variables page and the document CSS page and various icons for creating panels and for other features. The main page also includes a panels section that displays the list of panels included in the document. The main page includes a design section where the user can create organize and edit panels. In the example of the user creates Document which contains panels p p p etc. A panel can be referred to by its name and the name of the panel can be displayed when the cursor is over a particular panel. For illustrative purposes certain items in design section are marked with dashed lines to indicate that they are panels for example the slider in the top right corner of design section is a panel. Four blocks at the bottom of design section listing company name and dollar value are also examples of panels these panels are shown in solid lines because they have borders.

Moving to the query page allows the user to enter a query. For example a query can be associated with a panel. The example query page may appear when the user clicks on the link to the query page on the main page . The query page can display a list of queries for example stored queries in a database e.g. template storage in . In some embodiments a query may be reused in other documents. For example the user can select a query from the list of queries or create a new query. In the example of the query page includes a button for adding a new query. The query page can include a code section for entering the query and a preview section for previewing results of execution of the query in code section . The user may update or delete a query from the query page . The example query in relates to the panel shown in and updates the data source s to reflect availability of individual squares or cards and to add information relating to the squares or cards e.g. insert username time etc. .

In some embodiments the user interface including the various pages illustrated in can be a web interface. The system may also provide different types or modes of user interfaces for authoring and editing documents and panels. For example more advanced users can use an interface for directly entering the query and beginner users can use a simpler interface that allows selection of values for various aspects of a panel e.g. x value and y value of a chart . Users can share documents with other users and can give other users permission to edit read only etc. For example the system can provide an edit mode or author mode in which the user can edit all aspects of a panel e.g. the query for the panel the display settings for the panel etc. The system can also provide a read only mode or consumer mode in which the user can interact with the panels e.g. select a value for a dropdown control but may not edit other aspects of panels. In certain embodiments users can edit panels within a web authoring environment. For example users may use web technologies to edit the panels and may edit the panels within a web page or web interface.

In one embodiment the user interface can have two viewing modes a WYSIWYG What You See Is What You Get editor mode and a corresponding read only consumer mode. In editor mode built in panels like bar charts scatter plots time series plots tables dropdown menus text boxes etc. can be added and arranged on the canvas or page. The user can author and edit data queries via a rich editor UI which can support quickly previewing results for quick debugging. Queries may natively support templating e.g. via Handlebars to link to panels URL parameters or data from other queries. Panels can also be templatized to link to data from the queries and coordinate with other panels. Additionally the editor can customize styling for a particular page or document or deployment. The read only consumer mode may allow finished web pages to be shared to a set of users that can interact with a page but not edit its layout or setup.

At data flow action the user creates a panel. As explained above a panel can have a query associated with it and display settings associated with it.

At data flow action the user defines a query associated with the panel. As mentioned above the panels can be data source agnostic and can be associated with data from different types of data sources such as relational databases SQL Elasticsearch etc. The system can connect to and query data from any data source that supports a text based query language. The system can support different types of query languages and or tools depending on the embodiment. In certain embodiments Handlebars can be used for the queries. In some embodiments JSON JavaScript Object Notation can be used for the queries. In other embodiments the system can include one adapter for SQL databases and another adapter for REST backends e.g. Elasticsearch which may be provided as default adapters. The system can additionally allow the user to transform and selectively extract data out of query results. For example the user can extract data from JSON query responses using JSONPath.

At data flow action the user defines display settings associated with the panel. The user can define the display settings in the document CSS for the panel. The user can create additional panels and define the query and display settings for each panel. One or more panels may be added to a container. A container may function as a holder for panels. A container can act as a collection of panels that move as a unit. The user can define the layout of the panels within the container and also define behavior for the container which can apply to all the panels in the container as a group. The user may add tabs for a container. For example a container may include multiple tabs and the user can switch between tabs to view different content. Each tab can act as a separate content space and hold different panels.

At data flow action the system generates the user interface page for the document that contains the panel. When the system receives a request from the user system for a particular document the system can obtain the requested document for example from the template storage and run the query associated with the panels in the documents. The template engine may combine the document the panels and the query results in order to generate finished user interface pages. As explained above one query can be used to obtain data and different parts of the query can be associated with different panels. For instance a query q returns columns c c c and c and the system creates a text panel whose text is q.c a dropdown panel whose values is q.c and a chart panel whose x values and y values are q.c and q.c respectively. Or each panel may have a query associated with it and the result of the query can be associated with the particular panel. The finished user interface pages can be then sent to the user system to be displayed in a user interface.

At data flow action the user system receives user input selection in the user interface. The user may change the displayed result in the user interface of the user system . For example the user may select a particular value in a dropdown control. Or the user may select a particular panel or an item within a panel. The user input or selection is sent to the system .

At data flow action the system updates the display of the panel. For instance the query may be rerun or the query result may be filtered based on the selected value in a dropdown control. Or actions may be associated with a panel or an item within a panel and such actions may be performed. For example selection of a panel or an item within a panel can display options or attributes related to the panel or the item. In one example the selection of a table row in one panel is linked to another panel that contains more detailed information about the selected row. A table shows a list of games as in and selecting a game in the table shows more detailed statistics on the selected game in a different panel. Certain details relating to are further explained below in connection with .

The system can be highly extensible and panels can be easily created edited and or removed. In one embodiment a new panel can be added by creating a web module e.g. an AngularJS module . A simple web module may be easily created by a suitable module generator e.g. via Yeoman generator . Similarly data adapters for new types of data sources can be easily added e.g. via a java jar .

The query may refer to panels variables of panels and or global variables as templates and a template system or language can process the queries and replace any templates with corresponding values. For example a template can be indicated by double curly brackets and in a template system or language such as Handlebars and Mustache. In the example above p.selectedValue and p.selectedValue may be enclosed in double curly brackets to indicate that they are templates. Therefore the query for the example above can be written as SELECT column FROM table WHERE team p.selectedValue AND season p.selectedValue. The template engine can process and replace the templates with their corresponding values at the time of generating the finished user interface pages. In certain embodiments the system builds a graph of all the references from the templates and associates the references such that if any of the references change the corresponding templates are regenerated or refreshed. Templates may also refer to objects other than panels depending on the embodiment. Using double curly brackets to indicate templates is described above as an example and any other syntax elements can be used to indicate templates.

In some embodiments the user can define variables associated with the panels that can be referenced in a query. For example the user can define variable A for panel and variable B for panel and the query for panel can reference variable A and variable B in the query. For example variable A and variable B can be associated with the selected value of panel and panel respectively. As explained above in some embodiments panels can have global variables associated with them.

In some cases it may be useful to allow users to write to or update the data sources through the panels. For example the user may want to change the data in a panel and reflect the changes to the data source. The user could also save some selected rows from a table in one document for later use in other documents or save notes from different users to a table for later reference. In certain cases the user may also want to rename a portfolio in a database.

The system can allow the users to update the data sources through queries. For example SQL queries or JSON queries can be used. SQL queries and JSON queries can refer to the panels as templates and a template system or language like Handlebars or Mustache can process the queries and replace any templates with corresponding values. However in certain cases directly replacing the templates with the corresponding values can lead to unintended consequences. For instance the user may specify an always true condition as the value to be replaced with a template in the WHERE clause of a SQL query which can result in changing all data. In one example the user creates a query as follows UPDATE table SET text newText WHERE id p.text. If the value of p.text is 1 1 replacing the template p.text with 1 1 would update every row in the table. Accordingly the system make the queries secure by using a custom function as explained below.

At data flow action the system creates a custom function to verify parameters in a query. For example an administrator of the system can create the custom function.

In some embodiments the system uses SQL queries and processes the SQL queries using Handlebars. The custom function can be a Handlebars helper. For example the custom function can be named param and registered with Handlebars. Handlebars can invoke the custom function when processing the SQL queries. The user can use the custom function when using templates in SQL queries.

In one embodiment the custom function prevents use of text values in templates and only allows parameter values in templates. For example a variable of a panel used in a template should be a parameter value. Supposing that the variable of the panel referred to in a template is p.property the custom function checks whether p.property is an array. If p.property is not an array the custom function replaces param p.property with a and saves the value of p.property for reference for example in a reference array. If p.property is an array with a length of n the custom function replaces param p.property with a string containing n question marks separated by commas and saves the value of each of element in the array for reference for example in a reference array. In this way the custom function can help create parameterized queries which contain placeholders such as that can be inserted in query parameters. The SQL engine would escape and not evaluate these parameters and therefore parameterized queries can prevent SQL injection. For instance the expression 1 1 would be escaped and would not be evaluated as a boolean expression rather it is evaluated as a string.

For example if p.property is equal to 1 the custom function processes the SQL query UPDATE table SET text newText WHERE id param p.property to UPDATE table SET text newText WHERE id and stores in the reference array. In another example if p.property is equal to an array the custom function processes the SQL query UPDATE table SET text newText WHERE id param p.property to UPDATE table SET text newText WHERE id and stores and in the reference array. The processed query and parameters can be prepared as a JDBC statement and run against one or more data sources . Types of parameters can be preserved e.g. whether the parameter is a number or a string by using additional Handlebars helpers.

In other embodiments the system uses JSON queries and processes the JSON queries using Handlebars and or Mustache. A JSON query can include three parts path method and body. The path and the body can use templates since the method generally has a few options templates may not be used with the method. In order to have different rules for the use of templates the path method and body can be separated into different components of the query. For example the path and method can be considered as metadata and the body can be considered as the template.

The custom function can be used on the body of a JSON query. The custom function can be a Handlebars helper. For example the custom function can be named esc and registered with Handlebars. Handlebars can invoke the custom function when processing JSON queries. The user can use the custom function when using templates in JSON queries. The custom function may verify that all values for templates are valid JSON values e.g. string number object array boolean null etc. . The custom function can convert the value of templates to string format e.g. using JSON stringify function . For example value esc ptvalue where p.value is a chars a is evaluated to be value a .

The system can also create an additional custom function for string interpolation or for cases where the user wants to use another Handlebars helper e.g. the join helper . The additional custom function can be a block helper for example it can be referred to as esc esc block helper. In one embodiment the block helper can evaluate the templates within the block helper take the result as one string and convert the one string to string format. In other embodiments Handlebars evaluates what is inside the block helper and the helpers within the block helper can convert the result to string format. In certain embodiments the block helper or helpers convert the result to string format e.g. by calling JSON stringify function for security. In one embodiment JSON stringify function can be called on block helpers for security. Various embodiments described in this disclosure may be implemented separately or in combination as appropriate.

The system may also define rules and features to be implemented in association with the custom function s . In one example for the path the system can require that values for templates are uniform resource identifier URI unreserved characters and are not periods. This can prevent the template value from going outside of the intended space in the path e.g. intended directory . In some embodiments the system may not allow quotes around templates to avoid a string object from being closed accidentally. The system may also require that all other non block helpers are nested inside the esc helper or used inside the esc esc block helper.

At data flow action the user writes a query in a panel using the custom function in order to write data to a data source . The system can require users to use the custom functions when writing queries to write to a data source . For instance the system can return errors for queries that do not use the custom functions or do not use the custom functions properly.

At data flow action the user runs the query. The user can associate the query with a query button panel. The user may run the query by clicking on the query button. The user system can send the user query to the system .

At data flow action the system invokes the custom function to verify and process the parameters in the query. Upon receiving the user query from the user system the system can invoke the custom function on the query and format the query appropriately. If the processed query does not conform to the rules associated with the custom function the system can return an error.

At data flow action the system runs the query with the processed parameters to write to the data source . If the processed query is properly written and or conforms to the rules associated with the custom function the system runs the query against the data source .

In certain embodiments the system also implements custom functions to verify parameters of queries for reading data. For example the system can create custom functions e.g. Handlebars helpers for verifying table names column names alias table names alias column names etc. In one embodiment the system creates Handlebars helpers table column and alias to make sure the table column or alias actually exists in the data sources . The system can verify a table name or column name by checking that the table name or column name is within the schema of the database. The user can register the alias table name or column name and the system may verify an alias name by checking that it is registered.

At block the system generates a user interface configured to display a plurality of panels each panel associated with display settings and a query. At block the system performs the query associated with a first panel. The first panel can be panel in .

At block the system displays the first panel in the user interface based on the display settings of the first panel. The query of panel can be run to obtain the list of teams to display in panel . The list of teams can be displayed according the document CSS of panel . One team from the list of teams may be displayed in panel as the default value. For example panel shows the first team in the list.

Similarly the system can perform the query associated with panel and display panel in the user interface based on the display settings of panel . One season from the list of seasons may be displayed in panel as the default value. For example panel shows the most current season in the list.

At block the system performs the query associated with a second panel. The second panel can be panel in .

At block the system displays the second panel in the user interface based on the display settings of the second panel. The query of panel can be run to obtain the list of games to display in panel . As explained above the query of panel obtains the list of games to display for the team selected in panel and the season selected in panel . The list of games can be displayed according the document CSS of panel .

At block the system receives user input changing the displayed result in the first panel. For example the user selects Team from the list of teams in panel and panel is updated to show Team as selected. The user selection is sent to the system .

At block the system updates the display of the first panel. If there are any changes to be made to panel the system can refresh panel e.g. by rerunning the query and or regenerating panel through the template engine . In the example of panel is a dropdown control so the system may not have to update panel .

At block the system updates the display of the second panel. Since the query of panel links to panel panel is also updated to display games for Team for the season selected in panel . For example the query for panel can be rerun. In this manner linked panels can be updated dynamically.

At block the system creates a custom function to verify parameters in a query. The custom functions may be Handlebars helpers explained above such as param helper esc helper esc esc block helper etc.

At block the system receives a query using the custom function from a panel in the user interface. The user writes a query that uses the custom function.

At block the system invokes the custom function to verify and process parameters in the query. In one embodiment the custom function replaces the parameters with respective placeholders and stores respective values corresponding to the parameters in an array. In another embodiment the custom function changes respective values corresponding to the parameters to string format.

At block the system runs the query with the processed parameters to write to or read from the data source s .

In certain embodiments the user login information may be saved as global variables so that they can be accessible within the document. The user login information can include the group email address name etc. of the user. The user login information may be used in queries for example to check permissions etc.

The system for providing a plurality of dynamic panels in a user interface as explained above may also be referred to as a Dashboard Creation Application. The Dashboard Creation Application DCA can be an extensible WYSIWYG What You See Is What You Get web application for quickly and easily creating interactive data driven web pages. For example the Dashboard Creation Application can easily create interactive dashboards which support lightweight filtering and drill down operations on top of arbitrary data storage systems or data sources.

In one embodiment the Dashboard Creation Application enables analysts to author dashboards of visualizations for easy consumption by end users. It will provide a number of panels like charts tables and images in a pluggable architecture so analysts can add custom panels for particular deployments. For example a standard plug in structure can be used across systems and products. Panels will be interactive and coordinated and support filtering aggregations to create drill down style analysis. The dashboard author will have fine control over the layout and styling of the panels contained in each Dashboard Creation Application dashboard. The Dashboard Creation Application will be deployable on top of any collection of other products for presentation and dashboarding use cases because it is agnostic to the underlying data store.

In various embodiments the Dashboard Creation Application may perform one or more of the functions noted below 

In some embodiments the Dashboard Creation Application integrates closely with other products so that more use cases can be covered by combining the tools appropriately. The numbers and types of users reached can be increased by improving the usability and expressiveness of the UI available to end users for building dashboards. In various embodiments the Dashboard Creation Application may implement one or more of the functions noted below 

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include circuitry or digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems server computer systems portable computer systems handheld devices networking devices or any other device or combination of devices that incorporate hard wired and or program logic to implement the techniques.

Computing device s are generally controlled and coordinated by operating system software such as iOS Android Chrome OS Windows XP Windows Vista Windows 7 Windows 8 Windows Server Windows CE Unix Linux SunOS Solaris iOS Blackberry OS VxWorks or other compatible operating systems. In other embodiments the computing device may be controlled by a proprietary operating system. Conventional operating systems control and schedule computer processes for execution perform memory management provide file system networking I O services and provide a user interface functionality such as a graphical user interface GUI among other things.

For example shows a block diagram that illustrates a computer system upon which an embodiment may be implemented. For example the computing system may comprise a system for providing a plurality of dynamic panels in a user interface. Other computing systems discussed herein may include any portion of the circuitry and or functionality discussed with reference to system . For instance the system and or can each include some or all of the components and or functionality of the system .

Computer system includes a bus or other communication mechanism for communicating information and a hardware processor or multiple processors coupled with bus for processing information. Hardware processor s may be for example one or more general purpose microprocessors.

Computer system also includes a main memory such as a random access memory RAM cache and or other dynamic storage devices coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk optical disk or USB thumb drive Flash drive etc. is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT or LCD display or touch screen for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane. In some embodiments the same direction information and command selections as cursor control may be implemented via receiving touches on a touch screen without a cursor.

Computing system may include a user interface module to implement a GUI that may be stored in a mass storage device as executable software codes that are executed by the computing device s . This and other modules may include by way of example components such as software components object oriented software components class components and task components processes functions attributes procedures subroutines segments of program code drivers firmware microcode circuitry data databases data structures tables arrays and variables.

In general the word module as used herein refers to logic embodied in hardware or firmware or to a collection of software instructions possibly having entry and exit points written in a programming language such as for example Java Lua C or C . A software module may be compiled and linked into an executable program installed in a dynamic link library or may be written in an interpreted programming language such as for example BASIC Perl or Python. It will be appreciated that software modules may be callable from other modules or from themselves and or may be invoked in response to detected events or interrupts. Software modules configured for execution on computing devices may be provided on a computer readable medium such as a compact disc digital video disc flash drive magnetic disc or any other tangible medium or as a digital download and may be originally stored in a compressed or installable format that requires installation decompression or decryption prior to execution . Such software code may be stored partially or fully on a memory device of the executing computing device for execution by the computing device. Software instructions may be embedded in firmware such as an EPROM. It will be further appreciated that hardware modules may be comprised of connected logic units such as gates and flip flops and or may be comprised of programmable units such as programmable gate arrays or processors. The modules or computing device functionality described herein are preferably implemented as software modules but may be represented in hardware or firmware. Generally the modules described herein refer to logical modules that may be combined with other modules or divided into sub modules despite their physical organization or storage

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor s executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor s to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term non transitory media and similar terms as used herein refers to any media that store data and or instructions that cause a machine to operate in a specific fashion. Such non transitory media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of non transitory media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge and networked versions of the same.

Non transitory media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between nontransitory media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN or WAN component to communicate with a WAN . Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

Each of the processes methods and algorithms described in the preceding sections may be embodied in and fully or partially automated by code modules executed by one or more computer systems or computer processors comprising computer hardware. The processes and algorithms may be implemented partially or wholly in application specific circuitry.

The various features and processes described above may be used independently of one another or may be combined in various ways. All possible combinations and subcombinations are intended to fall within the scope of this disclosure. In addition certain method or process blocks may be omitted in some implementations. The methods and processes described herein are also not limited to any particular sequence and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example described blocks or states may be performed in an order other than that specifically disclosed or multiple blocks or states may be combined in a single block or state. The example blocks or states may be performed in serial in parallel or in some other manner. Blocks or states may be added to or removed from the disclosed example embodiments. The example systems and components described herein may be configured differently than described. For example elements may be added to removed from or rearranged compared to the disclosed example embodiments.

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

Any process descriptions elements or blocks in the flow diagrams described herein and or depicted in the attached figures should be understood as potentially representing modules segments or portions of code which include one or more executable instructions for implementing specific logical functions or steps in the process. Alternate implementations are included within the scope of the embodiments described herein in which elements or functions may be deleted executed out of order from that shown or discussed including substantially concurrently or in reverse order depending on the functionality involved as would be understood by those skilled in the art.

It should be emphasized that many variations and modifications may be made to the above described embodiments the elements of which are to be understood as being among other acceptable examples. All such modifications and variations are intended to be included herein within the scope of this disclosure. The foregoing description details certain embodiments of the invention. It will be appreciated however that no matter how detailed the foregoing appears in text the invention can be practiced in many ways. As is also stated above it should be noted that the use of particular terminology when describing certain features or aspects of the invention should not be taken to imply that the terminology is being re defined herein to be restricted to including any specific characteristics of the features or aspects of the invention with which that terminology is associated. The scope of the invention should therefore be construed in accordance with the appended claims and any equivalents thereof.

