---

title: Native authentication experience with failover
abstract: Disclosed are various embodiments for providing a native authentication experience with failover. If a particular authentication approach is supported by a network service, an application authenticates with the network service according to the authentication approach using an authentication factor received via a platform-specific interface. If the particular authentication approach is not supported, code-based linking may be employed to authenticate via another application that is authenticated with the network service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09614828&OS=09614828&RS=09614828
owner: Amazon Technologies, Inc.
number: 09614828
owner_city: Seattle
owner_country: US
publication_date: 20150105
---
In order to gain access to secured online resources a user may have to sign in to an account. Typically the user may have to provide a username and a password. In some cases the user may have to answer one or more knowledge based questions. Voice recognition fingerprint recognition face recognition or other types of biometric identification may also be employed. Accounts may employ multi factor authentication relying on a combination of what the user knows what the user has in his or her possession who the user is from a biometric standpoint where the user is and so on in order to improve security.

The present application relates to providing failover for native authentication experiences. In the past access to secured network resources often involved a browser based experience. Hypertext markup language HTML defines several types of form input fields through which a user may provide information. Such form input fields may include text fields checkboxes radio button text areas and so on. These standard form types are largely platform agnostic meaning that a sign in page authored in HTML may be accessed via a variety of different computing systems.

Signing in via a browser based experience may have significant drawbacks as compared to platform specific sign in experiences. For example many different authentication factors may not be directly supported by HTML. Any type of biometric identification may rely upon access to input devices beyond merely a touchscreen keyboard or mouse such as a microphone or camera and operating systems may limit access to such devices via a browser. Moreover platforms may offer particular features that make it easier for users to provide authentication factors. Native applications may take advantage of such features to provide a superior authentication experience. Also some devices may not be able to render a web view or browser and downloading authentication pages may be time consuming on a slow network.

From time to time a service provider may change how authentication to its accounts is performed. For example different authentication factors may be required. Unfortunately unlike network pages and browser based applications native applications may be difficult to update. Native applications may be deployed to embedded devices such as televisions appliances home automation systems and so on and application updating may be a cumbersome procedure. However unless the native application is updated authentication by way of the native application may fail.

Various embodiments of the present disclosure provide for failover for a native authentication experience through the use of code based linking. In code based linking a code is first presented to the user via a first application or device. The user authenticates by a second application or device and then enters the code. When the code is provided via the second application or device the service provider is able to authenticate the user at the first application or device and both applications or devices become authenticated. Although code based linking may be cumbersome as a primary authentication method adding code based linking as a failover for a native sign in experience in an application ensures that the application will be usable in the future.

With reference to shown is a diagram illustrating an example flow of user interfaces according to various embodiments. To begin a user at a particular device e.g. a television which could be a smart television or may be coupled to an AMAZON FIRETV or other device seeks to sign in or authenticate to an account. The user interface is rendered by a native application executed on the particular television and elicits an email address and password for the account from the user. Suppose however that since the native application was released the service provider has updated its authentication approach. For example the updated authentication approach may also request an answer to a knowledge based question a biometric identification a response to a Completely Automated Public Turing test to tell Computers and Humans Apart CAPTCHA or some other security measure. It may be that there is not a platform specific application programming interface API on the television to support the updated authentication approach.

Rather than denying access to the native application entirely code based linking is employed. Thus the service provider sends a code to the native application which is configured to present the code i.e. YA82Q in user interface via the television . Further the user interface also presents a uniform resource identifier URI such as a uniform resource locator URL i.e. http www link at which the user may enter the code. The URI may be a URL if the access mechanism e.g. http ftp etc. is specified. The user interface may also include a component for requesting a different code should a different code be required due to expiration of the previous code or for other reasons.

Next on the same device or a different device e.g. a laptop the user may launch a browser or other browser based application to access the URL. The user interface elicits the code i.e. YA82Q from the user. The browser may already be authenticated for the account or in user interface a network page may be rendered that elicits security credentials and or other authentication factors from the user. In this example the user interface requests an answer to a knowledge based question Which of the following items did you buy two days ago The requested credentials may be the same as or different from those in user interface . Upon providing the requested credentials the browser may be authenticated to access the account and consequently the native application may also be authenticated to access the account. A user interface may provide a confirmation that the native application has been authenticated i.e. Success Your device is now ready to use .

Turning now to shown is a diagram illustrating another example flow of user interfaces according to various embodiments. The example flow in works in the opposite direction of . That is to say a user obtains a code via a browser based application and then provides the code to the native application to complete authentication.

To begin a user at a particular device e.g. a television which could be a smart television or may be coupled to an AMAZON FIRETV or other device seeks to sign in or authenticate to an account. The user interface is rendered by a native application executed on the television and elicits an email address and password for the account from the user. Suppose however that since the native application was released the service provider has updated its authentication approach to also request an answer to a knowledge based question. Suppose that there is not a platform specific application programming interface API on the particular device to request the answer to the knowledge based question.

Rather than denying access to the native application entirely code based linking is employed. Here user interface presents a uniform resource locator i.e. http www link at which the user may obtain a code. The user interface also includes a form through which the user may enter the code once it is obtained.

Next on the same device or a different device e.g. laptop the user may launch a browser or other browser based application to access the URL. The browser may already be authenticated for the account or in user interface a network page may be rendered that elicits security credentials and or other authentication factors from the user. In this example the user interface requests an answer to a knowledge based question Which of the following items did you buy two days ago The requested credentials may be the same as or different from those in user interface . Upon providing the requested credentials the browser may be authenticated to access the account.

The service provider then sends a code to the browser which is configured to present the code i.e. YA82Q in user interface . The user interface may also include a component for requesting a different code should a different code be required due to expiration of the previous code or for other reasons.

Next the user returns to the native application on the television and the user interface elicits the code i.e. YA82Q from the user. Upon providing the code the native application may be authenticated to access the account. A user interface may provide a confirmation that the native application has been authenticated i.e. Success Your device is now ready to use .

In some embodiments it may be possible for the code to be copied from one device to another without relying on the user to manually enter the code. For example the code may be transferred between devices via BLUETOOTH WI FI near field communication NFC and or other networking technologies. To illustrate in the example of in lieu of showing a code via the user interface the television may send broadcast or multicast messages containing the code via the local network. The laptop would receive the broadcast or multicast messages via the local network. In some cases a confirmation of the action may be requested of the user via the laptop . In other examples the television and laptop could be paired to one another and the code could be sent directly from the television to the laptop via a BLUETOOTH connection an NFC connection etc.

In another example one device may show a quick response QR code a barcode or other identifier corresponding to the code which may then be scanned or captured by the other device thereby effecting a transfer of the code. With respect to the user interface may show a QR code instead of a text code and the user interface may launch a camera interface in order to capture the QR code via a camera.

In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

Referring next to shown is a block diagram of a networked environment according to various embodiments. The networked environment includes a computing environment one or more primary clients and one or more secondary clients in data communication via a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs personal area networks PANs wired networks wireless networks other suitable networks etc. or any combination of two or more such networks. Additionally the secondary client may be in data communication with the primary client via a local communication channel which may be the same as or separate from the network .

Other approaches for inter device communication may also be utilized in accordance with the systems and methods of the present disclosure. Such compatible technologies include but are not limited to induction wireless infrared wireless such as technologies operating according to specifications and protocols provided by the Infrared Data Association or IrDA or ultra wideband formats. In some embodiments one or more of the devices may be equipped with near field communication NFC transceivers that enabled the devices to directly exchange data. In still other embodiments the devices may support acoustic based data transfer. For example one device may include software components and a speaker that enable the device to broadcast data to a second mobile device as sound waves while the second mobile device may include software components and microphone that enable the second mobile device to receive the data embedded in the sound waves. Thus one or more of radio signal based data transfer e.g. BLUETOOTH light based data transfer e.g. infrared data transfer or an acoustic based data transfer e.g. sound wave embedded data may be used for inter device communication.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may employ a plurality of computing devices that are arranged for example in one or more server banks computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environment may include a plurality of computing devices that together may comprise a hosted computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environment may correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing environment for example include an authentication service and other applications services processes systems engines or functionality not discussed in detail herein. The authentication service is executed to authenticate users at the primary clients and secondary clients for access to user accounts. In some embodiments the authentication service may serve up network pages that include user interfaces for logging onto user accounts and requesting ephemeral credentials. In other embodiments the authentication service may communicate with applications executed by the primary clients and or secondary clients by way of an application programming interface API . The authentication service may correspond to an independent or federated identity provider and or may facilitate a single sign on experience for multiple different systems services etc. operated by one or more organizations.

The data stored in the data store includes for example user account data and potentially other data. The user account data corresponds to data regarding user accounts for multiple users. The user account data may include for example trusted security credentials codes application identifiers session data and or other data. The trusted security credentials may correspond to usernames passwords keys answers to knowledge based questions social security numbers biometric identification information and or other private information. In some cases the trusted security credentials may correspond to long lived security credentials. Such credentials may be expected to persist for at least a predetermined length of time or indefinitely. For instance the trusted security credentials may be assumed to be valid until the user changes them. Alternatively the trusted security credentials may be valid for a month six months or another period of time according to a predefined security policy.

The codes correspond to security credentials of an ephemeral nature that are used to authenticate primary clients and or native applications . For example the codes may include credentials such as a one time password a personal identification number a token or other types of credentials. The codes may be relatively less trusted than the trusted security credentials . For example the trusted security credentials may be user defined passwords that are intended to be long lived while the codes may be automatically generated numerical codes or dictionary words that are valid for a relatively shorter period of time. The codes may be relatively less trusted because they may be selected for ease of memorization rather than credential strength. The codes may be valid for a predetermined length of time e.g. an hour a day etc. and or may expire in response to certain events. The codes may be generated for specific primary clients and or instances of native applications and may be invalid for use by other primary clients and or native applications .

The application identifiers may include unique device identifiers unique software identifiers network addresses media access control MAC addresses serial numbers and or other types of identifiers for primary clients and or native applications . The application identifiers may be employed in order to generate codes . A code may be tied to a particular application identifier so that it is valid only for a particular primary client and or instance of a native application .

The user account data may include a list of trusted devices that a user may use in order to authenticate. The list may indicate authentication features supported local communication channels that are supported etc. for the specific devices. For example it may be determined that a user has a certain device that supports biometric authentication. The authentication service may use this information in order to require users to use the certain device with the biometric authentication feature to complete authentication.

The session data may include various state information relating to network data sessions between the primary client and the computing environment and or between the secondary client and the computing environment . The network data sessions may correspond to application sessions TCP sessions RTP sessions and or other sessions.

The primary client and the secondary client are examples of various client devices that may be coupled to the network . The primary clients and the secondary clients may each comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers digital media players microconsoles home automation systems or other devices. In one example the primary client may be a television device and the secondary client may be a mobile device. The primary client may include a display and the secondary client may include a display . The displays may comprise for example one or more devices such as liquid crystal display LCD displays gas plasma based flat panel displays organic light emitting diode OLED displays electrophoretic ink E Ink displays LCD projectors or other types of display devices etc.

The primary client may be configured to execute various applications such as a native application a browser based application and or other applications. The native application may be executed in a primary client for example to access network content served up by the computing environment and or other servers thereby rendering a user interface on the display . The native application is configured to use one or more platform specific interfaces for authenticating with the authentication service but with failover to code based linking as will be described.

The browser based application may be executed in a primary client for example to access network content served up by the computing environment and or other servers thereby rendering a user interface on the display . The browser based application may for example correspond to a browser a mobile application using web view etc. and the user interface may correspond to a network page a mobile application screen etc. The primary client may be configured to execute applications beyond the native application and the browser based application such as for example browsers mobile applications email applications social networking applications and or other applications.

The secondary client may be configured to execute various applications such as a browser based application and or other applications. The browser based application may be executed in a secondary client for example to access network content served up by the computing environment and or other servers thereby rendering a user interface on the display . The browser based application may for example correspond to a browser a mobile application using web view etc. and the user interface may correspond to a network page a mobile application screen etc. The secondary client may be configured to execute applications beyond the browser based application such as for example browsers mobile applications email applications social networking applications and or other applications. The browser based application may be the same as or different from the browser based application .

Next a general description of the operation of the various components of the networked environment is provided. To begin the native application is installed upon the primary client . The native application is configured to support certain predefined authentication approaches for authenticating with the authentication service . These authentication approaches may employ various platform specific application programming interfaces APIs to obtain authentication factors from a user. Thus the user is able to utilize a native sign in experience that is likely to be smoother than a browser based sign in experience.

However after the native application is released it may be necessary for the operators of the authentication service to modify how authentication is performed. For example security concerns may lead the operators to require answers to knowledge based questions fingerprint recognition and or other authentication factors. The installed versions of native application and or the platform specific APIs may not support the modified authentication approach. Likewise the authentication service at some point may no longer support the authentication approaches supported by the native application .

Conversely it may be that the authentication service does not support an authentication approach required by a primary client . For example a user may want to use multi factor authentication with fingerprint recognition as an authentication factor. However the authentication service may not support fingerprint recognition. Alternatively the user at the primary client may wish to authenticate the authentication service to ensure it is not a malicious party. In either scenario the authentication service may be configured with failover logic that leads to code based linking being performed.

Several approaches may be used to determine that the native application cannot authenticate. For example an authentication version identifier supplied by the authentication service to the native application as part of a handshake may be newer than a latest supported authentication version of the native application . In another example the authentication service may simply request an authentication factor that is unknown or otherwise not supported by the native application . In this regard the native application may maintain a table of supported authentication factors and compare the requested factor to those listed in the table. The authentication service may indicate in a handshake that it does not support a particular authentication factor that is required by the native application . Alternatively the authentication service may fail to indicate in a handshake that it does support a particular authentication factor that is required by the native application . In yet another example the native application may attempt authentication and may receive an error message from the authentication service indicating authentication failure but not due to incorrect credentials.

In some scenarios the native application and or the primary client generally may be unable to authenticate due to issues in establishing a secure connection between the primary client and the computing environment . Suppose that the computing environment requires a certain hardware or software configuration in order to establish a secure channel between the computing environment and the primary client e.g. a cipher suite that the primary client cannot support due to software or hardware configuration . The secure channel may be necessary before data can be transmitted over the communication channel e.g. a key used for a digital rights management DRM protection scheme . Perhaps a vulnerability was discovered after the release of the primary client and upgrading the primary client is not possible.

It could be determined whether the user has another device e.g. the secondary client that supports the mechanism for establishing a cryptographically protected communications session. The user could be directed to go to the secondary client and establish a secure channel with the computing environment . Data could then be transferred from the computing environment to the secondary client and then passed to the primary client via the local communications channel . The data may be passed via the local communications channel under the assumption that it may be more difficult for an external party to intercept due to a limited range.

If the native application determines that it cannot authenticate due to unsupported authentication approaches it is configured to fail over to a code based linking approach. In the code based linking approach the native application is configured to present a code such as a code to the user. The native application may also present a uniform resource identifier URI such as a uniform resource locator URL for supplying the code . Subsequently the browser based application or is launched to access the URL either on the primary client or on the secondary client .

The browser based application or may be authenticated with the authentication service using browser based authentication with trusted security credentials . The user may then supply the code and the authentication service may consequently authenticate the native application through which the code was presented. The authentication state of the browser based application or may then be transferred to the native application . In some cases the authentication state may be transferred from the authentication service to the native application . Alternatively the authentication state may be transferred from the browser based application or to the native application .

Although many examples of the present disclosure refer to a browser based application or it is understood that non browser based applications may be employed in some embodiments to facilitate code based linking. For example a different native application that supports the current authentication approach of the authentication service may be used to facilitate code based linking for the native application that does not support the current authentication approach. Also it is noted that the secondary client may utilize device credentials e.g. keys embedded in the secondary client to authenticate to the computing environment and or cell towers or access points. This could be used at the computing environment to select which device of potentially multiple devices that the user should use as the secondary client .

Moving now to shown is a flowchart that provides one example of the operation of a portion of the native application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the native application as described herein. As an alternative the flowchart of may be viewed as depicting an example of elements of a method implemented in the primary client according to one or more embodiments.

Beginning with box the native application receives a request to authenticate with an authentication service from a user. In some cases the native application may be configured to authenticate automatically e.g. upon start up. The native application may request one or more initial trusted security credentials from the user e.g. a username a password etc. In box the native application sends an authentication request to the authentication service via the network .

In box the native application receives an indication of an authentication approach from the authentication service . For example the indication may correspond to a version identifier an identifier of one or more authentication factors that the authentication service is requesting from the native application and or other approach indications. Based at least in part on this indication the native application determines in box whether the native application supports the authentication technique requested by the authentication service . Alternatively the native application may determine whether the authentication service supports the authentication technique requested by the native application . In some cases the authentication technique to be used may be negotiated between the native application and the authentication service . For example a particular authentication factor may be required at some interval which could be randomly selected based at least in part on an application or data that the native application is attempting to access or an amount of time that has passed since a previous code based linking.

If the requested authentication technique is supported the native application continues to box and receives one or more authentication factors from the user via a platform specific i.e. native API. In box the native application authenticates with the authentication service using the received authentication factors. In box the native application determines whether additional authentication challenges are necessary. For example after the user successfully signs in with his or her username and password the user may have to answer a knowledge based question. In some cases this may be necessary in order to access a resource having a higher level of security. If additional challenges are necessary the native application returns to box and receives an indication of the authentication approach associated with the additional challenge s . An additional check may be performed to determine whether that authentication approach is supported. Otherwise the portion of the native application ends.

If the native approach is not supported the native application moves from box to box and receives a public code and private code from the authentication service . The public code and the private code may be of the same length or different length. In some cases the public code may be shorter than the private code or encoded in a way that a user may easily remember or otherwise enter the public code in a user interface form field. For example the public code may be a five character alphanumeric string while the private code may comprise binary data of 1024 bits. Although both the public and private codes may be sent over the network the private code may be considered as private because it is not displayed to the user provided to the secondary client or provided to a browser based application or .

In box the native application presents the public code to the user. For example the native application may render this public code upon a display as text or as a machine readable identifier e.g. a QR code . Alternatively the native application may read out this public code via a text to speech interface or convey the public code to the user via another approach. The native application may also present a URI or URL to the user that corresponds to a network page in which the user may supply the public code to the authentication service . In one example the public code may be included in the URL. In one embodiment the public code may be transferred to another application such as a browser based application or using a multicast network protocol WI FI BLUETOOTH NFC etc.

In box the native application may launch a browser based application . The native application may supply the URL to the browser based application so that the browser based application will launch into the network page at the URL. Alternatively the user may launch the browser based application or either on the primary client or on the secondary client . If the user manually launches the browser based application the user may also manually enter the URL and or the public code .

In box the native application authenticates with the authentication service when the public code is provided via the browser based application or assuming that the browser based application or is successfully authenticated with the authentication service using the trusted security credentials . In one embodiment the native application may use a private code obtained as a pair to the public code in order to authenticate with the authentication service . The native application may exchange this private code for another session identifier in some embodiments. Thereafter the portion of the native application ends. As an alternative to it is noted that in some embodiments the public code may be presented via the browser based application or and received by the native application .

Referring next to shown is a flowchart that provides one example of the operation of a portion of the browser based application or according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the browser based application as described herein. As an alternative the flowchart of may be viewed as depicting an example of elements of a method implemented in the primary client or the secondary client according to one or more embodiments. Although the discussion of uses the example of a browser based application it is understood that a native application capable of authentication may be used instead to perform the code based linking on behalf of another native application that is not capable of authentication.

Beginning with box the browser based application receives a URI or URL. The URL may be provided manually by the user or automatically if the browser based application is launched by the native application . In box the browser based application requests the network page at the URL from the authentication service via the network .

In box the browser based application renders the network page which includes one or more user interface elements that elicit a code from the user. In box the browser based application obtains the code from the user via the network page. In box the browser based application submits the code to the authentication service . As an alternative to boxes the code may be included within the URL received in box and submitted in box in some embodiments.

In another embodiment the browser based application may receive the code from the native application via the local communication channel or inter process communication. The browser based application may discover the native application or vice versa using discovery and launch DIAL or another approach. The browser based application may then render the received code via a user interface while the native application also renders the received code via a user interface . The user may then confirm that the two codes match via the browser based application and this confirmation may be reported back to the authentication service to facilitate authentication of the native application .

In box the browser based application renders a network page requesting one or more authentication factors. For example the browser based application may request trusted security credentials such as a username a password a one time password biometric identifiers and so on. The browser based application obtains the authentication factors from the user in box . In box the browser based application authenticates with the authentication service using the authentication factors. It is noted that the browser based application may be authenticated prior to submitting the code in box in some examples. Thereafter the portion of the browser based application ends.

Continuing now to shown is a flowchart that provides one example of the operation of a portion of the authentication service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the authentication service as described herein. As an alternative the flowchart of may be viewed as depicting an example of elements of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the authentication service obtains an authentication request from a native application . In box the authentication service determines whether the native authentication approach is supported. Alternatively this determination may be made by the native application based at least in part on what is requested by the authentication service . The authentication service may respond with a version identifier that corresponds to an identification of a supported authentication approach.

If the native authentication approach is supported the authentication service moves to box and receives an authentication factor from the native application . The authentication service then authenticates the native application in box by comparing the received authentication factor with the stored trusted security credentials in the data store . Thereafter the portion of the authentication service ends.

If the native authentication approach is not supported the authentication service falls back to code based linking. Thus the authentication service moves from box to box and generates a code . The authentication service sends the code to the native application in box . In some cases the authentication service may send a pair of a public code and a private code to the native application via a secured channel.

In box the authentication service receives the public code from a browser based application as a confirmation. The authentication service may compare the received code with a stored code in the data store . Alternatively the authentication service may simply receive a confirmation from the browser based application without the code . For example the browser based application may receive the code from the native application via the local communication channel or inter process communication. The browser based application may then render the received code via a user interface while the native application also renders the received code via a user interface . The user may then confirm that the two codes match via the browser based application .

In box where the browser based application is not already authenticated the authentication service may request one or more authentication factors from the user via the browser based application . In box the authentication service receives the requested authentication factors from the browser based application .

In box the authentication service authenticates the browser based application upon evaluation of the received authentication factors in comparison with the stored trusted security credentials . In box the authentication service authenticates the native application possibly in response to the native application supplying the private code that matches the public code . Thereafter the portion of the authentication service ends.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . Each computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end each computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the authentication service and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

With reference to shown is a schematic block diagram of the primary client according to an embodiment of the present disclosure. The primary client includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the primary client may comprise for example at least one client computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated. A display may be coupled to the local interface .

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the native application the browser based application and potentially other applications. In addition an operating system may be stored in the memory and executable by the processor .

Referring now to both it is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and or multiple processor cores and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the authentication service the native application the browser based application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits ASICs having appropriate logic gates field programmable gate arrays FPGAs or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the authentication service the native application and the browser based application . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the authentication service the native application and the browser based application that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

Further any logic or application described herein including the authentication service the native application and the browser based application may be implemented and structured in a variety of ways. For example one or more applications described may be implemented as modules or components of a single application. Further one or more applications described herein may be executed in shared or separate computing devices or a combination thereof. For example a plurality of the applications described herein may execute in the same computing device or in multiple computing devices in the same computing environment . Additionally it is understood that terms such as application service system engine module and so on may be interchangeable and are not intended to be limiting.

Disjunctive language such as the phrase at least one of X Y or Z unless specifically stated otherwise is otherwise understood with the context as used in general to present that an item term etc. may be either X Y or Z or any combination thereof e.g. X Y and or Z . Thus such disjunctive language is not generally intended to and should not imply that certain embodiments require at least one of X at least one of Y or at least one of Z to each be present.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

