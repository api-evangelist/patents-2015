---

title: Pluggable allocation in a cloud computing system
abstract: In one embodiment, a cloud computing system provides user extensibility by providing a plugin interface for major systems. Plugin interfaces for a compute service, object service, network service, authentication and authorization service, message service, and image service are disclosed. One or more of the plugin interfaces can be used to alter the allocation of virtual to physical resources across multiple services. Compound services and smart allocation facilities are possible with user-directed modification.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09584439&OS=09584439&RS=09584439
owner: Rackspace US, Inc.
number: 09584439
owner_city: San Antonio
owner_country: US
publication_date: 20150908
---
The present application is a continuation of and claims benefit of the following U.S. non provisional patent application Ser. No. 13 478 608 which claims benefit of the following U.S. non provisional patent applications as a continuation in part Ser. No. 13 422 135 filed Mar. 16 2012 entitled Method and System for Utilizing Spare Cloud Resources Ser. No. 13 089 442 filed Apr. 19 2011 entitled Massively Scalable Object Storage System which claims priority to U.S. provisional patent application 61 450 166 filed Mar. 8 2011 entitled Massively Scalable File Storage System Ser. No. 13 270 737 filed Oct. 11 2011 entitled Method and System for Transferring a Virtual Machine which claims priority to U.S. provisional patent application 61 480 784 filed Apr. 29 2011 entitled Hypervisor Agnostic Method to Persist and Backup Virtual Machine Configurations U.S. provisional patent application 61 479 294 filed Apr. 26 2011 entitled Massively Scalable Server System and U.S. provisional patent application 61 450 166 filed Mar. 8 2011 entitled Massively Scalable File Storage System and Ser. No. 13 367 481 filed Feb. 7 2012 entitled Elastic Massively Parallel Processing Data Warehouse. The entirety of these disclosures is hereby incorporated by reference.

The present disclosure relates generally to cloud computing and more particularly to a customizable multi vendor multi tenant cloud computing system.

Cloud computing services can provide computational capacity data access networking routing and storage services via a large pool of shared resources operated by a cloud computing provider. Because the computing resources are delivered over a network cloud computing is location independent computing with all resources being provided to end users on demand with control of the physical resources separated from control of the computing resources.

Originally the term cloud came from a diagram that contained a cloud like shape to contain the services that afforded computing power that was harnessed to get work done. Much like the electrical power we receive each day cloud computing is a model for enabling access to a shared collection of computing resources networks for transfer servers for storage and applications or services for completing work. More specifically the term cloud computing describes a consumption and delivery model for IT services based on the Internet and it typically involves over the Internet provisioning of dynamically scalable and often virtualized resources. This frequently takes the form of web based tools or applications that users can access and use through a web browser as if it was a program installed locally on their own computer. Details are abstracted from consumers who no longer have need for expertise in or control over the technology infrastructure in the cloud that supports them. Most cloud computing infrastructures consist of services delivered through common centers and built on servers. Clouds often appear as single points of access for consumers computing needs and do not require end user knowledge of the physical location and configuration of the system that delivers the services.

The utility model of cloud computing is useful because many of the computers in place in data centers today are underutilized in computing power and networking bandwidth. People may briefly need a large amount of computing capacity to complete a computation for example but may not need the computing power once the computation is done. The cloud computing utility model provides computing resources on an on demand basis with the flexibility to bring it up or down through automation or with little intervention.

As a result of the utility model of cloud computing there are a number of aspects of cloud based systems that can present challenges to existing application infrastructure. First clouds should enable self service so that users can provision servers and networks with little human intervention. Second network access because computational resources are delivered over the network the individual service endpoints need to be network addressable over standard protocols and through standardized mechanisms. Third multi tenancy. Clouds are designed to serve multiple consumers according to demand and it is important that resources be shared fairly and that individual users not suffer performance degradation. Fourth elasticity. Clouds are designed for rapid creation and destruction of computing resources typically based upon virtual containers. Provisioning these different types of resources must be rapid and scale up or down based on need. Further the cloud itself as well as applications that use cloud computing resources must be prepared for impermanent fungible resources application or cloud state must be explicitly managed because there is no guaranteed permanence of the infrastructure. Fifth clouds typically provide metered or measured service like utilities that are paid for by the hour clouds should optimize resource use and control it for the level of service or type of servers such as storage or processing.

Cloud computing offers different service models depending on the capabilities a consumer may require including SaaS PaaS and IaaS style clouds. SaaS Software as a Service clouds provide the users the ability to use software over the network and on a distributed basis. SaaS clouds typically do not expose any of the underlying cloud infrastructure to the user. PaaS Platform as a Service clouds provide users the ability to deploy applications through a programming language or tools supported by the cloud platform provider. Users interact with the cloud through standardized APIs but the actual cloud mechanisms are abstracted away. Finally IaaS Infrastructure as a Service clouds provide computer resources that mimic physical resources such as computer instances network connections and storage devices. The actual scaling of the instances may be hidden from the developer but users are required to control the scaling infrastructure.

One way in which different cloud computing systems may differ from each other is in how they deal with control of the underlying hardware and privacy of data. The different approaches are sometimes referred to a public clouds private clouds hybrid clouds and multi vendor clouds. A public cloud has an infrastructure that is available to the general public or a large industry group and is likely owned by a cloud services company. A private cloud operates for a single organization but can be managed on premise or off premise. A hybrid cloud can be a deployment model as a composition of both public and private clouds or a hybrid model for cloud computing may involve both virtual and physical servers. A multi vendor cloud is a hybrid cloud that may involve multiple public clouds multiple private clouds or some mixture.

Because the flow of services provided by the cloud is not directly under the control of the cloud computing provider cloud computing requires the rapid and dynamic creation and destruction of computational units frequently realized as virtualized resources. Maintaining the reliable flow and delivery of dynamically changing computational resources on top of a pool of limited and less reliable physical servers provides unique challenges. Accordingly it is desirable to provide a better functioning cloud computing system with superior operational capabilities.

There are existing cloud computing systems being offered in the market but the underlying workings of these systems are opaque and not modifiable by the end user or by a reseller of cloud services. Each one of these systems has a number of underlying operational parameters that are fixed and considered optimal by the cloud computing provider relative to the underlying constraints of their existing system and their existing client load. To the extent that these operational parameters are changed over time the changes are meant to optimize the running of the system within a single operational context that of the cloud service provider.

It is well known however that workloads vary between individuals between customers and over time and that a general purpose architecture is frequently worse than a special purpose architecture where the operational parameters have been chosen to emphasize performance in one particular area. A closed cloud system is of necessity general purpose or at minimum more general purpose than a system modified for a single customer workload. It is possible though to use an open and pluggable system to allow end users to modify the internal parameters of the cloud system to address particularized and special purpose use cases and thus allow for both general purpose applicability and special purpose performance.

The following disclosure has reference to computing services delivered on top of a cloud architecture.

Referring now to an external view of one embodiment of a cloud computing system is illustrated. The object storage service includes a user device connected to a network such as for example a Transport Control Protocol Internet Protocol TCP IP network e.g. the Internet. The user device is coupled to the cloud computing system via one or more service endpoints . Depending on the type of cloud service provided these endpoints give varying amounts of control relative to the provisioning of resources within the cloud computing system . For example SaaS endpoint will typically only give information and access relative to the application running on the cloud storage system and the scaling and processing aspects of the cloud computing system will be obscured from the user. PaaS endpoint will typically give an abstract Application Programming Interface API that allows developers to declaratively request or command the backend storage computation and scaling resources provided by the cloud without giving exact control to the user. IaaS endpoint will typically provide the ability to directly request the provisioning of resources such as computation units typically virtual machines software defined or software controlled network elements like routers switches domain name servers etc. file or object storage facilities authorization services database services queue services and endpoints etc. In addition users interacting with an IaaS cloud are typically able to provide virtual machine images that have been customized for user specific functions. This allows the cloud computing system to be used for new user defined services without requiring specific support.

It is important to recognize that the control allowed via an IaaS endpoint is not complete. Within the cloud computing system are one more cloud controllers running what is sometimes called a cloud operating system that work on an even lower level interacting with physical machines managing the contradictory demands of the multi tenant cloud computing system . The workings of the cloud controllers are typically not exposed outside of the cloud computing system even in an IaaS context. In one embodiment the commands received through one of the service endpoints are then routed via one or more internal networks . The internal network couples the different services to each other. The internal network may encompass various protocols or services including but not limited to electrical optical or wireless connections at the physical layer Ethernet Fibre channel ATM and SONET at the MAC layer TCP UDP ZeroMQ or other services at the connection layer and XMPP HTTP AMPQ STOMP SMS SMTP SNMP or other standards at the protocol layer. The internal network is typically not exposed outside the cloud computing system except to the extent that one or more virtual networks may be exposed that control the internal routing according to various rules. The virtual networks typically do not expose as much complexity as may exist in the actual internal network but varying levels of granularity can be exposed to the control of the user particularly in IaaS services.

In one or more embodiments it may be useful to include various processing or routing nodes in the network layers and such as proxy gateway . Other types of processing or routing nodes may include switches routers switch fabrics caches format modifiers or correlators. These processing and routing nodes may or may not be visible to the outside. It is typical that one level of processing or routing nodes may be internal only coupled to the internal network whereas other types of network services may be defined by or accessible to users and show up in one or more virtual networks . Either of the internal network or the virtual networks may be encrypted or authenticated according to the protocols and services described below.

In various embodiments one or more parts of the cloud computing system may be disposed on a single host. Accordingly some of the network layers and may be composed of an internal call graph inter process communication IPC or a shared memory communication system.

Once a communication passes from the endpoints via a network layer or as well as possibly via one or more switches or processing devices it is received by one or more applicable cloud controllers . The cloud controllers are responsible for interpreting the message and coordinating the performance of the necessary corresponding services returning a response if necessary. Although the cloud controllers may provide services directly more typically the cloud controllers are in operative contact with the service resources necessary to provide the corresponding services. For example it is possible for different services to be provided at different levels of abstraction. For example a compute service may work at an IaaS level allowing the creation and control of user defined virtual computing resources. In the same cloud computing system a PaaS level object storage service may provide a declarative storage API and a SaaS level Queue service DNS service or Database service may provide application services without exposing any of the underlying scaling or computational resources. Other services are contemplated as discussed in detail below.

In various embodiments various cloud computing services or the cloud computing system itself may require a message passing system. The message routing service is available to address this need but it is not a required part of the system architecture in at least one embodiment. In one embodiment the message routing service is used to transfer messages from one component to another without explicitly linking the state of the two components. Note that this message routing service may or may not be available for user addressable systems in one preferred embodiment there is a separation between storage for cloud service state and for user data including user service state.

In various embodiments various cloud computing services or the cloud computing system itself may require a persistent storage for system state. The data store is available to address this need but it is not a required part of the system architecture in at least one embodiment. In one embodiment various aspects of system state are saved in redundant databases on various hosts or as special files in an object storage service. In a second embodiment a relational database service is used to store system state. In a third embodiment a column graph or document oriented database is used. Note that this persistent storage may or may not be available for user addressable systems in one preferred embodiment there is a separation between storage for cloud service state and for user data including user service state.

In various embodiments it may be useful for the cloud computing system to have a system controller . In one embodiment the system controller is similar to the cloud computing controllers except that it is used to control or direct operations at the level of the cloud computing system rather than at the level of an individual service.

For clarity of discussion above only one user device has been illustrated as connected to the cloud computing system and the discussion generally referred to receiving a communication from outside the cloud computing system routing it to a cloud controller and coordinating processing of the message via a service the infrastructure described is also equally available for sending out messages. These messages may be sent out as replies to previous communications or they may be internally sourced. Routing messages from a particular service to a user device is accomplished in the same manner as receiving a message from user device to a service just in reverse. The precise manner of receiving processing responding and sending messages is described below with reference to the various discussed service embodiments. One of skill in the art will recognize however that a plurality of user devices may and typically will be connected to the cloud computing system and that each element or set of elements within the cloud computing system is replicable as necessary. Further the cloud computing system whether or not it has one endpoint or multiple endpoints is expected to encompass embodiments including public clouds private clouds hybrid clouds and multi vendor clouds.

Each of the user device the cloud computing system the endpoints the network switches and processing nodes the cloud controllers and the cloud services typically include a respective information processing system a subsystem or a part of a subsystem for executing processes and performing operations e.g. processing or communicating information . An information processing system is an electronic device capable of processing executing or otherwise handling information such as a computer. shows an information processing system that is representative of one of or a portion of the information processing systems described above.

Referring now to diagram shows an information processing system configured to host one or more virtual machines coupled to a network . The network could be one or both of the networks and described above. An information processing system is an electronic device capable of processing executing or otherwise handling information. Examples of information processing systems include a server computer a personal computer e.g. a desktop computer or a portable computer such as for example a laptop computer a handheld computer and or a variety of other information handling systems known in the art. The information processing system shown is representative of one of or a portion of the information processing systems described above.

The information processing system may include any or all of the following a a processor for executing and otherwise processing instructions b one or more network interfaces e.g. circuitry for communicating between the processor and other devices those other devices possibly located across the network c a memory device e.g. FLASH memory a random access memory RAM device or a read only memory ROM device for storing information e.g. instructions executed by processor and data operated upon by processor in response to such instructions . In some embodiments the information processing system may also include a separate computer readable medium operably coupled to the processor for storing information and instructions as described further below.

In one embodiment there is more than one network interface so that the multiple network interfaces can be used to separately route management production and other traffic. In one exemplary embodiment an information processing system has a management interface at 1 GB s a production interface at 10 GB s and may have additional interfaces for channel bonding high availability or performance. An information processing device configured as a processing or routing node may also have an additional interface dedicated to public Internet traffic and specific circuitry or resources necessary to act as a VLAN trunk.

In some embodiments the information processing system may include a plurality of input output devices which are operably coupled to the processor for inputting or outputting information such as a display device a print device or other electronic circuitry for performing other operations of the information processing system known in the art.

With reference to the computer readable media including both memory device and secondary computer readable medium the computer readable media and the processor are structurally and functionally interrelated with one another as described below in further detail and information processing system of the illustrative embodiment is structurally and functionally interrelated with a respective computer readable medium similar to the manner in which the processor is structurally and functionally interrelated with the computer readable media and . As discussed above the computer readable media may be implemented using a hard disk drive a memory device and or a variety of other computer readable media known in the art and when including functional descriptive material data structures are created that define structural and functional interrelationships between such data structures and the computer readable media and other aspects of the system . Such interrelationships permit the data structures functionality to be realized. For example in one embodiment the processor reads e.g. accesses or copies such functional descriptive material from the network interface the computer readable media onto the memory device of the information processing system and the information processing system more particularly the processor performs its operations as described elsewhere herein in response to such material stored in the memory device of the information processing system . In addition to reading such functional descriptive material from the computer readable medium the processor is capable of reading such functional descriptive material from or through the network . In one embodiment the information processing system includes at least one type of computer readable media that is non transitory. For explanatory purposes below singular forms such as computer readable medium memory and disk are used but it is intended that these may refer to all or any portion of the computer readable media available in or to a particular information processing system without limiting them to a specific location or implementation.

The information processing system includes a hypervisor . The hypervisor may be implemented in software as a subsidiary information processing system or in a tailored electrical circuit or as software instructions to be used in conjunction with a processor to create a hardware software combination that implements the specific functionality described herein. To the extent that software is used to implement the hypervisor it may include software that is stored on a computer readable medium including the computer readable medium . The hypervisor may be included logically below a host operating system as a host itself as part of a larger host operating system or as a program or process running above or on top of a host operating system. Examples of hypervisors include Xenserver KVM VMware Microsoft s Hyper V and emulation programs such as QEMU.

The hypervisor includes the functionality to add remove and modify a number of logical containers associated with the hypervisor. Zero one or many of the logical containers contain associated operating environments . The logical containers can implement various interfaces depending upon the desired characteristics of the operating environment. In one embodiment a logical container implements a hardware like interface such that the associated operating environment appears to be running on or within an information processing system such as the information processing system . For example one embodiment of a logical container could implement an interface resembling an 86 86 64 ARM or other computer instruction set with appropriate RAM busses disks and network devices. A corresponding operating environment for this embodiment could be an operating system such as Microsoft Windows Linux Linux Android or Mac OS X. In another embodiment a logical container implements an operating system like interface such that the associated operating environment appears to be running on or within an operating system. For example one embodiment of this type of logical container could appear to be a Microsoft Windows Linux or Mac OS X operating system. Another possible operating system includes an Android operating system which includes significant runtime functionality on top of a lower level kernel. A corresponding operating environment could enforce separation between users and processes such that each process or group of processes appeared to have sole access to the resources of the operating system. In a third environment a logical container implements a software defined interface such a language runtime or logical process that the associated operating environment can use to run and interact with its environment. For example one embodiment of this type of logical container could appear to be a Java Dalvik Lua Python or other language virtual machine. A corresponding operating environment would use the built in threading processing and code loading capabilities to load and run code. Adding removing or modifying a logical container may or may not also involve adding removing or modifying an associated operating environment . For ease of explanation below these operating environments will be described in terms of an embodiment as Virtual Machines or VMs but this is simply one implementation among the options listed above.

In one or more embodiments a VM has one or more virtual network interfaces . How the virtual network interface is exposed to the operating environment depends upon the implementation of the operating environment. In an operating environment that mimics a hardware computer the virtual network interface appears as one or more virtual network interface cards. In an operating environment that appears as an operating system the virtual network interface appears as a virtual character device or socket. In an operating environment that appears as a language runtime the virtual network interface appears as a socket queue message service or other appropriate construct. The virtual network interfaces VNIs may be associated with a virtual switch Vswitch at either the hypervisor or container level. The VNI logically couples the operating environment to the network and allows the VMs to send and receive network traffic. In one embodiment the physical network interface card is also coupled to one or more VMs through a Vswitch.

In one or more embodiments each VM includes identification data for use naming interacting or referring to the VM. This can include the Media Access Control MAC address the Internet Protocol IP address and one or more unambiguous names or identifiers.

In one or more embodiments a volume is a detachable block storage device. In some embodiments a particular volume can only be attached to one instance at a time whereas in other embodiments a volume works like a Storage Area Network SAN so that it can be concurrently accessed by multiple devices. Volumes can be attached to either a particular information processing device or a particular virtual machine so they are or appear to be local to that machine. Further a volume attached to one information processing device or VM can be exported over the network to share access with other instances using common file sharing protocols. In other embodiments there are areas of storage declared to be local storage. Typically a local storage volume will be storage from the information processing device shared with or exposed to one or more operating environments on the information processing device. Local storage is guaranteed to exist only for the duration of the operating environment recreating the operating environment may or may not remove or erase any local storage associated with that operating environment.

Turning now to a simple network operating environment for a cloud controller or cloud service is shown. The network operating environment includes multiple information processing systems each of which correspond to a single information processing system as described relative to including a hypervisor zero or more logical containers and zero or more operating environments . The information processing systems are connected via a communication medium typically implemented using a known network protocol such as Ethernet Fibre Channel Infiniband or IEEE 1394. For ease of explanation the network operating environment will be referred to as a cluster group or zone of operating environments. The cluster may also include a cluster monitor and a network routing element . The cluster monitor and network routing element may be implemented as hardware as software running on hardware or may be implemented completely as software. In one implementation one or both of the cluster monitor or network routing element is implemented in a logical container using an operating environment as described above. In another embodiment one or both of the cluster monitor or network routing element is implemented so that the cluster corresponds to a group of physically co located information processing systems such as in a rack row or group of physical machines.

The cluster monitor provides an interface to the cluster in general and provides a single point of contact allowing someone outside the system to query and control any one of the information processing systems the logical containers and the operating environments . In one embodiment the cluster monitor also provides monitoring and reporting capabilities.

The network routing element allows the information processing systems the logical containers and the operating environments to be connected together in a network topology. The illustrated tree topology is only one possible topology the information processing systems and operating environments can be logically arrayed in a ring in a star in a graph or in multiple logical arrangements through the use of vLANs.

In one embodiment the cluster also includes a cluster controller . The cluster controller is outside the cluster and is used to store or provide identifying information associated with the different addressable elements in the cluster specifically the cluster generally addressable as the cluster monitor the cluster network router addressable as the network routing element each information processing system and with each information processing system the associated logical containers and operating environments .

The cluster controller is outside the cluster and is used to store or provide identifying information associated with the different addressable elements in the cluster specifically the cluster generally addressable as the cluster monitor the cluster network router addressable as the network routing element each information processing system and with each information processing system the associated logical containers and operating environments . In one embodiment the cluster controller includes a registry of VM information . In a second embodiment the registry is associated with but not included in the cluster controller .

In one embodiment the cluster also includes one or more instruction processors . In the embodiment shown the instruction processor is located in the hypervisor but it is also contemplated to locate an instruction processor within an active VM or at a cluster level for example in a piece of machinery associated with a rack or cluster. In one embodiment the instruction processor is implemented in a tailored electrical circuit or as software instructions to be used in conjunction with a processor to create a hardware software combination that implements the specific functionality described herein. To the extent that one embodiment includes computer executable instructions those instructions may include software that is stored on a computer readable medium. Further one or more embodiments have associated with them a buffer . The buffer can take the form of data structures a memory a computer readable medium or an off script processor facility. For example one embodiment uses a language runtime as an instruction processor . The language runtime can be run directly on top of the hypervisor as a process in an active operating environment or can be run from a low power embedded processor. In a second embodiment the instruction processor takes the form of a series of interoperating but discrete components some or all of which may be implemented as software programs. For example in this embodiment an interoperating bash shell gzip program an rsync program and a cryptographic accelerator chip are all components that may be used in an instruction processor . In another embodiment the instruction processor is a discrete component using a small amount of flash and a low power processor such as a low power ARM processor. This hardware based instruction processor can be embedded on a network interface card built into the hardware of a rack or provided as an add on to the physical chips associated with an information processing system . It is expected that in many embodiments the instruction processor will have an integrated battery and will be able to spend an extended period of time without drawing current. Various embodiments also contemplate the use of an embedded Linux or Linux Android environment.

In the disclosure that follows the information processing devices as described relative to and the clusters as described relative to are used as underlying infrastructure to build and administer various cloud services. Except where noted specifically either a single information processing device or a cluster can be used interchangeably to implement a single node service or controller. Where a plurality of resources are described such as a plurality of storage nodes or a plurality of compute nodes the plurality of resources can be implemented as a plurality of information processing devices as a one to one relationship of information processing devices logical containers and operating environments or in an M N relationship of information processing devices to logical containers and operating environments.

Various aspects of the services implemented in the cloud computing system may be referred to as virtual machines or virtual devices as described above those refer to a particular logical container and operating environment configured to perform the service described. The term instance is sometimes used to refer to a particular virtual machine running inside the cloud computing system. An instance type describes the compute memory and storage capacity of particular VM instances.

In various embodiments groups of resources information processing systems logical containers operating environments users accounts etc. may be organized into zones. A zone is defined as a group of one or more resources that share one or more common characteristics and are grouped together to achieve some function. For example one example of a zone is an availability zone which is a group of resources subject to a correlated loss of access or data as a result of a particular event. For example a group of operating environments that use a common underlying network connection power connection or computer readable medium is subject to loss of access to its stored objects as a result of a failure of one of these resources. A group of resources in the same cluster may suffer a loss of access if the cluster is contained within a single physical building.

Zones may overlap and may be defined for different reasons. For example a group of resources that share a computer readable medium may be defined to be in one zone. A plurality of information processing devices and their underlying hypervisors logical containers and operating environments in a given storage rack or cabinet may be defined to be in a zone A plurality of information processing devices and their underlying hypervisors logical containers and operating environments coupled to the same networking switch may be defined to be in a zone and a plurality of information processing devices and their underlying hypervisors logical containers and operating environments in a given datacenter may be defined to be in a zone.

In another embodiment a zone is defined by the availability of specialized hardware or by hardware of a certain class. For example a plurality of information processing devices and their underlying hypervisors logical containers and operating environments that have access to high throughput and low latency storage like a solid state disk may be defined to be in a zone. Zones may be organized to reflect differing amounts of memory processor speeds age of installation type of operating system or hypervisor or any other underlying difference in platforms.

One of skill in the art will recognize that the examples of zones provided above are not limiting and a variety of possible organizational schemes fall into the scope of the present disclosure.

Within the architecture described above various services are provided and different capabilities can be included through a plug in architecture. Although specific services and plugins are detailed below these disclosures are intended to be representative of the services and plugins available for integration across the entire cloud computing system .

Referring now to a diagram of an IaaS style network service is shown according to one embodiment. The network has one or more physical edge routers which connect to the broader Internet. These edge routers are connected to an underlying physical distribution network . The implementation of the physical distribution network may encompass various protocols or services including but not limited to electrical optical or wireless connections at the physical layer Ethernet Fibre channel ATM and SONET at the MAC layer MPLS between layers and and TCP UDP ZeroMQ or other services at the connection layer. The physical distribution network corresponds to the internal network described relative to . The physical distribution network is connected to physical interfaces at each physical information processing system . The physical information processing systems correspond to the information processing systems as described relative to with a hypervisor and operating environments within logical containers each of which with one or more virtual network interfaces VNIs .

On top of the physical distribution network is a virtual network service defining one or more virtual networks and virtual network devices. The virtual network service corresponds to the virtual network as describe relative to . The virtual network service defines packet flows between hosts in the network and is used to logically route packets independent of the underlying physical infrastructure. In one embodiment the virtual network service uses virtual routers and to define and manage these flows. Each virtual router both virtual routers and have an API that allows the routing tables packet filters and underlying logical network fabric to be remotely reconfigured. The virtual routers may be located in the physical edge routers or within one of the information processing systems within the hypervisor within a particular operating environment or at an outside network routing controller . These virtual network devices can work together to present multiple logical connections and networks that are independent from each other even though they are running on the same physical distribution network . Information from a particular flow is tunneled or bridged from one physical network segment to another or is kept logically connected by associating it with an ATM like circuit or an MPLS style label.

The virtual network service API allows for creation and management of virtual networks each of which can have one or more ports. A port on a virtual network can be attached to a network interface where a network interface is anything which can source traffic such as physical interface or one of the VNIs .

The API allows users of the network as well as cloud administrators to declaratively define a network architecture including a series of virtual connections routing rules and filters. The VNIs are then able to interact with the virtual network in the same way as a physical network without needing to also configure the underlying physical distribution network . Adapters are used to bridge between the virtual network devices and the physical devices without exposing the way in which the physical devices are actually connected.

In one embodiment this is done by using programmable kernel bridges. A network device is instantiated within an operating system to communicate with physical interface operating over a defined protocol such as Ethernet or MPLS. A VNI is also defined by the operating system. While the VNI will often be associated with an operating environment logical container or virtual machine those of skill in the art will recognize that VNIs can be created as pure abstractions to help administer or logically control the network flows. Finally one or more kernel bridges are defined routing the layer packets from the physical network interface to one or more VNIs . The raw packets arriving on the physical interface are routed according to the established bridges and then used by the operating environments hypervisor or physical device.

Because the connections across the kernel bridges are software defined and completely arbitrary the routing fabric associated with a particular physical network interface can be reconfigured by changing the bridges associated with that interface. On a more fine grained level the routing between VNIs is also software defined making the flows across the VNIs similarly malleable to software manipulation via the API .

In a further embodiment an entire flow coming off of a physical network interface or a flow coming off of a VNI can be filtered diverted or inspected independently. In this way advanced networking functionality such as load balancing firewalls layer routing and geographic routing can be accomplished in a multi tenant environment. One implementation of this uses standard networking utilities. The physical network device and the VNIs while different to the kernel expose a standard network or socket API to upper level layers and applications. Accordingly a standard firewall is able to filter the packets and send them on without being aware that the packets being filtered are arriving over a virtual network interface instead of a physical one.

In another embodiment the packet routing logic within the cloud system as a whole can be centrally directed using network routing controller . In standard networks each router has an independent routing table and seeks to find the best route for each packet that arrives by examining its existing routing tables and probing the network around it using various protocols adapted for that purpose. The network service can work identically to standard networks in this respect but the ability to dynamically sense and control the flows using API allows routing decisions to be made centrally when that makes more sense. Network routing controller may for example control the routing across virtual routers and to direct traffic in a way that may not be locally optimal but provides for greater global throughput and higher overall utilization.

To accommodate these use cases one embodiment of the virtual network service provides a plug in architecture allowing entry routing controlled by virtual router overall network routing controlled by the network routing controller or by the combination of virtual routers or any particular router to have a tenant defined flow routing and filtering policy. For example one plugin allows a tenant specific security policy to be implemented on a flow. In this embodiment a virtual router is instantiated for use by a particular user the user router . The user router can be implemented in the hypervisor or in a distinct operating environment . The user router has an API just like the other virtual routers . In one embodiment routing rules can be set using the API . In a second embodiment a series of rules can be provided and loaded by the user router . This loadable ruleset can be implemented using a dynamically loadable or runnable program that has a series of expected inputs and provides its information on a defined series of outputs. In one embodiment these are stdin and stdout. In a second embodiment these are provided as function calls within a program module. When a packet arrives at edge router the virtual router identifies it as being logically addressed to a particular operating environment associated with the user and routes it to flow to the defined user router instantiated for the customer by way of the physical interface and possibly other virtual routers along the way. When the packet arrives at user router the tenant defined rules and filters are applied to the packet and the flow is stopped edited or redirected accordingly.

A second embodiment allows QoS policies to be implemented on a flow. As noted above a centralized routing policy allows global maximization of network utilization. In this embodiment a user defined network routing controller the user controller is defined or a plug in or ruleset is loaded into a system wide network routing controller using the same functionality described above. When a high priority packet arrives or is sent the user controller can route other packets on less speedy routes and keep the most direct route free for high priority packets. In this way the delay on best effort packets is due mostly to a higher number of hops as opposed to rate limiting each individual router either physical or virtual is operating at its peak capacity. The load is managed by virtually spreading out the number of routers handling packets rather than by limiting the numbers of packets being routed at a particular node.

Referring now to a network service implemented VLAN available to one embodiment of the system is shown. The network is one embodiment of a virtual network as discussed relative to and is implemented on top of the internal network layer . A particular node is connected to the virtual network through a virtual network interface operating through physical network interface . The VLANs VSwitches VPNs and other pieces of network hardware real or virtual are may be network routing elements or may serve another function in the communications medium .

In one embodiment the cloud computing system uses both fixed IPs and floating IPs to address virtual machines. Fixed IPs are assigned to an instance on creation and stay the same until the instance is explicitly terminated. Floating IPs are IP addresses that can be dynamically associated with an instance. A floating IP address can be disassociated and associated with another instance at any time.

Different embodiments include various strategies for implementing and allocating fixed IPs including flat mode a flat DHCP mode and a VLAN DHCP mode.

In one embodiment fixed IP addresses are managed using a flat Mode. In this embodiment an instance receives a fixed IP from a pool of available IP addresses. All instances are attached to the same bridge by default. Other networking configuration instructions are placed into the instance before it is booted or on boot.

In another embodiment fixed IP addresses are managed using a flat DHCP mode. Flat DHCP mode is similar to the flat mode in that all instances are attached to the same bridge. Instances will attempt to bridge using the default Ethernet device or socket. Instead of allocation from a fixed pool a DHCP server listens on the bridge and instances receive their fixed IPs by doing a dhcpdiscover.

Turning now to one embodiment using VLAN DHCP mode there are two groups of off local network users the private users and the public internet users . To respond to communications from the private users and the public users the network includes three nodes network node private node and public node . The nodes include one or more virtual machines or virtual devices such as DNS DHCP server and virtual router on network node VPN and private VM on private node and public VM on public node .

In one embodiment VLAN DHCP mode requires a switch that supports host managed VLAN tagging. In one embodiment there is a VLAN and bridge for each project or group. In the illustrated embodiment there is a VLAN associated with a particular project. The project receives a range of private IP addresses that are only accessible from inside the VLAN. and assigns an IP address from this range to private node as well as to a VNI in the virtual devices in the VLAN. In one embodiment DHCP server is running on a VM that receives a static VLAN IP address at a known address and virtual router VPN private VM and public VM all receive private IP addresses upon request to the DHCP server running on the DHCP server VM. In addition the DHCP server provides a public IP address to the virtual router and optionally to the public VM . In a second embodiment the DHCP server is running on or available from the virtual router and the public IP address of the virtual router is used as the DHCP address.

In an embodiment using VLAN DHCP mode there is a private network segment for each project s or group s instances that can be accessed via a dedicated VPN connection from the Internet. As described below each VLAN project or group gets its own VLAN network bridge and subnet. In one embodiment subnets are specified by the network administrator and assigned dynamically to a project or group when required. A DHCP Server is started for each VLAN to pass out IP addresses to VM instances from the assigned subnet. All instances belonging to the VLAN project or group are bridged into the same VLAN. In this fashion network traffic between VM instances belonging to the same VLAN is always open but the system can enforce isolation of network traffic between different projects by enforcing one VLAN per project.

As shown in VLAN DHCP mode includes provisions for both private and public access. For private access shown by the arrows to and from the private users cloud users create an access keypair as described further below for access to the virtual private network through the gateway VPN . From the VPN both the private VM and the public VM are accessible via the private IP addresses valid on the VLAN.

Public access is shown by the arrows to and from the public users cloud . Communications that come in from the public users cloud arrive at the virtual router and are subject to network address translation NAT to access the public virtual machine via the bridge . Communications out from the private VM are source NATted by the bridge so that the external source appears to be the virtual router . If the public VM does not have an externally routable address communications out from the public VM may be source NATted as well.

In one embodiment of VLAN DHCP mode the second IP in each private network is reserved for the VPN instance . This gives a consistent IP to the instance so that forwarding rules can be more easily created. The network for each project is given a specific high numbered port on the public IP of the network node . This port is automatically forwarded to the appropriate VPN port on the VPN .

In one embodiment each group or project has its own certificate authority CA . The CA is used to sign the certificate for the VPN and is also passed to users on the private users cloud . When a certificate is revoked a new Certificate Revocation List CRL is generated. The VPN will block revoked users from connecting to the VPN if they attempt to connect using a revoked certificate.

In a project VLAN organized similarly to the embodiment described above the project has an independent RFC IP space public IP via NAT has no default inbound network access without public NAT has limited controllable outbound network access limited controllable access to other project segments and VPN access to instance and cloud APIs. Further there is a DMZ segment for support services allowing project metadata and reporting to be provided in a secure manner.

In one embodiment VLANs are segregated using 802.1q VLAN tagging in the switching layer but other tagging schemes such as 802.1ad MPLS or frame tagging are also contemplated. The flows are defined by the virtual network as described relative to so the underlying implementation can be chosen independent of the logical virtual network on top. Network hosts create VLAN specific interfaces and bridges as required using a user router .

In one embodiment private VM has per VLAN interfaces and bridges created as required. These do not have IP addresses in the host to protect host access. Access is provided via routing table entries created per project and instance to protect against IP MAC address spoofing and ARP poisoning.

Those of skill in the art will note that the VPN and VLAN functionality described relative to can appear to be configured and provisioned as in a legacy network or can be completely implemented virtually using plugins virtual routers and centralized routing. The underlying implementation is transparent to the consumer of the network services. Other plugin implementations are defined similarly load balancing can be dynamically adjusted based upon actual load failover or service scaling can be defined in the network and can occur transparently. Various services are envisioned including basic network connectivity network packet filtering IP address management load balancing QoS layer routing VLANs L in L and other layer tunneling advanced security services and geo routing. Multiple plugins can be combined to provide layered capabilities with each plugin service being defined within a separate segment of the network for visibility and debuggability.

Between the various virtual machines and virtual devices it may be necessary to have a reliable messaging infrastructure. In various embodiments a message queuing service is used for both local and remote communication so that there is no requirement that any of the services exist on the same physical machine. Various existing messaging infrastructures are contemplated including AMQP ZeroMQ STOMP and XMPP. Note that this messaging system may or may not be available for user addressable systems in one preferred embodiment there is a separation between internal messaging services and any messaging services associated with user data. The messaging service may run alongside or on top of the network service described relative to

In one embodiment the message service sits between various components and allows them to communicate in a loosely coupled fashion. This can be accomplished using Remote Procedure Calls RPC hereinafter to communicate between components built atop either direct messages and or an underlying publish subscribe infrastructure. In a typical embodiment it is expected that both direct and topic based exchanges are used. This allows for decoupling of the components full asynchronous communications and transparent balancing between equivalent components. In some embodiments calls between different APIs can be supported over the distributed system by providing an adapter class which takes care of marshalling and unmarshalling of messages into function calls.

In one embodiment a cloud controller or the applicable cloud service creates two queues at initialization time one that accepts node specific messages and another that accepts generic messages addressed to any node of a particular type. This allows both specific node control as well as orchestration of the cloud service without limiting the particular implementation of a node. In an embodiment in which these message queues are bridged to an API the API can act as a consumer server or publisher.

Turning now to one implementation of a message service is shown at reference number . For simplicity of description shows the message service when a single instance is deployed and shared in the cloud computing system but the message service can be either centralized or fully distributed.

In one embodiment the message service keeps traffic associated with different queues or routing keys separate so that disparate services can use the message service without interfering with each other. Accordingly the message queue service may be used to communicate messages between network elements between cloud services between cloud controllers between network elements or between any group of sub elements within the above. More than one message service may be used and a cloud service may use its own message service as required.

For clarity of exposition access to the message service will be described in terms of Invokers and Workers but these labels are purely expository and are not intended to convey a limitation on purpose in some embodiments a single component such as a VM may act first as an Invoker then as a Worker the other way around or simultaneously in each role. An Invoker is a component that sends messages in the system via two operations 1 an RPC Remote Procedure Call directed message and ii an RPC broadcast. A Worker is a component that receives messages from the message system and replies accordingly.

In one embodiment there is a message server including one or more exchanges . In a second embodiment the message system is brokerless and one or more exchanges are located at each client. The exchanges act as internal message routing elements so that components interacting with the message service can send and receive messages. In one embodiment these exchanges are subdivided further into a direct exchange and a topic exchange . An exchange is a routing structure or system that exists in a particular context. In a currently preferred embodiment multiple contexts can be included within a single message service with each one acting independently of the others. In one embodiment the type of exchange such as a direct exchange vs. topic exchange determines the routing policy. In a second embodiment the routing policy is determined via a series of routing rules evaluated by the exchange via a plugin service described further below.

The direct exchange is a routing element created during or for RPC directed message operations. In one embodiment there are many instances of a direct exchange that are created as needed for the message service . In a further embodiment there is one direct exchange created for each RPC directed message received by the system.

The topic exchange is a routing element created during or for RPC directed broadcast operations. In one simple embodiment every message received by the topic exchange is received by every other connected component. In a second embodiment the routing rule within a topic exchange is described as publish subscribe wherein different components can specify a discriminating function and only topics matching the discriminator are passed along. In one embodiment there are many instances of a topic exchange that are created as needed for the message service . In one embodiment there is one topic based exchange for every topic created in the cloud computing system. In a second embodiment there are a set number of topics that have pre created and persistent topic exchanges

Within one or more of the exchanges it may be useful to have a queue element . A queue is a message stream messages sent into the stream are kept in the queue until a consuming component connects to the queue and fetches the message. A queue can be shared or can be exclusive. In one embodiment queues with the same topic are shared amongst Workers subscribed to that topic.

In a typical embodiment a queue will implement a FIFO policy for messages and ensure that they are delivered in the same order that they are received. In other embodiments however a queue may implement other policies such as LIFO a priority queue highest priority messages are delivered first or age oldest objects in the queue are delivered first or other configurable delivery policies. In other embodiments a queue may or may not make any guarantees related to message delivery or message persistence.

In one embodiment element is a topic publisher. A topic publisher is created instantiated or awakened when an RPC directed message or an RPC broadcast operation is executed this object is instantiated and used to push a message to the messages system. Every publisher connects always to the same topic based exchange its life cycle is limited to the message delivery.

In one embodiment element is a direct consumer. A direct consumer is created instantiated or awakened if an RPC directed message operation is executed this component is instantiated and used to receive a response message from the queuing system. Every direct consumer connects to a unique direct based exchange via a unique exclusive queue identified by a UUID or other unique name. The life cycle of the direct consumer is limited to the message delivery. In one embodiment the exchange and queue identifiers are included the message sent by the topic publisher for RPC directed message operations.

In one embodiment element is a topic consumer. In one embodiment a topic consumer is created instantiated or awakened at system start. In a second embodiment a topic consumer is created instantiated or awakened when a topic is registered with the message system . In a third embodiment a topic consumer is created instantiated or awakened at the same time that a Worker or Workers are instantiated and persists as long as the associated Worker or Workers have not been destroyed. In this embodiment the topic consumer is used to receive messages from the queue and it invokes the appropriate action as defined by the Worker role. A topic consumer connects to the topic based exchange either via a shared queue or via a unique exclusive queue. In one embodiment every Worker has two associated topic consumers one that is addressed only during an RPC broadcast operations and it connects to a shared queue whose exchange key is defined by the topic and the other that is addressed only during an RPC directed message operations connected to a unique queue whose with the exchange key is defined by the topic and the host.

In one embodiment element is a direct publisher. In one embodiment a direct publisher is created instantiated or awakened for RPC directed message operations and it is instantiated to return the message required by the request response operation. The object connects to a direct based exchange whose identity is dictated by the incoming message.

Turning now to one embodiment of the process of sending an RPC directed message is shown relative to the elements of the message system as described relative to . At step a topic publisher is instantiated. At step the topic publisher sends a message to an exchange . At step a direct consumer is instantiated to wait for the response message. At step the message is dispatched by the exchange . At step the message is fetched by the topic consumer dictated by the routing key either by topic or by topic and host . At step the message is passed to a Worker associated with the topic consumer . If needed at step a direct publisher is instantiated to send a response message via the message system . At step the direct publisher sends a message to an exchange . At step the response message is dispatched by the exchange . At step the response message is fetched by the direct consumer instantiated to receive the response and dictated by the routing key. At step the message response is passed to the Invoker.

Turning now to one embodiment of the process of sending an RPC broadcast message is shown relative to the elements of the message system as described relative to . At step a topic publisher is instantiated. At step the topic publisher sends a message to an exchange . At step the message is dispatched by the exchange . At step the message is fetched by a topic consumer dictated by the routing key either by topic or by topic and host . At step the message is passed to a Worker associated with the topic consumer .

In some embodiments a response to an RPC broadcast message can be requested. In that case the process follows the steps outlined relative to to return a response to the Invoker.

As noted above in one embodiment the routing policy is determined via a series of routing rules evaluated by the exchange via a plugin service. Unlike the network service the message service is already software defined so it is not necessary to create pseudo hardware ports to bridge the physical virtual gap. Instead the routing functions of the message service can be directly accessed or modified using an API and or a plugin interface. In one embodiment a plugin is implemented as a series of loadable and executable rules that can be provided to the message service and run by the direct exchange or the topic exchange as part of its routing. In one embodiment this loadable ruleset can be implemented using a dynamically loadable or runnable program that has a series of expected inputs and provides its information on a defined series of outputs. In one embodiment these are stdin and stdout. In a second embodiment these are provided as function calls within a program module.

In one embodiment the plugin interface is a messaging device that implements a particular messaging pattern. For example one embodiment uses a forwarding device. This is particularly useful in a cloud architecture where the endpoints of a message are relatively dynamic and there may not be a stable connection point. This plugin controls the routing of messages in a queue and passes messages from one possibly dynamic messaging endpoint to another. Another possible plugin device embodiment implements a pipeline style messaging architecture. Messages arriving at one end of the device are sent to one or more downstream Workers where the messages can be processed in parallel instead of serially. A third embodiment of a plugin device is a load balancer.

In the image below we can see such a device being used in this situation both the client and the server initialize a connection to the forwarder which binds to two different ports. Using such a device will remove the need of extra application logic as you will not need to maintain a list of connected peers.

Because many aspects of the cloud computing system do not allow direct access to the underlying hardware or services many aspects of the cloud computing system are handled declaratively through rule based computing. Rule based computing organizes statements into a data model that can be used for deduction rewriting and other inferential or transformational tasks. The data model can then be used to represent some problem domain and reason about the objects in that domain and the relations between them. In one embodiment one or more controllers or services have an associated rule processor that performs rule based deduction inference and reasoning. Rule engines are particularly applicable as a plugin interface where particular outcome can be presented either as the outcome of a series of rules provided by an end user or as the output of a black box that takes one or more defined inputs and returns an output.

Rule Engines can be implemented similarly to script processors as described relative to and may be implemented as a sub module of a script processor where needed. In other embodiments Rule Engines can be implemented as discrete components for example as a tailored electrical circuit or as software instructions to be used in conjunction with a hardware processor to create a hardware software combination that implements the specific functionality described herein. To the extent that one embodiment includes computer executable instructions those instructions may include software that is stored on a computer readable medium. Further one or more embodiments have associated with them a buffer. The buffer can take the form of data structures a memory a computer readable medium or an off rule engine facility. For example one embodiment uses a language runtime as a rule engine running as a discrete operating environment as a process in an active operating environment or can be run from a low power embedded processor. In a second embodiment the rule engine takes the form of a series of interoperating but discrete components some or all of which may be implemented as software programs. In another embodiment the rule engine is a discrete component using a small amount of flash and a low power processor such as a low power ARM processor.

One common need for cloud computing systems is an authentication and authorization system. Turning now to one exemplary authentication authn and authorization authz system is shown at . The authn authz system shown at is exemplary only and can be used in several different aspects within a cloud computing system. For example one embodiment uses a single authn authz system for the entire cloud computing platform including all subsidiary services. Another embodiment has separate authn authz services for each subsidiary service. A third embodiment has a split authn authz service with authn being handled globally so that user project tenant and account details are consistent but allowing authz to be handled within each subsidiary service so that the privileges granted are logically and physically separable. A further embodiment has multiple authn authz services where there are one or more authn authz services that are used to mediate the authentication and authorization of users to interact with the cloud computing platform and its subsidiary components and one or more authn authz services that are tenant specific and used to control and expose internal virtual cloud resources in a controlled fashion. Rule based access controls govern the use and interactions of these logical entities.

In a preferred embodiment a role based computing system is a system in which identities and resources are managed by aggregating them into roles based on job functions physical location legal controls and other criteria. These roles can be used to model organizational structures manage assets or organize data. By arranging roles and the associated rules into graphs or hierarchies these roles can be used to reason about and manage various resources.

In one application role based strategies have been used to form a security model called Role Based Access Control RBAC . RBAC associates special rules called permissions with roles each role is granted only the minimum permissions necessary for the performance of the functions associated with that role. Identities are assigned to roles giving the users and other entities the permissions necessary to accomplish job functions. RBAC has been formalized mathematically by NIST and accepted as a standard by ANSI. American National Standard 359 2004 is the information technology industry consensus standard for RBAC and is incorporated herein by reference in its entirety.

In a preferred embodiment a user is defined as an entity that will act in one or more roles. A user is typically associated with an internal or external entity that will interact with the cloud computing system in some respect. A user can have multiple roles simultaneously. In one embodiment of the system a user s roles define which API commands that user can perform.

Although the user construct may sometimes represent a physical human being there is no limitation that a user must be a person. Rather a user may be a person system or service who interacts with the cloud computing system and is associable with a distinct identity. The authn authz service validates requests and API calls with reference to the declared user. No particular implementation of the user construct is required users may be locally unique within a defined realm or globally unique within the cloud computing system. In most embodiments a user will be identified using one or more IDs. These user IDs can be numbers strings of characters or compound multi valued objects. In some embodiments this user ID is or is associated with a login a sequence of characters presented to the authn authz system to identify the user. In some embodiments users can also have further non security related metadata associated with them such as names companies email addresses locations etc.

In a preferred embodiment a resource is defined as some object to which access is restricted. In various embodiments resources can include network or user access to a virtual machine or virtual device the ability to use the computational abilities of a device access to storage an amount of storage API access ability to configure a network ability to access a network network bandwidth network speed network latency ability to access or set authentication rules ability to access or set rules regarding resources etc. In general any item which may be restricted or metered is modeled as a resource.

In one embodiment resources may have quotas associated with them. A quota is a rule limiting the use or access to a resource. A quota can be placed on a per project level a per role level a per user level or a per group level. In one embodiment quotas can be applied to the number of volumes which can be created the total size of all volumes within a project or group the number of instances which can be launched both total and per instance type the number of processor cores which can be allocated and publicly accessible IP addresses. Other restrictions are also contemplated as described herein.

In a preferred embodiment a project is defined as a flexible association of users acting in certain roles which will define and access various resources. A project is typically defined by an administrative user according to varying demands. There may be templates for certain types of projects but a project is a logical grouping created for administrative purposes and may or may not bear a necessary relation to anything outside the project. In a preferred embodiment arbitrary roles can be defined relating to one or more particular projects only.

In a preferred embodiment a group is defined as a logical association of some other defined entity. There may be groups of users groups of resources groups of projects groups of quotas or groups which contain multiple different types of defined entities. For example in one embodiment a group development is defined. The development group may include a group of users with the tag developers and a group of virtual machine resources developer machines . These may be connected to a developer only virtual network devnet . The development group may have a number of ongoing development projects each with an associated manager role. There may be per user quotas on storage and a group wide quota on the total monthly bill associated with all development resources.

The applicable set of rules roles and quotas is based upon context. In one embodiment there are global roles user specific roles project specific roles and group specific roles. In one embodiment a user s actual permissions in a particular project are the intersection of the global roles user specific roles project specific roles and group specific roles associated with that user as well as any rules associated with project or group resources possibly affected by the user. Other embodiments may also use other grouping or organizational identifiers such as domains realms locations and organizations.

In a preferred embodiment a credential is an identifying token. This token can be either something that is uniquely known or controlled by the user such as a password key certificate token or other piece of information or it can be something associated with the user s identity such as voice prints iris or retinal scan data fingerprints etc. In one embodiment unique machine identifying data can also be used as a credential such as IP addresses MAC addresses embedded key computer chip or serial number information or computationally secure data processing circuits. In one embodiment the identity based credential is unique to the user being identified. In a second embodiment credentials are treated probabilistically and a number of credentials can be combined to increase the confidence that the user has been authenticated correctly.

In a preferred embodiment authentication is the act of confirming the identity of a user or the truth of a claim. The authn authz service confirms that incoming requests are being made by the user who claims to be making the call by validating a set of claims provided by the user. In one embodiment the claims are initially in the form of a set of credentials username password or login and API key . After initial confirmation The authn authz service issues a token that can serve as a credential.

In a preferred embodiment authorization is the act of confirming the capability of a user to perform some action. The authn authz service confirms that the user is authorized to perform the actions corresponding to the user s incoming requests. An individual authorization is called a permission. In one embodiment if a user is not authenticated a default or anonymous profile is used as the default identity. A token can contain or refer to a set of authorization permissions.

In a preferred embodiment a token is a data such as a string that corresponds to an identity. Tokens are generally cryptographically generated to prevent forging and are associated with access controls. Each token has a scope and a timeframe that describe the resources that can be accessed using the token.

In a preferred embodiment an endpoint is a network accessible address usually described by URL or URI where a service may be accessed.

These different pieces can be used to collectively authenticate and authorize a user. Although the authn authz service will be described in terms of specific embodiments below the logical constructs are more important than the particular implementations and the representation of any particular part of the system may change from embodiment to embodiment.

Turning again to the authn authz service is organized as a group of internal services exposed on one or many endpoints . Many of these services are used in a combined fashion by the frontend APIs such as the service endpoints described relative to . In one embodiment the authz authn service immediately authenticates and authorizes a request arriving to the cloud computing system and creates and return a token credential that can be used internally to authorize and authenticate the services without having to duplicate the original credential checks. This token may be returned to the user or may be a hidden internal implementation detail for operational efficiency within the cloud computing system as a whole. In another embodiment the authn authz service has a service specific endpoint within each subsidiary service of the cloud computing system such as endpoints and . These endpoints can be exposed over HTTP OAUTH XAUTH XML RPC SOAP CORBA LDAP COM Kerberos RADIUS OpenID SAML or other protocols known in the art.

The authn authz service has four primary divisions the authn provider the authz provider the storage provider and the credential service . The authn provider performs the calculations or comparisons needed to authenticate a user given the provided credentials. The authz provider performs the necessary analysis to determine whether an identified user has the necessary permissions to perform a requested action. The storage provider provides access to a durable storage that contains authentication and authorization rules tokens credentials and other necessary data. The credential service provides new credentials on demand.

Each of these four divisions presents a unified API for consumers regardless of the underlying implementation. In one or more embodiments there are various backend services that actually implement store or calculate the data needed to provide the authentication authorization user credential storage and generation services exposed by the providers and . These backend services may include but are not limited to a rule engine a disk store an LDAP database or an RDBMS . Although the embodiment shown in shows only one backend provider of each type and an architecture in which all backend providers are commonly accessible this is for purposes of illustration only and should not be considered a limitation.

For example a first embodiment of the rule engine encompasses multiple rule engines working in parallel or a single rule engine . The rule engine may or may not have access to one or more disks LDAP stores RDBMS s . In another embodiment some of the backend services may be combined. Looking again at the rule engine one embodiment uses database logic triggers and stored procedures to implement the rule engine . Another implementation uses an RBAC analysis engine associated with an LDAP datastore like Active Directory or OpenLDAP. A third embodiment of the rule engine is implemented as described elsewhere in this document. Other embodiments may use other implementations as known in the art.

In one embodiment the disk store is implemented using structured files on a computer readable medium. For example one embodiment of a disk store comprises etc passwd and etc grp files. A second embodiment of a disk store is a structured data store such as a CSV XML SQLite or BerkelyDB formatted and structured file on a disk. A third embodiment uses an object storage service. Other embodiments may use other implementations as known in the art.

In one embodiment the LDAP store is implemented using commercially available tree structured directory such as Active Directory OpenLDAP the Red Hat directory service or Novell eDirectory. In another embodiment the LDAP store is implemented using a graph database or a key value database a document database or a tree structured filesystem with disk based storage and attributes. Other embodiments may use other implementations as known in the art.

In one embodiment the RDBMS is implemented using commercially available relational database such as MySQL PostgreSQL Oracle database server Microsoft SQL Server SQLite DB2 or other relational databases as known in the art.

Each of the four main divisions of the authn authz service can call out to other portions of the service either using the API bus or the direct access bus . The API bus is a communications medium such as a message service or network connection that allows one provider to call another provider s API as part of its functionality. For example in one embodiment the credential service uses the API bus to retrieve a representation of the permissions associated with a particular user so that the permissions can be encoded into a generated token.

The direct access bus is a communications medium such as a message service or network connection which allows one provider to call out to one or more of the backend services to provide part or all of its functionality. For example in one embodiment the authz provider uses organizational information stored in the LDAP store to evaluate whether a particular action is authorized.

The final component shown in is the service proxy . The service proxy either as a singular proxy or via multiple service proxies transparently connect a remote implementation of one or more of the providers or services for execution in a remote location. In various embodiments the service proxy supports federation caching and user specific business logic in the authn authz system .

In one embodiment two services capable of providing authn authz service exist authn authz system and authn authz system . Each system has a set of local backend services providing authn authz storage and credential access via the endpoints for a set of users where the two sets of users are disjoint. Further a secure communication channel exists between the service proxy of each service and the remote service. In one implementation fallback logic is provided for each of the authn provider authz provider and storage provider . The fallback logic first looks to the local implementation for authentication and authorization of users and permissions. If the lookup fails either in authentication or in authorization or if the information necessary for calculation of authentication or authorization is not available to the local storage provider then the service proxy is used to present the same user request to the remote system. Only if both the local and remote calculation of authentication authorization or storage fails is a rejection returned.

Those of skill in the art will recognize several implications extensions or modifications of the embodiment described above. First it is preferred for the connection from the service proxy to go to an endpoint or API bus of a remote system so as to reduce the coupling between systems but it is equally possible to use the service proxy to connect directly to a remote service implementation. Second the remote service implementation does not need to be controlled by the cloud service provider and in fact it may be more common to have a secure connection to a customer internal authentication and authorization service so that sensitive authentication and authorization information can stay inside user controlled systems and never be transmitted outside of a protected area. Third the embodiment described above is bidirectional but it would be equally easy to have a unidirectional federation by only connecting one service proxy to the remote system without having the second reciprocal link. Fourth the credential service can also be proxied using the service proxy but it may be more efficient in some circumstances to generate a new temporary credential at the local system so that the cross service proxied call does not need to be made for subsequent accesses.

In a second embodiment the service proxy is used to support caching of remote information. This is related to the federation embodiment described above except that a copy of the credentials and necessary information needed to identify the correct authentication and authorization responses can be saved in a local data store for use in subsequent connections. A TTL time to live value can be imposed on the cached values so as to force periodic reauthorization and the connection between the service proxy and the remote system can be used to revoke particular tokens or credentials for reasons other than the expiration of time. An advantage of particular embodiments is that the response to certain API calls can be cached without revealing the underlying mechanism used to compute the response.

In a third embodiment the service proxy is used to implement user specific business logic via a plugin system. The service proxy can be used to replace or proxy any provider or backend service to an arbitrary point including a local service implementing user specific logic. The service proxy provides a plugin API or RPC API that allows user defined authentication authorization storage and credential services to be used transparently without any change in the outer API endpoints . In one implementation this is performed similarly to the federation or caching examples above but the remote service is actually provided at a local node running the user provided plugin.

Other implementations of each of the services are also anticipated. In the same fashion described above each provider or service is configurable to use a backend so that the authn authz service can fit a variety of environments and needs. In one embodiment the backend for each service is defined in a configuration file and the proper backend is loaded at runtime.

Although graph based document based RDF based and key value based databases are not explicitly shown their use is explicitly contemplated in the context of various embodiments. In one embodiment a key value store backend is implemented that can support primary key lookups the most trivial implementation being an in memory dictionary lookup. In a second embodiment a relational database mapper can be used to provide many services on top of a traditional SQL backend outside of simple RDBMS service. In third embodiment PAM Pluggable Authentication Modules are used as a backend via a system s PAM service. This provides a one to one relationship between Users and Groups with the root User also having the admin role.

In one preferred embodiment authentication of a user is performed through public private encryption with keys used to authenticate particular users or in some cases particular resources such as particular machines. A user or machine may have multiple keypairs associated with different roles projects groups or permissions. For example a different key may be needed for general authentication and for project access. In one such embodiment a user is identified within the system by the possession and use of one or more cryptographic keys such as an access and secret key. A user s access key needs to be included in a request and the request must be signed with the secret key. Upon receipt of API requests the rules engine verifies the signature and executes commands on behalf of the user.

Some resources such as virtual machine images can be shared by many users. Accordingly it can be impractical or insecure to include private cryptographic information in association with a shared resource. In one embodiment the system supports providing public keys to resources dynamically. In one exemplary embodiment a public key such as an SSH key is injected into a VM instance before it is booted. This allows a user to login to the instances securely without sharing private key information and compromising security. Other shared resources that require per instance authentication are handled similarly.

In one embodiment a rule processor is also used to attach and evaluate rule based restrictions on non user entities within the system. In this embodiment a Cloud Security Group or just security group is a named collection of access rules that apply to one or more non user entities. Typically these will include network access rules such as firewall policies applicable to a resource but the rules may apply to any resource project or group. For example in one embodiment a security group specifies which incoming network traffic should be delivered to all VM instances in the group all other incoming traffic being discarded. Users with the appropriate permissions as defined by their roles can modify rules for a group. New rules are automatically enforced for all running instances and instances launched from then on.

When launching VM instances a project or group administrator specifies which security groups it wants the VM to join. If the directive to join the groups has been given by an administrator with sufficient permissions newly launched VMs will become a member of the specified security groups when they are launched. In one embodiment an instance is assigned to a default group if no groups are specified. In a further embodiment the default group allows all network traffic from other members of this group and discards traffic from other IP addresses and groups. The rules associated with the default group can be modified by users with roles having the appropriate permissions.

In some embodiments a security group is similar to a role for a non user extending RBAC to projects groups and resources. For example one rule in a security group can stipulate that servers with the webapp role must be able to connect to servers with the database role on port . In some embodiments an instance can be launched with membership of multiple security groups similar to a server with multiple roles. Security groups are not necessarily limited and can be equally expressive as any other type of RBAC security. In one preferred embodiment all rules in security groups are ACCEPT rules making them easily composible.

In one embodiment each rule in a security group must specify the source of packets to be allowed. This can be specified using CIDR notation such as 10.22.0.0 16 representing a private subnet in the 10.22 IP space or 0.0.0.0 0 representing the entire Internet or another security group. The creation of rules with other security groups specified as sources helps deal with the elastic nature of cloud computing instances are impermanent and IP addresses frequently change. In this embodiment security groups can be maintained dynamically without having to adjust actual IP addresses.

In one embodiment the APIs RBAC based authentication system and various specific roles are used to provide a US eAuthentication compatible federated authentication system to achieve access controls and limits based on traditional operational roles. In a further embodiment the implementation of auditing APIs provides the necessary environment to receive a certification under FIPS 199 Moderate classification for a hybrid cloud environment.

Typical implementations of US eAuth authentication systems are structured as a Federated LDAP user store back ending to a SAML Policy Controller. The SAML Policy Controller maps access requests or access paths such as requests to particular URLs to a Policy Agent in front of an eAuth secured application. In a preferred embodiment the application specific account information is stored either in extended schema on the LDAP server itself via the use of a translucent LDAP proxy or in an independent datastore keyed off of the UID provided via SAML assertion.

As described above in one embodiment API calls are secured via access and secret keys which are used to sign API calls along with traditional timestamps to prevent replay attacks. The APIs can be logically grouped into sets that align with the following typical roles 

In one currently preferred embodiment System Administrators and Developers have the same permissions Project and Group Administrators have the same permissions and Cloud Administrators and Security have the same permissions. The End user or Third party User is optional and external and may not have access to protected resources including APIs. Additional granularity of permissions is possible by separating these roles. In various other embodiments the RBAC security system described above is extended with SAML Token passing. The SAML token is added to the API calls and the SAML UID is added to the instance metadata providing end to end auditability of ownership and responsibility.

In an embodiment using the roles above APIs can be grouped according to role. Any authenticated user may 

In this embodiment Cloud Administrators and Security personnel would have all permissions. In particular access to the audit subsystem would be restricted. Audit queries may spawn long running processes consuming resources. Further detailed system information is a system vulnerability so proper restriction of audit resources and results would be restricted by role.

In an embodiment as described above APIs are extended with three additional type declarations mapping to the Confidentiality Integrity Availability C.I.A. classifications of FIPS . These additional parameters would also apply to creation of block storage volumes and creation of object storage buckets. C.I.A. classifications on a bucket would be inherited by the keys within the bucket. Establishing declarative semantics for individual API calls allows the cloud environment to seamlessly proxy API calls to external third party vendors when the requested C.I.A. levels match.

In one embodiment a hybrid or multi vendor cloud uses the networking architecture described relative to and the RBAC controls to manage and secure inter cluster networking. In this way the hybrid cloud environment provides dedicated potentially co located physical hardware with a network interconnect to the project or users cloud virtual network. User specific security policies are implemented as plugins on the network without necessarily disclosing the underlying implementation or specific business rules implemented by the plugin.

In one embodiment the interconnect is a bridged VPN connection. In one embodiment there is a VPN server at each side of the interconnect with a unique shared certificate. A security group is created specifying the access at each end of the bridged connection. In a second embodiment the interconnect VPN implements audit controls so that the connections between each side of the bridged connection can be queried and controlled. Network discovery protocols ARP CDP can be used to provide information directly and existing protocols SNMP location data DNS LOC records overloaded to provide audit information.

Referring now to a diagram showing the logical structure of an object storage service is shown at reference . The structure connects a user through a proxy where the proxy provides an API endpoint for interacting with the storage service . The proxy is connected to one or more rings such as an object ring a container ring and an account ring described in further detail below that are connected to an object service container service and an account service respectively described in further detail below. In other embodiments there are other types of objects managed by rings such as a structured data ring a graph storage ring or another type of ring not pictured . In such embodiments each ring would be connected to an appropriate service such as a structured data service a graph service or another service not pictured .

In one embodiment these rings and services are implemented as services integrated with or running on top of an information processing system as described relative to . These could be running alone or configured to host one or more virtual machines the services and rings can be implemented on bare metal or within one or more of the virtual machines logical containers and operating environments . The services and functionalities described relative to the object storage service may be centralized onto a smaller number of physical devices or may be expanded out to a large number of independent physical machines including machines in different zones. For ease of explanation two groupings are shown wherein a storage management server centralizes the proxy and the rings and a storage pool server centralizes the object service the container service the account service and the storage pools . This grouping is for convenience in explanation only however and is not intended to be limiting. Further each of these groupings may be logically present in a particular embodiment but may be implemented using a plurality of physical devices in a configuration that is different from the logical configuration presented.

In one embodiment each storage pool is provided by a separate storage server or includes a virtual server that is included in a portion of one of the storage servers or across a plurality of the storage servers . For example the storage servers may be physically located in one or more data centers and the resources of the storage servers may be virtualized according to the requirements of a plurality of users e.g. the user such that the plurality of storage pools are provided to the plurality of users in order to store files and or data objects. Thus resources for a particular virtual server or storage pool may span across multiple storage servers .

Referring now to a multi zone object storage service is shown at reference . The multi zone object storage service encompasses multiple zones . These zones may be included in separate regions such as the exemplary regions and . Each zone may also be under the control of a separate organization. Each zone includes a object storage service such as the object storage service described relative to possibly including in each object storage service a proxy one or more rings object container account or other services and a storage pool . In one embodiment the user interacts with each zone independently addressing any requests directly to the proxies . In a second embodiment of the multi zone object storage service there is an additional multi zone proxy or multi zone ring . The multi zone proxy is used to provide a single entry point to the zones and the multi zone ring is used to balance requests across the zones . An embodiment may use either a multi zone proxy or a multi zone ring or both or neither. In an embodiment in which a multi zone proxy or a multi zone ring is used the individual zones can optionally forego the use of the zone specific proxy or zone specific ring 

Referring now to a particular user interacts with the storage service via the API to store and receive data objects. User may create a plurality of containers in the user account and store a plurality of data objects in each of the containers for retrieval. In the discussion below a user account is referred to as an account a container is referred to as a container and a data object is referred to as an object for clarity of discussion. One of skill in the art will recognize that the terms account container and object are generic forms of data naming that are used to direct the object storage service to a specific data object. When other types of rings and services are used an appropriate name may be substituted. For clarity discussion of alternative rings and services will be limited to the account container and object rings and services. The account as shown in as well as other rings and services are consistent whether or not they are deployed on a logical structure within a single cluster such as the structure illustrated in or are arrayed across a multi zone system such as the structure illustrated in . When reference is made to the proxy the rings the services or or the storage pools equivalent structures are also contemplated within each zone specifically the proxies the rings the object container services and the storage pools . Similarly equivalent structures to the proxy and the rings are contemplated relative to the multi zone proxy and the multi cluster ring .

The components of the exemplary object storage service and some of their functions will now be described in detail relative to various embodiments.

As discussed above the rings are implemented in a tailored electrical circuit or as software instructions to be used in conjunction with a processor to create a hardware software combination that implements the specific functionality described herein. To the extent that software is used to implement the rings it may include software that is stored on a computer readable medium location in the storage management server and or the storage servers . Referring back to the rings include semiconductor circuits and or computer executable instructions that when executed by a processor provide subsystems of the object storage service that provide a mapping between the entities stored in the object storage service and the locations of those entities in the storage pools . In the illustrated embodiment the object storage service includes a separate object ring container ring and account ring and when components of the object storage service need to perform any operation on an object container or account those components interact with the object ring container ring and account ring respectively to determine the location of that stored entity in the storage pools . However one of skill in the art will recognize that different ring structures may be provided e.g. a single ring for the objects containers and accounts more than one ring for each of the objects containers and account etc. without departing from the scope of the present disclosure. The rings maintain the availability and safety of data in the object storage service through the use of zones partitions replicas and the storage pools as described below.

In one embodiment availability zones are defined across one or more of the storage pools that are subject to a correlated loss of access or data as a result of a particular event. In addition zones can be used for identification and management of other aspects of the system such as the use of specific storage technology. One of skill in the art will recognize that the examples of zones provided above are not limiting and a variety of zones known in the art will fall into the scope of the present disclosure.

Logically a partition is an abstract storage bucket. As discussed in further detail below the object storage service maps each partition to a plurality of storage pools that are in different zones and stores data using those partitions. The mapping of a given partition to a plurality of storage pools creates a plurality of partition replicas of that partition e.g. equal to the number of storage pools the partition is mapped to. For example when a given partition is mapped to 3 storage pools that are in different zones 3 partition replicas of that partition are created.

The object ring for the management of objects will be described in detail below. However one of skill in the art will recognize how the discussion may be applied to the container ring the account ring and or a ring for any other stored entity without departing from the scope of the present disclosure.

In various replicated network based object storage services an object from a user is received by a proxy. To determine where the object should be stored some attribute of the object or the object data itself is hashed. If necessary some attribute of the object is modified so that three different results are returned from the hashing function. The object is then replicated and stored in the storage pool corresponding to the number returned by the hash function.

Under typical circumstances a consistent hashing function is used as the hash function. The use of the consistent hashing function ensures that there will be minimal changes to the assigned storage pools given a change in membership due to adding or removing new storage pools.

Although the consistent hashing function results in minimal changes to the storage location sometimes the assignments made by the consistent hashing function or the rearrangements needed due to a change in membership may have undesirable storage characteristics. For example such methods have been found to result in multiple object replicas for the same object being stored in one or more storage pools that are in the same zone. As discussed above this is undesirable because then multiple and possibly all object replicas for the same object are subject to being lost as a result of a particular event. Alternatively rebalancing the replicas due to a change in membership has been found to require the movement to two of the replicas 4 of the time and the movement of all three replicas 1 of the time. It is desirable to never have to move more than one replica at a time.

In one embodiment the object storage service solves the problem of multiple object replicas for the same object being stored in storage pools that are in the same zone through the use of the rings . Referring now to a method for storing stored entities is illustrated. At block an object us received by a user. In one embodiment an object is received from the user by the proxy . The method then proceeds to block where a partition identification is generated. In one embodiment a consistent hash function is applied to the object received in block and the hash function returns a partition identification that corresponds to a partition. The method then proceeds to block where the partition associated with the partition identification is mapped to storage pools that are in different zones. This mapping function is constrained so that the physical location of the storage pools is required to have one or more desirable properties such as having each partition replica in a separate zone.

There are various embodiments of the constrained mapping function. In one embodiment the constrained mapping function is the output of a constraint satisfaction solver in which the desired storage characteristics such as the requirement that each replica of a partition be in a different availability zone are inputs to the solving function. The solver then uses one or more search methodologies within the solution space to find a storage layout that maps partitions to storage pools in a desirable manner.

In a second embodiment a constrained mapping function is applied to portions of the partition identification e.g. the portions of the partition identification that the constrained mapping function is applied to may be bits of the output of the original hashing function is applied to the object. For example the number of bits to which the constrained mapping function is applied may be known as the partition power and 2 to the partition power may indicate the partition count. The constrained mapping function is designed to return a storage pool location for each portion of the partition identification to which it is applied and the storage pool locations returned for a given partition identification will each correspond to storage pools in different zones. These storage pool locations are then associated with the partition identification. Thus the partition corresponding to the partition identification is replicated multiple times in the object storage service i.e. a partition replica is included in each storage pool corresponding to the storage pool locations determined from the constrained mapping function. The method then proceeds to block where the object is stored according to the partition. The object received by the user in block of the method may then be stored according to the partition corresponding to the partition identification which results in multiple object replicas for the object being stored in storage pools that are in different zones in the object storage service . In another embodiment the constrained mapping function is used to determined storage pool locations that are in different zones for each partition prior to the object being received by the user discussed in further detail below.

The output of the constrained mapping function signifies a particular storage pool where a replica of the partition should be stored. An example of this output is as follows When an object is received from the user at block of the method and at block of the method a hash function is applied to the object. In one exemplary embodiment the user provides data including an account container object name to the proxy and a hash function is applied to the account container object name as follows 

In another embodiment the constrained mapping function is applied to the object storage service before the object is received by the user at block in order to accomplish the mapping of the partitions to storage pools described above with reference to block of the method . For example the total number of partitions and the total number of storage servers storage pools in the object storage service may and typically will be known. With that knowledge the constrained mapping function is used to map each partition in the object storage service to a plurality of storage pools that are in different zones and that information is stored in a constrained mapping database. For example a constrained mapping database may include partitions mapped to storage pools such as 

Thus when an object is received from a user at block the hash function is applied to that object to get the partition identification e.g. partition or in the example above at block and then at block the partition identification may then be used with the constrained mapping database to determine the corresponding partition and its associated storage pool locations. This embodiment allows the processing necessary to map partitions to multiple storage pools in different zones to be conducted before objects are received from users so that such processing does not have to be conducted each time an object is received from a user.

For example referring now to a method for building a ring is illustrated. At block an ideal number of partitions for each storage pool in the object storage service is determined. In one embodiment the number of partitions that should ideally be assigned to each storage pool is calculated based the weight e.g. storage capacity of each storage pool . For example if the partition power is 20 the ring will have 1 048 576 2 partitions. If there are 1 000 storage pools of equal weight each storage pool will ideally be assigned 1 048.576 partitions. This may be referred to as an ideal partition count and in the example each storage pool starts off empty with a 1 048.576 ideal partition count. The method then proceeds to block where the storage pools are placed in a sorting order. In one embodiment the storage pools are placed in a sorting order based on their ideal partition count e.g. highest to lowest and this sorting order is maintained throughout the method as partitions are assigned storage pools . The method then proceeds to block where partitions are assigned to storage pools based on their sorting order but with a zone restriction. In one embodiment the partitions are assigned to the storage pool with the highest ideal partition count but subject to the restriction that the storage pool to which a partition is being assigned is not in the same zone as any other storage pool that includes a partition replica for that same partition. The method then proceeds to block where the sorting order of the storage pools is adjusted. In one embodiment once a partition is assigned to a storage pool that storage pool will have its ideal partition count decremented and thus that storage pool is moved to a lower position in the sorting order and the method then returns to block to continue to assign partitions to storage pools based on their sorting order but with the zone restriction. In such a manner each partition is assigned multiple storage pools in different zones and thus objects received from users may have multiple object replicas stored in storage pools in different zones simply by associating those objects with the partitions.

As mentioned above another problem relates to the rebalancing of object replicas stored in the object storage service due to changing membership i.e. adding or subtracting storage servers or storage pools from the object storage service. Such methods have been found to require the moving of multiple object replicas of the same object in response to a membership change which is undesirable.

In one embodiment the mapping of partitions to multiple storage pools in different zones in the object storage service described above solves these problems. The use of the constrained mapping function to ensure that each partition is mapped to storage pools in different zones ensures that object replicas for the same object are never located in storage pools that are in the same zone i.e. because any given object received from a user is stored in a partition that is replicated in storage pools that are in different zones. For example with each storage server defined as a separate zone the addition or subtraction of a given storage server from the object storage service thus can only effect one partition replica and hence one object replica of a given object i.e. because only one of the partition replica will ever be located on a storage server that is defined as a separate zone. In similar fashion the rebalancing associated with changing the zone membership can be accomplished without affecting more than one replica because each zone is guaranteed to only contain one replica of a given partition.

Periodically partitions may need to be reassigned to different storage pools and the reassignment of partitions will result in the building of a new ring from an old ring. Such an event may occur due to the removal and or addition of a storage pool from the object storage service e.g. a membership change. Referring now to a method for reassigning partitions in response to the removal of a storage pool is illustrated. The method begins at block where the ideal number of partitions for each storage pool is recalculated. In one embodiment the ideal partition count for the storage pools remaining in the object storage service subsequent to the removal of a storage pool is recalculated. The method then proceeds to block where the storage pools are placed in a sorting order as described above with reference to block of the method . The method then proceeds to block where partitions to be reassigned are grouped. In one embodiment a partition list for the partitions to be reassigned is created. For example any storage pools that have been removed from the filesystem may have all their assigned partitions unassigned and added to the partition list and any storage pools that have more partitions than their ideal partition count may have random partitions unassigned from them and added to the partition list i.e. such that those storage pools have a number of partitions that is within a predetermined amount of their ideal partition count. The partitions on the partition list may then be reassigned to the storage pool in blocks and of the method substantially as discussed above with reference to blocks and of the method . In one embodiment at block of the method whenever a partition is reassigned to a storage pool the time of the reassignment is recorded. Reassignment times may be used when gathering partitions to reassign to storage pools such that no partition replica for a given partition is moved twice in a predetermined amount of time. However such reassignment restrictions based on reassignment times may be ignored for partition replicas on storage pools that have been removed from the object storage service as removing a storage pool only happens upon storage pool storage server failure and thus requires the reassignment of the partitions.

In one embodiment the method is conducted periodically to help balance the amount of data stored by storage pools in the object storage service . For example the partition reassignment method discussed above may repeated until each storage pool is within a predetermined threshold of a predetermined storage capacity e.g. within 1 of 130 storage capacity for that storage pool or when it is determined that partition reassignment will not improve the balance of data stored by the object storage service by more than a predetermined amount. For example if a first storage server includes 2 TB of storage a second storage server includes 4 TB of storage and a third storage server includes 6 TB of storage data balancing may be conducted to ensure that each of the storage servers holds the same percentage of its storage capacity i.e. the first storage server holds 0.66 TB of data the second storage server holds 1.33 TB of data and the third storage server holds 2 TB of data such that each of the storage servers is at 33 of its storage capacity. Weights may be applied to storage servers to balance the distribution of data on the storage servers in the object storage service to account for different storage capacities.

Those of skill in the art will recognize that the constrained mapping within the rings are modifiable to deal with more than issues of availability. Even though the embodiment above has been described in terms of availability zones any type of zone can be used for the mapping from partition to storage device.

In some implementations the constrained mapping is extensible via a plugin mechanism. The constrained mapping function is a rule based hash and so it can be extended similarly to other rule based plugin mechanisms described herein. In one embodiment the ring has an API by which mapping rules can be set by user . In a second embodiment a series of rules can be provided and loaded by the ring . This loadable ruleset can be implemented using a dynamically loadable or runnable program that has a series of expected inputs and provides its information on a defined series of outputs. In one embodiment these are stdin and stdout. In a second embodiment these are provided as function calls within a program module. When set of partitions is provided to the plugin the constrained mapping function logically associates it with a particular resource and assigns the virtual partition to the applicable physical resource. When a request arrives addressed to that resource the tenant defined rules and filters are applied to the request and the appropriate object is uploaded downloaded edited or redirected accordingly. In a further embodiment the API provided to the user is sufficient to for the user to direct the creation of the ring structure via interaction with a remote user controlled entity on the network.

There are two levels at which the user can direct the allocation of underlying resources via the plugin mechanism. At a first high level the user can present weights correlations or affinities between different groups of resources so that an underlying cloud provider specific ring generation function can take those into account. In a second embodiment the user can have direct control over the allocation of storage resources and those can be mapped onto available physical resources provided by the cloud provider. Plugging into the constraint mapping portion of the ring generation function is sufficient for both levels of control but it is anticipated that different cloud providers will favor or provide one level of control over another.

As discussed above the object service is implemented in a tailored electrical circuit or as software instructions to be used in conjunction with a processor to create a hardware software combination that implements the specific functionality described herein. To the extent that one embodiment includes computer executable instructions those instructions may include software that is stored on a computer readable medium located in the storage management server and or the storage servers . The object service may include instructions that when executed by a processor provide object storage and objection manipulation functionality such that the object service is operable to for example store retrieve and delete stored objects in the storage pools . In one embodiment an object service is provided for each storage pool that holds object data. For example an object service may be included on a server that further includes one or more storage drives that provide a storage pool for objects. In one embodiment the objects are stored as binary files with metadata stored as extended attributes of the file in the filesystem used by the object storage service. In such an embodiment the object service will uses the extended attributes of the filesystem to manage the metadata. In a second embodiment the metadata is stored in a machine readable format next to the data itself. For example the metadata for a file is stored in a text file or single file database.

In one embodiment subsequent processing based on file metadata is also pluggable by the end user. For example one embodiment stores different sets of files and associates them with the same URL. An ordinary operation to read or modify the object could also have a processor function associated with it that allows for user directed modification or logging of the request.

In one embodiment objects are stored by the object service using a path derived by applying a hash function to the name of the object along with a timestamp. For example an incoming object for a user account to be written to a container will have a hash applied to its account container object name and the path generated for the object is 

When there is a request for an object the object storage service will find all the object replicas in the object storage service that include the objectname hash and return the object data that has the most recent timestamp value. Special care is needed to record updates that should be persisted as the new canonical value. For example when an object replica is deleted a modification sentinel e.g. a 0 byte tombstone file or .ts file is written to the storage pool where the deleted object replica was located and that includes the same objectname hash as the deleted object replica i.e. objectname hash.15784.ts and that tombstone file stays in the object storage service for a predetermined amount of time e.g. 7 days. During object replication discussed in further detail below when the object storage service encounters a tombstone file the object storage service checks whether the tombstone file has been in the system for 7 days. If not the object storage service searches for and deletes any object replicas that it finds related to that tombstone file e.g. replicas that same objectname hash as the tombstone file to ensure that objects that were meant to be deleted from the object storage service are removed and older versions of object replicas of a given object do not appear in the object storage service due to for example the temporary failure of a storage server or storage pool that might have prevented the deletion of that object replica previously. If the object storage service determines that a tombstone file has been in the object storage service for longer than the predetermined time that tombstone file is deleted.

The mechanism used for recording file deletion is also used to record other types of updates. For example a purge marker indicates that the system should overwrite all copies of the object and set the space to free a version marker indicates that the system should create a copy and mark the copy with a version number and a ttl time to live marker indicates that the system should check an authoritative source for updates after the expiry of a set time period. Other types of out of band changes to the file are also contemplated.

As discussed above the container service is implemented in a tailored electrical circuit or as software instructions to be used in conjunction with a processor to create a hardware software combination that implements the specific functionality described herein. To the extent that one embodiment includes computer executable instructions those instructions may include software that is stored on a computer readable medium located in the storage management server and or the storage servers . The container service may include instructions that when executed by a processor provide container storage and container manipulation functionality such that the container service is operable to store retrieve and delete stored containers in the storage pools . In one embodiment a container service is provided for each storage pool that holds container data. For example a container service may be included on a server that further includes one or more storage drives that provide a storage pool for containers and the container service may include the names of containers and objects in those containers. Thus in one embodiment the container service handles the listing of containers and does not hold the location where the objects are stored e.g. the storage pool where a given object replica resides but rather the locations of containers that hold the objects. The listings for the container locations may be stored as database files and those listings may be replicated across the storage pools in a manner that is similar to the replication of objects e.g. through their association with partitions as discussed above. Container storage statistics for the container service s may be tracked by the object storage service and may include total number of objects stored by one or more containers the total storage provided by any given container and or a variety of other statistics known in the art.

As discussed above the account service is implemented in a tailored electrical circuit or as software instructions to be used in conjunction with a processor to create a hardware software combination that implements the specific functionality described herein. To the extent that one embodiment includes computer executable instructions those instructions may include software that is stored on a computer readable medium located in the storage management server and or the storage servers . The account service may include instructions that when executed by a processor provide account storage and account manipulation functionality such that the account service is operable to store retrieve and delete stored accounts in the storage pools . In one embodiment an account service is provided for each storage pool that holds account data. For example an account service may be implemented by a server that includes storage drives that provide a storage pool for accounts and the account service may include the names of accounts and containers in those accounts. Thus the account service is very similar to the container service discussed above with the exception that account storage handles the listings of accounts.

As discussed above other types of services may be implemented in similar fashion to the object container and account services described above. For example one implementation includes an authorization service. The authorization service may include instructions that when executed by a processor handle the storage and manipulation of authorization metadata so that the authorization service is operable to store retrieve delete and query stored credentials from in the storage pools . In one embodiment an authorization service provides an ACL based authorization. In a second embodiment the authorization service provides posix compatible authorization. In a third embodiment the authorization service provides tree or graph based authorization such as would be provided with an LDAP based authorization service.

A second implementation includes a structured data service. The structured data service may include instructions that when executed by a processor provide the storage and manipulation of structured data such that the structured data service is operable to store retrieve delete and query tabular graph or tree based data from in the storage pools . In one embodiment a structured data service provides a JSON based output. In a second embodiment the structured data service provides XML based output. In a third embodiment the structured data service provides HTML output.

The proxy is implemented in a tailored electrical circuit or as software instructions to be used in conjunction with a processor to create a hardware software combination that implements the specific functionality described herein. The proxy is responsible for tying together the object storage service . For each request received from a user the proxy determines the location of the account container or object in the appropriate ring e.g. the object ring the container ring or the account ring and routes the request accordingly. A public Application Programming Interface API may be exposed to users through the proxy . A large number of failures may be handled by the proxy . For example if a storage server and or storage pool is unavailable for an object PUT the proxy may use the rings to determine an appropriate storage server and or storage pool for that object and route the object there instead.

In another embodiment there are multiple proxies associated with an object storage service. The existence of multiple proxies may be ascertainable from outside the object storage service or it may be transparent. Different proxies may be used for different purposes. For example in one embodiment different proxies are used for different types of files. In another embodiment different proxies are used for different types of requests. In a third embodiment an appropriate proxy is chosen to minimize latency geographic or network distance between the proxy and the system making the request.

As shown in the illustrated embodiment of the VM image service comprises a component based architecture that includes an API server an image store and a registry server . The API server is a communication hub that routes VM image requests and data between clients and the image store and registry server . The image store is an autonomous and extensible storage resource that stores VM images managed by the service and the registry server is a componentized service that stores metadata associated with the managed VM images. In the illustrated embodiment the API server includes an external API endpoint through which the clients may programmatically access VM images managed by the service . In that regard the API endpoint exposes both metadata about managed VM images and the image data itself to requesting clients. In one embodiment the API endpoint is implemented with an RPC style system such as CORBA DCE COM SOAP or XML RPC and adheres to the calling structure and conventions defined by these respective standards. In another embodiment the external API endpoint is a basic HTTP web service adhering to a representational state transfer REST style and may be identifiable via a URL. Specific functionality of the API endpoint will be described in greater detail below.

The API server may be implemented in software or in a tailored electrical circuit or as software instructions to be used in conjunction with a processor to create a hardware software combination that implements the specific functionality described herein. To the extent that software is used to implement the API server it may include software that is stored on a non transitory computer readable medium in an information processing system such as the information processing system of .

As mentioned above the VM image service stores VM images in the image store . In the illustrated embodiment the image store is any local or remote storage resource that is programmatically accessible by an internal API endpoint within the API server . In one embodiment the image store may simply be a file system storage that is physically associated with the API server . In such an embodiment the API server includes a file system API endpoint that communicates natively with the file system storage . The file system API endpoint conforms to a standardized storage API for reading writing and deleting VM image data. Thus when a client requests a VM image that is stored in the file system storage the API server makes an internal API call to the file system API endpoint which in turn sends a read command to the file system storage. In other embodiments the image store may be implemented with an outside cloud storage object storage service storage and or HTTP storage that are respectively associated with an outside cloud service endpoint object storage service endpoint and HTTP endpoint on the API server . In one embodiment the HTTP storage may comprise a URL that points to a virtual machine image hosted somewhere on the Internet and thus may be read only. It is understood that any number of additional storage resources such as Sheepdog a RADOS block device RBD a storage area network SAN and any other programmatically accessible storage solutions may be provisioned as the image store . Further in some embodiments multiple storage resources may be simultaneously available as image stores within service such that the API server may select a specific storage option based on the size availability requirements etc of a VM image. Accordingly the image store provides the image service with redundant scalable and or distributed storage for VM images.

Additionally in some embodiments the API server may include a local image cache that temporarily stores VM image data. In such a scenario if a client requests a VM image that is held in the image cache the API server can distribute the VM image to the client without having to retrieve the image from the image store . Locally caching VM images on the API server not only decreases response time but it also enhances the scalability of the VM image service . For example in one embodiment the image service may include a plurality of API servers where each may cache the same VM image and simultaneously distribute portions of the image to a client.

The registry server stores and publishes VM image metadata corresponding to VM images stored by the system in the image store . In one embodiment each VM image managed by the service includes at least the following metadata properties stored in the registry server UUID name status of the image disk format container format size public availability and user defined properties. Additional and or different metadata may be associated with VM images in alternative embodiments. The registry server includes a registry database in which the metadata is stored. In one embodiment the registry database is a relational database such as MySQL but in other embodiments it may be a non relational structured data storage system like MongoDB Apache Cassandra or Redis. For standardized communication with the API server the registry server includes a registry API endpoint . The registry API endpoint is a RESTful API that programmatically exposes the database functions to the API server so that the API server may query insert and delete VM image metadata upon receiving requests from clients. In one embodiment the registry server may be any public or private web service that exposes the RESTful API to the API server . In alternative embodiments the registry server may be implemented on a dedicated information processing system of may be a software component stored on a non transitory computer readable medium in the same information processing system as the API server .

In operation clients exploit the external API endpoint exposed by the API server to lookup store and retrieve VM images managed by the VM image service . In the example embodiment described below clients may issue HTTP GETs PUTs POSTs and HEADs to communicate with the API server . For example a client may issue a GET request to images to retrieve the list of available public images managed by the image service . Upon receiving the GET request from the client the API server sends a corresponding HTTP GET request to the registry server . In response the registry server queries the registry database for all images with metadata indicating that they are public. The registry server returns the image list to the API server which forwards it on to the client. For each image in the returned list the client may receive a JSON encoded mapping containing the following information URI name disk format container format and size. As another example a client may retrieve a virtual machine image from the service by sending a GET request to images . Upon receipt of the GET request the API server retrieves the VM image data from the image store by making an internal API call to one of the storage API endpoints and also requests the metadata associated with the image from the registry server . The API server returns the metadata to the client as a set of HTTP headers and the VM image as data encoded into the response body. Further to store a VM image and metadata in the service a client may issue a POST request to images with the metadata in the HTTP header and the VM image data in the body of the request. Upon receiving the POST request the API server issues a corresponding POST request to the registry API endpoint to store the metadata in the registry database and makes an internal API call to one of the storage API endpoints to store the VM image in the image store . It should be understood that the above is an example embodiment and communication via the API endpoints in the VM image service may be implemented in various other manners such as through non RESTful HTTP interactions RPC style communications internal function calls shared memory communication or other communication mechanisms.

In one embodiment the API server includes a plugin mechanism that allows for a user configurable response to image requests. For example in one embodiment sensitive security information is held by a user outside the scope of the cloud computing system. When a request is made for a generic VM image the plugin creates a secure connection to a user controlled endpoint and receives the necessary information from the user s system. The plugin then injects the custom authentication information into the image prior to the image being instantiated. Other embodiments can modify the image or the image request in arbitrary user defined ways.

Further in some embodiments the VM image service may include security features such as an authentication manager to authenticate and manage user account role project group quota and security group information associated with the managed VM images. For example an authentication manager may filter every request received by the API server to determine if the requesting client has permission to access specific VM images. In some embodiments Role Based Access Control RBAC may be implemented in the context of the VM image service whereby a user s roles defines the API commands that user may invoke. For example certain API calls to the API server such as POST requests may be only associated with a specific subset of roles.

To the extent that some components described relative to the VM image service are similar to components of the larger cloud computing system those components may be shared between the cloud computing system and the VM image service or they may be completely separate. Further to the extend that controllers nodes servers managers VMs or similar terms are described relative to the VM image service those can be understood to comprise any of a single information processing device as described relative to multiple information processing devices a single VM as described relative to a group or cluster of VMs or information processing devices as described relative to . These may run on a single machine or a group of machines but logically work together to provide the described function within the system.

Turning now to an IaaS style computational cloud service a compute service is shown at according to one embodiment. This is one embodiment of a cloud controller with associated cloud service as described relative to . Except as described relative to specific embodiments the existence of a compute service does not require or prohibit the existence of other portions of the cloud computing system nor does it require or prohibit the existence of other cloud controllers with other respective services .

To the extent that some components described relative to the compute service are similar to components of the larger cloud computing system those components may be shared between the cloud computing system and the compute service or they may be completely separate. Further to the extend that controllers nodes servers managers VMs or similar terms are described relative to the compute service those can be understood to comprise any of a single information processing device as described relative to multiple information processing devices a single VM as described relative to a group or cluster of VMs or information processing devices as described relative to . These may run on a single machine or a group of machines but logically work together to provide the described function within the system.

In one embodiment compute service includes an API Server a Compute Controller an Auth Manager an Object Store a Volume Controller a Network Controller and a Compute Manager . These components are coupled by a communications network of the type previously described. In one embodiment communications between various components are message oriented using HTTP or a messaging protocol such as AMQP ZeroMQ or STOMP.

Although various components are described as calling each other or sending data or messages one embodiment makes the communications or calls between components asynchronous with callbacks that get triggered when responses are received. This allows the system to be architected in a shared nothing fashion. To achieve the shared nothing property with multiple copies of the same component compute service further includes distributed data store . Global state for compute service is written into this store using atomic transactions when required. Requests for system state are read out of this store. In some embodiments results are cached within controllers for short periods of time to improve performance. In various embodiments the distributed data store can be the same as or share the same implementation as Object Store discussed relative to .

In one embodiment the API server includes external API endpoints . In one embodiment the external API endpoints are provided over an RPC style system such as CORBA DCE COM SOAP or XML RPC. These follow the calling structure and conventions defined in their respective standards. In another embodiment the external API endpoints are basic HTTP web services following a REST pattern and identifiable via URL. Requests to read a value from a resource are mapped to HTTP GETs requests to create resources are mapped to HTTP PUTs requests to update values associated with a resource are mapped to HTTP POSTs and requests to delete resources are mapped to HTTP DELETEs. In some embodiments other REST style verbs are also available such as the ones associated with WebDay. In a third embodiment the API endpoints are provided via internal function calls IPC or a shared memory mechanism. Regardless of how the API is presented the external API endpoints are used to handle authentication authorization and basic command and control functions using various API interfaces. In one embodiment the same functionality is available via multiple APIs including APIs associated with other cloud computing systems. This enables API compatibility with multiple existing tool sets created for interaction with offerings from other vendors.

The Compute Controller coordinates the interaction of the various parts of the compute service . In one embodiment the various internal services that work together to provide the compute service are internally decoupled by adopting a service oriented architecture SOA . The Compute Controller serves as an internal API server allowing the various internal controllers managers and other components to request and consume services from the other components. In one embodiment all messages pass through the Compute Controller . In a second embodiment the Compute Controller brings up services and advertises service availability but requests and responses go directly between the components making and serving the request. In a third embodiment there is a hybrid model in which some services are requested through the Compute Controller but the responses are provided directly from one component to another.

In one embodiment communication to and from the Compute Controller is mediated via one or more internal API endpoints provided in a similar fashion to those discussed above. The internal API endpoints differ from the external API endpoints in that the internal API endpoints advertise services only available within the overall compute service whereas the external API endpoints advertise services available outside the compute service . There may be one or more internal APIs that correspond to external APIs but it is expected that there will be a greater number and variety of internal API calls available from the Compute Controller .

In one embodiment the Compute Controller includes an instruction processor for receiving and processing instructions associated with directing the compute service . For example in one embodiment responding to an API call involves making a series of coordinated internal API calls to the various services available within the compute service and conditioning later API calls on the outcome or results of earlier API calls. The instruction processor is the component within the Compute Controller responsible for marshalling arguments calling services and making conditional decisions to respond appropriately to API calls.

In one embodiment the instruction processor is implemented as described above relative to specifically as a tailored electrical circuit or as software instructions to be used in conjunction with a hardware processor to create a hardware software combination that implements the specific functionality described herein. To the extent that one embodiment includes computer executable instructions those instructions may include software that is stored on a computer readable medium. Further one or more embodiments have associated with them a buffer. The buffer can take the form of data structures a memory a computer readable medium or an off script processor facility. For example one embodiment uses a language runtime as an instruction processor running as a discrete operating environment as a process in an active operating environment or can be run from a low power embedded processor. In a second embodiment the instruction processor takes the form of a series of interoperating but discrete components some or all of which may be implemented as software programs. In another embodiment the instruction processor is a discrete component using a small amount of flash and a low power processor such as a low power ARM processor. In a further embodiment the instruction processor includes a rule engine as a submodule as described herein.

In one embodiment the Compute Controller includes a message queue as provided by message service . In accordance with the service oriented architecture described above the various functions within the compute service are isolated into discrete internal services that communicate with each other by passing data in a well defined shared format or by coordinating an activity between two or more services. In one embodiment this is done using a message queue as provided by message service . The message service brokers the interactions between the various services inside and outside the Compute Service .

In one embodiment the message service is implemented similarly to the message service described relative to . The message service may use the message service directly with a set of unique exchanges or may use a similarly configured but separate service.

The Auth Manager provides services for authenticating and managing user account role project group quota and security group information for the compute service . In a first embodiment every call is necessarily associated with an authenticated and authorized entity within the system and so is or can be checked before any action is taken. In another embodiment internal messages are assumed to be authorized but all messages originating from outside the service are suspect. In this embodiment the Auth Manager checks the keys provided associated with each call received over external API endpoints and terminates and or logs any call that appears to come from an unauthenticated or unauthorized source. In a third embodiment the Auth Manager is also used for providing resource specific information such as security groups but the internal API calls for that information are assumed to be authorized. External calls are still checked for proper authentication and authorization. Other schemes for authentication and authorization can be implemented by flagging certain API calls as needing verification by the Auth Manager and others as needing no verification. In one embodiment the Auth Manager is implemented similarly to or as a proxy to authn authz service as described relative to .

In one embodiment external communication to and from the Auth Manager is mediated via one or more authentication and authorization API endpoints provided in a similar fashion to those discussed above. The authentication and authorization API endpoints differ from the external API endpoints in that the authentication and authorization API endpoints are only used for managing users resources projects groups and rules associated with those entities such as security groups RBAC roles etc. In another embodiment the authentication and authorization API endpoints are provided as a subset of external API endpoints .

In one embodiment the Auth Manager includes a rules processor for processing the rules associated with the different portions of the compute service . In one embodiment this is implemented in a similar fashion to the instruction processor described above.

The Object Store provides redundant scalable object storage capacity for arbitrary data used by other portions of the compute service . At its simplest the Object Store can be implemented one or more block devices exported over the network. In a second embodiment the Object Store is implemented as a structured and possibly distributed data organization system. Examples include relational database systems both standalone and clustered as well as non relational structured data storage systems like MongoDB Apache Cassandra or Redis. In a third embodiment the Object Store is implemented as a redundant eventually consistent fully distributed data storage service such as the object storage service described relative to .

In one embodiment external communication to and from the Object Store is mediated via one or more object storage API endpoints provided in a similar fashion to those discussed above. In one embodiment the object storage API endpoints are internal APIs only. In a second embodiment the Object Store is provided by a separate cloud service so the internal API used for compute service is the same as the external API provided by the object storage service itself.

In one embodiment the Object Store includes an Image Service . The Image Service is a lookup and retrieval system for virtual machine images. In one embodiment various virtual machine images can be associated with a unique project group user or name and stored in the Object Store under an appropriate key. In this fashion multiple different virtual machine image files can be provided and programmatically loaded by the compute service . In one embodiment the image service is implemented as image service as described relative to .

The Volume Controller coordinates the provision of block devices for use and attachment to virtual machines. In one embodiment the Volume Controller includes Volume Workers . The Volume Workers are implemented as unique virtual machines processes or threads of control that interact with one or more backend volume providers to create update delete manage and attach one or more volumes to a requesting VM.

In a first embodiment the Volume Controller is implemented using a SAN that provides a sharable network exported block device that is available to one or more VMs using a network block protocol such as iSCSI. In this embodiment the Volume Workers interact with the SAN to manage and iSCSI storage to manage LVM based instance volumes stored on one or more smart disks or independent processing devices that act as volume providers using their embedded storage . In a second embodiment disk volumes are stored in the Object Store as image files under appropriate keys. The Volume Controller interacts with the Object Store to retrieve a disk volume and place it within an appropriate logical container on the same information processing system that contains the requesting VM. An instruction processing module acting in concert with the instruction processor and hypervisor on the information processing system acts as the volume provider managing mounting and unmounting the volume on the requesting VM. In a further embodiment the same volume may be mounted on two or more VMs and a block level replication facility may be used to synchronize changes that occur in multiple places. In a third embodiment the Volume Controller acts as a block device proxy for the Object Store and directly exports a view of one or more portions of the Object Store as a volume. In this embodiment the volumes are simply views onto portions of the Object Store and the Volume Workers are part of the internal implementation of the Object Store .

In one embodiment the Network Controller manages the networking resources for VM hosts managed by the compute manager . Messages received by Network Controller are interpreted and acted upon to create update and manage network resources for compute nodes within the compute service such as allocating fixed IP addresses configuring VLANs for projects or groups or configuring networks for compute nodes.

In one embodiment the Network Controller is implemented similarly to the network service described relative to . The network controller may use a shared cloud controller directly with a set of unique addresses identifiers and routing rules or may use a similarly configured but separate service. In another embodiment

In one embodiment the Compute Manager manages computing instances for use by API users using the compute service . In one embodiment the Compute Manager is coupled to a plurality of resource pools each of which includes one or more compute nodes . Each compute node is a virtual machine management system as described relative to and includes a compute worker a module working in conjunction with the hypervisor and instruction processor to create administer and destroy multiple user or system defined logical containers and operating environments VMs according to requests received through the API. In various embodiments the certain portions of the overall resource pool may be organized into clusters such as clusters and . In one embodiment each resource pool is organized into a cluster physically located in one or more data centers in one or more different locations. In another embodiment resource pools have different physical or software resources such as different available hardware higher throughput network connections or lower latency to a particular location.

In one embodiment the Compute Manager allocates VM images to particular compute nodes via a Scheduler . The Scheduler is a matching service requests for the creation of new VM instances come in and the most applicable Compute nodes are selected from the pool of potential candidates. In one embodiment the Scheduler selects a compute node using a random algorithm. Because the node is chosen randomly the load on any particular node tends to be non coupled and the load across all resource pools tends to stay relatively even.

In a second embodiment a smart scheduler is used. A smart scheduler analyzes the capabilities associated with a particular resource pool and its component services to make informed decisions on where a new instance should be created. When making this decision it consults not only all the Compute nodes across the resource pools until the ideal host is found.

In a third embodiment a distributed scheduler is used. A distributed scheduler is designed to coordinate the creation of instances across multiple compute services . Not only does the distributed scheduler analyze the capabilities associated with the resource pools available to the current compute service it also recursively consults the schedulers of any linked compute services until the ideal host is found.

In one embodiment either the smart scheduler or the distributed scheduler is implemented using rules engine and a series of associated rules regarding costs and weights associated with desired compute node characteristics. When deciding where to place an Instance rules engine compares a Weighted Cost for each node. In one embodiment the Weighting is just the sum of the total Costs. In a second embodiment a Weighting is calculated using a exponential or polynomial algorithm. In the simplest embodiment costs are nothing more than integers along a fixed scale although costs can also be represented by floating point numbers vectors or matrices. Costs are computed by looking at the various Capabilities of the available node relative to the specifications of the Instance being requested. The costs are calculated so that a good match has lower cost than a bad match where the relative goodness of a match is determined by how closely the available resources match the requested specifications.

In one embodiment specifications can be hierarchical and can include both hard and soft constraints. A hard constraint is a constraint is a constraint that cannot be violated and have an acceptable response. This can be implemented by having hard constraints be modeled as infinite cost requirements. A soft constraint is a constraint that is preferable but not required. Different soft constraints can have different weights so that fulfilling one soft constraint may be more cost effective than another. Further constraints can take on a range of values where a good match can be found where the available resource is close but not identical to the requested specification. Constraints may also be conditional such that constraint A is a hard constraint or high cost constraint if Constraint B is also fulfilled but can be low cost if Constraint C is fulfilled.

As implemented in one embodiment the constraints are implemented as a series of rules with associated cost functions. These rules can be abstract such as preferring nodes that don t already have an existing instance from the same project or group. Other constraints hard or soft may include a node with available GPU hardware a node with an available network connection over 100 Mbps a node that can run Windows instances a node in a particular geographic location etc.

When evaluating the cost to place a VM instance on a particular node the constraints are computed to select the group of possible nodes and then a weight is computed for each available node and for each requested instance. This allows large requests to have dynamic weighting if 1000 instances are requested the consumed resources on each node are virtually depleted so the Cost can change accordingly.

In a further embodiment the scheduler can be directly accessed or modified using an API and or a plugin interface. In one embodiment a plugin is implemented as a series of loadable and executable rules that can be provided to the compute service and run by the scheduler as part of its weighting or allocation process. In one embodiment this loadable ruleset can be implemented using a dynamically loadable or runnable program that has a series of expected inputs and provides its information on a defined series of outputs. In one embodiment these are stdin and stdout. In a second embodiment these are provided as function calls within a program module.

Turning now to a diagram showing one embodiment of the process of instantiating and launching a VM instance is shown as diagram . Although the implementation of the image instantiating and launching process will be shown in a manner consistent with the embodiment of the compute service as shown relative to the process is not limited to the specific functions or elements shown in . For clarity of explanation internal details not relevant to diagram have been removed from the diagram relative to . Further while some requests and responses are shown in terms of direct component to component messages in at least one embodiment the messages are sent via a message service such as message service as described relative to .

At time the API Server receives a request to create and run an instance with the appropriate arguments. In one embodiment this is done by using a command line tool that issues arguments to the API server . In a second embodiment this is done by sending a message to the API Server . In one embodiment the API to create and run the instance includes arguments specifying a resource type a resource image and control arguments. A further embodiment includes requester information and is signed and or encrypted for security and privacy. At time API server accepts the message examines it for API compliance and relays a message to Compute Controller including the information needed to service the request. In an embodiment in which user information accompanies the request either explicitly or implicitly via a signing and or encrypting key or certificate the Compute Controller sends a message to Auth Manager to authenticate and authorize the request at time and Auth Manager sends back a response to Compute Controller indicating whether the request is allowable at time . If the request is allowable a message is sent to the Compute Manager to instantiate the requested resource at time . At time the Compute Manager selects a Compute Worker and sends a message to the selected Worker to instantiate the requested resource. At time Compute Worker identifies and interacts with Network Controller to get a proper VLAN and IP address as described in steps relative to . At time the selected Worker interacts with the Object Store and or the Image Service to locate and retrieve an image corresponding to the requested resource. If requested via the API or used in an embodiment in which configuration information is included on a mountable volume the selected Worker interacts with the Volume Controller at time to locate and retrieve a volume for the to be instantiated resource. At time the selected Worker uses the available virtualization infrastructure as described relative to to instantiate the resource mount any volumes and perform appropriate configuration. At time selected Worker interacts with Network Controller to configure routing as described relative to step as discussed relative to . At time a message is sent back to the Compute Controller via the Compute Manager indicating success and providing necessary operational details relating to the new resource. At time a message is sent back to the API Server with the results of the operation as a whole. At time the API specified response to the original command is provided from the API Server back to the originally requesting entity. If at any time a requested operation cannot be performed then an error is returned to the API Server at time and the API specified response to the original command is provided from the API server at time . For example an error can be returned if a request is not allowable at time if a VLAN cannot be created or an IP allocated at time if an image cannot be found or transferred at time etc.

Various elements have been described as being pluggable and the operation of particular components in a pluggable fashion has been described relative to the respective underlying systems. A general architecture for pluggability is described below relative to . Individual adaptation to different systems is contemplated and expected.

In one embodiment the pluggable architecture is in line with an API endpoint . This API endpoint may be internal or external and may be hosted on a server external to the plug in architecture such as API server .

The plug in loader coordinates the interaction of the various parts of the plugin system. In one embodiment the plugin system is disposed between an internal API and an output which calls or interacts with an internal system or API shown in as internal API . In the event that no plug in is loaded calls on the API are proxied directly through to the output and from there to the internal API . In this fashion the plug in system can be transparent to ordinary calls.

If a user wishes to interact with the plugin system the user interacts with a special plugin API . By means of this plugin API the plugin system itself can be modified. In one embodiment the plugin API is an HTTP API and it uses the same authentication services as previously described. The HTTP API allows control signals to be set using headers or uploaded with a PUT or POST.

The plugin API interfaces with the plugin loader . In one embodiment the plugin loader includes a communication interface and an instruction processor . The communication interface allows the plugin system to interact with other remote systems to implement a portion of a plugin. The instruction processor allows various types of plugins to be used by the plugin system .

In particular one embodiment of the plug in loader includes an RPC module a binary loader module a process call module and a rule engine . In one embodiment the instruction processor and each submodule is implemented as described above relative to specifically as a tailored electrical circuit or as software instructions to be used in conjunction with a hardware processor to create a hardware software combination that implements the specific functionality described herein. To the extent that one embodiment includes processor executable instructions those instructions may include software that is stored on a processor readable medium. Further one or more embodiments have associated with them a buffer. The buffer can take the form of data structures a memory a processor readable medium or an off script processor facility. For example one embodiment uses a language runtime as an instruction processor running as a discrete operating environment as a process in an active operating environment or can be run from a low power embedded processor. In a second embodiment the instruction processor takes the form of a series of interoperating but discrete components some or all of which may be implemented as software programs. In another embodiment the instruction processor is a discrete component such as an embedded hardware processor.

In one embodiment the RPC submodule allows direct interaction with a remote service in the implementation of a plugin. In a first embodiment the plugin is defined completely in the context of the remote system. A call from the internal API is sent to a specified remote system via an RPC call. This RPC call is sent over the communication interface and is formatted as an HTTP request XMLRPC request SOAP request COM request CORBA request or similar. The remote system not shown processes the request based on the arguments and returns a response. The plug in loader then proxies the result from the RPC request to internal API via output .

In one embodiment the binary loader submodule is used to load a user provided script or binary module. Via the plugin API a user posts the module and entry point information where it is saved in a location accessible to the plug in loader . A call from the internal API is sent to the binary loader submodule which loads the user provided module and calls the appropriate entry point with the provided arguments. The plugin processes the request based on the arguments and returns a response. The plug in loader then proxies the result from the binary loader submodule request to internal API via output .

In one embodiment the binary loader submodule is used to call a user provided script or binary module that is run out of process. Via the plugin API a user posts the program and call information where it is saved in a location accessible to the plug in loader . A call from the internal API is sent to the process call submodule which uses the operating system API to load can call the user provided program with the correct arguments. The plugin processes the request based on the arguments and returns a response. The plug in loader then proxies the result from the process call submodule request to internal API via output .

Those of skill in the art will recognize that the loadable modules provided to the binary loader submodule or the process call submodule may need to be verified signed or run in a sandbox or in some type of secure operating environment to avoid issues of privilege escalation or overuse of resources.

In one embodiment the rule engine submodule is used to process a user provided set of rules. Via the plugin API a user posts a set of processing rules that are evaluated in order via the rule engine . The outcome after all applicable rules have been followed is sent to internal API via output .

Using the plugin based architecture allows various advantages over existing systems. The plugin mechanisms described allow the specialization of the system to particular datasets or processing loads giving better performance and a lower total cost per operation.

In another embodiment the plugin based architecture allows multi zone optimization. By allowing different types of resources in various zones a user can dictate where various elements of the cloud computing system should be placed. Because the end user has more knowledge concerning the hot spots in a particular application the exact mix of resources available for a particular call can be optimized to the program being run allowing maximum flexibility and parallel speed when performing all different types of jobs.

In a further embodiment the plugin based architecture can change the composition of the processors while a program is being executed allowing types of optimizations impossible with a fixed set of hardware resources. For example in a further embodiment the plugin based architecture includes user provided logic to optimize for non speed considerations such as cost.

In a further embodiment the plugins are used as part of a machine learning process. Machine learning is an umbrella term in which one or more algorithms are automatically developed using an interactive process to characterize or optimize a set of inputs. Using machine learning systems are able to automatically learn to recognize complex patterns and make intelligent decisions based on data. Using the plugin based architecture described herein machine learning is used to tune the characteristics and number of hardware resources during a run so as to come closer to the desired parameters. For example one particular computation may be practicable using either ten very powerful virtual machines or 100 much weaker virtual machines or some mix of both. By observing the use of machines over time a machine learning algorithm can determine that the calculation can be done in the least amount of time using 12 powerful machines and 17 less powerful machines that it can be performed using the least amount of money using 2 powerful machines and 68 less powerful machines or that optimizing for the most efficient use of time and money together uses 6 powerful machines and 24 less powerful machines. In this fashion exposing the underlying APIs via a plugin system allows automatic on the fly tuning. Unlike prior art systems which do not allow for user directed prioritization the plugin based architecture allows higher dimensional user directed learning and prioritization.

In one embodiment the machine learning process runs as another module in instruction processor on a compute server or on a dedicated processor. The input to the machine learning process is provided via the API and sent via the RPC submodule to the machine learning process. The output of the machine learning process is returned via the RPC submodule and guides the allocation of machines.

In one embodiment the plugin based architecture the scheduler selects a host to run a command based on a set of constraints which are specified as key value pairs. Different clusters vendors or workloads do better with different types of resource allocation and the plugin based architecture allows modification of the allocation at a service provider level and at a tenant level. For example a first embodiment achieves better performance with horizontal allocation placing each new VM in a new rack round robin style. A second embodiment achieves better performance with vertical allocation placing each new VM in the same rack until the rack is full.

In a further embodiment resources that are in the same project can be placed next to each other for better latency. For example one embodiment uses the plugin architecture to split up a large dataset between background storage pools based upon a user directed sharding key and then uses the locations of different parts of the dataset to place compute VMs on the same or nearby physical machines reducing latency and network transit time.

Some of the constraints may be user specified and may include both hard and soft constraints. Pluggable architecture for various algorithms may be provided with the possibility of providing an allocator via an API call or discovering the available constraints that can be specified through API calls.

In one embodiment the pluggable allocator uses a weighted allocation scheme. This allocator finds a best fit VM or storage allocation based upon the available resources and available constraints. The provisioned VM may not necessarily be exactly what was asked but would instead be provisioned according to a fitness function that evaluated the best VM available at the time. In various embodiments different weights are placed on price geographic location proximity to other VMs particular capabilities CPU disk GPU network throughput and latency to a particular location.

In one embodiment the pluggable allocator uses a dynamic weighting scheme. In this embodiment the fitness function and weights used to determine the best allocation of resources are changed over time. This is done either directly by a user through the plugin API or in response to an equation or change in another value.

In one embodiment the pluggable allocator uses an auction weighting scheme. In this embodiment different datacenters clusters zones or other entities bid for different VMs storage resources or network resources to be allocated to their region. Bidding is used in this embodiment as a method to adaptively find an equilibrium in a distributed system. This allows better balancing between clusters and more optimal utilization. In a further embodiment price is used in an auction weighting scheme to dynamically balance between vendors.

Those of skill in the art will appreciate that it would be difficult or impossible to have an auction weighting scheme that balances between multiple cloud vendors in a prior art system. Not only would it be difficult to get multiple vendors to work together as closely as required but the plugin based architecture is required for different users to input their preferences in a way that makes the system respond appropriately to their desires.

In one embodiment the pluggable allocator uses an energy minimization scheme. Multiple zones corresponding to different physical locations are used to optimize energy use. For example compute intensive workloads migrate around the globe so that they are always on the nighttime side of the planet. In a second embodiment hot datacenters shed load to decrease their total energy output.

Further embodiments are contemplated that integrate the plugin based architecture for more than one service or component. For example the plugin based network service can be used in conjunction with the plugin based authn authz service to provide a cloud based virtual private network that incorporates cloud resources but authenticates to a private LDAP server behind a company firewall. In this embodiment the network service plugin is used to create and route virtual private networks and to encrypt those networks based on a user defined key or certificate. The authn authz service uses a plugin to proxy authentication duties to a private LDAP server that is connected via the network service to authenticate users and machines using the VPN.

In a further embodiment the authn authz service uses a plugin to provide private RBAC security for consumption by other services. The object storage service uses a plugin to consume the private RBAC security and to modify the response to individual requests based on responses from the authn authz service.

With each service instrumented and provided with the plugin based architecture as described above user based modification of the cloud system is possible while still maintaining multi tenant security and availability. Although illustrative embodiments have been shown and described a wide range of modification change and substitution is contemplated in the foregoing disclosure and in some instances some features of the embodiments may be employed without a corresponding use of other features. In particular the use of multiple plugin based services to modify the working of an individual cloud computing system or an individual group of resources is contemplated. Accordingly it is appropriate that the appended claims be construed broadly and in a manner consistent with the scope of the embodiments disclosed herein.

