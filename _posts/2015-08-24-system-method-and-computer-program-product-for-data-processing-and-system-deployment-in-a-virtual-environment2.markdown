---

title: System, method and computer program product for data processing and system deployment in a virtual environment
abstract: In one embodiment, a method for deploying a data processing system in a virtual environment includes deploying a data processing system call interface in a virtual machine in a virtualization environment, the system call interface being configured to trigger a locally called data processing instruction. The method also includes deploying a data processing driver in a virtual machine management platform in the virtualization environment, the data processing driver being configured to read the data processing instruction triggered by the system call interface. Moreover, the method includes deploying a data processing instruction optimizer in the virtualization environment, the optimizer being configured to optimize the data processing instruction read by the deployed data processing driver.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09582311&OS=09582311&RS=09582311
owner: International Business Machines Corporation
number: 09582311
owner_city: Armonk
owner_country: US
publication_date: 20150824
---
According to one embodiment a computer program product for deploying a data processing system in a virtual environment includes a computer readable storage medium having computer readable program code embodied therewith. The embodied computer readable program code includes computer readable program code configured to deploy a data processing system call interface in a virtual machine in a virtualization environment the system call interface being configured to trigger a locally called data processing instruction. The embodied computer readable program code also includes computer readable program code configured to deploy a data processing driver in a virtual machine management platform in the virtualization environment the data processing driver being configured to read the data processing instruction triggered by the system call interface. Moreover the embodied computer readable program code includes computer readable program code configured to deploy a data processing instruction optimizer in the virtualization environment the optimizer being configured to optimize the data processing instruction read by the deployed data processing driver.

In another embodiment a system includes a virtualization environment hosting at least one virtual machine and at least one virtual machine management platform. The system also includes a processor and logic integrated with and or executable by the processor. The logic is configured to deploy a data processing system call interface in the at least one virtual machine in the virtualization environment the system call interface being configured to trigger a locally called data processing instruction. The logic is also configured to deploy a data processing driver in the virtual machine management platform in the virtualization environment the data processing driver being configured to read the data processing instruction triggered by the system call interface. Moreover the logic is configured to deploy a data processing instruction optimizer in the virtualization environment the optimizer being configured to optimize the data processing instruction read by the deployed data processing driver.

According to another embodiment a method for deploying a data processing system in a virtual environment includes deploying a data processing system call interface in a virtual machine in a virtualization environment the system call interface being configured to trigger a locally called data processing instruction. The method also includes deploying a data processing driver in a virtual machine management platform in the virtualization environment the data processing driver being configured to read the data processing instruction triggered by the system call interface. Moreover the method includes deploying a data processing instruction optimizer in the virtualization environment the optimizer being configured to optimize the data processing instruction read by the deployed data processing driver.

Other aspects and embodiments of the present invention will become apparent from the following detailed description which when taken in conjunction with the drawings illustrate by way of example the principles of the invention.

The following description is made for the purpose of illustrating the general principles of the present invention and is not meant to limit the inventive concepts claimed herein. Further particular features described herein can be used in combination with other described features in each of the various possible combinations and permutations.

Unless otherwise specifically defined herein all terms are to be given their broadest possible interpretation including meanings implied from the specification as well as meanings understood by those skilled in the art and or as defined in dictionaries treatises etc.

It must also be noted that as used in the specification and the appended claims the singular forms a an and the include plural referents unless otherwise specified. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The following description discloses several preferred embodiments of systems methods and computer program products for performing data backup or data recovery operations in a virtual environment.

In view of the drawbacks recited previously a data processing method in a virtualization environment according to one embodiment may efficiently avoid considerable consumption of virtual network resources. In another embodiment a data processing method in a virtualization environment is capable of avoiding redundant data backup or data recovery of a plurality of virtualization work units.

According to one embodiment a data processing method in a virtual environment includes reading a data processing instruction locally called by a virtual work unit optimizing the read data processing instruction and performing data processing for the virtual work unit using the optimized data processing instruction.

According to another embodiment the data processing is data backup processing and the data processing instruction is a data backup instruction. Performing data processing for a virtual work unit using the optimized data processing instruction includes reading data to be backed up from a shared storage of the virtual work unit and writing the read data to be backed up to a backup storage medium.

According to yet another embodiment the data processing is data recovery processing and the data processing instruction is a data recovery instruction. Performing data processing for virtual work unit using the optimized data processing instruction includes reading data to be recovered from a backup storage and writing the read data to be recovered to a shared storage of the virtual work unit.

In another embodiment a data processing system in a virtual environment includes a module adapted for reading a data processing instruction locally called by a virtual work unit a module adapted for optimizing the read data processing instruction and a module adapted for performing data processing for the virtual work unit using the optimized data processing instruction.

In yet another embodiment the data processing is data backup processing and the data processing instruction is a data backup instruction. The module adapted for performing data processing for the virtual work unit using the optimized data processing instruction is configured to read data to be backed up from a shared storage of the virtual work unit and to write the read data to be backed up to a backup storage medium.

According to another embodiment the data processing is data recovery processing and the data processing instruction is a data recovery instruction. The module adapted for performing data processing for the virtual work unit using the optimized data processing instruction is configured to read data to be recovered from a backup storage medium and to write the read data to be recovered to a shared storage medium of the virtual work units.

In another embodiment a method for deploying a data processing system in a virtualization environment includes deploying a data processing system call interface in a virtual machine in a virtualization environment the system call interface being for triggering a locally called data processing instruction deploying a data processing driver in a virtual machine management platform in a virtualization environment the data processing driver being for reading the data processing instructions triggered by the system call interface and deploying a data processing instruction optimizer in a virtualization environment the optimizer being for optimizing the data processing instruction read by the deployed data processing driver.

In one approach the data processing system call interface is a data backup system call interface the data processing instruction is a data backup instruction the data processing driver is a data backup driver and the data processing instruction optimizer is a data backup instruction optimizer.

In another approach the data processing system call interface is a data recovery system call interface the data processing instruction is a data recovery instruction the data processing driver is a data recovery driver and the data processing instruction optimizer is a data recovery instruction optimizer.

According to the various embodiments and approaches described herein when the virtual work units virtual machines perform a data processing operation each virtual work unit does not need to perform a data processing operation through a virtual network thereby preventing the virtual work units from competing for virtual network resources and from excessive consumption of these resources. Additionally a suitable optimization policy may be selected to optimize the read data processing instructions as desired so as to further achieve a technical effect of avoiding degradation of system performance caused by redundant data processing and excessive competition on the virtual environment or virtual system operation resources.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as logic a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

In use the gateway serves as an entrance point from the remote networks to the proximate network . As such the gateway may function as a router which is capable of directing a given packet of data that arrives at the gateway and a switch which furnishes the actual path in and out of the gateway for a given packet.

Further included is at least one data server coupled to the proximate network and which is accessible from the remote networks via the gateway . It should be noted that the data server s may include any type of computing device groupware. Coupled to each data server is a plurality of user devices . Such user devices may include a desktop computer lap top computer hand held computer printer or any other type of logic. It should be noted that a user device may also be directly coupled to any of the networks in one embodiment.

A peripheral or series of peripherals e.g. facsimile machines printers networked and or local storage units or systems etc. may be coupled to one or more of the networks . It should be noted that databases and or additional components may be utilized with or integrated into any type of network element coupled to the networks . In the context of the present description a network element may refer to any component of a network.

According to some approaches methods and systems described herein may be implemented with and or on virtual systems and or systems which emulate one or more other systems such as a UNIX system which emulates an IBM z OS environment a UNIX system which virtually hosts a MICROSOFT WINDOWS environment a MICROSOFT WINDOWS system which emulates an IBM z OS environment etc. This virtualization and or emulation may be enhanced through the use of VMWARE software in some embodiments.

In more approaches one or more networks may represent a cluster of systems commonly referred to as a cloud. In cloud computing shared resources such as processing power peripherals software data servers etc. are provided to any system in the cloud in an on demand relationship thereby allowing access and distribution of services across many computing systems. Cloud computing typically involves an Internet connection between the systems operating in the cloud but other techniques of connecting the systems may also be used.

The workstation shown in includes a Random Access Memory RAM Read Only Memory ROM an I O adapter for connecting peripheral devices such as disk storage units to the bus a user interface adapter for connecting a keyboard a mouse a speaker a microphone and or other user interface devices such as a touch screen and a digital camera not shown to the bus communication adapter for connecting the workstation to a communication network e.g. a data processing network and a display adapter for connecting the bus to a display device .

The workstation may have resident thereon an operating system such as the Microsoft Windows Operating System OS a MAC OS a UNIX OS etc. It will be appreciated that a preferred embodiment may also be implemented on platforms and operating systems other than those mentioned. A preferred embodiment may be written using JAVA XML C and or C language or other programming languages along with an object oriented programming methodology. Object oriented programming OOP which has become increasingly used to develop complex applications may be used.

Now referring to a storage system is shown according to one embodiment. Note that some of the elements shown in may be implemented as hardware and or software according to various embodiments. The storage system may include a storage system manager for communicating with a plurality of media on a higher storage tier and a lower storage tier . The higher storage tier preferably may include one or more random access and or direct access media such as hard disks in hard disk drives HDDs nonvolatile memory NVM solid state memory in solid state drives SSDs etc. and or others noted herein. The lower storage tier may preferably include one or more sequential access media such as magnetic tape in tape drives optical media etc. and or others noted herein. Additional storage tiers may include any combination of storage memory media. The storage system manager may communicate with the storage media on the higher and lower storage tiers through a network such as a storage area network SAN as shown in . The storage system manager may also communicate with one or more host systems not shown through a host interface which may or may not be a part of the storage system manager . The storage system manager and or any other component of the storage system may be implemented in hardware and or software and may make use of a processor not shown for executing commands of a type known in the art such as a central processing unit CPU a field programmable gate array FPGA an application specific integrated circuit ASIC etc. Of course any arrangement of a storage system may be used as will be apparent to those of skill in the art upon reading the present description.

In more embodiments the storage system may include any number of data storage tiers and may include the same or different storage memory media within each storage tier. For example each data storage tier may include the same type of storage memory media such as HDDs SSDs sequential access media tape in tape drives optical disk in optical disk drives etc. direct access media CD ROM DVD ROM etc. or any combination of media storage types. In one such configuration a higher storage tier may include a majority of SSD storage media for storing data in a higher performing storage environment and remaining storage tiers including lower storage tier and additional storage tiers may include any combination of SSDs HDDs tape drives etc. for storing data in a lower performing storage environment. In this way more frequently accessed data data having a higher priority data needing to be accessed more quickly etc. may be stored to the higher storage tier while data not having one of these attributes may be stored to the additional storage tiers including lower storage tier . Of course one of skill in the art upon reading the present descriptions may devise many other combinations of storage media types to implement into different storage schemes according to the embodiments presented herein.

According to some embodiments the storage system such as may include logic adapted to receive a request to open a data set logic adapted to determine if the requested data set is stored to a lower storage tier of a tiered data storage system in multiple associated portions logic adapted to move each associated portion of the requested data set to a higher storage tier of the tiered data storage system and logic adapted to assemble the requested data set on the higher storage tier of the tiered data storage system from the associated portions.

Of course this logic may be implemented as a method on any device and or system or as a computer program product according to various embodiments.

In operation a data processing instruction which is called locally by a virtual work unit similar to the virtual machine as shown in is read. The read locally called data processing instruction may be a data processing instruction generated by a backup client in the virtual work unit a virtual work unit herein may be understood as having a same or similar meaning as technical terms such as a virtual machine a virtual work station etc. by adding an application programming interface API interface to the virtual machine so as to increase hypercall. Hypercall is a basic mechanism for implementing a system call by a virtual machine system or a virtual environment. To add a corresponding hypercall based on the type of data processing only three steps are executed for adding a new virtual machine system call registering a new system call number updating a system call table and adding a new function. Those skilled in the art should understand that a plurality of methods may be adopted to add a new system call in a virtual machine and the embodiments described herein are not limited to these three steps described above. The method in which a new system call is added in a virtual environment may depend on among other things a particular embodiment of the virtual environment a requirement of a user of a virtual machine etc. Any method in which a new system call e.g. hypercall is added falls within the scope of the present invention. The reason for adding a new system call hypercall is that the data processing instruction generated by a hypercall will be a locally called instruction which is transferred through a virtual machine hypervisor without needing to send a data processing request to a shared storage medium via a virtual network or transferring the data to be processed via the virtual network. In this way precious virtual network resources are saved.

In one embodiment each virtual machine may be added as an API interface for a hypercall such that each virtual machine sends a data processing instruction via a local call. Those skilled in the art should understand dependent on different specific virtual environments an API interface for hypercall may be defined in a virtual machine in many different ways and the capability of triggering a locally called data processing instruction including data backup and data recovery through the hypercall interface is an objective of using a hypercall according to some approaches. The locally called data processing instruction is transferred via the virtual machine hypervisor and then is read at operation .

It should be further noted that the data processing instruction may be read in several ways. According to one embodiment the data processing instruction may be read in a predetermined interval for example every 15 seconds every 10 seconds every 5 seconds etc. According to another embodiment the data processing instruction may be read based on a predetermined number of instructions for example every 20 pieces of data processing instructions every 10 pieces every 5 pieces etc. Any way in which the locally called data processing instruction is read falls within the scope of the present invention according to various embodiments.

A data backup instruction at least comprises three kinds of information in one approach information on data to be backed up information on backup storage destination and information on backup policy. An example for data processing instructions according to one embodiment may be Backup usr lib 9.186.63.121 archive full wherein backup indicates that these data processing instructions are to perform data backup operations 9.186.63.121 archive indicates a backup storage destination and full indicates that the backup policy is full backup possible backup policies may further include differential backup incremental backup etc. . It should be noted that the specific form of data processing instructions or hypercall is related to a specific embodiment of a virtual environment. Any form or format by which a data processing instruction or hypercall is expressed falls within the scope of the present invention.

In operation the read data processing instruction is optimized. It should be noted that since there are typically a plurality of virtual machines in a virtual environment it is possible that a plurality of data processing instructions from a plurality of virtual machines are read at operation . Accordingly optimization may also be performed with respect to the plurality of data processing instructions from a plurality of virtual machines at operation . Of course those skilled in the art should understand that if there is only one virtual machine or there is only one virtual machine that sends a data processing instruction the data processing instruction may also be read at operation and be optimized at operation .

Further optimization may be performed based on a plurality of optimization policies. According to an optimization policy in one embodiment the data processing instructions on same data from different virtual work units may be merged. That is if it is determined through analysis that a plurality of data processing instructions sent from different virtual work units involve processing the same data content for example some parts of the data contents to be backed up by a plurality of virtual work units are the same then the parts involving same data content in these data processing instructions are merged thereby avoiding repetitive data processing operations on same data content.

According to an optimization policy in another embodiment data processing instructions from different virtual work units may be analyzed so as to select a suitable data processing timing. That is if the virtual environment or virtual system is processing other operations and occupying considerable system resources when the virtual work unit sends the data processing instruction through hypercall then the data processing operation for the virtual work unit is suspended and will be performed at a selected suitable timing in one example. In this way excessive competition on operation resources in a virtual environment may be avoided.

According to a another optimization policy in one embodiment the read data processing instruction may not be processed and may be directly taken as an optimized data processing instruction to perform data processing operation for the virtual work unit. In other words according to one embodiment it is also an optimization policy that the read data processing instruction is not processed and directly used to perform data processing operation for the virtual work unit. The plurality of possible optimization policies as set forth above are presented only for illustrating a technical solution according to various embodiments more clearly without limiting the optimization or optimization policies possible in the scope of the invention. Any optimization policy falls within the scope of the present invention.

In operation the optimized data processing instruction is utilized to perform data processing for the virtual work unit. According to one embodiment the data processing may refer to data backup. According to another embodiment the data processing may refer to data recovery. These two embodiments are described in detail with reference to .

With method as shown in when a virtual work unit virtual machine is performing data processing operation the data processing operation is uniformly performed for virtual work units by reading the data processing instruction which are locally called by the virtual work units without performing data processing operations by respective work units through a virtual network respectively thereby preventing virtual work units from competing on and excessively consuming virtual network resources. Meanwhile a suitable optimization policy may be selected to optimize a read data processing instruction as desired so as to further achieve a technical effect of avoiding degradation of system performance due to redundant data processing and excessive competition on the virtual environment or virtual system operation resource.

Operation corresponds to operation in and in operation of a locally called data backup instruction is read. Operation and correspond to step in . In operation of the read data backup instruction is sent to an optimizer.

It should be noted that specific optimization may be implemented by an individual optimizer or implemented by a module or mechanism adapted for reading the locally called data processing instructions. Depiction of optimizer at operation and is only for depicting embodiments more clearly and it does not mean that the optimizer is a different module or mechanism from the module or mechanism adapted for reading the locally called data backup instructions in operation from the module or mechanism adapted for reading the locally called data processing instructions in operation in or from the module or mechanism adapted for reading the locally called data recovery instructions in operation of . In other words operations and in are not necessary steps according to several embodiments. If the module or mechanism adapted for reading data processing instructions locally called by a virtual work unit is the same module or mechanism adapted for performing optimization then operations and are unnecessary.

Next operation and correspond to operation in . At operation in the data to be backed up is read based on the optimized data backup instruction. According to one embodiment the data to be backed up of a virtual work unit refer to data in a shared storage medium of the virtual machine. At operation the read data to be backed up is written to a backup storage medium.

According to one approach backup storage medium may be a remote storage device communicating with a physical machine physical hardware on which the virtual work units reside through a network such as Ethernet. According to another embodiment the backup storage medium may be a plug pull portable storage device communicating with a physical machine physical hardware on which the virtual work units reside through a communication interface such as USB interface Firewire interface an optical driver etc. Those skilled in the art should understand that the backup storage medium merely represents a destination for backing up data and any form of storage medium device recipient etc. may be used as long as it becomes a destination for the data to be backed up.

With method as shown in when a virtual work unit virtual machine is performing a data backup operation the data backup operation is uniformly performed for the virtual work unit by reading data backup instructions locally called by the virtual work unit without performing data backup operations by respective work unit through a virtual network respectively thereby preventing virtual work units from competing on and excessively consuming virtual network resources. Meanwhile a suitable optimization policy may be selected to optimize a read data backup instruction as desired so as to further achieve a technical effect of avoiding degradation of system performance due to redundant data backup and excessive competition on the virtual environment or virtual system operation resource.

Operation and operation correspond to operation in . At operation in the data to be recovered is read according to the optimized data recovery instruction. According to one embodiment the data to be recovered of virtual work units refers to data stored in the backup storage medium. At operation the read data to be recovered is written to a shared storage medium of the virtual work unit. Accordingly compared with the difference of respective operations in lies mainly in data flow. The data flow in the data backup method of is from a shared storage medium of the virtual work unit to a backup storage medium while the data flow in the data backup method of is from a backup storage medium to a shared storage medium of the virtual work unit.

With method as shown in when a virtual work unit virtual machine is performing a data recovery operation the data recovery operation is uniformly performed for a virtual work unit by reading data recovery instructions locally called by the virtual work units without performing data recovery operations by a respective work unit through a virtual network respectively thereby preventing virtual work units from competing on and excessively consuming virtual network resources in preferred embodiments. Meanwhile a suitable optimization policy may be selected to optimize the read data recovery instructions as desired so as to further achieve a technical effect of avoiding degradation of system performance due to redundant data recovery and excessive competition on the virtual environment or virtual system operation resources in most approaches.

The instruction reading module or mechanism may be understood to correspond to operation of or operation of and may be adapted for reading data processing instructions locally called by the virtual work unit. Referring again to the instruction sending module or mechanism may be understood to correspond to operation of or operation of and may be adapted for sending the read data processing instructions to the optimizer. Referring once again to the optimized instruction module or mechanism may be understood to correspond to operation of or operation of and may be adapted for receiving the optimized data processing instructions from the optimizer. It should be noted that from the above depiction with reference to it is seen that the instruction sending module or mechanism and optimized instruction receiving module or mechanism are not mandatory elements.

The to be processed data reading module or mechanism may be understood to correspond to operation of or operation of and may be adapted for reading the data to be processed according to the optimized data processing instructions. Referring again to according to one embodiment the data processing instructions may be data backup instructions thus the to be processed data reading module or mechanism reads the data to be backed up of virtual work units from a shared storage medium of the virtual work units. Correspondingly the data processing module or mechanism writes the data to be backed up to the backup storage medium. According to another embodiment the data processing instructions may be data recovery instructions thus the to be processed data reading module or mechanism reads the data to be recovered from the virtual work units. Correspondingly the data processing module or mechanism writes the data to be recovered to the shared storage medium of virtual work units.

The system as shown in further comprises a backup optimizer located in the privileged domain Dom a virtual machine hypervisor a backup driver in the virtual machine hypervisor and real physical hardware on which the virtual machines reside. It should be noted that the virtual machine hypervisor is essentially a virtual machine management platform which may also be referred as a virtual machine manager VMM or virtual machine management platform in some virtual environments. In other words a layer of virtual machine manager or virtual machine monitor is set up on a real hardware platform and then the client operation system of the virtual machines may be started by the virtual machine manager or virtual machine monitor. The flow for the system for implementing a virtual machine data backup operation as shown in is specified as follows.

Firstly users of virtual machines A to C decide to perform backup operation to the data of the three virtual machines and then backup metadata of the three virtual machines are read from the shared storage medium in the three virtual machines respectively. Backup metadata refers to the data for describing data to be backed up. For example backup metadata may comprise the following information backup destination backup type full backup differential backup incremental backup etc. etc. Backup metadata may be pre defined and stored by a user of each virtual machine which may be either stored in the shared storage medium or stored wherever it may be accessed. Alternatively backup metadata may be directly transferred to the Hycall i.e. a backup hypercall of each virtual machine in as a parameter when the user determines that it is to be backed up as long as the backup client in the virtual machine can access or be aware of the operation.

Whether to pre define backup metadata and where to store the backup metadata may depend on a specific embodiment which does not constitute a limitation to the scope of the present invention. merely depicts the technical solution with an example that the backup metadata information is stored in the shared storage medium . The backup client of the virtual machines in after reading the backup metadata immediately issues a locally called data backup instruction to the virtual machine hypervisor via the backup Hycall in the virtual machine in one approach. The method of adding a backup Hycall to each virtual machine and performing a local Hycall has been introduced in detail in the above depiction with reference to according to one embodiment which will not be detailed here. The local called instruction as shown in is transmitted via a virtual machine system call instead of being transmitted by virtual network Vnet such that the local system call only occupies very few system resources compared to transmitting backup data via the virtual network.

Next the backup driver reads according to a predetermined rule the data backup instructions called locally by the three virtual machines where the predetermined rule may be reading regularly reading every certain number of instructions reading in any other predetermined manner etc. Then the backup driver sends the read data backup instructions to the backup optimizer in the privileged domain where the backup optimizer performs optimization processing on the data backup instructions. It should be noted that the backup optimizer being in the privileged domain is only an embodiment for the sake of providing a better interactive interface such that the use may easily insert an optimization backup policy and algorithm in his favor. In fact the backup driver and backup optimizer may also be in a particular virtual machine DomU to work. Further the backup driver and the backup optimizer may also be integrated into one e.g. the backup driver per se has a function of optimizing the read data backup instructions.

It should be further noted that as mentioned in the description with reference to there may be a varied of policies for optimization including merging redundant backup data selecting a suitable backup time etc. Besides the backup driver in may perform data backup operation for the virtual machines by utilizing the data backup instructions without performing any processing on the read data backup instructions which is also a special optimization policy.

Continuously with the system architecture of as an example after the backup optimizer completes optimization to the data backup instructions it sends the optimized data backup instructions to the backup driver . With the optimized data backup instructions the backup driver reads the data to be backed up from the shared storage and then writes the read data to be backed up to the backup storage thereby completing the data backup operation of virtual machines A to C. For the sake of simplicity only shows a backup storage medium . In fact each virtual machine may set its own different storage destination. That is to say there may be a plurality of different backup storage media . It is through the virtual network Vnet that the backup driver reads the data to be backed up from the shared storage medium while it is through the virtual network Vnet and a real physical network that the backup driver writes the data to be backed up to the backup storage medium if the backup storage medium is a remote storage medium . The relationship between the virtual network Vnet and the real physical network may be understood as the virtual machines being in connection and communication with the real physical network via the Vnet.

From system of and the above description it is seen that different from a conventional data backup system as shown in the virtual machines A to C in do not need considerable data reading to be backed up through the virtual network and physical network and then writing the data to be backed up to the backup storage through the virtual network and physical network.

Instead with the system of since a data backup request of a virtual machine directly issues a data backup instruction via a local call the data transferred to each virtual machine through the network is only limited to very little data backup metadata information. The subsequent data to be backed up is directly intercepted by the backup driver which directly writes to the backup storage without entering into each virtual machine through the virtual network. In this way considerable virtual network resources are saved potential network congestion phenomenon occurring during a data backup operation is prevented and the system performance and operation efficiency are increased. Meanwhile since the backup driver may read data backup instructions for each virtual machine it may optimize these instructions comprehensively based on an optimization policy thereby achieving a plurality of technical effects of improving system running efficiency and saving system storage resources such as preventing possible redundant backup selecting a suitable backup timing etc.

It should be further noted that shows a data flow with data backup operations as an example and the description of such has been provided above. Those skilled in the art should note that the same system architecture may be used for data recovery operations just with a reverse data flow from the backup storage to the shared storage and a similar technical effect may also be achieved.

Though the system of shows an embodiment of a data backup operation system in a virtualization environment those skilled in the art may deploy a system similar to that as shown in in a conventional virtualization environment. Deployment operations may include deploying a data processing system call interface in a virtual machine in a conventional virtualization environment the system call interface being for triggering locally called data processing instructions deploying a data processing driver in a virtualization management platform in a virtualization environment the data processing driver being for reading data processing instructions triggered by the system call interface deploying a data processing instruction optimizer in a virtualization environment the optimizer being for optimizing data processing instructions read by the deployed data processing driver. These deployment operations have no sequence requirement. By virtue of these deployment operations a data processing service that may save network resources and storage resources and improve system performance as mentioned above may be provided on the basis of a conventional virtualization environment. According to one embodiment data processing refers to data backup. According to another embodiment data processing refers to data recovery.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

