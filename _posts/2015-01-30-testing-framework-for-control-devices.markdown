---

title: Testing framework for control devices
abstract: The present disclosure generally relates to the automated testing of a system that includes software or hardware components. In some embodiments, a testing framework generates a set of test cases for a system under test using a grammar. Each test case may perform an action, such as provide an input to the system under test, and result in an output from the system under test. The inputs and outputs are then compared to the expected results to determine whether the system under test is performing correctly. Specifically, the system under test may be analyzed to determine whether it is capable of properly processing control instructions and input signals and/or generating expected output control signals and additional control/feedback information. The data can then be interpreted in the grammar system and/or used as input to a fault isolation engine to determine anomalies in the system under test.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09400725&OS=09400725&RS=09400725
owner: Wurldtech Security Technologies
number: 09400725
owner_city: Vancouver
owner_country: CA
publication_date: 20150130
---
This application is a continuation of U.S. patent application Ser. No. 13 620 532 entitled TESTING FRAMEWORK FOR CONTROL DEVICES filed Sep. 14 2012 which is a continuation of U.S. patent application Ser. No. 12 395 363 entitled Testing Framework for Control Devices and filed Feb. 27 2009 now U.S. Pat. No. 8 433 542 which claims the benefit of U.S. Provisional Application No. 61 032 046 entitled Test Bench for Control Devices filed Feb. 27 2008 and U.S. Provisional Application No. 61 077 459 entitled Testing Framework for Control Devices filed Jul. 1 2008 the entirety of which are incorporated herein by reference.

Generally described computing devices can be utilized in a variety of contexts such as for exchanging information facilitating communication between users facilitating the operation and control of a wide variety devices and processes and the like. In the context of a manufacturing or production environment a computing network made up of a number of computing devices including personal computing devices server computing devices programmable logic controllers PLCs and or other networked devices can be utilized in conjunction with a communication network such as the Internet to facilitate the operation and control of various devices processes. For example a networked PLC may be utilized to control the operation of physical manufacturing or processing equipment such as controllers for valves power supplies pumps machinery etc. Similarly a software application or suite of software applications may be hosted on a networked computing device such as a server or personal computing device to receive instructions regarding the operation of various equipment and transmit the appropriate respective instructions to the appropriate equipment such as through a PLC .

A fault in one or more networked computing devices such a fault in a computing device can lead to the failure of associated equipment loss of manufacturing production time property damage and the like. Accordingly manufacturing production computing networks including hardware and software aspects can be designed with redundant components to avoid fault conditions during execution in a manufacturing production environment. For example a PLC may include a fail safe mode such that in the event of a fault the outputs from the PLC mitigate potential damage to attached equipment or errant instructions that could cause additional faults damage.

Computing systems can be tested to verify that requirements for safety and redundancy are met and to discover errors in design implementation. For example a testing system can be implemented such as in a laboratory that attempts to emulate various commands instructions or other environmental information and then measure the response generated by the computing device s being tested. The emulated commands instructions or other environment information can be embodied as a test case or testing procedure that can be executed by a testing system.

One approach to the generation of test cases and or testing procedures for computing device testing involves the utilization of testing framework that is in communication solely with the device under test. This approach however can be inefficient in recreating many of the inputs and or operating environments associated with the device under test. For example in a system under test including multiple networked computing devices the testing framework would need to analyze inputs outputs from each computing device in the system under test in order to accurately test the system. For example a computing device in a system under test experiencing an error may still be generating an expected output coinciding with an output generated by the computing device entering a fail safe mode. However in such a fail safe mode the computing device would not be able to properly process inputs from a control computing device. Accordingly current testing approaches can become deficient in properly assessing system under test performance as a function of a testing environment.

The present disclosure generally relates to the automated testing of a system that includes software or hardware components referred to herein as the system under test or device under test . In some embodiments a testing framework generates a set of test cases for a system under test using a grammar. Each test case may perform an action such as provide an input to the system under test and result in an output from the system under test. The inputs and outputs are then compared to the expected results to determine whether the system under test is performing correctly. For example the testing framework can be used to monitor the digital inputs and or outputs of a programmable logic controller PLC and or determine whether the PLC is performing to its specified behavior. Specifically the PLC may be analyzed to determine whether it is capable of properly processing control instructions and input signals and or generating expected output control signals and additional control feedback information. The data can then be interpreted in the grammar system and or used as input to a fault isolation engine to determine anomalies in the system under test.

In an illustrative embodiment the testing framework also collects a set of outputs generated by computing devices associated with a testing environment such as a client application. In such an embodiment the testing framework can operate as a communication bridge between components of the system under test or between a control application and a system under test. Additionally the collected outputs from the computing devices such as the client application are then utilized in processing the outputs from the system under test to assess performance and or identify potential faults.

This disclosure generally relates to testing and testing frameworks. More specifically it relates to systems and or methods for providing a testing framework for a system under test. In some embodiments the testing framework can be used to assess the robustness of process control devices through the monitoring of outputs from one or more components in a testing environment that are typically considered inputs to a system under test. Additionally the testing framework can assess the robustness of process control devices through monitoring of outputs responsive to a testing sequence e.g. a series of test cases provided by the testing framework. The monitored outputs are generated by the system under test and collected by the testing framework.

In accordance with an illustrative embodiment the testing framework can be used to assess specific vulnerabilities and security threats to control system devices and networks. The present disclosure may be particularly beneficial for systems such as process control and supervisory control and data acquisition SCADA systems that have traditionally used closed proprietary architectures. However one skilled in the relevant art will appreciate that the disclosed testing framework operating environment test cases and grammars are illustrative in nature and should not be construed as limiting. Additionally the present disclosure should not be construed to be applicable to any particular system under test or device under and that all disclosed embodiments are also illustrative in nature.

Embodiments of the disclosure will now be described with reference to the accompanying figures wherein like numerals refer to like elements throughout. The terminology used in the description presented herein is not intended to be interpreted in any limited or restrictive manner simply because it is being utilized in conjunction with a detailed description of certain specific embodiments of the invention. Furthermore embodiments of the invention may include several novel features no single one of which is solely responsible for its desirable attributes or which is essential to practicing the inventions herein described.

Client application may be an application running on a computing device that allows a user to select configuration and test procedures to run on system under test . In an embodiment where client application resides on a computer separate from testing framework client application may send data to testing framework that specifies the user selected configuration and test procedures to run. After tests have been run on system under test client application can receive results from testing framework and generate reports based on the results. In an alternative embodiment the client application may be hosted as a network provided service.

Testing framework may be an application running on a computer server that generates and executes tests on system under test based on the configuration and test procedures selected by the user with client application . For example testing framework can include a web service component running on a computer server or distributed across one or more computers and operative to exchange information via an application programming interface API . When test results are received from system under test testing framework may refine a testing strategy and create a second set of tests that are broader or narrower than the original tests run on system under test .

System under test may comprise a computer program hardware device and or a combination of one or more hardware device s and computer program s . For example the system under test can include an operating system or software application. In another example the system under test may be a hardware device such as a programmable logic controller or supervisory control and data acquisition system. As previously discussed the system under test may be a combination of hardware or software components such as a computing device executing one or more computer programs. In some embodiments the system under test may be a database user interface computer network and embedded or industrial device. One skilled in the relevant art will appreciate that additional or alternative configurations of the system under test will be considered to be within the scope of the present disclosure. Additionally although the system under test is referred to as a computer system the system under test may correspond to a single computing device or computer program.

Grammar processing engine may receive results from tests run on system under test from test engine . The results may include an actual output from system under test that results from an input being applied to system under test . The actual output may be compared to an expected output to determine whether system under test operates as expected. Grammar processing engine can use the results to create a second new set of one or more grammars by modifying or inserting tags attributes or annotations into one or more grammars of the first original set of grammars according to different strategies. For example grammar processing engine may generate tag combinations that reveal faults. Further grammar processing engine can generate tags that reduce the total number of test cases generated by finding a smaller set of tags that reveal the already existing faults that have been exposed by the original set of grammars. Additionally grammar processing engine can perform a neighborhood search by for example generating grammars that create a new set of test cases near the original set of test cases.

The grammar framework may typically include a grammar with attributes. The grammar with attributes may describe a set of one or more test cases. Of note grammar framework may parse the grammar and generate a set of test cases that can be run on the system under test . Further grammar framework can then execute the test cases on system under test . As shown the results of the test cases can also be gathered by grammar framework from system under test to coordinate execution of the test cases.

As further illustrated monitoring subsystem receives results from executing the test cases on system under test . Monitoring subsystem can then use one or monitors to correlate results from the execution of test cases with for example the health or status of the system under test . This may be advantageous for understanding the effects of test cases on for example available memory processing resources network response time and other specific process functionality of system under test . Further monitoring subsystem allows the results of tests to be interpreted in a reliable repeatable and affordable manner.

Monitor may use a variety of techniques to observe the environment or health of system under test during testing for example. As shown there may be one or more types of monitors. Additionally there can be one or more instances of each type of monitor in a test environment. Monitors may also correspond to external software or hardware components for observing the system or system under test .

In an exemplary embodiment monitor may receive output from system under test in real time for example. This may be particularly helpful where the system under test is a device controller. In this situation a device that is operated by system under test may exhibit normal behavior in response to an erroneous input from system under test often the result of the device entering a fail safe mode. As a result it may be improperly assumed that system under test is operating correctly as well. A monitor that examines the output of system under test such as step function would expose this flawed assumption and can therefore be particularly advantageous for ascertaining whether the system under test is actually functioning correctly. To determine whether the system under test is performing as expected for example monitor may compare the actual step function to an expected step function. A discrepancy between the step functions can indicate that a test case resulting from a grammar has exposed a fault of system under test .

Additionally monitor may be useful for determining network connectivity. For example monitor may determine whether system under test is connected to a network or in communication with a device such as a computer server running a component of testing framework . In this embodiment monitor may use internet control message protocol ICMP messages to determine whether the system under test is connected to the network. Alternatively monitor can use an open connectivity interface to ascertain whether system under test is communicating with other devices.

With reference now to the interconnection of inputs and outputs the exemplary components of the systems of will be described. As illustrated in the client application includes a first output corresponding a control signal generated by the client application. In an illustrative embodiment the control signal corresponds to commands or other input generated by the client application for implementing a testing sequence. The commands can be in accordance with the OPC communication standard.

The client application also includes a primary output and secondary output for generating outputs to the system under test . As illustrated in the primary and secondary output signals pass through the testing framework . In this capacity the testing framework serves as a communication bridge and can modify the input signals.

With continued reference to the system under test also includes various outputs and which can be routed to the testing framework . Outputs such as outputs and can correspond to both digital and analog signals. For example output can correspond to a square wave output that can be monitored by the testing framework . Output can correspond to USB interfaces for debugging by the client application or other computing device. Output can also correspond to an RS232 data interface for serially communicating additional information regarding the system under test . One skilled in the relevant art will appreciate that additional or alternative outputs and output types may also be routed and processed by the testing framework .

With reference now to a routine for testing a system under test will be described. At block the testing framework obtains an identification of the system under test . In an illustrative embodiment the identification can corresponds to a manual or automatic process such as be scanning bar codes keying serial numbers etc. At block the testing framework identifies the testing sequence. In an illustrative embodiment the testing sequence is generated by the grammar processing engine by processing various grammar attribute tags. The specific testing sequence may be based on the identification of the system under test and or additional user interaction. Additionally in an illustrative embodiment the testing sequence may correspond to various iterations of a testing grammar in which the results from a previous test of the system under test is used to modify the testing grammar and or create a new testing grammar.

At block the testing framework collects testing environment inputs from the client application. As previously described in an illustrative embodiment the testing framework functions as a communication bridge between the client application and the system under test . At block the testing framework obtains the outputs from the system under test . At decision block a test is conducted to determine whether a fault has been detected.

In some embodiments the client application may send a new input instruction which is not properly serviced by the system under test . The system under test may not recognize the input and or understand the instruction. In some embodiments because the existing state of the system under test is ON the system under test fail safe response may be to assume that the instruction sent was to accomplish a change of state. For example since the system under test is ON the expected instruction is OFF and so the system under test in fail safe mode may switch the system under test off although the system under test could not read and or service vulnerability the off instruction.

In some embodiments to an operator of the client application it can seem that the system under test is a properly function device since the OFF instruction produced the desired output it did in fact turn the system under test OFF but that may be as an indirect result of a vulnerability which hence may be overlooked by the testing operator . The client application may be unaware that the system under test was turned off by the fail safe instructions rather than processing the particular input command. The failure to properly service the input command may be an error that indicates the presence of a vulnerability and or point of entry that if not corrected can be exploited either accidentally and or purposefully.

Another example where the client application can indicate a system under test is secure when it is not can be when instructions are sent to the system under test at a high and or irregular rate of speed. In this example the system under test vulnerability may be that it cannot understand and or service input instructions at such rates of speed. This vulnerability can prevent the system under test from servicing and or responding to each individual instruction within the storm of instructions. For example the system under test may be executing for example every fourth instruction to provide the predetermined result such as switching to OFF and or some other change of state.

For example a system under test error may result in the input instructions being ignored and or unserviced by leaving the system under test in its existing state and or changing the system under test output state in an erratic fashion with each test thereby preventing the isolation and or diagnosis of the fault vulnerability in the code. Examples of variations on the input instructions from expected can including delaying the sending on instructions intentionally reordering instructions or corrupting some portion of the instructions. Advantageously the testing framework can receive real time feed back while the system under test is servicing the input. In so doing the operator can determine if an input instruction is serviced by the system under test in the correct order.

In some embodiments if the instruction is not serviced in the correct order the testing framework can allow the client application to identify the exact place and or time of the system under test fault rather than just traditionally looking at the output to see if it matches the predetermined state. The place and or time of fault can be as useful as the fact that the output was incorrect. In some embodiments the testing framework can isolate the time and or place of the vulnerability and or determine that the vulnerability may be indicative that a code error and or vulnerability may exist in the actual line of code servicing the input and or in a close and or related line of instructions.

In some embodiments a real time testing framework is provided to track and or watch how the system under test handles executes and or services the input instructions. This provides several advantages over looking for the predetermined output to confirm that the system under test is performing correctly or incorrectly as the case may be . Using the systems and methods provided the actual error in the executable code can be determined and or pinpointed. Further the testing framework can enable a tester to assess what is actually happening to the system under test in real time and or the change of states in the system under test . For example the physical activity of the controller under test can be assessed and or the implications of how the input is serviced by each system under test .

The testing framework can define a model of expected behavior and or compare the measured behavior to the model. In some embodiments for example a detection model based on a square wave output with a static frequency can be used. The frequency can be 1 Hz.

Anomalies can be detected by measuring the time between state transitions and or comparing the value to the expected value of the signal period Error time time 0.5 period

In some embodiments if the measured value is not equal to the expected value within a tolerance for error and or the difference exceeds thresholds defined by the user then the appropriate warning and or alarm is issued.

These three signal states can be detected as anomalies when the detection model is based on a periodic function because when the device enters fail safe mode the output rate of change becomes 0.

In some embodiments the output single of the system under test can be a square wave with a period of 1 second. A model can specify that the voltage level read from the digital input should change state from high to low and or low to high for example every 500 milliseconds. Each time there may be a transition between logical states it can calculate the time delta from the last recorded transition. In some embodiments if the time delta between transitions does not equal the expected change plus or minus an error margin the behavior can be considered anomalous. The error margin can include for example latencies in the hardware and or software of the system under test and or the discrete monitor limitations in timing accuracy and or the like. This can be represented by the following inequality Expected Period error

Metrics such as the magnitude of the delta between missed transitions either too long and or two short and or the frequency of missed transitions can be applied to heuristics that help to automate the determination if the anomalous behavior is the device entering a predictable fail safe mode. In some embodiments the transitions can be checked for randomness and or patterns in trend data can be observed to determine a behavior. If the behavior deviates from the model this may be considered a symptom of a possible software flaw.

Returning to if a fault is detected at decision block at block the testing framework processes the fault detection. In an illustrative embodiment the fault is noted such as in an error log. In another embodiment the testing sequence may be terminated to prevent damage to the system under test or other device. In still a further embodiment the fault condition may be used as feedback to modify the testing grammar. If no fault is detected at decision block or once the fault detection is processed at block at block the routine terminates.

While illustrative embodiments have been disclosed and discussed one skilled in the relevant art will appreciate that additional or alternative embodiments may be implemented within the spirit and scope of the present disclosure. Additionally although many embodiments have been indicated as illustrative one skilled in the relevant art will appreciate that the illustrative embodiments do not need to be combined or implemented together. As such some illustrative embodiments do not need to be utilized or implemented in accordance with the scope of variations to the present disclosure.

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

Any process descriptions elements or blocks in the flow diagrams described herein and or depicted in the attached figures should be understood as potentially representing modules segments or portions of code which include one or more executable instructions for implementing specific logical functions or steps in the process. Alternate implementations are included within the scope of the embodiments described herein in which elements or functions may be deleted executed out of order from that shown or discussed including substantially concurrently or in reverse order depending on the functionality involved as would be understood by those skilled in the art. It will further be appreciated that the data and or components described above may be stored on a computer readable medium and loaded into memory of the computing device using a drive mechanism associated with a computer readable medium storing the computer executable components such as a CD ROM DVD ROM or network interface. Further the component and or data can be included in a single device or distributed in any manner. Accordingly general purpose computing devices may be configured to implement the processes algorithms and methodology of the present disclosure with the processing and or execution of the various data and or components described above. Alternatively some or all of the methods described herein may alternatively be embodied in specialized computer hardware. In addition the components referred to herein may be implemented in hardware software firmware or a combination thereof.

It should be emphasized that many variations and modifications may be made to the above described embodiments the elements of which are to be understood as being among other acceptable examples. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

