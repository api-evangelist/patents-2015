---

title: Service-based integration of application patterns
abstract: One or more processors generate a plurality of artifacts from a first application pattern description. The first application pattern description describes at least one instance of a first application pattern. One or more processors receive a request for a capability of an instance of the first application pattern. The capability is requested to augment a second application pattern instance. One or more processors analyze a second application pattern description. The second application pattern description describes the second application pattern instance. Based on an analysis of the second application pattern description, one or more processors install one or more of the plurality of artifacts against at least one server of the second application pattern instance. One or more processors execute one or more automated operations in order to enable the second application pattern instance with the capability.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09569203&OS=09569203&RS=09569203
owner: International Business Machines Corporation
number: 09569203
owner_city: Armonk
owner_country: US
publication_date: 20150327
---
The present invention relates generally to the field of application pattern deployment for information technology IT landscapes and more particularly to application patterns for IT landscapes that include applications databases and servers.

An application pattern is a template or blueprint of a complex setup of IT resources. Application patterns focus on the provisioning of servers operating systems etc. in order to create the application landscape itself. For example some application patterns describe web portal environments. There are systems available that are able to instantiate running environments based on application patterns. Instantiation in this context refers to the provisioning and configuration of an application pattern. A single application pattern can be instantiated multiple times. The result of each instantiation process is a pattern instance which includes a pattern description.

Application patterns often require integration with other application patterns. An example is hosting or production environments in which application landscapes i.e. patterns frequently require integration into system management infrastructures which can also be thought of as application patterns. To complicate matters system management infrastructures vary considerably depending on the provider and their details are typically unknown to the authors of application patterns requiring integration. In addition multiple diverse application patterns will often share the same systems management infrastructure. It is an ongoing challenge to integrate system management topologies into various application patterns. Typically such integrations would require modification of the application pattern the system management infrastructure or both. If one considers just the common cases where multiple application patterns require integration with a given system management infrastructure incorporation of the same system management topology into multiple application patterns would be required. In other words multiple instantiations of the same system management topology into the application patterns would be necessary.

Embodiments of the present invention provide a method system and program product for integrating application pattern instances. One or more processors generate a plurality of artifacts from a first application pattern description wherein the first application pattern description describes at least one instance of a first application pattern. One or more processors receive a request for a capability of an instance of the first application pattern wherein the capability is requested to augment a second application pattern instance. One or more processors analyze a second application pattern description wherein the second application pattern description describes the second application pattern instance. Based on an analysis of the second application pattern description one or more processors install one or more of the plurality of artifacts against at least one server of the second application pattern instance. One or more processors execute one or more automated operations in order to enable the second application pattern instance with the capability.

Embodiments of the present invention recognize that changing pattern instances in order to extend their capabilities is wasteful. Embodiments of the present invention provide an ability to integrate pattern instances in order to extend capabilities without changing said pattern instances.

In various embodiments of the present invention integration computing device is a computing device that can be a standalone device a server a laptop computer a tablet computer a netbook computer a personal computer PC or a desktop computer. In another embodiment integration computing device represents a computing system utilizing clustered computers and components to act as a single pool of seamless resources. In general integration computing device can be any computing device or a combination of devices with access to API and automation registry and is capable of executing integration service program . Integration computing device may include internal and external hardware components as depicted and described in further detail with respect to .

In this exemplary embodiment integration service program API and automation registry are stored on integration computing device . However in other embodiments integration service program API and automation registry may be stored externally and accessed through a communication network such as network . Network can be for example a local area network LAN a wide area network WAN such as the Internet or a combination of the two and may include wired wireless fiber optic or any other connection known in the art. In general network can be any combination of connections and protocols that will support communications between integration service program API and automation registry in accordance with a desired embodiment of the present invention.

In exemplary embodiments integration computing device has at least two states. The first state is a state wherein integration service program modifies automation registry by becoming instantiated with a pattern description such as serving pattern description . The second state is a state wherein integration service program has not modified automation registry by instantiation with a pattern description or has cleared automation registry of agents and tools incorporated during instantiation.

In exemplary embodiments integration service program receives a request through API from a user seeking capabilities that are included in a pattern instance. For example a user requests capabilities of serving pattern instance to be used in the execution of jobs involving client pattern instance . The user obtains these capabilities for use with client pattern instance from computing device while computing device is in its first state i.e. integration service program has previously modified automation registry by instantiation with serving pattern description . In some embodiments integration service program modifies automation registry by instantiation with a pattern description such as serving pattern description prior to receiving a request through API from the user. In other embodiments integration service program modifies automation registry by instantiation with a pattern description such as serving pattern description after receiving a request through API from the user.

In exemplary embodiments client pattern instance and serving pattern instance are pattern instances that have been instantiated from application patterns. In other words client pattern instance and serving pattern instance are application landscapes including at least one software application executing on at least one operating system within at least one computing device which includes at least one database in some embodiments. In various embodiments client pattern instance is integrated with serving pattern instance by integration computing device with capabilities present in serving pattern instance .

In exemplary embodiments client pattern description and serving pattern description are descriptions of the environments included in client pattern instance and serving pattern instance . Integration service program uses the descriptions of these environments to facilitate integration of both instances. As used herein integration of two or more instances means that one pattern instance gains capabilities of the other pattern instance via integration service program . For example if a user wishes to integrate capabilities of serving pattern instance into client pattern instance integration service program modifies automation registry with agents and tools from serving pattern description . Integration service program then introspects client pattern description and installs the appropriate agents and tools against the client pattern instance servers based on the topology and deployed applications of client pattern instance . When client pattern instance no longer requires the capabilities of serving pattern instance automation registry is cleared by integration service program .

In step integration service program instantiates integration computing device with serving pattern description . The instantiation process modifies automation registry with artifacts e.g. agents tools etc. necessary to allow integration computing device the ability to integrate serving pattern instance capabilities with other pattern instances such as client pattern instance . Once instantiation has occurred integration computing device gains the functionality to integrate one or more capabilities of serving pattern instance . In one embodiment serving pattern instance is a systems management infrastructure involved in a plurality of tasks such as one or more of hardware inventories server availability monitoring and metrics software inventory and installation anti virus and anti malware management user activity monitoring capacity monitoring security management storage management network capacity and utilization monitoring anti manipulation management and patch management.

Step describes a user request for integration of client pattern instance with the capabilities of instantiated integration computing device . For example the user requests these capabilities through a call using API . Integration service program then performs a knowledge based translation of the specified capability into a series of internally defined automated operations for which automation artifacts are stored in automation registry . In this instance automated operations are typical deployment tasks such as copy install configure register etc. and can vary depending on the usage scenario requested. In one embodiment the request specifies the capability including service type and the pattern instance that requires that capability. For example a user requests a systems management capability such as a patch management capability to fix improve or update software or data in a user specified pattern instance such as client pattern instance .

In step integration service program analyzes client pattern description contained within client pattern instance and based on the requested capability and the client pattern instance topology determines what automated operations are to be executed. Integration program subsequently installs artifacts from automation registry onto at least one server of client pattern instance and determines which configurations are to be applied.

In step integration server program connects and registers all relevant components of serving pattern instance and client pattern instance based on an analysis of the client pattern instance topology and the user request. In various embodiments the components that are registered include adapter realizations adapters and links to the automation artifacts which are stored in an adapter registry vide infra . Components that are involved in the connection of serving pattern instance with client pattern instance include nodes of both pattern instances which are connected via integration server program adapters to adapter realizations constraints and automation artifacts in automation registry vide infra .

In step integration server program executes operations that enable client pattern instance to have the user requested capabilities.

Catalog contains a list of one or more offerings through which a user selects a capability to be provided by integration service program . The user accesses catalog through API . Offerings describe service capabilities available to the user the service capabilities originating from integration service program to client pattern instance . For example Transaction Monitoring for Websphere is a possible offering for a WEBSPHERE pattern instance. Offerings include one or more recipes . Recipes describe basic services that have to be applied to or removed from client pattern instance in order to provide the user requested offering from offerings . For example the offering Transaction Monitoring for Websphere includes the recipes OS Monitoring and Websphere monitoring. A recipe within recipes can be realized using one or more adapter realizations . Recipes are associated with operations e.g. Deploy or Undeploy. 

Each recipe in recipes are associated with one or more adapter realizations . Adapter realizations describe the realizations of recipes using specific products or implementations. For example the recipe OS Monitoring is realized with adapter realization ITM OS Monitoring using IBM TIVOLI MONITORING. The recipe Websphere Monitoring is realized by the adapter realizations ITCAM Websphere monitoring and ITM Websphere Monitoring. An adapter realization is mapped to one or more adapters that are OS specific. Adapters include a source type connection and a target type connection which must match the client node instances and the serving node instances respectively in which they are connected. Adapters link the following components together i a specific adapter realization ii a specific type of one or more client node instances iii a specific type of one or more serving node instances iv any needed automation artifacts in automation registry and v one or more constraints . For example an adapter realization ITM Websphere Monitoring is linked by adapter ITM Websphere for Linux Monitoring to client node instance WAS 8.5 Application Server node Websphere Application Server serving node instance ITM 7.1 Monitoring Server and automation artifacts for the operations Install and Register and Unregister and uninstall of the ITM 7.1 Websphere agent for Linux.

Constraints describe conditions that apply to the current adapter in relation to other adapters. For example the adapter ITM Websphere for Linux Monitoring has to connect to same serving node instances as the adapter ITM OS Monitoring for Linux. Automation artifacts are entries in automation registry . An automation artifact includes a plan fragment for each operation which allows the incorporation of those operations into a plan. Automation artifacts also include deployment scripts configuration templates and a reference to the installables. For example an automation artifact Install and Register for ITM 7.1 Websphere agent contains a configuration template to configure the deployment and registration of the agent along with the related deployment scripts needed to execute the installation registration and agent installables for different operating systems. Client node instance and serving node instance which are connected to adapters through source type and target type respectively are specific nodes of client pattern instance and serving pattern instance respectively. Client node instance and serving node instance each have a management IP address and can be accessed using credentials stored in for example a pattern instance registry.

API provides catalog to user in order to allow user to make a request for a capability of instantiated integration computing device . API also monitors the status of this transaction. Request processing processes the incoming request by parsing the selected service capabilities from offerings and selecting basic services from recipes . Request processing determines which adapter realizations are required for the selected recipes and coordinates the interaction of integration service program components to deploy or remove requested service capabilities from at least one of client pattern instance and service pattern instance . Pattern analyzer analyzes client pattern description in order to determine the client pattern instance topology. Pattern analyzer filters for an optional user specified node type and returns matching client node instances which include the node name type and access information. Adapter registry is a registry for storing information about adapter realizations adapters and links to the automation artifacts in the automation registry .

Match making uses pattern analyzer to retrieve information about client node instances from client pattern instance . Pattern analyzer obtains information about client node instances from client pattern description . For each client node instance and adapter realization match making searches adapter registry for an adapter that has a source type that matches the client node instance and the adapter realization. The adapters that match are grouped according to whether their constraints match. In other words any group of adapters that match making has grouped will have the same constraints .

Next match making analyzes the target type of the grouped adapters and uses this information to search serving pattern instance registry for one or more serving pattern instances with serving node instances that match the target type of the grouped adapters. Match making selects a serving pattern instance from the resulting set of service pattern instances and uses pattern analyzer to filter serving node instances of this particular serving pattern instance. In some embodiments match making uses annotations for load balancing in serving pattern description to identify a single matching serving node instance of the target type from a list of serving node instances. Match making gets automation artifacts about the adapter from automation registry through adapter registry . Match making uses target node information to populate the configuration template and requests plan constructor to add plan fragments of agents to the plan using the populated configuration template. Plan constructor builds a plan from the plan fragments received from match making and orchestrator executes the plan.

As used herein a plan is a workflow description of operations to be performed on a managed environment. A plan can be executed by an orchestration engine in order to perform those operations in the right sequence and with the right input parameters on resources of the managed environment. For example an operation could be to install some agent on a certain server or to register an agent endpoint with a component of the serving pattern instance. A plan fragment is a collection of only a few operations for one integration to be performed by the integration service that can be added to the overall plan. At the end the overall plan is a combination of all the plan fragments added to it during the construction phase.

In step integration service program searches recipes for one or more recipes that match a user requested offering from offerings . After matching recipes have been determined a first recipe is selected step and adapter realizations are searched for one or more adapter realizations that can implement the recipe selected in step . Once the one or more adapter realizations have been identified a first adapter realization is selected step along with a first client node instance from client node instances step . In step integration service program searches through adapters for one or more adapters that match the adapter realization selected in step and have a source type connection that matches the client node instance selected in step . Constraints of the selected adapters are analyzed by integration service program and the adapter is then grouped with other adapters that have matching constraints step .

In various embodiments a recipe lists more than one adapter realization that is capable of the same purpose. In these embodiments integration service program decides which adapter realization will be employed on one or more criteria including cost differential client pattern instance installation size and what type of environment is involved such as developmental test or production types.

In step integration service program determines whether there is another client node instance in client node instances that has not been selected for connection through adapters with the current adapter realization. If there is another unselected client node instance in client node instances that has not been selected for connection through adapters with the current adapter realization steps are repeated until there are no more unselected client node instances left in client node instances that have not been selected for connection through adapters with the current adapter realization. When the above process loop is finished all adapters capable of connecting any client node instances to the current selected adapter realization are determined and grouped according to whether the adapters have matching constraints .

In step integration service program determines whether there is another adapter realization in adapter realizations that can implement the current selected recipe from step . If there is another adapter realization in adapter realizations that can implement the current selected recipe from step steps are repeated until there are no more adapter realizations in adapter realizations that can implement the current selected recipe from step . When the above process loop is finished all adapters in adapters capable of connecting any client node instances to any adapter realizations in adapter realizations that can implement the current selected recipe from step are determined and grouped according to whether the adapters have matching constraints .

In step integration service program determines whether there is another recipe in recipes that can provide part or all of the requested offering in step . If there is another recipe in recipes that can provide part or all of the requested offering in step steps are repeated until there are no more recipes in recipes that can provide part or all of the requested offering in step . When the above process loop is finished all adapters in adapters capable of connecting any client node instances to any adapter realizations in adapter realizations wherein all recipes in recipes that can provide part or all of the requested offering in step have been determined are grouped according to whether the adapters have matching constraints .

In step integration service program begins to analyze each of the adapter groups created in steps in order to connect the individual adapters within these groups through serving node instances to a serving pattern instance. In step integration service program searches service pattern instance registry for service pattern instances having service node instances that match the target type of the adapters in a first selected group of adapters. In step integration service program retrieves target node information from serving node instances within the selected serving pattern instance . In step integration service program selects a first adapter within the current adapter group. In step integration service program retrieves automation artifacts from automation registry . In step integration service program populates a configuration template of the current adapter with information from the source node and target node. In step integration service program adds a plan fragment of the current adapter along with the populated configuration template from step to an execution plan.

In step integration service program determines whether there is another adapter in the current adapter group. If there is another adapter in the current adapter group then steps are repeated until there are no more adapters in the current adapter group. When the above process loop is finished all adapters in the current adapter group have a configuration template populated with information from a source node and a target node. A plan fragment of the adapters along with the populated configuration templates are added to the execution plan.

In step integration service program determines whether there is another adapter group having not gone through steps . If there is another adapter group having not gone through steps then steps are repeated until all adapter groups have gone through steps . When the above process loop is finished all adapter groups have been matched by target type to serving node instances within serving pattern instances found in serving pattern instance registry . In addition all adapters in the adapter groups have a configuration template populated with information from a source node and a target node. A plan fragment of the adapters along with the populated configuration templates are added to the execution plan. The completed plan is executed in step .

In the above exemplary embodiments a matching serving pattern instance is found in serving pattern instance registry for all adapters . In alternative embodiments there may not be a matching serving pattern instance in serving pattern instance registry for a given adapter. In these cases integration serving program searches a pattern repository for a pattern that has nodes of the target type. The plan constructor component creates a plan to provision a pattern instance using the pattern found in the pattern repository. This pattern instance subsequently undergoes further processing.

Computing device includes communications fabric which provides communications between computer processor s memory persistent storage communications unit and input output I O interface s . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are computer readable storage media. In this embodiment memory includes random access memory RAM and cache memory . In general memory can include any suitable volatile or non volatile computer readable storage media.

Integration service program API and automation registry are stored in persistent storage for execution and or access by one or more of the respective computer processors via one or more memories of memory . In this embodiment persistent storage includes a magnetic hard disk drive. Alternatively or in addition to a magnetic hard disk drive persistent storage can include a solid state hard drive a semiconductor storage device read only memory ROM erasable programmable read only memory EPROM flash memory or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices including resources of network . In these examples communications unit includes one or more network interface cards. Communications unit may provide communications through the use of either or both physical and wireless communications links. Integration service program API and automation registry may be downloaded to persistent storage through communications unit .

I O interface s allows for input and output of data with other devices that may be connected to computing device . For example I O interface may provide a connection to external devices such as a keyboard keypad a touch screen and or some other suitable input device. External devices can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data used to practice embodiments of the present invention e.g. integration service program API and automation registry can be stored on such portable computer readable storage media and can be loaded onto persistent storage via I O interface s . I O interface s also connect to a display .

Display provides a mechanism to display data to a user and may be for example a computer monitor or a television screen.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

It is to be noted that the term s such as WEBSPHERE IBM TIVOLI MONITORING Smalltalk and the like may be subject to trademark rights in various jurisdictions throughout the world and are used here only in reference to the products or services properly denominated by the marks to the extent that such trademark rights may exist.

