---

title: Executing an operation over file repositories located in different authentication domains using a representational state transfer (REST)-compliant client
abstract: An initial server, located in an initial authentication domain, receives a requested operation from a RESTful client system, and generates a redirections list having entries indicating servers located in authentication domains other than the initial domain. The initial server transmits the redirections list back to the client system. The redirections list instructs the client system to perform a command on each of the servers indicated in the redirections list, and may optionally be transmitted with a partial result from the initial server. The client system verifies that partial results in responses from servers in the other authentication domains and from the initial server are of an appropriate result type and number, and then aggregates all the partial results received from all authentication domains into a single final result, which may be displayed to a user of the client system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09485244&OS=09485244&RS=09485244
owner: Citrix Systems, Inc.
number: 09485244
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20150302
---
An authentication domain also referred to herein simply as a domain is a set of resources that requires a requesting entity to be authenticated prior to gaining access to resources stored securely within the domain. For example an authentication domain may consist of information technology IT resources e.g. data server computer systems software services etc. belonging to a business organization and require that employees of the organization first be authenticated e.g. by logging on with their user name and password or in some other fashion prior to being given access to any of the domain s secure resources.

Authentication domains are typically separate and independent. Accordingly if a user is able to access multiple authentication domains they must authenticate to each one of the authentication domains through a separate transaction or process. Additionally different credentials and or processes may be needed to authenticate a user or users to different authentication domains.

Previous systems for performing operations across different authentication domains have had significant drawbacks. Specifically problems have arisen when previous systems have allowed a server to authenticate to various different domains on behalf of a client. Such authentication has been accomplished by use of a super user account or by caching the client s authentication materials within the server. With these systems when the client performs a search operation the central server acts on the client s behalf to access data that is securely stored in the different authentication domains based on the privileges provided by the super user account or by acting as the client using the cached authentication materials. In this type of solution the central server has full visibility into the securely stored data. Such data visibility provided to an entity outside of the secure domains is unacceptable in many contexts. In particular exposing a customer s secure data to a third party e.g. the central server acting on behalf of the client is contrary to data privacy protection requirements that many Software as a Service SaaS customers have. In order to meet these data privacy protection requirements SaaS providers must have no ability to access customer data. Additionally whenever a client authorizes a third party server to act on the user s behalf non repudiation cannot be maintained and there is accordingly no assurance that actions taken in the user s name were actually performed by the user.

Other drawbacks of previous systems relate to performing specific operations across different authentication domains. For example existing search services typically operate by indexing information stored across the entire World Wide Web and then respond to search queries based on the resulting index. However these existing search systems cannot operate in the context of a specific user and accordingly cannot access information that requires end user authentication. Moreover existing systems lack the ability to aggregate search results across multiple authentication domains. A user wishing to perform a search with respect to multiple domains must accordingly perform the search one domain at a time issuing a separate search operation for each individual authentication domain to be searched.

In addition some previous systems for performing copy operations across different domains have first downloaded the data from a source domain to the client and then uploaded the data from the client to the target domain. This approach is not effective when the client is a mobile device since a copy operation between servers that transfers large files through a mobile device is impractical. This approach to multi domain copying are is inconsistent with the goal of providing a RESTful client server solution i.e. one that conforms to the architectural principles of Representational State Transfer REST since it places the business logic for executing the operation predominantly in the client. In contrast a RESTful compliant solution should place the business logic for performing the operation predominantly within the server.

To address these and other shortcomings of previous systems a new system for executing an operation over file repositories located in different authentication domains is disclosed. In the disclosed system an initial Application Programming Interface API server located in an initial authentication domain receives a requested operation from a client system. The initial server detects that the operation is to be performed across multiple different authentication domains. The initial server then generates a redirections list having entries indicating a number of API servers located in one or more authentication domains that are different from the initial authentication domain. The initial server stores the redirections list into a partial response and transmits the partial response back to the client system. The partial response instructs the client system to perform a command on each of the API servers indicated by the entries in the redirections list. The initial API server may optionally include a partial result together with the redirections list that it transmits to the client system.

When the API servers indicated by the entries in the redirections list respond to the commands transmitted by the client system the client system verifies that partial results contained in those responses are of a result type that is consistent with the requested operation. The client system also verifies that an appropriate number of non null partial results are received. The client system then aggregates all the partial results it has received into a single final result which may be displayed to a user of the client system in a user interface of the client system. The final result is of the result type returned for the requested operation and may be a list or a single item received from either the initial API server or one of the API servers indicated by the redirections list. Various specific operations may be provided using the disclosed system. Examples of such operations include but are not limited to cross domain copy multi domain search and or multi domain user activity reporting.

Advantageously and in contrast to previous systems only the client system can access the data retrieved as a result of the requested operation being performed over the different authentication domains. Since the retrieved data is transmitted directly from the authentication domains to the client system the disclosed system improves over previous systems by avoiding exposure of customer data outside of the authenticated requesting client system thus providing data privacy protection. In contrast to previous solutions the disclosed system is accordingly appropriate for use in contexts that have data privacy protection requirements such as many software as a service SaaS provider environments.

The disclosed system is also advantageous over previous systems in that it uses a Representational State Transfer REST compliant client. To process the redirections list the client need only use a series of asynchronously issued domain specific operations and the API servers indicated by the entries in the redirections list need only process the commands transmitted from the client system within their own authentication domains. In this way the disclosed system meets the REST objective of having a relatively light weight client thus conforming to the REST client server architectural constraints.

A new system for executing an operation over file repositories located in different authentication domains is disclosed. In the disclosed system an initial Application Programming Interface API server located in an initial authentication domain receives a requested operation from a client system. The initial server detects that the operation is to be performed across multiple different authentication domains. The initial server then generates a redirections list having entries indicating a number of API servers located in one or more authentication domains that are different from the initial authentication domain. The initial server transmits the redirections list to the client system thus instructing the client system to perform a command on each of the API servers indicated by the entries in the redirections list. The initial server may optionally include a partial result together with the redirections list that it transmits to the client system. The API servers indicated by the entries in the redirections list respond to the commands transmitted by the client system with partial results and the client system aggregates all the partial results it receives into a single final result which may be displayed to a user of the client system in a user interface of the client system.

In response to receiving the Requested Operation the Initial API Server determines whether Client System has been authenticated to Initial Authorization Domain . If not then Initial API Server will require Client System to be authenticated for example through a challenge response authentication protocol that requires the user of Client System to enter their username and password for Initial Authentication Domain or through some other authentication process appropriate for the particular execution environment.

After Client System has been authenticated to Initial Authentication Domain the Initial API Server parses the Requested Operation to determine whether completing Requested Operation requires resources from outside of Initial Authentication Domain i.e. resources other than First Secure Resources . If not then Initial API Server processes Requested Operation within Initial Authentication Domain using resources from First Secure Resources . Otherwise in the case where Requested Operation requires resources from one or more authentication domains other than Initial Authentication Domain Initial API Server generates a redirections list having entries indicating a number of API servers located in one or more authentication domains that are different from the Initial Authentication Domain . For example in the case where Requested Operation requires resources from Second Secure Resources contained in Authentication Domain A and from Third Secure Resources contained in Authentication Domain B contained in Authentication Domain B Initial API Server would generate a redirections list having a first entry indicating API Server A in Authentication Domain A and a second entry indicating API Server B in Authentication Domain B .

The Initial API Server then stores the redirections list into a Partial Response . The Initial API Server may optionally include a partial result together with the generated redirections list in the Partial Response . For example if the Requested Operation is also applicable to one or more resources in First Secure Resources then the Initial API Server applies the Requested Operation to First Secure Resources and stores any results obtained from applying Requested Operation to First Secure Resources as a partial result within the Partial Response . If alternatively the Requested Operation does not apply to resources in First Secure Resources then Initial API Server may set a partial result in Partial Response equal to null or omit the partial result entirely. The Initial API Server then transmits the Partial Response to the Client System .

Client System receives the Partial Response and the Partial Response and or the redirections list itself instructs Client System to perform a command on each of the API servers indicated by an entry contained in the redirections list. Accordingly Client System generates and transmits Command to API Server A in Authentication Domain A . Command is generated by Client System based on information contained in an entry contained within the redirections list contained in the Partial Response . Command is a domain specific command i.e. a command that can be completely performed within the Second Secure Resources . API Server A receives Command and first determines whether Client System has been previously authenticated to Authentication Domain A . If not then API Server A requires Client System to be authenticated to Authentication Domain A for example through a challenge response authentication protocol that requires the user of Client System to enter their username and password for Authentication Domain A or through some other authentication protocol appropriate for the particular execution environment.

After Client System has been authenticated to Authentication Domain A API Server A generates a partial result by performing Command on Second Secure Resources and stores the partial result into Response . API Server A then transmits Response to Client System .

Further in the example of Client System generates and transmits Command to API Server A in Authentication Domain B . Command is generated by Client System based on information contained in another entry contained within the redirections list contained in the Partial Response . Command may be transmitted by the Client System asynchronously with respect to Command in that Command may be transmitted prior to any response being received with regard to Command . Command is also a domain specific command i.e. a command that can be completely performed within the Third Secure Resources . Accordingly API Server B generates a partial result by performing Command on Third Secure Resources and stores the partial result into Response . API Server B then transmits Response to Client System .

The Client System processes the responses received from Initial API Server i.e. Partial Response API Server A i.e. Response and API Server B i.e. Response in part by verifying that the type of each received partial result matches a type expected to be returned for the Requested Operation . For example if the expected type to be returned for the Request Operation is a Feed of Items then Client System verifies that each partial result object contained in any of Partial Response Response or Response is in fact a Feed of Items.

Similarly Client System may also process responses received from API Server API Server A and API Server B by verifying that an appropriate number of partial results are received for the Requested Operation . For example if the Requested Operation only expects to receive a single element then the Client System verifies that only a single one of responses received from API Server API Server A and API Server B includes any content. In other words when the Requested Operation expects only a single element response the Client System verifies that all of the responses except one have no content e.g. have HTTP type No Content . In the event that the type and total number of partial result objects received by the Client System are verified the Client System aggregates all the received partial result objects into a single Final Result which may be displayed to a user of the Client System e.g. in a user interface of the Client System .

The Final Result is of the result type returned for the requested operation and may be a list of objects or a single object received from either the initial API server or one of the API servers indicated by the redirections list. For example in the case where the Request Operation is a request to perform a search for files matching a search query in file repositories within First Secure Resources Second Secure Resources and Third Secure Resources i.e. a multi domain search operation each partial result received by the Client System would consist of a list of files matching the search query in the respective set of secure resources. Specifically Partial Response would include a partial result object that is a list of all files within First Secure Resources that match the search query Response would include a partial result object that is a list of all files within Second Secure Resources that match the search query and Response would include a partial result object that is a list of all files within Third Secure Resources that match the search query. The Client System would then aggregate the received partial results into a single list of files matching the search query for display to the user as Final Result .

In the case where the Request Operation is a cross domain copy operation e.g. a request to copy a file from a first authentication domain e.g. Authentication Domain A to a second authentication domain e.g. Authentication Domain B only one partial result would be non null i.e. the partial result received in Response which would contain the identifier of the file copy within the Third Secure Resources and indicate that the copy operation was successful. Partial result aggregation by the Client System would then consist of processing the single result object e.g. reporting to the user through the user interface that the copy operation was successful by showing a visual representation of the new file copy in its new location within Third Secure Resources .

In another example the Request Operation may be a multi domain user activity reporting request such as a request for log data or the like describing a specified user s file related activities performed in multiple authentication domains e.g. in both Authentication Domain A and Authentication Domain B . Such user activity data may be held privately by each authentication domain and include information such as times file names and other details regarding operations performed by the specified user on files contained in each respective one of the multiple authentication domains such as file access file modify file delete etc. In this case Response would include a partial result containing user activity data describing the specified user s actions with regard to files contained in Second Secure Resources and Response would include a partial result containing user activity data describing the specified user s actions with regard to files contained in the Third Secure Resources . Partial result aggregation by the Client System would then consist of combining the partial result data from Response and Response into Final Result e.g. such that a report or the like is presented to the user of Client System e.g. through a graphical user interface of Client System showing all the file related activities of the specified user with regard to files contained in both Second Secure Resources and Third Secure Resources .

While for purposes of concise illustration only three authentication domains are shown in those skilled in the art will recognize that the disclosed system is not so limited. Accordingly the disclosed system may be embodied and operated such that any specific number of different authentication domains are supported.

The Client System and API Servers and shown in may for example each be embodied as or within one or more computer systems each having processing circuitry e.g. one or more processors memory and or other program storage and one or more input output interfaces. The operations described herein may be embodied in such computer systems using software firmware dedicated hardware circuitry and or some combination thereof. Similarly those skilled in the art will recognize that one or more of the Client System and API Servers and shown in may be embodied as including or within one or more virtual machines or the like.

Communication between the Client System and the API Servers and shown in may be provided over one or more computer or other type of communication networks such as for example one or more local area networks LANs wide area networks WANs and or the Internet. Communication between the Client System and the API Servers and may use various specific communication protocols including but not limited to the Hypertext Transfer Protocol HTTP .

The Memory stores program logic for execution on the Processing Circuitry . In the embodiment of Memory includes REST compliant client application software shown as RESTful Client . RESTful Client includes Client User Interface Logic for providing at least a portion of a graphical user interface to a user of Client System within the Display Device . Authentication Logic and Authentication Materials includes program code and or authentication material for authenticating Client System to various different authentication domains e.g. through API servers located in the authentication domains. For example Authentication Logic and Authentication Materials may include authentication materials such as one or more authentication cookies containing evidence that Client System has been previously authenticated to one or more of the different authentication domains contacted while processing a redirections list. Accordingly such an authentication cookie may be used by Client System to prove that Client System has previously been authenticated to an authentication domain when communicating with an API server for that authentication domain while processing the redirections list. Authentication Logic and Authentication Materials may also or alternatively include program code and or authentication credentials for authenticating Client System to one or more of the different authentication domains contacted while processing the redirections list for example using one or more authentication protocols such as for example the LAN Manager NT LAN Manager NTLM Kerberos or any other specific authentication protocol.

Operation Request Command Generation Logic includes program code for generating requested operations and or commands including the Requested Operation Command and Command shown in and for transmitting such operations and or commands using the Communication Interface . Response Handlers includes a number of response handler program code modules which are responsible for handling messages e.g. responses received by Client System for the RESTful Client through the Communication Interface . Accordingly when the Client System receives a response for RESTful Client e.g. one of Partial Response Response or Response shown in RESTful Client determines whether the response is a partial response or some other type of response. In the case where the received response is a partial response the received response is passed to the Partial Response Handler for processing. Other responses received by Client System for RESTful Client are processed by the Other Response Handlers .

Further in the illustrative embodiment of Initial API Server includes Communication Interface Processing Circuitry and program storage shown as Memory . Communication Interface may for example include or consist of one or more network interface cards NICs or the like. Processing Circuitry may for example include or consist of one or more microprocessors or the like. Memory may for example include or consist of any specific type of volatile or non volatile semiconductor memory or the like that is operable to store programs sequences of instructions and or data e.g. program state information for use in the Initial API Server .

The Memory shown in stores program logic for execution on the Processing Circuitry shown as the Request and Command Processing Logic as well as an Authentication Domain Database and a User Account Database . When a requested operation e.g. Requested Operation in is received by the Initial API Server through the Communication Interface the request is passed to the Request and Command Parsing Logic . The Request and Command Parsing Logic determines whether executing the requested operation requires access to one or more resources located in one or more authentication domains other than the local authentication domain e.g. other than the Initial Authentication Domain in . If so then the requested operation is passed to Multi Authentication Domain Operation Request Processing Logic for processing. Otherwise in the case where the received requested operation can be completely executed using resources contained within the local authentication domain e.g. contained within Initial Authentication Domain in then the requested operation is passed to Other Command Processing Logic .

For example the Request and Command Parsing Logic may examine the contents of a received requested operation to determine if the received requested operation contains any indications of resources contained outside the local authentication domain. Such indications may for example include one or more paths specifying one or more files or file locations within one or more file repositories located in authentication domains other than the local authentication domain. If the received requested operation includes any indications of resources contained outside the local authentication domain then the received requested operation is passed to Multi Authentication Domain Operation Request Processing Logic for processing.

In another example the Request and Command Parsing Logic may examine the contents of the User Account Database to determine whether a user associated with the received requested operation has previously linked their account to one or more authentication domains other than the local authentication domain. References names paths URLs etc. to such authentication domains previously linked to the user s account may for example be stored in an entry associated with the user and contained in the User Account Database . In the case where the received requested command indicates that the command should be executed across all authentication domains linked to the user s account and where the user s account is linked to at least one authentication domain other than the local authentication domain then the received requested operation is passed to the Multi Authentication Domain Operation Request Processing Logic for processing.

The Multi Authentication Domain Operation Request Processing Logic processes a requested operation by generating a partial response e.g. Partial Response in and transmitting the partial response to the client system that transmitted the requested operation e.g. Client System . The partial response generated by Multi Authentication Domain Operation Request Processing Logic includes a redirections list having entries indicating one or more other authentication domains to be contacted by the requesting client system in order to complete the requested operation. The contents of each entry in the redirections list includes information e.g. a URL of an API server indicating how an authentication domain is to be contacted by the client system. Such information indicating how a given authentication domain is to be contacted may be obtained by the Multi Authentication Domain Operation Request Processing Logic from the Authentication Domain Database . The Authentication Domain Database includes information describing one or more different authentication domains other than the local authentication domain. Such information may for example include information describing how each authentication domain is to contacted by client systems such as the Client System . Information describing how a given authentication domain is to be contacted by a client system may for example include a URL of an API server within the authentication domain and that is responsible for receiving commands from client systems.

Multi Authentication Domain Operation Request Processing Logic may optionally also operate to process a requested operation by generating a partial result to be included in the partial response. The partial result may for example include results obtained by performing the requested operation on resources contained within the local authentication domain.

Each entry in the Redirect List indicates how the client is to contact one of the other authentication domains that must be contacted by the client in order to complete the requested operation.

As shown by the example Redirections List Entry of a redirections list entry includes a URL a Method and a Body . The URL is a Web address of an API server located in the authentication domain for the Redirections List Entry and is to be used by the client when the client contacts the authentication domain. The Method is for example an HTTP request method e.g. GET POST etc. that is to be used by the client when the client contacts the authentication domain. And Body for example includes other information e.g. a JavaScript Object Notation JSON document that is to be included with the request sent by the client system to the API server indicated by the URL .

In another example in the case of a multi domain search the redirections list would include an entry for each different authentication domain that is to be searched for files matching the search query indicated in the originally requested operation. And in a further example in the case of a multi domain user activity report request the redirections list would include an entry for each different authentication domain from which is to be obtained file activity information regarding a specified user.

At step the initial server optionally generates a partial result object by applying the requested operation to resources contained in the local authentication domain. For example in the case of a multi domain search the initial server may create a partial result object that is a list of all files located within the local authentication domain that match the search query from the original requested operation.

At step the initial server may store the redirections list and any partial result object into a partial response for transmission from the initial server to the client system at step .

The client system receives a response from the API server and at step determines that the response is a partial response and passes the partial response to the partial response handler e.g. Partial Response Handler in . If the partial response includes a partial result object the client system stores the partial result object from the partial response at step . Any partial result object included with redirections list must have a type that is the same as the documented response type of the requested operation. For example if the requested operation returns a Feed of Items then any partial result transmitted from the initial API server to the client system must be a Feed of Items. In one embodiment if the initial API server does not have a partial result to send to the client system the initial API server sends a partial result having a value of null to the client system.

At step the client system processes the redirections list. At in response to processing the redirections list for each entry in the redirections list the client system creates and transmits a command to an API server in an authentication domain other than the authentication domain containing the initial API server that generated the partial response. The commands transmitted at step may be transmitted asynchronously in that each command may be transmitted prior to any response being received for any one of the commands that was previously transmitted. Each of the commands transmitted at step may result in the client system having to be authenticated to the authentication domain to which the command was transmitted. For example one or more of the commands transmitted at step may result in the destination API server performing a challenge response authentication protocol with the client system. In such a case the API server may present a question challenge and the client system must provide a valid answer response in order to be authenticated to the authentication domain containing the API server. The challenge response protocol may for example require password authentication in which case the client system may provide a valid response consisting of the password of the user of the client system. Other types of authentication protocols may be performed to authenticate the client system to each authentication domain indicated by the entries in the redirections list. Alternatively if the client system has previously authenticated to an authentication domain indicated by an entry in the redirections list the client system may provide proof of that previous authentication to the API server contained in the authentication domain e.g. in the form of authentication materials previously stored in the client system such as an authentication cookie or the like.

At step the client system aggregates the results received from the initial API server and in the responses to the commands issued at step into a single final result. For example in the case where the requested operation returns a feed then all partial results in the partial response and or responses to the commands issued at step must be feeds of the same type and the client system aggregates all received partial results by concatenating them into a single list that is the final result. In another example in the case where the requested operation returns a single element response then only the partial response or one of the responses to the commands issued at step includes a partial result and all other ones of the responses to the commands issued at step have a status code of No Content. The client system then displays the final result to the user of the client system through the graphical user interface of the application at step .

File Commands are shown including Command Command Command through Command N . File Commands are examples of user interface display objects e.g. buttons that a user can select in order to indicate a specific requested operation to be performed with respect to one or more currently selected files file repositories etc. For example clicking on Command may trigger a search operation with respect to one or more currently selected file repositories. Accordingly if the user clicks on Command after selecting Folder and Folder a multi domain search operation would be initiated to search the file repository in Authentication Domain A and the file repository in Authentication Domain B for files matching a search term. Such a requested operation would include paths indicating Authentication Domain A and Authentication Domain B .

Alternatively clicking on Command may trigger a search operation with respect to all file repositories located in all authentication domains that have previously been linked to an account associated with a user of Client System . In that case the requested operation would be generated to include an indication that a search operation is to be performed across all file repositories in all authentication domains that have previously been linked to an account associated with the user.

In another example clicking on Command may trigger a copy operation that copies a currently selected file to a subsequently selected target file location or repository. Accordingly if the user selects a file contained in the file repository located in Authentication Domain A while browsing within Folder then clicks on Command and then indicates that the file repository within Authentication Domain B is the target for the copy a cross domain copy operation would be initiated to copy the selected file from the file repository located in Authentication Domain A to the file repository located in Authentication Domain B .

And in another example clicking on Command may trigger a user activity report request with regard to a previously indicated user across one or more currently selected file repositories. Accordingly if the user clicks on Command while Folder and Folder are selected a multi domain user activity report request would be initiated that collects log data describing all file operations performed by the previously indicated user across both the file repository located in Authentication Domain A and the file repository located in Authentication Domain B . Alternatively clicking on Command may trigger a user activity report request with regard to a previously indicated user across all file repositories located in all authentication domains previously linked to an account associated with the user of Client System .

Those skilled in the art will recognize that the specific user interface objects shown in i.e. buttons are provided only for purposes of convenient illustration and explanation and that the disclosed system is not limited embodiments using those specific user interface objects to provide user access to multi domain operations supported by the disclosed system. Any appropriate type of graphical control element e.g. drop down menus pop up menus context menus sub menus etc. may be used as a functional alternative to the buttons shown in File Commands or the folders shown in Folder Representations . Moreover the Application User Interface itself is shown in a simplified representation and various user interface display objects other than the ones shown may be included or added as needed for a specific embodiment.

Thus there is disclosed a new system for executing an operation having specific features that enable the operation to be performed over multiple file repositories located in different authentication domains while providing significant improvements over previous systems. The disclosed system provides specific improvements over previous solutions including effectively executing a requested operation over the different authentication domains while only allowing the client system to access data retrieved the different domains as a result of executing the operation on the different domains. Since the retrieved data is transmitted directly from the respective authentication domains to the client system the disclosed system improves over previous systems by avoiding exposure of any customer data outside of an authenticated requesting client system thus providing data privacy protection. In contrast to previous solutions the disclosed system is accordingly appropriate for use in contexts that have data privacy protection requirements such as many software as a service SaaS provider environments.

The disclosed system also improves over previous systems by using a Representational State Transfer REST compliant client. To process the redirections list generated by the disclosed system the client advantageously need only use a series of asynchronously issued domain specific operations and the API servers indicated by the entries in the redirections list need only process the commands transmitted from the client system within their own authentication domains. In this way the disclosed system meets the desired REST objective of having a relatively light weight client thus conforming to the REST client server architectural constraints.

While the above description provides examples of embodiments using various specific terms to indicate specific systems devices and or components such terms are illustrative only and are used only for purposes of convenience and concise explanation. The disclosed system is not limited to embodiments including or involving systems devices and or components identified by the terms used above.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more non transitory computer readable storage medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable storage medium s may be utilized. The computer readable storage medium may be for example but not limited to a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any non transitory tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

The disclosed system can take the form of an entirely software based embodiment an entirely hardware based embodiment or an embodiment containing both software and hardware elements. The figures include block diagram and flowchart illustrations of methods apparatus s and computer program products according to an embodiment of the invention. It will be understood that each block in such figures and combinations of these blocks can be implemented by computer program instructions. These computer program instructions may be loaded onto a computer or other programmable data processing apparatus to produce a machine such that the instructions which execute on the computer or other programmable data processing apparatus create means for implementing the functions specified in the block or blocks. These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the function specified in the block or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions specified in the block or blocks.

Those skilled in the art should readily appreciate that programs defining the functions of the present invention can be delivered to a computer in many forms including but not limited to a information permanently stored on non writable storage media e.g. read only memory devices within a computer such as ROM or CD ROM disks readable by a computer I O attachment or b information alterably stored on writable storage media e.g. floppy disks and hard drives .

While the invention is described through the above exemplary embodiments it will be understood by those of ordinary skill in the art that modification to and variation of the illustrated embodiments may be made without departing from the inventive concepts herein disclosed.

