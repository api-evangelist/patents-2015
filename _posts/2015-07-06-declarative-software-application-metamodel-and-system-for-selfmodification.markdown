---

title: Declarative software application meta-model and system for self-modification
abstract: A solution providing for the dynamic design, use, and modification of models using a declarative software application meta-model that provides for self-modification of a collection of the models is provided. The solution can enable continuous real-time testing, simulation, deployment, and modification of the collection of the models. A model in the collection of the models can represent an entity or a function and can be included in a set of related models. Additionally, a set of related models can include a plurality of sets of related models. The collection of the models can represent, for example, one or more software applications, processes, and/or the like.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09483238&OS=09483238&RS=09483238
owner: EnterpriseWeb LLC
number: 09483238
owner_city: Glens Falls
owner_country: US
publication_date: 20150706
---
The current application is a continuation of U.S. patent application Ser. No. 13 846 630 which was filed on 18 Mar. 2013 and which claims the benefit of U.S. Provisional Application No. 61 612 907 titled Software Application Modeling Environment which was filed on 19 Mar. 2012 both of which are hereby incorporated by reference.

The disclosure relates generally to model development and use and more particularly to dynamic design use and modification of models using a declarative software application meta model that provides for self modification.

All organizations want to be agile so they can seize opportunities respond to threats and generally evolve. Adaptation is a fundamental counter entropy strategy organisms including human organizations that fail to adapt to their environment are not sustainable.

Adaptation as it relates to human organizations includes an ability to support local variance including automated personalization for a single instance and user driven modification for a single instance where the variance can occur without a disruptive exception and global change including automated machine learning where change to the whole for all future instances can occur without disruption. However for software developed using a conventional style such as Object Oriented Development OOD and Service Oriented Architecture SOA local adaptation and global adaptation commonly result in disruptive exceptions as both styles are generally procedural in nature and deliver fixed implementations of models. In these styles the models and their implementation are generally hidden behind static interfaces methods and or the like so the models are not modifiable directly by people utilizing the models or by software agents working on their behalf. While a model or its interface methods and or the like may allow for a range of conditions those conditions are not subject to variation and change directly by the users interacting with them they are other fixed attributes of the model. This approach limits dynamic local variance and global change creating a discontinuity where use and modeling are divided into a run time and design time respectively.

This is the normative convention of software application modeling. It is a paradigm that was established when everything was standardized change was infrequent and any change was always centrally controlled. In our time of rapid and decentralized change this paradigm has become a rate limiter for enterprise agility organization wide structural impedance that makes variance and change expensive if not in many cases impractical for technical reasons alone. This approach limits the general utility of such models and they become increasingly less useful overtime entropy such that exceptions and change management are major logistical challenges for modern businesses that limit their operational responsiveness. It results in delays and frustration shadow systems which compound change management problems and lost business value. Given the centrality and importance of information systems to most organizations the ability for related models to support adaptability non disruptive variance and change is conceptually fundamental to business agility.

The act of modeling defines an object for a purpose. In the context of a human organization and Enterprise information systems models include data models entities and entity relationship diagrams process models flowcharts service interfaces business objects and or the like. A model definition provides facts regarding an object s attributes including relationships to other objects. The definitions attributes and relationships of models are generally subject to change the only variable being the frequency of change. When model definitions are encoded and deployed in a static fashion they structurally constrain interaction to the design time context of the central modeler and or designer or the like without consideration of the context of subsequent use of the model premature optimization thereby ensuring exceptions to the model which must be handled if at all in a discontinuous fashion. Each implementation is an execution of the as is model. The approach promotes standardization at the cost of variance and change.

The conventional software application model as represented by Object Oriented Development OOD and Service Oriented Architecture SOA is to design static models of business entities business objects services and processes. To form business applications the models are integrated generally in a tightly coupled manner which leads to dependencies. As part of a greater system of interaction between models the problems of adaptation are compounded as change to an application consuming multiple models might also require change to multiple models to achieve the intended change to the application s properties. In addition in the course of modifying an application any change to one model of the set of models may negatively impact e.g. break or crash instances of the application the application as a whole and might even cause problems for the greater system on which the application runs. The more complex the application the higher number of dependencies the harder it becomes to support variance and change.

In the meantime the world is becoming increasingly distributed the rate of change is accelerating and business requirements are becoming more complex all of which exacerbate problems with the conventional software application model.

The inventors previously described a solution for increasing context based customization of interaction deliverables in U.S. patent application Ser. No. 12 698 361 filed on 2 Feb. 2010 published as US Patent Publication No. 2010 0199260 which is hereby incorporated by reference. An embodiment of the solution provides a software application which includes work order resources each of which defines an atomic operation for the software application and a construction service resource which processes the work order resources in response to all interaction requests for the software application. Each interaction request is received from a client and identifies a corresponding work order which the construction service processes to dynamically construct a set of deliverables which can include a custom representation of the work order. While processing the interaction request the construction service as directed by the work order can make one or more requests to context resources for context information corresponding to an activity for which the interaction was requested to construct the set of deliverables. The work order resource can comprise a reflective program that enables the construction service to dynamically determine and construct the set of deliverables including the next appropriate interaction s using the context information thereby directing a set of atomic operations as part of an activity being performed and enabling the dynamic context based construction of interaction deliverables.

Aspects of the invention provide a solution providing for the dynamic design use and modification of models using a declarative software application meta model that provides for self modification of a collection of the models. The solution can enable continuous real time testing simulation deployment and modification of the collection of the models. A model in the collection of the models can represent an entity or a function and can be included in a set of related models. Additionally a set of related models can include a plurality of sets of related models. The collection of the models can represent for example one or more software applications processes and or the like. An embodiment of the solution described herein can execute on a system of the inventors prior solution.

A first aspect of the invention provides a system comprising a computer system including at least one computing device wherein the computer system provides dynamic design use and modification of models using a declarative application meta model that provides for self modification of a collection of the models.

A second aspect of the invention provides a system comprising a computer system including at least one computing device wherein the computer system provides dynamic design use and modification of models using a declarative application meta model that provides for self modification of a collection of the models wherein the providing enables continuous real time testing simulation deployment and modification of the collection of the models wherein a model of the collection of the models represents at least one of a discrete entity or a function wherein the collection of the models include at least one set of related models and wherein each model in a set of related models can configure at least one of a set of properties of the set of related models so that collective properties of the set of related models emerge dynamically from interaction of the set of related models.

A third aspect of the invention provides a system comprising a computer system including at least one computing device wherein the computer system provides dynamic design use and modification of models using a declarative application meta model that provides for self modification of at least one of a software application or a process represented by a collection of the models wherein the collection of the models includes at least one set of related models and wherein each model in a set of related models can configure at least one of a set of properties of the set of related models so that collective properties of the set of related models emerge dynamically from interaction of the set of related models during execution of an instance of the set of related models.

Other aspects of the invention provide methods systems program products and methods of using and generating each which include and or implement some or all of the actions described herein. The illustrative aspects of the invention are designed to solve one or more of the problems herein described and or one or more other problems not discussed.

It is noted that the drawings may not be to scale. The drawings are intended to depict only typical aspects of the invention and therefore should not be considered as limiting the scope of the invention. In the drawings like numbering represents like elements between the drawings.

As used herein unless otherwise noted the term set means one or more i.e. at least one and the phrase any solution means any now known or later developed solution.

The inventors recognize that the conventional software application model does not support the desired business agility. The inventors propose that structure including the structure of a software application or an Enterprise IT systems infrastructure should flexibly support a range of structures fit for business purposes as well as support overall change. By conflating a model with its implementation the conventional software application model creates accidental complexity resulting in impedance within the enterprise information system infrastructure. The act of solution development is generally not supportive of application lifecycle management post solution delivery thereby addressing a short term business problem while creating a long running problem for the business as it relates to evolving the application for future requirements.

Furthermore the inventors recognize one or more problems with the current distinction between development design time and end user runtime environments in the software development lifecycle. Frequently an application change cannot be fully tested in the development environment without fully replicating the runtime environment which may not be possible or may be prohibitively expensive. As a result many issues introduced when an application is changed remain undetected until the application is executing in the runtime environment. These issues grow significantly with the complexity of the system making many of these systems more prone to having issues. Additionally an ability for an end user to customize application behavior is limited to changing those settings predefined by the software developer during design time for that part of an application. Such an ability is not a generalized capability of the application or the greater system in which the application interacts.

The inventors propose a solution in which the benefits of the model can be obtained while providing flexibility in implementation and allowing change to the model. The model can be separated from e.g. only loosely coupled to its implementation so local variance of an instance of a model including user driven modification and automated personalization and or global change to a model including user driven modification and automated machine learning are enabled. Furthermore the solution can provide an ability to readily create new versions of a model while preserving history so that the model can be updated seamlessly to accommodate change. The solution can willfully constrain personalization variance and change to restrict who what or when those properties are available. However such a constraint is not a structural inhibition of the solution rather those rules themselves can be subject to the same properties and are capable of being modified in response to changes in requirements.

To this extent the solution can model in a declarative manner that preserves loose coupling of stateless immutable models handled as representations as in a REST style architecture of a model and execute in a fashion e.g. late binding that enables use and interactions with models while preserving their loosely coupled and stateless nature. The declarative modeling loose coupling immutability statelessness and late binding of an embodiment of the solution allows for the separation of models from their implementation e.g. representations of models bind at run time enabling local variance and global change in a continuous non disruptive fashion that supports business agility while supporting restrictions of a type that are not structural constraints and while providing audit history and rollback capabilities to allow for variance and change to be transparent and manageable.

In an embodiment the inventors propose a software application development model that does not require a distinction between development of the application and use of the application in an environment. Furthermore the software application can be used to modify itself. While development of such a software application can be done in a separate development environment the proposed software application development model does not make a distinction between design and runtime. The inventors propose that such a distinction in the conventional software application model is an unnatural unnecessary abstraction. The physical separation of the design and runtime activities creates a discontinuity a divide between development and use of the application which creates challenges with both software development and change management collectively the application development lifecycle independent of the actual business problems that the application is intended to resolve. The inventors recognize that this divide can be sufficiently significant that the conventional IT development approaches themselves work against business agility by creating rigid disconnected structures that are hard to govern manage and adapt as a whole system.

A software application created as described herein can be fully dynamic with the developer and the end user both getting the same benefits from a single unified environment. In an embodiment the application is built in a manner in which the developer does not need to build compile any of the application components that define the model s of the application which can enable real time simulation and deployment of the changed application e.g. the changes can take effect immediately . Without a compile build requirement application testing can be made easier thereby enabling refactoring or changing to be vastly accelerated because there does not need to be any separation of runtime and design time e.g. there does not need to be discontinuous activities performed in separate environments .

In an embodiment the application is defined by stateless loosely coupled immutable resources e.g. a set of models using a declarative model driven application development environment. In this case an update to the application can simply require modification of related resources at which point the update can take effect immediately without requiring any development intervention. All users both those developing and those utilizing the models can benefit from new operational responsiveness. In addition since everything can be dynamic development activity rights can be delegated to any user who may then modify the application at will based on permissions and any required approval processes as directed by resources e.g. one or more models in the set of models of the application. The declarative model driven application development environment can enable design configuration modification and extension of a real time software application collectively development activities wherein the late binding of the real time software application can enable all users to potentially perform development activities using the declarative model driven application development environment or components thereof without disrupting the environment or the application itself.

As indicated above aspects of the invention provide a solution providing for the dynamic design use and modification of models using a declarative software application meta model that provides for self modification of a collection of the models. The solution can enable continuous real time testing simulation deployment and modification of the collection of the models. A model in the collection of the models can represent an entity or a function and can be included in a set of related models. Additionally a set of related models can include a plurality of sets of related models. The collection of the models can represent for example one or more software applications processes and or the like. An embodiment of the solution described herein can execute on a system of the inventors prior solution.

In an embodiment the collection of models represent a software application and there is no distinction between design time and run time for the software application. Instead the software application processes all such activity in real time. All feedback from any user for any purpose can be immediate in its effect though the processing of decisions by the application can be extended through workflows for other input and approvals but all processing by the application is still performed in real time with each interaction. While further aspects of the invention are described using an embodiment in which a collection of models represents a software application it is understood that the collection of models or a set of related models included therein can represent any type of entity and or function. To this extent a model in the collection of models can represent a discrete entity a function and or the like. Furthermore a set of related models in the collection of models can represent a complex entity a complex function and or the like. The collection of models can include multiple sets of related models any one of which can include one or more sets of related models. The collection of models can represent a software application a process and or the like either of which can be formed from multiple models representing various types of functions and or entities.

Turning to the drawings shows an illustrative environment for providing dynamic management e.g. design use and modification of model resources using a declarative application meta model that provides for self modification according to an embodiment. In this case the model resources represent an application which is executing in the environment in order to perform an activity according to an embodiment. To this extent the environment includes a computer system that can perform a process described herein in order to manage the model resources representing the application and other resources . In particular the computer system is shown including a modeling application which makes the computer system operable to manage the model resources and other resources as described herein.

The computer system is shown including a processing component e.g. one or more processors a storage component e.g. a storage hierarchy an input output I O component e.g. one or more I O interfaces and or devices and a communications pathway . In general the processing component executes program code such as a system controller of the modeling application and or representations of one or more resources of the application which is at least partially fixed in the storage component . While executing program code the processing component can process data which can result in reading and or writing transformed data from to the storage component and or the I O component for further processing. The pathway provides a communications link between each of the components in the computer system . The I O component can comprise one or more human I O devices which enable a human client to interact with the computer system and or one or more communications devices to enable a system client to communicate with the computer system using any type of communications link. To this extent the computer system can manage a set of interfaces e.g. graphical user interface s application program interface and or the like that enable human and or system clients to interact with the application via the modeling application . Furthermore the modeling application can manage e.g. store retrieve create manipulate organize present etc. the data such as one or more of the model resources of the application or other resources using any data management solution.

In any event the computer system can comprise one or more general purpose computing articles of manufacture e.g. computing devices capable of executing program code such as the system controller of the modeling application installed thereon. As used herein it is understood that program code means any collection of instructions in any language code or notation that cause a computing device having an information processing capability to perform a particular function either directly or after any combination of the following a conversion to another language code or notation b reproduction in a different material form and or c decompression. To this extent the modeling application can be embodied as any combination of system software and or application software.

As used herein the term component means any configuration of hardware with or without software which implements the functionality described in conjunction therewith using any solution. The term module means program code that enables a computer system to implement the functionality described in conjunction therewith using any solution and refers to the system controller and program artifacts of the resources of the application . When fixed in a storage component of a computer system that includes a processing component a module is a substantial portion of a component that implements the functionality. Regardless it is understood that two or more components modules and or systems may share some all of their respective hardware and or software. Furthermore it is understood that some of the functionality discussed herein may not be implemented or additional functionality may be included as part of the computer system .

When the computer system comprises multiple computing devices each computing device can have only a portion of the modeling application and or the application fixed thereon e.g. one or more resources of the application . However it is understood that the computer system and the modeling application are only representative of various possible equivalent computer systems that may perform a process described herein. To this extent in other embodiments the functionality provided by the computer system and the modeling application can be at least partially implemented by one or more computing devices that include any combination of general and or specific purpose hardware with or without program code. In each embodiment the hardware and program code if included can be created using standard engineering and programming techniques respectively.

Regardless when the computer system includes multiple computing devices the computing devices can communicate over any type of communications link. Furthermore while performing a process described herein the computer system can communicate with one or more other computer systems using any type of communications link. In either case the communications link can comprise any combination of various types of wired and or wireless links comprise any combination of one or more types of networks and or utilize any combination of various types of transmission techniques and protocols. In an embodiment the computer system comprises an application server which communicates with clients over the Internet.

As discussed herein the application can be represented by model resources . Additionally the computer system e.g. by executing the modeling application can provide dynamic design use and modification of the model resources representing the application using a declarative application meta model that provides for self modification. To this extent the computer system can enable continuous real time testing simulation deployment and modification of the model resources representing the application as described herein.

Execution of the application can result in the generation of one or more other resources . The other resources can be utilized along with the model resources to enable the computer system to execute a set of actions used by the application to perform an activity. One or more of the resources of the application can be separately developed and or implemented remote from other portions of the application . For example a set of utility resources are shown implemented remote from the application . However it is understood that any resources of the application such as one or more of the model resources also can be separately developed and or implemented. Furthermore it is understood that the environment can include a mix of model resources that are part of the application and remote from the application .

As described herein a model resource can represent an entity a function and or the like. The model resources can include one or more sets of related models each of which can represent a complex entity a complex function and or the like. A set of related models can be expressed using a set of declarative relations which can be defined using any solution and stored as model resources of the application using any solution. For example a declarative relation can be defined using a uniform resource identifier URI a metadata reference and or the like.

In an embodiment the environment is a modeling environment providing dynamic design use and modification of the model resources of the application using a declarative application meta model that provides for self modification and the client is a user using the application executing in the modeling environment to perform continuous real time testing simulation deployment and or modification of the model resources of the application . In this case the activities that the user can perform using the application can include dynamically modifying one or more aspects of the software application in the runtime environment. To this extent shows a block diagram of an illustrative conceptual architecture of an environment of a software application according to an embodiment. As illustrated the software application by being processed by an intermediary component can manage an application layer which enables a user to use the software application to perform one or more activities each of which is defined using a set of model resources of the software application . The application layer includes both a development interface which enables the user to use the application to perform one or more development types of activities on the application and an end user interface which enables the user to use the application to perform one or more end user types of activities.

As used herein it is understood that the term activity means a set of atomic operations to accomplish a goal e.g. form a complete business technical process . The goal is set when the activity is initiated e.g. when a request such as an HTTP request is received from a user but the specific atomic operation s performed by executing the application to accomplish the goal can vary based on the context information corresponding to each instance of an activity to which the software application is directed. A group of related atomic operations e.g. a compound operation is referred to herein as a task e.g. a process fragment . A task is a discrete fragment of an activity that fulfills a defined objective in furtherance of the goal e.g. complete a form review a form submit a form modify a form and or the like . Similar to an activity the objective of the task is set when the activity is initiated but the specific atomic operation s performed by executing the application to accomplish the goal can vary based on the context information corresponding to the activity. It is understood that some atomic operations and or tasks can be performed as standalone operations e.g. report generation basic navigation apart from a larger task or activity. In this case the atomic operation is a task and activity in itself or the task is an activity in itself.

An end user activity is a type of activity performed by the user using the application in its intended manner to accomplish a goal. For example if the application manages an end user interface that provides a word processor user interface the end user activities include those activities performed by the user that utilize the word processor to create a document. Furthermore the end user activities include those activities performed by the user that customize one or more attributes of the word processor user interface according to the preferences of the user e.g. by modifying a setting exposed to the user e.g. default attributes for the document including a plug in component to provide expanded functionality and or the like. In an embodiment end user activities of the application include one or more development activities.

A development activity is an activity performed by the user using the application which changes one or more attributes of a set of changeable resources of the application . The changeable resources can include model resources that define at least a portion of an application model which is applied by the application to perform one or more activities. To this extent a development activity can comprise an activity historically performed by a programmer a designer and or the like in a software development environment. However the development interface managed by the application can enable a user to perform the development activity in the environment . The development interface can manage any combination of various types of development tools for use by the user such as a modeling environment e.g. a declarative modeling environment an integrated development environment and or the like. In this manner the environment can provide dynamic design use and modification of the application represented by a collection of models as embodied in the model resources using a declarative application meta model that provides for self modification and can enable continuous real time testing simulation deployment and modification of the application represented by the collection of models. In an embodiment the changeable resources of the application are immutable static . In this case a change to a changeable resource results in a new version of the changeable resource being created which is linked in place of the previous version. The use of immutable resources can provide an ability for the application to provide an auditable history of changes rollback a change and or the like.

As illustrated resources of the application or representations thereof can be processed by an intermediary component . The resources can include a set of changeable resources and a set of static resources . A changeable resource in the set of changeable resources can comprise a resource that is capable of being dynamically modified by the user . In an embodiment a change to a changeable resource such as a model resource does not require any compilation to take effect in the application . A static resource in the set of static resources can comprise a resource that is not capable of being dynamically modified by the user . In an embodiment the set of changeable resources includes a first subset of the model resources shown in while the set of static resources includes a second subset of the model resources . However it is understood that this is only illustrative and an embodiment of the environment can include no static resources no changeable resources and or the like. Furthermore while the construction service resource and the system controller can be resources e.g. as part of the intermediary component it is understood that these resources generally are not changeable by the user in the environment .

When the set of changeable resources includes one or more model resources and or relation information e.g. declarative relations for a set of related models the user can modify a configuration of the software application while an instance of the software application is executing by modifying a configuration of one or more of the model resources and or relation information. Such a modification can result in an immediate modification to the configuration of the software application e.g. when the model resources and or relation information are stored as non compiled information . Additionally the modification can have any applicable scope. For example the modification can modify a configuration of an instance of the modified changeable resource s for the user a configuration of the modified changeable resource s for use in all subsequent instances and or of the changeable resource s and or the like. In this manner the software application can support local variance global change and or the like and can enable continuous real time testing simulation deployment and modification of the models and set s of related models representing the software application .

Each resource representing the software application e.g. each model resource can have a set of properties. To this extent when the resource is a changeable resource one or more properties of the changeable resource can be modified by the user while the software application is executing. Furthermore when a model resource is included in a set of related models each model in the set of related models can be capable of configuring one or more of a set of properties of the set of related models. In this case collective properties of the set of related models e.g. a complex entity a complex function and or the like can emerge dynamically from interaction of the set of related models e.g. in real time during execution of the software application . In this manner the software application can have a set of dynamically emergent properties which are inherited from the collective properties of the interaction of the set s of related models representing the software application .

An ability of a user to modify one or more resources of the software application can be provided by a set of models of modification controls which are included in the model resources of the software application . To this extent the user can be restricted from modifying a static resource in the set of static resources and or allowed be make modifications to a changeable resource in the set of changeable resources based on the set of models of modification controls. The set of models of modification controls can enable the user to make modifications of any scope e.g. local variance global change and or the like to a changeable resource . It is understood that the set of models of modification controls can enable disable an ability to modify one or more resources differently for multiple users. To this extent whether a resource of the software application is a changeable resource or a static resource can depend on the user . Furthermore the set of models of modification controls can be resources e.g. model resources of the software application and themselves can be changeable resources for one or more users of the software application . In this case any restrictions on an ability of a user to modify a resource is not an inherent limitation of the software application but rather is a purposeful limitation based on the goals of the software application which can be modified.

The intermediary component can be configured to process each interaction request made by the user as part of an activity development or end user . In a more particular embodiment the intermediary component is a generic component which can be used to execute multiple applications configured to perform activities of any type. The model resources of the software application can define the logic of how the software application performs each activity. To this extent the intermediary component can operate in a context independent manner without including or relying on any run time logic or data specific to the particular application e.g. the activities performed using the application on which the intermediary component is operating. In this case such logic and or data of the application are defined within the set of changeable resources and or a set of static resources .

In a more particular illustrative embodiment the intermediary component comprises the system controller and the construction service . In this case the system controller can receive each request generated by a user and perform pre processing of the request. As part of processing the request the system controller can instantiate a container for processing the request and request a representation of the construction service resource for execution in the container. The construction service resource can further process the request within the container. To this extent for every atomic operation performed by the application an instance or representation of the same system controller and construction service resource can be used to process the request. The processing of each atomic operation by the construction service resource can include obtaining an instance of a resource identified in the request such as a changeable resource or a static resource and processing the logic included in the instance of the resource.

By obtaining in response to receiving a request an instance of a resource identified in the request and instances of any other resources required to complete the request the intermediary component binds the resource s of the application in real time to dynamically construct an implementation of the resource. The intermediary component can bind the resource in real time for every interaction with the resource e.g. each request requiring the resource . To this extent any model resource s required to complete the request bind in real time when processing the request. When the application includes a set of models of modification controls these models also can bind in real time. As a result the application can support customization personalization machine learning e.g. automated change management and or the like.

The application logic can be defined by the application resources e.g. assets such as models code data policies and or the like . In an embodiment each of the application resources is stateless. That is each execution of an application resource is performed using resources obtained during the execution. The execution can be in the form of processing representations of the resources consistent with REST constraints e.g. stateless read of the system resources and any state changes can be managed by creating new resource s consistent with the principles of immutability e.g. a stateless write of a new resource back to the system thereby providing an overall stateless property for the system. By processing representations of the resources a resource e.g. model is separated from implementation and the execution can perform non blocking reads and writes while managing contention. The logic can be defined in a manner that preserves a loose coupling between the stateless application resources e.g. by associating the resources with one another using a set of declarative relations for a model resource . The association can be made directly e.g. with explicit identifiers e.g. Universal Resource Identifiers or URIs or links and or indirectly e.g. with metadata references that can be resolved by the intermediary component at run time based on a context for the corresponding request and or activity. Furthermore the logic can be stored in a manner that does not require compilation to effect any changes. In this manner a change to the application logic e.g. one or more model resources can be made immediately available.

By enabling the application and the system as a whole to be defined in a loosely coupled fashion the application can provide a dynamic software application framework having many desirable properties e.g. reflection under specification late binding lazy evaluation and can promote many advantages related to operational responsiveness e.g. dynamic payload customization based on context and more efficient application development and change management capabilities and development productivity e.g. optimal re use of resources more efficient application development and change management capabilities .

During execution of the application the intermediary component can receive interaction requests generated by the user . An interaction request can request that the application perform a corresponding activity and can include a reference to one or more of the resources. In response the intermediary component can dynamically configure each atomic operation for the activity based on its context and dynamically determine a process flow for performing the activity based on the activity context at the conclusion of each atomic operation for the entire lifecycle of the activity. The atomic operation of the framework for the application can be an individual system interaction that is performed by the intermediary component by calling a single resource e.g. a model resource . In this case the intermediary component comprises an agent acting between the user requesting an atomic operation and the resource s configured to perform the atomic operation per the related model. The intermediary component provides a mechanism for evaluating the request relative to activity context customizing the deliverable payload for each atomic operation and directing the user to the next valid interaction s for continuing to perform the activity based on use of context information in support of the activity. In this manner the intermediary component mediates interactions between the user and a group of loosely coupled resources to enable the user to perform an activity using the application per the related models in the resources .

As described herein the activity can be an end user activity or a development activity. To this extent shows an illustrative process for processing a user request which can be implemented by the computer system executing the application according to an embodiment. Referring to in action the intermediary component receives an interaction request from a user . As discussed herein each interaction request can include an identifier corresponding to a model resource e.g. a changeable resource or a static resource for processing the interaction request. In action the intermediary component can obtain representation s of the requested resource s using the corresponding identifier s and can obtain representation s of other relevant resources if any in order to process the request. The other relevant resources can include resources referenced by the requested resource s resources defining policies of the application resources defining a context of the request or a corresponding activity and or the like. The policies can include modification controls which can identify the activities that the user is allowed to perform using the application .

In action the intermediary component can evaluate the context of the request and the type of user e.g. the privileges of the user in order to construct the deliverable. For example the intermediary component can process representation s of the other relevant resource s in order to determine the context and or the type of the user . Based on the context of the request e.g. the requested action previous requested actions the type of the user and or the like the intermediary component can construct a deliverable which includes data and or options for the user . To this extent the intermediary component can construct and provide in response to a request deliverables that differ from one another based on the context of the request the type of the user corresponding activity and or the like per the related model s in the resources .

In an illustrative embodiment the intermediary component can evaluate the user type and or the context of the request as one of a developer a designer or an end user. When the intermediary component evaluates the user as a developer in action the intermediary component can construct a developer deliverable using a set of resources of the application . The developer deliverable can include data and or one or more next activities which enable the user to perform one or more development activities e.g. view edit add a changeable resource in the set of changeable resources on the application . Similarly when the intermediary component evaluates the user as a designer in action the intermediary component can construct a designer deliverable using a set of resources of the application . The designer deliverable can include data and or one or more next activities which enable the user to perform one or more design activities e.g. view edit modify one or more resource connections declaratively defined in the set of changeable resources on the application . Additionally when the intermediary component evaluates the user as an end user in action the intermediary component can construct an end user deliverable using a set of resources of the application . The end user deliverable can include data and or one or more next activities which enable the user to perform one or more end user activities.

Regardless in process the intermediary component can provide the deliverable for use by the user . For example the deliverable can comprise a graphical user interface presented to the user in response to the interaction request. While the development interface is shown separately from the end user interface it is understood that a deliverable can enable the user to request both one or more development activities as well as one or more end user activities. For example each of the developer and design deliverables can enable the user to perform one or more end user actions. Similarly an end user deliverable can enable the user to request perform one or more development activities on the application . Furthermore it is understood that the intermediary component can continually evaluate the type of user as the user utilizes the application and the corresponding context changes. For example a user having developer privileges may be evaluated by the intermediary component as an end user due to a context created by previous interactions of the user with the application .

In an embodiment the development interface provides a declarative modeling environment interface for the user . In this case the environment can enable the user e.g. a designer to generate and or modify a dynamic context enhanced software application which is defined declaratively using model resources without requiring the user to have the skill set of a software developer to write explicit hard coded connections to discrete assets as is the case with conventional programming. The development interface can provide an abstraction hiding the actual underlying integration complexity and providing a software development framework capable of dynamically identifying retrieving connecting and transforming discrete components based on atomic operation context. For example the development interface can enable the user to generate and or modify a set of related models using a set of declarative relations. In contrast to SOA BPEL approaches where processes are static rather than dynamic constructions e.g. mash ups the development interface can enable bindings to be prescribed declaratively rather than procedurally and components can be open resources e.g. modifiable rather than closed services. While the environment is shown including an application which manages an application layer with an integrated development interface it is understood that the development interface can be managed separately from the application within a computing environment.

In an embodiment the application can comprise an application for designing models e.g. a meta meta model or a model for modeling models . In a more particular embodiment the application comprises an application for modeling other software applications or processes which also can be executed by the intermediary component . In this case the application can include model resources specifically for the purpose of designing models for governance policies application logic business entities business processes service interface system connections and or the like. Furthermore the application can automatically embed one or more model resources into a new meta model for the software application or process which can represent one or more system wide capabilities e.g. in order to standardize system controls such as system security state management machine tagging and indexing configuration controls and or the like. A user of the application also can embed one or more models into the new meta model e.g. in order to standardize governance such as security policies version control enterprise search and or the like. In an embodiment one or more of the model resources of the software application or process can support an activity relating to a system control for configuring one or more models of the meta model for the software application or process during its use. As a result the meta model can be declaratively modified by a user of the software application or process in real time without disruption to the instance of the software application or process or its meta model or the system as a whole e.g. no programming code compiling code build deployment or the like .

While shows two users A B for clarity it is understood that the same individual could interact with models of a declarative modeling environment interface as well as interact with models resulting from the declarative modeling environment interface. Similarly it is understood that the users shown and discussed in conjunction with can comprise human users or system users. To this extent the development and end user interfaces described herein can be configured to support human interaction e.g. through the generation of and interaction with graphical user interfaces and or system interaction e.g. through the management of an application programming interface API or the like .

As shown and described herein in conjunction with a development interface can work with a web style repository where all system artifacts e.g. data code policies as well as adaptors to third party services systems and devices are stored as loosely coupled resources e.g. dynamic static development runtime and or the like . The coupling of the resources is defined via the models described herein. In web style architectural terms e.g. Representational State Transfer or REST resources are any information regardless of media type addressable by a Uniform Resource Identifier URI . In this case an application such as an application described herein can be a collection of loosely coupled stateless resources that bind dynamically at run time through the model s they are not hard coded. By preserving the loose coupling of the resources the development interface can enable the development of a software application and an overall system having advantageous properties in regards to contextualization and adaptation.

Returning to as described herein logic for an application such as the application can be defined within the resources of the application . In an embodiment the application uniformly manages all end user data and executable data program code as loosely coupled resources using a set of models included in the resources . The loose coupling can be defined by a set of declarative relations e.g. links each of which includes a unique identifier and a reference to at least one resource thereby creating an undirected graph e.g. a sparse matrix . The application can store the declarative relations for example as key value pairs in a relational database. Furthermore the application can store data corresponding to each transaction with the application e.g. an interaction in the relational database e.g. as in an ACID transaction.

In an embodiment when a user performs an activity that updates a changeable resource of the application the application creates a new resource while maintaining the previous version of the changeable resource . Additionally the application can implement each activity as a set of loosely coupled tasks each of which is executed as an asynchronous ACID transaction. In this manner the application can support global version control generation of an audit trail roll back of all transactions end user and development referential integrity e.g. trace statelessness scalability and or the like.

In an embodiment each resource of the application is an entity which can be discrete or complex or a function which can be complex. An entity resource can comprise a data resource which defines any object relevant to an activity performed using the application . An entity resource can be a model e.g. a meta resource which includes one or more relationships to other resources of the application . The other resources can include for example any combination of another model an atomic resource a work order resource which is a type of underspecified meta resource and or the like. A function resource can comprise executable data and also can include a relationship to one or more other resources a complex function resource . In either case the development interface can enable a user to edit modify create an entity or a function resource using links metadata and or the like with a declarative modeling solution. As described herein these links metadata and or the like can be interpreted at run time e.g. by the intermediary component . Furthermore a resource can inherit one or more properties or behavior from a relationship with another resource. For example a person resource can be related to a system administrators resource which defines one or more requirements applied to the person resource as a result of the relationship. Subsequently the intermediary component can use a change request process defined in the system administrators resource e.g. in response to a state change request by the person associated with the person entity resource. Defining the application using these resources enables a non disruptive evolution of complex objects and entities based on the corresponding new relationships and modified resources thereby enabling development of an application which is flexible adaptable and or scalable.

An application created using the resources can include or be processed by an intermediary component which processes representations of the resources to manage an interface layer . For example the intermediary component can interpret a forest graph defined by the resources during execution to generate a customized deliverable in response to each request. In an embodiment the intermediary component utilizes a query model to interpret the graph using for example sparse matrix processing of the system method to dynamically generate and project a schema for the resources during the processing of an interaction request. The intermediary component can comprise a goal oriented reactive agent which implements a generic and extensible algorithm independent of the particular activities performed using the application by evaluating and processing representations of the resources in response to user interactions. The intermediary component can perform complex runtime query transformation and orchestration and can handle all connection complexity in real time. Each activity performed using the application can be implemented as a series of stateless asynchronous transactions which are performed by the intermediary component and defined in the set of resources .

In an embodiment the intermediary component uses a semantic query and transformation algorithm e.g. a work order to recursively retrieve and transform a set of resources to evaluate interaction context construct a custom response deliverable and recommend next best action s to the user . The intermediary component can use a goal seeking reflective strategy which itself can be a model to evaluate the interaction context and use a form of a dynamic pipe and filter to rapidly build an interaction specific network of resources . The intermediary component can process the pipe and filter to create a set of custom deliverables based on the interaction context. In this manner the intermediary component configures the set of resources to process each interaction.

As illustrated the application can be defined such that the what as defined by the set of resources is separate from the how as implemented by the intermediary component . To this extent the entire application can be defined as a plan as the term is used in computer science using a set of models as described herein. Defining the application in such a manner enables a high degree of interoperability and adaptability to be included in the application . For example by utilizing late binding lazy evaluation the application can improve consideration of context throughout an activity e.g. evaluation of the next actions construction of deliverables and or the like . The use of strong late typing enables the intermediary component to construct an interaction specific ontology in which all schemas are projections defined in the set of resources and the deliverable e.g. a user interface is derived in response to each request. A unified design for defining multiple applications promotes a high degree of data and or code re use during the development of these applications . Furthermore additional benefits such as system wide security governance version control and or the like can be readily implemented in each application since the resources can construct these in a similar manner.

Additionally the application can implement storage in a manner that provides additional benefits to the development and maintenance of the application . For example a data storage architecture for the set of resources can be schema less and utilize generic and extensible storage. Logical data storage can be separated from physical storage to make application development and maintenance easier e.g. distributed resources can be virtualized connection transformation complexity can be hidden and or the like. By treating application data and code uniformly e.g. both are resources of the application system wide properties of the application can be supported. Use of a schema less storage design can optimize the analytics performed by the intermediary component . Furthermore loose coupling between the resources separates concerns in the development and maintenance of the resources of the application .

As described herein regardless of the role of a particular user e.g. end user designer developer and or the like each interaction of the user with the application can be mediated by the intermediary component acting as an agent . To this extent each type of user has an ability to create read update or delete resources through interactions with the application which the application processes using a set of work order resources that effectively determine the form of the operations create read update delete . In this manner each type of user experiences the application in the same way. The operations capable of being performed by any particular user on any particular resource can be enforced through a set of modification control resources defined in the resources . Each interaction of a user with the application can be persisted e.g. as in an ACID database transaction.

Using a development interface described herein an application can be developed and managed with policies e.g. system management enterprise governance domain logic business rules and or the like that are loosely coupled from program code and data. This allows the policies to be mixed in based on context for improved e.g. optimal policy precision. Furthermore this allows programmers to develop code extensions without worrying about pre defining an interface to the application . Programmers can leave integration of the extension to non technical business personnel e.g. designers who can use the development interface to parameterize the code declaratively with relevant policies. Non technical business personnel can in turn where appropriate pass controls on to the end users of the application allowing the users to flexibly adapt their experience to circumstances. This separation of concerns can promote re use of development assets by delegating control to the entity e.g. the purchaser or end user which can now develop and evolve the application according to the requirements of the entity independent of information technology personnel or the software developer. In addition the flexible re use of existing code can reduce application testing demands for the application versus applications created using prior approaches.

In an illustrative process software developers e.g. a developer user can add code files as resources to a web style repository e.g. JAVASCRIPT functions RESTful endpoints etc. of the application using the development interface . Additionally using the development interface a non technical user e.g. a designer user can model data e.g. business entities reference data and policies which become additional resources in the web style repository. The same or other non technical user also can use the development interface to model the application e.g. by declaratively associating data code and policies directly with explicit identifiers e.g. Uniform Resource Identifiers or URIs or links or indirectly with metadata references that are resolved by the intermediary component at run time based on activity context.

As a result the development interface can allow non technical personnel to seamlessly declaratively relate distributed and heterogeneous resources using a modeling approach without worrying about source format or connection details. The user can use the development interface to configure the relations and resources independent of traditional software development e.g. writing program code . The development interface can enable the user to define one or more relations which are evaluated using a metadata query that binds at runtime. Such a query can enable the user to defer completion of the application definition until runtime when the metadata reference s can be resolved for individual interactions thereby allowing each interaction to be personalized customized e.g. interaction specific variance and the application definition to be automatically changed based on activity.

Furthermore the development interface can comprise an interface for use by a developer designer which includes a searchable filterable sortable and or the like directory of all of the resources to facilitate navigation and or reuse of the resources in the application by the developer user . In this manner the development interface can promote re usability of the resources by making it easy for a user to relate existing resources e.g. by defining and or modifying a set of models embed metadata queries that bind in real time create add resources that are well formed for subsequent re use and or the like.

The development interface can support highly interactive user experiences as described herein. For example instead of following a rigid predetermined flowchart a process performed using the application can adapt to circumstances and a workflow performed using the application can be as flexible as possible or as procedural as necessary. Such support can improve an ability of the application to respond to changes in an environment such as a dynamic business environment thereby improving business agility and sustainability of the application . The development interface can enable development of an application that provides flexibility at the edges of an entity e.g. where the entity interfaces with its customers staff and or partners.

In an embodiment modeling an application using the development interface involves developing a set of tasks e.g. by developing models wherein each task is a resource for an atomic operation performed using the application . Each task can be a generic policy based template that is designed to leverage interaction context. When building an application using the development interface sets of tasks can be individually configured and linked together by policies for pre and post conditions e.g. what atomic operation s can follow next . This allows the specific content and flow of each running activity of the application to be directed by its business context in other words context is able to influence the nature and sequence of the actual work conducted.

When developing tasks of the application using the development interface non technical personnel can add restrictive policies e.g. modification controls to the set of resources in order to limit choices of the users e.g. for compliance purposes or can add looser policies to the set of resources in order to extend greater control to the business users. In this way processes performed using the application are as flexible as possible and as procedural as necessary task by task without requiring technology switching which is required when using a procedural process of prior art applications.

Using the development interface processes for the application can be loosely defined by the developer user . Tasks performed using the application can be uncoupled from rigid flowcharts or state transition diagrams and instead can be combined dynamically by the intermediary component e.g. in response to an interaction request based on rules included in the end user resources allowing the order of events to align dynamically with each case s requirements. This enables the application to perform adaptive processes that unfold without fixed assumptions on the timing sequence or frequency of actions or events. The result can be a situationally aware application which can recommend or direct actions to the user can direct strict compliance or can empower process participants to adapt processes in flight so they can co create their experience all based on applicable policies defined in the resources .

The development interface can be used by a developer user to develop and or maintain the application which can be utilized for complex human workflows that are subject to routine variance and change and can benefit from dynamic decision support e.g. research development patient management financial services investigation work emergency response project management etc. . The development interface also can be used for instrumenting a network and sensor monitoring application for the Internet of Things e.g. automatic server provisioning energy utility management remote product monitoring etc. . The development interface can provide an effective tool for implementing and maintaining these adaptive and personalized applications and an effective tool through which evolution of these types of applications can be facilitated.

The development interface also can include provide access to a set of libraries of preexisting capabilities that are available for reuse and extension by both software developers and nontechnical personnel e.g. a set of utility resources shown in . The developer user can add one or more resources to the application which reference one or more of the resources thereby making the resource accessible during execution of the application . Since these preexisting capabilities are simply other code resources or sets of resources without pre defined interfaces constraining their use they also can be adapted to context by the intermediary component while executing the application . These resources represent Adaptive APIs that provide generalized functions that can be declaratively parameterized using the development interface . By decoupling design from implementation these Adaptive APIs can afford a developer user the power of meta programming without having to manage or even understand the low level implementation details.

An Adaptive API library can include rich system application level concepts that can be declaratively configured by the developer user for related but distinct purposes in various applications including portal enterprise search work lists dashboards dynamic forms adaptive process document management interactive reports meeting management document generation etc. In addition the Adaptive API library can include APIs for enabling the developer user to make a relative reference at design time to any subject or to use any model that is resolved by the intermediary component at run time including 

Development of an application using the development interface can enable one or more of the following advantages to be present in the application 

The development interface can support standards based development e.g. JAVASCRIPT XML XSLT HTML HTML5 etc. and can be designed for integration with third party services systems and devices. As a result an application can be extended by social e.g. LinkedIn Twitter Facebook etc. mobile e.g. iPhone Android etc. cloud e.g. Salesforce.com SuccessFactors etc. open source e.g. Pentaho reporting JBoss rules etc. methods e.g. MapReduce Open Source R etc. and or the like resources. In all cases the development interface can enable the developer user to connect to a resource once and use the resource many times.

In an embodiment the development interface is managed by a web based run time development application that runs alongside the business application s that were created with it. Alternatively as shown and described in conjunction with the development interface can be part of an application layer managed by an application . Either configuration removes a longstanding IT divide between design and execution environments.

In either case with the development interface all the users involved in building testing and maintenance of application s can work in the same space at the same time as other users e.g. business users that use the application s they are all just users with different roles and different rights with respect to the creation modification deletion and or the like of the resources of the application s . A shared environment including the development interface and the application s can support a new form of enterprise collaboration real time change management enabling an exponential increase in development productivity and operational responsiveness.

Historically change management has been disconnected from the front line business operations. Frequently business matters wait at the end of long queues for committees to prioritize items and delegate resources far removed from the point of need. This gap imposes a tax on enterprise agility and leads frustrated users to create shadow systems compounding change management challenges in a self reinforcing negative loop.

In an embodiment a developer user uses the development interface to define models using declarative relationships between various resources in order to completely define a software application at the application layer e.g. all business activities to be performed by the software application with no compiled program code and without requiring the use of third party middleware unless to implement a specifically desired integration for a business purpose . In this case the only differences between unreleased code and production code for the software application are status and permissions. This means that code policy and data model changes to the software application can be requested in flight using the development interface . The owners of the respective application can validate requests make and or approve the change or escalate to an official or a committee using the development interface . The development interface can facilitate review by providing dependency maps versioning all resources maintaining detailed audit trails and allowing rollback in case of an error. Updates to the application can be put live in production using the development interface without disrupting operations.

As described herein an embodiment of the development interface enables a software application to be defined without requiring traditional programming. Furthermore the development interface can be utilized alongside the end user interface by programmers and or non technical personnel e.g. developer s to implement dynamic changes to the application while the application is deployed and being utilized by other users within an entity. To this extent the development interface can enable the development and maintenance of adaptive business applications by making it easier for all users in an entity to collaborate across distributed and diverse systems including the application development and maintenance process.

In the interface provides an inventory of links to application resources for presentation to a user . Each entry row in the table can correspond to an resource of an application . As illustrated the interface can provide various attributes corresponding to each resource to the user including for example a corresponding identifier a name a type a status and application activity . Additionally the interface can enable the user to find a specific set of resources filter the resources provided by subject and or one or more of the attributes e.g. by selecting the F interface control next to each attribute sort the resources by an attribute e.g. by selecting the attribute heading and or the like.

In the interface provides an ability for a user to view and or modify one or more aspects of a model defining an application activity performed by the application . As illustrated the interface can display various properties of the activity a relationship graph for implementing the activity user interface s used in the activity workflow s used in the activity stages and statuses corresponding to the activity and or the like. The relationship graph can distinguish the various types of resources used to implement the activity. For example the types of resources can include an application activity an entity a task a function a user interface a report a policy and or the like. Using the interface a user can select a resource e.g. in the relationship graph and view modify details corresponding to the resource .

In the interface enables a user to obtain additional information corresponding to a resource being viewed. For example the interface is shown displaying information corresponding to a resource named Demonstrator. The user can view various information corresponding to a full lifecycle of changes made to the resource e.g. by clicking on the view link for the lifecycle and being presented with the popup window shown. The lifecycle history can include information corresponding to the change such as for example a user responsible for the change a description of the change a date timestamp for the change and or the like.

In the interface provides information of a model resource corresponding to a task resource named Review Submission in this case for presentation to a user . The user can use the interface to modify one or more attributes of the task resource . As illustrated the interface can include a process path screen which displays a simulation of the pre e.g. how the task is initiated and post e.g. the possible tasks following the current task conditions for the corresponding task. A user can use the interface to modify one or more attributes of the task such as add remove a next task the conditions for the next task and or the like.

In the interface provides a decision table which enables a user to define one or more parameters and or triggers used to determine a next task at the conclusion of a task. In this case three functions are evaluated and summed using a scaling factor to calculate the corresponding result. Using the interface a user can add additional function s remove a function adjust the scaling factor for a function and or the like.

In the interface enables a user to create view modify a rule policy resource of an application. Attributes of the rule can include the user s to which the rule applies privileges restrictions actions and or the like the rule enforces a set of conditions triggering the rule and or the like.

In the interface enables a user to create view modify a user interface resource . As illustrated the user can add a field to the user interface change one or more attributes of the user interface and or the like. Furthermore for each field of the user interface the interface can enable the user to obtain additional information and or modify one or more aspects of the field as shown in the popup interface.

In the interface illustrates a user requesting a modification to an resource while using the application to perform an activity. As illustrated the user is requesting that an additional valid data value be added for an attribute. Once the request is complete the user can submit the change for review by another user e.g. a developer . In this manner the application can enable real time collaboration between the different types of users .

In the interface illustrates a user e.g. a developer providing a decision to the requested modification shown in . As illustrated the user can approve deny or request additional information regarding the change. When approved the user can approve the change along with a scope of the change e.g. for all users or a subset of the users e.g. only the requesting user a subset of users similar to the requesting user and or the like .

As described herein a system for managing a software application can be implemented in which the previous distinction between development and runtime is eliminated. To this extent aspects of the invention can provide one or more of 

c no separation between design time and run time the system can be fully dynamic there is just interaction time which is an instantiation of the system 

d the modeling environment application can be an application for creating and or modifying other applications and other application resources 

e the modeling environment application can be configured for use by a non technical business analyst or other user to declaratively design new and or modify existing models meta resources 

f models can include but are not limited to business entities including people business policies applications capabilities automated scripts business processes tasks adaptors for third party services APIs databases systems devices etc.

g the modeling environment application can generate system validated and well formed resources e.g. a discrete meta resource representing the model the user chose to create or modify the system can support the principle of immutability such that modify also results in a new meta resource and a set of atomic and or other meta resources that support the model h in the modeling environment application the user can associate other atomic and or other meta resources using links and metadata references and or adding other new atomic and or other meta resources i the system can operate run without the modeling environment application it is an alternative to hand writing resources and manually connecting them with links and metadata references likewise the modeling environment application can benefit from all properties of the system design e.g. contextual extensible configurable adaptable etc. and can avail itself of all system properties embodied in other atomic and meta resources j the system can be fully dynamic and based on stateless immutable loosely coupled resources atomic and meta in which case all models themselves resources are handled by representations as with REST style architecture and bound late in real time by the system separating the model from its implementation k in response to an interaction request the system can interpret representations resources handled by representation as in REST style architecture of models follow links resolve metadata references including complex and probabilistic queries real time business Intelligence and predictive analytics within the transaction micro flow l the late binding of representations of models supports the separation of the model from implementation the declarative link and metadata references of the model can be substituted for values resources atomic or meta resources at run time for the specific implementation such customization can be referred to as local variance of an instance of a model including user driven modification and automated personalization . m separation of the model from implementation supports run time customization of all interactions including concerns at all levels of the system application logic enterprise governance policies system controls and or the like wherein the concerns are represented by other models that also bind at run time so they are specific to the interaction n separation of the model from implementation can support run time adaptability of all models as the designer of a model can delegate configuration and extension of the model to a user of the model at run time for either 1 their individual interaction 2 to change or request a change to the overall model in this case discrete models e.g. tools capabilities of the modeling environment application can be made available to that user for that purpose and o the late binding of representations of models supports the separation of the model from implementation the declarative link and metadata references of the model can be substituted for values resources atomic or meta resources at run time for the specific implementation such customization can be referred to as global change of a model including user driven modification and automated machine learning .

While shown and described herein as an application meta model and system for self modification it is understood that aspects of the invention further provide various alternative embodiments. For example in one embodiment the invention provides a computer program fixed in at least one computer readable storage medium which when executed enables a computer system to provide dynamic design use and modification of models using a declarative application meta model that provides for self modification of a collection of the models as described herein. To this extent the computer readable medium includes program code such as the application and or the application which enables a computer system to implement some or all of a process described herein. It is understood that the term computer readable storage medium comprises one or more of any type of tangible medium of expression now known or later developed from which a copy of the program code can be perceived reproduced or otherwise communicated by a computing device. For example the computer readable storage medium can comprise one or more portable storage articles of manufacture one or more memory storage components of a computing device and or the like.

In another embodiment the invention provides a method of providing a copy of program code such as the application and or the application which enables a computer system to implement some or all of a process described herein. In this case a computer system can process a copy of the program code to generate and transmit for reception at a second distinct location a set of data signals that has one or more of its characteristics set and or changed in such a manner as to encode a copy of the program code in the set of data signals. Similarly an embodiment of the invention provides a method of acquiring a copy of the program code which includes a computer system receiving the set of data signals described herein and translating the set of data signals into a copy of the computer program fixed in at least one computer readable medium. In either case the set of data signals can be transmitted received using any type of communications link.

In still another embodiment the invention provides a method of generating a system for providing dynamic design use and modification of models using a declarative application meta model that provides for self modification of a collection of the models as described herein. In this case the generating can include configuring a computer system such as the computer system to implement a process described herein. The configuring can include obtaining e.g. creating maintaining purchasing modifying using making available etc. one or more hardware components with or without one or more software modules and setting up the components and or modules to implement a process described herein. To this extent the configuring can include deploying one or more components to the computer system which can comprise one or more of 1 installing program code on a computing device 2 adding one or more computing and or I O devices to the computer system 3 incorporating and or modifying the computer system to enable it to perform a process described herein and or the like.

The foregoing description of various aspects of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed and obviously many modifications and variations are possible. Such modifications and variations that may be apparent to an individual in the art are included within the scope of the invention as defined by the accompanying claims.

