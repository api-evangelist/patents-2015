---

title: Resolving conflicts within saved state data
abstract: Disclosed are various embodiments for synchronizing application state information across devices. More specifically, embodiments of the disclosure are related to resolving conflicts between application state information. A synchronization rule, an event name and/or event value are embedded within application state information obtained from devices associated with a user, from which conflicts can be resolved by an application synchronization service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09536261&OS=09536261&RS=09536261
owner: Amazon Technologies, Inc.
number: 09536261
owner_city: Seattle
owner_country: US
publication_date: 20150914
---
This application is a division of and claims the benefit of U.S. patent application Ser. No. 13 850 119 entitled RESOLVING CONFLICTS WITHIN SAVED STATE DATA and filed Mar. 25 2013 which is hereby incorporated by reference in its entirety.

Applications that are distributed via an application marketplace are often installed on multiple devices by a user. A developer of an application may wish to synchronize state information across the multiple installations across various devices of a particular application. Accordingly developers can employ one or more software libraries for the purpose of generating state information of an application as the application executes which can be synchronized across the various installations of the application. The state information generated by various devices associated with the user may create synchronization conflicts.

The present disclosure relates to synchronizing data associated with the state of an application between multiple devices that may be associated with a user. Applications that are distributed via an application marketplace are often installed on multiple devices associated with a user account. For example a user may own a tablet device as well as a smartphone and install an application distributed by the application marketplace on both devices. Accordingly embodiments of the disclosure can facilitate synchronization of data relating to the application across the various devices associated with the user by employing an application synchronization service to which applications report application state information which can in turn facilitate synchronization of application state information across multiple devices.

Wherein an application is a game application application state information can comprise for example information that is related to game applications such as scoring data game progress game achievements game timing information time stamps and any other information relating to execution of a game. Application state information can also related to media such as books movies music etc. that is rendered or consumed via a media player application. In this scenario the application state information can relate to a page number and or time code within media that a user last viewed and or consumed. In some scenarios conflicts can arise between application state information that is reported by devices. For example execution of one application instance in a user s tablet device may report application state information that indicates that the user s high score of the day was 1 000. However execution of another application instance in the user s smartphone may indicate that the user s high score of the day was 1 100. Therefore embodiments of the present disclosure provide for conflict resolution when conflicts arise within application state information that is saved in a data store.

With reference to shown is an example scenario in which an application executed by a client device and . In the scenario shown in the application can be distributed by an application marketplace. In the example of the client devices and are associated with a particular user account. In other words the user has installed the same application on multiple devices. An application synchronization service can be associated with the application marketplace and or independent from an application marketplace and facilitates synchronization of game state data.

As shown in the example of an application instance corresponding to execution of a particular application is executed by the client device can incorporate functionality in which a user may utilize an account held with a third party service for the purpose tracking achievements game progress game scores or any other data related to the state of an application that can be saved. Accordingly an application can be bundled with a software library and or code fragments related to an application marketplace and or application synchronization service that facilitate the creation of application state information in a data structure that can be transmitted to a synchronization service. As shown in the client device that is also associated with the user another application instance corresponding to execution of the application may be executed on another device associated with the user.

Accordingly each application instance may report for example scoring information corresponding to a score or of the user. Such a score can for example comprise a running score that represents a number of points assigned to the user across all instances of execution of the application. Accordingly as shown in the scenario of a conflict may arise between scoring information that is reported by each application instance. Embodiments of the disclosure can facilitate resolution of such a conflict by a synchronization service utilized by a developer without further action required on the part of the developer and or either application instance. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

Turning now to shown is a networked environment according to various embodiments. The networked environment includes a computing environment and one or more clients in data communication via a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may employ a plurality of computing devices that may be arranged for example in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environment may include a plurality of computing devices that together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environment may correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing environment for example include an application marketplace system application synchronization service and other applications services processes systems engines or functionality not discussed in detail herein. The application marketplace system may communicate with the client device using various protocols such as for example hypertext transfer protocol HTTP simple object access protocol SOAP representational state transfer REST real time transport protocol RTP real time streaming protocol RTSP real time messaging protocol RTMP user datagram protocol UDP transmission control protocol TCP and or other protocols for communicating data over the network .

The application marketplace system is executed to provide functionality relating to an application marketplace in which a multitude of applications may be submitted by developers and made available for purchase and or download by users. The application marketplace system may include functionality relating to electronic commerce e.g. shopping cart ordering and payment systems. The application marketplace system may support searching and categorization functionality so that users may easily locate applications that are of interest. The application marketplace system may include functionality relating to verification of compatibility of applications with various clients .

The application synchronization service is executed to synchronize application state information associated with instances of applications executed by various client devices that are associated with a user account. Application state information can include information relating to application usage that is associated with an application instance executed by a client device . For example application state information can include a score or achievement achieved by a user in an application instance. Application state information can also include saved game data or a score level or other state information from which a user may resume gameplay at a later point in time on the same client device or another client device .

The data stored in the data store includes for example applications saved state data relating to applications that are executed by client devices application marketplace data and potentially other data. The applications correspond to those applications that have been submitted by developers and or others for example for inclusion in the application marketplace. The application may correspond for example to a game or other types of applications. As non limiting examples the application may correspond to a first person shooter game an action game an adventure game a party game a role playing game a simulation game a strategy game a vehicle simulation game and or other types of games.

The application may be a game originally designed for execution in a general purpose computing device or in a specialized video game device such as for example a video game console a handheld game device an arcade game device etc. The applications may also correspond to mobile phone applications computer aided design CAD applications computer aided manufacturing CAM applications photo manipulation applications video editing applications office productivity applications operating systems and associated applications emulators for operating systems architectures and capabilities not present on a consumer device and other applications and combinations of applications. Where game applications are mentioned in the following text it is understood that game applications are merely examples of the many different types of applications .

The application when executed by a client device may expect to access one or more resources of the client device on which it is executed. Such resources may correspond to display devices input devices or other devices. In some cases the application may request exclusive access to one or more of the resources whereby no other applications may have access to the particular resources. Each application may include for example object code binary code source code metadata and or other data. The object code corresponds to code that is executable by clients either natively by a processor or by way of a virtual machine executed by the processor.

The saved state data that is maintained by the application marketplace system includes various data relating to execution of applications by client devices . For example the saved state data may include information about progress of a user within execution of an application by users such as a level at which a user has progressed within a game scoring information achievement information relating to a game etc. Saved state data can be organized into various keys and corresponding values . Accordingly a key can represent an event name of an event occurring in an application executed by a client device that an application developer may wish to synchronize across the various devices of a user. The key can also take the form of an event name or event identifier that is combined with a synchronization rule. The value can represent the value associated with the event such as a score lap time level page number or any other data about application state that a developer wishes to synchronize across the various devices of a user.

The data associated with the application marketplace data includes for example download information categories application usage data and or other data. The download information indicates the popularity either in terms of absolute number of downloads or in terms of relative popularity of the applications offered by the application marketplace data . The download information can also identify users either individually by a user account and or on an aggregate basis according to demographic category that have downloaded a particular application . The categories correspond to groupings of applications that may indicate similar applications and may be employed by users to more easily navigate the offerings of the application marketplace data . Non limiting examples of categories may include social networking applications mapping applications movie information applications shopping applications music recognition applications and so on. The application marketplace data can also include information about users such as user profile data user authentication information usage data of users with regard to application e.g. game progress high scores achievements .

The client device is representative of a plurality of client devices that may be coupled to the network . The clients may be geographically diverse. The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability.

The client may include a display device. The display may comprise for example one or more devices such as cathode ray tubes CRTs liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc. The client may include one or more input devices. The input devices may comprise for example devices such as keyboards mice joysticks accelerometers light guns game controllers touch pads touch sticks push buttons optical sensors microphones webcams and or any other devices that can provide user input. Additionally various input devices may incorporate haptic technologies in order to provide feedback to the user.

The client may be configured to execute various applications that are distributed via the application marketplace system . An application executed by a client device as is noted above can be configured to generate application state information that is reported to the application synchronization service and saved by the application synchronization service as saved state data .

Next a general description of the operation of the various components of the networked environment is provided. To begin an application executing on a client device can be instrumented upon the occurrence of an event within execution of an application instance to generate application state information which contains information about the event. For example when a certain level and or achievement within a game application is reached the application can generate application state information which can be cached within the application state cache which can be stored on the client device . As another example the user s progress within a game application can also be tracked and application state information identifying scores times e.g. lap times time to complete levels time to reach milestones etc. or other state information associated with the application can be generated. The application can generate application state information by utilizing a software library having an application programming interface API provided by and or associated with the application synchronization service so that the application state information can be created in a standardized data format. In other embodiments the application can be instrumented to generate application state information in a standardized data format.

The data format corresponding to application state information can be implemented a text based data interchange format such as JavaScript Object Notation JSON or any other standardized or proprietary data interchange format that can allow for the exchange of structured data. Accordingly the application executed by a client device can generate and transmit application state information to the application synchronization service which can extract and store the application state information as saved state data .

Application state information may be transmitted by the application to the application synchronization service asynchronously from multiple client devices as and when a particular client device has the capability to transmit data via the network . For example the application can cache application state information in the application state cache on the client device transmit the application state information upon the occurrence of an event such as termination of the application network accessibility the reaching of a level and or achievement within an application a size of the application state cache reaching a threshold size in real time as and when events are generated within an application instance corresponding to the application or upon the occurrence of other events.

The application state information that is generated by an application and transmitted to the application synchronization service can contain a synchronization rule an event value and or an event name corresponding to an event occurring within an application instance executed by a client device . Data corresponding to an event can also include a data type such as a number a string a set or list of numbers a set or list of strings Boolean values or other data types. The synchronization rule can allow the application to in effect instruct the application synchronization service as to how a synchronization conflict should be resolved should a conflict occur. The application synchronization service can be configured to extract one or more of a plurality of predefined synchronization rules from the application state information and apply the synchronization rule to the data contained within the application state information as well as saved state data to resolve potential data conflicts. Accordingly a game developer can instrument an application to generate an event and corresponding application state information that the developer wishes to synchronize across multiple application instances.

The application state information can include data corresponding to multiple events and or a single event at a time. A synchronization rule can be associated with event data or one or more event values and specify how the application synchronization service should resolve a conflict should there be a conflict within the saved state data between values that are stored within the data store under a given key . For example a synchronization rule can specify that the highest or lowest number from a number and or a set or list of numbers should be selected and stored as saved state data .

As another example a synchronization rule can specify that a number a string and or one or more numbers from a list of strings or numbers associated with a particular timestamp should be selected and stored as saved state data to resolve a conflict. For example the synchronization rule can specify that the application synchronization service should resolve a conflict in favor of an event value having the most recent timestamp within the saved state data . As another example the synchronization rule that also specify that the application synchronization service select the highest lowest earliest or latest N items from among many items and store the N items as saved state data . As yet another example the synchronization rule that specify that a given data value associated with a particular key and stored in the data store as saved state data should be incremented and or decremented by an amount that can be specified within the corresponding event value in the application state information . Accordingly a synchronization rule can be thought of as one of many commands that the synchronization service can be configured to interpret where these commands are embedded within application state information along with the data to which these commands are applied.

Therefore because a synchronization rule is embedded within the application state information that is generated by the application executed on the client device the application synchronization service can resolve synchronization conflicts on behalf of the application without intervention from the application and or the user. For example a synchronization rule can specify that the highest number for a given key e.g. userscore for a particular application and user should be selected in the event of multiple application instances reporting conflicting values for the key . For example if a first application instance reports a userscore value of 500 but a second application instance reports a userscore value of 600 the application synchronization service can select the higher of the two values to be stored as the corresponding value for the key .

As another example a synchronization rule can specify that a string having the latest timestamp should be stored under a given key e.g. lastLevel . Accordingly if a first application instance reports a value of worldone with an earlier timestamp than a second application instance reporting a value of worldamazing with a later timestamp then the application synchronization service can select and store worldamazing to be stored as the corresponding value for the key .

Therefore the application state information can be formatted according to a data format that can be parsed by the application synchronization service . In one embodiment an identifier corresponding to a particular synchronization rule can be prepended or otherwise concatenated onto an event name or key corresponding to a particular event. Additionally an event value can be paired within the synchronization rule concatenated with the event name or key to form a key value pair. Additionally a timestamp can also be paired with the event value in the event that the timestamp is required to value a potential conflict between multiple event values . Additional examples and discussion of a data format that can be employed for application state information is described in the context of .

Turning now to shown is an example of application state information and that can be generated by various instances of an application according to various embodiments of the disclosure. In the application state information shown in a text based data interchange data structure is generated by the application that contains a synchronization rule an event name as well as an event value . A timestamp is also included within the application state information . In the depicted example application state information a JSON data structure is employed in which the synchronization rule is concatenated with the event name which can correspond to the key of an event stored within saved state data . The application state information also includes an event value that corresponds to a value of an event stored within saved state data .

In the application state information which can be generated by another instance of the application a differing event value may be generated because the application state information corresponds to another instance. As noted above because the synchronization rule is embedded within a data structure representing the application state information that is reported by the application synchronization service by the various instances of the application the application synchronization service can determine how to resolve a conflict between application state information without additional feedback from the application or elsewhere.

In the example of the application synchronization service can apply the synchronization rule that is embedded within the application state information . In the example shown in the application synchronization service can select the highest of the two data values in the application state information and for storage in the data store can saved state data . It should be noted that the application synchronization service will often resolve conflicts by comparing a synchronization rule an event name event value and or timestamp within application state data obtained from an instance of an application executed in a client device with saved state data in the data store that was previously saved in the data store by the application synchronization service .

For example the application synchronization service can receive application state information and locate a key in the saved state data that matches the event name and then apply the synchronization rule to the value corresponding to the key and the event value contained within the application sate information . In the depicted example if the event value is greater than the value in the data store then the value can be overwritten.

Moving on to shown is an alternative example of application state information and . illustrate an example of an event data type and event value that comprises a set or list of items e.g. strings . In the example shown in the synchronization rule instructs the application synchronization service that the values stored as saved state data correspond to the latest generated strings according to timestamp. In this scenario the timestamps are generated by an application when an event corresponding to an event value occurs within the application . In addition to a synchronization rule event name and multiple values that can be associated with one or more timestamps the application state information can also include a bounding value that specifies a maximum number of values that should be stored by the synchronization service as saved state data .

In other words the bounding value can specify along with the synchronization rule how a potential conflict should be resolved where the saved state data to which the synchronization rule applies involves multiple values . In the depicted example of the synchronization rule and bounding value specifies that the three most recent strings should be saved as saved state data . Accordingly if a subsequent application state information data structure involving the same event name and synchronization rule is received by the application synchronization service with one or more strings that are more recent the application synchronization service can drop less recent strings such that a maximum of three are saved as saved state data .

Accordingly the application synchronization service can store a specified number of the strings that have the latest or most recent timestamps. In the depicted example the application synchronization service can store the application state information as saved state data in the data store . Then assuming that the application state information is received after the application state information is received by the application synchronization service it should be appreciated that a conflict between the application state information saved as saved state data and the application state information that should be resolved. As noted above in many embodiments the application synchronization service compares the application state information and event values contained therein with values contained within the saved state data .

Accordingly in the example of a conflict exists in that the strings from the lists having the most recent timestamps span both of the application state information and . Therefore reference is now made to which illustrates the resolved conflict generated by the application synchronization service that can be saved as saved state data to the data store . As can be seen the application synchronization service applies the synchronization rule that was extracted from the application state information and and selected the most recent strings which span both application state information and as the resolved conflict . Therefore the data embodied within the resolved conflict can be stored as saved state information under a key and with values that corresponding to the data contained within the data structure shown in .

In some embodiments the data structure representing application state information can also be structured in a hierarchical data structure in which synchronization rules event names and or event values can be structured in a hierarchical data structure that can correspond to a hierarchical organization e.g. according to levels of an application such as a game.

Referring next to shown is a flowchart that provides one example of execution of an application executed by a client device to generate application state information according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of an application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the application that reports application state information to the application synchronization service for synchronization of state information across multiple devices of a user according to one or more embodiments.

First in box the application executes functionality associated with the application in a client device . As described above the application has been instrumented by a developer to generate application state information corresponding to events that the developer wishes to synchronize across multiple devices associated with a user account. In box the application determines whether an event corresponding to data that is synchronized between various devices associated with a user account occurs within the client device . If so then in box the application generates application state information that contains one or more synchronization rules event names and or event values corresponding to the event names.

As described above the synchronization rule corresponds to one or more commands that can be interpreted by the application synchronization service for the purpose of resolving conflicts within the saved state data . A synchronization rule can also define a data type of the data contained within the data structure defining the application state information . Accordingly the synchronization rule can comprise for example a command that specifies that the application synchronization service save the most recent least recent highest and or lowest number or string. The synchronization rule can also specify the same with regard to a set of numbers or strings as well as a bounding value associated with the set. Additionally the synchronization rule that specify that a given value in the saved state data be incremented and or decremented by an amount contained with the application state information . Other variations and examples are discussed herein above.

In box the application formats the application state information according to a data format that can be parsed by the application synchronization service such as a text based data interchange format. In box the application transmits the application state information to the application synchronization service .

Referring next to shown is a flowchart that provides one example of execution of the application synchronization service executed by a computing environment according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of an application synchronization service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the application synchronization service obtains application state information via a network . The application state information is formatted according to a data format as described above. In box the application synchronization service extracts a synchronization rule from the application state information . In box the application synchronization service extracts an event name from the application state information . In box the application synchronization service extracts an event value from the application state information .

In box the application synchronization service determines whether based upon the synchronization rule the event value and or event name there exists a conflict between the application state information and the saved state data stored in the data store . If so then in box the application synchronization service resolves the conflict according to the synchronization rule extracted from the application state information . Then the application synchronization service stores the saved state data in the data store upon resolution of the conflict. If no conflict was detected in box the application synchronization service stores the saved state data . Thereafter the process ends.

Referring next to shown is a flowchart that provides one example of execution of an application executed by a client device that receives an application state update from the application synchronization service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of an application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the application executed by a client device that receives an application state update from the application synchronization service and merges the application state update with data saved on the client device according to various embodiments.

First in box the application executes functionality associated with the application in a client device . As noted above the application has been instrumented by a developer to generate application state information corresponding to events that the developer wishes to synchronize across multiple devices associated with a user account. The application can also be instrumented to retrieve an application state update from the application synchronization service and merge application state information contained within the application state update with state information stored on the client device . To merge an application state update the application can be configured to employ the same conflict resolution logic as the application synchronization service . In other words the application or a library called by the application can be configured to determine whether there are conflicts between state information saved on the client device e.g. corresponding to the last time the application was executed on the client device and the application state update and resolve such conflicts.

Accordingly at box the application obtains an application state update containing application state information from the application synchronization service . The application state update can be formatted according to the data format that is utilized for application state information that is generated by the application and reported to the application synchronization service . At box the application can then determine whether a conflict exists between the application state update and the state data saved on the client device that pertains to the application . If a conflict exists then at box the application can resolve the conflict according to the synchronization rule embedded in the application state update that is associated with the event for which a conflict exists. At box the application can merge the application state update into the state information saved on the client device that pertains to the application by employing the same conflict resolution logic that the application synchronization service employs and saving the state information to the client device .

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . Each computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end each computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the application marketplace system application synchronization service and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

With reference to shown is a schematic block diagram of the client device according to an embodiment of the present disclosure. The client device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated. A display may also be coupled to the local interface .

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are an application and potentially other applications and or software. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and or multiple processor cores and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the application marketplace system application synchronization service and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits ASICs having appropriate logic gates field programmable gate arrays FPGAs or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the application synchronization service and or application executed by a client . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in flowcharts of may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in flowcharts of may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the application synchronization service application or any other application or service that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

