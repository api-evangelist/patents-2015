---

title: Stubbing systems and methods in a data replication environment
abstract: Stubbing systems and methods are provided for intelligent data management in a replication environment, such as by reducing the space occupied by replication data on a destination system. In certain examples, stub files or like objects replace migrated, de-duplicated or otherwise copied data that has been moved from the destination system to secondary storage. Access is further provided to the replication data in a manner that is transparent to the user and/or without substantially impacting the base replication process. In order to distinguish stub files representing migrated replication data from replicated stub files, priority tags or like identifiers can be used. Thus, when accessing a stub file on the destination system, such as to modify replication data or perform a restore process, the tagged stub files can be used to recall archived data prior to performing the requested operation so that an accurate copy of the source data is generated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09483511&OS=09483511&RS=09483511
owner: Commvault Systems, Inc.
number: 09483511
owner_city: Tinton Falls
owner_country: US
publication_date: 20150312
---
This application is a continuation of U.S. application Ser. No. 13 955 445 filed on Jul. 31 2013 and titled STUBBING SYSTEMS AND METHODS IN A DATA REPLICATION ENVIRONMENT which is incorporated by reference in its entirety herein and which is a continuation of U.S. application Ser. No. 12 750 067 filed on Mar. 30 2010 and titled STUBBING SYSTEMS AND METHODS IN A DATA REPLICATION ENVIRONMENT which is incorporated by reference in its entirety herein and which is related to the following U.S. patent applications filed on Mar. 30 2013 each of which is hereby incorporated herein by reference in its entirety 

The present disclosure relates to performing copy and or data management operations in a computer network and in particular to systems and methods for managing stub files in a data replication system.

Computers have become an integral part of business operations such that many banks insurance companies brokerage firms financial service providers and a variety of other businesses rely on computer networks to store manipulate and display information that is constantly subject to change. Oftentimes the success or failure of an important transaction may turn on the availability of information that is both accurate and current. Accordingly businesses worldwide recognize the commercial value of their data and seek reliable cost effective ways to protect the information stored on their computer networks.

To address the need to maintain current copies of electronic information certain data replication systems have been provided to continuously copy data from one or more source machines to one or more destination machines. These continuous data replication CDR systems provide several advantages for disaster recovery solutions and can substantially reduce the amount of data that is lost during an unanticipated system failure.

One drawback of such CDR systems is that synchronization of the source and destination machines generally requires the same amount of storage space on both the source and destination. Thus not only do many conventional CDR systems require large amounts of disk space but they also tend to be less useful for general data backup purposes.

In view of the foregoing a need exists for improved systems and methods for the managing replication data in a storage system such as a CDR system. For example there is a need for conserving disk space on a destination storage device while maintaining the ability to provide sufficient and timely recovery of the replicated data. Moreover there is a need for providing user access to the replicated data in a manner that is transparent to the user and or without substantially impacting the CDR or other replication process.

In certain embodiments of the invention disclosed herein stubbing systems and methods are provided for destination storage devices in a CDR system. For instance data on a destination storage device can be selectively moved to secondary storage based on archive de duplication or other storage policies to free up space on the destination system.

For example certain embodiments of the invention involve the de duplication or single instancing of replication data. In such systems de duplicated data blocks on the replication storage device can be replaced with substantially smaller stub files that serve as pointers to or placeholders for the actual data. In certain embodiments a data migration module of the replication system periodically examines the replication data to identify common blocks that have not been accessed for a period of time and that can be replaced by smaller stub files while a copy of the actual data is archived to secondary storage such as a less expensive medium or the like.

In order to distinguish the stub files representing migrated replication data from original stub files that have been replicated from the source system certain embodiments of the invention use priority tags. Thus when accessing a stub file on the destination system such as to modify the replication data or to perform a system restore process the tagged stub files can be used to recall the archived data prior to performing the requested operation so that an accurate replica of the source data can be compiled.

Certain embodiments of the invention include a method for performing data management operations on replicated data of a destination storage device. The method includes processing with one or more routines at least one log file having a plurality of log entries indicative of operations generated by a computer application executing on a source system the operations being directed to data on a source storage device. The method further includes replaying with the one or more routines the operations on a destination storage device to modify replication data on the destination storage device wherein said replaying further comprises i identifying a plurality of stub files within the replication data wherein the plurality of stub files comprises one or more first stub files each comprising a predetermined tag value and wherein the plurality of stub files further comprises one or more second stub files that do not comprise the predetermined tag value ii for each of the one or more first stub files recalling from a secondary storage one or more data objects represented by each of the one or more first stub files and replacing each of the one or more first stub files with the corresponding data object prior to modifying the replication data and iii modifying the replication data on the destination storage device to match the data on the source storage device.

Certain embodiments of the invention further include a destination system for performing data replication in a computer network. The destination system comprises a destination storage device at least one replication log file a replication module and a migration module. The destination storage device stores replication data having a plurality of stub files the plurality of stub files comprising one or more first stub files each having at least one predetermined tag value and one or more second stub files that do not have the at least one predetermined tag value. The at least one replication log file comprises a plurality of log entries indicative of data operations generated by a computer application for execution on a source storage device. A replication module traverses the plurality of log entries in the replication log file s and copies the log entries to execute the data operations on replication data of the destination storage device. The migration module restores copied data from a secondary storage device to the destination storage device based on the one or more first stub files. In certain embodiments the replication module is further configured to identify the first stub file s and instruct the migration module to replace the first stub file s with the copied data from the secondary storage device prior to executing the data operations on the replication data.

In certain embodiments a destination system is disclosed for performing data replication in a computer network. The destination system comprises means for storing replication data having a plurality of stub files the plurality of stub files comprising one or more first stub files each comprising at least one predetermined tag value and one or more second stub files that do not comprise the at least one predetermined tag value. The system further includes means for receiving a plurality of log entries indicative of data operations generated by a computer application for execution on a source storage device and means for traversing the plurality of log entries in the receiving means and for copying the log entries to execute the data operations on replication data of the storing means. The system further includes means for restoring copied data from a secondary storage device to the storing means based on the first stub file s . Furthermore the traversing means can identify the first stub file s and instruct the restoring means to replace the first stub file s with the copied data from the secondary storage device prior to executing the data operations on the replication data.

In certain embodiments a method is disclosed for performing data management operations in a computer network. The method includes monitoring operations associated with a source computing device the operations operative to write data to a source storage device. The method further includes copying the data to a destination storage device based at least in part on the operations the data comprising at least one first stub file and scanning the data of the destination storage device to identify a common data object repeated between multiple portions of the data on the destination storage device. The method also includes archiving a copy of the common data object on a second storage device and determining a last access time of each of the multiple data portions of the destination storage device having the common data object. For each of the multiple data portions having a last access time at or before the time of the archiving of the copy of the common data object the method includes replacing the common data object of the particular data portion with a second stub file wherein the second stub file comprises a tag value not possessed by any of the first stub file s and wherein the second stub file comprises information indicative of a location of the copy of the common data object.

In further embodiments a continuous data replication system is disclosed that comprises a first storage device at least one monitoring module a replication module and a migration module. The first storage device stores data write operations from at least one computer application at a first location the first location comprising at least one first stub file. The at least one module monitors the data write operations and generates first log entries based on the data write operations. The second storage device comprises second log entries wherein the second log entries comprise copies of at least a portion of the first log entries. The replication module is in communication with the second storage device and is configured to process the second log entries to modify replicated data stored in a second location to substantially mirror the data of the first location the replicated data comprising a copy of the first stub file s . The migration module is configured to archive select data objects of the replicated data to a third location and to replace each of the select data objects of the replicated data with a second stub file wherein each of the second stub files comprises an identifier not possessed by the first stub file s and wherein each of the second stub files comprises information indicative of a location of the archived copy of the data object at the third location.

In certain embodiments a continuous data replication system is disclosed that comprises means for storing data write operations from at least one computer application at a first location the first location comprising at least one first stub file. The replication system further includes means for monitoring the data write operations and for generating first log entries based on the data write operations and also means for receiving second log entries wherein the second log entries comprise copies of at least a portion of the first log entries. The replication system further includes means for processing the second log entries to modify replicated data stored in a second location to substantially mirror the data of the first location the replicated data comprising a copy of the first stub file s and means for archiving select data objects of the replicated data to a third location and for replacing each of the select data objects of the replicated data with a second stub file wherein each of the second stub files comprises an identifier not possessed by the first stub file s and wherein each of the second stub files comprises information indicative of a location of the archived copy of the data object at the third location.

In certain further embodiments a method is disclosed for restoring data in a continuous data replication system. The method includes receiving with a first computing device a request to restore data of one or more snapshots of replication data of a destination storage device the replication data having first stub files replicated from a source system and second stub files indicative of select data blocks of the replication data copied to a secondary storage device from the destination storage device. The method further includes mounting the snapshot s identifying the second stub files captured by the snapshot s and recalling to a staging area the select data blocks from the secondary storage device corresponding to each of the identified second stub files. In addition the method includes following said recalling restoring the replication data from the snapshot s the restored data comprising each of the first stub files and comprising none of the second stub files.

In certain embodiments a system is disclosed for restoring data in a continuous data replication environment. The system includes a first storage device comprising data replicated from a source storage system the replicated data comprising first stub files replicated from the source storage system and second stub files indicative of select data blocks of the replicated data copied to a secondary storage device. The system also includes a restore module configured to mount a snapshot of the replicated data the snapshot representing a point in time image of the replicated data wherein the restore module is further configured to identify the second stub files captured by the snapshot s . The system further includes a migration module in communication with the restore module the migration module being configured to recall to a staging area the select data blocks from the secondary storage device corresponding to each of the identified second stub files. Moreover in certain embodiments the restore module is configured to restore the replication data represented by the snapshot the restored data comprising each of the first stub files and comprising none of the second stub files.

In certain embodiments a system is disclosed for restoring data in a continuous data replication environment. The system comprises means for storing data replicated from a source storage system the replicated data comprising first stub files replicated from the source storage system and second stub files indicative of select data blocks of the replicated data copied to a secondary storage device. The system also comprises means for mounting a snapshot of the replicated data the snapshot representing a point in time image of the replicated data wherein the mounting means further identifies the second stub files captured by the one or more snapshots. Moreover the system comprises means for recalling to a staging area the select data blocks from the secondary storage device corresponding to each of the identified second stub files and wherein the mounting means further restores the replication data represented by the snapshot the restored data comprising each of the first stub files and comprising none of the second stub files.

For purposes of summarizing the disclosure certain aspects advantages and novel features of the inventions have been described herein. It is to be understood that not necessarily all such advantages may be achieved in accordance with any particular embodiment of the invention. Thus the invention may be embodied or carried out in a manner that achieves or optimizes one advantage or group of advantages as taught herein without necessarily achieving other advantages as may be taught or suggested herein.

As will be seen from the disclosure herein systems and methods are provided for intelligent and efficient data management. For instance certain embodiments of the invention provide for improved CDR systems that reduce the amount of space required for replication data on a destination system. Such systems can utilize stub files or the like to replace migrated de duplicated or otherwise copied data that has been moved from the destination system to secondary storage. Disclosed systems and methods further provide access to the replication data in a manner that is transparent to the user and or without substantially impacting the CDR or like replication process.

In certain examples embodiments of the invention are directed to the de duplication or single instancing of replication data. In such systems de duplicated data blocks on the destination storage device can be replaced with stub files that serve as pointers to the storage locations of the actual data. For instance like stub files can be used to reference the same common data block that has been de duplicated from the destination system. In certain embodiments a migration module on the destination system periodically examines the replication data to identify the common data blocks that have not been accessed for a period of time and that can be replaced by the smaller stub file while a copy of the actual data is archived to secondary storage.

In order to distinguish stub files representing migrated replication data from original stub files that have been replicated from the source system embodiments of the invention can advantageously utilize priority tags or like identifiers. Thus when accessing a stub file on the destination system such as to modify the replication data or to perform a system restore process the tagged stub files can be used to recall the archived data prior to performing the requested operation so that an accurate replica of the source data is generated.

Embodiments of the invention can also be used to restore data from one or more snapshots that represent replicated data in a known good stable or recoverable state even when the snapshots comprise one or more stub files. Certain tags or other priority identifiers can be used to distinguish the stub files that represent migrated replication data from those stub files that had been replicated from a source machine.

The features of the systems and methods will now be described with reference to the drawings summarized above. Throughout the drawings reference numbers are re used to indicate correspondence between referenced elements. The drawings associated descriptions and specific implementation are provided to illustrate embodiments of the invention and not to limit the scope of the disclosure.

In addition methods and functions described herein are not limited to any particular sequence and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example described blocks or states may be performed in an order other than that specifically disclosed or multiple blocks or states may be combined into a single block or state.

As shown in the data replication system comprises a source system capable of communicating with a destination system by sending and or receiving data over a network . For instance in certain embodiments the destination system receives and or stores a replicated copy of at least a portion of data such as application specific data associated with the source system such as on a source storage device .

The illustrated network advantageously comprises any means for communicating data between two or more systems or components. It certain embodiments the network comprises a computer network. For example the network may comprise a public network such as the Internet a virtual private network VPN a token ring or TCP IP based network a wide area network WAN a local area network LAN an intranet network a point to point link a wireless network a cellular network a wireless data transmission system a two way cable system an interactive kiosk network a satellite network a broadband network a baseband network combinations of the same or the like. In embodiments wherein the source system and destination system are part of the same computing device the network may represent a communications socket or other suitable internal data transfer path or mechanism.

In certain embodiments the source system can comprise any computing device or means for processing data and includes for example a server computer a workstation a personal computer a cell phone a portable computing device a handheld computing device a personal digital assistant PDA or the like.

As shown the source system comprises one or more applications residing on and or being executed by a computing device. For instance the applications may comprise software applications that interact with a user to process data and may include for example database applications e.g. SQL applications word processors spreadsheets financial applications management applications e commerce applications browsers combinations of the same or the like. For example in certain embodiments the applications may comprise one or more of the following MICROSOFT EXCHANGE MICROSOFT SHAREPOINT MICROSOFT SQL SERVER ORACLE MICROSOFT WORD and LOTUS NOTES.

The source system further comprises one or more processes such as filter drivers that interact with data e.g. production data associated with the applications to capture information usable to replicate application data to the destination system . For instance the filter driver may comprise a file system filter driver an operating system driver a filtering program a data trapping program an application a module of the application an application programming interface API or other like software module or process that among other things monitors and or intercepts particular application requests targeted at a file system another file system filter driver a network attached storage NAS a storage area network SAN mass storage and or other memory or raw data. In some embodiments the filter driver may reside in the I O stack of the application and may intercept analyze and or copy certain data traveling from the application to a file system.

In certain embodiments the filter driver may intercept data modification operations that include changes updates and new information e.g. data writes with respect to application s of interest. For example the filter driver may locate monitor and or process one or more of the following with respect to a particular application application type or group of applications data management operations e.g. data write operations file attribute modifications logs or journals e.g. NTFS change journal configuration files file settings control files other files used by the application combinations of the same or the like. In certain embodiments such data may also be gathered from files across multiple storage systems within the source system . Furthermore the filter driver may be configured to monitor changes to particular files such as files identified as being associated with data of the application s .

In certain embodiments multiple filter drivers may be deployed on a computing system each filter driver being dedicated to data of a particular application . In such embodiments not all information associated with the client system may be captured by the filter drivers and thus the impact on system performance may be reduced. In other embodiments the filter driver may be suitable for use with multiple application types and or may be adaptable or configurable for use with multiple applications . For example one or more instances of customized or particular filtering programs may be instantiated based on application specifics or other needs or preferences.

The illustrated source system further comprises the source storage device for storing production data of the application s . The source storage may include any type of physical media capable of storing electronic data. For example the source storage may comprise magnetic storage such as a disk or a tape drive or other type of mass storage. In certain embodiments the source storage may be internal and or external to e.g. remote to the computing device s having the applications and the filter drivers . In yet other embodiments the source storage can include a NAS or the like.

In yet other embodiments the source storage can comprise one or more databases and database logs. For instance in certain embodiments database transactions directed to the source storage may be first written to a file in the database logs and subsequently committed to the database in accordance with data management techniques for enhancing storage operation performance.

As further illustrated in the destination system comprises a replication module and a destination storage device . In certain embodiments the replication module is configured to monitor and or manage the copying of data from the source system to the destination system such as data associated with the information obtained by the filter drivers . For example the replication module can comprise any computing device capable of processing data and includes for example a server computer a workstation a personal computer or the like. In yet other embodiments the replication module is a dumb server or terminal that receives and executes instructions from the source system .

The destination storage may include any type of physical media capable of storing electronic data such as replication data sent from the source system . For example the destination storage may comprise magnetic storage or other type s of mass storage. In certain embodiments the destination storage may be internal and or external to the computing device s having the replication module .

In certain embodiments the source storage and or the destination storage may be implemented as one or more storage volumes that include physical storage disks defining an overall logical arrangement of storage space. For instance disks within a particular volume may be organized as one or more groups of redundant array of independent or inexpensive disks RAID . In certain embodiments either or both of the storage devices may include multiple storage devices of the same or different media.

As shown the data replication system further includes a data migration module in communication with the destination storage . In general the migration module is configured to copy or migrate data from the destination storage to a secondary storage . For example the migration module can selectively archive back up or otherwise copy certain portions of the replication data on the destination storage to the secondary storage . In certain embodiments the migration module is further configured to truncate data on the destination storage .

In certain embodiments the migration module is configured to perform file or block level single instancing or de duplication of the data stored on the destination storage . Examples of single instancing methods and structures usable with embodiments of the invention are discussed in U.S. patent application Ser. No. 12 145 342 filed Jun. 24 2008 published as U.S. Patent Application Publication No. 2009 0319585 A1 which is hereby incorporated herein by reference in its entirety to be considered part of this specification. In yet other embodiments the migration module is configured to perform one or more of the following copy operations archiving backup Hierarchical Storage Management HSM copies Information Lifecycle Management ILM copies or the like.

In certain embodiments the migration module can advantageously replace the copied data on the destination storage with a stub file or like object that indicates the new location of the migrated data on the secondary storage . For instance the stub file can comprise a relatively small truncated file e.g. several kilobytes having the same name as the original file. The stub file can also include metadata that identifies the file as a stub and that can be used by the storage system to locate and restore the migrated data to the destination storage or other location.

The secondary storage can include any type of physical media capable of storing electronic data such as the migrated data from the destination storage . In certain embodiments secondary storage comprises media configured for long term data retention such as tape media or the like. In yet other embodiments the secondary storage can comprise a disk or other type of mass storage. For example in certain embodiments the secondary storage advantageously comprises a slower access time and or a less expensive storage medium than the destination storage .

Moreover although the migration module and the secondary storage are illustrated as being external to the destination system it will be understood that either or both of these components can be integrated into the destination system . For instance in certain embodiments the replication module can include the migration module and or the destination storage can include the secondary storage .

In certain embodiments the destination system can be used in the data replication system of . Thus to simplify the description certain components of the destination system of will not be redescribed in detail if they were described above. Rather the components of the destination system will be given a reference numeral that retains the same last two digits as the reference numeral used in data replication system of and the last two digits will be preceded with a numeral 2. 

As shown in the destination system comprises a replication agent and one or more processes such as threads that populate a destination storage . In certain embodiments the replication agent comprises one or more software modules that coordinate the transfer of data from a source system such as the source system to the destination storage . For instance the replication agent can manage replication based on one or more predefined preferences storage policies or the like.

In certain embodiments the replication agent instantiates an appropriate number of threads processes or routines for copying data from replication log files to the destination storage to maintain a replicated copy of a source storage device. In operation in certain embodiments the threads advantageously process or traverse the entries of the replication logs for particular types of data and then copy that data to certain locations on one or more replication volumes based on data paths identified by the replication agent and or associated with each thread .

For example in certain embodiments the replication logs can contain a copy of the data stored on source logs of a client system and or particular data operations being performed on the source system data. Such replication logs can comprise any type of memory capable of storing data including for example cache memory. In certain embodiments the replication logs may reside on the destination system such as for example on the destination storage or at least a portion of the replication logs may be external to the destination system . In certain embodiments once the replication logs have been populated with the data from the source logs the data on the source logs is available to be erased and or overwritten to conserve memory space.

In certain embodiments one thread may write to one or more volumes of the destination storage and or multiple threads may write to a single volume in parallel. Moreover each thread can be assigned to a hard coded path pair which includes i a source path identifying the location on the source storage device associated with a data management operation e.g. C Folder and ii a destination path identifying the location on the destination storage to receive the replicated data e.g. D folder from the thread .

The destination system further includes a de duplication module that traverses the data in the destination storage to identify common data objects within one or more files on the destination storage . For instance in certain embodiments the de duplication module performs block level de duplication to identify common 64 KB blocks of data on the destination storage .

In certain embodiments the de duplication module generates a substantially unique identifier for each 64 KB block such as by performing a cryptographic hash function e.g. message digest algorithm 5 MD5 a secure hash algorithm e.g. SHA 256 a digital digital fingerprint a checksum combinations of the same or the like. For each block having a matching identifier the de duplication module can assume that such blocks contain identical data. For instance the de duplication module can generate the substantially unique identifier for each block on the fly while traversing the blocks of the destination storage .

In yet other embodiments the identifier for each block can be calculated by a module other than the de duplication module such as by a media agent the replication agent or the like. For instance the identifier can be generated in certain embodiments when the block is initially stored on the destination storage as part of the replication process from the source system to the destination system or at any other time prior to the comparison by the de duplication module .

To conserve storage space each set of common or identical blocks of data found in the destination storage can be stored as a single block in the de duplication storage . Moreover the de duplication module can replace each of the common blocks on the destination storage with a substantially smaller stub file that indicates that the actual data block has been copied to the de duplication storage .

For instance as shown in the destination storage comprises three files File A File B and File C . Two of the files File A and File C have a common data block which has been replaced with a de duplication stub file i.e. Stub X by the de duplication module . This common data block is stored in the de duplication storage as common block .

In certain embodiments the de duplication stub file is distinguishable from other stub files via a tag a header entry or other like identifier. Such identification can be advantageous in a replication system such as the destination system so that the system can distinguish between stubs that have been replicated to the destination storage from a source storage device and stubs that represent actual data on the destination storage that has been archived de duplicated or otherwise migrated from the destination storage to de duplication storage .

For example File B on the destination storage also includes a stub file i.e. Stub Y that has been replicated from a source storage device. Thus in certain embodiments Stub Y a non de duplication stub file does not necessarily correspond to a common block stored on the de duplication storage and does not include the same tag or other identifier contained by the de duplication stub files.

In certain embodiments the de duplication module further maintains a tag index that tracks tag values used by stubs on the destination storage . For instance the index can indicate which tag value s are assigned to de duplication stub files e.g. Stub X and or replicated stub files e.g. Stub Y . Thus in such embodiments the de duplication module can access the index any time it encounters a stub file on the destination storage based on the tag value contained by the stub. In yet other embodiments the index can be maintained on the destination storage the de duplication storage or other component of the destination system .

Although not illustrated in the destination system can further comprise a de duplication database that associates de duplication stub files on the destination storage with their corresponding common block s on the de duplication storage . For example the de duplication module can be configured to maintain and or access a table index linked list or other structure that stores entries for each of the de duplication stub files on the destination storage and the location of the corresponding common block on the de duplication storage .

Although the stub files illustrated in have been described with reference to common data blocks in other embodiments of the invention the stub files can be used to identify other identical data objects such as files strings or the like. Moreover the common data objects need not be limited to 64 KB but may be larger or smaller depending on the specifications e.g. operating system of the applicable system.

The de duplication module can further be configured to restore and or recall data from the de duplication storage . For instance as discussed in more detail below the de duplication module can advantageously retrieve the de duplication or archived data in response to a request to access the replication data on the destination storage .

Furthermore although the destination system of has been described with reference to de duplication of data it will be understood from the disclosure herein that other embodiments of the destination system can be configured to perform other migration processes as disclosed above that result in the copying and or stubbing of data.

As is further illustrated in certain embodiments the replication agent can communicate directly with the de duplication module . For instance the two components can schedule access to replication data on the destination storage and or the replication agent can instruct the de duplication module to restore data such as the common block from the de duplication storage to the destination storage .

For instance in certain embodiments the de duplication stub file comprises a 4 KB file that represents a common 64 KB block of data. In certain embodiments the de duplication module or other like module utilizes the data within the stub to retrieve the 64 KB data block in response to a data modification or restore operation request for the replication data. For example the de duplication stub file can reference a block offset of the corresponding 64 KB data block within the de duplication storage . In yet other embodiments the stub file can represent an entire file or data object rather than a fixed block size.

For exemplary purposes the de duplication stub file is shown in with a plurality of fields. It will be understood that the illustrated stub file is merely exemplary and that one or more of such fields can be optional and or dependent on the type of operating system s used in the replication system.

As shown the stub file includes a tag value field . In certain embodiments the tag value distinguishes the de duplication stub file from regular stub files. For instance in certain embodiments the tag value can be one of two preset values a first value that identifies the stub file as a de duplication stub file or a second value associated with a replicated stub file that represents a file migrated from a source storage device e.g. a stub file that was itself replicated in a copy operation . For example the tag value could comprise a single bit to distinguish the two types of stub files.

In yet other embodiments the tag value can comprise a unique substantially unique or other identifier e.g. an alphanumeric value that can be used in accessing a lookup table or like structure e.g. index to determine if the stub file is a de duplication stub file or a regular stub file.

A time stamp field can store an indication of when the represented file was migrated to secondary storage and replaced with the stub file. The file size field can indicate the size of the file and or block represented by the stub file . In environments wherein all stub files reference a predetermined block size the stub file may not have such a field.

A file name field indicates the name of the file referenced by the stub file . In certain embodiments the stub file itself is assigned the same name as the migrated file thereby presenting the appearance that the actual file is located in the particular storage location.

The stub file further includes a file location information field containing data for locating and or retrieving the migrated file. For example the field can comprise an archive file identifier volume identifier one or more offset values a pathname an address combinations of the same or the like. It will be understood from the disclosure herein that the field is illustrated as one field for simplification purposes and that other embodiments of the stub file can comprise multiple fields adjacent or non adjacent with information relating to the location of the migrated file. In general the field comprises enough information such that a migration module e.g. migration module can access the migrated file.

A checksum field includes data for verifying that a restored file is not corrupted and or accurately represents the data object that was migrated. For instance when restoring a migrated file or object the value in the checksum field of the corresponding stub file can be compared with a checksum of the restored file to validate the data.

The stub file further includes a flag field that contains other information regarding the migrated file or data object. For example the flag field can indicate whether or not the migrated file is encrypted compressed or the like. In yet other embodiments the stub file can function without the flag field .

Although the de duplication stub file has been described with respect to particular embodiments it will be understood from the disclosure herein that the stub file can comprise more or fewer fields or information than what is illustrated in . Moreover the stub file may comprise a file between 511 bytes and 16 KB in size.

With respect to a flowchart is shown of an exemplary embodiment of a scan process of a de duplication method for the destination system . In general the scan process involves identifying common data objects within replication data of a destination storage device.

At Block the replication agent and thread s replicate data from a source storage device to the destination storage device . In certain embodiments this block continues to be executed throughout the scan process and or other processes of . In certain embodiments the replication of data to the destination storage is given priority over one or more other data operations of the de duplication method described below in order to maintain substantial coherency between the replicated data and the source system data. Moreover the de duplication of the replicated data can be performed without significantly impacting the primary data replication process.

At Block the de duplication module receives a command to archive data on the destination machine. In certain embodiments the de duplication module initiates archiving based on a storage policy and or user input. For instance the storage policy can dictate that archiving be performed daily or on another periodic basis. In yet other embodiments archiving can be performed based on an available storage capacity of the destination storage .

At Block the de duplication module scans the destination storage to identify common data objects. For instance the de duplication module can identify 64 KB data blocks on the destination storage such as from different files that comprise identical data. In certain embodiments the de duplication module can perform a cryptographic hash function or other algorithm as discussed previously to generate a substantially unique identifier based on the data contained in each block. For each block having the same identifier the de duplication module can identify the block as a candidate for de duplication together with the other like blocks such as through a flag or other marker listing the blocks in a data structure or the like.

The term data object as used herein is a broad term and is used in its ordinary sense and includes without limitation any distinct or identifiable grouping of electronic information that exists in storage and or on which operations can be performed. For example a data object can comprise a data file a data block a program an array any other collection of electronic information or the like.

In certain embodiments in order to avoid excessive restore operations on migrated data of secondary storage it is preferred to not archive data that has a relatively high likelihood of being accessed in the future. Thus during the scanning the de duplication module can identify those common data objects on the destination storage that have not been modified and or accessed within a predetermined period of time e.g. within the last seven days .

At Block the process records the scan time of the destination data. As discussed in more detail below with respect to the scan time can advantageously be used to determine whether or not a particular data object should be stubbed. It will be understood that Block can comprise recording of individual scan times for each data object on the destination storage or the time that the scan process was initiated for the entire set of replication data.

At Block the de duplication module maintains a list or other record of the common data objects that were identified on the destination storage as being candidates for de duplication.

Although the scan process has been described with respect to particular blocks other embodiments of the process can include different and or fewer blocks than those described above. For instance in certain embodiments the process can conduct an initial scan of the destination storage for all data objects that have not been modified and or accessed for a predetermined period of time e.g. more than seven days which data objects are identified as candidates for archiving or migration to secondary storage. A second pass is then made by the de duplication module through these identified data objects to locate common data objects that can be de duplicated to the de duplication storage .

Following the scan process the de duplication module commences with the archive process portion of the de duplication method. illustrates a flowchart of an exemplary embodiment of an archive process of the de duplication method for a replication system. In general this archive process involves determining appropriate times to migrate or copy replication data from the destination storage .

At Block the de duplication module accesses a common data object identified in the list created in Block . Before archiving each data object the de duplication module at Block determines if the particular data object is currently in use by a CDR process e.g. is being modified based on changes to source system data . If the data object is currently in use the de duplication module pauses the archive process until the CDR process has completed Block . In yet other embodiments the de duplication module can move to a next identified data object for archiving.

At Block if the current data object is not in use by a CDR process the de duplication module archives the current data object in secondary storage . In certain embodiments Block comprises storing only a single common block in the de duplication storage for identical data blocks within the replication data set.

The archive process then determines if there are additional data objects on the destination storage that have been identified for archiving Block . If there are additional data objects the de duplication module moves to the next data object Block and the archive process returns to Block . Otherwise the archive process completes and the de duplication method commences with stubbing.

Although the process has been described with reference to archiving it should be understood that the process can apply similarly to migrating de duplicating single instancing or other types of copy operations. Rather the term archiving is used with respect to process and the remainder of the de duplication process for simplification purposes.

In particular in certain circumstances the data of a replicated file can change on the destination storage between the time of a scan of the destination storage Block and the time at which the data object is to be stubbed. Thus the process advantageously accounts for such data modifications by requiring the de duplication module to first access the metadata of each data object on the destination storage that has been archived on secondary storage to determine a last accessed and or modified time for the data object Block .

In certain further embodiments such data objects can be tagged or otherwise identified or recorded during the scan process and or archive process such that the de duplication module can quickly locate the data objects during the process .

If the last accessed and or modified time of the particular data object is after the recorded scan time Block the de duplication module does not proceed with replacing the data object with a stub file Block . In such situations it is possible that the data object archived on secondary storage is no longer consistent with the data object on the destination storage .

In yet other embodiments the process determines at Block if the last accessed and or modified time is after a time that the data object was archived or copied instead of the scan time. If so the process continues with Block .

If the data object has not been accessed and or modified since the scan time and or archive time the de duplication module replaces the archived data object with a stub file such as the de duplication stub file illustrated in . As discussed above the stub file can advantageously be a self describing stub file that is used to identify archived and or de duplicated data and can differ in content and or structure from other types of stub files. Moreover in the de duplication environment multiple data objects on the destination storage can be replaced with the same stub file or a stub file with the same tag which references a common data block on the secondary storage . Once the stubbing process has completed processing each of the identified data objects the de duplication method is completed.

In yet other embodiments of the invention systems and methods can immediately replace archived data objects with stub files on the destination storage prior to continuing with scanning the entire storage device. In such embodiments the likelihood of the data object being accessed and or modified between the time of the scan and the time of stubbing is decreased substantially.

In certain embodiments of the data replication system the source system communicates with the associated destination system to verify that the two systems are synchronized. For instance the source system may receive from the destination system an identification e.g. unique serial number of the data operation currently being replicated by the destination system. The source system may then compare the received identification with the data operation being forwarded to the source storage .

In order to ensure that the data modifications are being made to the same data on the destination system as the source system certain embodiments of the invention are configured to account for the use of stub files in the replication data. illustrates a flowchart of an exemplary embodiment of a synchronization process usable in a data replication environment. In particular the synchronization process is capable of modifying files on a destination storage device of a replication system that have been stubbed according to a de duplication policy archive policy migration policy or the like. For exemplary purposes the synchronization process will be described with reference to the components of the data replication system of .

At Block the synchronization process identifies a modification to data on the source system . For instance a log file indicative of data modifications of the source system data can be sent over a network to the destination system via a CDR process. Examples of CDR processes and configurations usable with embodiments of the invention are described in U.S. Pat. No. 7 651 593 issued Jan. 26 2010 which is hereby incorporated herein by reference in its entirety.

In certain embodiments the replication module receives the command to modify the replication data on the destination storage based on changes made to the source data Block . Prior to doing so the replication module determines if the replication data to be modified includes a stub file Block . For instance the replication module can read metadata of the replication data to determine if any of the data comprises a stub file. In yet other embodiments the replication module can access an index or cache that maintains a record of the stub files within the replication data. Such a cache or index may be maintained for example by the migration module .

If the replication data includes a stub file the process continues with Block to determine if the stub file includes a tag or other predetermined value e.g. via tag value . In certain embodiments the tag value distinguishes the particular stub file as being associated with replication data that has been migrated archived de duped or otherwise moved to secondary storage by the migration module as opposed to a stub file replicated from the source storage . For instance the tag value can comprise an identifier that is compared with a list of identifiers in a migration table or index to determine if the stub file is a de duplication stub file or a replicated stub file.

If the stub file does include the tag value the process recalls the actual data object s referenced by the stub file and restores the data to the destination storage . In certain embodiments the replication module can invoke the migration module to recall the data. In certain further embodiments the recall function can take priority over other jobs being performed or scheduled to be performed by the migration module because the CDR process is halted until the pertinent replication data is recalled and restored to the destination storage from secondary storage .

Once the data is restored from secondary storage or if the replication data does not include tagged stub files the process moves to Block to apply the requested modification to the replication data after which the process terminates for the particular requested modification.

The tagged stub files can advantageously be used in a variety of other processes. illustrates a flowchart of an exemplary embodiment of a process for restoring data from one or more snapshots in a CDR system. In general the restore process is capable of restoring data from a snapshot including one or more stub files representing replication data that has been de duplicated archived migrated or the like. For exemplary purposes the restore process will be described with reference to the components of the data replication system of .

At Block the replication module identifies a point in time when the data of destination storage device represents a known good stable or recoverable state. In certain embodiments such a state may be defined as when particular computing operations of the application s are complete to a point such that further operation recovery and or rolling back of the application s may occur based on the recorded or replicated data without the loss of critical information or computing operations needed for operation of the application s . This point of referential integrity is generally referred to herein as a known good state of the application data.

In certain embodiments of the invention a consistency point marker e.g. logical marker or tag in one or more CDR log files can identify when replication data represents a known good state. For instance such a marker can be generated and or inserted in the log files by the filter driver and or a data agent denoting that a consistency point or consistency recovery point has been reached. In some embodiments the consistency point marker further indicates the time at which the application was in the known good state. Additional details on such consistency point markers are disclosed in U.S. Pat. No. 7 651 593 issued Jan. 26 2010 which is hereby incorporated herein by reference in its entirety.

In certain embodiments the consistency point marker is replicated to the destination system along with replicated data. As the replication marker comes across the consistency point marker it knows that the replication data at that point in time represents a known good state. Based on the consistency point marker the replication module can advantageously perform a snapshot on the replication data Block . As a result the snapshot represents a point in time copy of the replication data in a known good state.

At Block the process later receives a request to restore the data that was the subject of the snapshot. For instance the data restore request may be in response to a system crash or failure and can involve restoring the storage device or volume to a previous or most recent known good state. In certain embodiments the restore request comprises the replication module or other component mounting the snapshot to obtain a full logical file system of the replication data at the time the snapshot was taken.

The replication module then identifies whether or not the snapshot comprises any stub files Block . If the snapshot comprises stub files the process determines if any of the stub files includes a particular tag or like identifier Block . For instance the replication module can determine if a tag value of the stub file matches one or more predetermined values that identify stub files as representing migrated archived or de duplicated data as opposed to a stub file that was replicated from the source system .

If the stub file has such a tag or identifier the process recalls the actual data represented by the stub file to a staging area that serves as a temporary repository for the recalled data while the restore process is being performed Block . For instance the replication module and or migration module can recall archived data blocks to an area on the destination storage or the secondary storage . For example this staging area can be a temporary folder created to receive the recalled data for a brief duration until it is restored after which the temporary folder can be deleted.

After the archived data has been recalled or if the snapshot does not include any tagged stub files the replication module restores the data from the snapshot Block . While performing the restore when the replication module comes across a stub file referenced by the snapshot the replication module can restore the appropriate data from the staging area rather than restore the stub file.

Although the process has been described with reference to particular arrangements other embodiments of the process can have more or fewer blocks than those described above. For instance the process can be performed on snapshots that do not represent the replication data in a known good or recoverable state.

In certain embodiments of the invention data replication systems and methods may be used in a modular storage management system embodiments of which are described in more detail in U.S. Pat. No. 7 035 880 issued Apr. 5 2006 which is hereby incorporated herein by reference in its entirety. For example the data replication system may be part of a storage operation cell that includes combinations of hardware and software components directed to performing storage operations on electronic data. Exemplary storage operation cells usable with embodiments of the invention include CommCells as embodied in the QNet storage management system and the QINETIX or SIMPANA storage management systems offered by CommVault Systems Inc. Oceanport N.J. and as further described in U.S. Pat. No. 7 454 569 issued Nov. 18 2008 which is hereby incorporated herein by reference in its entirety.

Systems and modules described herein may comprise software firmware hardware or any combination s of software firmware or hardware suitable for the purposes described herein. Software and other modules may reside on servers workstations personal computers computerized tablets PDAs and other devices suitable for the purposes described herein. Software and other modules may be accessible via local memory via a network via a browser or via other means suitable for the purposes described herein. Data structures described herein may comprise computer files variables programming arrays programming structures or any electronic information storage schemes or methods or any combinations thereof suitable for the purposes described herein. User interface elements described herein may comprise elements from graphical user interfaces command line interfaces and other interfaces suitable for the purposes described herein.

Embodiments of the invention are also described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams may be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to operate in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the acts specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operations to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the acts specified in the flowchart and or block diagram block or blocks.

While certain embodiments of the inventions have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the disclosure. Indeed the novel methods and systems described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the disclosure. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of the disclosure.

