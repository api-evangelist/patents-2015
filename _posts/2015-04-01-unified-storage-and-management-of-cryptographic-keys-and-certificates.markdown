---

title: Unified storage and management of cryptographic keys and certificates
abstract: Cryptographic resources, such as those including PGP keys and certificates, are transformed such that they are understood by certificate repositories, such as in a format understood by the Java JAVA tools of JAVA KEYSTORE (JKS). JAVA is one example of a general-purpose computer programming language that is concurrent, class-based, object-oriented. JAVA KEYSTORE is one example of a repository of security certificates, such as authorization certificates and public key certificates, used for instance in SSL encryption. The transformation of the cryptographic resources is completed such that the necessary metadata for retrieving the original cryptographic resources, or artifacts thereof, are retained. In that way, cryptographic resources are effectively hidden within the certificate repository until needed. The security program applies an algorithm to generate keys for JKS storage such that the keys “masquerade” in a JKS canonical format until the time in which the resources are needed to be in a PGP canonical format.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09276742&OS=09276742&RS=09276742
owner: International Business Machines Corporation
number: 09276742
owner_city: Armonk
owner_country: US
publication_date: 20150401
---
The present invention relates generally to the field of data security and more particularly to storage and management of cryptographic resources.

Regulations and standards are in place which mandate that data is secure and make business transactions subject to compliance of these standards and regulations. The peripheral component interconnect PCI standard is one such example from the finance domain. Cryptographic protocols such as secure sockets layer SSL and transport layer security TLS provide security for data in transit over the internet. Pretty good privacy PGP is a cryptographic resource used for securing both data at rest as well as data in transit and it also needs an underlying key infrastructure. There are tools and libraries to generate and manage SSL keys and certificates and tools and libraries to generate and manage PGP keys and certificates also referred to herein as cryptographic artifacts.

In one aspect of the present invention a method a computer program product and a system includes receiving a cryptographic resource including a first artifact in a first format having a metadata set converting the first artifact to a second artifact having a second format storing the second artifact in a repository and responsive to a request for the first artifact creating a third artifact based on the second artifact. The first artifact cannot be stored in the repository in the first format. The second artifact in the second format retains the metadata set of the first artifact. The third artifact is a functional copy of the first artifact.

Cryptographic resources such as those including PGP keys and certificates are transformed such that they are understood by certificate repositories such as in a format understood by the JAVA tools of JAVA KEYSTORE JKS . JAVA is one example of a general purpose computer programming language that is concurrent class based object oriented. JAVA KEYSTORE is one example of a repository of security certificates such as authorization certificates and public key certificates used for instance in SSL encryption. The transformation of the cryptographic resources is completed such that the necessary metadata for retrieving the original cryptographic resources or artifacts thereof are retained. In that way cryptographic resources are effectively hidden within the certificate repository until needed. The security program applies an algorithm to generate keys for JKS storage such that the keys masquerade in a JKS canonical format until the time in which the resources are needed to be in a PGP canonical format. The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the Figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

The present invention will now be described in detail with reference to the Figures. is a functional block diagram illustrating various portions of user computer system in accordance with one embodiment of the present invention including user computer communication unit processor set input output I O interface set memory device persistent storage device display device external device set random access memory RAM devices cache memory device security program and certificate repository .

Sub system may be a laptop computer tablet computer netbook computer personal computer PC a desktop computer a personal digital assistant PDA a smart phone or any programmable electronic device. Program is a collection of machine readable instructions and or data that is used to create manage and control certain software functions that will be discussed in detail below.

Sub system is shown as a block diagram with many double arrows. These double arrows no separate reference numerals represent a communications fabric which provides communications between various components of sub system . This communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware component within a system. For example the communications fabric can be implemented at least in part with one or more buses.

Memory and persistent storage are computer readable storage media. In general memory can include any suitable volatile or non volatile computer readable storage media. It is further noted that now and or in the near future i external device s may be able to supply some or all memory for sub system and or ii devices external to sub system may be able to provide memory for sub system .

Program is stored in persistent storage for access and or execution by one or more of the respective computer processors usually through one or more memories of memory . Persistent storage i is at least more persistent than a signal in transit ii stores the program including its soft logic and or data on a tangible medium such as magnetic or optical domains and iii is substantially less persistent than permanent storage. Alternatively data storage may be more persistent and or permanent than the type of storage provided by persistent storage .

Program may include both machine readable and performable instructions and or substantive data that is the type of data stored in a database . In this particular embodiment persistent storage includes a magnetic hard disk drive. To name some possible variations persistent storage may include a solid state hard drive a semiconductor storage device read only memory ROM erasable programmable read only memory EPROM flash memory or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices external to sub system . In these examples communications unit includes one or more network interface cards. Communications unit may provide communications through the use of either or both physical and wireless communications links. Any software modules discussed herein may be downloaded to a persistent storage device such as persistent storage device through a communications unit such as communications unit .

I O interface set allows for input and output of data with other devices that may be connected locally in data communication with computer . For example I O interface set provides a connection to external device set . External device set will typically include devices such as a keyboard keypad a touch screen and or some other suitable input device. External device set can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data used to practice embodiments of the present invention for example program can be stored on such portable computer readable storage media. In these embodiments the relevant software may or may not be loaded in whole or in part onto persistent storage device via I O interface set . I O interface set also connects in data communication with display device .

Display device provides a mechanism to display data to a user and may be for example a computer monitor or a smart phone display screen.

The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the present invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the present invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

Security program operates to generate cryptographic resources such as PGP keys and certificates in formats understood by PGP tools and or JKS tools according to the process at hand. That is the security program masquerades cryptographic resources in formats other than PGP canonical format such as a JKS canonical format until the time in which the resources are needed to be in the PGP canonical format.

Processing beings with step S where receive cryptographic resource s module mod receives cryptographic resource s . A PGP key is an example of a cryptographic resource. The PGP key and certificate may be provided by a user or by a program for which encrypted data communication is desired. Regardless of the source of the cryptographic resource this resource is oftentimes formatted for active use in secure data communication. In this example the cryptographic resource is received in this active use format. Specifically the cryptographic resource is a PGP key and certificate in a canonical format understood by PGP tools. Alternatively the received cryptographic resource is in another format for use in secure data communication.

Processing proceeds to step S where repository importable resource s module transforms the cryptographic resource s into repository importable resource s . This transformation is achieved by reformatting the received cryptographic resource. In this example the repository importable resource s are formatted for storage in a JAVA KEY STORE JKS shown generically as repository in . JAVA is one example of a general purpose computer programming language that is concurrent class based object oriented. JAVA KEYSTORE is one example of a repository of security certificates such as authorization certificates and public key certificates used for instance in SSL encryption. Note the term s JAVA KEYSTORE and or JKS may be subject to trademark rights in various jurisdictions throughout the world and are used here only in reference to the products or services properly denominated by the marks to the extent that such trademark rights may exist. That is the cryptographic resource s received in step S is formatted to a canonical format understood by certificate repository tools. Alternatively the cryptographic resource s are formatted to a format understood by other repositories. It should be noted that the process of converting a PGP certificate to a format understood by certificate repository tools is a loss less format change. By loss less there is no loss of metadata that may later prevent retrieval of the original PGP certificate. The process of converting from PGP to certificate repository is discussed in more detail below.

Processing proceeds to step S where store module stores the repository importable resource s in a repository . By storing the repository importable resource s the original cryptographic resource s appears to be a mere repository item instead of a cryptographic resource s . It may be said that the cryptographic resource s masquerades as a repository item. Further the re formatted certificate or key does not appear to be what it was originally or could become later.

Processing proceeds to step S where data communication module determines that the cryptographic resource s are needed for data communication. For example whenever there is a request to perform a PGP cryptographic operation such as encryption or decryption the data communication module determines that the resources are needed and triggers the pointer handle to the item required for the operation. Alternatively the pointer handle is triggered otherwise via the process of requesting the operation to be performed.

Processing proceeds to step S where create cryptographic resource s module creates the cryptographic resource s from the repository importable resource s . Upon determination of a need for the cryptographic resource s the repository importable resource s being formatted for storage are reformatted for active use. In this example the PGP key and certificate is reconstructed via reformatting the repository importable resource s . Alternatively a functional copy of the PGP key and certificate is created based on the repository importable resource s . As stated above the transition from one format to the other is a loss less process. It is due to the loss less process that the reformatted repository importable resource s is understood by PGP tools for use in secure data communication. It should be noted that not every cryptographic resource may be formatted to any other repository importable format without losing important metadata for later retrieval of the original cryptographic resource.

Processing ends at step S where data communication module provides for secure data communication by providing appropriate cryptographic resource s . In this example PGP keys and or certificates are provided upon request by the data communication module.

Some embodiments of the present invention recognize the following facts potential problems and or potential areas for improvement with respect to the current state of the art i there is a need for an underlying infrastructure to provide a mechanism to both store and retrieve PGP keys for use by cryptographic protocols such as SSL and TLS ii there is an ever increasing need for securing enterprise data whether it is data in transit or data at rest iii PGP keys cannot be stored in libraries that work on SSL keys iv PGP keys cannot be stored in libraries that work on cryptographic certificates v PGP keys cannot be manipulated by tools that work on SSL keys vi PGP keys cannot be manipulated by tools that work on cryptographic certificates vii conventional systems have to manage two separate repositories all the time viii conventional solutions are complex entailing lots of development testing documentation and or maintenance effort and or ix it is possible to convert PGP keys and or certificates to a repository recognized format without losing important metadata that allows later retrieval of the original PGP keys and or certificates.

By way of example there is an application runtime or run time system which allows applications running in it to use SSL keys and certificates. The run time system typically includes the following i an underlying repository for persistence this could be a file a database an xml a flat file a standard format or something proprietary ii a command line tool to add remove fetch edit list keys from this repository implementation iii a graphical user interface GUI to do the same operations as the command list table CLT but in a more intuitive and user friendly way and or iv application programming interfaces APIs in different supported programming languages to manage and or access the keys. The applications running on the run time system use the APIs to access the keys and certificates whereas the GUI and CLT are mostly used by human users of the run time system. For a run time system that supports SSL keys and certificates such as the one in this example when a need arises to allow other applications to make use of PGP keys and certificates there are conventionally two options available to the user i extend the repository CLT GUI and APIs to work for PGP keys and certificates and or ii implement a separate repository CLT GUI and APIs for PGP keys and certificates. It should be noted that some embodiments of the present invention apply to the generic version of the keys and or certificates that can be imported into any repository. The PGP keys and or certificates are formatted to be understood by repository tools.

Some embodiments of the present invention do not change the existing CLTs APIs GUIs and repository when confronted with two or more applications that make use of the same PGP keys and certificates. Some embodiments of the present invention use a loss less approach where a PGP key masquerades as a non PGP key until the time in which the PGP key is actually to be used as a PGP key. At that time the key or certificate is re converted to a PGP key. To accomplish this two new system components or software modules are inserted at the appropriate positions in the architecture. In the example that follows specific application of the present invention for handling PGP keys and certificates for storage in a repository is described. Accordingly asymmetric key algorithms are employed and a key pair is obtained and transformed in the discussion below.

Converter program also referred to as repono operates to convert PGP keys and certificates into a canonical format understood by JAVA KEYSTORE and imports it into the JAVA KEYSTORE. Once this action is taken the existing GUI CLT and or APIs can be used to operate on the keys. Some embodiments of the present invention implement the converter program according to the flowchart shown in .

Processing begins at step S where a number of PGP key ring files and a corresponding passphrase are received by converter program as input. In this example the PGP key ring files and corresponding passphrase are received as user input. Alternatively the files and passphrase are received automatically via an auxiliary process initiated by a user.

Processing proceeds to step S where converter program iterates through the secret key ring to identify and read the secret key into memory. As stated above the secret key is formatted such that it is understood by PGP tools.

Processing proceeds to step S where converter program extracts a PGPPrivateKey from the secret key. Having extracted the PGPPrivateKey a process may be applied as follows to convert this key to one understood by a JAVA tool.

Processing proceeds to step S where converter program converts the PGPPrivateKey to a PrivateKey. PrivateKey is a key having a format recognized by JAVA tools such that the PrivateKey may be stored in a repository such as JAVA KEYSTORE.

Processing proceeds to step S where converter program iterates through the public key ring to identify and read PGPPublicKey into memory. The PGPPublicKey is the second key of the pair of keys associated with a corresponding asymmetric key algorithm.

Processing proceeds to step S where converter program converts the PGPPublicKey to PublicKey. PublicKey is a key having a format recognized by JAVA tools such that the PublicKey may be stored in JAVA KEYSTORE . In some embodiments of the present invention the PGP certificate is used as the basis for building an SSL certificate the SSL certificate including the necessary metadata to retrieve the PGP certificate.

Processing ends at step S where converter program creates a certificate e.g. digital certificate and identity certificate containing the converted key pair PrivateKey and PublicKey and stores that certificate in JAVA KEYSTORE . In this embodiment the converter program uses X509v3CertificateBuilder to create the certificate. Alternatively another certificate creator is used to create a certificate that is a functional copy of the PGP certificate and or key. Alternatively the stored SSL certificate and or key is converted into a PGP certificate and or key removing the SSL certificate and or key from storage.

In this example in order for the X509 certificate builder to consume the PGP certificates and or keys information from the input PGP certificates and or keys are extracted to create intermediate artifacts. These intermediate artifacts are provided as consumable input to the X509 certificate builder.

Re converter program also referred to as accio operates to re convert the Key Certificate in a canonical format understood by JAVA KEYSTORE back to a PGP Key Certificate in a canonical format understood by PGP tools for use in PGP applications. Some embodiments of the present invention implement the re converter program according to the flowschart shown in .

Processing begins at step S where re converter program retrieves a public key name and content from the JAVA KEYSTORE created in step S above .

Processing proceeds to step S where re converter program reads PublicKey from the JAVA KEYSTORE to convert it back to PGPPublicKey format. Referring back to step S where PGPPublicKey is transformed to PublicKey the transformation from a PGP key to a public key that may be stored in JAVA KEYSTORE is a loss less process such that the metadata is preserved sufficiently to revert back to a useful PGP key PGPPublicKey. 

Processing proceeds to step S where re converter program transforms or re converts the public key back to the original PGP key. Because of the loss less process mentioned above PublicKey is effectively restored to the original PGPPublicKey read into memory in step S of .

Processing ends at step S where re converter program encrypts a target file using the PGPPublicKey. Alternatively having a PGP key and certificate produced according to step S a user is free to take any actions that may be performed using the PGP key and certificate as if the PGP key and certificate had never been transformed. Actions include i encryption ii decryption iii signing and iv verification.

Some embodiments of the present invention can be implemented within only 16 percent of the development time required for some conventional approaches. The efficiency for these embodiments is due to the fact that only the converter and the re converter need to be developed. Conventionally either the entire repository as well as the tooling must be re implemented for the runtime system from scratch or else the existing repository and tooling must be enhanced to work for PGP keys. Both of these alternative conventional approaches are non trivial and need more development and test time than some embodiments of the present invention. For example in a backup scenario where all configuration files and data are to be backed up and restored later some embodiments of the present invention do not require additional actions to be performed to backup and restore the PGP keys. Otherwise the backup and restore mechanism must be re implemented for PGP keys.

Some embodiments of the present invention operate to perform the following actions i convert the PGP key s and certificate s into a canonical format for storage in repository ii retrieve those converted PGP key s and certificate s as needed and ii convert the PGP key s and certificate s back to a functional format in time for use.

Some embodiments of the present invention generate a new name for the key alias used for PGP encryption decryption through for example a pseudo random or deterministic algorithm while storing the key in a repository. Then using the same name generation technique the key is accessed from the repository before converting it back to PGP key format.

Some embodiments of the present invention convert a PGP key to masquerade as a non PGP key until a time when the non PGP key actually needs to be used as a PGP key. At that point the non PGP key is returned to a PGP key format.

Some embodiments of the present invention may include one or more of the following features characteristics and or advantages i no need to support multiple data formats the PGP keys are converted to the existing data format and stored in the existing repository ii no need to use mutualized interfaces for performing cryptographic functions iii no need for any translation modules that are coded against the mutualized interfaces iv use of existing optimized native interfaces for performing the cryptographic functions at optimal speed v integrates into any existing tooling vi the CLT GUI and repository implementation do not have to be re written vi readily applied by existing users of the runtime system and or vii no need to change existing components of the runtime system.

Present invention should not be taken as an absolute indication that the subject matter described by the term present invention is covered by either the claims as they are filed or by the claims that may eventually issue after patent prosecution while the term present invention is used to help the reader to get a general feel for which disclosures herein that are believed as maybe being new this understanding as indicated by use of the term present invention is tentative and provisional and subject to change over the course of patent prosecution as relevant information is developed and as the claims are potentially amended.

and or inclusive or for example A B and or C means that at least one of A or B or C is true and applicable.

User subscriber includes but is not necessarily limited to the following i a single individual human ii an artificial intelligence entity with sufficient intelligence to act as a user or subscriber and or iii a group of related users or subscribers.

Computer any device with significant data processing and or machine readable instruction reading capabilities including but not limited to desktop computers mainframe computers laptop computers field programmable gate array FPGA based devices smart phones personal digital assistants PDAs body mounted or inserted computers embedded device style computers application specific integrated circuit ASIC based devices.

