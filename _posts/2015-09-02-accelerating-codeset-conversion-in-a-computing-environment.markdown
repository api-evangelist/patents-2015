---

title: Accelerating codeset conversion in a computing environment
abstract: A method for accelerating codeset conversion in a computing environment is provided. The method may include, among other things, receiving one or more requests for codeset conversion. The one or more requests may be received, for example, from a client over a communications network. A change in the one or more requests for codeset conversion may be detected. In response to detecting the change, a subset of codeset converters may be selected from among a library of codeset converters to be included in a codeset conversion accelerator. The codeset conversion accelerator may be, among other things, reprogrammed with selected subset of codeset converters. The one or more received requests may be subsequently rerouted to the reprogrammed codeset conversion accelerator.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09438269&OS=09438269&RS=09438269
owner: International Business Machines Corporation
number: 09438269
owner_city: Armonk
owner_country: US
publication_date: 20150902
---
The present invention generally relates to computer communications and more particularly to accelerating requests for codeset conversion in a computing environment.

A codepage or codeset may refer to a table of values that describe a character set for encoding a particular language. For example according to the Unicode UTF 8 codeset standard the registered trademark symbol is represented by Unicode code value U 00AE. However within the GB18030 codeset standard the symbol is represented by GB18030 code value 0x81308533. Accordingly a codeset converter would convert the code value e.g. U 00AE for a character e.g. in one codeset standard e.g. Unicode to another code value e.g. 0x81308533 for the same character e.g. in another codeset standard e.g. GB18030 using for example a codeset mapping table. Generally codeset converters may be stored as part of a library with thousands or more codeset converters. Accordingly it may be among other things time intensive to select the correct codeset converter for conversion and carry out the codeset conversion.

According to one exemplary embodiment a method for accelerating codeset conversion in a computing environment is provided. The method may include among other things receiving one or more requests for codeset conversion. The one or more requests may be received for example from a client over a communications network. A change in the one or more requests for codeset conversion may be detected. In response to detecting the change a subset of codeset converters may be selected from among a library of codeset converters to be included in a codeset conversion accelerator. The codeset conversion accelerator may be among other things reprogrammed with selected subset of codeset converters. The one or more received requests may be subsequently rerouted to the reprogrammed codeset conversion accelerator.

According to another exemplary embodiment a computer program product for accelerating codeset conversion in a computing environment is provided. The computer program product may include a computer readable storage device and program instructions stored on one or more tangible storage devices. The program instructions are executable by a processor for performing a method that may accordingly include among other things receiving one or more requests for codeset conversion. The one or more requests may be received for example from a client over a communications network. A change in the one or more requests for codeset conversion may be detected. In response to detecting the change a subset of codeset converters may be selected from among a library of codeset converters to be included in a codeset conversion accelerator. The codeset conversion accelerator may be among other things reprogrammed with selected subset of codeset converters. The one or more received requests may be subsequently rerouted to the reprogrammed codeset conversion accelerator.

According to another exemplary embodiment a computer system for accelerating codeset conversion in a computing environment is provided. The computer system may include one or more processors one or more computer readable memories one or more computer readable tangible storage devices and program instructions stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories. The computer system is capable of performing a method that may accordingly include among other things receiving one or more requests for codeset conversion. The one or more requests may be received for example from a client over a communications network. A change in the one or more requests for codeset conversion may be detected. In response to detecting the change a subset of codeset converters may be selected from among a library of codeset converters to be included in a codeset conversion accelerator. The codeset conversion accelerator may be among other things reprogrammed with selected subset of codeset converters. The one or more received requests may be subsequently rerouted to the reprogrammed codeset conversion accelerator.

The drawings are not necessarily to scale. The drawings are merely schematic representations not intended to portray specific parameters of the invention. The drawings are intended to depict only typical embodiments of the invention. In the drawings like numbering represents like elements.

Detailed embodiments of the claimed structures and methods are disclosed herein however it can be understood that the disclosed embodiments are merely illustrative of the claimed structures and methods that may be embodied in various forms. This invention may however be embodied in many different forms and should not be construed as limited to the exemplary embodiments set forth herein. Rather these exemplary embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope of this invention to those skilled in the art. In the description details of well known features and techniques may be omitted to avoid unnecessarily obscuring the presented embodiments.

The one or more exemplary embodiments described herein accelerate codeset conversion within a computer environment e.g. OpenPower architecture cloud computing environment etc. . The codeset conversion acceleration may utilize a codeset conversion acceleration appliance e.g. a field programmable gate array FPGA or graphics processing unit GPU that may have among other things improved throughput energy efficiency and speed over standard CPU based codeset conversion. The codeset conversion acceleration appliance may be designed to dynamically select and upload the most used e.g. the most important most frequently used and or most requested codeset converters from among a library of thousands of codeset converters on the basis of different user based criteria such as but not limited to language e.g. English Japanese Chinese etc. geographical location e.g. North America Asia etc. and computing platform e.g. personal computer storage server push server etc. .

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

Referring to a computer system operable for codeset conversion acceleration according to an exemplary embodiment is depicted. Computer system may contain a server that may provide among other things Codeset Conversion Acceleration CCA . The server may additionally be connected to other computers and servers via a network . The network may include connections such as wire wireless communication links or fiber optic cables.

Server may include among other things a processor that executes instructions for software for example the operating system OS and CCA discussed in further detail with respect to that may be loaded into a memory . The processor may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Furthermore the processor may be connected via a bus or the like to among other things memory a network interface device a disk storage a persistent storage an input device and an output device .

The server is generally under the control of OS e.g. Linux Windows AIX etc. . However it may be appreciated that any operating system supporting the functions disclosed herein may be used. The processor is included to be representative of a single CPU multiple CPUs a single CPU having multiple processing cores and the like. Similarly the memory may be a random access memory. While the memory is shown as a single identity it should be understood that the memory may comprise a plurality of modules and that the memory may exist at multiple levels from high speed registers and caches to lower speed but larger formats. The network interface device may be any type of network communications device allowing the server to communicate with other computers including the client application via a network or other communications network i.e. the Internet . While the client application is shown as a single identity it should be understood that the client application may comprise a plurality of clients in communication with server over network .

Persistent storage may be any device or hardware that is capable of storing information such as data OS and program instructions including those providing CCA . Persistent storage may accordingly take various forms depending on the particular implementation. For example persistent storage may be among other things disk storage a flash memory optical disk magnetic tape cloud storage devices or some combination of the above.

Instructions for the OS CCA applications and or programs may be located in persistent storage which may communicate with processor unit through the bus . The instructions may be in a functional form on persistent storage . Additionally these instructions may be loaded into memory for execution by processor unit .

The input device may be any device for providing input to the server e.g. a keyboard mouse etc. . Additionally the output device may be any device for providing output to a user of the server . Although shown separately from the input device the output device and input device may be combined to form a single unit e.g. a display screen with an integrated touch screen etc. .

As will be discussed with reference to the server and the computer hosting the client application may include one or more internal components and one or more external components .

A selective accelerator re programming daemon may take as input among other things iconv profile information and a codeset converter weighting to determine which codeset converters from among a codeset converter library may be selected to accelerate codeset conversion in a computing environment. Codeset conversion acceleration may be shown and described through an algorithm configuration rules and components that are specialized for performing codeset conversion. However it may be appreciated that codeset conversion acceleration may be embodied in components and reconfiguration rules other than those described. Additionally selective accelerator re programming daemon may be coupled to a codeset conversion switch agent and a codeset conversion modeler CCM weight algorithm .

Codeset converter library may include one or more codeset converters and an iconv function. The iconv function may among other things convert a buffer of characters specified by an inbuf parameter from one coded character set identifier CCSID into another CCSID and store the converted characters into a buffer specified by an outbuf parameter. The inbuf parameter may point to a variable that points to the first character in the input buffer. Additionally the outbuf parameter may point to a variable that points to the first available byte in the output buffer. The CCSIDs used are those in a conversion descriptor cd which may returned from a call to either an iconv open or an QtqIconvOpen function.

On input an inbytesleft parameter may indicate a number of bytes in inbuf to be converted. Similarly an outbytesleft parameter may indicates a number of bytes available in outbuf. These values may be among other things decremented when conversion is done such that on return they may indicate a state of their associated buffers. For encodings dependent on shift state iconv may change the shift state of the conversion descriptor to match the shift state at the end of the input buffer. For subsequent calls to iconv conversion may begin using the current shift state of the conversion descriptor. Additionally codeset converter library may receive one or more appropriate parameters from iconv profile information . Thus the iconv function provides an application programming interface API for codeset conversion.

Codeset conversion switch agent may among other things reroute the received requests from client application over network to an appropriate codeset converter. Codeset conversion switch agent may route requests to codeset converter library where it may be converted using the iconv API. Alternatively codeset conversion switch agent may route one or more requests from client to a hardware codeset conversion accelerator.

CCM weight algorithm may be used to calculate one or more weight values for the codeset converters in codeset converter library . By way of example and not of limitation CCM weight algorithm may be among other things of the form f ccm aX bX cX . . . zX. Coefficients a b c etc. may be predetermined and stored in codeset converter weighting . Additionally X X X etc. may include but is not limited to language information locale information geolocation information a number of calls for specific codeset converters one or more predefined weight values for the codeset converters and information associated with iconv profile information . CCA may optionally store the calculated codeset conversion weights in codeset converter weighting for future use.

At one or more requests for codeset conversion is received. As previously discussed the one or more requests may be received from one or more client applications connected over a network. Alternatively the one or more requests may also be received from within the same computing environment. In operation request input on server may receive one or more requests for codeset conversion from client application via network . CCA may then direct the request to codeset conversion switch agent for among other things routing to the appropriate converter.

At a change in the one or more received requests for codeset conversion is detected. For example CCA may monitor requests received from client application over network in order to detect among other things a change associated with the one or more requests. A change in one or more requests for codeset conversion may be considered to be among other things a change in the language locale or geolocation of the received requests a change in a number of calls for specific codeset converters or a change to one or more predefined weight values for the codeset converters. CCA may perform the monitoring of client application by polling network to detect a change in the received requests. For example in some implementations CCA may reside within the operating system . Further a daemon associated with operating system may be used by the CCA to monitor for the change to the requests.

At a change to one or more requests for codeset conversion is detected for. In operation client application may send one or more requests for codeset conversion that may utilize for example Codeset Converter C . Subsequently client application may later send one or more requests for codeset conversion that may utilize for example Codeset Converter D . Thus CCA may detect a change in the language and locale of the received requests. If however a change is not detected CCA may continue to receive requests for codeset conversion and monitor for a change.

At if a change to the received requests for codeset conversion is detected a subset of codeset converters associated with a library of codeset converters is selected for inclusion within a codeset conversion accelerator. It may be appreciated that the subset of codeset converters may be selected by calculating one or more weight values for each of the codeset converters from among the library of codeset converters and comparing the calculated weight values to one or more stored weight values. In an alternative embodiment the subset of codeset converters may be specified manually. In operation CCA may upon detecting the received requests from client application via request input may among other things select one or more codeset converters for example Codeset Converters A D and E for inclusion in codeset conversion acceleration appliance .

At the codeset converter accelerator is reprogrammed with the selected subset of codeset converters. The selected subset of codeset converters may be the most used codeset converters from among the library of codeset converters. Thus reprogramming the codeset converter accelerator with the selected subset of codeset converters may allow conversion of one or more requested associated with the selected codeset converters to be for example faster and more energy efficient. In operation CCA may direct the selective accelerator reprogramming daemon to program Codeset Converters D and E to codeset conversion acceleration appliance . It may be appreciated that selective accelerator re programming daemon may restrict the programming of one or more codeset converters previously programmed to codeset conversion acceleration appliance in order to among other things prevent deletion and subsequent reprogramming of for example Codeset Converter A.

At the codeset converter switch agent determines whether the received requests are associated with a codeset converter programmed to the codeset converter accelerator. For example one or more received requests may utilize a codeset converter programmed to the codeset conversion accelerator and may therefore be routed to the codeset conversion accelerator for codeset conversion. Conversely one or more received requests may utilize a codeset converter not programmed to the codeset conversion accelerator and may therefore be routed to the standard codeset conversion library.

At if the requested codeset converter is on the codeset converter accelerator the request is rerouted to the codeset converter accelerator. In operation CCA may receive a request from request input that may use Codeset Converter A. Thus CCA may among other things direct codeset conversion switch agent to route the received request to codeset conversion acceleration appliance for codeset conversion.

At if the requested codeset converter is not on the codeset converter accelerator the received request is converted by the CCM. In operation CCA may receive a request from request input that may use Codeset Converter X . Thus CCA may among other things direct codeset conversion switch agent to route the received request to codeset converter library for codeset conversion.

At one or more weight values for the library of codeset converters is calculated. As previously discussed one or more weight values may be calculated for the codeset converters stored in the library of codeset converters. The weight values may be among other things determined using the changes to the requests. Additionally the weight values may be compared against one or more previously calculated weight values stored in memory and may in turn be stored in memory. In operation CCA on server may use CCM weight algorithm to calculate one or more stored weight values.

At the library of codeset converters is sorted according to the one or more calculated weight values. The sorting may be based on among other things the calculated weight values for the library of codeset converters. In operation CCA may direct codeset converter library to sort the one or more codeset converters. CCA may detect Codeset Converter A for example has the highest weight value and may subsequently sort it to a front position within codeset converter library . Additionally CCA may detect Codeset Converter X for example has the lowest weight value and may subsequently sort it to an end position within codeset converter library .

At the calculated weight values of the one or more sorted codeset converters are compared to one or more stored weight values associated with one or more codeset converters in the codeset converter accelerator. In operation CCA may compare the weight values calculated by CCM weight algorithm to one or more previously calculated weight values stored in codeset converter weighting . Accordingly one or more weight values may have a higher or lower weight value from the previously stored weight values as a result of the change to the one or more requests received from client application over network via request input .

At a ranking is determined for the library of codeset converter based on the compared weight values. For example a codeset converter having the highest weight value may be among other things given the greatest ranking and may therefore be selected to be programmed to the codeset conversion accelerator. In operation CCA may determine Codeset Converter A for example has the greatest weight value and may select Codeset Converter A for programming to codeset conversion acceleration appliance .

At data corresponding to language information for the one or more requests is collected. Non limiting exemplary language information may include among other things information corresponding to a language associated with a source codeset for conversion a language associated with a target codeset for conversion and a default language associated with the received requests. In operation CCA on server may receive a request from client application via request input for conversion from for example GB18030 to UTF 8. Thus CCA may detect among other things a language associated with client application a language for the source codeset i.e. Chinese for GB18030 and a language for the target codeset i.e. English for UTF 8 . Additionally CCA may determine the language information by among other things analyzing metadata from the one or more requests received through request input . Alternatively CCA may determine the language information by polling client application directly.

At data corresponding to locale information for the one or more requests is collected. It may be appreciated that the process of collecting the locale information data is substantially similar to the process of collecting language information data as discussed above. For example non limiting exemplary locale information data may include among other things information corresponding to language and culture settings running codeset converters and default languages.

At data corresponding to geolocation information for the one or more requests is collected. It may be appreciated that the process of collecting the geolocation information data is substantially similar to the process of collecting language information data as discussed above. For example non limiting exemplary geolocation information data may include among other things information corresponding a user s physical location country data and province data.

At data corresponding to computing platform information for the one or more requests is collected. It may be appreciated that the process of collecting the computing platform information data is substantially similar to the process of collecting language information data as discussed above. For example non limiting exemplary computing platform information data may include among other things information corresponding to operating system names releases and versions running and installed codeset converters running and installed applications user profiles and related information application profiles platforms of connected clients and servers and major encodings of inbound and outbound data.

At data corresponding to existing codeset converters for the one or more requests is collected. It may be appreciated that the process of collecting the existing codeset converter data information data is substantially similar to the process of collecting language information data as discussed above. For example non limiting exemplary existing codeset converter data may include among other things data corresponding to codeset converter usage associated with the one or more requests data corresponding to encoding standards associated with inbound data and outbound data associated with the one or more requests data corresponding to the number of function calls for one or more codeset converters and data corresponding to an amount of codeset conversion data associated with one or more codeset converters.

At data corresponding to predefined weight values for each of the library of codeset converters is collected. One or more codeset converters from among the library of codeset converters may be for example manually assigned the highest weight value and may therefore be included in the codeset converter accelerator. Alternatively the predefined weight values may be determined from previously calculated weight values. It may be appreciated that the process of collecting the predefined weight values is substantially similar to the process of collecting language information data as discussed above.

At one or more weight values for each of the library of codeset converters is calculated based on one or more of the collected data. As previously discussed one or more weight values may be calculated for the codeset converters stored in the codeset converter library. The weight values may be among other things determined using the changes to the requests. Additionally the weight values may be compared against one or more previously calculated weight values stored in memory and may in turn be stored in memory. In operation CCA on server may use CCM weight algorithm to calculate one or more stored weight values. By way of example and not of limitation CCM weight algorithm may be among other things of the form f ccm aX bX cX . . . zX. Coefficients a b c etc. may be preconfigured and stored in codeset converter weighting . Alternatively coefficients a b c etc. may be reconfigured such as by client application over network . Additionally X X X etc. may include but are not limited to language information locale information geolocation information a number of calls for specific codeset converters one or more predefined weight values for the codeset converters and information associated with iconv profile information . CCA may optionally store the calculated codeset conversion weights is codeset converter weighting for future use.

At one or more codeset converters having a higher rank than one or more existing codeset converters is added to the codeset converter accelerator. In operation server may determine that Codeset Converters D and E from among codeset converter library may have among other things a higher ranking than Codeset Converters B and C from codeset conversion acceleration appliance . Server may accordingly direct selective accelerator reprogramming daemon to add Codeset Converters D and E to codeset conversion acceleration appliance . Additionally server may further determine that Codeset Converter A from among codeset converter library is substantially the same or similar to Codeset Converter A from codeset conversion acceleration appliance . Server may then restrict the addition of a second copy of Codeset Converter A to codeset conversion acceleration appliance .

At the one or more existing codeset converters having a lower rank than the one or more added codeset converters is deleted from the codeset conversion accelerator. The codeset conversion accelerator may have limited space for codeset converters and it may be among other things impractical to store a library of thousands of codeset converters on a codeset conversion accelerator. Thus one or more existing codeset converters may be deleted from the codeset converter accelerator to allow space for one or more newly determined most used codeset converters. In operation CCA may direct codeset conversion acceleration appliance to delete for example Codeset Converters B and C to allow space for Codeset Converters D and E to be programmed to codeset conversion acceleration appliance . It may be appreciated however that an existing codeset converter may not need to be deleted from codeset conversion acceleration appliance if codeset conversion acceleration appliance has enough memory to store the additional codeset converters. For example Codeset Converters B and C may use single byte characters as opposed to among other things double byte characters thereby allowing space for Codeset Converters D and E on codeset conversion acceleration appliance .

At the stored weight values associated with the one or more added codeset converters in the codeset conversion accelerator are updated. The calculated weight values for the one or more codeset converters may be stored for future comparison. In particular the weight values for the one or more codeset converters programmed to the codeset converter accelerator may be stored to determine the subset of codeset converters from among the library of codeset converters to add to the codeset conversion accelerator and the one or more codeset converters to delete from the codeset conversion accelerator. In operation CCA may save the weight values calculated by CCM weight algorithm to codeset converter weighting . CCM weight algorithm may subsequently use the one or more weight values saved to codeset converter weighting to among other things calculate one or more new weight values for the codeset converter library .

Data processing system is representative of any electronic device capable of executing machine readable program instructions. Data processing system may be representative of a smart phone a computer system PDA or other electronic devices. Examples of computing systems environments and or configurations that may represented by data processing system include but are not limited to personal computer systems server computer systems thin clients thick clients hand held or laptop devices multiprocessor systems microprocessor based systems network PCs minicomputer systems and distributed cloud computing environments that include any of the above systems or devices.

The data processing system may include may include a set of internal components and a set of external components illustrated in . The set of internal components includes one or more processors one or more computer readable RAMs and one or more computer readable ROMs on one or more buses and one or more operating systems and one or more computer readable tangible storage devices . The one or more operating systems and programs such as Codeset Conversion Acceleration CCA is stored on one or more computer readable tangible storage devices for execution by one or more processors via one or more RAMs which typically include cache memory . In the embodiment illustrated in each of the computer readable tangible storage devices is a magnetic disk storage device of an internal hard drive. Alternatively each of the computer readable tangible storage devices is a semiconductor storage device such as ROM EPROM flash memory or any other computer readable tangible storage device that can store a computer program and digital information.

The set of internal components also includes a R W drive or interface to read from and write to one or more portable computer readable tangible storage devices such as a CD ROM DVD memory stick magnetic tape magnetic disk optical disk or semiconductor storage device. CCA can be stored on one or more of the respective portable computer readable tangible storage devices read via the respective R W drive or interface and loaded into the respective hard drive .

The set of internal components may also include network adapters or switch port cards or interfaces such as a TCP IP adapter cards wireless wi fi interface cards or 3G or 4G wireless interface cards or other wired or wireless communication links. CCA program can be downloaded from an external computer e.g. server via a network for example the Internet a local area network or other wide area network and respective network adapters or interfaces . From the network adapters or switch port adaptors or interfaces the CCA program is loaded into the respective hard drive . The network may comprise copper wires optical fibers wireless transmission routers firewalls switches gateway computers and or edge servers.

The set of external components can include a computer display monitor a keyboard and a computer mouse . External component can also include touch screens virtual keyboards touch pads pointing devices and other human interface devices. The set of internal components also includes device drivers to interface to computer display monitor keyboard and computer mouse . The device drivers R W drive or interface and network adapter or interface comprise hardware and software stored in storage device and or ROM .

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the one or more embodiment the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

