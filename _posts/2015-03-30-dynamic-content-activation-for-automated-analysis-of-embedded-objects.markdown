---

title: Dynamic content activation for automated analysis of embedded objects
abstract: According to one embodiment, a threat detection platform is integrated with at least one virtual machine that automatically performs a dynamic analysis of a received document object and monitors the processing during the dynamic analysis. The dynamic analysis includes a detection of embedded objects and may automatically process the embedded objects, while maintaining a context of the embedding, within the virtual machine processing the document object. The virtual machine may monitor the processing of both the document object and the embedded object. The results of the processing may be analyzed to determine whether the document object includes malware and/or a threat level of the document object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09438613&OS=09438613&RS=09438613
owner: FireEye, Inc.
number: 09438613
owner_city: Milpitas
owner_country: US
publication_date: 20150330
---
Embodiments of the disclosure relate to the field of cyber security. More specifically embodiments of the disclosure relate to a system for detecting anomalous or more specifically malicious behavior by detecting and launching embedded objects within a virtual machine.

Over the last decade malicious software has become a pervasive problem for Internet users as many networked resources include vulnerabilities that are subject to attack. For instance over the past few years more and more vulnerabilities are being discovered in software that is loaded onto endpoint devices present on the network. These vulnerabilities may be exploited by allowing a third party e.g. through computer software to gain access to one or more areas within the network not typically accessible. For example a third party may exploit a software vulnerability to gain unauthorized access to email accounts and or data files.

While some software vulnerabilities continue to be addressed through software patches prior to the release of such software patches network devices will continue to be targeted for attack through software vulnerabilities and or by exploits namely malicious computer code that attempts to acquire sensitive information adversely influence or attack normal operations of the network device or the entire enterprise network by taking advantage of a vulnerability in computer software.

In particular malware is often placed in objects embedded in network traffic. For example a portable document file PDF document document object may be received as part of network traffic and include a second PDF document embedded therein. Current malware detection systems have difficulty detecting the embedded object especially if the embedded object is not present on the default view e.g. the first page of a PDF document of the document object during the malware detection process. For example current malware detection systems may have difficulty detecting an embedded object that is located on page 50 of an 80 page PDF document due to in part time constraints in analyzing the object.

Additionally even if current malware detection systems are able to detect an embedded object within a document object the presence of the embedded object is merely used as one characteristic of the document object. Current malware detection systems typically do not process the embedded object to determine whether the embedded object is itself malicious.

Therefore current malware detection systems may provide false negatives and or false positives because a full understanding of the maliciousness of the embedded object is not obtained. Numerous false negatives are reported when the document object is non malicious one of the embedded objects is malicious but the mere presence of the embedded object is not sufficient to cause the malware detection system to determine the document object is malicious. Since current malware detection systems do not process the embedded object the maliciousness goes undetected. Similarly numerous false positives are reported when the document object and the embedded object are both non malicious but the mere presence of the embedded object causes the malware detection system to determine the document object is malicious.

Various embodiments of the disclosure relate to a threat detection platform TDP that improves malware detection particularly in the case of malware including embedded objects wherein malware may collectively refer to exploits and or malicious code . In one embodiment of the disclosure the TDP determines whether an object is embedded within a document object through a dynamic analysis of the document object and the embedded object within a virtual run time environment. Herein the virtual run time environment features one or more virtual machine instances VMs which may be provisioned with a guest image associated with a prescribed software profile. Each guest image may include a software application and or an operating system OS . Each guest image may further include one or more monitors namely software components that are configured to observe and capture run time behavior of an object under analysis during processing within the virtual machine. In another embodiment the TDP may also perform a static analysis of the document object and or embedded object e.g. rules based analysis using heuristics and or comparisons of one or more signatures .

Herein each VM may be configured with a guest image to simulate a particular endpoint device. Specifically each VM may be configured with different operating systems different applications different versions of a common operating system and or different versions of a common application. Herein each VM may include a Dynamic Content Analyzer that includes a launcher an identification agent and an activation agent. When a document object is received by a VM for dynamic analysis the launcher launches the document object in a first application based on the object type of the document object. The launcher may launch the document object in several versions of the first application within the VM. When malware in a document object is not detected within a predetermined amount of time of processing the Dynamic Content Analyzer selects a version of the first application and determines whether an object is embedded therein by employing an automation framework interface to query the document object model of the document object. The employment of the automation framework interface of the application will be discussed in detail below. Depending on the object type of a detected embedded object the Dynamic Content Analyzer may evoke the automation framework interface of the application to activate the embedded object e.g. launch the embedded object in the VM. The embedded object is then processed in the VM. The level of maliciousness of the embedded object may then be attributed to the document object when determining whether the document object is malicious.

In the following description certain terminology is used to describe features of the invention. For example in certain situations both terms logic and engine are representative of hardware firmware and or software that is configured to perform one or more functions. As hardware logic or engine may include circuitry having data processing or storage functionality. Examples of such circuitry may include but are not limited or restricted to a microprocessor one or more processor cores a programmable gate array a microcontroller a controller an application specific integrated circuit wireless receiver transmitter and or transceiver circuitry semiconductor memory or combinatorial logic.

Logic or engine may be software in the form of one or more software modules such as executable code in the form of an executable application an application programming interface API a subroutine a function a procedure an applet a servlet a routine source code object code a shared library dynamic link library or one or more instructions. These software modules may be stored in any type of a suitable non transitory storage medium or transitory storage medium e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals or digital signals . Examples of non transitory storage medium may include but are not limited or restricted to a programmable circuit a semiconductor memory non persistent storage such as volatile memory e.g. any type of random access memory RAM persistent storage such as non volatile memory e.g. read only memory ROM power backed RAM flash memory phase change memory etc. a solid state drive hard disk drive an optical disc drive or a portable memory device. As firmware the executable code is stored in persistent storage.

An exploit may be construed broadly as information e.g. executable code data command s etc. that attempts to take advantage of a software vulnerability and or an action by a person gaining unauthorized access to one or more areas of a network device to cause the network device to experience undesirable or anomalous behaviors. The undesirable or anomalous behaviors may include a communication based anomaly or an execution based anomaly which for example could 1 alter the functionality of an network device executing application software in an atypical manner a file is opened by a first process where the file is configured to be opened by a second process and not the first process 2 alter the functionality of the network device executing that application software without any malicious intent and or 3 provide unwanted functionality which may be generally acceptable in another context.

The term object generally refers to a collection of data whether in transit e.g. over a network or at rest e.g. stored often having a logical structure or organization that enables it to be classified for purposes of analysis. An object may be referred to as having a known formatted structure that may be set forth in specifications promulgated by for example one or more corporate entities and or standardization organizations. Examples of known formatted structures include but are not limited or restricted to the structures set forth by Microsoft Office applications such as Word Excel PowerPoint etc. the structure of a PDF the structure of a Hypertext Markup Language HTML file the structure of an Extensible Markup Language XML files the structure of Microsoft Compiled HTML Help CHM files the structure of Rich Text Format RTF files the structure of Hanword files Korean word processing file etc.

During analysis for example the object may exhibit a set of expected characteristics and during processing a set of expected behaviors. The object may also include an embedded object which may in turn provide evidence that the object should be classified as malicious.

The term document object should be interpreted as an object that is not natively executable and that potentially includes an embedded object. For example an object may be received in network traffic and provided to a threat detection platform for static and or dynamic analysis such that a determination as to whether the object is malicious may be made. The object received in network traffic and provided to the threat detection platform may be referred to as a document object. Further static and or dynamic analysis may detect that an object is embedded within the document object. Hereinafter the object embedded in the document object will be referred to as an embedded object. Furthermore for purposes of the invention a Uniform Resource Locator URL should be interpreted as an embedded object. In another embodiment the document object may be included in content stored in persistent storage such as portable flash drives and or hard disk drives accessed via a communication interface.

The term network device should be construed as any electronic device with the capability of connecting to a network. Such a network may be a public network such as the Internet or a private network such as a wireless data telecommunication network wide area network a type of local area network LAN or a combination of networks. Examples of a network device may include but are not limited or restricted to a laptop a mobile phone a tablet a computer etc.

A platform generally refers to an electronic device which network connectivity that typically includes a housing that protects and sometimes encases circuitry with data processing and or data storage. Examples of a platform may include a server or an endpoint device that may include but is not limited or restricted to a stationary or portable computer including a desktop computer laptop electronic reader netbook or tablet a smart phone a video game console or wearable technology e.g. watch phone etc. .

The terms suspicious and malicious may both represent a probability or level of confidence that the object is associated with a malicious attack. For instance the probability may be based at least in part on i pattern matches ii analyzed deviations in messaging practices set forth in applicable communication protocols e.g. HTTP TCP etc. and or proprietary document specifications e.g. Adobe PDF document specification iii analyzed compliance with certain message formats established for the protocol e.g. out of order commands iv analyzed header or payload parameters to determine compliance v attempts to communicate with external servers during dynamic processing and or vi attempts to access memory allocated to the application processing the document object.

Lastly the terms or and and or as used herein are to be interpreted as inclusive or meaning any one or any combination. Therefore A B or C or A B and or C mean any of the following A B C A and B A and C B and C A B and C. An exception to this definition will occur only when a combination of elements functions steps or acts are in some way inherently mutually exclusive.

The invention may be utilized for detecting malware specifically malware including embedded objects. As this invention is susceptible to embodiments of many different forms it is intended that the present disclosure is to be considered as an example of the principles of the invention and not intended to limit the invention to the specific embodiments shown and described.

Referring to an exemplary block diagram of a network deploying a plurality of threat detection platforms TDPs N 1 where N 3 for this embodiment communicatively coupled to a management system via a network is shown. In general the management system is adapted to manage each TDP . For instance the management system may be configured to provide content updates e.g. upload new rules signatures or modified rules signatures delete rules signatures modify parameters that are utilized by the rules signatures to logic included within each of the TDP .

As shown in a first TDP is an electronic device that is adapted to analyze information associated with incoming data e.g. network traffic input data over a communication network input data from another type of transmission medium etc. from to one or more endpoint devices . In this illustrative embodiment the communication network may include a public network such as the Internet a private network e.g. a local area network LAN wireless LAN etc. or a combination thereof.

According to the embodiment of the first TDP may be communicatively coupled with one or more endpoint devices hereinafter referred to as endpoint device s . As shown the first TDP may be communicatively coupled with the network via the communication interface which directs signaling on the communication network to the scheduler which in turn directs signaling to the static analysis engine the dynamic analysis engine and or the storage device . The communication interface is configured to receive at least a portion of network traffic propagating to from the endpoint device s and provide information associated with the received portion of the network traffic to the first TDP . This information may include metadata and may be a portion of the received network traffic or a duplicated copy of the portion of the received network traffic. The metadata may be used at least in part to determine protocols application types and other information that may be subsequently used by logic such as the scheduler for example to configure one or more VM VM K 1 with selected software profiles. For instance the metadata may be used to determine which software images e.g. application s if any and or operating systems to be fetched from the storage device for configuring operability of the VM VM.

Alternatively although not shown the communication interface may be configured to receive files or other objects that are not provided over a network. For instance as an example the communication interface may be a data capturing device that automatically or on command accessing data stored in a storage system or another type of interface such as a port for receiving objects manually provided via a suitable dedicated communication link or from storage media such as portable flash drives. Additionally although not shown the communication interface may be integrated into an intermediary device in the communication path e.g. a firewall router switch or other networked electronic device or may be a standalone component such as a commercially available network tap.

As further shown in the first TDP comprises the communication interface the static analysis engine the dynamic analysis engine the classification engine and the reporting engine . Herein the communication interface receives an object from the network and converts the object into a format as needed or appropriate on which analysis by the static analysis engine may be conducted. This conversion may involve decompression of the object decompilation of the object extraction of specific data associated with the object and or emulation of the extracted data like Javascript .

The static analysis engine may include one or more controllers e.g. processing circuitry such as one or more processors that feature at least heuristics logic and signature matching logic . Further the static analysis engine may include one or more software modules that when executed by the controller s analyzes characteristics associated with the object which may be a portion of network traffic or downloaded data according to an embodiment of the disclosure. Such static analysis may include one or more checks being conducted on the object without its execution. Examples of the checks may include i heuristics performed by the heuristic logic which are based on rules or policies as applied to the object and may determine whether one or more portions of the object are associated with anomalous or suspicious characteristics associated with known malware e.g. a particular URL associated with known malware or a particular source or destination address etc. and or ii signature matching performed by the signature matching logic which may include determinative rule based analysis such as comparisons with entries on a blacklist and or a whitelist.

The static analysis engine may route the object to the virtual run time environment within the dynamic analysis engine . The virtual run time environment may include a virtual machine monitor VMM a storage device and the VM VM K 1 . The virtual run time environment provides for the processing of an object in one or more VM VMmanaged by the VMM .

The classification engine may be configured to receive the static analysis results e.g. results from a static analysis metadata associated with the incoming network traffic etc. and or the dynamic analysis results stored in the storage device . According to one embodiment of the disclosure the classification engine comprises the prioritization logic and the score determination logic . The score determination logic is configured to determine a probability or level of confidence that the document object is part of a malicious attack. More specifically based on the dynamic analysis of the document object and a detected embedded object the score determination logic generates a value that may be used in part to identify the likelihood that the document object is part of a malicious attack.

The prioritization logic may be configured to apply weighting to results provided from dynamic analysis engine and or static analysis engine . Thereafter the classification engine may route classification results comprising the weighting and or prioritization applied to the static analysis results and dynamic analysis results to the reporting engine . The classification results may include the classification of any malware detected into a family of malware describe the malware and further include the metadata associated with any object s within which the malware were detected.

As shown in the reporting engine includes an alert generation logic and a classification storage . The reporting engine is adapted to receive information from the classification engine and generate alerts that identify to a user of an endpoint device network administrator or an expert network analyst that the object is associated with a malicious attack. The alerts may include various types of messages which may include text messages and or email messages video or audio stream or other types of information over a wired or wireless communication path. The reporting engine features an optional user interface e.g. touch pad keyed inputs etc. for customization as to the reporting configuration. In addition the reporting engine may store the classification results in the classification storage for future reference.

Although illustrates the TDP as a dedicated network device and the discussion of explains examples based on an object received by the communication interface the TDP may be implemented on an endpoint device. In such an embodiment prior to actual execution of the object the TDP may launch the object in a sandboxed environment and conduct simulated human interaction and simulated device controls. Responsive to non anomalous behaviors by the object the endpoint is allowed to utilize the object. In addition the TDP may be implemented in the cloud computing services where the below described simulated human and device control interactions may be fully or partially conducted therein.

Referring now to a block diagram of the virtual run time environment of the dynamic analysis engine within the TDP of is shown. The virtual run time environment as mentioned above provides for the processing of an object through one or more of the VM VM. As shown the VMmay be provisioned with a monitoring logic and a Dynamic Content Analyzer that includes a launcher an identification agent and an activation agent . Additionally the Dynamic Content Analyzer may launch one or more applications where P 1 when processing a document object wherein each application includes an automation framework interface . Herein the term processing may include launching an embedded object wherein launching should be interpreted as placing the embedded object in an activated state e.g. opening an embedded object having an object type of a Word document using Microsoft Word . As such processing may include launching the embedded object and performing processing on the activated embedded object including for example scrolling through one or more pages changing between one or more slides or sheets adding text to the activated embedded object or the like.

In one embodiment an instance of the monitoring logic is located within each of the one or more VM VM. In particular the monitoring logic may monitor the launching process of the document object within the VM the processing of the document object the launching process of one or more embedded objects detected within the VMand the processing of the one or more embedded objects . In one embodiment the monitoring logic may track the processing of each application e.g. multiple versions of the application by the process identification PID of the application.

As shown the monitoring logic is included within each of the VM VM. In an alternative embodiment the monitoring logic may be located in the virtual run time environment wherein a single instance of the monitoring logic may monitor the processing within each of the VM VM.

The storage device may store the processing results of each of the VM VM. The results of each of the VM VMmay include at least identifying information of the document object details of the one or more versions of the application used to launch and process the document object identifying information of a detected embedded object and or details of the launching and processing of the embedded object . Additionally the storage device may optionally store a configuration file . As will be discussed below the configuration file may include information setting forth among other information one or more versions of an application with which to process the document object a version of the application processing the document object to select when determining whether an embedded object is present a predetermined amount of processing time to process the document object prior to determining whether an embedded object is present a priority ordering of object types for activating embedded objects and or a predefined list of embedded object types that should be processed.

Referring to an exemplary block diagram of logic associated with the TDP of is shown. The TDP includes one or more processors that are coupled to the communication interface logic via a first transmission medium . Communication interface logic enables communication with the TDPs and the management system of 107 of . According to one embodiment of the disclosure the communication interface logic may be implemented as a physical interface including one or more ports for wired connectors. Additionally or in the alternative communication interface logic may be implemented with one or more radio units for supporting wireless communications with other network devices.

The one or more processors are further coupled to the persistent storage via the transmission medium . According to one embodiment of the disclosure the persistent storage may include i the static analysis engine including the heuristics logic and the signature matching logic ii the virtual run time environment including the VM VMand the virtual machine manager VMM iii the classification engine and iv the reporting engine . Of course when implemented as hardware such as circuitry and or programmable logic arrays one or more of these logic units could be implemented separately from each other. In addition one or more of these logic units may be implemented in hardware while one or more logic units may be implemented as software.

Referring to a flowchart illustrating an exemplary method for analyzing a document object with the TDP of is shown. Each block illustrated in represents an operation performed in the method of detecting malware based on the use of TDP of wherein a document object under analysis includes an embedded object. At block the TDP receives a document object to analyze and provides the document object to the VM. At block the document object is launched in the VMwith one or more versions of a first application. For example when the document object is a PDF document multiple versions of Adobe Reader may be used to launch and process the document object. In such an example the document object may be launched using Reader 9.5 Reader 10.0 Reader 10.1 and Reader 11.0.

At block the document object is processed in each of the one or more versions of the first application for a predetermined amount of time to determine whether suspicious activity is observed. For example an observation of suspicious activity may include but is not limited or restricted to detection of the detonation of an exploit detection of a software vulnerability activation of a macro and or observation of anomalous behavior as a result of processing the document object . When no suspicious activity is observed within the predetermined amount of time the identification agent of the Dynamic Content Analyzer 1 selects one of the versions of the application processing the document object and 2 employs an automation framework interface to query the document object model DOM of the object type of the document object to determine whether the document object includes an embedded object . The DOM of an object type is a standardized structure to which the structure of an object of the object type adheres.

In one embodiment the Document Content Analyzer may determine which version of the application processing the document object to select based on information set forth in the configuration file . In a second embodiment the Dynamic Content Analyzer may include logic to select based on the versions processing the document object . The Dynamic Content Analyzer may select the version processing the document object most likely to include one or more vulnerabilities or the most prevalently used version by one or more corporate entities. In one embodiment the oldest version of the application processing the document object may be the most likely to include one or more vulnerabilities. In a second embodiment the version including the least up to date software patch may be the most likely to include one or more vulnerabilities. Alternatively the Dynamic Content Analyzer may make the selection based on information included in the configuration file .

In one embodiment the automation framework interface may be one or more software functions and or a shared library e.g. a dynamically linked library DLL corresponding to the application processing the document object . The Dynamic Content Analyzer may determine whether the document object includes an embedded object by employing the automation framework interface to query the document object model wherein the components of the document object e.g. nodes are set forth in a predefined structure e.g. in a tree structure such as a DOM tree according to the object type of the document object . In particular the automation framework interface is loaded into the VMas part of the configuration of the VMwith the application processing the document object . By employing the automation framework interface to query the DOM of the document object the Dynamic Content Analyzer is provided with query results that include a list of all embedded objects that are present in the document object as well as pointers to each embedded object. The pointers to each of the embedded objects may be maintained in a table which may be stored by the Dynamic Content Analyzer in the storage . As discussed above the query results also provide the Dynamic Content Analyzer with metadata of each of the embedded objects .

At block the identification agent receives query results detailing metadata of the embedded object including an object type of the embedded object and the location of the embedded object within the document object . In one embodiment the Dynamic Content Analyzer may direct focus of the processing of the document object to a portion of the document object that includes the embedded object . For example when an embedded object is detected on page 50 of a Microsoft Word document the Dynamic Content Analyzer may analyze page 50 of the Word document as the activation agent launches the embedded object.

At block based on the query results the identification agent determines whether the embedded object is of the object type that should be processed within the VM. In one embodiment whether the embedded object is of the object type that should be processed with the VMmay be derived based on a predetermined set of object types set forth in the configuration file . At block when the embedded object is of the object type that should be processed the activation agent launches the embedded object in a second application by employing the automation framework interface of the first application. The second application used to launch and process the embedded object is dependent on the object type of the embedded object . Therefore in one embodiment the application type of second application used to launch and process the embedded object may be the same application type as the first application used to launch and process the document object e.g. the document object and the embedded object are of the same object type . In a second embodiment the application type of the second application may be the different than the application type of the first application e.g. the document object and the embedded object are of different object types .

In an illustrative example the document object may be a Microsoft Word document e.g. a document of a text processor that includes a PDF document as an embedded object . Initially the Dynamic Content Analyzer or specifically the launcher may launch the Word document the document object in one or more versions of Microsoft Word. Microsoft Word provides access to the automation framework interface Automation based on a documented format e.g. based on the object type of the document object . Automation may be used to determine the presence of the embedded object the PDF document based on query results received from the document object model of Word. Automation may then utilize a packager tool to launch the embedded object . The packager tool is provided as part of the installation package of Microsoft Office applications by default and performs inter alia 1 operations to embed an object and 2 operations to launch an embedded object. Therein the packager tool may launch the embedded object in a version of Adobe Reader based on information included in the object package containing the embedded object. An object package is created by the packager tool in order to embed an object. In this example the packager tool within Word would have created an object package in order to embed the PDF document within the Word document.

The packager tool may launch the embedded object while maintaining the context of the embedding in the document object . The context of the embedding in the document object may include but is not limited or restricted to activation from the application in which the embedded object is embedded any links between the embedded object and the application in which the embedded object is embedded the name of the embedded object and or version information of the application used to launch the embedded object . Launching the embedded object without maintaining the context of the embedding in the document object may alter the embedded object by for example modifying the name of the embedded object and or altering any links between the embedded object and the application in which the embedded object is embedded e.g. malware may require the embedded object to launch from a certain application and or version in order to detonate . An alteration may in turn signal to malware not to detonate and thus allow the malware to go undetected.

At block the monitoring logic monitors the processing of both the document object and the embedded object . Additionally the monitoring logic may store processing details in the storage device via the VMM . For example the monitoring logic may record inter alia any actions performed by the document object and or the embedded object e.g. copying data attempts to access storage locations attempts to establish an external server etc. any requests for human interaction made during the processing of the document object and or the embedded object and or any results of simulated human interaction. Additionally the monitoring logic may store time stamps for all records made and PIDs of each application.

At block the results of the processing of the document object and the embedded object may be provided to the score determination logic of the classification engine . The score determination logic may generate a score of suspiciousness and or maliciousness for the document object based on the processing results of the document object and or the embedded object .

At block optionally an alert may be generated by the alert generation logic when an object is determined to be malicious and or suspicious. The alert may notify one or more of a user of an endpoint device a network administrator and or an expert network analyst of the malware included in the object and if applicable the family of malware to which the detected malware belongs.

Additionally the identification agent may detect one or more embedded objects in the document object . Each of the embedded objects may be of the same object type or one or more of the embedded objects may be of a different object type. For example a document object may include a PDF document and a Microsoft Word document as embedded objects. When a plurality of embedded objects are detected the embedded objects are activated selectively by the activation agent . In one embodiment the activation agent may determine an order of activating the plurality of embedded objects. The determination may be made based on for example the object type of each embedded object wherein the ordering of the object types is set forth in the configuration file . In a second embodiment the activation agent may activate all of the detected embedded objects simultaneously.

Furthermore an embedded object may include one or more embedded objects. Therefore when an embedded object is launched for processing the Dynamic Content Analyzer may detect one or more secondary embedded objects. The Dynamic Content Analyzer may determine whether to launch one or more of the secondary embedded objects or any objects detected while processing a secondary embedded object based on the configuration file . The configuration file as discussed above may be stored in for example the storage device or the storage device . In addition the configuration file may be updated by for example information received from the management system and or from the cloud computing services . Additionally the configuration file may set forth a predetermined amount of processing time the Dynamic Content Analyzer should wait while detecting suspicious activity prior to selecting a version of the application processing the document object for analysis for embedded objects as discussed below .

Referring now to an illustration of a first exemplary illustrative flow for detecting an embedded object with the TDP of is shown. Herein a document object has been provided to the VMfor dynamic analysis. The launcher of the Dynamic Content Analyzer launches the document object in one or more instances of a first application wherein P 1 .

After a predetermined amount of time has passed and no suspicious activity has been observed the Dynamic Content Analyzer selects one application instance e.g. one version of the application to check for embedded objects therein. As discussed above in one embodiment the version of the application may be selected based on reference to the configuration file that may be stored in for example the storage device or the storage device . In a second embodiment e.g. in the absence of a predetermined version set forth in a configuration file the Dynamic Content Analyzer may select a version of the application as discussed above.

The identification agent employs an automation framework interface to query the document object model of the document object . The query returns whether the document object includes one or more embedded objects and metadata of each of the one or more embedded objects . The metadata may include the application processing the document object the object type of the embedded object the name of the embedded object the location of the embedded object and or one or more attributes of the embedded object e.g. enable visible play loop width height . Additionally the metadata may be stored in for example an event log in the storage device and or the storage device .

The identification agent of the Dynamic Content Analyzer determines whether one or more of the embedded objects are of the object type that should be further processed based on a predefined list of object types set forth in the configuration file . When an embedded object is not of an object type that is to be further processed the presence of the embedded object is stored by the monitoring logic in for example the storage device for use in the determination as to whether the document object is malicious.

When one or more embedded objects are detected within the document object and are of the object type that should be further processed the activation agent launches one or more of the embedded object that are of the object type to be processed further. In one embodiment the embedded objects may be launched concurrently wherein the term concurrently should be interrupted as at least partially overlapping at the same time . In a second embodiment the embedded objects may be launched in a serial manner. Each of the VM VMis configured with the applications needed to process embedded objects of the object types included in the predefined list of object types that should be further processed.

Referring to an illustration of a second exemplary illustrative flow for detecting an embedded object with the TDP of is shown. illustrates a detailed embodiment of the exemplary illustrative flow of . Herein a document object e.g. a Microsoft Word document has been provided to the VMfor dynamic analysis. The launcher of the Dynamic Content Analyzer launches the Word document in a plurality of instances of Microsoft Word wherein P 3 for this example . In the embodiment shown the launcher launched the Word document in a plurality of versions including Microsoft Word Microsoft Word and Microsoft Word . Additionally as illustrated each version of Microsoft Word is seen to include an automation framework interface. For example when the document object is a Word document the document object may be launched and processed with Microsoft Word running in a Windows operating system. Windows operating systems provide an automation framework interface referred to as Automation or OLE Automation which is able to access the document object model through Component Object Model COM interfaces.

After a predetermined amount of time has passed and suspicious activity has not been observed the identification agent of the Dynamic Content Analyzer selects one application instance e.g. one version of the application to check for embedded objects therein. In one embodiment the version of the application may be selected based on reference to the configuration file . In a second embodiment e.g. in the absence of a predetermined version set forth in the configuration file the Dynamic Content Analyzer may select a version of the application e.g. Word .

The identification agent of the Dynamic Content Analyzer employs an automation framework interface to query the document object model of the document object . The query returns whether the document object includes one or more embedded objects and metadata of each of the one or more embedded objects including the object type of each of the one or more embedded objects and the location of each of the one or more embedded objects .

When the embedded PDF object is detected within the Word document the identification agent determines whether the object type of the embedded PDF object PDF is of the type that should be further processed. In one embodiment the determination of whether an embedded object is of the object type that should be further processed may be made based on reference to the configuration file . For example the configuration file may include a predefined set of object types that should be further processed.

When the embedded PDF object is not of the type that should be further processed the TDP includes the presence of the embedded object in the determination of whether the document object is malicious. In the case that the object type is not recognized by the Dynamic Content Analyzer a notification may be generated by the alert generation and provided to a network administrator and or an expert network analyst.

Upon determining the embedded PDF object is of the type that should be further processed the activation agent launches the embedded object . The activation agent launches the embedded object within the VM while maintaining a context of the embedding of the embedded PDF object within the Word document by utilizing a packager tool as discussed above.

Once the embedded PDF object has been launched the monitoring logic monitors both the Word document processing in the selected version of Microsoft Word as well as the embedded PDF object processing in Adobe Reader. As discussed above processing information may be stored by the monitoring logic in an event log included in the storage device and or the storage device and provided or made available to the score determination logic in the classification engine . Herein the processing information of the embedded PDF object that is monitored and stored by the monitoring logic may be used in the determination of a threat level e.g. suspicious malicious or benign or a score representing the maliciousness of the Word document . By processing the embedded PDF object instead of merely using the presence of an embedded object included in the Word document as factor in determining the maliciousness of the Word document the TDP may obtain a more complete understanding of the maliciousness of the Word document . Therefore by processing the embedded PDF object and detecting malware therein the TDP may determine the Word document is malicious although the analysis of the processing of the Word document within one or more of the instances of Microsoft Word did not detect malware.

Referring to a flowchart illustrating an exemplary method for launching a detected embedded object with the TDP of is shown. Each block illustrated in represents an operation performed in the method of launching a detected embedded object within a document object based on the use of TDP of wherein a document object under analysis includes an embedded object . At block the activation agent of the Dynamic Content Analyzer is notified by the identification agent that an embedded object that requires processing is included in the document object . As discussed above the identification agent employs an automation framework interface to query the document object model.

At block the activation agent launches the embedded object by employing the automation framework interface. Specifically the embedded object is launched while maintaining the context of the embedding of the embedded object within the document object .

At block the monitoring logic monitors the processing of the document object and the embedded object . At block the monitoring logic may store processing information according to each of the document object and the embedded object by association with the PIDs of each of the applications performing processing. The processing information may be stored in for example the storage device .

At block the score determination logic of the classification engine may be provided with the processing information. The score determination may determine the maliciousness of the document object based on the processing information of the document object and or the processing information of the embedded object in addition to a static analysis result provided by the static analysis engine if applicable. Additionally the classification engine may determine a malware family to which detected malware belongs.

Finally at block optionally an alert may be generated by the alert generation logic when an object is determined to be malicious and or suspicious. The alert may notify one or more of a user of an endpoint device a network administrator and or an expert network analyst of the malware included in the object and if applicable the family of malware to which the detected malware belongs.

In the foregoing description the invention is described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims.

