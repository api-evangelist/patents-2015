---

title: System, apparatus and method for conducting on-the-fly decryption of encrypted objects for malware detection
abstract: A decryption scheme for recover of a decrypted object without a cryptographic key is described. First, logical operation(s) are conducted on data associated with a first data string expected at a first location within an object having the predetermined format and data within the encrypted object at the first location to recover data associated with a portion of a cryptographic key from the encrypted object. Thereafter, logical operation(s) are conducted on that data and a first portion of the encrypted object at a second location to produce a result. Responsive to the result including data associated with the plaintext version of the second data string, logical operation(s) are conducted on a second portion of the encrypted object and the data associated with the plaintext version of the second data string to recover data associated with the cryptographic key. Thereafter, the encrypted object may be decrypted using the cryptographic key.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09560059&OS=09560059&RS=09560059
owner: FireEye, Inc.
number: 09560059
owner_city: Milpitas
owner_country: US
publication_date: 20151116
---
This is a Continuation application claiming the benefit of priority on U.S. patent application Ser. No. 14 086 842 filed Nov. 21 2013 which is incorporated by reference in its entirety.

Embodiments of the disclosure relate to the field of network security. More specifically one embodiment of the disclosure relates to a system apparatus and method for conducting on the fly decryption of encrypted objects for malware detection.

Over the last decade malicious software malware has become a pervasive problem for Internet users. In some situations malware is an exploit in the form of an executable program for example which is embedded within downloadable content and designed to adversely influence or attack normal operations of a computer. Examples of different types of exploits may include bots computer viruses worms Trojan horses spyware adware or any other programming that operates within an electronic device e.g. computer tablet smartphone server router wearable technology or other types of electronics with data processing capability without permission by the user or an administrator.

For instance exploits may be present in one or more files infected through any of a variety of attack vectors where the files are part of network traffic. For instance as an illustrative example the file may have a Portable Executable PE file format where the exploit is activated upon execution opening of the file.

Currently malware detection systems are deployed to extract content from plaintext files within network traffic and analyze such content for malware. However given that there has been a significant increase in malware propagation through the use of encrypted files especially files encrypted through use of an Exclusive OR XOR function additional functionality is needed to conduct real time malware analysis of these types of encrypted files.

It is noted that the conventional method for analyzing encrypted files for malware involves a computationally intensive brute force technique. More specifically this brute force technique is a rudimentary key detection scheme in which iterative decryption operations are conducted on an encrypted file using different key combinations in the hopes of recovering the plaintext version of the file. For instance in order to recover plaintext from a file encrypted with a one byte XOR key this brute force technique would undergo up to 256 2 iterative decryption operations. However in order to recover the plaintext from a file encrypted with a two byte XOR key or a three byte XOR key this brute force technique would need to undergo up to 65 536 2 iterative decryption operations or over 16 million 2 iterative decryption operations respectively.

Various embodiments of the disclosure relate to an electronic device having network connectivity such as a malware content detection MCD system for example where the electronic device comprises a static analysis engine that is configured to conduct on the fly real time decryption of one or more encrypted objects within network traffic prior to subsequent virtual machine VM based analysis of the object for malware. For instance the objects may be encrypted according to a Vigen re cipher and real time decryption may be conducted and completed on information currently in transit over a network and prior to receipt of the information by the intended destination. Herein network traffic may be information currently in transit over a network or stored information e.g. received over the network .

More specifically according to one embodiment of the disclosure the static analysis engine within the MCD system may be configured to conduct a first static scanning operation which involves conducting a first set of operations on an incoming object to i determine if the object is encrypted and ii verify that the encrypted object has a particular format type. This determination and verification may be accomplished by conducting one or more logical operations on portion s of the encrypted object at one or more prescribed address offsets as stored in memory and expected known data at that prescribed address offset if the object features the particular format.

According to one embodiment of the disclosure where the object is a file the particular format type may be a Portable Executable PE file format for example. Of course the invention may be directed to a variety of object or format types although the operations conducted to decrypt an encrypted file having a PE file format hereinafter referred to as a PE file are described herein for illustrative purposes. In general the PE file has a data structure that encapsulates the information necessary for the Windows operating system OS loader to manage the wrapped executable code. Noted file extensions for some types of PE files include the following i .cpl ii .exe iii .dll iv .ocx v .sys vi .scr vii .drv or viii .efi.

Upon verification that the encrypted object has the particular format type the cryptographic key used for encrypting the encrypted object may be recovered. The cryptographic key may be recovered during the first set of operations as when the key is a single byte in length. Otherwise the cryptographic key may be recovered and verified through a second set of operations involving further logical operation s between different portions of the encrypted object at prescribed address offsets and known expected data at such addresses in accordance with an object having the particular format type.

After recovery of the cryptographic key the encrypted object may be decrypted to recover the object in plaintext. Based on availability of the plaintext object the static analysis engine conducts a second static scanning operation to analyze whether content associated with the object includes malware. Such analysis is directed to analyzing information within the object itself and or analyzing the format of the object to identify protocol deviations e.g. changes to header information etc. . Stated differently the second static scanning operation may include heuristic checks.

More specifically one type of heuristic check includes scanning operations conducted on content within the object to determine whether the presence absence or modification of information may denote potential malicious activity and the presence of malware. Such scanning comprises rule based data analysis. For example where the object is an executable .exe file the file may include a function call e.g. Connect and identify one or more parameters passed to that function such as a particular website e.g. www.XYZ.com . A rule adapted to control network connectivity may identify the Connect pattern as a Hypertext Transfer Protocol HTTP request and passed parameters. Where the passed parameter is either i not a specific or recognized parameter or website or ii directed to a known malicious pattern malicious activity is detected namely there is a reasonable likelihood that the executable file is infected with malware.

Another type of heuristic check includes scanning operations conducted to determine whether any content within or associated with the recovered plaintext object includes information that is correlated to or matches one or more malware identifiers which may include but are not limited or restricted to exploit patterns names of vulnerable functions that are known to be susceptible to exploits and or malicious patterns e.g. shell code patterns Return Oriented Programming ROP patterns etc. .

After scanning operations conducted by the static analysis engine the object may be provided to the dynamic analysis engine for more in depth dynamic analysis using one or more virtual machines VMs for processing of the object in a more complete run time environment in which content within the objects is virtually executed and its behavior is monitored for detection of anomalous or unexpected activity indicative of malware.

It is contemplated that embodiments of the invention are described for an object processed in accordance with a Windows based OS such as a PE file for example but the invention may be practiced for objects associated with any type of OS including but not limited or restricted to a MAC OS Linux or any mobile OS e.g. iOS Chrome OS etc. .

In the following description certain terminology is used to describe features of the invention. For example in certain situations both terms logic and engine are representative of hardware firmware and or software that is configured to perform one or more functions. As hardware logic or engine may include circuitry having data processing or storage functionality. Examples of such circuitry may include but is not limited or restricted to a microprocessor one or more processor cores a programmable gate array a microcontroller an application specific integrated circuit wireless receiver transmitter and or transceiver circuitry semiconductor memory or combinatorial logic.

Logic or engine may be software in the form of one or more software modules such as executable code in the form of an executable application an application programming interface API a subroutine a function a procedure an applet a servlet a routine source code object code a shared library dynamic load library or one or more instructions. These software modules may be stored in any type of a suitable non transitory storage medium or transitory storage medium e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals or digital signals . Examples of non transitory storage medium may include but are not limited or restricted to a programmable circuit a semiconductor memory non persistent storage such as volatile memory e.g. any type of random access memory RAM persistent storage such as non volatile memory e.g. read only memory ROM power backed RAM flash memory phase change memory etc. a solid state drive hard disk drive an optical disc drive or a portable memory device. As firmware the executable code is stored in persistent storage.

The term object generally refers to a collection of data associated with network traffic namely information currently in transit over a network or stored information. One example of an object may include an executable file non executable file e.g. dynamic link library DLL or one or more messages. A message may be in the form of a packet a frame an Asynchronous Transfer Mode ATM cell a data flow e.g. a group of related messages or any other series of bits having a prescribed format. For example the object may be part of network traffic transmitted using a Hypertext Transfer Protocol HTTP Hypertext Markup Language HTML protocol or may be transmitted in a manner suitable for display on a Web browser software application. It is noted that the object may be encrypted in accordance with a particular encryption scheme e.g. an Exclusive OR XOR function .

As another illustrative example the object may be an electronic mail email message transmitted using a particular protocol including but not limited to an email protocol such as Simple Mail Transfer Protocol SMTP Post Office Protocol version 3 POP3 or Internet Message Access Protocol IMAP4 . Furthermore the object may be an Instant Message which may be transmitted using Session Initiation Protocol SIP or Extensible Messaging and Presence Protocol XMPP for example or even some form of unstructured data or structured data in a file format.

The term malware is directed to software that produces an undesired behavior upon execution where the behavior is deemed to be undesired based on customer specific rules manufacturer based rules or any other type of rules formulated by public opinion or a particular governmental or commercial entity. This undesired behavior may include a communication based anomaly or an execution based anomaly that would 1 alter the functionality of an electronic device executing application software in a malicious manner 2 alter the functionality of an electronic device executing that application software without any malicious intent and or 3 provide an unwanted functionality which may be generally acceptable in another context.

The term transmission medium is a communication path between two or more systems e.g. any electronic devices with data processing functionality such as for example a security appliance server mainframe computer netbook tablet smart phone router switch bridge firewall or brouter . The communication path may include wired and or wireless segments. Examples of wired and or wireless segments include electrical wiring optical fiber cable bus trace or a wireless channel using infrared radio frequency RF or any other wired wireless signaling mechanism.

The term computerized generally represents that any corresponding operations are conducted by hardware in combination with software and or firmware. Also the term compare generally means determining if a match or a certain level of correlation is achieved between two items where one of the items may include the content of a files or a particular identifier.

Lastly the terms or and and or as used herein are to be interpreted as inclusive or meaning any one or any combination. Therefore A B or C or A B and or C mean any of the following A B C A and B A and C B and C A B and C. An exception to this definition will occur only when a combination of elements functions steps or acts are in some way inherently mutually exclusive.

As this invention is susceptible to embodiments of many different forms it is intended that the present disclosure is to be considered as an example of the principles of the invention and not intended to limit the invention to the specific embodiments shown and described.

Referring to an exemplary block diagram of a communication system deploying a plurality of malware content detection MCD systems N 1 e.g. N 3 communicatively coupled to a management system via a network is shown. In general management system is adapted to manage MCD systems . For instance management system may be adapted to cause one or more malware identifiers each of which being information representative of prior detected malware to be shared among some or all of the MCD systems for use in heuristic checks. The malware identifiers may be in plaintext form or may be representative of encrypted data that has been determined to be associated with malware. Such sharing may be conducted automatically or manually uploaded by an administrator. Also such sharing may be conducted freely among the MCD systems or subject to a subscription basis.

Herein according to the embodiment illustrated in a first MCD system is an electronic device that is adapted to analyze information associated with network traffic routed over a communication network between at least one server device and at least one client device . The communication network may include a public network such as the Internet in which case an optional firewall represented by dashed lines may be interposed prior to accessing client device . Alternatively the communication network may be a private network such as a wireless telecommunication network wide area network or local area network or a combination of networks. While embodiments of the invention are described as being conducted on objects in transit e.g received over the communication network other embodiments may include the invention being practiced on stored objects or an object provided as a specimen.

As shown in the first MCD system comprises a static analysis engine a database a scheduler a storage device a dynamic analysis engine and a reporting module . In some embodiments although not shown a network interface may be contained within the first MCD system . Also static analysis engine scheduler and or dynamic analysis engine may be software modules executed by a processor that receives one or more objects and performs a multi level static scan including encryption analysis on the object which may involve accessing one or more non transitory storage mediums operating as database storage device and or reporting module . In some embodiments the static analysis engine may be one or more software modules at least partially forming a static framework where such software modules are executed by a processor. The static analysis engine and the dynamic analysis engine may be one or more software modules executed by the same processor or different processors where these different processors are possibly located at geographically remote locations located within the same processor package e.g. different processor cores and or communicatively coupled for example via a network.

In general the static analysis engine may be communicatively coupled to receive one or more objects associated with network traffic routed over communication network such as an object that is part of a series of HTTP packets forming the network traffic for example. The static analysis engine conducts a first static scanning operation on the object. The first static scanning operation comprises a first set of operations and a second set of operations.

The first set of operations is adapted to determine 1 whether the object is encrypted notably with a Vigen re cipher and 2 whether the object has a particular format type. Based on determinations that the object having the particular format type is encrypted the second set of operations is conducted to recover the cryptographic key associated with the encrypted object. The cryptographic key is used to recover a plaintext version of the object from the encrypted object.

More specifically according to one embodiment of the disclosure the static analysis engine comprises extraction logic that is configured to conduct a first static scanning operation on the object that is part of the network traffic to determine whether the object is encrypted and if so whether the encrypted object has a particular format type. In the event that the encrypted object has the particular format type the extraction logic determines the cryptographic key used for encryption of the object. Thereafter decryption logic within the static analysis engine is configured to decrypt the encrypted object using the cryptographic key in order to recover the object in a plaintext format.

Thereafter the heuristic logic within the static analysis engine conducts a second static scanning operation on the plaintext object. The second static operation is designed to potentially classify the object as malicious depending on whether the object is determined to have at least one characteristic associated with malware. This classification scheme features heuristic checks that determine if content associated with the object has a certain level of correlation with one or more malware identifiers. The level of correlation e.g. exact pattern match to matching a majority of the pattern may be non modifiable or may be adjustably set by an administrator. The classification may further feature analysis of the content to determine whether presence absence or modification of any data denotes the presence of malware.

For instance the heuristic logic may classify the object according to a first threat level e.g. suspicious assigned a score less than or equal to a first threshold when at least one characteristic identified during scanning operations conducted on the object indicates a certain level of probability that the object includes malware. Similarly the heuristic logic may classify an object with a second level e.g. malicious assigned a score greater than or equal to a second threshold that is greater than the first threshold when at least one characteristic observed during scanning operations conducted on the object indicates a high level of probability that the object includes malware.

Exemplary operations of the static analysis engine are described below. After receipt of an object the extraction logic of the static analysis engine conducts a first static scanning operation on the object in order to determine whether the object is encrypted and if so whether the encrypted object has a particular format type. In particular format detection logic is configured to conduct the first set of operations that initially recover a partial key from the encrypted object. This partial key is a portion of the entire cryptographic key where the partial key may be used to verify that the object has a particular format type. The particular format type may include any format where known data is placed at specific address locations for that object. For instance as illustrated in and described below a PE file has known data MZ DOS Stub statement PE offset etc. at specific memory address offsets.

As an illustrative example a first segment of the encrypted object may undergo one or more logical operations with particular data e.g. data string of alphanumeric characters MZ as used in the legacy DOS format to produce the partial key. The logical operation s may correspond to an Exclusive OR XOR operation. Thereafter a second segment of the encrypted object namely encrypted data starting at a prescribed address undergoes a logical operation e.g. an XOR operation with the partial key to produce a result.

For instance according to one embodiment of the disclosure the prescribed address may be a fixed offset e.g. x004E from the starting address e.g. x0000 for the object. Where the object is in a Portable Executable PE file format the second segment stored at the prescribed address is associated with a DOS Stub namely a piece of legacy code still within Microsoft based files. If run on a Disk Operating System DOS the DOS Stub would display a statement being a data string such as This program cannot be run in DOS. It is noted that the fixed offset x004E may slightly vary based on compiler type and there are a few data character strings for different DOS Stub statements all of which are known. Therefore if the result does not match anticipated data character string for one type the DOS Stub statement comparisons may be conducted for different known data character strings to confirm that the object is a file associated with a PE format.

Likewise if a match is not detected slight adjustments to the prescribed address may be conducted in order to confirm that the object was not compiled by a compiler using a different DOS Stub address. Moreover these adjustments from the fixed offset e.g. x004E may be conducted so that analysis of encrypted data addressed for the DOS Stub statement starts at the beginning of an encryption cycle e.g. remainder predefined offset key length 0 where is a modular operator returning a remainder . For instance for a four byte key the prescribed address may begin at x0050 e.g. remainder prescribed address offset key length encryption cycle begins at prescribed address offset along with key length remainder .

Based upon detection that the encrypted object is associated with the particular format type such as the PE file format for example key detection logic conducts operations on portions of the encrypted object to recover and verify recovery of the key. According to one embodiment of the disclosure the key detection logic may conduct a first operation to recover the PE Header Offset where the first operation may comprise an Exclusive OR XOR operation between the recovered key and a third segment of the encrypted object starting at a known address offset for the PE header offset. The recovered key simply may be part of the partial key where the key is a single byte key. Otherwise the key includes the partial key and may be obtained through a key window namely the result produced by conducting an XOR operation of the encrypted data starting at the prescribed address along with the anticipated DOS Stub statement. The key is determined as a repetitive string of alphanumeric characters within the result.

Thereafter using the received PE Header Offset a second operation is conducted to verify that the key is the decryption key for the object. The second operation may involve an XOR operation of 1 a few bytes of encrypted data associated with the PE header at the PE Header Offset address and 2 the key. If the result produces a specific character pattern e.g. PE00 which identifies the start of the PE header the key is verified. Thereafter the key has been recovered and may be used by decryption logic to decrypt the encrypted object to recover a plaintext version of the object.

As described above the heuristic logic conducts a second static scanning operation to statically scan the content of the object for malware identifiers. In other words the static analysis engine performs a first static scan by comparing the contents of each object with malware and or correlation between identifiers to determine an existence of malware which can be but is not limited to exploit patterns names of vulnerable functions shell code patterns heap spray patterns etc.

If the comparison reveals a correlation between the contents of the object and one or more malware identifiers hereinafter referred to as a match which denotes a malicious event the heuristic logic may assign a score e.g. an indicator of the likelihood of the analyzed file including malware to the analyzed object. The heuristic checks applied by the heuristic logic may be based on data and or rules stored in the database . Also the heuristic logic may examine portions of an image of the object without executing or opening any content associated with the object.

As previously described there are different degrees of maliciousness. Where there is a first level of likelihood of an object being infected with malware the object may be classified with a lower malicious grade sometimes referred to as suspicious which may be represented by a score corresponding to the likelihood of malware being present in the object e.g. score of 3 out of 10 . Where there is a second level of likelihood of an object being infected with malware the object may be classified with a higher malicious grade normally represented by a higher score e.g. score of 8 out of 10 .

The assigning of a score may be performed in some embodiments by assigning a score to content under analysis that is associated with the object and then mathematically combining the scores for different content to obtain an overall score for the object. Thereafter the object and score may be routed from the static analysis engine to the dynamic analysis engine for use in further analysis to establish where previously deemed as suspicious or confirms where previously deemed to be malicious the presence of malware within the object.

If no malicious event is initially detected the heuristic logic may halt further analysis of the object or based on the encrypted format of the object forward the object to the dynamic analysis engine .

After static scanning the object may be presented to the dynamic analysis engine for more in depth dynamic analysis using virtual machines VMs M 1 for processing of the file in a more complete run time environment in which content within the objects is virtually executed.

The scheduler may retrieve and configure the VMs to mimic the pertinent performance characteristics of the client device . In one example the scheduler may be adapted to configure the characteristics of a particular VM within virtual execution logic to mimic only those features of the client device that are affected by the data traffic provided by the network interface . The scheduler may determine the features of the client device that are affected by the content by receiving and analyzing the network traffic from the network interface . Such features of the client device may include any hardware and or software functionality that can be virtualized within the virtual execution logic such as the following i virtual ports that are configured to receive the content or may be used by applications running in a virtual environment to process the content for outbound communications ii certain virtual device drivers that are to respond to the content or to applications that process the content iii software applications on client device or software that the object would need to process the content and or iv any other devices coupled to or software contained within the client device that can respond to the content.

In another embodiment of the disclosure the static analysis engine may determine the features of the client device that are affected by the network traffic by receiving and analyzing the content from the network interface . The static analysis engine may then transmit the features of the client device to the scheduler and or dynamic analysis engine .

The dynamic analysis engine is adapted to execute one or more VMs to simulate the receipt and or execution of different potentially malicious content within an object under analysis analyzed object within a run time environment as expected by the type of object as noted above. The run time environment may be one selected to mimic one that is prevalently provided by client devices or in alternative embodiments one that can be provided by the client device in particular or an environment that is required for the object to be processed including software such as a web browser application or Microsoft Word for objects constituting documents. Furthermore the dynamic analysis engine analyzes the effects of such content upon the run time environment such as the client device . Such effects may include unusual network transmissions unusual changes in performance and the like. This detection process is referred to as a dynamic malicious content detection.

The dynamic analysis engine may flag the malicious content as malware according to the observed behavior of content and software executed within the VM. The reporting module may issue alerts indicating the presence of malware and using pointers and other reference information to identify what message s e.g. packet s may contain malware. Additionally the server device may be added to a list of malicious network content providers and future network transmissions originating from the server device may be blocked from reaching their intended destinations e.g. by firewall .

Of course in lieu of or in addition to static scanning operations being conducted by MCD systems it is contemplated that cloud computing services may be implemented to perform the first static scanning operation directed to identifying and decrypting encrypted objects as described herein. In accordance with this embodiment MCD system may be adapted to establish secured communications with cloud computing services for exchanging information.

Referring now to first MCD system may be coupled with the communication network via a network interface . The network interface operates as a data capturing device referred to as a tap or network tap that is configured to receive data traffic propagating to from the client device and provide content from the data traffic to the first MCD system . Alternatively as shown in the first MCD system is shown as being coupled with the communication network behind the firewall and in line with client device .

In general the network interface of receives and duplicates objects associated with network traffic that are received from and provided to client device normally without an appreciable decline in performance by the server device the client device or the communication network . The network interface may duplicate any portion of the content for example one or more files that are part of a data flow or part of the payload contained within certain data packets or the like.

In some embodiments the network interface may capture metadata from network traffic intended for client device . This metadata may be used at least in part to determine prescribed addressing offsets used for decryption operations. For instance the metadata may include information to identify a selected compiler for the object.

It is contemplated that for any embodiments where the first MCD system is implemented as a dedicated appliance or a dedicated computer system the network interface may include an assembly integrated into the appliance or computer system that includes network ports network interface card and related logic not shown for connecting to the communication network to non disruptively tap data traffic propagating through firewall and provide a copy of the data traffic to the static analysis engine . In other embodiments the network interface can be integrated into an intermediary device in the communication path e.g. firewall router switch or other network device or can be a standalone component such as an appropriate commercially available network tap. In virtual environments a virtual tap vTAP can be used to duplicate files from virtual networks.

Referring now to an exemplary block diagram of logic associated with MCD system of is shown. MCD system comprises one or more processors that are coupled to communication interface logic via a first transmission medium . Communication interface logic enables communications with other MCD systems and management system of . According to one embodiment of the disclosure communication interface logic may be implemented as a physical interface including one or more ports for wired connectors. Additionally or in the alternative communication interface logic may be implemented with one or more radio units for supporting wireless communications with other electronic devices.

Processor s is further coupled to persistent storage via transmission medium . According to one embodiment of the disclosure persistent storage may include the static analysis engine which comprises i extraction logic that includes format detection logic and key detection logic ii decryption logic and iii heuristic logic . Of course when implemented as hardware logic and or could be implemented separately from persistent memory .

Format detection logic comprises one or more software modules that conduct a first static analysis operation on an incoming object. This operation includes an analysis of different segments of an incoming object to determine if the object is encrypted and whether the object has a particular format type. If not the real time analysis of the object may be terminated or other analysis including non real time forensic review may be invoked. Upon confirming that the object is encrypted according to the particular format type the key detection logic performs a second static analysis operation.

The key detection logic comprises one or more software modules that conduct operations using one or more segments of the encrypted content and known content at certain address locations within the encrypted content based on its particular format. These operations are used to recover a cryptographic key used to encrypt the incoming object.

The decryption logic comprises one or more software modules that conduct decryption operations on the encrypted object using the recovered cryptographic key. One type of decryption operation includes an XOR function which does not require a library and is easy to instrument.

Heuristic logic comprises one or more software modules to conduct static scanning of content within the plaintext version of the object to determine whether content within the object includes malware identifiers such as information associated with known malware exploits. The heuristic logic may conduct in some embodiments a malware signature matching operation. As an example heuristic logic may be initially invoked to conduct static scanning of content in the file which includes conducting pattern comparison operations e.g. bitwise comparison byte wise comparison etc. between accessible file content and malware identifiers associated with known exploit patterns vulnerable functions and malicious patterns obtained from data store .

Subsequently after failing to detect any malicious events the heuristic logic may provide the object to the dynamic analysis engine given the presumption that an encrypted object such as an encrypted executable file denotes a suspicious event.

Continuing the above example in order to convey findings processor s may invoke GUI logic which provides one or more screen displays for conveying a more detailed summary of malicious files being detected by MCD system . In some embodiments the MCD system may also contain remediation logic not shown to initiate remediation of identified malware and recovery from the identified exploit.

Referring to an exemplary diagram of on the fly decryption of a particular object such as a file with a PE format is shown. Herein the PE format comprises a MS DOS header a DOS Stub a PE offset and a PE header . Herein the MS DOS header is part of the original DOS executable file format that is present in files with PE formats for backward compatibility. The main reason for keeping the same structure intact at the beginning of the PE file format is so that upon attempting to load a file created with an early Windows or MS DOS version the operating system can read the file and understand that it is not compatible by generating a predetermined message. The first field of the MS DOS header referred to as the magic number is used to identify the file as an MS DOS compatible file type. All MS DOS compatible executable files set this value to 0x54AD which represents the alphanumeric characters MZ .

The DOS stub is an actual program run by MS DOS when the executable is loaded. For an actual MS DOS executable image file the application begins executing at the DOS Stub . For successive operating systems including Windows for example an MS DOS stub program is part of the PE format to when executed by version of an operating system display as output a prescribed line of text the DOS Stub statement .

The PE offset is an offset into the file where the PE file header is located. It is necessary to use this offset to locate the PE header in the file. For certain PE files the PE file header occurs soon after the MS DOS header with the DOS stub program between them.

The PE file header includes a field that instructs the electronic device how much memory needs to be set aside for mapping the executable into memory.

Referring to an exemplary flowchart illustrating first static scanning operation of an encrypted object such as an encrypted PE file for example is shown. Once the PE file is received one or more logical operations are conducted on both a first segment of the encrypted object PE file and selected data e.g. a predetermined series of data such as an alphanumeric character string MZ to produce the partial key block . The logical operation s are functionally equivalent to an Exclusive OR XOR operation. Thereafter one or more logical operations e.g. an XOR operation are conducted on the partial key and a second segment of the encrypted object namely encrypted data starting at a prescribed address to produce a result block . As previously described according to one embodiment of the disclosure the prescribed address may be a fixed offset that stores the DOS Stub statement which includes a series of alphanumeric characters.

Thereafter the result is compared to a portion of one or more DOS Stub statements maintained within the database of block . Upon detecting a successful match in order to recover the key associated with the encrypted object one or more logical operations e.g. an XOR operation are conducted on the encrypted DOS Stub statement and a particular plaintext version of the anticipated DOS Stub statement maintained in the database block . The key may be determined by analyzing the result of the XOR operation for a repeating data pattern where the repeating data pattern constitutes the key.

Thereafter one or more logical operations e.g. an XOR operation are conducted on a third segment of the encrypted object at a second prescribed address and the key in order to produce a result block . According to this embodiment of the disclosure this result constitutes the PE Header Offset address that is used to locate the PE Header associated with the PE file. Next one or more logical operations e.g. an XOR operation are conducted on encrypted data at the PE Header Offset address to determine if the resultant data matches a predetermined data string e.g. a particular series of alphanumeric characters as set forth in blocks and . If so the key is verified and the decryption logic utilizes the key to decrypt the encrypted object to recover a plaintext version of the object for subsequent malware analysis as described above block .

Referring to exemplary block diagram illustrating the first static scanning operation of an encrypted object such as an encrypted file having a PE format hereinafter a PE file is shown. Once the PE file is received the format detection logic of initially conducts an XOR operation on a first segment of the encrypted PE file e.g. starting 2 bytes of the PE file and a character string MZ to produce a partial key . Thereafter as shown in the format detection logic conducts an XOR operation on the partial key and a second segment of the encrypted object starting at a prescribed address e.g. i bytes of encrypted data associated with the displayable statement of the DOS Stub i 4 to produce a result . The prescribed address may vary slightly depending on the analyzed key length and uncovered address for the DOS Stub.

As an illustrative example for a 4 byte key being used to encrypt the entire PE file the starting character T of the DOS Stub statement This Program . . . at address x004E may be encrypted with the 3byte of the key. The 4byte of the key will be applied to h . So the next cycle will start at i e.g. Start address offset 2 namely x004E x0002 . Hence the second segment may be is address x0050 so as to be aligned with the encryption cycle.

Thereafter as shown in the result is compared to a corresponding portion of one or more DOS Stub statements maintained within the database . The corresponding portion may be based on a starting point of the DOS Stub statement or a few characters from the starting point depending on a beginning of the first full encryption cycle occurring for the DOS Stub as described above.

Upon detecting a successful match the key detection logic conducts an XOR operation on encrypted data corresponding to placement of the DOS Stub statement and the anticipated DOS Stub statement that includes the corresponding portion the DOS Stub statement. The result of the XOR operation is used to recover a key associated with the encrypted object. The key may be determined by analyzing the result of the XOR operation for a repeating data pattern which would constitute the key .

Thereafter the key detection logic performs an XOR operation on a third segment of the encrypted object e.g. 2 bytes at a second prescribed address and the key in order to produce a result . This result constitutes the PE Header Offset address that it used to locate the PE Header of the encrypted PE file. Next the key detection logic performs an XOR operation on both the encrypted data e.g. 4 bytes at the PE Header Offset address and the key to determine if the resultant data is a prescribed data string which is the series of alphanumeric characters that normally start the PE header e.g. PE00 . If so the key is verified so that the decryption logic utilizes the key to decrypt the encrypted PE file in accordance with XOR function to recover a plaintext version 597 of the PE file. This plaintext file is subsequent used in the malware analysis as described above.

In general one inventive aspect is directed to a multi level static analysis that comprises decryption of an encrypted object under analysis and or static scanning operations of the plaintext non encrypted object where static scanning results are provided to the dynamic analysis engine for subsequent VM based analysis. The static scanning operations are configured to improve accuracy and efficiency in malware analysis. As alternative embodiments it is contemplated that any or all of the above described static scanning operations may be conducted concurrently.

Referring now to an exemplary flowchart illustrating the first static scanning operation conducted on a first object that is embedded with an encrypted second object such as an encrypted PE file for example is shown. Herein a determination is made whether a second object is embedded with the first object block . If so the embedded second object is extracted from the first object and one or more logical operations are conducted on both i a first encrypted segment of the embedded second object PE file starting at a prescribed address and ii predetermined data to produce the partial key blocks and . The prescribed address can be equated to a starting address for the first object along with a first address offset to the starting address of the second object. The predetermined data may be a series of alphanumeric character e.g. MZ . The logical operation s are functionally equivalent to an XOR operation.

Thereafter the logical operation s e.g. XOR operation is conducted on the partial key and a second segment of the encrypted object namely encrypted data starting at a second address offset from the prescribed address associated with the embedded second object to produce a result block .

Next the result is compared to a portion of one or more DOS Stub statements maintained within the database of block . Upon detecting a successful match in order to recover the key associated with the encrypted second object one or more logical operations e.g. an XOR operation are conducted on the encrypted DOS Stub statement and a particular plaintext version of the anticipated DOS Stub statement maintained in the database block . The key may be determined by analyzing the result of the XOR operation for a repeating data pattern where the repeating data pattern constitutes the key.

Next logical operation s e.g. an XOR operation is conducted on the key and a third segment of the encrypted object at a third address offset from the prescribed address designating the start of the embedded second object block . This operation produces a result which constitutes the PE Header Offset address that it used to locate the PE Header associated with the PE file. The PE Header Offset is the address offset from the prescribed address namely the starting address of the embedded second object to the PE header.

Next one or more logical operations e.g. an XOR operation are conducted on encrypted data at the PE Header Offset address to determine if the resultant data matches expected data e.g. a particular series of alphanumeric characters such as PE00 as set forth in blocks and . If so the key is verified and the decryption logic utilizes the key to decrypt the encrypted embedded second object to recover a plaintext version of the embedded second object for subsequent malware analysis block .

In the foregoing description the invention is described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims.

