---

title: Computer-implemented method for generating control unit program code and message management environment relating thereto
abstract: A computer-implemented method for generating control unit program code. The control unit program code or an intermediate representation in the generation of the control unit program code is generated from at least one first data object with at least one first software tool. The first software tool outputs at least one message about the generation process during the generation of the control unit program code or the intermediate representation, and a computer-implemented message management environment acquires the message output by the software tool. The evaluation of the messages output by the software tools during the generation process is achieved in a more effective manner in that a qualification for the acquired message at least as open or approved is acquired by the message management environment and in that a qualification precondition for a message qualified as approved is also acquired by the message management environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600245&OS=09600245&RS=09600245
owner: dSPACE digital signal processing and control engineering GmbH
number: 09600245
owner_city: Paderborn
owner_country: DE
publication_date: 20150826
---
This nonprovisional application claims priority to German Patent Application No. 10 2014 112 256.9 filed Aug. 27 2014 all of which is herein incorporated by reference.

The invention relates to a computer implemented method for generating control unit program code wherein the control unit program code or an intermediate representation in the generation of the control unit program code is generated from at least one first data object with at least one first software tool wherein the first software tool outputs at least one message about the generation process during the generation of the control unit program code or the intermediate representation and wherein a computer implemented message management environment acquires the message output by the software tool. In addition the invention also relates to such a message management environment for managing messages that arise during the generation of control unit program code wherein the control unit program code or an intermediate representation in the generation of the control unit program code is generated from at least one first data object with at least one first software tool wherein the first software tool outputs at least one message about the generation process during the generation of the control unit program code or the intermediate representation.

The generation of control unit program code in industrial practice has in the meantime become an extremely complex process which oftentimes involves the use of a plurality of software tools. Control units are generally understood today to be robust microcomputers designed for industrial use that usually have integrated I O interfaces. The control units which oftentimes are equipped with a real time operating system execute programs that in the broadest sense connect through the I O interface to a technical process that is to be controlled and act on this process in the desired manner. Control units of the type described are used intensively in the automotive industry for example. The development of control units and hence also the development of control unit program code has in the meantime become an important element in the development of production cars.

A simple example of a software tool with which a control unit program is generated from a data object is a compiler which translates the program code present in a high level language into control unit program code that can be executed on the target control unit which is to say in the form of e.g. byte code or in the form of a machine executable machine language. The data object in this case is the source code in a high level language.

In practice to a great extent control unit program code is no longer generated by error prone manual programming in a high level language but instead the formulation of the functionality of the control unit program code takes place at a more abstract level for example with the aid of a graphical modeling environment that permits the desired functionality to be represented in the form of a block diagram. In this case a data object includes a graphical control model or even multiple graphical control models that is then automatically translated into program code written in a high level language. This code generation can take place through multiple abstract intermediate stages in which the underlying data object in the form of the graphical control model is converted into various abstract intermediate representations. The non executable control unit program code in a high level language thus produced through various intermediate stages is then ultimately translated into executable control unit program code by a suitable compiler.

As is evident from the above remarks a plurality of software tools are involved in the method described for generating control unit program code or intermediate representations of the control unit program code graphical modeling environment code generators compilers dedicated code checkers etc. . Normally all of these software tools output messages about the generation process in order to inform the user of anomalies concerning the generation process. For the graphical modeling environment these may be notifications of unconnected ports of functional blocks notifications of mismatched data types notifications of conflicting sampling times etc. Through messages in the form of warnings and error messages the compiler can point out variables that are not declared or not initialized missing termination conditions in loops division by zero etc.

The messages output by the software tools are fundamentally material and relevant for the generation process and for the evaluation of the generation process. This is evident merely from the fact that so called zero warning requirements are present in various fields of software development which means that a control unit program code is not considered serviceable until warnings are no longer output by the software tools in the generation process leading to the control unit program code. Similar requirements are codified in certain standards for example in the MISRA standard that is relevant for the generation of control unit program code in the automotive industry but such requirements also increasingly find application in other industrial fields for safety critical applications.

It can happen that certain messages from software tools are unavoidable or else that messages are acknowledged by the user as noncritical so that the occurrence of the messages is not a negative factor in evaluating the quality of the control unit program code. Nevertheless the messages of the software tools must be checked during every further generation process which entails a considerable amount of work.

It is therefore an object of the present invention to provide a computer implemented method for generating control unit program code such that the evaluation of the messages output by the software tools during the generation process can be carried out more effectively.

In an embodiment the computer implemented method uses a message management environment such that a qualification for the acquired message at least as open or approved is acquired by the message management environment and that a qualification precondition for a message qualified as approved is acquired by the message management environment.

The method according to the invention using a message management environment has the advantage that the messages output during the generation process are centrally acquired in the message management environment and centrally subjected to an assessment. This assessment is stored in the message management environment and thus can be retrieved repeatedly with the result that a fixed connection arises between a message and a corresponding qualification of the message. The term qualification can be understood to mean that the qualified message has a determining feature in some particular regard namely a feature that justifies recognizing the message as open or as approved and then providing it with a corresponding qualification.

A message would then be qualified as open if the reason for the message cannot yet be resolved or for example when it has not yet been finally determined that the message is noncritical. A message would be qualified as approved if the reason for the message is recognizable and the message as a whole can be classified as noncritical.

At least one qualification precondition is acquired by the message management environment for a message qualified as approved . Normally the user of the method will enter such a qualification precondition in a formal language through an interface of the message management environment. By means of the qualification precondition it is possible to check again and again even in an automated fashion whether a message can continue to be considered approved. In this way an item of information is added that is essential for the generation process of the control unit program code or of an intermediate representation of the control unit program code and that permits the assessment of the generation process.

For the aforementioned reason it is possible and provided in an enhancement of the method according to the invention that an acquired message is checked by the message management environment to determine whether the message has already been acquired previously and qualified as approved wherein in the case of already existing qualification as approved the message management environment checks whether the qualification precondition is still met. This embodiment of the method is advantageous in a very particular way since in every case it can be and indeed is determined whether the preconditions are still met that have caused a message to be considered noncritical which is to say it has been acquired as approved. Hence a message that has been acquired as approved is not unalterably a message qualified as approved in the message management environment instead it is checked again and again whether the decisive criterion that led to the approval is still met.

For example a message of the graphical modeling environment employed could include a variable used in the graphical model that is not initialized and thus has no initial value. This message could nevertheless be qualified as approved if it is guaranteed that a file with initialization values for variables is always read into the modeling environment at the start of the generation process. A qualification precondition could thus include checking whether the file with initialization values is present and whether the file also actually contains a value assignment for the variable in question. Consequently the computer implemented method avoids the situation where an approved message continues to be considered approved even though the precondition for the approval is no longer present.

An enhancement that is especially advantageous for the user of the computer implemented method is in that when the qualification precondition is met the message management environment suppresses the message that is qualified as approved. Alternatively or in addition when the qualification precondition is not met the message is output as unqualified by the message management environment. This extension of the method is helpful in that messages that should continue to be considered as approved are not brought to the attention of the user of the method again since the message in question is still to be considered noncritical and therefore does not need to be dealt with again. Likewise it is naturally reasonable that those messages that have lost their qualification as approved by failing to meet the qualification precondition are presented as needing attention again.

In an embodiment of the method provision is made that the message management environment expects a message that has already been acquired and qualified to occur again during a new pass of generation of the control unit program code. This means that the message management environment notes which messages have occurred and have been qualified in a previous pass for generation of the control unit program code and compares the noted occurrence of the messages with the newly acquired messages during a new pass of generation of the control unit program code. The message management environment can draw attention to a message that is expected but has not been acquired again. In this way it is possible to check whether the generation process actually exhibits an expected behavior. In particular provision is also made for the message management environment to actively provide notification of a message that was expected but not acquired.

According to an embodiment of the method provision is made that the qualification precondition can be formulated as a function of at least a part of the first data object in particular the formulated qualification precondition is linked to the part of the data object. In the example discussed above with the file that contains initialization values for variables a link to this file would thus be stored in the message management environment where applicable identifying the position within the file so that the message management environment would on the whole have the possibility to access the data on which the qualifying precondition is based. In particular provision is made that in the case of the qualification precondition that is no longer met the message management environment displays the part of the data object that no longer meets the qualification precondition. This makes it much easier for the user of the method to check the generation process for the control unit program code.

In an embodiment of the method provision is made that a qualification precondition also can be considered not to be met if the qualification preconditions for the message management environment cannot be checked. This may be the case for example when the message management environment cannot access certain linked data for example because a license is absent that is required for such access to be possible. The qualification precondition is not unmet in this case but instead fundamental testability is lacking.

The described method is especially advantageous when multiple software tools are used with the result that provision is then made that during generation of the control unit program code or intermediate representation messages about the generation process are output at least by a first software tool and by a second software tool and the messages output by the multiple software tools are acquired by the message management environment and are also treated in the above described manner. This makes it possible to check the process for generating the control unit program code with regard to the messages that are output in a consistent work environment for all software tools involved.

Taking multiple software tools into account also results in unexpected additional utility namely that the messages from the first software tool and the messages from the second software tool can be connected to one another. For example in this way qualification preconditions for messages from the second software tool can also be formulated as a function of messages from the first software tool and vice versa. Such a dependency can be illustrated using the following example the first software tool is a code generator that translates a graphical functional description into control unit program code in a high level language. The code generator recognizes that a variable within the model is not initialized in terms of its value assigns this variable the value zero according to the ANSI standard but nevertheless reports that the variable has not been initialized by the user . The second software tool is a static code checker that checks the control unit program code in a high level language generated by the code generator for problems including division by zero. The message from the code generator concerning the missing user initialization of the variable could be qualified as approved under the qualification precondition that the code checker outputs no message concerning division by zero for this variable.

A variety of options exist for the message management environment to acquire the messages output by the software tools. Oftentimes the software tools that are involved output log files in which the messages are stored so that the message management environment can acquire the messages by parsing these log files. Alternatively or in addition the message management environment is designed such that it uses an interface provided by the relevant software tool for application programming normally referred to as an application programming interface API .

The object outlined above is additionally attained by the message management environment described in that the computer implemented message management environment is designed and configured such that the message output by the software tool can be acquired by the message management environment such that a qualification of the acquired message as open or approved can be acquired by the message management environment and such that a qualification precondition can be acquired by the message management environment for a message qualified for the first time as approved . Furthermore the message management environment proposed here behaves in such a manner that the above described method for generating the control unit program code is implemented therewith and can be implemented therewith.

Specifically there are now a plurality of possibilities for designing and further developing the computer implemented method according to the invention for generating control unit program code and the message management environment according to the invention.

Further scope of applicability of the present invention will become apparent from the detailed description given hereinafter. However it should be understood that the detailed description and specific examples while indicating preferred embodiments of the invention are given by way of illustration only since various changes and modifications within the spirit and scope of the invention will become apparent to those skilled in the art from this detailed description.

Shown schematically in each of is a computer implemented method for generating control unit program code . The control unit program code is generated from at least one first data object by means of a first software tool . In the embodiment from the data object is program code in a high level language which is translated by the software tool implemented as a compiler into the control unit program code which in this case is executable.

During generation of the control unit program code the software tool outputs messages M Mn. In the example case shown the messages are warnings and error messages from the compiler. The messages M Mn output by the software tool are acquired by a message management environment . In the exemplary embodiment from the messages M Mn are acquired by the message management environment through an application programming interface API provided by the software tool .

The method for generating the control unit program code is distinguished in that for each of the acquired messages M Mn the message management environment also acquires a qualification q qn wherein the qualification q qn can be given at least the values open or approved . Usually an approved message M Mn is understood to be a message M Mn that is considered noncritical for the quality of the control unit program code whereas messages M Mn qualified as open should be considered as not assessed in practical terms and not qualified.

Furthermore the message management environment acquires a qualification precondition p pn for a message M Mn qualified as approved . Acquired in the qualification preconditions p pn in a formal language and thus in a form that can be checked automatically by a computer implemented method are the conditions that must be met for the applicable message M Mn to be considered approved .

In the control unit program code is likewise generated by two software tools but in this case the software tools are connected in sequence. In the exemplary embodiment shown the data object is a graphical functional model that is first translated by the software tool implemented as a code generator into an intermediate product in a high level language not expressly shown here wherein this intermediate representation is then ultimately translated by the second software tool implemented as a compiler into the control unit program code . Both the code generator and the compiler in turn output messages M Mn Mv that are acquired by the message management environment in just the same manner as the associated qualifications q qn qv and the respective qualification preconditions p pn pv.

Shown in are especially advantageous variants of the method for generating control unit program code . In each of these flowcharts it is evident that an acquired message Mn is checked by the message management environment which is not expressly shown in to determine whether the message Mn has already been acquired previously box Mn exist . In the event that Mn has already been acquired an additional check is made as to whether the message Mn has also previously been qualified as approved box qn Mn approved . If this is also the case the message management environment checks whether the associated qualification precondition pn is still met box pn Mn valid . In the case that the qualification precondition pn of the message Mn is still met and thus the message Mn should still be qualified as approved the message Mn is suppressed by the message management environment box Mn don t show . If the qualification precondition pn of the message Mn is no longer met the message management environment indicates that the message Mn is no longer qualified which is to say that it must be qualified again. In another exemplary embodiment not shown here the message Mn simply receives the qualification open when the qualification precondition pn is not met.

A way the process flow shown in differs from the process flow in is that the message management environment accesses the data object when checking the qualification precondition pn box pn Mn valid which is possible when the qualification precondition pn is formulated as a function of at least a part of the data object which is the case in the present example.

The exemplary embodiment for a message management environment from shows that the message management environment has version information v concerning the data objects which additionally are labeled as d d and d. The version information about the data object d is labeled v d here. In addition the message management environment also has information about the time of the last change last change date Ic of the associated data objects . The last change date Ic of the data object d is labeled as Ic d in the drawing. In the message management environment from the qualification preconditions p are formulated as a function of the version information v and the last change dates Ic of the various data objects . In other exemplary embodiments the qualification preconditions p pn pv are just formulated as a function of a version information item v alone or as a function of a last change date Ic alone as well.

The message management environment from considers a qualification precondition p pn to not be met if the data object or a relevant part of the data object to which a dependency exists in the qualification precondition p pn has changed as compared to the version v of the data object at the point in time when the qualification precondition p pn was established or the version information v or the last change date Ic of the data object has changed as compared to the version information v acquired in the message management environment or as compared to the last change dates Ic acquired in the message management environment . Although this criterion for non fulfillment of a qualification precondition p pn is very nonspecific it nonetheless achieves the result that checking of the messages M Mn Mv which is to say also including the messages M Mn Mv that had been approved is performed again when a version change or a potential change in the underlying data objects is detected during the generation process of the control unit program code .

Shown here are the messages M from a current code generation pass wherein the messages M are divided into already qualified with Category and not qualified without Category messages M. It is possible to filter the messages M by type Warning Advice Note in the field Filter by Category . In the exemplary embodiment shown it is possible to separately display individually qualified messages M Existing Messages with Category and messages qualified by means of an identifier Category assigned by ID .

It is also possible to distinguish between and to contrast already qualified messages that are expected but have not yet occurred Expected non existing Messages with Category and messages that are not yet qualified but have occurred Existing Messages without Category 

In the bottom part of the interface details about messages M are displayed when they are selected from the upper fields for example by mouse click. There it is possible to edit the qualification category the reason for the qualification or the qualification precondition for the qualification for example. Details about the software tool can be viewed e.g. source tool tool group source object optional message text if applicable with navigation to the source object block of the graphical model variable database .

For both the variants Existing Messages without Category and Expected non existing Messages with Category it is possible to identify an old message with a new message having the same ID or the same source object e.g. because of renaming that leads to a change in the source object path .

For a selected message the possibilities include for example displaying the last qualification displaying the change in the qualification or initial qualification displaying a change history by object including identification of altered source object .

A qualification can be performed for a specific message Apply to current or for multiple messages Apply to all .

The invention being thus described it will be obvious that the same may be varied in many ways. Such variations are not to be regarded as a departure from the spirit and scope of the invention and all such modifications as would be obvious to one skilled in the art are to be included within the scope of the following claims.

