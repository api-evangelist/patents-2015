---

title: Dynamic chunk manipulation for streaming mixed media: application programming interface
abstract: Timestamps for streams of media that transition from one media source to another (such as from live content to on-demand content, and vice versa) can be rewritten by a server to help ensure error-free streaming by the client. Embodiments can coordinate the creation of a client manifest with the dynamic creation of a requested segment of media (i.e., “chunk”) to determine how to rewrite timestamps of requested chunks such that they are continuous through the transition.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09485293&OS=09485293&RS=09485293
owner: BRIGHTCOVE, INC.
number: 09485293
owner_city: Boston
owner_country: US
publication_date: 20151020
---
This application is a continuation of application Ser. No. 14 086 801 filed Nov. 21 2013 entitled DYNAMIC CHUNK MANIPULATION FOR STREAMING MIXED LIVE AND ON DEMAND MEDIA APPLICATION PROGRAMMING INTERFACE which claims the benefit of U.S. Provisional Application No. 61 884 709 entitled DYNAMIC CHUNK MANIPULATION FOR STREAMING MIXED LIVE AND ON DEMAND MEDIA filed Sep. 30 2013. The above listed applications are hereby incorporated by reference in their entirety for all purposes.

Additionally application Ser. No. 14 086 822 filed Nov. 21 2013 entitled DYNAMIC CHUNK MANIPULATION FOR STREAMING MIXED LIVE AND ON DEMAND MEDIA DYNAMIC PERMUTATION LAYER is incorporated by reference into this application for all purposes 

The delivery of media over data networks such as the Internet is in high demand. This is due in large part to much of the media being advertisement ad supported. This even applies to streamed live content.

The insertion of ads and other on demand content into a stream of live content can be difficult. The unpredictable nature of live content can result in corresponding unpredictability of points in the live content at which ads may be shown. Furthermore because live content can be generated for hours weeks or longer the timestamps associated with live will not be synchronized with the timestamps of ads or other on demand content inserted into the stream of live content. This can cause problems for some clients during playback.

Techniques disclosed herein provide for dynamically rewriting the timestamps in streams of media that transition from one source to another such as from live content to on demand content and vice versa . Embodiments can coordinate the creation of a client manifest with the dynamic creation of a requested segment of media i.e. chunk to determine how to rewrite timestamps of requested chunks are continuous through the transition.

An example method of providing media streaming via a data communications network according to the disclosure includes receiving a stream of data representing live media content obtaining timing information of the stream of data and receiving via the data communications network a request to stream the live media content. The method further includes creating with a processing unit a manifest file where the manifest file includes information for streaming one or more segments of the live media content via the data communications network the manifest file also includes information for streaming one or more segments of a media file distinct from the live media content and the manifest file further includes offset information for streaming the one or more segments of the media file the offset information based on the timing information of the stream of data. The method further includes and sending via the data communications network the manifest file.

The method of providing media streaming via a data communications network can include one or more of the following features. The method can include providing an application programming interface API where request to stream the live media content is received via the API. Creating the manifest file further can include providing in the manifest file an indication of a discontinuity in the stream of the live media content. The method can also include determining a type of client associated with the request to stream the live media content where providing the indication of the discontinuity is based on the determination of the type of client. Obtaining the timing information of the stream of data can include sending a request for the timing information and receiving a response to the request the response including the timing information. The method can also include receiving an indication of a period of time in the live media content designated for advertising where sending the request for the timing information is based on the receipt of the indication of the period of time in the live media content designated for advertising. The timing information of the stream of data can include one or more timestamps associated with one or more segments of the stream of data.

An example server for providing media streaming via a data communications network according to the disclosure includes a communications interface a memory and a processing unit coupled to the communications interface and the memory. The processing unit is configured to cause the server to receive a stream of data representing live media content obtain timing information of the stream of data and receive via the communications interface a request to stream the live media content. The processing unit is further configured to create a manifest file where the manifest file includes information for streaming one or more segments of the live media content via the data communications network the manifest file also includes information for streaming one or more segments of a media file distinct from the live media content and the manifest file further includes offset information for streaming the one or more segments of the media file the offset information based on the timing information of the stream of data. The processing unit is also configured to send via the communications interface the manifest file.

The server for providing media streaming via a data communications network can include one or more of the following features. The processing unit can be further configured to cause the server to provide an application programming interface API wherein request to stream the live media content is received via the API. The processing unit can be configured to cause the server to create the manifest file by providing in the manifest file an indication of a discontinuity in the stream of the live media content. The processing unit can be further configured to cause the server to determine a type of client associated with the request to stream the live media content where providing the indication of the discontinuity is based on the determination of the type of client. The processing unit can be configured to cause the server to obtain the timing information of the stream of data by sending a request for the timing information and receiving a response to the request the response including the timing information. The processing unit can be further configured to cause the server to receive an indication of a period of time in the live media content designated for advertising where sending the request for the timing information is based on the receipt of the indication of the period of time in the live media content designated for advertising. The timing information of the stream of data can include one or more timestamps associated with one or more segments of the stream of data.

An example non transitory computer readable medium according to the disclosure has instructions embedded thereon for providing media streaming via a data communications network. The instructions when executed by a computer cause the computer to perform functions including receiving a stream of data representing live media content obtaining timing information of the stream of data and receiving a request to stream the live media content. The functions further include creating a manifest file where the manifest file includes information for streaming one or more segments of the live media content via the data communications network the manifest file also includes information for streaming one or more segments of a media file distinct from the live media content and the manifest file further includes offset information for streaming the one or more segments of the media file the offset information based on the timing information of the stream of data. The functions also include sending the manifest file.

The computer readable medium can include one or more of the following features. The computer readable medium can include instructions for causing the computer to provide an application programming interface API wherein request to stream the live media content is received via the API. The instructions for creating the manifest file can further include instructions for providing in the manifest file an indication of a discontinuity in the stream of the live media content. The computer readable medium can include instructions for causing the computer to determine a type of client associated with the request to stream the live media content where providing the indication of the discontinuity is based on the determination of the type of client. The instructions for obtaining the timing information of the stream of data can further include instructions for causing the computer to send a request for the timing information and receive a response to the request the response including the timing information. The computer readable medium can include instructions for causing the computer to receive an indication of a period of time in the live media content designated for advertising where sending the request for the timing information is based on the receipt of the indication of the period of time in the live media content designated for advertising.

Items and or techniques described herein may provide one or more of the following capabilities as well as other capabilities not mentioned. Techniques allow for a client to transition from one source of streaming media to another without incurring errors due to inconsistencies in the timestamps of chunks between the two sources of media. Techniques can be dynamically executed on the fly and customized for each client. These and other embodiments along with many of its advantages and features are described in more detail in conjunction with the text below and attached figures.

In the appended figures similar components and or features may have the same reference label. Further various components of the same type may be distinguished by following the reference label by a dash and a second label that distinguishes among the similar components. If only the first reference label is used in the specification the description is applicable to any one of the similar components having the same first reference label irrespective of the second reference label.

The ensuing description provides preferred exemplary embodiment s only and is not intended to limit the scope applicability or configuration of the disclosure. Rather the ensuing description of the preferred exemplary embodiment s will provide those skilled in the art with an enabling description for implementing various embodiments of the invention. It is understood that various changes may be made in the function and arrangement of elements without departing from the spirit and scope as set forth in the appended claims.

The terms ad and advertisement including alternate forms thereof refer to marketing content distinct from user requested media content. Although the techniques described herein discuss obtaining and providing advertising data they also can be applied to data for content other than advertising such as other on demand content. Furthermore although techniques described herein are often provided in the context of video streaming they can be applied to other forms of media content e.g. audio streaming as well. A person of ordinary skill in the art will recognize many alternate applications.

It can be noted that although embodiments disclosed herein describe techniques as implemented by a cloud hosted integrated multi node pipelining system CHIMPS embodiments are not so limited. Other systems may be configured to implement the techniques disclosed.

The increased availability of media content over data communications networks such as the Internet has mirrored the increased bandwidth for these networks. Because media has recently taken a more prominent role in data communications the distribution of media and the data associated with such distribution has become increasingly important particularly to media content providers. Much of this media is ad supported allowing media content providers to receive advertising revenue from media content while often allowing end users to consume the media content free of charge.

Advertisements are often stored and maintained separate from the primary media content. The distribution of ad supported media via the Internet can therefore involve a variety of entities. is a block diagram illustrating a media servicing system according to some embodiments of the present invention. The system may deliver media content to a client executed by an end user device providing media playback to an end user. The client can be for example a media player browser or other application adapted to request and or play media files. The media content can be provided via a network such as the Internet and or other data communications networks such as a distribution network for television content. The end user device can be one of any number of devices configured to receive media over the Internet such as a mobile phone tablet personal computer portable media device set top box video game system etc. Although only one client and one end user device are shown in it will be understood that the media servicing system can provide media to many hundreds thousands millions etc. of clients on many hundreds thousands millions etc. of end user devices .

For on demand content e.g. requested media that is stored in its entirety a media file provided by one or more media providers can be processed and indexed by cloud hosted integrated multi node pipelining system CHIMPS . The media file may be stored on media file delivery service provider MFDSP such as a content delivery network media streaming service provider cloud data services provider or other third party media file delivery service provider. Additionally or alternatively the CHIMPS may also be adapted to store the media file. On demand content can be provided to the client via progressive downloading and or streaming.

For purposes of this disclosure advertising content can be considered a form of on demand content that is distributed much the same way. As previously mentioned techniques for interleaving live and on demand content apply not only to inserting ads into live content but can apply to inserting any form of on demand content including non advertisement content as well. Rather than media providers however ad content can come from ad networks . Furthermore the ad networks may determine what ads to provide at a given point in time for a given client by implementing business rules.

For live content e.g. requested content that is sent to one or more end user devices as it is received from media provider s that is in real time or near real time depending on processing times and or other buffer times a similar process can take place. For example media provider s can provide a media stream e.g. live video which is processed and indexed by the CHIMPS . Encoded segments of the media stream can be stored as files i.e. chunks on the media file delivery service provider MFDSP and or the CHIMPS . Embodiments may have a delay from the time the media stream is received to the time the associated content is stored and available for streaming to the one or more end user devices . The delay can be due to transcoding and or other types of processing for making the received media stream available for downloading. This delay can create a buffer period of time in which one or more of the techniques described herein can take place such as processing cue tones and or placing ads in the content. These techniques are described in greater detail below. 

Both on demand and live content can utilize any of a variety of forms of streaming media. One such method is chunk based media streaming in which a media file or live stream is processed into smaller chunks and stored e.g. in a server of the CHIMPS or Media File Delivery Service Provider for serving to a client . The client can make a URL request to the CHIMPS which can provide a manifest file also known as an index file indicating the locations of each of the chunks of media using for example Uniform Resource Indicators URIs e.g. Universal Resource Locators URLs or other indicators. The client can then use the information in the manifest file to stream the media content following one location after the other to download each chunk of media. The client may sequentially request and receive multiple manifest files to stream requested media content. This is especially true for live media where the live stream might still be received and processed by the CHIMPS when the client makes the request for the manifest file. Additional detail regarding such chunking and indexing as well as techniques for dynamically creating chunks and manifest files can be found in U.S. Pat. No. 8 327 013 entitled Dynamic Index File Creation for Media Streaming and U.S. Pat. No. 8 145 782 entitled Dynamic Chunking For Media Streaming both of which are incorporated by reference herein in their entirety.

The CHIMPS can further manage the processing and syndication of media live or on demand received from the media provider s . For example the CHIMPS can provide transcoding and other services to enable media provided by the media provider s to be distributed in a variety of formats to a variety of different device types in a variety of locations. Furthermore the CHIMPS provide feedback to the media provider s regarding the media s syndication including user behavior during media playback. For example the CHIMPS can provide a media provider with information indicating that end users tend to stop watching a video at a certain point in playback or that users tend to follow links associated with certain advertisements displayed during playback. With this data media provider s can adjust factors such as media content advertisement placement and content etc. to increase revenue associated with the media content and provide the end user device with a more desirable playback experience. Additionally or alternatively the CHIMPS can dynamically provide a customized playback experience on the end user device according to aspects of the context associated with the content at the time of the request aspects of the content request itself or both. It can be noted that although embodiments herein may utilize media files and live streams explicitly other embodiments may utilized other forms of media assets such as dynamic web pages and may incorporate multiple media elements including players user interface components user controls and control components images and other media content objects or types. Additionally it can be noted that various functions operations processes or other aspects that are described in this example and other examples as being performed by or attributable to the CHIMPS can be performed by another system operating in conjunction with the CHIMPS loosely or tightly synchronized with the CHIMPS or independently for example collecting data from other digital services to be combined and reported with data collected by the CHIMPS can in some implementations be performed by a system other than the CHIMPS . Additional detail regarding the functionality of the CHIMPS can be found in U.S. Pat. No. 8 301 733 entitled Dynamic Chunking for Delivery Instances which is incorporated by reference herein in its entirety.

A content owner can utilize one or more media provider s to distribute media content owned by the content owner . For example a content owner could be a movie studio that licenses distribution of certain media through various media providers such as television networks Internet media streaming websites and other on demand media providers media conglomerates and the like. In some configurations the content owner also can operate as a media provider .

The content owner and or media provider s can enter into an agreement with one or more ad network s to provide advertisements to numerous clients on numerous end user devices . In this manner the ad network s allow companies to show advertisements to end users viewing the media content from the media provider s . Because ad network s can maintain advertisements and or advertisement data separate from media content the advertisements can be updated and as previously indicated subject to business rules such that two users viewing the same media content at different times and or in different locations may see different advertisements.

Advertisements may be inserted directly into content consumed by the client depending on the streaming techniques utilized. In such cases a Live Advertising Processing Engine Service APES can be utilized to provide the client with advanced functionality for advertising during the consumption of live content by a client. Additional details regarding Live APES can be can be found in U.S. patent application Ser. No. 14 069 961 entitled Live Advertising Processing Engine Service which is incorporated by reference herein in its entirety.

The insertion of ads directly into content consumed by the client can cause playback issues in at least some types of clients. One such issue can arise from the mismatch between timestamps of the live media e.g. presentation timestamp PTS values and those of the ad. Some clients will incur playback errors when encountering such mismatches. Techniques disclosed herein can provide for dynamically re writing timestamps for on demand e.g. ad content into stream of live content which can prevent these playback errors from occurring.

Although embodiments provided herein discuss dynamically re writing timestamps for inserting on demand media into live content embodiments are not so limited. Principles provided herein can be extended to embodiments that insert live content into on demand media a first on demand media into a second on demand media first live content into second live content and so forth. A person of ordinary skill in the art will recognize many substitutions additions omissions and other variations to the embodiments provided herein.

In this embodiment a live stream is provided by the encoder in chunks i.e. segments each of which can each have a PTS value and or other timing information as dictated by the encoder. Because live media can vary widely in duration PTS values for the live stream can vary correspondingly. To help keep track of PTS values of the live stream received by the ingest module a local clock can be used. For example a source manifest can be created by recording the times at which chunks having unique PTS values of the live stream are received from the live stream source i.e. the encoder . This source manifest can then be used by other components such as the API to determine which chunk was received at a given local time.

Ingested chunks are then provided to the transcode module which transcodes the chunks into various formats according to a variety of different media profiles. Media profiles can determine bit rate resolution frame rate and other media characteristics that can accommodate the various types of networks clients and or end user devices used to stream the live content. For example chunks with lower bit rates are generally used to stream the live content to an end user device that has a poor network connection or low resolution display whereas chunks with higher bit rates are generally used to stream the live content to an end user device that has a good network connection or high resolution display.

The various chunks are stored in the origin . The origin can be a data storage comprising one or more physical storage devices which can be distributed geographically and may be local to and or remote from the transcode module and or DPL depending on desired functionality. The origin can further store and or manage an origin manifest that records information regarding the available media profiles of the stored chunks and their corresponding PTS values. Thus together with the source manifest the origin manifest can be used to track the time at which each chunk of the live stream is received and determine the available media profiles of the corresponding chunks stored in the origin .

The client can request to stream content of the live stream from the API by for example following a URL received from the media provider s . This URL or other URI may be provided to the media provider s by the CHIMPS indicating an Internet location at which the live stream may be accessed. The API upon receiving the client s request can create a client manifest also known as an index file comprising a list of links e.g. URLs to chunks of the live content. Once it receives the client manifest from the API the client can request the chunks from the MFDSP . If a chunk is not already cached at the MFDSP the chunk request can be relayed to the DPL which can dynamically create the requested chunk e.g. at runtime by retrieving one or more corresponding chunks stored at the origin relaying it back to the MFDSP which can then provide the requested chunk to the client . Because the DPL can create requested chunks on the fly the requested chunks can be customized according to each request. For example although chunks stored at the origin may comprise a five second segment of the live content a client may request a 20 second chunk in which case the DPL can retrieve a plurality of five second chunks from the origin corresponding to the requested 20 second chunk and dynamically create the requested chunk and provide the requested chunk to the MFDSP . Additional detail regarding such chunking can be found in U.S. Pat. No. 8 145 782 which is incorporated herein above. Because the API creates the client manifest used by the client to request chunks it is the API that determines which chunks are requested and when. The API can therefore craft client manifests to dictate at what point in the live content clients will begin streaming and the length of the chunks each client requests.

This ability to dynamically create both client manifests and requested chunks can also enable the system to rewrite timestamps on the requested chunks to help ensure a client receives a stream of chunks with continuous time stamps when streaming live content containing interleaved on demand content such as advertisements.

A typical live stream can consist of continuous data including one or more content segments e.g. a sporting event a news report etc. followed by a first advertising break during which advertising is intended to be shown. After the first advertising break there can be a second set of one or more content segments a second advertising break and so forth. Advertising breaks can be determined by the media provider s and indicated by cue tones which are analog or digital signals which indicate in a first form that a break is about to begin. Cue tones can also indicate in a second form that the break is about to end. These cue tones can occur at any point in the stream and in many circumstances the timing of the breaks is not known before the live stream is initiated.

The API can determine when advertisements are needed e.g. by receiving a cue tone and generate a manifest file accordingly. As previously indicated the processing of a live stream e.g. ingest and transcode can take time causing a buffer period between when a live stream is ingested to when the live content is provided to the client. This buffer period can provide the API with enough time to determine that a cue tone has been detected at a certain point in the live stream and generate the client manifest which inserts advertisements at corresponding points in the live content provided to the client . Ad server s can indicate to the API which ad s to insert and optionally provide additional metadata regarding the ad s . The ad content may also be provided by the ad server s and previously stored as chunks at the origin and or other data storage enabling the DPL to dynamically manipulate requested ad chunks.

In some embodiments when the API determines an ad is to be inserted into live content provided to the client it can request timing information from the DPL for a corresponding chunk such as a PTS value. The API can therefore determine what PTS value corresponds to the point in the live stream at which an ad is to be inserted and include offset information in the client manifest. When using the client manifest to request a chunk the request provided by the client to the MFDSP relayed to the DPL can include metadata including the offset information signaling to the DPL to rewrite the timestamps of the requested ad chunks so that the chunks provided to the client have continuous timestamps despite changes between the live content and ad chunks.

Using this timing information the API can create a client manifest with URLs that include offset information in parameter strings that reflects this timing information. For example the offset information can include an indication of the PTS value and or an indication of a number by which ad chunks should be offset to match the PTS values of the live stream . When these URLs are used by the client to request ad chunks from the DPL via the MFDSP the DPL can then determine from the parameter strings the offset information. The DPL can then each time an ad chunk is requested retrieve the ad chunk from the origin dynamically offset the ad chunks according to the offset information as shown by chunk sequence and provide the requested chunk to the client via the MFDSP . This ultimately results in the client receiving a mixed stream of chunks with continuous timestamps that includes both live and on demand e.g. ad content.

It can be noted that the example provided in is a simplified one. In practice systems may employ variations on this basic technique to accommodate different scenarios. For example ad chunks may differ in length the chunks of the live stream . However because the DPL is able to dynamically create requested chunks from the ad chunks it is also able to provide chunks of a requested length. The API can ensure that the client manifest provided to the client indicates the proper length of requested chunks so that they match the chunk length of the live stream .

Also although an ending point in the example of is known at the time the API creates the corresponding client manifest this may not always be the case. Depending on ad break length client manifest size buffer times and or other factors the client manifest may not include a transition back from ad content to live content. However this information may simply be provided in a subsequent client manifest.

Additionally although the example of suggests matching PTS values of chunks of a live stream as received from an encoder this may not always be the case. PTS values may be modified or replaced entirely when transcoded by the transcode module . However because the DPL can provide timing information regarding the transcoded chunks as they are stored in the origin this is not an issue. The chunks of the live stream with modified PTS values are provided to the client and the timestamp values of the ad chunks are rewritten to match these modified PTS values.

In some embodiments the API may additionally include a discontinuity tag or other indicator in the client manifest to flag the transition from live to on demand content and or vice versa . This can indicate to the client to clear their video buffer enabling the client to make the transition without any playback errors. Because some clients may require the discontinuity tag while others may not the API can first determine the type of client consuming the live content and provide a discontinuity tag if the determined client is of a type that would need such a tag.

At block the API receives an indication to insert an ad into a live content. The indication can be for example a cue tone in and or related to a live stream of media and or an indication that such a cue tone has been detected by another component e.g. an ingest module . As described in previous embodiments the API may maintain and or have access to a database list or other data structure enabling the API to determine a time in the live media an ad break in the live content begins.

At block the API requests timing information from the DPL and the request is received at block . Timing information can include information regarding the PTS value of a chunk and or other information that can be used to determine an offset needed to ensure continuity in the timestamps of chunks when transitioning to and from live content to ad content. The timing information is provided by the DPL at block and received at block .

At block the client request a client manifest. Due to the nature of live content which is being received and processed by a CHIMPS or other system at the same or substantially the same time it is being sent to the client the client manifest typically contains only a portion of the live content available. Thus in order to consume all or a larger portion of the live content a client can request multiple client manifests in succession requesting a new client manifest when the live content corresponding to a previous manifest is or soon will be completely consumed. Thus the client manifest requested by the client at block may be one of a series of client manifests requested by the client over a period of time while consuming the live content.

At block the request for the client manifest is received by the API. Because the DPL is capable of dynamically manipulating chunks to accommodate chunk requests the API can provide URLs or other URIs in the client manifest with parameter strings and or other information that can be relayed to the DPL to dictate how the DPL manipulates the chunks that are ultimately provided to the client. Thus the API can utilize the timing information received at block to provide offset information in the client manifest to cause the DPL to rewrite timestamps of ad chunks inserted into the live content to ensure the timestamps received by the client are continuous. At block the API can then return client manifest based on the timing information which is received by the client at block .

Optionally the API may insert a discontinuity tag into the client manifest as shown at block . The location of the discontinuity tag may vary depending on factors such as the streaming protocol and or format of the client manifest. In some embodiments for example the discontinuity tag may simply be placed in between URLs on a sequential list of URLs in the client manifest that correspond to chunks to be consumed by a client. Thus for transitions from live content to ad content the discontinuity tag can follow URLs for chunks of live content and precede URLs for chunks of ad content. Depending on the needs of the client a discontinuity tag may additionally or alternatively be used in the transition back from ad content to live content in a similar manner.

At block the client uses the client manifest at block to send a request for live chunk s i.e. chunks of live content from the DPL which is received by the DPL at block . The DPL then prepares the live chunk s as detailed herein above and returns the live chunk s at block which are received by the client at block . It will be understood that where multiple chunks are requested the process shown in blocks is repeated for each chunk. That is the client sends a separate request for each chunk requested. 

At block the client uses the client manifest to send a request for ad chunk s i.e. chunks of ad content from the DPL which is received by the DPL at block . Again It will be understood that where multiple chunks are requested the process shown in blocks is repeated for each requested ad chunk. Here each chunk request can include offset information provided in the client manifest to indicate to the DPL how the timestamps should be rewritten to ensure the timestamps of the ad chunks provided to the client are continuous with the timestamps of the live chunks previously received by the client at block . At block the DPL normalizes ad chunks accordingly using the offset information to rewrite the timestamps of the ad chunks. At block the DPL returns the normalized ad chunks which are received by the client at block .

It can be noted that the manifest file provided by the API can accommodate various other scenarios. For example a manifest file may cause the client to initially request ad chunk s rather than live chunk s .

At block a stream of data representing live media content is received. The stream of data can include a live stream received by an encoder of a media provider and may be processed according to previously described techniques.

At block timing information of the stream of data is obtained. The timing information can include a PTS value or other information sufficient to determine offset information for timestamps of chunks of on demand content inserted into the live media content.

At block a request to stream the live media content is received. A request can include for example a request for a manifest file e.g. a client manifest as described above .

The manifest file is created at block . Here the manifest file includes information for streaming one or more segments of live media content via a data communications network such as the Internet. Such information can include for example a list of URLs that can be used to request chunks of the live media content. The manifest file also includes information for streaming one or more segments of a media file distinct from the live media content. The media file can include for example an advertisement or other on demand content with timestamps that differ from the timestamps of the live media content. The manifest file further includes offset information for streaming the one or more segments of the media file. This offset information can be embedded in or otherwise associated with the URLs themselves and can relay offset information to an entity such as a DPL when used by a client. Finally the manifest file is sent at block .

At block a request for a segment of media is received. The request includes offset information for the requested segment of media. As indicated above the offset information can be any information that enables the timestamp of a requested chunk i.e. segment of media to be rewritten allowing for continuity in the timestamps of chunks of the media being streamed.

Block includes determining one or more files to use for creating the segment of media based on the request for the segment of media. As described above chunks may be dynamically crafted to accommodate requests. Because the contents e.g. start end times lengths etc. of requested chunks may vary from the content of files e.g. stored chunks used to create the requested chunks more than one files may be used to create the requested chunk.

At block the one or more files are obtained from a data storage. The files may be stored at a local system or may be retrieved from a remote system such as an advertisement server for example.

Block includes creating the segment of media from the one or more files by providing at least one timestamp for the segment of media based on the offset information. Rewriting timestamps in this manner allows for continuity in the timestamps of chunks of the media being streamed when transitioning from one type of media e.g. live to another e.g. on demand . The segment of media is then sent at block .

The computer system is shown comprising hardware elements that can be electrically coupled via a bus or may otherwise be in communication as appropriate . The hardware elements may include processing unit s which can include without limitation one or more general purpose processors one or more special purpose processors such as digital signal processors graphics acceleration processors and or the like and or other processing structure which can be configured to perform one or more of the methods described herein including the methods described in relation to by for example executing commands stored in a memory. The computer system also can include one or more input devices which can include without limitation a mouse a keyboard and or the like and one or more output devices which can include without limitation a display device a printer and or the like.

The computer system may further include and or be in communication with one or more non transitory storage devices which can comprise without limitation local and or network accessible storage. This can include without limitation a disk drive a drive array an optical storage device a solid state storage device such as a random access memory RAM and or a read only memory ROM which can be programmable flash updateable and or the like. Such storage devices may be configured to implement any appropriate data stores including without limitation various file systems database structures and or the like.

The computer system can also include a communications interface which can include wireless and wired communication technologies. Accordingly the communications interface can include a modem a network card wireless or wired an infrared communication device a wireless communication device and or a chipset such as a Bluetooth device an IEEE 802.11 device an IEEE 802.15.4 device a WiFi device a WiMax device cellular communication facilities UWB interface etc. and or the like. The communications interface can therefore permit the computer system to be exchanged with other devices and components of a network.

In many embodiments the computer system will further comprise a working memory which can include a RAM or ROM device as described above. Software elements shown as being located within the working memory can include an operating system device drivers executable libraries and or other code such as one or more application programs which may comprise computer programs provided by various embodiments and or may be designed to implement methods and or configure systems provided by other embodiments as described herein. Merely by way of example one or more procedures described with respect to the method s discussed above such as the methods described in relation to might be implemented as code and or instructions executable by a computer and or a processing unit within a computer in an aspect then such code and or instructions can be used to configure and or adapt a general purpose computer or other device to perform one or more operations in accordance with the described methods.

A set of these instructions and or code might be stored on a non transitory computer readable storage medium such as the storage device s described above. In some cases the storage medium might be incorporated within a computer system such as computer system . In other embodiments the storage medium might be separate from a computer system e.g. a removable medium such as an optical disc and or provided in an installation package such that the storage medium can be used to program configure and or adapt a general purpose computer with the instructions code stored thereon. These instructions might take the form of executable code which is executable by the computer system and or might take the form of source and or installable code which upon compilation and or installation on the computer system e.g. using any of a variety of generally available compilers installation programs compression decompression utilities etc. then takes the form of executable code.

It will be apparent to those skilled in the art that substantial variations may be made in accordance with specific requirements. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets etc. or both. Further connection to other computing devices such as network input output devices may be employed.

As mentioned above in one aspect some embodiments may employ a computer system such as the computer system to perform methods in accordance with various embodiments of the invention. According to a set of embodiments some or all of the procedures of such methods are performed by the computer system in response to processing unit s executing one or more sequences of one or more instructions which might be incorporated into the operating system and or other code such as an application program contained in the working memory . Such instructions may be read into the working memory from another computer readable medium such as one or more of the storage device s . Merely by way of example execution of the sequences of instructions contained in the working memory might cause the processing unit s to perform one or more procedures of the methods described herein. Additionally or alternatively portions of the methods described herein may be executed through specialized hardware.

It should be noted that the methods systems and devices discussed above are intended merely to be examples. It must be stressed that various embodiments may omit substitute or add various procedures or components as appropriate. For instance it should be appreciated that in alternative embodiments the methods may be performed in an order different from that described and that various steps may be added omitted or combined. Also features described with respect to certain embodiments may be combined in various other embodiments. Different aspects and elements of the embodiments may be combined in a similar manner. Also it should be emphasized that technology evolves and thus many of the elements are examples and should not be interpreted to limit the scope of the invention.

Terms and and or as used herein may include a variety of meanings that also is expected to depend at least in part upon the context in which such terms are used. Typically or if used to associate a list such as A B or C is intended to mean A B and C here used in the inclusive sense as well as A B or C here used in the exclusive sense. In addition the term one or more as used herein may be used to describe any feature structure or characteristic in the singular or may be used to describe some combination of features structures or characteristics. However it should be noted that this is merely an illustrative example and claimed subject matter is not limited to this example. Furthermore the term at least one of if used to associate a list such as A B or C can be interpreted to mean any combination of A B and or C such as A AB AA AAB AABBCCC etc.

Having described several embodiments it will be recognized by those of skill in the art that various modifications alternative constructions and equivalents may be used without departing from the spirit of the invention. For example the above elements may merely be a component of a larger system wherein other rules may take precedence over or otherwise modify the application of the invention. Also a number of steps may be undertaken before during or after the above elements are considered. Accordingly the above description should not be taken as limiting the scope of the invention.

