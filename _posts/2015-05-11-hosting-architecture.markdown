---

title: Hosting architecture
abstract: A service provider can maintain one or more host computing devices which may be utilized as bare metal instances by one or more customers of the service provider. Illustratively, each host computing device includes hardware components that are configured in a manner to allow the service provider to implement one or more processes upon a power cycle of the host computing device and prior to access of the host computing device resources by customers. In one aspect, a hosting platform includes components arranged in a manner to limit modifications to software or firmware on hardware components. In another aspect, the hosting platform can implement management functions for establishing control plane functions between the host computing device and the service provider that is independent of the customer. Additionally, the management functions can also be utilized to present different hardware or software attributes of the host computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09355252&OS=09355252&RS=09355252
owner: AMAZON TECHNOLOGIES, INC.
number: 09355252
owner_city: Seattle
owner_country: US
publication_date: 20150511
---
Generally described computing devices utilize a communication network or a series of communication networks to exchange data. Companies and organizations operate computer networks that interconnect a number of computing devices to support operations or provide services to third parties. The computing systems can be located in a single geographic location or located in multiple distinct geographic locations e.g. interconnected via private or public communication networks . Specifically data centers or data processing centers herein generally referred to as a data center may include a number of interconnected computing systems to provide computing resources to users of the data center. The data centers may be private data centers operated on behalf of an organization or public data centers operated on behalf or for the benefit of the general public.

To facilitate increased utilization of data center resources virtualization technologies may allow a single physical computing device to host one or more instances of virtual machines that appear and operate as independent computing devices to users of a data center. With virtualization the single physical computing device can create maintain delete or otherwise manage virtual machines in a dynamic manner. In turn users can request computer resources from a data center including single computing devices or a configuration of networked computing devices and be provided with varying numbers of virtual machine resources.

In some cases customers may want special hardware or full access to specific computing device resources provided in a data center. However such access comes with risks for service providers of those resources. Specifically in a shared environment such as a data center there typically will be other users sharing common computing resources at various times or subsequently using previously access resources. Accordingly a modification or manipulation of a resource by one customer whether intentional unintentional or malicious can potentially be detrimental to subsequent customers.

Generally described the present application relates to systems and methods for granting a user or customer with substantially full access to at least a subset of hardware resources associated or otherwise provided by a service provider. This native level access to remote hardware can be provided for resources such as servers hosts and cluster instances for example. For resources such as cluster instances customers may have native access to a subset of the hardware resources such as may include peripheral devices connected using a component such as a peripheral component interconnect PCI bus. These peripheral devices can include network interface cards NICs graphics processing units GPUs and similar devices that would often be virtualized in a hosted computing environment. In the some cases a customer might have full access to an entire machine or groups of machines including any or all devices incorporated therein. For a group of machines such as a rack of servers a user might be granted substantially full access to the entire rack including any switches or other devices or components provided as part of the rack. Such embodiments can be generally referred to as bare metal instances.

In accordance with an illustrative embodiment a service provider can maintain one or more host computing devices which may be utilized as bare metal instances by one or more customers of the service provider. Illustratively each host computing device includes hardware components that are configured in a manner to allow the service provider to implement one or more management processes upon a power cycle of the host computing device and prior to access of the host computing device resources by customers. In one aspect the present disclosure relates to an offload engine component baseboard management component and various hardware latches arranged in a manner to limit modifications to software or firmware on hardware components such as System Basic Input Output System SBIOS hard drives and hard driver controllers peripherals and the like. In another aspect the present disclosure relates to management functions for establishing control plane functions between the host computing device and the service provider that is independent of the customer processes that will be subsequently executed on the host computing device. Additionally the management functions can also be utilized to present different hardware or software attributes of the host computing device.

While specific embodiments and example applications of the present disclosure will now be described with reference to the drawings these embodiments and example applications are intended to illustrate and not limit the present disclosure. Specifically while various embodiments and aspects of the present disclosure will be described with regard to illustrative components of host computing device one or more aspects of the present disclosure can be applied with regard to different types or configurations of physical computing devices or combinations thereof.

The virtual network also includes one or more network based services for managing the implementation of changes to host computing devices . Illustratively the network based services can functionality to one or more of the host computing devices either for the benefit a service provider customer third party or a combination thereof. For example the network based services can include security services related to the management of communications encryption of content etc. In another example the network based services can include a provisioning service related to the establishment or configuration of operating environments software applications software updates software configurations that will be executed by a customer on a host computing device . In a further example the network based services can also include financial and accounting services related to the management of financial transaction information between customers and the service provider based on utilization of the host computing devices. Additional or alternative network based services may also be contemplated. Additionally although the network based services are described as being integrated in the virtual network one or more network based services may be implemented external to the virtual network as also illustrated in .

With continued reference to connected to the virtual network via a network are multiple client computing devices . The network may be for instance a wide area network WAN a local area network LAN or a global communications network. In some instances the client computing devices may interact with the virtual network to request the allocation of one or more hosted computing devices on behalf of a customer. Additionally the virtual network may be integrated with other hosted client computing networks . As previously described in some embodiments one or more of the network based services may be separate from the virtual network .

With reference now to a block diagram depicting illustrative components associated with a host computing device will be described. However one skilled in the relevant art will appreciate that the disclosed illustrative components are not meant to be an exhaustive identification of all the components required by a host computing device . Rather illustrative components have been identified in a non limiting manner to facilitate illustration of one or more aspects of the present application. Still further the illustrative components of the host computing device can be considered logical in nature such that the physical implementation of one or more components can be varied or such that one or more of the logical components may be implemented in a virtualized manner. Additionally one or more host computing devices can share one or more of the illustrated components such as processors graphical processing units memory and the like.

In an illustrative embodiment each host computing device is associated various hardware components software components and respective configurations that facilitate the implementation of host computing device boot process which will be described in detail below. Specifically in one embodiment the host computing devices include a bare metal hosting platform for managing various functions associated with bare metal host computing devices. The bare metal hosting platform can include a Baseboard Management Controller BMC for managing the operation of the host computing device in accordance with the Intelligent Platform Management Interface IPMI . Specifically the BMC can include an embedded microcontroller that manages the interface between system management software and host computing device host computing device components.

In communication with the BMC is an offload engine component . In one aspect the offload engine component can communicate as a standard bridge component for facilitating access between various physical and emulated components and a communication channel component . In another aspect the offload engine component can include embedded microprocessors to allow the offload engine component to execute computer executable instructions related to the implementation of management functions or the management of one or more such management functions or to execute other computer executable instructions related to the implementation of the offload engine component. Illustratively the BMC is configured in such a way to be electrically isolated from any other component in the bare metal hosting platform other than the offload engine component .

Also in communication with the offload engine component is an external communication port component for establishing communication channels between the bare metal hosting platform and one or more network based services or other computing devices. Illustratively the external communication port component can corresponds to a communication channel implemented in accordance with The Onion Router TOR communication protocol and scheme. As will be described in greater detail below the offload engine component can utilize the external communication port component during the boot process. Additionally the offload engine component can utilize the external communication port component to maintain communication channels between one or more services and the host computing devices such as health check services financial services and the like.

The offload engine component is also in communication with an SBIOS component . Illustratively the SBIOS component includes non transitory executable code often referred to as firmware that is executed by one or more processors and is used to cause components of the host computing device to initialize and identify system devices such as the video display card keyboard and mouse hard disk drive optical disc drive and other hardware. The SBIOS component can also include or locate boot loader software that will be utilized to boot the host computing device . As will be explained below in one embodiment the SBIOS component can include executable code that when executed by a processor causes the host computing device to attempt to locate PXE boot software. Additionally the SBIOS component includes or takes the benefit of a hardware latch that is electrically controlled by the offload engine component . The hardware latch restricts access to one or more aspects of the SBIOS component such controlling modifications or configurations of the executable code maintained in the SBIOS component .

With continued reference to the SBIOS component is connected or in communication with a number of additional computing device resources components such as central processing units CPUs memory e.g. RAM and the like. In one embodiment such computing device resource components may be physical computing device resources in communication with other components via the communication channel . Illustratively the communication channel can correspond to a communication bus such as PCI bus in which the components of the bare metal hosting platform communicate in accordance with the PCI standards. Other types of communication channels communication media communication buses or communication protocols e.g. the Ethernet communication protocol may also be utilized. Additionally in other embodiments one or more of the computing device resource components may be virtualized hardware components emulated by the host computing device . In such embodiments the offload engine component can implement a management process in which a host computing device is configured with physical or emulated hardware components based on a variety of criteria. The computing device resource components may be in communication with the offload engine component via the communication bus .

Also in communication with the offload engine component via the communication channel are one or more controller components for managing hard drives or other forms of memory. An example of a controller component can be a SATA hard drive controller. Similar to the SBIOS component the controller components includes or takes the benefit of a hardware latch that is electrically controlled by the offload engine component . The hardware latch restricts access to one or more aspects of the controller component . Illustratively all the hardware latches e.g. hardware latch and hardware latch may be controlled together or independently. For example the offload engine component may selectively close a hardware latch for one or more components based on a trust level associated with a particular customer. In another example the offload engine component may selectively close a hardware latch for one or more components based on a trust level associated with an author or distributor of the executable code to be executed by the offload engine component. In a further example the offload engine component may selectively close a hardware latch for one or more components based on a trust level associated with the component itself.

The host computing device can also include additional components that are in communication with one or more of the illustrative components associated with a bare metal hosting platform . As illustrated in such components can include devices such as one or more controllers in combination with one or more peripheral devices such as hard disks or other storage devices. Additionally the additional components of the bare metal hosting platform can include another set of peripheral devices such as Graphics Processing Units GPUs . Illustratively the peripheral devices and can also be associated with hardware latches and for restricting access to one or more aspects of the component. As mentioned above in one embodiment the hardware latches e.g. hardware latches and may be controlled together or independently.

Turning now to in an illustrative embodiment one or more components of a bare metal hosting platform may be shared among host computing devices . Illustratively each host computing device can include one or more components of a bare metal hosting platform as illustrated at . However in one example a set of host computing devices A and B are in communication with an external component that includes a BMC component and offload engine component . In this example the BMC component and offload engine component would perform at least a subset of the functions previously described with regard to the bare metal host platform . As illustrated in a set of host computing devices C may not utilize the BMC component and offload engine component of the external component even if the set of host computing devices C is in communication with the set of host computing devices B. Illustratively the BMC component and offload engine component may be implemented in a manner such that individual host computing devices e.g. A do not need a corresponding local BMC component or offload engine component. Alternatively the BMC component and offload engine component may be redundant to any local BMC component or offload engine component or work in conjunction with a local BMC component or offload engine component.

By way of another illustrative example a set of host computing devices D and E are in communication with an external component that includes only an offload engine component . In this example the offload engine component would have to be in communication with a BMC component that would be local to the host computing devices D and E or otherwise shared by the host computing devices D and E. Illustratively the external components and may establish communication with the set of host computing devices via a variety of communication media implementing one or more communication protocols. Additionally the external components may also implement or incorporate additional or alternative security methodologies architectures or protocols with regard to communications with the host computing devices .

The external components illustrated in are illustrated logically in nature and may be actually implemented remotely from the host computing devices or implemented in a distributed manner such that there would be multiple instances of the external components. Additionally while the external components illustrated in correspond to a shared BMC component and offload engine component additional components may be also be shared by one or more host computing devices as previously discussed.

With reference now to simplified block diagrams of the bare metal hosting platform of will be utilized to illustrate a boot process implemented by a host computing device . With reference to at the boot process begins by a power cycle initiated by the BMC . The power cycle may be part of the completion of the utilization of the host computing device by a previous customer the determination that host computing device may need to be re provisioned or re configured by the completion of an update process and the like.

As part of the power cycle initiation or upon completion of one or more identified processes at the offload engine component or other component manipulates all the hardware latches such that modifications may be made to one or more components associated with the hardware latch. For example the offload engine component can transmit a signal such that a hardware latch such as hardware latch may be closed to allow the SBIOS component to be placed in a state in which data can be written to the SBIOS component or that data previously maintained by the SBIOS component can be modified or replaced. As previously mentioned the offload engine component can select one or more hardware latches that will be manipulated independently of one another or control all the hardware latches together. Additionally in one embodiment the hardware latches can be sufficiently hardened or implemented in a way to mitigate the possibility that the latches could be manipulated by external components.

At the CPU communicates with the SBIOS component to obtain executable code and attempts to implement a boot process such as a PXE boot. At the offload engine component is configured to present itself as a boot device such as a NIC such that the CPU attempts to implement the boot process through the offload engine component . At the offload engine component delays the implementation of the requested boot process. For example the offload engine component can include an option Read Only Memory ROM process that results in a delay until the intended boot process is ready to be implemented. In another example the offload engine component can calculate or implement a timed delay process to allow sufficient time for one or more management functions to be implemented prior to proceeding with the boot request.

With reference to one illustrative in at the offload engine component initializes its embedded microprocessors and begins executing one or more management functions. Illustratively in one embodiment the offload engine component can execute code that causes the offload engine component to implement one or more management functions. In another embodiment the offload engine component can initiate one or more services or communicate with other computing devices that implement executable code corresponding to one or more management functions. For example offload engine component can utilize one or more services that are implemented in accordance with an Application Programming Interface API based on authorization provided by the offload engine component. For purposes of describing illustrative management functions however the management functions will be described as implemented by the offload engine component .

In one aspect the offload engine component can execute code that relates to the establishment of a management control communication channel such as via the external control communication port . In another aspect the offload engine component can modify or replace software or software configurations associated with one or more components in which a hardware latch permits modification. In a further aspect the offload engine component can implement various security or authentication schemas. In still another aspect the offload engine component can initiate a reconfiguration cleanup or examination of the computing device resources to ensure that such resources are available for use.

In addition to the management functions the offload engine component can also implement one or more processes for preparing the host computing device for use with the customer specified request. In one aspect the offload engine component can enable one or more physical or emulated hardware components for utilization. For example assume a host computing device includes four processing units that are capable of being utilized but a customer has only indicated they would utilize two processing units. The offload engine component can then enable only two of the processing units responsive to the request. In another aspect the offload engine component can initiate one or more processes that will be run by the service provider during the time the host computing device resources are being utilized by a customer. For example the processes can include a health check module for determining the relative health operation of the host computing device . In still a further aspect the offload engine component can then prepare for the target boot process to be initiated by the CPU .

With continued reference prior to allowing the host computing device to begin executing code or communicating with untrusted or unsecured components at the offload engine component or other components the offload engine component can transmit a second signal that causes a manipulation of the hardware latches to prevent further modification to any associated components. For example hardware latches may be set to an open position to prevent modification of firmware. At the boot process is unblocked and the host computing device through the CPU begins the intended boot process such as a bare metal boot process. At any point the process illustrated in may be repeated based on a power cycle implemented by the BMC component or upon termination expiration of the use by the customer.

In an alternative to the process illustrated in in at the offload engine can determine that executable code corresponding to the boot process may be associated with a sufficient level of trust. In one embodiment the offload engine component unblocks the delayed boot process at . As such the host computing device through the CPU begins the intended trusted boot process. During the intended boot process the executable code obtained during the boot process can be executed to implement one or more of the management functions illustrated with regard to . In this embodiment however the offload engine component can cause one or more of the hardware latches to remain closed after the boot process to facilitate the management function. Thereafter the BMC component can initiate a power cycle that will result in the repeat of the process illustrated in . Additionally in an alternative embodiment prior to unblocking the delayed boot process the offload engine component can implement at least a portion of the pre boot management interaction and processes discussed with regard to action in . In such an embodiment the offload engine component would proceed to unblock and implement the trusted boot code upon completion of some pre boot management functions.

Turning now to a flow diagram illustrating a host boot process routine implemented by a bare metal hosting platform of a host computing device will be described. In this regard routine will be described with regard to implementation by the bare metal hosting platform which may include one or more components previously discussed with regard to the bare metal hosting platform. Such illustrations should not be construed as being limited to implementation by the illustrated components.

With reference to at block the bare metal hosting platform begins by determining a power cycle such as a power cycle initiated by the BMC . The power cycle may be part of the completion of the utilization of the host computing device by a previous customer the determination that host computing device may need to be re provisioned or re configured by the completion of an update process and the like. Still further in other embodiments the power cycle can be initiated by a customer request or service provider request if the BMC through the offload engine component facilitates such interfaces. For example the BMC may be able to initiate a power cycle based on an API exposed to a client computing device .

At block the offload engine component or other component manipulates all the hardware latches such that modifications may be made to one or more components associated with the hardware latch. For example the offload engine component can transmit a signal such that a hardware latch such as hardware latch may be closed to allow the SBIOS component to be placed in a state in which data can be written to the SBIOS component. As previously mentioned the offload engine component can control select hardware latches independently of one another or control all the hardware latches together. Additionally in one embodiment the hardware latches can be sufficiently hardened or implemented in a way to mitigate the possibility that the latches could be manipulated by external components. For example the hardware latches may be configured such that they are in an open position by default and can only be closed in limited circumstances.

At block the CPU begins execution of the code in the SBIOS component and attempts to implement a boot process such as a PXE boot. As previously described in one embodiment because the offload engine component is configured to present itself as a boot device the CPU attempts to implement the boot process through the offload engine component . By way of example the offload engine component can present itself as a NIC via the communication bridge . At block the boot process initiated by a CPU is idled or delayed to allow the offload engine component to complete its management functions or other functions prior providing control or executing code associated with untrusted components. For example the offload engine component can include one or more processes that delay the boot process such as an option ROM process or delay process.

At decision block the offload engine component determines whether the boot code that has been idled has been associated with a sufficient level of trust. If the boot code has not been associated with a sufficient level of trust the routine proceed to block in which one more pre boot management processes will be implemented. If the boot code has been associated with a sufficient level of trust the routine proceeds to block in which one or more pre boot management processes and one or more post boot management processes may be implemented. Accordingly the processing of management functions in routine is illustratively dependent on a level of trust associated with the boot code to be implemented by the host computing device .

With continued reference to the routine implements block upon completion of a pre boot management process such as the pre boot management process illustrated in . Specifically prior to allowing the host computing device to begin executing code or communicating with untrusted or unsecured components the offload engine component or other components causes the manipulation of zero or more hardware latches to prevent further modification to any of their associated components. For example hardware latches may be set to a closed position to prevent modification of firmware. In this embodiment as will be explained in greater detail below the offload engine component assumes that the boot process is untrusted. Accordingly at block the idled boot process is enabled and the host computing device begins the intended boot process such as a bare metal boot process.

Upon enablement of untrusted boot code at block the host computing device implements the untrusted boot code and executes any additional code provided by a customer until a determination of a power cycle event. Additionally in embodiments in which the idled boot code is associated with a sufficient trust level routine implements block upon completion of a potential combination of pre boot and post boot management functions as illustrated in . In either embodiment the routine does not continue until there is a determination of a power cycle event at block . For example a power cycle event may be determined based on expiration of a time period allotted for customer utilization of the host computing device . In another example a power cycle event may be based on determination of an error or fault condition. In a further example a power cycle event may be determined based on communications such as a power cycle initiated by a system administrator or requested by the customer. The routine then proceeds to block in which the BMC component initiates a power cycle. Accordingly the routine would then return to block for processing of the power cycle event.

Turning now to a sub routine for implementing a pre boot host management subroutine will be described. In one embodiment the offload engine component executes code or causes code to be executed that will implement one or more management functions. Accordingly subroutine begins with the initiation of the offload engine component at block which can include the initialization of one or more embedded microprocessors obtaining of executable code communication with network services and the like. At block the offload engine component processes management functions. The implementation of management functions will be described below with regard to . At block once the management functions have been implemented the subroutine returns to block . In this embodiment it is assumed that the executable code associated with the boot process is not associated a sufficient trust level and that the hardware latches will be manipulated e.g. opened upon completion of the processing of the management function and prior to the enablement of the boot process.

Turning now to a sub routine for implementing an alternative host management subroutine will be described. Specifically in this embodiment the host computing device may implement one or more pre boot management processes and one or more post boot management processes. In some embodiments the offload engine component does not necessarily have to execute any of the code that will implement one or more management functions. Rather if the boot process is associated with a sufficient trust level the boot process may be enabled such that one or more of the hardware latches will remain closed. In other embodiments one or more pre boot management processes may be implemented by the offload engine component prior to initiating the idled trusted boot process.

Accordingly subroutine begins at decision block with a determination of whether the host computing device will implement any pre boot management processes. If so at block the offload engine component is initiated which can include the initialization of one or more embedded microprocessors obtaining of executable code communication with network services and the like. At block the offload engine component processes one or more pre boot management functions. The implementation of management functions will be described below with regard to .

Once the host computing device has implemented any pre boot management processes at block or if at decision block the host computing device does not implement any pre boot management processes at block the offload engine component alone or in conjunction with other components enables the idled boot process that has been associated with a minimal trust level. At block the host computing device processes management functions based on the execution of the code associated with the trusted boot process. The implementation of management functions will be described below with regard to . Illustratively the post management process may be independent of any pre boot management process implemented at block . Alternatively one or more post boot management processes may be implemented based on the implementation or outcome of one or more pre boot management processes at block .

At block a test is conducted to determine whether the management function implementation is complete. If not the subroutine returns to block . Once the management functions have been implemented at block the sub routine terminates and returns to block for determination a power cycle . As previously described in this embodiment it is assumed that the executable code associated with the boot process is associated a sufficient trust level and that the hardware latches will remain manipulated e.g. closed upon enablement of the boot process. As such the host computing device can reset the hardware latches by initiating a power cycle upon completion of the management function. Accordingly the power cycle would result in a reset such that routine would begin anew at block .

Turning now to a flow diagram illustrating a host boot process manage function subroutine implemented by a bare metal hosting platform of a host computing device will be described. In this regard subroutine will be described with regard to implementation by the bare metal hosting platform or the offload engine component which may include one or more components previously discussed with regard to the bare metal hosting platform . Such illustrations should not be construed as being limited to implementation by the illustrated components. As previously described aspects of subroutine may be implemented at block which illustratively occurs prior to the disabling of the hardware latches block . Additionally aspects of subroutine may be implemented at block which illustratively occurs prior to the enablement of a trusted idled boot code. In such embodiments the components executing the subroutine may vary. Additionally one or more specific blocks of subroutine may be considered to optional and may be omitted as appropriate or selected.

At block the offload engine component initializes one or more software applications that will be utilized provide the management functions. For example the offload engine component can generate an update application that identifies a trusted source for update information and authenticates itself for obtaining the necessary update information. In another example the offload engine component can generate basic security functions that will be utilized to protect the operation of the bare metal hosting platform . Additional or alternative functions may be also be implemented.

At block the offload engine component component can execute code that relates to the establishment of management control communication channel such as via the external control communication port . As previously described the bare metal hosting platform can utilize a TOR connection to obtain control plane instructions for one or more components of the bare metal hosting platform . Additionally the bare metal hosting platform can establish and maintain multiple open communication channels based on anticipated need.

At block the offload engine component can modify or replace software or software configurations associated with one or more components in which a hardware latch permits modification. Illustratively the offload engine component can access memory for obtaining updates software applications etc. At block the offload engine component can initiate a reconfiguration cleanup or examination of the computing device resources to ensure that such resources are available for use. In one aspect the offload engine component can initiate a cleanup of data previously stored on hard disks . In another aspect the offload engine component can execute code that relates to the establishment of management control communication channel such as via the external control communication port . In another aspect the offload engine component can modify or replace software associated with one or more components in which a hardware latch permits modification. In a further aspect the offload engine component can implement various security or authentication schemas. In still another aspect the offload engine component can initiate a reconfiguration cleanup or examination of the computing device resources to ensure that such resources are available for use.

At block the offload engine component can also implement one or more processes for preparing the host computing device for use with the customer specified request. In one aspect the offload engine component can enable one or more physical or emulated hardware components for utilization. For example assume a host computing device includes four processing units that are capable of being utilized but a customer has only indicated they would utilize two processing units. The offload engine component can then enable only two of the processing units responsive to the request.

At block the offload engine component can initiate one or more processes that will be run by the service provider during the time the host computing device resources are being utilized by a customer. For example the processes can include a health check module for determining the relative health operation of the host computing device . In still a further aspect the offload engine component can then prepare for the real boot process requested by the CPU . At block the offload engine component can obtain any additional boot code required for enabling a boot process. At block subroutine terminates.

Turning now to a flow diagram illustrating a host boot process manage function subroutine implemented by a host computing device will be described. In this regard subroutine will be described with regard to implementation by the host computing device which may include one or more components previously discussed with regard to the bare metal hosting platform . Such illustrations should not be construed as being limited to implementation by the illustrated components. As previously described aspects of subroutine may be implemented at block which illustratively occurs after the initiation of an idled boot process block and the optional processing of pre boot management functions block . Still further subroutine may be illustratively implemented prior to the disabling of the zero or more hardware latches block of . One or more specific blocks of subroutine may be considered to optional and may be omitted as appropriate or selected.

At block the host computing device initializes one or more software applications that will be utilized provide the management functions. For example the host computing device can generate an update application that identifies a trusted source for update information and authenticates itself for obtaining the necessary update information. In another example the host computing device can generate basic security functions that will be utilized to protect the operation of the bare metal hosting platform . Additional or alternative functions may be also be implemented.

At block the offload engine component component can execute code that relates to the establishment of management control communication channel such as via the external control communication port . As previously described the bare metal hosting platform can utilize a TOR connection to obtain control plane instructions for one or more components of the bare metal hosting platform . Additionally the bare metal hosting platform can establish and maintain multiple open communication channels based on anticipated need.

At block the host computing device directly or through one of the components e.g. the offload engine component can modify or replace software or software configurations associated with one or more components in which a hardware latch permits modification. Illustratively the host computing device can access memory for obtaining updates software applications etc.

At block the offload engine component can initiate a reconfiguration cleanup or examination of the computing device resources to ensure that such resources are available for use. In one aspect the host computing device can initiate a cleanup of data previously stored on hard disks . In another aspect the host computing device can modify or replace software associated with one or more components in which a hardware latch permits modification. In a further aspect the host computing device can implement various security or authentication schemas. In still another aspect the offload engine component can initiate a reconfiguration cleanup or examination of the computing device resources to ensure that such resources are available for use.

At block the offload engine component can also implement one or more processes for preparing the host computing device for use with the customer specified request. In one aspect the offload engine component can enable one or more physical or emulated hardware components for utilization. For example assume a host computing device includes four processing units that are capable of being utilized but a customer has only indicated they would utilize two processing units. The offload engine component can then enable only two of the processing units responsive to the request.

At block the offload engine component can initiate one or more processes that will be run by the service provider during the time the host computing device resources are being utilized by a customer. For example the processes can include a health check module for determining the relative health operation of the host computing device . In still a further aspect the offload engine component can then prepare for the real boot process requested by the CPU . At block subroutine terminates.

It will be appreciated by those skilled in the art and others that all of the functions described in this disclosure may be embodied in software executed by one or more processors of the disclosed components and mobile communication devices. The software may be persistently stored in any type of non volatile storage.

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

Any process descriptions elements or blocks in the flow diagrams described herein and or depicted in the attached figures should be understood as potentially representing modules segments or portions of code which include one or more executable instructions for implementing specific logical functions or steps in the process. Alternate implementations are included within the scope of the embodiments described herein in which elements or functions may be deleted executed out of order from that shown or discussed including substantially concurrently or in reverse order depending on the functionality involved as would be understood by those skilled in the art. It will further be appreciated that the data and or components described above may be stored on a computer readable medium and loaded into memory of the computing device using a drive mechanism associated with a computer readable storing the computer executable components such as a CD ROM DVD ROM or network interface further the component and or data can be included in a single device or distributed in any manner. Accordingly general purpose computing devices may be configured to implement the processes algorithms and methodology of the present disclosure with the processing and or execution of the various data and or components described above.

It should be emphasized that many variations and modifications may be made to the above described embodiments the elements of which are to be understood as being among other acceptable examples. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

