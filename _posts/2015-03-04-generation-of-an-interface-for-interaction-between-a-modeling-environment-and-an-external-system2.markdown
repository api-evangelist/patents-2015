---

title: Generation of an interface for interaction between a modeling environment and an external system
abstract: A device may receive model information that describes a model and external system information that describes an external system that is different than the model. The model information may identify a first set of signals, associated with the model, that are incompatible with the external system. The external system information may identify a second set of signals, associated with the external system, that are incompatible with the model. The device may generate interface code based on the model information and the external system information. The interface code, when executed, may permit the model and the external system to interact using the first set of signals and the second set of signals. The device may execute the interface code to transform the first set of signals to the second set of signals and to transform the second set of signals to the first set of signals.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09632759&OS=09632759&RS=09632759
owner: The MathWorks, Inc.
number: 09632759
owner_city: Natick
owner_country: US
publication_date: 20150304
---
This application claims priority from and is a continuation in part CIP of U.S. patent application Ser. No. 14 486 203 filed on Sep. 15 2014 which is a continuation of U.S. patent application Ser. No. 12 625 000 filed on Nov. 24 2009 now U.S. Pat. No. 8 839 187 B1 which claims priority to U.S. Provisional Patent Application No. 61 153 183 filed on Feb. 17 2009. The contents of these applications are incorporated by reference herein in their entireties.

The following detailed description of example implementations refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

A model may include a set of model elements that when executed by a client device simulates behavior of a system. The model may be designed in a modeling environment that is hosted by the client device. The model elements may cause the client device to interact with e.g. provide signals to and or receive signals from an external system e.g. another device in communication with the client device an application hosted by the client device an application hosted by the other device or the like . However interacting with the external system may be difficult for the client device. For example the external system may provide and or receive signals differently than the model e.g. in a different format via a different port or register at a different data transmission rate using a different data type etc. . Thus creating an interface to facilitate interaction between the client device and the model may be costly time consuming and error prone.

Systems and or methods described herein may enable the client device to generate an interface that facilitates interaction between the model and the external system. As described in more detail elsewhere herein the client device may automatically generate the interface in a manner that reduces errors associated with the interface conserves computing resources by generating efficient interface code for the interface e.g. leading to faster execution of the interface code more compact code etc. or the like. In some implementations the client device may receive information that describes a model an external system and or an interface. The information that describes the model the external system and or the interface may be received in a format that enables efficient generation of the interface. The interface may facilitate interaction between the model and the external system by causing the client device and or the external system to process signals into a format that facilitates the interaction. For example a format compatible with the external system and the client device may be used for the signals. The client device may generate interface code based on the information that describes the interface. The client device may use the interface code to provide the interface between the model and the external system or may transmit the interface code to the external system e.g. for the external system to use to provide the interface between the model and the external system . In this way the client device may efficiently generate interface code to facilitate interaction with an external system based on the information that describes the model the external system and or the interface.

As further shown the client device may generate interface code to facilitate interaction between the model and the external system. Assume that the client device generates the interface code based on detecting the difference between the inputs and outputs of the model and the external system and based on the information that identifies the inputs outputs and interface information. As shown assume that the client device provides the interface code to the external system. Assume further that the interface code when executed by the external system causes the external system to provide the interface.

As shown in assume that the external system executes the interface code to provide the interface. Assume further that the client device executes the model to generate model outputs. As shown assume that the client device provides the model outputs to the external system. Assume further that the interface provided by the external system processes the model outputs to generate system inputs. As shown the external system may provide to the client device system outputs e.g. based on the system inputs based on actions internal to the external system or the like . Assume that the interface provided by the external system processes the system outputs to generate model inputs and provides the model inputs to the client device for execution by the model.

In this way a client device may efficiently generate an interface to facilitate interaction between a model and an external system. The model may interact with the external system via the interface and or may simulate a component of the external system. By interacting with and or simulating the component of the external system the model may improve understanding of performance of the external system e.g. by testing the component of the external system by analyzing system outputs by testing a cycle of the system or the like .

Client device may include one or more devices capable of receiving generating storing processing and or providing a modeling environment e.g. TCE and or information related to the modeling environment. For example client device may include a computing device such as a desktop computer a laptop computer a tablet computer a mobile phone e.g. a smart phone a radiotelephone etc. or a similar device. Client device may provide an interface to facilitate interaction between a model associated with TCE and external system . In some implementations client device may receive information from and or transmit information to server device and or external system e.g. based on an interface . For example the model and external system may communicate via a network via an application programming interface API via hardware memory map via a data stream via a hardware stream via a graphical map via a software map or the like.

Client device may host TCE . TCE may include any hardware based component or a combination of hardware and software based components that provides a computing environment that allows tasks to be performed e.g. by users related to disciplines such as but not limited to mathematics science engineering medicine and business. TCE may include a text based environment e.g. MATLAB software by The MathWorks Inc. a graphically based environment e.g. Simulink software Stateflow software SimEvents software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Agilent VEE by Agilent Technologies Advanced Design System ADS by Agilent Technologies Agilent Ptolemy by Agilent Technologies etc. or another type of environment such as a hybrid environment that may include for example a text based environment and a graphically based environment.

TCE may be integrated with or operate in conjunction with a graphical modeling environment which may provide graphical tools for constructing a model. TCE may include additional tools such as tools designed to convert a model into an alternate representation such as program code source computer code compiled computer code and or a hardware description e.g. a description of a circuit layout . In some implementations TCE may provide this ability using graphical toolboxes e.g. toolboxes for signal processing image processing color manipulation data plotting parallel processing etc. . In some implementations TCE may provide these functions as block sets. In some implementations TCE may provide these functions in another way.

A model generated using TCE may include for example any equations assignments constraints computations algorithms and or process flows. The model may be implemented as for example time based block diagrams e.g. via the Simulink software discrete event based diagrams e.g. via the SimEvents software dataflow diagrams state transition diagrams e.g. via the Stateflow software software diagrams a textual array based and or dynamically typed language e.g. via the MATLAB software a list or tree and or another form. A model generated using TCE may include for example a model of a physical system a computing system an engineered system an embedded system a biological system a chemical system etc.

A model element in the model may include for example a function in a TCE environment e.g. a MATLAB function an object in a TCE environment e.g. a MATLAB system object a block in a graphically based environment e.g. a Simulink block a LabView block an Agilent VEE block an Agilent ADS block an Agilent Ptolemy block etc. or the like.

A model may provide a signal to and or receive a signal from external system and or may cause client device to provide a signal to and or receive a signal from external system . For example client device may host TCE that provides the model and may host external system . Additionally or alternatively external system may be hosted by a device other than client device and the model when executed by client device may cause client device to provide a signal to and or receive a signal from external system .

TCE may schedule and or execute a model using one or more computational resources such as one or more central processing units CPUs or cores one or more field programmable gate arrays FPGAs one or more graphics processing units GPUs and or other elements that can be used for computation. TCE may include a compiler that may be used to schedule the model elements of the model allocate hardware resources such as memory and CPUs to the model elements and to the connections that interconnect the model elements or the like.

Server device may include one or more devices capable of receiving generating storing processing and or providing program code and or information related to program code. For example server device may include a computing device such as a server a desktop computer a laptop computer a tablet computer or a similar device. In some implementations server device may host TCE . In some implementations client device may be used to access one or more TCEs running on one or more server devices . For example multiple server devices may be used to execute program code e.g. serially or in parallel and may provide respective results of executing the program code to client device .

In some implementations client device and server device may be owned by different entities. For example an end user may own client device and a third party may own server device . In some implementations server device may include a device operating in a cloud computing environment. In this way front end applications e.g. a user interface may be separated from back end applications e.g. program code execution . Additionally or alternatively server device may perform one more or all operations described elsewhere herein as being performed by client device .

External system may include one or more devices capable of receiving signals from and or providing signals to a model e.g. via client device . In some implementations external system may include an analog device a digital device and or a combination analog digital device. External system may interact with a model e.g. a model hosted by client device . External system may execute code that causes external system to provide a model function and or an interface e.g. to allow the model function to interact with external system .

In some implementations external system may include a system and or subsystem such as a server a desktop computer a laptop computer a tablet computer a mobile phone e.g. a smart phone a camera a camcorder a microphone a video display a robot or the like. Additionally or alternatively external system may include a component of a system and or subsystem such as a sensor an actuator a motor an accelerometer a gyroscope a measurement device an input component an output component a processing component a video processor a transmitter or the like. External system may include a combination of a system a subsystem and or a component in some implementations. External system may communicate with client device using wired and or wireless connections to exchange signals. In some implementations external system may be a hardware system e.g. a hardware system that is separate from or a part of client device and or server device . Additionally or alternatively external system may be a software system e.g. an application executing on a device such as client device server device or another device .

Network may include one or more wired and or wireless networks. For example network may include a cellular network a public land mobile network PLMN a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network e.g. the Public Switched Telephone Network PSTN an ad hoc network an intranet the Internet a fiber optic based network a private network a cloud computing network and or a combination of these or other types of networks.

The number and arrangement of devices and networks shown in are provided as an example. In practice there may be additional devices and or networks fewer devices and or networks different devices and or networks or differently arranged devices and or networks than those shown in . Furthermore two or more devices shown in may be implemented within a single device or a single device shown in may be implemented as multiple distributed devices. Additionally or alternatively a set of devices e.g. one or more devices of environment may perform one or more functions described as being performed by another set of devices of environment .

Bus may include a component that permits communication among the components of device . Processor is implemented in hardware firmware or a combination of hardware and software. Processor may include a processor e.g. a central processing unit CPU a graphics processing unit GPU an accelerated processing unit APU etc. a microprocessor and or any processing component e.g. a field programmable gate array FPGA an application specific integrated circuit ASIC etc. that interprets and or executes instructions and or that is designed to implement one or more computing tasks. In some implementations processor may include multiple processor cores for parallel computing. Memory may include a random access memory RAM a read only memory ROM and or another type of dynamic or static storage device e.g. a flash memory a magnetic memory an optical memory etc. that stores information and or instructions for use by processor .

Storage component may store information and or software related to the operation and use of device . For example storage component may include a hard disk e.g. a magnetic disk an optical disk a magneto optic disk a solid state disk etc. a compact disc CD a digital versatile disc DVD a floppy disk a cartridge a magnetic tape and or another type of computer readable medium along with a corresponding drive. In some implementations storage component may store TCE .

Input component may include a component that permits device to receive information such as via user input e.g. a touch screen display a keyboard a keypad a mouse a button a switch a microphone etc. . Additionally or alternatively input component may include a sensor for sensing information e.g. a global positioning system GPS component an accelerometer a gyroscope an actuator etc. . Output component may include a component that provides output information from device e.g. a display a speaker one or more light emitting diodes LEDs etc. .

Communication interface may include a transceiver like component e.g. a transceiver a separate receiver and transmitter etc. that enables device to communicate with other devices such as via a wired connection a wireless connection or a combination of wired and wireless connections. Communication interface may permit device to receive information from another device and or provide information to another device. For example communication interface may include an Ethernet interface an optical interface a coaxial interface an infrared interface a radio frequency RF interface a universal serial bus USB interface a Wi Fi interface a cellular network interface or the like.

Device may perform one or more processes described herein. Device may perform these processes in response to processor executing software instructions stored by a computer readable medium such as memory and or storage component . A computer readable medium is defined herein as a non transitory memory device. A memory device includes memory space within a single physical storage device or memory space spread across multiple physical storage devices.

Software instructions may be read into memory and or storage component from another computer readable medium or from another device via communication interface . When executed software instructions stored in memory and or storage component may cause processor to perform one or more processes described herein. Additionally or alternatively hardwired circuitry may be used in place of or in combination with software instructions to perform one or more processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

The number and arrangement of components shown in are provided as an example. In practice device may include additional components fewer components different components or differently arranged components than those shown in . Additionally or alternatively a set of components e.g. one or more components of device may perform one or more functions described as being performed by another set of components of device .

For the purpose of assume that a model that is hosted by client device provides signals to and receives signals from external system . As shown in and by reference numbers A and B the model may provide a first model output Model Output 1 and a second model output Model Output 2 and external system may receive the first model output and the second model output as a first system input e.g. System Input 1 that combines Model Output 1 and Model Output 2 . As shown by reference number the model may provide a third model output Model Output 3 which external system may receive as a second system input and a third system input e.g. the Model Output 3 may be duplicated divided etc. to generate System Input 2 and System Input 3 . As shown by reference number the model may provide a fourth model output Model Output 4 which external system may receive as a fourth system input System Input 4 and a fifth system input System Input 5 .

As shown by reference number external system may provide a first system output System Output 1 which the model may receive as a first model input Model Input 1 . As shown by reference number external system may provide a second system output System Output 2 and a third system output System Output 3 and the model may receive the second and third system outputs as a second model input e.g. Model Input 2 shown as a data structure that includes the System Output 2 and System Output 3 .

Assume that one or more signals provided from the model to external system and or from external system to the model are incompatible at the receiving system e.g. the model or external system . For example a particular signal in native form may be incompatible when the particular signal is output at a different data transmission rate using a different data precision using a different data type using a different format or the like than the model or external system is capable of using. As another example the model may output a signal as a digital signal but external system may be an analog device and may require an analog signal as input. In other words a signal output from a model in native form may be incompatible as an input for external system when external system cannot use the signal in the signal s native form e.g. a form of the signal as the signal is output from the model . For example a model may output a digital signal whereas an external system may only be compatible with analog signals. In this situation the model output in native form is incompatible with the external system. Furthermore in this situation the model output may need to be transformed in order to make the model output compatible with the external system. In some implementations an interface may be used to make incompatible signals compatible. For example an interface may transform the model output from a native form to a form compatible with the external system e.g. by transforming a digital signal into an analog signal .

Likewise a signal output from external system may be incompatible in native form as an input to the model when the model cannot use the signal without a transformation of the signal e.g. by an interface . As described in more detail elsewhere herein the transformation may be a transformation of a format of the signal a rate of the signal a data precision of the signal a mapping of the signal or the like. Client device may generate an interface to convert signals into compatible formats as described in more detail below.

For the purpose of assume that client device determines model information by automatically detecting the model information of a model associated with TCE . As shown assume that the model includes a representation of external system and a manner in which external system interacts with the model e.g. model outputs provided as system inputs to external system system outputs provided as model inputs to the model etc. . In some implementations client device may determine the model information based on a user interaction based on an external source or the like. As shown in and by reference number client device may determine model information that describes one or more inputs. As shown client device may determine that Model Input 1 receives a 64 bit per second data stream signal e.g. a stream of packets associated with a data rate of 64 bits per second . As further shown client device may determine that Model Input 2 and Model Input 3 receive a 32 bit per second data structure signal e.g. a data structure associated with a data rate of 64 bits per second that includes information received via Model Input 2 and Model Input 3 .

As shown by reference number client device may determine model information that describes one or more outputs. As further shown client device may determine that Model Output 1 and Model Output 2 are 32 bit per second digital signals e.g. that Model Output 1 and Model Output 2 output discrete digital signals as opposed to continuous analog signals . As further shown client device may determine that Model Output 3 is a 16 bit per second data signal e.g. that Model Output 2 outputs a signal that includes data with a data rate of 16 bits per second . As further shown client device may determine that Model Output 4 is a 64 bit per second data function signal e.g. that Model Output 3 outputs a signal that includes data with a data rate of 64 bits per second and is associated with a callback function performed by external system . Assume that client device stores the model information.

As shown in client device may analyze external system to determine external system information that describes external system . As shown by reference number client device may determine external system information that describes inputs of external system . As shown client device may determine that System Input 1 receives an analog signal e.g. a continuous analog signal as compared to Model Output 1 which provides a discrete digital signal . As further shown client device may determine that System Input 2 and System Input 3 receive 10 kilobit per second data signals. As shown client device may determine that System Input 4 and System Input 5 receive 8 megabit per second data signals.

As further shown in and by reference number client device may determine external system information that describes outputs of external system . As shown client device may determine that System Output 1 provides an 8 megabit per second data stream signal. As further shown client device may determine that System Output 2 and System Output 3 provide 10 kilobit per second data signals.

As shown in client device may determine interface information. Here assume that client device determines the interface information based on user input. In some implementations client device may determine the interface information automatically without user input e.g. based on a type of external system based on information associated with signals based on an external source that describes the interface information or the like . As shown by reference number client device may determine whether the interface is a software map interface a network stream interface a memory map interface a fixed step solver interface or another type of interface. In some implementations a software map interface may refer to an interface that maps particular inputs and outputs of a software program a network stream interface may refer to an interface that processes network stream information between network devices a memory map interface may refer to an interface that maps particular memory addresses to other memory addresses and a fixed step solver interface may refer to an interface that converts a signal to facilitate performance of a fixed step solver analysis. For the purpose of assume that the interface is a software map interface as shown.

As shown by reference number client device may determine signal mapping information that associates inputs and or outputs of the model and or of external system . As shown client device may associate Model Output 1 and Model Output 2 with System Input 1 may associate Model Output 3 with System Input 2 and System Input 3 and may associate Model Output 4 with System Input 4 and System Input 5. As further shown client device may associate Model Input 1 and System Output 1 may associate Model Input 2 and System Output 2 and may associate Model Input 3 and System Output 3. In some implementations the model inputs and system outputs may be associated automatically without user input e.g. based on the model information and or the external system information based on a type of signal etc. . As shown by reference number assume that the user interacts with an input mechanism provided via TCE to cause client device to generate and or provide interface code.

As shown in and by reference number client device may provide the interface code to external system . As shown by reference number external system may compile the interface code in order to execute the interface code e.g. locally . Assume that external system executes the interface code after compiling the interface code. In some implementations external system may execute the interface code without compiling the interface code e.g. the interface code may be interpreted code that may not need to be compiled . As further shown external system may provide an interface based on the interface code. In some implementations client device may execute the interface code and provide the interface.

As shown in and by reference number external system may provide the interface to facilitate interaction between the model and external system . As further shown the interface may convert signals provided by the model to external system and or by external system to the model. As shown by reference number external system may convert signals associated with Model Output 1 and Model Output 2 by combining the signals and by performing interpolation on a combined signal e.g. to convert the combined signal from a discrete digital signal to a continuous analog signal . As shown by reference number external system may process a signal associated with Model Output 3 e.g. by splitting duplicating etc. the signal and by providing split or duplicated signals to System Input 2 and System Input 3 . As shown by reference number external system may perform a callback function on a signal associated with Model Output 4 e.g. external system may execute a segment of code provided within the signal in order to process the signal for System Input 4 and System Input 5 .

As shown by reference number external system may convert a signal associated with System Output 1 by performing First In First Out FIFO buffering e.g. based on the signal including a stream of packets . As shown by reference number external system may convert signals associated with System Output 2 and System Output 3 by creating a data structure based on the signals e.g. by concatenating data included in the signals or the like .

In this way client device may efficiently generate and or provide interface code to generate an interface that facilitates interaction between a model and external system . Client device may generate the interface code based on model information external system information and or interface information. The interface code may be provided to and executed by external device or may be executed locally by client device . By processing signals between the model and external system the interface facilitates interaction between the model and external system .

As indicated above are provided merely as an example. Other examples are possible and may differ from what was described with regard to .

As an example a modeled function may receive inputs or provide outputs having one or more first characteristics that are compatible with TCE e.g. modeled function but that are not compatible with external system e.g. are not compatible with a port of external system . As another example port may receive inputs or provide outputs having one or more second characteristics that are compatible with external system e.g. port but that are not compatible with TCE e.g. modeled function . As shown by reference number one or more inputs one or more outputs and or one or more messages e.g. command messages status messages etc. may be processed by one or more rate adapters to interface signals between a model e.g. a modeled function and external system . Format adapter rate adapter data precision adapter and mapping adapter are described in more detail in connection with .

The adapters shown in are provided as an example. In some implementations interface may include additional adapters fewer adapters different adapters or differently arranged adapters than those shown in .

As shown in in some implementations interface may include format adapter e.g. an adapter that processes a signal based on a format of the signal . For example and as shown format adapter may perform software mapping e.g. may map a structure class function etc. associated with the model to a second structure class function etc. associated with external system graphical mapping e.g. may map a first element of a graphic interface associated with a model to a second element of a graphic interface associated with external system memory mapping e.g. may map a first bit field register address etc. associated with a model to a second bit field register address etc. associated with external system serialization or deserialization e.g. for a stream a packet etc. or another type of format adaptation. In some implementations format adapter may be described by interface information associated with interface . In this way interface may facilitate interaction between sources and destinations that are configured to send and receive different formats of signals.

As shown in in some implementations interface may include rate adapter e.g. a data rate adapter or an adapter that processes a signal based on a data transmission rate . For example and as shown rate adapter may perform sample rate conversion e.g. by performing sample interpolation sample decimation or the like buffering e.g. using a First In First Out FIFO queuing method or the like a temporal decoupling adaptation e.g. using a timed queue or the like analog scheduling e.g. a variable step solver or the like digital scheduling e.g. a rate monotonic scheduler a discrete scheduler or the like and or another similar type of operation. In some implementations rate adapter may be described by interface information associated with interface . In this way interface may facilitate communication between sources and destinations associated with different data transmission rates.

As shown in in some implementations interface may include data precision adapter e.g. an adapter that increases or decreases a number of bits that represent the information . In some implementations and as shown data precision adapter may adapt a digital signal e.g. by performing a quantization adaptation a de quantization adaptation a padding adaptation a truncating adaptation or the like . Additionally or alternatively data precision adapter may convert an analog signal into a digital signal or may convert a digital signal into an analog signal. For example the data precision adapter may perform a discretization to convert a continuous analog signal into a discrete digital signal and or may perform a linearization to convert a discrete digital signal into a continuous analog signal. In some implementations data precision adapter may be described by interface information associated with interface . In this way interface may facilitate interaction between an analog source and a digital destination or between a digital source and an analog destination.

As shown in in some implementations interface may include mapping adapter e.g. an adapter that processes a signal based on a defined signal mapping between a source and a destination . For example and as shown mapping adapter may be configured based on a user input e.g. to provide information that describes a custom mapping the model information the external system information or the like. In some implementations mapping adapter may perform a one to one adaption e.g. may perform signal mapping of one particular input signal address register port etc. to one particular output signal address register port etc. . Additionally or alternatively mapping adapter may perform an M to N adaptation e.g. may perform signal mapping of a first set of input signals addresses registers ports etc. to a second set of output signals addresses registers ports etc. .

For example based on interface information mapping adapter may map a signal from a first source to a pair of signals received at a first destination may map more than one signal of a particular signal type from a second source to a single signal received at the second destination or the like. In some implementations mapping adapter may support operations on the signals. For example mapping adapter may be configured to perform a scalar operation in connection with a signal to perform an operation on a first signal based on a second signal e.g. may multiply the first signal by the second signal may add the first signal to the second signal or the like or the like. In some implementations mapping adapter may be described by interface information associated with interface . In this way client device may support custom mapping based on interface information which may improve versatility of an interface and may allow a user to define custom mappings for interface .

As described above are provided as an example. Other examples are possible and may different from what was described in connection with .

As shown in process may include determining model information that describes a model block . For example client device may determine model information. The model information may describe a model that is to interact with external system via an interface. In some implementations client device may determine the model information automatically. For example client device may determine the model information based on detecting one or more inputs one or more outputs and or information that describes the one or more inputs and or one or more outputs.

In some implementations client device may receive the model information from an external source. For example client device may receive the model information from a user of client device e.g. based on the user providing the model information via a user interface linking a file that contains the model information modifying a file that contains the model information or the like from a network source e.g. based on querying the network source for information associated with the model or the like from another device e.g. server device or the like or from another external source.

A model may interact with external system . For example the model may receive signals from and or provide signals to external system . A signal may include information used by the model and or external system and may be associated with a particular data type e.g. a floating point data type an integer data type a logical data type a fixed point data type a bus data type a data structure data type an object a user defined data type a combination of two or more data types etc. . In some implementations the model may simulate a component of external system such as a device a process a function a block a model a model of a model or the like associated with external system . In that case the model may be executed by external system . Additionally or alternatively the model may be executed by client device and may interact with external system based on the execution. In some implementations the model may be implemented using source code. The model may provide and or receive signals that are incompatible with the model or with external system .

In some implementations the model information may include information related to one or more signals e.g. as described above in connection with . For example the model information may identify the one or more signals as model inputs and or model outputs and or may identify a data type associated with the one or more signals. In some implementations the model information may identify a data transmission rate associated with the one or more signals e.g. a number of bits per second a number of packets per second or the like . In some implementations the model information may identify a data precision associated with the one or more signals e.g. a number of digits bits or the like associated with a particular value of the one or more signals . Client device may use the information related to the one or more signals to design an interface that facilitates interaction between the model and external system .

As further shown in process may include determining external system information that describes an external system block . For example client device may determine external system information. In some implementations client device may determine the external system information based on an external source e.g. by importing a file containing the external system information . In some implementations client device may determine the external system information automatically e.g. by detecting the external system information or the like . For example client device may determine the external system information based on detecting one or more external system inputs one or more external system outputs and or information that describes the one or more external system inputs and or one or more external system outputs. In some implementations client device may determine the external system information based on a user input e.g. a user may provide the external system information may link a file containing the external system information or the like . In essence the external system information may include any information e.g. characteristics relating to signals that are output from external system to the model and or received by external system from the model. Client device may use the external system information to generate interface code that facilitates interaction with the model.

In some implementations the model may simulate a component of external system e.g. a behavior function etc. associated with and or performed by external system . In this case client device e.g. TCE may receive information regarding the external system to allow the external system to be modeled e.g. a file that includes a model of the external system information regarding characteristics of the external system that permits TCE to model the external system etc. . Additionally or alternatively client device e.g. TCE may verify and or test a model of the external system.

The model may simulate the component in order to determine information related to external device . For example assume that external system includes a processor. Assume further that a model simulates a function of the processor. The model when executed may receive signals from and or provide signals to external system to simulate the function of the processor. For example the model may receive an input originally provided toward the processor may perform the function and may provide an output to external system based on performing the function. By generating a model performing the function typically performed by the processor client device may determine information related to external system e.g. a behavior associated with external system and or the processor or the like .

In some implementations the external system information may include information related to one or more signals e.g. as described above in connection with . For example the external system information may identify the one or more signals as external system inputs and or external system outputs and or may identify a data type associated with the one or more signals. In some implementations the external system information may identify a data transmission rate associated with the one or more signals e.g. a number of bits per second a number of packets per second or the like . In some implementations the external system information may identify a data precision associated with the one or more signals e.g. a number of digits bits or the like associated with a particular value of the one or more signals . Client device may use the information related to the one or more signals to design an interface that facilitates interaction between the model and external system .

In some implementations client device may receive the external system information from an external source. For example client device may receive the external system information from a user of client device e.g. based on the user providing the external system information via a user interface based on the user linking a file that contains the external system information based on the user modifying a file that contains the external system information or the like from external system e.g. based on external system providing the external system information based on client device requesting a file stored by external system that includes the external system or the like from a network source e.g. based on querying the network source for information associated with external system or the like from another device e.g. server device or the like or from another external source.

As further shown in process may include determining interface information that describes an interface to facilitate interaction between the model and the external system block . For example client device may receive interface information. The interface information may describe an interface between a model and external system . Client device may use the interface information and or other information to generate and or provide an interface that facilitates interaction between the model and external system e.g. as described above in connection with . In some implementations the interface information may describe the interface the model and or the external system using a standard format such as Extensible Markup Language XML IP XACT or the like.

An interface may be a program a routine source code or the like that facilitates interaction between the model and external system . For example the interface may receive signals from the model may cause client device and or external system to process the signals and may provide processed signals to external system . Additionally or alternatively the interface may receive signals from external system may cause client device and or external system to process the information and may provide processed signals to the model. In some implementations the interface may be stored and or executed on a same device as the model e.g. client device . Additionally or alternatively the interface may be stored and or executed on a different device than the model e.g. the model may be executed by client device and the interface may be stored by and or executed by a separate device that includes external system . In some implementations the interface may be generated and or provided based on a standard interface protocol e.g. an Advanced Extensible Interface AXI protocol a Direct Programming Interface DPI protocol e.g. DPI C a Universal Verification Methodology UVM protocol a transaction level modeling TLM protocol or the like .

In some implementations client device may receive the interface information from an external source. For example client device may receive the interface information from a user of client device e.g. based on the user providing the interface information via a user interface based on the user linking a file that contains the interface information based on the user modifying a file that contains the interface information or the like from a network source e.g. based on querying the network source for interface information or the like from external system e.g. based on external system storing interface information based on querying external system for interface information etc. from another device e.g. server device or the like or from another external source.

The interface information may include information that describes an adapter. An adapter may cause a device to adapt signals transmitted via an interface in order to facilitate interaction between the model and external system . In some implementations the interface information may describe multiple different adapters such as a format adapter a data rate adapter a data precision adapter a mapping adapter and or another type of adapter as described in above in connection with .

In some implementations the interface information may include information related to causing external system to provide the interface. For example the interface information may describe a type of external system to provide the interface a particular type of hardware code and or software code to use to generate the interface code a particular type of component on which the interface will be executed or the like. Based on the interface information client device may provide the interface code to external system for implementation which may allow external system to provide the interface. In this way external system may provide the interface when external system is executing model code which may improve performance when modeling a component of external system .

In some implementations the interface information may include information related to a macro. A macro may define collections of inputs outputs data types and or operations that are to be performed on the inputs and outputs using variables that can be easily edited to modify the number of inputs outputs data types and or operations. For example a single macro line may be used in conjunction with information used to expand the macro language e.g. a defined sequence of characters to define operations to perform on multiple signals a defined sequence of characters to indicate a quantity of the multiple signals for which to define the operations etc. to define interface operations for multiple signals even when the operations performed on the signals are not identical. In this way client device may reduce an amount of coding required by a user of client device by generating interface code based on macros.

As further shown in process may include generating interface code based on the model information the external system information and or the interface information block . For example client device may generate interface code based on the model information the external system information and or the interface information e.g. as described above in connection with . The interface code may cause client device and or external system to provide an interface to facilitate interaction between a model and external system . The interface code may be software code hardware code or a combination of software code and hardware code.

The interface code may include code that defines a name of the interface e.g. a name specified in the interface design information a type of the interface e.g. a memory map interface a software interface a network stream interface a fixed step solver interface or another type of interface a signal mapping of one or more model signals to one or more external system signals information related to one or more adapters e.g. one or more types of adapters processes performed in association with the one or more types of adapters parameters used by the one or more types of adapters and or processes etc. or the like.

In some implementations the interface code may be software code e.g. C C Java Python Perl MATLAB code tool command language Tcl etc. . For example assume that external system is to provide the interface. Assume further that external system is capable of compiling and executing software code e.g. external system may be hosted by client device may be associated with a computer that is capable of compiling and executing software code or the like . In that case client device may provide software code to external system . In some implementations client device may compile the software code and provide compiled software code to external system . In other implementations external system may compile and execute the software code. In this way client device may provide software code to external system for providing the interface which may enable an external system that is capable of executing software code to provide the interface.

In some implementations the interface code may be hardware code e.g. Very High Speed Integrated Circuit VHSIC Hardware Description Language VHDL Verilog SystemVerilog etc. . For example assume that external system is to provide the interface. Assume further that external system is capable of executing hardware code. In that case client device may generate hardware code based on the external system information and or the interface information. For example the external system information and or the interface information may specify that hardware code is to be generated for the interface for external system . Based on the external system information and or the interface information client device may generate the interface code using hardware code. In this way client device may enable external system to provide the interface based on hardware code which may improve performance of client device and may enable an external system that is capable of executing hardware code to provide the interface.

In some implementations client device may dynamically generate interface code. For example assume that client device provides an interface and stores locally interface code for providing the interface. Assume further that client device receives a modification to the interface code and or interface information used to generate the interface code. For example a user of client device may modify an input an output mapping information an adapter or the like. Based on the modification client device may generate updated interface code. Client device may provide an updated interface based on the updated interface code. In this way client device may support dynamic generation of interface code which may cause an interface to be automatically updated based on changes to a model with which the interface is associated.

In some implementations client device may generate model code. For example client device may generate model code based on the model information. The model code when executed may simulate a system modeled by the model. In some implementations client device may execute the model code locally and may receive and or provide a signal to external system based on executing the model code locally. Additionally or alternatively client device may provide a part of the model code to external system and may cause external system to execute the part of the model code to simulate a component of external system . In some implementations client device may generate the model code based on information associated with the component of external system such as one or more operating characteristics of the component a relationship between the component and other components of external system or the like.

As further shown in process may include providing and or causing execution of the interface code block . For example after generating the interface code client device may provide and or cause execution of the interface code. In some implementations client device may compile the interface code before causing execution of the interface code. Additionally or alternatively client device may provide the interface code to another device for compiling and or execution such as external system .

Execution of the interface code may cause a first signal compatible with the model but incompatible with external system to be transformed to a second signal compatible with external system but incompatible with the model. Additionally or alternatively execution of the interface code may cause the second signal to be transformed to the first signal. As described elsewhere herein the transformation may include a data precision transformation a data rate transformation a data format transformation a mapping transformation or the like.

As an example a model output signal output from the model may be transformed to an external system input signal and may be input to the external system. Additionally or alternatively an external system output signal output from the external system may be transformed to a model input signal and may be input to the model. In some implementations the external system input signal may be used e.g. by external system to generate the external system output signal. Thus the interface code when executed may permit the model and external system to communicate using signals that would otherwise be incompatible with the model and or external system .

In some implementations client device may generate a representation of external system and may include the representation in the model. In some implementations the representation may be an executable representation that is executable by client device to simulate behavior of external system . Client device may execute the model e.g. using model code the executable representation of external system and the interface code. When executed the interface code may permit the model and the executable representation of external system to communicate using signals that would otherwise be incompatible with the model and or the executable representation of external system .

In this way client device may efficiently generate and or provide interface code that when executed causes a device to provide an interface to facilitate interaction between a model and external system . Client device may generate the interface code based on model information external system information and or interface information which may improve efficiency of generating the interface by reducing an amount of coding performed by a user of client device . In some implementations the interface code may be provided to and executed by external device which may allow external device to provide an interface when executing model code that simulates a component of external device .

Although shows example blocks of process in some implementations process may include additional blocks fewer blocks different blocks or differently arranged blocks than those depicted in . Additionally or alternatively two or more of the blocks of process may be performed in parallel.

The foregoing disclosure provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above disclosure or may be acquired from practice of the implementations.

As used herein the term component is intended to be broadly construed as hardware firmware and or a combination of hardware and software.

Program code sometimes referred to herein as code is to be broadly interpreted to include text based code that may not require further processing to execute e.g. C code Hardware Description Language HDL code very high speed integrated circuits VHSIC HDL VHDL code Verilog code Java code another type of hardware and or software based code that may be compiled and or synthesized etc. binary code that may be executed e.g. executable files that may be directly executed by an operating system bitstream files that may be used to configure an FPGA Java byte code object files combined together with linker directives source code makefiles etc. text files that may be executed in conjunction with other executables e.g. Python text files Octave files a collection of dynamic link library DLL files with text based combining configuration information that connects pre compiled modules an extensible markup language XML file describing module linkage etc. source code e.g. readable by a human machine code e.g. readable by a machine or the like. In some implementations program code may include different combinations of the above identified classes of code e.g. text based code binary code text files source code machine code etc. . Additionally or alternatively program code may include code generated using a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that may be used to express problems and or solutions using mathematical notations. Additionally or alternatively program code may be of any type such as a function a script an object etc.

Certain user interfaces have been described herein and or shown in the figures. A user interface may include a graphical user interface a non graphical user interface a text based user interface etc. A user interface may provide information for display. In some implementations a user may interact with the information such as by providing input via an input component of a device that provides the user interface for display. In some implementations a user interface may be configurable by a device and or a user e.g. a user may change the size of the user interface information provided via the user interface a position of information provided via the user interface etc. . Additionally or alternatively a user interface may be pre configured to a standard configuration a specific configuration based on a type of device on which the user interface is displayed and or a set of configurations based on capabilities and or specifications associated with a device on which the user interface is displayed.

It will be apparent that systems and or methods described herein may be implemented in different forms of hardware firmware or a combination of hardware and software. The actual specialized control hardware or software code used to implement these systems and or methods is not limiting of the implementations. Thus the operation and behavior of the systems and or methods were described herein without reference to specific software code it being understood that software and hardware can be designed to implement the systems and or methods based on the description herein.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of possible implementations. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one claim the disclosure of possible implementations includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used herein should be construed as critical or essential unless explicitly described as such. Also as used herein the articles a and an are intended to include one or more items and may be used interchangeably with one or more. Furthermore as used herein the term set is intended to include one or more items and may be used interchangeably with one or more. Where only one item is intended the term one or similar language is used. Also as used herein the terms has have having or the like are intended to be open ended terms. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

