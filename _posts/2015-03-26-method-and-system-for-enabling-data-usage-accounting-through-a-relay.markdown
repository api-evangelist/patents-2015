---

title: Method and system for enabling data usage accounting through a relay
abstract: A method and system for enabling data usage accounting is described herein. The method can be practiced on a computing device that has secure applications and unsecure applications installed thereon. Initially, a request for a data session that includes a final endpoint can be received through a secure application. The request for the data session can be intercepted and modified to cause the request to be re-directed back to the secure application. A connection with a relay server can be initiated instead of the final endpoint such that data usage accounting for the data session is to be conducted at a remote location.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09106538&OS=09106538&RS=09106538
owner: OPENPEAK INC.
number: 09106538
owner_city: Boca Raton
owner_country: US
publication_date: 20150326
---
This patent application is a continuation of U.S. patent application Ser. No. 14 615 799 filed on Feb. 6 2015 which is a continuation in part of U.S. patent application Ser. No. 14 608 662 filed on Jan. 29 2015 which is a continuation in part of U.S. patent application Ser. No. 14 573 601 filed on Dec. 17 2014 which is a continuation of U.S. patent application Ser. No. 14 478 066 filed on Sep. 5 2014 now issued as U.S. Pat. No. 8 938 547 on Jan. 20 2015 each of which is incorporated herein by reference in its entirety.

The present description relates to methods and systems for data usage accounting and more particularly to methods and systems for data usage accounting in computing devices with secure enterprise applications and personal applications.

In an effort to increase productivity many employers allow their workers to conduct business related to the employer on their personal mobile devices. In some cases employers also provide some of their employees with company issued mobile devices. In either arrangement an employer understands that a single device may include sensitive data related to that employer in addition to data that is personal to the employee. Several advances have been made in an effort to protect an employer s data in these circumstances. For example OpenPeak Inc. of Boca Raton Fla. has developed solutions that enable a mobile device to include both enterprise and personal data but that isolate the enterprise data from the personal data. As part of these solutions an employee may download secure applications that may be used to conduct transactions related to the enterprise.

Because the employee s device may include both personal and secure applications it may be desirable to bifurcate the process of data usage accounting. In particular the employer may wish to receive an accounting of the data usage associated with the secure applications that have been installed on the employee s device on behalf of the employer. This accounting however needs to be separate from data accounting that may be attributable to unsecure applications that the employee may have installed for personal use.

A method for enabling data usage accounting through a relay is described herein. The method can be practiced on a computing device that has secure applications and unsecure applications installed thereon. Initially a request for a data session that includes a final endpoint can be received through a secure application. The request for the data session can be intercepted and modified to cause the request to be redirected back to the secure application. In addition a connection with a relay component can be initiated instead of the final endpoint such that data usage accounting for the data session is to be conducted at a remote location.

In one example the final endpoint can be provided to the relay server to enable the relay component to establish a connection with the final endpoint. In another example the connection with the relay component that is initiated can be transparent to the secure application and the connection with the relay component that is initiated may be based on a protocol that is non native to the secure application. This arrangement can mean that some portion of the secure application such as the original code of the target application that comprises the secure application may be abstracted away from the connection with the relay component while some other portion of the secure application like a secure framework and or other code that has been integrated with the target application to create the secure application may enable the abstraction and may facilitate the connection with the relay component. As such the original code of the target application does not have to be restructured altered or re written to account for the redirection of the request or for the incompatible protocol of the relay component.

In one embodiment data from the secure application can be buffered while the connection with the relay component or the final endpoint is being established. Initiating the connection with the relay component may include providing an internet protocol IP address of the computing device to the relay component. Further the connection that is initiated with the relay component is configured to support the transport of both unencrypted data and encrypted data for the secure application.

Another method of enabling segregated data usage accounting on a computing device is described herein. At first a secure application that is installed on the device can be launched in which the device may have unsecure applications installed thereon in addition to the secure application. Through the secure application content may be requested from a final destination. In response the content request may be redirected back to the secure application and a connection with a relay server can be initiated to enable retrieval of the requested content from the final destination and to enable an accounting of data of the retrieved content. In one arrangement the initiation of the connection with the relay server only occurs for the secure application and not for the unsecure applications.

Additionally the final destination and an IP address of the computing device may be provided to the relay server. Like the previous method the connection of the relay server may be based on a protocol that is non native to the secure application and redirecting the content request back to the secure application may include natively redirecting the content request back to the secure application. Natively redirecting may refer to the secure application relying on native calls when initially generating the data session request. Also like the previous method initiating the connection with the relay server may include transparently initiating the relay connection with the relay server.

In one embodiment the content request can be redirected back to the secure application for a plurality of predetermined networking calls from the secure application. As an example the connection with the relay server may be predefined and able to accommodate each of the predetermined networking calls. As another example initiating the connection with the relay server may include authenticating the computing device with the relay server prior to permitting data exchange between the secure application and the relay server. In some cases data from the secure application can be buffered while the connection with the relay server is established.

In another arrangement it can be determined whether the computing device is operating on a Wi Fi communication network. In response to the determination a setting can be activated that prevents the content request from being redirected back to the secure application and the initiation of the connection with the relay server.

A method of counting data associated with secure applications is also described herein. In the method a request can be received to establish a relay connection with a requesting secure application installed on a computing device that includes both secure applications and unsecure applications. In response the computing device can be authenticated. If the device is authenticated the relay connection with the requesting secure application can be established and a connection with a final destination specified by the requesting secure application can be initiated. In addition data associated with the final destination connection can be counted such that a data usage amount is determined for the requesting secure application. The counting of the data may only be performed for the secure applications.

Further data associated with the final destination connection may be returned to the secure application over the relay connection. As with the previous methods the relay connection may be based on a protocol that is non native to the requesting secure application. As another example receiving the request to establish the relay connection may include receiving the final destination specified by the requesting secure application and an IP address of the computing device. Establishing the relay connection with the requesting secure application may include establishing the relay connection with the requesting secure application only if the computing device is operating on a predetermined cellular network. This predetermined cellular network may be owned operated or maintained by the same entity that performs the counting of the data associated with the final destination. A report that details the data usage of the secure applications installed on the computing device may also be generated.

A computing device is also described herein. The computing device may include a display that is configured to display both secure and unsecure applications that are installed on the computing device and may also include a processing unit that is communicatively coupled to the display. The processing unit can be configured to receive a data access request through one of the secure applications in which the data access request may include a final destination. The processing unit may also be configured to cause a redirection of the data access request back to the secure application and to cause a connection with a relay server to be initiated to enable an accounting of data associated with the data access request. The relay server can be configured to establish a connection with the final destination specified by the secure application. The processing unit can be further configured to cause the redirection of the data access request and the connection with the relay server for the secure applications but not for the unsecure applications.

In one arrangement the computing device can include a Wi Fi communications stack that is communicatively coupled to the processing unit. The processing unit can be further configured to cause a setting to be activated to prevent the redirection of the data access request and the connection with the relay server if the computing device is connected to a Wi Fi network through the Wi Fi communications stack. This feature may be applicable to other networks. For example the setting may be activated if the computing device is camped on a roaming network or a network in which data usage charges are not applicable or not otherwise incurred for access or use.

The computing device may also include memory that is communicatively coupled to the processing unit. In this case the processing unit can be further configured to cause data from the secure application to be buffered in the memory while the connection with the relay server is established. As another example similar to the methods described above the connection with the relay server may be based on a protocol that is non native to the requesting secure application and the processing unit is further configured to cause the connection with the relay server to be initiated transparently with respect to the requesting secure application. In one embodiment the connection with the relay server can be configured to support unencrypted traffic between the secure application and the final destination. In another embodiment the processing unit can be further configured to cause the connection with the relay server to be initiated by causing a listening socket on a loopback interface to be generated and a back end socket to be generated.

Further features and advantage as well as the structure and operation of various embodiments are described in detail below with reference to the accompanying drawings. It is noted that this description is not limited to the specific embodiments presented herein. Such embodiments are provided for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The features and advantages of the embodiments herein will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

The following detailed description refers to the accompanying drawings that illustrate exemplary embodiments however the scope of the present claims is not limited to these embodiments. Thus embodiments beyond those shown in the accompanying drawings such as modified versions of the illustrated embodiments may nevertheless be encompassed by the present claims.

References in the specification to one embodiment an embodiment an example embodiment one arrangement an arrangement or the like indicate that the embodiment or arrangement described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment or arrangement. Furthermore when a particular feature structure or characteristic is described in connection with an embodiment or arrangement it is submitted that it is within the knowledge of one skilled in the art to implement such feature structure or characteristic in connection with other embodiments or arrangements whether or not explicitly described. The word among as it is used throughout this description should not necessarily be interpreted as requiring exchanges or interaction among three or more applications irrespective of grammar rules. The word a is not necessarily limited to a singular instance of something as it may mean one or more.

Several definitions that apply throughout this document will now be presented. The term exemplary as used herein is defined as an example or an instance of an object apparatus system entity composition method step or process. The term communicatively coupled is defined as a state in which two or more components are connected such that communication signals are able to be exchanged directly or indirectly between the components on a unidirectional or bidirectional or multi directional manner either wirelessly through a wired connection or a combination of both. A computing device is defined as a component that is configured to perform some process or function for a user and includes both mobile and non mobile devices. The term computer readable storage medium is defined as one or more components that are configured to store instructions that are to be executed by one or more processing units.

An application is defined as a program or programs that perform one or more particular tasks on a computing device. Examples of an application include programs that may present a user interface for interaction with a user or that may run in the background of an operating environment that may not present a user interface while in the background. The term operating system is defined as a collection of software components that directs a computing device s operations including controlling and scheduling the execution of other programs and managing storage input output and communication resources. A processing unit or processor is defined as one or more components that execute sets of instructions and the components may be disparate parts or part of a whole unit and may not necessarily be located in the same physical location.

The terms memory memory element or repository are defined as one or more components that are configured to store data either on a temporary or persistent basis. The term shared memory is memory a memory element or a repository that is accessible directly or indirectly by two or more applications or other processes. An interface is defined as a component or a group of components that enable s a device to communicate with one or more different devices whether through hard wired connections wireless connections or a combination of both. An input output device is defined as a device that is configured to at least receive input from a user or a machine that is intended to cause some action or other effect on a component with which the input device is associated. A display is defined as an apparatus that presents information in visual form and may or may not receive input through a touch screen.

The term file system is defined as an abstraction that is used to organize store and retrieve data. The term secure application is defined as an application that has been modified or enhanced from its original form to restrict communications between the application and unauthorized programs applications or devices and to restrict operation of the application based on policy or to alter augment or add features associated with the operation of the application or any combination thereof or in the case of the application not being modified an application that is part of a secure workspace that is protected from data exchanges with applications that are part of a personal or an unsecure workspace. A target application is defined as an application that has been selected for conversion into a secure application. An unsecure application is defined as an application that has not undergone the modification required to convert the application into a secure application and as such is unable to obtain data from a secure application in view of an obfuscation scheme employed by that secure application or is an application that is not part of a secure workspace and is restricted from accessing data from the secure workspace. A hub application is defined as an application that receives input from one or more secure applications and establishes connections with external entities on behalf of the secure applications that provide such input. A virtual machine is defined as a platform independent execution environment that emulates a physical machine.

The term personal workspace is defined as a workspace profile or partition that is configured to contain the personal content and unsecure applications or other unsecure programs associated with a user of a computing device on which the personal workspace sits. The term secure workspace is defined as a workspace profile or partition that is configured to contain secure content secure applications and other secure programs and requires some form of authentication to be accessed.

The term content provider is defined as a site that offers data for consumption by a computing device. The term system service is defined as an application or a set of applications on a computing device that offer one or more features for access by an unsecure application or a secure application. A secure connection is defined as a connection in which at least some portion of the data that is exchanged over the connection is encrypted or otherwise obfuscated from unauthorized parties entities or processes. To consume data means to receive data from a source transmit data to a recipient or both. An external network entity means an entity such as a component or a service that is part of a network that is external to or located remotely from a computing device. An external entity is defined as an entity to which an application wishes to establish a connection. A final endpoint or final destination is the external entity with which an application or process intends to establish a connection based on a data request. A relay server is a server that facilitates a connection between a computing device and a remote or content server or some other final endpoint or destination.

As explained earlier solutions have been developed that enable a mobile device to include both personal and enterprise data. Accordingly it may be useful to segregate data usage accounting associated with the enterprise side from usage associated with the personal space. This process can enable an enterprise to determine how much data that is consumed by the mobile device is the responsibility of the enterprise.

In view of this need a method and system for enabling data usage accounting is described herein. As an example the method can be practiced on a computing device that has secure applications and unsecure applications installed thereon. A request for a data session that includes a final endpoint or destination can be received through a secure application. The request for the data session can be intercepted and modified to cause the request to be re directed back to the secure application. In addition a connection with a relay server can be initiated instead of the final endpoint such that data usage accounting for the data session is to be conducted at a remote location. Moreover this technique can be limited to the secure applications on the computing device meaning the unsecure applications are unaffected. Virtually any type of data can be tracked and counted under this scheme including digitized voice signals and other forms of communication including messaging.

Through this arrangement data tracking can be conducted for secure applications or other applications associated with an enterprise or organization that are installed on a user s computing device based on that user s relationship with that enterprise or organization. This tracking can also be kept apart from any accounting performed for a user s personal usage such as that associated with unsecure applications on the device. Accordingly an enterprise can accurately determine its accountability for data usage by a computing device that includes both enterprise and personal data. This solution may be particularly useful for counting the data of the sessions at a remote location.

Referring to an example of a block diagram of the system architecture of a computing device is shown. In this arrangement the computing device can include a hardware layer a kernel layer and a libraries layer which may include a plurality of native libraries. This architecture may also include a runtime environment a system server a secure framework and an application layer .

In one arrangement the hardware layer may include any number and type of hardware components such as one or more displays one or more input output I O devices one or more processing units and any suitable type and number of memory devices and interfaces . Examples of the I O devices include speakers microphones physical keypads etc. In addition the display can serve as an I O device in the form of a touch screen display. The interface can be configured to support various types of communications including wired or wireless and through any suitable type of standards and protocols. As an example the interface can include one or more cellular communication stacks and one or more Wi Fi communication stacks to enable the computing device to conduct bidirectional communications with one or more cellular networks and one or more Wi Fi networks respectively. In one arrangement the hardware layer may also include a calculation unit which can be configured to calculate or determine or at least assist in the determination or calculation of data usage totals associated with any type of session conducted on the computing device including those originating from the application layer . The calculation unit may be a separate component or may be part of the processing unit . In another arrangement the calculation unit may be remotely located such that it is external to the computing device . In such a case information regarding the sessions may be sent to a remote location that supports the calculation unit and the unit can perform its calculation functions once it receives the information.

In addition the runtime environment can support any suitable number of virtual machines and core libraries although a virtual machine may not be needed in other arrangements such as where native code is employed. The system server can serve as an abstraction for the underlying layers for the applications in the application layer and can provide numerous system services for the applications. As is known in the art a system framework which may be part of an application s process can be employed to enable interaction with the system server or other components. In this example the application layer may include any number of unsecure applications and any number of secure applications one of which may be a core secure application . The secure framework can function in a manner similar to that of a conventional framework but the secure framework can facilitate the encapsulation of a number of secure applications to selectively restrict their data exchanges with the unsecure applications . In particular the secure framework can be configured to intercept and modify certain calls from the secure applications prior to passing them to the system server . In one arrangement these calls may be from the secure applications or the system framework.

In many cases the unsecure applications are associated with the personal data of a user of the computing device . In contrast the secure applications are typically associated with confidential or otherwise sensitive information that belongs to or is associated with an enterprise or some other organization and the user of the device may work for such an entity. In one arrangement a virtual partition or workspace may be created on the computing device in which the secure applications and the core secure application are part of a secure workspace and the unsecure applications are part of a personal workspace . In certain cases a user may be required to provide authentication information such as a password PIN or biometric data to gain access to the secure workspace or to any individual or group of secure applications .

In some cases some of the unsecure applications may be system services that provide features or functionality that is associated with the type of operating system that is installed on the computing device . In some cases the system service may be an application or a set of applications that live in the background and support different tasks associated with the operating system of the device . System services may facilitate the exposure of low level functions of the hardware layer and the kernel layer to the higher level application layer . Many system services may operate with elevated privileges in comparison to other applications. For example a common system service that is typically found on computing devices is a media player which processes and presents media data for a user. Another example of a system service may be a photo viewer which presents digital images for the user. As those skilled in the art will appreciate the examples listed here are not meant to be limiting and there are other system services that may be available on the computing device .

In another embodiment the system services may be trusted unsecure applications that secure applications are permitted to share or otherwise exchange data with. An example of a trusted unsecure application may be an unsecure application that is by default installed on the computing device such as by the manufacturer of the device or a wireless carrier or other entity that provides services to the device . Another example of a trusted unsecure application may be an unsecure application that is listed on an application whitelist for one or more secure applications . By being part of the application whitelist the trusted unsecure application may be preapproved for data exchange with the relevant secure application s . Additional information on application whitelisting can be found in U.S. patent application No. 61 973 898 filed on Apr. 2 2014 which is incorporated by reference herein in its entirety.

As noted above the secure applications and the system architecture may be configured to enable at least some of the calls to the system server to be intercepted. There are several processes available for such a process. For example U.S. patent application No. 62 033 142 which was filed on Aug. 5 2014 and is herein incorporated by reference in its entirety describes a method and system in which some of the system classes are overridden by classes associated with the core secure application which can allow runtime hooks to be applied against certain system calls. Based on this technique some of the calls that the secure applications or a system framework make to the system services can be intercepted and modified a process that will described below.

As another example U.S. patent application Ser. No. 14 205 661 which was filed on Mar. 12 2014 and U.S. patent application Ser. No. 14 205 686 which was also filed on Mar. 12 2014 each of which is herein incorporated by reference in its entirety present methods and systems by which target applications are encapsulated as secure applications for distribution. Once installed and initiated on a computing device the encapsulated application described in these references is loaded into memory and runtime hooks are set to enable application programming interface API calls from the secure application to be intercepted. Similar to the description above at least some of the calls to the system services from the secure applications or a system framework can be modified once they are intercepted. Other information on the process of intercepting certain functions of secure applications can be found in U.S. Pat. No. 8 695 060 issued on Apr. 8 2014 which is also herein incorporated by reference in its entirety.

As described in these incorporated references a secure application can be configured to provide additional features that may not have been otherwise available prior to it being converted into a secure application . As an example a secure application can be arranged to track the amount of data that it uses for a particular session. This process enables an administrator to determine data usage on a per application basis. Of course secure applications may be managed in accordance with many other policies or configurations as is known in the art.

While many applications or target applications are able to be converted into secure applications there are some applications that may not be so modified. For example many system services are default applications that are provided as part of the base configuration of the computing device . The developer of the operating system that provides these system services may not permit the system services to be converted into secure applications . As such many system services may remain as unsecure applications on the computing device . Accordingly the operation of a system service may not be amenable to being controlled or managed as is the case with secure applications . The relevance of this condition will be explained below.

In one embodiment a hub application may be part of the application layer . The hub application may serve as a connection point for any number of secure applications to enable the secure applications to connect to any suitable external entity including various network components. In particular if a secure application requires a connection with an external entity the secure application can request the hub application to facilitate the communication. The hub application can accept such requests from any of the secure applications including from a single secure application at a time or from multiple secure applications simultaneously. In accordance with the description herein such a technique can facilitate the accounting of data usage associated with secure applications . In one example the hub application can be a daemon or some other process that runs in the background. Because the hub application accepts requests from the secure applications it may be considered as part of the secure workspace and may not be permitted to accept requests from the unsecure applications . As an option a similar arrangement can be made for the unsecure applications or alternatively the hub application can be configured to accept requests from both secure applications and unsecure applications .

In an alternative arrangement the computing device may contain personal applications and enterprise applications. In this example the personal applications are designed for the personal interactions of a user while the enterprise applications may be developed for the work or business interactions of a user. The enterprise applications in this setting may not necessarily be secure applications as described herein. In addition a partition may be implemented in the computing device to separate the personal applications from the enterprise applications. For example a user may have separate log ins for gaining access to the personal applications and to the enterprise applications. In this example separate billing paths may be established for the personal applications and the enterprise applications as is presented herein.

Referring to a system that shows the computing device in communication with one or more remote servers is shown. One or more communication networks may facilitate the communications between the computing devices and the remote servers . In this example the computing device may be a mobile computing device although the principles described herein may apply to desktop computers or other fixed equipment. In addition a mobile computing device may be for example a smartphone laptop tablet or other devices that may be carried by an individual. The network s may be composed of various types of components to support wireless or wired communications including both . The network s may also be configured to support local or wide area communications or both . The remote servers may host any number of web sites that offer content that may be retrieved by the computing device and may also be configured to accept data from the computing device . Because the servers offer content they may also be referred to as content providers although the term content provider is certainly not limited to this particular example.

When operating the computing device a user may wish to access data from any one of the remote servers . In some cases the data access request may originate from an unsecure application . In the standard flow the unsecure application may sometimes forward the request to a relevant system service . For example if a user wishes to view a video associated with one of the remote servers through an unsecure application the unsecure application passes the request to a media player of the computing device . The media player then retrieves the data from the appropriate server and presents such data to the user.

In the case of a secure application a similar request would normally be passed to the media player as well. In addition the media player would conventionally establish a connection with the relevant remote server and would present the requested data to the user. But because the system services are typically not permitted to be converted into secure applications implementing the feature of data accounting in them as can be done with secure applications may not be possible. In this instance difficulties are presented in determining the percentage of data usage that is associated with secure applications in comparison to the consumption of data by unsecure applications .

A solution is described here however that enables such an accounting to take place. In particular the initial data request from the secure application can be intercepted and modified prior to being passed to the media player. In view of the modification the media player or other system service can direct the request back to the secure application and a connection can be established between the secure application and the appropriate remote server to facilitate the exchange of data between the secure application and the remote server . This redirection of the request through the secure application can enable an accounting of the amount of data that is associated with this particular session a feature that can be incorporated into secure applications . Accordingly an accurate accounting of data usage associated with at least some or all secure applications on the computing device is now possible. As previously mentioned the counting of the data associated with a secure application is not limited to being performed by the secure application or even the computing device as the calculation can be performed remotely.

This arrangement can enable an entity to determine the percentage of data usage that is attributable to it and to the user on a personal basis. Because data usage may be segregated between enterprise use and personal use the enterprise may be able to craft more accurate data plans with wireless carriers or other similar entities. Moreover the user who may own the computing device would understand that the user would not be charged for data usage associated with that user s work or business and that the user would only be paying for personal data consumption.

Referring to a method of data usage accounting is shown. The method however may include additional or even fewer steps or processes in comparison to what is illustrated in . Moreover the method is not necessarily limited to the chronological order that is shown in . In describing the method reference may be made to and although it is understood that the method may be practiced with any other suitable systems and components and may take advantage of other suitable processes.

At step in a setting that includes both secure applications and unsecure applications a request to access data can be received via one of the secure applications in which the request is intended for a content provider via a system service. The request intended for the content provider via the system service can be intercepted as shown at step . At step the intercepted request can be modified which can cause the system service to direct the request back to the secure application instead of the content provider. A connection can be established with the content provider for the request through the secure application to enable data usage accounting of data that is returned by the content provider as shown at step . Additionally at step content from the content provider can be received at the secure application and the received content from the content provider can be forwarded to the system service for processing as shown at step . An amount of data that is carried over the established connection associated with the secure application can be determined as shown at step .

Referring to a user may wish to access data through for example a secure application that is installed on the computing device . As an example the user may desire to retrieve some type of content such as video through the secure application . The content may need to be retrieved from one of the remote servers . Conventionally the data access request would be passed to the relevant system service and the system service would fetch the content from the remote server . Here however the data access request may be intercepted prior to being handled by the operating system and can be modified to direct the request back to the secure application instead of the remote server . Reference will be made to to help explain this process.

In an example of an interaction between the secure application the system service and the remote server is shown. In the initial step the data access request is received and is intercepted and modified. In this example the data access request is for video that is stored at one of the remote servers that is associated with a website or some other form of digital content and the system service is a media playback application. As such in accordance with earlier discussion the API that is associated with the media playback service can be hooked.

Based on conventional techniques the uniform resource indicator URI related to this data request may be a uniform resource locator URL with the associated content available via the hypertext transfer protocol HTTP or the hypertext transfer protocol secure HTTPS . As part of the modification process the URL may be changed prior to being passed to the system service . The modification of the URL in one embodiment may be based on a port number that is provided by the operating system. For example the secure application may create a listening socket on a loopback interface by requesting a socket and port number from the operating system. As is known in the art the loopback interface can support inter process or inter app communications on the computing device . The requested port may be a predetermined value or may be simply a request to the operating system to provide an available port number. Continuing with the example the URL may be converted into a local host URL that includes the assigned port number and the rest of the information from the original URL. The modified URL may then be passed across to the system service in this case the media player. As will be explained later multiple listening sockets and ports may be requested from the operating system as part of this process.

Consider the following specific but non limiting example. A user may select a link through a secure application which may have the following exemplary URL associated with it 

As noted earlier the secure application may request a socket and port value from the operating system and the port value can factor into the modified URL. In this example the original URL may be transformed into the following local host URL 

Here the port value 4444 is now part of the URL string which can cause the system service to point back to this port created by the secure application . In addition as can be seen the original hostname can be encoded in the t parameter the original path can be encoded in the p parameter and the original parameters can be encoded in the r parameter. Thus the modified URL can include the port value and the remote information can be added as parameters in the modified URL. A similar example for an HTTPS request will be presented below.

In some arrangements as part of this process the secure application can create a proxy when the data is initially requested through the secure application . The proxy can act as the intermediary between the system service and the remote server . In doing so the proxy may listen in on any sockets that were created for the overall modification of the data access request. As an example each secure application can be individually configured to generate the proxy for relevant data requests that it receives.

In another arrangement the secure application may record a copy of the information associated with the original data request and can map that information to the redirect address that has been created. For example in the example above the secure application may record the information associated with the original URL in any suitable database such as the memory of and can map this information to the port that was assigned to the modified URL. This way the secure application can easily determine the original remote server when it receives the modified URL. In an alternative embodiment the information of the original data request may not need to be stored and mapped to the redirect address. In the URL example the original information from the URL can simply be obtained from the modified URL because the original information may be part of the modified information.

Moving back to in the second step the modified data access request can cause the system service to direct the request back to the secure application instead of the original remote server . That is the system service will establish a connection with the secure application via the port that the secure application created. In view of the mapping process described above the secure application is able to determine the original data access request and can establish a connection with the relevant content provider such as an appropriate remote server . In particular based on the example above the secure application can determine the original URL request and can open a connection with the location specified by the original URL. This process is reflected in the third step of . At this point the secure application can fetch the content from the remote server and can return this content to the system service for processing as shown in the fourth step. The user may then consume the requested data similar to a normal session. As will be explained below there may be scenarios where a similar re routing process can be performed to enable data usage tracking but without the invocation of a system service .

As previously noted the secure application may be configured to track data usage. In this case the secure application can determine an amount of data that is carried over the connection that is established with the remote server . This can include both incoming i.e. from remote server to secure application and outgoing i.e. from secure application to remote server content. For example the calculation unit of can work with the secure application to tally the amount of data consumed by this particular session. In addition because each session associated with this particular secure application can be tracked a cumulative amount of data usage for the secure application over a certain time period can be determined. This process may also be conducted for all or at least some of the other secure applications that are installed on the computing device . As previously mentioned the data usage associated with the secure applications may also be counted at a location that is remote to the computing device .

If the secure applications are associated with an enterprise the enterprise can determine the amount of data usage that is tied to each of its secure applications . This feature can enable the enterprise to determine data usage on the device that is solely attributable to it. As a result data usage tracking associated with the secure applications can be segregated from data usage that originates from the unsecure applications.

In one embodiment the connection that is established between the secure application and the remote server can be a secure connection. For example as is known in the art the secure application can be configured to establish virtual private network VPN connections with remote locations. Such a VPN connection is individual to the secure application and is different from a system level VPN. If desired however the connection between the secure application and the remote server is not required to be a secure connection. In addition in another embodiment the secure application may use a system level VPN.

The description above may apply to other protocols that facilitate the exchange of data. For example HTTPS traffic may also be tracked in accordance with the procedures presented herein. In one embodiment additional steps can be taken when dealing with HTTPS traffic to ensure accurate and complete accounting. For example if a user is accessing an HTTPS link through the secure application the original URL may be modified similar to the HTTP examples above but the connection between the system service and the secure application may be left in the open.

Consider the following example. If an HTTPS request is generated the secure application can convert the HTTPS request to an HTTP request when the secure application modifies the URL for purposes of directing the system service back to the secure application . That is the secure application can change the connection type of the data request from a secure connection to an open connection when the data request is modified. Referring back to the URL example above the following HTTPS URL may be received 

The secure application can determine that this is an HTTPS request and can modify the URL. An exemplary conversion is presented here 

As reflected in the string the HTTPS request is converted to an HTTP request. As a result the connection between the system service and the secure application can be out in the open. As will be explained below this feature can enable the secure application to handle re directs from the remote server .

As can also be seen in the string the s parameter can provide an indication that the original URL was an HTTPS request. Accordingly when the secure application establishes the connection between it and the remote server an HTTPS connection can be created. In other words the system service may not be responsible for establishing the HTTPS connection and the secure application may be in control of any security related handshaking and getting the encryption keys in place. The session between the secure application and the remote server can be a transport layer security TLS connection which can terminate at the secure application .

As explained earlier the secure application may be configured to arrange VPN connections in an individual manner. Such an application level VPN can support any type of traffic that is exchanged between the secure application and the remote server including both HTTP and HTTPS streams. In other words the ability of the secure application to provide an application level VPN does not impede the ability of the secure application to modify data access requests and then convert them back to their original form as described above. Further these techniques can be practiced if the secure application is using a system level VPN or is not relying on a VPN connection at all.

As is known in the art some initial data access requests are answered with a re direct which instructs the requesting source to another destination to retrieve the desired content. For example in the case of an HTTP request the requesting device may receive an HTTP re direct from the server which causes the device to generate another HTTP request based on the re direct destination. In addition in some cases a URL playlist may be sent from the server which may include a plurality of URLs. This particular feature may support HTTP live streaming a protocol that enables a client to select from a number of different alternate streams containing the same material encoded at a variety of data rates which can allow the streaming session to adapt to the available data rate.

In one arrangement the secure application may be configured to account for these re directs. For example if the initial data request is an HTTP request and the remote server returns an HTTP re direct the secure application may transform that HTTP re direct in accordance with the modification process described above. By doing so the secure application can ensure that the system service establishes the new re direct connection with the secure application . As such when the secure application detects a re direct the secure application can request another socket and port from the operating system to account for the new destination that originates from the re direct. The secure application can then open a connection between itself and the new and appropriate remote server . This process can be expanded to account for re direct playlists such that socket port pairs are generated when needed for the URLs that make up the playlists.

As can be gleaned from this example the secure application may be required to detect the re directs in the incoming streams. If the original data access request is not based on a secure protocol like HTTPS then the secure application is easily able to detect the re directs. If the original request is based on a secure protocol however complications may arise because the traffic being streamed to the system service may be encrypted. As noted above when dealing with a secure protocol the termination point for the secure connection can be placed at the secure application not the system service . As a result the secure application can decrypt the incoming traffic and can detect the re directs similar to how it would for an unsecure protocol. Thus as an example re directs can be handled for both HTTP and HTTPS.

In some cases other components may assist in the calculation of data for purposes of usage accounting. For example some system services may offer notifications based on certain events that may be related to data usage. In one particular example the secure applications can register for certain callbacks from the system services that are equipped to provide such notifications. As an example if a data session is initiated through a secure application the system service can provide one or more notifications that inform the secure application of the start of the session and its eventual ending. Statistics related to the amount of data that was consumed during the session can be incorporated into the notifications which the secure application can use to track its data usage. The overall total usage related to all or at least some of the secure applications can be determined which can allow the segregation of data consumption between secure and personal profiles as described earlier. In this case however the modification of the data access requests is not required and the system service may fetch data in its conventional manner. When available with the system services this feature may be useful for data accounting particularly when application level VPNs are not incorporated into the secure applications .

The description herein has been presented primarily in terms of a secure application handling the modification of data requests and the data usage tracking. The description however is not so limited. In particular these features can be implemented into an unsecure application such that data usage can be tracked for these types of applications on an individual basis. Similarly the system service that is involved in this process is not limited to a media player. In fact any system service that is involved in the exchange of data with a remote location may be applicable to the description provided herein. For example other system services that apply here may include a texting application a dialer or any other application that facilitates or otherwise supports voice communications a video or camera application or a map application or other application that supports mapping features. In fact the description herein may apply to any type of application whether secure or unsecure that may involve the consumption of content or the use of services in which it may be necessary to distinguish between personal use of such content and services and secure or workspace or enterprise use of the content and services.

In some cases it may not be necessary to invoke the system service to handle a request for a data session. That is the request for the data session may not require the launching of a separate application to handle the request. For example the secure application may be a secure web browser through which a user may attempt to retrieve some data. As is known in the art in prior art cases an application may work with the operating system of a computing device to establish a connection to an external entity such as a web server. In a typical mobile device setting the application may be configured to generate calls for an application programming interface API defined by the portable operating system interface POSIX . In response the operating system can establish a connection to the external entity on behalf of the application.

Similar to the description above techniques can be implemented that enable secure applications to have such calls natively redirected back to them for the purpose of establishing a connection with the appropriate external entity and for enabling an accounting of the data session. This process can also make possible a scheme in which data usage for secure applications is counted separately from that associated with unsecure applications .

Referring to a method for enabling data usage accounting is shown. The method however may include additional or even fewer steps or processes in comparison to what is illustrated in . Moreover the method is not necessarily limited to the chronological order that is shown in . In describing the method reference may be made to the drawings attached hereto although it is understood that the method may be practiced with any other suitable systems and components and may take advantage of other suitable processes.

At step a request for a data session can be received through a secure application and at step in response a listening socket can be created. The request for the data session can be intercepted as shown at step and the request for the data session can be modified to cause the request to be re directed back to the secure application as shown at step . At step a connection can be initiated to enable retrieval of the data in response to the request and an accounting of the data session. At step the listening socket can be torn down. In addition at decision block it can be determined whether a connection with a Wi Fi network is in place. If no the method can resume at decision block . If yes a setting can be activated that prevents the request for the data session from being intercepted and modified as shown at step .

To help explain the method reference will be made to which presents an example of an interaction between a secure application and the system server with the secure framework facilitating the operation. Although the secure framework may be considered part of and can work in conjunction with the secure application to carry out the operations described herein reference may in some cases be made solely to the secure application when explaining this interaction for purposes of convenience. Initially a user may be interacting with the secure application and the user may wish to retrieve some content from for example an external entity. As noted earlier the computing device may have both secure applications and unsecure applications installed thereon.

In response to the user interaction the secure application may generate a request for a data session. As an example the request may be a POSIX connect call although the principles outlined herein are not limited to such an arrangement. This request may include addressing information that is intended to be used to establish the connection with the external entity. Examples of addressing information include the following arguments socket specifies the file descriptor associated with the socket address points to a sockaddr structure containing the peer address and address len specifies the length of the sockaddr structure pointed to by the address argument. Other exemplary arguments and parameters may also be applicable here. In addition the term addressing information is defined as data that is configured to facilitate or enable a connection with one or more destinations. This request may be from the secure application or the system framework associated with the secure application . In either case in response the secure application can generate a listening socket on the loopback interface similar to the procedures previously described. In one arrangement the listening socket can be a temporary socket in that it can be torn down once it serves its purpose of establishing a connection through the secure application .

Once the listening socket is created the secure application can intercept the request for the data session. This interception can occur because the secure framework can be shimmed between the system framework and the operating system and can be configured to recognize predetermined calls for modification or other processing while allowing others to pass unfettered. In any event the data session request can be modified by re writing portions of the request based on the newly created listening socket. For example the addressing information of the connect call may be re written with the addressing information associated with the listening socket. As shown in the modified data session request can then be passed to the system server . This modified call may still be in the native format or in the form that is normally used by the secure application and other applications on the computing device to make calls to the operating system. That is the native version of the relevant function can be called at this stage where it is modified to include the new addressing information for the listening socket.

As part of the modification process the original addressing information or at least some portion of it can be stored and assigned to the listening socket. The original addressing information includes the final destination address and can be used to establish the intended connection as will be explained below. As another part of this process a return can be generated to inform the system framework or the secure application that the requested connect is in progress.

When the operating system receives the data session request the operating system can redirect the data session request back to the secure application as opposed to the intended final destination address. In particular the data session request is returned to the listening socket based on the re written addressing information that replaced the original addressing information. In this case the operating system can wire up a connection between the relevant socket of the secure application and the listening socket through the loopback interface. Once the redirected connection is established on the listening socket the secure application can retrieve the original addressing information and can initiate and establish the connection with the external entity using the original addressing information. Specifically a connect socket can be generated and this connect socket can be used to establish a connection with the appropriate socket of the external entity. Further once the connection with the intended external entity has been initiated or completed the secure application can tear down the listening socket to return system resources.

In this case similar to the process associated with the system service redirection described above the redirection here can be transparent to the secure application or the system framework. That is no changes are required to be made to the secure application or the system framework to enable the interception and modification of the data session request. These objects can continue to make their native calls when seeking to exchange data with an external entity and they are unaware that their calls are being manipulated in this manner. The terms transparent redirection of a request or transparently redirecting a request are defined as a redirection of a request in which the source of the request is unaware of its redirection and examples of a request include a call command or function. The terms native redirection of a request or natively redirecting a request are defined as a redirection of a request in which the source of the request maintains its reliance on native or pre existing protocols or structure to generate or to facilitate the request.

The connection between the secure application and the external entity may support various types of formats or protocols. In some cases the connection to the external entity may be through an application level virtual private network VPN as the secure application may be configured to provide such a feature. The connection may also utilize a system level VPN if desired. In this case the socket of the external entity can be the appropriate socket of the VPN as opposed to a native socket for the back end location. Moreover the connection with the external entity is not necessarily limited to being a secure connection as unsecure connections may be used.

As noted earlier the computing device in which the previously described techniques may be practiced may include a Wi Fi communications stack. The Wi Fi stack can enable the device to exchange data with external entities over a Wi Fi network using any of the protocols within that family for which the device is configured. In some cases it may not be necessary to track data usage associated with secure applications or even unsecure applications when the device is camped on a Wi Fi network. In fact it may not be necessary to do so when the device is operating on any non cellular network or other networks that do not bill users for access. In this instance when the device is using a Wi Fi network or other non billable or free network for data access a setting in the device may be activated to prevent the process of redirecting data access requests. That is because users are typically permitted to access Wi Fi networks for free it may not be necessary to track data usage when the device is using such a network thereby obviating the need to intercept and modify the data access requests in accordance with the processes described above. When the computing device leaves the Wi Fi network and returns to the billing network the setting can be deactivated and the process of data usage counting can begin again.

In another arrangement the tracking of data usage may be limited to a particular network such as a predefined cellular network. Thus the processes described herein may only be executed on this predetermined network. When the computing device is operating on any other network the redirection process may not be carried out. For example if the computing device is roaming on a network or operating on a network that is not its home network the setting that prevents the redirection process may be activated even though use of the roaming network may cause the user to incur data usage charges. Nonetheless if desired data usage tracking based on the techniques described herein may be conducted on roaming networks or Wi Fi or other free access networks.

As previously noted the counting or calculation of data can be performed at a location that is remote to the computing device . For example an arrangement may be configured in which certain data sessions are facilitated by a remote relay to enable data tracking at the relay or some other suitable location. Referring to an example of a system that enables data usage accounting through a relay is illustrated. The system can include one or more computing devices which may have both unsecure applications and secure applications installed thereon and one or more remote servers . The remote servers and the computing devices may exchange various forms of data with one another. Similar to one or more networks may facilitate the exchange of data between the computing devices and the remote servers . The network s may be composed of various types of components to support wireless or wired communications including both . The network s may also be configured to support local or wide area communications or both .

In one arrangement the network may include one or more relay servers and at least some of the relay servers may include a calculation unit . The calculation unit may be a part of the relay server or may be an independent component that is communicatively coupled to the relay server . In either case connections may be established between any of the relay servers and any of the computing devices and between any of the relay servers and any of the remote servers . As will be explained further below when such connections are established the data that is transferred between the computing devices and the remote servers may be calculated or counted such as by the appropriate calculation units . To enable the segregation of data usage accounting between enterprise and personal use such tracking may only be conducted for secure applications or other processes associated with the enterprise and not the user s personal activities.

As mentioned above there may be numerous networks involved to handle the exchange of data between the computing devices and the remote servers . The relay servers however may be associated with a predetermined network such that the computing device is directed to a server in this particular network . Moreover the use of the relay servers and hence the calculation units may be selective in nature. For example this arrangement may only be utilized for secure applications and when the computing device is camped on a certain network for service such as a predetermined cellular network.

Referring to a method of enabling data usage accounting through a relay is illustrated. The method however may include additional or even fewer steps or processes in comparison to what is illustrated in . Moreover the method is not necessarily limited to the chronological order that is shown in . In describing the method reference may be made to the drawings attached hereto although it is understood that the method may be practiced with any other suitable systems and components and may take advantage of other suitable processes.

At step on a computing device that has secure applications and unsecure applications installed thereon a request for a data session can be received through a secure application. The request may include a final endpoint. At step the request for the data session can be intercepted and the request can be modified to cause the request to be redirected back to the secure application as shown at step . At step a connection can be initiated with a relay server instead of the final endpoint such that data usage accounting for the data session is to be conducted at a remote location.

In addition at step the computing device can be authenticated with the relay server prior to permitting data exchange between the secure application and the relay server. At step the final endpoint can be provided to the relay server to enable the relay server to establish a connection with the final endpoint. At step data from the secure application may be buffered while the connection with the relay server or the final endpoint is being established. Data associated with the final endpoint may be counted such that a data usage amount is determined for the requesting secure application as shown at step . At step a report can be generated that details the data usage of the secure applications installed on the computing device. Additionally at decision block it can be determined whether the computing device is operating on a Wi Fi communication network. If not the method can resume at decision block . If yes in response to such a determination a setting can be activated that prevents the data session request to be redirected back to the secure application and the initiation of the connection with the relay server as shown at step .

To help explain the method reference will be made to which shows an example of an interaction among a secure application along with the secure framework a relay server and calculation unit and a remote server . As previously explained the secure framework may be considered to be part of the secure application and the calculation unit may be part of the relay server although other suitable arrangements may apply to these principles.

As an example a user may initiate a data session request through a secure application which may be intercepted and modified to be redirected back to the secure application . This process may be similar to the exemplary techniques described above with respect to re writing URLs and addressing information. That is the secure application via the secure framework may set up a listening socket on a loopback interface and the relevant data can be re written to cause the request to be redirected to the listening socket. Here however the secure application can initiate a connection with the relay server . The relay server which can be any suitable combination of hardware and software can be used to initiate and establish a connection with the final endpoint of the data session request which may be the remote server .

For example when the data session request is intercepted the secure application can re write the addressing information of the request with the addressing information of the listening socket of the loopback interface and can store the replaced addressing information. The stored addressing information may be the addressing information of the final endpoint. As before a return can be generated to inform the system framework or the secure application that the requested connect is in progress. When the operating system establishes the connection between the socket of the secure application and the listening socket the secure application may then generate an accepted or connected socket. The connected socket may enable data to be passed to and from the secure application through the loopback interface. As an example after the connected socket is generated the listening socket may be torn down to preserve system resources although such a step may be bypassed in other circumstances.

In one arrangement when the connection is accepted on the listening socket the secure application may generate a back end socket for initiating and establishing the connection with for example the appropriate relay server which may be listening for connections on its public IP address. As part of initiating the connection with the relay server the connection protocol with the relay server may be negotiated which may include authentication of the computing device or some other process service or component that is part of the device . As an example the IP address of the computing device may be provided to enable the authentication of the device .

While the connection between the secure application and the relay server is being negotiated any data that may be generated by the secure application may be buffered at least until for example the connection with the relay server is established. In particular the connection between the relevant socket of the secure application and the connected socket of the loopback interface may be operatively the same as a connection with a final endpoint. In view of this connection a one to one mapping between the socket of the secure application and the connected socket may exist. As such the secure application may behave naturally and to support this feature any portion of the data generated by the secure application during the negotiation with the relay server can be saved for eventual transmission to the relay server .

In one arrangement once the connection with the relay server is established the secure application can send the final endpoint of the data session request to the relay server . For example the secure application may in accordance with the protocol of the relay server package the addressing information of the final endpoint as part of a payload for the relay server . In one arrangement any buffered data from the secure application may be sent to the relay server . The relay server can establish the connection with the remote server i.e. final endpoint on behalf of the secure application . If necessary the relay server may also buffer data during its negotiation with the remote server . Once the connection is established between the relay server and the remote server data exchanges may occur between the secure application of the computing device and the remote server via the relay server . In an alternative arrangement the buffered data may be held at the computing device until the connection between the relay server and the remote server is completed.

Eventually the data session may end either through the secure application the relay server the remote server or some other process or component. In either case the components processes may tear down the connections and release any relevant system resources. As an example the secure application may close the loopback interface and any associated sockets in the event the session is completed. These principles may also apply in the event that any of the connections are unable to be established in response to the initial request.

As noted previously uniform resource locators URL may be re written particularly in the case of calls being made to a system service . The process of establishing the connection with the relay server and the remote server is similar to that described above. In this case however during the time the connection with the relay server is being established the secure application can perform a domain name system DNS look up of the original host name to determine the appropriate IP address for the final endpoint. Once the IP address is retrieved and the connection with the relay server is established the secure application can provide the IP address as part of the addressing information that is packaged and sent to the relay server . That is the re written URL may be resolved into an address that can be used to establish the connection with the appropriate remote server through the relay server .

In either arrangement any data that is exchanged between the secure application and the remote server may be routed through the relay server . As such the relay server can be configured to facilitate the remote tracking of data usage for the secure application for this exchange as well as other sessions in the future. For example the calculation unit may determine the data usage for the secure application as well as other secure applications and can generate one or more reports that indicate the details of such usage. As an example the data usage can be correlated with a particular computing device through the received IP address of the device . The report can include usage totals on an individual or group basis for any number of secure applications . These reports may then be disseminated to the relevant parties for purposes of billing.

As illustrated here a relay scheme can be leveraged to enable remote data counting for the computing device . There are other alternatives however that may apply. For example the counting of the data based on the exchanges with the external entity may be performed at the computing device such as through the secure application that requested the session or a hub application see . Moreover the calculation units may not necessarily be at the same location as the relay servers as the units may be remote to both the computing device and the relay servers . In addition any number of calculation units may be associated with any number of relay servers . In fact these components may be grouped together in any suitable fashion. For example any number of relay servers and calculation units may be grouped together for an enterprise in which the users of the computing devices being tracked are associated with the enterprise such as employees of the enterprise. These groupings may be isolated from one another to prevent comingling of data streams associated with different enterprises to ensure accurate billing.

As explained earlier this process of establishing a connection with a relay server to enable data exchange with a final destination and for tracking and counting the data associated with such sessions may be restricted to secure applications such as those installed on the computing device . As such this procedure may not be performed for any data sessions associated with unsecure applications . Because the secure applications may likely be associated with or sponsored by an enterprise the process presented here can allow for separate data usage charges for the computing device with respect to a user s personal data and that affiliated with for example the user s employer. Of course such an arrangement may be implemented for any application including individual applications or for certain groups of applications and may not necessarily be limited only to secure applications .

In another arrangement the process of establishing the connection with the relay server as described above may be transparent to the secure application . As another example this connection may be based on a protocol that is non native to the secure application . As is known in the art a secure application is created from a target application that is typically available to one or more parties for download such as through an app store or some other electronic storefront. The original portions of the target application that make up the secure application may be unaware of the connection with the relay server and such portions may continue to make calls in their native formats. This principle also applies to the system framework. The secure framework of the secure application however may be configured to abstract the necessary calls and protocol associated with establishing the connection with the relay server . As such the original developer is relieved of having to change any of the original code to facilitate the relaying arrangement or to operate in accordance with the non native protocol of the relay server .

In one embodiment the protocol for the connection to the relay server can be configured to traverse firewalls or other security features to permit access to protected internal resources. For example this connection may be based on a layer solution transport per the open systems interconnection OSI model as opposed to tunneling or networking technologies associated with layer 3 of the OSI model. This arrangement reduces the complexities of the connection because there are no addressing resolution issues as would be the case for a VPN solution. That is the transport layer solution obviates the need to deploy a networking infrastructure and the non native protocol can be resolved by the secure framework . Almost any type of data may flow over the relay connection as well including encrypted and unencrypted traffic.

The secure application may be configured to connect to an external entity in multiple ways. For example the secure application may use blocking or non blocking sockets or transmission control protocol TCP or user datagram protocol UDP connections. The solutions presented here can accommodate all or at least a portion of the possible ways a secure application may be designed to connect to the external entity. That is the secure framework may be constructed to intercept the various networking calls of the secure application and to perform the redirects and connection initiation with the relay server in accordance with the protocol of the relay server as described above. Thus in one arrangement a plurality of predetermined disparate networking calls or functions of the secure applications that are based on various connection modes may be identified. These calls or functions may then be manipulated when they are activated in accordance with the descriptions above to permit data exchange over a relay connection that is based on a single connection mode.

In some cases the execution of this relaying process may hinge on the type of network to which the computing device is connected. For example if the computing device is camped on a Wi Fi network or some other public private or free access network a setting may be activated that prevents the data session request from being redirected back to the secure application or the initiation of the connection with the relay server or both. In addition the relaying process may only be conducted if the computing device is camped on a predetermined network such as its home cellular network. As such if the device is roaming the setting described above may be activated. Of course these embodiments are not meant to be limiting as the techniques presented here may be applicable to any one of the networks with which the computing device may conduct communications.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. It will be understood by those skilled in the relevant art s that various changes in form and details may be made therein without departing from the spirit and scope of the subject matter as defined in the appended claims. Accordingly the breadth and scope of the present subject matter should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved.

