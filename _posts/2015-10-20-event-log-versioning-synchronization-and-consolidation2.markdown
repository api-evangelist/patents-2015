---

title: Event log versioning, synchronization, and consolidation
abstract: Systems and methods can support log synchronization associated with a complex event handler. An event log can support storing prior event indicators. A new event indicator may be received. Temporal indicators associated with the new event indicator may be analyzed to establish consistent relative ordering with respect to prior event indicators. A synchronized timestamp may be generated in response to analyzing the temporal indicators. The new event indicator may be translated into a canonical form. The translated event indicator may be stored into the event log according to the synchronized timestamp. A rule associated with the complex event handler may be evaluated to identify a stored event dependency within a rule condition of the rule. The event log may be searched to match the translated event indicator against the stored event dependency. The rule may be triggered, and its action executed, in response to satisfying the rule condition.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09633088&OS=09633088&RS=09633088
owner: Voalte, Inc.
number: 09633088
owner_city: Sarasota
owner_country: US
publication_date: 20151020
---
Event logs are computer files that record events and other information occurring in a network of interconnected systems and devices. Events entering a log file are generally sourced from multiple systems. Assembling and arranging events in a log file in a meaningful way typically requires interpreting information presented differently from the multiple systems. This is very difficult when the events are in different formats and use different timestamp conventions or even worse when they are based on different time zones. Clock skew between systems may make relative time ordering necessary. Logging events in a coherent way is also complicated when the systems may indicate versions of events or data using unsynchronized version numbers but it may be desirable that a strict monotonic ordering be maintained between the different sources.

There is a need in the art for event log management technology that can collect analyze classify and update events and other data from disparate sources into a coherent consolidated combined and uniformly formatted event log in order to implement certain rules for actions to be taken upon occurrence of certain patterns of events. Such solutions would be particularly applicable in large information driven enterprises such as healthcare facilities or systems thereof.

In certain example embodiments described herein methods and systems can support log synchronization associated with a complex event handler. An event log may be provided to support storing prior event indicators associated with the complex event handler. A new event indicator may be received. Temporal indicators associated with the new event indicator may be analyzed to establish consistent relative ordering with respect to prior event indicators. A synchronized timestamp may be generated in response to analyzing the temporal indicators. The new event indicator may be translated into a canonical form. The translated event indicator may be stored into the event log according to the synchronized timestamp. A rule associated with the complex event handler may be evaluated to identify a stored event dependency within a rule condition of the rule. The event log may be searched to match the translated event indicator against the stored event dependency. The rule may be triggered in response to satisfying the rule condition. An action associated with the rule may be executed in response to triggering the rule.

These and other aspects objects features and advantages of the example embodiments will become apparent to those having ordinary skill in the art upon consideration of the following detailed description of illustrated example embodiments.

The methods and systems described herein enable various efficient techniques for combining multiple homogeneous and heterogeneous event sources into a coherent consolidated combined and uniformly formatted event log. The techniques may support formatting uniform header data such as metadata or time datestamps supporting log entries to retain stable ordering under standard sorts. In this process the original time datestamps and source of the log information may be preserved for reference but a uniform header provided in a canonical or standardized form may be associated with each log entry to support stable post combination sorting and filtering. The uniform header may comprise a time datestamp in a common or centralized time zone. The common time zone may be derived from one or more of the source log files or specified as a parameter of the event consolidation process. The time datestamp may be derived from each original log line in such a manner as to preserve relative time order within and across various log entry sources being combined. Log entries which are multi line or otherwise cumbersome in format may be represented within the combined log in a manner that preserves their coherence. For example such log entries may be kept grouped together thereby maintaining the order and continuity of their constituent lines or records within the grouping.

The functionality of the various example embodiments will be explained in more detail in the following description read in conjunction with the figures illustrating the program flow. Turning now to the drawings in which like numerals indicate like but not necessarily identical elements throughout the figures example embodiments are described in detail.

The complex event handler and associated complex event handler module can receive incoming events from one or more event generators . The complex event handler can support making decisions based one or more incoming current events in combination with one or more prior events. The decisions may be determined by the rule implementation system based upon incoming events along with prior events stored within the event log .

In addition to the rule implementation system triggering rules based upon incoming events rules associated with the complex event handler may further depend upon prior events retrieved form the event log . The condition of such a rule may be a function of both current incoming events as well as prior events.

According to one or more examples related to an enterprise messaging system a current event may be generated when user Adam sends a first message to user Beth both within the same organization. The complex event handler may store within the event log an event indicating that the first message was sent. Subsequently user Beth s role within the organization may change. For example Beth may have been in charge of deliveries on the day when the first message was sent but is now in charge of customer service. The change in Beth s role may generate an event that may be stored by the complex event handler into the event log . At a future point user Adam may send a second message to user Beth. Sending the message may generate an event which is received by the complex event handler . The complex event handler may trigger a rule within the rule implementation system . The complex rule may be a function of both the incoming event a second message was sent and two prior events a first message was sent and the role associated with the receiver has changed . The two prior events may be retrieved from the event log by the rule implementation system while testing the rule. The rule may indicate that if user Adam sends a first message to user Beth user Beth s role changes and then user Adam sends a second message to user Beth one or more actions should alert one or both of the users Adam and Beth to these details. For example the rule implementation system may generate an action to notify user Adam that user Beth has changed roles within the organization since their last interaction. The rule implementation system may also generate an action to notify user Beth that user Adam sent a message and has been notified of Beth s new role. User Beth may also be provided the opportunity to redirect the second message to the new person in her prior role if appropriate. Furthermore user Beth may be provided with an option to ignore the message or to simply continue the conversation with user Adam.

It should be appreciated that rules associated with the complex event handler can act on multiple incoming current events from multiple sources as well as depending upon multiple prior events retrieved from the event log . A rule may be a function of any number of incoming current events and any number of prior events.

The rule implementation system may be an example of a rule engine system production system or production rule system. These are often used in artificial intelligence automated planning expert systems action selection systems or other such machine based knowledge or decision systems.

The rule implementation system may implement a plurality of rules. Each rule may contain a condition that when matched triggers a resultant action. The rule implementation system may receive events that can be pattern matched against the rule conditions. When a rule condition is properly matched to incoming events and or stored prior events the rule action associated with the condition may be triggered. The rule condition may be specifically formatted to match the formatting of the event data associated with incoming events and or prior events stored within the event log .

According to various embodiments incoming and stored events may be specifically formatted into a standardized canonical form to match the formatting of the rule condition. Similarly the rule conditions may be structured or formed to match the same canonical formatting. Such formatting not only simplifies the insertion process it may also empower operation of the rule implementation system . Since earlier events preceding later events can influence updates it may be important to apply versioning techniques as presented herein to information within the event log . The ordering of such versioned information in the event log may further facilitate the sorting insertion process and operations of the rule implementation system .

The event log may store one or more events received by the complex event handler . The event log can store events within a computerized database a computer memory a computer data storage system a cloud based data store any other data storage mechanisms or any combinations thereof. Events may be time stamped and or date stamped in order to establish when the complex event handler received respective events. According to various embodiments stored prior events may be removed from the event log when they reach a specified expiration date. Similarly a rule may trigger indicating removal of the event entry from the event log . A given rule may also indicate a specified time window of prior events to be considered when evaluating the condition of the rule. According to various embodiments the time stamp may indicate a received time a creation time or a time associated with some related event. Furthermore the time stamp may be delayed or offset by some known determinable or computed amount. Such time specifics may be particularly meaningful important for processing fine grained timing and or batched log event delivery.

The resultant events and actions may be generated as a result of triggering rules within the rule implementation system in association with the complex event handler . When events match the patterns of a rule condition within the rule implementation system that rule may be triggered generating an action. The action may include the generation of or cause the generation of a new event. The complex event handler may itself process that new event which may include storing the event in the event log and or trigger rules within the rule implementation system that match the new event. The actions may also impact or instruct operations of one or more other systems.

The event generator may generally be any source of events that may be processed by the complex event handler . One example event generator according to an example enterprise messaging system may be the transmission of a message from one user to another user. Another example event generator according to an example healthcare enterprise system may the generation of a notification to a member of the nursing staff when an alarm has been generated by a piece of patient instrumentation.

A domain specific language may be specified for use within a particular knowledge domain. Examples of knowledge domains in a healthcare context may include pharmacy nursing radiology cardiology and so forth. The domain specific language may be used in conjunction with one or more of the domain modules to support specifying rules for use within the rule implementation system . Domain users and or domain experts may provide rules expressed using their respective domain specific language . The rules may be provided in plain text speech to text or some other format. The rules may also be provided through a graphical user interface wherein the rules may be constructed using elements of the domain specific language . The domain specific language may inform structure parameters or other information used in the canonical or standardized event log entries. Similarly known standard formats may inform use of the domain specific language . For example events associated with a domain specific language for a pharmacy domain may generally include dosage mass and timing for pharmaceutical agents thus informing the inclusion of such parameters in logged events.

The domain module can support inputs using the domain specific language for defining rules within the rule implementation system . Each given domain can be given a custom domain specific language . Because the domain specific language can be user friendly to a domain user and generally quite specific to that given domain the domain experts generally do not need to be familiar with operational details of the complex event handler or the rule implementation system . A condition generator functionality associated with the domain module may process inputs expressed in the domain specific language into a format for insertion as a rule into the rule implementation system . Similarly an action generator functionality associated with the domain module may process inputs expressed in the domain specific language to extract resultant actions associated with the rule being triggered within the rule implementation system .

The complex event handler the rule implementation system systems associated with the event generators systems associated with the domain module systems associated with the resultant events and actions or any other systems associated with the technology presented herein may be any type of computing machine such as but not limited to those discussed in more detail with respect to . Furthermore any modules such as the complex event handler module or domain module associated with any of these computing machines or any other modules scripts web content software firmware or hardware associated with the technology presented herein may by any of the modules discussed in more detail with respect to . The computing machines discussed herein may communicate with one another as well as other computer machines or communication systems over one or more networks. These networks may include any type of data or communications network including any of the network technology discussed with respect to .

A rule associated with the rule implementation system generally consists of two components a condition and a result or action . The condition and result or action of a rule may be said to have an if then relationship. If the condition obtains then the rule is triggered causing the result or action to be fired. The condition generally obtains by the existence or truth of one or more facts . For example a condition could be if it is Wednesday which would trigger when presented with the fact that the day of the week is Wednesday. The result of firing a rule generally involves one or more other facts or the generation of an action . Firing of the rule can assert or retract one or more other facts . Firing of the rule can also generate one or more actions as output of the rule implementation system . Asserting or retracting one or more facts can alter the state of the rule implementation system which may then affect the conditions of other rules causing them to fire. Altering the state of the rule implementation system may also affect the responses provided to questions processed by the rule implementation system .

The graph database can provide the working memory of the rule implementation system . This working memory can store information comprising the current state or knowledge of the rule implementation system . The graph database can store information in a graph structure where nodes are interconnected by edges. The nodes generally represent entities or things such as individuals departments or equipment. Edges generally connect nodes representing the relationship between them. Each node may be associated with one or more properties which may contain information pertinent to that respective node.

The interface module of the rule implementation system can provide an application programming interface API scripting interface domain specific language DSL or other mechanism for interfacing to the rule implementation system . The interface module may support transactions with other modules systems or entities associated with the rule implementation system . These transactions may involve providing rules or facts to the rule implementation system receiving and reacting to questions retrieving rules or facts from the rule implementation system or receiving actions or information associated with actions from the rule implementation system .

The controller module of the rule implementation system can process control operations of the rule implementation system . Examples of the operations may include executing queries starting stopping rule evaluation and so forth.

The database translation module of the rule implementation system can provide low level interactions with the graph database . These interactions may include performing queries handling fact node assertion or retraction database administrative tasks and so forth.

It should be appreciated that in addition to the interface module controller module database translation module and graph database the rule implementation system may include or interface with other modules. It should also be appreciated that any two or more of these modules may be combined into the same module or modules. Furthermore any one or more of these modules may split functionally or load share between two or more modules or execute on two or more computing machines. Any such modules may operate in a parallel distributed or networked fashion without departing from the spirit or scope of the technology presented herein.

Within the rule implementation system a rule fact graph may be a graph stored in the graph database . The rule fact graph can include various nodes connected by edges. The rule fact graph within the graph database can serve as the working memory of the rule implementation system . This working memory can store information comprising the current state or knowledge of the rule implementation system . This information can include various facts which may be stored as nodes connected by edges representing relationships between the nodes such that the nodes and edges together can encode the rules .

Within the rule implementation system rule interpretation may be provided by executing queries on the rule fact graph within the graph database . The queries may be associated with questions posed to the rule implementation system . The queries and questions may relate to incoming and prior events. The queries can pattern match facts against the encoded rules determining which of the rules to apply. The condition portion of each rule may be tested against the current state of the working memory by pattern matching against the rule fact graph. The consequent results can update the knowledge represented by the rule fact graph by asserting or retracting information. The consequent results can also update the event knowledge by generating an event that will in turn be stored to the event log . Rule interpretation can execute forward chaining when updated information affects other rules implied within the rule fact graph. The results consequent to the condition can also trigger actions which may include generating new events. Queries of the rule fact graph within the graph database can leverage a schema free storage structure supporting index free adjacency where any node may be directly linked by one or more edges to its adjacent nodes such that index lookups are unnecessary.

Within the rule implementation system representing rules within the graph database provides the ability to establish adjacencies between any nodes and thus relationships between facts without having to rebuild schemas or introduce associating tags or indices. Accordingly rules may be changed or introduced anew within the rule fact graph very efficiently and with reduced effort or overhead. Changing this rule representation in a traditional database for a huge number of entries can be extremely time consuming and nearly impossible if such rules changed as frequently as they might in certain complex enterprise environments such as health care information systems.

Some example benefits to the rule implementation system leveraging the graph database relate to it being more suitable for managing ad hoc and changing data with evolving schemas. For example in a healthcare enterprise such as a hospital department the number of nurses may vary from shift to shift as might the number of patients. Furthermore the roles of the nurses may change and the assignments relating the nurses to specific patients may also change. When additional facts and rules associated with the hospital department come into play the rule fact graph can quickly become very large even while being dynamic rapidly changing . For example the additional events facts and rules may relate to procedures medications food service radiology tests specialist referrals admit discharges code emergencies monitoring alarms and so forth. Other example additional events facts and rules may relate to routing messages alarms notifications voice calls text messages or other communication modalities to one or more nurses or wireless mobile devices associated therewith within a healthcare enterprise. This type of information is also well addressed by the schema less structure support of the rule implementation system and its associated graph database .

Another example benefit to the rule implementation system leveraging the graph database stems from the native pattern matching capabilities of the graph database . Such native pattern matching support can provide for significant increases in efficiencies related to rule interpretation and associated queries.

Yet another example benefit to the rule implementation system leveraging the graph database relates to the disk backed performance of the rule implementation system and its associated graph database . Disk backed operation can provide persistence of state by maintain information within the graph database . Disk backed operation can also overcome working memory limitations encountered in operating on a rule fact graph of ever increasing size and complexity. It should be appreciated that this working knowledge associated with the rule fact graph maintains rules and is in contrast to the prior event knowledge stored in the event log .

The rule implementation system systems associated with the rules facts or actions or any other systems associated with the technology presented herein may be any type of computing machine such as but not limited to those discussed in more detail with respect to . Furthermore any modules such as the interface module controller module or database translation module associated with any of these computing machines or any other modules scripts web content software firmware or hardware associated with the technology presented herein may by any of the modules discussed in more detail with respect to . The computing machines discussed herein may communicate with one another as well as other computer machines or communication systems over one or more networks such as network . The network may include any type of data or communications network including any of the network technology discussed with respect to .

Events may generally be any record or indication of an occurrence within a context of interest to a system. The events may originate from one or more event generators . The events may be transferred to the event log for storage by the complex event handler . According to certain embodiments the events may also be transferred to the event log for storage by various other systems or sources.

For example in a healthcare enterprise events may indicate occurrences associated with nurses patients and other entities. Occurrences associated to relationships between such entities may vary from shift to shift thereby generating and updating events. These events may be generated when the roles and assignments of the nurses or conditions of the patients change. Additional events may be generated by regular monitoring of and changes in procedures medications food service radiology tests specialist referrals admit discharges code emergencies alarms and so forth. Other example events may relate to occurrences of routing messages alarms notifications voice calls text messages or other communication modalities to one or more nurses within a healthcare enterprise. Accordingly the event log may store a great deal of information that may be highly dynamic or otherwise frequently updated.

The log management module may receive and process the events in the event log . Such processing may include time reconciliation vector versioning and canonical formatting. The log management module may also store processed events in the log data store . The log management module may include various sub modules including but not limited to a time reconciliation sub module a version vector processing sub module and a canonical formatting sub module.

The time reconciliation sub module can analyze the time datestamp associated with a received event. The time reconciliation sub module may include pre processors specific to each type or format of log entry being ingested to determine and reconcile the time zone and any time offset associated with each log source. The time reconciliation sub module may adjust the log entry to account for clock skew between systems to facilitate relative time ordering of log entries. The time reconciliation sub module may append a reconciled time datestamp to the event and may also maintain the original time datestamp for reference in subsequent processing and sorting of the event log.

Version vector processing can analyze and update a versioning vector associated with an event. A versioning vector is a mechanism for tracking changes to events from multiple sources with multiple updates in a distributed system. Local versioning vectors may be created at each source and may combine the multiple versions of an event to form a tuple an ordered set . Based on the elements within the local versioning vectors the log management module can determine an ordering of events. Furthermore multiple sources may run their own local versioning progressions without having to impose a lock across the disparate source systems each time the version is increased at any one of the sources thus maintaining a lock free ordering of events. The version vectors may be referred to as orthogonal versions or orthogonal version vectors.

Versioning vectors track the events that precede and may therefore influence later event updates. To illustrate how versioning vectors may be processed suppose a first system referred to as system A can act as an event generator and reports events to a complex event handler comprising an event log . As system A generates events is desirable to keep those events synchronized with events stored within the event log . As events or updated events are generated by system A they may be tagged with new version indicators. The new or updated events may be sent to the complex event handler and thus may need to be recorded to the event log . The event log may have been initialized or reinitialized with a snapshot of the entire event state of system A at some point in time. As the event log is updated with events from system A the new or updated events should be stored to the event log in the correct order with respect to themselves and also to other entries within the event log .

In a simplest case where all events from system A have strictly increasing version numbers the event updates supplied to the event log can simply be sorted by these version numbers with snapshots carrying the most recent version number at the time of their generation. However system A may have events with diverse version sourcing or system A may be divided into several subsystems. These may be considered partitions where each can assign its local version numbers internally and the version numbers between any two partitions may be uncorrelated. These partitions of A may be referred to as A A . . . A. Assuming system A can be partitioned such that event versions may be unique between partitions then a versioning vector v s s s may be created according to the two rules. A first rule that v is the versioning vector of each current version number for all Agiven a snapshot of system A. And a second rule that for an update affecting only A is s . . . where is a special null value which does not otherwise occur as a version number. An operation m on may be defined over pairs of version numbers max And an operation M may be defined over pairs of versioning vectors . . . Comparisons and may be defined between version numbers 

It should be appreciated that certain event entries within the event log may be versioned some may have timestamps and some may have both versioning vectors and timestamps. The log management module can handle and attempt to unify these diverse event sources and version or ordering formats.

Canonical formatting can generate canonical or standardized log records. Event header timestamps may be adjusted and standardized by the canonical formatting sub module. Sub second time offsets associated with events may be included in the normalized event header to facilitate relative time ordering of event entries into the event log . Sub sequence numbers may also be included in the normalized event header to facilitate multi line or other cumbersome format entries. Such sub second time offsets and sub sequence numbers may be incorporated into events stored to the event log .

After received events are processed by the log management module they may be recorded to the event log data store . The event log data store may be one or more computer files alphanumerical lists databases or the like and may be stored on media locally in a central sever in a distributed computer system or in storage media made available in a private or public cloud.

The events stored in log data store may subsequently be presented to the complex event handler for further handling and processing to support making decisions determined by the rule implementation system . In this manner the functionality of the log management module and its associated sub modules together with log data store can support operation of the complex event handler and the rule implementation system .

It should be appreciated that in addition to supporting the complex event handler and the rule implementation system the log management module along with the related technology presented herein may support various other applications without departing from the intended spirit or scope. For example the event log technology presented herein may be used to synchronize combine reconcile and manage various types of logs journals tracking systems lists or any other application where records are collected from diverse distributed sources to be joined into a consistent ordered or otherwise coordinated collection.

According to methods and blocks described in the embodiments presented herein and in alternative embodiments certain blocks can be performed in a different order in parallel with one another omitted entirely and or combined between different example methods and or certain additional blocks can be performed without departing from the scope and spirit of the invention. Accordingly such alternative embodiments are included in the invention described herein.

In block the complex event handler can receive an event. The event may be sourced from an event generator . The complex event handler can processed the received events according to the complex event handler module .

In block time reconciliation may be carried out in association with the log management module . A time date stamp associated with the event received by the complex event handler may be read and analyzed. Analysis of the time date stamp may include determination and reconciliation of the time zone clock skew other time offset other variation in time encoding or representation or any combination thereof. Time reconciliation may comprise analysis of various temporal indicators associated with the event. These temporal indicators may include a timestamp a version number a versioning vector know clock skews receipt time of the event indicator relative orderings and so forth.

In block a reconciled time date stamp may be appended to the received event according to the time reconciliation sub module. The reconciled timestamp may also be referred to as a synchronized timestamp. The synchronized timestamp can synchronize newly received event indicators with stored prior event indicators within the event log . The appended time date stamp can support maintaining a relative time ordering of events within the event log even when those events arrive from disparate sources using offset skewed or diversely represented times. The original time date stamp may also be maintained with the event for reference in subsequent processing and sorting of the event log .

In block the version vector processing can analyze and update a versioning vector associated with an event. Versioning vectors may be used to coordinate ordered insertion of events into an event log that may be generated by multiple disparate event sources in a distributed unsynchronized fashion. Local versioning vectors may be created at each source and may combine the multiple versions of an event to form a tuple. Based on the elements within the local versioning vectors the log management module can determine an ordering of events. Furthermore multiple sources may run their own local versioning progressions without having to impose a lock across the disparate source systems each time the version is increased at any one of the sources thus maintaining a lock free ordering of events.

In block canonical formatting can generate canonical or standardized log record formats. Event timestamps may be analyzed for adjustment and standardization. Time offsets associated with events may reconcile variations in time zone clock skew other time offset other variation in time encoding or representation or any combination thereof. Sub sequence indicators may also be included in the canonical event format to facilitate handling multi line or other cumbersome format entries. Such standardization of events can support meaningful integration of received events into the event log .

In block canonical formatting can support a formatting standard compatible with the rule implementation system associated with the complex event handler . Received events may be specifically formatted into one or more standardized canonical form corresponding to the forms associated with the rule conditions. Similarly the rule conditions may be structured or formatted to match the same canonical form. Such standardization not only simplifies the ordered insertion of events into the event log but may also empower operation of the rule implementation system by supporting more meaningful and efficient search and retrieval of prior events from the event log .

In block the log management module can store the received event into the log data store . The analysis and processing of the received event presented herein can simplify the ordered insertion of events into the event log while also improving meaningful and efficient searching and retrieval of prior events from the event log .

In block the log management module can support search and retrieval of events stored in log data store as associated with the event log . Retrieved prior events may be used to test rule conditions associated with the rule implementation system according to the complex event handling technology presented herein presented herein. Triggering a rule may occur in response to satisfying the rule condition associated with the rule . The rule condition may have a stored event dependency defining how the rule condition includes a dependency upon one or more stored prior event indicators. Satisfying the rule condition can comprise matching a retrieved event indicator against such a stored event dependency.

The computing machine may be implemented as a conventional computer system an embedded controller a laptop a server a mobile device a smartphone a set top box a kiosk a vehicular information system one or more processors associated with a television a customized machine any other hardware platform or any combination or multiplicity thereof. The computing machine may be a distributed system configured to function using multiple computing machines interconnected via a data network or bus system.

The processor may be configured to execute code or instructions to perform the operations and functionality described herein manage request flow and address mappings and to perform calculations and generate commands. The processor may be configured to monitor and control the operation of the components in the computing machine . The processor may be a general purpose processor a processor core a multiprocessor a reconfigurable processor a microcontroller a digital signal processor DSP an application specific integrated circuit ASIC a graphics processing unit GPU a field programmable gate array FPGA a programmable logic device PLD a controller a state machine gated logic discrete hardware components any other processing unit or any combination or multiplicity thereof. The processor may be a single processing unit multiple processing units a single processing core multiple processing cores special purpose processing cores co processors or any combination thereof. According to certain embodiments the processor along with other components of the computing machine may be a virtualized computing machine executing within one or more other computing machines.

The system memory may include non volatile memories such as read only memory ROM programmable read only memory PROM erasable programmable read only memory EPROM flash memory or any other device capable of storing program instructions or data with or without applied power. The system memory also may include volatile memories such as random access memory RAM static random access memory SRAM dynamic random access memory DRAM and synchronous dynamic random access memory SDRAM . Other types of RAM also may be used to implement the system memory . The system memory may be implemented using a single memory module or multiple memory modules. While the system memory is depicted as being part of the computing machine one skilled in the art will recognize that the system memory may be separate from the computing machine without departing from the scope of the subject technology. It should also be appreciated that the system memory may include or operate in conjunction with a non volatile storage device such as the storage media .

The storage media may include a hard disk a floppy disk a compact disc read only memory CD ROM a digital versatile disc DVD a Blu ray disc a magnetic tape a flash memory other non volatile memory device a solid state drive SSD any magnetic storage device any optical storage device any electrical storage device any semiconductor storage device any physical based storage device any other data storage device or any combination or multiplicity thereof. The storage media may store one or more operating systems application programs and program modules such as module data or any other information. The storage media may be part of or connected to the computing machine . The storage media may also be part of one or more other computing machines that are in communication with the computing machine such as servers database servers cloud storage network attached storage and so forth.

The module may comprise one or more hardware or software elements configured to facilitate the computing machine with performing the various methods and processing functions presented herein. The module may include one or more sequences of instructions stored as software or firmware in association with the system memory the storage media or both. The storage media may therefore represent examples of machine or computer readable media on which instructions or code may be stored for execution by the processor . Machine or computer readable media may generally refer to any medium or media used to provide instructions to the processor . Such machine or computer readable media associated with the module may comprise a computer software product. It should be appreciated that a computer software product comprising the module may also be associated with one or more processes or methods for delivering the module to the computing machine via the network any signal bearing medium or any other communication or delivery technology. The module may also comprise hardware circuits or information for configuring hardware circuits such as microcode or configuration information for an FPGA or other PLD.

The input output I O interface may be configured to couple to one or more external devices to receive data from the one or more external devices and to send data to the one or more external devices. Such external devices along with the various internal devices may also be known as peripheral devices. The I O interface may include both electrical and physical connections for operably coupling the various peripheral devices to the computing machine or the processor . The I O interface may be configured to communicate data addresses and control signals between the peripheral devices the computing machine or the processor . The I O interface may be configured to implement any standard interface such as small computer system interface SCSI serial attached SCSI SAS fiber channel peripheral component interconnect PCI PCI express PCIe serial bus parallel bus advanced technology attachment ATA serial ATA SATA universal serial bus USB Thunderbolt FireWire various video buses and the like. The I O interface may be configured to implement only one interface or bus technology. Alternatively the I O interface may be configured to implement multiple interfaces or bus technologies. The I O interface may be configured as part of all of or to operate in conjunction with the system bus . The I O interface may include one or more buffers for buffering transmissions between one or more external devices internal devices the computing machine or the processor .

The I O interface may couple the computing machine to various input devices including mice touch screens scanners biometric readers electronic digitizers sensors receivers touchpads trackballs cameras microphones keyboards any other pointing devices or any combinations thereof. The I O interface may couple the computing machine to various output devices including video displays speakers printers projectors tactile feedback devices automation control robotic components actuators motors fans solenoids valves pumps transmitters signal emitters lights and so forth.

The computing machine may operate in a networked environment using logical connections through the network interface to one or more other systems or computing machines across the network . The network may include wide area networks WAN local area networks LAN intranets the Internet wireless access networks wired networks mobile networks telephone networks optical networks or combinations thereof. The network may be packet switched circuit switched of any topology and may use any communication protocol. Communication links within the network may involve various digital or an analog communication media such as fiber optic cables free space optics waveguides electrical conductors wireless links antennas radio frequency communications and so forth.

The processor may be connected to the other elements of the computing machine or the various peripherals discussed herein through the system bus . It should be appreciated that the system bus may be within the processor outside the processor or both. According to some embodiments any of the processor the other elements of the computing machine or the various peripherals discussed herein may be integrated into a single device such as a system on chip SOC system on package SOP or ASIC device.

In situations in which the systems discussed here collect personal information about users or may make use of personal information the users may be provided with a opportunity to control whether programs or features collect user information e.g. information about a user s social network social actions or activities profession a user s preferences or a user s current location or to control whether and or how to receive content from the content server that may be more relevant to the user. In addition certain data may be treated in one or more ways before it is stored or used so that personally identifiable information is removed. For example a user s identity may be treated so that no personally identifiable information can be determined for the user or a user s geographic location may be generalized where location information is obtained such as to a city ZIP code or state level so that a particular location of a user cannot be determined. Thus the user may have control over how information is collected about the user and used by a content server.

One or more aspects of embodiments may comprise a computer program that embodies the functions described and illustrated herein wherein the computer program is implemented in a computer system that comprises instructions stored in a machine readable medium and a processor that executes the instructions. However it should be apparent that there could be many different ways of implementing embodiments in computer programming and the invention should not be construed as limited to any one set of computer program instructions. Further a skilled programmer would be able to write such a computer program to implement an embodiment of the disclosed invention based on the appended flow charts and associated description in the application text. Therefore disclosure of a particular set of program code instructions is not considered necessary for an adequate understanding of how to make and use the invention. Further those skilled in the art will appreciate that one or more aspects of the invention described herein may be performed by hardware software or a combination thereof as may be embodied in one or more computing systems. Moreover any reference to an act being performed by a computer should not be construed as being performed by a single computer as more than one computer may perform the act.

The example embodiments described herein can be used with computer hardware and software that perform the methods and processing functions described previously. The systems methods and procedures described herein can be embodied in a programmable computer computer executable software or digital circuitry. The software can be stored on computer readable media. For example computer readable media can include a floppy disk RAM ROM hard disk removable media flash memory memory stick optical media magneto optical media CD ROM etc. Digital circuitry can include integrated circuits gate arrays building block logic field programmable gate arrays FPGA etc.

The example systems methods and acts described in the embodiments presented previously are illustrative and in alternative embodiments certain acts can be performed in a different order in parallel with one another omitted entirely and or combined between different example embodiments and or certain additional acts can be performed without departing from the scope and spirit of embodiments of the invention. Accordingly such alternative embodiments are included in the inventions described herein.

Although specific embodiments have been described above in detail the description is merely for purposes of illustration. It should be appreciated therefore that many aspects described above are not intended as required or essential elements unless explicitly stated otherwise. Modifications of and equivalent components or acts corresponding to the disclosed aspects of the example embodiments in addition to those described above can be made by a person of ordinary skill in the art having the benefit of the present disclosure without departing from the spirit and scope of the invention defined in the following claims the scope of which is to be accorded the broadest interpretation so as to encompass such modifications and equivalent structures.

