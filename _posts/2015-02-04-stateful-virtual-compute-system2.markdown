---

title: Stateful virtual compute system
abstract: A system for providing a stateful virtual compute system is provided. The system may be configured to maintain a plurality of virtual machine instances. The system may be further configured to receive a request to execute a program code and select a virtual machine instance to execute the program code on the selected virtual machine instance. The system may further associate the selected virtual machine instance with shared resources and allow program codes executed in the selected virtual machine instance to access the shared resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09588790&OS=09588790&RS=09588790
owner: Amazon Technologies, Inc.
number: 09588790
owner_city: Seattle
owner_country: US
publication_date: 20150204
---
The present application s Applicant previously filed the following U.S. patent application on Sep. 30 2014 

The disclosure of the above referenced application is hereby incorporated by reference in its entirety.

Generally described computing devices utilize a communication network or a series of communication networks to exchange data. Companies and organizations operate computer networks that interconnect a number of computing devices to support operations or provide services to third parties. The computing systems can be located in a single geographic location or located in multiple distinct geographic locations e.g. interconnected via private or public communication networks . Specifically data centers or data processing centers herein generally referred to as a data center may include a number of interconnected computing systems to provide computing resources to users of the data center. The data centers may be private data centers operated on behalf of an organization or public data centers operated on behalf or for the benefit of the general public.

To facilitate increased utilization of data center resources virtualization technologies may allow a single physical computing device to host one or more instances of virtual machines that appear and operate as independent computing devices to users of a data center. With virtualization the single physical computing device can create maintain delete or otherwise manage virtual machines in a dynamic manner. In turn users can request computer resources from a data center including single computing devices or a configuration of networked computing devices and be provided with varying numbers of virtual machine resources.

In some scenarios virtual machine instances may be configured according to a number of virtual machine instance types to provide specific functionality. For example various computing devices may be associated with different combinations of operating systems or operating system configurations virtualized hardware resources and software applications to enable a computing device to provide different desired functionalities or to provide similar functionalities more efficiently. These virtual machine instance type configurations are often contained within a device image which includes static data containing the software e.g. the OS and applications together with their configuration and data files etc. that the virtual machine will run once started. The device image is typically stored on the disk used to create or initialize the instance. Thus a computing device may process the device image in order to implement the desired software configuration.

Companies and organizations no longer need to acquire and manage their own data centers in order to perform computing operations e.g. execute code including threads programs functions software routines subroutines processes etc. . With the advent of cloud computing storage space and compute power traditionally provided by hardware computing devices can now be obtained and configured in minutes over the Internet. Thus developers can quickly purchase a desired amount of computing resources without having to worry about acquiring physical machines. Such computing resources are typically purchased in the form of virtual computing resources or virtual machine instances. These instances of virtual machines are software implementations of physical machines e.g. computers which are hosted on physical computing devices and may contain operating systems and applications that are traditionally provided on physical machines. These virtual machine instances are configured with a set of computing resources e.g. memory CPU disk network etc. that applications running on the virtual machine instances may request and can be utilized in the same manner as physical computers.

However even when virtual computing resources are purchased e.g. in the form of virtual machine instances developers still have to decide how many and what type of virtual machine instances to purchase and how long to keep them. For example the costs of using the virtual machine instances may vary depending on the type and the number of hours they are rented. In addition the minimum time a virtual machine may be rented is typically on the order of hours. Further developers have to specify the hardware and software resources e.g. type of operating systems and language runtimes etc. to install on the virtual machines. Other concerns that they might have include over utilization e.g. acquiring too little computing resources and suffering performance issues under utilization e.g. acquiring more computing resources than necessary to run the codes and thus overpaying prediction of change in traffic e.g. so that they know when to scale up or down and instance and language runtime startup delay which can take 3 10 minutes or longer even though users may desire computing capacity on the order of seconds or even milliseconds.

There may be services that provide such users with low latency compute capacity that can be utilized to execute their program codes by maintaining a pool of pre initialized virtual machine instances that are ready for use as soon as a user request is received delay sometimes referred to as latency associated with executing the user code e.g. instance and language runtime startup time can be significantly reduced.

However depending on the implementation such services may not allow multiple invocations of the user code or invocations of multiple user codes to share computing resources e.g. memory network disk etc. . For example a user may wish to use multiple program codes to create and modify a common set of persistent data that is to outlive individual invocations of the program codes. In another example the user may wish to allow some program codes to have access to common resources associated with the user. Thus an improved method of allowing multiple invocations of program codes executed on a virtual compute system to share resources while maintaining low latency and high scalability is desired.

According to aspects of the present disclosure by allowing certain resources to be shared across multiple invocations of one or more program codes multiple instances multiple users and or multiple services e.g. customer owned file system services the virtual compute system can provide additional tools at the users disposal at the programming level and allow the users to program their codes in a more convenient and or simplified fashion.

Generally described aspects of the present disclosure relate to the management of virtual machine instances and containers created therein. Specifically systems and methods are disclosed which facilitate management of virtual machine instances in a virtual compute system. The virtual compute system maintains a pool of virtual machine instances that have one or more software components e.g. operating systems language runtimes libraries etc. loaded thereon. Maintaining the pool of virtual machine instances may involve creating a new instance acquiring a new instance from an external instance provisioning service destroying an instance assigning reassigning an instance to a user modifying an instance e.g. containers or resources therein etc. The virtual machine instances in the pool can be designated to service user requests to execute program codes. In the present disclosure the phrases program code user code and cloud function may sometimes be interchangeably used. The program codes can be executed in isolated containers that are created on the virtual machine instances. Since the virtual machine instances in the pool have already been booted and loaded with particular operating systems and language runtimes by the time the requests are received the delay associated with finding compute capacity that can handle the requests e.g. by executing the user code in one or more containers created on the virtual machine instances is significantly reduced.

In another aspect a virtual compute system may monitor and log information related to the amount of resources allocated for executing user code. By doing so the virtual compute system may be able to identify opportunities for improving the performance of the user code execution by adjusting the amount of allocated resources. Error rates may be reduced by increasing the amount of allocated resources in the event of over utilization and costs associated with executing the user code may be reduced by decreasing the amount of allocated resources in the event of under utilization.

Specific embodiments and example applications of the present disclosure will now be described with reference to the drawings. These embodiments and example applications are intended to illustrate and not limit the present disclosure.

With reference to a block diagram illustrating an embodiment of a virtual environment will be described. The example shown in includes a virtual environment in which users e.g. developers etc. of user computing devices may run various program codes using the virtual computing resources provided by a virtual compute system .

By way of illustration various example user computing devices are shown in communication with the virtual compute system including a desktop computer laptop and a mobile phone. In general the user computing devices can be any computing device such as a desktop laptop mobile phone or smartphone tablet kiosk wireless device and other electronic devices. In addition the user computing devices may include web services running on the same or different data centers where for example different web services may programmatically communicate with each other to perform one or more techniques described herein. Further the user computing devices may include Internet of Things IoT devices such as Internet appliances and connected devices. The virtual compute system may provide the user computing devices with one or more user interfaces command line interfaces CLI application programming interfaces API and or other programmatic interfaces for generating and uploading user codes invoking the user codes e.g. submitting a request to execute the user codes on the virtual compute system scheduling event based jobs or timed jobs tracking the user codes and or viewing other logging or monitoring information related to their requests and or user codes. Although one or more embodiments may be described herein as using a user interface it should be appreciated that such embodiments may additionally or alternatively use any CLIs APIs or other programmatic interfaces.

The user computing devices access the virtual compute system over a network . The network may be any wired network wireless network or combination thereof. In addition the network may be a personal area network local area network wide area network over the air broadcast network e.g. for radio or television cable network satellite network cellular telephone network or combination thereof. For example the network may be a publicly accessible network of linked networks possibly operated by various distinct parties such as the Internet. In some embodiments the network may be a private or semi private network such as a corporate or university intranet. The network may include one or more wireless networks such as a Global System for Mobile Communications GSM network a Code Division Multiple Access CDMA network a Long Term Evolution LTE network or any other type of wireless network. The network can use protocols and components for communicating via the Internet or any of the other aforementioned types of networks. For example the protocols used by the network may include Hypertext Transfer Protocol HTTP HTTP Secure HTTPS Message Queue Telemetry Transport MQTT Constrained Application Protocol CoAP and the like. Protocols and components for communicating via the Internet or any of the other aforementioned types of communication networks are well known to those skilled in the art and thus are not described in more detail herein.

The virtual compute system is depicted in as operating in a distributed computing environment including several computer systems that are interconnected using one or more computer networks. The virtual compute system could also operate within a computing environment having a fewer or greater number of devices than are illustrated in . Thus the depiction of the virtual compute system in should be taken as illustrative and not limiting to the present disclosure. For example the virtual compute system or various constituents thereof could implement various Web services components hosted or cloud computing environments and or peer to peer network configurations to implement at least a portion of the processes described herein.

Further the virtual compute system may be implemented in hardware and or software and may for instance include one or more physical or virtual servers implemented on physical computer hardware configured to execute computer executable instructions for performing various features that will be described herein. The one or more servers may be geographically dispersed or geographically co located for instance in one or more data centers.

In the environment illustrated the virtual environment includes a virtual compute system which includes a frontend a warming pool manager a worker manager and a state manager . In the depicted example virtual machine instances instances are shown in a warming pool A managed by the warming pool manager and instances are shown in an active pool A managed by the worker manager . The illustration of the various components within the virtual compute system is logical in nature and one or more of the components can be implemented by a single computing device or multiple computing devices. For example the instances can be implemented on one or more physical computing devices in different various geographic regions. Similarly each of the frontend the warming pool manager the worker manager and the state manager can be implemented across multiple physical computing devices. Alternatively one or more of the frontend the warming pool manager the worker manager and the state manager can be implemented on a single physical computing device. In some embodiments the virtual compute system may comprise multiple frontends multiple warming pool managers multiple worker managers and or multiple capacity managers. Although six virtual machine instances are shown in the example of the embodiments described herein are not limited as such and one skilled in the art will appreciate that the virtual compute system may comprise any number of virtual machine instances implemented using any number of physical computing devices. Similarly although a single warming pool and a single active pool are shown in the example of the embodiments described herein are not limited as such and one skilled in the art will appreciate that the virtual compute system may comprise any number of warming pools and active pools.

In the example of the virtual compute system is illustrated as being connected to the network . In some embodiments any of the components within the virtual compute system can communicate with other components e.g. the user computing devices and auxiliary services which may include monitoring logging billing services storage service an instance provisioning service and or other services that may communicate with the virtual compute system of the virtual environment via the network . In other embodiments not all components of the virtual compute system are capable of communicating with other components of the virtual environment . In one example only the frontend may be connected to the network and other components of the virtual compute system may communicate with other components of the virtual environment via the frontend .

Users may use the virtual compute system to execute user code thereon. For example a user may wish to run a piece of code in connection with a web or mobile application that the user has developed. One way of running the code would be to acquire virtual machine instances from service providers who provide infrastructure as a service configure the virtual machine instances to suit the user s needs and use the configured virtual machine instances to run the code. Alternatively the user may send a code execution request to the virtual compute system . The virtual compute system can handle the acquisition and configuration of compute capacity e.g. containers instances etc. which are described in greater detail below based on the code execution request and execute the code using the compute capacity. The virtual compute system may automatically scale up and down based on the volume thereby relieving the user from the burden of having to worry about over utilization e.g. acquiring too little computing resources and suffering performance issues or under utilization e.g. acquiring more computing resources than necessary to run the codes and thus overpaying .

The frontend processes all the requests to execute user code on the virtual compute system . In one embodiment the frontend serves as a front door to all the other services provided by the virtual compute system . The frontend processes the requests and makes sure that the requests are properly authorized. For example the frontend may determine whether the user associated with the request is authorized to access the user code specified in the request.

The user code as used herein may refer to any program code e.g. a program routine subroutine thread etc. written in a specific program language. In the present disclosure the terms code user code and program code may be used interchangeably. Such user code may be executed to achieve a specific task for example in connection with a particular web application or mobile application developed by the user. For example the user codes may be written in JavaScript node.js Java Python and or Ruby. The request may include the user code or the location thereof and one or more arguments to be used for executing the user code. For example the user may provide the user code along with the request to execute the user code. In another example the request may identify a previously uploaded program code e.g. using the API for uploading the code by its name or its unique ID. In yet another example the code may be included in the request as well as uploaded in a separate location e.g. the storage service or a storage system internal to the virtual compute system prior to the request is received by the virtual compute system . The virtual compute system may vary its code execution strategy based on where the code is available at the time the request is processed.

The frontend may receive the request to execute such user codes in response to Hypertext Transfer Protocol Secure HTTPS requests from a user. Also any information e.g. headers and parameters included in the HTTPS request may also be processed and utilized when executing the user code. As discussed above any other protocols including for example HTTP MQTT and CoAP may be used to transfer the message containing the code execution request to the frontend . The frontend may also receive the request to execute such user codes when an event is detected such as an event that the user has registered to trigger automatic request generation. For example the user may have registered the user code with an auxiliary service and specified that whenever a particular event occurs e.g. a new file is uploaded the request to execute the user code is sent to the frontend . Alternatively the user may have registered a timed job e.g. execute the user code every 24 hours . In such an example when the scheduled time arrives for the timed job the request to execute the user code may be sent to the frontend . In yet another example the frontend may have a queue of incoming code execution requests and when the user s batch job is removed from the virtual compute system s work queue the frontend may process the user request. In yet another example the request may originate from another component within the virtual compute system or other servers or services not illustrated in .

A user request may specify one or more third party libraries including native libraries to be used along with the user code. In one embodiment the user request is a ZIP file containing the user code and any libraries and or identifications of storage locations thereof . In some embodiments the user request includes metadata that indicates the program code to be executed the language in which the program code is written the user associated with the request and or the computing resources e.g. memory CPU storage network packets etc. to be reserved for executing the program code. For example the program code may be provided with the request previously uploaded by the user provided by the virtual compute system e.g. standard routines and or provided by third parties. In some embodiments resource level constraints e.g. how much memory is to be allocated for executing a particular user code are specified for the particular user code and may not vary over each execution of the user code. In such cases the virtual compute system may have access to such resource level constraints before each individual request is received and the individual requests may not specify such resource level constraints. In some embodiments the resource level constraints are adjusted over time and may vary across different executions of a single program code. For example the same program code may be used to process two different sets of data where one set of data requires more resources than the other. In such a case the user may specify different resource constraints for the two different executions or the virtual compute system may automatically adjust the amount of resources allocated to each execution of the program code based on spatial e.g. in other parts of the virtual compute system or historical e.g. over time trends for the user and or program code. In some embodiments the user request may specify other constraints such as permission data that indicates what kind of permissions that the request has to execute the user code. Such permission data may be used by the virtual compute system to access private resources e.g. on a private network .

In some embodiments the user request may specify the behavior that should be adopted for handling the user request. In such embodiments the user request may include an indicator for enabling one or more execution modes in which the user code associated with the user request is to be executed. For example the request may include a flag or a header for indicating whether the user code should be executed in a debug mode in which the debugging and or logging output that may be generated in connection with the execution of the user code is provided back to the user e.g. via a console user interface . In such an example the virtual compute system may inspect the request and look for the flag or the header and if it is present the virtual compute system may modify the behavior e.g. logging facilities of the container in which the user code is executed and cause the output data to be provided back to the user. In some embodiments the behavior mode indicators are added to the request by the user interface provided to the user by the virtual compute system . Other features such as source code profiling remote debugging etc. may also be enabled or disabled based on the indication provided in the request.

In some embodiments the virtual compute system may include multiple frontends . In such embodiments a load balancer may be provided to distribute the incoming requests to the multiple frontends for example in a round robin fashion. In some embodiments the manner in which the load balancer distributes incoming requests to the multiple frontends may be based on the state of the warming pool A and or the active pool A. For example if the capacity in the warming pool A is deemed to be sufficient the requests may be distributed to the multiple frontends based on the individual capacities of the frontends e.g. based on one or more load balancing restrictions . On the other hand if the capacity in the warming pool A is less than a threshold amount one or more of such load balancing restrictions may be removed such that the requests may be distributed to the multiple frontends in a manner that reduces or minimizes the number of virtual machine instances taken from the warming pool A. For example even if according to a load balancing restriction a request is to be routed to Frontend A if Frontend A needs to take an instance out of the warming pool A to service the request but Frontend B can use one of the instances in its active pool to service the same request the request may be routed to Frontend B.

The warming pool manager ensures that virtual machine instances are ready to be used by the worker manager when the virtual compute system receives a request to execute user code on the virtual compute system . In the example illustrated in the warming pool manager manages the warming pool A which is a group sometimes referred to as a pool of pre initialized and pre configured virtual machine instances that may be used to service incoming user code execution requests. In some embodiments the warming pool manager causes virtual machine instances to be booted up on one or more physical computing machines within the virtual compute system and added to the warming pool A. In other embodiments the warming pool manager communicates with an auxiliary virtual machine instance service e.g. the instance provisioning service of to create and add new instances to the warming pool A. In some embodiments the warming pool manager may utilize both physical computing devices within the virtual compute system and one or more virtual machine instance services to acquire and maintain compute capacity that can be used to service code execution requests received by the frontend . In some embodiments the virtual compute system may comprise one or more logical knobs or switches for controlling e.g. increasing or decreasing the available capacity in the warming pool A. For example a system administrator may use such a knob or switch to increase the capacity available e.g. the number of pre booted instances in the warming pool A during peak hours. In some embodiments virtual machine instances in the warming pool A can be configured based on a predetermined set of configurations independent from a specific user request to execute a user s code. The predetermined set of configurations can correspond to various types of virtual machine instances to execute user codes. The warming pool manager can optimize types and numbers of virtual machine instances in the warming pool A based on one or more metrics related to current or previous user code executions.

As shown in instances may have operating systems OS and or language runtimes loaded thereon. For example the warming pool A managed by the warming pool manager comprises instances . The instance includes an OS A and a runtime B. The instance includes an OS A. In some embodiments the instances in the warming pool A may also include containers which may further contain copies of operating systems runtimes user codes etc. which are described in greater detail below. Although the instance is shown in to include a single runtime in other embodiments the instances depicted in may include two or more runtimes each of which may be used for running a different user code. In some embodiments the warming pool manager may maintain a list of instances in the warming pool A. The list of instances may further specify the configuration e.g. OS runtime container etc. of the instances.

In some embodiments the virtual machine instances in the warming pool A may be used to serve any user s request. In one embodiment all the virtual machine instances in the warming pool A are configured in the same or substantially similar manner. In another embodiment the virtual machine instances in the warming pool A may be configured differently to suit the needs of different users. For example the virtual machine instances may have different operating systems different language runtimes and or different libraries loaded thereon. In yet another embodiment the virtual machine instances in the warming pool A may be configured in the same or substantially similar manner e.g. with the same OS language runtimes and or libraries but some of those instances may have different container configurations. For example two instances may have runtimes for both Python and Ruby but one instance may have a container configured to run Python code and the other instance may have a container configured to run Ruby code. In some embodiments multiple warming pools A each having identically configured virtual machine instances are provided.

The warming pool manager may pre configure the virtual machine instances in the warming pool A such that each virtual machine instance is configured to satisfy at least one of the operating conditions that may be requested or specified by the user request to execute program code on the virtual compute system . In one embodiment the operating conditions may include program languages in which the potential user codes may be written. For example such languages may include Java JavaScript Python Ruby and the like. In some embodiments the set of languages that the user codes may be written in may be limited to a predetermined set e.g. set of 4 languages although in some embodiments sets of more or less than four languages are provided in order to facilitate pre initialization of the virtual machine instances that can satisfy requests to execute user codes. For example when the user is configuring a request via a user interface provided by the virtual compute system the user interface may prompt the user to specify one of the predetermined operating conditions for executing the user code. In another example the service level agreement SLA for utilizing the services provided by the virtual compute system may specify a set of conditions e.g. programming languages computing resources etc. that user requests should satisfy and the virtual compute system may assume that the requests satisfy the set of conditions in handling the requests. In another example operating conditions specified in the request may include the amount of compute power to be used for processing the request the type of the request e.g. HTTP vs. a triggered event the timeout for the request e.g. threshold time after which the request may be terminated security policies e.g. may control which instances in the warming pool A are usable by which user and etc.

The worker manager manages the instances used for servicing incoming code execution requests. In the example illustrated in the worker manager manages the active pool A which is a group sometimes referred to as a pool of virtual machine instances that are currently assigned to one or more users. Although the virtual machine instances are described here as being assigned to a particular user in some embodiments the instances may be assigned to a group of users such that the instance is tied to the group of users and any member of the group can utilize resources on the instance. For example the users in the same group may belong to the same security group e.g. based on their security credentials such that executing one member s code in a container on a particular instance after another member s code has been executed in another container on the same instance does not pose security risks. Similarly the worker manager may assign the instances and the containers according to one or more policies that dictate which requests can be executed in which containers and which instances can be assigned to which users. An example policy may specify that instances are assigned to collections of users who share the same account e.g. account for accessing the services provided by the virtual compute system . In some embodiments the requests associated with the same user group may share the same containers e.g. if the user codes associated therewith are identical . In some embodiments a request does not differentiate between the different users of the group and simply indicates the group to which the users associated with the requests belong.

In the example illustrated in user codes are executed in isolated compute systems referred to as containers. Containers are logical units created within a virtual machine instance using the resources available on that instance. For example the worker manager may based on information specified in the request to execute user code create a new container or locate an existing container in one of the instances in the active pool A and assigns the container to the request to handle the execution of the user code associated with the request. In one embodiment such containers are implemented as Linux containers. The virtual machine instances in the active pool A may have one or more containers created thereon and have one or more program codes associated with the user loaded thereon e.g. either in one of the containers or in a local cache of the instance .

As shown in instances may have operating systems OS language runtimes and containers. The containers may have individual copies of the OS and the language runtimes and user codes loaded thereon. In the example of the active pool A managed by the worker manager includes the instances . The instance has containers A B. The container A has OS A runtime A and code A loaded therein. In the depicted example the container A has its own OS runtime and code loaded therein. In one embodiment the OS A e.g. the kernel thereof runtime A and or code A are shared among the containers A B and any other containers not illustrated in . In another embodiment the OS A e.g. any code running outside the kernel runtime A and or code A are independent copies that are created for the container A and are not shared with other containers on the instance . In yet another embodiment some portions of the OS A runtime A and or code A are shared among the containers on the instance and other portions thereof are independent copies that are specific to the container A. The instance includes containers A B C the instance includes a container A and the instance includes a container A.

In the example of the sizes of the containers depicted in may be proportional to the actual size of the containers. For example the container A occupies more space than the container B on the instance . Similarly the containers A B C A may be equally sized and the container A may be larger e.g. have more computing resources allocated thereto than the containers A B C A. The dotted boxes labeled C shown in the instance indicate the space remaining on the instances that may be used to create new instances. In some embodiments the sizes of the containers may be 64 MB or any multiples thereof. In other embodiments the sizes of the containers may be any arbitrary size smaller than or equal to the size of the instances in which the containers are created. In some embodiments the sizes of the containers may be any arbitrary size smaller than equal to or larger than the size of the instances in which the containers are created. By how much the sizes of the containers can exceed the size of the instance may be determined based on how likely that those containers might be utilized beyond the capacity provided by the instance. For example five containers having a memory size of 1 GB 5 GB in total may be created in an instance having a memory size of 4 GB. If each of the containers does not reach the full capacity of 1 GB the containers may function properly despite the over subscription.

Although the components inside the containers B A B C A A are not illustrated in the example of each of these containers may have various operating systems language runtimes libraries and or user code. In some embodiments instances may have user codes loaded thereon e.g. in an instance level cache and containers within those instances may also have user codes loaded therein. In some embodiments the worker manager may maintain a list of instances in the active pool A. The list of instances may further specify the configuration e.g. OS runtime container etc. of the instances. In some embodiments the worker manager may have access to a list of instances in the warming pool A e.g. including the number and type of instances . In other embodiments the worker manager requests compute capacity from the warming pool manager without having knowledge of the virtual machine instances in the warming pool A.

After a request has been successfully processed by the frontend the worker manager finds capacity to service the request to execute user code on the virtual compute system . For example if there exists a particular virtual machine instance in the active pool A that has a container with the same user code loaded therein e.g. code A shown in the container A the worker manager may assign the container to the request and cause the user code to be executed in the container. Alternatively if the user code is available in the local cache of one of the virtual machine instances e.g. stored on the instance but do not belong to any individual containers the worker manager may create a new container on such an instance assign the container to the request and cause the user code to be loaded and executed in the container.

If the worker manager determines that the user code associated with the request is not found on any of the instances e.g. either in a container or the local cache of an instance in the active pool A the worker manager may determine whether any of the instances in the active pool A is currently assigned to the user associated with the request and has compute capacity to handle the current request. If there is such an instance the worker manager may create a new container on the instance and assign the container to the request. Alternatively the worker manager may further configure an existing container on the instance assigned to the user and assign the container to the request. For example the worker manager may determine that the existing container may be used to execute the user code if a particular library demanded by the current user request is loaded thereon. In such a case the worker manager may load the particular library and the user code onto the container and use the container to execute the user code.

If the active pool A does not contain any instances currently assigned to the user the worker manager pulls a new virtual machine instance from the warming pool A assigns the instance to the user associated with the request creates a new container on the instance assigns the container to the request and causes the user code to be downloaded and executed on the container.

In some embodiments the virtual compute system is adapted to begin execution of the user code shortly after it is received e.g. by the frontend . A time period can be determined as the difference in time between initiating execution of the user code e.g. in a container on a virtual machine instance associated with the user and receiving a request to execute the user code e.g. received by a frontend . The virtual compute system is adapted to begin execution of the user code within a time period that is less than a predetermined duration. In one embodiment the predetermined duration is 500 ms. In another embodiment the predetermined duration is 300 ms. In another embodiment the predetermined duration is 100 ms. In another embodiment the predetermined duration is 50 ms. In another embodiment the predetermined duration is 10 ms. In another embodiment the predetermined duration may be any value chosen from the range of 10 ms to 500 ms. In some embodiments the virtual compute system is adapted to begin execution of the user code within a time period that is less than a predetermined duration if one or more conditions are satisfied. For example the one or more conditions may include any one of 1 the user code is loaded on a container in the active pool A at the time the request is received 2 the user code is stored in the code cache of an instance in the active pool A at the time the request is received 3 the active pool A contains an instance assigned to the user associated with the request at the time the request is received or 4 the warming pool A has capacity to handle the request at the time the request is received.

The user code may be downloaded from an auxiliary service such as the storage service of . Data A illustrated in may comprise user codes uploaded by one or more users metadata associated with such user codes or any other data utilized by the virtual compute system to perform one or more techniques described herein. Although only the storage service is illustrated in the example of the virtual environment may include other levels of storage systems from which the user code may be downloaded. For example each instance may have one or more storage systems either physically e.g. a local storage resident on the physical computing system on which the instance is running or logically e.g. a network attached storage system in network communication with the instance and provided within or outside of the virtual compute system associated with the instance on which the container is created. Alternatively the code may be downloaded from a web based data store provided by the storage service .

Once the worker manager locates one of the virtual machine instances in the warming pool A that can be used to serve the user code execution request the warming pool manager or the worker manager takes the instance out of the warming pool A and assigns it to the user associated with the request. The assigned virtual machine instance is taken out of the warming pool A and placed in the active pool A. In some embodiments once the virtual machine instance has been assigned to a particular user the same virtual machine instance cannot be used to service requests of any other user. This provides security benefits to users by preventing possible co mingling of user resources. Alternatively in some embodiments multiple containers belonging to different users or assigned to requests associated with different users may co exist on a single virtual machine instance. Such an approach may improve utilization of the available compute capacity. In some embodiments the virtual compute system may maintain a separate cache in which user codes are stored to serve as an intermediate level of caching system between the local cache of the virtual machine instances and a web based network storage e.g. accessible via the network .

After the user code has been executed the worker manager may tear down the container used to execute the user code to free up the resources it occupied to be used for other containers in the instance. Alternatively the worker manager may keep the container running to use it to service additional requests from the same user. For example if another request associated with the same user code that has already been loaded in the container the request can be assigned to the same container thereby eliminating the delay associated with creating a new container and loading the user code in the container. In some embodiments the worker manager may tear down the instance in which the container used to execute the user code was created. Alternatively the worker manager may keep the instance running to use it to service additional requests from the same user. The determination of whether to keep the container and or the instance running after the user code is done executing may be based on a threshold time the type of the user average request volume of the user and or other operating conditions. For example after a threshold time has passed e.g. 5 minutes 30 minutes 1 hour 24 hours 30 days etc. without any activity e.g. running of the code the container and or the virtual machine instance is shutdown e.g. deleted terminated etc. and resources allocated thereto are released. In some embodiments the threshold time passed before a container is torn down is shorter than the threshold time passed before an instance is torn down.

In some embodiments the virtual compute system may provide data to one or more of the auxiliary services as it services incoming code execution requests. For example the virtual compute system may communicate with the monitoring logging billing services . The monitoring logging billing services may include a monitoring service for managing monitoring information received from the virtual compute system such as statuses of containers and instances on the virtual compute system a logging service for managing logging information received from the virtual compute system such as activities performed by containers and instances on the virtual compute system and a billing service for generating billing information associated with executing user code on the virtual compute system e.g. based on the monitoring information and or the logging information managed by the monitoring service and the logging service . In addition to the system level activities that may be performed by the monitoring logging billing services e.g. on behalf of the virtual compute system as described above the monitoring logging billing services may provide application level services on behalf of the user code executed on the virtual compute system . For example the monitoring logging billing services may monitor and or log various inputs outputs or other data and parameters on behalf of the user code being executed on the virtual compute system . Although shown as a single block the monitoring logging and billing services may be provided as separate services. The monitoring logging billing services may communicate with the state manager to allow the state manager to determine the appropriate amount of resources to be used for executing the various program codes on the virtual compute system .

In some embodiments the worker manager may perform health checks on the instances and containers managed by the worker manager e.g. those in the active pool A . For example the health checks performed by the worker manager may include determining whether the instances and the containers managed by the worker manager have any issues of 1 misconfigured networking and or startup configuration 2 exhausted memory 3 corrupted file system 4 incompatible kernel and or any other problems that may impair the performance of the instances and the containers. In one embodiment the worker manager performs the health checks periodically e.g. every 5 minutes every 30 minutes every hour every 24 hours etc. . In some embodiments the frequency of the health checks may be adjusted automatically based on the result of the health checks. In other embodiments the frequency of the health checks may be adjusted based on user requests. In some embodiments the worker manager may perform similar health checks on the instances and or containers in the warming pool A. The instances and or the containers in the warming pool A may be managed either together with those instances and containers in the active pool A or separately. In some embodiments in the case where the health of the instances and or the containers in the warming pool A is managed separately from the active pool A the warming pool manager instead of the worker manager may perform the health checks described above on the instances and or the containers in the warming pool A.

The state manager manages resources available on the virtual compute system or other resources associated with the users of the virtual compute system in a stateful fashion. In a stateless model program codes would have no memory or information of what occurred prior to the execution of the program codes. For example in such a model resource sharing between multiple invocations of one or more program codes may not be allowed and the only way in which two different program codes may share values or work together e.g. one program code calculates a number that is used in the execution of the other might be for the first program code to call the second program code and wait around until the second program code returns a value needed by the first program code. On the other hand a stateful model has the capability to maintain state e.g. the data generated modified or stored by the program codes in a storage location and therefore program codes may have access to data or other resources that result from previous or concurrent occurrences. For example if these two program codes were allowed to share data variables or resources between them either in an ephemeral manner e.g. any shared resources disappearing after the executions of the program codes are completed or a threshold time period thereafter or a persistent manner e.g. the shared resources remaining intact after the program codes accessing the shared resources are completed or without being tied to the status of individual program codes or instances the program codes can work at their own pace without worrying about whether any data that they generated will be accessible by other program codes.

For example in the case where the program codes associated with a particular user share a file system the state manager may configure the virtual compute system such that for the particular user every time a program code associated with the particular user is executed on the virtual compute system the program code would be connected to the same file system and the file system would in the same state that the previous execution of the program code left it e.g. when the previous invocation of the program code finished running . The subsequent execution of the program code would be able to access the same data in the file system that the previous execution had access to and the subsequent execution can continue where the previous execution left off if desired without having to build a new set of data in a new file system that might vanish after the subsequent execution is completed. For example the particular user may devise the program code such that the program code utilizes the shared file system to cache information to perform interim computations and or utilizes the shared file system as a durable store to store persistent data that may be accessed by one or more executions of the program code. Thus the virtual compute system can simplify the users coding process e.g. by providing a built in file system that is shared among multiple code executions for which the users need not worry about any service specific coding tools also provide improved latency performance e.g. since the shared file system would be less costly to access than an external storage service .

The state manager may allow spatial sharing temporal sharing or both. For example for spatial sharing if a particular user has two or more program codes running on the virtual compute system regardless of whether the program codes are running in the same instance or not the state manager may allow the program codes to share the same computing resources e.g. memory file system network etc. . For temporal sharing if a particular user sends the virtual compute system a request to execute a program code today and then sends another request to execute the same program code tomorrow the state manager may allow the program code being executed tomorrow to access the same computing resources that the program code being executed today may access.

The state manager may perform certain configuration routines on the instances being pulled out of the warming pool A so that the program codes being executed in the instances may be able to access the shared resources e.g. shared resources . For example if the state manager or another component in the virtual compute system determines that the virtual compute system does not have sufficient capacity in the active pool A to handle a new incoming request the state manager may look in the warming pol A to acquire additional capacity. When a new instance is assigned from the warming pool A the state manager may configure the instance such that the instance has access to one or more shared resources. For example after an instance is selected from the warming pool A to be assigned to a particular user the state manager determine based on information e.g. the user account s metadata associated with the particular user what kind of shared resources e.g. which network attached drives which public or private networks which file systems which key value stores etc. that the selected instance should be allowed to access shared the program codes running on the selected instance would be allowed to access. Based on the determination the state manager may associate one or more existing shared resources with the selected instance or create e.g. based on a determination that one or more shared resources are not present on the virtual compute system new shared resources e.g. by setting up a new key value store attaching a new file system setting up a network peering etc. and associate the created shared resources with the selected instance. Configuring an instance in a way that allows the instance to have access to a shared resource is described in the present application as associating the shared resource with the instance which may include but is not limited to constructing a new shared resource and attaching the shared resource to the instance attaching an existing shared resource to the instance establishing a connection between the instance and a shared resource recording the association between the instance and a shared resource in a database etc. In the present application a program code may also be described as being associated with a shared resource which may indicate that invocations or executions of the program code may have access to the shared resource. For example to allow the selected instance to have access to a private network of the particular user the state manager may send a request to the private network e.g. a virtual private network of the particular user associated with the user along with any necessary credentials to set up a peering connection which would effectively cause the selected instance to be part of the private network of the user and have access to any private resources available on the private network. The state manager may repeat a similar process to set up a connection among multiple private networks. In another example the state manager may establish an NFSv4 Network File System version 4 file sharing using the appropriate client server protocols for the selected instance.

The lifetime of the shared resource may be tied to the lifetime of the virtual machine instance with which the shared resource is associated e.g. configured to utilize and access . For example if an instance is selected from the warming pool A and associated with a shared resource the shared resource may be terminated disconnected or otherwise become unavailable for use when the instance is terminated. In some embodiments the lifetime of a shared resource is tied to the lifetime of one or more containers running the program code. For example if the state manager detects that a new request to execute a program code on the virtual compute system is to utilize a shared resource the state manager may select an instance e.g. one that has already been associated with the user associated with the program code from an active pool A and configure the instance such that one or more containers running the program code have access to the shared resource e.g. by setting up a new key value store attaching a new file system setting up a network peering . In such embodiments the lifetime of the shared resource may be tied to the lifetime of the one or more containers running the program code and once the instance of the program code or once the last container running the program code vanishes from the instance the shared resource becomes no longer accessible e.g. terminated disconnected removed deleted etc. .

The association between the shared resources and the selected instance may be recorded in the virtual compute system as state management data e.g. state management data A . After the instance is configured to have access to shared resources containers can be created in the instance to service the code execution requests as described above with reference to the worker manager .

In one embodiment the amount of time that the state manager takes to configure a particular instance for resource sharing is about 10 ms. In another embodiment the amount of time that the state manager takes to configure a particular instance for resource sharing is about 100 ms. In yet another embodiment the amount of time that the state manager takes to configure a particular instance for resource sharing is about 1 000 ms. In some embodiments the amount of time that the state manager takes to configure a particular instance is about an order of magnitude greater than the amount of time that the virtual compute system takes to initiate execution of a program code after a request to execute the program code is received. In some embodiments the amount of time that the state manager takes to configure a particular instance is about two orders of magnitude greater than the amount of time that the virtual compute system takes to initiate execution of a program code after a request to execute the program code is received.

Similarly the techniques can be extended beyond cross invocation sharing of the program codes to cross code sharing cross instance sharing cross user account sharing and even cross service sharing. For example in addition to multiple invocations of a single piece of code being allowed to access shared resources multiple program codes executed on the same instance multiple instances on the virtual compute system and or multiple services e.g. internal or external to the virtual compute system that may be owned by the users can be allowed to access the same shared resources. The shared resources can be provided entirely by the virtual compute system partially by the virtual compute system or entirely provided by an entity external to the virtual compute system . For example an enterprise user may have its own file system that it would like its program codes executed on the virtual compute system to be able to access. In such a case the user owned file system can be tied to one or more instances and shared among the program codes executed on those instances. In one embodiment user owned resources e.g. not owned and managed by the virtual compute system may be mounted read only such that program codes running on the virtual compute system has read access to the data available on the user owned resources. In another embodiment the virtual compute system may maintain a copy of the data available on the user owned resources and allow access to the copy. In some embodiments modifications made to the copy may be propagated to the original data in the user owned resources. In yet another embodiment the virtual compute system may allow full access to the user owned resources.

In some embodiments the state manager may partition the virtual compute system e.g. the instances in the active pool A based on the nature of the program codes or the users associated with the requests. For example if the program codes do not share the same set of shared resources e.g. the same private network the same file system access point and or the same key value store etc. then the state manager may route the requests such that the requests associated with those program codes land in different virtual machine instances. The state manager may divide up the requests program codes and or users based on one or more security policies stored as resource management data A e.g. specified by the users and or system administrators . In some embodiments program codes that are executed in the same instance have access to the same set of shared resources. In other embodiments each program code executed in the same instance may have its own unique set of shared resources where at least a portion of those resources are not shared with all the program codes executed in the instance.

In some embodiments the users may specify what kind of shared resources that the user wants his or her program codes to be able to access at the time the program codes are registered with the virtual compute system . For example a user may indicate that he wants his code 1 to be able to access his virtual private cloud VPC 1 and his file system A and his code 2 to be able to access his VPC 2 and his file system A. Upon receiving such user specification of the shared resources for their program codes the state manager may check whether the users actually have access to the specified shared resources.

The state manager may isolate a portion of the shared resources and grant a particular instance access to the isolated portion of the shared resources. For example the state manager may carve out a portion of the shared file system e.g. using chroot jail and allow a particular program code to have access to the carved out portion of the shared file system. For example the file system may be divided among the users e.g. user1 user2 etc. and further subdivided among the program codes e.g. user1 code001 user1 code002 etc. . Multiple invocations of the particular program code regardless of the containers in which the invocations are processed may have access to the carved out portion of the shared file system. In some embodiments invocations of the particular program code can share the same portion of the file system only if the invocations are in the same instance. After the instance is set up to handle resource sharing additional requests processed in the instance would not have to go through the setup process that may take up to 1 to 2 seconds.

By performing the setup at the instance level and not at the container level or request level the benefits of having states and allowing shared resources can be achieved while minimizing the latency hit resulting from implementing resource sharing.

In some embodiments once a particular instance is configured for resource sharing one or more security policies may limit the program codes that may be placed in the particular instance. For example the state manager may ensure that only program codes that are supposed to have access to the shared resources e.g. a set of files that are shared among multiple invocations of the same or different program codes associated with the particular instance are placed in the particular instance.

In some embodiments instances that have been idle e.g. no code is being executed in the instance for a threshold amount of time are terminated. For example the virtual compute system may impose a 6 hour limit on the instances. When an instance is terminated any shared resources associated with the instance are also disassociated from the instance. For example if the instance has been connected to a private network the connection is removed. If the instance has been connected to a shared file system the instance is now disconnected from the shared file system. In some embodiments when the association between the instance and the shared resources is removed any data created or modified by the program codes running on the instance may also be removed from the shared resources. A similar removal procedure may be performed when an instance is being terminated due to poor health.

In some embodiments the state manager creates copies of the shared resources to improve the durability of any data generated or modified by the program codes executing on the virtual compute system . In one embodiment the state manager may use a single data cache server to implement the shared memory. In such an embodiment if the single server fails the data managed by the server may be lost. In another embodiment the state manager may maintain multiple copies of the data stored on the shared memory across multiple zones geographic locations racks power grids etc. for increased durability. In such an embodiment even in the event of a power outage for example a copy of the key value pairs can be retrieved elsewhere and delivered to the appropriate program codes. In some embodiments the state manager determines an appropriate number of copies of the data to be generated based on the number of program codes executing on the virtual compute system the amount of data stored in the shared memory and or the significance or worth of the data.

In some embodiments the shared resources managed by the state manager may comprise a shared memory. In one embodiment the shared memory may be implemented as a distributed memory cache that stores for example variables utilized by the program codes or results of computations performed the program codes. In another embodiment the shared memory is implemented as integrated key value stores or hash tables such that when program codes run on the virtual compute system they have a section of the memory which is shared among the program codes. The shared memory may be implemented at the programming language level such that they can read write and share values over shared keys. In some embodiments the shared memory is persistent in the sense that the key value pairs stored by a program code is still there when a subsequent program code runs. For example program code 1 can set a variable to a certain value and program code 2 running sometime after program code 1 has finished running can access the variable and retrieve the value associated with the variable. In other embodiments the shared memory is transient in the sense that only the program code currently running can meaningfully utilize the key value pairs stored in the shared memory e.g. like a session state . The state manager may attach the instances to one or more external services e.g. auxiliary services to ensure that the data persists through multiple invocations of the program code. In some embodiments the state manager may implement the shared memory as hash tables that are pushed to the local cache of each program code. For example every time one program code modifies the shared data the state manager retrieves the modified data from the local cache of the program code and pushes the modified data to the local caches of the other program codes having access to the shared memory. Thus the hash table may synchronize itself with each program code or a subset of the program codes running on the virtual compute system .

In some embodiments the state manager may utilize one or more shared resources e.g. a SQL database that may involve a connection establishment time that is much higher than the time that the virtual compute system takes to receive a request and initiate the execution of the code associated with the request. In order to avoid having to establish a new connection for every program code received by the virtual compute system the state manager establish and maintain a connection pool that can be shared by multiple program codes that are executed on the virtual compute system . Similarly the state manager may establish and maintain dedicated caches that are located between the instances and one or more external services e.g. auxiliary services .

In some embodiments the shared resource managed by the state manager may comprise a shared disk. For example the shared disk may include a distributed persistent shared file system shared among multiple program codes e.g. any program code can write to the file system and other program codes can access the data written by the program code . As discussed above invocations of the same code or different codes may see the same file system both temporally e.g. sequential execution and spatially e.g. simultaneous execution in different containers . For example after a new instance is pulled from the warming pool A the instance can be associated with a shared file system that may be accessed by any program code belonging to the particular user executed in the instance.

In some embodiments the state manager may use the shared disk e.g. network attached disk drive as a program code delivery mechanism. For example the state manager may divide up the shared disk into multiple partitions and use the partitions to distribute different program codes running on the virtual compute system . In some embodiments the shared disk is implemented using a cloud based file system. In such embodiments each program code would have access to a local drive having a virtually infinite amount of capacity. For large enterprises such an implementation may be useful for managing hundreds or thousands of program codes that the enterprise might have. In some embodiments the code delivery using the shared disk is faster than the code delivery using an external code repository by about an order of magnitude.

One example use of the distributed file system is to use the shared disk as scratch space for storing internal documents or performing interim computations. For example static images like watermarks are not really the end products for users to view or download. Such static images typically just need to be read and applied by the program code and need not be maintained in an external storage service accessible by the users. Thus the internal shared disk may be used to store such data to improve the latency associated with retrieving such data. In some embodiments program codes can use the distributed file system for any interim computations but store the final product with an external storage service e.g. storage service .

In some embodiments the shared resource managed by the state manager may comprise a shared network. For example the users may wish to allow some or all of the program codes that they execute on the virtual compute system to share data or other resources available on their private networks e.g. virtual private cloud . As discussed above in some embodiments the user request to execute user code on the virtual compute system may specify permission data that indicates what kind of permissions that the request has to execute the user code. The virtual compute system may use the permission data to access private resources e.g. relational databases or other virtual machine instances that the user owns on one or more networks associated with the user. Alternatively the state management data A maintained by the state manager may include permission data or other information regarding the network resources available to particular users user groups user codes etc. and the state manager may use such data or information to access private resources on one or more networks associated with the particular user user account user code etc.

The private network associated with the user may already have security features implemented and thus the user does not have to worry about securing the network again once the virtual machine instance is associated with the private network. Thus by granting the program codes running in the virtual machine instance access to the user s private network the virtual compute system provides the security of a private network and also the ease of access at the same time.

In some embodiments the state manager may create local networks between processes that are running the same program code to facilitate the resource sharing between them. The state manager may extend a similar technique to implement a connection between multiple instances.

The state manager may communicate with the frontend the warming pool manager the worker manager the shared resources and or the auxiliary services to monitor and manage the compute capacity allocated to and used by the various program codes executed on the virtual compute system . Although the state manager is illustrated as a distinct component within the virtual compute system part or all of the functionalities of the state manager may be performed by the frontend the warming pool manager the worker manager the shared resources and or the auxiliary services . For example the state manager may be implemented entirely within one of the other components of the virtual compute system or in a distributed manner across the other components of the virtual compute system . In the example of the state manager includes state management data A. The state management data A may include data regarding the association among the various users user accounts program codes etc. that utilize the virtual compute system and the shared resources available on the virtual compute system or other external resources outside the virtual compute system . For example the state management data A may indicate which memory disk and or network resources a particular user may access. The state management data A may further include security policies that may be used by the state manager to divide up certain requests program codes and or instances. For example a security policy may indicate that a user having access to a particular private network or private cloud can share an instance with another user only if the other user also has access to the particular private network or private cloud. The information included in the state management data A may be extracted from the code execution requests received by the virtual compute system or provided by the user separately from the code execution requests.

The state manager may include a shared resource management unit for managing the different kinds of shared resources associated with particular users and or program codes and an instance configuration unit for configuring the instances being acquired from the warming pool A such that they are fit to use the shared resources. An example configuration of the state manager is described in greater detail below with reference to .

The memory may contain computer program instructions grouped as modules in some embodiments that the processing unit executes in order to implement one or more aspects of the present disclosure. The memory generally includes RAM ROM and or other persistent auxiliary or non transitory computer readable media. The memory may store an operating system that provides computer program instructions for use by the processing unit in the general administration and operation of the state manager . The memory may further include computer program instructions and other information for implementing aspects of the present disclosure. For example in one embodiment the memory includes a user interface unit that generates user interfaces and or instructions therefor for display upon a computing device e.g. via a navigation and or browsing interface such as a browser or application installed on the computing device. In addition the memory may include and or communicate with one or more data repositories not shown for example to access user program codes and or libraries.

In addition to and or in combination with the user interface unit the memory may include a shared resource management unit and an instance configuration unit that may be executed by the processing unit . In one embodiment the user interface unit shared resource management unit and instance configuration unit individually or collectively implement various aspects of the present disclosure e.g. monitoring and logging the execution of program codes on the virtual compute system determining the need for adjusting the amount of resources allocated to particular containers and or requests providing notifications to the user regarding the need to adjust the amount of resources automatically adjusting the amount of resources etc. as described further below.

The shared resource management unit manages the different kinds of shared resources associated with particular users and or program codes. For example the shared resource management unit may determine whether new shared resources should be created or removed. Further the shared resource management unit may synchronize data in different parts of the virtual compute system to facilitate resource sharing. The shared resource management unit may also perform one or more techniques described in connection with the resource manager .

The instance configuration unit configures the instances being acquired from the warming pool A so that the instances can utilize the shared resources. For example the instance configuration unit may attach a file system to a particular instance or establish a peering connection to a private network owned by the user associated with the particular instance.

While the shared resource management unit and the instance configuration unit are shown in as part of the state manager in other embodiments all or a portion of the shared resource management unit and the instance configuration unit may be implemented by other components of the virtual compute system and or another computing device. For example in certain embodiments of the present disclosure another computing device in communication with the virtual compute system may include several modules or components that operate similarly to the modules and components illustrated as part of the state manager .

Turning now to a routine implemented by one or more components of the virtual compute system e.g. the state manager will be described. Although routine is described with regard to implementation by the state manager one skilled in the relevant art will appreciate that alternative components may implement routine or that one or more of the blocks may be implemented by a different component or in a distributed manner.

At block of the illustrative routine the state manager determines that a new instance is to be acquired from the warming pool A for executing a program code associated with a user. As described above new instances may be acquired from the warming pool A if the capacity in the active pool A is insufficient to handle an incoming code execution request.

Next at block the state manager determines the shared resources accessible by the user and or the program code based on information associated with the user and or the program code. The information associated with the user and or the program code may be provided in the code execution request or determined based on other information included in the code execution request. For example the state manager may determine that the user associated with the request has access to a private network and has indicated in the request that he wants his program codes to be able to access the resources available in the private network. In another example the state manager may determine that the particular program code associated with the request is indicated in a shared resource database as having access to a shared disk provided on the virtual compute system .

At block the state manager associates the new instance with the shared resources so that the shared resources may be accessed by the program code during the execution of the program code. In the example above the state manager may associate the instance with the private network owned by the user by establishing a peering connection to the private network and attach the shared disk to the instance so that the program codes running in the instance can access the private network and the shared disk.

While the routine of has been described above with reference to blocks the embodiments described herein are not limited as such and one or more blocks may be omitted modified or switched without departing from the spirit of the present disclosure.

Turning now to a routine implemented by one or more components of the virtual compute system e.g. the state manager will be described. Although routine is described with regard to implementation by the state manager one skilled in the relevant art will appreciate that alternative components may implement routine or that one or more of the blocks may be implemented by a different component or in a distributed manner.

At block of the illustrative routine the state manager causes a first copy of a program code to be executed in a first container created in a first instance. For example the first instance may be associated with a set of shared resources which may be accessed by the program codes running in the first instance. Next at block the state manager causes a second copy of the program code to be executed in a second container created in a second instance. The second instance may be configured to access at least some of the set of shared resources that the first instance is configured to access. In some embodiments the first and second instances may be the same instance.

At block the state manager allows the first copy of the program code to modify data in the shared resources during the execution of the first copy of the program code. For example the first copy of the program code may invoke a call to create and set a variable that may be used by itself or other invocations of the program code.

At block the state manager allows the second copy of the program code to access the modified data in the shared resources during the execution of the second copy of the program code. For example the variable created and set during the execution of the first copy of the program code may be retrieved by the execution of the second copy of the program code to perform additional computations. By allowing subsequent invocations of the program code to access data created or modified by earlier invocations of the program code the virtual compute system can allow the program code to be simplified e.g. since redundant computations can be omitted .

While the routine of has been described above with reference to blocks the embodiments described herein are not limited as such and one or more blocks may be omitted modified or switched without departing from the spirit of the present disclosure.

Turning now to a routine implemented by one or more components of the virtual compute system e.g. the state manager will be described. Although routine is described with regard to implementation by the state manager one skilled in the relevant art will appreciate that alternative components may implement routine or that one or more of the blocks may be implemented by a different component or in a distributed manner.

At block of the illustrative routine the state manager initiates the execution of a first copy of a program code in a first container created in a first instance. For example the first instance may be associated with a set of shared resources which may be accessed by the program codes running in the first instance. Next at block the state manager allows the first copy of the program code to modify data in the shared resources during the execution of the first copy of the program code. For example the first copy of the program code may invoke a call to create set and or modify a variable that may be used by itself or other invocations of the program code. At block the state manager completes the execution of the first copy of the program code. For example the first copy of the program code may finish executing without any additional action by the state manager . In some embodiments the state manager may perform additional processing associated with the completion of the execution such as removing the first container in which the program code was executed.

At block the state manager initiates the execution of a second copy of the program code in a second container created in a second instance. The second instance may be configured to access at least some of the set of shared resources that the first instance is configured to access. In some embodiments the first and second instances may be the same instance.

At block the state manager allows the second copy of the program code to access the modified data in the shared resources during the execution of the second copy of the program code. For example the variable created set and or modified during the execution of the first copy of the program code may be retrieved by the execution of the second copy of the program code to perform additional computations. By allowing subsequent invocations of the program code to access data created or modified by earlier invocations of the program code the virtual compute system can allow the program code to be simplified e.g. since redundant computations can be omitted .

While the routine of has been described above with reference to blocks the embodiments described herein are not limited as such and one or more blocks may be omitted modified or switched without departing from the spirit of the present disclosure.

It will be appreciated by those skilled in the art and others that all of the functions described in this disclosure may be embodied in software executed by one or more physical processors of the disclosed components and mobile communication devices. The software may be persistently stored in any type of non volatile storage.

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

Any process descriptions elements or blocks in the flow diagrams described herein and or depicted in the attached figures should be understood as potentially representing modules segments or portions of code which include one or more executable instructions for implementing specific logical functions or steps in the process. Alternate implementations are included within the scope of the embodiments described herein in which elements or functions may be deleted executed out of order from that shown or discussed including substantially concurrently or in reverse order depending on the functionality involved as would be understood by those skilled in the art. It will further be appreciated that the data and or components described above may be stored on a computer readable medium and loaded into memory of the computing device using a drive mechanism associated with a computer readable storage medium storing the computer executable components such as a CD ROM DVD ROM or network interface. Further the component and or data can be included in a single device or distributed in any manner. Accordingly general purpose computing devices may be configured to implement the processes algorithms and methodology of the present disclosure with the processing and or execution of the various data and or components described above.

It should be emphasized that many variations and modifications may be made to the above described embodiments the elements of which are to be understood as being among other acceptable examples. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

