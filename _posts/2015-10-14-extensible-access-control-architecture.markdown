---

title: Extensible access control architecture
abstract: Software for managing access control functions in a network. The software includes a host that receives access control commands or information and calls one or more methods. The methods perform access control functions and communicate access control results or messages to be transmitted. The host may be installed in a network peer seeking access to the network or in a server controlling access to the network. When installed in a peer, the host receives commands and exchanges information with a supplicant. When installed in an access control server, the host receives commands and exchanges information with an authenticator. The host has a flexible architecture that enables multiple features, such as allowing the same methods to be used for authentication by multiple supplicants, providing ready integration of third party access control software, simplifying network maintenance by facilitating upgrades of authenticator software and enabling access control functions other than peer authentication.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09521119&OS=09521119&RS=09521119
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09521119
owner_city: Redmond
owner_country: US
publication_date: 20151014
---
This application is a Continuation of and claims benefit from U.S. patent application Ser. No. 13 630 184 that was filed on Sep. 28 2012 and that is a Continuation of U.S. patent application Ser. No. 11 177 757 U.S. Pat. No. 8 286 223 that was filed on Jul. 8 2005 Issued Oct. 9 2012 each of which is incorporated herein by reference in it entirety.

Computer networks are widely used in many businesses and even in many home settings. In a typical network architecture many peers connect to the network. The network serves as a conduit of information to and from the peers allowing the peers to exchange information with servers or other network resources or with other peers also connected to the network. For example a traditional peer may be a desktop computer running the Windows operating system to create a platform for application programs.

The peer includes a network interface card or other device allowing for a connection to the physical transport medium making up the network. Software added to the operating system sometimes referred to as a supplicant controls the transmission and receipt of datagrams over the physical network medium. The supplicant transmits and interprets datagrams received over the physical media according to a protocol recognized by other network elements so that network communication is possible. The supplicant implements a transport mechanism and passes information representing a message within the datagram to application programs executing on the peer.

Unfortunately the widespread use of computer networks has also led to widespread abuse of computer networks. Consequently most networks include authentication features that block unauthorized access to the network by peers even if sending datagrams according to the network protocol. Traditionally network authentication is managed by servers connected to access points switches RAS VPN servers or other Network Access Servers NAS through which peers may connect to the network. As a peer attempts to connect to the network these servers sometimes referred to as RADIUS servers or IAS servers authenticate the peer to determine whether network access should be granted. If the peer cannot be authenticated datagrams sent by the peer are not passed through the server to the rest of the network. Likewise information from the network is not passed on to the peer.

Different networks may be configured to incorporate different mechanisms to authenticate peers. Generally authentication involves an exchange of datagrams between an authenticator program on the server and the supplicant on the client. The exchange may result in identifying information about the peer being provided to the authenticator software. Additionally security information or user information may be provided by the supplicant to the authenticator program on the server. For example the supplicant may prompt a user to enter a user name or password which is then passed on to the authenticator software by the supplicant. The authentication can be bidirectional. For example the server can be authenticated by the client as well as the client being authenticated by the server. This is important because it is possible for attackers to set up fake access points to which a client may connect. The fake access point allows a client to connect and then can take unauthorized actions. For example the fake access point can steal the client identity credentials become a man in the middle etc. Certain EAP methods provide the ability for both sides peer and authenticator to authenticate each other and thereby avoid such malicious activity. Other types of security information are used in known networks. For example codes read from smartcards information from biometric sensors or certificates may all be provided by a supplicant to authenticator software on a server depending on the specific authentication mechanism in use in the network.

Though many identification mechanisms are available attempts have been made to standardize the peer authentication process. The Extensible Authentication Protocol EAP defined at RFC 3748 is one such effort to standardize the authentication process. Though standardized the EAP is intended to be extensible meaning that the EAP provides a framework for the authentication process. Within that framework the content of the authentication information exchanged between supplicant and authenticator software may be defined by the network architect allowing many authentication mechanisms to be employed.

The EAP host is provided to facilitate access control within a network. The EAP host may be installed within a server and or within a peer in the network. The EAP host provides one or more interfaces that facilitate integration of access control functionality into the network whether at initial network installation or as the network is upgraded or modified. By incorporating access control functionality within the EAP host the complexity of supplicants may be reduced.

The EAP host may include an interface for supplicants in a peer and or access control software in a server. Access to software that manages an authentication protocol software that manages a protocol that verifies the health or compatibility of a peer before allowing the peer access to the network or software that performs other access control functions may be obtained through the host. The EAP host may provide a standard interface to any software providing access control functions allowing that software to be readily incorporated or modified within the network. In addition to providing an interface for access to existing services the EAP host provides an interface to which new EAP methods may be written. The new EAP methods plug in to the EAP host and are automatically available to all supplicants and authenticators in the system.

The foregoing summary is not a limiting description of the invention which is defined solely by the appended claims.

We have recognized that implementation of network access control can be facilitated with software that provides standardized interfaces to components that implement network access control functions. An example of such software is the EAP host described below. By providing standardized interfaces to network access control functions supplicants developed for a particular platform need not implement the network access control functions thereby simplifying development and maintenance of supplicants. In addition new EAP methods can be written and plugged into the EAP host. These new methods are then available to all system supplicants and authenticators.

We have also recognized that in some instances software to control network access functions accounts for over half of the code in each supplicant. Reducing the size of supplicant code may be particularly important for example in resource limited peers such as pocket PC s PDA s Smart Phones or Set Top Boxes. By separating network access control functions from the supplicant code code that implements network access control functions may be shared among multiple supplicants thereby reducing the size of the supplicant code and significantly decreasing the security risk since a single copy of the security sensitive code is used.

In some embodiments each network access control function is encoded by a software component such as a method procedure or function. Such network access control components include standard interfaces allowing any supplicant to interact with any network access control component. Moreover by separating the code implementing network access control functions into separate components accessible through a standardized interface the code controlling the network access control function may be modified or updated without requiring changes to the supplicant or other aspects of the access control system. Further software implementing network access control functions may be readily integrated in the access control system allowing access control software provided by third party suppliers to be used.

Turning now to an example of a network according to one embodiment of the invention is shown. The network includes multiple peers such as peers A B C and D. Peers A B and C are desktop computers. Peer D represents a portable electronic device such as a Smart Phone which may also be a peer connected to a network. In this example each peer is a computing device used by an individual but any type of peer whether now known or hereafter developed may be incorporated in the network.

Each of the peers may be a computing device with one or more processors equipped with an operating system to create a platform for application programs. The hardware portion of each peer may include one or more processors such as are now known or hereafter developed for use in computing devices. The software portion of each peer may include an operating system as is known in the art. However in some embodiments the operating system is modified to incorporate access control software as described more fully below.

Additionally some of the peers are shown to include hardware elements used for access control. An advantage of the software architecture described herein is that it may readily accommodate many forms of access control information. In the example of peer A is equipped with a Smart Card reader . Peer A may read access control information from a Smart Card inserted into Smart Card reader as a way to validate the identity of a user of the peer A. Peer B is shown with an alternative hardware device to generate access control information. In the example peer B includes a biometric sensor such as a thumb print scanner. Peer B may read data from biometric sensor also to obtain identifying information about a human user of peer B. However such hardware devices are not the exclusive means by which access control information may be obtained. Any of the peers may read configuration information from other hardware connected to the peer read data such as a certificate file stored in the memory associated with the peer or may receive security information such as a password or a user name from a user through a user interface such as a keyboard.

Each of the peers A B C and D also includes hardware that may communicate over a physical medium to allow its respective peer to be connected to the network. In the example of peers B and D include wireless network interface cards allowing those peers to communicate over an RF link to wireless access point . Peer C includes an Ethernet network card allowing that peer to communicate over a cable to switch that serves as an access point into a network. Peer A is shown configured with hardware to allow access to the network over one of multiple media. As illustrated peer A can exchange datagrams over an RF link with wireless access point and datagrams over a cable with switch .

Wireless access point is shown connected to a server that controls access to the resources of the network represented generally in as network cloud . Network cloud is a schematic representation of all the network devices whether now known or hereafter developed that may be accessible to peers A B C and D over the network.

Server may serve the role of RADIUS or IAS server as known in the art. Similarly switch may contain a processor programmed to perform the same access control functions as server . Therefore switch may control access to network cloud from peer C or peer A communicating over a wired network.

Communications between network elements may be in any suitable protocol. For example communication between peers such as A B and D and wireless access point may be in a standard 802.1X or PPP or some other protocol. Communications between wireless access point and server may be in a RADIUS protocol. Similarly communications between peers A and C and switch may be in a known protocol such as TCP IP. The 802.1X protocol is used to facilitate authentication with switch . Assuming successful authentication switch will then forward datagrams to the network.

When a client peer supplicant wants to access the network they connect to the access point . The access point establishes a connection to the RADIUS server . The RADIUS server and the peer client supplicant then exchange a series of EAP messages with the access point acting as an intermediary. The exact contents of the EAP messages depend upon the EAP method that is being used. When this exchange of messages ends the RADIUS server sends the access point a message informing it whether or not the peer client supplicant should have access to the network. If access is granted then the access point allows the peer client supplicant to have unrestricted access to the network. Prior to this time the peer client supplicant can only send EAP messages through the access point and those messages are always sent to or from the RADIUS server for processing.

The network illustrated in is a simplified example of a network in which the invention may be employed. A typical network may include many more peers than illustrated. Likewise a network may include many more access points than illustrated in . For example a network deployed within an enterprise may have numerous access points that are geographically distributed over a very wide area. Further more or different types of media may be used to transmit datagrams between a peer and an access point. For example datagrams may be transmitted over wires wirelessly over optical fiber or any other suitable media.

Turning now to the architecture of software implementing access control functions in the network of is illustrated. The software in each of peers A B C and D may be of the same form. Here a generalized description is provided in connection with a peer which may represent any of the peers.

Within peer supplicant software components A B C and D are illustrated. Each supplicant represents a software component controlling transmission and receipt of information in a specific format over a specific physical link. For example one supplicant may represent the software commonly referred to as a network adaptor to implement general communications in TCP IP format through a specific network card. Another supplicant may represent a network adaptor to implement a VPN using the same network card. Alternatively one or more of the supplicants may represent software controlling transmission or receipt of information over a different hardware device such as a wireless network card or a USB port. The number and types of supplicants in peer will depend on the configuration of the peer and the applications the peer executes.

Each of the supplicants A B C and D interacts with access control software through interface . Herein access control software is represented by EAP host A. In this example access control information is communicated according to the EAP but the precise format in which access control information is communicated is not a limitation on the invention. Each of the supplicants A B C and D may be generally in a form as known in the art. However in the illustrated embodiment each of the supplicants A B C and D differs from known supplicants in that the supplicants need not incorporate software components to implement access control functions. Rather each supplicant implements any necessary access control function by placing calls on EAP host A through interface .

When a peer must transmit a datagram containing an access control message EAP host A provides supplicants A . . . D with the message to be included in the datagram in order to comply with the EAP as part of the access control process. The supplicant may transmit this information in a manner similar to that used to transmit datagrams based on messages from an application . The supplicant implements a specific protocol that is not IP based from the perspective of EAP. For example EAP messages may be encapsulated in PPP frames. The PPP frames are not routable but instead are sent from one end of the link to the other end. The same is true with 802.1X frames. Nonetheless it is possible to emulate a link layer protocol over an IP based protocol for example VPN .

Datagrams received by a supplicant that contain messages in the EAP format are processed in reverse. Each of the supplicants routes messages in the EAP format to EAP host through interface .

EAP host A contains software that manages the interactions necessary to obtain access to a network for peer . However EAP host A is not limited to providing authentication functions. EAP host A may generate or process messages connected with any access control function such as validating the software or hardware configuration of a peer to determine that peer would not harm the network if allowed access to it.

In the illustrated embodiment access control functions performed by EAP host A are implemented as separate software components that are accessed through a standardized interface . Here such components are illustrated by methods A B and C. Each of the methods A B and C may contain software that executes the steps needed for peer to gain access to a specific network according to a specific authentication exchange. Such an exchange may begin with a request for access communicated over a network initiated by a supplicant. Such a request may trigger a server moderating access to the network to send a request for identifying information to peer . Such a request for identifying information received by supplicant A would be routed back to method A using interfaces and . Method A would then obtain the required information and provide it to a supplicant A for transmission back over the network to the server. Method A may gather the information in a manner consistent with the specific authentication exchange being used. For example method A may read information from a biosensor or a smart card reader if the authentication exchange requires that such information be provided by peer .

A comparable process is performed in server . Access point routes messages received in the EAP format to authenticator . Authenticator is a software component that imposes a network access policy and indicates whether any specific peer should be given access to network .

Authenticator differs from authentication software as known in the art in that authenticator need not generate or process messages in EAP format. Rather messages received by authenticator in EAP format may be passed through interface to authentication control software. In this embodiment authentication control software is shown to be implemented as EAP host B. EAP host B may be software that is conceptually similar to EAP host A. EAP host B may generate and process the desired content of messages in the EAP format for authenticator . In some embodiments EAP host software is implemented to be generic for either a peer or access control server. In such embodiments EAP host A and EAP host B may be identical copies of the same software.

As in the case of EAP host A EAP host B accesses software components that perform access control functions through interface . These components are here depicted as EAP methods D E F and G. The EAP methods D E F and G installed on server may be implemented to perform access control functions necessary to respond to a request for access from a peer and may therefore perform the mirror images of the functions implemented by methods A B and C. For example as a method on a peer sends a request for access a method in server may be called to generate the appropriate response to such a request.

The number of methods associated with server is not a limitation on the invention. In the described embodiment one method is provided for each access mechanism to which server may respond. For example a separate method may be provided to allow access based on authentication provided via password via a smart card via a biometric sensor via a certificate and via any other manner. However one method may perform access control functions used in more than one authentication approach or multiple methods may be used in the implementation of a single authentication approach.

As each of the methods D E F and G is called it may generate information that is to be transmitted back to a peer requesting access. Such information is passed back to access point where it is transmitted over the physical medium to the peer requesting access. In this way a virtual connection illustrated as virtual connection is established between a method such as A . . . C in peer and a method such D . . . G in server . These methods may interact to exchange information necessary to determine whether peer should be given access to network and to establish such a connection if access is warranted.

Turning now to additional details of the software architecture of server are shown. Authenticator may be software generally as known in the art for authenticating peers requesting access to a network. For example authenticator may be software performing the functions of an IAS or RADIUS server as is known in the art. However authenticator unlike authentication software known in the art includes interface A. Interface A allows authenticator to communicate with EAP host B. In the illustrated embodiment where authentication is performed according to the EAP authenticator calls interface A each time it receives a message in the EAP format with information contained in the message being passed through the interface as part of the call.

EAP host B includes a corresponding interface B. Interface B exchanges information with interface A. In the illustrated embodiment EAP host B executes in its own process. Accordingly exchange of information between interface A and B crosses a process boundary and is in a format suitable for cross process communications. Here communications between interface A and B are in a standard protocol such as the COM protocol but any suitable protocol for cross process calls may be used.

EAP host B includes one or more software components that perform the functions needed to process or generate the content of messages exchanged with a peer as part of an access control exchange. EAP host B receives these messages through interface B. Those messages are passed to the appropriate components within EAP host B. Because the components within EAP host B do not directly interface with components external to EAP host B the specific implementation of the software components within EAP host B is independent of other components of the network. Accordingly any suitable implementation of the software components within EAP host B may be employed.

One of the components in EAP host B is server state machine and protocol validator B. In the described embodiment information used to determine whether a peer should be granted access to the network is exchanged in the EAP. That protocol specifies both the format of the information that is transmitted and the sequence of interactions in an authorization control exchange between a peer and an access control server. State machine and protocol validator B tracks the interactions with each peer requesting access to the network such that the state relative to the prescribed sequence of interactions may be determined. The state machine and protocol validator B also determines that each message received as part of the exchange of information for access control is a valid message as specified by the EAP based on the state of the exchange. If EAP host B receives a message that is invalid state machine and protocol validator B may identify that an error has occurred and take a desired response. A desired response may include for example denying access to the peer requesting access or otherwise performing error handling routines.

EAP host B may also include a client state machine and protocol validator A. As described above EAP host B may be software configured for use on a server such as server . In some embodiments the same software will be used for implementation of EAP host A intended for use on a peer such as peer and EAP host B intended for use on a server. In such an embodiment EAP host B also includes any necessary software to implement the peer side of the exchange.

Accordingly EAP host B is shown with an optional client state machine and protocol validator A that tracks the state of the sequence of interactions for access control and validates that messages received by the EAP host are valid messages for a peer to receive according to the EAP. In this context the term client is synonymous with the term peer. 

EAP host B also includes a method manager . Method manager is a software component that both controls the loading of methods from a library of methods into the process in which EAP host B executes and calls the appropriate methods in response to messages in the EAP format. Method manager uses information contained within the messages received by host B to identify the appropriate method to process the message.

As described above the EAP allows for flexibility in specifying the sequence of exchanges and the specific information exchanged between a peer requesting access and a server authenticating access. In the illustrated embodiment a separate method is provided for each unique type of access control interaction. Method manager receives messages through interface and determines the appropriate method to process the message. Method manager calls the appropriate method through interface .

Interface is internal to EAP host B. Accordingly the specific form of interface is not critical. However in the described embodiment interface is a published interface allowing any interested party to generate methods that may be called by EAP host B for authentication of a peer according to a process defined by that method.

Maintaining the state of software processing messages according to the EAP and validating the format of messages received are functions known in the art. Such functions are performed by many supplicants that implement the EAP. Accordingly state machine and protocol validator B may be implemented using programming techniques as is known in the art. Similarly loading of library methods and routing of messages as performed by method manager are known functions and method manager may be coded using known coding practices. However any suitable method of implementation of state machine and protocol validator B and method manager may be employed.

EAP host B may execute multiple types of methods. In this example EAP host B executes methods such as methods D E F and G that are loaded by method manager from a method library that is part of the EAP host software. Such methods are shown to execute within the same process as EAP host B. Such execution may be desirable only for methods that have been thoroughly tested or are otherwise known to be reliable such as because they are supplied by a reliable source. In one embodiment only methods supplied in connection with the operating system for the platform on which EAP host B executes are executed within the same process as EAP host B.

The flexible architecture of EAP host B also allows methods such as may have existed in prior operating systems to be executed from within EAP host B. Such methods termed legacy methods may represent methods for processing EAP messages used in prior versions of the operating system. By incorporating such methods into EAP host B the cost of developing new software may be reduced. Each of the legacy methods such as legacy method includes a legacy interface . Legacy interface is not in a format that allows it to be called through interface . Accordingly translator is used. Translator is software containing an interface that allows the translator to be called through interface . Translator then calls legacy method through interface . For each legacy method to be employed a separate translator may be required.

EAP host B is partitioned such that methods operating within the process in which EAP host B executes are reliable. Unreliable methods could compromise the security provided by EAP host B or disrupt the operation of the system. Nonetheless it may be desirable to allow third party authentication methods to be incorporated into the authentication process. To allow third party methods or other methods for which the reliability is not ascertained to be executed as part of the authentication process EAP host B includes a method proxy manager . Method proxy manager includes an interface in a format that can be called through interface . However rather than executing an access control method directly method proxy manager places calls to third party methods operating in a separate process. In the illustrated embodiment third party methods execute from within method proxy process .

Method proxy manager communicates with methods within method proxy process over a standardized inter process interface. In the embodiment depicted a COM interface is employed.

Within method proxy process interface executes in response to a call from method proxy manager . Because method proxy manager and interface are internal to the EAP host any suitable implementation may be employed for exchange of information between method proxy manager and interface may be employed.

Upon receipt of messages from method proxy manager interface calls the appropriate third party methods. In the pictured embodiment third party method is shown. Third party method in this embodiment includes an interface that may have the same form as the interfaces for methods such as D E F and G executed within the same process as EAP host B.

Legacy third party methods also may be executed within method proxy process . For example third party legacy method is shown to have an interface that is not in the format that may be called directly from interface . To allow legacy third party method to be called translator may be used. Translator may be in the same form as translator but executing in a different process.

In this way messages received by EAP host B representing communications from a peer requesting access to a network may be routed to the appropriate software for processing. As the software processes messages it may generate messages to be communicated back to the peer requesting access to the network. Accordingly each of the interfaces described above may be a two way interface. For example if method requires information to be communicated to a peer as part of its authentication process the information may be communicated through interface to method proxy manager . From method proxy manager the information may be communicated back through interface to interface B. That information may then be transferred through interface A to authenticator . Authenticator may transmit that information to the peer.

Additionally the interfaces may also transmit control and status information back to authenticator . Each method may in accordance with the EAP generate information indicating whether a peer has successfully completed the authentication process. Interfaces such as A and B allow this status information to be transferred to authenticator . Authenticator may process this information in the same way that information in the EAP is currently processed to arrive at an access control decision.

EAP host A also includes multiple methods that may be accessed through interface each of which performs the functions for a particular type of authentication exchange. In the example illustrated in methods D E F and G are shown executing within the same process as EAP host A. Similar to the configuration shown in EAP host A may also execute legacy methods within the same process as EAP host A. Legacy method includes a legacy interface . To allow calls to be placed on the legacy interface translator is included performing comparable functions to translator .

EAP host A also includes method proxy manager allowing third party and other methods deemed not reliable to be called from EAP host A. But such third party methods are executed in a separate process . In this example third party method is shown. Similarly a third party legacy method is shown to have a legacy interface . Translator allows a third party legacy interface to be called by interface .

The methods called from EAP host A may be implemented to execute only the functions that a peer performs during the sequence of interactions needed to grant access to a peer. Alternatively each of the methods may be programmed to execute functions performed by either the peer or server during the authentication process. In the latter case the same methods may be loaded in the peer and the server and called by EAP host A or B as appropriate.

In the peer environment EAP host A is accessed by a supplicant . In this example supplicant may be software managing communications over a wireless network using 802.1X PPP protocol. However as illustrated in multiple supplicants within a single peer may interact with EAP host . Each supplicant accessing EAP host A includes an interface A allowing communications with EAP host A through interface B.

In the illustrated embodiment supplicant is software intended to operate on a peer that includes an operating system that does not allow software executing as an operating system service to directly access any user interface in the peer. Accordingly EAP host A includes no user interface software. If user interaction is desired EAP host A communicates with supplicant through interface A to have the supplicant manage the user interaction.

Supplicant is programmed to receive requests for user interaction and spawn a supplicant UI process . Within supplicant UI process supplicant may display information provided by EAP host through a user interface and receive user input which may then be provided back to EAP host A. In this way methods such as methods D E F or G may obtain information from a user. Obtaining user information in this way allows methods executing within a service process to interact with a user and obtain information such as a user name or password. In addition to complying with operating system requirements having the supplicant manage the user interface ensures that messages displayed on the user interface are raised in the appropriate context of the supplicant.

Supplicant UI process may act simply as a conduit of information between a user and a method within EAP host A. Alternatively supplicant UI process may interact with methods stored within a method library . For access to such methods a cross process interface may be employed. In this way though controlled from a supplicant process software provided as part of EAP host A may manage the interface with a user.

Referring to if any of the methods called by EAP host B requires access to a user interface a similar approach may be used to gain access to the user interface on the server on which EAP host B is installed. In that scenario authenticator may raise an authenticator user interface process that interfaces to methods within EAP host B through an interface . Authenticator UI process may interact with methods stored within a method library .

The flexibility provided by EAP host A and B allows all functions needed to perform authentications according to the EAP to be implemented. In addition the flexibility of EAP host A and B allows functions other than peer authentication to be readily incorporated. In the examples illustrated in EAP host A and B include components that may grant or deny access to a peer based on the health of the peer. In this context health refers to any aspect of the peer that could influence its performance when connected to a network influence the performance of the network as a whole introduce viruses or other undesirable artifacts into the network or that otherwise indicates the status of the peer.

To make access decisions based on the health of clients EAP hosts A and B may include an EAP QEC messenger . QEC messenger communicates with quarantine enforcement client executing outside of the process containing EAP host A. Quarantine enforcement client when configured for operation on a peer obtains information about the health of the peer. In the example of a standard cross process interface such as a COM interface is provided between EAP QEC messenger and EAP quarantine enforcement client is provided. Through this interface EAP QEC messenger may request information about the health of the client.

EAP quarantine enforcement client may request health information from one or more quarantine agents . Quarantine agent is one or more software programs or program components that may obtain the desired information from the client. For example a quarantine agent may read the version level of an operating system. A separate quarantine agent may read the version level of virus protection installed on the client. Other quarantine agents may perform other functions designed to provide health information such as determining whether security patches have been installed in the operating system or the date of the most recent of the update of data files for anti virus software.

When an EAP host such as A is installed in a peer information obtained through EAP quarantine enforcement client may be passed by EAP QEC messenger through interface B where it is transmitted by supplicant to an authenticator. The EAP QEC is not utilized for a sever unless the server itself is functioning as a client.

Having thus described several aspects of at least one embodiment of this invention it is to be appreciated that various alterations modifications and improvements will readily occur to those skilled in the art.

Such alterations modifications and improvements are intended to be part of this disclosure and are intended to be within the spirit and scope of the invention. Accordingly the foregoing description and drawings are by way of example only.

The above described embodiments of the present invention can be implemented in any of numerous ways. For example the embodiments may be implemented using hardware software or a combination thereof. When implemented in software the software code can be executed on any suitable processor or collection of processors whether provided in a single computer or distributed among multiple computers.

Also the various methods or processes outlined herein may be coded as software that is executable on one or more processors that employ any one of a variety of operating systems or platforms. Additionally such software may be written using any of a number of suitable programming languages and or conventional programming or scripting tools and also may be compiled as executable machine language code.

In this respect the invention may be embodied as a computer readable medium or multiple computer readable media e.g. a computer memory one or more floppy discs compact discs optical discs magnetic tapes etc. encoded with one or more programs that when executed on one or more computers or other processors perform methods that implement the various embodiments of the invention discussed above. The computer readable medium or media can be transportable such that the program or programs stored thereon can be loaded onto one or more different computers or other processors to implement various aspects of the present invention as discussed above.

The terms program or software are used herein in a generic sense to refer to any type of computer code or set of computer executable instructions that can be employed to program a computer or other processor to implement various aspects of the present invention as discussed above. Additionally it should be appreciated that according to one aspect of this embodiment one or more computer programs that when executed perform methods of the present invention need not reside on a single computer or processor but may be distributed in a modular fashion amongst a number of different computers or processors to implement various aspects of the present invention.

Computer executable instructions may be in many forms such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

Various aspects of the present invention may be used alone in combination or in a variety of arrangements not specifically discussed in the embodiments described in the foregoing and is therefore not limited in its application to the details and arrangement of components set forth in the foregoing description or illustrated in the drawings. For example aspects described in one embodiment may be combined in any manner with aspects described in other embodiment.

Use of ordinal terms such as first second third etc. in the claims to modify a claim element does not by itself connote any priority precedence or order of one claim element over another or the temporal order in which acts of a method are performed but are used merely as labels to distinguish one claim element having a certain name from another element having a same name but for use of the ordinal term to distinguish the claim elements.

Also the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of including comprising or having containing involving and variations thereof herein is meant to encompass the items listed thereafter and equivalents thereof as well as additional items.

