---

title: Method and system for directly mapping web services interfaces and Java interfaces
abstract: A method and system for directly mapping web services interfaces and Java interfaces. In one embodiment, default mapping information is identified, the default mapping information having default interface mapping information and default schema to Java mapping information. The default mapping information is then update and a mapping descriptor having the updated mapping information is generated. The updated information contains updated interface mapping information and updated schema to Java mapping information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09280527&OS=09280527&RS=09280527
owner: SAP SE
number: 09280527
owner_city: Walldorf
owner_country: DE
publication_date: 20150921
---
This application is a continuation of U.S. application Ser. No. 14 082 647 filed Nov. 18 2013 which is a continuation of U.S. application Ser. No. 12 629 819 filed Dec. 2 2009 which Issued on Nov. 19 2013 as U.S. Pat. No. 8 589 518 which is a continuation of U.S. application Ser. No. 11 239 546 filed Sep. 28 2005 which applications are incorporated in their entirety herein by reference.

Embodiments of the invention generally relate to the field of web services and more particularly to a system and method for directly mapping web services interfaces and Java interfaces.

Efforts are being made to more easily conduct business in a web based environment. Web Services is loosely understood to mean the ability to discover and conduct business in a web based environment. For example a user e.g. a web based application or person with a web browser may 1 search through an online registry of businesses and or services 2 find a listing in the registry for web based access to a service that that the user desires to have performed and then 3 engage in a web based business relationship with the service application including the passing of relevant information e.g. pricing terms and conditions over the network. In other words web services generally refer to offerings of services by one application to another via the World Wide Web.

Given the nature and use of web services and the rapid increase in their demand interoperability of web services across clients and servers is becoming increasingly important and cumbersome. Some attempts have been made to achieve interoperability across a wide range of platforms and runtimes. For example using open standards like eXtensible Markup Language XML Simple Object Access Protocol SOAP Web Services Description Language WSDL and Universal Description Discovery and Integration UDDI some interoperability has been achieved.

However the open standards are not evolving fast enough to keep up with the increasing demand for web services and needs of additional flexibility and control on the client side. One of the problems today is the convoluted relationships and mappings between relevant standards. Neither the interoperability nor the client side flexibility are sufficiently achieved because of the conventional separation of standards models and entities for web services WS and web services client WSC . illustrates a prior art web services model . The illustrated web services model includes Web service definition which includes the description of design time configuration of a web service. Web service configurations refer to the description of the run time configurations of a web service. The web services model further includes a virtual interface . A virtual interface refers to an abstract interface.

Referring now to it illustrates a prior art web services client model . In the illustrated web services client model schema to Java STJ mappings contain serializer classes and deserializer classes of the XML Schema Definition XSD Types. However the conventional STJ mappings do not contain any field or operation specific mappings. The conventional model further includes logical ports that are limited to containing merely runtime RT relevant configurations and do not contain design time DT configurations. Finally the illustrated WSDL contains a parsed WSDL structure.

Although the conventional models provide some flexibility further improvements are needed to achieve interoperability. For example the conventional model provides provider oriented inside out approach for web services but it does not support consumer based outside in approach for web services which is becoming increasingly important. The conventional models do not provide similar modeling approach for developing web services and web services client which leads to usability deficiencies.

A method and system are provided for directly mapping web services interfaces and Java interfaces. In one embodiment default mapping information is identified the default mapping information having default interface mapping information and default schema to Java mapping information. The default mapping information is then update and a mapping descriptor having the updated mapping information is generated. The updated information contains updated interface mapping information and updated schema to Java mapping information.

Described below is a system and method for directly mapping web services interfaces and Java interfaces. Throughout the description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the embodiments of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without some of these specific details. In other instances well known structures and devices are shown in block diagram form to avoid obscuring the underlying principles of the present invention.

In the following description numerous specific details such as logic implementations opcodes resource partitioning resource sharing and resource duplication implementations types and interrelationships of system components and logic partitioning integration choices may be set forth in order to provide a more thorough understanding of various embodiments of the present invention. It will be appreciated however to one skilled in the art that the embodiments of the present invention may be practiced without such specific details based on the disclosure provided. In other instances control structures gate level circuits and full software instruction sequences have not been shown in detail in order not to obscure the invention. Those of ordinary skill in the art with the included descriptions will be able to implement appropriate functionality without undue experimentation.

Various embodiments of the present invention will be described below. The various embodiments may be embodied in machine executable instructions which may be used to cause a general purpose or special purpose processor or a machine or logic circuits programmed with the instructions to perform the various embodiments. Alternatively the various embodiments may be performed by a combination of hardware and software.

Various embodiments of the present invention may be provided as a computer program product which may include a machine readable medium having stored thereon instructions which may be used to program a computer or other electronic devices to perform a process according to various embodiments of the present invention. The machine readable medium may include but is not limited to floppy diskette optical disk compact disk read only memory CD ROM Digital Video Disk ROM DVD ROM magneto optical disk read only memory ROM random access memory RAM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM magnetic or optical card flash memory or another type of media machine readable medium suitable for storing electronic instructions. Moreover various embodiments of the present invention may also be downloaded as a computer program product wherein the program may be transferred from a remote computer to a requesting computer by way of data signals embodied in a carrier wave or other propagation medium via a communication link e.g. a modem or network connection .

The illustrated Schema to Java mappings model is used for describing mappings between XSD types and Java classes representing these types such as the names of the fields. The configuration model includes the design time and runtime configuration of web services and web services client. The configuration model logically references the WSDL model and the WSDL IM model which in turn references the STJ mappings model .

As illustrated in one embodiment a common model is provided for WS and WSC frameworks to perform development deployment and configuration of applications with relative ease. WS and WSC frameworks may reside on a Java 2 Enterprise Edition J2EE engine. In one embodiment the common model is migrated to the J2EE engine to run and use the WS WSC proxy on the J2EE engine to provide a common model for WS and WSC frameworks. Such migration can be performed using various migration controllers and interfaces that are used for application development. In one embodiment the common configuration is achieved by having a common configuration entity in the configuration model . Common design utilities are provided using a common interface mapping model and a common schema to Java mapping model while common deployment entities are provided with insignificant differences between client and server.

In one embodiment common models are managed by a common framework at the J2EE engine. The common model is created by first identifying those elements features and components components or properties that are common to both web services model and web services client model. Once such common components are identified they are then extracted and put together to create a common WS model. It is contemplated that those components that are necessary and or preferred are used to create the common framework while those components that are not regarded as necessary and or preferred may not be used. Further the use of such common components helps support the deployment of web services and web services client in a common way. For example SAP administrative tools model can be converted in light of the common framework to separate the WS tools in the SAP Administrative tools from the J2EE engine because of the different requirements associated with the SAP Administrative tools and the J2EE engine. Examples of administrative tools include various Integrated Development Environment IDE tools e.g. IDE wizard and IDE views and other SAP based IDE and administrative tools such as SAP NetWeaver Developer Studio SAP Visual Administrator and SAP NetWeaver Administrator. Further SAP s IDE can be based on the Eclipse IDE and may contain additional SAP developed plugins.

In the illustrated embodiment the common model combines the requirements from both the provider and consumer scenarios and is suitable to be used by both the service and client platforms. This is performed such that the common elements of functionality are adopted while the uncommon elements work side by side not only without interfering with each other but by complementing each other in the common model . In one embodiment common models are generated and employed and further they are directly mapped in a common model via any number of programming languages that are right for the time e.g. C C C Java and ABAP . Further a generator such as a proxy generator or a code generator modules interfaces and components are employed to form common models generate WSDL model form direct mapping between models and between web services interfaces and Java interfaces.

The common model eliminates the need for the conventional virtual interface for storing the data e.g. description of the interface and its types . In one embodiment web services interface data is separate between the WSDL model and the two mapping models . Using this technique SOAP extensions are not longer necessary as the need for VI to WSDL conversion is eliminated. Using the common model web interfaces are described in the WSDL model as opposed to a virtual interface. Further the interface mapping information is used to describe the mapping of web interfaces to Java interfaces e.g. Java SEI . Then multiple design time configurations can be attached to a single interface as an alternative.

Furthermore the web services definition which can be used to describe an alternative design time configuration is made part of the design time part of the configuration model . This helps eliminate the need for generating several portTypes based on the web services definition which would otherwise be necessary because the configuration would have to be expressed in the form of WSDL extensions. In one embodiment a WS policy standard is used to express configuration of web services and consequently several alternative configurations can be expressed using one WSDL portType. A WS policy standard can be dynamically created in which various parameters can be defined as necessary or desired. Further a client proxy generated out of such WSDL may contain a single service endpoint interface SEI which has a superior use for the application developer using it as proxy. An SEI can be used to specify methods of the Java class that are to be exposed as web services operations which are included and published in the WSDL model as the portType that a client application uses to invoke web services.

In one embodiment the STJ mappings model contains not only serializer and deserializer classes but also other field and operation specific mappings information. Using the STJ mappings model having such information helps facilitate various kinds of mappings such as names of getter setter methods of a specific field if an attribute is presented as a data member or with getters setters etc. Moreover although the conventional logical ports are limited to containing only real time configurations the illustrated embodiment of the configuration model contains and maintains not only real time configuration information but also contains and maintains design time configuration information. Various mapping files and interfaces may be used to map the individual models into the common model .

The illustrated WSDL model includes a WSDL file that specifies the WSDL structure including message formats Internet protocols and addresses that a client may use to communicate with a particular web service. Using the basic structure of WSDL a WSDL document includes an XML document that adheres to the WSDL XML schema. A WSDL document contains various components and elements e.g. biding import message operation portType service and types that are rooted in the root element e.g. definitions element of the WSDL document.

The binding element is used to assign portTypes and its operation elements to a particular protocol e.g. SOAP and encoding style. The import element is used to import WSDL definitions from other WSDL documents such as those similar to an XML schema document import element . The message element describes the message s payload using XML schema built in types complex types and or elements defined in the WSDL document s type elements. The operation and portType elements describe web service s interface and define its methods and are similar to Java interfaces and their method declarations. The service element is used for assigning an Internet address to a particular binding. The type element uses the XML schema language to declare complex data types and elements that are used elsewhere in the WSDL document. The WSDL IM model is used for describing the mappings between the Java SEI and its WSDL representation.

The STJ mappings model contains a model for describing mappings between XSD types and Java classes representing a group of classes and interfaces in Java packages such as a name which is either derived from the XML namespace URI or specified by a binding customization of the XML namespace URI a set of Java content interfaces representing the content models declared within the schema and a set of Java element interfaces representing element declarations occurring within the schema. The configuration model includes both the design time and runtime configuration of web services and web services clients. The configuration model may also include one or more description descriptors or files such as XML configuration files deployment descriptors etc.

In one embodiment the WSDL IM model contains reference to and uses elements of interfaces with the WSDL model . The WSDL IM model further contains reference to the STJ mappings model . The STJ mappings model on the other hand references to the WSDL model and uses elements from the WSDL model . Examples of the elements that the STJ mappings model uses include elements of XSD and or type elements such as complex type and simple type. The configuration model contains reference to the WSDL model and the WSDL IM model .

A virtual interface refers to an abstract interface and or a type description system that is created based on a programming language interface e.g. Java interface and ABAP methods . A virtual interface can be used to decouple the language specific implementation from interface description. A web service refers to an interface of the web service as described by the WSDL file at the WSDL model which describes web services methods and web services type systems such as the XML messages transmitted upon the web services invocation. When the web service interface is generated via the virtual interface it is done by having Java classes build the virtual interface to generate the WSDL file web interface . This process of WSDL generation is carried in the engine by the WS runtime while the virtual interface contains hints for WSDL generation details called SOAP extensions. A WSDL file provides proxy generator which generates Java classes web services client proxy and logical ports that contain web services client configuration . Using the web services client proxy classes application invoke the web services described by the WSDL file. Also using logical ports applications configure the web services client proxy.

In one embodiment virtual interfaces and the virtual interface model are eliminated by having the web services development based on WSDL web services interface at the WSDL model in an outside in scenario. For example on the server side WSDL provides proxy generator which generates default mappings that are then changed e.g. updated as the desired by the developer or as necessitated using an administrative IDE tool such as an IDE wizard SAP Visual Administrator and SAP Developer Studio etc. This is then used by the proxy generator to generate Java beans with mapped Java methods and WSDL and mappings and the configuration model . A developer can implement methods logic of the bean and thus providing logic to the web services methods. Furthermore the conventional inside out scenario can be customized using administrative IDE tools to be compatible with the new model . For example in one embodiment from Java classes a virtual interface can be created that generates default WSDL which provides a proxy generator which further generates default mappings. These default mappings e.g. default Java mappings are then changed or updated or customized to reflect the original Java interface for which the common WS model can be used by using reusing the outside in deployment. On the client side in one embodiment WSDL at the WSDL model provides a proxy generate which generates Java files and mappings and the configuration model . This mechanism provides having the same deployment entities for adapting various scenarios e.g. inside out and outside in and allows the common model for development of such scenarios.

In one embodiment the initialized mapping information is then changed into customized mapping information using an administrative tool for customization purposes. The customized or updated mapping information includes common mapping information for web services and web services client. The administrative tool includes various SAP based administrative IDE tools and may also include various non SAP based administrative IDE tools. Examples of such administrative and or IDE tools include SAP NetWeaver Administrator SAP Visual Administrator SAP NetWeaver Developer Studio IDE wizard visual composition editor a visual editor a screen painter a form designer a visual IDE and the like. In one embodiment the customized or updated mapping information is then used along with the WSDL to help a proxy generator generate common interface including Java files having a Java SEI and or a web services client. A service endpoint interface may include a web services client proxy or java implementation endpoint of a web service. The updated mapping information is split to be saved at a schema to Java model and a WSDL interface mapping model. The STJ and WSDL IM models along with the WSDL model are included into the deployment of the web services client and web services. The same mapping models of STJ and WSDL IM models are used to support both the client and the server scenarios. A direct mapping is achieved between the WSDL and STJ and WSDL IM models as illustrated in .

In one embodiment the updated interface mapping information of the updated mapping information resides at a WSDL IM model while the updated schema to Java mapping information of the updated mapping information resides at a STJ model. The proxy generator generates customized interfaces e.g. Java SEI that represent the mapped Java interface. In other words the mapping information is stored using separate entities and is used with the WSDL to generate Java files by the proxy generator . In one embodiment the proxy generator resides at a J2EE engine. The proxy generator can be separately created using a number of programming languages that are appropriate for the time such as C C C Java and the like. Having the update mapping information and the generated WSDL helps the proxy generator create a customized interface and provide direct mapping between various models such as between the WSDL and STJ and WSDL IM models.

Furthermore customized interface is created such that the mechanism continues to support the existing mapping files and strategies such as the interface related part of the J2EE JAX RPC mapping files. The proxy generator provides Java files without changing the XML schema. Further the mechanism can be used for design time configuration of the WSDL and the Java interface mapping information and runtime configuration of web services client and server runtime. Using the direct mapping technique the proxy generator can be further used to generate various interfaces to provide additional external flexibility and interoperability.

A WSDL refers to an XML document having the WSDL XML schema and other necessary elements such that the WSDL is used to describe a web service. A WSDL breaks down web services into three distinct elements which are combined and reused as necessary while mapping from applications is mapping to these elements. The element are further divided into sub elements such as types imports message portTypes operations binding and services as described with reference to .

A WSDL may also include abstract definitions and implementation definitions. The abstract definitions e.g. in types message and portType elements are used to define what the web service may look like but not the message formats and protocols used to access an endpoint. The implementation definitions e.g. in binding and service elements are used to describe how the abstract definitions correspond to a specific SOAP messaging mode Internet protocol and internet address. In one embodiment a portType can be mapped to an endpoint interface using a mapping configuration file such as an interface mapping file. Also for example a JAX RPC compiler may be provided to generate an endpoint interface to match the portType of the WSDL . JAX RPC refers to a J2EE programming model to exchange SOAP messages based on documents definitions of the WSDL to define how the WSDL is used to generate endpoint and service interfaces and the classes that implement them.

In one embodiment a direct mapping compiler can be used with the proxy generator to further define the mapping information for providing direct mapping. Customized interface can include a common WS and WSC based interface it is used here as an example and it is contemplated that various other forms of WS and WSC based interfaces can be employed. Further various Java beans and components such as javax.xml may also be generated and used depending on the complexity of message definitions used by the portTyp at the WSDL .

The updated mapping information is used by the proxy generator for the runtime defining of the relationship between customized interfaces such as Java files and Java beans and between the WSDL and its XML data types. A JAX RPC compiler and the like can be used with the proxy generator such that the mapping and interface properties are maintained in addition to providing direct mapping between the WSDL and WSDL IM and STJ models. In one embodiment using the mechanism visual interfaces and visual interface type systems are eliminated to generate a particular WSDL and save mapping information interface mapping information and schema to Java mapping information at WSDL IM and STJ models directly map the WSDL WSDL IM and STJ models and directly mapped web services and Java interfaces to achieve increased interoperability. With the conventional virtual interface based mechanism mapping information was stored at a virtual interface and could not be used for direct mapping or customizing of interfaces or models.

Furthermore the updated mapping information may include information on each WSDL operation matching a method in the interface and the input parameters and return types of the methods being mapped to WSDL part element. Such direct mapping also provides additional control over the nature and functionality of the WSDL and offers interoperability. Having direct mapping and generating customized interfaces is implemented to provide external flexibility and interoperability with external providers and servers as well as with internal consumers and clients. Additionally such direct mapping provides design time configuration of the WSDL without changing its XML description format and interface mapping information and provides runtime configuration of web services web services client and server runtime to start and run web services and web services clients.

As with an administrative tool such as an SAP NetWeaver Administrator IDE wizard etc. is used to alter the JAX RPC mapping information within the JAX RPC file . The JAX RPC default mapping information is changed into updated mapping information having interface mapping information and STJ mapping information that can be stored at a WSDL IM mapping model and a STJ mapping model respectively. The default JAX RPC mapping information is changed such that it adapts to the customized interfaces and files. Stated differently having the default JAX RPC mapping information updated the compatible JAX RPC model is transformed or customized into being adapted into compatible with the local system having customized directly mapped web services and Java interfaces e.g. Java SEI and various mapping models. As described elsewhere in this document the SEI includes web service client proxy or Java implementation endpoint of a web service. The WSDL and two mapping models e.g. WSDL IM mapping model and schema to Java mapping model are included in the deployment of web services and web services client. The same mapping models are also used to support both client and server scenarios.

In one embodiment using either one of the illustrate mechanisms the use of virtual interface and virtual interface type system serving as an intermediary between various models e.g. WSDL model WSDL IM mapping model and STJ mapping model is eliminated and such models are directly mapped providing direct mapping between web services interfaces and Java interfaces. This in one embodiment is accomplished by performing WSDL generation and modeling and changes made by one or more administrative tools such as an SAP NetWeaver Administrator and or a IDE wizard to help develop web services interfaces that are directly mapped to Java interfaces to provide support for the outside in approach. This leads to a common interface mapping descriptor e.g. WSDL for web services and web services client.

In direct mapping web services interfaces and Java interfaces are mapped directly in which the interfaces communicate with each other directly without the need for any intermediaries . Customized interfacing provides direct mapping of interfaces and mapping models which in turn supports consumer based outside in approach. Directly mapped models are included into the deployment of web services and web services client. Using direct mapping the same mapping models in the common model are used to support both client and server environments. In one embodiment default mapping is initialized and then changed to using an administrative tool to provide direct mapping and customized interfaces. In another embodiment when deploying J2EE web service client and or web service application JAX RPC mapping file is changed into an interface mapping file and a STJ mapping file which is to allow the JAX RPC model to work with customized directly mapped interfaces and mapping models.

At processing block default mapping information including interface mapping information and schema to Java mapping information etc. is identified. The default mapping information is initialized using an initialization module at processing block . The initialized mapping information is then updated or customized at processing block using an administrative IDE tool. At processing block using the updated mapping information e.g. interface mapping information and schema to Java mapping information and a WSDL customized interfaces are generated for direct mapping. Customized interfaces for direct mapping include web services interfaces and Java interfaces that are directly mapped. For example customized interfaces include Java SEI generated by the proxy generator. The SEI further includes a web service proxy a web services Java implementation endpoint and the like. At processing block direct mapping of web services and Java interfaces and various models e.g. WSDL model WSDL IM mapping model and STJ mapping model is provided.

The architectures and methodologies discussed above may be implemented with various types of computing systems such as an application server that includes a J2EE server that supports Enterprise Java Bean EJB components and EJB containers at the business layer and or Servlets and Java Server Pages JSP at the presentation layer . Of course other embodiments may be implemented in the context of various different software platforms including by way of example Microsoft NET Windows NT Microsoft Transaction Server MTS the ABAP platforms developed by SAP AG and comparable platforms.

The memory can include a shared memory area that is accessible by multiple operating system processes executing at the server . An example of a suitable server to be implemented using the client server system may include J2EE compatible servers such as the Web Application Server developed by SAP AG of Walldorf Germany or the WebSphere Application Server developed by International Business Machines Corp. IBM of Armonk N.Y.

Client systems are used to execute multiple applications or application interfaces. Each instance of an application or an application interface can constitute a user session. Each user session can generate one or more requests to be processed by the server . The requests may include instructions or code to be executed on a runtime system e.g. the virtual machine VM on the server . A VM is an abstract machine that can include an instruction set a set of registers a stack a heap and a method area like a real machine or processor. A VM essentially acts as an interface between program code and the actual processor or hardware platform on which the program code is to be executed. The program code includes instructions from the VM instruction set that manipulates the resources of the VM .

A hard drive or other storage device may be used by the system for storing information and instructions. The storage device may include a magnetic disk or optical disc and its corresponding drive flash memory or other nonvolatile memory or other memory device. Such elements may be combined together or may be separate components. The system may include a read only memory ROM or other static storage device for storing static information and instructions for the processors through .

A keyboard or other input device may be coupled to the bus for communicating information or command selections to the processors through . The input device may include a keyboard a keypad a touch screen and stylus a voice activated system or other input device or combinations of such devices. The computer may further include a mouse or other cursor control device which may be a mouse a trackball or cursor direction keys to communicate direction information and command selections to the processors and to control cursor movement on a display device. The system may include a computer display device such as a cathode ray tube CRT liquid crystal display LCD or other display technology to display information to a user. In some environments the display device may be a touch screen that is also utilized as at least a part of an input device. In some environments the computer display device may be or may include an auditory device such as a speaker for providing auditory information.

A communication device may also be coupled to the bus . The communication device may include a modem a transceiver a wireless modem or other interface device. The system may be linked to a network or to other device using via an interface which may include links to the Internet a local area network or another environment. The system may comprise a server that connects to multiple devices. In one embodiment the system comprises a Java compatible server that is connected to user devices and to external resources.

While the machine readable medium is illustrated in an exemplary embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine of the system and that causes the machine to perform any one or more of the methodologies of the present invention. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media and carrier wave signals.

An article of manufacture may be used to store program code. An article of manufacture that stores program code may be embodied as but is not limited to one or more memories e.g. one or more flash memories random access memories static dynamic or other optical disks CD ROMs DVD ROMs EPROMs EEPROMs magnetic or optical cards or other type of machine readable media suitable for storing electronic instructions. Program code may also be downloaded from a remote computer e.g. a server to a requesting computer e.g. a client by way of data signals embodied in a propagation medium e.g. via a communication link e.g. a network connection .

Furthermore it is appreciated that a lesser or more equipped computer system than the example described above may be desirable for certain implementations. Therefore the configuration of system may vary from implementation to implementation depending upon numerous factors such as price constraints performance requirements technological improvements and or other circumstances.

It is noted that processes taught by the discussion above can be practiced within various software environments such as for example object oriented and non object oriented programming environments Java based environments such as a J2EE environment or environments defined by other releases of the Java standard or other environments e.g. a NET environment a Windows NT environment each provided by Microsoft Corporation .

It should be noted that while the embodiments described herein may be performed under the control of a programmed processor such as processors through in alternative embodiments the embodiments may be fully or partially implemented by any programmable or hardcoded logic such as field programmable gate arrays FPGAs TTL logic or application specific integrated circuits ASICs . Additionally the embodiments of the present invention may be performed by any combination of programmed general purpose computer components and or custom hardware components. Therefore nothing disclosed herein should be construed as limiting the various embodiments of the present invention to a particular embodiment wherein the recited embodiments may be performed by a specific combination of hardware components.

It should be appreciated that reference throughout this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Therefore it is emphasized and should be appreciated that two or more references to an embodiment or one embodiment or an alternative embodiment in various portions of this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined as suitable in one or more embodiments of the invention.

Similarly it should be appreciated that in the foregoing description of exemplary embodiments of the invention various features of the invention are sometimes grouped together in a single embodiment figure or description thereof for the purpose of streamlining the disclosure aiding in the understanding of one or more of the various inventive aspects. This method of disclosure however is not to be interpreted as reflecting an intention that the claimed invention requires more features than are expressly recited in each claim. Rather as the following claims reflect inventive aspects lie in less than all features of a single foregoing disclosed embodiment. Thus the claims following the detailed description are hereby expressly incorporated into this detailed description with each claim standing on its own as a separate embodiment of this invention.

While certain exemplary embodiments have been described and shown in the accompanying drawings it is to be understood that such embodiments are merely illustrative of and not restrictive and that the embodiments of the present invention are not to be limited to specific constructions and arrangements shown and described since various other modifications may occur to those ordinarily skilled in the art upon studying this disclosure.

