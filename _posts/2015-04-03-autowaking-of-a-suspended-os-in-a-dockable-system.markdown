---

title: Auto-waking of a suspended OS in a dockable system
abstract: A mobile computing device with a mobile operating system and desktop operating system running concurrently and independently on a shared kernel without virtualization. The mobile operating system provides a user experience for the mobile computing device that suits the mobile environment. The desktop operating system provides a full desktop user experience when the mobile computing device is docked to a secondary terminal environment. The desktop operating system may be suspended when the mobile computing device is not docked with a secondary terminal environment and resumed when the mobile computing device is docked with a secondary terminal environment that provides a desktop computing experience. The mobile computing device may be a smartphone running the Android mobile OS and a full desktop Linux OS distribution on a modified Android kernel.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09317457&OS=09317457&RS=09317457
owner: Z124
number: 09317457
owner_city: George Town
owner_country: KY
publication_date: 20150403
---
This Application is a continuation of U.S. patent application Ser. No. 13 217 130 filed Aug. 24 2011 entitled Auto Waking of a Suspended OS in a Dockable System which is a non provisional of and claims the benefit of the filing date of U.S. Provisional Application Nos. 61 389 117 filed Oct. 1 2010 entitled Multi Operating System Portable Docking Device 61 507 201 filed Jul. 13 2011 entitled Cross Environment Communication Framework 61 507 203 filed Jul. 13 2011 entitled Multi Operating System 61 507 206 filed Jul. 13 2011 entitled Auto Configuration of a Docked System in a Multi OS Environment and 61 507 209 filed Jul. 13 2011 entitled Auto Waking of a Suspended Secondary OS in a Dockable System and 61 507 199 filed Jul. 13 2011 entitled Dockable Mobile Software Architecture wherein the entire contents of the foregoing priority applications are incorporated herein by reference for all purposes.

This application relates generally to the field of mobile computing environments and more particularly to supporting multiple user environments through the use of multiple operating systems in a single mobile computing device.

Mobile computing devices are becoming ubiquitous in today s society. For example as of the end of 2008 90 percent of Americans had a mobile wireless device. At the same time the capabilities of mobile devices are advancing rapidly including smartphones that integrate advanced computing capabilities with mobile telephony capabilities. Mobile providers have launched hundreds of new smartphones in the last three years based upon several different platforms e.g. Apple iPhone Android BlackBerry Palm and Windows Mobile . In the U.S. smartphone penetration reached almost 23 by the middle of 2010 and over 35 in some age groups. In Europe the smartphone market grew by 41 from 2009 to 2010 with over 60 million smartphone subscribers as of July 2010 in the five largest European countries alone.

While smartphones are gaining in popularity and computing capability they provide a limited user experience. Specifically they typically have an operating system that is modified for mobile device hardware and a restricted set of applications that are available for the modified operating system. For example many smartphones run Google s Android operating system. Android runs only applications that are specifically developed to run within a Java based virtual machine runtime environment. In addition while Android is based on a modified Linux kernel it uses different standard C libraries system managers and services than Linux. Accordingly applications written for Linux do not run on Android without modification or porting. Similarly Apple s iPhone uses the iOS mobile operating system. Again while iOS is derived from Mac OS X applications developed for OS X do not run on iOS. Therefore while many applications are available for mobile operating systems such as Android and iOS many other common applications for desktop operating systems such as Linux and Mac OS X are not available on the mobile platforms.

Accordingly smartphones are typically suited for a limited set of user experiences and provide applications designed primarily for the mobile environment. In particular smartphones do not provide a suitable desktop user experience nor do they run most common desktop applications. As a result many users carry and use multiple computing devices including a smartphone laptop and or tablet computer. In this instance each device has its own CPU memory file storage and operating system.

Connectivity and file sharing between smartphones and other computing devices involves linking one device e.g. smartphone running a mobile OS to a second wholly disparate device e.g. notebook desktop or tablet running a desktop OS through a wireless or wired connection. Information is shared across devices by synchronizing data between applications running separately on each device. This process typically called synching is cumbersome and generally requires active management by the user.

Embodiments of the present invention are directed to providing the mobile computing experience of a smartphone and the appropriate user experience of a secondary terminal environment in a single mobile computing device. A secondary terminal environment may be some combination of visual rendering devices e.g. monitor or display input devices e.g. mouse touch pad touch screen keyboard etc. and other computing peripherals e.g. HDD optical disc drive memory stick camera printer etc. connected to the computing device by a wired e.g. USB Firewire Thunderbolt etc. or wireless e.g. Bluetooth WiFi etc. connection. In embodiments a mobile operating system associated with the user experience of the mobile environment and a desktop operating system associated with the user experience of the secondary terminal environment are run concurrently and independently on a shared kernel.

According to one aspect consistent with various embodiments a mobile computing device is running a mobile operating system in a first execution environment on a shared kernel and concurrently running a desktop operating system in a second execution environment on the shared kernel. The mobile computing device is configured to multiple user environments by detecting in the mobile computing device a docking event of the mobile computing device with a secondary terminal environment determining that a user experience profile of the docked secondary terminal environment is associated with the desktop operating system and resuming in response to determining that the user experience profile of the docked secondary terminal environment is associated with the desktop operating system the desktop operating system from a suspended condition.

According to other aspects consistent with various embodiments determining whether the user experience profile of the docked secondary terminal environment is associated with the desktop operating system includes receiving in a desktop monitor service of the mobile operating system a notification of a docking event from the shared kernel and determining by the desktop monitor service that the user experience profile of the docked secondary terminal environment is associated with the desktop operating system. Resuming the desktop operating system may include receiving in a daemon process of the desktop operating system a call to a remotable object the call to the remotable object including an action and performing the action in the daemon process of the desktop operating system. The mobile computing device may receive an indicator of the user experience profile of the secondary terminal environment from a dock connector. The user experience profile of the secondary terminal environment may be based on predefined criteria associated with one or more input or output devices of the secondary terminal environment. The predefined criteria may include a resolution of a display device of the secondary terminal environment and or a character input device type criteria. The desktop operating system may be associated with the docked secondary terminal environment. The secondary terminal environment may include a display device a keyboard and a pointing device.

According to other aspects consistent with various embodiments a mobile computing device is running a mobile operating system in a first execution environment on a shared kernel and concurrently running a desktop operating system in a second execution environment on the shared kernel. The mobile computing device is configured to multiple user environments by registering a daemon process of the desktop operating system through an inter process communication channel in the shared kernel to receive remotable objects from a desktop monitor service of the mobile operating system detecting a docking event of the mobile computing device with a secondary terminal environment notifying the desktop monitor service of the mobile operating system of the docking event determining by the desktop monitor service an action to be performed by the daemon process of the desktop operating system based on a user experience profile of the docked secondary terminal environment and sending from the desktop monitor service to the daemon process of the desktop operating system through the inter process communication channel the action to be performed.

According to other aspects consistent with various embodiments the user experience profile of the docked secondary terminal environment may be associated with the desktop operating system and the action to be performed may comprise resuming the desktop operating system from a suspended condition. The docked secondary terminal environment may be associated with the desktop operating system. Alternatively the user experience profile of the docked secondary terminal environment may be associated with the mobile operating system and the action to be performed may comprise suspending the desktop operating system. The docked secondary terminal environment may be associated with the mobile operating system.

According to other aspects consistent with various embodiments a mobile computing device is running a mobile operating system in a first execution environment on a shared kernel and concurrently running a desktop operating system in a second execution environment on the shared kernel. The mobile computing device may be configured to multiple user environments by detecting in the mobile computing device a docking event of the mobile computing device with a secondary terminal environment determining that the mobile computing device is not docked to a secondary terminal environment and suspending in response to determining that the mobile computing device is not docked to a secondary terminal environment the desktop operating system. The docking event may comprise undocking the mobile computing device from a secondary terminal environment. Suspending the desktop operating system may comprise receiving in a daemon process of the desktop operating system a call to a remotable object the call to the remotable object including an action and performing the action in the daemon process of the desktop operating system.

Traditionally handheld mobile telephony devices i.e. handsets were developed independently and served a separate and distinct purpose from that of personal computers PCs such as desktops and laptops. Handheld mobile telephony devices were focused primarily on communication while PCs were focused on computing tasks such as creating and editing documents text based communication e.g. email etc. multimedia and web browsing. However mobile telephony devices are including ever increasing computing ability and users increasingly desire convergence of communication and computing capabilities into multi use mobile devices.

For example mobile telephony devices called smartphones that include computing capabilities are increasing in popularity. Many of these smartphones include a mobile operating system OS running on a mobile processor. While mobile processors and mobile OS s have increased the capabilities of these devices smartphones have not tended to replace PC environments such as desktop or notebook computers at least because of the limited user experience provided. In particular for some tasks such as typing or editing documents a full size keyboard and large display are easier to use than the user interface components typically found on a smartphone. For example smartphones typically use a small thumb style QWERTY keyboard touch screen display click wheel and or scroll wheel as user interface components. Selecting menu options or items typically involves either using a touch screen display or using the click wheel or scroll wheel to navigate menus and select items. This interface is suited to the small display screens and limited menu options typically found in smartphones but not suited to controlling more traditional programs with a larger number of menu options larger screen area and user interface built around a pointing device such as a traditional mouse.

In embodiments a mobile computing device automatically detects a docked environment and wakes up a suspended full featured secondary operating system for use in the docked environment. In one implementation a mobile operating system and a desktop operating system run concurrently on a single shared kernel on a mobile computing device. When the mobile computing device is not docked the mobile operating system drives the mobile device display etc. and the desktop operating system is in a suspended mode e.g. processes of the desktop operating system are suspended and do not consume computing resources . When the mobile computing device is docked with a secondary terminal environment having a user experience profile associated with the desktop operating system the mobile device automatically detects the secondary terminal environment and wakes up the desktop operating system to support the secondary terminal environment.

Mobile computing device may be connected to I O devices and or through port . I O devices and or may make up a secondary terminal environment . In some instances secondary terminal environment may be more suited to desktop OS than mobile OS . For example secondary terminal environment may include a keyboard pointing device and a display device . In these instances desktop OS can be associated with secondary terminal environment to provide the full capabilities of a notebook or desktop computer environment through secondary terminal environment . In other instances secondary terminal environment may be more suited for mobile OS than desktop OS . For example secondary terminal environment may include a touch screen display. In these instances mobile OS may be associated with secondary terminal environment .

In port is shown as connected to port of secondary terminal environment through interface . However port may include separate connections to each I O device and through interface . Interface may be any suitable wired or wireless interface or combination of wired and wireless interfaces for connecting devices such as keyboards monitors pointing devices etc. For example interface may be a combination of a display interface e.g. VGA DVI HDMI etc. and a device communications interface e.g. USB Bluetooth Firewire other serial communications interface etc. . Alternatively interface may be a single communications interface that supports both video and device communications signals e.g. Thunderbolt etc. .

Traditionally the hardware and software development paths for the handset environment and the PC environment have been completely independent because of different use models and competing constraints on product design. PCs including desktop and laptop computers are designed to be flexible and powerful. Specifically PC hardware architecture is typically based around a general purpose PC processor connected to memory graphics and external components through various general purpose interfaces on a motherboard. For example a personal computer motherboard may include a processor connected through a logic chipset to a graphics processor system memory e.g. RAM and various other components through communication interfaces PCI USB ISA IDE etc. . Some more highly integrated PC processors include an interface to a graphics processor e.g. AGP etc. and or interface to system memory e.g. SDR DDR DDR2 DDR3 DRDRAM etc. on the processor.

PC processors are optimized for high processor clock speed and computationally intensive tasks. The personal computer market is presently dominated by processors based on the x86 CPU architecture. Current x86 based PC processors for desktop computers have multiple 64 bit central processing units CPUs or cores with clock speeds exceeding 2.5 GHz and power consumption approaching 100 Watts. Current x86 based PC processors for laptop computers typically run at clock speeds up to 2.0 GHz and have power consumption in the range of 15 45 Watts. Because of the large power consumption of these processors desktop and laptop computers may require cooling devices such as fans or heat sinks to remove waste heat from the processor. In addition the battery life of laptop computers using x86 based PC processors is typically less than four hours.

In contrast mobile processors for handsets are optimized for low power consumption and a high level of integration to reduce the overall size of the handset. For example mobile processors for handsets such as smartphones typically run at clock speeds lower than 2.0 GHz have power consumption of less than 1 Watt and integrate functions common to the mobile environment such as graphics controllers communications interfaces and camera controllers. The most common mobile processor architectures are reduced instruction set computing RISC processor architectures. Specifically the ARM mobile processor architecture is currently the predominant architecture for mobile processors designed for smartphones and other ultra portable and low power computing devices. Some PC processor manufacturers also refer to PC processors designed for use in laptop computers as mobile processors. However as used herein the term mobile processor refers to a processor suited for use in a handset or smartphone typically consuming less than 1 Watt and integrating mobile functionality.

Personal computers and handsets also typically have different system resources input output I O devices and peripherals. For example desktop and laptop computers typically have much larger amounts of system memory and storage capacity than handsets. While a typical laptop computer may have more than 2 GB of RAM and a hard drive with a capacity of more than 250 GB handsets typically have less than 512 MB of RAM and a solid state drive with a capacity of less than 32 GB. User interface components of personal computers typically include a display screen larger than 9 inches diagonally a full keyboard and pointing device s for user input. In contrast handsets typically include a display screen smaller than 7 inches diagonally and user interface components such as a thumb style QWERTY keyboard touch screen display click wheel and or scroll wheel. Peripherals found on personal computers typically include an optical disk drive e.g. CD DVD DVD RW etc. expansion ports e.g. PCMCIA SCSI Express Card etc. video output port e.g. VGA DVI HDMI etc. and generic device ports e.g. USB etc. . In contrast handsets typically do not have optical disk drives or expansion ports. However other devices are typically integrated into handsets including wireless communications interface s e.g. GSM CDMA LTE EDGE WiFi WiMax etc. GPS chipset accelerometer camera s and or solid state memory port SD Memory Stick etc. .

Software for personal computers and handsets has also traditionally been developed independently. For example personal computers including desktops and laptops typically run different operating systems than mobile devices. An operating system is software that manages computer hardware and resources and provides common services for execution of applications software on the computer hardware. Operating systems are generally described as having various abstraction layers where each layer interfaces with the layer below through an interface.

Generally the kernel of an operating system refers to the core OS layer that manages the computing devices resources such as the CPU s CPU scheduling memory and I O including peripheral and file system access . A kernel will usually provide features for low level scheduling of processes dispatching inter process communication process synchronization context switching manipulation of process control blocks interrupt handling process creation and destruction and process suspension and resumption. The OS kernel may or may not include device drivers. Other layers of the OS interface with the kernel through system calls or an application programming interface API layer.

Generally other OS layers include the libraries layer application framework layer and application layer. The libraries layer typically includes system libraries and other user libraries. The application framework layer includes services managers and runtime environments. The application layer includes user applications which may run within a runtime environment of the application framework layer. A user interacts with the OS through the OS GUI. The GUI presents menus buttons and controls that the user selects to control and use applications running on the OS. Commonly the term desktop environment is used to refer to a style of GUI through which the user interfaces with the OS using icons windows toolbars folders and or desktop widgets and is not limited to a desktop OS. For example a mobile OS could have a desktop environment referring to the look and feel of the mobile OS GUI.

Operating systems for personal computers desktop OSs were designed for multi tasking larger screen areas and to provide a flexible environment for application developers. As used herein the term desktop OS refers to an operating system designed for use with a personal computer environment for example a desktop or laptop use environment. Examples of desktop OS s include various distributions of Linux Mac OS X and Windows 7 among many others.

Operating systems for mobile devices mobile OSs were developed for the smaller screen area lower processing power smaller memory and smaller disk space typically found on handsets and smartphones. Example mobile OSs include Android Apple s iOS for the iPhone and iPad Microsoft s Windows Mobile superseded by Windows Phone 7 Nokia s Symbian and Palm s Palm OS superseded by HP webOS . As used herein the term mobile OS refers to an operating system designed for use with a mobile environment including running on a low power processor with reduced system resources compared to the PC environment i.e. desktop or laptop computer system .

Mobile operating systems generally have a particular application development environment that is used to create application programs i.e. apps that run on the mobile OS. The application development environment both facilitates application development by providing common tools and APIs for accessing system resources and services and limits what applications are allowed to do such that the mobile device is able to continue to provide other required functions. For example incoming phone calls and texts may interrupt a running application to notify the user of the incoming call or text.

The most widely adopted mobile OS is Google s Android. While Android is based on Linux it includes modifications to the kernel and other OS layers for the mobile environment and mobile processors. In particular while the Linux kernel is designed for the x86 CPU architecture the Android kernel is modified for ARM based mobile processors. Android device drivers are also particularly tailored for devices typically present in a mobile hardware architecture including touch screens mobile connectivity GSM EDGE CDMA Wi Fi etc. battery management GPS accelerometers and camera modules among other devices.

In Android applications run within the Dalvik virtual machine on an object oriented application framework designed specifically for the memory and processor speed constraints of mobile hardware architectures. Applications are developed for the Dalvik virtual machine through the Android SDK. In addition Android does not have a native X Window System nor does it support the full set of standard GNU libraries and this makes it difficult to port existing GNU Linux applications or libraries to Android.

Apple s iOS operating system run on the iPhone and Microsoft s Windows Phone 7 are similarly modified for the mobile environment and mobile hardware architecture. For example while iOS is derived from the Mac OS X desktop OS common Mac OS X applications do not run natively on iOS. Specifically applications are developed for iOS through an SDK to run within the Cocoa Touch runtime environment of iOS which provides basic application infrastructure and support for key iOS features such as touch based input push notifications and system services. Therefore applications written for Mac OS X do not run on iOS without porting them through the iOS SDK. In addition it may be difficult to port Mac OS X applications to iOS because of differences between user libraries and application framework layers of the two OSs and differences in system resources of the mobile and desktop hardware.

Because of the differences in processing requirements system resources and application development applications developed for desktop OSs typically do not run on mobile OSs. Additionally desktop applications may not be easily ported to mobile OSs because they are optimized for a larger screen area more processing speed more system memory different libraries and commonly a different GUI. As a result users typically use separate computing devices for each user environment including a smartphone tablet computer laptop computer and or desktop computer. In this instance each device has its own CPU memory file storage and OS.

Connectivity and file sharing between smartphones and other devices involves linking one device e.g. smartphone running a mobile OS to a second wholly disparate device e.g. notebook desktop or tablet running a desktop OS through a wireless or wired connection. Information is shared across devices by synchronizing data between applications running separately on each device. This process typically called synching is cumbersome and generally requires active management by the user.

Recently some attempts have been made to provide a more complete user experience with a single mobile computing device. For example a smartphone may be connected to an external monitor and input devices such as a full keyboard to provide a more desktop like user experience with the mobile OS graphical user interface extended to the larger screen and accepting input from the input devices. However because the external monitor and input devices are only an extension of the smartphone s operating system and user interface the capabilities of the docked environment are limited by the smartphone s mobile OS. For example many software applications available on desktop OSs are not available or have limited functionality on mobile OSs. Accordingly these devices do not present a full desktop user experience when connected to an external environment.

Referring still to computing environment provides multiple user computing experiences without the above limitations. Specifically because mobile computing device includes multiple OSs where each OS is suited to a particular computing environment mobile computing device may be adapted with external devices to provide a broad range of user experiences with a single mobile computing device. For example a user may have a mobile computing device and a secondary terminal environment that provides the user experience of a laptop when connected to mobile computing device . In this instance desktop OS of the mobile computing device is associated with the secondary terminal environment when the secondary terminal environment is connected to mobile computing device . To the user the full capabilities of desktop OS are available through secondary terminal environment .

Processor may be an ARM based mobile processor. In embodiments mobile processor is a mobile ARM based processor such as Texas Instruments OMAP3430 Marvell PXA320 Freescale iMX51 or Qualcomm QSD8650 8250. However mobile processor may be another suitable ARM based mobile processor or processor based on other processor architectures such as for example x86 based processor architectures or other RISC based processor architectures.

While illustrates one exemplary hardware implementation for mobile computing device other architectures are contemplated as within the scope of the invention. For example various components illustrated in as external to mobile processor may be integrated into mobile processor . Optionally external display interface shown in as integrated into mobile processor may be external to mobile processor . Additionally other computer architectures employing a system bus discrete graphics processor and or other architectural variations are suitable for employing aspects of the present invention.

As illustrated in mobile OS has libraries layer application framework layer and application layer . In mobile OS applications and run in application layer supported by application framework layer of mobile OS . Application framework layer includes manager s and service s that are used by applications running on mobile OS . For example application framework layer may include a window manager activity manager package manager resource manager telephony manager gesture controller and or other managers and services for the mobile environment. Application framework layer may include a mobile application runtime environment that executes applications developed for mobile OS . The mobile application runtime environment may be optimized for mobile computing resources such as lower processing power or limited memory space. The mobile application runtime environment may rely on the kernel for process isolation memory management and threading support. Libraries layer includes user libraries that implement common functions such as I O and string manipulation standard C libraries graphics libraries database libraries communication libraries and or other libraries.

As illustrated in desktop OS has libraries layer framework layer and application layer . In desktop OS applications and run in application layer supported by application framework layer of desktop OS . Application framework layer includes manager s and service s that are used by applications running on desktop OS . For example application framework layer may include a window manager activity manager package manager resource manager and or other managers and services common to a desktop environment. Libraries layer may include user libraries that implement common functions such as I O and string manipulation standard C libraries graphics libraries database libraries communication libraries and or other libraries.

In various embodiments of the present disclosure desktop OS runs in a separate execution environment from mobile OS . For example mobile OS may run in a root execution environment and desktop OS may run in a secondary execution environment established under the root execution environment. Processes and applications running on mobile OS access user libraries manager s and service s in the root execution environment. Processes and applications running on desktop OS access user libraries manager s and service s in the secondary execution environment.

Generally applications developed for mobile OS do not run directly on desktop OS and applications developed for desktop OS do not run directly on mobile OS . For example application running in application layer of desktop OS may be incompatible with mobile OS meaning that application could not run on mobile OS . Specifically application may use manager s and service s of application framework layer of desktop OS that are either not available or not compatible with manager s and service s in application framework layer in mobile OS . In addition application may attempt to access user libraries that exist in libraries layer of desktop OS but are either not available or not compatible with user libraries available in libraries layer of mobile OS .

In OS architecture mobile OS and desktop OS run concurrently on shared kernel . This means that mobile OS and desktop OS are running on shared kernel at the same time. Specifically mobile OS and desktop OS both interface to shared kernel through the same kernel interface for example by making system calls to shared kernel . Shared kernel manages task scheduling for processes of both mobile OS and desktop OS . In this regard mobile OS and desktop OS are running independently and concurrently on shared kernel . In addition shared kernel runs directly on mobile processor of mobile computing device hardware as illustrated by hardware interface . Specifically shared kernel directly manages the computing resources of mobile computing device hardware such as CPU scheduling memory access and I O. In this regard hardware resources are not virtualized meaning that mobile OS and desktop OS make system calls through kernel interface without virtualized memory or I O access.

There are several known techniques for providing multiple OS s on the same computing device. However none of these techniques provide multiple different OS s running concurrently and independently on a shared kernel. More particularly none of these techniques provide a solution for a mobile OS and a desktop OS running on a shared kernel.

In one technique known as dual boot multiple OS s are loaded on the computing device one at a time. For example at boot time a user may select one OS from multiple available OSs to be run on the device where each OS has its own kernel libraries framework and applications. The system then boots up into that operating system and the other OS s are not running i.e. no processes of the other OS s are loaded concurrently with the running OS . Therefore this technique does not run multiple OS s on a shared kernel nor does this technique run multiple OSs concurrently.

Another technique for running multiple OS s on the same device is to use a Virtual Machine Manager VMM or Hypervisor. A VMM or Hypervisor runs directly on the hardware and separates the individual kernels of each OS from the hardware controlling which computer hardware resources are available to each OS at any given time. A Hypervisor effectively creates multiple virtual machines from one device such that each OS sees a separate virtual machine. Therefore multiple OSs running on the same device through Hypervisor and VMM are not running on a shared kernel. The Hypervisor adds system overhead due to each OS having to access system resources through virtualization in the Hypervisor. Additionally because the Hypervisor must allocate CPU and other computing resources each OS may not be able to effectively schedule processes and tasks.

Yet another technique for running multiple OSs on the same device is to use a hosted virtual machine. In this technique each OS has its own kernel with the kernel of the guest OS running on a virtual machine in the host OS. The virtual machine may be a virtualized hardware platform different than the physical hardware platform. The virtual machine in the host OS may be implemented in the kernel of the host OS. In this instance the kernel of the host OS acts as a hypervisor through which the kernel of the guest OS accesses the processor and hardware resources. Regardless of where the virtual machine is implemented in this technique the host OS and the guest OS have separate kernels. Therefore hosted virtual machines do not have multiple OSs running on a shared kernel. System performance using this technique may be reduced due to virtualization of hardware resources for the guest OS.

Another form of virtualization is operating system level virtualization. In this technique multiple isolated user space instances may be created on the kernel of an operating system which look like separate OS instances from the point of view of users of each user space instance. In this technique the host OS and guest OS s must be the same OS. Accordingly this technique does not provide a solution for a mobile OS and desktop OS running independently and concurrently on a shared kernel. Further similarly to a hosted virtual machine this technique uses disk space and memory virtualization for the guest OS s . Accordingly this technique does not provide direct access to memory and system resources for each concurrent OS.

These techniques of running multiple OS s have limitations with regard to running both operating systems concurrently and independently. For example virtualization involves setting up a distinct address space for the guest OS and simulating I O to the guest OS. Therefore access to hardware including system memory has higher overhead for the guest OS using virtualization. Additionally techniques using Hypervisors result in lack of certainty in process control of each OS. Specifically the Hypervisor manages the amount of CPU time allocated to each OS and each OS then allocates CPU time for processes within the OS without knowledge of what is occurring in the other OS. In this regard high priority processes within one OS may not be given the required CPU time to complete their tasks because the OS is sharing CPU time through the Hypervisor which cannot account for the relative priorities of processes running within each OS. Because processing power may be limited in mobile processor architectures relative to desktop processor architectures techniques that depend on virtualization including hypervisors and operating system level virtualization may not offer optimal performance for a desktop OS running concurrently with a mobile OS on a mobile processor.

In one embodiment consistent with OS architecture an Android mobile OS and a full Linux OS run independently and concurrently on a modified Android kernel. In this embodiment the Android OS may be a modified Android distribution while the Linux OS Hydroid is a modified Debian Linux desktop OS. illustrate Android mobile OS Android kernel and Hydroid OS that may be employed in OS architecture in more detail.

As illustrated in Android OS includes a set of C C libraries in libraries layer that are accessed through application framework layer . Libraries layer includes the bionic system C library that was developed specifically for Android to be smaller and faster than the glibc Linux C library. Libraries layer also includes inter process communication IPC library which includes the base classes for the Binder IPC mechanism of the Android OS. Binder was developed specifically for Android to allow communication between processes and services. Other libraries shown in libraries layer in include media libraries that support recording and playback of media formats surface manager that managers access to the display subsystem and composites graphic layers from multiple applications 2D and 3D graphics engines and lightweight relational database engine . Other libraries that may be included in libraries layer but are not pictured in include bitmap and vector font rendering libraries utilities libraries browser tools i.e. WebKit etc. and or secure communication libraries i.e. SSL etc. .

Application framework layer of Android OS provides a development platform that allows developers to use components of the device hardware access location information run background services set alarms add notifications to the status bar etc. Framework layer also allows applications to publish their capabilities and make use of the published capabilities of other applications. Components of application framework layer of Android mobile OS include activity manager resource manager window manager dock manager hardware and system services desktop monitor service multi display manager and remote communication service . Other components that may be included in framework layer of Android mobile OS include a view system telephony manager package manager location manager and or notification manager among other managers and services.

Applications running on Android OS run within the Dalvik virtual machine in the Android runtime environment on top of the Android object oriented application framework. Dalvik virtual machine is a register based virtual machine and runs a compact executable format that is designed to reduce memory usage and processing requirements. Applications running on Android OS include home screen email application phone application browser application and or other application s App s .

For these reasons applications written for Android do not generally run on desktop Linux distributions such as Hydroid OS and applications written for standard Linux distributions do not generally run on Android OS . In this regard applications for Android OS and Hydroid OS are not bytecode compatible meaning compiled and executable programs for one do not run on the other.

In one embodiment Hydroid OS includes components of a cross environment communication framework that facilitates communication with Android OS through shared kernel . These components include IPC library that includes the base classes for the Binder IPC mechanism of the Android OS and remote communications service .

In one embodiment Hydroid OS is run within a chrooted created with the chroot command secondary execution environment created within the Android root environment. Processes and applications within Hydroid OS are run within the secondary execution environment such that the apparent root directory seen by these processes and applications is the root directory of the secondary execution environment. In this way Hydroid OS can run programs written for standard Linux distributions without modification because Linux user libraries are available to processes running on Hydroid OS in the chrooted secondary execution environment.

At step the boot loader is loaded in memory e.g. RAM with boot arguments passed from hardware or firmware. At step the boot loader sets up the root file system. At step the boot loader configures the memory and network support. In this step the boot loader may also configure modem support low memory protection and security options. At step the boot loader locates shared kernel and loads it to memory passing kernel arguments as needed. The boot loader starts shared kernel at which point shared kernel takes over control of the boot procedure. In one embodiment shared kernel is modified Android kernel .

At step shared kernel initializes drivers for hardware devices. In this step shared kernel may also initialize memory protection virtual memory modules and schedule caching. At step shared kernel initializes the mobile OS. In one embodiment the shared kernel runs a user space initialization process to initialize Android OS . The initialization process reads a configuration file which describes system services and additional system parameters for Android OS . At step the mobile OS framework is started this generally includes starting runtime environments. In one embodiment the root process of Android OS Zygote is run by the initialization process and initializes the Dalvik Virtual Java Machine runtime environment. At step service s for the mobile OS are started. Service s for the mobile OS generally include telephony services camera services GPS services and or communications services. In one embodiment Zygote starts the main Android SystemServer of Android OS which starts Android services such as telephony camera Bluetooth etc.

At step the desktop OS is initialized. In one embodiment an initialization process of Android OS parses a second configuration file and executes the commands and runs the services configured in the second configuration file. At step a desktop monitor service is started in the mobile OS that starts and monitors the desktop OS. In one embodiment desktop monitor service is started in Android OS . At step the desktop monitor service establishes a separate execution environment for the desktop OS. In one embodiment desktop monitor service of Android OS uses the Linux chroot command to setup the separate execution environment within the root file system for Hydroid OS . A separate execution environment for the desktop OS allows for example the desktop OS to have different user libraries than the mobile OS. In one embodiment user libraries of Hydroid OS are in a separate execution environment of user libraries of Android OS . Specifically applications and programs in each OS can statically or dynamically link to libraries separately within each OS without linking conflicts or library compatibility problems. At step the desktop monitor service starts the desktop OS service s . In one embodiment this includes the X Window system and Xfce desktop environment of Hydroid OS . After step mobile OS and desktop OS are running concurrently and independently on shared kernel on mobile computing device .

If mobile computing device is being used on its own without a secondary terminal environment desktop OS is not being used by the user. In this instance desktop OS can be suspended. For example illustrates OS architecture configuration where desktop OS is in a suspended state. In OS architecture configuration desktop OS and processes within desktop OS including window manager and applications and are indicated as suspended by being represented by dashed lines.

If mobile computing device is then docked with a secondary terminal environment having a user experience profile associated with a desktop OS desktop OS can be resumed and associated with the secondary terminal environment. While desktop OS is suspended processes and services of desktop OS are suspended. Accordingly these processes and services do not consume processing resources of mobile computing device . However these processes and services maintain their variables and states such that they may be resumed where they left off when desktop OS is resumed. Therefore the user does not lose data they were working on in desktop OS when it is suspended. In some embodiments the current states of the suspended processes and services of desktop OS are written to disk when desktop OS is suspended.

In OS architecture a service of mobile OS reacts to docking events controls the suspending and resuming of desktop OS and configures mobile OS or desktop OS for a docked secondary terminal environment. As illustrated in desktop monitor service of mobile OS reacts to docking events suspends or resumes desktop OS and configures mobile OS or desktop OS for docked secondary terminal environments.

If at step mobile computing device is not docked with a secondary terminal environment through port for example if mobile computing device is being used on its own desktop monitor service proceeds to step . At step desktop monitor service determines whether desktop OS is suspended. As described above after boot procedure completes at step desktop OS is running concurrently with mobile OS on shared kernel . Therefore when process flow is run after boot procedure desktop OS is not suspended at step . Desktop monitor service then proceeds to step where it suspends desktop OS . Once desktop OS is suspended process flow completes at step .

As described above illustrates OS architecture configuration that corresponds to OS architecture when mobile computing device is not docked with a secondary terminal environment according to various embodiments. In OS architecture configuration desktop OS is in a suspended state. While other processes of desktop OS are in a suspended state daemon process of desktop OS continues to run. Daemon process may do background functions such as networking and or performing other background tasks. Daemon process may also maintain a list of process ids that are running and suspended in desktop OS . In some embodiments daemon process may be replaced by a service that performs these functions.

Desktop monitor service communicates with daemon process through an IPC channel in shared kernel . In embodiments the IPC channel includes IPC driver in shared kernel . Daemon process registers to receive communications through an instantiated IPC protocol of the IPC channel. Desktop monitor service uses the instantiated IPC protocol to pass messages through IPC driver to daemon process . In one embodiment Desktop monitor service communicates with daemon process through a cross environment communications framework. In this embodiment the cross environment communication framework includes IPC library of Android OS IPC library of Hydroid OS and IPC driver of Android kernel . IPC libraries and provide the base classes for an instantiation of an IPC protocol for cross environment communication. Embodiments of the cross environment communications framework are described in more detail in co pending U.S. patent application Ser. No. 13 217 099 now U.S. Pat. No. 9 098 437 filed Aug. 24 2011 entitled Cross Environment Communications Framework the entire contents of which are incorporated herein by reference.

Referring back to step of process flow desktop monitor service suspends desktop OS by communicating with daemon process through the instantiated IPC protocol. Specifically desktop monitor service sends a call to a remotable object through the instantiated IPC protocol. The call includes actions to be performed by daemon process to suspend desktop OS . In this regard desktop monitor service runs a remote procedure call in daemon process to suspend desktop OS at step of process flow .

Process flow is repeated when mobile computing device is docked to a secondary terminal environment or undocked from a secondary terminal environment. A dock event occurs when device driver s in shared kernel detect the dock event and notify mobile OS that a dock event has occurred. In one embodiment Android kernel places the event into the event queue of Android OS . In this embodiment Android OS broadcasts a notification of the docking event to applications and services of Android OS . Desktop monitor service then begins process flow at step . At step desktop monitor service determines whether mobile computing device is docked with a secondary terminal environment. If at step desktop monitor service detects that mobile computing device is docked to a secondary terminal environment desktop monitor service proceeds to step .

At step desktop monitor service determines whether a user experience profile of the docked secondary terminal environment is associated with a mobile OS or a desktop OS. In one embodiment a dock connector used to connect mobile computing device to secondary terminal environment through port includes a mechanical or electrical feature that indicates whether the user experience profile of the secondary terminal environment is associated with a mobile OS or a desktop OS. For example mobile computing device may receive an electrical signal through port that indicates by way of a voltage level or series of signal voltage levels whether the user experience profile of secondary terminal environment is associated with mobile OS or desktop OS . In other embodiments desktop monitor service can determine the user experience profile from predetermined criteria of I O devices and or that make up secondary terminal environment . For example the user experience profile of a tablet style secondary terminal environment that includes a touch screen that is used as a display and a primary input device may be associated with mobile OS . As another example if secondary terminal environment includes a display monitor having a display size or resolution greater than a predetermined value secondary terminal environment may be determined to have a user experience profile associated with desktop OS . Alternatively if secondary terminal environment includes a physical keyboard and or pointing device s secondary terminal environment may be determined to have a user experience profile associated with desktop OS .

User experience profiles of secondary terminal environments may also be user selectable. For example the user could associate particular criteria of I O devices and or with user experience profiles associated with mobile OS or desktop OS . For example the user could associate particular I O devices or combinations of I O devices with a desktop user experience profile associated with desktop OS .

User experience profiles of secondary terminal environments may also be dynamically configurable. For example desktop monitor service may suggest a user experience profile for a secondary terminal environment based on past selections of user experiences for secondary terminal environments by the user. Desktop monitor service may then use a response by the user to the suggested user experience profile to update criteria used to determine suggested user experience profiles.

If at step desktop monitor service determines that the docked secondary terminal environment has a user experience profile associated with mobile OS desktop monitor service proceeds to step . In one embodiment an electrical signal from the dock connector of the docked secondary terminal environment indicates that the user experience profile of the docked secondary terminal environment is associated with mobile OS .

If at step desktop monitor service determines that the docked secondary terminal environment has a user experience profile associated with desktop OS desktop monitor service proceeds to step . In one embodiment an electrical signal from the dock connector of the docked secondary terminal environment indicates that it has a user experience profile associated with desktop OS .

At step desktop monitor service determines whether desktop OS is suspended. If desktop OS is not suspended desktop monitor service completes process flow at step . If desktop OS is suspended desktop monitor service resumes desktop OS at step . In one embodiment desktop monitor service sends a call to a remotable object through the instantiated IPC protocol. The call includes actions to be performed by daemon process to resume desktop OS . In this regard desktop monitor service runs a remote procedure call in daemon process to resume desktop OS at step . Process flow then completes at step .

In OS architecture configuration mobile OS is associated with tablet style secondary terminal environment while desktop OS is suspended. Mobile OS frame buffer is configured for the resolution of touch screen display and drives a video signal to touch screen display through port . Input commands from I O devices of secondary terminal environment are input to mobile computing device through port and handled by I O device drivers . Components of mobile OS including window manager then accept the input commands. In this way the user is presented with the mobile computing experience of mobile OS through tablet style secondary terminal environment in OS architecture configuration

In OS architecture configuration mobile OS is associated with the I O devices of mobile computing device including touch screen display and other I O devices . Specifically mobile OS drives touch screen display through frame buffer associated with mobile OS . Touch screen driver receives input commands from touch screen display and generates events that are handled by window manager and other components of mobile OS .

In OS architecture configuration desktop OS is associated with secondary terminal environment through port . Specifically desktop OS drives display monitor through frame buffer associated with desktop OS . I O device driver s of shared kernel receive input commands from input device s of secondary terminal environment . Because mobile OS and desktop OS are running concurrently on shared kernel input commands received by I O device driver s are available in shared kernel to both mobile OS and desktop OS . Desktop OS accepts the input commands received by I O device driver s while mobile OS ignores these commands.

At the same time desktop OS provides a complete desktop computing experience through secondary terminal environment . As illustrated in secondary terminal environment includes dock cradle . Dock cradle includes port not illustrated that is connected to mobile computing device through interface . Dock cradle is connected through interface to display monitor keyboard and or pointing device s . illustrates that desktop OS GUI is displayed on display monitor of secondary terminal environment . Applications and running on desktop OS may be displayed in application windows and or within desktop OS GUI .

As described above in one embodiment an Android mobile OS and a Linux desktop OS Hydroid run concurrently on the same shared kernel of a single mobile computing device. The Android mobile OS provides a mobile computing experience through mobile computing hardware and the Linux desktop OS provides a desktop computing experience through a secondary terminal environment having a user experience profile associated with the Linux OS. However other OS combinations are contemplated as within various embodiments of the invention. For example various aspects of the invention may be used to run Windows Mobile and Windows 7 on a shared kernel or sharing common kernel mode processes. As another example iOS and Mac OS X running on a shared kernel is also within the scope of various embodiments. Furthermore aspects of the invention may be used advantageously by combinations of embedded OS s and desktop or mobile OS s running on a shared kernel.

The foregoing description has been presented for purposes of illustration and description. Furthermore the description is not intended to limit embodiments of the invention to the form disclosed herein. While a number of exemplary aspects and embodiments have been discussed above those of skill in the art will recognize certain variations modifications permutations additions and sub combinations thereof.

The various operations of methods described above may be performed by any suitable means capable of performing the corresponding functions. The means may include various hardware and or software component s and or module s including but not limited to a circuit an application specific integrated circuit ASIC or processor.

The various illustrative logical blocks modules and circuits described may be implemented or performed with a general purpose processor a digital signal processor DSP an ASIC a field programmable gate array signal FPGA or other programmable logic device PLD discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any commercially available processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The steps of a method or algorithm described in connection with the present disclosure may be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module may reside in any form of tangible storage medium. Some examples of storage media that may be used include random access memory RAM read only memory ROM flash memory EPROM memory EEPROM memory registers a hard disk a removable disk a CD ROM and so forth. A storage medium may be coupled to a processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. A software module may be a single instruction or many instructions and may be distributed over several different code segments among different programs and across multiple storage media.

The methods disclosed herein comprise one or more actions for achieving the described method. The method and or actions may be interchanged with one another without departing from the scope of the claims. In other words unless a specific order of actions is specified the order and or use of specific actions may be modified without departing from the scope of the claims.

The functions described may be implemented in hardware software firmware or any combination thereof. If implemented in software the functions may be stored as one or more instructions on a tangible computer readable medium. A storage medium may be any available tangible medium that can be accessed by a computer. By way of example and not limitation such computer readable media can comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other tangible medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a computer. Disk and disc as used herein include compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and Blu ray disc where disks usually reproduce data magnetically while discs reproduce data optically with lasers.

Thus a computer program product may perform operations presented herein. For example such a computer program product may be a computer readable tangible medium having instructions tangibly stored and or encoded thereon the instructions being executable by one or more processors to perform the operations described herein. The computer program product may include packaging material.

Software or instructions may also be transmitted over a transmission medium. For example software may be transmitted from a website server or other remote source using a transmission medium such as a coaxial cable fiber optic cable twisted pair digital subscriber line DSL or wireless technology such as infrared radio or microwave.

Further modules and or other appropriate means for performing the methods and techniques described herein can be downloaded and or otherwise obtained by a user terminal and or base station as applicable. For example such a device can be coupled to a server to facilitate the transfer of means for performing the methods described herein. Alternatively various methods described herein can be provided via storage means e.g. RAM ROM a physical storage medium such as a CD or floppy disk etc. such that a user terminal and or base station can obtain the various methods upon coupling or providing the storage means to the device. Moreover any other suitable technique for providing the methods and techniques described herein to a device can be utilized.

Other examples and implementations are within the scope and spirit of the disclosure and appended claims. For example due to the nature of software functions described above can be implemented using software executed by a processor hardware firmware hardwiring or combinations of any of these. Features implementing functions may also be physically located at various positions including being distributed such that portions of functions are implemented at different physical locations. Also as used herein including in the claims or as used in a list of items prefaced by at least one of indicates a disjunctive list such that for example a list of at least one of A B or C means A or B or C or AB or AC or BC or ABC i.e. A and B and C . Further the term exemplary does not mean that the described example is preferred or better than other examples.

Various changes substitutions and alterations to the techniques described herein can be made without departing from the technology of the teachings as defined by the appended claims. Moreover the scope of the disclosure and claims is not limited to the particular aspects of the process machine manufacture composition of matter means methods and actions described above. Processes machines manufacture compositions of matter means methods or actions presently existing or later to be developed that perform substantially the same function or achieve substantially the same result as the corresponding aspects described herein may be utilized. Accordingly the appended claims include within their scope such processes machines manufacture compositions of matter means methods or actions.

