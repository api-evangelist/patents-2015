---

title: Information processing apparatus, method of controlling the same and non-transitory computer readable medium
abstract: An information processing apparatus having a safe mode for operation restricting a function of a bundle more than in a normal operation mode, comprises: an installation unit that installs a host bundle, and inactivates, as a temporary install, a fragment bundle added to the host bundle in order to extend a function of the host bundle, and stores the fragment bundle in a first memory area; and a holding unit that holds a list defining whether the temporarily installed fragment bundle is activated or inactivated when the information processing apparatus starts in the safe mode, wherein the installation unit, when the information processing apparatus starts in the safe mode, moves a fragment bundle defined to be activated in the list, out of temporarily installed fragment bundles, to a second memory area to activate that fragment bundle.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09563416&OS=09563416&RS=09563416
owner: CANON KABUSHIKI KAISHA
number: 09563416
owner_city: Tokyo
owner_country: JP
publication_date: 20151207
---
The present invention relates to an information processing apparatus a method of controlling the same and a non transitory computer readable medium.

In recent years in image forming apparatuses application hereinafter app operation environments as typified by a Java registered trademark environment are provided. With the aim of improving the functions and usability of the image forming apparatus apps that operate in an environment such as a Java registered trademark environment are created and by installing them in the image forming apparatus desired functions can be realized. As an app platform there is OSGi Open Service Gateway Initiative which is a Java registered trademark app platform directed to embedded devices. In OSGi a bundle is defined as a software module management unit and specifications are defined for management of a life cycle comprising install start stop update uninstall.

Conventionally in an operating system OS that operates in a personal computer PC or the like there are cases in which the system itself crashes or behavior becomes unstable due to an error in a setting of an app a driver or the like. For example in the case where a plurality of drivers that use the same hardware resources are installed there is the possibility of falling into these kinds of situations due to contention between drivers over hardware resources upon starting up. Further the system itself cannot start without cancelling such a state and so the system falls into a situation from which it cannot be recover.

In order to prevent falling into a situation as described above an OS comprises a mode hereinafter referred to as safe mode which is separate from a normal operation mode hereinafter referred to as normal mode in which the system starts up which comprises only minimum drivers system services or the like. By starting up in the safe mode the driver that is causing the malfunction is deleted settings of driver apps or the like can be changed and the cause of a system crash an operation instability or the like can be avoided.

Meanwhile in embedded devices such as image forming apparatuses there are cases in which due to a user installing an app a state of operation instability is fallen into caused by conflict between apps over resources service registration and usage order or the like. As a means of recovery an arrangement for starting up in a safe mode has been proposed Japanese Patent Laid Open No. 2010 009553 . However there is an arrangement in which for types of OSGi bundles there is a host bundle and a fragment bundle and in a case where these apps are handled it is necessary to consider restricting to fragment bundles as described below. A fragment bundle is a bundle of a format in which the bundle itself is added attached to a class loader space of a host bundle. The fragment bundle does not operate alone but rather the fragment bundle can also be put into a started state when the host bundle enters a started state. Also in order to put the fragment bundle in a stopped state it is necessary to put the host bundle in a stopped state or to uninstall the fragment bundle. These specifications are required as stipulations of OSGi and a fragment bundle in a stopped state cannot be installed for a host bundle in a started state.

In the specifications described above there was the problem that in a case where there is a problem in the fragment bundle even where there is no problem in the host bundle itself the starting of the host bundle would fail and the system could not start normally and therefore the system would fall into a situation from which it could not recover. For example there are cases where for a host bundle started upon a safe mode start that is pre installed in the system a fragment bundle for which there is a problem is installed by a user.

In view of the above described problem the present invention enables a system to start safely in a safe mode even in a case where a fragment bundle for which there is a problem is installed.

According to one aspect of the present invention there is provided an information processing apparatus having a normal operation mode and a safe mode for operation restricting a function of a bundle more than in the normal operation mode the apparatus comprising an installation unit configured to install a host bundle and to inactivate as a temporary install a fragment bundle added to the host bundle in order to extend a function of the host bundle and to store the fragment bundle in a first memory area and a holding unit configured to hold a list defining whether the temporarily installed fragment bundle is activated or inactivated when the information processing apparatus starts in the safe mode wherein the installation unit when the information processing apparatus starts in the safe mode moves a fragment bundle defined to be activated in the list out of temporarily installed fragment bundles to a second memory area to activate that fragment bundle.

According to another aspect of the present invention there is provided a method for controlling an information processing apparatus having a normal operation mode and a safe mode for operation restricting a function of a bundle more than in the normal operation mode the apparatus comprising installing a host bundle and inactivating as a temporary install a fragment bundle added to the host bundle in order to extend a function of the host bundle and storing the fragment bundle in a first memory area wherein in the installing when the information processing apparatus starts in the safe mode a fragment bundle out of temporarily installed fragment bundles that is defined to be activated in a list defining whether to activate or inactivate when the information processing apparatus starts in the safe mode is caused to move to a second memory area to activate that fragment bundle.

According to another aspect of the present invention there is provided a non transitory computer readable storage medium storing a program for causing a computer having a normal operation mode and a safe mode for operation restricting a function of a bundle more than in the normal operation mode to function as an installation unit configured to install a host bundle and to inactivate as a temporary install a fragment bundle added to the host bundle in order to extend a function of the host bundle and to store the fragment bundle in a first memory area and a holding unit configured to hold a list defining whether the temporarily installed fragment bundle is activated or inactivated when the computer starts in the safe mode wherein the installation unit when the computer starts in the safe mode moves a fragment bundle defined to be activated in the list out of temporarily installed fragment bundles to a second memory area to activate that fragment bundle.

By virtue of the present invention even in a case where a fragment bundle for which there is a problem is installed the convenience of a user is not degraded and it is possible to start the system safely in a safe mode start.

Further features of the present invention will become apparent from the following description of exemplary embodiments with reference to the attached drawings .

Hereinafter embodiments for working the present invention are explained using drawings. Firstly terms that will be used in the present specification will be defined.

A host bundle is a bundle which is a target of the addition of a fragment bundle. Note that a bundle indicates a Java registered trademark module and in the present specification it will be used to means the same thing as an app.

A fragment bundle is a bundle that does not operate independently but rather is added to a class loader space of a host bundle.

Adding a fragment bundle to a host bundle i.e. attaching to a host bundle is referred to as installing a fragment bundle . Furthermore this state is referred to as the fragment bundle is activated .

Deleting a fragment bundle in a state in which it is added to a host bundle is referred to as uninstalling a fragment bundle .

Installing a fragment bundle in a state in which it is not attached to a host bundle is referred to as temporarily installing a fragment bundle . Furthermore this state is referred to as the fragment bundle is inactivated .

A general app indicates a bundle installed by a user rather than a bundle that is pre installed in the system.

Using to explanation will be given for fragment bundle installation and activation inactivation which is common to each embodiment shown below. Also using and explanation will be given for starting of a host bundle which is a basic form of a safe mode.

The ROM is a read only non volatile storage area and stores a boot program of the image forming apparatus or the like. A RAM is a system work memory for the CPU to operate and is a memory for temporarily storing various data. The RAM is configured by an FRAM and an SRAM capable of holding stored content even after a power supply is turned off a DRAM whose storage contents are deleted after the power supply is turned off or the like. An HDD is a non volatile storage area and stores system apps or the like. Firmware including installed apps that are explained in is stored in the HDD .

An operation unit I F is an interface unit connecting a system bus and an operation unit . More specifically the operation unit I F receives and displays data to be displayed on the operation unit from the system bus and also outputs input information from the operation unit to the system bus . A user instruction to the image forming apparatus an information presentation or the like is performed via the operation unit . A network I F is connected to the LAN a WAN and the system bus and performs input output of information with an external unit. A scanner I F performs correction processing and editing of image data received from the scanner unit .

An image forming unit performs orientation conversion image compression decompression or the like on image data. A printer I F receives image data sent from the image forming unit and outputs to the printer unit which performs a print operation. A USB interface not shown is a general purpose interface that connects various peripheral devices to the image forming apparatus and performs control of a connection USB Universal Serial Bus . Here a flash memory not shown is connected to the USB interface.

Next explanation is given for each software unit. The image forming apparatus comprises an OS platform and a software platform is configured on top of the OS platform . The software platform is configured as a runtime environment of a Java VM which is a Java registered trademark virtual machine and is configured by providing the Java VM as an interpreter and providing a framework group and a library . The library is configured to include standard API Application Programming Interface libraries. The framework group is configured to include an OSGi . The OSGi causes a plurality of apps to operate on the single Java VM . Furthermore an OSGi extension unit indicates that it is possible to extend a function as necessary with respect to the OSGi . The OSGi provides management of the life cycle of apps and an inter app communication function. On the OSGi a plurality of system services are pre installed. As a system service there is an app management service for managing a plurality of app groups adding new apps updating and deleting. The app management service uses an installation control service to perform app addition updating and deletion. Upon the starting up of the image forming apparatus the OSGi in accordance with a service start order list saved in the HDD sequentially starts services such as a log in app the installation control service and the app management service . The service start order list in accordance with the present invention will be explained later.

The log in app manages a logged in user. The log in app has the characteristic that it cannot stop in consideration of the possibility of a login information query at an arbitrary timing from any app during login. Hypothetically in a case where the log in app was stopped login information could not be obtained and therefore for example in a case of an app that uses data associated with the login information data obtainment would fail and a trouble would occur in that operation. Here the login information indicates information such as a login name or a mail address of a user or the like who is currently logged in to the image forming apparatus . Because the log in app has the characteristics described above at least one operates when the image forming apparatus starts up.

A general app provides various functions to a user in the image forming apparatus . As examples of the general app there are image processing and compression apps apps that perform department management such as a printing restriction or the like. The general app operates under the management of the app management service . The app management service holds license information app information including version information of apps added as management targets or the like. Furthermore the app management service responds to an instruction to uninstall an app in the image forming apparatus and removes the general app from the management target. The general app and the log in app can be provided in the form of a host bundle or a fragment bundle as is described in .

An app installation UI configured by a WEB page illustrated in an installation screen of is displayed on a WEB browser not shown of the PC . A user designates an app they wish to install from the installation UI and makes an instruction for installation. The app management service receives the instruction for installation of the app designated by the installation UI and passes it to the installation control service . The installation control service obtains an app file based on the received instruction and makes a request for installation to the OSGi . The OSGi using the obtained app file performs an app installation. The installed app is managed by the app management service .

For Fragment Host recited in the manifest file of the host bundle is designated. The fact that these values match indicates that the host bundle and the fragment bundle are components of the same app.

In a state in which the above described conditions are satisfied when installing a fragment bundle based on the manifest information of the fragment bundle the OSGi identifies the corresponding host bundle and adds a class path of the fragment bundle to the class path of the host bundle. A class path is information for designating from what location the Java VM should read the class file when executing a Java app. A class file includes Java byte code which can be executed on the Java VM . Furthermore by a class loader not shown of the host bundle all classes and resources in the fragment bundle are loaded. A class loader is an object that handles the loading of classes and the searching for resources and all classes are loaded in the Java VM by the class loader and can be used from the app. Execution of the loading by the class loader of the host bundle is performed upon the start of the host bundle and therefore it is always necessary to load after having first stopped the host bundle and added the class path. Accordingly in a case where the host bundle is not stopped installation of the fragment bundle fails. After the fragment bundle is installed it can be used as a portion of the host bundle.

In the present example a Japanese resource and a Chinese resource are installed in the host bundle which is the main unit as the fragment bundles and and thereafter the host bundle can switch the language of the UI display using these language resources. In other words while the standard display on the UI of the host bundle is in English it is possible to extend the functions of the host bundle so as to display in Japanese or Chinese by installing new language resources and designating the switching of the resources on the UI.

An example of a case where the host bundle is a log in app is given. In such a case a configuration in which the host bundle handles basic processing related to authentication and for example and the fragment bundle adds a UI function for logging in by information that an IC card holds when the IC card is held up is possible.

Using to explanation will be given for a host bundle and fragment bundle management method in an app management screen that the app management service provides. Also explanation will be given for temporarily installing a fragment bundle and for activation inactivation of a fragment bundle.

Firstly explanation will be given for the management screen for general apps. An application name displays a name of a general app that is managed. In the case of the example illustrated in an application A and an application B are managed. Furthermore the application A is assumed to be a host bundle and a fragment bundle A and a fragment bundle B are managed. Also display is performed so that it can be seen that the fragment bundles are associated with the host bundle. Here the fragment bundle A and the fragment bundle B are displayed in association with the application A .

An installation day indicates a date that a respective app was installed. An application ID displays an application ID identification information assigned uniquely to a respective app. A state indicates a state of a respective app. If the app is in a started state started is displayed if the state is a stopped state stopped is displayed. Also in a case where a target is a fragment bundle in a case where the fragment bundle is installed in a host bundle active is displayed in the state and in a case of temporary install state indicated in inactive is displayed. A start button and a stop button are instruction buttons for switching start stop of an app. The stop button is displayed for an app in the started state and the start button is displayed for an app in the stopped state. An activation button and an inactivation button are buttons for instructing the switching of active inactive of a fragment bundle. When the stop button of an app in the started state the present example the application A is pressed the state is changed to stopped . On the other hand when the start button of an app in the stopped state the present example the application B is pressed the state is changed to started . When the inactivation button of an app in the active state the present example the fragment bundle A is pressed the state is changed to inactive . On the other hand when the activation button of an app in the inactive state the present example the fragment bundle B is pressed the state is changed to active .

Uninstall buttons to are buttons for instructing to uninstall respective apps. In an uninstallation of a fragment bundle only the fragment bundle is the target of the uninstallation. For example in a case where an uninstall button of the fragment bundle A is pressed only the fragment bundle A is uninstalled. On the other hand when an uninstall button of the application A which is a host bundle is pressed in addition to the application A the fragment bundle A and the fragment bundle B which are associated are also simultaneously uninstalled.

Next explanation will be given for the installation screen . When a reference button is pressed a screen not shown for selecting a file path is displayed. When an app file is designated on this selection screen the path to the app file is input in a path for the application file. There are cases where for an app a license file for decoding the app is necessary in the install process from the perspective of security business or the like. When a reference button is pressed a screen not shown for selecting a file path is displayed. When a license file is designated on this selection screen the path to the license file is input in a path for the license file. When an install button is pressed an installation of the app designated in the path of the application file is started. In a case where a fragment bundle is designated for installation the fragment bundle is first temporarily installed.

The installation control service using a simultaneously designated license file decodes the fragment bundle X and lays out an install work folder . Thereafter the installation control service identifies based on host bundle information recited in the manifest file of a fragment bundle X which is decoded that the associated host bundle is the general app A . On top of this the installation control service lays out a fragment bundle X in a temporary install folder which is a memory area. A fragment bundle laid out in the temporary install folder is in a temporary install state and is not under the management of the OSGi . Also as is denoted by reference numeral the fragment bundle X is laid out under a folder whose folder name is the unique app ID of the general app A which is the host bundle.

On the other hand by an inactivation instruction of the user the installation control service performs inactivation processing for a fragment bundle X which is installed in the active state. By inactivation processing the fragment bundle X once again is caused to be moved into the temporary install folder and is laid out in the inactive state. Because in this state it is not under the management of the OSGi the OSGi extension unit holds a relationship between the general app A and the fragment bundle X . Note that after the fragment bundle X is inactivated the fragment bundle X cannot be used as a portion of the general app A . That is in this state even if the general app A is started the fragment bundle X is in the stopped state. Note that in the present specification for convenience the temporary install folder is referred to as the first memory area and the app folder is recited as the second memory area .

When safe mode start processing is started in step S the OSGi reads the service start order list and starts the processing in order from a head line in the list. In step S the OSGi obtains the type of the bundle. In step S the OSGi confirms whether or not the type of the bundle obtained in step S corresponds to a fragment bundle. In a case where it corresponds to a fragment bundle YES in step S the processing proceeds to step S and in a case where it does not correspond to a fragment bundle i.e. in a case where it is a host bundle NO in step S the processing proceeds to step S. In step S the OSGi extension unit confirms whether or not the item of the bundle of interest is on i.e. whether or not safemode on . In a case where safemode off NO in step S the processing proceeds to step S and in a case where safemode on YES in step S the processing proceeds to step S. In step S the OSGi starts the target bundle i.e. the host bundle . In step S the OSGi confirms whether or not it is the final line of the list. In a case where it is not the final line NO in step S the processing returns to step S and the processing is repeated making the next line the next bundle the target of processing. In a case where processing has completed for all of the bundles in the service start order list YES in step S the processing for the safe mode start terminates.

Above explanation was given for a safe mode start whose target is host bundles. Next an embodiment in which the safe mode start includes fragment bundles will be illustrated.

When the safe mode start processing is started in step S the OSGi reads the service start order list and starts the processing in order from a head line in the list. In step S the OSGi extension unit obtains the type of the bundle. In step S the OSGi extension unit confirms whether or not the type of the bundle obtained in step S corresponds to a fragment bundle. In a case where it does not correspond to a fragment bundle NO in step S the processing proceeds to step S and in a case where it does correspond to a fragment bundle YES in step S the processing proceeds to step S.

In step S the OSGi extension unit obtains the activated inactivated state of the fragment bundle. In step S the OSGi extension unit confirms whether or not the item is on i.e. whether or not safemode on . In a case where safemode off NO in step S the processing proceeds to step S and in a case where safemode on YES in step S the processing proceeds to step S. In step S the OSGi extension unit confirms whether or not the state of the fragment bundle obtained in step S is activated. More specifically in a case where the fragment bundle is stored in the temporary install folder it is determined that it is inactivated and in a case where the fragment bundle is stored in the app folder it is determined that it is activated. In the case where it is not activated NO in step S the processing proceeds to step S and in a case where it is activated YES in step S the processing proceeds to step S. In step S the OSGi extension unit performs inactivation processing. After that the processing proceeds to step S.

In step S the OSGi extension unit confirms whether or not the state of the fragment bundle obtained in step S is inactivated. In the case where it is not inactivated NO in step S the processing proceeds to step S and in a case where it is inactivated YES in step S the processing proceeds to step S. In step S the OSGi extension unit performs activation processing. After that the processing proceeds to step S.

In step S the OSGi extension unit confirms whether or not it is the final line of the list. In a case where it is not the final line NO in step S the processing returns to step S and the processing is repeated making the next line the next bundle the target of processing. In a case where processing has completed for all of the bundles in the service start order list YES in step S the processing proceeds to step S. For processing of step S because it is the same explanation as for step S to step S illustrated in explanation is omitted. Next the processing of the safe mode start terminates.

In step S when a user turns ON a power supply of the image forming apparatus in a safe mode start the safe mode start processing of step S starts. In step S the image forming apparatus calls framework start processing of the OSGi . In step S the OSGi extension unit reads the service start order list . In step S the OSGi extension unit obtains the type of the bundle. In a case where the type of the bundle is a fragment bundle the OSGi extension unit obtains information of the state of the bundle in step S. In a case where the item is on and the state of the fragment bundle is the inactivated state the OSGi extension unit in step S performs an installation of the fragment bundle. In step S the OSGi extension unit copies an app file laid out in the temporary install folder to the app folder as an app file . In step S the OSGi extension unit deletes the app file laid out in the temporary install folder . By the foregoing flow the fragment bundle in the inactivated state enters the activated state.

Meanwhile in a case where the item is off and the state of the fragment bundle is the activated state the OSGi extension unit in step S performs a file retraction instruction. In step S the OSGi extension unit copies an app file laid out in the app folder to the temporary install folder as an app file . In step S the OSGi performs uninstallation processing and deletes the app file laid out in the app folder . By the foregoing flow the fragment bundle in the activated state enters the inactivated state.

By virtue of the present embodiment it is possible to increase convenience by upon the safe mode start inactivating a fragment bundle for which there is a possibility that a problem is included and thereby starting the system safely and activating necessary fragment bundles.

In the present embodiment a case is considered in which upon the safe mode start after inactivating or activating a fragment bundle once again the image forming apparatus is started in a normal operation mode normal mode . There is a problem in that in a case where upon the safe mode start a fragment bundle cannot be used a fragment bundle for which usage is stopped by the system cannot be used in the subsequent normal mode start either. With respect to this for example it can be considered that there is demand for being able to resume usage upon the subsequent normal mode start even in a case where usage of a fragment bundle that a user installed and started to use is stopped in a safe mode start.

Note that in a case where during the safe mode start the activation button the inactivation button of the fragment bundle is pressed on the management screen the OSGi extension unit deletes information of the fragment bundle which is the operation target from the safe mode activation inactivation management file. This is performed to prioritize a user operation performed during the safe mode start. Also in a case where uninstall buttons and are pressed on the management screen the OSGi extension unit deletes information of the fragment bundle which is the operation target from the safe mode activation inactivation management file . Furthermore the same is true for a case where uninstall buttons and of host bundles are pressed. In other words by the information being deleted from the safe mode activation inactivation management file each bundle is started in a state designated in the service start order list upon the subsequent normal mode start.

In step S the OSGi extension unit records the name of the inactivated fragment bundle and effective indicating the original state in the safe mode activation inactivation management file .

On the other hand in step S the OSGi extension unit records the name of the activated fragment bundle and invalid indicating the original state in the safe mode activation inactivation management file .

When the normal mode start processing is started in step S the OSGi extension unit reads the safe mode activation inactivation management file and starts the processing in order from a head line in the list. In step S the OSGi extension unit obtains the activated inactivated state of the fragment bundle corresponding to the item . In step S the OSGi extension unit confirms the value of the item and determines whether or not it is invalid . In a case where original status invalid YES in step S the processing proceeds to step S and in a case where original status effective NO in step S the processing proceeds to step S.

In step S the OSGi extension unit confirms whether or not the state of the fragment bundle obtained in step S is activated. In a case where a fragment bundle is not activated NO in step S the processing proceeds to step S and in a case where the fragment bundle is activated YES in step S the processing proceeds to step S. In step S the OSGi extension unit performs inactivation processing. After that the processing proceeds to step S.

In step S the OSGi extension unit confirms whether or not the state of the fragment bundle obtained in step S is inactivated. In a case where a fragment bundle is not inactivated NO in step S the processing proceeds to step S and in a case where the fragment bundle is inactivated YES in step S the processing proceeds to step S. In step S the OSGi extension unit performs activation processing. After that the processing proceeds to step S.

In step S the OSGi extension unit confirms whether or not it is the final line of the list. In a case where it is not the final line NO in step S the processing returns to step S and the processing is repeated setting the next line in the safe mode activation inactivation management file as the target of processing. In a case where the processing has completed for all fragment bundles in the safe mode activation inactivation management file YES in step S the processing proceeds to step S.

In step S the OSGi extension unit deletes the safe mode activation inactivation management file . In step S the OSGi reads the service start order list and starts the processing in order from a head line in the list. In step S the OSGi obtains the type of the bundle. In step S the OSGi confirms whether or not the type of the bundle obtained in step S corresponds to a fragment bundle. In a case where it does correspond to a fragment bundle YES in step S the processing proceeds to step S and in a case where it does not correspond to a fragment bundle NO in step S the processing proceeds to step S. In step S the OSGi starts the bundle. In step S the OSGi confirms whether or not it is the final line of the list. In a case where it is not the final line NO in step S the processing returns to step S and the processing is repeated setting the next line in the service start order list as the target of processing. In a case where it is the final line i.e. in a case where processing has completed for all of the bundles in the service start order list YES in step S the normal mode start up processing terminates.

By virtue of the present embodiment even when a fragment bundle is inactivated or activated upon the safe mode start it becomes possible to return to a state prior to the safe mode start when starting in the normal mode thereafter.

In the present embodiment a case in which a fragment bundle that is installed by a user is activated upon the safe mode start is considered. There is a problem in that in a case where in the safe mode start all of the fragment bundles that a user installed are inactivated even when there is a fragment bundle desired to be activated it cannot be used and usability is degraded. For example in a case where a fragment bundle that localizes a display language of a user interface for a host bundle which is a system app that is started in the safe mode start is inactivated it can be considered that the operability of the user will be degraded.

When the safe mode start processing is started in step S the OSGi extension unit reads the service start order list and starts the processing in order from a head line in the list. In step S the OSGi extension unit obtains the type of the bundle. In step S the OSGi extension unit confirms whether or not the type of the bundle obtained in step S corresponds to a fragment bundle. In a case where it does not correspond to a fragment bundle NO in step S the processing proceeds to step S and in a case where it does correspond to a fragment bundle YES in step S the processing proceeds to step S.

In step S the OSGi extension unit confirms whether or not the designation of the item of the service start order list is on . In a case where safemode off NO in step S the processing proceeds to step S and in a case where safemode on YES in step S the processing proceeds to step S.

In step S the OSGi extension unit obtains the activated inactivated state of the fragment bundle. In step S the OSGi extension unit obtains information of the fragment bundle. More specifically the item of the file and information related to whether or not a class file including Java registered trademark byte code exists in files to are obtained. In step S the OSGi extension unit confirms whether or not the item obtained in step S is on . In a case where safemode off NO in step S the processing proceeds to step S and in a case where safemode on YES in step S the processing proceeds to step S.

In step S the OSGi extension unit confirms whether or not a class file including Java registered trademark byte code exists in a file obtained in step S. In a case where it does exist YES in step S the processing proceeds to step S and in a case where it does not exist NO in step S the processing proceeds to step S. A reason for checking whether or not a class file file of a predetermined format exists is to avoid a later described host bundle start failing by a class file having a problem being read by the class loader of the host bundle. That is in a case where it is comprised of files other than a class file for example only resource files even though the fragment bundle is installed the starting of the host bundle failing can be avoided.

The processing of step S to step S is the same as step S to step S of illustrated in the first embodiment respectively and so explanation will be omitted.

By virtue of the present embodiment it becomes possible to prevent a degradation in the convenience of the user upon the safe mode start by starting the system safely even when a fragment bundle that the user installed is activated.

In the present embodiment a case in which there is a problem in a fragment bundle when the fragment bundle that is installed by a user is activated is considered. In the third embodiment in a case where there exists a class file including Java registered trademark byte code that can be executed on a Java VM it is not activated. However the user desires activation in a case where a class file including Java registered trademark byte code is included but it is known that there is no influence on the safe mode start. Accordingly in the present embodiment a fragment bundle for which a problem does not occur and a host file thereof are activated. On the other hand on top of inactivating a fragment bundle for which a problem does occur control is performed to activate the host bundle thereof.

Firstly in when the safe mode start processing is started in step S the OSGi extension unit reads the service start order list and starts the processing in order from a head line in the list. In step S the OSGi extension unit obtains the type of the bundle. In step S the OSGi extension unit confirms whether or not the type of the bundle obtained in step S corresponds to a fragment bundle. In a case where it does not correspond to a fragment bundle NO in step S the processing proceeds to step S and in a case where it does correspond to a fragment bundle YES in step S the processing proceeds to step S.

In step S the OSGi extension unit obtains the activated inactivated state of the fragment bundle. In step S the OSGi extension unit obtains the item of the manifest file of the fragment bundle. In step S the OSGi extension unit confirms whether or not the designation of the item of the service start order list is on . In a case where safemode off NO in step S the processing proceeds to step S and in a case where safemode on YES in step S the processing proceeds to step S.

In step S the OSGi extension unit confirms whether or not the item obtained in step S is off . In a case where safemode off NO in step S the processing proceeds to step S and in a case where safemode on YES in step S the processing proceeds to step S.

The processing of step S to step S is the same as step S to step S of illustrated in the first embodiment respectively and so explanation will be omitted. For step S detailed explanation is given using .

Firstly in when the host bundle start processing is started in step S the OSGi extension unit reads the service start order list and starts the processing in order from a head line in the list. Note that the processing of step S to step S is the same as step S to step S of illustrated in the first embodiment respectively and so explanation will be omitted.

In step S the OSGi extension unit confirms whether or not the start of the bundle performed in step S succeeded. In a case where it does succeed YES in step S the processing proceeds to step S and in a case where it fails NO in step S the processing proceeds to step S. In step S the OSGi extension unit obtains information of a fragment bundle related to the host bundle for which starting failed. In step S the OSGi extension unit confirms whether or not a fragment bundle exists from the information obtained in step S. In a case where one does not exist NO in step S the processing proceeds to step S and in a case where one does exist YES in step S the processing proceeds to step S.

In step S the OSGi extension unit obtains a list not shown of fragment bundles related to the host bundle for which starting failed and starts processing from the head line of the list. In step S the OSGi extension unit obtains the activated inactivated state of the fragment bundle. In step S the OSGi extension unit confirms whether or not the state of the fragment bundle obtained in step S is activated. In a case where a fragment bundle is not activated NO in step S the processing proceeds to step S and in a case where the fragment bundle is activated YES in step S the processing proceeds to step S. In step S the OSGi extension unit performs inactivation processing. After that the processing proceeds to step S.

In step S the OSGi extension unit confirms whether or not it is the final line of the list. In a case where it is not the final line NO in step S the processing returns to step S and the processing is repeated making the next line the next fragment bundle the target of processing. In a case where it is the final line i.e. inactivation processing has completed for all of the fragment bundles related to the host bundle for which starting failed YES in step S the processing proceeds to step S. Then in step S the OSGi extension unit attempts to start once again the host bundle for which starting failed.

In step S the OSGi confirms whether or not it is the final line of the service start order list. In a case where it is not the final line NO in step S the processing returns to step S and the processing is repeated making the next line the target of processing. In a case where it is the final line i.e. in a case where processing has completed for all of the bundles in the service start order list YES in step S the processing for starting the host bundle terminates and the processing returns to the processing of .

By the present embodiment upon the safe mode start it becomes possible to start the system safely without degrading the convenience of the user even in a case where there is a problem with a fragment bundle that a user installed.

Embodiment s of the present invention can also be realized by a computer of a system or apparatus that reads out and executes computer executable instructions e.g. one or more programs recorded on a storage medium which may also be referred to more fully as a non transitory computer readable storage medium to perform the functions of one or more of the above described embodiment s and or that includes one or more circuits e.g. application specific integrated circuit ASIC for performing the functions of one or more of the above described embodiment s and by a method performed by the computer of the system or apparatus by for example reading out and executing the computer executable instructions from the storage medium to perform the functions of one or more of the above described embodiment s and or controlling the one or more circuits to perform the functions of one or more of the above described embodiment s . The computer may comprise one or more processors e.g. central processing unit CPU micro processing unit MPU and may include a network of separate computers or separate processors to read out and execute the computer executable instructions. The computer executable instructions may be provided to the computer for example from a network or the storage medium. The storage medium may include for example one or more of a hard disk a random access memory RAM a read only memory ROM a storage of distributed computing systems an optical disk such as a compact disc CD digital versatile disc DVD or Blu ray Disc BD a flash memory device a memory card and the like.

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures and functions.

This application claims the benefit of Japanese Patent Application No. 2014 248420 filed Dec. 8 2014 which is hereby incorporated by reference herein in its entirety.

