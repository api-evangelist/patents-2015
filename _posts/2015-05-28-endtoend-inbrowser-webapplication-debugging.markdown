---

title: End-to-end in-browser web-application debugging
abstract: Described herein are various embodiments of computer-implemented tools, systems, and methods for managing debugging of different portions of an application (e.g., front-end and back-end) with different respective debuggers in a manner that facilitates debugging the entire application from within the user interface associated with one of the debuggers (e.g., from within a browser interface). In some embodiments, a debug manager acts as a bridge between a web-browser debugger and a back-end debugger, allowing an application developer to debug web applications without leaving the browser.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471466&OS=09471466&RS=09471466
owner: SAP SE
number: 09471466
owner_city: Walldorf
owner_country: DE
publication_date: 20150528
---
This document relates generally to the debugging of software applications and more particularly to systems and methods for debugging web applications.

In many web applications the front end is programmed using a different language than the back end. For example in business applications with web interfaces the front end code implementing the client side business logic may be written e.g. in JavaScript Dart CoffeeScript or TypeScript and the back end code executing the server side business application logic e.g. by accessing a database and processing the data retrieved therefrom may be implemented in Java or a business application specific language. Debugging such programs may involve the use of and frequent switching between two separate debuggers for the front end and the back end. A developer may for instance step through the front end code using a debugger integrated into a web browser e g running on a client computer and upon reaching a line of code that includes a request sent to the back end manually identify the portion of back end code servicing the request and debug that portion e.g. by placing a break point therein with a debugger specific to the programming language of the back end which may be running e.g. on an application server remotely accessed by the client computer . Thereafter debugging of the front end may be resumed in some cases this involves re starting the program. This process is often cumbersome and takes up valuable developer time.

The description that follows includes systems methods techniques instruction sequences and computing machine program products that embody illustrative embodiments of the disclosure. For the purposes of explanation numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident however to those skilled in the art that embodiments of the inventive subject matter may be practiced without these specific details. In general well known instruction instances protocols structures and techniques have not been shown in detail.

Disclosed herein are computer implemented tools systems and methods for managing debugging different portions of an application e.g. front end and back end with different respective debuggers in a manner that facilitates debugging the entire application from within the user interface associated with one of the debuggers e.g. from within a browser interface . In some embodiments a debug manager tool implemented in hardware and or software and hereinafter simply referred to as the debug manager acts as a bridge between a web browser debugger and a back end debugger allowing an application developer to debug web applications without leaving the browser. The debug manager may provide a connection service that identifies in response to receipt of a network request from the browser a server to handle the request as well as a debug request service that translates debug requests from the web browser into a format understandable by the back end debugger. The debug manager may be a generic component that is adaptable via suitable front end and back end plugins to operate with various browsers and or back end debuggers.

The browser may be for example Google Chrome or Mozilla Firefox or generally any browser with integrated debugging functionality. The system may include a front end adapter that translates browser specific representations of debug requests and associated data into a generic representation. This renders the debug manager browser independent and operable in conjunction with each front end debugger for which a front end adapter is provided. The front end adapter may interface with the respective browsers and or extendable browser integrated front end debuggers via application programming interfaces APIs as are often provided along with browsers as part of for instance software development kits SDKs . Suitable APIs are available for instance for Chrome and Firefox browser debuggers. The front end adapter may generally reside along with the browser on the client device or on the server hosting the debug manager or partially on both. For example as illustrated the front end adapter may include a browser plugin downloaded to the client device and a front end plugin executing on the same server as the debug manager . The browser plugin may translate debug requests received from a user via the user interface of the front end debugger into browser generic debug requests which may be formatted in accordance with any of a variety of interaction protocols e.g. as OData payload of a request method or as an XML payload of a remote procedure call. The front end plugin may process the received debug requests e.g. to enter them in a generic format into the debug request list of the debug manager .

The debug manager provides two distinct services among other functionality a connection service and a debug request service . In some example embodiments these two services are implemented as distinct e.g. software modules in other example embodiments their functionality is provided in an integrated single module. The connection service maintains or has access to a list of server client connections that it consults in response to a network request received from the browser to identify the particular server computer to which the request should be forwarded and if applicable the particular session to which the request belongs. A client device may for instance execute in parallel multiple web applications or multiple instances of the same web application each in a different session. Similarly the back end server may run multiple applications or multiple instances of the same application in multiple sessions for one or more clients. The connection service identifies for each incoming network requests e.g. processing requests to be performed by the application back end which client devices is making the request and for which specific session as well as which server computer with which Internet Protocol IP address is to handle the request. The connection service than forwards the request to the proper server computer. The server computer may identify which portion of the back end application code portion is to process the request and return the identified code portion via the debug manager to the browser where the user may enter specific debug requests e.g. set breakpoints watches etc. .

The debug request service manages debug requests received from the browser for instance by dispatching the requests synchronously or asynchronously as desired and or by converting the request into a language and format that is understandable by the back end debugger. In some embodiments the debug request service is specific to a particular type of back end debugger and directly outputs debug requests in the format in which they are used by the back end debugger . Alternatively in some embodiments at least part of the functionality for adapting the debug request format to the back end debugger is provided by a back end plugin rendering the debug request service suitable for use with multiple back end debuggers for which back end plugins are available. In one example embodiment the back end server executes back end applications code written in the Advanced Business Application Programming ABAP language developed by SAP SE headquartered in Walldorf Germany and provides an associated ABAP debugger. The back end plugin may in this embodiment be implemented using the Business Add in BAdI framework provided for ABAP applications. Further plugins may be provided for applications written for example in Java C or any other suitable programming language.

To identify the connection associated with a given incoming request the debug manager e.g. via its connection service may consult a list of connections as may be maintained for instance by an Internet connection monitor that is part of the existing application execution infrastructure. In some scenarios the server computer and client device are in the same network e.g. the intranet of an organization and are directly identified by their respective IP addresses so that no further address resolution is needed. In other scenarios the server computer and client device are separated by an external network such as the Internet that works with a transparent proxy or with plug and play network address translation. In this case there is likewise no further address translation needed as the network protocols being used reveal the true network address of the client device to the server. In yet other scenarios a non transparent proxy server or program acts as an intermediary between the client device on the one end and the application server and server hosting the debug manager on the other end and conceals the address of the client device e.g. for security reasons. In this case if the application server and or the debug manager server are white listed for the proxy server they can send e.g. via the connection service an inquiry to the proxy server requesting the true network address of the client device upon receipt of the requested network address the proper connection and session can be determined. Otherwise if the application server and or debug manager server have no way of obtaining the network address of the client device the fallback mechanism is to have the client device send further information that unequivocally identifies the connection when a debug session is started or opens a separate connection that will be transferred to the debug request service and thereafter be used to send and receive all debug information.

Still with reference to once the identified application server computer receives the forwarded network request it identifies the portion of back end code that is responsible for servicing the request operation and returns the corresponding source code via the debug manager to the browser operation . The browser may display the source code e.g. in a display panel shown alongside a panel showing the front end application code or in the same panel interspersed with the front end application code operation . The user may then make debug requests for the back end code in the same manner as for the front end code. Such debug requests include for example setting a breakpoint or conditional breakpoint setting a watch forcing a value sending a signal or displaying a call stack as well as step break resume runs and continue requests.

With reference to upon receipt of the developer s debug request in the browser operation the request is encapsulated in request message e.g. by a browser plugin and sent to the debug manager operation where a generic representation of the debug request may be placed into a request list e.g. by a front end plugin to be processed by the debug request service operation . The debug request service and or the back end plugin translate the generic debug request into the specific format used by the back end debugger operation . For example the debug operation of setting a break point at a given function within the code may translate to a command BREAK FUNCTION . Upon receipt the back end debugger executes the requested debug operation and returns the results encapsulated in a response message via the debug manager to the browser operation . The response message may for example include the values of certain variables for which a watch was requested.

As part of managing and translating the debug requests the debug request service may further serve to translate between synchronous and asynchronous requests. For example if the client device requests a debug operation such as e.g. sending a signal or message to a given process that is a synchronous operation client side but is executed asynchronously on the back end debugger the debug request service forwards the synchronous request from the client asynchronously to the back end debugger but does not answer the client device until it has received a response message from the back end debugger or a time out has been triggered. To do so the debug request service may use a busy waiting technique in which it repeatedly polls the state of a flag or return value or simply be suspended until the response from the back end debugger arrives. Conversely the debug request service may also convert asynchronous requests from the client device to synchronous requests. For example to set a conditional breakpoint that is a breakpoint that is only triggered when a particular condition or set of conditions is met such as when a certain variable has a specified value the client device may send a corresponding request to the debug request service and then subscribe to the requested operation or wait for a message coming from the debug request service. The debug request service and or back end plugin then cause execution of the operation in a sequential manner using synchronous requests or pausing and resuming program execution cyclically e.g. by sending requests to the back end debugger to stop check the value perform another step stop again and so on until the specified condition is met .

Beneficially the systems and methods disclosed herein allow a developer to test and debug a web application in its entirety from within the web browser obviating the need to switch back and forth between multiple debuggers and or to manually identify back end code portions that handle particular network requests. This increased convenience can translate into faster application development and consequently development cost savings.

While example embodiments are described herein with reference to web applications and debugging both front end and back end code inside a web browser the disclosed systems and methods are more generally applicable to debugging two or more portions of a software application written in potentially two or more different programming languages using different respective debuggers but from within a single debug interface associated with one of the debuggers that remotely accesses the other debuggers via a debug manager substantially as described in conjunction with suitable adapters and plugins.

Certain example embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain physical manner. In various example embodiments one or more computer systems e.g. a standalone computer system a client computer system or a server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In some example embodiments a hardware module may be implemented mechanically electronically or with any suitable combination thereof. For example a hardware module may include dedicated circuitry or logic that is permanently configured to perform certain operations. For example a hardware module may be a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC . A hardware module may also include programmable logic or circuitry that is temporarily configured by software to perform certain operations. For example a hardware module may include software encompassed within a general purpose processor or other programmable processor. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the phrase hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner or to perform certain operations described herein. As used herein hardware implemented module refers to a hardware module. Considering example embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where a hardware module comprises a general purpose processor configured by software to become a special purpose processor the general purpose processor may be configured as respectively different special purpose processors e.g. comprising different hardware modules at different times. Software may accordingly configure a particular processor or processors for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Hardware modules can provide information to and receive information from other hardware modules. Accordingly the described hardware modules may be regarded as being communicatively coupled. Where multiple hardware modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses between or among two or more of the hardware modules. In example embodiments in which multiple hardware modules are configured or instantiated at different times communications between such hardware modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware modules have access. For example one hardware module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware module may then at a later time access the memory device to retrieve and process the stored output. Hardware modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions described herein. As used herein processor implemented module refers to a hardware module implemented using one or more processors.

Similarly the methods described herein may be at least partially processor implemented with a particular processor or processors being an example of hardware. For example at least some of the operations of a method may be performed by one or more processors or processor implemented modules. Moreover the one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors with these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. an application program interface API .

The performance of certain of the operations may be distributed among the processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processors or processor implemented modules may be located in a single geographic location e.g. within a home environment an office environment or a server farm . In other example embodiments the processors or processor implemented modules may be distributed across a number of geographic locations.

The operating system may manage hardware resources and provide common services. The operating system may include for example a kernel services and drivers . The kernel may act as an abstraction layer between the hardware and the other software layers. For example the kernel may be responsible for memory management processor management e.g. scheduling component management networking security settings and so on. The services may provide other common services for the other software layers. The drivers may be responsible for controlling and or interfacing with the underlying hardware. For instance the drivers may include display drivers camera drivers Bluetooth drivers flash memory drivers serial communication drivers e.g. Universal Serial Bus USB drivers Wi Fi drivers audio drivers power management drivers and so forth.

The libraries may provide a low level common infrastructure that may be utilized by the applications . The libraries may include system libraries e.g. C standard library that may provide functions such as memory allocation functions string manipulation functions mathematic functions and the like. In addition the libraries may include API libraries such as media libraries e.g. libraries to support presentation and manipulation of various media format such as MPREG4 H.264 MP3 AAC AMR JPG PNG graphics libraries e.g. an OpenGL framework that may be used to render 2D and 3D in a graphic content on a display database libraries e.g. SQLite that may provide various relational database functions web libraries e.g. WebKit that may provide web browsing functionality and the like. The libraries may also include a wide variety of other libraries to provide many other APIs to the applications .

The frameworks may provide a high level common infrastructure that may be utilized by the applications . For example the frameworks may provide various graphic user interface GUI functions high level resource management high level location services and so forth. The frameworks may provide a broad spectrum of other APIs that may be utilized by the applications some of which may be specific to a particular operating system or platform.

The applications include a home application a contacts application a browser application a book reader application a location application a media application a messaging application a game application and a broad assortment of other applications such as third party application . In a specific example the third party application e.g. an application developed using the Android or iOS software development kit SDK by an entity other than the vendor of the particular platform may be mobile software running on a mobile operating system such as iOS Android Windows Phone or other mobile operating systems. In this example the third party application may invoke the API calls provided by the mobile operating system to facilitate functionality described herein.

The machine may include processors memory and I O components which may be configured to communicate with each other via a bus . In an example embodiment the processors e.g. a Central Processing Unit CPU a Reduced Instruction Set Computing RISC processor a Complex Instruction Set Computing CISC processor a Graphics Processing Unit GPU a Digital Signal Processor DSP an Application Specific Integrated Circuit ASIC a Radio Frequency Integrated Circuit RFIC another processor or any suitable combination thereof may include for example processor and processor that may execute instructions . The term processor is intended to include multi core processor that may comprise two or more independent processors also referred to as cores that may execute instructions contemporaneously. Although shows multiple processors the machine may include a single processor with a single core a single processor with multiple cores e.g. a multi core process multiple processors with a single core multiple processors with multiples cores or any combination thereof.

The memory may include a main memory a static memory and a storage unit accessible to the processors via the bus . The storage unit may include a machine readable medium on which are stored the instructions embodying any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within the main memory within the static memory within at least one of the processors e.g. within a processor s cache memory or any suitable combination thereof during execution thereof by the machine . Accordingly the main memory static memory and the processors may be considered as machine readable media .

As used herein the term memory refers to a machine readable medium able to store data temporarily or permanently and may be taken to include but not be limited to random access memory RAM read only memory ROM buffer memory flash memory and cache memory. While the machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database or associated caches and servers able to store instructions . The term machine readable medium shall also be taken to include any medium or combination of multiple media that is capable of storing instructions e.g. instructions for execution by a machine e.g. machine such that the instructions when executed by one or more processors of the machine e.g. processors cause the machine to perform any one or more of the methodologies described herein. Accordingly a machine readable medium refers to a single storage apparatus or device as well as cloud based storage systems or storage networks that include multiple storage apparatus or devices. The term machine readable medium shall accordingly be taken to include but not be limited to one or more data repositories in the form of a solid state memory e.g. flash memory an optical medium a magnetic medium other non volatile memory e.g. Erasable Programmable Read Only Memory EPROM or any suitable combination thereof. The term machine readable medium specifically excludes non statutory signals per se.

The I O components may include a wide variety of components to receive input provide and or produce output transmit information exchange information capture measurements and so on. It will be appreciated that the I O components may include many other components that are not shown in . In various example embodiments the I O components may include output components and or input components . The output components may include visual components e.g. a display such as a plasma display panel PDP a light emitting diode LED display a liquid crystal display LCD a projector or a cathode ray tube CRT acoustic components e.g. speakers haptic components e.g. a vibratory motor other signal generators and so forth. The input components may include alphanumeric input components e.g. a keyboard a touch screen configured to receive alphanumeric input a photo optical keyboard or other alphanumeric input components point based input components e.g. a mouse a touchpad a trackball a joystick a motion sensor and or other pointing instrument tactile input components e.g. a physical button a touch screen that provides location and force of touches or touch gestures and or other tactile input components audio input components e.g. a microphone and the like.

In further example embodiments the I O components may include biometric components motion components environmental components and or position components among a wide array of other components. For example the biometric components may include components to detect expressions e.g. hand expressions facial expressions vocal expressions body gestures or eye tracking measure biosignals e.g. blood pressure heart rate body temperature perspiration or brain waves identify a person e.g. voice identification retinal identification facial identification finger print identification or electroencephalogram based identification and the like. The motion components may include acceleration sensor components e.g. accelerometer gravitation sensor components rotation sensor components e.g. gyroscope and so forth. The environmental components may include for example illumination sensor components e.g. photometer temperature sensor components e.g. one or more thermometer that detect ambient temperature humidity sensor components pressure sensor components e.g. barometer acoustic sensor components e.g. one or more microphones that detect background noise proximity sensor components e.g. infrared sensors that detect nearby objects and or other components that may provide indications measurements and or signals corresponding to a surrounding physical environment. The position components may include location sensor components e.g. a Global Position System GPS receiver component altitude sensor components e.g. altimeters and or barometers that detect air pressure from which altitude may be derived orientation sensor components e.g. magnetometers and the like.

Communication may be implemented using a wide variety of technologies. The I O components may include communication components operable to couple the machine to a network and or devices via coupling and coupling respectively. For example the communication components may include a network interface component or other suitable device to interface with the network . In further examples communication components may include wired communication components wireless communication components cellular communication components Near Field Communication NFC components Bluetooth components e.g. Bluetooth Low Energy Wi Fi components and other communication components to provide communication via other modalities. The devices may be another machine and or any of a wide variety of peripheral devices e.g. a peripheral device couple via a Universal Serial Bus USB .

Moreover the communication components may detect identifiers and or include components operable to detect identifiers. For example the communication components may include Radio Frequency Identification RFID tag reader components NFC smart tag detection components optical reader components e.g. an optical sensor to detect one dimensional bar codes such as Universal Product Code UPC bar code multi dimensional bar codes such as Quick Response QR code Aztec code Data Matrix Dataglyph MaxiCode PDF417 Ultra Code UCC RSS 2D bar code and other optical codes acoustic detection components e.g. microphones to identify tagged audio signals and so on. In additional a variety of information may be derived via the communication components such as location via Internet Protocol IP geo location location via Wi Fi signal triangulation location via detecting a NFC beacon signal that may indicate a particular location and so forth.

In various example embodiments one or more portions of the network may be an ad hoc network an intranet an extranet a virtual private network VPN a local area network LAN a wireless LAN WLAN a wide area network WAN a wireless WAN WWAN a metropolitan area network MAN the Internet a portion of the Internet a portion of the Public Switched Telephone Network PSTN a plain old telephone service POTS network a cellular telephone network a wireless network a Wi Fi network another type of network or a combination of two or more such networks. For example the network or a portion of the network may include a wireless or cellular network and the coupling may be a Code Division Multiple Access CDMA connection a Global System for Mobile communications GSM connection or other type of cellular or wireless coupling. In this example the coupling may implement any of a variety of types of data transfer technology such as Single Carrier Radio Transmission Technology 1 RTT Evolution Data Optimized EVDO technology General Packet Radio Service GPRS technology Enhanced Data rates for GSM Evolution EDGE technology third Generation Partnership Project 3GPP including 3G fourth generation wireless 4G networks Universal Mobile Telecommunications System UMTS High Speed Packet Access HSPA Worldwide Interoperability for Microwave Access WiMAX Long Term Evolution LTE standard others defined by various standard setting organizations other long range protocols or other data transfer technology.

The instructions may be transmitted and or received over the network using a transmission medium via a network interface device e.g. a network interface component included in the communication components and utilizing any one of a number of well known transfer protocols e.g. hypertext transfer protocol HTTP . Similarly the instructions may be transmitted and or received using a transmission medium via the coupling e.g. a peer to peer coupling to devices . The term transmission medium shall be taken to include any intangible medium that is capable of storing encoding or carrying instructions for execution by the machine and includes digital or analog communications signals or other intangible media to facilitate communication of such software.

Furthermore the machine readable medium is non transitory in other words not having any transitory signals in that it does not embody a propagating signal. However labeling the machine readable medium as non transitory should not be construed to mean that the medium is incapable of movement the medium should be considered as being transportable from one physical location to another. Additionally since the machine readable medium is tangible the medium may be considered to be a machine readable device.

Throughout this specification plural instances may implement components operations or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the subject matter herein.

Although an overview of the inventive subject matter has been described with reference to specific example embodiments various modifications and changes may be made to these embodiments without departing from the broader scope of embodiments of the present disclosure. Such embodiments of the inventive subject matter may be referred to herein individually or collectively by the term invention merely for convenience and without intending to voluntarily limit the scope of this application to any single disclosure or inventive concept if more than one is in fact disclosed.

The example embodiments illustrated herein are described in sufficient detail to enable those skilled in the art to practice the teachings disclosed. Other example embodiments may be used and derived therefrom such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. The Detailed Description therefore is not to be taken in a limiting sense and the scope of various example embodiments is defined only by the appended claims along with the full range of equivalents to which such claims are entitled.

As used herein the term or may be construed in either an inclusive or exclusive sense. Moreover plural instances may be provided for resources operations or structures described herein as a single instance. Additionally boundaries between various resources operations modules engines and data stores are somewhat arbitrary and particular operations are illustrated in a context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within a scope of various example embodiments of the present disclosure. In general structures and functionality presented as separate resources in the example configurations may be implemented as a combined structure or resource. Similarly structures and functionality presented as a single resource may be implemented as separate resources. These and other variations modifications additions and improvements fall within the scope of example embodiments of the present disclosure as represented by the appended claims. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

