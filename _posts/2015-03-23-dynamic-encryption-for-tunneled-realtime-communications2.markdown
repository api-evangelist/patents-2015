---

title: Dynamic encryption for tunneled real-time communications
abstract: A system performs tunneling for real-time communications (“RTC”). The system establishes an unencrypted tunnel between a tunneling server and a user equipment (“UE”). Upon establishing the unencrypted tunnel, the UE creates a socket on the unencrypted tunnel. The system determines that the socket requires encrypted RTC, and establishes an encrypted tunnel between the tunneling server and the UE. Upon establishing the encrypted tunnel, the UE moves the socket from the unencrypted tunnel to the encrypted tunnel, and the system performs the encrypted RTC via the socket over the encrypted tunnel.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09614816&OS=09614816&RS=09614816
owner: ORACLE INTERNATIONAL CORPORATION
number: 09614816
owner_city: Redwood Shores
owner_country: US
publication_date: 20150323
---
One embodiment is directed generally to a communications network and in particular to delivering real time traffic over a communications network.

Many enterprises have moved from telephony services using the Public Switched Telephone Network PSTN provided by a traditional telephone company to telephony services using the Internet Protocol IP provided by an IP Telephony service provider . Such services are commonly known as Voice over IP VoIP or IP Telephony. IP Telephony uses an IP network e.g. the Internet as a backbone and can thus provide advanced features such as video conferencing call recording and call forwarding.

Recently driven by the growing base of mobile data subscribers ubiquitous Internet access and high bandwidth that is now available in both fixed and mobile networks advanced services accessed via the Internet known as Over the Top OTT services have become popular. However while OTT services threaten traditional telephony offerings innovative service providers are introducing their own OTT services and must therefore overcome a number of unique challenges as they deploy and market these new services.

One embodiment is a system that performs tunneling for real time communications RTC . The system establishes an unencrypted tunnel between a tunneling server and a user equipment UE . Upon establishing the unencrypted tunnel the UE creates a socket on the unencrypted tunnel. The system determines that the socket requires encrypted RTC and establishes an encrypted tunnel between the tunneling server and the UE. Upon establishing the encrypted tunnel the UE moves the socket from the unencrypted tunnel to the encrypted tunnel and the system performs the encrypted RTC via the socket over the encrypted tunnel.

One embodiment provides dynamic tunnel traffic encryption services herein referred to as DTTE services for real time communications RTC in a network environment. In one embodiment instead of establishing encrypted tunnels by default an unencrypted tunnel is initially established and then if there are individual sockets in the unencrypted tunnel that require encryption an encrypted tunnel is established and the sockets are moved on demand between the encrypted tunnel and the unencrypted tunnel based on socket specific encryption requirements. Accordingly embodiments make efficient use of encrypted and unencrypted tunnels while meeting encryption requirements of each socket individually and on demand dynamically thereby providing DTTE services.

In performing RTC UE communicates signaling and media traffic with respective servers in service provider network . Signaling traffic may be communicated according to an application layer protocol such as the Session Initiation Protocol SIP . SIP is a signaling communications protocol conventionally used for controlling multimedia communication sessions such as voice and video calls over IP networks. SIP is configured to be independent of the underlying transport layer. Accordingly SIP can run on different transport protocols such as the Transmission Control Protocol TCP the User Datagram Protocol UDP etc.

TCP is one of the core protocols of the IP suite and provides reliable ordered and error checked delivery of a stream of octets between programs running on computers connected to an IP network such as a local area network an intranet or the public Internet as described in for example Internet Engineering Task Force IETF request for comments RFC 793 and RFC 675. A datagram is a basic transfer unit associated with a packet switched network for which the delivery arrival time and order of arrival need not be guaranteed by the network. UDP is a protocol that uses a simple connectionless transmission model with a minimum of protocol mechanisms as described in for example IETF RFC 768. Applications that do not require the reliability of a TCP connection may instead use UDP which emphasizes low overhead operation and reduced latency rather than error checking and delivery validation.

Network further includes a tunneling server that together with a tunneling client within UE provides functionality for establishing and managing tunnels for performing RTC according to the Tunneled Services Control Function TSCF standard as described in for example 3rd generation partnership program 3GPP technical report TR 33.830 V0.5.0 the disclosure of which being incorporated herein by reference. In general using a tunnel for communication refers to using a delivery protocol to encapsulate a different payload protocol.

The TSCF standard provides client side and server side network elements for establishing managed tunnels for performing RTC e.g. tunneling client and tunneling server in . It also provides two types of outer layer tunneling transports a stream based outer layer tunneling transport via TCP or Transport Layer Security TLS and a datagram based outer layer tunneling transport via UDP or Datagram Transport Layer Security DTLS .

TLS is a cryptographic protocol configured to provide communication security over the Internet. TLS is an IETF standards track protocol as provided in for example IETF RFC 2246 RFC 4346 RFC 5246 and or RFC 6176. DTLS is a protocol that provides communications privacy for datagram protocols. DTLS allows datagram based applications to communicate in a way that prevents eavesdropping tampering or message forgery. DTLS is based on the stream oriented TLS protocol and provides similar security guarantees. TCP and TLS provide reliable ordered and error checked delivery of the inner layer traffic but introduce undesirable latency that is detrimental to RTC applications over a communications network that experiences impairments. On the other hand UDP and DTLS do not guarantee reliable delivery thus minimizing latency and being desirable for RTC.

In some embodiments IP network may include security devices e.g. firewalls proxies etc. that allow traffic of only a certain transport protocol e.g. only TCP only UDP etc. . Accordingly tunneling client and tunneling server may establish and manage a corresponding TSCF tunnel so that UE may use the TSCF tunnel to traverse such security devices and connect to tunneling server to reach service provider network .

The TSCF standard further provides control messages for exchanging configuration information between client side and server side network elements that establish and manage tunnels for performing RTC e.g. tunneling client and tunneling server in . According to the TSCF standard control messages between client side and server side network elements are of a request response type and a control message response for a request includes either a corresponding reply or an error code indicating why the request could not be honored. TSCF control messages utilize a Type Length Value TLV encoding. TLV is defined as the variable length concatenation of a unique Type represented by an integer and a Value containing the actual value identified by the Type.

Each TSCF control message includes a control message header at the beginning. Table 1 below provides an example TSCF control message header configuration.

In the header configuration of Table 1 the CM Version field is the first nibble i.e. 4 bits of the first byte and identifies the version of the header. Currently version 1 is supported and versions 4 and 6 are reserved for IP payload differentiation the first nibble of the first byte of IP header is the IP header version which is 4 for IPv4 and 6 for IPv6 . The CM Version field is required to indicate the outer transport protocol of a TSCF tunnel. The CM Indication field identifies whether the message is a control message or not. This field must be set to 0 to indicate that a message is a control message. The Reserved field is reserved for future use and its bits are set to zero. The CM Type field identifies the type of the control message e.g. whether it is a request or a response and the functionality it is used for. The TLV Count field indicates the number of TLVs that follow or are appended to the header in the current control message. The control message header itself is not a TLV and is not counted as one. The Tunnel Session ID TSID field includes a TSID that is assigned by a server side network element to uniquely identify a TSCF tunnel. The Sequence field is an ever incrementing transaction counter so that each outstanding request message includes a unique value in this field.

In one embodiment in order to establish a TSCF tunnel tunnelling client sends a configuration request message to tunnelling server to obtain configuration information for a TSCF tunnel. Table 2 below provides an example configuration request message header.

As provided in Table 2 in the configuration request message all TSID header field bits are set to 1 i.e. FFFF . . . . In response tunnelling server assigns a TSID to a TSCF tunnel and sends a configuration response message back to tunnelling client . Table 3 below provides an example configuration response message header.

As provided in Table 3 the configuration response message includes the assigned TSID. All following messages between tunnelling client and tunnelling server include this assigned TSID in their headers.

In one embodiment if a control message is communicated between tunnelling client and tunnelling server and does not include the expected TSID the control message is dropped and the corresponding TSCF tunnel is terminated. Alternatively in one embodiment tunnelling client may send a configuration release request message to tunnelling server to terminate a TSCF tunnel. In response to such a configuration release request message tunnelling server sends a configuration release response message to tunnelling client . At this time the TSCF tunnel is terminated.

In one embodiment UE may execute a SIP based RTC application e.g. application that relies on a library such as the software development kit SDK provided by the tunneled session management solution from Oracle Corp.

System includes a bus or other communication mechanism for communicating information and a processor coupled to bus for processing information. Processor may be any type of general or specific purpose processor. System further includes a memory for storing information and instructions to be executed by processor . Memory can be comprised of any combination of random access memory RAM read only memory ROM static storage such as a magnetic or optical disk or any other type of computer readable medium. System further includes a communication device such as a network interface card to provide access to a network. Therefore a user may interface with system directly or remotely through a network or any other method.

Computer readable medium may be any available media that can be accessed by processor and includes both volatile and nonvolatile media removable and non removable media and communication media. Communication media may include computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.

Processor may further be coupled via bus to a display such as a Liquid Crystal Display LCD . A keyboard and a cursor control device such as a computer mouse may further be coupled to bus to enable a user to interface with system on an as needed basis.

In one embodiment memory stores software modules that provide functionality when executed by processor . The modules include an operating system that provides operating system functionality for system . The modules further include a tunneling module for providing tunneling and all other functionality disclosed herein. In one example embodiment tunneling module may implement tunneling server of in conjunction with one or more remaining elements of . System can be part of a larger system such as added functionality to the Acme Packet session border controller from Oracle Corp. Therefore system can include one or more additional functional modules to include the additional functionality. A database is coupled to bus to provide centralized storage for tunneling module and additional functional modules .

In one embodiment tunneling module and or additional functional modules may include an establishing module that establishes an unencrypted tunnel between a tunneling server and a UE where upon establishing the unencrypted tunnel the UE creates a socket on the unencrypted tunnel a determining module that determines that the socket requires encrypted RTC the establishing module further establishing an encrypted tunnel between the tunneling server and the UE where upon establishing the encrypted tunnel the UE moves the socket from the unencrypted tunnel to the encrypted tunnel and a performing module that performs the encrypted RTC via the socket over the encrypted tunnel as will be described herein with reference to .

Referring again to with known systems encryption of RTC traffic may be necessary in order to provide secure communications services at UE . However due to limitations of tunneling server and or IP network encryption of encapsulated RTC may not always be feasible or even needed. In one example encryption is not feasible if tunneling server does not have any encryption resources available or if the network firewalls filter encrypted traffic based on TLS port numbers. In another example encryption is not needed if tunneled traffic runs purely in a controlled intranet environment or if media access protocols provide encryption e.g. wireless fidelity WiFi with encryption .

In some known systems when executing real time media applications with encapsulated traffic UE by default attempts to establish encrypted tunnels with tunneling server and only switches to unencrypted tunnels if it is not possible to establish an encrypted tunnel. In these systems it is generally up to application to statically link inner sockets to tunnels and provide functionality for determining and tracking tunnel transports corresponding to the sockets.

A network socket is an endpoint of an inter process communication flow across a computer network according to a communications protocol. A network socket may be a datagram socket or a stream socket. A datagram socket is a connectionless network socket. Each packet sent or received on a datagram socket is individually addressed and routed. A datagram is a basic transfer unit associated with a packet switched network for which the delivery arrival time and order of arrival need not be guaranteed by the network. A stream socket provides a connection oriented and sequenced with mechanisms for creating and destroying connections and for detecting errors. In general for regular communications a user can create a datagram or stream socket that uses the network interface of the system in which the application runs. In a TSCF environment however sockets use a tunnel for transport instead of a network interface. To differentiate these sockets from regular sockets they are referred to as inner sockets since they only exist inside a tunnel.

One disadvantage with these known systems is that implementation of encrypted tunnels by default results in various performance issues such as large overhead latency forced static dimensioning of encryption capabilities at tunneling server etc. Forced static dimensioning of encryption capabilities refers to the assignment of several resources for encryption when they may not be really used. The more encryption resources that are pre allocated the more memory is used. This limits the number of available channels for non TSCF services e.g. Secure Real time Transport Protocol SRTP Message Session Relay Protocol MSRP etc. since memory is shared by all server applications.

In contrast to the known systems embodiments of the present invention provide dynamic and efficient tunnel traffic encryption herein referred to as DTTE services by moving inner RTC sockets across encrypted and unencrypted tunnels. In one embodiment UE dynamically moves inner RTC sockets between an unencrypted TSCF tunnel and an encrypted TSCF tunnel on an on demand basis and according to predefined levels of encryption requirements. Thus embodiments allow inner media sockets to be individually secured based on respective security requirements.

In one embodiment since an inner socket only exists in association with a tunnel and socket traffic gets transported by the tunnel in order to change the transport or tunnel type of an inner socket it is moved meaning that all references to the socket e.g. references already created configured by application are removed from the source tunnel and added to the destination tunnel. The socket is neither destroyed nor reconfigured but its reference i.e. pointer is moved from the source tunnel to the destination tunnel. This functionality is transparent to the end user that keeps using the socket without being aware of it being moved.

In one embodiment dynamic tunnel traffic encryption functionality is implemented by a first dynamic encryption module at tunneling client and a second dynamic encryption module at tunneling server . In this embodiment first dynamic encryption module in coordination with second dynamic encryption module determines on demand socket security requirements on a per socket basis and moves sockets accordingly between unencrypted TSCF tunnel and encrypted TSCF tunnel .

In one embodiment first dynamic encryption module tags inner sockets of application with different security encryption levels such that respective state machines at tunneling client and tunneling server may provide functionality to support efficient communication of encapsulated RTC traffic in a cost effective and yet secure way for each socket. In one example the socket may be configured with a tag that can have three possible values indicating respectively that no encryption is needed encryption is optional preferred and encryption is mandatory. Depending on this value the tunneling framework state machine moves sockets around from one tunnel e.g. unencrypted to another e.g. encrypted .

One embodiment allows inner media sockets to be marked for encryption based on three levels of security unencrypted encrypted only and encrypted preferred. In this embodiment first dynamic encryption module moves inner sockets of application from encrypted TSCF tunnel to unencrypted TSCF tunnel and vice versa depending on network conditions. For example if a socket is marked as encrypted preferred and resides in unencrypted TSCF tunnel first dynamic encryption module tries to move it to encrypted TSCF tunnel and will create a new encrypted tunnel if none is available. If this is not possible the socket stays in unencrypted TSCF tunnel . In another example if a socket is marked as encrypted only and resides in unencrypted TSCF tunnel first dynamic encryption module tries to move it to encrypted TSCF tunnel and will create a new encrypted tunnel if none is available. If this is not possible the socket indicates an error and fails to transmit traffic. In another example if a socket is marked as unencrypted and resides in encrypted TSCF tunnel first dynamic encryption module will move the socket to unencrypted TSCF tunnel .

In one embodiment when a socket is configured as unencrypted first dynamic encryption module moves the corresponding traffic to or keeps the corresponding traffic in unencrypted TSCF tunnel . When a socket is configured as encrypted only first dynamic encryption module moves the corresponding traffic to or keeps the corresponding traffic in encrypted TSCF tunnel . If a socket is configured as encrypted only and no encrypted tunnel is available e.g. encrypted TSCF tunnel is not established and or cannot be established then first dynamic encryption module prohibits data transmission on that socket. When a socket is configured as encrypted preferred first dynamic encryption module moves the corresponding traffic to or keeps the corresponding traffic in encrypted TSCF tunnel . If a socket is configured as encrypted preferred and no encrypted tunnel is available e.g. encrypted TSCF tunnel is not established and or cannot be established first dynamic encryption module moves the corresponding traffic to or keeps the corresponding traffic in unencrypted TSCF tunnel .

In one embodiment after a socket is moved to encrypted TSCF tunnel first dynamic encryption module may move the socket back to unencrypted TSCF tunnel if network conditions and or application requirements of application are changed such that encryption requirements of the socket can still be met after moving the socket back to unencrypted TSCF tunnel . For example after a socket is moved to encrypted TSCF tunnel if application indicates that encryption is no longer required for RTC communications via that socket e.g. application updates the socket and marks it as unencrypted first dynamic encryption module moves the socket back to unencrypted TSCF tunnel . Alternatively after a socket is moved to encrypted TSCF tunnel if network conditions improve such that unencrypted TSCF tunnel can provides secure communications for the socket first dynamic encryption module moves the socket back to unencrypted TSCF tunnel .

In one embodiment unencrypted TSCF tunnel and encrypted TSCF tunnel are compliant with TSCF tunnel management e.g. tunnel initialization maintenance termination etc. as defined by e.g. 3GPP TR 33.830 V0.5.0 and TSCF tunnel transport protocols are supported for the negotiation of both unencrypted TSCF tunnel and encrypted TSCF tunnel between tunneling client and tunneling server .

One embodiment provides TSCF service request functionality such that tunneling client may request DTTE services from tunneling server . This embodiment provides TSCF control messages for exchanging configuration information between tunneling client and tunneling server for disabling and enabling DTTE services at tunneling server . is an example message sequence diagram including the sequence of messages exchanged for providing DTTE services according to some present embodiments. includes network elements such as UE and tunneling server as described herein with reference to .

At tunneling client at UE sends a configuration request control message to tunneling server to establish unencrypted TSCF tunnel and at tunneling server responds to the configuration request control message of tunneling client with a configuration response control message. Configuration request and response messages allow for tunneling client to obtain configuration information for unencrypted TSCF tunnel from tunneling server as described in for example 3GPP TR 33.830 V0.5.0. Upon completing the exchange of configuration request response messages tunneling client and tunneling server may use unencrypted TSCF tunnel for performing RTC. In one embodiment from the RTC application perspective application at UE creates only one TCP UDP always on regular tunnel i.e. unencrypted TSCF tunnel by executing a tsc ctrl new tunnel application programming interface API and the configuration request control message is sent in response to the execution of this API.

At when an inner socket is needed e.g. for communicating SIP call control traffic or RTP media traffic application creates this socket on unencrypted TSCF tunnel by executing a tsc socket API. A socket is created by determining a socket type e.g. datagram vs stream and a tunnel on which the socket should be created.

At in order to implement DTTE services application marks the new inner socket according to its corresponding security requirements by executing the tsc setsockopt API and using one of the following types 

At application binds the socket by executing a tsc bind API. The bind function assigns a specific transport port e.g. TCP or UDP to the socket. This port is later used as a source port of all traffic generated by the socket.

At since the socket resides in a TCP UDP tunnel i.e. unencrypted tunnel and is marked for DTTE services first dynamic encryption module at tunneling client sends a TSCF service request control message to tunneling server to initiate enable DTTE services.

At second dynamic encryption module at tunneling server receives this service request control message and reserves a new TLS DTLS tunnel i.e. encrypted TSCF tunnel .

At tunneling server sends a TSCF service response control message back to tunneling client to indicate that DTTE services are enabled. This TSCF service response control message includes the TID of the newly reserved tunnel encrypted TSCF tunnel .

At upon receiving the TSCF service response control message tunneling client negotiates with tunneling server for encrypted TSCF tunnel by sending a TSCF configuration request control message.

At tunneling server responds to the TSCF configuration request control message by sending a TSCF configuration response control message back to tunneling client .

At upon receiving the TSCF configuration response control message which indicates that encrypted TSCF tunnel is established tunneling client moves the socket from unencrypted TSCF tunnel to encrypted TSCF tunnel and notifies application that encryption has been enabled for that socket and therefore secure data can be transmitted. From this point on all packets traversing that socket are communicated as encrypted traffic between tunneling client and tunneling server across encrypted TSCF tunnel .

For example at tunneling client sends encrypted media traffic over encrypted TSCF tunnel to tunneling server and at tunneling server sends encrypted media traffic over encrypted TSCF tunnel to tunneling client .

At application terminates the socket by executing a tsc close API. If no other encrypted sockets are present in encrypted TSCF tunnel this tunnel is internally terminated by tunneling client as follows.

At tunneling client sends a configuration release request control message to tunneling server to terminate encrypted TSCF tunnel .

At tunneling server responds to the configuration release control message by sending a configuration release response control message back to tunneling client . At this time encrypted TSCF tunnel is terminated.

In one embodiment if application terminates unencrypted TSCF tunnel by executing a tsc delete tunnel API encrypted TSCF tunnel is also terminated. If connectivity issues bring either one of encrypted TSCF tunnel or unencrypted TSCF tunnel down tunneling client attempts to re establish connectivity and bring either tunnel back up according to the corresponding functionalities provided by the TSCF standard.

In one embodiment in order to support DTTE services by reserving additional encrypted or unencrypted tunnels tunneling server is configured to provide two interfaces running on the same IP address one unencrypted interface e.g. TCP UDP and one encrypted interface e.g. TLS DTLS . In this embodiment if the unencrypted interface is configured at tunneling server on transport port number port then the encrypted interface is configured at tunneling server on a transport port number port 1. In this embodiment second dynamic encryption module at tunneling server associates assigned tunnel IP addresses with specific tunnels and routes packets through the corresponding tunnels.

In one embodiment each tunnel has an internal IP address associated with it. This IP address is typically the source address of all encapsulated traffic originated at tunneling client . If an inner socket is created in unencrypted TSCF tunnel there is a binding at tunneling server that links the internal IP address of unencrypted TSCF tunnel to that socket. When the socket is moved to encrypted TSCF tunnel that binding has to be removed and then recreated between the socket and the internal IP address of encrypted TSCF tunnel . This binding is needed to route traffic back from the untunneled side of an RTC e.g. service provide network to the tunneled side of an RTC e.g. UE .

In one embodiment first dynamic encryption module at tunneling client requests DTTE services by sending a TSCF client service request control message TSC TLV SERVICE TYPE ENABLE DTTE to tunneling server . Upon receiving this client service request second dynamic tunneling module at tunneling server determines if DTTE services are enabled for the interface in which the client service request is received. If DTTE services are enabled for that interface tunneling server responds to tunneling client by sending a TSCF service response message tsc response code success. If DTTE services are disabled tunneling server sends a TSCF service response message tsc response service unavailable. 

One embodiment provides TSCF software development kit SDK APIs that allow sockets to be configured according to three encryption levels unencrypted encrypted only and encrypted preferred. In one embodiment DTTE services are requested by application by executing the tsc socket API and setting the appropriate socket option as provided in the following functionality 

Upon executing the above functionality if tsc setsockopt returns 1 the option has not been set correctly. If it returns 0 the option has been set correctly but DTTE services are not enabled until encrypted TSCF tunnel is created and negotiated. In one embodiment a notification tsc notification dtte is used to indicate to application that DTTE services are enabled. One embodiment enables this notification and provides a corresponding callback according to the following functionality 

In one embodiment in order to provide DTTE services a keyword DTTE is included in the assigned services parameter in the tscf interface configuration object. When DTTE services are enabled the configuration parameter assigned services of the TSCF interface includes the DTTE keyword. When this keyword is not present in the configuration parameter assigned services of the TSCF interface DTTE services are disabled. In one embodiment DTTE services are disabled by default. In one embodiment the parameter assigned services is real time reconfigurable and the new values are applied to newly established tunnels. Table 4 below provides an example TSCF parameter configuration for enabling DTTE services according to some embodiments.

At tunneling client and tunneling server establish unencrypted TSCF tunnel . Upon establishing unencrypted TSCF tunnel application at UE creates a socket on unencrypted TSCF tunnel . In some embodiment application marks the socket with a respective one of a plurality of encryption levels. In order to establish unencrypted TSCF tunnel tunneling client sends a configuration request message to tunneling server to obtain configuration information for unencrypted TSCF tunnel and tunneling server responds to the configuration request message of tunneling client by a corresponding configuration response message.

At tunneling server determines that the socket requires encrypted RTC upon receiving a service request message from tunneling client indicating a request for enabling DTTE services. In some embodiments the socket is determined to require encrypted RTC according to its corresponding encryption level within the plurality of encryption levels. Upon receiving the service request message tunneling server reserves encrypted TSCF tunnel and responds to the service request message of tunneling client by a corresponding service response message indicating that DTTE services are enabled. Tunneling server provides an encrypted interface and an unencrypted interface corresponding to encrypted TSCF tunnel and unencrypted TSCF tunnel respectively. In one embodiment the encrypted interface and the unencrypted interface run on the same IP address the unencrypted interface being configured on a transport port number N and the encrypted interface being configured on a transport port number N 1. 

At tunneling client and tunneling server establish encrypted TSCF tunnel . In order to establish encrypted TSCF tunnel and upon receiving the service response message from tunneling server tunneling client sends a configuration request message to tunneling server to obtain configuration information for encrypted TSCF tunnel . Tunneling server responds to the configuration request message of tunneling client by a corresponding configuration response message. Upon establishing encrypted TSCF tunnel first dynamic encryption module at tunneling client moves the socket from unencrypted TSCF tunnel to encrypted TSCF tunnel .

At UE and tunneling server perform encrypted RTC via the socket over encrypted TSCF tunnel . In some embodiments unencrypted TSCF tunnel is terminated when application closes the socket or when encrypted TSCF tunnel is terminated.

As disclosed embodiments allow for a TSCF tunneling configuration that provides DTTE services. Embodiments mark inner media sockets with different encryption levels and based on those levels and network conditions dynamically move sockets across encrypted and unencrypted TSCF tunnels. Accordingly embodiments give the end user the possibility of utilizing encrypted and unencrypted tunnels in an efficient manner while also meeting encryption requirements of RTC on a per socket basis.

Several embodiments are specifically illustrated and or described herein. However it will be appreciated that modifications and variations of the disclosed embodiments are covered by the above teachings and within the purview of the appended claims without departing from the spirit and intended scope of the invention.

