---

title: Dynamic optimizing scanner for identity and access management (IAM) compliance verification
abstract: An identity and access management (IAM) system is associated with a set of data sources from which data is collected. A set of vulnerabilities that the IAM system should attempt to detect is identified. For each vulnerability to be detected, a prioritized list of strategies used to detect that vulnerability is generated. Preferably, each strategy specifies the type(s) of data required to detect that vulnerability. An algorithm to determine a best strategy to be used for detecting each vulnerability, preferably based on the data available from the data sources, is then identified. The IAM system then collects data in an optimized manner. In particular, during the collection process, the IAM system preferably collects only what is necessary based on the configuration, even if the data source is capable of providing additional data. The collected data is then processed to detect security vulnerabilities associated with the IAM accounts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600666&OS=09600666&RS=09600666
owner: International Business Machines Corporation
number: 09600666
owner_city: Armonk
owner_country: US
publication_date: 20151203
---
This disclosure relates generally to the field of digital resource access and more particularly to risk based computer recertification of online access.

Identity and Access Management Governance is a set of processes and policies for organizations to manage risks and maintain compliance with regulations and policies by administering securing and monitoring identities and their access to applications information and systems. Although potentially complex in implementation the concept of Identity and Access Management IAM Governance is fairly straightforward determine who should have access to what resources and who should not according to government regulations industry specific regulations SOX HIPPA GLBA etc. and business regulations and guidelines. Typically key aspects of IAM Governance include access request governance entitlement certifications reports and audits and analytics and intelligence including role management entitlement management separation of duties enforcement and privileged identity management . An end to end IAM Governance solution may also provide related functions such as access enforcement user provisioning password management and user lifecycle management.

Identity and access management IAM systems protect enterprise data and applications with context based access control security policy enforcement and business driven identity governance. These systems may be operated in a standalone manner in association with cloud based environments or in hybrid environments.

Automated systems for IAM health checking detect identity centric risks within a governance system by scanning for one or more weakness patterns such as too many Admins configured account sharing or cloning of access permissions. While detecting these and other such conditions provides useful information known detection mechanisms are time consuming and require large amounts of data to be read or extracted from multiple systems being governed. The problems associated with data collection in this context are exacerbated by the existence of multiple detection algorithms that may be available for evaluating a particular risk and because detection algorithms have different levels of reliability as well as different data requirements. As a consequence known IAM health checking techniques tend to operate with missing or imperfect data or using algorithms that do not always fit the available data. Moreover a best algorithm for a particular job typically cannot be pre configured.

Known implementations that require a fixed set of data to detect vulnerabilities are not flexible and they are incapable of detecting vulnerabilities using different strategies based on available data.

According to this disclosure an identity and access management IAM system is augmented with the ability to execute different types of detection mechanisms based on various factors such as the degree of reliability desired the nature of the available data cost latency and the like. In one implementation the IAM system is associated with a set of data sources from which data is collected. A particular source may provide one or more types of data. A set of vulnerabilities that the IAM system should attempt to detect is identified. For each vulnerability to be detected a prioritized list of strategies used to detect that vulnerability is then generated. Preferably each strategy specifies the type s of data required to detect that vulnerability as well as the code to detect it. An algorithm to determine a best strategy to be used for detecting each vulnerability preferably based on the data available from the data sources is then identified. Given this configuration the IAM system then operates to collect data in an optimized manner. Thus preferably each data source required to provide data is called to collect data for all of the configured vulnerabilities that are to be detected. During the collection process the IAM system collects only what is necessary based on the configuration even if the data source is capable of providing additional data.

Thus according to this disclosure a best or at least better strategy for vulnerability detection is chosen based on the data sources available and data collection is optimized so that a given data source preferably is invoked only once or as few times as possible to collect data for all vulnerabilities to be detected. In this manner the IAM system operates much more efficiently as unnecessary data either is not collected or its collection minimized.

The foregoing has outlined some of the more pertinent features of the subject matter. These features should be construed to be merely illustrative. Many other beneficial results can be attained by applying the disclosed subject matter in a different manner or by modifying the subject matter as will be described.

With reference now to the drawings and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments of the disclosure may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the disclosed subject matter may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

With reference now to the drawings depicts a pictorial representation of an exemplary distributed data processing system in which aspects of the illustrative embodiments may be implemented. Distributed data processing system may include a network of computers in which aspects of the illustrative embodiments may be implemented. The distributed data processing system contains at least one network which is the medium used to provide communication links between various devices and computers connected together within distributed data processing system . The network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server and server are connected to network along with storage unit . In addition clients and are also connected to network . These clients and may be for example personal computers network computers or the like. In the depicted example server provides data such as boot files operating system images and applications to the clients and . Clients and are clients to server in the depicted example. Distributed data processing system may include additional servers clients and other devices not shown.

In the depicted example distributed data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course the distributed data processing system may also be implemented to include a number of different types of networks such as for example an intranet a local area network LAN a wide area network WAN or the like. As stated above is intended as an example not as an architectural limitation for different embodiments of the disclosed subject matter and therefore the particular elements shown in should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.

With reference now to a block diagram of an exemplary data processing system is shown in which aspects of the illustrative embodiments may be implemented. Data processing system is an example of a computer such as client in in which computer usable code or instructions implementing the processes for illustrative embodiments of the disclosure may be located.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor SMP system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices. A storage device is any piece of hardware that is capable of storing information either on a temporary basis and or a permanent basis. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer recordable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code. The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. As one example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system other than the SMP system mentioned previously without departing from the spirit and scope of the disclosed subject matter.

As will be seen the techniques described herein may operate in conjunction within the standard client server paradigm such as illustrated in in which client machines communicate with an Internet accessible Web based portal executing on a set of one or more machines. End users operate Internet connectable devices e.g. desktop computers notebook computers Internet enabled mobile devices or the like that are capable of accessing and interacting with the portal. Typically each client or server machine is a data processing system such as illustrated in comprising hardware and software and these entities communicate with one another over a network such as the Internet an intranet an extranet a private network or any other communications medium or link. A data processing system typically includes one or more processors an operating system one or more applications and one or more utilities. The applications on the data processing system provide native support for Web services including without limitation support for HTTP SOAP XML WSDL UDDI and WSFL among others. Information regarding SOAP WSDL UDDI and WSFL is available from the World Wide Web Consortium W3C which is responsible for developing and maintaining these standards further information regarding HTTP and XML is available from Internet Engineering Task Force IETF . Familiarity with these standards is presumed.

As used herein an account typically refers to an entity that contains a set of parameters that define application specific attributes of a principal which include the identity user profile and credentials.

 Access refers the ability to read update delete or otherwise use a resource. Access to protected resources is typically controlled by system software.

A credential refers to a declaration of authorization or other security attributes of a subject that is typically validated and signed by a trusted third party. Typically a credential represents the ID and authenticators such as a password for a resource.

An entitlement refers to a capability based reason that a user is given a permission or set of permissions to access IT resources services .

An identity refers to a subset of profile data that uniquely represents a person or entity and that is stored in one or more repositories.

A dormant account is an account that has not been used for a given preferably configurable time period e.g. a number of days . A dormant account typically is associated with a service. Preferably servers in the system are configured to record last login information and to provide return this information upon request. By reconciling the last login information the system can determine the existence of dormant accounts.

An orphan account is an account on a managed resource an account whose owner cannot be automatically determined by the system.

An ownership type refers to a category that classifies ownership of accounts. One account preferably can have only one type of ownership. Accounts can be marked with different ownership types depending on their use. Default ownership types include for example device personal system and vendor.

A person is an individual in the system that has a person record in one or more corporate directories.

A principal is a person or group that has been granted permissions. It also refers to an entity that can communicate securely with another entity.

A recertification refers to the process of validating and possibly updating credentials with a system typically after a specified time interval. A recertification policy refers to a policy that defines the life cycle rule for automatically validating accounts and users in a provisioning system at a specified frequency. The policy sends approvals to the recertification policy participants asking if the accounts or users are still certified to use the managed resource for which the account was provisioned.

In identity management provisioning refers to the process of providing deploying and tracking a service or component. To provision means to set up and maintain the access of a user to a system or to create an account on a managed resource.

A provisioning policy is a policy that defines the access to various managed resources services such as applications or operating systems. Access is granted to all users users with a specific role or users who are not members of a specific role.

A role is a logical group of principals that provide a set of permissions. Access to resources is controlled by using a provisioning policy to grant access to a role. A role can also represent a group of principals based on business job title or other business related attributes.

A service is a representation of a managed resource application database or system. In an identity management system typically a service represents the user repository for a managed resource.

A user is an individual organization process device program protocol or system that uses the services of a computing system. For example a user is an individual who uses the identity management system to manage their accounts and passwords or that is managed by the system.

For many applications networks databases and other resources users are given access by an authority or administrative role to enable activity associated with the resource. The conditions and limitations of the access for a given user are referred to as the access entitlement of the user and include defined limitations as to the activities the user may perform with or on the resource. Access entitlements among users of the same resource can vary. For instance a database administrator may have access and authority to read write edit search copy delete and transfer data for a specific database whereas others with access to the database may be limited to searching and reading data.

Identity management IdM is an administrative area that utilizes a system to identify individuals with membership or association such as with a group organization company etc. Additionally an IdM system controls the individual s access to resources by use of restrictions or permissions. To facilitate better decisions for granting appropriate access information regarding a user s request for access their job role and whether the access is a new request or renewal is considered however this limited information can prove ineffective in preventing high risk situations.

Control and oversight of resource access approval of individuals in business or enterprise organizations are further challenged by the turnover of personnel the dynamic day to day changes and organizational restructuring as well as application version upgrades. In large organizations granting users the appropriate access entitlements to resources and maintaining access entitlements is a difficult task that can involve thousands of users and hundreds of resources. Resource access decisions and compliance verification responsibilities are typically allocated to supervisors or managers who have few tools to facilitate decisions or identify risks and due to time constraints often provide access in the belief that the individuals performance will improve or not be impacted.

It is known in the prior art to provide software and services to deploy policy based provisioning solutions. These solutions help companies automate the process of provisioning employees contractors and business partners with access rights to the applications they need whether in a closed enterprise environment or across a virtual or extended enterprise. A known product of this type is IBM Security Identity Manager.

As illustrated in the main components of the IBM Security Identity Manager solution include IBM Security Identity Manager Server and required and optional middleware components including adapters that provide an interface to managed resources. In a cluster configuration as illustrated the components include a database server that stores transactional and historical data and a relational database that maintains current and historical states of data. Computers that communicate with the database typically require a Java Database Connectivity JDBC driver . For example a JDBC driver enables an IBM Security Identity Manager Server to communicate with a data source. IBM Security Identity Manager supports a JDBC type 4 driver to connect a Java based application to a database. The supported database products are IBM DB2 Database Oracle DB and MS SQL Server database. As also seen in the solution also includes a directory server to store a current state of the managed identities including user account and organizational data in an LDAP or equivalent directory. Thus for example IBM Security Identity Manager supports the following products IBM Tivoli Directory Server and Sun Enterprise Directory Server. The solution also preferably includes a directory integrator such as IBM Tivoli Directory Integrator to synchronize identity data in different directories databases and applications. IBM Tivoli Directory Integrator synchronizes and manages information exchanges between applications or directory sources. The solution also includes one or more application servers such as IBM WebSphere Application Server. WebSphere Application Server runs a Java virtual machine JVM that provides a runtime environment for the application code. The application server provides communication security logging messaging and Web services. As also seen in typically the configuration includes one or more WebSphere Application Servers and a deployment manager that manages the cluster. The solution also typically includes an HTTP server and WebSphere Web Server plug in . An HTTP server provides administration of IBM Security Identity Manager through a client interface in a web browser. Finally the solution typically includes one or more IBM Security Identity Manager adapters . An adapter is a program that provides an interface between a managed resource and the IBM Security Identity Manager Server. Adapters function as trusted virtual administrators on the target platform for account management. For example adapters do such tasks as creating accounts suspending accounts and modifying account attributes. An IBM Security Identity Manager adapter can be either agent based or agentless. An agent based adapter is one wherein the user installs adapter code directly onto the managed resource with which it is designed to communicate. An agentless adapter is deployed onto the IBM Security Identity Manager Server and the system that hosts IBM Tivoli Directory Integrator. In this case the adapter code is separate from the managed resource with which it is designed to communicate.

As noted above the implementation shown in is not intended to be limiting but rather merely illustrates one possible operating environment other commercial or proprietary implementations may include similar components and functionalities.

Each of the machines shown in may be implemented using the machine architecture shown in the various machines may interact with one another as illustrated in .

The security identity management solution of this type also may be implemented in whole or in part in a cloud based solution.

Identity Manager. In this embodiment an end to end solution is provided in association with several other systems including a Security Information and Event Management SIEM software system e.g. IBM QRadar and an access and entitlement enforcement system e.g. IBM Security Access Manager .

At step 1 the enterprise identifies the resources that it wants protected and the accesses it wants certified and monitored. The data is cleaned filtered and prepared for loading into the Identity and Access Management system through one or more known mechanisms or an API. At step 2 the data may be loaded into a role and policy module for modeling and management. This data can come from various sources Human Resources HR a planning and modeling tool or manual entry. In a typical use case the data gathered during planning is saved e.g. in a standard CSV file and then imported into IBM Security Identity Manager for role and policy modeling. The system can export the modeled role and entitlement data e.g. in XML format and load it for lifecycle management and certification. At step 3 stakeholders and participants can use the Identity and Access Management system for the various tasks that they must perform such as requesting accesses and roles approving access and role requests certifying managing and modeling roles and reviewing and certifying roles and entitlements. The certification data can be used to clean adapt and evolve the system. At step 4 the access and entitlement enforcement system imports or provisions the data from Identity and Access management system into the access and entitlement enforcement systems. At step 5 the enforcement system uses the certified data for runtime enforcement. The STEM system monitors actual user activity and provides feedback to fine tune access policy planning administration and enforcement.

As illustrated in one of the responsibilities of the Identity and Access Management system is to provide initial and periodic access certification for continued business needs to help direct and control operations. Access certification typically includes review and certification of user access assignment via role or direct assignment to determine who received access to what when and why. It ensures that users have only the privileges and exception entitlements they need to perform their job. Access certification can also be used to detect policy violations access anomalies and orphan and dormant accounts. The IAM system typically also maintains certification and access change history which aids the certification and audit processes.

An IAM system may include an application known as a vulnerability scanner. A vulnerability scanner detects security vulnerabilities in application usage or configuration. For example the vulnerability scanner might detect Microsoft Office accounts that are associated with a Company even though the owner of the account is no longer employed by the Company. Or the vulnerability scanner might detect Salesforce.com administrator accounts that were provisioned outside of the Company s approved process. This is a so called out of process assignment. The above are merely representative IAM vulnerabilities that a vulnerability scanner of this type might detect.

An IAM vulnerability scanner provides a configuration tool that allows a user to specify a set of sources from which to collect data. A data source might be a live system e.g. Salesforce.com or it might be static such as a log file. Some live data sources provide application programming interfaces APIs that the vulnerability scanner can invoke to determine what type s of data the source can provide. For other cases the type s of data provided by live and static sources can be determined typically based on the specific type. Thus for example a cloud application e.g. Office might identify the type s of data available. Or the type s of data contained in static log files might be determined for example using a file naming convention or header information. As will be described below the technique of this disclosure assumes it is possible to determine the type s of data supported by each source without actually collecting the data.

By way of further background consider one type of vulnerability detection referenced above namely out of process assignment. In this example suppose that a Company running Salesforce.com or some other cloud application having an IAM system with vulnerability scanner has implemented what might be considered a best practice. According to this practice assume that an employee must submit a request for administrator access to the cloud application which must be approved by a manager before a centralized provisioning agent invokes a cloud application API to create the new administrator account or update the employee s existing Salesforce.com account to give it administrative privileges. To detect an out of process assignment in this case the vulnerability scanner would have to collect the following types of data a list of accounts from Salesforce.com including account attribute s that indicate whether the account has administrative privileges as well as attribute s facilitating ownership correlation audit records from an account approval system indicating who submitted each request who approved each request and when the activity occurred and a list of employees e.g. from the Company s HR system so that the Salesforce.com accounts can be correlated to an owner and so that the approval system audit records can be correlated to people. Based on these data sources an out of process assignment would be detected for example if all of the following conditions are met a given Salesforce.com account has administrative privileges ownership of the Salesforce.com administrative account is correlated to a person in the HR system and there is no approval system audit record indicating that the account owner s manager approved a request for the Salesforce.com administrative privileges.

As another example scenario assume another Company has not implemented the best practice described above. In particular suppose that instead of having an approval process the Company has a centralized identity management system through which all provisioning actions are supposed to occur. To detect an out of process assignment in this case the vulnerability scanner would have to collect the following types of data a list of accounts from Salesforce.com including account attribute s that indicate whether the account has administrative privileges as well as attribute s facilitating ownership correlation audit records from the centralized identity management system showing when each account was created with administrator privileges or updated to include administrator privileges and a list of employees from the Company s HR system so that the Salesforce.com accounts can be correlated to an owner and so that the centralized identity management audit records can be correlated to people. In this scenario the out of process assignment would be detected for example if all of the following conditions are met a Salesforce.com account has administrator privileges ownership of the Salesforce.com administrative account is correlated to a person in the HR system and there is no audit record from the centralized identity management system indicating that it created the Salesforce.com account with administrative privileges or updated the Salesforce.com account to give it administrative privileges.

As yet another example scenario assume that the Company does not have an approval process and that it uses a centralized identity management system that does not audit detailed privilege information. Rather perhaps the centralized identity management system simply audits that the privileges are specified or changed. To detect an out of process assignment in this example the vulnerability scanner would have to collect the following types of data a list of accounts from Salesforce.com including account attribute s that indicate whether the account has administrative privileges as well as attribute s facilitating ownership correlation audit records from the centralized identity management system showing when each account was created or updated including whether the privileges were changed and a list of employees from the Company s HR system so that the Salesforce.com accounts can be correlated to an owner and so that the centralized identity management system audit records can be correlated to people. In this example scenario the out of process assignment would be detected for example if all of the following conditions are met a Salesforce.com account has administrator privileges ownership of the Salesforce.com administrative account is correlated to a person in the HR system and there is no audit record from the centralized identity management system indicating that the privileges were specified or changed.

As the above examples illustrate the reliability or confidence level of the vulnerability degrades with each configuration. That is in the first scenario if the criteria for detecting the vulnerability for the Company using the best practice approach are met it is highly likely that the account was given administrative privileges outside of the process. Further in this scenario if the criteria for the best practice approach are not met it is highly unlikely that the account represents an out of process assignment. In the third scenario however if the Company using the centralized identity management system has weak auditing the results produced are of lower confidence. For example the vulnerability would not be detected if the centralized identity management system updated the account to include some non administrative privileges but someone also went directly to Salesforce.com i.e. not through the centralized identity management system and updated the account to include administrator privileges. In this case the vulnerability scanner would not detect the vulnerability.

With the above as background the subject matter of this disclosure is now described. As described above and according to this disclosure an identity and access management system is augmented i.e. extended or supplemented to include a vulnerability scanner that is optimized according to the techniques that are now described. In one implementation the vulnerability scanner is an application e.g. computer program instructions executed in one or more processors. The vulnerability scanner may be implemented using co located functionalities or using functions that are distributed across multiple machines and physical locations . The vulnerability scanner may be a standalone process it may be network accessible or a hybrid of standalone and network accessible components or functions.

As depicted in an IAM system includes a vulnerability scanner application . The vulnerability scanner is associated with a set of data sources . The identity of those data sources may be pre configured or otherwise determined by the IAM system or specified by the user. It is assumed that a data source and typically each data source provides one or more types of data. Thus for example a source might be live e.g. an application providing one or more APIs for retrieving data static e.g. a log file or some combination. Typically the type s of data provided by a particular one of the data sources can be determined without incurring the overhead of collecting the data produced by that source. The vulnerability scanner is operative to detect security vulnerabilities e.g. in application usage or configuration. As described above the vulnerability scanner may be configured to detect when cloud accounts are associated with the Company but the owner of the account is no longer employed. Or the scanner might be configured to detect administrator accounts that have been provisioned outside of the Company s approved process. These are just representative examples as the nature and type of vulnerability detection provided by the vulnerability scanner may be varied. Thus it is assumed that there are a set of vulnerabilities that exist and the nature and type s of those vulnerabilities may be determined by the system or otherwise specified by a permitted user. The vulnerability scanner thus is configured to attempt to detect those one or more vulnerabilities.

According to this disclosure for each type of vulnerability preferably the IAM system defines a prioritized list of strategies that will be used to detect that vulnerability. Preferably each strategy specifies the type s of data required to detect the vulnerability as well as the code to detect it. An algorithm for determining the best or at least a better or preferred strategy to be used for detecting a particular and preferably each vulnerability is then implemented. Preferably the algorithm implemented is based on the data available from the data sources. According to this technique preferably data is collected for use by the vulnerability scanner in a manner that with respect to the data collection requirements is highly efficient. In this approach for collecting the data preferably each data source is called just once to collect data for all of the configured vulnerabilities collecting only what is necessary even if the data source is capable of providing additional data.

The routine begins at step to initialize to empty a SET of strategies to use. At step a SET of types of data to collect is initialized to empty. The SET of strategies and the SET of types of data are data structures. A loop is then carried out for each type of vulnerability. This loop is initiated at step . In particular for each strategy in priority order for the current type of vulnerability the routine gets the SET of types of required data for the current strategy at step . At step a test is executed to determine if the SET of types of required data for the current strategy is empty. If the strategy does not require any data the strategy is used. This is step . At step the current strategy is added to the SET of strategies to use. The for each strategy loop is then exited at step . If the SET of types of required data for the current strategy is not empty a test is executed at step to determine if the SET of types of required data for the current strategy is a subset of the SET of types of supported data across all sources. If the test at step is true the routine continues at step to add the current strategy to the SET of strategies to use. At step the routine adds the SET of types of required data for the current strategy to the SET of types of data to collect. The for each strategy loop is then exited at step . The above described processing is carried out for each type of vulnerability.

As also depicted in another data set namely a MAP of SET of types of data to collect by source is then initialized to empty. This is step . A test is then performed at step to determine if the SET of types of data to collect is not empty. If not then the following processing is carried out for each source in the MAP of SET of types of supported data by source. At step the routine gets the SET of types of supported data for the current source from the MAP of SET of types of supported data by source. At step the routine gets the intersection of the SET of types of supported data for the current source and the SET of types of data to collect. At step the routine stores the intersection in the MAP of SET of types of data to collect by source using the current source as the key. All sources in the MAP of SET of types of supported data by source are processed in this manner.

Finally depicts representative pseudocode to detect vulnerabilities which is step in . The routine is operative for each strategy in the SET of strategies to use. To this end at step the routine invokes the strategy to detect vulnerabilities given the collected data. The processing loop is then exited once each strategy is processed in this manner. This completes the processing.

The data structures and functions represented by the pseudocode are merely representative of one embodiment. Other data structures or functions may be used or given data structures and functions identified may be combined in whole or in part.

The vulnerability scanner may be configured using a configurator or other provisioning interface e.g. a set of web pages a command line a programmatic interface or the like .

The technique of this disclosure provides significant advantages. It enables the IAM system to dynamically choose the best strategy for vulnerability detection based on the data available. Further the technique optimizes the data collection so that a given data source is invoked preferably only once to collect data for all vulnerabilities. In this manner no unnecessary data is collected thereby enhancing the performance and operation of the IAM system in general and the vulnerability scanner in particular. By aggregating multiple data sources for real time analysis in this manner the ability of the overall IAM system to detect vulnerabilities in application usage and configuration is optimized and the technique overcomes the noted deficiencies of the prior art.

Preferably for each type of vulnerability only a highest priority strategy for which the required types of data are available are used. The notion of highest need not be based on any absolute requirement but it may also be relative to some other value. Preferably data is collected only from sources capable of providing the types of data required by the selected strategies. Thus if a source exists that only provides data relevant to unselected lower priority strategies the source is not contacted at step to collect data. Preferably in step a source is contacted once to collect data for all of the selected strategies rather than once each selected strategy. Further when a source is contacted to collect data it is instructed to collect only the types of data required by the selected strategies. If the source also is capable of collecting other types of data not required by the selected strategies preferably it is instructed not to collect those additional types of data. Further preferably a source is never asked to collect data that it is not capable of providing.

In this manner the technique of this disclosure provides that with respect to a particular vulnerability to be detected by the scanner a best i.e. most reliable or most accurate strategy is selected. The notion of best in this context need not be based on any absolute or optimal requirement but it may also be relative to some other value. As used herein the approach also is said to be dynamic in part because it is based on the data that can and should be collected to support a detection strategy and before that data collection actually occurs. In this way the collection of data is optimized so that only the required data is collected from only the required sources.

Additionally when the tool is implemented in a cloud or other network accessible manner e.g. software as a service preferably the best strategy is selected for each user e.g. a customer based on the sources available in the user s operating environment. In particular the strategy used for one customer to detect a particular vulnerability may be different than that used for another customer having different sources of data at the latter s disposal. Further as the data sources in a given customer s operating environment change and or update over time e.g. based on new products product upgrades product deprecation changes in business process etc. the algorithm automatically adjusts to adopt the best strategy based on the user s then current operating configuration.

More generally the functionality described above may be implemented as a standalone approach e.g. one or more software based functions executed by a hardware processor or multiple such processors or it may be available as a managed service including as a web service via a SOAP XML interface . The particular hardware and software implementation details described herein are merely for illustrative purposes are not meant to limit the scope of the described subject matter.

More generally computing devices within the context of the disclosed subject matter are each a data processing system such as shown in comprising hardware and software and these entities communicate with one another over a network such as the Internet an intranet an extranet a private network or any other communications medium or link. The applications on the data processing system provide native support for Web and other known services and protocols including without limitation support for HTTP FTP SMTP SOAP XML WSDL UDDI and WSFL among others. Information regarding SOAP WSDL UDDI and WSFL is available from the World Wide Web Consortium W3C which is responsible for developing and maintaining these standards further information regarding HTTP FTP SMTP and XML is available from Internet Engineering Task Force IETF . Familiarity with these known standards and protocols is presumed.

The scheme described herein may be implemented in or in conjunction with various server side architectures including simple n tier architectures web portals federated systems and the like. The techniques herein may be practiced in a loosely coupled server including a cloud based environment. In particular vulnerability scanner functions or components thereof may be hosted in the cloud.

Still more generally the subject matter described herein can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the function is implemented in software which includes but is not limited to firmware resident software microcode and the like. Furthermore as noted above the identity context based access control functionality can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain or store the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or a semiconductor system or apparatus or device . Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD. The computer readable medium is a tangible item.

The computer program product may be a product having program instructions or program code to implement one or more of the described functions. Those instructions or code may be stored in a computer readable storage medium in a data processing system after being downloaded over a network from a remote data processing system. Or those instructions or code may be stored in a computer readable storage medium in a server data processing system and adapted to be downloaded over a network to a remote data processing system for use in a computer readable storage medium within the remote system.

In a representative embodiment the vulnerability scanner is implemented in a special purpose computer preferably in software executed by one or more processors. The software is maintained in one or more data stores or memories associated with the one or more processors and the software may be implemented as one or more computer programs. Collectively this special purpose hardware and software comprises the functionality described above.

While the above describes a particular order of operations performed by certain embodiments of the invention it should be understood that such order is exemplary as alternative embodiments may perform the operations in a different order combine certain operations overlap certain operations or the like. References in the specification to a given embodiment indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic.

Finally while given components of the system have been described separately one of ordinary skill will appreciate that some of the functions may be combined or shared in given instructions program sequences code portions and the like.

The techniques herein provide for improvements to another technology or technical field namely identity access and management systems as well as improvements to the functioning of data collection and vulnerability scanners within such systems.

