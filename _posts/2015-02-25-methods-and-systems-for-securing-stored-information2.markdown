---

title: Methods and systems for securing stored information
abstract: Methods and systems for securing information are provided. The method includes generating a hash key by an input/output (I/O) processing module interfacing with a processor executable application to encrypt a block of data of a data container to secure and store the data container; generating cipher text for the block of data encrypted with the hash key; using an encryption key to encrypt the hash key for the block of data; providing the cipher text and the encrypted hash key by the I/O processing module to a storage system for storage; where the I/O processing module segregates the encrypted hash key from the cipher text and maintains the encrypted hash key as part of metadata for the cipher text; and storing the cipher text with the encrypted hash key as the metadata for the cipher text for the block of data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09558374&OS=09558374&RS=09558374
owner: NETAPP, INC.
number: 09558374
owner_city: Sunnyvale
owner_country: US
publication_date: 20150225
---
This patent application claims priority under 35 USC 119 e over U.S. Provisional Patent Application Ser. No. 62 103 211 filed on Jan. 14 2105 entitled Methods and Systems for Securing Stored Information the disclosure of which is incorporated herein by reference in its entirety.

The present disclosure relates to storage systems and more particularly to securing stored information.

Various forms of storage systems are used today. These forms include direct attached storage network attached storage NAS systems storage area networks SANs and others. Storage systems are commonly used for a variety of purposes such as providing multiple users with access to shared data backing up data and others.

A storage system typically includes at least one computing system may also be referred to as a server or storage server which is a processing system configured to store and retrieve data on behalf of one or more host computing systems hosts . The storage system may be presented to a host system for storing information.

Information stored by storage systems today should preferably be secured. It is desirable to secure information closest to an application that is generating the information. It is also preferable to efficiently store the secured data by the storage system using techniques like de duplication. Continuous efforts are being made to efficiently secure and store data.

In one aspect a machine implemented method is provided. The method includes generating a hash key by an input output I O processing module interfacing with a processor executable application to encrypt a block of data of a data container to secure and store the data container generating cipher text for the block of data encrypted with the hash key using an encryption key to encrypt the hash key for the block of data providing the cipher text and the encrypted hash key by the I O processing module to a storage system for storage where the I O processing module segregates the encrypted hash key from the cipher text and maintains the encrypted hash key as part of metadata for the cipher text and storing the cipher text with the encrypted hash key as the metadata for the cipher text for the block of data.

In another aspect a non transitory machine readable storage medium having stored thereon instructions for performing a method is provided. The machine executable code which when executed by at least one machine causes the machine to generate a hash key by an input output I O processing module interfacing with a processor executable application to encrypt a block of data of a data container to secure and store the data container generate cipher text for the block of data encrypted with the hash key use an encryption key to encrypt the hash key for the block of data provide the cipher text and the encrypted hash key by the I O processing module to a storage system for storage where the I O processing module segregates the encrypted hash key from the cipher text and maintains the encrypted hash key as part of metadata for the cipher text and store the cipher text with the encrypted hash key as the metadata for the cipher text for the block of data.

In yet another aspect a system having a memory containing machine readable medium with machine executable code having stored thereon instructions is provided. A processor module coupled to the memory is configured to execute the machine executable code to generate a hash key to encrypt a block of data of a data container to secure and store the data container generate cipher text for the block of data encrypted with the hash key use an encryption key to encrypt the hash key for the block of data provide the cipher text and the encrypted hash key to a storage system for storage where the encrypted hash key from the cipher text and maintains the encrypted hash key as part of metadata for the cipher text and store the cipher text with the encrypted hash key as the metadata for the cipher text for the block of data.

This brief summary has been provided so that the nature of this disclosure may be understood quickly. A more complete understanding of the disclosure can be obtained by reference to the following detailed description of the various aspects thereof in connection with the attached drawings.

As a preliminary note as used in this disclosure the terms component module system and the like are intended to refer to a computer related entity either software executing general purpose processor hardware firmware and a combination thereof. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computing device. By way of illustration both an application running on a server and the server can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers. Also these components can execute from various computer readable media having various data structures stored thereon.

The components may communicate via local and or remote processes such as in accordance with a signal having one or more data packets e.g. data from one component interacting with another component in a local system distributed system and or across a network such as the Internet with other systems via the signal .

Computer executable components can be stored for example at non transitory computer readable media including but not limited to an ASIC application specific integrated circuit CD compact disc DVD digital video disk ROM read only memory floppy disk hard disk EEPROM electrically erasable programmable read only memory memory stick non transitory storage media or any other storage device type in accordance with the claimed subject matter.

In one aspect as described below in detail methods and systems for efficiently storing and securing information are provided. As an example one of the methods include generating a hash key by an input output I O processing module interfacing with a processor executable application to encrypt each block of data for a write request generating cipher text for each block of data encrypted with the hash key using an encryption key to encrypt the hash key for each block of data providing the cipher text and the encrypted hash key by the I O processing module to a storage system and storing the cipher text with the encrypted hash key as metadata for the cipher text for each block of data by the storage system.

In another aspect methods and systems are provided where cryptographic metadata is stored in a data container s data stream that improves overall performance for storing and managing data containers for example a file structured or unstructured data and used interchangeably throughout the specification . The metadata is associated with portions of the data containers and segregated from the actual data of the data container. This allows a storage system to efficiently perform content based operations for example de duplication as described below in detail.

In one aspect each host system executes a processor executable application and an input output I O processing module . Application may generate and secure information that is then stored by the storage system . Details regarding application and I O processing module are provided below.

Each storage system may include or interface with a storage subsystem shown as A N having multiple mass storage devices A N may also be referred to as storage device or storage devices . The mass storage devices may be for example conventional magnetic disks optical disks such as CD ROM or DVD based storage magneto optical MO storage or any other type of non volatile storage devices suitable for storing structured or unstructured data.

The storage system executes a storage operating system for managing storage space within storage subsystem and presenting storage space to host systems . As an example storage operating system may be the DATA ONTAP storage operating system available from NetApp Inc. that implements a Write Anywhere File Layout WAFL storage system or any other suitable storage operating system.

Storage operating system and applications running on the host systems . .N communicate according to well known protocols such as the NFS protocol or the CIFS protocol to make data stored on storage device appear to users and or application programs as though the data were stored locally on the host systems . .N. CIFS means the Common Internet File System Protocol an access protocol that host systems use to request file access services from storage systems over a network. NFS means a Network File System a protocol that allows a user to access storage over a network.

Storage operating system can present or export data stored at storage devices as a volume may also be referred to as a storage volume or one or more qtree sub volume units to each of the host systems . .N. In one aspect a volume is a logical data set which is an abstraction of physical storage combining one or more physical mass storage devices or parts thereof into a single logical storage object. From the perspective of a host system each volume can appear to be a single storage drive. However each volume can represent the storage space in one storage device an aggregate of some or all of the storage space in multiple storage devices a RAID group or any other suitable set of storage space. Each volume may be configured to store data containers for example data files scripts word processing documents executable programs structured and unstructured data and the like. Specifically each volume can include a number of individually addressable files.

The storage operating system may implement a high level module such as a file system to logically organize the information stored at storage devices as a hierarchical structure of directories files blocks structured and un structured data may be referred to as data containers . For example each on disk data container may be implemented as set of data structures i.e. blocks configured to store information such as the actual data for storage volumes. These data blocks are organized within a logical volume block number vbn space that is maintained by the file system. The file system organizes the storage data blocks within the vbn space as a logical volume each logical volume may be although is not necessarily associated with its own file system. The file system typically consists of a contiguous range of vbns from zero to n for a file system of size n 1 blocks.

In one aspect the storage operating system manages stored data blocks by using content based operations for example de duplication. De duplication is a technique used for eliminating storage of duplicate copies of data that is stored by the storage system . One common de duplication implementation involves comparing data blocks and determining a hash function. When data is the same the comparison results in a same hash function. In that situation the storage system only stores one copy of the data which saves storage space.

In a typical mode of operation one of the host systems . .N transmits one or more I O input output commands such as an NFS or CIFS request over network to the storage system to read or write information. The storage system issues one or more I O commands to storage device to read or write the data on behalf of the host system. The storage system also issues an NFS or CIFS response containing the requested data over network to the host system.

In some instances operating system may present storage system to host systems as virtual storage systems may also be referred to as a vserver and also referred to as virtual storage system . The virtual storage system is addressable by the host systems and handles input output commands just like storage system . This allows one to present a physical storage system as multiple virtual storage systems to various hosts.

The management console may be for example a conventional PC workstation or the like. The storage management application can be a software application typically used by a storage network administrator to manage a pool of storage devices and other modules of system .

Communication between the storage management application and storage system may be accomplished using any of the various conventional communication protocols and or application programming interfaces APIs the details of which are not germane to the technique being introduced here. This communication may be enabled by network or via a direct link not shown between the management console and one or more of the storage systems.

Conventional encryption systems that use standard encryption techniques for securing information have shortcomings. For example traditional techniques may use random initialization vectors for encryption. This generates different cipher text blocks for identical plain text blocks. This makes it difficult for storage systems to efficiently perform content based operations for example de duplication because a storage system performing de duplication will not be able to easily de crypt stored encrypted data containers

Convergent encryption CE including message locked convergent encryption MLE techniques have been proposed to address the foregoing challenges of conventional encryption systems. CE is based on a premise that encryption of two identical pieces of data will produce identical cipher texts. MLE involves encrypting a hash key by an encryption key.

Existing conventional systems that may use CE and MLE techniques also have shortcomings. For example most existing CE systems use convergent keys to secure arbitrarily sized files or objects. This makes it difficult for a storage system to efficiently perform content based operations for example de duplication. Furthermore when existing CE systems use a hash key to encrypt block level data they typically use a dedicated metadata server for managing the metadata and keys for the stored data. This of course results in higher cost and complexity for storing and accessing data.

Other conventional systems use complex key generation protocols with application servers and key servers. These solutions are also complex and the encryption operation itself may use multiple network operations that affect overall performance. The various aspects described herein overcome conventional system short comings as described below in detail.

To read or write data at storage system application generates an I O request. When the I O request is to write data the request also includes the data that needs to be written. For retrieving data the I O request provides a logical block address LBA and a LUN or volume identifier .

The I O request is provided to or intercepted by the I O processing module that may have a plurality of modules. As an example a receive module of the I O processing module receives the write request with the data that needs to be written. In one aspect the receive module may include a driver not shown that is used to interface with the I O processing module used by the host system . to transmit I O requests. The driver in that case interfaces between the application and other components of the I O processing module .

The data for the I O request is provided to a hashing module that generates a converged key or a hash key . The hash key varies depending on the data. The hash key is provided to an encryption module that also receives the data that needs to be written. The encryption module encrypts the data using the hash key . The hash key is also encrypted by using an encryption key obtained from a key store . It is noteworthy that the key store may be external to the I O processing module or to host system .. As an example the encryption key may be a 256 bit key complying with the Advanced Encryption Standard AES . Of course the adaptive aspects described herein are not limited to any specific encryption key type.

The encryption module generates cipher text and the encrypted hash key . Both the cipher text and the encrypted hash key are provided to the storage system for storage. The encrypted hash key is stored as metadata for the cipher text . As an example each block of data is stored as cipher text with the associated metadata as described below with respect to .

To retrieve stored data I O processing module retrieves the metadata for a block retrieves the encryption key that is used to encrypt the hash key and then uses the hash key to decrypt the data. Neither the application nor storage system need to make any changes in order to write or read client data.

To perform content based operations like de duplication the storage system stores the cipher text once.

Each segment has a consistent layout . As an example each segment may include certain number of fixed size storage blocks for example 4 k. It is noteworthy that the storage block size may be variable to implement the various aspects of the present disclosure. As an example the first block is used as a key block A while blocks A N are used to store data blocks i.e. cipher text encrypted by a hash key. Details of segment layout are shown as an example in .

Key block A includes metadata for each segment. The first section of key block A includes generic metadata information shown as meta while the remaining portions A N store the encrypted hash key for each data block. The metadata includes a logical size of the file that is stored shown as A a block IV B and a reserved section C. Block IV B is an initialization vector a randomized binary string used by the encryption module for encrypting the metadata key block. Details of using the I O processing module and the segment layout are provided below with respect to . It is noteworthy that although shows metadata and keys A N as part of per segment metadata the encryption keys and metadata are considered as part of the overall metadata for the segment.

In one aspect the order of blocks may be shuffled within a segment so that the internal structure of a file can be hidden. In such an implementation even if a hacker can determine the number of blocks within a file the hacker may not be able to determine which parts of an encrypted file correspond to those blocks.

In another aspect the metadata described above may be maintained within a log structure. The log structure may include a table of hash keys with a plurality of fields. One of the field s is the hash key itself and the associated block number. Each time a data block is written the hash key is written to the key block. If there is an older version of the hash key it is not overwritten instead the new key is written to an unused entry. This allows the system to store both versions of the key. The new version of the cipher text is written replacing the older version without replacing the hash key. This provides crash tolerance in a situation where if the system crashes while a key block is being updated both possible hash keys are saved in the key block and one of hash keys can be used to retrieve the associated data. The empty slots of the log structure are purged for example after the data blocks are persistently stored.

Meta includes the logical file size A and the block initialization vector described above with respect to . Meta also includes a log head pointer that points to a log structure described above. The log head pointer may be part of the reserved space C. As an example the log structure maybe implemented as a circular log and the pointer points to a last written slot A N also shown in .

In one aspect the log structure may be over provisioned so that there are extra key slots in each segment s metadata block. This allows the system to store multiple encrypted hash keys for a subset of the blocks within a segment. Details and examples of using the log structure are provided below.

In block B application generates a write request to write data using storage system . The data may be written as a file. The write request includes a file name a byte offset into the file size of the data payload and the data itself. The write request may include other information that are not germane to the innovative aspects and hence are not being described. The I O processing module receives or intercepts the write request. In block B the hashing module takes the data payload and splits the data payload into fixed size blocks. As an example the block size is the same as the block size used by the storage system to store data. For each block of data a hashing key is generated. The hashing module may use any standard hashing technique for example the secure hash algorithm SHA 256 SHA 1 or any other technique or a proprietary technique to generate the hashing key .

In block B the encryption module encrypts each data block by a hash key that is generated based on the data for each block. In one aspect the encryption module uses an encryption key to modify the hash key. The modified hash key is them used to encrypt the data block. The encrypted data block results in cipher text . Each hash key or the modified hash key is also encrypted by an encryption key for example a 256 bit AES key . It is noteworthy that when the hash key is modified then at least two encryption keys are used one for generating the modified hash key to generate the cipher text and a second encryption key to protect the modified hash key. An example of block B using the log structure described above with respect to is described below with respect to .

Based on the cipher text and the encrypted hash key in block B the I O processing module generates a new I O request to write the cipher text and encrypted hash key at storage devices . Thereafter in block B the I O processing module provides the cipher text and the encrypted key to the storage system . The storage system simply stores the cipher text and the encrypted hash key as shown on above. The write request is then completed in block B. A response is sent to the application and the process ends.

In block B read request is received or intercepted by the I O processing module . In block B the I O processing module obtains the cipher text and the associated metadata with the encrypted hash key from the storage system . In block B the I O processing module obtains the encryption key for each encrypted hash key. As an example the encryption key may be stored at the key store . The hash key is first decrypted and then the hash key is used to decrypt the cipher text. In one aspect when the log structure described above with respect to is used then the process uses a block number to search for the encrypted hash key. If there is more than one key for the same block number then the most recent key is used for executing process block B. The unencrypted data is then provided to the application in block B and the process ends.

Referring now to in block BA the process determines if there is new empty slot available within a segment to store a key for a previous block that has been written for example CEKey and the updated encrypted hash key is shown as CEKey shown in . When an empty slot is available then the updated encrypted hash key is written in block BB. This is shown as in where CEKey is written at the empty slot.

If an empty slot is not available then the process searches the segment to see if a duplicate encrypted hash key exists for a block. When a duplicate location is found then the encrypted hash key is written at the oldest slot in block BC. This is shown as in where the old CEKey is replaced by CEKEY an updated version for CEKey. Thereafter the log head pointer is updated in block BD. This is shown as in where the pointer points to the latest slot that was written.

As described above data is stored securely and efficiently in a crash tolerant manner. Content based operations by the storage system are not affected because the storage system stores the cipher text and the metadata together just like regular unsecured data.

The adaptive aspects described herein can be implemented in a cluster based system that has a distributed architecture. depicts an illustrative aspect of a clustered storage environment including a plurality of host systems . . similar to hosts . .N a clustered storage system and at least one computer network communicably connecting the host systems . . and the clustered storage system . The clustered storage system includes a plurality of nodes . . a cluster switching fabric and a plurality of mass storage devices . . for storing cipher text and the associated metadata as described above.

Each of the plurality of nodes . . may be configured to operate as a storage system. Each node may include an N module a D module and an M host each of which can be implemented as a separate processor executable or machine implemented module. Specifically node . includes an N module . a D module . and an M host . node . includes an N module . a D module . and an M host . and node . includes an N module . a D module . and an M host ..

The N modules . . include functionality that enables the respective nodes . . to connect to one or more of the host systems . . over the computer network while the D modules . . connect to one or more of the storage devices . ..

The M hosts . . provide management functions for the clustered storage system . Accordingly each of the plurality of server nodes . . in the clustered storage server arrangement provides the functionality of a storage server.

A switched virtualization layer including a plurality of virtual interfaces VIFs is provided below the interface between the respective N modules . . and the host systems . . allowing storage . . associated with the nodes . . to be presented to the host systems . . as a single shared storage pool. For example the switched virtualization layer may implement a virtual interface architecture. depicts only the VIFs at the interfaces to the N modules . . for clarity of illustration.

The clustered storage system can be organized into any suitable number of vservers in which each virtual storage system represents a single storage system namespace with separate network access. Each vserver has a user domain and a security domain that are separate from the user and security domains of other virtual storage systems. Host systems can access storage space via a VServer from any node of the clustered system .

Each of the nodes . . may be defined as a computer adapted to provide application services to one or more of the host systems . .. The nodes . . are interconnected by the switching fabric which for example may be embodied as a Gigabit Ethernet switch or any other interconnect type.

Although depicts three N modules . . the D modules . . and the M Hosts . . any other suitable number of N modules D modules and M Hosts may be provided. There may also be different numbers of N modules D modules and or M Hosts within the clustered storage system . For example in alternative aspects the clustered storage system may include a plurality of N modules and a plurality of D modules interconnected in a configuration that does not reflect a one to one correspondence between the N modules and D modules.

The host systems . . of may be implemented as general purpose computers configured to interact with the respective nodes . . in accordance with a client server model of information delivery. In the presently disclosed aspect the interaction between the host systems . . and the nodes . . enable the provision of network data storage services.

Specifically each host system . . may request the services of one of the respective nodes . . . and that node may return the results of the services requested by the host system by exchanging packets over the computer network which may be wire based optical fiber wireless or any other suitable combination thereof. The host systems . . may issue packets according to file based access protocols such as the NFS or CIFS protocol when accessing information in the form of files and directories.

The cluster access adapter comprises a plurality of ports adapted to couple node . to other nodes of cluster . In the illustrative aspect Ethernet or any other protocol may be used as the clustering protocol and interconnect media although it will be apparent to those skilled in the art that other types of protocols and interconnects may be utilized within the cluster architecture described herein. In alternate aspects where the N modules and D modules are implemented on separate storage systems or computers the cluster access adapter is utilized by the N D module for communicating with other N D modules in the cluster .

Each node . is illustratively embodied as a dual processor storage system executing a storage operating system similar to that preferably implements a high level module such as a file system to logically organize the information as a hierarchical structure of named directories and files on storage .. However it will be apparent to those of ordinary skill in the art that the node . may alternatively comprise a single or more than two processor systems. Illustratively one processor A executes the functions of the N module on the node while the other processor B executes the functions of the D module .

The memory illustratively comprises storage locations that are addressable by the processors and adapters for storing programmable instructions and data structures. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the programmable instructions and manipulate the data structures. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the present disclosure.

The storage operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the node . by inter alia invoking storage operations in support of the storage service implemented by the node.

The network adapter comprises a plurality of ports adapted to couple the node . to one or more hosts . . over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network. Illustratively the computer network may be embodied as an Ethernet network a Fibre Channel network or any other network type. Each host . . may communicate with the node over network by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

The storage adapter cooperates with the storage operating system executing at node . to write and access information requested by the hosts as described above. The information may be stored on any type of attached array of writable storage device media such as video tape optical DVD magnetic tape bubble memory electronic random access memory micro electro mechanical and any other similar media adapted to store information including data and parity information. However as illustratively described herein the information is preferably stored on storage device .. The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the storage devices over an I O interconnect arrangement such as a conventional high performance FC link topology.

In one example storage operating system may include several modules or layers executed by one or both of N Module and D Module . These layers include a file system manager that keeps track of a directory structure hierarchy of the data stored in storage devices and manages read write operations i.e. executes read write operations on storage in response to host system . . requests as described above.

Operating system may also include a protocol layer and an associated network access layer to allow node . to communicate over a network with other systems such as host systems . .. Protocol layer may implement one or more of various higher level network protocols such as NFS CIFS Hypertext Transfer Protocol HTTP TCP IP and others as described below.

Network access layer may include one or more drivers which implement one or more lower level protocols to communicate over the network such as Ethernet. Interactions between host systems . . and mass storage devices . are illustrated schematically as a path which illustrates the flow of data through operating system .

The operating system may also include a storage access layer and an associated storage driver layer to allow D module to communicate with a storage device. The storage access layer may implement a higher level storage protocol such as RAID while the storage driver layer may implement a lower level storage device access protocol such as FC or SCSI.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may in the case of a node . implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows XP or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the various inventive aspects described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this disclosure can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and a storage device directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write any where file system the teachings of the present disclosure may be utilized with any suitable file system including a write in place file system.

The processing system includes one or more processor s and memory coupled to a bus system . The bus system shown in is an abstraction that represents any one or more separate physical buses and or point to point connections connected by appropriate bridges adapters and or controllers. The bus system therefore may include for example a system bus a Peripheral Component Interconnect PCI bus a HyperTransport or industry standard architecture ISA bus a small computer system interface SCSI bus a universal serial bus USE or an Institute of Electrical and Electronics Engineers IEEE standard bus sometimes referred to as Firewire .

The processor s are the central processing units CPUs of the processing system and thus control its overall operation. In certain aspects the processors accomplish this by executing software stored in memory . A processor may be or may include one or more programmable general purpose or special purpose microprocessors digital signal processors DSPs programmable controllers application specific integrated circuits ASICs programmable logic devices PLDs or the like or a combination of such devices.

Memory represents any form of random access memory RAM read only memory ROM flash memory or the like or a combination of such devices. Memory includes the main memory of the processing system . Instructions which implement the process steps described above with respect to may reside in and execute by processors from memory .

Also connected to the processors through the bus system are one or more internal mass storage devices and a network adapter . Internal mass storage devices may be or include any conventional medium for storing large volumes of data in a non volatile manner such as one or more magnetic or optical based disks. The network adapter provides the processing system with the ability to communicate with remote devices e.g. storage servers over a network and may be for example an Ethernet adapter a Fibre Channel adapter or the like.

The processing system also includes one or more input output I O devices coupled to the bus system . The I O devices may include for example a display device a keyboard a mouse etc.

The system and techniques described above are applicable and useful in the upcoming cloud computing environment. Cloud computing means computing capability that provides an abstraction between the computing resource and its underlying technical architecture e.g. servers storage networks enabling convenient on demand network access to a shared pool of configurable computing resources that can be rapidly provisioned and released with minimal management effort or service provider interaction. The term cloud is intended to refer to the Internet and cloud computing allows shared resources for example software and information to be available on demand like a public utility.

Typical cloud computing providers deliver common business applications online which are accessed from another web service or software like a web browser while the software and data are stored remotely on servers. The cloud computing architecture uses a layered approach for providing application services. A first layer is an application layer that is executed at host system computers. After the application layer is a cloud platform and cloud infrastructure followed by a server layer that includes hardware and computer software designed for cloud specific services. In this example a source storage system and a destination storage system may be presented in a cloud for storing information.

Thus a method and apparatus for securing stored data have been described. Note that references throughout this specification to one aspect or an aspect mean that a particular feature structure or characteristic described in connection with the aspect is included in at least one aspect of the present disclosure. Therefore it is emphasized and should be appreciated that two or more references to an aspect or one aspect or an alternative aspect in various portions of this specification are not necessarily all referring to the same aspect. Furthermore the particular features structures or characteristics being referred to may be combined as suitable in one or more aspects of the present disclosure as will be recognized by those of ordinary skill in the art.

While the present disclosure is described above with respect to what is currently considered its preferred aspects it is to be understood that the disclosure is not limited to that described above. To the contrary the disclosure is intended to cover various modifications and equivalent arrangements within the spirit and scope of the appended claims.

