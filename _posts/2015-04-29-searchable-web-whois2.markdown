---

title: Searchable web whois
abstract: Systems and methods for searching domain names and owner information in a search tool involve networked databases, indexers, text indexes, and a server. The networked databases store domain names and owner information associated with the domain names. The indexers index suffixes of the domain names and of text-searchable portions of the owner information that have a minimum length of characters, and the text indexes store the indexed suffixes. In response to a search request, the server searches the text indexes for a matching domain name and/or matching owner information that satisfy the search request, queries the networked databases for corresponding owner information associated with the matching domain name and/or corresponding domain names associated with the matching owner information, and provides search results that include the matching domain name and the corresponding owner information and/or the matching owner information and the corresponding domain names.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09613146&OS=09613146&RS=09613146
owner: VERISIGN, INC.
number: 09613146
owner_city: Reston
owner_country: US
publication_date: 20150429
---
This application is a continuation of U.S. patent application Ser. No. 13 675 766 filed on Nov. 13 2012 pending which claims benefit of Indian Patent Application No. F25 1984 2012 CHE filed Oct. 9 2012. The contents of the above identified U.S. and Indian Patent Applications are hereby incorporated herein by reference in their entirety.

The techniques described herein relate generally to providing search tools to users for searching domain names and owner information associated with the domain names.

There are multiple services available for searching registered and unregistered domain names. Among these services is a protocol called WhoIs that has existed since the formation of the Internet. The WhoIs protocol queries databases for owner information associated with the registrant or assignee information of registered Internet domain names in a top level domain TLD . Initially the Internet contained only a few TLDs such as .com .net and .org. As the Internet has expanded however many new TLDs have been added including .gov .edu .cc .tv .jobs and many others. TLDs are organized into registries such as a registry containing the .com and .net TLDs and another registry containing the .cc .tv and .jobs TLDs. These registries are used by WhoIs search services and utilities.

Current WhoIs searching services however are substantially restricted. For example current services only search a single registry per search request. One reason for this restriction is that information from multiple registries is not traditionally accessible in combination. Registry data file sizes are also restrictive. Some registries contain an extremely large amount of data and current WhoIs search techniques would take too long to index and search the data of multiple registries. The .com .net registry alone among the largest of the domain name registries contains over 120 million domains and this results in over 700 million entities in the registry database comprising domains nameservers and their associated attributes and relationships which must be processed and indexed for searching. Furthermore changes such as additions or deletions to the registries are made constantly due to the dynamic nature of the Internet to keep registry databases current. Such modifications must also be indexed in near real time to keep search results accurate and up to date. Full re indexing is periodically required due to corruptions failures design changes deployment changes and unforeseen scenarios. As such full indexing must be attainable within a few hours in order to be able to catch up with the incremental changes that get accumulated while the full indexing is completed. This helps maintain the search utility s accuracy and efficiency. Due to the sheer volume of data processing and indexing required to manage even a single registry and the highly dynamic nature of the domain name data searching across multiple registries simultaneously using current indexing methods is not practical.

Generally indexing is utilized for documents which are more static in nature and longer periods of time are allowed to fully index the information or updates. In traditional indexing methods content is extracted from documents tokenized into words based primarily on whitespace recognition stop words are removed and stemming is sometimes carried out before data is added to the index. Matching arbitrary substrings within terms is typically not of much importance. Search results are ordered by decreasing relevance scores based on term frequency occurrences of the term in the document and inverse document frequency rarity of the term across the set of documents being searched. Indexing such large quantities of data is difficult when the data is updated almost continuously. These traditional methods are not practical for indexing domain names.

In contrast to documents domain names are sets of concatenated words and numbers sometimes but only relatively rarely delimited by dashes. As such indexing domain names is more complex than mere whitespace recognition performed in document indexing. Recognition of the separate words in domain names usually requires tokenization. However tokenization of every domain name into words for indexing is based on computation intensive dynamic programming algorithms combined with statistical techniques. This is prone to a certain degree of inaccuracy partly because it is based on probabilistic techniques and partly because of the inherent ambiguity present in human languages. Tokenization success depends on the use of large language corpuses. This method of indexing domain name data may take several days for the com net registry alone unless heavily parallelized across many computers. Even then tokenization may actually end up decreasing the accuracy of arbitrary substring searches.

Furthermore domain names are short compared to documents like web pages or word processing files. A meaningful text search for domain names must be able to support arbitrary substring matches. But results would require ordering by relevance in a useful search utility. Unlike document searches term frequency and inverse document frequency are less useful relevance indicators in domain name searching because many domain names would typically only have one or no occurrences of a given search term.

As a result of the restrictions discussed above current WhoIs services offer few interactive search features for users. Search capabilities are less comprehensive due in part to the lack of interactive search features. Traditional search utilities only search for domain names that exactly match the search query such as a search for tom returning tom.com or no results. Normally results to WhoIs searches show general substring matches leading only matches or hypen separated regex matches. Wildcard searches denoted by such as tom may return additional results such as atom.com but the results are not listed in any order of relevancy or ranked by TLD.

In view of the above a better way is needed to index domain names to support a more usable WhoIs searching utility that can search multiple TLD registries simultaneously. A unified interactive interface can be a powerful adjunct that will allow focused searches as well as cross registry visibility.

The disclosed embodiments are directed to overcoming one or more of the problems set forth above and to providing improved WhoIs search techniques.

In one disclosed embodiment a computer implemented search method is performed. The method includes storing domain names and owner information associated with the domain names in one or more networked databases indexing suffixes of the domain names and of text searchable portions of the owner information that each has a minimum length of characters and storing the suffixes of the domain names and of the text searchable portions of the owner information in one or more text indexes. The method further includes searching in response to a search request the one or more text indexes for a matching domain name and or matching owner information that satisfy the search request and then querying the one or more networked databases for corresponding owner information associated with the matching domain name and or one or more corresponding domain names associated with the matching owner information. The method further includes providing search results based on the querying that include the matching domain name and the corresponding owner information and or the matching owner information and the one or more corresponding domain names.

In another disclosed embodiment a searching system is provided. The system includes one or more networked databases one or more indexers one or more text indexes and a server. The one or more networked databases store domain names and owner information associated with the domain names. The one or more indexers index suffixes of the domain names and of text searchable portions of the owner information that each has a minimum length of characters. The one or more text indexes store the suffixes of the domain names and of the text searchable portions of the owner information in one or more text indexes. The server searches in response to a search request the one or more text indexes for a matching domain name and or matching owner information that satisfy the search request queries the one or more networked databases for corresponding owner information associated with the matching domain name and or one or more corresponding domain names associated with the matching owner information and provides search results based on the querying that include the matching domain name and the corresponding owner information and or the matching owner information and the one or more corresponding domain names.

In another disclosed embodiment a non transitory computer readable storage medium is provided having stored thereon instructions which when executed cause one or more computers to perform a search method. The method includes storing domain names and owner information associated with the domain names in one or more networked databases indexing suffixes of the domain names and of text searchable portions of the owner information that each has a minimum length of characters and storing the suffixes of the domain names and of the text searchable portions of the owner information in one or more text indexes. The method further includes searching in response to a search request the one or more text indexes for a matching domain name and or matching owner information that satisfy the search request and then querying the one or more networked databases for corresponding owner information associated with the matching domain name and or one or more corresponding domain names associated with the matching owner information. The method further includes providing search results based on the querying that include the matching domain name and the corresponding owner information and or the matching owner information and the one or more corresponding domain names.

Additional aspects related to the embodiments will be set forth in part in the description which follows and in part will be obvious from the description or may be learned by practice of the invention.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

Described below are techniques for providing search tools to users for searching domain name data. Certain embodiments of the techniques described herein may enable a user to access databases having domain names and owner information associated with the domain names. In some embodiments the owner information may include contact information registrar information nameserver information and any other pertinent owner information associated with the domain name.

Embodiments of the disclosed techniques may provide a variety of benefits and features such as for example improved user experience increased search functionality and improved quality in search results among many other benefits. Moreover the use of a suffix based indexing scheme in accordance with embodiments of the techniques disclosed herein facilitates faster and more powerful searching through multiple larger domain name databases.

Reference will now be made to accompanying figures. Wherever possible the same reference numbers will be used throughout the figures and the following description to refer to the same or similar parts. While several embodiments and features of the techniques are described herein modifications adaptations and other implementations are possible without departing from the spirit and scope of the techniques. For example substitutions additions or modifications may be made to the components illustrated in the figures and the methods described herein may be modified by substituting reordering or adding steps to the disclosed methods. Accordingly the following detailed description is not intended to limit the techniques to any specific embodiments or examples.

Referring still to Full Registry Snapshot FRS for a TLD group such as .com .net or .cc .tv .jobs is loaded into a database in step S. The database is only used by the Searchable WhoIs system and is not shared for other purposes. The database may be networked or in direct communication with a network router or server. FRS contains all domain names and owner information associated with the domain names for the TLDs associated with the registry snapshot. Owner information associated with the domain names may data such as include contact information registrar information nameserver information and any other pertinent information associated with the domain name. The FRS is then processed using an indexing scheme in step S and the indexing results are stored in text index in step S. After the FRS has been received and indexed subsequent Delta Transaction Sets DTSs are received on a continuous basis in step S for near real time updating of the database and the text index by repeating the indexing S and storing S steps for received DTSs . DTSs may be received at intervals such as every fifteen seconds or faster or slower depending on the required update frequency. The DTSs contain any changes to the domain name data including for example additions deletions or modifications to domain names and their owner information. Steps S S and S continue repeatedly when new DTSs are received to keep the database and text index current. The updating of database and text index occurs substantially continuously in the background of other operations such as search request processing.

Referring now to an elaboration of the information flow is shown. A search request is received by operation of the browser web client in step S. The search request is forwarded to web server in step S. Stop words are removed from the search request in step S. The web server then forwards the request to text index in step S. The text index employs a search platform such as Elasticsearch not shown to identify matching search results between the search terms of the search request and the indexed data in step S. Indexed data may include domain names registrar information contact information or any other text searchable domain information that has been indexed and stored in the text index. Matched search results are scored based on relevancy and other factors in step S and ranked in descending score order in step S described in more detail below. The ranked matched search results such as matched domain names that make up the first page of search results such as the first ten or twenty results are forwarded to the web server in step S. Then the web server queries the database and retrieves corresponding owner information corresponding to the first page of ranked search results in the order of their scores in step S. Finally the web server forwards the first page of ranked search results such as ranked domain names and corresponding owner information to the browser web client in step S for display to the user. Afterward the user may request the next page of results. Upon receiving a request for the next page of search results step not shown the text index forwards the next page of ranked matched search results to the web server and steps S S are repeated for the next page of matched search results. Search results thus may be presented in a paginated output for large result sets without arbitrary limit.

The text index may employ an Elasticsearch search platform which is an open source and Lucene based search platform optimized for large scale multi tenant systems. Alternatively the text index may utilize other search platforms that offer similar functionality. The text index may store only text searchable information such as domain name contact names registrar names registrar contact information domain contact information and other associated names and addresses. Nameserver information and some registrar data is stored separately in the database. Alternatively all information could be stored in text index. But without substantial computing power system performance would be compromised.

The use of database for storing domain name owner information provides advantages over storing all data in the text index . In general text indexes store flat documents with no hierarchical structure or layers. As a result relationships between data entities are represented through denormalization resulting in duplication and slower processing. For example if only text index is present all nameserver data entries associated with domain names would have to be flattened and entered into the domain document of the text index. If nameserver data changes the domain document would have to be updated which results in extra time consuming steps when performed in a text index. In a Lucene index an update of a document requires full deletion followed by a fresh insertion of the entire updated document. However when the database is also present the domain name layer in the database contains only the domain name in the searchable field. Changes to nameserver data may be applied to the database without affecting other fields for the domain name. The result is a storage of information which can be updated faster by adding deleting or modifying portions of the entry for a domain name rather than erasing the entire entry and reinserting a new one. It is to be noted that applying changes to a database tends to be much faster than indexing equivalent information to a text index.

Referring still to in some embodiments the search request forwarded from browser web client to web server may be a REST request such as RESTful API. Bidirectional communications between the browser web client and web server may be facilitated by the jQuery AJAX framework. Web server may be a Jetty type Java based server.

When multiple databases and and text indexes and are employed for different registries the web server receives matched search results from each text index and via Elasticsearch and the matched search results indicate the top level domain associated with each result. Utilizing the indication the web server then queries the appropriate database or to retrieve owner information as indicated by dotted lines.

GUI may allow users to perform a grouping search brand search feature not shown in figures . A grouping search would allow users to search a term across a logial grouping of TLDs. For example a core grouping may be pre programmed that includes .com .net and .edu TLDs. When the user selects the core group search from a link drop down list or check box the search term would be searched across the TLDs associated with the group. Likewise other groupings may be pre programmed for searches such as groupings to search for particular brands or types of companies. Once a group is selected for searching the associated TLDs would automatically be searched. Search results would then include the TLDs in the chosen group.

Referring still to a majority of the GUI is occupied by the ranked search results . Large search results without arbitrary limit are paginated and the user may flip between pages of results by selecting page numbers . Each search result may include owner information relevant to the type of search performed such as a domain name with owner information about the nameserver and registrar when a domain search is conducted. Region provides clickable links which the user may select to filter search results and display search results from selected TLDs. Alternatively clickable links in region may be programmed to initiate a new search limited to the TLD specified by the selected TLD link or in all TLDs when the Searchable WhoIs link is selected. In some embodiments users may login to an account with the Searchable WhoIs utility using the account login portion to enable additional features and search preferences as will be discussed below.

In some embodiments the GUI may also provide a listing of domain name suggestions that are available for registration based on the search terms and selected TLDs. Certain embodiments may also allow a user to limit searches to a particular location or geographical region. Location indicator may display the location of the logged in user such as country region state zipcode etc. and the search results may be limited to that location either automatically or by user input of a search preference such as selecting the location indicator . Search results may be limited to a location by displaying only search results with a registrar nameserver or contact in the same geographical location or region. Location may be further specified by the user by entering a certain radius of miles or kilometers to search outside of the entered zipcode address etc. Alternatively in some embodiments users may limit searches without logging in to an account and by using location indicator by entering a search preference such as the desired search location or a radius around a location.

Search inquiries that include very common keywords like the in isolation or in disjunction can match a huge number of domain names slow down the search and yield inaccurate results. Traditionally in text searching common words that are not very meaningful from a search standpoint are filtered out and are not searched. These common words are stop words. By omitting stop words from search requests more accurate and focused search results can be obtained.

Referring again to a list of identified stop words is updated periodically. To update the stop list first all domain names and other text searchable information contained in the databases are tokenized and parsed into separate words using language recognition in step S. The tokenization and parsing may be performed within the database or by a separate software module on the same or separate computer. Although tokenization as previously discussed can be time consuming and computation intensive tokenization for stop word identification would not need to be performed nearly as frequently as would tokenization for indexing. After tokenization in step S the tokenized words are analyzed to determine the occurrence frequency of every word. The occurrence frequencies are analyzed to identify the words having the most frequent occurrences. A predetermined number of words having the highest occurrence frequencies are identified as stop words and the stop word list is updated accordingly in step S. To accomplish steps S and S a frequency table such as Table 1 below may be populated with the words and their frequencies to identify the most common words that are present across all TLD registries. Alternatively stop word lists may be generated for individual TLD registries.

The identified stop words may be removed from subsequent search queries or used to warn a user of potentially overbroad or massive search results. Removal of the stop words may occur at the browser web client the web server or the text index or by any other intermediary component that receives and forwards search requests. Table 1 is an example of a frequency table sorted in order of the top twenty five most frequent tokenized terms in domain names.

Alternatively instead of identifying and removing stop words an embodiment which may provide marginally faster yet less accurate results involves terminating the search after a predetermined amount of time. The search results obtained prior to termination would then be ranked and displayed to the user.

In some embodiments search results may be scored using a custom scorer that considers one or more factors. The custom scorer may consider the relevancy of the search result to the search request terms. When considering relevancy the scorer computes scores by similarity with closer matches being scored higher. This could be implemented using a modified form of Jaccard similarity. For example the fraction of search term Internet matched by result ter is three characters matched out of eight characters in the search term . If more than one domain name matches the full search term the match having fewer extra characters gets a higher score because 1 total characters is added to the score. For example a search for tom matches both search results tom and tomtom in full and both results have an initial score of 3 3 or 1. However tom is assigned an overall score of 1 1 1 3 characters in search result torn while tomtom is assigned a score of 1 1 1 6 characters in tomtom . Therefore the search result tom has a higher overall relevancy score. Each search result may be scored in this manner followed by ranking of the search results in order of score from highest to lowest.

As previously mentioned in certain embodiments the custom scorer may consider factors in addition to relevancy. As one of the additional factors the custom scorer may consider the TLD of each search result and boost the score of search results included in a certain TLD. This may be accomplished by assigning one or more TLDs different score values. Score values may then be combined with the relevancy score for each domain name by addition or multiplication. The score values may be predetermined and preprogrammed in the system and can be changed over time by a system administrator. Alternatively TLD score values may be selectable by the user by input of a search preference by ranking the TLDs in order of preference on the browser web interface . For example a user may prefer to rank .com search results higher than .net search results. In this scenario .com would be assigned a greater score value than .net. A search for Internet would show search result Internet.com in a higher position than search result Internet.net even though both domain names would have the same relevancy score.

The foregoing description of the techniques along with associated embodiments has been presented for purposes of illustration only. It is not exhaustive and does not limit the techniques to the precise form disclosed. Those skilled in the art will appreciate from the foregoing description that modifications and variations are possible in light of the above teachings or may be acquired from practicing the techniques. For example the steps described need not be performed in the same sequence discussed or with the same degree of separation. Likewise various steps may be omitted repeated or combined as necessary to achieve the same or similar objectives. Accordingly the spirit and scope of the techniques described herein should be limited only by the following claims.

