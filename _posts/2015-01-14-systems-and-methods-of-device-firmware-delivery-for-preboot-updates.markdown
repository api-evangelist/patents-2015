---

title: Systems and methods of device firmware delivery for pre-boot updates
abstract: Systems and methods are provided that may be implemented to deliver firmware for pre-boot updates of targeted information handling system device/devices using custom update capsules (e.g., such as custom unified extensible firmware interface capsules) and a separately-stored firmware update package that is remotely or locally stored. The custom update capsules may contain instruction payload information that may be used to determine location and desired components of the separately-stored firmware update package, and that also may be used to determine whether existing driver/drivers are to be retained in a firmware module in system memory or to be unloaded and replaced with a new (e.g., upgraded or downgraded) driver version in a firmware module in system memory as part of the firmware update.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09507581&OS=09507581&RS=09507581
owner: Dell Products LP
number: 09507581
owner_city: Round Rock
owner_country: US
publication_date: 20150114
---
This invention relates generally to information handling systems and more particularly to firmware delivery for information handling systems.

As the value and use of information continues to increase individuals and businesses seek additional ways to process and store information. One option available to users is information handling systems. An information handling system generally processes compiles stores and or communicates information or data for business personal or other purposes thereby allowing users to take advantage of the value of the information. Because technology and information handling needs and requirements vary between different users or applications information handling systems may also vary regarding what information is handled how the information is handled how much information is processed stored or communicated and how quickly and efficiently the information may be processed stored or communicated. The variations in information handling systems allow for information handling systems to be general or configured for a specific user or specific use such as financial transaction processing airline reservations enterprise data storage or global communications. In addition information handling systems may include a variety of hardware and software components that may be configured to process store and communicate information and may include one or more computer systems data storage systems and networking systems.

Many paradigms exist for designing firmware updates. Examples include platform compatibility bits used by updates. Another example is the practice of updating a device with monolithic binary images. These conventional firmware update practices do not always handle the network adapter and other peripheral product line complexities. Features are added and subtracted by suppliers over time and sometimes deployed across a product line with one firmware update package. However the simplicity of this conventional practice for customers creates complexity for the implementers. This complexity is sometimes handled by operating system OS based updates where vendor written logic corresponding to the update in progress can handle the changes and re designs of the new package. However this is not possible with pre boot updates handled by device firmware loaded only from the existing firmware on a given device such as network adapter.

A similar problem can occur with firmware updates to other information handling system devices e.g. such as RAID controller BIOS complex programmable logic devices CPLDs and other Firmware Management Protocol FMP based devices of an information handling system . Moreover driver firmware downgrades may not be possible for similar reasons e.g. such as when a newly loaded Version N 1 of driver firmware may be released with problems necessitating a firmware downgrade to an older firmware version such as Version N 1 of driver firmware which includes one or more payload components that cannot be applied to a device while it is running the existing Version N 1 driver firmware. These problems can result in product defects and lack of out of band firmware update capability.

For example in a staged or step firmware update package including Version N 1 device driver is being retrieved by a remote access controller RAC into its internal non volatile storage staged update storage partition from a firmware source such as attached Flash storage device network server etc. In this regard remote access controller may be an integrated Dell Remote Access Controller iDRAC executing lifecycle management logic e.g. Dell Life Cycle Controller available from Dell Products L.P. of Round Rock Tex. . As shown in the staged firmware update includes Version N 1 UEFI driver for adapter as well as firmware payload component A actual firmware image that is to be used as input to SetImage function in the application programming interface that is defined by the UEFI standard in the firmware management protocol new version firmware payload component B UEFI driver that is needed for the success of SetImage method to apply firmware image of component A and new firmware payload component C all for the same device adapter . As shown by the upward arrow in the SetImage method uses the driver that is available. In this case version N is present hence it is used e.g. loaded into a UEFI Firmware module in system memory .

As further shown in firmware update including new Version N 1 UEFI driver firmware is provided as a payload via RAC to existing pre boot software in the form of FMP based pre boot software e.g. Dell Life Cycle Controller available from Dell Products L.P. of Round Rock Tex. executing on host CPU that operates to utilize FMP to update firmware for particular target devices on information handling system e.g. in a manner consistent with Chapter 32 of UEFI Specification 2.4. FMP based logic in turn attempts to provide the new firmware payload components of firmware update to system random access memory RAM via Firmware Management Protocol for loading to non volatile memory of adapter . However in the illustrated case existing Version N of UEFI driver firmware can only update Firmware images A and B while newer Version N 1 of UEFI Driver firmware is required to update all Firmware images A B and C. Thus new Version N 1 UEFI driver firmware and the new payload components cannot be loaded into system memory for use by adapter for one or more possible reasons e.g. new firmware payload component C is unrecognized by the existing version of FMP pre boot software etc. Since the payload components A B and C associated with new Version N 1 of driver firmware cannot be applied to adapter while it is running the existing Version N of UEFI driver firmware then existing Version N of UEFI driver firmware must be first unloaded prior to loading the newer Version N 1 of UEFI Driver firmware to handle update A B and C firmware images.

Using the methodology of FMP pre boot software is supposed to locate and identify a new version of UEFI driver firmware e.g. new Version of N 1 UEFI driver firmware within UEFI capsule as an optional component and to then load it into non volatile memory of adapter or other target device via system memory as shown if the new version of driver firmware is found to be newer than the exiting version e.g. existing Version N of UEFI driver firmware . In such a case the existing version of driver firmware is first unloaded as shown. However existing deployments of FMP pre boot software are not capable of interpreting the new UEFI capsule format that includes the optional firmware driver and payload sections and . Further no standardized logic to determine how and when to unload resident firmware drivers to be replaced have been detailed to date. In this regard the sequence of Update to be applied is not specified. Additionally using conventional methodology drivers need to follow UEFI Driver Binding Protocol in the UEFI Capsule Get Driver Version and only higher versions of driver firmware are loaded.

Disclosed herein are systems and methods that may be implemented to deliver firmware for pre boot updates of targeted information handling system device s using custom update capsules and a separately stored firmware update package that is remotely or locally stored. The custom update capsules may contain instruction payload information that may be used in one embodiment to determine location and desired components of the separately stored firmware update package and that also may be used to determine whether existing driver s are to be retained in a UEFI Firmware module in system memory or to be unloaded and replaced with a new e.g. upgraded or downgraded driver version in a UEFI Firmware module in system memory as part of the firmware update. In one embodiment the custom update capsules may be custom UEFI capsules that are created by modifying a conventional UEFI capsule format i.e. that is compliant with UEFI 2.4 specification or other UEFI specification version by stripping out or removing firmware update payload images from a conventional UEFI capsule and replacing the update payload images with instruction payload information as metadata in the custom UEFI capsule. The stripped or removed update payload images may be stored in a separate location from the UEFI capsule e.g. optionally external to the information handling system and information detailing this update storage location may be encapsulated within the instruction payload information of the metadata together with the driver metadata which may be a part of the UEFI Custom capsule.

In one embodiment a combination of the above described custom UEFI based capsule format together with a minimized update package storage footprint e.g. meaning minimized use of remote access controller Flash space that is provided by virtue of separate e.g. external update payload image storage may be advantageously implemented e.g. by pre boot software to provide a variety of features including but not limited to BareMetal OS and firmware deployment with minimal footprint on system non volatile memory e.g. Flash space for information handling systems such as servers the ability to dynamically handle a variety of different types and or combinations of firmware update actions e.g. existing driver unload as well as new driver load actions ability to provide driver update packages via a custom UEFI capsule that supports updates for both legacy i.e. non UEFI compatible systems and UEFI compatible systems etc.

In one exemplary embodiment a custom UEFI capsule may be provided with a firmware update that is applicable to all systems i.e. both non UEFI 2.4 compatible systems and UEFI 2.4 compatible systems that include a specific target device such as a network adapter etc. Non UEFI 2.4 compatible systems such as UEFI 2.3 compatible systems do not have the capability of consuming UEFI 2.4 capsules or custom capsules of the disclosed systems and methods. The non UEFI 2.4 compatible systems not having that capability cannot interpret the UEFI 2.4 or custom capsules and consequently might assume that only firmware image is supplied and would be expecting it at a specific location inside the update package for applying. Using the disclosed systems and methods stripping and separate storage of firmware update payload images as described herein may be employed to enable the non UEFI 2.4 compatible systems to find the separately stored payload firmware update package e.g. by using xml schemas defined to allow non UEFI 2.4 compatible lifecycle management logic e.g. executing as FMP based pre boot software on a system Host processor to locate the separately stored firmware update payload images for updates.

In one exemplary embodiment the disclosed systems and methods may employ a custom update capsule having an inserted instruction metadata payload that includes locator information e.g. in locator table format that describes where particular removed firmware update payload s i.e. binary image s have been stored elsewhere e.g. such as on network storage or other type of external storage or on local storage such as Embedded Flash Storage USB Harddisk etc. as well as identifier information e.g. in identifier table format that describes or otherwise indicates e.g. by metadata operator s what version s of driver is capable of programming the removed firmware update payload s into non volatile memory of a given target device of the information handling system. Using the disclosed systems and methods custom update capsules may be implemented to enable out of band firmware update capability i.e. in a manner that is not possible with conventional UEFI capsule formats.

In one embodiment an instruction metadata payload may be configured within a custom UEFI capsule to be locatable by pre boot software e.g. executed by a host processor or other processing device of the information handling system by virtue of placement of the instruction payload metadata in an expected capsule location that is consistent with pre existing UEFI capsule update package format. Such identifier information e.g. identifier table may be created in one embodiment to handle all possible upgrade and download cases or scenarios in order to allow the pre existing pre boot software to decide whether to retain reload or replace the resident drivers during the update operation. For example such identifier information may be advantageously employed to enable successful pre boot update in cases where the source unmodified conventional UEFI capsule of a pre boot update calls for the latest and non loaded driver drivers to be installed or used even in the case of a firmware downgrade where the latest driver in the conventional UEFI capsule may not be appropriate or functional for the downgrade.

The disclosed systems and methods may be advantageously implemented to support a variety of different types of update packages having different types and or combinations of required update actions including for example firmware version downgrades and updates that require first unloading of an existing field deployed resident driver version from a UEFI module in system memory prior to loading a different driver version into the UEFI module in system memory. Thus the disclosed systems and methods may be implemented in one embodiment to enable pre boot software to determine what update actions are required based on the locator information and the identifier information of the instruction metadata payload of a custom update capsule. For example in one embodiment pre boot software executing on a processing device may implement an update operation by first querying a target device to determine the version of a driver currently loaded on the system memory e.g. in UEFI Firmware module and then determining the next action to take based on the instruction payload information e.g. instruction metadata payload given the determined version of the currently resident driver version. For example in a case where a different driver version is to be loaded into system memory from a custom capsule the pre boot software may read a driver metadata operator operators inserted in the custom capsule to understand the next steps or actions to perform e.g. such as existing driver version on resident firmware of target device is to be unloaded from system memory and replaced by a newer or otherwise different driver version loaded from the custom capsule no change is to be made to the resident driver version which is to be left on system memory etc.

In a further embodiment firmware update payload s may be optionally stored on a network share or other external source rather than stored in embedded storage e.g. such as remote access controller storage and or rather than in other internal storage or memory of an information handling system that is subject of a pre boot update. Using this implementation an entire firmware image payload may be stored in a remote location e.g. separate and external to the information handling system chassis and separate from the custom capsule for rollback backup and or update of the firmware images e.g. optionally together with operating system OS driver pack . In such an embodiment instruction metadata payload e.g. that includes locator information such as locator table contained in the custom capsule may be used by the pre boot software to find and retrieve the firmware update payload images from the external source so that the pre boot software can apply the firmware updates on one or more device s of the information handling system. In such an embodiment firmware update payload payloads may be stored externally or remotely rather than on an embedded device or other internal device within the information handling system. This means that the size of internal memory e.g. embedded flash memory does not need to grow with each new firmware device being added to the system as is the case with conventional firmware update technology.

In a further embodiment remote or external storage of firmware update payloads may be implemented to avoid the need to create and deliver identical firmware payloads in different formats which would use an unreasonable amount of the limited embedded storage space used for out of band updates while at the same time enabling unloading and replacement of resident drivers when needed to accomplish a given firmware update task in a manner that is not possible with conventional UEFI capsules because no logic is detailed in the existing UEFI specification for determining how and when to unload resident drivers to be replaced. Thus using the disclosed systems and methods different update options e.g. such as Downgrade the Driver Do not Update the Driver Upgrade the Driver may be selected based on the characteristics of a particular update task and requirements for a particular driver version i.e. in a manner that is possible using conventional UEFI capsules.

In one respect disclosed herein is a method of delivering firmware for pre boot updates to an information handling system including using at least one processing device of the information handling system to perform the following steps in an out of band manner prior to booting the information handling system retrieving a custom update capsule from a source external to the information handling system reading instruction payload information contained in the custom update capsule to determine a specified location of a given firmware update package that is remotely or locally stored the given firmware update package being separate from the custom update capsule and including one or more firmware images and retrieving the given firmware update package from the specified location determined from the the specified firmware update package.

In another respect disclosed herein is a method of determining a firmware driver update action during pre boot operation of an information handling system including using at least one processing device of the information handling system to perform the following steps in an out of band manner prior to booting the information handling system retrieving a custom update capsule from a source external to the information handling system the custom update capsule including instruction payload information and multiple driver version images contained therein and reading the instruction payload information contained in the custom update capsule to determine a driver update action and then performing the determined driver update action. In one embodiment the determined driver update action may be either one of unloading an existing firmware driver version from a system memory of the information handling system and loading a different upgraded or downgraded firmware driver version on to the system memory from the custom update capsule or leaving the existing firmware driver version resident on the system memory and not loading a different firmware driver version on system memory from the custom update capsule.

In another respect disclosed herein is an information handling system including at least one processing device configured to perform the following steps in an out of band manner prior to booting the information handling system retrieving a custom update capsule from a source external to the information handling system reading instruction payload information contained in the custom update capsule to determine a specified location of a given firmware update package that is remotely or locally stored the given firmware update package being separate from the custom update capsule and including one or more firmware images and retrieving the given firmware update package from the specified location determined from the the specified firmware update package.

In another respect disclosed herein is an information handling system including at least one processing device configured to perform the following steps in an out of band manner prior to booting the information handling system retrieving a custom update capsule from a source external to the information handling system the custom update capsule including instruction payload information and multiple driver version images contained therein reading the instruction payload information contained in the custom update capsule to determine a driver update action and then performing the determined driver update action. In one embodiment the determined driver update action being either one of unloading an existing firmware driver version from a system memory of the information handling system and loading a different upgraded or downgraded firmware driver version on to the system memory from the custom update capsule or leaving the existing firmware driver version resident on the system memory and not loading a different firmware driver version on to the system memory from the custom update capsule.

Still referring to system may also include one or more host processing devices one or more buses or communication media video graphics hardware storage e.g. hard disks system memory e.g. RAM local input output I O and peripherals . Bus provides a mechanism for the various components of system to communicate and couple with one another. Host processing device devices may include a Host processor e.g. CPU configured to run a host operating system OS during in band operation and or configured to run FMP based pre boot software e.g. Dell Life Cycle Controller available from Dell Products L.P. of Round Rock Tex. during out of band operation as needed and out of band processor may be a service processor embedded processor etc. Video graphics storage memory I O and peripherals may have the structure and perform the functions known to those of skill in the art. Besides memory processing device may include cache memory for storage of frequently accessed data and storage may include extended memory for processing device . One or more remote users may also optionally communicate and interact with information handling system via network as shown.

It will be understood that the embodiment of is exemplary only and that an information handling system may be provided with one or more processing devices that may perform the functions of processing device processing device remote access controller and other optional processing devices. Examples of such processing devices include but are not limited to central processing units CPUs embedded controllers microcontrollers application specific integrated circuits ASICs field programmable gate arrays FPGAs etc.

As further shown in metadata in the form of an instruction metadata payload has been inserted into custom UEFI capsule in place of removed firmware binary images e.g. binary image including firmware payload component A new version firmware payload component B new firmware payload component C etc. of firmware update package . In the illustrated exemplary embodiment instruction metadata payload includes identifier information in the form of an identifier table Table 1 that includes information that includes the name or identifier of the optional driver e.g. Version N 1 UEFI driver associated with a given binary image e.g. binary image including firmware payload component A new version firmware payload component B and new firmware payload component C . Instruction metadata payload may also include a reference driver version ID to which a corresponding metadata operator described below of Table 1 refers offset of the location of the corresponding optional driver in capsule and the capsule version that identifies version of the Capsule Structure.

Still referring to the identifier table or identifier information may in one embodiment also include a metadata operator for each individual optional driver that serves the purpose of indicating what version s of existing resident device drivers are needed for programming each of the individual binary images of firmware update package into non volatile memory of a given target device e.g. non volatile memory of network adapter of information handling system . Examples of such metadata operators include but are not limited to greater than less than 

As an example in one embodiment host processing device may execute FMP based pre boot software to check the identity of the existing version of the target device driver Example Intel NIC FMP Driver . If the Instruction Metadata Payload in the Custom capsule has an operator the FMP based pre boot software may be executed to check if the UEFI Driver version in the UEFI Custom capsule is greater than the existing target device driver in the system and only if so then load the new Intel UEFI FMP NIC Driver into system memory from Custom Capsule contents.

As further shown in instruction metadata payload may also include locator information in the form of a locator table Table 2 that includes payload binary image identifier information ImageTypeID identifies the Firmware image to be updated for a given binary image e.g. firmware payload component A new version firmware payload component B new firmware payload component C together with its corresponding local or remote storage location e.g. network storage path name local storage path name directory tree etc. e.g. stored in update package on external network storage in this example. Additionally EFI firmware management capsule image header may be modified as shown to indicate the modified format with indicative Globally Unique Identifier GUID e.g. UpdateImageTypeID and new corrected custom image size e.g. UpdateImageSize for the metadata content of the instruction metadata payload . Although UEFI based custom capsules are illustrated and described herein for purposes of example it will be understood that the disclosed systems and methods are not limited to UEFI based custom capsules but rather may be implemented in combination with separately stored firmware update package s using any alternative update capsule format having driver and instruction metadata payload information contained therein.

Returning to methodology starts in step and with firmware update package stored on external network storage e.g. by a firmware vendor and with retrieval of custom UEFI capsule by the remote access controller RAC or other out of band processing device of information handling system from an external source e.g. such as from across network from a firmware update vendor. In step RAC may store retrieved custom UEFI capsule on RAC embedded storage as shown in .

Next in step host processing device may execute FMP based pre boot software in an out of band manner i.e. separate from and outside a host OS of system prior to system and OS booting to retrieve contents of custom UEFI capsule from RAC embedded memory . Host processing device may also use the FMP based logic in step to obtain the identity of resident driver version currently loaded on the target device as well as to read instruction metadata payload information of the retrieved custom UEFI capsule contents in step e.g. including identifier information e.g. identifier Table 1 of and locator information e.g. locator Table 2 of . It will be understood that step may be performed earlier by FMP based logic e.g. before steps and . It will be understood that retrieval of a custom UEFI capsule via RAC is optional and that FMP based logic executing on host processing device may receive custom capsule and or any other firmware update payload components from any suitable source other than a RAC.

Host processing device may then execute FMP based pre boot software in step to analyze the identifier information of capsule in view of the identity of the existing driver version on the target device to determine the disposition of the resident e.g. field deployed driver version existing on the target device by determining whether the resident driver version should be kept in system memory or replaced in system memory with a new e.g. upgrade or downgrade driver version from custom UEFI capsule e.g. using metadata operators as described in relation of . Also in step FMP based logic may proceed accordingly by keeping or replacing the resident driver with a new optional driver as determined by analyzing the identifier information .

Host processing device may execute FMP based pre boot software in step to analyze the locator information to determine the identity and location of the particular binary firmware image to retrieve from the firmware update package in a manner described in relation to . Next as shown in host processing device may then execute FMP based pre boot software in step to retrieve the identified binary firmware image from the firmware update package . In step the resident driver whether replaced or not replaced in step may be executed by a processing device e.g. microcontroller of the target device to retrieve the identified binary firmware image from the firmware update package and to complete firmware update on the target device of system by loading the firmware update into non volatile memory of the target device.

For purposes of this disclosure an information handling system may include any instrumentality or aggregate of instrumentalities operable to compute classify process transmit receive retrieve originate switch store display manifest detect record reproduce handle or utilize any form of information intelligence or data for business scientific control entertainment or other purposes. For example an information handling system may be a personal computer a PDA a consumer electronic device a network storage device or any other suitable device and may vary in size shape performance functionality and price. The information handling system may include memory one or more processing resources such as a central processing unit CPU or hardware or software control logic. Additional components of the information handling system may include one or more storage devices one or more communications ports for communicating with external devices as well as various input and output I O devices such as a keyboard a mouse and a video display. The information handling system may also include one or more buses operable to transmit communications between the various hardware components.

It will be understood that one or more of the tasks functions or methodologies described herein e.g. including those performed by host processing device and remote access controller may be implemented by a computer program of instructions e.g. computer readable code such as firmware code or software code embodied in a non transitory tangible computer readable medium e.g. optical disk magnetic disk non volatile memory device etc. in which the computer program comprising instructions are configured when executed e.g. executed on a processing device of an information handling system such as CPU controller microcontroller processor microprocessor FPGA ASIC or other suitable processing device to perform one or more steps of the methodologies disclosed herein. A computer program of instructions may be stored in or on the non transitory computer readable medium residing on or accessible by an information handling system for instructing the information handling system to execute the computer program of instructions. The computer program of instructions may include an ordered listing of executable instructions for implementing logical functions in the information handling system. The executable instructions may comprise a plurality of code segments operable to instruct the information handling system to perform the methodology disclosed herein. It will also be understood that one or more steps of the present methodologies may be employed in one or more code segments of the computer program. For example a code segment executed by the information handling system may include one or more steps of the disclosed methodologies.

While the invention may be adaptable to various modifications and alternative forms specific embodiments have been shown by way of example and described herein. However it should be understood that the invention is not intended to be limited to the particular forms disclosed. Rather the invention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention as defined by the appended claims. Moreover the different aspects of the disclosed systems and methods may be utilized in various combinations and or independently. Thus the invention is not limited to only those combinations shown herein but rather may include other combinations.

