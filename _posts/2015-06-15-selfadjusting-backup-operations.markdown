---

title: Self-adjusting backup operations
abstract: Performing automated and self-adjusting backup operations by executing the following steps: Determining a time of last backup operation for a data block. Obtaining an audit trail based on the time of last backup operation for the data block and a current time. Ordering read operations and write operations of the data block into a chronological sequence based on the audit trail. Generating a weighting element for read operations and a weighting element for write operations of the data block such that a weighting of read operations are greater than or less than the weighting of a write operations. Calculating a weighted sum of weighted read operations and weighted write operations for said data block. Respond to a result of a comparison between the weighted sum and at least one threshold value by performing a type of backup operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09519432&OS=09519432&RS=09519432
owner: International Business Machines Corporation
number: 09519432
owner_city: Armonk
owner_country: US
publication_date: 20150615
---
The present invention relates in general to the field of backup environments and in particular to performing automated and self adjusting backup operations.

Backup processes are usually denoted by fixed schedules that initiate the backup process of a certain type e.g. full differential or incremental backup operations. Full backup operations may become inefficient when they consume large amounts of network resources. In some instances limited backup storage resources and incremental backup operations can also cause longer recovery times. Changes in large volumes of primary data are vulnerable if the next backup schedule is not scheduled for an extended period.

Embodiments of the present invention provide a method system and program product for performing automated and self adjusting backup operations. A processor determines a time of last backup operation for a data block. The processor obtains an audit trail based at least in part on the time of last backup operation for the data block and a current time. The processor orders one or both of read operations and write operations of the data block into a chronological sequence based on the audit trail. The processor generates a first weighting element for read operations and a second weighting element for write operations of the data block such that a weighting of a given read operation is greater than or less than a weighting of a given write operation. The processor calculates a weighted sum of weighted read operations and weighted write operations for said data block. The processor responds to a result of a comparison between the weighted sum and at least one threshold value by performing a type of backup operation.

One embodiment of the present invention provides a method for performing automated and self adjusting backup operations. One embodiment of the present invention provides a backup environment. One embodiment of the present invention provides an analysis of primary data accesses and data changes and determines when a backup process of a certain type i.e. full differential or incremental backup operation has to be done.

Accordingly in an embodiment of the present invention provides a method for performing automated and self adjusting backup operations in connection with full incremental and differential backup operations of stored data in a backup environment includes Determining date and time of last backup operation for a data block obtaining an audit trail according to the last backup date and time and current date and time ordering read operations and write operations of the data block in a chronological sequence based on the audit trail generating a first weighting element for the read operations and a second weighting element for the write operations of the data block wherein the read operations are weighted differently than the write operations calculating a weighted sum of the weighted read operations and the weighted write operations for the data block comparing the weighted sum with at least one threshold value and performing a corresponding backup operation in response to the comparison result.

In some embodiments of the present invention the method includes generating a vector comprising the ordered sequence of weighted read operations and weighted write operations wherein a total number of elements in the vector corresponds to a total number of weighted read operations and weighted write operations of the data block and wherein the weighted sum is calculated over all elements of the vector.

In some embodiments of the present invention the first weighting element applied for the read operations is a factor that is a number greater than one. In some embodiments of the present invention the second weighting element applied for the write operations is an increment that is a number greater than zero.

In some embodiments of the present invention the stored data to be backed up includes at least one data area that includes at least one data block. In some embodiments of the present invention the weighted sum of the weighted read operations and the weighted write operations is calculated over all data blocks of the data area.

In some embodiments of the present invention the method includes a process of generating a first threshold value and a second threshold value and a third threshold value that each represent a weighted sum of weighted read operations and weighted write operations. In some embodiments of the present invention the first threshold value is less than the second threshold value that is less than the third threshold value.

In some embodiments of the present invention generating the threshold values is based on at least one of the following preconfigured numbers backup client system utilization available capacity in backup storage backup server utilization and network utilization.

In some embodiments of the present invention if a the current weighted sum is less than the first threshold value and b the weighted sum is stored then no backup operation is performed.

In some embodiments of the present invention if the current weighted sum is greater than the first threshold value and less than the second threshold value then an incremental backup operation is performed.

In some embodiments of the present invention if the current weighted sum is greater than the second threshold value and less than the third threshold value then a differential backup operation is performed.

In some embodiments of the present invention if the current weighted sum is greater than the third threshold value then a full backup operation is performed.

In some embodiments of the present invention a record is generated and that includes the date and time of the backup operation and the weighted sum is reset i.e. set to zero after performing one of the backup operations.

In another embodiment of the present invention a backup environment includes at least one backup client system hosting at least one application at least one audit component at least one backup client and at least one backup analytics module. In some embodiments of the present invention the at least one backup client system is coupled to at least one backup server system to perform automated and self adjusting backup operations in connection with full incremental and differential backup operations of stored data. In some embodiments of the present invention the backup analytics module is coupled to the audit component and obtains information about sequence and number of read and write operations performed by the application within a certain time range. In some embodiments of the present invention the backup analytics module is also coupled to said backup client whereby the backup client instructs the backup analytics module to perform an analysis for a given time period and the backup analytics module returns a result of this analysis.

In some embodiments of the present invention the backup client continuously performs the backup operations without receiving an explicit request or receives a backup request initiated by the backup client system.

In some embodiments of the present invention a data processing program is provided for execution in a data processing system includes software code portions such that when the program is run on the data processing system the data processing system that follows the aforementioned method for performing automated and self adjusting backup operations.

In some embodiments of the present invention a computer program product is stored on a computer readable medium is provided that includes computer readable programming that follows the aforementioned method such that a computing device executing that programming performs automated and self adjusting backup operations.

Embodiments of the present invention recognize the utility of making automated decisions when a backup process of a type is to be executed i.e. full differential or incremental backup operation. Embodiments of the present invention recognize analyzing primary data accesses and changes to that data in order to make such automated decisions. Embodiments of the present invention recognize obtaining audit trails from an audit components and analyzing data accesses i.e. create read write and delete operations in order to make such decisions. Thus embodiments of the present invention provide a backup process with increased flexibility when compared to other known solutions. Embodiments of the present invention provide an increase in the efficiency of resource usage. Embodiments of the present invention provide a reduction in the risk of losing data. Furthermore embodiments of the present invention provide a recovery process with increased efficiency in regards to performance because full backup operations are triggered based on the amount of changes to the stored data being above a threshold amount.

Some embodiments of the present invention employ a backup environment including backup client systems each having a backup client. Some embodiments of the present invention provide backup clients that perform backup operations. Some embodiments of the present invention provide backup clients that are coupled to a backup analytics module that performs analysis of an audit trail. Some embodiments of the present invention provide a backup analytics module that is coupled to an application audit component in order to obtain information about read and write operations within a certain time period. Some embodiments of the present invention provide a backup analytics module that is configured to determine a time and a type of the next backup operation.

In a typical backup environment backup clients back up primary data managed by applications from a respective client system to a backup server system via a network. There are different types of applications such as file systems managing files databases managing tables and records hypervisors managing virtual machines and much more. Backup clients are typically integrated with the application in order to access the data and copy it to the backup server system in a consistent manner.

The backup server system hosts backup software that receives the backup data stores it in a backup storage and manages the lifecycle of the backup data. The backup storage may be represented by different types of storage such as disk tape optical and flash. The backup server system may also have the capability to move the backup data from one storage medium to another during the data lifecycle. The lifecycle of backup data may be characterized by a number of versions to be kept and a retention times for inactive versions.

The backup process backs up data according to the backup type. There are different types of backup operations such as full backup operation i.e. all data is backed up differential backup operation i.e. data is backed up that has changed since the last full backup and or incremental backup operation i.e. data is backed up that has changed since the last full differential or incremental backup operation.

The backup process is typically performed automatically by schedules. The schedules may be triggered by the backup clients or by the backup server system or by an external scheduler. When the backup schedule is triggered the backup client copies all or subsets of data to the backup server according to the backup process type.

The types of backup operations often have different advantages and disadvantages. A full backup operation copies all data according to the backup scope to the backup server system. This utilizes a large amount of processing resources on the backup client systems the network and the backup server system. On the other hand the restore of a full backup is quick because all data is sequentially stored on the backup server system.

The incremental backup does not utilize large amounts of processing resources on the backup client systems the network and the backup server because it only copies subsets of data. However the restore time from incremental backup operations is higher because the subsets of data are not stored sequentially in the backup server system. During the restore process the server has to determine where the latest version of data resides for each file. Because these files might have been backed up in multiple incremental backup sessions over multiple days the last versions of multiple files can be spread across the backup server system. In general files backed up in multiple incremental backup processes are not stored sequentially in the backup server system.

A difficulty can arise when a backup operation is combined with a fixed schedule. For example in one combination a full backup is scheduled every Sunday and an incremental backup is scheduled each day. However such combinations do not consider the amount of changes made to the data being backed up. For example if a large amount of business relevant data has changed within a certain period of time e.g. on Tuesday it might be advantageous to run a full backup immediately thereby reducing the risk of data loss due to failures and to facilitate a fast recovery instead of waiting for the next full backup schedule.

Another difficulty can arise from fixed backup schedules wasting backup storage and network resources. For example if data is changed that was not read since the last full backup operation it might be more efficient resource wise to backup up this data by an incremental backup operation and to delay the full backup operation thereby saving storage and network resources. Alternatively the backup operation of some data e.g. high value data can be scheduled for an earlier point in time.

In some embodiments the above mentioned applications such as databases file systems hypervisors include audit components. In some embodiments the audit component tracks and records the access read and write to data which is stored in a storage system and managed by the application in an audit trail. In some embodiments this tracking includes the sequence of create read write and delete operations to the data for a given time period. In some embodiments based on this sequence the number of such operations within the given time period can be derived.

In some embodiments an audit component is included in an operating system. For example an operating system includes an audit daemon that is configured to track and record access create read write delete to files in a certain file system.

In some embodiments relational database systems use an audit component to track read and write operations of data block to be able to create the database redo log files. In some embodiments audit components of relational databases have an Application Programming Interface API which can be used by another program to retrieve the recorded audit information.

In some embodiments hypervisors also have audit components tracking and logging changed data blocks of virtual machines. In some embodiments the audit components of hypervisors have an Application Programming Interfaces API allowing an external application to query the recorded audit information.

In general application A B C audit component A B C backup client A B C backup analytics module A B C and backup server software respectively include the functionality to carry out various processes according to an embodiment of the present invention as described hereinafter. In some embodiments application A B C audit component A B C backup client A B C backup analytics module A B C backup server software include one or both of software and hardware that is configured to provide this functionality according to an embodiment of the present invention.

As shown in backup client system A hosts application A backup client system B hosts application B and backup client system C hosts application C. In one embodiment applications A B and C manage data to be backed up within backup environment . Backup client system A also hosts audit component A backup client A and analytics module A. Backup client system B also hosts audit component B backup client B and analytics module B. Backup client system C also hosts audit component C backup client C and analytics module C.

In general backup client system A backup client system B backup client system C and backup server system work in concert to perform automated and self adjusting backup operations in connection with full incremental and differential backup operations of stored data in a data area.

As used herein a data area comprises at least one data block including data managed by application A B C. A data block is an atomic representation of data according to the data type. For example if the data type corresponds to files stored in a file system then each file is comprised of data blocks. In some scenarios and embodiments a data area includes one or more data blocks for one or more files in a file system. In some scenarios and embodiments if the backup operation is to be performed for an entire file system then the data area includes all data blocks used by files in the file system. In some scenarios and embodiments if the data type corresponds to a database then the database is comprised of records representing a database table. As such in some scenarios and embodiments data area for a database comprises one or more records for example all records representing one or more tables.

Still referring to each of the backup analytics modules A B C is coupled to a corresponding audit component A B C to obtain an audit trail including information about sequence and number of read and write operations performed by the application A B C within a certain time range for a given data area. These couplings might be implemented by means of inter process communication Remote Procedure Calls message queues or other means of communication within a client server system according to prior art. Each of the backup analytics modules A B C is also coupled to a corresponding backup client A B C whereby the backup client A B C instructs the backup analytics module A B C to perform an analysis for a given time period and the backup analytics module A B C returns a result of this analysis. Based on the result of the analysis the backup client A B C performs a backup operation of the data area corresponding to a certain type which can be no backup operation an incremental backup operation a differential backup operation or a full backup operation.

In another embodiment the backup analytics module A B C performs the analysis of the audit trail continuously and informs the corresponding backup client A B C about the type of backup operation to be performed. In one such embodiment the backup client then performs this backup operation type for the data area.

In one embodiment backup environment is configured to perform a method for performing automated and self adjusting backup operations in connection with full incremental and differential backup operations of stored data in a data area shown in .

Referring to after starting the method for performing automated and self adjusting backup operations a date and time of the last backup operation for a data block is determined in process S. In one embodiment the processes included in S are executed by one or both of the backup analytics module A B C and the backup client A B C. In process S an audit trail according to the last backup date and time and current date and time for the data block is obtained by the backup analytics module A B C querying the audit component A B C. In process S read operations and write operations of a data block are ordered in a chronological sequence based on the audit trail by the backup analytics module A B C. In process S a first weighting element for the read operations and a second weighting element for the write operations of the data block are generated by the backup analytics module A B C wherein the read operations are weighted differently than the write operations. In process S the backup analytics module A B C calculates a weighted sum C of the weighted read operations and the weighted write operations for the data block. In process S the weighted sum C is compared with at least one threshold value T T T. In process S a result of the comparison performed in process S is analyzed and based on that analysis backup analytics module A B C identify the type of backup operation to be performed. In process S backup client A B C perform a type of backup operation on the data block that corresponds to the type of backup operation that was identified in process S.

Referring to backup environment is configured to perform a method to determine automatically the start time and type of the next backup operation. In one such embodiment and scenario backup client A B C receives a backup request. The backup request could be for example initiated by the backup server system or by another means of scheduling. In an alternate embodiment the backup operations are continuously performed without receiving an explicit request for backup. In one such embodiment and scenario backup analytics module A B C continuously obtains and analyzes the audit trail as described above and sends to backup client A B C information indicating the type of backup operation to be performed for a given data block.

In one embodiment backup analytics module A B C requests and obtains information about the sequence of read and write operations from the audit component A B C and stores the sequence of read and write operations in a vector V. As such in some embodiments each element in the vector V represents a read or write operation. In one embodiment each element of the vector V represents the number of consecutive read and write operations. As such in some embodiments backup analytics module A B C determine the total number of read and write operations Z which is also the number of elements in vector V.

In some embodiments backup analytics modules A B and C now determine the weighted sum C of all weighted read operations and weighted write operations of vector V according to equation 1 .

If i th element of the vector V represents a write operation then i th element of the vector V is calculated according to equation 2 . 2 

If i th element of the vector V represents a read operation then i th element of the vector is calculated according to equation 3 . 3 

In various embodiments the increment P applied for write operations is a number greater than 0 and the factor M applied for the read operations is a number greater than 1.

Since read operations are weighted with a factor it becomes obvious that a read operation without any write operations will not cause an increase in the weighted sum C. Hence in one embodiment and scenario in response to a large number of read operations and no write operations being performed to a data block a backup operation is not performed because the data block has not changed. However if at least one write operation has been performed on the data block subsequent to one or more read operations then the weighted sum C will increase and assuming a continued increase in the weighted sum C eventually trigger a backup operation when the weighted sum C exceeds a threshold.

In one embodiment the importance or value of a given data block is determined based on the number of read operations being performed on it. In some cases and embodiments the number of read operations is taken in context with the time over which those read operations were made. For example a data block with twenty read operations over a period of ten minutes would have a higher value rating than a similar data block that has twenty read operations over five hours. In general as more read operations are performed on such data blocks the greater the likelihood becomes for a backup operation being triggered because the data block being read is deemed to be valuable and thus should be protected using a backup operation.

In one embodiment backup analytics module A B C or alternatively backup client A B C determines threshold values T T T whereby a first threshold value T is less than a second threshold value T which is less than a third threshold value T. In some embodiments threshold values T T T may be preconfigured in backup analytics module A B C. In general threshold values T T T each represent a weighted sum of weighted read and write operations.

In another embodiment threshold values T T T are determined in accordance to the utilization of the backup client system A B C. In one such embodiment the system utilization of a backup client system A B C includes but is not limited to the utilization of the CPU memory RAM and disk drive and can be determined with known methods according to for example system utilities like top or nmon. In general the greater the utilization of backup client system A B C the greater the second threshold value T and the third threshold value T become. In some embodiments such proportional increases assures that with high system utilization 90 that an incremental backup operation is more likely to be performed than a differential backup operation which in turn is more likely to be performed than full backup operation. In some embodiments and scenarios an incremental backup operation is less resource utilization intensive than for example a differential backup operation which in turn are less resource intensive than full backup operations. In general in some embodiments and scenarios if the system utilization is low 

In another embodiment threshold values T T T are determined in accordance to the utilization of the backup server system . In some embodiments system utilization of a backup server system includes but is not limited to the utilization of the CPU memory RAM and disk drive and can be determined can be determined with known methods according to for example system utilities like top or nmon. In general the greater the utilization of backup server system the greater the second threshold value T and the third threshold value T become. In some embodiments such proportional increases assures that with high utilization of backup server system 90 that an incremental backup operation is more likely to be performed than a differential backup operation which in turn is more likely to be performed than full backup operation. In some embodiments and scenarios an incremental backup operation is less resource utilization intensive than for example a differential backup operation which in turn are less resource intensive than full backup operations. In general in some embodiments and scenarios if the utilization of backup server system is low 

In another embodiment of the present invention the threshold values T T T are determined in accordance to the utilization of the network between the backup client systems A B C and the backup server systems . The network utilization of a network includes but is not limited to the number of packages sent and received by the network and can be determined with real time network performance monitoring methods according to prior art. In general the greater the utilization of network the greater the second threshold value T and the third threshold value T become. In some embodiments such proportional increases assures that with high network utilization 90 that an incremental backup operation is more likely to be performed than a differential backup operation which in turn is more likely to be performed than full backup operation. In some embodiments and scenarios an incremental backup operation is less high network utilization intensive than for example a differential backup operation which in turn are less high network utilization intensive than full backup operations. In general in some embodiments and scenarios if the high network utilization is low 

In one embodiment thresholds T T T are determined according to the available storage capacity of the backup storage in the backup server system . For example if the available storage capacity is less than 20 then the third threshold value T is much higher than the first threshold value T which decreases the likelihood that a full backup operation will be executed since the full backup operation requires much more storage capacity in backup server system than an incremental backup operation or a differential backup operation. In contrast if the available storage capacity is more than 50 then the third threshold value T is lower thereby increasing the likelihood for a full backup operation.

In one embodiment backup analytics module A B C compares the current weighted sum C to the threshold values T T T in order to derive the type of backup operation to be performed.

In one embodiment if the current weighted sum C is greater than the first threshold value T and less than the second threshold value T T

In one embodiment if the current weighted sum C is greater than the second threshold value T and less than the third threshold value T T

In one embodiment if the current weighted sum C is greater than the third threshold value T C T then the backup operation type is set to full backup operation . In one such embodiment and scenario during the full backup operation all data blocks of a corresponding data area are backed up.

In one embodiment backup analytics module A B C informs backup client A B C to perform a type of backup operation which has been determined.

In one embodiment backup analytics module A B C informs the backup client A B C about the calculated weighted sum C and a backup client determines which type of backup operation to perform by comparing the weighted sum C against the threshold values T T T and making the determination based on a result of the comparison.

In one embodiment if one of the backup operations incremental backup operation differential backup operation or full backup operation has been performed then the start date and time of the backup operation is stored by backup analytics module A B and C as the last backup time and the previous weighted sum C is set to zero.

In one embodiment backup client A B C performs the backup operation according to an indicated type of backup operation to be performed. If the type of backup operation is no backup then backup client A B C do not perform a backup operation. Further if the backup operation type is no backup then backup analytics module A B C store the weighted sum C for the next cycle as C.

In one embodiment the values for P M and T T and T may be varied for different purposes and such variances may depend on the usage pattern of the database system.

Embodiments of the present invention have been described in accordance to stored data to be backed up comprising just one data block. In one alternative embodiment the stored data to be backed up includes at least one data area that has more than one data block wherein said weighted sum C of the weighted read operations and the weighted write operations is calculated over all data blocks of the corresponding data area. Further in one such embodiment the first threshold value T and the second threshold value T and the third threshold value T are generated for a total sum C of the weighted read operations and the weighted write operations over all data blocks of the corresponding data area.

In various embodiments of the present invention one or more of backup server system and backup client systems A B and C are respectively a type of computing device. Such a computing device can be a standalone device a server a laptop computer a tablet computer a netbook computer a personal computer PC or a desktop computer. In another embodiment one or more of backup server system and backup client systems A B and C represent a computing system utilizing clustered computers and components to act as a single pool of seamless resources. In general one or more of backup server system and backup client systems A B and C can be any computing device or a combination of devices with access to application A B C audit component A B C backup client A B C backup analytics module A B C backup server software and network and is capable of executing the processes described with references to . One or more of backup server system and backup client systems A B and C may include internal and external hardware components as depicted and described in further detail with respect to .

In this exemplary embodiment application A B C audit component A B C backup client A B C backup analytics module A B C and backup server software are respectively stored on one or more of backup server system and backup client systems A B and C. However in other embodiments application A B C audit component A B C backup client A B C backup analytics module A B C and backup server software may be stored externally and accessed through a communication network such as network . Network can be for example a local area network LAN a wide area network WAN such as the Internet or a combination of the two and may include wired wireless fiber optic or any other connection known in the art. In general network can be any combination of connections and protocols that will support communications between backup server system and backup client systems A B and C and application A B C audit component A B C backup client A B C backup analytics module A B C and backup server software in accordance with a desired embodiment of the present invention.

Backup server system and backup client systems A B and C respectively include communications fabric which provides communications between computer processor s memory persistent storage communications unit and input output I O interface s . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are computer readable storage media. In this embodiment memory includes random access memory RAM and cache memory . In general memory can include any suitable volatile or non volatile computer readable storage media.

One or more of application A B C audit component A B C backup client A B C backup analytics module A B C and backup server software are stored in persistent storage for execution and or access by one or more of the respective computer processors via one or more memories of memory . In this embodiment persistent storage includes a magnetic hard disk drive. Alternatively or in addition to a magnetic hard disk drive persistent storage can include a solid state hard drive a semiconductor storage device read only memory ROM erasable programmable read only memory EPROM flash memory or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices including resources of network . In these examples communications unit includes one or more network interface cards. Communications unit may provide communications through the use of either or both physical and wireless communications links. One or more of application A B C audit component A B C backup client A B C backup analytics module A B C and backup server software may be downloaded to persistent storage through communications unit .

I O interface s allows for input and output of data with other devices that may be connected to one or more of backup server system and backup client systems A B and C. For example I O interface may provide a connection to external devices such as a keyboard keypad a touch screen and or some other suitable input device. External devices can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data used to practice embodiments of the present invention e.g. application A B C audit component A B C backup client A B C backup analytics module A B C and backup server software can be stored on such portable computer readable storage media and can be loaded onto persistent storage via I O interface s . I O interface s also connect to a display .

Display provides a mechanism to display data to a user and may be for example a computer monitor or a television screen.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational process to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

It is to be noted that certain terms used herein may be subject to trademark rights in various jurisdictions throughout the world and are used here only in reference to the products or services properly denominated by the marks to the extent that such trademark rights may exist.

