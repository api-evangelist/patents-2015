---

title: Systems and methods for analyzing a video stream
abstract: The various embodiments described herein include methods, devices, and systems for analyzing video streams. In one aspect, a method includes, while receiving a video stream: obtaining motion start information indicating that a portion of the video stream includes a motion event candidate; and segmenting the portion of the video stream into a plurality of segments including an initial segment. The method also includes obtaining a first categorization for the motion event candidate based on the initial segment; and, in accordance with the obtained first categorization, generating a log entry for the motion event candidate including the first categorization. The method further includes: in response to obtaining motion end information, obtaining a second categorization for the motion event based on the plurality of segments; and updating the log entry for the motion event candidate based on the obtained second categorization.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09501915&OS=09501915&RS=09501915
owner: GOOGLE INC.
number: 09501915
owner_city: Mountain View
owner_country: US
publication_date: 20150612
---
This application is a continuation in part of U.S. patent application Ser. No. 14 510 042 filed Oct. 8 2014 entitled Method and System for Categorizing Detected Motion Events which itself claimed priority to U.S. Provisional Application No. 62 057 991 filed Sep. 30 2014 both of which are hereby incorporated by reference in their entirety.

This application claims priority to U.S. Provisional Application No. 62 021 620 filed Jul. 7 2014 which is hereby incorporated by reference in its entirety.

This application is related to U.S. patent application Ser. No. 14 738 034 filed Jun. 12 2015 entitled Systems and Methods for Categorizing Motion Event Candidates and U.S. Design patent application Ser. No. 29 504 605 filed Oct. 7 2014 entitled Video Monitoring User Interface with Event Timeline and Display of Multiple Preview Windows At User Selected Event Marks both of which are hereby incorporated by reference in their entirety.

This relates generally to video monitoring and analysis including but not limited to analyzing and categorizing motion event candidates.

Video surveillance produces a large amount of continuous video data over the course of hours days and even months. Such video data includes many long and uneventful portions that are of no significance or interest to a reviewer. In some existing video surveillance systems motion detection is used to trigger alerts or video recording. However using motion detection as the only means for selecting video segments for user review may still produce too many video segments that are of no interest to the reviewer. For example some detected motions are generated by normal activities that routinely occur at the monitored location and it is tedious and time consuming to manually scan through all of the normal activities recorded on video to identify a small number of activities that warrant special attention. In addition when the sensitivity of the motion detection is set too high for the location being monitored trivial movements e.g. movements of tree leaves shifting of the sunlight etc. can account for a large amount of video being recorded and or reviewed. On the other hand when the sensitivity of the motion detection is set too low for the location being monitored the surveillance system may fail to record and present video data on some important and useful events.

It is a challenge to accurately identify and categorize meaningful segments of a video stream in an efficient intuitive and convenient manner. Human friendly techniques for discovering and categorizing motion events of interest are in great need.

Accordingly there is a need for systems and or devices with more efficient accurate and intuitive methods for motion event identification categorization and presentation. Such systems devices and methods optionally complement or replace conventional systems devices and methods for monitoring and reviewing motion events in a video stream.

 A1 In one aspect some implementations include a method performed at a server system having one or more processors and memory coupled to the one or more processors. The method includes while receiving video information from one or more cameras the video information including a video stream 1 obtaining motion start information corresponding to a first location in the video stream the motion start information indicating that a portion of the video stream subsequent to the first location includes a motion event candidate and 2 while receiving the portion of the video stream that includes the motion event candidate segmenting the portion of the video stream into a plurality of segments the plurality of segments including an initial segment. The method further includes a obtaining a first categorization also sometimes called a classification of a plurality of categorizations for the motion event candidate based on the initial segment b in accordance with the obtained first categorization generating a log entry for the motion event candidate the log entry including the first categorization c obtaining motion end information corresponding to a second location in the video stream the motion end information indicating that a portion of the video stream subsequent to the second location does not include the motion event candidate d in response to obtaining the motion end information obtaining a second categorization of the plurality of categorizations for the motion event based on the plurality of segments and e updating the log entry for the motion event candidate based on the obtained second categorization.

 A2 In some implementations of the method of A1 1 the video information is associated with a user and 2 the method further includes a in accordance with the obtained first categorization generating an alert for the motion event candidate and b sending the alert to the user.

 A3 In some implementations of the method of A2 1 the method further includes obtaining a confidence score corresponding to the obtained first categorization and 2 generating the alert for the motion event candidate includes generating the alert in accordance with a determination that the confidence score meets predefined criteria.

 A4 In some implementations of the method of any one of A1 A3 the method further includes 1 obtaining a confidence score corresponding to the obtained first categorization and 2 storing the confidence score to the log entry.

 A5 In some implementations of the method of any one of A1 A4 the method further includes 1 determining whether the obtained second categorization matches the obtained first categorization and 2 in accordance with a determination that the obtained second categorization does not match the obtained first categorization removing the first categorization from the log entry.

 A6 In some implementations of the method of any one of A1 A5 the second categorization is more descriptive than the first categorization.

 A7 In some implementations of the method of any one of A1 A6 the method further includes 1 obtaining a third categorization for the motion event candidate based on at least one segment of the plurality of segments and 2 prior to obtaining the second categorization updating the log entry for the motion event candidate to include the obtained third categorization.

 A8 In some implementations of the method of A7 the method further includes 1 in accordance with the obtained first categorization forgoing generating an alert for the motion event candidate and 2 in accordance with the obtained third categorization generating an alert for the motion event candidate.

 A9 In some implementations of the method of any one of A1 A8 segmenting the video stream includes 1 identifying a third location in the video stream 2 in accordance with a determination that a predefined amount of time has lapsed identifying a fourth location in the video stream and 3 generating a segment corresponding to the portion of the video stream between the third location and the fourth location.

 A10 In some implementations of the method of any one of A1 A9 each segment of the plurality of segments has a same duration.

 A11 In some implementations of the method of any one of A1 A10 1 the method further includes a after obtaining the motion start information assigning the segmented video stream to a first categorizer also sometimes called a classifier and b storing each segment of the plurality of segments to a particular memory portion the particular memory portion associated with the first categorizer and 2 obtaining the first categorization for the motion event candidate includes a retrieving by the first categorizer the initial segment from the particular memory portion and b processing by the first categorizer the initial segment of the video stream to obtain the first categorization.

 A12 In some implementations of the method of A11 the particular memory portion corresponds to a queue assigned to the first categorizer.

 A13 In some implementations of the method of any one of A11 A12 1 the server system includes a plurality of categorizers and 2 assigning the segmented video stream to the first categorizer includes assigning the segmented video stream to the first categorizer in accordance with a load balancing of the plurality of categorizer.

 A14 In some implementations of the method of any one of A11 A13 the method further includes checking by the first categorizer for additional segments of the video stream until a motion end event occurs.

 A15 In some implementations of the method of A14 the motion end event includes 1 processing by the first categorizer a segment denoted as a final segment or 2 a time out event.

 A16 In some implementations of the method of any one of A11 A15 the method further includes 1 retrieving a second segment of the plurality of segments from the particular memory portion 2 obtaining by the first categorizer segment information corresponding to the initial segment and 3 processing by the first categorizer the second segment of the video stream to obtain a third categorization where the processing of the second segment is based on the segment information corresponding to the initial segment. In some implementations the segment information includes interslice dependency information. In some implementations the segment information includes state plus output information.

 A17 In some implementations of the method of any one of A1 A16 the first categorization is based on a determination of an amount of motion within the initial segment of the video stream. In some implementations the amount of motion corresponds to a number of different pixels between subsequent frames within the initial segment of the video stream.

 A18 In some implementations of the method of any one of A1 A17 the method further includes while receiving the video information 1 obtaining second motion start information corresponding to a third location in the video stream the second motion start information indicating that the video stream subsequent to the third location includes a second motion event candidate and 2 while receiving the video stream that includes the second motion event candidate segmenting the video stream into a second plurality of segments the second plurality of segments including an initial segment. The method further includes 1 obtaining a first categorization for the second motion event candidate based on the initial segment of the second plurality of segments the first categorization for the second motion event candidate indicating that the second motion event candidate is an unimportant event also sometimes called a non event 2 in accordance with the obtained first categorization for the second motion event candidate forgoing generation of a respective log entry for the second motion event candidate 3 after obtaining the first categorization for the second motion event candidate obtaining a second categorization for the second motion event candidate based on one or more segments of the second plurality of segments the second categorization for the second motion event candidate indicating that the second motion event candidate is an important event and 4 in accordance with the obtained second categorization for the second motion event candidate generating a respective log entry for the second motion event candidate the respective log entry including the second categorization.

 B1 In another aspect some implementations include a method performed at a computer system having one or more processors and memory coupled to the one or more processors. The method includes 1 receiving a plurality of video frames the plurality of video frames including a motion event candidate and 2 processing the plurality of video frames. The processing includes a obtaining one or more background factors corresponding to a background in at least a subset of the plurality of video frames b utilizing the obtained background factors to identify one or more motion entities also sometimes called motion objects in at least a subset of the plurality of video frames c for each identified motion entity obtaining one or more representative motion vectors based on a motion track of the respective motion entity d identifying one or more features in at least a subset of the plurality of video frames and e aggregating the obtained background factors the obtained representative motion vectors and the identified features to generate a plurality of motion features. The method further includes sending the plurality of motion features to an event categorizer where the event categorizer assigns a motion event category to the motion event candidate based on the received motion features.

 B2 In some implementations of the method of B1 the method further includes 1 performing object recognition on each identified motion entity and 2 classifying each of at least a subset of the one or more motion entities in accordance with the performed object recognition where the motion event category is further based on the classified objects.

 B3 In some implementations of the method of any one of B1 B2 1 the plurality of video frames correspond to a scene 2 the method further includes obtaining distance information for the scene and 3 the aggregating includes aggregating the obtained distance information.

 B4 In some implementations of the method of any one of B1 B3 the method further includes training the event categorizer. The training includes 1 obtaining a plurality of video clips each video clip in the plurality of video clips including a respective motion event candidate 2 designating a motion event category for each respective motion event candidate 3 assigning via the event categorizer a motion event category to each respective motion event candidate and 4 adjusting the event categorizer based on differences between the assigned motion event categories and the designated motion event categories.

 B5 In some implementations of the method of any one of B1 B4 1 the plurality of video frames are associated with a first user 2 the method further includes obtaining user information corresponding to the first user and 3 the motion event category is further based on the obtained user information.

 B6 In some implementations of the method of B5 the user information includes user feedback corresponding to one or more prior motion event candidates.

 B7 In some implementations of the method of any one of B1 B6 1 the plurality of video frames correspond to a scene 2 the method further includes obtaining environmental information corresponding to the scene and 3 the motion event category is further based on the obtained environmental information.

 B8 In some implementations of the method of B7 the environmental information comprises information regarding whether the scene is within a structure.

 B9 In some implementations of the method of any one of B1 B8 1 the plurality of video frames correspond to one or more cameras 2 the method further includes obtaining camera information corresponding to the one or more cameras and 3 the motion event category is further based on the obtained camera information.

 B10 In some implementations of the method of B9 the camera information includes information regarding a relationship between each camera in the one or more cameras and the ground.

 B11 In some implementations of the method of any one of B9 B10 the camera information includes camera mode information corresponding to each camera in the one or more cameras.

 B12 In some implementations of the method of B11 the camera mode information includes information regarding whether a respective camera is in a low light mode.

 B13 In some implementations of the method of any one of B1 B12 the method further includes 1 receiving a second plurality of video frames the second plurality of video frames including a second motion event candidate 2 processing the second plurality of video frames to generate a second plurality of motion features and 3 sending the second plurality of motion features to the event categorizer where the event categorizer assigns a second motion event category to the second motion event candidate based on the second plurality of motion features.

 B14 In some implementations of the method of B13 processing the second plurality of video frames includes utilizing information corresponding to the processing of the plurality of video frames.

 B15 In some implementations of the method of any one of B13 B14 the method further includes 1 prior to receiving the second plurality of video frames creating a log entry corresponding to the motion event candidate and 2 updating the log entry based on the second motion event category.

 B16 In some implementations of the method of any one of B13 B15 the method further includes utilizing both the plurality of motion features and the second plurality of motion features to assign a motion event category to third motion event candidate the third motion event candidate corresponding to a combination of the first motion event candidate and the second motion event candidate.

 B17 In some implementations of the method of any one of B1 B16 the motion event category assigned to the motion event candidate is selected from a group consisting of one or more known event types one or more unknown event types and a non event type.

 B18 In some implementations of the method of any one of B1 B17 the method further includes generating a confidence score for the motion event candidate.

In yet another aspect some implementations include a server system including one or more processors and memory coupled to the one or more processors the memory storing one or more programs configured to be executed by the one or more processors the one or more programs including instructions for performing any of the methods described herein e.g. A1 18 and B1 18 described above .

In yet another aspect some implementations include a computing system including one or more processors and memory coupled to the one or more processors the memory storing one or more programs configured to be executed by the one or more processors the one or more programs including instructions for performing any of the methods described herein e.g. A1 18 and B1 18 described above .

In yet another aspect some implementations include a non transitory computer readable storage medium storing one or more programs for execution by one or more processors of a storage device the one or more programs including instructions for performing any of the methods described herein e.g. A1 18 and B1 18 described above .

Reference will now be made in detail to implementations examples of which are illustrated in the accompanying drawings. In the following detailed description numerous specific details are set forth in order to provide a thorough understanding of the various described implementations. However it will be apparent to one of ordinary skill in the art that the various described implementations may be practiced without these specific details. In other instances well known methods procedures components circuits and networks have not been described in detail so as not to unnecessarily obscure aspects of the implementations.

It will also be understood that although the terms first second etc. are in some instances used herein to describe various elements these elements should not be limited by these terms. These terms are only used to distinguish one element from another. For example a first category could be termed a second category and similarly a second category could be termed a first category without departing from the scope of the various described implementations. The first category and the second category are both categories but they are not necessarily the same category.

The terminology used in the description of the various described implementations herein is for the purpose of describing particular implementations only and is not intended to be limiting. As used in the description of the various described implementations and the appended claims the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will also be understood that the term and or as used herein refers to and encompasses any and all possible combinations of one or more of the associated listed items. It will be further understood that the terms includes including comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

As used herein the term if is optionally construed to mean when or upon or in response to determining or in response to detecting or in accordance with a determination that depending on the context. Similarly the phrase if it is determined or if a stated condition or event is detected is optionally construed to mean upon determining or in response to determining or upon detecting the stated condition or event or in response to detecting the stated condition or event or in accordance with a determination that a stated condition or event is detected depending on the context.

It is to be appreciated that smart home environments may refer to smart environments for homes such as a single family house but the scope of the present teachings is not so limited. The present teachings are also applicable without limitation to duplexes townhomes multi unit apartment buildings hotels retail stores office buildings industrial buildings and more generally to any living space or work space.

It is also to be appreciated that while the terms user customer installer homeowner occupant guest tenant landlord repair person and the like may be used to refer to the person or persons acting in the context of some particularly situations described herein these references do not limit the scope of the present teachings with respect to the person or persons who are performing such actions. Thus for example the terms user customer purchaser installer subscriber and homeowner may often refer to the same person in the case of a single family residential dwelling because the head of the household is often the person who makes the purchasing decision buys the unit and installs and configures the unit and is also one of the users of the unit. However in other scenarios such as a landlord tenant environment the customer may be the landlord with respect to purchasing the unit the installer may be a local apartment supervisor a first user may be the tenant and a second user may again be the landlord with respect to remote control functionality. Importantly while the identity of the person performing the action may be germane to a particular advantage provided by one or more of the implementations such identity should not be construed in the descriptions that follow as necessarily limiting the scope of the present teachings to those particular individuals having those particular identities.

The depicted structure includes a plurality of rooms separated at least partly from each other via walls . The walls may include interior walls or exterior walls. Each room may further include a floor and a ceiling . Devices may be mounted on integrated with and or supported by a wall floor or ceiling .

In some implementations the integrated devices of the smart home environment include intelligent multi sensing network connected devices that integrate seamlessly with each other in a smart home network e.g. and or with a central server or a cloud computing system to provide a variety of useful smart home functions. The smart home environment may include one or more intelligent multi sensing network connected thermostats hereinafter referred to as smart thermostats one or more intelligent network connected multi sensing hazard detection units hereinafter referred to as smart hazard detectors one or more intelligent multi sensing network connected entryway interface devices and hereinafter referred to as smart doorbells and smart door locks and one or more intelligent multi sensing network connected alarm systems hereinafter referred to as smart alarm systems .

In some implementations the one or more smart thermostats detect ambient climate characteristics e.g. temperature and or humidity and control a HVAC system accordingly. For example a respective smart thermostat includes an ambient temperature sensor.

The one or more smart hazard detectors may include thermal radiation sensors directed at respective heat sources e.g. a stove oven other appliances a fireplace etc. . For example a smart hazard detector in a kitchen includes a thermal radiation sensor directed at a stove oven . A thermal radiation sensor may determine the temperature of the respective heat source or a portion thereof at which it is directed and may provide corresponding blackbody radiation data as output.

The smart doorbell and or the smart door lock may detect a person s approach to or departure from a location e.g. an outer door control doorbell door locking functionality e.g. receive user inputs from a portable electronic device to actuate bolt of the smart door lock announce a person s approach or departure via audio or visual means and or control settings on a security system e.g. to activate or deactivate the security system when occupants go and come .

The smart alarm system may detect the presence of an individual within close proximity e.g. using built in IR sensors sound an alarm e.g. through a built in speaker or by sending commands to one or more external speakers and send notifications to entities or users within outside of the smart home network . In some implementations the smart alarm system also includes one or more input devices or sensors e.g. keypad biometric scanner NFC transceiver microphone for verifying the identity of a user and one or more output devices e.g. display speaker . In some implementations the smart alarm system may also be set to an armed mode such that detection of a trigger condition or event causes the alarm to be sounded unless a disarming action is performed.

In some implementations the smart home environment includes one or more intelligent multi sensing network connected wall switches hereinafter referred to as smart wall switches along with one or more intelligent multi sensing network connected wall plug interfaces hereinafter referred to as smart wall plugs . The smart wall switches may detect ambient lighting conditions detect room occupancy states and control a power and or dim state of one or more lights. In some instances smart wall switches may also control a power state or speed of a fan such as a ceiling fan. The smart wall plugs may detect occupancy of a room or enclosure and control supply of power to one or more wall plugs e.g. such that power is not supplied to the plug if nobody is at home .

In some implementations the smart home environment of includes a plurality of intelligent multi sensing network connected appliances hereinafter referred to as smart appliances such as refrigerators stoves ovens televisions washers dryers lights stereos intercom systems garage door openers floor fans ceiling fans wall air conditioners pool heaters irrigation systems security systems space heaters window AC units motorized duct vents and so forth. In some implementations when plugged in an appliance may announce itself to the smart home network such as by indicating what type of appliance it is and it may automatically integrate with the controls of the smart home. Such communication by the appliance to the smart home may be facilitated by either a wired or wireless communication protocol. The smart home may also include a variety of non communicating legacy appliances such as old conventional washer dryers refrigerators and the like which may be controlled by smart wall plugs . The smart home environment may further include a variety of partially communicating legacy appliances such as infrared IR controlled wall air conditioners or other IR controlled devices which may be controlled by IR signals provided by the smart hazard detectors or the smart wall switches .

In some implementations the smart home environment includes one or more network connected cameras that are configured to provide video monitoring and security in the smart home environment . The cameras may be used to determine occupancy of the structure and or particular rooms in the structure and thus may act as occupancy sensors. For example video captured by the cameras may be processed to identify the presence of an occupant in the structure e.g. in a particular room . Specific individuals may be identified based for example on their appearance e.g. height face and or movement e.g. their walk gait . Cameras may additionally include one or more sensors e.g. IR sensors motion detectors input devices e.g. microphone for capturing audio and output devices e.g. speaker for outputting audio .

The smart home environment may additionally or alternatively include one or more other occupancy sensors e.g. the smart doorbell smart door locks touch screens IR sensors microphones ambient light sensors motion detectors smart nightlights etc. . In some implementations the smart home environment includes radio frequency identification RFID readers e.g. in each room or a portion thereof that determine occupancy based on RFID tags located on or embedded in occupants. For example RFID readers may be integrated into the smart hazard detectors .

The smart home environment may also include communication with devices outside of the physical home but within a proximate geographical range of the home. For example the smart home environment may include a pool heater monitor that communicates a current pool temperature to other devices within the smart home environment and or receives commands for controlling the pool temperature. Similarly the smart home environment may include an irrigation monitor that communicates information regarding irrigation systems within the smart home environment and or receives control information for controlling such irrigation systems.

By virtue of network connectivity one or more of the smart home devices of may further allow a user to interact with the device even if the user is not proximate to the device. For example a user may communicate with a device using a computer e.g. a desktop computer laptop computer or tablet or other portable electronic device e.g. a mobile phone such as a smart phone . A webpage or application may be configured to receive communications from the user and control the device based on the communications and or to present information about the device s operation to the user. For example the user may view a current set point temperature for a device e.g. a stove and adjust it using a computer. The user may be in the structure during this remote communication or outside the structure.

As discussed above users may control smart devices in the smart home environment using a network connected computer or portable electronic device . In some examples some or all of the occupants e.g. individuals who live in the home may register their device with the smart home environment . Such registration may be made at a central server to authenticate the occupant and or the device as being associated with the home and to give permission to the occupant to use the device to control the smart devices in the home. An occupant may use their registered device to remotely control the smart devices of the home such as when the occupant is at work or on vacation. The occupant may also use their registered device to control the smart devices when the occupant is actually located inside the home such as when the occupant is sitting on a couch inside the home. It should be appreciated that instead of or in addition to registering devices the smart home environment may make inferences about which individuals live in the home and are therefore occupants and which devices are associated with those individuals. As such the smart home environment may learn who is an occupant and permit the devices associated with those individuals to control the smart devices of the home.

In some implementations in addition to containing processing and sensing capabilities devices and or collectively referred to as the smart devices are capable of data communications and information sharing with other smart devices a central server or cloud computing system and or other devices that are network connected. Data communications may be carried out using any of a variety of custom or standard wireless protocols e.g. IEEE 802.15.4 Wi Fi ZigBee 6LoWPAN Thread Z Wave Bluetooth Smart ISA100.11a WirelessHART MiWi etc. and or any of a variety of custom or standard wired protocols e.g. Ethernet HomePlug etc. or any other suitable communication protocol including communication protocols not yet developed as of the filing date of this document.

In some implementations the smart devices serve as wireless or wired repeaters. In some implementations a first one of the smart devices communicates with a second one of the smart devices via a wireless router. The smart devices may further communicate with each other via a connection e.g. network interface to a network such as the Internet . Through the Internet the smart devices may communicate with a smart home provider server system also called a central server system and or a cloud computing system herein . The smart home provider server system may be associated with a manufacturer support entity or service provider associated with the smart device s . In some implementations a user is able to contact customer support using a smart device itself rather than needing to use other communication means such as a telephone or Internet connected computer. In some implementations software updates are automatically sent from the smart home provider server system to smart devices e.g. when available when purchased or at routine intervals .

In some implementations the network interface includes a conventional network device e.g. a router and the smart home environment of includes a hub device that is communicatively coupled to the network s directly or via the network interface . The hub device is further communicatively coupled to one or more of the above intelligent multi sensing network connected devices e.g. smart devices of the smart home environment . Each of these smart devices optionally communicates with the hub device using one or more radio communication networks available at least in the smart home environment e.g. ZigBee Z Wave Insteon Bluetooth Wi Fi and other radio communication networks . In some implementations the hub device and devices coupled with to the hub device can be controlled and or interacted with via an application running on a smart phone household controller laptop tablet computer game console or similar electronic device. In some implementations a user of such controller application can view the status of the hub device or coupled smart devices configure the hub device to interoperate with smart devices newly introduced to the home network commission new smart devices and adjust or view settings of connected smart devices etc. In some implementations the hub device extends capabilities of low capability smart device to match capabilities of the highly capable smart devices of the same type integrates functionality of multiple different device types even across different communication protocols and is configured to streamline adding of new devices and commissioning of the hub device.

In some implementations some low power nodes are incapable of bidirectional communication. These low power nodes send messages but they are unable to listen . Thus other devices in the smart home environment such as the spokesman nodes cannot send information to these low power nodes.

In some implementations some low power nodes are capable of only a limited bidirectional communication. For example other devices are able to communicate with the low power nodes only during a certain time period.

As described in some implementations the smart devices serve as low power and spokesman nodes to create a mesh network in the smart home environment . In some implementations individual low power nodes in the smart home environment regularly send out messages regarding what they are sensing and the other low powered nodes in the smart home environment in addition to sending out their own messages forward the messages thereby causing the messages to travel from node to node i.e. device to device throughout the smart home network . In some implementations the spokesman nodes in the smart home network which are able to communicate using a relatively high power communication protocol such as IEEE 802.11 are able to switch to a relatively low power communication protocol such as IEEE 802.15.4 to receive these messages translate the messages to other communication protocols and send the translated messages to other spokesman nodes and or the smart home provider server system using e.g. the relatively high power communication protocol . Thus the low powered nodes using low power communication protocols are able to send and or receive messages across the entire smart home network as well as over the Internet to the smart home provider server system . In some implementations the mesh network enables the smart home provider server system to regularly receive data from most or all of the smart devices in the home make inferences based on the data facilitate state synchronization across devices within and outside of the smart home network and send commands to one or more of the smart devices to perform tasks in the smart home environment.

As described the spokesman nodes and some of the low powered nodes are capable of listening. Accordingly users other devices and or the smart home provider server system may communicate control commands to the low powered nodes. For example a user may use the electronic device e.g. a smart phone to send commands over the Internet to the smart home provider server system which then relays the commands to one or more spokesman nodes in the smart home network . The spokesman nodes may use a low power protocol to communicate the commands to the low power nodes throughout the smart home network as well as to other spokesman nodes that did not receive the commands directly from the smart home provider server system .

In some implementations a smart nightlight which is an example of a smart device is a low power node. In addition to housing a light source the smart nightlight houses an occupancy sensor such as an ultrasonic or passive IR sensor and an ambient light sensor such as a photo resistor or a single pixel sensor that measures light in the room. In some implementations the smart nightlight is configured to activate the light source when its ambient light sensor detects that the room is dark and when its occupancy sensor detects that someone is in the room. In other implementations the smart nightlight is simply configured to activate the light source when its ambient light sensor detects that the room is dark. Further in some implementations the smart nightlight includes a low power wireless communication chip e.g. a ZigBee chip that regularly sends out messages regarding the occupancy of the room and the amount of light in the room including instantaneous messages coincident with the occupancy sensor detecting the presence of a person in the room. As mentioned above these messages may be sent wirelessly e.g. using the mesh network from node to node i.e. smart device to smart device within the smart home network as well as over the Internet to the smart home provider server system .

Other examples of low power nodes include battery operated versions of the smart hazard detectors . These smart hazard detectors are often located in an area without access to constant and reliable power and may include any number and type of sensors such as smoke fire heat sensors e.g. thermal radiation sensors carbon monoxide dioxide sensors occupancy motion sensors ambient light sensors ambient temperature sensors humidity sensors and the like. Furthermore smart hazard detectors may send messages that correspond to each of the respective sensors to the other devices and or the smart home provider server system such as by using the mesh network as described above.

Examples of spokesman nodes include smart doorbells smart thermostats smart wall switches and smart wall plugs . These devices are often located near and connected to a reliable power source and therefore may include more power consuming components such as one or more communication chips capable of bidirectional communication in a variety of protocols.

In some implementations the smart home environment includes service robots that are configured to carry out in an autonomous manner any of a variety of household tasks.

As explained above with reference to in some implementations the smart home environment of includes a hub device that is communicatively coupled to the network s directly or via the network interface . The hub device is further communicatively coupled to one or more of the smart devices using a radio communication network that is available at least in the smart home environment . Communication protocols used by the radio communication network include but are not limited to ZigBee Z Wave Insteon EuOcean Thread OSIAN Bluetooth Low Energy and the like. In some implementations the hub device not only converts the data received from each smart device to meet the data format requirements of the network interface or the network s but also converts information received from the network interface or the network s to meet the data format requirements of the respective communication protocol associated with a targeted smart device. In some implementations in addition to data format conversion the hub device further processes the data received from the smart devices or information received from the network interface or the network s preliminary. For example the hub device can integrate inputs from multiple sensors connected devices including sensors devices of the same and or different types perform higher level processing on those inputs e.g. to assess the overall environment and coordinate operation among the different sensors devices and or provide instructions to the different devices based on the collection of inputs and programmed processing. It is also noted that in some implementations the network interface and the hub device are integrated to one network device. Functionality described herein is representative of particular implementations of smart devices control application s running on representative electronic device s such as a smart phone hub device s and server s coupled to hub device s via the Internet or other Wide Area Network. All or a portion of this functionality and associated operations can be performed by any elements of the described system for example all or a portion of the functionality described herein as being performed by an implementation of the hub device can be performed in different system implementations in whole or in part on the server one or more connected smart devices and or the control application or different combinations thereof.

In some implementations the devices and services platform communicates with and collects data from the smart devices of the smart home environment . In addition in some implementations the devices and services platform communicates with and collects data from a plurality of smart home environments across the world. For example the smart home provider server system collects home data from the devices of one or more smart home environments where the devices may routinely transmit home data or may transmit home data in specific instances e.g. when a device queries the home data . Example collected home data includes without limitation power consumption data blackbody radiation data occupancy data HVAC settings and usage data carbon monoxide levels data carbon dioxide levels data volatile organic compounds levels data sleeping schedule data cooking schedule data inside and outside temperature humidity data television viewership data inside and outside noise level data pressure data video data etc.

In some implementations the smart home provider server system provides one or more services to smart homes and or third parties. Example services include without limitation software updates customer support sensor data collection logging remote access remote or distributed control and or use suggestions e.g. based on collected home data to improve performance reduce utility cost increase safety etc. In some implementations data associated with the services is stored at the smart home provider server system and the smart home provider server system retrieves and transmits the data at appropriate times e.g. at regular intervals upon receiving a request from a user etc. .

In some implementations the extensible devices and services platform includes a processing engine which may be concentrated at a single server or distributed among several different computing entities without limitation. In some implementations the processing engine includes engines configured to receive data from the devices of smart home environments e.g. via the Internet and or a network interface to index the data to analyze the data and or to generate statistics based on the analysis or as part of the analysis. In some implementations the analyzed data is stored as derived home data .

Results of the analysis or statistics may thereafter be transmitted back to the device that provided home data used to derive the results to other devices to a server providing a web page to a user of the device or to other non smart device entities. In some implementations usage statistics e.g. relative to use of other devices usage patterns and or statistics summarizing sensor readings are generated by the processing engine and transmitted. The results or statistics may be provided via the Internet . In this manner the processing engine may be configured and programmed to derive a variety of useful information from the home data . A single server may include one or more processing engines.

The derived home data may be used at different granularities for a variety of useful purposes ranging from explicit programmed control of the devices on a per home per neighborhood or per region basis for example demand response programs for electrical utilities to the generation of inferential abstractions that may assist on a per home basis for example an inference may be drawn that the homeowner has left for vacation and so security detection equipment may be put on heightened sensitivity to the generation of statistics and associated inferential abstractions that may be used for government or charitable purposes. For example processing engine may generate statistics about device usage across a population of devices and send the statistics to device users service providers or other entities e.g. entities that have requested the statistics and or entities that have provided monetary compensation for the statistics .

In some implementations to encourage innovation and research and to increase products and services available to users the devices and services platform exposes a range of application programming interfaces APIs to third parties such as charities governmental entities e.g. the Food and Drug Administration or the Environmental Protection Agency academic institutions e.g. university researchers businesses e.g. providing device warranties or service to related equipment targeting advertisements based on home data utility companies and other third parties. The APIs are coupled to and permit third party systems to communicate with the smart home provider server system including the services the processing engine the home data and the derived home data . In some implementations the APIs allow applications executed by the third parties to initiate specific data processing tasks that are executed by the smart home provider server system as well as to receive dynamic updates to the home data and the derived home data .

For example third parties may develop programs and or applications e.g. web applications or mobile applications that integrate with the smart home provider server system to provide services and information to users. Such programs and applications may be for example designed to help users reduce energy consumption to preemptively service faulty equipment to prepare for high service demands to track past service performance etc. and or to perform other beneficial functions or tasks.

In some implementations processing engine includes a challenges rules compliance rewards paradigm that informs a user of challenges competitions rules compliance regulations and or rewards and or that uses operation data to determine whether a challenge has been met a rule or regulation has been complied with and or a reward has been earned. The challenges rules and or regulations may relate to efforts to conserve energy to live safely e.g. reducing the occurrence of heat source alerts e.g. reducing exposure to toxins or carcinogens to conserve money and or equipment life to improve health etc. For example one challenge may involve participants turning down their thermostat by one degree for one week. Those participants that successfully complete the challenge are rewarded such as with coupons virtual currency status etc. Regarding compliance an example involves a rental property owner making a rule that no renters are permitted to access certain owner s rooms. The devices in the room having occupancy sensors may send updates to the owner when the room is accessed.

In some implementations processing engine integrates or otherwise uses extrinsic information from extrinsic sources to improve the functioning of one or more processing paradigms. Extrinsic information may be used to interpret data received from a device to determine a characteristic of the environment near the device e.g. outside a structure that the device is enclosed in to determine services or products available to the user to identify a social network or social network information to determine contact information of entities e.g. public service entities such as an emergency response team the police or a hospital near the device to identify statistical or environmental conditions trends or other information associated with a home or neighborhood and so forth.

In some implementations the smart home provider server system or a component thereof serves as the server system . In some implementations the server system is a dedicated video processing server that provides video processing services to video sources and client devices independent of other services provided by the server system .

In some implementations each of the video sources includes one or more video cameras that capture video and send the captured video to the server system substantially in real time. In some implementations each of the video sources optionally includes a controller device not shown that serves as an intermediary between the one or more cameras and the server system . The controller device receives the video data from the one or more cameras optionally performs some preliminary processing on the video data and sends the video data to the server system on behalf of the one or more cameras substantially in real time. In some implementations each camera has its own on board processing capabilities to perform some preliminary processing on the captured video data before sending the processed video data along with metadata obtained through the preliminary processing to the controller device and or the server system .

As shown in in accordance with some implementations each of the client devices includes a client side module . The client side module communicates with a server side module executed on the server system through the one or more networks . The client side module provides client side functionalities for the event monitoring and review processing and communications with the server side module . The server side module provides server side functionalities for event monitoring and review processing for any number of client side modules each residing on a respective client device . The server side module also provides server side functionalities for video processing and camera control for any number of the video sources including any number of control devices and the cameras .

In some implementations the server side module includes one or more processors a video storage database device and account databases an I O interface to one or more client devices and an I O interface to one or more video sources . The I O interface to one or more clients facilitates the client facing input and output processing for the server side module . The databases store a plurality of profiles for reviewer accounts registered with the video processing server where a respective user profile includes account credentials for a respective reviewer account and one or more video sources linked to the respective reviewer account. The I O interface to one or more video sources facilitates communications with one or more video sources e.g. groups of one or more cameras and associated controller devices . The video storage database stores raw video data received from the video sources as well as various types of metadata such as motion events event categories event category models event filters and event masks for use in data processing for event monitoring and review for each reviewer account.

Examples of a representative client device include but are not limited to a handheld computer a wearable computing device a personal digital assistant PDA a tablet computer a laptop computer a desktop computer a cellular telephone a smart phone an enhanced general packet radio service EGPRS mobile phone a media player a navigation device a game console a television a remote control a point of sale POS terminal vehicle mounted computer an ebook reader or a combination of any two or more of these data processing devices or other data processing devices.

Examples of the one or more networks include local area networks LAN and wide area networks WAN such as the Internet. The one or more networks are optionally implemented using any known network protocol including various wired or wireless protocols such as Ethernet Universal Serial Bus USB FIREWIRE Long Term Evolution LTE Global System for Mobile Communications GSM Enhanced Data GSM Environment EDGE code division multiple access CDMA time division multiple access TDMA Bluetooth Wi Fi voice over Internet Protocol VoIP Wi MAX or any other suitable communication protocol.

In some implementations the server system is implemented on one or more standalone data processing apparatuses or a distributed network of computers. In some implementations the server system also employs various virtual devices and or services of third party service providers e.g. third party cloud service providers to provide the underlying computing resources and or infrastructure resources of the server system . In some implementations the server system includes but is not limited to a handheld computer a tablet computer a laptop computer a desktop computer or a combination of any two or more of these data processing devices or other data processing devices.

The server client environment shown in includes both a client side portion e.g. the client side module and a server side portion e.g. the server side module . The division of functionalities between the client and server portions of operating environment can vary in different implementations. Similarly the division of functionalities between the video source and the server system can vary in different implementations. For example in some implementations client side module is a thin client that provides only user facing input and output processing functions and delegates all other data processing functionalities to a backend server e.g. the server system . Similarly in some implementations a respective one of the video sources is a simple video capturing device that continuously captures and streams video data to the server system without no or limited local preliminary processing on the video data. Although many aspects of the present technology are described from the perspective of the server system the corresponding actions performed by the client device and or the video sources would be apparent to ones skilled in the art without any creative efforts. Similarly some aspects of the present technology may be described from the perspective of the client device or the video source and the corresponding actions performed by the video server would be apparent to ones skilled in the art without any creative efforts. Furthermore some aspects of the present technology may be performed by the server system the client device and the video sources cooperatively.

It should be understood that operating environment that involves the server system the video sources and the video cameras is merely an example. Many aspects of operating environment are generally applicable in other operating environments in which a server system provides data processing for monitoring and facilitating review of data captured by other types of electronic devices e.g. smart thermostats smart hazard detectors smart doorbells smart wall plugs appliances and the like .

The electronic devices the client devices and the server system communicate with each other using the one or more communication networks . In an example smart home environment two or more devices e.g. the network interface device the hub device and the client devices are located in close proximity to each other such that they could be communicatively coupled in the same sub network A via wired connections a WLAN or a Bluetooth Personal Area Network PAN . The Bluetooth PAN is optionally established based on classical Bluetooth technology or Bluetooth Low Energy BLE technology. This smart home environment further includes one or more other radio communication networks B through which at least some of the electronic devices of the video sources exchange data with the hub device . Alternatively in some situations some of the electronic devices of the video sources communicate with the network interface device directly via the same sub network A that couples devices and . In some implementations e.g. in the network C both the client device and the electronic devices of the video sources communicate directly via the network s without passing the network interface device or the hub device .

In some implementations during normal operation the network interface device and the hub device communicate with each other to form a network gateway through which data are exchanged with the electronic device of the video sources . As explained above the network interface device and the hub device optionally communicate with each other via a sub network A.

The hub device optionally includes one or more built in sensors not shown including for example one or more thermal radiation sensors ambient temperature sensors humidity sensors IR sensors occupancy sensors e.g. using RFID sensors ambient light sensors motion detectors accelerometers and or gyroscopes.

The radios enable one or more radio communication networks in the smart home environments and allow a hub device to communicate with smart devices. In some implementations the radios are capable of data communications using any of a variety of custom or standard wireless protocols e.g. IEEE 802.15.4 Wi Fi ZigBee 6LoWPAN Thread Z Wave Bluetooth Smart ISA100.11a WirelessHART MiWi etc. custom or standard wired protocols e.g. Ethernet HomePlug etc. and or any other suitable communication protocol including communication protocols not yet developed as of the filing date of this document.

Communication interfaces include for example hardware capable of data communications using any of a variety of custom or standard wireless protocols e.g. IEEE 802.15.4 Wi Fi ZigBee 6LoWPAN Thread Z Wave Bluetooth Smart ISA100.11a WirelessHART MiWi etc. and or any of a variety of custom or standard wired protocols e.g. Ethernet HomePlug etc. or any other suitable communication protocol including communication protocols not yet developed as of the filing date of this document.

Memory includes high speed random access memory such as DRAM SRAM DDR SRAM or other random access solid state memory devices and optionally includes non volatile memory such as one or more magnetic disk storage devices one or more optical disk storage devices one or more flash memory devices or one or more other non volatile solid state storage devices. Memory or alternatively the non volatile memory within memory includes a non transitory computer readable storage medium. In some implementations memory or the non transitory computer readable storage medium of memory stores the following programs modules and data structures or a subset or superset thereof 

Each of the above identified elements e.g. modules stored in memory of hub device may be stored in one or more of the previously mentioned memory devices e.g. the memory of any of the smart devices in smart home environment and corresponds to a set of instructions for performing a function described above. The above identified modules or programs i.e. sets of instructions need not be implemented as separate software programs procedures or modules and thus various subsets of these modules may be combined or otherwise rearranged in various implementations. In some implementations memory optionally stores a subset of the modules and data structures identified above. Furthermore memory optionally stores additional modules and data structures not described above.

Each of the above identified elements may be stored in one or more of the previously mentioned memory devices and corresponds to a set of instructions for performing a function described above. The above identified modules or programs i.e. sets of instructions need not be implemented as separate software programs procedures or modules and thus various subsets of these modules may be combined or otherwise rearranged in various implementations. In some implementations memory optionally stores a subset of the modules and data structures identified above. Furthermore memory optionally stores additional modules and data structures not described above.

Motion start data includes date and time information such as a timestamp and optionally includes additional information such as information regarding the amount of motion present and or the motion start location. Similarly motion end data includes date and time information such as a timestamp and optionally includes additional information such as information regarding the amount of motion present and or the motion end location.

Event segments includes information regarding segmentation of motion event i. In some instances event segments are stored separately from the raw video data . In some instances the event segments are stored at a lower display resolution than the raw video data. For example the event segments are optionally stored at 480p or 780p and the raw video data is stored at 1080i or 1080p. Storing the event segments at a lower display resolution enables the system to devote less time and resources to retrieving and processing the event segments. In some instances the event segments are not stored separately and the segmentation information includes references to the raw video data as well as date and time information for reproducing the event segments.

Event features data includes information regarding event features such as event categorizations classifications object masks motion masks identified recognized tracked motion objects also sometimes called blobs information regarding features of the motion objects e.g. object color object dimensions velocity size changes etc. information regarding activity in zones of interest and the like. Scene features data includes information regarding the scene in which the event took place such as depth map information information regarding the location of windows televisions fans the ceiling floor etc. information regarding whether the scene is indoors or outdoors information regarding zones of interest and the like.

Associated user information includes information regarding users associated with the event such as users identified in the event users receiving notification of the event and the like. In some instances the associated user information includes a link pointer or reference to a user profile for to the user. Associated devices information includes information regarding the device or devices involved in the event e.g. a camera that recorded the event . In some instances the associated devices information includes a link pointer or reference to a device profile for the device.

The user profile corresponds to a user i associated with the smart home network e.g. smart home network such as a user of a hub device a user identified by a hub device a user who receives notifications from a hub device or from the server system and the like. In some instances the user profile includes user preferences user settings associated devices information and associated events information . In some instances the user profile includes only a subset of the above data. In some instances the user profile includes additional user information not shown such as information regarding other users associated with the user i.

The user preferences include explicit user preferences input by the user as well as implicit and or inferred user preferences determined by the system e.g. server system and or client device . In some instances the inferred user preferences are based on historical user activity and or historical activity of other users. The user settings include information regarding settings set by the user i such as notification settings device settings and the like. In some instances the user settings include device settings for devices associated with the user i.

Associated devices information includes information regarding devices associated with the user i such as devices within the user s smart home environment and or client devices . In some instances associated devices information includes a link pointer or reference to a corresponding device profile . Associated events information includes information regarding events associated with user i such as events in which user i was identified events for which user i was notified events corresponding to user i s smart home environment and the like. In some instances the associated events information includes a link pointer or reference to a corresponding event record .

The device profile corresponds to a device i associated with a smart home network e.g. smart home network such a hub device a camera a client device and the like. In some instances the device profile includes device settings associated devices information associated user information associated event information and environmental data . In some instances the device profile includes only a subset of the above data. In some instances the device profile includes additional device information not shown such as information regarding whether the device is currently active.

Device settings include information regarding the current settings of device i such as positioning information mode of operation information and the like. In some instances the device settings are user specific and are set by respective users of the device i. Associated devices information includes information regarding other devices associated with device i such as other devices linked to device i and or other devices in the same smart home network as device i. In some instances associated devices information includes a link pointer or reference to a respective device profile corresponding to the associated device.

Associated user information includes information regarding users associated with the device such as users receiving notifications from the device users registered with the device users associated with the smart home network of the device and the like. In some instances associated user information includes a link pointer or reference to a user profile corresponding to the associated user.

Associated event information includes information regarding events associated with the device i such as historical events involving the device i. In some instances associated event information includes a link pointer or reference to an event record corresponding to the associated event.

Environmental data includes information regarding the environment of device i such as information regarding whether the device is outdoors or indoors information regarding the light level of the environment information regarding the amount of activity expected in the environment e.g. information regarding whether the device is in a private residence versus a busy commercial property information regarding environmental objects e.g. depth mapping information for a camera and the like.

Memory includes high speed random access memory such as DRAM SRAM DDR SRAM or other random access solid state memory devices and optionally includes non volatile memory such as one or more magnetic disk storage devices one or more optical disk storage devices one or more flash memory devices or one or more other non volatile solid state storage devices. Memory optionally includes one or more storage devices remotely located from one or more processing units . Memory or alternatively the non volatile memory within memory includes a non transitory computer readable storage medium. In some implementations memory or the non transitory computer readable storage medium of memory stores the following programs modules and data structures or a subset or superset thereof 

Each of the above identified elements may be stored in one or more of the previously mentioned memory devices and corresponds to a set of instructions for performing a function described above. The above identified modules or programs i.e. sets of instructions need not be implemented as separate software programs procedures modules or data structures and thus various subsets of these modules may be combined or otherwise rearranged in various implementations. In some implementations memory optionally stores a subset of the modules and data structures identified above. Furthermore memory optionally stores additional modules and data structures not described above.

The built in sensors include for example one or more thermal radiation sensors ambient temperature sensors humidity sensors IR sensors occupancy sensors e.g. using RFID sensors ambient light sensors motion detectors accelerometers and or gyroscopes.

The radios enable one or more radio communication networks in the smart home environments and allow a smart device to communicate with other devices. In some implementations the radios are capable of data communications using any of a variety of custom or standard wireless protocols e.g. IEEE 802.15.4 Wi Fi ZigBee 6LoWPAN Thread Z Wave Bluetooth Smart ISA100.11a WirelessHART MiWi etc. custom or standard wired protocols e.g. Ethernet HomePlug etc. and or any other suitable communication protocol including communication protocols not yet developed as of the filing date of this document.

Communication interfaces include for example hardware capable of data communications using any of a variety of custom or standard wireless protocols e.g. IEEE 802.15.4 Wi Fi ZigBee 6LoWPAN Thread Z Wave Bluetooth Smart ISA100.11a WirelessHART MiWi etc. and or any of a variety of custom or standard wired protocols e.g. Ethernet HomePlug etc. or any other suitable communication protocol including communication protocols not yet developed as of the filing date of this document.

Memory includes high speed random access memory such as DRAM SRAM DDR RAM or other random access solid state memory devices and optionally includes non volatile memory such as one or more magnetic disk storage devices one or more optical disk storage devices one or more flash memory devices or one or more other non volatile solid state storage devices. Memory or alternatively the non volatile memory within memory includes a non transitory computer readable storage medium. In some implementations memory or the non transitory computer readable storage medium of memory stores the following programs modules and data structures or a subset or superset thereof 

Each of the above identified elements may be stored in one or more of the previously mentioned memory devices and corresponds to a set of instructions for performing a function described above. The above identified modules or programs i.e. sets of instructions need not be implemented as separate software programs procedures or modules and thus various subsets of these modules may be combined or otherwise rearranged in various implementations. In some implementations memory optionally stores a subset of the modules and data structures identified above. Furthermore memory optionally stores additional modules and data structures not described above.

Each of the above identified elements may be stored in one or more of the previously mentioned memory devices and corresponds to a set of instructions for performing a function described above. The above identified modules or programs i.e. sets of instructions need not be implemented as separate software programs procedures or modules and thus various subsets of these modules may be combined or otherwise rearranged in various implementations. In some implementations memory optionally stores a subset of the modules and data structures identified above. Furthermore memory optionally stores additional modules and data structures not described above.

Furthermore in some implementations the functions of any of the devices and systems described herein e.g. hub device server system client device smart device smart home provider server system are interchangeable with one another and may be performed by any of the other devices or systems where the corresponding sub modules of these functions may additionally and or alternatively be located within and executed by any of the devices and systems. As one example a hub device may determine when a motion event candidate has started and generate corresponding motion start information or the server system may make the determination and generate the information instead. The devices and systems shown in and described with respect to are merely illustrative and different configurations of the modules for implementing the functions described herein are possible in various implementations.

In some implementations the server system includes functional modules for an event processor an event categorizer and a user facing frontend as discussed above with respect to . The event processor obtains the motion event candidates e.g. by processing the video stream or by receiving the motion start information from the video source . The event categorizer categorizes the motion event candidates into different event categories. The user facing frontend generates event alerts and facilitates review of the motion events by a reviewer through a review interface on a client device . The client facing frontend also receives user edits on the event categories user preferences for alerts and event filters and zone definitions for zones of interest. The event categorizer optionally revises event categorization models and results based on the user edits received by the user facing frontend. The server system also includes a video and source data database event categorization modules database and event data and event masks database . In some implementations each of these databases is part of the server database e.g. part of data storage database .

The server system receives the video stream from the video source and optionally receives motion event candidate information such as motion start information and video source information such as device settings for camera e.g. a device profile for camera . In some implementations the event processor sub module communicates with the video source . The server system sends alerts for motion events and motion event timeline information to the client device . The server system optionally receives user information from the client device such as edits on event categories and zone definitions .

The data processing pipeline processes a live video feed received from a video source e.g. including a camera and an optional controller device in real time to identify and categorize motion events in the live video feed and sends real time event alerts and a refreshed event timeline to a client device associated with a reviewer account bound to the video source . The data processing pipeline also processes stored video feeds from a video source to reevaluate and or re categorize motion events as necessary such as when new information is obtained regarding the motion event and or when new information is obtained regarding motion event categories e.g. a new activity zone is obtained from the user .

After video data is captured at the video source the video data is processed to determine if any potential motion event candidates are present in the video stream. A potential motion event candidate detected in the video data is also sometimes referred to as a cuepoint. Thus the initial detection of a motion event candidate is referred to as motion start detection and or cuepoint detection. Motion start detection triggers performance of a more thorough event identification process on a video segment also sometimes called a video slice or slice corresponding to the motion event candidate. In some implementations the video data is initially processed at the video source . Thus in some implementations the video source sends motion event candidate information such as motion start information to the server system . In some implementations the video data is processed at the server system for motion start detection. In some implementations the video stream is stored on server system e.g. in video and source data database . In some implementations the video stream is stored on a server distinct from server system . In some implementations after a cuepoint is detected the relevant portion of the video stream is retrieved from storage e.g. from video and source data database .

In some implementations the more thorough event identification process includes segmenting the video stream into multiple segments then categorizing the motion event candidate within each segment . In some implementations categorizing the motion event candidate includes an aggregation of background factors motion entity detection identification motion vector generation for each motion entity motion entity features and scene features to generate motion features for the motion event candidate. In some implementations the more thorough event identification process further includes categorizing each segment generating or updating a motion event log based on categorization of a segment generating an alert for the motion event based on categorization of a segment categorizing the complete motion event updating the motion event log based on the complete motion event and generating an alert for the motion event based on the complete motion event. In some implementations a categorization is based on a determination that the motion event candidate is within a particular zone of interest. In some implementations a categorization is based on a determination that the motion event candidate involves one or more particular zones of interest.

The event analysis and categorization process may be performed by the video source and the server system cooperatively and the division of the tasks may vary in different implementations for different equipment capability configurations and or for different network and server load situations. After the server system categorizes the motion event candidate the result of the event detection and categorization may be sent to a reviewer associated with the video source .

In some implementations the server system also determines an event mask for each motion event candidate and caches the event mask for later use in event retrieval based on selected zone s of interest.

In some implementations the server system stores raw or compressed video data e.g. in a video and source data database event categorization models e.g. in an event categorization model database and event masks and other event metadata e.g. in an event data and event mask database for each of the video sources . In some implementations the video data is stored at one or more display resolutions such as 480p 780p 1080i 1080p and the like.

The above is an overview of the system architecture and the data processing pipeline for event processing in video monitoring. More details of the processing pipeline and processing techniques are provided below.

As shown in the system architecture includes the video source . The video source transmits a live video feed to the remote server system via one or more networks e.g. the network s . In some implementations the transmission of the video data is continuous as the video data is captured by the camera . In some implementations the transmission of video data is irrespective of the content of the video data and the video data is uploaded from the video source to the server system for storage irrespective of whether any motion event has been captured in the video data. In some implementations the video data may be stored at a local storage device of the video source by default and only video portions corresponding to motion event candidates detected in the video stream are uploaded to the server system e.g. in real time .

In some implementations the video source dynamically determines at what display resolution the video stream is to be uploaded to the server system . In some implementations the video source dynamically determines which parts of the video stream are to be uploaded to the server system . For example in some implementations depending on the current server load and network conditions the video source optionally prioritizes the uploading of video portions corresponding to newly detected motion event candidates ahead of other portions of the video stream that do not contain any motion event candidates or the video source uploads the video portions corresponding to newly detected motion event candidates at higher display resolutions than the other portions of the video stream. This upload prioritization helps to ensure that important motion events are detected and alerted to the reviewer in real time even when the network conditions and server load are less than optimal. In some implementations the video source implements two parallel upload connections one for uploading the continuous video stream captured by the camera and the other for uploading video portions corresponding to detected motion event candidates. At any given time the video source determines whether the uploading of the continuous video stream needs to be suspended temporarily to ensure that sufficient bandwidth is given to the uploading of the video segments corresponding to newly detected motion event candidates.

In some implementations the video stream uploaded for cloud storage is at a lower quality e.g. lower resolution lower frame rate higher compression etc. than the video segments uploaded for motion event processing.

As shown in the video source includes a camera and an optional controller device. In some implementations the camera includes sufficient on board processing power to perform all necessary local video processing tasks e.g. cuepoint detection for motion event candidates video uploading prioritization network connection management etc. and the camera communicates with the server system directly without any controller device acting as an intermediary. In some implementations the camera captures the video data and sends the video data to the controller device for the necessary local video processing tasks. The controller device optionally performs the local processing tasks for multiple cameras. For example there may be multiple cameras in one smart home environment e.g. the smart home environment and a single controller device receives the video data from each camera and processes the video data to detect motion event candidates in the video stream from each camera. The controller device is responsible for allocating sufficient outgoing network bandwidth to transmitting video segments containing motion event candidates from each camera to the server before using the remaining bandwidth to transmit the video stream from each camera to the server system . In some implementations the continuous video stream is sent and stored at one server facility while the video segments containing motion event candidates are send to and processed at a different server facility.

As shown in after video data is captured by the camera the video data is optionally processed locally at the video source in real time to determine whether there are any cuepoints in the video data that warrant performance of a more thorough event identification process. Thus in some implementations the video source sends motion event candidate information such as cuepoint detections to the server system . In some implementations the video source sends additional metadata such as the amount of motion between frames to the server system .

Cuepoint detection is a first layer motion event identification which is intended to be slightly over inclusive such that real motion events are a subset of all identified cuepoints. In some implementations cuepoint detection is based on the number of motion pixels in each frame of the video stream. In some implementations any method of identifying motion pixels in a frame may be used. For example a Gaussian mixture model is optionally used to determine the number of motion pixels in each frame of the video stream. In some implementations when the total number of motion pixels in a current image frame exceeds a predetermined threshold a cuepoint is detected. In some implementations a running sum of total motion pixel count is calculated for a predetermined number of consecutive frames as each new frame is processed and a cuepoint is detected when the running sum exceeds a predetermined threshold. In some implementations as shown in a a profile of total motion pixel count over time is obtained. In some implementations a cuepoint is detected when the profile of total motion pixel count for a current frame sequence of a predetermined length e.g. 30 seconds meets a predetermined trigger criterion e.g. total pixel count under the profile a threshold motion pixel count . In some implementations the cuepoint detection calculations are based on where in the scene the motion occurs. For example a lower threshold is required for motion occurring in or near a preset zone of interest. In some implementations a higher threshold is required for motion occurring in or near a preset zone that has been denoted as likely containing less significant motion events e.g. a zone of interest where notifications are disabled . In some implementations cuepoints are suppressed for motion occurring within a zone of interest where notifications are disabled.

In some implementations cuepoint detection is based on one or more additional inputs such as audio inputs to an associated microphone. For example a cuepoint may be based at least in part on the sound of breaking glass and or a human voice.

In some implementations the beginning of a cuepoint is the time when the total motion pixel count meets a predetermined threshold e.g. 50 motion pixels . In some implementations the start of the motion event candidate corresponding to a cuepoint is the beginning of the cuepoint e.g. t in a . In some implementations the start of the motion event candidate is a predetermined lead time e.g. 5 seconds before the beginning of the cuepoint. In some implementations the start of a motion event candidate is used to process a video portion corresponding to the motion event candidate for a more thorough event identification process.

In some implementations the thresholds for detecting cuepoints are adjusted over time based on performance feedback. For example if too many false positives are detected the threshold for motion pixel count is optionally increased. If too many motion events are missed the threshold for motion pixel count is optionally decreased. In some implementations the thresholds for detecting cuepoints are based on where in the scene the motion is detected. In some implementations the thresholds are based on whether the motion is detected within a particular zone of interest. In some implementations the threshold are set and or adjusted by users e.g. a user of client device . For example a threshold is adjusted by adjusting a corresponding motion sensitivity slider within a user interface.

In some implementations before the profile of the total motion pixel count for a frame sequence is evaluated for cuepoint detection the profile is smoothed to remove short dips in total motion pixel count as shown in b . In general once motion has started momentary stops or slowing downs may occur during the motion and such momentary stops or slowing downs are reflected as short dips in the profile of total motion pixel count. Removing these short dips from the profile helps to provide a more accurate measure of the extent of motion for cuepoint detection. Since cuepoint detection is intended to be slightly over inclusive by smoothing out the motion pixel profile cuepoints for motion events that contain momentary stops or slowing downs of the moving objects would less likely be missed by the cuepoint detection.

In some implementations a change in camera state e.g. IR mode AE mode DTPZ settings etc. may change pixel values in the image frames drastically even though no motion has occurred in the scene captured in the video stream. In some implementations each camera state change is noted in the cuepoint detection process as shown in c and a detected cuepoint is optionally suppressed if its occurrence overlaps with one of the predetermined camera state changes. In some implementations the total motion pixel count in each frame is weighed differently if accompanied with a camera state change. For example the total motion pixel count is optionally adjusted by a fraction e.g. 10 if it is accompanied by a camera state change such as an IR mode switch. In some implementations the motion pixel profile is reset after each camera state change.

Sometimes a fast initial increase in total motion pixel count may indicate a global scene change or a lighting change e.g. when the curtain is drawn or when the camera is pointed in a different direction or moved to a different location by a user. In some implementations as shown in d when the initial increase in total motion pixel count in the profile of total motion pixel count exceeds a predetermined rate a detected cuepoint is optionally suppressed. In some implementations the suppressed cuepoint undergoes an edge case recovery process to determine whether the cuepoint is in fact not due to lighting change or camera movement but rather a valid motion event candidate that needs to be recovered and reported for subsequent event processing. In some implementations the profile of motion pixel count is reset when such fast initial increase in total motion pixel count is detected and a corresponding cuepoint is suppressed.

In some implementations a cuepoint is evaluated based on an importance score associated with the cuepoint. The importance score is generated based on factors such as whether one or more zones of interest are involved the amount of motion detected the type of motion detected e.g. velocity angle etc. and the like. In some implementations if the cuepoint is associated with motion occurring within a zone of interest where notifications are disabled the importance score is decreased. In some implementations if the cuepoint is associated with motion occurring in a zone of interest where notifications are enabled the importance score is increased.

In some implementations the cuepoint detection generally occurs at the video source and immediately after a cuepoint is detected in the live video stream the video source sends an event alert to the server system to trigger the subsequent event processing. In some implementations the video source includes a video camera with very limited on board processing power and no controller device and the cuepoint detection described herein is performed by the server system on the continuous video stream transmitted from the camera to the server system .

In some implementations the video source sends additional video source information to the server system . This additional video source information may include information regarding a camera state e.g. IR mode AE mode DTPZ settings etc. and or information regarding the environment in which the video source is located e.g. indoors outdoors night time day time etc. . In some implementations the video source information is used by the server system to perform cuepoint detection and or to categorize motion event candidates within the video stream .

In some implementations after the cuepoint detection the video portion after the detected cuepoint is divided into multiple segments as shown in . In some implementations the segmentation continues until motion end information sometimes also called an end of motion signal is obtained. In some implementations the segmentation occurs within the server system e.g. by the event processor module .

In some implementations each of the multiple segments is of the same or similar duration e.g. each segment has a 10 12 second duration . In some implementations the first segment has a shorter duration than the subsequent segments. Keeping the first segment short allows for real time initial categorization and alerts based on processing the first segment. The initial categorization may then be revised based on processing of subsequent segments. In some implementations a new segment is generated if the motion entity enters a new zone of interest.

In some implementations the motion end information is based on a change in the motion detected within the video stream. The motion end information is optionally generated when the amount of motion detected within the video stream falls below a threshold amount e.g. the dotted line shown in the graphs of or declines steeply. For example motion end information is optionally generated to correspond to time t in the graphs shown in . In some implementations the motion end information is generated by the video source while in other implementations the motion end information is generated by the server system e.g. the event processor module . In some implementations the motion end information is generated based on a particular amount of time passing since the motion start information was generated e.g. a time out event . For example motion end information may be generated for a particular motion event candidate if either the amount of motion meets predetermined criterion e.g. 1 5 or 15 of the pixels in the scene or the duration of the motion event candidate meets predetermined criterion e.g. 30 60 or 120 seconds whichever occurs first.

As shown in in some implementations the video stream is captured and the motion start information corresponding to a motion event candidate is obtained . After the motion start information is obtained the video stream is segmented as discussed above. Next each segment is processed and categorized . As will be discussed in greater detail below this processing includes obtaining information about the background in the scene e.g. background factors identifying motion entities and obtaining motion vectors . In some implementations the processing also includes identifying additional features of each motion entity motion entity features such as the amount of a particular color within the motion entity and or the height to width ratio of the motion entity . In some implementations the motion features include information regarding what if any zones of interest were involved with the motion entity. In some implementations the processing also includes identifying additional features of the scene such as the ratio of particular colors within the scene audio information corresponding to the scene and or the total amount of motion within the scene . In some implementations the scene features include information regarding zones of interest within the scene. Next the background factors motion entities motion vectors and any additional motion entity and or scene features are aggregated to generate resulting motion features . The resulting motion features are categorized and a category is assigned to the motion event candidate . In some implementations a log entry is generated for the motion event candidate and the assigned category is stored within. In some implementations an alert is generated and sent to the client device . Once the motion end information is obtained the final segment is processed and categorized . In some implementations after all segments are categorized multi segment features are processed . These multi segment features optionally include features generated by comparing motion event categories event masks motion entity features and the like from the various segments comprising the event. For example motion event masks for individual segments are combined to form a single motion event mask across all segments. In some implementations after the multi segment features are processed an event category is assigned based on the multi segment features . In some implementations the event category is assigned based on the multi segment features and the categories assigned to the individual segments. In some implementations the event log corresponding to the motion event candidate is updated . In some implementations an alert is generated based on the event category .

In some implementations after a motion event candidate is detected in the video stream a video portion corresponding to the motion event candidate or a particular segment within the video portion is used to identify a motion track of a motion entity in the video segment. The identification of motion track is optionally performed locally at the video source or remotely at the server system . In some implementations motion track information is included in the motion event candidate information sent from the video source to the server system . In some implementations the identification of the motion track based on a video segment corresponding to a motion event candidate is performed at the server system by an event processor module. In some implementations the event processor module receives an alert for a cuepoint detected in the video stream and retrieves the video portion corresponding to the cuepoint from cloud storage e.g. the video data database or from the video source . In some implementations the video portion used to identify the motion track may be of higher quality than the video uploaded for cloud storage and the video portion is retrieved from the video source separately from the continuous video feed uploaded from the video source .

In some implementations after the event processor module obtains the video portion corresponding to a motion event candidate the event processor module obtains background factors and performs motion entity detection identification motion vector generation for each motion entity and feature identification. Once the event processor module completes these tasks the event categorizer module aggregates all of the information and generates a categorization for the motion event candidate. In some implementations false positive suppression is optionally performed to reject some motion event candidates before the motion event candidates are submitted for event categorization. In some implementations determining whether a motion event candidate is a false positive includes determining whether the motion event candidate occurred in a particular zone. In some implementations determining whether a motion event candidate is a false positive includes analyzing an importance score for the motion event candidate. The importance score for the motion event candidate is optionally the same as the importance score for the corresponding cuepoint or incorporates the importance score for the corresponding cuepoint. The importance score for a motion event candidate is optionally based on zones of interest involved with the motion event candidate background features motion vectors scene features entity features motion features motion tracks and the like.

In some implementations the video source has sufficient processing capabilities to perform and does perform the background estimation motion entity identification the motion vector generation and or the feature identification.

In some implementations the motion vector representing a motion event candidate is a simple two dimensional linear vector defined by a start coordinate and an end coordinate of a motion entity also sometimes called a motion object in a scene depicted in the video portion and the motion event categorization is based on the motion vector. In some implementations a motion vector for a motion event candidate is independently generated for each segment. In some implementations a single motion vector is used for all segments and the motion vector is revised as each segment is processed. The advantage of using the simple two dimensional linear motion vector for event categorization is that the event data is very compact and fast to compute and transmit over a network. When network bandwidth and or server load is constrained simplifying the representative motion vector and off loading the motion vector generation from the event processor module of the video server system to the video source can help to realize the real time event categorization and alert generation for many video sources in parallel.

In some implementations after motion tracks in a video segment corresponding to a motion event candidate are determined track lengths for the motion tracks are determined. In some implementations the track lengths are independently determined for each segment. In some implementations the track lengths are revised as each subsequent segment is processed. In some implementations short tracks with track lengths smaller than a predetermined threshold e.g. 8 frames are suppressed as they are likely due to trivial movements such as leaves shifting in the wind water shimmering in the pond etc. In some implementations pairs of short tracks that are roughly opposite in direction are suppressed as noisy tracks. In some implementations after the track suppression if there are no motion tracks remaining for the video segment the cuepoint is determined to be a false positive and no motion event candidate is sent to the event categorizer for event categorization. In some implementations after the track suppression if there are no motion tracks remaining the motion event candidate is categorized as a non event. If at least one motion track remains after the false positive suppression is performed a motion vector is generated for each remaining motion track. In other words multiple motion entities may be identified within a particular video segment. The false positive suppression occurring after the cuepoint detection and before the motion vector generation is the second layer false positive suppression which removes false positives based on the characteristics of the motion tracks.

In some implementations motion entity identification is performed by subtracting the estimated background from each frame of the video segment. A foreground motion mask is then obtained by masking all pixel locations that have no motion pixels. In some implementations the background factors obtained by the event processor module include a foreground motion mask. An example of a motion mask is shown in a . The example motion mask shows the motion pixels in one frame of the video segment in white and the rest of the pixels in black. Once motion entities are identified in each frame the same motion entity across multiple frames of the video segment are correlated through a matching algorithm e.g. a Hungarian matching algorithm and a motion track for the motion entity is determined based on the movement of the motion entity across the multiple frames of the video segment.

In some implementations the motion track is used to generate a two dimensional linear motion vector which only takes into account the beginning and end locations of the motion track e.g. as shown by the dotted arrow in b . In some implementations the beginning and end locations are determined on a per segment basis. In some implementations the beginning location is determined based on the first segment and the end location is determined based on the last segment. In some implementations the motion vector is a non linear motion vector that traces the entire motion track from the first frame to the last frame of the frame sequence in which the motion entity has moved.

In some implementations the motion masks corresponding to each motion entity detected in the video segment are aggregated across all frames of the video segment to create an event mask for the motion event involving the motion entity. In some implementations an event mask is created for each individual segment. In some implementations an event mask is created from a first segment and is updated as subsequent segments are processed. As shown in b in the event mask all pixel locations containing motion pixels in less than a threshold number of frames and or less than a threshold fraction of frames are masked and shown in black while all pixel locations containing motion pixels in at least the threshold number of frames and or at least a threshold fraction of frames are shown in white. The active portion of the event mask e.g. shown in white indicates all areas in the scene depicted in the video segment that have been accessed by the motion entity during its movement in the scene. In some implementations the event mask for each motion event is stored at the server system or a component thereof e.g. the event information database and used to selectively retrieve motion events that enter or touch a particular zone of interest within the scene depicted in the video stream of a camera. In some implementations when a new zone of interest is created the event masks for previous event candidates are retrieved and compared to the new zone of interest to generate and or re categorize events.

In some implementations a motion mask is created based on an aggregation of motion pixels from a short frame sequence in the video segment. The pixel count at each pixel location in the motion mask is the sum of the motion pixel count at that pixel location from all frames in the short frame sequence. All pixel locations in the motion mask with less than a threshold number of motion pixels e.g. motion pixel count 4 for 10 consecutive frames are masked. Thus the unmasked portions of the motion mask for each such short frame sequence indicates a dominant motion region for the short frame sequence. In some implementations a motion track is optionally created based on the path taken by the dominant motion regions identified from a series of consecutive short frame sequences.

In some implementations an event mask is optionally generated by aggregating all motion pixels from all frames of the video segment at each pixel location and masking all pixel locations that have less than a threshold number of motion pixels. The event mask generated this way is no longer a binary event mask but is a two dimensional histogram. The height of the histogram at each pixel location is the sum of the number of frames that contain a motion pixel at that pixel location. This type of non binary event mask is also referred to as a motion energy map and illustrates the regions of the video scene that are most active during a motion event. The characteristics of the motion energy maps for different types of motion events are optionally used to differentiate them from one another. Thus in some implementations the motion energy map of a motion event candidate is vectorized to generate the representative motion vector for use in event categorization. In some implementations the motion energy map of a motion event is generated and cached by the video server system and used for real time zone monitoring and or retroactive event identification for newly created zones of interest.

In some implementations a live event mask is generated based on the motion masks of frames that have been processed and is continuously updated until all frames or segments of the motion event have been processed. In some implementations the live event mask of a motion event in progress is used to determine if the motion event is an event of interest for a particular zone of interest.

In some implementations after the server system obtains the representative motion vector for a new motion event candidate e.g. either by generating the motion vector from the video segment corresponding to a newly detected cuepoint or by receiving the motion vector from the video source the server system proceeds to categorize the motion event candidate based at least in part on its representative motion vector.

In some implementations the categorization of motion events also sometimes referred to as activity recognition is performed by training a categorizer and or a categorization model based on a training data set containing motion vectors corresponding to various known event categories. For example known event categories may include a person running a person jumping a person walking a dog running a bird flying a car passing by a door opening a door closing leaves rustling etc. . The common characteristics of each known event category that distinguish the motion events of the event category from motion events of other event categories are extracted through the training Thus when a new motion vector corresponding to an unknown event category is received the event categorizer module examines the new motion vector in light of the common characteristics of each known event category e.g. based on a Euclidean distance between the new motion vector and a canonical vector representing each known event type and determines the most likely event category for the new motion vector from among the known event categories.

Although motion event categorization based on pre established motion event categories is an acceptable way to categorize motion events this categorization technique may only be suitable for use when the variety of motion events handled by the server system is relatively few in number and already known before any motion event is processed. In some instances the server system serves a large number of clients with cameras used in many different environmental settings resulting in motion events of many different types. In addition each reviewer may be interested in different types of motion events and may not know what types of events they would be interested in before certain real world events have happened e.g. some object has gone missing in a monitored location . Thus it is desirable to have an event categorization technique that can handle any number of event categories based on actual camera use and automatically adjust e.g. create and retire event categories through machine learning based on the actual video data that is received over time.

In some implementations the categorization of motion events is based at least in part on a density based clustering technique e.g. DBscan that forms clusters based on density distributions of motion events e.g. motion events as represented by their respective motion vectors in a vector event space. Regions with sufficiently high densities of motion vectors are promoted as recognized vector categories and all motion vectors within each promoted region are deemed to belong to a respective recognized vector category associated with that promoted region. In contrast regions that are not sufficiently dense are not promoted or recognized as vector categories. Instead such non promoted regions are collectively associated with a category for unrecognized vector and all motion vectors within such non promoted regions are optionally deemed to be unrecognized motion events at the present time.

In some implementations each time a new motion vector is to be categorized the event categorizer places the new motion vector into the vector event space according to its value. If the new motion vector is sufficiently close to or falls within an existing dense cluster the vector category associated with the dense cluster is assigned to the new motion vector. If the new motion vector is not sufficiently close to any existing cluster the new motion vector forms its own cluster of one member and is assigned to the category of unrecognized events. If the new motion vector is sufficiently close to or falls within an existing sparse cluster the cluster is updated with the addition of the new motion vector. If the updated cluster is now a dense cluster the updated cluster is promoted and all motion vectors including the new motion vector in the updated cluster are assigned to a new vector category created for the updated cluster. If the updated cluster is still not sufficiently dense no new category is created and the new motion vector is assigned to the category of unrecognized events. In some implementations clusters that have not been updated for at least a threshold expiration period are retired. The retirement of old static clusters helps to remove residual effects of motion events that are no longer valid for example due to relocation of the camera that resulted in a scene change.

For reference sequential DBscan allows growth of a cluster based on density reachability and density connectedness. A point q is directly density reachable from a point p if it is not farther away than a given distance i.e. is part of its neighborhood and if p is surrounded by sufficiently many points M such that one may consider p and q to be part of a cluster. q is called density reachable from p if there is a sequence p . . . pof points with p p and p p where each pis directly density reachable from p. Since the relation of density reachable is not symmetric another notion of density connectedness is introduced. Two points p and q are density connected if there is a point o such that both p and q are density reachable from o. Density connectedness is symmetric. A cluster is defined by two properties 1 all points within the cluster are mutually density connected and 2 if a point is density reachable from any point of the cluster it is part of the cluster as well. The clusters formed based on density connectedness and density reachability can have all shapes and sizes in other words motion event candidates from a video source e.g. as represented by motion vectors in a dataset can fall into non linearly separable clusters based on this density based clustering algorithm when they cannot be adequately clustered by K means or Gaussian Mixture EM clustering techniques. In some implementations the values of and M are adjusted by the server system for each video source and or video stream such that clustering quality can be improved for different camera usage settings.

In some implementations during the categorization process four parameters are stored and sequentially updated for each cluster. The four parameters include 1 cluster creation time 2 cluster weight 3 cluster center and 4 cluster radius. The creation time for a given cluster records the time when the given cluster was created. The cluster weight for a given cluster records a member count for the cluster. In some implementations a decay rate is associated with the member count parameter such that the cluster weight decays over time if an insufficient number of new members are added to the cluster during that time. This decaying cluster weight parameter helps to automatically fade out old static clusters that are no longer valid. The cluster center of a given cluster is the weighted average of points in the given cluster. The cluster radius of a given cluster is the weighted spread of points in the given cluster analogous to a weighted variance of the cluster . It is defined that clusters have a maximum radius of 2. A cluster is considered to be a dense cluster when it contains at least M 2 points. When a new motion vector comes into the event space if the new motion vector is density reachable from any existing member of a given cluster the new motion vector is included in the existing cluster and if the new motion vector is not density reachable from any existing member of any existing cluster in the event space the new motion vector forms its own cluster. Thus at least one cluster is updated or created when a new motion vector comes into the event space.

After some time a new motion vector is received and placed in the event space at time t. As shown in b the new motion vector is density reachable from the existing point in cluster cand thus falls within the existing cluster c. The cluster center cluster weight and cluster radius of cluster care updated based on the entry of the new motion vector. The new motion vector is also assigned to the category of unrecognized vectors. In some implementations the event indicator of the new motion event is added to the event timeline in real time and has the appearance associated with the category for unrecognized events.

In some implementations the categorization of each segment is based in part on the event categories associated with each motion vector within the segment. For example the event categories associated with each motion vector are aggregated with other factors features to generate motion features for a segment. In some implementations the categorization of the motion event is based in part on the event categories associated with each motion vector.

Based on the above process as motion vectors are collected in the event space over time the most common event categories emerge gradually without manual intervention. In some implementations the creation of a new category causes real time changes in the review interface provided to a client device associated with the video source . For example in some implementations motion events are first represented as uncategorized motion events and as each vector category is created over time the characteristics of event indicators for past motion events in that vector category are changed to reflect the newly recognized vector category. Subsequent motion events falling within the recognized categories also have event indicators showing their respective categories. The currently recognized categories are optionally presented in the review interface for user selection as event filters. The user may choose any subset of the currently known categories e.g. each recognized event categories and respective categories for trivial events rare events obsolete events and unrecognized events to selectively view or receive notifications for motion events within the subset of categories.

In some implementations a user may review past motion events and their categories on the event timeline. In some implementations the user is allowed to edit the event category assignments for example by removing one or more past motion events from a known event category. When the user has edited the event category composition of a particular event category by removing one or more past motion events from the event category the user facing frontend notifies the event categorizer of the edits. In some implementations the event categorizer removes the motion vectors of the removed motion events from the cluster corresponding to the event category and re computes the cluster parameters e.g. cluster weight cluster center and cluster radius . In some implementations the removal of motion events from a recognized cluster optionally causes other motion events that are similar to the removed motion events to be removed from the recognized cluster as well. In some implementations manual removal of one or more motion events from a recognized category may cause one or more motion events to be added to event category due to the change in cluster center and cluster radius. In some implementations the event category models are stored in the event category models database and is retrieved and updated in accordance with the user edits.

In some implementations one event category model is established for one camera. In some implementations a composite model based on the motion events from multiple related cameras e.g. cameras reported to serve a similar purpose or have a similar scene etc. is created and used to categorize motion events detected in the video stream of each of the multiple related cameras. In such implementations the timeline for one camera may show event categories discovered based on motion events in the video streams of its related cameras even though no event for such categories have been seen in the camera s own video stream.

In some implementations event data and event masks of past motion events are stored in the event data and event mask database . In some implementations the client device receives user input to select one or more filters to selectively review past motion events and selectively receive event alerts for future motion events.

In some implementations the client device passes the user selected filter s to the user facing frontend and the user facing frontend retrieves the events of interest based on the information in the event data and event mask database . In some implementations the selectable filters include one or more recognized event categories and optionally any of the categories for unrecognized motion events rare events and or obsolete events. When a recognized event category is selected as a filter the user facing frontend retrieves all past motion events associated with the selected event category and present them to the user e.g. on the timeline or in an ordered list shown in a review interface . For example when the user selects one of the two recognized event categories in the review interface the past motion events associated with the selected event category e.g. Event Cat. B are shown on the timeline while the past motion events associated with the unselected event category e.g. Event Cat. A are removed from the timeline. In some implementations when the user selects to edit a particular event category e.g. Event Cat. B the past motion events associated with the selected event categories e.g. Event Cat. B are presented in the first region of the editing user interface while motion events in the unselected event categories e.g. Event Cat. A are not shown.

In some implementations in addition to event categories other types of event filters can also be selected individually or combined with selected event categories. For example in some implementations the selectable filters also include a human filter which can be one or more characteristics associated with events involving a human being. For example the one or more characteristics that can be used as a human filter include a characteristic shape e.g. aspect ratio size shape and the like of the motion entity audio comprising human speech motion entities having human facial characteristics etc. In some implementations the selectable filters also include a filter based on similarity. For example the user can select one or more example motion events and be presented one or more other past motion events that are similar to the selected example motion events. In some implementations the aspect of similarity is optionally specified by the user. For example the user may select color content number of moving objects in the scene shape and or size of motion entity and or length of motion track etc as the aspect s by which similarity between two motion events are measured. In some implementations the user may choose to combine two or more filters and be shown the motion events that satisfy all of the filters combined. In some implementations the user may choose multiple filters that will act separately and be shown the motion events that satisfy at least one of the selected filters.

In some implementations the user may be interested in past motion events that have occurred within a zone of interest. The zone of interest can also be used as an event filter to retrieve past events and generate notifications for new events. In some implementations the user may define one or more zones of interest in a scene depicted in the video stream. The zone of interest may enclose an object for example a chair a door a window or a shelf located in the scene. Once a zone of interest is created it is included as one of the selectable filters for selectively reviewing past motion events that had entered or touched the zone. In addition the user may also choose to receive alerts for future events that enter a zone of interest for example by selecting an alert affordance associated with zone.

In some implementations the server system e.g. the user facing frontend of the server system receives the definitions of zones of interest from the client device and stores the zones of interest in association with the reviewer account currently active on the client device . When a zone of interest is selected as a filter for reviewing motion events the user facing frontend searches the event data database to retrieve all past events that have motion entity s within the selected zone of interest. This retrospective search of event of interest can be performed irrespective of whether the zone of interest had existed before the occurrence of the retrieved past event s . In other words the user does not need to know where in the scene he she may be interested in monitoring before hand and can retroactively query the event database to retrieve past motion events based on a newly created zone of interest. There is no requirement for the scene to be divided into predefined zones first and past events be tagged with the zones in which they occur when the past events were first processed and stored.

In some implementations the retrospective zone search based on newly created or selected zones of interest is implemented through a regular database query where the relevant features of each past event e.g. which regions the motion entity had entered during the motion event are determined on the fly and compared to the zones of interest. In some implementations the server optionally defines a few default zones of interest e.g. eight 2 4 predefined rectangular sectors within the scene and each past event is optionally tagged with the particular default zones of interest that the motion entity has entered. In such implementations the user can merely select one or more of the default zones of interest to retrieve the past events that touched or entered the selected default zones of interest.

In some implementations event masks e.g. the example event mask shown in each recording the extent of a motion region accessed by a motion entity during a given motion event are stored in the event data and event masks database . The event masks provide a faster and more efficient way of retrieving past motion events that have touched or entered a newly created zone of interest.

In some implementations the scene of the video stream is divided into a grid and the event mask of each motion event is recorded as an array of flags that indicates whether motion had occurred within each grid location during the motion event. When the zone of interest includes at least one of the grid location at which motion has occurred during the motion event the motion event is deemed to be relevant to the zone of interest and is retrieved for presentation. In some implementations the user facing frontend imposes a minimum threshold on the number of grid locations that have seen motion during the motion event in order to retrieve motion events that have at least the minimum number of grid locations that included motion. In other words if the motion region of a motion event barely touched the zone of interest it may not be retrieved for failing to meet the minimum threshold on grid locations that have seen motion during the motion event.

In some implementations an overlap factor is determined for the event mask of each past motion event and a selected zone of interest and if the overlapping factor exceeds a predetermined overlap threshold the motion event is deemed to be a relevant motion event for the selected zone of interest.

In some implementations the overlap factor is a simple sum of all overlapping grid locations or pixel locations. In some implementations more weight is given to the central region of the zone of interest than the peripheral region of the zone of interest during calculation of the overlap factor. In some implementations the event mask is a motion energy mask that stores the histogram of pixel count at each pixel location within the event mask. In some implementations the overlap factor is weighted by the pixel count at the pixel locations that the motion energy map overlaps with the zone of interest.

By storing the event mask at the time that the motion event is processed the retrospective search for motion events that are relevant to a newly created zone of interest can be performed relatively quickly and makes the user experience for reviewing the events of interest more seamless. Creation of a new zone of interest or selecting a zone of interest to retrieve past motion events that are not previously associated with the zone of interest provides many usage possibilities and greatly expands the utility of stored motion events. In other words motion event data e.g. event categories event masks can be stored in anticipation of different uses without requiring such uses to be tagged and stored at the time when the event occurs. Thus wasteful storage of extra metadata tags may be avoided in some implementations.

In some implementations the filters can be used for not only past motion events but also new motion events that have just occurred or are still in progress. For example when the video data of a detected motion event candidate is processed a live motion mask is created and updated based on each frame of the motion event as the frame is received by the server system . In other words after the live event mask is generated it is updated as each new frame of the motion event is processed. In some implementations the live event mask is compared to the zone of interest on the fly and as soon as a sufficient overlap factor is accumulated an alert is generated and the motion event is identified as an event of interest for the zone of interest. In some implementations an alert is presented on the review interface e.g. as a pop up as the motion event is detected and categorized and the real time alert optionally is formatted to indicate its associated zone of interest. This provides real time monitoring of the zone of interest in some implementations.

In some implementations the event mask of the motion event is generated after the motion event is completed and the determination of the overlap factor is based on a comparison of the completed event mask and the zone of interest. Since the generation of the event mask is substantially in real time real time monitoring of the zone of interest may also be realized this way in some implementations.

In some implementations if multiple zones of interest are selected at any given time for a scene the event mask of a new and or old motion event is compared to each of the selected zones of interest. For a new motion event if the overlap factor for any of the selected zones of interest exceeds the overlap threshold an alert is generated for the new motion event as an event of interest associated with the zone s that are triggered. For a previously stored motion event if the overlap factor for any of the selected zones of interest exceeds the overlap threshold the stored motion event is retrieved and presented to the user as an event of interest associated with the zone s that are triggered.

In some implementations if a live event mask is used to monitor zones of interest a motion entity in a motion event may enter different zones at different times during the motion event. In some implementations a single alert e.g. a pop up notification over the timeline is generated at the time that the motion event triggers a zone of interest for the first time and the alert can be optionally updated to indicate the additional zones that are triggered when the live event mask touches those zones at later times during the motion event. In some implementations one alert is generated for each zone of interest when the live event mask of the motion event touches the zone of interest.

As shown in the upper portion of motion masks for a frame sequence of a motion event are generated as the motion event is processed for motion vector generation. Based on the motion masks of the frames an event mask is created. The creation of an event mask based on motion masks has been discussed earlier with respect to and is not repeated herein.

Suppose that the motion masks shown in are all the motion masks of a past motion event thus the event mask is a complete event mask stored for the motion event. After the event mask has been stored when a new zone of interest e.g. Zone B among the selected zones of interest is created later the event mask is compared to Zone B and an overlap factor between the event mask and Zone B is determined. In this particular example Overlap B within Overlap is detected between the event mask and Zone B and an overlap factor based on Overlap B also exceeds an overlap threshold for qualifying the motion event as an event of interest for Zone B. As a result the motion event will be selectively retrieved and presented to the reviewer when the reviewer selects Zone B as a zone of interest for a present review session.

In some implementations a zone of interest is created and selected for zone monitoring. During the zone monitoring when a new motion event is processed in real time an event mask is created in real time for the new motion event and the event mask is compared to the selected zone of interest. For example if Zone B is selected for zone monitoring when the Overlap B is detected an alert associated with Zone B is generated and sent to the reviewer in real time.

In some implementations when a live event mask is used for zone monitoring the live event mask is updated with the motion mask of each new frame of a new motion event that has just been processed. The live motion mask is compared to the selected zone s of interest at different times e.g. every 5 frames during the motion event to determine the overlap factor for each of the zones of interest. For example if all of zones A B and C are selected for zone monitoring at several times during the new motion event the live event mask is compared to the selected zones of interest to determine their corresponding overlap factors. In this example eventually two overlap regions are found Overlap A is an overlap between the event mask and Zone A and Overlap B is an overlap between the event mask and Zone B. No overlap is found between the event mask and Zone C. Thus the motion event is identified as an event of interest for both Zone A and Zone B but not for Zone C. As a result alerts will be generated for the motion event for both Zone A and Zone B. In some implementations if the live event mask is compared to the selected zones as the motion mask of each frame is added to the live event mask Overlap A will be detected before Overlap B and the alert for Zone A will be triggered before the alert for Zone B.

In some implementations the motion event is detected and categorized independently of the existence of the zones of interest. In some implementations the importance score for a motion event is based on the involvement of zones of interest. In some implementations the importance score for a motion event is recalculated when new zones are obtained and or activated. In some implementations the zone monitoring does not rely on raw image information within the selected zones instead the zone monitoring can take into account the raw image information from the entire scene. Specifically the motion information during the entire motion event rather than the motion information confined within the selected zone is abstracted into an event mask before the event mask is used to determine whether the motion event is an event of interest for the selected zone. In other words the context of the motion within the selected zones is preserved and the event category of the motion event can be provided to the user to provide more meaning to the zone monitoring results.

To start the process the camera sends a video stream to the front end server of server system . Next either the front end server identifies motion start information or the camera identifies the motion start information and sends it to the front end server . Once the motion start information is obtained the front end server begins segmenting the video stream and sends the first segment to the back end server to be categorized . The back end server categorizes the motion event candidate within the first segment . Once the motion event candidate is categorized the back end server either sends the categorization information back to the front end server or stores the categorization information locally or both. This process is repeated for the second segment and any subsequent segments. Next either the front end server identifies motion end information or the camera identifies the motion end information and sends it to the front end server . Once the motion end information is obtained the front end server ends the video segmentation and sends the final segment to the back end server to be processed . The back end server categorizes the motion event candidate in the final segment and optionally sends the categorization information back to the front end server . In some implementations after all individual segments have been categorized multi segment categorization is performed by either the front end server or the back end server .

Attention is now directed towards implementations of user interfaces and associated processes that may be implemented on a respective client device . In some implementations the client device includes one or more speakers enabled to output sound zero or more microphones enabled to receive sound input and a touch screen enabled to receive one or more contacts and display information e.g. media content webpages and or user interfaces for an application . illustrate example user interfaces for monitoring and facilitating review of motion events in accordance with some implementations.

Although some of the examples that follow will be given with reference to inputs on touch screen where the touch sensitive surface and the display are combined in some implementations the device detects inputs on a touch sensitive surface that is separate from the display. In some implementations the touch sensitive surface has a primary axis that corresponds to a primary axis on the display. In accordance with these implementations the device detects contacts with the touch sensitive surface at locations that correspond to respective locations on the display. In this way user inputs detected by the device on the touch sensitive surface are used by the device to manipulate the user interface on the display of the device when the touch sensitive surface is separate from the display. It should be understood that similar methods are optionally used for other user interfaces described herein.

Additionally while the following examples are given primarily with reference to finger inputs e.g. finger contacts finger tap gestures finger swipe gestures etc. it should be understood that in some implementations one or more of the finger inputs are replaced with input from another input device e.g. a mouse based input or stylus input . For example a swipe gesture is optionally replaced with a mouse click e.g. instead of a contact followed by movement of the cursor along the path of the swipe e.g. instead of movement of the contact . As another example a tap gesture is optionally replaced with a mouse click while the cursor is located over the location of the tap gesture e.g. instead of detection of the contact followed by ceasing to detect the contact . Similarly when multiple user inputs are simultaneously detected it should be understood that multiple computer mice are optionally used simultaneously or a mouse and finger contacts are optionally used simultaneously.

For example the client device is the portable electronic device such as a laptop tablet or mobile phone. Continuing with this example the user of the client device sometimes also herein called a reviewer executes an application e.g. the client side module used to monitor and control the smart home environment and logs into a user account registered with the smart home provider system or a component thereof e.g. the server system . In this example the smart home environment includes the one or more cameras whereby the user of the client device is able to control review and monitor video feeds from the one or more cameras with the user interfaces for the application displayed on the client device shown in .

In the second region includes an event timeline and a current video feed indicator indicating the temporal position of the video feed displayed in the first region i.e. the point of playback for the video feed displayed in the first region . In the video feed displayed in the first region is a live video feed from the respective camera. In some implementations the video feed displayed in the first region may be previously recorded video footage. For example the user of the client device may drag the indicator to any position on the event timeline causing the client device to display the video feed from that point in time forward in the first region . In another example the user of the client device may perform a substantially horizontal swipe gesture on the event timeline to scrub between points of the recorded video footage causing the indicator to move on the event timeline and also causing the client device to display the video feed from that point in time forward in the first region .

The second region also includes affordances for changing the scale of the event timeline a 5 minute affordance A for changing the scale of the event timeline to 5 minutes and a 1 hour affordance B for changing the scale of the event timeline to 1 hour. In the scale of the event timeline is 1 hour as evinced by the darkened border surrounding the 1 hour affordance B and also the temporal tick marks shown on the event timeline . The second region also includes affordances for changing the date associated with the event timeline to any day within the preceding week Monday affordance A Tuesday affordance B Wednesday affordance C Thursday affordance D Friday affordance E Saturday affordance F Sunday affordance G and Today affordance H. In the event timeline is associated with the video feed from today as evinced by the darkened border surrounding Today affordance H. In some implementations an affordance is a user interface element that is user selectable or manipulable on a graphical user interface.

In the second region further includes Make Time Lapse affordance which when activated e.g. via a tap gesture enables the user of the client device to select a portion of the event timeline for generation of a time lapse video clip Make Clip affordance which when activated e.g. via a tap gesture enables the user of the client device to select a motion event or a portion of the event timeline to save as a video clip and Make Zone affordance which when activated e.g. via a tap gesture enables the user of the client device to create a zone of interest on the current field of view of the respective camera. In some embodiments the time lapse video clip and saved non time lapse video clips are associated with the user account of the user of the client device and stored by the server system e.g. in the video storage database . In some embodiments the user of the client device is able to access his her saved time lapse video clip and saved non time lapse video clips by entering the login credentials for his her for user account. In the video monitoring UI also includes a third region with a list of categories with recognized event categories and created zones of interest.

In some implementations the time lapse video clip is generated by the client device the server system or a combination thereof. In some implementations motion events within the selected portion of the event timeline are played at a slower speed than the balance of the selected portion of the event timeline . In some implementations motion events within the selected portion of the event timeline that are assigned to enabled event categories and motion events within the selected portion of the event timeline that touch or overlap enabled zones are played at a slower speed than the balance of the selected portion of the event timeline including motion events assigned to disabled event categories and motion events that touch or overlap disabled zones.

In the list of categories in the third region includes an entry A for event category A and an entry for event category B. Each entry includes a display characteristic indicator A and B representing the display characteristic for event indicators corresponding to motion events assigned to the respective event category an indicator filter A and B for enabling disabling display of event indicators on the event timeline for motion events assigned to the respective event category and a notifications indicator A and B for enabling disabling notifications sent in response to detection of motion events assigned to the respective event category. In display of event indicators for motion events corresponding to event categories A and B are enabled as evinced by the check mark in indicator filters A and B. further shows the notifications indicator A in the third region as disabled shown by the line through the notifications indicator A. In some implementations the notifications are messages sent by the server system via email to an email address linked to the user s account and or via a SMS or voice call to a phone number linked to the user s account. In some implementations the notifications are audible tones or vibrations provided by the client device .

In the first region further includes a save exit affordance for saving changes made to event category B or exiting the editing UI for event category B a label text entry box for renaming the label for the event category from the default name event category B to a custom name and a notifications indicator for enabling disabling notifications sent in response to detection of motion events assigned to event category B. In the second region includes a representation of the video feed from the respective camera with a linear motion vector representing the typical path of motion for motion events assigned event category B. In some implementations the representation of the video feed is a static image recently captured from the video feed or the live video feed. also illustrates the client device detecting a contact e.g. a tap gesture at a location corresponding to the checkbox C on the touch screen and a contact e.g. a tap gesture at a location corresponding to the checkbox E on the touch screen . For example the user of the client device intends to remove the motion events corresponding to the representations C and E as neither shows a bird flying in a west to northeast direction.

In the motion events feed also includes an exit affordance which when activated e.g. via a tap gesture causes the client device to display a previous user interface e.g. the video monitoring UI in and a filtering affordance which when activated e.g. via a tap gesture causes the client device to display a filtering pane. In the motion events feed further includes a scroll bar for viewing the balance of the representations in the motion events feed .

Attention is now directed to the flowchart representations of . illustrate a flowchart representation of a method of processing video information in accordance with some implementations. illustrate a flowchart representation of a method of processing potential motion events in accordance with some implementations. illustrate a flowchart representation of a method of analyzing and categorizing potential motion events in accordance with some implementations.

In some implementations the methods and are performed by 1 one or more electronic devices of one or more systems such as the devices of a smart home environment 2 one or more computing systems such as smart home provider server system of and or server system of or 3 a combination thereof. Thus in some implementations the operations of the methods and described herein are entirely interchangeable and respective operations of the methods and are performed by any of the aforementioned devices systems or combination of devices and or systems. In some embodiments methods and are governed by instructions that are stored in a non transitory computer readable storage medium and that are executed by one or more processors of a device computing system such as the one or more CPU s of server system and or the one or more CPU s of smart home provider server system . For convenience methods and with be described below as being performed by a server system such as the server system of .

Referring now to . While receiving video information from one or more cameras the video information including a video stream the server system obtains motion start information corresponding to a first location in the video stream the motion start information indicating that a portion of the video stream subsequent to the first location includes a motion event candidate. For example shows the server system receiving a video stream from the video source . In some implementations the video information also includes information about the cameras such as camera mode information camera positioning information camera environment information and the like e.g. video source information . In some implementations the video information also includes event information such as motion start information scene information motion features motion end information and the like e.g. motion event candidate information . In some implementations the motion start information is generated by the server system based on the video stream e.g. via the data processing module . In some implementations the motion start information is received by the server system from a video source such as the one or more cameras and or a controller coupled to the one or more cameras e.g. received via the network interface s .

While receiving the portion of the video stream that includes the motion event candidate the server system segments the portion of the video stream into a plurality of segments the plurality of segments including an initial segment e.g. via event processor sub module . For example shows the server system including an event processor for segmenting the video stream.

In some implementations the server system 1 identifies a third location in the video stream 2 in accordance with a determination that a predefined amount of time has lapsed identifies a fourth location in the video stream and 3 generates a segment corresponding to the portion of the video stream between the third location and the fourth location. In accordance with some implementations the server system in utilizes the event processor to segment the video stream into segments with predetermined durations.

In some implementations each segment of the plurality of segments has a same duration . In some implementations the initial segment has a shorter duration than subsequent segments e.g. so as to obtain an initial categorization sooner . In some implementations the final segment has a different duration from the other segments. In some implementations each segment has a different duration. In some implementations each segment excluding the first segment and the last segment have a same duration. For example shows event segmented into four slices with Slice and Slice having shorter durations than Slice and Slice. In some implementations the duration of a particular segment is based on a first categorization for a motion event candidate. In some implementations the duration of a particular segment is based on one or more motion features such as the amount of motion in the particular segment. In some implementations the duration of a particular segment is based on the available resources of the server system. In some implementations the duration of a particular segment is based one or more network properties.

In some implementations the server system assigns the segmented video stream to a first categorizer and stores each segment of the plurality of segments to a particular memory portion the particular memory portion associated with the first categorizer. In some implementations the server system assigns the segmented video stream to a pipeline associated with the first categorizer. In some implementations one than one categorizer is associated with a particular pipeline. For example shows the four segments of Event being assigned to Categorizer. As another example shows Slice through SliceN being assigned to Categorizer and being stored in a memory location associated with Categorizer.

In some implementations the particular memory portion corresponds to a queue assigned to the first categorizer. In some implementations the server system memory includes the particular memory portion. In some implementations all segments of a particular motion event candidate are assigned to the same queue. For example shows Slice through SliceN being assigned to a memory location corresponding to Categorizer Queue .

In some implementations the server system assigns the segmented video stream to the first categorizer in accordance with a load balancing of a plurality of categorizers within the server system. In accordance with some implementations the segments of Event in are assigned to Categorizer Queue based on a load balancing algorithm.

In some implementations the server system checks utilizing the first categorizer for additional segments of the video stream until a motion end event occurs. In accordance with some implementations Categorizer in checks for additional segments at associated memory locations in the database.

In some implementations the motion end event includes 1 processing by the first categorizer a segment denoted as a final segment or 2 a time out event. For example shows SliceN denoted as a final segment. In this example the motion end event is Categorizer processing SliceN. In some implementations a time out event occurs when the categorizer does not receive an additional segment for an event within a predetermined amount of time such as 20 40 or 80 seconds.

In some implementations the server system 1 retrieves utilizing the first categorizer a second segment of the plurality of segments from the particular memory portion 2 obtains utilizing the first categorizer segment information corresponding to the initial segment and 3 processes utilizing the first categorizer the second segment of the video stream to obtain a third classification where the processing of the second segment is based on the segment information corresponding to the initial segment. In some implementations the segment information includes event data such as background factors a motion mask an event mask motion vectors event categorization information and the like. In some implementations the segment information is stored in a database within the server system such as event data event masks database .

The server system obtains motion end information corresponding to a second location in the video stream the motion end information indicating that a portion of the video stream subsequent to the second location does not include the motion event candidate. In some implementations the motion end information is generated by the server system e.g. via event processor sub module based on the video information such as the video stream and or additional camera information. In some implementations the motion end information is received by the server system e.g. via network interface s from the video source such as the one or more cameras and or a controller coupled to the cameras.

In some implementations the server system obtains second motion start information corresponding to a third location in the video stream the second motion start information indicating that the video stream subsequent to the third location includes a second motion event candidate. In some implementations the second motion start information is obtained in a same similar manner as the first motion start information described above in reference to . In some implementations the first motion start information is received from the video source and the second motion start information is generated by the server system or vice versa.

In some implementations while receiving the video stream that includes the second motion event candidate the server system segments the video stream into a second plurality of segments the second plurality of segments including an initial segment. In some implementations the segmenting is done in a same similar manner as the segmenting described above in reference to .

It should be understood that the particular order in which the operations in have been described is merely an example and is not intended to indicate that the described order is the only order in which the operations could be performed. One of ordinary skill in the art would recognize various ways to reorder the operations described herein. Additionally it should be noted that details of other processes described herein with respect to other methods and or processes described herein are also applicable in an analogous manner to the method described above with respect to .

Referring now to . The server system obtains a first categorization of a plurality of categorizations for the motion event candidate based on the initial segment. In some implementations the server system generates the first categorization e.g. via event categorizer sub module . In some implementations the server system receives the first categorization from an external source. For example the server system sends the initial segment to a separate server that categorizes the initial segment and sends back the categorization information. In this example the interaction between the server system and the separate server is similar to the interaction between the Front End Server and the Back End Server shown in .

In some implementations the server system 1 retrieves utilizing the first categorizer the initial segment from the particular memory portion and 2 processes utilizing the first categorizer the initial segment of the video stream to obtain the first categorization. For example shows Categorizer retrieving and processing slices from an associated memory location.

In some implementations the first categorization is based on a determination of an amount of motion within the initial segment of the video stream. For example as discussed above with reference to in some instances a large amount of motion e.g. 50 70 or 90 of the pixels in the scene indicates a camera state change and or a lighting change and therefore the corresponding categorization is indicative of such e.g. categorized as an unimportant event .

In some implementations the server system obtains a confidence score corresponding to the obtained first categorization. In some implementations a confidence score is generated for each categorization obtained by the server system. In some implementations the confidence score is based on clustering information e.g. based on the density of a cluster the size of a cluster and or distance from a cluster boundary in an event space as shown in . In some implementations the confidence score is based on motion features motion entity characteristics background factors and the like. In some implementations the confidence score is based on prior categorizer training. In some implementations the confidence score is based on the importance score of the corresponding cuepoint and or the importance score of the corresponding motion event candidate.

In some implementations the server system determines whether an alert is associated with the obtained first categorization. In some implementations alerts are associated with a subset of categorizations from the plurality of categorizations and the server system determines whether the first categorization is included in the subset of categorizations. In some implementations multiple alerts are associated with the first categorization such as a general motion alert and one or more specific alerts. In some implementations distinct alerts are sent to each client device of a plurality of client devices e.g. client device and client device . In some implementations the determination is based on client data e.g. client data such as user preferences. In some implementations the determination is based on video source data e.g. video source data stored in video source data database .

In some implementations in accordance with the obtained first categorization the server system generates an alert for the motion event candidate and sends the alert to a user associated with the video information. For example shows server system sending alerts to client device . In some implementations the alerts are generated by a data processing module such as data processing module or data processing module . In some implementations the server system generates an alert based on the motion start information. In some implementations the server system generates an alert based on an amount of motion in the scene. In some implementations the server system generates an alert based on a sequence of events such as two sequential motion start events two motion events and the like.

In some implementations the alert is generated in accordance with a determination that the obtained confidence score meets predefined criteria. In some implementations the predefined criteria include a threshold value and the alert is generated in accordance with a determination that the confidence score meets the threshold value. In some implementations the significance of the alert is based on the confidence score. For example a high confidence scores generate more significant alerts than lower confidence scores. In some implementations more significant alerts include additional details e.g. regarding the motion event candidate and or are sent to additional client devices than less significant alerts. For example an alert corresponding to a confidence score of 90 is sent to all associated client devices where as an alert corresponding to a confidence score of 51 is sent only to a single associated client device e.g. the client device denoted as a primary device . In some implementations alerts corresponding to higher confidence scores are designed to draw more attention from a user than alerts corresponding to lower confidence scores.

In some implementations in accordance with the obtained first categorization the server system forgoes generating an alert for the motion event candidate. In some implementations the first categorization indicates that the motion event candidate is an unimportant event and the server system forgoes generating an alert for unimportant events. For example the first categorization indicates that the motion event is a tree swaying and swaying trees have been designated as unimportant e.g. by a user associated with the video stream . In some implementations the server system does not generate an alert or a log entry for unimportant events. In some implementations the server system forgoes generating an alert based on a confidence score for the first categorization. For example the first categorization has a confidence score of 38 and the server system forgoes generating an alert for categorizations with confidence scores below 50.

In accordance with the obtained first categorization the server system generates a log entry for the motion event candidate the log entry including the first categorization. In some implementations the log entry also includes additional information such as video source information motion event candidate information date time information and the like. In some implementations the log entry is used to generate update a motion event timeline for the user. In some implementations the log entry is modified based on user edits on event categories. In some implementations the log entry is stored on a server database such as the server database or the event information database in .

In some implementations the log entry further includes the obtained confidence score. In some implementations the confidence score is part of the first categorization.

In some implementations the server system obtains a third categorization for the motion event candidate based on at least one segment of the plurality of segments. In some implementations the at least one segment consists of a second segment of the plurality of segments the second segment being subsequent to the first segment. In some implementations the at least one segment includes at least one partial segment such as the first half of a third segment.

In some implementations in accordance with the obtained third categorization the server system generates an alert for the motion event candidate. In some implementations the server system generates an alert based on a comparison of the first and third categorizations. In some implementations the server system generates an alert in a same similar manner as described above in . For example the server system determines that a motion event candidate started in a first zone denoted as an unimportant zone and therefore server system forgoes generating an alert for the motion event candidate. In this example the server system subsequently determines that the motion event candidate has moved to a second zone denoted as a zone of interest and therefore the system generates notification such as an alert for the motion event candidate.

In some implementations the server system updates the log entry for the motion event candidate to include the obtained third categorization. In some implementations the log is updated at intervals that are independent from the segment durations. For example the segments have variable durations and the log is updated every 15 seconds. In some implementations updating the log entry includes modifying the first categorization based on the third categorization. In some implementations updating the log entry includes storing a confidence score corresponding to the third categorization. In some implementations updating the log entry includes adding additional information such as date time information video source information alert information event information and the like.

In response to obtaining the motion end information the server system obtains a second categorization of the plurality of categorization for the motion event based on the plurality of segments. In some implementations the second classification is obtained while continuing to receive the video information. In some implementations the second classification is obtained after the server system is finished receiving the video information. In some implementations in response to obtaining the motion end information the server system obtains a fourth categorization for the motion event based on the final segment. In some implementations the second categorization is based on the first categorization. In some implementations the second categorization is based on an aggregation of segment information from each respective segment of the plurality of segments. The segment information optionally includes categorizations confidence scores motion features and the like.

In some implementations the second categorization is more descriptive than the first categorization. In some implementations the second categorization includes additional information regarding the one or more motion entities e.g. information identifying the particular type of motion entity . For example the first categorization denotes that a human is moving and the second categorization identifies the particular person who is moving.

In some implementations the server system determines whether the obtained second categorization matches the obtained first categorization. In some instances the second categorization is the same as the first categorization. In some instance the second categorization contradicts the first categorization. For example the first categorization indicates that the motion event candidate is an unimportant event such as trees swaying and the second categorization indicates that the motion event candidate is an important event such as a tree falling down.

The server system updates the log entry for the motion event candidate based on the obtained second categorization. In some implementations the server system updates the log entry after it is finished receiving the video information. In some implementations the server system updates the log entry while continuing to receive the video information. In some implementations the updating is performed in a same similar manner as described above with reference to .

In some implementations in accordance with a determination that the obtained second categorization does not match the obtained first categorization the server system removes the first categorization from the log entry. In some implementations in accordance with a determination that the obtained second categorization does not match the obtained first categorization the server system adjusts the confidence score of the first categorization. In some implementations in accordance with a determination that the obtained second categorization does not match the obtained first categorization the server system adjusts the first categorization.

In some implementations the server system obtains a first categorization for the second motion event candidate based on the initial segment of the second plurality of segments the first categorization for the second motion event candidate indicating that the second motion event candidate is an unimportant event. For example the first categorization for the second motion event candidate indicates that the motion event candidate was due to a change in lighting and or camera settings. In some implementations the server system obtains the first categorization for the second motion event candidate in a same similar manner as described above with reference to .

In some implementations in accordance with the obtained first categorization for the second motion event candidate the server system forgoes generation of a respective log entry for the second motion event candidate. In some implementations the server system forgoes generating log entries for unimportant events. In some implementations the server system generates log entries for unimportant events but forgoes adding them to a motion event timeline e.g. motion event timeline . In some implementations the server system generates a separate type of log entry for unimportant events than for important events.

In some implementations after obtaining the first categorization for the second motion event candidate the server system obtains a second categorization for the second motion event candidate based on one or more segments of the second plurality of segments the second categorization for the second motion event candidate indicating that the second motion event candidate is an important event. For example the first categorization indicated that the second motion event was a tree swaying denoted as an unimportant event and the second categorization indicates that the second motion event is 1 the tree falling down or 2 a person moving where the person may have entered the scene after the initial segment was processed. In some implementations the second categorization for the second motion event candidate is obtained in a same similar manner as described above with reference to .

In some implementations in accordance with the obtained second categorization for the second motion event candidate the server system generates a respective log entry for the second motion event candidate the respective log entry including the second categorization. In some implementations the respective log entry is generated in a same similar manner as described above with reference to .

In some implementations in accordance with the obtained second categorization for the second motion event candidate the server system adds the motion event candidate to a motion event timeline e.g. motion event timeline .

It should be understood that the particular order in which the operations in have been described is merely an example and is not intended to indicate that the described order is the only order in which the operations could be performed. One of ordinary skill in the art would recognize various ways to reorder the operations described herein. Additionally it should be noted that details of other processes described herein with respect to other methods and or processes described herein are also applicable in an analogous manner to the method described above with respect to .

Referring now to . The server system receives a plurality of video frames the plurality of video frames including a motion event candidate. In some implementations the video frames correspond to a scene and include additional information such as information regarding the scene s background. In some implementations server system receiving a video segment including the plurality of video frames.

The server system processes the plurality of video frames. In some implementations the server system processes a video segment corresponding to the plurality of video frames. For example shows the processing pipeline including per segment processing. In some implementations the processing is performed by a data processing module such as data processing module in . In some implementations the processing is performed by an event processor an event categorizer or a combination thereof. For example the processing is optionally performed data processing module in . In this example at least a portion of the processing is optionally performed by the event processor sub module and or by the event categorizer sub module .

The processing includes obtaining one or more background factors corresponding to a background in at least a subset of the plurality of video frames. In some implementations the background factors are predetermined and or predefined. For example the background factors are received e.g. as part of the motion event candidate information from the video source as shown in . In some implementations server system retrieves previously generated background factors associated with the plurality of video frames. For example the server system retrieves background factors generated for a previous segment of the same event. In some implementations the background factors are generated by the server system based on one or more of the plurality of video frames. The background factors optionally include auto exposure level camera mode information such as IR mode information audio information data output from a background algorithm performed by the camera and pre computed video data representative of frame by frame motion. In some implementations the background factors indicate the presence of a motion event candidate within the frames.

The processing further includes utilizing the obtained background factors to identify one or more motion entities in at least a subset of the plurality of video frames. For example the one or more motion entities are identified as described above with reference to . In some implementations motion entity identification is performed by subtracting the estimated background from each frame of the video segment. In some implementations the background factors include a foreground motion mask.

The processing further includes for each identified motion entity obtaining one or more representative motion vectors based on a motion track of the respective motion entity. In some implementations the server system determines a respective motion track for each motion entity. In some implementations the server system receives motion track information from an external source. For example the motion vectors are obtained in the manner described above with reference to . In some implementations the motion track is used to generate a two dimensional linear motion vector which only takes into account the beginning and end locations of the motion track e.g. as shown by the dotted arrow in b . In some implementations the motion vector is a non linear motion vector that traces the entire motion track from the first frame to the last frame of the frame sequence in which the motion entity has moved. In some implementations obtaining one or more representative motion vectors based on a motion track includes obtaining one or more vector categories corresponding to the motion vectors.

The processing further includes identifying one or more features in at least a subset of the plurality of video frames. In some implementations the features comprise visual characteristics of the scene. In some implementations the features include scene information such as the amount of a particular color within a scene the amount of motion in the scene the number of motion entities in the scene and the like. In some implementations the features include motion entity information such as the amount of a particular color within a motion entity the relative dimensions of a motion entity the velocity and or acceleration of a motion entity and the like.

In some implementations the processing further includes obtaining distance information for a scene in the plurality of video frames. In some implementations the distance information includes depth mapping information for the scene. In some implementations the depth mapping information indicates the contours of the room as well as main features such as tables walls floor ceiling windows and the like. In some implementations the depth mapping information is stored a server database e.g. server database . In some implementations the depth mapping information is generated by the video source e.g. video sources . In some implementations the depth mapping information is generated prior to the server system receiving the plurality of video frames.

The processing further includes aggregating the obtained background factors the obtained representative motion vectors and the identified features to generate a plurality of motion features. In some implementations the aggregation is performed by an event categorizer such as the event categorizer shown in . In some implementations the aggregation is performed by an event processor such as the event processor shown in . In some implementations the aggregating includes aggregating vector category information assigned to the obtained representative motion vectors.

In some implementations the aggregating further includes aggregating the obtained distance information.

In some implementations the server system performs object recognition on each identified motion entity. In some implementations the object recognition is performed in parallel with the processing of the plurality of video frames. In some implementations the object recognition is part of the processing of the plurality of video frames. In some implementations information from the processing of the plurality of video frames such as information regarding the background factors motion entities motion vectors and the like is used to perform the object recognition.

In some implementations the server system classifies each of at least a subset of the one or more motion entities in accordance with the performed object recognition. In some implementations the classification occurs in parallel with the processing of the plurality of video frames. In some implementations the classification is based on information acquired by processing a separate plurality of video frames e.g. a separate segment of an event . In some implementations the aggregating further includes aggregating the classifications.

In some implementations the server system obtains user information corresponding to a user associated with the plurality of video frames. In some implementations the user information is received from a client device such as client device in . In some implementations the user information is retrieved from a user database such as account database in . In some implementations the user information is received from a video source such as video source in . In some implementations the user information includes information regarding one or more zones of interest selected by the user.

In some implementations the user information includes user feedback corresponding to one or more prior motion event candidates. In some implementations the user feedback includes re categorization of prior events. In some implementations the user feedback includes confirmation of prior event categorizations.

In some implementations the server system obtains environmental information corresponding to a scene within the plurality of video frames. In some implementations the environmental information is received from a video source such as the video source in . In some implementations the environmental information is received from a client device such as the client device in . In some implementations the environmental information is received as extrinsic information such as extrinsic information in . In some implementations the environmental information is retrieved from a database such as device information database in .

In some implementations the environmental information includes information regarding whether the scene is within a structure. In some implementations the environmental information includes information regarding weather such as high winds at the location of the scene. In some implementations the environmental information includes information regarding light levels such as whether or not the sun as set at the location of the scene.

In some implementations the server system obtains camera information corresponding to one or more cameras associated with the plurality of video frames e.g. camera . In some implementations the camera information is received from a video source such as the video source in . In some implementations the camera information is retrieved from a database such as device information database in .

In some implementations the camera information includes information regarding a relationship between each camera in the one or more cameras and the ground. In some implementations the relationship is a 3 D relationship. In some implementations the relationship includes an angle between the camera and the ground. In some implementations the camera information includes information regarding the camera s perspective of the scene e.g. top down view . In some implementations the camera information includes the distance from a camera to the ground.

In some implementations the camera information includes camera mode information corresponding to each camera in the one or more cameras. In some implementations the camera mode information corresponds to a video source such as video sources in .

In some implementations the camera mode information includes information regarding whether a respective camera is in a low light mode. In some implementations the low light mode is an infrared mode and one or more infrared lights are used to illuminate the scene. In some implementations the camera mode information includes information regarding whether the camera is stationary or moving e.g. rotating . In some implementations the camera mode information includes information regarding whether the camera is in indoor or outdoor mode.

The server system sends the plurality of motion features to an event categorizer and the event categorizer assigns a motion event category to the motion event candidate based on the received motion features. In some implementations the event categorizer is a component of the server system such as the event categorizer shown in . In some implementations the server system assigns a motion event category to the motion event candidate using an event categorizer. In some implementations the event categorizer is distinct from the server system. In some implementations the event categorizer utilizes one or more event categorization models to assign the motion event category. In some implementations the event categorizer retrieves the one or more event categorization models from a database such as event categorization models database .

In some implementations the motion event category is further based on the obtained environmental information.

In some implementations the motion event category is further based on the obtained camera information.

In some implementations the motion event category assigned to the motion event candidate is selected from a group consisting of one or more known event types one or more unknown event types and a non event type. In some implementations the known event types include birds in flight cars driving by people walking animals running and the like. In some implementations the non event type indicates that the motion event candidate was a false positive. In some implementations the non event type indicates that the motion event candidate was an unimportant event. In some implementations the one or more known event types include one or more qualitative event types such as event types denoting relative levels of importance.

In some implementations the server system generates a confidence score for the motion event candidate. In some implementations the confidence score is used to determine whether or not to generate an alert and or whether or not to create update a log entry. In some implementations the confidence score is generated by the event categorizer. In some implementations the confidence score is part of the motion event category.

In some implementations the server system trains the event categorizer. In some implementations the server system trains the event categorizer using an event categorizer sub module such as the event categorizer sub module shown in . In some implementations the event categorizer is trained using information obtained from the server system.

In some implementations the training includes 1 obtaining a plurality of video clips each video clip in the plurality of video clips including a respective motion event candidate 2 designating a motion event category for each respective motion event candidate 3 assigning via the event categorizer a motion event category to each respective motion event candidate and 4 adjusting the event categorizer based on differences between the assigned motion event categories and the designated motion event categories. In some implementations the plurality of video clips includes video clips donated by one or more users. In some implementations the plurality of video clips include individual video clips identified based on specific features and or irregularities within the respective video clip. For example in some instances the server system detects an irregularity in an individual video clip and requests to the user that the video clip be used to train the categorizer. In this example the server system receives user approval and the video clip is added to the plurality of video clips. In some implementations human reviewers designate the motion event categories for each motion event candidate. In some implementations other categorizers distinct from the categorizer being trained are used to designate the motion event categories. In some implementations the motion event categories include categories for particular objects moving in known patterns such as birds in flight trees swaying in the wind and the like. In some implementations the training includes adjusting one or more parameters of the event categorizer based on the differences between the assigned motion event categories and the designated motion event categories. In some implementations the adjusting includes minimizing differences between the assigned motion event categories and the designated motion event categories. In some implementations the adjusting includes adjusting one or more clusters in an event space such as event space shown in .

In some implementations the server system receives a second plurality of video frames the second plurality of video frames including a second motion event candidate. In some implementations the first plurality of video frames comprises a first segment of an event and the second plurality of video frames comprises a second segment of the same event. In some implementations the second plurality of video frames is received in a same similar manner as the first plurality of video frames as described above with reference to .

In some implementations the server system processes the second plurality of video frames to generate a second plurality of motion features. In some implementations the server system processes the second plurality of video frames in a same similar manner as the server system processed the first plurality of video frames as described above with reference to .

In some implementations the processing of the second plurality of video frames includes utilizing information corresponding to the processing of the plurality of video frames. In some implementations the utilized information includes at least a subset of the obtained one or more background factors. In some implementations the utilized information includes information corresponding to at least a subset of the identified motion entities. In some implementations the utilized information includes at least a subset of the plurality of motion features. In some implementations user information and or camera information obtained while processing the plurality of video frames is used to process the second plurality of video frames e.g. is not generated retrieved a second time .

In some implementations the server system sends the second plurality of motion features to the event categorizer and the event categorizer assigns a second motion event category to the second motion event candidate based on the second plurality of motion features. In some implementations the second motion event category is the same as the first motion event category. In some implementations the second motion event category is more descriptive than the first motion event category.

In some implementations the server system updates a log entry based on the second motion event category the log entry corresponding to the motion event candidate. In some implementations the log entry is updated in a same similar manner as the log entry described above with reference to .

In some implementations the server system utilizes both the plurality of motion features and the second plurality of motion features to assign a motion event category to a third motion event candidate the third motion event candidate corresponding to a combination of the first motion event candidate and the second motion event candidate. For example the first motion event candidate corresponds to a first segment of an event the second motion event candidate corresponds to a second segment of the event and the third motion event candidate corresponds to all segments of the event. In some implementations the server system also utilizes additional information corresponding to the first motion event candidate and or the second motion event candidate. In some implementations the additional information includes event data such as background factors a motion mask an event mask motion vectors event categorization information and the like. In some implementations the motion event candidate for the third motion event candidate is based on an aggregation of information corresponding to the first and second motion event candidates.

It should be understood that the particular order in which the operations in have been described is merely an example and is not intended to indicate that the described order is the only order in which the operations could be performed. One of ordinary skill in the art would recognize various ways to reorder the operations described herein. Additionally it should be noted that details of other processes described herein with respect to other methods and or processes described herein are also applicable in an analogous manner to the method described above with respect to .

For situations in which the systems discussed above collect information about users the users may be provided with an opportunity to opt in out of programs or features that may collect personal information e.g. information about a user s preferences or usage of a smart device . In addition in some implementations certain data may be anonymized in one or more ways before it is stored or used so that personally identifiable information is removed. For example a user s identity may be anonymized so that the personally identifiable information cannot be determined for or associated with the user and so that user preferences or user interactions are generalized for example generalized based on user demographics rather than associated with a particular user.

Although some of various drawings illustrate a number of logical stages in a particular order stages that are not order dependent may be reordered and other stages may be combined or broken out. While some reordering or other groupings are specifically mentioned others will be obvious to those of ordinary skill in the art so the ordering and groupings presented herein are not an exhaustive list of alternatives. Moreover it should be recognized that the stages could be implemented in hardware firmware software or any combination thereof.

The foregoing description for purpose of explanation has been described with reference to specific implementations. However the illustrative discussions above are not intended to be exhaustive or to limit the scope of the claims to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The implementations were chosen in order to best explain the principles underlying the claims and their practical applications to thereby enable others skilled in the art to best use the implementations with various modifications as are suited to the particular uses contemplated.

