---

title: Event processing with XML query based on reusable XML query template
abstract: Methods, systems, and computer-readable media are disclosed for event processing with a query based on a reusable XML query template. A particular method includes receiving a plurality of events from a source and generating a plurality of event objects based on the plurality of events. A query represented by an XML file based on a reusable XML query template is executed with respect to the plurality of event objects to produce a plurality of result objects. Each result object is produced based on an application of at least one operator of the query. A plurality of results is generated based on the plurality of result objects, and the plurality of results is transmitted to a sink.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09348868&OS=09348868&RS=09348868
owner: Microsoft Technology Licensing, LLC
number: 09348868
owner_city: Redmond
owner_country: US
publication_date: 20150122
---
This application is a continuation application of U.S. patent application Ser. No. 12 603 308 now U.S. Pat. No. 9 158 816 entitled EVENT PROCESSING WITH XML QUERY BASED ON REUSABLE XML QUERY TEMPLATE filed on Oct. 21 2009 the entire disclosure of which is hereby incorporated herein by reference.

The event based computation paradigm has grown in importance for enterprises. For example many business applications and system control applications can be developed based on event based computation. Generally event processing applications receive events analyze the events and output results e.g. proposed actions based on the analysis of the events.

Current event processing systems often use structured query language SQL queries to analyze events. Due to the fluid nature of event streams the relational algebra underlying traditional SQL may not be well suited for processing events at a high rate. Additionally performing time based calculations using the relational operators provided by SQL may be difficult. Further the semantics of a SQL query may require recitation of specific data sources rendering a particular SQL query that recites a particular data source unsuitable for use with a different data source.

The present disclosure describes an event processing framework that utilizes queries based on reusable XML query templates. A single XML query template may be reused with respect to multiple event sources and sinks. For example an XML query template may be instantiated and bound to a particular input adapter for a particular source and to a particular output adapter for a particular sink. To run the same query against another source and another sink the XML query template may be re instantiated and bound to another input adapter and another output adapter. Input adapters and output adapters for various sources and sinks may be user defined to handle conversion to and from proprietary data formats associated with various sources and sinks.

An XML query template may include a directed graph of operators. The operators may be relational algebra operators time based operators or any other type of operator.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In a particular embodiment a system is disclosed that includes an input adapter a query engine and an output adapter. The input adapter is configured to receive an event from a source and to generate an event object based on the event. The event object includes a payload a validity start time and a validity end time. The query engine is configured to execute a query with respect to the event object to produce a result object. The query is represented by an extensible markup language XML file that is based on a reusable XML query template. The XML query template is bindable to a plurality of input adapters and to a plurality of output adapters. Result objects are produced based on applying at least one operator of the query to an input of the event objects. The output adapter is configured to generate results based on the result objects and to transmit the results to a sink.

In another particular embodiment a computer readable medium is disclosed. The computer readable medium includes instructions that when executed by a computer cause the computer to receive at least one event from a source at an event processing system. Each event is represented in a first data format that is native to the source. The computer readable medium also includes instructions that when executed by the computer cause the computer to convert the at least one event from the first data format to at least one event object formatted in a second data format. Each event object includes a payload a validity start time and a validity end time. The computer readable medium further includes instructions that when executed by the computer cause the computer to execute a query with respect to the at least one event object to produce a result object. The query is executed without storing the at least one event object and is represented by an XML file based on a reusable XML query template. The result object is based on an application of at least one operator of the query to the event object and is formatted in the second data format. The computer readable medium includes instructions that when executed by the computer cause the computer to convert the result object from the second data format into a result formatted in a third data format that is native to a sink and to transmit the result to the sink.

The CEP input adapter at the system is configured to receive events such as the event from the source . For example the source may include a database a server an event ticker a network port a sensor or some other event source that provides events to the CEP input adapter periodically randomly or intermittently in bursts. The CEP input adapter is also configured to generate e.g. via translation or conversion event objects e.g. the illustrative event object based on the events and to transmit the generated event objects to the CEP query engine via an input stream . In a particular embodiment the events received from the source are formatted in a first data format e.g. a proprietary data format that is native to the source and the event objects are formatted in a second data format that is native to the system . In a particular embodiment the second data format that is native to the system specifies that each event object includes an event payload an event validity start time and an end time .

The CEP query engine is configured to receive event objects via the input stream and to execute a query with respect to the event objects to produce result objects e.g. an illustrative result object . The CEP query engine is also configured to transmit the result object to the CEP output adapter via an output stream .

The query may be represented by an XML file based on a reusable XML query template that is bindable to multiple input adapters and multiple output adapters. Thus the query template may be reusable with multiple sources and multiple sinks where usage of the query template with a particular source includes binding the query template to a particular input adapter for the particular source and usage of the query template with a particular sink includes binding the query template to a particular output adapter for the particular sink. An adapter may be user defined and may be written in a .NET programming language against an adapter application programming interface API . Query template bindings are further described with respect to . The query may include a directed graph of one or more operators . Operators may include but are not limited to projection operators windowing operators aggregation operators grouping operators join operators and selection operators. Operators may be payload specific validity start time specific validity end time specific or some combination thereof. Specific operator types are further described with respect to . The result object is produced based on an application of the operators of the query to the event object .

In a particular embodiment executing the query at the CEP query engine includes comparing event objects to static reference data retrieved from a static data source . Event objects may also be compared to historical data e.g. historical data of the source historical data of the sink historical data of the query or some other historical data from the static data source . In another particular embodiment executing the query at the CEP query engine includes storing data to the static data source .

In a particular embodiment the query represents a declarative query. Generally declarative programming languages indicate what is to be done e.g. what particular inputs will be provided and what particular outputs will be generated rather than how it is done e.g. the underlying algebra functions and the programmatic steps to convert the inputs into the outputs . Thus it may be easier for users to specify declarative queries as compared to non declarative queries because event level implementation details of declarative queries may not influence the result of declarative queries. For example a declarative query may be defined in a language integrated query LINQ language a .NET programming language other than LINQ or a complex event detection and response CEDR algebra. For example an illustrative LINQ query may include 

In a particular embodiment executing the query at the CEP query engine includes parsing the XML file representing the query in accordance with one or more XML schema definition XSD files. For example such XSD files useable to parse XML queries may be available from Microsoft Corp. at 1 Microsoft Way Redmond Wash. 98052.

In a particular embodiment the CEP query engine is configured to provide in flight processing of event objects. That is the CEP query engine may receive event objects execute the query and transmit produced result objects without storing the event objects or the result objects in a memory of the system . In a particular embodiment support for in flight processing enables the system to process hundreds of thousands of event objects per second or more.

The CEP output adapter at the system is configured to transmit results such as the result to the sink . The CEP output adapter is also configured to generate e.g. via translation or conversion the results based on result objects e.g. the result object received from the CEP query engine via the output stream . In a particular embodiment result objects received from the query engine are in the second data format native to the system and the results are formatted in a third data format e.g. another proprietary data format that is native to the sink . The sink may include a communications device a mobile device a computer system a database a server an event store or some other consumer of results produced by the system .

In a particular embodiment the CEP input adapter and the CEP output adapter are coupled to network interfaces such as a wired interface e.g. Ethernet a wireless interface e.g. IEEE 802.11a b g n or some other network interface. In another particular embodiment one or more of the source and the sink may be local to a computer system that includes the system of .

In a particular embodiment of operation the CEP input adapter may receive the event from the source and generate an event object based on the event . The event object includes an event payload and validity start end times . The CEP query engine may execute the query with respect to the event object to generate the result object . The query may be represented by an XML file that is based on a reusable XML query template e.g. generated based on a LINQ query . The CEP output adapter may generate a result based on the result object and may transmit the result to the sink

It will be appreciated that the system of may enable event processing using XML queries based on reusable XML query templates. Thus the system of may enable a user to define a query without reciting specific sources or sinks and without depending on technology specific operations associated with the specific sources or sinks. It will further be appreciated that the system of may provide such event processing functionality in various embodiments. For example the system of may be integrated into an embedded dynamically linked library DLL an executable file an operating system service or a server farm.

A first CEP input adapter at the system may receive events from the first source produce event objects based on the events and transmit the event objects to the CEP query engine as described herein with reference to the CEP input adapter of . Similarly a second CEP input adapter at the system may receive events from the second source produce event objects based on the events and transmit the event objects to the CEP query engine as described herein with reference to the CEP input adapter of .

The CEP query engine is configured to receive event objects from the CEP input adapters and execute the CEP queries with respect to the event objects to produce result objects . The CEP query engine is also configured to transmit the result objects to the CEP output adapters . The CEP queries may be represented by XML files and may be based on the same XML query template. That is the first CEP query may be an instantiation of the XML query template bound to the first CEP input adapter and the first CEP output adapter and the second CEP query may be an instantiation of the XML query template bound to the second CEP input adapter and the second CEP output adapter .

It should be noted that CEP queries may not be limited to producing a single result object for each event object. Depending on the particular operator s in the query any number of result objects may be produced from a single event object and any number of event objects may be consumed in producing a single result object. For example a result object may be produced by executing a query with respect to multiple events objects of a particular stream e.g. a first event object based on the first event and a second event object based on the third event .

In a particular embodiment when the CEP queries are instantiations of the same XML query template the event objects produced by the CEP input adapters are identically typed. The result objects transmitted to the CEP output adapters are also identically typed. For example if a directed graph of operators in the XML query template accepts as input one integer value and two floating point values each of the CEP input adapters produce event objects that include one integer value and two floating values as the event object payload. As another example if the directed graph of operators in the XML query template produces as an output a single Boolean value each of the CEP output adapters will accept result objects that include a single Boolean value as the result object payload. Thus any user defined input adapter and by extension event source may be bound to an XML query template provided that the user defined input adapter produces event objects that fulfill data type expectations of the XML query template. Similarly any user defined output adapter and by extension result sink may be bound to an XML query template provided that the user defined output adapter accepts result objects that include data types produced by the XML query template. It should be noted that although the particular embodiment illustrated in depicts identically typed event objects event objects from input adapters may be dissimilarly typed. For example when a query template is bound to multiple input streams that are combined via query logic e.g. a join operator the event objects transmitted by the input adapters may not be identically typed.

The first CEP output adapter at the system may receive result objects from the query engine produce results e.g. the first result based on the result objects and transmit the results to the first sink as described herein with reference to the CEP output adapter of . Similarly the second CEP output adapter at the system may receive result objects from the query engine produce results e.g. the second result based on the result objects and transmit the results to the second sink as described herein with reference to the CEP output adapter of .

In a particular embodiment of operation the first CEP input adapter may generate event objects based on events e.g. the first event and the third event received from the first source and the second CEP input adapter may generate event objects based on events e.g. the second event received from the second source . The event objects are identically typed. The CEP query engine may execute a first CEP query bound to the first CEP input adapter and to the first CEP output adapter to generate result objects that are transmitted to the first CEP output adapter . The CEP query engine may also execute a second CEP query bound to the second CEP input adapter and to the first CEP output adapter to generate result objects that are transmitted to the second CEP output adapter . The result objects may be identically typed. The first CEP output adapter may transmit results e.g. the first result to the first sink and the second CEP output adapter may transmit results e.g. the second result to the second sink

In a particular embodiment the first CEP query and the second CEP query execute simultaneously. In another particular embodiment the first CEP query executes during a first time period and the second CEP query executes during a second time period e.g. subsequent to the first time period .

It will be appreciated that the system of may enable the instantiation of multiple queries based on the same query template. It will further be appreciated that the instantiations and the input output adapters bound to the instantiations may execute simultaneously or successively.

A query template may be viewed as a computational assembly line where the input of the assembly line is attached to an input adapter and the output of the assembly line is attached to an output adapter. To illustrate the use of the query template consider a plurality of power meters configured to measure power consumption in watts by a particular machine component. Each of the power meters may function as an event source for an event processing system and my transmit power data to the event processing system in the form of events where events from a particular power meter include wattage readings from the particular power meter. The power meters may produce multiple event objects per second.

An input adapter of the event processing system may generate event objects e.g. the illustrative event object based on the power data . Each such event object may include as payload an integer power meter identifier ID and an integer wattage reading W a fixed point reading measured in tenths of Watts where the ID identifies the particular power meter that produced the wattage reading W. Each such event object includes a validity start time and a validity end time not shown .

The event objects generated by the input adapter may be transmitted to a query execution engine that is configured to execute a query based on the query template . That is the query execution engine may be configured to execute an instantiation of the query template that is bound to the input adapter and to an output adapter . The query template may include a directed graph of operators. For example in the particular embodiment illustrated in the operators include a projection operator a hopping window operator a grouping operator a first aggregation operator a second aggregation operator and a join operator . In general the query template may be configured to perform the following calculation logic First divide every received wattage value by 10 to convert the fixed point reading to Watts. Then apply a hopping window of one second to the objects. Next group the objects by power meter ID and average the wattage readings separately for each group i.e. average each power meter separately . Calculate the total sum of all such average values over all meters and use that calculated total sum to compute a ratio of wattage consumption reported by a particular power meter to overall wattage consumption i.e. how much power each machine component associated with each power meter contributes to the overall consumption of the machine . 

In accordance with the above logic during operation of the event processing system the projection operator may generate an intermediate value Wattage W 10. Next the hopping window operator may apply a one second window to the calculation e.g. collect event objects with validity start times within the last second . The grouping operator may then partition the collection of event objects by power meter ID and the aggregation operator may compute a value w for each power meter where w for a particular power meter represents the average power consumption of the particular power meter over the previous one second. The second aggregation operator may compute a value wSum that represents a sum of the w value for all power meters. Finally a join operator may compute a value Ratio w wSum representing the ratio of power consumption reported by the power meter associated with the event object to total power consumption of all power meters.

The query template may produce result objects e.g. the illustrative result object having as payload an integer power meter identifier ID a floating point wattage reading W and a floating point power consumption ratio Ratio . The result objects may be transmitted by the query execution engine to an output adapter and the output adapter may transmit result data to a client of the event processing system. For example the client may be a power throttling computer configured to selectively down throttle power provided to a particular machine component in response to receiving result data indicating that the particular machine component is consuming over 50 of total power.

The method includes at a system including a processor and a memory receiving a plurality of events from a source at . For example the plurality of events may be received periodically randomly intermittently in bursts or in some other fashion. For example in the system may receive a plurality of events including event from the source .

The method also includes generating a plurality of event objects based on the plurality of events at . For example in the CEP input adapter may generate a plurality of event objects including illustrative event object based on the plurality of events.

The method further includes at the processor executing a query with respect to the plurality of event objects to produce a plurality of result objects at . The query is executed without storing any of the plurality of event objects at the memory and the query is represented by an XML file that is based on a reusable XML query template. Each of the plurality of result objects is based on an application of at least one operator of the query. For example in the CEP query engine may execute the query with respect to the plurality of event objects to produce a plurality of result objects where the query is represented by an XML file based on a reusable XML query template. The result object may be produced by executing the query with respect to the event object including applying the operators of the query to the event object .

The method includes generating a plurality of results based on the plurality of result objects at . For example in the CEP output adapter may generate a plurality of results including illustrative result based on the plurality of result objects. The method also includes transmitting the plurality of results to a sink at . For example in the plurality of results may be transmitted to the sink .

The method includes at a system receiving at least one event from a source where the event is represented in a first data format that is native to the source at . For example in the CEP input adapter may receive the event from the source where the event is represented in a first data format that is native to the source .

The method also includes converting the at least one event from the first data format to at least one event object formatted in a second data format at . The at least one event object includes a payload a validity start time and a validity end time. For example in the CEP input adapter may convert the event to the event object where the event object is formatted in a second data format and includes the event payload and the event validity start end times .

The method further includes executing a query with respect to the at least one event object to produce a result object at . The query is executed without storing the at least one event object and the query is represented by an XML file that is based on a reusable XML query template. The result object is produced based on an application of at least one operator of the query and is formatted in the second data format. For example in the CEP query engine may execute the query with respect to the event object to produce the result object without storing the event object where the query is represented by an XML file based on a reusable XML query template and where the result object is produced based on application of the operators to the event object . The result object may be formatted in the second data format.

The method includes converting the at least one result object from the second data format to at least one result formatted in a third data format that is native to a sink at . For example in the CEP output adapter may convert the result object to the result where the result is formatted in a third data format that is native to the sink . The method includes transmitting the at least one result to the sink at . For example in the CEP output adapter may transmit the result to the sink .

It will be appreciated that with a reusable query template the method of may enable users to reuse the XML query template with a new source or a new sink by simply encapsulating the conversion logic to translate to and from the data of the new source or the new sink into a new input adapter or a new output adapter.

The computing device includes at least one processor and a system memory . Depending on the configuration and type of computing device the system memory may be volatile such as random access memory or RAM non volatile such as read only memory or ROM flash memory and similar memory devices that maintain stored data even when power is not provided or some combination of the two. The system memory typically includes an operating system one or more application platforms one or more applications e.g. a query engine and may include program data associated with the one or more applications. In an illustrative embodiment the query engine is the CEP query engine of or the CEP query engine of .

The computing device may also have additional features or functionality. For example the computing device may also include removable and or non removable additional data storage devices such as magnetic disks optical disks tape and standard sized or miniature flash memory cards. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and or non volatile storage and removable and or non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program components or other data. The system memory the removable storage and the non removable storage are all examples of computer storage media. The computer storage media includes but is not limited to RAM ROM electrically erasable programmable read only memory EEPROM flash memory or other memory technology compact disks CD digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store information and that can be accessed by the computing device . Any such computer storage media may be part of the computing device .

The computing device also contains one or more communication connections that allow the computing device to communicate with other computing devices e.g. an input source an output sink and a static data source over a wired or a wireless network. In an illustrative embodiment the communication connections include the adapters of or the adapters of . In another illustrative embodiment the source is the source of the first source of or the second source of . In another illustrative embodiment the sink is the sink of the first sink of or the second sink of . In another illustrative embodiment the static data source is the static data source of .

It will be appreciated that not all of the components or devices illustrated in or otherwise described in the previous paragraphs are necessary to support embodiments as herein described. For example the removable storage and non removable storage may be optional.

The illustrations of the embodiments described herein are intended to provide a general understanding of the structure of the various embodiments. The illustrations are not intended to serve as a complete description of all of the elements and features of apparatus and systems that utilize the structures or methods described herein. Many other embodiments may be apparent to those of skill in the art upon reviewing the disclosure. Other embodiments may be utilized and derived from the disclosure such that structural and logical substitutions and changes may be made without departing from the scope of the disclosure. Accordingly the disclosure and the figures are to be regarded as illustrative rather than restrictive.

Those of skill would further appreciate that the various illustrative logical blocks configurations modules and process or instruction steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware computer software or combinations of both. Various illustrative components blocks configurations modules or steps have been described generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present disclosure.

The steps of a method described in connection with the embodiments disclosed herein may be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module may reside in computer readable media such as random access memory RAM flash memory read only memory ROM registers a hard disk a removable disk a CD ROM or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor or the processor and the storage medium may reside as discrete components in a computing device or computer system.

Although specific embodiments have been illustrated and described herein it should be appreciated that any subsequent arrangement designed to achieve the same or similar purpose may be substituted for the specific embodiments shown. This disclosure is intended to cover any and all subsequent adaptations or variations of various embodiments.

The Abstract of the Disclosure is provided with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description various features may be grouped together or described in a single embodiment for the purpose of streamlining the disclosure. This disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter may be directed to less than all of the features of any of the disclosed embodiments.

The previous description of the embodiments is provided to enable a person skilled in the art to make or use the embodiments. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other embodiments without departing from the scope of the disclosure. Thus the present disclosure is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope possible consistent with the principles and novel features as defined by the following claims.

