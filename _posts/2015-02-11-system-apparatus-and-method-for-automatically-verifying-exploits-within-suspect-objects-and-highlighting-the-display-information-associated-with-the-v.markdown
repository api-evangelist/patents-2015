---

title: System, apparatus and method for automatically verifying exploits within suspect objects and highlighting the display information associated with the verified exploits
abstract: A threat detection system is integrated with intrusion protection system (IPS) logic, virtual execution logic and reporting logic is shown. The IPS logic is configured to identify a first plurality of objects as suspicious objects and outputting information associated with the suspicious objects. The virtual execution logic is configured to receive the suspicious objects and verify whether any of the suspicious objects is an exploit. The virtual execution logic includes at least one virtual machine configured to virtually process content within the suspicious objects and monitor for anomalous behaviors during the virtual processing that are indicative of exploits. The reporting logic is configured to issue a report including the information associated with the suspicious objects from the IPS logic and results of the virtual processing of the content within the suspicious objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09306974&OS=09306974&RS=09306974
owner: FireEye, Inc.
number: 09306974
owner_city: Milpitas
owner_country: US
publication_date: 20150211
---
This application is a divisional of U.S. patent application Ser. No. 14 228 073 filed Mar. 27 2014 which claims the benefit of priority on U.S. Provisional Application No. 61 921 033 filed Dec. 26 2013 the entire contents of both of which are incorporated by reference herein.

Embodiments of the disclosure relate to the field of network security. More specifically one embodiment of the disclosure relates to a system apparatus and method for identifying a suspicious object automatically verifying the suspect object as an exploit through virtual processing.

Over the last decade malicious software has become a pervasive problem for Internet users as most networked resources include software vulnerabilities that are subject to attack. For instance over the past few years more and more vulnerabilities are being discovered in software that is loaded onto network devices such as vulnerabilities within operating systems for example. While some vulnerabilities continue to be addressed through software patches prior to the release of such software patches network resources continue to be the targeted by exploits.

In general an exploit is information that attempts to take advantage of a vulnerability in computer software by adversely influencing or attacking normal operations of a targeted computer. As an illustrative example a Portable Execution Format PDF file may be infected with an exploit that is activated upon execution opening of the PDF file and takes advantage of a vulnerability associated with Acrobat Reader version 9.0.

Currently one type of security application widely used for detecting exploits is an intrusion prevention system IPS . Typically implemented as part of a firewall an IPS is designed to identify packets suspected of containing known exploits attempt to block halt propagation of such exploits and log report information associated with such packets through an alert. However conventional IPS technology suffers from a number of disadvantages.

One disadvantage with conventional IPS technology in that the IPS does not rely on any mechanism to automatically verify its results. Rather verification of the results produced from a conventional IPS is handled manually.

Another disadvantage is that without automated verification the IPS tends to produce a large number of false positives namely incorrect alerts that occur when the IPS reports certain benign objects as exploits. These false positives cause a variety of adverse effects. For instance due to the large number of false positives one adverse effect is that actual exploits detected within network traffic may go unnoticed by an administrator. Other adverse effects may include i needless blocking of incoming network traffic ii unnecessarily reduction of processing resources iii significant drainage of administrative resources to handle incorrectly classified objects and iv development of a culture or policy of sporadically checking only some of the suspect objects.

In efforts to mitigate the number of false positives the IPS may frequently require customized and periodic tuning of its signature database which is a costly endeavor. Furthermore simply tuning the IPS to significantly reduce the number of false positives can severely degrade the effectiveness of the IPS and or severely disrupt network operability.

Various embodiments of the disclosure relate to an electronic device with network connectivity such as a threat detection and prevention TDP system for example where the electronic device comprises a static analysis engine a dynamic analysis engine and reporting logic. According to one embodiment of the disclosure the static analysis engine comprises intrusion protection system IPS logic that conducts at least exploit signature checks and or vulnerability signature checks on objects under analysis to identify whether characteristics of any of these objects are indicative of an exploit. Those objects with these identified characteristics are label suspect or suspicious objects. The dynamic analysis engine comprises virtual execution logic to automatically and subsequently analyze without user assistance content within suspect objects provided from the IPS logic in order to possibly verify whether any of the suspect objects is an exploit.

Based on analysis results from the IPS logic and the virtual execution logic reporting logic within the TDP system generates a report e.g. one or more display screens printed report etc. that highlights information associated with these verified exploits namely suspect objects initially identified by the IPS logic that have been verified by the virtual execution logic to be exploits. Some or all of the information associated with the verified exploits referred to as verified exploit information may be highlighted to visibly denote the verified exploits from the non verified exploits namely suspect objects initially identified by the IPS logic that have not been verified by the virtual execution logic. Examples as to how the verified exploit information is highlighted may include 1 altering location or ordering of at least certain portions of the verified exploit information to prominently display such information within the report 2 modifying the font e.g. color size type style and or effects used in conveying some of the verified exploit information 3 placement of one or more images proximate to a listing of the verified exploit information or the like.

In the following description certain terminology is used to describe features of the invention. For example in certain situations both terms logic and engine are representative of hardware firmware and or software that is configured to perform one or more functions. As hardware logic or engine may include circuitry having data processing or storage functionality. Examples of such circuitry may include but is not limited or restricted to a microprocessor one or more processor cores a programmable gate array a microcontroller an application specific integrated circuit wireless receiver transmitter and or transceiver circuitry semiconductor memory or combinatorial logic.

Logic or engine may be software in the form of one or more software modules such as executable code in the form of an executable application an application programming interface API a subroutine a function a procedure an applet a servlet a routine source code object code a shared library dynamic load library or one or more instructions. These software modules may be stored in any type of a suitable non transitory storage medium or transitory storage medium e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals or digital signals . Examples of non transitory storage medium may include but are not limited or restricted to a programmable circuit a semiconductor memory non persistent storage such as volatile memory e.g. any type of random access memory RAM persistent storage such as non volatile memory e.g. read only memory ROM power backed RAM flash memory phase change memory etc. a solid state drive hard disk drive an optical disc drive or a portable memory device. As firmware the executable code is stored in persistent storage.

The term object generally refers to a collection of data whether in transit e.g. over a network or at rest e.g. stored often having a logical structure or organization that enables it to be classified for purposes of analysis. During analysis for example the object may exhibit a set of expected characteristics and during processing a set of expected behaviors. The object may also exhibit a set of unexpected characteristics and a set of unexpected behaviors that may evidence an exploit and potentially allow the object to be classified as an exploit.

Examples of objects may include one or more flows or a self contained element within a flow itself. A flow generally refers to related packets that are received transmitted or exchanged within a communication session. For convenience a packet is broadly referred to as a series of bits or bytes having a prescribed format which may include packets frames or cells.

As an illustrative example an object may include a set of flows such as 1 a sequence of transmissions in accordance with a particular communication protocol e.g. User Datagram Protocol UDP Transmission Control Protocol TCP or Hypertext Transfer Protocol HTTP etc. or 2 inter process communications e.g. Remote Procedure Call RPC or analogous processes etc. . Similar as another illustrative example the object may be a self contained element where different types of such objects may include an executable file non executable file such as a document or a dynamically link library a Portable Document Format PDF file a JavaScript file Zip file a Flash file a document for example a Microsoft Office document an electronic mail email downloaded web page an instant messaging element in accordance with Session Initiation Protocol SIP or another messaging protocol or the like.

An exploit may be construed broadly as information e.g. executable code data command s etc. that attempts to take advantage of a software vulnerability. Typically a vulnerability is a coding error or artifact of software e.g. computer program that allows an attacker to alter legitimate control flow during processing of the software computer program by an electronic device and thus causes the electronic device to experience undesirable or unexpected behaviors. The undesired or unexpected behaviors may include a communication based anomaly or an execution based anomaly which for example could 1 alter the functionality of an electronic device executing application software in a malicious manner 2 alter the functionality of the electronic device executing that application software without any malicious intent and or 3 provide unwanted functionality which may be generally acceptable in another context. To illustrate a computer program may be considered as a state machine where all valid states and transitions between states are managed and defined by the program in which case an exploit may be viewed as seeking to alter one or more of the states or transitions from those defined by the program.

Malware may be construed broadly as computer code that executes an exploit to take advantage of a vulnerability for example to harm or co opt operation of an electronic device or misappropriate modify or delete data. Conventionally malware is often said to be designed with malicious intent. An object may constitute or contain malware.

The term transmission medium is a physical or logical communication path between two or more electronic devices e.g. any devices with data processing and network connectivity such as for example a security appliance a server a mainframe a computer such as a desktop or laptop netbook tablet firewall smart phone router switch bridge etc. . For instance the communication path may include wired and or wireless segments. Examples of wired and or wireless segments include electrical wiring optical fiber cable bus trace or a wireless channel using infrared radio frequency RF or any other wired wireless signaling mechanism.

In certain instances the terms detected and verified are used herein to represent that there is a prescribed level of confidence or probability on the presence of an exploit within an object under analysis. For instance the IPS logic described below detects a potential exploit by examining characteristics or features of an object under analysis and in response determining whether the object has characteristics indicative of an exploit a suspect object . This determination may be conducted through analysis as to whether there exists at least a first probability of the object under analysis being an exploit. Likewise the virtual execution logic verifies the presence of the exploit by monitoring or observing unexpected or anomalous behaviors or activities and in response determining that suspect object is an exploit. According to one embodiment of the disclosure the determination by the virtual execution logic may involve an analysis as to whether there exists a second probability of the suspect exploit being an exploit. The second probability may be greater than the first probability and may take into account the first probability.

The term computerized generally represents that any corresponding operations are conducted by hardware in combination with software and or firmware. Also the terms compare or comparison generally mean determining if a match e.g. a certain level of correlation is achieved between two items where one of the items may include a particular signature pattern.

Lastly the terms or and and or as used herein are to be interpreted as inclusive or meaning any one or any combination. Therefore A B or C or A B and or C mean any of the following A B C A and B A and C B and C A B and C. An exception to this definition will occur only when a combination of elements functions steps or acts are in some way inherently mutually exclusive.

The invention may be utilized for detection verification and or prioritization of malicious content such as exploits. As this invention is susceptible to embodiments of many different forms it is intended that the present disclosure is to be considered as an example of the principles of the invention and not intended to limit the invention to the specific embodiments shown and described.

Referring to an exemplary block diagram of an operational flow of threat detection and prevention within an electronic device is shown. Herein some or all of the incoming objects associated with monitored network traffic are received by IPS logic which is part of the static analysis engine of for example. The IPS logic is configured as a capture and filter device that receives the incoming objects and filters using at least exploit signatures and or vulnerability signatures which objects are to be provided for more in depth analysis. The exploit signatures and or vulnerability signatures may be updated in a periodic or aperiodic manner.

More specifically a suspected exploit may be detected by conducting exploit signature checks and or vulnerability signature checks namely comparing an object under analysis to one or more pre stored exploit signatures and or vulnerability signatures to determine if a match is detected. In general an exploit signature includes information directed to a previously detected or known attack pattern while a vulnerability signature includes information that characterizes a potential attempt to capitalize on a previously detected or known vulnerability even when no specific exploit for that vulnerability is known. According to one embodiment of the disclosure the vulnerability signature may be considered a protocol state machine that maintains state and is normally configured to define parameters for an object being a set of flows that represent an attempt being made to capitalize on a particular software vulnerability that the vulnerability signature is attempting to protect.

Upon conducting at least exploit signature checks and or vulnerability signature checks on the incoming objects and identifying a first subset of objects having characteristics indicative of an exploit suspect objects the IPS logic provides the first set of suspect objects to verification logic and provides results of its analysis referred to herein as IPS based results to reporting logic for storage and subsequent access.

It is contemplated that the first subset of objects may be lesser in number and potentially significantly less in number than the incoming objects . For example while the first subset of objects may be a stream of objects for ease of discussion in this section the first subset of objects may refer to at least one incoming object initially suspected of being an exploit e.g. a suspect object matches a pre stored exploit signature or a vulnerability signature . Hence the IPS logic routes the suspect object to verification logic and outputs the IPS based results associated with suspect object to reporting logic .

The IPS based results may provide details directed to one or more suspected exploits within the suspect object . As an example the details may include i an exploit identifier such as a particular name family of the suspected exploit if known ii source address e.g. Uniform Resource Locator URL Internet Protocol IP address etc. of the electronic device sending the suspect object iii time of analysis iv information associated with anticipated anomalous activities that may be conducted by the suspected exploit v information regarding anticipated communication deviations from the protocol applicable to the network traffic and or vi recommended remediation techniques for this type of exploit.

As mentioned above the suspect object is routed to verification logic e.g. virtual execution logic being part of a dynamic analysis engine as illustrated in . The verification logic attempts to verify whether the suspect object is an exploit by virtual processing content within the suspect object and monitoring behaviors during such virtual processing as described below.

The results of this analysis are output from the verification logic for subsequent use by reporting logic in generating a report that visibly denotes and filters the suspect objects from the first set of objects that have been verified verified exploits from those suspect objects from the first set of objects that have not been verified non verified exploits . Although not illustrated in the VM based results may include 1 the suspect object 2 time of analysis 3 one or more scores that may be used to verify that the suspect object is likely an exploit and if so i the exploit identifier ii characteristics or anomalous behaviors associated with the verified exploit which may include video images of anomalous behaviors and or iii name and or version number of software detected to be vulnerable to the verified exploit.

Thereafter at least portions of the IPS based results and the VM based results for the suspect object are combined. More specifically in the event that the VM based results indicate that the verification logic failed to verify that the suspect object is an exploit e.g. a computed score below a prescribed threshold some or all of the IPS based results and the VM based results for that object are combined and added as part of non verified exploit information for storage and use by the reporting logic .

However when the VM based results indicate that the verification logic has verified that the suspect object is an exploit e.g. the computed score is equal to or above a prescribed threshold some or all of the IPS based results and the VM based results may be modified to achieve a highlighted display of at least the verified exploits. For example certain portions of the results and or may be associated with display commands which are recognized by a display controller being part of display logic within the reporting logic and causes the display logic to produce an output that may visibly denotes differences between displayed results associated with verified exploits from displayed results associated with the non verified exploits. This exploit information associated with the verified exploit may be stored as part of the verified exploit information .

The display logic also may be configured to recognize that the verified exploit information is to be displayed more prominently than the non verified exploit information . For instance display logic may be configured to prominently display the verified exploit information within different display screens within different display windows within a certain section of a display screen or positioned at a top of a listing. Additionally or in the alternative at least a portion of the verified exploit information for each verified exploit may be conveyed using a different font e.g. color size type style and or effects than the font used for conveying exploit information associated with non verified exploits. Additionally or in the alternative one or more images may be placed proximate to exploit information associated with each verified exploit. Illustrative examples of screen displays are shown in .

Besides displaying the exploit information the reporting logic may issue an alert e.g. by email or text message to security administrators for example communicating the urgency in handling one or more verified exploits. The reporting logic may also issue alerts for one or more non verified exploits by providing alerts in a manner that denotes to users a selected threat level.

As further shown the IPS logic may be communicatively coupled to a network e.g. public or private network to receive incoming objects such as one or more flows for example destined for a particular client device. The IPS logic is configured to conduct exploit signature checks and or vulnerability signature checks on the incoming objects to determine whether any of the objects have characteristics indicative of an exploit and thereafter provide the suspect object s to verification logic .

According to one embodiment of the disclosure the communicative coupling between the IPS logic and the verification logic is provided in a sideband configuration where the suspect object s or a copy thereof may be temporarily stored and processed in the verification logic concurrently with analysis of other objects by the IPS logic . This allows for the detection of exploits through a longer duration of analysis by the verification logic e.g. longer processing and monitoring of processing of the suspect object within the virtual execution logic . This also allows detection of exploits with delayed activation including time bombs. However it is contemplated that the IPS logic may be configured in line with verification logic as shown in . Herein the IPS logic may provide both the suspect objects and IPS based results to the verification logic where the IPS based results may be subsequently routed to reporting logic from the verification logic .

Referring to an exemplary block diagram of a communication system deploying a plurality of threat detection and prevention TDP systems N 1 e.g. N 3 communicatively coupled to a management system via a network is shown. In general management system is adapted to manage TDP systems . For instance management system is responsible for automatically updating one or more exploit signatures and or vulnerability signatures used by IPS logic within some or all of TDP systems . Each of these signatures may represent a prior detected exploit or an uncovered software vulnerability. Such sharing may be conducted automatically or manually uploaded by an administrator. Also such sharing may be conducted freely among the TDP systems or subject to a subscription basis.

Herein according to the embodiment illustrated in a first TDP system is an electronic device that is adapted to analyze information associated with network traffic routed over a communication network between at least one server device and at least one client device . The communication network may include a public network such as the Internet in which case an optional firewall represented by dashed lines may be interposed prior to accessing client device . Alternatively the communication network may be a private network such as a wireless data telecommunication network wide area network a type of local area network LAN or a combination of networks.

As shown the first TDP system may be communicatively coupled with the communication network via a network interface . In general the network interface operates as a data capturing device sometimes referred to as a tap or network tap that is configured to receive data propagating to from the client device and provide at least some of this data to the first TDP system . Alternatively as shown in the first TDP system may be positioned behind the firewall and in line with client device .

According to one embodiment of the disclosure the network interface is capable of receiving and routing objects associated with network traffic to the first TDP system . The network interface may provide the entire object or certain content within the object for example one or more files that are part of a set of flows packet payloads or the like. In some embodiments although not shown network interface may be contained within the first TDP system .

According to an embodiment of the disclosure the network interface may be further configured to capture metadata from network traffic intended for client device . According to one embodiment the metadata may be used at least in part to determine protocols application types and other information that may be used by logic within the first TDP system to determine particular software profile s . The software profile s are used for selecting and or configuring a run time environment in one or more virtual machines selected or configured as part of the dynamic analysis engine as described below. However according to another embodiment a matched vulnerability signature may be used for VM configuration to specify software profile s or corresponding software image s having the specific vulnerability associated with the matched vulnerability signature. These software profile s may be directed to different versions of the same software application for fetching corresponding software image s from storage device .

It is contemplated that for any embodiments where the first TDP system is implemented as an dedicated appliance or a dedicated computer system the network interface may include an assembly integrated into the appliance or computer system that includes a network interface card and related logic not shown for connecting to the communication network to non disruptively tap network traffic propagating through firewall and provide either a duplicate copy of at least a portion of the network traffic or at least a portion the network traffic itself to a static analysis engine . In other embodiments the network interface can be integrated into an intermediary device in the communication path e.g. firewall router switch or other networked electronic device which in some embodiments may be equipped with SPAN ports or can be a standalone component such as an appropriate commercially available network tap. In virtual environments a virtual tap vTAP can be used to duplicate files from virtual networks.

As further shown in the first TDP system comprises the static analysis engine a database a scheduler a storage device a dynamic analysis engine an optional classification logic and a display logic . It is contemplated that the functionality of the classification logic may be integrated into the display logic where the display logic would be configured with the prioritization logic and or the tag image generation logic .

In some embodiments as shown in static analysis engine may include one or more software modules that when executed by one or more processors performs multi level static scanning on a particular object namely exploit signature checks and or vulnerability signature checks by IPS logic . Such signature check operations may involve accessing pre stored signatures from one or more non transitory storage mediums such as signature database . The static analysis engine and the dynamic analysis engine may be one or more software modules executed by the same processor or different processors where these different processors may be located within the same processor package e.g. different processor cores and or located at remote or even geographically remote locations that are communicatively coupled e.g. by a dedicated communication link or a network.

In general referring to the static analysis engine is communicatively coupled to receive one or more objects from network traffic which may be related or unrelated to each other. For instance one object may be a series of HTTP packets operating as a flow routed over communication network . The static analysis engine comprises IPS logic where the IPS logic analyzes each of the objects for known exploits using exploit signatures as well as for the protocol activity using vulnerability signatures. For instance the exploit matching logic within the IPS logic performs exploit signature checks which may involve a comparison of one or more pre stored exploit signatures pre configured and predetermined attack patterns against the suspect object from signature database . Similarly the signature matching logic within the IPS logic performs vulnerability signature checks which may involve a process of uncovering deviations in messaging practices set forth in applicable communication protocols e.g. HTTP TCP etc. . As an illustrative example HTTP messages may be analyzed to determine compliance with certain message formats established for the protocol e.g. out of order commands . Furthermore payload parameters of the HTTP messages may be analyzed to determine further compliance.

Upon detecting a match during the exploit signature check and or the vulnerability signature check an object under analysis has characteristics that suggest the object is an exploit the IPS logic may be adapted to upload the IPS based results for storage in database . These results may include but are not limited or restricted to i an exploit identifier such as a particular name family of the suspected exploit if known ii source address e.g. Uniform Resource Locator URL Internet Protocol IP address etc. of a source of the suspect object iii time of analysis iv information associated with anticipated anomalous activities that may be conducted by the suspect exploit v information regarding anticipated communication deviations from the protocol applicable to the network traffic and or vi recommended remediation techniques. The IPS based results may be accessible by classification logic and or display logic as described below.

Furthermore the IPS logic routes suspect object to the virtual execution logic within dynamic analysis engine . The dynamic analysis engine is configured to provide more in depth analysis of suspect object s from the IPS logic by analyzing the content of the suspect object s in order to verify whether or not the suspect object is an exploit. Additionally according to one embodiment of the disclosure a tag value may accompany or be associated with the suspect object for use in subsequently locating the suspect object s corresponding stored IPS based results after virtual processing within the dynamic analysis engine . For instance the tag value may be an address an index number or the like. It is contemplated that tag value may be separate from the suspect object or may be strategically placed within the suspect object itself e.g. within a header portion payload etc. .

More specifically after static scanning has been completed the IPS logic provides the suspect object to the dynamic analysis engine for in depth dynamic analysis using virtual machines VMs M 1 . For instance the dynamic analysis engine may simulate transmission and or receipt by a destination device comprising the virtual machine. Of course if the object is not suspected of being an exploit the IPS logic may simply store the IPS based results within database and denote that the object is benign.

According to one embodiment one or more VMs within the virtual execution environment may be configured based on the results of the exploit signature check and the vulnerability signature check conducted by the IPS logic . For instance for an unknown vulnerability the VMs may be configured with all of the software profiles corresponding to the software images stored within storage device . Alternatively the VMs may be configured according to a prevalent software configuration software configuration used by an electronic device within a particular enterprise network e.g. client device or an environment that is required for the object to be processed including software such as a web browser application PDF reader application or the like. However for a known vulnerability which occurs after a successful match during a vulnerability signature check the VMs may be more narrowly configured to software profiles associated with vulnerable software.

As a first illustrative example upon determining that the suspect object matches a particular vulnerability signature the scheduler may determine 1 what vulnerability signature has been tagged 2 if the vulnerability is a server side vulnerability or client side vulnerability and or 3 which software image s are associated with software having the vulnerability associated with the tagged vulnerability signature. Thereafter the software profile s are selected by the scheduler to fetch these software image s for configuration of VM . This tailored selection scheme avoids VM configuration for software that does not feature the matched tagged software vulnerability.

As a second illustrative example the scheduler may be adapted to configure the multiple VMs for concurrent virtual execution of a variety of different versions of the software in efforts to verify that the suspect object identified by the signature matching logic is an exploit.

Of course it is contemplated that the VM configuration described above may be handled by logic other than the scheduler . For instance although not shown the static analysis engine may include configuration logic that is adapted to determine 1 what vulnerability signature was tagged 2 if the vulnerability is a server side vulnerability or client side vulnerability and or 3 which software image s are associated with software having the vulnerability associated with the tagged vulnerability signature. This configuration logic may transmit the VM configuration information to the scheduler and or dynamic analysis engine to handle VM configuration as described above.

According to one embodiment of the disclosure the dynamic analysis engine is adapted to execute one or more VMs to simulate the receipt and execution of content associated with an object under analysis within a run time environment as expected by the type of object. For instance dynamic analysis engine may optionally include a protocol sequence replayer replay logic to replay the suspect object and provide replayed data flows to the VM s . . . and or or object extractor logic to extract a self contained object within a data flow for virtual processing by VM s . . . and or . One embodiment of the protocol sequence replayer is described in U.S. Pat. No. 8 375 444 the entire contents of which are incorporated by reference herein.

For example the replay logic may be adapted to provide and sometimes modify e.g. modify IP address etc. packets associated with the suspect objects and synchronize any return network traffic generated by the virtual execution environment in response to the packets. Hence the replay logic may suppress e.g. discard the return network traffic such that the return network traffic is not transmitted to the communication network . According to one embodiment of the disclosure for a particular suspect object being a flow such as a TCP or UDP sequence the replay logic may replay the data packets by sending packets to the virtual execution environment via a TCP connection or UDP session. Furthermore the protocol sequence replay logic synchronizes return network traffic by terminating the TCP connection or UDP session.

As further shown in the monitoring logic within the dynamic analysis engine may be configured to monitor behavior of the content being analyzed by one or more VMs . . . and or for detecting anomalous or unexpected activity indicative of an exploit. If so the content may be determined as being associated with malicious activity and thereafter monitoring logic operating with a score determination logic may route the VM based results e.g. computed score information associated with the detected anomalous behaviors and other information associated with the detected malicious activity by the suspect object to classification logic and or database . It is noted that the tag value if used may be provided as part of the VM based results .

According to one embodiment of the disclosure the score determination logic comprises one or more software modules that are used to determine a probability or level of confidence that the suspect object is an exploit. Score determination logic is configured to generate a value referred to as a score that classifies the threat of the possible exploit. Of course a score may be assigned to the suspect object as a whole by mathematically combining the scores determined by analysis of different content associated with the same suspect object to obtain an overall score for that suspect object. Thereafter the suspect object and or score are routed to classification logic for use in prioritization.

In general the classification logic may be configured to receive the VM based results . According to one embodiment of the disclosure the score may be used at least in part to determine whether the virtual execution logic has verified that the suspect object is an exploit. Where the score represents that the suspect object has not been verified by the virtual execution logic to have the characteristics of an exploit some or all of the VM based results may be combined with its corresponding IPS based results to produce the non verified exploit information which is stored in database .

However if the score represents that the suspect object has been verified by the virtual execution logic as an exploit at least some of the combined IPS based results and or the VM based results may be modified by the classification logic and subsequently stored as at least part of the verified exploit information . Stated differently the classification logic operating with the database may be responsible for prioritizing the display of exploit information associated with the verified exploits. This may involve the classification logic modifying order or position for the displayed verified exploit information or adding information to the verified exploit information that is used by the display logic to modify display order or positioning modifying the type of font e.g. color size type style and or effects used for text conveying certain verified exploit information placing one or more images proximate to verified exploit information for each verified exploit or the like.

Of course it is contemplated that other parameters combined with or separate from the score may be used or relied upon to determine whether and or how to highlight display of the exploit information associated with the suspect object.

Thereafter along with non verified exploit information the verified exploit information is stored within database and accessible by display logic .

More specifically according to one embodiment of the disclosure classification logic comprises prioritization logic and tag image generation logic . According to one embodiment of the disclosure the prioritization logic may be adapted to modify e.g. alter or associate display commands to exploit information associated with verified exploits based one or more factors including i score associated with the object ii source of the object iii repeated detection of the same exploit in different suspect objects or the like. This modification may involve modifying font e.g. color size type style and or effects used to convey the exploit information associated with verified exploits. As another example this modification may involve classification and storage of the exploit information as verified exploit information which when accessed by the display logic places the exploit information associated with the verified exploit at a specific location on a display screen or within display image e.g. within a specific window or display screen listing the verified exploits at a particular order within the listing of the verified and non verified exploits etc. .

Of course as an alternative the display logic may be implemented with some or all of the functionality associated with the prioritization logic and or tag image generation logic in lieu of deployment within the classification logic . Hence responsive to information received from the classification logic the display logic may be adapted to modify exploit information associated with verified exploits.

The tag image generation logic may be adapted to operate in combination with the prioritization logic to generate a tag image not shown which is included as part of the verified exploit information associated with suspect object for display. The tag image is used to provide another visual representation of the presence of a verified exploit namely a suspected exploit detected by the IPS logic whose presence has been verified by the virtual execution logic .

Of course in lieu of or in addition to static scanning operations being conducted by TDP systems it is contemplated that cloud computing services may be implemented with IPS logic to perform the exploit and or vulnerability signature checks and or with virtual execution logic to conduct virtual execution on content within the object under analysis as described herein. The display logic may cause the display of the exploit information associated with the verified exploits and or non verified exploits graphically or otherwise through a downloaded page or pages from the cloud computing services to a client device or to an application running on a client device that displays the results obtained from the cloud computing services . In accordance with this embodiment TDP system may be adapted to establish secured communications with cloud computing services for exchanging information.

Referring now to first TDP system may be coupled with the communication network in line with client device . Contrary to the embodiment illustrated in first TDP system comprises an interface unit that directs signaling on communication network to static analysis engine or classification logic given that the dynamic analysis engine is deployed in cloud computing services . Hence objects from network traffic for static analysis are routed to static analysis engine via communication path . The suspicious objects may be routed via path to the dynamic analysis engine in cloud computing services . Similarly objects that are not determined to be at least suspect may be returned via path for continued routing to client device . The results of the dynamic analysis engine e.g. exploit information may be routed via path for prioritization and tagging before storage within database for subsequent use by display logic .

Referring now to an exemplary block diagram of logic associated with TDP system of is shown. TDP system comprises one or more processors that are coupled to communication interface logic via a first transmission medium . Communication interface logic enables communications with other TDP systems and management system of . According to one embodiment of the disclosure communication interface logic may be implemented as a physical interface including one or more ports for wired connectors. Additionally or in the alternative communication interface logic may be implemented with one or more radio units for supporting wireless communications with other electronic devices.

Processor s is further coupled to persistent storage via transmission medium . According to one embodiment of the disclosure persistent storage may include i static analysis engine including first analysis logic e.g. IPS logic ii the dynamic analysis engine including virtual execution logic monitoring logic score determination logic along with optional replay and object extractor logic and iii classification logic including prioritization logic and tag image generation logic and iv display logic . Of course when implemented as hardware one or more of these logic units could be implemented separately from each other.

IPS logic comprises one or more software modules that conduct a first static analysis on each incoming object. As described above this analysis may involve performing at least exploit signature checks and vulnerability signature checks on each incoming object to determine whether characteristics of any of these objects are indicative of an exploit. If not the analysis may be discontinued for the object or the object may be provided for non real time forensic review. Upon confirming that one or more suspect objects have characteristics of an exploit the IPS logic provides the suspect object s to the virtual execution logic . It is contemplated that a tag value if used may accompany or be associated with the suspect object to identify a stored location of the IPS based results for the suspect object as described above. The IPS based results are uploaded to data store at least partially operating as a database for subsequent access by classification logic .

Virtual execution environment comprises one or more software modules that are used for performing an in depth dynamic and real time analysis of the suspect object using one or more VMs. More specifically the virtual execution environment protocol sequence replay logic and or object extractor logic are adapted to run the VM s which virtually processes the content associated with the suspect objects by simulating receipt and execution of such content in order to determine the presence of one or more exploits. Furthermore the monitoring logic monitors in real time and may also log at least anomalous behaviors by the VM s configured with certain software and features that are presumably targeted by the matched exploit or vulnerability. In essence the monitoring logic identifies the effects that the suspect object would have had on a physical electronic device with the same software feature configuration. Such effects may include unusual network transmissions unusual changes in performance and the like.

Thereafter according to the observed behavior of the virtually executed content the monitoring logic may determine that the content is associated with one or more exploits where the severity of the observed anomalous behavior and or the likelihood of the anomalous behavior results from an exploit is evaluated and reflected in a score assigned by the score determination logic . As a result these logic units collectively output the VM based results for use by classification logic to highlight exploit information associated with verified exploits.

The prioritization logic comprises one or more software modules that are used to highlight information associated with verified exploits namely the verified exploit information . For instance the prioritization logic may assign higher priority to exploit information directed to verified exploits where the priority may be used by the display logic to determine an order or location for display. Furthermore the prioritization logic may be adapted to modify the font used in display of the verified exploit information e.g. color size type style and or effects or control the placement of one or more images provided by the tag image generation logic proximate to its corresponding exploit information.

Continuing the above example processor s may invoke display logic which produces one or more screen displays for conveying a detailed summary of verified and or non verified exploits detected by the TDP system . According to one embodiment of the disclosure the information associated with the verified exploits verified exploit information may be presented in a first area of a display screen while information associated with the non verified exploits non verified exploit information may be presented in a second area of the display screen. As another example the verified exploit information may be presented as top entries in a listing of all exploits detected by the IPS logic while the non verified exploit information is presented subsequently. As another example some or all of the verified exploit information may be presented in different font e.g. different type color style such as bold or italic effects such as underlining or shadow etc. than font used for conveying the non verified exploit information . As yet another example a tag image may be positioned next to the verified exploit information unlike non verified exploit information associated with suspect objects.

Referring to an exemplary diagram of a flowchart illustrating a threat detection and prevention process which generates a report that highlights information associated with suspected exploits detected by the IPS logic and verified by the virtual execution environment is shown. Upon receipt of an object the TDP system conducts a first static analysis operation on the object block . Herein the first static analysis operation may include exploit signature checks and or vulnerability signature checks by the IPS logic to determine whether characteristics of an object under analysis are indicative of an exploit. Upon determining that the suspect object may have the characteristics of one or more suspected exploits the object is tagged for VM based analysis and information associated with the suspect object and or potential exploit IPS based results is stored for subsequent access blocks and .

Although not shown when determining that the suspect object has characteristics of a suspected exploit the IPS logic may be configured to block the object from proceeding to the targeted client device although blocking may be delayed until completion of the VM based analysis to mitigates errors due to false positives. This blocking functionality may be adjusted by the network administrator based on the severity type of suspected exploit number of occurrences of this type of exploit within a prescribed time period or the like. Furthermore prior to performing further exploit analysis if used a tag value may accompany or being associated with the suspect object when output from the IPS logic so that the IPS based results for the suspect object can be related to the subsequent VM based results for that object.

After IPS based analysis for the suspect object has concluded the content of the suspect object may undergo VM based analysis blocks and . The results of the VM based analysis VM based results are provided for subsequent review block . According to one embodiment of the disclosure the classification logic performs such review although in the alternative logic within the dynamic analysis engine may conduct this review.

Normally if the VM based analysis fails to verify that the suspect object is an exploit a score may be assigned to denote that no exploit has been detected block . In this case information produced during the VM analysis of the suspect object along with its corresponding IPS based results are stored as part of the non verified exploit information block . However during virtual execution of the object if the monitored behavior denotes that the suspect object is an exploit a score is assigned that represents the likelihood and or threat level for the verified exploit s .

According to one embodiment of the disclosure the classification logic may be configured to obtain the IPS based results associated with the verified exploit where some or all of the information from the IPS based results and the VM based results may be prominently displayed highlighted as illustrated in blocks and . Such highlighting may include i assigning a specific display location for exploit information associated with verified exploits that is different from exploit information associated with non verified exploits ii modifying the presentation e.g. font type color style etc. of exploit information associated with verified exploits where the exploit information associated with the non verified exploits will have a different presentation iii controlling placement of one or more images proximate to exploit information associated with verified suspect objects only. Other display adjustments may be used as this highlighting is conducted to visibly differentiate exploit information associated with the verified exploits from exploit information associated with the non verified exploits.

Thereafter the highlighted verified exploit information is uploaded into the database for storage and now accessible by display logic for rendering blocks and .

Referring now to an exemplary embodiment of a first user interface display screen produced by the display logic of that provides an interactive dashboard is shown. Herein rendered by the display logic the display screen comprises a plurality of display areas and that illustrate information directed to exploits uncovered over a selected time period by the TDP system. It is noted that multiple highlighting techniques are shown in display screens and although it is contemplated that any one or more highlighting technique may be conducted for a particular display.

More specifically according to one embodiment of the disclosure a first area displays a plurality of entries R 1 R 6 for this embodiment that provide information directed verified exploits and or non verified exploits. As shown each row of entries e.g. rendered by the display logic comprises a plurality of fields including one or more of the following 1 a name of the exploit associated with a suspect object 2 a signature pattern applicable to the object under analysis 3 addressing information e.g. Internet Protocol IP address Media Access Control MAC address etc. for a source device providing the verified or non verified exploit 4 a level of severity e.g. high medium low of the detected exploit where the severity level corresponds at least in part to the threat score 5 a time during which the exploit analysis process was conducted and or 6 name and or version number of software detected to be vulnerable to the detected exploit.

A second area may be configured with one or more images corresponding to each entry for a verified exploit namely an object initially identified by the IPS logic as having characteristics indicative of an exploit and verified of being an exploit by the virtual execution logic. For instance as illustrated in image is displayed proximate to information associated with a corresponding verified exploit named HTTP Exploit ID. Similar images are illustrated for verified exploit information associated with verified exploits named HTTP Exploit ID Java Exploit ID and HTML Exploit ID. 

It is noted that the mere existence of a verified exploit may warrant heightened severity level but does not require heightened severity levels as illustrated by the fact that certain non verified exploits may be assigned higher severity levels than some verified exploits. Rather exploit information associated with the verified exploits is highlighted namely this exploit information is displayed more prominently than exploit information associated with non verified exploits for example. This allows a network administrator to more quickly and easily determine verified exploits and thereby substantially mitigate administrative and operational disadvantages from false positives.

As an example as a highlighting technique the font associated with the exploit names HTTP Exploit ID HTTP Exploit ID Java Exploit ID and HTML Exploit ID may be displayed differently than the font associated with the exploit names for non verified exploits e.g. Java Exploit ID . Alternatively the verified exploit information associated with the verified exploits may be ordered at the top of the listing see . Also a single display screen may produce two areas where a first area includes exploit information associated with verified exploits while a second area includes exploit information associated with non verified exploits see .

Furthermore although not shown it is contemplated that selection of a portion of the entry e.g. entries within fields as represented by an underlined portion and or a separate Details field may enable the network administrator to obtain more detailed information of the exploit and or analysis associated with that exploit.

For instance by selecting the particular listed exploit the administrator may be able to uncover family and other information related to the exploit e.g. documented attacks recommended remediation techniques targeted client device s etc. . Also by selecting the signature the administrator may have access to additional information concerning what signature exploit vulnerability etc. was determined by the IPS to match the suspect object. Additional information e.g. information on signature updates detection history of this signature with other objects etc. may be provided as well.

Similarly by selecting the corresponding host address or the severity level the administrator may be provided with additional information directed to geographic location of the source of the suspect object corresponding to that exploit addressing information directed to intermediary devices that received the suspect object the particular network operations targeted by the exploit or the like. Also by selecting the software type a listing of all software types detected to be vulnerable to the verified exploit along with video images of monitored anomalous behaviors denoting the presence of such exploit may be accessed.

Referring now to an exemplary embodiment of a second user interface display screen produced by the display logic of that provides an interactive dashboard is shown. Herein the display screen comprises a plurality of areas and that display results of IPS detection analysis over a selected time period.

As shown similar to the first user interface display screen first area of the second user interface display screen displays a plurality of entries S 1 S 4 for this embodiment that provides information directed to verified exploits. Each of the entries e.g. rendered by the display logic comprises 1 a name of the verified exploit suspect object verified to be an exploit 2 a signature that initially identified the suspect object as having characteristics indicative of an exploit 3 addressing information e.g. Internet Protocol IP address Media Access Control MAC address etc. for a source device providing the detected exploit 4 a level of severity e.g. high medium low of the detected exploit that corresponds at least in part to the threat score 5 a time during which the exploit analysis process was conducted and or 6 name and or version number of software detected to be vulnerable to the detected exploit.

As shown a second area may be provided which comprises an image corresponding to each entry that is associated with the verified exploits as described above. As illustrated in image is displayed with information associated with a corresponding verified exploit named HTTP Exploit ID. Similar images are illustrated as highlighted verified exploit information for verified exploits named HTTP Exploit ID Java Exploit ID and HTML Exploit ID. 

A third area illustrates exploit information associated with non verified exploits named Java Exploit ID RPC Exploit ID for example.

According to an alternative embodiment of the disclosure the static analysis engine may be configured with a first static analysis logic e.g. IPS logic and a second static analysis logic e.g. heuristic logic which is configured to operate independently from the IPS logic and identifies whether characteristics of any of the incoming objects are indicative of an exploit. As described below the first static analysis logic and the second static analysis logic may operate in parallel or in tandem.

In particular as described above the first static analysis logic IPS logic conducts at least exploit signature checks and or vulnerability signature checks on the incoming objects to identify a first subset of objects having characteristics indicative of an exploit. The second static analysis logic heuristic logic may be configured to analyze the same or different objects where such analysis may be in accordance with at least a set of rules and or signatures different than those utilized by the first static analysis logic IPS logic .

More specifically according to this embodiment of the invention upon identifying the suspect objects first subset of objects the first static analysis logic IPS logic provides suspect objects perhaps each accompanied by or associated with a tag identifier hereinafter referred to as tag ID to the verification logic of . Tag ID may be used to indicate to other logic that the suspect object originated from the first static analysis logic IPS logic .

The second static analysis logic heuristic logic is configured to analyze the incoming objects to determine whether the presence absence or modification of information within an object may denote potential malicious activity indicating that object may be an exploit. Such determination may involve the second static analysis logic heuristic logic conducting operations to determine whether certain portions of the object corresponds to one or more malicious identifiers which may include but are not limited or restricted to a particular source or destination address e.g. URLs IP addresses MAC addresses etc. that is associated with known exploits exploit patterns or shell code patterns.

Additionally with each suspect object the heuristic logic may provide a tag identifier tag ID for use in locating corresponding heuristic based results associated with each suspect object . Hence tag ID may be further used to identify to other logic that this suspect object originated from the heuristic logic .

After either the first static analysis logic IPS logic or the second static analysis logic determine which of the incoming objects have characteristics indicative of an exploit the suspect objects are provided to the virtual execution logic for more in depth dynamic analysis using one or more virtual machines VMs . Such dynamic analysis may include virtual execution of the content of the suspect objects with one or more configured VMs as described above. The behaviors of the VM s are monitored for detection of anomalous or unexpected activity.

It is contemplated that the first static analysis logic IPS logic and the second static analysis logic heuristic logic may operate in parallel in which both of these logic units conduct the preliminary exploit detection analysis on the same suspect objects. More specifically the second static analysis logic heuristic logic may conduct its analysis on an object extracted from the network traffic concurrently i.e. at least partially overlapping in time with the analysis of the same object by the IPS logic. This provides the TDP system with an ability to account for false negatives that signify a lack of detection of an exploit by the IPS logic. Also such parallel analysis may be conducted in order to increase scrutiny of network traffic for objects originating from a certain geographic location prone to exploits from a certain IP addresses that have been identified as a malicious source or the like.

Of course it is contemplated that the first static analysis logic IPS logic and second static analysis logic heuristic logic may operate in tandem in which an incoming object is capable of being processed by either the IPS logic or the heuristic logic within the embodiment. Control of the selection as to whether the static analysis is performed by the first static analysis logic IPS logic or the second static analysis logic heuristic logic may be assigned to additional control logic within the static analysis engine. Such control may be based on the type of object under analysis source traffic conditions or the like.

Referring to an exemplary block diagram of an operational flow of threat detection and prevention within an electronic device is shown. Herein some or all of the incoming objects associated with the monitored network traffic may be received by a first static analysis logic e.g. IPS logic of as described above. The IPS logic is configured to perform at least exploit signature checks and or vulnerability signature checks on some or all of the incoming objects .

Upon identifying that a first subset of the incoming objects are suspicious e.g. one or more objects match an exploit signature and or vulnerability signature the IPS logic subsequently routes the first subset of suspect objects to the verification logic e.g. virtual execution logic . Each of these objects may be accompanied by a tag identifier tag ID and provided to the verification logic .

Besides being used for subsequently locating the IPS based results associated with the suspect object provided from the IPS logic to the reporting logic tag ID may be used to additionally to identify to the verification logic and or reporting logic that these suspect objects are provided from the IPS logic . Such information may be useful for identifying exploit information associated with verified exploits originating from the IPS logic where this exploit information may be highlighted even differently than exploit information associated with verified exploits originating from a second static analysis logic .

Operating in tandem or in parallel with IPS logic the second static analysis logic e.g. heuristic logic conducts another type of static analysis on some or all of the objects to produce a subset of objects having characteristics indicative of an exploit. Hence when operating in parallel heuristic logic may receive the incoming objects which are also being received and analyzed by IPS logic . When operating in tandem with the IPS logic the heuristic logic may receive some or all of the incoming objects where the switching between receipt of specific incoming objects by either the IPS logic or the heuristic logic may be conducted by switching logic via control signals from scheduler or some other logic within TDP system as shown in .

The suspect objects and or collectively referred to as suspect objects detected by the IPS logic and or heuristic logic are routed to the verification logic . The verification logic is adapted to verify whether any of the suspect objects is an exploit through virtual processing of the content within these objects . The VM based results of this analysis are output from the verification logic for subsequent use by reporting logic for display purposes as described above.

More specifically the first static analysis logic e.g. IPS logic conducts at least exploit signature checks and or vulnerability signature checks to identify whether characteristics of any of the analyzed objects are indicative of an exploit. If so the IPS logic forwards these suspect object s to the verification logic .

Additionally one or more heuristic checks may be conducted on some or all of objects including various scanning operations conducted on portions of the objects to determine correspondence with one or more malicious identifiers as described above. While the IPS logic is adapted to identify objects in accordance with at least exploit signature checks and or vulnerability signature checks the heuristic checks are directed to a more expansive static analysis of some or all of objects including the use of different types of signatures or other static analysis schemes.

After performing the heuristic check s by the heuristic logic a second set of suspect objects is provided to the verification logic . Again the second set of objects may be lesser and potentially significantly less in number than the incoming objects .

After virtual processing of content within each of the suspect objects and or and thereafter verifying that particular objects are exploits verified exploits the verification logic provides VM based results that may be modified along with its corresponding IPS based results to generate a report e.g. one or more display screens printed report etc. . The report is configured to visibly highlight exploit information associated with verified exploits. As an alternative the report may also be configured to visibly highlight exploit information associated with verified exploits from exploit information associated with non verified exploits suspect objects having characteristics of exploits that were not verified by the VMs .

Referring to an exemplary block diagram of a communication system deploying a plurality of threat detection and prevention TDP systems N 1 e.g. N 3 is shown. TDP system is identical to TDP system of except that static analysis engine includes two different static analysis logic units. More specifically as shown in static analysis engine may include one or more software modules that when executed by one or more processors performs multi level static scanning on a particular object namely both exploit and vulnerability signature checks by IPS logic and heuristic checks by heuristic logic .

Operating in parallel or tandem with IPS logic the heuristic logic is configured to conduct one or more heuristic checks on objects under analysis. These heuristic checks may be considered more expansive in analysis than the exploit and or vulnerability checks conducted by the IPS logic as mentioned above.

Herein based on the results of the heuristic checks conducted by heuristic logic score determination logic determines the probability or level of confidence that the characteristics of the analyzed object are indicative of an exploit. In other words score determination logic is configured to generate a value that classifies the threat level of the possible exploit characterized by each of the analyzed objects. For instance if the heuristic checks detect one type of characteristic that suggests the object under analysis is an exploit the object may be classified with a first threat level. The first threat level may be represented by a score value corresponding to the likelihood of the object being an exploit e.g. score of 3 out of 10 . However if the heuristic checks detect multiple characteristics or another type of characteristic that more strongly suggests the object under analysis is an exploit a higher score e.g. score of 8 out of 10 may be assigned by score determination logic to denote a higher probability of the detected presence of an exploit.

Thereafter the objects and their corresponding scores may be routed from the static analysis engine to the dynamic analysis engine for use in further analysis to verify which of the suspect objects if any are exploits. Additionally or in the alternative it is contemplated that the score may be provided to classification logic for use in prioritization.

More specifically after static scanning has completed the object may be provided to the dynamic analysis engine for in depth dynamic analysis using virtual machines VMs M 1 . Of course if the characteristics of the object are not indicative of an exploit the heuristic logic may halt further analysis of content with the object.

In general besides receiving VM based results from dynamic analysis engine the classification logic may be configured to receive assigned scores from static analysis engine . Classification logic may be configured to mathematically combine the scores assigned to content associated with the suspect object based on findings from static analysis engine and dynamic analysis to obtain an overall score that is assigned with the verified or non verified exploit.

According to one embodiment of the disclosure the overall score may be used at least in part to identify verified exploits from non verified exploits. Also the score may be used at least in part for highlighting operations such as assigning a display priority that may influence the display ordering as described above. However it is contemplated that other parameters combined with or separate from the score assigned to the exploit may be used to classify exploits or influence display priority. For instance the overall score along with other parameters such as the presence of the tag ID or tag ID as part of exploit information included in the VM based results may influence the display ordering of that exploit.

Referring now to first TDP system may be coupled with the communication network in line with client device . As similarly illustrated in first TDP system comprises an interface unit that directs signaling on communication network to static analysis engine or classification logic given that the dynamic analysis engine is deployed in cloud computing services .

Referring to an exemplary diagram of a flowchart illustrating a threat detection and prevention process utilizing IPS logic and or heuristic logic for static analysis is shown where the process generates a report that highlights information associated with suspected exploits detected by the IPS or heuristic logic and verified by the virtual execution environment. Herein the IPS logic and the heuristic logic may operate in parallel or in tandem.

The IPS logic and heuristic logic may be configured to operate in parallel or in tandem based on factors that may warrant increased scrutiny in efforts to detect exploits. For instance there is an increased amount of objects originating from a certain geographic location prone to exploits or from a certain IP address that has been identified as a malicious source. For parallel processing operations associated with blocks and of are conducted in parallel. For this discussion however the IPS logic and heuristic logic are operating in tandem. Also for certain governmental agencies its sensitivity to exploits and or its history in experiencing exploits may warrant additional analysis.

Upon receipt of an object under analysis as set forth in block the TDP system conducts a determination as to whether the static analysis should be conducted by the first static analysis logic IPS logic and or the second static analysis logic heuristic logic . According to one embodiment as a default the IPS logic is selected.

When selected the IPS logic conducts exploit signature checks and or vulnerability signature checks to determine whether characteristics of the object under analysis are indicative of an exploit block . Upon determining that the characteristics of the object under analysis are indicative of an exploit information associated with the suspect object and or exploit IPS based results is stored for subsequent access blocks and .

Although not shown when determining that the suspect object has characteristics of a suspected exploit the IPS logic may be configured to block the object from proceeding to the targeted client device although blocking may be delayed until completion of the VM based analysis. This blocking functionality may be adjusted by the network administrator based on the severity type of suspected exploit number of occurrences of this type of exploit within a prescribed time period or the like. Furthermore prior to performing further exploit analysis as an optional feature identified by dashed lines in tag ID may accompany the suspect object when output from the IPS logic so that 1 the IPS based results for the suspect object can be related to the subsequent VM based results for that object and 2 the virtual execution logic and or classification logic can identify that the suspect object originated from the IPS logic block . Thereafter the suspect object and or tag ID is provided to the dynamic analysis engine for subsequent analysis block .

Additionally or in the alternative a second static analysis may be performed to determine whether characteristics of the object under analysis are indicative of an exploit block . This determination may involve one or more heuristic checks being conducted in efforts to determine if the i the object has a certain level of correlation with one or more malicious identifiers or ii presence absence or modification of any content associated with the object identifies a potential exploit. During such analysis a score may be assigned to identify the likelihood of this object being an exploit block .

In the event that the suspect object is tagged for VM based analysis which may be determined if the assigned score is greater than or equal to a prescribed threshold score information associated with the suspect object and or the potential exploit including the score hereinafter referred to as heuristic based results may be stored for subsequent access by classification logic blocks and . Thereafter the suspect object optionally with tag ID is provided to the dynamic analysis engine for subsequent analysis blocks and .

Regardless whether the static analysis is conducted by the IPS logic or the heuristic logic the suspect object may be further analyzed by conducting VM based analysis on the content associated with the suspect object where behaviors of the virtual processing of the content by one or more VMs produces VM based results blocks and . If the VM based analysis fails to detect any exploit within content of the suspect object a score may be assigned to denote that no exploit is detected and the VM based results may be stored blocks and .

However when the dynamic analysis engine verifies during virtual processing of the content within the suspect object that the suspect object constitutes an exploit this verified exploit is assigned a score representative of the likelihood and or threat level for the detected exploit s . More specifically during subsequent analysis of the content within the suspect object by the virtual execution logic upon determining that the suspect object is an exploit e.g. a certain probability that content within the suspect object constitutes an exploit is determined a score representative of the likelihood and or threat level for the detected exploit is assigned.

Thereafter according to one embodiment of the disclosure the IPS based results along with the VM based results are obtained and some or all of the information from the IPS based results and the VM based results may be prominently displayed highlighted as illustrated in blocks and and further described above.

Thereafter the highlighted verified exploit information is uploaded into the database for storage and now accessible by display logic for rendering blocks and .

In the foregoing description the invention is described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims.

