---

title: Compressive sensing with local geometric features
abstract: Methods and apparatuses for compressive sensing that enable efficient recovery of features in an input signal based on acquiring a few measurements corresponding to the input signal. One method of compressive sensing includes folding an image to generate first and second folds, and recovering a feature of the image based on the first and second folds without reconstructing the image. One example of a compressive sensing apparatus includes a lens, a focal plane array coupled to the lens and configured to generate first and second folds based on the image, and a decoder configured to receive the first and second folds and to recover a feature of the image without reconstructing the image. The feature may be a local geometric feature or a corner. Compressive sensing methods and apparatuses for determining translation and rotation between two images are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09613285&OS=09613285&RS=09613285
owner: MASSACHUSETTS INSTITUTE OF TECHNOLOGY
number: 09613285
owner_city: Cambridge
owner_country: US
publication_date: 20150424
---
This application claims priority under 35 U.S.C. 120 to U.S. patent application Ser. No. 14 660 434 filed on Mar. 17 2015 and titled COMPRESSIVE SENSING WITH LOCAL GEOMETRIC FEATURES and to U.S. patent application Ser. No. 14 659 164 filed on Mar. 16 2015 and titled COMPRESSIVE SENSING WITH LOCAL GEOMETRIC FEATURES both of which claim priority under 35 U.S.C. 120 to U.S. patent application Ser. No. 13 800 332 filed on Mar. 13 2013 and titled COMPRESSIVE SENSING WITH LOCAL GEOMETRIC FEATURES now U.S. Pat. No. 8 983 198 and to U.S. patent application Ser. No. 13 800 375 filed on Mar. 13 2013 and titled COMPRESSIVE SENSING WITH LOCAL GEOMETRIC FEATURES both of which in turn claim priority under 35 U.S.C. 119 e to U.S. Provisional Patent Application No. 61 614 193 filed on Mar. 22 2012 and titled COMPRESSIVE SENSING FOR LOCAL GEOMETRIC FEATURES to U.S. Provisional Patent Application No. 61 676 413 filed on Jul. 27 2012 and titled COMPRESSIVE SENSING WITH LOCAL GEOMETRIC FEATURES and to U.S. Provisional Patent Application No. 61 734 165 filed on Dec. 6 2012 and titled COMPRESSIVE SENSING FOR LOCAL GEOMETRIC FEATURES all of which are herein incorporated by reference in their entireties. This application further claims priority under 35 U.S.C. 120 to U.S. patent application Ser. No. 13 800 375 filed on Mar. 13 2013 and titled COMPRESSIVE SENSING WITH LOCAL GEOMETRIC FEATURES. 

This invention was made with government support under Grant No. CCF 0728645 awarded by the National Science Foundation. The U.S. government has certain rights in this invention.

The present disclosure generally relates to signal processing and more specifically to compressive signal processing to efficiently identify geometric features of a signal.

Traditional approaches to identification of geometric features typically acquire the entire signal via uniform sampling and then scan the entire signal to identify features. Standard compressive sensing based approaches recover the entire signal from compressive samples and then identify features by scanning the reconstructed signal. Optical superposition or multiplexing methods superimpose different parts of a scene to enable wide field of view cameras for target detection and tracking.

The conventional approaches described above have several disadvantages. For example uniform sampling based methods expend significant energy acquiring the entire signal even though only small parts of the signal contain the features of interest. Standard compressive sensing based approaches require a computationally expensive algorithm to recover the signal the recovered signal is then used as an input to feature identification. Furthermore even the most sparse compressive sensing encoding matrices have a number of nonzeros per column that is a logarithmic function of signal length and sparsity. Such matrices may be challenging to instantiate in hardware. Optical superposition methods superimpose different parts of the image in such a way that the recovery of the target position in the original scene is ambiguous and requires additional knowledge about the target object such as a dynamic model.

Aspects and embodiments of the present disclosure are directed to efficiently acquiring geometric features of a signal using few linear measurements. In contrast to conventional approaches various embodiments of compressive sensing systems and methods disclosed herein enable acquiring or recovering features without reconstructing the signal. In one example methods and apparatuses disclosed herein may be used for recovering features in images or signals that consist of a small number of local geometric objects for example muzzle flash or star images. Algorithms and processes disclosed herein for recovering these features in the original scene are efficient their complexity for at least some applications is sub linear in the size of the underlying signal.

Embodiments of methods and apparatuses of the present disclosure may generally apply to any application where local objects in an image need to be efficiently identified and localized. Some examples of applications include but are not limited to star cameras and systems for efficiently identifying stars in a star field image wide field of view cameras for surveillance and environment awareness for soldiers detection and localization of localized targets objects of interest in a wide field of view camera and cameras for vision aided navigation. In other examples embodiments of the methods and apparatuses disclosed herein may be used for acquiring or detecting corners from an image such as for vision based navigation. Embodiments may also be used for acquiring macro statistics about an image such as a dominant edge orientation. Embodiments may be used for determining rotation based on the dominant edge orientation.

According to one embodiment a method of compressive sensing comprises folding an image to generate a first fold and a second fold and recovering a feature of the image using a processor based on the first fold and the second fold without reconstructing the image.

In one example of the method the feature is a local geometric feature. Each of the first fold and the second fold may be a compressed representation of the image. In one example folding the image includes receiving an analog image and folding the analog image to generate the first fold and the second fold and the method further includes digitizing the first fold and the second fold. Recovering the feature may then be based on the digitized first and second folds. In another example in which the image includes N pixels and k features folding the image includes acquiring a plurality of measurements corresponding to the image the plurality of measurements being O k log kN and being less than N wherein N is a positive integer. Recovering may include recovering a plurality of features of the k features based on the plurality of measurements in a time sublinear in N. In one example folding includes applying a hashing function. In one example in which the image includes a plurality of cells applying the hashing function includes applying a pairwise independent hashing function to a numbering of the plurality of cells. Folding may include applying an error correcting code. The error correcting code may include one of a Chinese Remainder Theorem code and a Reed Solomon code.

In another example of the method recovering includes calculating a plurality of feature vectors based on the first fold and the second fold thresholding the plurality of feature vectors clustering the plurality of thresholded feature vectors to generate a plurality of clusters and decoding a cluster of the plurality of clusters to recover the feature. In one example recovering includes recovering a plurality of features of the image and decoding includes decoding the plurality of clusters to recover the plurality of features. In another example folding includes encoding based on a Chinese Remainder Theorem code and decoding a cluster includes decoding based on the Chinese Remainder Theorem code.

In one example the first fold has a first size and the second fold has a second size the first size being different from the second size each of the first size and the second size being less than a size of the image. In one example the first size and the second size are coprime and folding includes applying a Chinese Remainder Theorem code.

In another example the feature is a corner and recovering the feature includes applying corner detection to each of the first fold and the second fold to generate a first plurality of corners based on the first fold and to generate a second plurality of corners based on the second fold. Recovering the feature may further include detecting an artificial edge created by the folding in at least one of the first fold and the second fold and eliminating a subset of at least one of the first plurality of corners and the second plurality of corners based on the artificial edge. In one example eliminating includes generating a first plurality of pruned corners and a second plurality of pruned corners and recovering the feature further includes matching a first corner of the first plurality of pruned corners with a corresponding second corner of the second plurality of pruned corners. In another example recovering the feature further includes matching a first corner of the first plurality of corners with a corresponding second corner of the second plurality of corners and decoding to recover the feature based on the first corner and the second corner. The matching may further include calculating a plurality of cross correlation values each respective cross correlation value corresponding to a respective first window and a respective second window the respective first window being associated with a respective first corner of the first plurality of corners and the respective second window being associated with a respective second corner of the second plurality of corners pruning a candidate match based on a cross correlation value of the plurality of cross correlation values and matching each respective corner of the first plurality of corners with a respective second corner of the second plurality of corners. The method may further including thresholding the plurality of cross correlation values and wherein pruning the candidate match includes pruning the candidate match based on a thresholded cross correlation value. Recovering may include recovering a plurality of features of the image the plurality of features being a plurality of corners and decoding includes decoding to recover each feature of the plurality of features in response to matching each respective corner of the first plurality of corners with a respective second corner of the second plurality of corners.

According to another embodiment an apparatus for compressive sensing comprises a lens a focal plane array coupled to the lens so as to receive an image the focal plane array being configured to generate a first fold and a second fold based on the image and a decoder configured to receive the first fold and the second fold and to recover a feature of the image without reconstructing the image.

In one example the feature is a local geometric feature. In another example each of the first fold and the second fold is a compressed representation of the image. The apparatus may further include a digitizer configured to receive the first fold and the second fold and to output a digitized first fold and a digitized second fold wherein the decoder is configured to receive the digitized first fold and the digitized second fold and to output the feature of the image based on the digitized first fold and the digitized second fold without reconstructing the image. In one example the image includes N pixels and k features and the focal plane array is configured to acquire a plurality of measurements corresponding to the image the plurality of measurements being less than N. In one example the plurality of measurements are O k log kN .

In another example the apparatus is configured to recover a plurality of features of the k features based on the plurality of measurements in a time sublinear in N. In another example the focal plane array is configured to apply a hashing function. The hashing function may be a pairwise independent hashing function. In another example the focal plane array is configured to apply an error correcting code. The error correcting code may be one of a Chinese Remainder Theorem code and a Reed Solomon code. In another example the decoder is further configured to calculate a plurality of feature vectors based on the first fold and the second fold threshold the plurality of feature vectors cluster the plurality of thresholded feature vectors to generate a plurality of clusters and decode a cluster of the plurality of clusters to recover the feature. The decoder may be further configured to recover a plurality of features of the image and to decode the plurality of clusters to recover the plurality of features.

In one example the focal plane array is configured to generate the first fold and the second fold by encoding based on a Chinese Remainder Theorem code and the decoder is configured to decode based on the Chinese Remainder Theorem code. In another example the first fold has a first size and the second fold has a second size the first size being different from the second size each of the first size and the second size being less than a size of the image. The first size and the second size may be coprime and the focal plane array may be configured to apply a Chinese Remainder Theorem code. In another example the feature is a corner and the decoder is configured to apply corner detection to each of the first fold and the second fold to generate a first plurality of corners based on the first fold and to generate a second plurality of corners based on the second fold. The decoder may be further configured to identify an artificial edge in at least one of the first fold and the second fold and eliminate a subset of at least one of the first plurality of corners and the second plurality of corners based on the artificial edge. In one example the decoder is further configured to generate a first plurality of pruned corners and a second plurality of pruned corners and to match a first corner of the first plurality of pruned corners with a corresponding second corner of the second plurality of pruned corners. In another example the decoder is further configured to match a first corner of the first plurality of corners with a corresponding second corner of the second plurality of corners and decode to recover the feature based on the first corner and the second corner. The decoder may be further configured to calculate a plurality of cross correlation values each respective cross correlation value corresponding to a respective first window and a respective second window the respective first window being associated with a respective first corner of the first plurality of corners and the respective second window being associated with a respective second corner of the second plurality of corners prune a candidate match based on a cross correlation value of the plurality of cross correlation values and match each respective corner of the first plurality of corners with a respective second corner of the second plurality of corners. In one example the decoder is configured to threshold the plurality of cross correlation values and to prune the candidate match based on a thresholded cross correlation value. In another example the decoder is configured to recover a plurality of features of the image the plurality of features being a plurality of corners in response to matching each respective corner of the first plurality of corners with a respective second corner of the second plurality of corners.

According to another embodiment a method of compressive sensing comprises folding a first image to generate a first fold and a second fold folding a second image to generate a third fold and a fourth fold and determining a translation between the first image and the second image using a processor based on the first fold the second fold the third fold and the fourth fold without reconstructing each of the first image and the second image.

In one example each of the first fold and the third fold has a first size and each of the second fold and the fourth fold has a second size the second size being different from the first size. In another example determining the translation includes calculating a first phase correlation function based on the first fold and the third fold calculating a second phase correlation function based on the second fold and the fourth fold determining a first peak based on the first phase correlation function determining a second peak based on the second phase correlation function and decoding to determine the translation based on the first peak and the second peak. In another example folding each of the first image and the second image includes encoding based on a Chinese Remainder Theorem code and wherein decoding includes decoding based on the Chinese Remainder Theorem code.

According to another embodiment a method of compressive sensing comprises folding a first image to generate a first fold folding a second image to generate a second fold and determining a rotation between the first image and the second image using a processor based on the first fold and the second fold without reconstructing each of the first image and the second image.

In one example determining the rotation includes calculating a first distribution of gradient angles based on the first fold calculating a second distribution of gradient angles based on the second fold and correlating the first distribution and the second distribution.

According to another embodiment an apparatus for compressive sensing comprises an encoder configured to receive a first image and a second image to generate a first fold and a second fold based on the first image and to generate a third fold and a fourth fold based on the second image and a decoder configured to determine a translation between the first image and the second image based on the first fold the second fold the third fold and the fourth fold without reconstructing each of the first image and the second image.

In one example the encoder includes a focal plane array. In another example each of the first fold and the third fold has a first size and each of the second fold and the fourth fold has a second size the second size being different from the first size. The decoder may be further configured to calculate a first phase correlation function based on the first fold and the third fold calculate a second phase correlation function based on the second fold and the fourth fold determine a first peak based on the first phase correlation function determine a second peak based on the second phase correlation function and determine the translation based on the first peak and the second peak.

According to another embodiment an apparatus for compressive sensing comprises an encoder configured to receive a first image and a second image to generate a first fold based on the first image and to generate a second fold based on the second image and a processor configured to determine a rotation between the first image and the second image based on the first fold and the second fold without reconstructing each of the first image and the second image.

In one example the encoder includes a focal plane array. In another example the processor is further configured to calculate a first distribution of gradient angles based on the first fold calculate a second distribution of gradient angles based on the second fold and correlate the first distribution and the second distribution.

Still other aspects embodiments and advantages of these exemplary aspects and embodiments are discussed in detail below. Embodiments disclosed herein may be combined with other embodiments in any manner consistent with at least one of the principles disclosed herein and references to an embodiment some embodiments an alternate embodiment various embodiments one embodiment or the like are not necessarily mutually exclusive and are intended to indicate that a particular feature structure or characteristic described may be included in at least one embodiment. The appearances of such terms herein are not necessarily all referring to the same embodiment.

Compressive sensing methods and systems disclosed herein enable efficiently recovering features of a signal without reconstructing the signal. As used herein a signal may include for example an image a video signal or other data. The features may be local geometric features. In some applications the number of measurements acquired to recover the features by various embodiments disclosed herein is linearly proportional to the number of features as opposed to linearly proportional to the signal dimension.

Various embodiments of compressive sensing systems may include an encoder and a corresponding decoder. Various embodiments of compressive sensing methods may include applying encoding and decoding algorithms for example using one or more computer systems or processors. According to one embodiment an image may be processed as follows. Consider an image x including k local geometric objects. As used herein an object may refer to a feature in the image. One example of a method includes replicating x several times and folding each replica according to a particular discrete frequency thereby generating multiple folded replicas. Each folded replica is quantized and provides partial information about the location of each local geometric object in the original scene. By fusing the position information obtained from the folded replicas positions of the objects in the image can be determined precisely and in a computationally efficient manner. Some embodiments may include using an error correcting code at the encoder to increase robustness. Some embodiments may include using gradient as an additional processing step to increase sparsity. Some embodiments may include taking a single fold rather than multiple folds for acquiring macro statistics about an image. In one example a rotation between a first image and a second image may be determined based on a single fold for each of the first image and the second image. These and other embodiments and aspects are discussed further below.

Various embodiments of the methods disclosed herein differ from the traditional uniform sampling approach by combining multiple parts of the signal in analog for example by folding the signal thereby enabling digitization at a much lower rate. Digitization at a lower rate requires less power. Therefore these embodiments require less power compared to the traditional uniform sampling approach.

In contrast to standard compressive sensing approaches disclosed methods for combining different parts of the signal in analog for example by folding the signal preserve local geometric structure and enable recovering features without signal reconstruction. This allows for sublinear as opposed to superlinear algorithmic complexity. In addition certain embodiments enable a reduction in the number of compressive measurements in comparison to conventional approaches. For example the number of measurements required to recover the features by various embodiments may be linearly proportional to the number of features as opposed to linearly proportional to the signal dimension. The reduction in the number of compressive measurements results in an ultra sparse encoding matrix that is amenable to hardware implementation.

Various embodiments also differ from the conventional optical superposition or folding methods discussed above for example by encoding the image multiple times as opposed to once and by encoding to instantiate an error correcting code for some applications.

It is to be appreciated that embodiments of the methods and apparatuses discussed herein are not limited in application to the details of construction and the arrangement of components set forth in the following description or illustrated in the accompanying drawings. The methods and apparatuses are capable of implementation in other embodiments and of being practiced or of being carried out in various ways. Examples of specific implementations are provided herein for illustrative purposes only and are not intended to be limiting. In particular acts elements and features discussed in connection with any one or more embodiments are not intended to be excluded from a similar role in any other embodiment.

Also the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. Any references to embodiments or elements or acts of the systems and methods herein referred to in the singular may also embrace embodiments including a plurality of these elements and any references in plural to any embodiment or element or act herein may also embrace embodiments including only a single element. The use herein of including comprising having containing involving and variations thereof is meant to encompass the items listed thereafter and equivalents thereof as well as additional items. References to or may be construed as inclusive so that any terms described using or may indicate any of a single more than one and all of the described terms. Any references to front and back left and right top and bottom upper and lower and vertical and horizontal are intended for convenience of description not to limit the present systems and methods or their components to any one positional or spatial orientation.

One or more features of the systems and methods disclosed herein may be implemented on one or more computer systems coupled by a network e.g. the Internet . Example systems upon which various aspects may be implemented as well as examples of methods performed by those systems are discussed in more detail below.

Various aspects and functions described herein in accord with the present invention may be implemented as hardware software or a combination of hardware and software on one or more computer systems. There are many examples of computer systems currently in use. Some examples include among others network appliances personal computers workstations mainframes networked clients servers media servers application servers database servers web servers and virtual servers. Other examples of computer systems may include mobile computing devices such as cellular phones and personal digital assistants and network equipment such as load balancers routers and switches. Additionally aspects in accord with the present invention may be located on a single computer system or may be distributed among a plurality of computer systems connected to one or more communication networks.

For example various aspects and functions may be distributed among one or more computer systems configured to provide a service to one or more client computers or to perform an overall task as part of a distributed system. For example the distributed system may be a cloud computing system. Additionally aspects may be performed on a client server or multi tier system that includes components distributed among one or more server systems that perform various functions. Thus the invention is not limited to executing on any particular system or group of systems. Further aspects may be implemented in software hardware or firmware or any combination thereof. Thus aspects in accord with the present invention may be implemented within methods acts systems system placements and components using a variety of hardware and software configurations and the invention is not limited to any particular distributed architecture network or communication protocol. Furthermore aspects in accord with the present invention may be implemented as specially programmed hardware and or software.

Various aspects and functions in accord with the present invention may be implemented as specialized hardware or software executing in one or more computer systems including the computer system shown in . As depicted the computer system includes a processor a memory a bus an interface and a storage system . The processor which may include one or more microprocessors or other types of controllers can perform a series of instructions that manipulate data. The processor may be a well known commercially available processor such as an Intel Pentium Intel Atom ARM Processor Motorola PowerPC SGI MIPS Sun UltraSPARC or Hewlett Packard PA RISC processor or may be any other type of processor or controller as many other processors and controllers are available. As shown the processor is connected to other system placements including a memory by the bus .

The memory may be used for storing programs and data during operation of the computer system . Thus the memory may be a relatively high performance volatile random access memory such as a dynamic random access memory DRAM or static memory SRAM . However the memory may include any device for storing data such as a disk drive or other non volatile storage device such as flash memory or phase change memory PCM . Various embodiments in accord with the present invention can organize the memory into particularized and in some cases unique structures to perform the aspects and functions disclosed herein.

Components of the computer system may be coupled by an interconnection element such as the bus . The bus may include one or more physical busses for example busses between components that are integrated within a same machine and may include any communication coupling between system placements including specialized or standard computing bus technologies such as IDE SCSI PCI and InfiniBand. Thus the bus enables communications for example data and instructions to be exchanged between system components of the computer system .

Computer system also includes one or more interface devices such as input devices output devices and combination input output devices. The interface devices may receive input provide output or both. For example output devices may render information for external presentation. Input devices may accept information from external sources. Examples of interface devices include among others keyboards mouse devices trackballs microphones touch screens printing devices display screens speakers network interface cards etc. The interface devices allow the computer system to exchange information and communicate with external entities such as users and other systems.

Storage system may include a computer readable and computer writeable nonvolatile storage medium in which instructions are stored that define a program to be executed by the processor. The storage system also may include information that is recorded on or in the medium and this information may be processed by the program. More specifically the information may be stored in one or more data structures specifically configured to conserve storage space or increase data exchange performance. The instructions may be persistently stored as encoded signals and the instructions may cause a processor to perform any of the functions described herein. A medium that can be used with various embodiments may include for example optical disk magnetic disk or flash memory among others. In operation the processor or some other controller may cause data to be read from the nonvolatile recording medium into another memory such as the memory that allows for faster access to the information by the processor than does the storage medium included in the storage system . The memory may be located in the storage system or in the memory . The processor may manipulate the data within the memory and then copy the data to the medium associated with the storage system after processing is completed. A variety of components may manage data movement between the medium and the memory and the invention is not limited thereto.

Further the invention is not limited to a particular memory system or storage system. Although the computer system is shown by way of example as one type of computer system upon which various aspects and functions in accord with the present invention may be practiced aspects of the invention are not limited to being implemented on the computer system shown in . Various aspects and functions in accord with the present invention may be practiced on one or more computers having different architectures or components than that shown in . For instance the computer system may include specially programmed special purpose hardware such as for example an application specific integrated circuit ASIC tailored to perform a particular operation disclosed herein. Another embodiment may perform the same function using several general purpose computing devices running MAC OS System X with Motorola PowerPC processors and several specialized computing devices running proprietary hardware and operating systems.

The computer system may include an operating system that manages at least a portion of the hardware placements included in computer system . A processor or controller such as processor may execute an operating system which may be among others a Windows based operating system for example Windows NT Windows 2000 ME Windows XP Windows 7 or Windows Vista available from the Microsoft Corporation a MAC OS System X operating system available from Apple Computer one of many Linux based operating system distributions for example the Enterprise Linux operating system available from Red Hat Inc. a Solaris operating system available from Sun Microsystems or a UNIX operating systems available from various sources. Many other operating systems may be used and embodiments are not limited to any particular operating system.

The processor and operating system together define a computing platform for which application programs in high level programming languages may be written. These component applications may be executable intermediate for example C or JAVA bytecode or interpreted code which communicate over a communication network for example the Internet using a communication protocol for example TCP IP . Similarly functions in accord with aspects of the present invention may be implemented using an object oriented programming language such as SmallTalk JAVA C Ada or C C Sharp . Other object oriented programming languages may also be used. Alternatively procedural scripting or logical programming languages may be used.

Additionally various functions in accord with aspects of the present invention may be implemented in a non programmed environment for example documents created in HTML XML or other format that when viewed in a window of a browser program render aspects of a graphical user interface or perform other functions . Further various embodiments in accord with aspects of the present invention may be implemented as programmed or non programmed placements or any combination thereof. For example a web page may be implemented using HTML while a data object called from within the web page may be written in C . Thus the invention is not limited to a specific programming language and any suitable programming language could also be used.

A computer system included within an embodiment may perform functions outside the scope of the invention. For instance aspects of the system may be implemented using an existing product such as for example the Google search engine the Yahoo search engine available from Yahoo of Sunnyvale Calif. the Bing search engine available from Microsoft of Seattle Wash. Aspects of the system may be implemented on database management systems such as SQL Server available from Microsoft of Seattle Wash. Oracle Database from Oracle of Redwood Shores Calif. and MySQL from Sun Microsystems of Santa Clara Calif. or integration software such as WebSphere middleware from IBM of Armonk N.Y. However a computer system running for example SQL Server may be able to support both aspects in accord with the present invention and databases for sundry applications not within the scope of the invention.

Most previous digital imaging architectures work as illustrated in . A scene is focused via an optical lens onto a focal plane array typically using either CCD or CMOS technology. A digitizer is then used to perform analog to digital conversion to convert image intensity values from the focal plane into digital pixel values. The image data may then be processed using an image processor . For most applications the image data is compressed using one of many image coding methods such as JPEG following digitization by the digitizer .

According to aspects of the present disclosure it is appreciated that one disadvantage of the architecture of is that there is considerable wasted power in the image acquisition phase. A significant amount of power is used to acquire data in the acquisition phase only to be immediately discarded in the compression phase since many of the compression techniques used are lossy. The system of is less than ideal in numerous settings particularly where size weight and power are constrained. The ideal imager in these settings is as small as possible as light as possible and consumes as little power as possible. Moreover the majority of power consumption in imagers is due to analog to digital conversions. The wasted power by the digitizer and the image processor in is very costly.

As an example of the inefficiency of the system of consider a small unmanned aerial vehicle UAV in a GPS constrained environment. An approach in such a setting is to rely on visual imagery for navigation purposes. This involves some sort of image feature tracking from frame to frame. The inefficiency with previous imaging architectures is that the information rate or the feature information is usually much less than the data rate or the digitized values at every pixel location.

Accordingly aspects of the present disclosure are directed to providing systems and methods that reduce the data rate closer to the information rate for example by digitizing fewer aggregate image measurements than a standard imager while still extracting the desired image properties. Aspects of the present disclosure are directed to compressive sensing wherein compressive sensing includes directly acquiring the information or image in a compressed representation. In some embodiments the compressive acquisition and digitization may be performed in a single step or may overlap. This achieves the desired result of pushing some of the compression phase performed by the image processor in into the image acquisition and digitization phase.

The compressive sensing apparatus further includes a decoder configured to receive a compressed representation of the image of scene and to recover one or more features of the image without reconstructing or recovering the image. In various embodiments disclosed herein functions performed to recover the one or more features may be performed by the decoder or by one or more other modules of a compressive sensing apparatus. In some embodiments the decoder may include one or more modules configured to perform various functions to recover the one or more features. In yet other embodiments the focal plane array may include both an encoder configured to acquire and to digitize a compressed representation of an image of the scene and a decoder configured to recover one or more features of the image based on the compressed representation.

In various embodiments a compressed representation of a signal or image may be a folded representation. Aspects and embodiments are directed to acquiring one or more features of an image from its folded representation. This can be viewed as a particular manifestation of the problem of acquiring characteristics about a signal from an under sampled or lower dimensional representation. In some embodiments the signals are two dimensional images and the undersampling process to create the lower dimensional representations is folding.

It is to be appreciated that the horizontal and vertical orientation flipping that would occur in folding a piece of paper may not occur in this folding process.

Folding offers a number of advantages as a method of undersampling. For example folding tends to preserve local features. In various embodiments folding may allow recovering local features of an image. According to one aspect of the present disclosure it is shown that folding preserves local geometric features such as references of star positions in night sky images. In other examples corners and gradient direction are local in nature. The preservation of a number of different image features under a dimensionality reducing process of folding is disclosed. Examples of features explored are image corners rotation and translation. Furthermore folding is amenable to hardware implementation as described in further detail below.

In contrast to traditional approaches to image acquisition that first capture an entire N pixel image and then process it for compression transmission or storage as shown for example in compressive sensing includes obtaining a compressed representation directly for example by acquiring a small number of nonadaptive linear measurements of the signal in hardware as shown for example in . For example if an N pixel image is represented by a vector x then the compressed representation is equal to Ax where A is an m N matrix. An advantage of this architecture is that it may use fewer sensors and therefore may be cheaper and use less energy than a conventional camera.

Compressive sensing is a recent direction in signal processing that examines how to reconstruct a signal from a lower dimensional sketch under the assumption that the signal is sparse. For example in order to reconstruct the image x from a compressed representation or lower dimensional measurement vector or sketch Ax assume that the image x is k sparse for some k i.e. it has at most k non zero coordinates or at least be well approximated by a k sparse vector. Then given Ax circumflex over x an approximation to x may be found by performing sparse recovery. The latter problem may be defined as follows construct a matrix A such that for any signal x a vector circumflex over x can be recovered or reconstructed from Ax satisfying the error bound where Err x is the minimum L 1 error between x and x x x over all k sparse vectors x and C is an approximation factor. Note that if x is k sparse then Err x 0 and therefore circumflex over x x. Other Lnorms may be used and particular measurement matrices A and recovery algorithms for signal x may be optimal depending on the application. In particular it may be desirable to design matrices A and corresponding recovery algorithms that produce circumflex over x with a good compression rate i.e. low values of m as well as good algorithmic properties i.e. low encoding and recovery times . There exist binary matrices A and associated recovery algorithms that produce approximations circumflex over x satisfying the above error bound with constant approximation factor C and sketch length m O k log N k . In particular a random Bernoulli matrix or a random binary matrix with column sparsity O log N k has this property with overwhelming probability. This sketch length is asymptotically optimal. Any deterministic scheme with guarantee as provided by the error bound above requires column sparsity of log N k . In the randomized case where A is a random variable and the above error bound is required to hold only with constant probability over the choice of A any binary matrix A must have column sparsity as stated. Some aspects of the present disclosure are directed to overcoming these limitations of previous approaches.

Differences that separate aspects and embodiments disclosed herein from the standard class of compressive sensing problems include feature recovery and hardware implementable solutions as described further below.

While previous work on compressive sensing has focused on reconstructing the signal attempting to recover signal x or generating circumflex over x aspects and embodiments disclosed herein are directed to recovering one or more features of the signal based on a compressed representation of the signal such as folds without reconstructing the signal. The methods of recovering features may thus differ significantly from the Lminimization methods typical of compressive sensing techniques. Various embodiments garner information about a signal from a lower dimensional sketch. Folding may be a linear operation and may correspond to a measurement matrix A for taking a sketch of an image. If a two dimensional image is represented as a single vector by concatenating all of the columns on top of each other then folding may be represented as a simple matrix multiplication Ax where A is a relatively sparse binary matrix with a particular structure corresponding to the folding process.

Furthermore aspects and embodiments disclosed herein allow for sublinear as opposed to superlinear algorithmic complexity. In addition certain embodiments enable a reduction in the number of compressive measurements in comparison to conventional approaches. For example the number of measurements required to recover the features by various embodiments may be linearly proportional to the number of features as opposed to linearly proportional to the signal dimension. Thus various embodiments disclosed herein allow recovery of features with ultra low encoding complexity i.e. constant or substantially constant almost constant column sparsity. The reduction in the number of compressive measurements results in an ultra sparse encoding matrix that is amenable to hardware implementation.

Most of the research in compressive sensing is theoretical in nature with implementation considerations largely not addressed. Many of the sketching matrices A that are ideal for recovery from a theoretical perspective such as random Bernoulli or Gaussian matrices do not have straight forward hardware implementations. Moreover previous compressive sensing solutions do not provide power savings compared to the acquisition of the entire image when dealing for example with sensors for the visible light spectrum. In contrast aspects and embodiments disclosed herein provide compressive sensing solutions that are amenable to efficient hardware implementations thereby providing power savings. Various embodiments disclosed herein provide compressive sensing or compressive imaging apparatuses that acquire all the compressive measurements concurrently for example by implementing the matrix multiply Ax. Binary matrices having entries that are either zero or one may be used in various embodiments.

In particular folding or acquiring a plurality of measurements that form a compressed representation is amenable to hardware implementation. For example folding based on structured binning in a focal plane array such as the focal plane array of the compressive sensing apparatus in provides an efficient hardware implementation. Folding is readily implementable on systems that use optically multiplexed imaging. For optical measurement architectures due to the Poisson distributed shot noise affecting photon counting devices splitting the signal in components of x can decrease the signal to noise ratio by as much as the square root of the column sparsity. Other potential advantages of ultra low encoding complexity in electronic compressive imagers include reduced interconnect complexity low memory requirements for storing the measuring matrix and gain in image acquisition speed due to reduced operations.

Let x Rbe an N pixel image where each pixel p has a value x. For example illustrates an image having a total of N npixels each pixel p being represented by a square. In some embodiments x consists of a small number k of local geometric objects. For example the image further includes a plurality of features or objects to be recovered by compressive sensing. In this example the image includes k objects wherein k 3. Each object may span a plurality of pixels. For example as shown in an object fits in a w w bounding box . Referring again to the image further includes noise as illustrated by the dots in the image. Therefore a received signal or image may be represented by x x where represents noise. In one example the image may be an image of a sky including a plurality of stars as the objects.

An image x is acquired by computing the measurement vector Ax where A is an m N measurement matrix for some m

In various embodiments disclosed herein a matrix A may be constructed and feature recovery methods may have several advantages including i the number of measurements m is O k logN which undercuts currently known schemes that achieve m O k log N k ii the matrix A is ultra sparse which is important for hardware considerations and iii the recovery algorithm is fast and runs in time sub linear in N. In some embodiments the recovery guarantee may be relaxed by requiring that only a constant fraction of the non zero entries of the vector x are recovered correctly.

In some embodiments a class of images that possesses additional geometric structure may be considered as described further below.

An example of an image is described herein with reference to . An example of a model of an image is a sparse image including a small number of distinguishable objects plus some noise. For example in astronomical imaging an image may include a small number of distinguishable stars plus some noise. Each object is modeled as an image contained in a small bounding box for some constant w. For example as shown in the object fits in a w w bounding box . The image such as the image of is constructed by placing k objects such as objects in the image in an arbitrary fashion subject to a minimum separation constraint. The image is then modified by adding noise as shown for example in image including dots . Next the notions of minimum separation constraint distinguishability and noise are formalized.

Let x by an N dimensional real vector and assume N nfor an integer n. We will treat x both as a vector and as an n n matrix with entries x i j for i j n . An object o is a w w real matrix as shown for example in . Let O o. . . o be a sequence of k objects and let T t. . . t be a sequence of translations in x i.e. elements from n w . We say that T is valid if for any i j the translations tand tdo not collide i.e. we have t t w for some separation parameter w w . For o O and t t t T we define t o to be a w w matrix indexed by t. . . t w 1 t. . . t w 1. The ground truth image is then defined as x t o .

In some embodiments a grid G is imposed on the image with cells of size w w . For example as shown in a grid is superimposed on the image thereby dividing the image into a plurality of cells . For clarity the pixel grid shown in is not shown in . The grid may be a randomly shifted grid of cells of width w w . Each cell has a size w w . Thus the image includes n w cells in each dimension of the image and a total of n w cells. Let xbe the image i.e. an w dimensional vector corresponding to cell c. A projection F is then used that maps each sub image xinto a feature vector F x . If y xfor some cell c F y is used to denote F x after the entries of x y are set to 0. If y is not a cell and not contained in a cell then F y is left undefined.

In some embodiments the distinguishability property we assume is that for any two district o o from the objects O 0 and for any two translations t and t we have F t o F t o T when it is defined for some threshold T 0 and some norm . In other words different objects need to look different under F. For concreteness the feature vectors used in some examples provided herein are the magnitude the sum of all pixels in the cell and centroid the sum of all pixels in the cell weighted by pixel coordinates . In one example of an image including stars calculating feature vectors includes calculating magnitude and centroid because the magnitudes of stars follow a power law and the centroid of a star can be resolved to 0.15 times the width of a pixel in each dimension. In some embodiments the distinguishability constraint allows us to undercut the usual lower bound by a factor of log k.

The observed image x is equal to x where is a noise vector as shown for example in image . The threshold T determines the total amount of noise that the method of compressing sensing tolerates. Specifically let F where is the noise corresponding to cell c. We assume that 0 and make no other assumptions about the noise.

Referring again to the Figures examples of methods of compressive sensing are further described herein with reference to . In some embodiments our results assume sparsity parameter k C log N for some constant C. In some embodiments a distribution is constructed over random binary m N matrices A such that given Ax for x described above we recover with constant probability a set D of k cells such that at least k 2 of the cells fully containing an object are included in D. Recovering features may include recovering cells corresponding to the features as shown for example in . In some embodiments we may recover an approximation to xfor any c D. For example shows recovered features including data corresponding to the cells recovered in . The matrix has column sparsity O logN . Note that if for example k N then the column sparsity is constant. Moreover the matrix A has only m O k logN rows.

In some embodiments acquiring a compressed representation of an image such as image of may include folding the image or acquiring a plurality of measurements less than the size of the image. In some embodiments folding the image may include applying a hashing function. For example illustrates applying a pairwise independent hash function Hp x ax b mod P to a numbering of the cells of . The signal generated by hashing is shown to include a plurality P of cells where P n w cells.

In some embodiments construction of the measurement matrix may be based on other algorithms for sparse matrices such as Count Sketch or Count Min. In some embodiments as shown for example in hash each cell c is hashed such as each cell in s O logN times into s arrays of q O k buckets and sum all cells hashed to the same bucket. Each bucket defines one measurement of w pixels which gives m O k logN measurements. The measurements or buckets thus form the measured signal the measured signal being z Ax . The number of measurements in the measured signal is less than the size N of the image . N may be a positive integer. The measured signal acquired by compressive sensing is a compressed representation corresponding to the image .

In some embodiments the method of compressive sensing may include applying an error correcting code f that maps each cell onto exactly one bucket in every row or array . The cells mapping onto each bucket are summed. Hashing may be done by using one of the Chinese Reminder Theorem CRT codes i.e. modulo prime hashing and Reed Solomon RS codes. For example the code illustrated in is CRT where each cell is mapped to its index or numbering modulo various relatively prime numbers. It should be noted that unlike in other scenarios our use of CRT codes does not incur any additional polylogarithmic factors that typically lead to sub optimal results. Each cell of including each cell containing the objects is mapped onto exactly one bucket in every array as illustrated in . Some distinct objects may be hashed to the same bucket for example as shown in bucket of which includes two distinct objects. Applying an error correcting code enables robust compressive sensing and allows for handling errors. The errors may be due to distinct objects being hashed to the same bucket as illustrated by bucket in the noise vector and the grid cutting objects into pieces. Hashing based on CRT and RS codes is described next in further detail.

In some embodiments such as described above with reference to compressive sensing includes hashing each cell c such as each cell into s different arrays of size O k such as arrays . In some embodiments folding the image of may include hashing as shown for example in . Each array may be a fold. Hashing may be considered as a mapping f from N to O k . As long as each character of the mapping is approximately pairwise independent then in expectation most of the k objects will be alone in most of the array locations they map to. In some embodiments recovering one or more objects may include clustering the values in the buckets as will be described further below giving us a noisy version y of the true codeword y f c with a constant fraction of errors. We may then efficiently decode from y to c. Hence in some embodiments there is a need for an efficient error correcting code that is also approximately pairwise independent in each character. Precise definitions of requirements of some embodiments and two codes the Reed Solomon RS code and the Chinese Remainder Theorem CRT code that achieve these requirements are described below.

In many applications the range B is the product of s symbols B . . . B. For a function A B and i s we use f x to denote the ith coordinate of f.

When B is a produce space one may settle for a weaker notion of pairwise independence. In some examples rather than requiring pairwise independence for the whole range we only require pairwise independence in each coordinate.

Let B B . . . B. A hash family x of functions h A B is coordinate wise C pairwise independent if for all i s any x x A and all y y B we have

For any function B D and family x of functions h A B f denotes the family of A D functions g x f h x h .

Proof. Let be A B and f be B D D . . . D. Then for any i s any x x A and all y y Dwe have as desired 

A function f A B for B B . . . Bis an error correcting code of distance d if for any two distinct x x A f x and f x differ in at least d coordinates.

We say that f is efficiently decodable if we have an algorithm frunning in log B time with f y x for any x A and y B such that f x and y differ in fewer than d 2 coordinates.

For any prime P N the function family ax b mod P for a b P is pairwise independent when viewed as a set of functions from N to P .

If f is an efficiently decodable error correcting code with distance d then so is f h for every h with a P.

Proof. Since a P there exists an amodulo P that can be efficiently computed. Hence h is injective so f h is an error correcting code of distance d. Furthermore h x a f x b mod P is efficiently computable.

We say that a family G of functions g A B . . . Bis a C N s d independent code if G is coordinatewise C pairwise independent q B 

If f A B . . . Bis a C uniform and efficiently decodable with distance d and B q for all i then f is a C N s d independent code.

Discussed below are two 4 N s s r q independent codes. Both are achievable for any parameters with 2N

Let q s. The Reed Solomon code f q q is defined for f x by i interpreting x as an element of F ii defining X F to be the rth degree polynomial with coefficients corresponding to x and iii outputting f x 1 . . . s . It is well known to have distance s r and to be efficiently decodable.

Let p . . . p q 2q be distinct primes note that the asymptotic distribution of prime numbers implies q log q s . Hence for any x N any r of the residues mod p . . . puniquely identify x. The CRT code f P p . . . p is defined by taking the residues modulo each prime. It has distance s r and is efficiently decodable.

Proof. Let i s . The projection of fonto its ith coordinate is one to one over a domain that is any consecutive sequence of pintegers. Hence over the domain P the ratio between the likelihood of the most common and the least common values in the range is

Suppose g A B . . . Bis drawn from a 4 N s s r independent code. Let S S A. Define the set of colliding symbols 

Referring again to let O o. . . o be a sequence of k objects such as the objects and let T t. . . t be a sequence of non colliding translations in x. Also let be the noise vector and let x be the noisy image as described above and illustrated in . We further introduce small constants 0 whose values will be determined in the course of the analysis.

As described with reference to a square grid G is imposed such as the grid with w w cells on the image x such that w w . The grid may be shifted by a vector v chosen uniformly at random from w . Let S be the set of cells that intersect or contain some object t o and S S be the set of cells that fully contain some object t o . Observe that a fixed object such as an object is fully contained in some cell such as a cell with probability 1 w w 1 2 since each axis of the grid intersects the object with probability w w . This implies that the expected number of cells in S S is at most 2 k which implies by Markov that S S 16 k with probability 7 8 see Lemma 11 . In some embodiments we will assume the latter event holds. Let k S . We choose 0 such that k 2k.

Referring again to the measurement matrix A is defined by the following linear mapping. Let G denote the set of cells such as cells of . Let g G B B . . . Bbe drawn from a 4 N s 4 3 s independent code such as either Gor G. Moreover we require that k q such a code is achievable per the two code constructions described above with s logN as long as k C log N for some constant C such that both q k2N and s

That is all cells of are hashed into B q buckets of and sum all cells hashed to the same bucket. The acquired or measured signal that is the measurement vector z Ax is now equal to a concatenation of vectors z. . . z. Note that the dimension of z or the number of measurements is equal to m w 2 B O qs O k logN .

In some embodiments recovering one or more objects of the image is as described next and illustrated with reference to . For simplicity assume for now that the image contains no noise and ignore the effect of two different objects being hashed to the same bucket such as bucket of . In this case all buckets containing distinct objects are distinguishable from each other. Therefore non empty buckets can be grouped into k clusters of size s with each cluster containing buckets having a single value. Since q N each cluster of buckets uniquely determines the cell in x containing the object in those buckets.

In some embodiments it is desirable that the method of compressive sensing be robust to errors. The errors may be due to distinct objects being hashed to the same bucket such as bucket of the noise vector and the grid cutting objects into pieces. Accordingly the act of clustering may aim to find clusters containing elements that are close to each other rather than equal and thus clustering may allow for some small fraction of outliers. For example clustering may be based on an approximation algorithm for the k center problem with outliers which correctly clusters most of the buckets. In some embodiments to handle the small fraction of the buckets that are grouped incorrectly the hash function may be constructed sing a constant rate error correcting code.

In some embodiments recovery of one or more objects of the image starts by identifying the buckets that likely contain the cells from S and labels them consistently i.e. two buckets containing cells from S should receive the same label allowing for a small fraction of errors. The labels are then used to identify the cells.

In some embodiments recovering one or more objects features of an image may include calculating a plurality of feature vectors based on the compressed representation of the image. The compressed representation may include one or more folds of the image. For example the measured signal is a compressed representation of the image . illustrates the measured signal wherein for each bucket represented by z a feature vector F z has been calculated. For example a feature vector F corresponding to each of buckets and is shown in . In one example the feature vector F may include information about mass and centroid.

In some embodiments recovering one or more objects may further include thresholding the plurality of feature vectors. illustrates thresholding the plurality of feature vectors corresponding to the plurality of buckets of . A plurality of cells corresponding to feature vectors that are above a threshold are highlighted in . The cells may form a region R i j F z r threshold. The threshold may be a predetermined threshold. The buckets of that are not in R may be discarded. The thresholded feature vectors corresponding to the cells forming the region R may then be clustered as illustrated in .

Recovering one or more objects may further include decoding one or more clusters. Recovering the one or more objects may include recovering the locations corresponding to the one or more objects in the image as shown for example in . Recovering the one or more objects may include recovering data or values of pixels corresponding to the one or more objects as shown for example in . illustrates a signal indicative of the locations of the objects in the image . For example cluster is decoded to recover the location of a first object in the original image cluster is decoded to recover the location of a second object in the image and cluster is decoded to recover the location of a third object in the image. Decoding may thus include decoding each Rto obtain a cell din the original image.

Formally for a set of pairs X let F X denote F z i j X. In some embodiments recovering features or objects may include the following steps 

1. Identify R i j F z r T 2 that is Rcontains the heavy cells of the measurement vector z . This corresponds to thresholding a plurality of feature vectors as described above. illustrates a result of applying this step wherein Rcontaining the heavy cells are identified. 2. Partition R into sets R R . . . Rsuch that R sk and such that for 1 l k the diameter of F R is at most T 2. 3. For each label l 1 . . . k create a vector u B such that for each i 1 . . . s u j if i j R if there are many such j ties are broken arbitrarily or u an arbitrary erasure symbol if no such j exists. as described above illustrates a result of applying steps 2 and 3 of this embodiment. 4. For each label l 1 . . . k apply decoding for g to u obtaining a possibly invalid decoded cell d. Each in umay be replaced with an arbitrary j before decoding. FIG. I illustrates the result of applying step 4 to the clusters and of each of the three clusters corresponding to one of the three distinct labels or objects k 3 .

We analyze the above described embodiment of the compressive sensing method by keeping track of the errors at each step of the above four steps.

Step 1 For any cell c S and i 1 . . . s we say that i preserves c if F z F x r T 24 and g c g c for all other c S. That is there is no collision from the hashing process and the total amount of distortion due to the noise is small. Let P i g c I preserves c. Note that P R. We show that P is large and that most of R is in P.

Proof. Consider any pair c i S 1 . . . s and let j g c . If i does not preserve c it must be because either i there is another cell c S c c such that g c j or because ii the total noise affecting z equal to F F has norm at least T 24.

By Lemma 11 with probability at least 7 8 the number of pairs affected by i is at most 32ks S q. The event ii is determined by the noise vector . However for each i there are at most

Altogether the total number of pairs c i such that c is not preserved by i is at most 32sk S q 24 sk 32 1 16 24 sk sk as desired.

Proof. Any element i j of R P heavy but not preserved must belong to one of the following three categories 

1. j g c for c S such that c is not preserved by i. By the previous lemma lemma 12 there are at most sk such pairs c i with probability at least 7 8.

This implies that with probability at least the total number of pairs i j R P is at most 16 2 sk sk as desired.

Step 2 Observe that the elements of F P can be clustered into k clusters of diameter T 12. Thus by the previous lemma there is a k clustering of all but sk elements of F R such that the diameter of each cluster is at most T 12. A 6 approximation algorithm is now applied for this problem finding a k clustering of F R such that the diameter of each cluster is at most T 2. Such an approximation algorithm follows immediately from a known 3 approximation algorithm for k center with outliers.

Step 3 Consider cells c c S such that c is preserved by i and c is preserved by i . If F z and F z belong to the same cluster then it must be the case that c c since otherwise the distance between them would be at least T 2T 24 T 2. In other words for each l if u P Rcontains at least one element of P then all the elements of uare derived from the same cell.

With probability at least 3 4 u. . . ucontain a total of at most 2 sk errors and sk erasures i l such that u .

Note that P R sk. Each error in u. . . ucorresponds to a unique element of R P and we have 2 Additionally uucontain at least P elements total and so the number of erasures is at most sk P sk P P sk sk where we use P 1 sk from Lemma 12.

Step 4 We can replace erasures by errors and conclude uuhave a total of at most 3 sk errors. It follows that at least k 2 of them have at most 2 3 s errors and therefore can be decoded. Therefore the set D d. . . d contains at least k 2 elements of S.

Assume k C log N for some constant C a signal x with k objects and a noise vector all subject to the constraints delineated in the Example of Class of Images section described above. There is a distribution over random binary m N matrices A m O k logN and an associated recovery algorithm with the following property. Suppose that the algorithm is given Ax for x x . Then the algorithm recovers with probability at least 3 4 a set D of k cells such that at least k 2 of the cells fully containing an object are included in D. Moreover the matrix has column sparsity O logN .

Referring now to there is illustrated a flow chart of one example of an embodiment of a method of compressive sensing. The method includes receiving a signal including features in act . For example the signal may be an image and the features may be objects as illustrated in . The method further includes an act of applying a hashing function. For example the hashing function may be any one of the hashing functions disclosed herein. The hashing function may be a pairwise independent hashing function. For example illustrate applying a hashing function to the image . The method further includes applying an error correcting code to generate a measured signal in act . For example illustrates a result of applying an error correcting code namely the Chinese Remainder Theorem CRT code to generate the measured signal . In various embodiments acts and may be performed in a single step.

The method further includes an act of calculating feature vectors based on the measured signal. For example illustrates a result of calculating features vectors for each bucket of the measured signal . The method further includes thresholding the plurality of feature vectors calculated in act . For example illustrates a result of thresholding to generate cells corresponding to thresholded feature vectors. The method further includes clustering the thresholded feature vectors in act . For example illustrates a result of clustering the thresholded feature vectors of thereby generating the clusters and wherein each cluster corresponds to a respective feature to be recovered.

The method further includes an act of decoding the clusters generated in act thereby identifying one or more features of the signal. Identifying one or more features of the signal may include identifying locations of the one or more features in the signal or may include identifying any other values or content associated with the one or more features. For example illustrates a result of applying act to the clusters and of to identify the locations of the objects . further illustrates recovering content associated with the recovered cells and .

In various embodiments one or more acts of the method may be performed substantially in parallel may overlap or may be performed in a different order. In some embodiments method may include more or less acts. In one embodiment thresholding the feature vectors in act may not be included in method and act may include clustering the feature vectors calculated in act . In some embodiments acts and may correspond to acquiring a compressed signal corresponding to an original signal including one or more features and acts and may correspond to recovering the one or more features of the original signal based on the compressed signal without reconstructing the original signal. In one example acts and may be included in acts and of the method illustrated in whereas acts and may be included in act of the method illustrated in . In another example the act of folding an image to generate one or more folds in the method of may include acts and of the method and the act of recovering features based on the folds in method may include acts and of the method .

According to another aspect various embodiments of apparatuses configured to perform various methods of compressive sensing as disclosed herein may be provided. In one example the compressive sensing apparatus of may be configured according to the method of . In particular the lens may receive an image including features according to act . The focal plane array may be configured to perform acts and or of method thereby acquiring a compressed measured signal corresponding to the image. In some embodiments the compressed signal may be digitized by the digitizer . In other embodiments acquiring the compressed signal by the focal plane array may include digitizing. The decoder may be configured to perform one or more of the acts and thereby recovering one or more features of the original image.

The decoder may be configured to receive the measured signal. The decoder may further be configured to perform one or more of the acts and of the method and to generate an output signal indicative of locations or content corresponding to one or more features of the input signal . In some embodiments the apparatus may include other modules. For example in one embodiment the apparatus may include a clustering module configured to receive the measured signal from the encoder and to perform one or more of acts and of the method and the decoder may be configured to receive one or more clusters output by the clustering module and to perform act to decode the clusters thereby generating the output signal .

An example of an application of the various compressive sensing methods and apparatuses disclosed herein is a task in satellite navigation formally known as attitude i.e. orientation determination. An attitude is a triple roll pitch yaw that describes an orientation relative to the fixed night sky. Many satellites compute their attitude by acquiring a picture of night sky extracting stars from the picture and matching patterns of stars to an onboard database. A standard attitude determination routine may be implemented with the picture acquisition and star extraction steps performed by an embodiment of a compressive sensing method disclosed herein. Embodiments of the compressive sensing method perform better recovery on small numbers of measurements and may be orders of magnitude faster than previous compressive sensing approaches.

The implementation of the compressive sensing method applied to satellite navigation is referred to herein as Star Recovery with Geometric Features SRGF . The SRGF performs star extraction in very small space and time conforming to the physical constraints of computing on a satellite.

One of the main energy costs in conventional imaging is incurred by analog to digital conversion as was described for example with reference to . Compressive sensing allows reducing the number of measurements that need to be digitized. Previous compressive imagers have several disadvantages as described herein and in particular are not suited for use as satellite based imagers. One disadvantage is that previous compressive imagers use dense matrices which are impractical when the signal is weak compared to the noise.

In modern satellites the entire task of attitude determination is encapsulated in a star tracker or star camera. To acquire attitude such cameras typically acquire the incoming light as an n by n pixel analog signal referred to as the preimage that is the input image or the original image digitize each of the npixels to obtain the digital image locate a set S of star like objects in the digital image match patterns formed by three to five element subsets of S to an onboard database this step is commonly known as star identification and recover spacecraft attitude by using the database coordinates of the identified stars. Digitizing each of the npixels consumes a significant amount of power due to the number of analog to digital conversions and locating a set S of star like objects in the digital image requires significant processing and memory resources due to the large number of measurements that must be processed. In contrast compressive sensing methods and apparatuses disclosed herein compress the nmeasurements of the preimage into m

We assume everywhere that stars live on a rectangular interval rather than a sphere. We index the rectangle by right ascension longitude and declination latitude 2 2 in particular 0 is the equator and 2 is the north pole. So that the approximation makes sense we ignore the portion of the sky where 2 8 the dashed lines in . An embodiment of a compressive sensing method is tested on the areas between the dashed lines where the Mercator projection does not skew the distribution of stars too much. We also assume without loss of generality that the camera is axis aligned.

In one example we define the mass of a star to be the number of photons from the star that hit our camera. The mass of the jbrightest star in the sky is j . gives some intuition for the mass of the biggest stars in our pictures relative to the amounts of noise. There are usually 50 to 150 total stars in a given preimage. In the horizontal axis ranges from 100 to 0 and represents a percentage and the vertical axis represents the natural logarithm ln of the number of photons. For instance if x y falls on line it means that in x percent of the pictures the ln mass of the second biggest star is greater than y. The two dashed lines are the expected Gaussian Lnoise over a given star when there is a standard deviation of 150 and 400 photons of noise per pixel.

In one implementation we fix n 800 N 640000 for all experiments where n is the number of pixels in each dimension and N is the total number of pixels of an image. We expose the camera to a 0.08 radian by 0.08 radian 4.6 by 4.6 degree patch of the sky which means that a typical image will have around 3 to 10 objects bright stars 10percentile to 90percentile and 50 to 150 stars that act as background noise. To generate test images we use the Smithsonian Astrophysical Observatory SAO Star Catalog randomly select patches from the sky and convolve the stars with a Gaussian of radius 0.5 pixels. These are typical values for modern star cameras. Stars are point sources of light. Stars cover more than one pixel in the preimage only because the lens of the camera convolves the image with a function approximated by a Gaussian.

In this example we set the column sparsity s to a small value 2. We set the object size w to 3 as the vast majority of a star s mass falls within a 3 by 3 box.

In this example we assume the stars are randomly rather than adversarially distributed within the image x and use that to simplify construction of the measurement vector z Ax . In particular we no longer need to compose our error correcting code with a hash family such as that from Definition 1. If pand pare the primes used to construct the CRT code as described above under the Chinese Reminder Theorem code we find primes p such that p square root over p . Note that we don t necessarily need p and p to be prime as long as they are relatively prime or coprime since the Chinese Remainder Theorem used in the decoding step of recovery applies in this case as well. As used herein the term prime may refer to p and p even when they are just relatively prime or coprime.

Since the stars were assumed to be randomly distributed in x they are randomly distributed within each zas well. We may define the measurement vector z to be a 1 dimensional representation of the pair z z and construct our measurement matrix A accordingly. We may think of each zas a 2 dimensional image. Each zmay be a fold corresponding to the image x . Therefore zand zare two folds based on the image x .

As described and illustrated for example with reference to recovering one or more stars based on zand zin this example includes the following steps of calculating feature vectors thresholding clustering and decoding 

1. In each z we identify ten 3 by 3 cells with high mass such that no two cells collide in more than 4 pixels. We allow the 3 by 3 cells to wrap around the edges of z.

2. In place of a k centering algorithm we greedily choose up to 8 pairs of cells c c from z z such that the feature vectors F c and F c are close. In this example the feature vector F c is a triple of values the mass of c along with two coordinates for the centroid of c. Each pair of cells represents a cluster including a first cell cfrom zand a second cell cfrom z. Each pair from this step corresponds to one of the u. 3. Apply the Chinese Remainder Theorem in each dimension to recover a 3 by 3 region of the original image for each pair from step 2.

We now have an image x with up to 8 decoded regions or star candidates . We input x into a star identification algorithm. In one example star identification works as follows We first extract a subset SAO of the Star Catalog SAO by taking the 10 largest stars in every ball of radius 4.6 degrees. SAO has 17100 stars compared to 25900 stars in SAO. We then build a data structure DS that can find a triangle of stars in SAO given three edge lengths and an error tolerance. We query DS with subsets of three stars from x until we find a match. Star identification may be performed by any regular star identification algorithm and in particular a star identification algorithm that has some tolerance for incorrect data.

There are many sources of noise in real star cameras we mimicked the major ones by having photons hit the camera in a random Poisson process and by adding Gaussian noise to Ax . We report our results as a function of the standard deviation of the added Gaussian noise.

The above described example implementation of a compressive sensing method referred to herein as Star Recovery with Geometric Features SRGF was run along with another example Sequential Sparse Matching Pursuit SSMP on 159 randomly generated images of the sky. SSMP is a near linear in N time procedure with recovery quality on par with other known methods. The same measurement matrix A was used for both methods. In this application both SRGF and SSMP only attempt to recover portions of the signal x we then ran the same star identification algorithm on the outputs of both of them. We note that SSMP is not designed for this level of sparsity and works better for d 2.

Referring to there is illustrated an example of applying embodiments of compressive sensing disclosed herein to detect muzzle flash. illustrates one example of an image of a muzzle flash having a size of 1024 1024 pixels with the shot location at along the vertical dimension and at along the horizontal dimension. The image may be input to a compressive sensing method such as the method of . The image may be input to a compressive sensing apparatus as shown for example in .

In one example the image is folded to generate a first fold and a second fold as shown in . The first fold has a first size of 107 107 pixels and a shot location at pixel along the vertical dimension and at pixel along the horizontal dimension. The second fold has a second size of 211 211 pixels and a shot location at pixel along the vertical dimension and at pixel along the horizontal dimension. The fold sizes may be selected to be coprime. The folds and may be generated for example by the encoder of . The folds and represent a compressed signal corresponding to the image . That is instead of acquiring the entire image the folds and are acquired. Based on the size of the acquired folds and compared to the size of the original image the total compression in this example may be calculated as 107 211 1024 0.534 or around 5 . Thus the number of measurements acquired is much less than the size of the original image .

In some embodiments disclosed herein an input image may exhibit spatial sparsity. When an input image is spatially sparse that is most pixels have a value of zero folding introduces relatively little degradation as most non zero pixels end up being summed with zero valued pixels in the folded representation. Examples include star images of the night sky and images of muzzle flash as described above. In some embodiments an input image may not exhibit spatial sparsity. For example an input image may be a natural image wherein the zero valued pixels of spatially sparse images become non zero for natural images. In this case folding may introduce distortion in the form of signal noise as features of interest are added to other non zero pixel values.

In various embodiments disclosed herein the features to be recovered may be corners as described next. Other embodiments may be directed at determining translation or rotation between two images such as between subsequent image frames. These features may be recovered based on compressed or folded representations according to aspects of the present disclosure. Simulation results showing the performance of various embodiments on natural images are also disclosed.

In various embodiments a feature to be recovered may be a corner. According to aspects disclosed herein some embodiments of compressive sensing methods and apparatuses may be used for recovering corners for example based on folded representations of an image. One example of application of these embodiments is vision based navigation systems where features are tracked from consecutive video frames for motion and navigation estimation. Embodiments of compressive sensing methods and apparatuses for recovering corners based on folds are presented next along with simulation results of applying the embodiments to various images.

In various embodiments a method of compressive sensing to recover one or more corners based on folds may include one or more acts of folding detecting corners based on folds pairwise correlating corners matching corners and decoding.

In one embodiment the input image is I and the first and second folds generated in act are two distinct folds F x x FOLD I p p and F x x FOLD I p p where pand pare the fold sizes of a first dimension and pand pare fold sizes of a second dimension and the fold sizes of each dimension are pairwise coprime that is gcd p p 1 gcd p p 1 where gcd is the greatest common denominator. Act may further include applying a CRT code. Method may include decoding to recover one or more corners of the image I based on the CRT code the first fold and the second fold as will be described further below with reference to act .

The output generated by applying the method may include x x pixel locations that are candidate corner locations. That is recovering one or more corners may include recovering locations of the one or more corners. In some embodiments recovering one or more corners may include recovering any other values or content associated with the one or more corners.

The method further includes an act of applying corner detection to the first fold and the second fold. Applying corner detection to the first fold may generate a first plurality of corners and applying corner detection to the second fold may generate a second plurality of corners.

In some embodiments folding in act may create an artificial edge in at least one of the first fold and the second fold. The artificial edge is an artifact of folding and is not representative of the input image. Accordingly the method may include an act of detecting one or more artificial edges associated with at least one of the first fold and the second fold. Method may further include an act of eliminating a subset of corners generated by act based on an artificial edge. In particular a first subset of corners may be eliminated from the first plurality of corners to generate a first plurality of pruned corners and a second subset of corners may be eliminated from the second plurality of corners to generate a second plurality of pruned corners. In some embodiments acts and may be performed substantially in parallel or may overlap.

The method further includes an act of calculating pairwise cross correlation values between windows associated with respective corners of the first and second folds. As will be described in detail further below act may include calculating a plurality of cross correlation values. A cross correlation value may correspond to a first window and a second window where the first window is associated with a first corner of the first plurality of corners and the second window is associated with a second corner of the second plurality of corners. The first and second plurality of corners may be generated by act or may be the first and second plurality of pruned corners generated by act . Cross correlation values may be calculated in act for all pairs of corners each pair including a first corner from the first fold and a second corner from the second fold.

Cross correlation values may then be used to match each corner of the first fold with a corresponding corner of the second fold in act of the method . Matching corners in act may include for example pruning a candidate match based on a cross correlation value. For example thresholding may be applied to prune candidate matches. In some embodiments acts and may be performed substantially in parallel or may overlap. The method further includes an act of decoding the matched corners to recover corners of the image. In one example decoding may be based on the CRT code.

In various embodiments one or more acts of the method may be performed substantially in parallel or may overlap. Act may be an instance of acquiring a compressed signal corresponding to an original signal including one or more features corners and acts to may correspond to recovering the one or more features of the original signal based on the compressed signal without reconstructing the original signal. In one embodiment act of the method may be one example of act of folding an image to generate one or more folds in the method of and acts to of the method may correspond to one example of the act of recovering features based on the folds in method of .

According to another aspect various embodiments of apparatuses configured to perform various methods of compressive sensing as disclosed herein may be provided. In one example the compressive sensing apparatus of may be configured according to the method of . In particular the lens may receive an image including corners. The focal plane array may be configured to perform act of the method thereby folding the image to generate a plurality of folds corresponding to the image. In some embodiments the folds may be digitized by the digitizer . In other embodiments folding by the focal plane array may include digitizing. The decoder may be configured to perform one or more of the acts and thereby recovering one or more corners of the original image.

In one example the compressive sensing apparatus of may be configured according to the method of . For example the encoder may further be configured to fold an image according to act and to output the first and second folds. The decoder may be configured to receive the folds to perform one or more of the acts and of the method and to generate an output signal indicative of locations or content corresponding to one or more corners of the input image . In some embodiments the apparatus may include other modules. For example in one embodiment the apparatus may include a corner detection module configured to receive the folds from the encoder and to perform one or more of acts and and a matching module configured to receive the corners from the corner detection module and configured to perform one or more of acts and . In this embodiment the decoder may be configured to receive matched corners output by the matching module and to perform act to decode the matched corners thereby generating the output signal .

Referring again to applying corner detection in act eliminating a subset of corners based on artificial edges in act calculating correlation values in act matching corners in act and decoding based on the matched corners in act are each described next in further detail.

Applying corner detection for example in act of the method illustrated in may include applying one of various corner detection algorithms such as those described below.

To a human corner detection seems rather simple there is a corner wherever two edges intersect at close to a right angle. However as is typically the case in machine vision a more systematic and mathematical approach is needed to detect a corner using a computer system or a compressive sensing apparatus. Harris and Stephens proposed an approach in 1988 that has become a widespread standard for the task. Intuitively it strives to find pixels that have drastic changes in intensity in two orthogonal directions. One can think of this as there exists a corner wherever the sum of squared differences between an image patch and the shifted version of the patch by 1 pixel in the horizontal and vertical directions has a large value. If a large difference is observed only when shifting in the horizontal or vertical direction then the image patch contains an edge. If no large response is observed when shifting in any direction then the image patch is of relatively constant intensity. Harris extended this simple method of corner detection to be isotropic by incorporating all possible shifts not only in the horizontal and vertical direction by approximating the sum of squared differences via a Taylor expansion. Following is a formal statement of the Harris corner detection algorithm 

Let a grayscale image I be the input to the algorithm. I x x represents the image intensity at pixel location x x . Harris corner detection may include the following steps 

1. Calculate discrete approximations to the image gradient in both the horizontal and vertical directions I x x and I x x calculated as

The symbol indicates 2 dimensional convolution. Two important details of one example implementation are 1 The output image size is truncated to be equal to the larger of the two input image sizes and 2 edge values are replicated for the computation of output values where the convolutional mask extends past the input image boundaries this reduces edge effects from the convolution.

If we let and be the eigenvalues of the matrix M x x then corner pixels are located where both and are large. It can be computationally expensive to calculate the eigenvalues at all pixel locations so an approximation to this explicit calculation is achieved with the above corner response function R x x . In this expression k is a sensitivity factor. Smaller values of k make the algorithm more likely to detect sharper corners.

The Harris algorithm outputs the corner response function R x x . It is a distribution over all the pixels of corner likelihoods. Larger values of R indicate a stronger corner response for that pixel and thus an increased likelihood of being a corner.

The next step is to extract exact corner locations from the response function R x x . According to one aspect disclosed herein this may include at least one of non maximal suppression and corner identification steps 

Non maximal Suppression This step may include thinning the response matrix by shrinking neighboring connected large response values corresponding to the same corner to the single local maxima. This avoids outputting two adjacent pixels as separate corners when in reality they have large corner response values R x x due to the same corner region in the image.

Corner Identification This step includes picking a subset of the largest corner response values after non maximal suppression as the output of the algorithm. The desired method for doing so is largely application specific but two common constraints are returning the N best corners N largest corner response values R x x or returning all corners with a response function value above a user specified quality level Q.

An example implementation of act of the method includes applying a modified version of Harris corner detection as described above. Harris corner detection may be implemented for example based on the corner function in MATLAB. The window function w is a 5 5 two dimensional Gaussian kernel with standard deviation 1 5 

In an example implementation a sensitivity factor k 0 04 is used. Additionally a maximum of N 200 corners is returned per image and only corners with a response function value above quality level Q equal to 1 of the maximum response value is returned namely only those pixels with R x x 0.01 max R x x .

In one embodiment a modified version of Harris corner detection as described above is performed in acts and based on the two folds F x x and F x x generated in act . The departure from standard Harris corner detection is that a certain subset of the corner response values is ignored when selecting the best corners. As described above with reference to act of the method this is to deal with the fact that the folding process may create a prominent artificial false edge in a resultant fold in both the horizontal and vertical directions. This occurs when the fold size does not perfectly divide the image dimension. For example artificial edges are created when the final subimages in the folding at the extremes of the image the right and the bottom add value to only a subset of the folded image pixels. This phenomenon creates a sharp intensity drop off in the form of an edge in the horizontal and vertical edges. This artificial edge is problematic for corner detection when many false corners are created from other natural edges in the image folding on top of this artificial edge.

It is known a priori that false corners will deterministically be created along these artificial edges from the folding. In one embodiment in order to compensate all corner response values R x x within a distance of d pixels from artificial edge locations are ignored in selecting the best corners to output. For example shows the regions between the vertical lines and between the horizontal lines which are ignored. This has the side effect of throwing out any original corners that happen to fold into the ignore regions. Assuming a somewhat uniform distribution of corners in the input image this does not result in the loss of too many original corners. Specifically the probability of loss from landing in the ignore regions for any given corner is

Referring again to performing acts and results in an output of two sets of detected x x corner locations cand c from the two input folds Fand Fgenerated by act .

Calculating pairwise correlation values for example in act of the method illustrated in may include calculating correlation values as described herein.

In one embodiment the normalized cross correlation between image windows patches centered on the corners detected from the previous step such as from acts and or is calculated. As used herein the terms window and patch may be used interchangeably. In one embodiment square image patches of size 2b 1 by 2b 1 are used where b is the distance from the center pixel to the edge of the image patch. Normalized cross correlation may be used instead of standard cross correlation for a couple of reasons. First the output values are normalized to the range 1 1 which is a desirable property for relative comparisons between image patches. Second it is more robust to lighting and amplitude changes between images which we expect to be true from the degradation of folding. The signal noise from the folding may yield image patches corresponding to the same corner in the original image that are unequal in the two folded versions. However in the act of calculating cross correlation values we are leveraging the fact that enough image content is preserved in the local neighborhood for template matching between patches to enable corner matching in the next step such as in act of the method .

In one example the cross correlation value may correspond to a shift size of zero. In other words we may take the cross correlation value of when the image patches are perfectly aligned. If p x x and p x x are the image patches of size 2b 1 by 2b 1 centered on the corners we may compare the correlation value defined as 

When a corner lies within b pixels from the edge of an image the image patch we use must wrap around the other side of the image. This follows naturally from the fact that bin selection under folding is linear modulo the fold size. Accordingly the wrapped around pixels are the bins that the image pixels from a particular corner s local neighborhood mapped to in the original image.

Matching corners for example in act of the method illustrated in may include matching as described herein. Matching includes matching corners between the folds that is matching each corner of a first plurality of corners detected based on a first fold with a corresponding corner of a second plurality of corners detected based on a second fold.

According to one aspect of the present disclosure it is appreciated that matching may be framed as a minimum cost bipartite graph matching problem to which there are known solutions. The two sets of corners that is the first and second plurality of corners from each of the folds cand c may form the two disjoint sets of the bipartite graph. An edge may be placed between each node of one set to all other nodes in the other set with a weight of 1 where a is the correlation value between the two corner patches from the previous step. 1 may be used instead of a in order to transform our problem into a minimum cost matching.

In some embodiments matching may include one or more pruning acts. For example matching may include at least one of the following two pruning steps pruning based on weak correlation values and pruning based on impossible corner matches to reduce the complexity of the graph and ultimately the number of false corners returned.

Pruning based on weak correlation values even with the noise induced from folding very weakly correlated image patches do not generally correspond to the same corner. Accordingly in this pruning step the graph edges for all corner pairs with a correlation value below a minimum threshold are removed. Correspondingly all graph edges with a weight greater than 1 are removed.

Pruning based on impossible corner matches the CRT code was described above under the Chinese Remainder Theorem section and is a theorem about the uniqueness of an integer given its residuals among a series of coprime integers. In one embodiment of a compressive sensing method based on two folds the Chinese Remainder Theorem may provide a mapping for each dimension from the two residuals modulo the fold sizes to the set of integers from 0 to the product of the fold sizes. That is in the first dimension a mapping from r r 0 . . . pp 1 where 0 r

We can quantify a precise performance gain from this fact based on the fold sizes. Assuming a uniform distribution of corner locations the probability of two corners that do not correspond to the same corner in the original image decoding to a location still within the image boundaries is 

It can be observed that as the fold sizes become larger this optimization becomes more effective at pruning the complexity of the matching problem.

In one example the specific algorithm used for matching corners is the classic Hungarian Algorithm. An efficient extension of the Hungarian Algorithm for the rectangular case where the number of nodes in each disjoint set of the bipartite graph is different may also be used. This is of interest for our application given the number of corners recovered from each fold is in general not equal.

In one embodiment decoding is based on matching obtained between the sets of corners cand c. The goal is to decode corner location information about the original input image I from the position of the corner in the folded versions of the image. In one embodiment the Chinese Remainder Theorem CRT coupled with the fact that the fold sizes pand p are coprime are the critical properties that allow the decoding to take place. The CRT code was described above under the Chinese Remainder Theorem section and is a theorem about the uniqueness of an integer given its residuals among a series of coprime integers. Formally it may be defined as follows 

Chinese Remainder Theorem Let n. . . nbe integers greater than 1 and pairwise relatively prime. Let n n n n. . . n. Then for any integers a a . . . a the set of simultaneous equations mod For 1 i k has a unique solution modulo n for the unknown x.

The CRT proves the uniqueness for a given x satisfying the given residuals modulo the a. An efficient algorithm for finding x is known and referred herein as CRT decode. Its inputs are the coprime bases n and the residuals a.

Once the same corner from the original image has been identified in each of the two folds we have the residual of its xand xlocations among two sets of coprime integers p p and p p . Therefore running CRT decoding along the first dimension and then again along the second dimension yields the location of the corner in the original input image.

The following example demonstrates applying one embodiment of compressive sensing to recover corners on a simple image consisting of only 4 corners. illustrates an example of application of the compressing sensing method to an image including four corners to recover the corners according to aspects disclosed herein. The image has a size of 1024 by 1024 pixels. Folding the image by applying the act generates a first fold and a second fold . For simplicity the horizontal and vertical fold sizes for each fold are the same in this example p p 157 p p 161.

Each of the first fold and the second fold further illustrate a result of applying corner detection in act and eliminating a subset of corners in act . The stars in the first fold indicate the first plurality of corners detected in the first fold and the stars in the second fold indicate the second plurality of corners detected in the second fold. Furthermore the area in the first fold indicates the corner response regions that are ignored in the first fold and the area in the second fold indicates the corner response regions that are ignored in the second fold. Each of the area and the area includes artificial edges as an artifact of folding.

An example of performing the act of calculating pairwise correlation values and the act of matching corners is illustrated in . In particular illustrates a bipartite graph and a pruned bipartite graph . The pruned bipartite graph is a pruned version of the bipartite graph generated by applying the graph pruning steps described above pruning based on weak correlation values and impossible corner matches . The pruned bipartite graph shows the reduction in complexity due to pruning relative to the bipartite graph .

Referring now to in each of the bipartite graph and the pruned bipartite graph the four nodes correspond to the locations of the four corners in the second fold and the four nodes correspond to the locations of the four corners in the first fold . In the bipartite graph pairwise correlations are calculated as shown by the correlation values associated with edges between each pair of nodes including a first node and a second node . In the pruned bipartite graph many edges are pruned for example based on the correlation values. In this example the pruning has done all the work and only one possible matching exists for each pair of nodes as shown in the pruned bipartite graph . In another example after the pruning an algorithm such as the Hungarian algorithm may be applied to the pruned bipartite graph to determine the final corner correspondences.

Each corner in the first fold is matched with a corresponding corner in the second fold based on the matching illustrated in the pruned bipartite graph . Once the corners of the first and second folds are matched the matched corners are decoded in act . Referring again to the image illustrates the original image including the decoded corners from the matching using the CRT. In this example all of the four original corners were correctly recovered.

In this section a number of different results will be presented on the performance of an implementation of one embodiment of compressive sensing for recovering corners on various natural images. In all cases for simplicity the fold sizes p pand p p. All of the experiments are conducted at a range of compression ratios showing how the algorithm performs as a function of the degree to which dimensionality is reduced.

In various embodiments of compressive sensing methods and apparatuses parameters such as the correlation window size b and the correlation value threshold may be varied. These parameters may be selected based on a determination of optimal values.

Correlation Window Size b illustrate results of applying compressive sensing to the test image 1 of for various correlation window sizes b. shows correctly recovered corners as a function of compression ratio for various values of b and shows false corners as a function of compression ratio for various values of b. We observe that when the window size is very small b 2 the surrounding image patch of a corner is too small to allow differentiation between corners during the pairwise correlation. At the other extreme when it is too large correlation values remain too small because of the added noise from the folding process. With b 8 there appears to be a balanced tradeoff between the two competing effects however the optimal value for this parameter would ultimately be application specific depending on the desired performance metric.

Correlation Value Threshold illustrate results of applying compressive sensing to the test image 1 of for various correlation value thresholds T. shows correctly recovered corners as a function of compression ratio for various values of and shows false corners as a function of compression ratio for various values of . A value of zero for corresponds to no pruning based on correlation value and increasing corresponds to relaxing the minimal standard for a correlation value to be considered a match. From it can be seen that increasing causes a slight decrease in the number of correctly recovered corners. From it can be seen that increasing causes the number of false corners to decrease significantly especially at the lower compression levels where the pruning from impossible corner matches is less effective. As is the case for the parameter b the optimal value for depends on the application and what performance metric the user wishes to maximize. For the experiments with the test suite in a value of 0.2 is found to be a good tradeoff between the two competing effects.

Repeatability From the results above it can be seen that the method of compressive sensing detects a subset of the original corners in the image. For a vision based navigation application we must verify that a completely different subset of corners is not returned from subsequent frames of the same scene. This would yield frame to frame feature tracking impossible. Features must survive temporally across subsequent image frames for vision based navigation.

As the results above show for one example at very high compression levels most corners may be lost. This is the result of multiple compounding effects 

First higher compression levels may correspond to smaller folds and consequently increased degradation from the folding process. Smaller folds correspond to a larger number of pixels from the original image mapping to any given bin of the fold. The local geometry of many corners may simply be lost in the folds with so many image patches being summed on top of each other. This may manifest itself at two different places. Some corners may not be detected in the folds. Also some corners may still be detected in both folded representations but may have such low correlation value from the noise that they cannot be matched.

Second smaller fold sizes may cause an increased number of fake corners to be detected in the folds. Fake corners are two edges from the original image folding on top of each other in the folded version thus forming a corner. Fake corners increase the complexity of the matching by adding more nodes to the bipartite graph matching problem. When a fake corner is accidentally matched a false corner may be returned.

Third smaller fold sizes may decrease the effectiveness of both types of pruning during the matching step. Weak correlation pruning may prune correct matches accidentally because correlation values are so low from the increased folding noise. Impossible corner pruning may become less effective because the product of the fold sizes is smaller and consequently the probability of a false corner surviving the pruning step increases.

All of the above effects are alleviated as the compression rate decreases i.e. fold sizes increase and this can be observed in the performance graphs as can be expected from natural images.

In some examples there may be some loss of corners through the folding process and some amount of false corners may be returned. From the perspective of vision based navigation this may be tolerable since feature tracking only needs some subset of consistent features from frame to frame. Additionally features that the system cannot track such as false corners are usually ignored. Therefore various embodiments of compressive sensing methods and apparatuses disclosed herein may provide a low power approach for vision based navigation applications.

As described with reference to the method of the compressive sensing method of includes acts of folding corner detection matching and CRT decoding. In this embodiment the method further includes an act of edge detection. An input image is folded to generate a first fold and a second fold . Edge detection is then applied to each of the first fold and the second fold resulting in a respective plurality of edges being identified in each fold as shown by the fold images and . Corner detection is then applied to the fold images and thereby generating fold images and each including a respective plurality of corners. In this example the plurality of corners in each of the fold images and are pruned corners generated by eliminating a subset of corners based on artificial edges. The corners in the folds and are matched and decoded to recover corners as shown in the output image wherein the recovered corners are shown superimposed on the input image . Note that the input image may not be reconstructed by the compressive sensing methods. That is compressive sensing recovers the corners based on the folds without reconstructing the image . The decoded corners corner locations are superimposed on the original image for illustration.

According to aspects disclosed herein compressive sensing methods and apparatuses are provided for determining rotation and translation information between images based on folded representations of the images. One example of application is aerial photography such as acquiring a series of image or video frames from a satellite or reconnaissance aircraft. The motion model for images in such scenarios is typically constrained to rotation and translation due to the geometry of the situation. Another example of application is vision based navigation where an efficient compressive sensing apparatus may be configured on an unmanned aerial vehicle UAV thereby providing rotation and translation vectors with respect to the Earth s surface to be used in calculating navigation solutions.

Let I x y represent an image at time 0 and I x y represent an image at time t. The image is said to be translated by an amount x y if The image is said to be rotated by an angle if cos sin sin cos The two can be combined such that an image is said to be translated by an amount x y and rotated by an amount if cos sin sin cos 

Translation between two images may be determined based on the phase difference between the Fourier transforms. Let I x x and I x x be the two input images where Iis a translated version of Iby an amount x x and let Fand Fbe the corresponding two dimensional Discrete Fourier Transforms DFT F m m DFTI x x F eand F m m DFTI x x F e.

A phase correlation function d DFTe may be constructed and if Iis a translated version of I the phase correlation function d will have a spike exactly at x x . This follows from the Fourier Shift theorem which states that if there are two signals of size M N Iand I where one is a cyclically shifted version of the other the discrete Fourier transforms are related by 

The phase difference will be a constant phase offset term and the inverse transform will yield an impulse in the phase correlation function d at the shift amount. It should be noted that in most applications the subsequent images are not cyclically shifted but rather infinitely shifted. That is only a subset of the image data is common and new image content replaces the circularly wrapped around portion. Consequently this equality does not strictly hold but still provides a good approximation especially at small shift sizes.

From an implementation perspective the phase difference may be thought of as the phase of the cross power spectrum of the two signals 

Eliminating the normalizing factor above and inverse transforming is equivalent to taking the cyclic cross correlation between the two images and looking for a peak. This approach may also be used to accurately register the images. In some cases pure phase correlation may be superior for a number of reasons including robustness to noise and elimination of ambiguities in maximal peak selection.

Furthermore for infinite 2 d signals and continuous transforms the Fourier Rotation Theorem applies. That is if I x y is a rotated version of a signal I x y by an amount then their Fourier Transforms are related by cos sin sin cos 

The rotation amount is then found based on how much the corresponding transforms have rotated. This quantity may be determined for example by converting the transforms to a polar coordinate system where the rotation becomes a translation or manually rotating the image while sweeping through a range a values and measuring where the strongest correlation peak occurs. The equality above does not strictly hold for infinite signals and discrete transforms as the periodic replication effect of the DFT does not commute with rotation. However optimizations and modifications may deal with this effect.

When an image is both translated and rotated the constant phase offset from translation will not affect the rotation property of the Fourier transform magnitudes. Therefore one approach is to first undo the rotation by determining it from the transform magnitudes yielding two purely translated images that phase correlation may operate on to determine the translation amount.

Previous approaches for translation and rotation determination operate on the entire original image frames. In contrast compressive sensing methods and apparatuses for determining translation or rotation according to aspects disclosed herein may be based on compressed or folded representations of the images as described in further detail below for each of translation and rotation determination.

Various embodiments of compressive sensing methods and apparatuses disclosed herein may be used for determining translation between images based on their folded representations. In one example the images may be subsequent images of a video signal.

In various embodiments translation may be preserved by folding. As described above with reference to various embodiments of compressive sensing see for example folding may include applying a hash function that maps each pixel in the input image to a bin bucket in the fold folded image and sums all of the pixels mapped to the same bin bucket . As used herein bin and bucket may be used interchangeably.

An example of application of a method of compressive sensing for determining a translation between two images is described next with reference to . illustrates an example of application of one embodiment of the method of compressive sensing for determining a translation between two images such as between a first image and a second image shown in . Let I x x and I x x be the input images and respectively where I x x is translated by an amount x x . The images and thus include a common region of overlap .

In one embodiment the method includes an act of folding a first image to generate a first fold and a second fold and an act of folding a second image to generate a third fold and a fourth fold. For example two respective folds may be generated for each of the image and the image . In one example the fold sizes are coprime in each dimension that is gcd p p 1 gcd p p 1 as described above in relation with various embodiments. Folding in acts and may include applying a CRT code. Referring to the first image is folded to generate two folds of I a first fold represented by F FOLD I p p and a second fold represented by F FOLD I p p . The second image is folded to generate two folds of I a third fold represented by F FOLD I p p and a fourth fold represented by F FOLD I p p .

In various embodiments the acts and of folding each image may be performed substantially in parallel may be performed sequentially in any order or may overlap. In some embodiments folding in acts and may include applying a hashing function or applying an error correcting code as shown for example in method of . In some embodiments folding may include generating a different number of folds and one or more of the other acts of the method may be based on a different number of folds.

Compressive sensing may further include determining a translation between the first image and the second image based on the first fold the second fold the third fold and the fourth fold . Determining a translation based on the folds may include one or more of the acts and of the method .

As shown in the method further includes an act of calculating a first phase correlation function based on the first and third folds and an act of calculating a second phase correlation function based on the second and fourth folds. For example the method may include calculating the phase correlation function dbetween the first folds of each image Fand F and the phase correlation function dbetween the second folds Fand F. Referring to a first phase correlation function is shown to be calculated based on the first fold corresponding to the image and the third fold corresponding to the image . A second phase correlation function is shown to be calculated based on the second fold corresponding to the image and the fourth fold corresponding to the image . In various embodiments the acts and of calculating phase correlation functions may be performed substantially in parallel may be performed sequentially in any order or may overlap.

The method further includes an act of determining a first peak based on the first phase correlation function and an act of determining a second peak based on the second phase correlation function. For example the method may include identifying the peaks in the phase correlation functions dand d. Let the coordinate of the peak of dbe y y and the coordinate of the peak of dbe z z . Referring to a first peak is determined based on the first phase correlation function and a second peak is determined based on the second phase correlation function . In various embodiments the acts and of determining the peaks may be performed substantially in parallel may be performed sequentially in any order or may overlap.

Method further includes an act of decoding the peaks to determine a translation between the first image and the second image. In one embodiment decoding may include applying the Chinese Remainder Theorem. For example with the residuals of the translation vector x x among two coprime integers in each dimension we recover the translation vector using the CRT x CRT decode y z p p and x CRT decode y z p p as shown in .

According to one aspect disclosed herein it is appreciated that compressive sensing for translation determination leverages the fact that after folding the phase correlation is able to identify and register the translation of a circularly shifted image. Two parameters may affect the performance of compressive sensing for translation determination the translation shift amount and the fold size or the degree of dimensionality reduction . As the translation shift amount increases the percentage of common image content decreases and the correlation peaks may become increasingly weak and more difficult to distinguish from noisy correlation peaks. Similarly as the dimensionality gets reduced from smaller fold sizes performance may decrease as more noise slices are added in the component of the signal model and the correlation peaks become smaller. In addition the size of the underlying circularly shifted component becomes smaller with smaller fold sizes and the correlation peaks may naturally become weaker because there is less signal to match against. Accordingly in various embodiments parameters of compressing sensing may be selected based on a given application or based on some criterion to be optimized.

According to another aspect various embodiments of apparatuses configured to perform various methods of compressive sensing as disclosed herein may be provided. In one example the compressive sensing apparatus of may be configured according to the method of . In particular the lens may receive a first image and a second image that is translated relative to the first image. The focal plane array may be configured to perform folding according to acts and of the method thereby folding each of the first and second images to acquire a plurality of folds corresponding to each image. In some embodiments the folds may be digitized by the digitizer . In other embodiments folding by the focal plane array may include digitizing. The decoder may be configured to perform one or more of the acts and thereby recovering a translation between the images.

The decoder is configured to receive the folds and . The decoder may further be configured to perform one or more of the acts and of the method and to generate an output signal indicative of a translation between the first input image and the second input image . In some embodiments the apparatus may include other modules. For example in one embodiment the apparatus may include a phase correlation module configured to receive the folds output from the encoder and to perform one or more of acts and of the method and the decoder may be configured to receive peaks corresponding to the phase correlation functions output by the phase correlation module and to perform act of decoding to generate the output signal .

Various embodiments of compressive sensing methods disclosed herein may be implemented on hardware software or a combination thereof. For example some embodiments may be implemented on one or more apparatuses disclosed herein. Some embodiments may be implemented on one or more computer systems or one or more features of the computer systems as described herein. Various embodiments of compressive sensing apparatuses may include one or more computer systems or features of computer systems.

As described above previous approaches for translation determination operate on the entire original image frames. In contrast compressive sensing methods and apparatuses for determining translation according to aspects disclosed herein are based on folded representations of the images. Even without a hardware implementation of folding various embodiments of compressive sensing methods for translation detection provide computational advantages. Given input images of size N N a compressive sensing method for translation determination has complexity that is linear in the number of image pixels O N whereas standard phase correlation operating on the full images has complexity O Nlog N . This is because the compressive sensing method is not bound by transform calculations but by folding.

An analysis of the complexity of a compressive sensing method for translation determination is compared herein to a previous approach that operates on an entire image. An analysis of the complexities of exemplary building blocks is presented first.

2 d Fast Fourier Transform FFT In one example assuming row column decomposition and use of the FFT the 2 dimensional DFT calculation for an image of size N by N has complexity log log log log .

Phase Correlation In one example correlation of two N by N images includes 2 forward DFTs 1 inverse DFT and element by element multiplication. It has complexity 2log log log .

Correlation Peak Selection In one example finding the maximal peak in the output of circular correlation is O N .

Folding In one example the complexity of folding for an image of size N by N is O N . One must add each image pixel to its hashed bin value.

CRT decoding In one example Chinese Remainder Theorem decoding of 2 residuals modulo p pincludes finding 2 modular multiplicative inverses p mod p2 and p mod p1 . In one example the Extended Euclidean algorithm is used to find the multiplicative inverses and the complexity of doing so is log min p p . The overall CRT decoding algorithm may include multiplying these inverses by the residuals and summing them. Thus in one example the overall complexity is O 2 log min p p 2O 1 1O 1 O log min p p .

An analysis of the complexity of a compressive sensing method for translation determination is compared next to a previous approach that operates on an entire image. In this example each of the two inputs images has a size N by N.

Phase correlation on full input images In one example this includes correlating the two full input images and searching for the maximal peak. The complexity of this operation is O Nlog N N O Nlog N .

Compressive sensing method for translation determination In one example as described above this includes folding each input image twice to size p pand p p. Then correlation and peak selection are carried out on the two sets of folds and CRT decoding is performed in each dimension on the location of the identified peak in the two folds. In this example we will assume p p p p p. This may be good practice such that image content in both folds is jointly maximized. Moreover we will assume we are using the minimum p necessary to decode the peak at any point in the image. For this the necessary requirement is that the product of the fold sizes is greater than N that is p N. This implies that the minimum necessary p square root over N . The complexity of this step is 

Therefore the compressive sensing method for translation determination brings the complexity down to O N from O Nlog N for an approach operating on full images.

Note that this analysis assumes the smallest possible P is able to decode the translation amount i.e. identify the correct peaks in the folded correlation matrices . As shown and described further below with reference to we have experimentally verified this to be the case for even relatively large shift amounts with N 1024. The compression ratio at the minimum possible p is

In this section simulation results are presented for an implementation of one embodiment of compressive sensing for determining translation. In these examples for simplicity the fold sizes p pand p p.

As shown in the boundary pushes outward as the fold sizes increase and the corresponding compression level decreases. The results show extremely impressive performance at very high compression levels corresponding to small fold sizes . For example corresponds to the fold sizes 31 34 which is very close to the maximum amount of dimensionality reduction that may be tolerated 31 34 1054 which is barely above the necessary 1024 for our image size required to correctly decode the shift given the use of the CRT . Even at this extremely high compression level we can still register an impressive amount of all possible shifts. If we restrict the shift amounts we can tolerate to even smaller sizes than the full extent of the image and compression may be increased even more than is shown in the results.

As a point of comparison shows the results of phase correlation on the unfolded image with no compression. The differences between the boundary in and the other charts in give a measure of the performance cost of folding. The results show that we lose a relatively small amount in performance with a gain of a very large amount of dimensionality reduction.

To get a sense for how well our algorithm performs relative to alternative forms of dimensionality reduction we compare the performance of running our compressive sensing method for translation determination against phase correlation on reconstructed images using a traditional compressive sensing approach as described earlier. More specifically for the traditional compressive sensing approach we use noiselets as the measurement matrix A and total variation TV minimization as the recovery image reconstruction algorithm. This combination tends to work well for natural images. NESTA was the MATLAB optimization package used to carry out the TV minimization.

In the 100 100 estimates indicate that the respective method correctly registered the image pairs. It may be observed that the compressive sensing method according to this example corresponding to the column labeled folding estimate in significantly outperforms the traditional compressive sensing method. Embodiments of the method of compressive sensing based on folding as described herein may accurately register the translation at compression ratios as low as 0.02 while the traditional method is ineffective at any compression ratio lower than about 1.3 . This further validates that dimensionality reduction in image feature recovery problems can be further increased by using the compressive sensing methods and apparatuses disclosed herein that aim to directly recover the relevant image features without reconstructing the image or images.

Various embodiments of compressive sensing methods and apparatuses disclosed herein may be used for determining rotation between images based on their folded representations. In one example the images may be subsequent images of a video signal.

According to one aspect it is appreciated that rotation does not exhibit quite the same circular shifting phenomenon under folding as in the case of translation. In general after rotation completely different sets of pixels from the original image are combined in the bins buckets of the folds. This yields methods of measuring the rotation amounts of DFT magnitudes useless. According to one aspect it is appreciated that the distribution of gradient directions may be utilized for rotation determination. Rotation has the effect of rotating every local gradient direction by the same amount. Moreover strong gradient directions are preserved through the folding process. The local gradient direction is essentially another example of a local geometric feature that tends to be preserved well under folding.

In various embodiments of compressive sensing for rotation determination rotation may be determined by examining the distribution of gradient directions between the folded representations of rotated images. The shape of this distribution may be thought of as a signature for the image and how much that shape shifts by is the rotation amount.

An example of application of a method of compressive sensing for determining a rotation between two images is described next with reference to . illustrates an example of application of one embodiment of the method of compressive sensing for determining a rotation between two images such as between a first image and a second image shown in . Let I x x and I x x be the original images and respectively where Iis a rotated version of Iby an angle .

In one embodiment the method includes an act of folding a first image to generate a first fold and an act of folding a second image to generate a second fold. For example a respective fold may be generated for each of the image and the image . Referring to the first image is folded to generate a fold of I that is a first fold represented by F FOLD I p p where pand pare fold sizes in each dimension. The second image is folded to generate a fold of I that is a second fold represented by F FOLD I p p .

In various embodiments the acts and of folding each image may be performed substantially in parallel may be performed sequentially in any order or may overlap. In some embodiments folding in acts and may include applying a hashing function or applying an error correcting code as shown for example in method of . In some embodiments folding may include generating a different number of folds and one or more of the other acts of the method may be based on a different number of folds.

Compressive sensing may further include determining a rotation between the first image and the second image based on the first fold and the second fold . Determining a rotation based on the folds may include one or more of the acts and of the method .

As shown in the method further includes an act of calculating a first distribution of gradient angles based on the first fold and an act of calculating a second distribution of gradient angles based on the second fold. Referring to a first distribution of gradient angles is shown to be calculated based on the first fold corresponding to the image . A second distribution of gradient angles is shown to be calculated based on the second fold corresponding to the image . The distribution of gradient angles may be gradient histograms. In various embodiments the acts and of calculating distributions of gradient angles may be performed substantially in parallel may be performed sequentially in any order or may overlap. In various embodiments the acts and may further include one or more of the following 

1. Calculating the gradients of the two folds such as folds and of this includes both the horizontal and vertical component for each F F F F. Gradients may be calculated for example as described above.

2. Ignoring pixels in the regions near artificial false edges created from the folding process as described for example with reference to . From an implementation perspective this may be performed for example by setting the gradient to 0 at these pixel values. These pixel values may add very strong arbitrary false votes to angles of 0 and in the next step so we ignore their values. 3. Creating a histogram of N bins of the gradient angles for each fold. Creating a histogram may include creating a weighted histogram. For example some embodiments may include weighing each angle value s vote by the value of the gradient magnitude I at that coordinate. That is if a is the set of all x x coordinates whose angle maps to bin i the histogram value for bin i is I x x . Let Hand Hbe the N bin weighted histograms of and respectively formed from this step.

The method further includes an act of correlating the first distribution of gradient angles and the second distribution of gradient angles to determine rotation between the first and second images. In some embodiments correlating may include circularly correlating Hand Hand finding the index of the maximum peak. This value may be scaled by the number of angles per bin based on the N used for the histograms yielding the rotation .

According to another aspect various embodiments of apparatuses configured to perform various methods of compressive sensing as disclosed herein may be provided. In one example the compressive sensing apparatus of may be configured according to the method of . In particular the lens may receive a first image and a second image that is rotated relative to the first image. The focal plane array may be configured to perform folding according to acts and of the method thereby folding each of the first and second images. In some embodiments the folds may be digitized by the digitizer . In other embodiments folding by the focal plane array may include digitizing. The decoder may be configured to perform one or more of the acts and thereby recovering a rotation between the images.

The processor is configured to receive the folds and . The processor may further be configured to perform one or more of the acts and of the method and to generate an output signal indicative of a rotation between the first input image and the second input image . In some embodiments the apparatus may include a different number of processors or modules. In some embodiments the processor may include one or more features of the computer systems previously described.

In another example we rotate a test image through a series of known rotations and measure the error of the compressive sensing method output versus ground truth across different compression levels. shows a test image used in this experiment Image source photographed by an inventor . In these simulations we restricted image content to the shown circle in in order to remove the effects of differing image content across the rotations due to occlusion. Because we are rotating by arbitrary angles on a discrete grid pixels cannot be perfectly moved to their new locations. Bilinear interpolation has been used to extrapolate pixel values from a weighting of the four closest neighbors. In particular the MATLAB imrotate implementation was used. The rotation amounts are from 1 to 90 at 1 intervals.

Another interesting observation is the effect of the histogram size N on the results. In some embodiments higher histogram sizes may lead to less error because we have higher angle resolution. However there may be an upper bound since histogram mass can be spread out so much that correlation values become too weak to properly discern the rotation amounts. shows the mean squared error as a function of compression ratio for a number of different histogram sizes. The results are very similar across different N. Various embodiments of compressive sensing for rotation determination may be configured to use different values of the histogram size parameter.

Various embodiments of compressive sensing methods disclosed herein may be implemented on hardware software or a combination thereof. For example some embodiments may be implemented on one or more apparatuses disclosed herein. Some embodiments may be implemented on one or more computer systems or one or more features of the computer systems as described herein. Various embodiments of compressive sensing apparatuses may include one or more computer systems or features of computer systems.

Various embodiments of compressive sensing systems disclosed herein may include efficient hardware implementations of folding. Power savings from working with dimensionally reduced signals may thereby be gained. In some embodiments focal plane technology may be used to implement folding. Folding may be implemented by structured binning using a focal plane array. illustrate examples of folding using focal plane arrays. In each case various pixels are shown to be summed to generate a summed pixel of a fold such as pixels and . Other optical implementations of folding may also be used in various embodiments.

Advantages of various methods and systems disclosed herein include efficient and precise recovery of features in the original scene without reconstructing the entire image of the scene digitization at the encoder at an extremely low rate that beats other known methods and systems and simple encoders amenable to hardware implementation.

Having described above several aspects of at least one embodiment it is to be appreciated various alterations modifications and improvements will readily occur to those skilled in the art. Such alterations modifications and improvements are intended to be part of this disclosure and are intended to be within the scope of the invention. Accordingly the foregoing description and drawings are by way of example only and the scope of the invention should be determined from proper construction of the appended claims and their equivalents.

