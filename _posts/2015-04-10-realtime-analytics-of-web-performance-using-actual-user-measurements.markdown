---

title: Real-time analytics of web performance using actual user measurements
abstract: A method for real-time capture of actual user experiences on a website, web application or mobile app includes receiving, in first servers, one or more beacons, each containing data items. Each beacon is generated in real-time from a user session. The data items are aggregated in one or more first sets of N data buckets associated with each of the first servers. Each of the first servers transmits the data items of each of the N data buckets to a second server over a network, which further aggregates the data items received in one or more sets of N data buckets corresponding to and identically configured as the data buckets of the first servers. The corresponding data contents of the one or more second sets of N data buckets is aggregated into one or more final sets of N data buckets used in generating a real-time analytic dashboard.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09491248&OS=09491248&RS=09491248
owner: SOASTA, Inc.
number: 09491248
owner_city: Mountain View
owner_country: US
publication_date: 20150410
---
This is a continuation application of Ser. No. 13 830 850 filed Mar. 14 2013 now U.S. Pat. No. 9 021 362 B2 which is a continuation impart CIP application of application Ser. No. 12 804 338 filed Jul. 19 2010 now U.S. Pat. No. 9 436 579 B2 entitled R T M T LTRA both of which are assigned to the assignee of the present application.

The present disclosure relates generally to cloud computing more particularly to automated systems and methods for functional and or load testing of websites as well as to capturing and analyzing real time information of actual user experience on websites and using web based applications.

Information technology is now routinely used by many enterprises to receive process and provide information via widely accessible electronic communications networks such as the Internet. Yet most information technology systems will begin to deny service or fail to process message traffic efficiently when communications traffic exceeds a processing capacity of the system. Such failures in communication can significantly impair the operations of an enterprise in many ways. Slower website performance is also known to cause users visitors to leave the website sooner. Another consequence of poor performance is that the website may be downgraded in search engine results rankings.

In recent years enterprises and developers have sought an easy and affordable way to use cloud computing as a way to load and performance test their web based applications. Cloud computing gets its name from the fact that the machine storage and application resources exist on a cloud of servers. In cloud computing shared resources software and information are provided on demand like a public utility via the Internet. Cloud computing is closely related to grid computing which refers to the concept of interconnecting networked computers such that processing power memory and data storage are all community resources that authorized users can utilize for specific tasks.

Load testing a web based application or website can involve simulating a very large number e.g. up to or beyond 1 000 000 of virtual website users via Hypertext Transfer Protocol HTTP or HTTP Secure HTTPS message intercommunications with the target website. For very large tests sending and aggregating the test results data generated from all of the load servers to a database available to a dashboard in real time has been problematic. The huge overhead of receiving and processing a very large number of Hi IP messages containing all of the requests and responses sent from each of the many load servers to the analytic servers responsible for analyzing the test results data can easily overwhelm the resources of the server.

Enterprises are also interested in real user measurement RUM data analysis that captures and collects data about present real user experiences when actual users visit and use a website or web application. Traditional analytical tools have been able to provide data analysis solutions that collect data about past events it has been problematic to deliver real time business intelligence information based on actual mobile and desktop user experience as it occurs in the present. That is traditional solutions have not been able to test monitor and measure real user behavior to gain the analytics and intelligence needed to capture performance metrics such as bandwidth and web page load time as well as correlate the impact of such metrics on the behavior of users as it relates to the business bottom line.

In the following description specific details are set forth such as server types cloud providers structural features process steps etc. in order to provide a thorough understanding of the subject matter disclosed herein. However persons having ordinary skill in the relevant arts will appreciate that these specific details may not be needed to practice the present invention. It should also be understood that the elements in the FIGS. are representational and are not drawn to scale in the interest of clarity.

References throughout this description to one embodiment an embodiment one example or an example means that a particular feature structure or characteristic described in connection with the embodiment or example is included in at least one embodiment. The phrases in one embodiment in an embodiment one example or an example in various places throughout this description are not necessarily all referring to the same embodiment or example. Furthermore the particular features structures or characteristics may be combined in any suitable combinations and or sub combinations in one or more embodiments or examples.

In the context of the present application the term cloud broadly refers to a collection of machine instances storage and or network devices that work together in concert. A public cloud refers to a cloud that is publically available i.e. provided by a cloud provider that a user may access via the Internet in order to allocate cloud resources for the purpose of utilizing or deploying software programs and also for running or executing those programs thereon. Some public clouds deliver cloud infrastructure services or Infrastructure as a Service IaaS . By way of example Amazon Elastic Compute Cloud also known as EC2 is a web service that allows users to rent computers on which to run their own computer applications thereby allowing scalable deployment of applications through which a user can create a virtual machine commonly known as an instance containing any software desired. The term elastic refers to the fact that user can create launch and terminate server instances as needed paying by the hour for active servers.

Cloud platform services or Platform as a Service PaaS deliver a computing platform and or solution stack as a service. An example PaaS cloud provider is the Google App Engine which lets anyone build applications on Google s scalable infrastructure. Another leading software platform in the cloud provider is Microsoft Azure an application platform in the cloud that allows applications to be hosted and run at Microsoft datacenters. A private cloud is a cloud that is not generally available to the public and which is typically located behind a firewall of a business. Thus a private cloud is only available as a platform for users of that business who are behind the firewall.

The term cloud computing refers to a paradigm in which machine storage and application resources exist on a cloud of servers. In cloud computing shared resources software and information are provided on demand like a public utility via the Internet. Thus cloud computing provides computation data access and storage resources without requiring users to know the location and other physical details of the computing infrastructure. Cloud computing is closely related to grid computing which refers to the concept of interconnecting networked computers such that processing power memory and data storage are all community resources that authorized users can utilize for specific tasks.

The term server broadly refers to any combination of hardware or software embodied in a computer i.e. a machine instance designed to provide services to client devices or processes. A server therefore can refer to a computer that runs a server operating system from computer executable code stored in a memory and which is provided to the user as virtualized or non virtualized server it can also refer to any software or dedicated hardware capable of providing computing services.

In the context of the present disclosure load servers also referred to as Maestro or test servers are servers deployed and utilized primarily to generate a test load on a target website. That is load servers play the test composition generating a load on a target customer website and web applications. Load servers also function to report back results of the load test and statistics in real time. Analytic or result servers are deployed and utilized primarily to collect the real time test results from the load servers aggregate those results stream the results to real time dashboards and store them in a database.

Similarly collector servers are servers deployed and used to receive real user measurement data sent from a user s client device. Each of the collectors process and aggregate the data items received. Consolidators are servers deployed and utilized in a hierarchical manner to accumulate and aggregate the data received from the collectors. The consolidators are typically configured to stream the further aggregated data to a ResultService Reader Writer unit that stores a final aggregated set or array of data results in a database accessible to a computer or main instance that generates an analytic dashboard in real time from the final aggregated set or array of data results.

The term real time refers to a level of computer responsiveness that a user senses as sufficiently immediate or that enables the computer to keep up with some external process for example to present visualizations of load test results as it constantly changes . Thus real time is a mode of computer operation in which the computer collects data analyzes or computes with the data reports e.g. visually displays and or stores the results nearly simultaneously i.e. within milliseconds or seconds.

A grid or test grid refers to a collection of interconnected servers that may be used to run a load test on a target website or to perform RUM of a website or deployed application to provide a real time view of actual user activity. As disclosed herein a computer program or grid wizard may be utilized to automatically determine the global cross cloud resources needed to execute a test or measurement. Furthermore the computer program can automatically allocate those server resources required for the test or measurement across multiple different cloud providers verifies that the allocated servers are operational and that the allocated servers are running the proprietary software or computer program product correctly. The computer program or product also monitors the allocated servers replacing non operational servers when allocated and during execution of the test or measurements and displays results from multiple globally distributed clouds in a real time streaming dashboard which requires no user initiated refresh.

In the context of the present disclosure the term beacon refers to data related to a user experience on a particular website or web application collected by a library e.g. a JavaScript library running on the browser of a client device and sent via Hypertext Transfer or Transport Protocol HTTP to a server. The server receiving the beacon information may aggregate that data along with similar data received from other users accessing the same website or web application. Any HTTP headers sent by the browser as part of the HTTP protocol are also considered part of the beacon. In a sense a beacon may be thought of as a page view on a website but without a corresponding page. For every user who visits that website the browser running the library on the user s client device measures various metrics and records data that is then beaconed back to a results server in real time as the user navigates through or uses the website.

A data bucket or bucket refers to a type of data buffer data container block of memory or file on a disk that contains data. In the present disclosure data buckets are arranged in a set or array with each data bucket containing a count of a number of data values falling within a predetermined range. A given data bucket may be empty or non empty. The set or array of data buckets are typically arranged in an ascending order such that all of the data buckets span a full range of data values expected to be received for a particular data set or data type e.g. from the lowest data value to the highest data value. Each of the data buckets are defined with predetermined value ranges such that a received data value will fall within a single one of the data buckets in the set or array.

In one embodiment a method and system is provided for calculating load test aggregated test results at three architectural levels first at the load server level second at the analytics server level and lastly at the system wide data store level. In a specific implementation detailed level raw data the content of a request sent to a website e.g. to access a homepage is not sent from any of the load servers to any analytic server. Thus system resources on the load server side are not wasted for the continual sending of raw data. Similarly system resources on the analytics server side are conserved since the need to receive and process raw data sent from the load servers is obviated.

Instead of sending the raw data web pages responses and their statistics obtained during a load test from each of the load servers to the analytic servers a level of aggregation is added within each of the load servers. That is in one embodiment each load server includes an embedded component or client referred to as a Results Service Client that performs analytics server functions at the load server level. This Results Service Client aggregates test result data and generates various results statistics or metrics e.g. average response time average response size etc. from the raw data that the load server received from the target website or application. The statistics computed by the Results Service Client in each of the load servers are then sent to their associated analytic server at periodic intervals e.g. once every five seconds .

In another embodiment a grid of servers is deployed to collect and process real user measurements that capture actual mobile and desktop user experience on a website or web application. A beacon of data received from a plurality of client devices associated with users visiting or accessing a particular website or web application is aggregated in a multi tiered architecture of servers that collect and consolidate measurements in identical sets or arrays of data buckets. In one embodiment the width or range of each data bucket used for collecting data received and aggregated from the user beacons is set to be equal bucket to bucket. In another embodiment each of the data buckets is assigned a predetermined variable width or range. Visualized data analytics for display in a real time analytic dashboard are generated from the collection and consolidation of real user measurements.

Target website is shown connected to a public cloud via Internet cloud . Public cloud includes a main instance coupled to a database . Database may be used to store test results store metadata indicative of the test definition and to store monitoring data e.g. CPU metrics generated during the load test. Main instance is also shown coupled to a pair of analytic servers and a pair of load servers within cloud consistent with a snapshot view of the start of a process of deploying a test grid. It is appreciated that cloud may comprise multiple clouds associated with multiple different cloud providers. In the example shown main instance is a virtual machine deployed on a server provided in cloud that communicates with a browser application. In one embodiment main instance may include a results service designated as a reader results service as opposed to all of the other remote writer results services which reads data from database and serves it to a web application which in turn formats the data and serves it to an analytic dashboard in the browser. In operation main instance executes the coded sequence of computer executed steps e.g. from code stored in a memory that allocates the server resources required for the test across one or multiple different cloud providers. The same application that allocates verifies server resources may also verify that the allocated servers are operational to conduct the website load test. The main instance may also execute code that implements the multi tiered load test results aggregation steps disclosed herein.

Connected to the front end of cloud through Internet cloud is a laptop computer associated with a user who may orchestrate deployment of the test of target website . It is appreciated that in other implementations computer may comprise a desktop computer workstation or other computing device that provides a user interface that allows a user to create and execute the test composition define the parameters of the grid initiate the load test as well as analyze review results of the test in real time. The user interface may be web based so it can be accessed from any computer having web browser capabilities from any location in the world without installation of specialized software.

Persons of skill in the art will understand that the software which implements main instance may also be downloaded to the user s laptop computer or implemented on a separate hardware appliance unit located either at the user s premises e.g. behind the firewall or anywhere in clouds or . It is further appreciated that laptop is representative of a wide variety of computer devices such as workstations personal computers distributed computer systems etc. that may be utilized by the user to launch the method for provisioning running the cross CloudTest grid analyzing streaming real time results as well as monitoring the performance of the actual load test.

Continuing with the example of the application program running on main instance operates to create a graphical user interface GUI that allows a user of laptop to remotely interact with the application view monitor the test results in real time and modify parameters test conditions dynamically during the actual test. For purposes of the present disclosure the grid wizard is considered synonymous with the application program or system program that performs the method and operations described herein. In one embodiment main instance may include an embedded load server for running a relatively small load test that does not require the deployment of other load servers and an embedded results i.e. analytic server for collecting aggregating the real time test results. In another embodiment the main instance and the database provide a basic CloudTest environment that can be used to launch establish one or more grids with more or more cloud providers being utilized to provision each grid.

The overall testing process begins with the user creating a sophisticated test plan or composition via a GUI of either the same application program running on main instance or a GUI associated with another web browser application. The GUI may be utilized that generate complex parallel message streams for website testing. In one example the test plan may be created in the form of a visual message composition analogous to a music composition for testing and demonstrating web services such as that described in U.S. patent application Ser. No. 11 503 580 filed Aug. 14 2006 which application is herein incorporated by reference.

The process of deploying the test grid for a large scale test may start with the user of laptop indicating to main instance the number of virtual users wanted on each track of the test composition. For example the user of the system may wish test the target website with a load equal to 1000 users on each track of a test composition. The user may indicate the number of virtual users through an input entered on a browser page of the GUI as described below or alternatively invoke a grid wizard that automatically makes an intelligent allocation of the proper amount of resources needed to conduct the test based on examining the composition that this grid will be running. By way of example the system may determine that a single load server should be allocated to accommodate every 1000 virtual users.

Similarly the system via a grid wizard may determine a proper allocation of result servers needed to accommodate the number of load servers specified. In one embodiment users can specify how many load servers and how many result servers they want in each cloud and region. Alternatively users may employ the grid wizard to specify all parameters. That is users can simply specify a defined test composition and the grid wizard automatically analyzes the composition and determines how many servers they need in each cloud and region. It is appreciated that the determination of the number of load servers and result servers is typically made based on considerations that ensure each virtual user has a satisfactory amount of bandwidth CPU memory resources etc. such that it correctly simulates or behaves as a real world browser.

Once the test has been defined and the parameters set e.g. number of servers server locations etc. via the grid wizard upon user input the user main instance starts the process of actually deploying and allocating the specified resources by interacting with an application programming interface API of one or more cloud providers. By way of example a user may click on a Deploy Instances button provided in a page of the CloudTest program GUI in response the system software contacts all of the different cloud APIs it needs and starts to allocate the required servers.

For example if 1000 servers are to be allocated in EC2 there may be 40 simultaneous requests issued each request being for 25 servers. If another 200 servers need to be allocated in Microsoft Azure in two different geographically located data centers two simultaneous requests may be issued each for 100 servers in each data center due to the fact that Azure does not support allocating smaller groups into one single deployment . In other words the user may simply click on an icon button of a GUI to initiate the deployment allocation of resources e.g. machine instances needed to execute the test composition with the requests necessary to achieve that allocation being issued handled in an automated manner i.e. without user intervention.

Each of result servers is connected to a plurality of associated load Maestro servers . Each load server is shown having an embedded component or Result Service client which computes metrics or statistics from the raw data e.g. web pages received from the target website or application. As discussed previously the function of each load server is to provide a load to the target website by creating one or more virtual users that access information on the target website. Within each Maestro server is Result Service client which functions to compute statistics such as average response time average response size and the like. In one embodiment instead of sending all of the raw data received from the target website Result Service client computes relevant statistics and discards the data. Then once an interval e.g. every five seconds the statistics computed by client are sent to the associated result server .

Each of the result servers takes all of the statistics received from all of its associated load servers and further aggregates those statistics. In other words each result server aggregates the aggregated results received from all of the load servers that it is connected to. The resulting aggregated data is then further aggregated in database . Thus statistics such as average response time across all of load servers for the load test is stored in database and available on a real time basis to browser via database queries performed by the main instance which can perform further aggregation grouping filtering etc.

Practitioners in the art will appreciate that the disclosed multi tiered architecture does not overburden analytic servers with excessive messaging of raw data. Furthermore persons of skill will understand that aggregating statistical results data on multiple levels beginning at the point closest to the actual load test results creation allows a user to view results in real time on an analytic dashboard graphical user interface thereby permitting real time analysis across the entire testing infrastructure.

In a specific embodiment each load server includes an accumulator that stores the statistically aggregated data e.g. average response time computed on a second by second basis. Periodically e.g. every 5 seconds each load server sends an appropriate number of messages e.g. 5 messages one for each second to its associated result server . That is one batched message is sent every 5 seconds the batched message including data about all of the previous 5 seconds. Each message contains the data metrics computed every one second interval. These fine granularity metrics are then further aggregated in database . It is appreciated that by computing statistics metrics on a second by second basis the analytic dashboard running on browser can analyze the results on various levels of granularity. In other words the user may want to view statistical results of the load test on a minute by minute basis or all the way down to a second by second basis. Thus the architecture described herein allows a user to view real time streaming results in an analytic dashboard of various performance metrics on a second by second basis even when there are millions of virtual users on thousands of load servers.

As can be seen a set of combined charts are shown graphically in various window fields. For example field illustrates the number of virtual users shaded area and the send rate heavy line as a function of test time. Field illustrates error count vertical dark lines and the number of virtual users shaded area versus test time. Field shows the number of bytes sent and received vertical dark lines and the number of virtual users shaded area as a function of test time. It is appreciated that the user may select view a wide variety of charts combined correlated etc. using tabs . Collectively the charts provided in window allow a user to view analyze and monitor test results and information in real time so as to help identify root causes of performance problems their website or web application may be experiencing.

Persons of skill in the arts will appreciate that shows how the entire test grid comprising a huge number of interconnected load and result servers works in concert to send load receive responses aggregate and analyze those responses into a real time streaming graphical result displayed to the user. All this is accomplished regardless of how many server instances and different cloud providers are utilized to run the load test. Moreover the various result charts may be viewed in one or many real time streaming analytic dashboards. In each of the charts displayed on analytic dashboard window the user may change the time format or legend of the horizontal axis for reporting the testing analytics in real time on a varying time e.g. hour by hour minute by minute or second by second basis.

During the playback of the test composition and while the user is monitoring viewing the test results displayed on GUI window the user may pause or stop the test. Stopping the test closes the result and unloads the running test composition from all of the load servers. On the other hand pausing or temporarily halting the test stops the load from all of the load servers but keeps the test composition loaded and ready to resume playing into the same result. For instance the user may pause the test after identifying a problem that requires adjustment of the load balancer on the target website. It should be understood that when the test is temporarily halted in this manner the grid remains fully provisioned and running. In other words the composition and running of the load test is independent from the provisioning and running of the grid. After any adjustments or reconfiguration of the target website the user may continue with the execution or playback of the test composition either beginning at the place where it was halted or re starting the test from the beginning. Persons of skill in the art will appreciate that the ability to start re start the test without affecting the state of the grid in conjunction with the ability to view test results metrics in real time e.g. second by second provides a powerful advantage over prior art methods for testing a customer website.

The aggregated test results computed by the client running on each load server are periodically sent to their associated analytic server block . The period at which the aggregated results are sent to the analytic servers may be equal to or greater than the period at which the aggregated test results are computed within each load server. In a typical implementation aggregated test result data is computed by each load server every second with the results of those computations being sent to the analytic servers from each of the load servers every five seconds.

Next at each analytic server the aggregated test result data received from each of the associated load servers is further aggregated block . In other words each analytic server produces aggregated test result data across all of its associated load servers. For example if each analytic server is associated i.e. connected with 50 load servers each analytic server aggregates statistics metrics across the aggregated test result data received from each of the 50 load servers.

Finally at block the aggregated statistical data produced by each analytic server is further aggregated at the system wide data store in real time. For instance Structured Query Language SQL queries to the database can perform statistical functions e.g. AVG SUM etc. against tables rows which have been inserted from the individual analytics servers thereby producing further third level aggregated results. As explained above the results of this final level of aggregation is available in real time to a browser executing an analytic dashboard that provides a graphical display of the results in various charts.

The information collected and periodically sent to server may include such metrics as web page load time total load time number of web pages accessed average load time per page etc. The specific metrics and data collected and sent to server may vary depending on the information of interest to the business or enterprise owning the website. In addition the periodicity or interval for sending the data collected may vary case to case. In one embodiment metrics such as page load times and average load time may be sent for each page accessed by the user. In other embodiments metrics and data collected may be beaconed to server on a predetermined time interval e.g. every 100 ms.

In one embodiment clouds and may comprise the same public network i.e. the Internet . Alternatively clouds and may comprise a variety of different public and or private networks.

It is appreciated that server may receive beacons containing metrics and other performance data from a multitude of different client devices each of which may be located in a different geographic area. In other cases server may receive metrics and data from a multitude of different client devices located in the same geographic region e.g. San Francisco or Boston . It is appreciated that a hierarchy of servers may be arranged to collect and consolidate data and metrics received from millions or even billions of client devices accessing the same website or web application at the same time. All of this data is sent to a ResultsService reader writer unit that aggregates the total data received and stores it in a database making it accessible to a main computer instance which implements a real time analytic dashboard for visual presentation of the RUM results stored in database . It is appreciated that in other embodiments the aggregating unit may comprise another server or other computing device.

The plurality of collectors in each cloud periodically e.g. every 1 5 seconds send their aggregated data to a result server consolidator that further aggregates the aggregated RUM performance data and metrics. Each consolidator forwards the consolidated data aggregated from the collectors to a ResultsService reader writer R W for short unit which stores the aggregated data in database where it is available to main instance . As described previously main instance may execute a program that generates a real time analytic dashboard that provides the aggregated data and performance metrics in a graphical display of a computer with the dashboard display changing as it is updated in real time.

In one embodiment main instance R W unit database and computer may be associated or located with an enterprise . It other embodiments not all of the elements and apparatus shown in box may be co located or associated with a single entity or service. For example laptop computer may be associated with a business client that contracts with a RUM data analysis service which comprises main instance R W unit database and which deploys the measurement grid comprising collectors and consolidators .

At decision block a query is made to determine whether the collector server has failed. If so a new collector is brought up with the same URL and IP address as the failed collector. Block If the collector is running correctly a second query is made to determine whether the user session has expired. Block If not the process returns to block with all further beacons being sent to and terminated at the same collector. On the other hand if the user session expires e.g. after a long period of inactivity the process returns to block . In this manner every single user session gets associated with a single collector through the duration of that session which facilitates efficient processing of the beacon data.

In one embodiment each data bucket comprises one or more accumulators buffers memory locations or counters that may be incremented for each data value falling within its determined range. The data buckets collect the data items associated with each beacon received which in this example corresponds to a new page view on the website. In accordance with one embodiment each collector and consolidator see e.g. has an identical set or array of data buckets with each bucket having a predefined data value range. For instance bucket is designated for average load times in the range between 0 1 s bucket is for load times greater than 1 s up and equal to 2 s bucket is for data points greater than 2 s up to and including load times of 3 s bucket is for load times greater than 3 s up and equal to 5 s bucket is for data points greater than 5 s up to and including load times of 7 s and bucket is for data points greater than 7 s up to and including load times of 12 s. In another embodiment the range may include the lower bound and extend up to but not include the upper bound.

As shown in the first beacon B includes a load time for the first page of 3 s so the set of data items of interest that are associated with that load time are stored in data bucket . Thus the chart shows the first page total time spent 30 s and custom metric e.g. items in shopping cart 0 in bucket . It is appreciated that any number of additional data items of interest may also be stored in bucket in response to receiving the first and subsequent beacons.

The second beacon B for the second page of the user session has a load time of 1 s making the average total load time 2 s 3 s 1 s 2 which falls in the range of data bucket . In accordance with one embodiment the data in bucket is decremented to zero out the data items in that bucket and the page count total session time shopping cart etc. values are incremented to reflect the current data counts after the second beacon for the user session is received at the selected collector. The same process is repeated for beacons B B and B. For instance the average load time after the third and fourth pages have been loaded is 2 s and 1.875 s respectively. Because both of these load time values fall within the range of data bucket the chart reflects the accumulated data items in the chart entries under bucket . After the fifth page has loaded the average load time for the session is now 2.3 s 3 1 2 1.5 4 5 which falls within the range of bucket .

Continuing with the example of the session items stored after the fifth beacon includes five pages loaded the total time spent by the user now totals 170 s and three items in the shopping cart with an average load time of 2.3 s. This data information is stored in or associated with data bucket in the set or array of data buckets of the collector receiving the beacon data for this particular user session. It is appreciated that RUM data for millions of real users may be collected in this manner in the architectures shown in with the data collected and aggregated in the result server hierarchy being forwarded aggregated down to the final bottom level where it is stored in a database. At each level in the hierarchy the collector and consolidator servers include an identical set or array of data buckets that are used to aggregate and store the data and performance metrics for all of the actual website visitors or web application users in real time. For example using the techniques described above an average or median load time can be calculated and continuously updated in real time for tens or hundreds of millions of actual users.

At some point in time e.g. every 1 10 seconds the aggregated session data in each of the collectors is sent or pushed onto an associated consolidator server. This involves sending the data for the array of buckets over a network to a consolidator configured with an identical number of data buckets each having the same corresponding data range values. In other words for the example of the consolidator receiving session data from each of the collectors is configured with a set of six data buckets each having the data value load time ranges shown at the top of . In one embodiment a snapshot of the state of the data buckets for each session is sent from the collectors to an associated consolidator server. The state of all of the buckets in the set is based on all the sessions collected and aggregated in the consolidators. In other words the aggregated data collected in the in the sets of data buckets for all of the collector servers for all on going sessions is periodically sent to an associated consolidator which aggregates all of that data in an identically configured set of data buckets.

Practitioners in the art will appreciate that no matter how many beacons a particular collector receives only data from a finite number of data buckets representing aggregated data for all sessions is sent to a consolidator. The beacons themselves terminate at a particular collector with the beacon data being placed in a set of data buckets which is then periodically sent to a consolidator. In one embodiment a set of 125 data buckets is used to aggregate a million actual user session or more for a single website. It is appreciated that each collector may be configured to handle multiple websites each having a large multitude of use sessions. All of the millions of user sessions happening in real time with each session lasting from one to 10 20 or any number of pages fit into the set of 125 data buckets.

As described above in one embodiment the consolidators combine the data buckets for all of the various associated collectors by aggregating adding counts of data metrics within each of the data buckets e.g. how many web pages on average does a user view when they visit a particular website. The same process occurs down the hierarchy with the counts in each of the data buckets of the consolidators being aggregated in a final set of data buckets stored in a database. The count data in the data buckets stored in the database is updated periodically e.g. every second and is accessible by an main instance or other computing device which generates an analytic dashboard that graphically displays the RUM data and conversion metrics sums averages medians percentiles etc. on one or more widgets.

To summarize all of the beacons generated from real user sessions on a website or web application are terminated at the collectors. From there the data is placed in data buckets arranged in sets or arrays that are uniform in number with each bucket having a predefined value range. The data values aggregated in the data buckets are periodically sent over a network from each collector to an associated consolidator. Each consolidator has its own identical set or array of data buckets same as the collectors that is used to further accumulate aggregate the data results. The aggregated data in the set or array of data buckets of each consolidator periodically e.g. every second sends that data to a R W unit which stores that data in a database. Note that the R W unit also has a set or array of data buckets that is identical to that of the consolidators and collectors. In one embodiment the R W unit may expand the data in the database according to a template into a larger set of data that is also stored in the database. The resulting data in the database may then be read out to an analytic dashboard.

In one embodiment template expansion provides interesting and useful insights and dimensions to the aggregated data results. For example a business or enterprise might be interested to know how real users experience on their website varies across different geographical regions browser types and other metrics.

To reduce the number of combinations down to a manageable number the potential number of possible combinations in one embodiment a limited subset of combinations of importance or interest is defined. By way of example illustrates a subset of such combinations that includes country page group country and page group country and browser and country and region if the country is the USA . In other embodiments different combinations may be selected or defined to be of interest to a particular business or enterprise. For instance a company that only does business in France may opt for a different set of combinations.

In one embodiment a limited subset of combinations is applied during the collection aggregation process to achieve meaningful template expansion. To better understand this process consider the example shown in where subset is used during collection of data received during a user session. In this example the first beacon B generated during the user session arrives at a collector from a user located in California who is running Chrome browser and who is currently visiting the home page of a website. Applying subset of important combinations shown in this single beacon expands or maps into four different data buckets the USA template expansion the USA California template expansion the Home page template expansion and the USA Chrome browser template expansion.

Practitioners in the art will understand that using the template expansion approach described above separate sets or arrays of data buckets are created for each type of template expansion based on a predefined subset of combinations of metrics. For the example of this expansion results in an entire set of load time data buckets for the whole website another set for USA a third set for USA CA a fourth set for USA MA a fifth set for USA Chrome a sixth set for USA Internet Explorer and a seventh set for Home page.

Window also includes a beacon histogram widget which comprises a number of histogram bars adjacent bars being merged with each bar representing a count of the number of beacons received for the whole website which fall into a particular data bucket having a predetermined value range. For example in ascending order the first data bucket in the set or array may have a value range R 0 s

The example dashboard window shown in further includes a widget which charts the number of user sessions as a function of page load time solid line versus the bounce rate for the website per page load time dashed line . The bounce rate is a performance metric that represents a ratio or percentage of visits to a website that only involve one web page e.g. a home page with the user leaving without viewing a different web page versus those visitors who actually view multiple pages. For example if in a given time period there are 100 visits to the website and 10 of those visitors immediately left without visiting another page the bounce rate would be 10 . As shown the bounce rate in this example is strongly correlated to the page load time of the website.

It should be understood that elements of the disclosed subject matter may also be provided as a computer program product which may include a machine readable medium having stored thereon instructions which may be used to program a computer e.g. a processor or other electronic device to perform a sequence of operations. Alternatively the operations may be performed by a combination of hardware firmware and software. The machine readable medium may include but is not limited to floppy diskettes optical disks CD ROMs and magneto optical disks ROMs RAMs EPROMs EEPROMs magnet or optical cards or other type of machine readable medium suitable for storing electronic instructions.

Additionally although the present invention has been described in conjunction with specific embodiments numerous modifications and alterations are well within the scope of the present invention. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

