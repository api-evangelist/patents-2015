---

title: Systems and methods for detecting potentially malicious applications
abstract: The disclosed computer-implemented method for detecting potentially malicious applications may include (1) detecting a request issued by an application running on a client device to download a file from a remote device, (2) determining that the request calls an application programming interface that enables the client device to download the file from the remote device, (3) determining that a parameter passed to the application programming interface in the request has been implicated in a previous attempt to download a known malicious file, and then in response to determining that the parameter has been implicated in a previous attempt to download a known malicious file, (4) classifying the application that issued the request as potentially malicious. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09619649&OS=09619649&RS=09619649
owner: Symantec Corporation
number: 09619649
owner_city: Mountain View
owner_country: US
publication_date: 20150313
---
Computers are increasingly bombarded with creatively veiled invitations to download malicious content. As such safeguarding computers from downloading malicious content remains a constant and evolving challenge. Unfortunately traditional methods for safeguarding computers may be unable to detect all potentially malicious applications downloaded to and or executed by the safeguarded computers. The instant disclosure therefore identifies a need for improved systems and methods for detecting potentially malicious applications downloaded to and or executed by safeguarded computers.

As will be described in greater detail below the instant disclosure describes various systems and methods for detecting a potentially malicious application based at least in part on one or more parameters that the potentially malicious application passes into an Application Programming Interface API as part of a request to download content.

In one example a computer implemented method for detecting potentially malicious applications may include 1 detecting a request issued by an application running on a client device to download a file from a remote device 2 determining that the request calls an API that enables the client device to download the file from the remote device 3 determining that a parameter passed to the API in the request has been implicated in a previous attempt to download a known malicious file and then in response to determining that the parameter has been implicated in a previous attempt to download a known malicious file 4 classifying the application that issued the request as potentially malicious.

In some examples the parameter may include and or represent a Uniform Resource Locator URL that identifies the file requested for download from the remote device. Additionally or alternatively the parameter may include and or represent an intended target path that specifies a target location where the file is to be downloaded on the client device.

In some examples the method may also include obtaining from a security server information that identifies the parameter as suspicious. In these examples the method may further include sending the parameter to the security server for a security analysis and receiving the information that identifies the parameter as suspicious from the security server due at least in part to a result of the security analysis. Additionally or alternatively the method may include determining based at least in part on the information that the parameter has been implicated in a previous attempt to download a known malicious file.

In one embodiment the security server may create the information by obtaining from client devices within a user base of a security vendor information about system calls detected on the client devices. In this embodiment the security server may identify one or more requests that call one or more APIs by analyzing the information about the systems calls detected on the client devices. For example the security server may identify one or more requests to download a known malicious file to one or more of the client devices within the user base of the security vendor. The security server may also identify one or more parameters passed into APIs called to download a known malicious file to the client devices within the user base of the security vendor by analyzing the information about the systems calls detected on the client devices. The security server may then create the information that identifies the parameter as suspicious based at least in part on the parameters passed into the APIs.

In some examples the method may also include creating from the information a signature used to detect suspicious parameters. In one example the method may also include identifying the parameter on a blacklist. In one embodiment the method may further include monitoring systems calls issued on the client device. In this example the method may detect a system call that invokes the API that enables the client device to download the file from the remote device while monitoring the system calls issued on the client device.

In some examples the method may also include hooking the API to identify any systems calls that invoke the API that enables the client device to download the file from the remote device. In one embodiment the API may include and or represent URLDownloadToFile and or URLDownloadtoCacheFile.

In one example the method may include performing one or more security actions upon classifying the application as suspicious. For example the method may include blocking the client device from downloading the file removing the application from the client device warning a user of the client device that the application is potentially malicious warning a user of the client device that the file is potentially malicious sending a report indicating that the application is potentially malicious to a security server sending a report indicating the file is potentially malicious to a security server and or sending a report indicating that the application issued a request that passed the parameter to the API to a security server.

In some examples the method may further include uploading the parameter to a security server to enable the security server to determine whether the parameter is suspicious add the parameter to a malicious file harvesting system distribute information that identifies the parameter as suspicious to an additional client device within a user base of a security vendor and or create a signature that identifies the parameter as being implicated in a previous attempt to download a known malicious file. In one embodiment the API may enable the client device to download files without utilizing a portal.

In one embodiment a system for implementing the above described method may include 1 a detection module stored in memory that detects a request issued by an application running on a client device to download a file from a remote device 2 a determination module stored in memory that A determines that the request calls an API that enables the client device to download the file from the remote device and B determines that a parameter passed to the API in the request has been implicated in a previous attempt to download a known malicious file 3 a classification module stored in memory that classifies the application that issued the request as potentially malicious in response to the determination that the parameter has been implicated in a previous attempt to download a known malicious file and 4 a physical processor configured to execute the detection module the determination module and the classification module.

In some examples the above described method may be encoded as computer readable instructions on a non transitory computer readable medium. For example a computer readable medium may include one or more computer executable instructions that when executed by a processor of a computing device may cause the computing device to 1 detect a request issued by an application running on a client device to download a file from a remote device 2 determine that the request calls an API that enables the client device to download the file from the remote device 3 determine that a parameter passed to the API in the request has been implicated in a previous attempt to download a known malicious file and then 4 classify in response to determining that the parameter has been implicated in a previous attempt to download a known malicious file the application that issued the request as potentially malicious.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The present disclosure is generally directed to systems and methods for detecting potentially malicious applications. As will be described in greater detail below by identifying parameters that applications pass into APIs as part of requests to download malicious files the disclosed systems and methods may classify those parameters as having been implicated in attempts to download malicious files. The disclosed systems and methods may then warn and or notify other computing devices within a security vendor s user base to watch for those parameters in similar requests issued by applications running on those computing devices. By warning and or notifying other computing devices within the security vendor s user base in this way the disclosed systems and methods may be able to improve the ability of those computing devices to detect potentially malicious applications by identifying requests that pass the implicated parameters into APIs on those computing devices.

The following will provide with reference to detailed descriptions of exemplary systems for detecting potentially malicious applications. Detailed descriptions of corresponding computer implemented methods will be provided in connection with . Detailed descriptions of an exemplary request and exemplary information used in detecting potentially malicious applications will be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example and as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the devices illustrated in e.g. computing device and or server computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

Exemplary system in may be implemented in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a computing device in communication with a server and or a remote device via a network . In one example computing device may be programmed with one or more of modules . In this example computing device may also include an API and an application that issues a request to API .

Additionally or alternatively server may be programmed with one or more of modules . In this example server may include information that identifies one or more suspicious parameters. In one example remote device may include a file available for download.

In one embodiment one or more of modules from may when executed by a processor of computing device and or server enable computing device and or server to detect potentially malicious applications. For example and as will be described in greater detail below detection module may detect request issued by application to download file from remote device . Determination module may determine that request calls API . Determination module may also determine that a parameter passed to API in request has been implicated in a previous attempt to download a known malicious file. Classification module may classify application as potentially malicious in response to the determination that parameter has been implicated in a previous attempt to download a known malicious file. Security module may then perform at least one security action to address the potentially malicious application.

Computing device generally represents any type or form of computing device capable of reading computer executable instructions. Examples of computing device include without limitation laptops tablets desktops servers cellular phones Personal Digital Assistants PDAs multimedia players embedded systems wearable devices e.g. smart watches smart glasses etc. gaming consoles combinations of one or more of the same exemplary computing system in or any other suitable computing device. In some examples computing device may represent a client device. In one example computing device may include and or represent a device operated by a user within a security vendor s user base.

Server generally represents any type or form of computing device capable of detecting malicious applications. Examples of server include without limitation application servers web servers security servers cloud based servers network devices storage servers and or database servers configured to run certain software applications and or provide various web security cloud network storage and or database services. In some examples server may be configured and or managed by a security vendor e.g. SYMANTEC or MCAFEE . In one example server may service customer endpoints such as computing device .

Network generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network include without limitation an intranet a Wide Area Network WAN a Local Area Network LAN a Personal Area Network PAN the Internet Power Line Communications PLC a cellular network e.g. a Global System for Mobile Communications GSM network exemplary network architecture in or the like. Network may facilitate communication or data transfer using wireless or wired connections. In one embodiment network may facilitate communication among computing device server and or remote device in . Additionally or alternatively network may facilitate communication among client devices N computing device and or server in .

API generally represents any type or form of software component that enables an application of a computing system to download a file from a remote device to the computing system. In some examples API may include and or represent a specific API function within the WINDOWS API. For example API may represent URLDownloadToFile which is an API that enables applications of a computing system to 1 download bits from the Internet to the computing system and 2 save the bits to a file on the computing system. Additionally or alternatively API may represent URLDownloadtoCacheFile which is an API that enables applications of a computing system to 1 download data to an Internet cache and 2 receive the file name of the Internet cache for retrieving the data.

In some examples API may represent a non portal object that enables applications to download files to a computing system. In these examples malicious applications may specifically attempt to download malicious files via API due to API operating as a non portal e.g. a non browser application . Since in these examples API is a non portal object malicious applications may target API to avoid the malware scanning traditionally performed at portals e.g. web browsers prior to downloading files via those portals.

Application generally represents any computer program that causes a computing system to perform certain tasks. In some examples application may include and or represent an executable that attempts to download a file to a computing system by calling an API of the computing system. In some examples application may include and or represent an application that attempts to download a file to a computing system without utilizing a portal. Additionally or alternatively application may include and or represent a malicious application that initiates the download of malicious content.

Parameter generally represents any type and or form of data passed into an API as part of a request. In some examples parameter may include and or represent data passed into an API as part of a request to download a file to a client device. In some examples parameter may include and or represent information that the API uses to identify which file to download and where to store the downloaded file. Examples of parameter include without limitation a URL that identifies a file requested for download a target path that specifies a target location where the file is to be downloaded on a computing device a caller parameter that identifies a calling component of an application requesting to download the file variations of one or more of the same combinations of one or more of the same or any other suitable parameter.

Remote device generally represents any type and or form of computing device capable of maintaining hosting and or distributing files. Examples of remote device include without limitation laptops tablets desktops servers cellular phones PDAs multimedia players embedded systems wearable devices gaming consoles combinations of one or more of the same exemplary computing system in or any other suitable computing device.

File generally represents any type or form of downloadable resource. In some examples file may include and or represent a malicious content. As used herein the term malicious file generally refers to any type or form of file that includes data and or code intended to harm and or disrupt the operations of a computing system. In some examples file may form part of a potentially unwanted program. As used herein the term potentially unwanted program generally refers to a program that a user may have authorized to download to a user device without the user s informed consent. In some examples a potentially unwanted program may be bundled with a program that the user intended to download to the user device. In these examples the user may unknowingly have authorized downloading the potentially unwanted program to the user device at the same time as he or she authorized downloading the program that he or she intended to download to the user device.

As illustrated in at step one or more of the systems described herein may detect a request issued by an application running on a client device to download a file from a remote device. For example detection module may as part of computing device in detect request issued by application running on computing device to download file from remote device .

Detection module may detect request in a variety of ways. In some examples detection module may monitor computing device for certain system calls. For example detection module may monitor computing device for all system calls issued by applications running on computing device . In another example detection module may monitor computing device for any system calls directed to downloading files to computing device .

Additionally or alternatively detection module may monitor computing device for system calls to a particular API such as API . For example detection module may monitor API by hooking API to identify any system calls that invoke API . While monitoring computing device in any of these ways detection module may detect request issued by application to download file from remote device .

At step one or more of the systems described herein may determine that the request calls an API that enables the client device to download the file from the remote device. For example determination module may as part of computing device in determine that request calls API .

Determination module may determine that request calls API in a variety of ways. In some examples determination module may make the determination in response to the detection of a system call to API . In some examples determination module may make the determination based at least in part on an analysis of request . For example determination module may parse request in to determine that request invokes URLDownloadToFile. As illustrated in request may identify a call to an API in this example URLDownloadToFile and one or more parameters passed to the API in the call in this example caller www.maliciousfile.com downloadfile C computer appdata download ajdhfoiju23ijfmalkwd 0 and statuscallback .

In some examples determination module may determine that request calls API by searching request for any called APIs. For example determination module may search request in an attempt to identify any API calls. During this search determination module may identify a call to API . In response to identifying this call determination module may determine that request calls API .

Returning to at step one or more of the systems described herein may determine that a parameter passed to the API in the request has been implicated in a previous attempt to download a known malicious file. For example determination module may as part of computing device in determine that parameter passed to API in request has been implicated in a previous attempt to download a known malicious file. As used herein the term known malicious file generally refers to a file that has previously been classified as malicious by a security server or user device.

Determination module may determine that parameter has been implicated in a previous attempt to download a known malicious file in a variety of ways. In one example determination module may determine that parameter has been implicated in a previous attempt to download a known malicious file based at least in part on information . For example determination module may obtain information from server via network . Upon obtaining information from server determination module may analyze information and then identify parameter as having been implicated in a previous attempt to download a known malicious file based at least in part on this analysis.

Additionally or alternatively determination module may determine that parameter has been implicated in a previous attempt to download a known malicious file in the event that information identifies parameter as suspicious. Accordingly information may identify certain parameters as suspicious or even indicate that such parameters have been implicated in previous attempts to download known malicious files.

In some examples determination module may identify parameter by searching request for parameter . In these examples request may include a certain parameter at a designated location. As such determination module may identify parameter by searching the designated location for such a parameter.

In one example determination module may identify parameter by parsing request in . For example determination module may by parsing request in identify a URL in this example www.maliciousfile.com downloadfile passed into API . In this example the URL may represent and or point to a location at which file is available for download from remote device . Additionally or alternatively determination module may by parsing request in identify the target path passed into API in this example C computer appdata download ajdhfoiju23ijfmalkwd . In this example the target path may represent the location to which application has requested file be downloaded to computing device .

As illustrated in information may include a list of suspicious URLs in this example www.maliciousfile.com downloadfile www.thisismalware.com file and www.potentiallyunwantedapplication.net and a list of suspicious target paths in this example C filewin filedata download dfeksin0342II C computer appdata download ajdhfoiju23ijfmalkwd and C filemac maliciousfile download wjokdkje2048ds .

Server may create information in a variety of ways. For example exemplary system in may include server in communication with a user base of a security vendor via network . The term user base as used herein with reference to a security vendor generally refers to customers whose computing devices are protected by security software developed licensed and or sold by a security vendor. In some examples the computing devices included in user base may receive certain security services from the security vendor. Additionally or alternatively the computing devices included in user base may provide information about the computing devices activities files and or downloads to the security vendor for analysis.

As illustrated in user base may include client devices N as well as computing device . In one example server may create information by collecting and or analyzing security data from user base . For example server may create information based at least in part on data about system calls collected from one or more of client devices N included in user base .

In one example server may obtain the data about the system calls from security agents running on client devices N . In this example the security agents may monitor all system calls made on client devices N . For example the security agents may monitor system calls made to APIs that facilitate downloading files. As a specific example the security agents may monitor system calls made to API located on each of client devices N . The security agents may also send information about the system calls made to API to server for analysis.

In some examples server may analyze the data about the system calls to identify one or more requests N that call one or more APIs N of client devices N . In these examples server may further identify parameters N passed into APIs N by requests N . In some embodiments server may determine that a certain subset of requests N may be requesting to download malicious files. In these embodiments server may create information based on a subset of parameters N corresponding to the subset of requests N . For example server may classify one or more of the parameters within the subset of parameters N as suspicious.

In one example information may identify those parameters in a list of suspicious parameters. For example information may identify those parameters in a blacklist. In some examples server may additionally or alternatively create a signature used to detect suspicious parameters. In these examples server may create the signature based at least in part on those parameters.

Determination module may receive information from server in a variety of ways. In some examples determination module may receive a blacklist that includes and or incorporates at least a portion of information . Additionally or alternatively determination module may receive a signature created from information . In one example determination module may receive information by receiving information that only includes a description of parameter .

In some examples determination module may receive information in response to sending parameter to server for a security analysis. For example determination module may receive information as part of receiving the security analysis from server . In one example the security analysis may designate parameter as suspicious. In this example determination module may determine that parameter has been implicated in a previous attempt to download a known malicious file based on the designation.

In some examples determination module may scan information to identify any suspicious parameters. As a specific example determination module may scan the list of suspicious URL parameters included in information in and identify an entry for www.maliciousfile.com downloadfile. By identifying this entry in information in determination module may determine that www.maliciousfile.com downloadfile is a suspicious URL. As a result determination module may determine that the URL passed into API by request has been implicated in a previous attempt to download a known malicious file.

In additional or alternative examples information may include a list of one or URL characteristics that are suspicious. In this example determination module may determine that the URL parameter passed into API by request is suspicious based on a characteristic of the URL parameter matching one or more parameters included in the list of suspicious URL characteristics.

In some examples determination module may scan the list of suspicious target path parameters included in information in and identify an entry for C computer appdata download ajdhfoiju23ijfmalkwd . By identifying this entry in information in determination module may determine that C computer appdata download ajdhfoiju23ijfmalkwd is a suspicious target path. As a result determination module may determine that the target path passed into API by request has been implicated in a previous attempt to download a known malicious file.

In additional or alternative examples information may include a list of one or more target path characteristics that are suspicious. In this example determination module may determine that the target path parameter passed into API by request is suspicious based on a characteristic of the target path parameter matching one or more parameters included in the list of suspicious URL characteristics.

Returning to at step one or more of the systems described herein may classify the application that issued the request as potentially malicious in response to determining that the parameter has been implicated in a previous attempt to download a known malicious file. For example classification module may as part of computing device in classify application that issued request as potentially malicious in response to the determination that parameter has been implicated in a previous attempt to download a known malicious file.

Classification module may classify application as potentially malicious in a variety of ways. In one example classification module may classify application as potentially malicious in response to the determination that parameter has been implicated in a previous attempt to download a known malicious file. In some examples classification module may classify application by assigning a discrete descriptor to application e.g. malicious or safe . Additionally or alternatively classification module may classify application by assigning a score to application e.g. a score between 1 and 10 where a score of 1 signifies likely safe and a score of 10 signifies likely malicious .

In some examples security module may perform a variety of operations in response to the classification of application as potentially malicious. In some examples security module may perform an operation affecting file . For example security module may block computing device from downloading file . As another example security module may warn a user of computing device that file is potentially malicious. As a further example security module may create a report indicating that file is potentially malicious. In some examples security module may send the report to server . Sending the report to server may in some embodiments enable server to create information used to identify future malware threats within user base .

In some examples security module may perform an operation affecting application in response to the classification of application as potentially malicious. In one example security module may remove application from computing device . For example security module may uninstall application from computing device . In some embodiments security module may automatically remove application from computing device . Additionally or alternatively security module may prompt a user of computing device to remove application from computing device .

In another example security module may warn the user of computing device that application may potentially be malicious. In some examples warning the user may include prompting the user to remove application . In another example security module may send to server a report indicating that the application is potentially malicious. Sending the report to server may in some embodiments enable server to create information used to identify future malware threats within user base .

In some examples security module may upload parameter to server . In these examples as illustrated in computing device may form part of user base . Also in these examples server may monitor computing device in the same manner that server monitors client devices N as described in connection with step . In one example server may utilize information obtained by analyzing parameter together with information previously obtained by analyzing system calls invoked on client devices N . In one example server may add parameter to a malicious file harvesting system in response to receiving parameter from security module . In these examples the malicious file harvesting system may then identify malicious files or create rules for identifying malicious files based at least in part on information derived from an analysis of parameter .

In some examples server may designate parameter as suspicious in response to receiving parameter from security module . In these examples server may then distribute information that identifies parameter as suspicious to an additional client device. For example server may distribute the information that identifies parameter as suspicious to client devices N within user base . In some embodiments server may distribute the information that identifies parameter as suspicious by creating a signature that identifies parameter as suspicious and then distributing the signature. Additionally or alternatively server may distribute the information that identifies parameter as suspicious by creating a blacklist of suspicious parameters that includes parameter and then distributing the blacklist.

As described above the systems and methods described herein may identify parameters passed into an API as part of a request from an application to download a file. The disclosed systems and methods may then designate the identified parameters as suspicious and use the identified parameters to identify future attempts to download malicious files. Thus by analyzing parameters passed into an API as part of a request to download a file the disclosed systems and methods may identify future attempts to download malicious files. By identifying attempts to download malicious files in this way the disclosed systems and methods may identify malicious files without scanning the files to identify malicious content and or in addition to scanning the files. Moreover the disclosed systems and methods may be able to determine that the application is potentially malicious based at least in part on the request since the application issued the request to download the file using the suspicious parameters.

Computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems handheld devices or any other computing system or device. In its most basic configuration computing system may include a processor and a system memory .

Processor generally represents any type or form of physical processing unit e.g. a hardware implemented central processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation Random Access Memory RAM Read Only Memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI Express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure .

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Advanced Technology Attachment ATA Parallel ATA PATA Serial ATA SATA and External SATA eSATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable medium.

The term computer readable medium as used herein generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives tape drives and floppy disks optical storage media e.g. Compact Disks CDs Digital Video Disks DVDs and BLU RAY disks electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an Application Specific Integrated Circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Client systems and generally represent any type or form of computing device or system such as exemplary computing system in . Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a WAN a LAN a PAN or the Internet. In one example client systems and or and or servers and or may include all or a portion of system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent Network Attached Storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS .

Servers and may also be connected to a Storage Area Network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for detecting potentially malicious applications.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In various embodiments all or a portion of exemplary system in may facilitate multi tenancy within a cloud based computing environment. In other words the software modules described herein may configure a computing system e.g. a server to facilitate multi tenancy for one or more of the functions described herein. For example one or more of the software modules described herein may program a server to enable two or more clients e.g. customers to share an application that is running on the server. A server programmed in this manner may share an application operating system processing system and or storage system among multiple customers i.e. tenants . One or more of the modules described herein may also partition data and or configuration information of a multi tenant application for each customer such that one customer cannot access data and or configuration information of another customer.

According to various embodiments all or a portion of exemplary system in may be implemented within a virtual environment. For example the modules and or data described herein may reside and or execute within a virtual machine. As used herein the term virtual machine generally refers to any operating system environment that is abstracted from computing hardware by a virtual machine manager e.g. a hypervisor . Additionally or alternatively the modules and or data described herein may reside and or execute within a virtualization layer. As used herein the term virtualization layer generally refers to any data layer and or application layer that overlays and or is abstracted from an operating system environment. A virtualization layer may be managed by a software virtualization solution e.g. a file system filter that presents the virtualization layer as though it were part of an underlying base operating system. For example a software virtualization solution may redirect calls that are initially directed to locations within a base file system and or registry to locations within a virtualization layer.

In some examples all or a portion of exemplary system in may represent portions of a mobile computing environment. Mobile computing environments may be implemented by a wide range of mobile computing devices including mobile phones tablet computers e book readers personal digital assistants wearable computing devices e.g. computing devices with a head mounted display smartwatches etc. and the like. In some examples mobile computing environments may have one or more distinct features including for example reliance on battery power presenting only one foreground application at any given time remote management features touchscreen features location and movement data e.g. provided by Global Positioning Systems gyroscopes accelerometers etc. restricted platforms that restrict modifications to system level configurations and or that limit the ability of third party software to inspect the behavior of other applications controls to restrict the installation of applications e.g. to only originate from approved application stores etc. Various functions described herein may be provided for a mobile computing environment and or may interact with a mobile computing environment.

In addition all or a portion of exemplary system in may represent portions of interact with consume data produced by and or produce data consumed by one or more systems for information management. As used herein the term information management may refer to the protection organization and or storage of data. Examples of systems for information management may include without limitation storage systems backup systems archival systems replication systems high availability systems data search systems virtualization systems and the like.

In some embodiments all or a portion of exemplary system in may represent portions of produce data protected by and or communicate with one or more systems for information security. As used herein the term information security may refer to the control of access to protected data. Examples of systems for information security may include without limitation systems providing managed security services data loss prevention systems identity authentication systems access control systems encryption systems policy compliance systems intrusion detection and prevention systems electronic discovery systems and the like.

According to some examples all or a portion of exemplary system in may represent portions of communicate with and or receive protection from one or more systems for endpoint security. As used herein the term endpoint security may refer to the protection of endpoint systems from unauthorized and or illegitimate use access and or control. Examples of systems for endpoint protection may include without limitation anti malware systems user authentication systems encryption systems privacy systems spam filtering services and the like.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules recited herein may transform information describing a parameter passed into an API as part of a request to download a file into a malware classification. Additionally or alternatively one or more of the modules recited herein may transform a processor volatile memory non volatile memory and or any other portion of a physical computing device from one form to another by executing on the computing device storing data on the computing device and or otherwise interacting with the computing device.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms connected to and coupled to and their derivatives as used in the specification and claims are to be construed as permitting both direct and indirect i.e. via other elements or components connection. In addition the terms a or an as used in the specification and claims are to be construed as meaning at least one of. Finally for ease of use the terms including and having and their derivatives as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

