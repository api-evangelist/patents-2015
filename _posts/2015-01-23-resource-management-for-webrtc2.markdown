---

title: Resource management for WebRTC
abstract: A system performs client wake up for real-time communications (“RTC”). The system closes a connection between a gateway and an RTC application of a device. The RTC application enters a sleeping mode when the connection to the gateway is closed. After closing the connection, the system receives a message intended for the RTC application. The system requests a push notification server to wake up the RTC application, reconnects the gateway with the RTC application, and delivers the message to the RTC application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09565218&OS=09565218&RS=09565218
owner: Oracle International Corporation
number: 09565218
owner_city: Redwood Shores
owner_country: US
publication_date: 20150123
---
One embodiment is directed generally to a communications network and in particular to resource management in a communications network.

Voice communications are increasingly shifting to web and Internet based applications that are outside of traditional telephony networks. Enterprise users desire to access their unified communications applications with their own Internet connected mobile devices and consumers increasingly prefer Internet based communications channels for accessing contact centers.

Some communications service providers CSPs and enterprises have deployed real time communications RTC applications based on a technology known as WebRTC. WebRTC is an open Internet standard for embedding real time multimedia communications capabilities e.g. voice calling video chat peer to peer P2P file sharing etc. into a web browser. For any device with a supported web browser WebRTC can use application programming interfaces APIs to equip the device with RTC capabilities without requiring users to download plug ins. By using WebRTC CSPs may create new web based communications services and extend existing services to web based clients.

Currently in order to be able to receive incoming calls a WebRTC application of a user equipment UE maintains a continuous ongoing communications session. This may result in resource utilization issues for the UE and or the network. For example on the UE side a continuous communications session utilizes resources such as battery and data of the UE and on the server side a continuous communications session utilizes resources such as network ports of the server to which the UE is connected.

One embodiment is a system that performs client wake up for real time communications RTC . The system closes a connection between a gateway and an RTC application of a device. The RTC application enters a sleeping mode when the connection to the gateway is closed. After closing the connection the system receives a message intended for the RTC application. The system requests a push notification server to wake up the RTC application reconnects the gateway with the RTC application and delivers the message to the RTC application.

Embodiments provide client wake up functionality for Real Time Communications RTC of a WebRTC browser application. In one embodiment a WebRTC application sleeps by closing a WebSocket connection with a gateway. After the connection is closed if the gateway receives an incoming message e.g. a signaling message to initiate a voice call meant for the WebRTC application it requests that a push notification server wakes up the WebRTC application. The gateway delivers the message to the WebRTC application upon the WebRTC application waking up and reconnecting the WebSocket connection. When the connection is re established all the messages are synchronized between the gateway and the WebRTC application so that the voice call is carried out as if the application has not been sleeping. Accordingly embodiments allow the WebRTC application to sleep and save resources while at the same time being able to receive messages.

In one embodiment WebRTC application performs RTC with an endpoint connected to a Session Initiation Protocol SIP network . SIP is a peer to peer signaling communications protocol conventionally used for controlling multimedia communications sessions such as voice and video calls over Internet Protocol IP networks. SIP can be used to establish maintain and terminate sessions between two or more peers endpoints. Each peer in a session is referred to as a user agent UA . UA may be a client application that initiates a SIP request. Alternatively UA may be a server application that contacts a user upon receipt of a corresponding SIP request and returns a response on behalf of the user.

Network further includes a WebRTC session controller WSC that is a gateway for connecting a web application with a communications network. A gateway translates a protocol to another protocol. In WSC connects WebRTC application to SIP network . WSC provides interoperability for web to web and web to network RTC. WSC includes a signaling engine that bridges WebRTC signaling to SIP signaling. That is in order to initiate RTC between WebRTC application and an entity connected to SIP network WebRTC application establishes a signaling channel with WSC signaling engine over a JavaScript Object Notation JSON protocol for RTC JsonRTC . JSON is a lightweight data interchange format. JsonRTC establishes the sessions and subsessions used to pass messages between WSC and its client applications. Then another signaling channel based on SIP is established between signaling engine and SIP network .

System includes a bus or other communications mechanism for communicating information and a processor coupled to bus for processing information. Processor may be any type of general or specific purpose processor. System further includes a memory for storing information and instructions to be executed by processor . Memory can be comprised of any combination of random access memory RAM read only memory ROM static storage such as a magnetic or optical disk or any other type of computer readable media. System further includes a communications device such as a network interface card to provide access to a network. Therefore a user may interface with system directly or remotely through a network or any other method.

Computer readable media may be any available media that can be accessed by processor and includes both volatile and nonvolatile media removable and non removable media and communications media. Communications media may include computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.

Processor may further be coupled via bus to a display such as a Liquid Crystal Display LCD . A keyboard and a cursor control device such as a computer mouse may further be coupled to bus to enable a user to interface with system on an as needed basis.

In one embodiment memory stores software modules that provide functionality when executed by processor . The modules include an operating system that provides operating system functionality for system . The modules further include WebRTC session controller module for managing client wake up and all other functionality disclosed herein. System can be part of a larger system such as added functionality to the Oracle Communications WebRTC Session Controller from Oracle Corp. Therefore system can include one or more additional functional modules to include the additional functionality. A database is coupled to bus to provide centralized storage for modules and .

Referring again to with known systems an endpoint communicating with SIP network needs to keep a session alive with proxy servers in SIP network e.g. a SIP REGISTER session so that other UEs e.g. phones can reach it e.g. it can receive incoming calls from other endpoints phones . A proxy server is a server i.e. a computer system or an application that acts as an intermediary for requests from clients seeking resources from other servers endpoints. For WebRTC application a session usually requires maintaining an open network connection e.g. a WebSocket connection with WSC . However if WebRTC application is running in a UE device that is sensitive to resources for example a mobile phone with limited memory and battery life keeping a WebSocket connection open requires the device to utilize resources such as battery data connection etc.

One known solution to provide better resource utilization is that instead of maintaining an ongoing continuous session some SIP phones perform periodic registrations to keep a session alive. Another known solution is that some SIP phones have the flexibility to use User Datagram Protocol UDP which does not require persistent connections. UDP is one of the core members of the IP suite. It uses a simple connectionless transmission model with a minimum of protocol mechanism. It has no handshaking dialogues. There is no guarantee of delivery ordering or duplicate protection.

One disadvantage with these known approaches is that they still require the devices to spend appreciable resources for periodic registration or for communicating based on UDP.

In contrast to the known solutions embodiments of the present invention allow a WebRTC client to sleep by providing client wake up management. Accordingly a device can preserve resources while keeping a session alive with corresponding servers so that incoming calls are not dropped.

In one embodiment when initiating RTC signaling engine of WSC establishes a WebSocket connection with WebRTC application of UE which may be for example an Android or iOS device . A socket is a bidirectional communications endpoint for sending receiving data to from another socket. It is the fundamental technology for programming software to communicate on a transmission control protocol TCP IP network. A WebSocket is a protocol providing a full duplex communications channel over a single TCP connection.

In one embodiment UE may need to save resources e.g. battery life by closing the WebSocket connection with WSC . That is UE or WebRTC application may enter a sleeping status. In one embodiment sleep is implemented as a special JsonRTC message to WSC . This is performed using a special close code of the WebSocket protocol. Once the sleep message is received WSC preserves the data pertaining to the connection in a distributed storage and starts a special timer thread to keep the connections with network entities e.g. SIP servers such as proxies registrar Call Session Control Functions CSCFs etc. open on behalf of the sleeping device. In some embodiments a connection between WSC and a network entity may be a network socket connection or alternatively may be a logical network association on existing network socket connections on behalf of the sleeping device e.g. UE . Thereafter if WSC receives an incoming message targeted for UE or WebRTC application UE or WebRTC application needs to be waken up. In one embodiment upon receiving such incoming message WSC wakes up UE or WebRTC application that had closed its connection to WSC to save resources.

In one embodiment the wake up functionality provided by WSC integrates with push notification services from providers such as Google Apple etc. Apple Push Notification Service APNS is a service created by Apple Inc. for forwarding notifications of third party applications to Apple devices. Such notifications may include for example badges sounds custom text alerts etc. Similarly Android push notifications is a service created by Google Inc. for letting an application notify a user of new messages or events. In one embodiment in order to wake up UE or WebRTC application WSC sends a corresponding message to a push notification server which in turn sends a wake up message to UE .

Network elements of include UE e.g. a device including an application SDK WSC push notification server and UA . System of can be used to implement any of the network elements of . further includes an administrator that may configure WSC and or push notification server .

In call flow at administrator creates a registration or account in push notification server . The account or registration may correspond to a client application executed in a device e.g. UE . Push notification server may be a server maintained by providers such as Apple Google Amazon Nokia i.e. Microsoft etc. The registration process may differ for each provider. Upon registration at push notification server provides administrator with information required for sending messages to a corresponding push notification service. This information may for example include a key or identifier ID for the client application at UE . Then at administrator configures this information in WSC so that a client wake up service at WSC can later use it for sending wake up notifications corresponding to the application executed at UE .

At the application running at UE registers with push notification server and at the application obtains a device token key from push notification server . The device token key identifies the application and UE . At the application sends the token to WSC using the JsonRTC protocol and at WSC saves this token. Once the token is saved by WSC UE may close its WebSocket connection with WSC to save resources such as battery. In order to do so at UE sends a code e.g. a special close code to WSC . This enables WSC to know that UE is planning to sleep for a potentially long period of time. WSC then marks the corresponding JsonRTC session ID as sleeping. It also preserves all the data pertaining to UE in a secure distributed storage called fabric. This information includes information required by WSC to maintain connection with SIP servers such as Proxy Registrar CSCF etc. Fabric is a component that brokers message frames and or other information across nodes in a cluster i.e. multiple server instances running simultaneously and working together to provide increased scalability and reliability and ensures that the correct node handles the message.

While the session is sleeping if at a message e.g. an INVITE or another SIP message that is targeted for UE arrives at WSC from UA at WSC saves this message to fabric.

Instead of immediately forwarding the message to UE that is sleeping at WSC sends a formatted JSON message i.e. formatted according to JSON notation supported by push notification server with the JsonRTC session ID to push notification server . The formatted JSON message includes the registration key obtained at and the device token obtained at . After receiving the formatted JSON message at push notification server delivers a wake up message to UE . In one embodiment push notification server delivers the received formatted JSON message as the wake up message to UE .

Once UE receives the wakeup message at the application reconnects the WebSocket connection with WSC . At this time WSC can deliver the message received from UA to the application at UE . In order to do so at WSC sends a JsonRTC start message to the application and at the application sends a JsonRTC final response message back to WSC indicating that the message has been delivered. Finally at WSC sends a 200 OK message to UA indicating that its message has been delivered.

In one embodiment the wake up procedure depends on device type e.g. iOS Android etc. and device state e.g. display off airplane mode on etc. and also on application type e.g. web application native application etc. and application state e.g. foreground background . For example for iOS devices if the WebRTC application is not running in the foreground the wake up procedure uses a dialog to ask for permission of a user to start the application. If in an iOS device the WebRTC application is running in the foreground the wake up message is delivered directly to the WebRTC application. Also for Android devices the WebRTC application decides how a wake up message is handled depending on whether the application is running in the foreground or in the background and the Android intent structure may be used to provide this functionality. An intent provides functionality for performing late runtime binding between the code in different applications. In one embodiment the wake up message payload is a JSON message which includes the JsonRTC session ID. In one embodiment the wake up message payload includes the incoming message from UA to WSC .

In one embodiment in order to provide client wake up functionality the signaling engine of WSC integrates with different push notification providers and supports configuration for different push notification providers. Each push notification provider may have its own plugin that is integrated with WSC . Each plugin may support a mechanism to send push notification messages to a corresponding provider. Each plugin may also support the functionality to configure the push notification message format as well as the configuration of keys and parameters that comprise the wake up message. For example WSC may support Android and iOS notification provider plugins. However in some embodiments a customer may write a custom plugin to a third party notification service provider. When an incoming message arrives from UA WSC invokes a plugin to send a message to push notification server . Further WSC may batch such messages to improve performance.

In one embodiment a software development kit SDK at UE implements application programming interfaces APIs for providing one or more of the following functionalities 

At an administrator creates an account for the device at a push notification server and at the administrator obtains identification information of the device from the push notification server. The identification information may include a key or an ID corresponding to the device. The administrator provides the identification information to WSC which stores it.

At the WebRTC application is registered with the push notification server and at a token is obtained from the push notification server identifying the device and the WebRTC application. The WebRTC application provides the token to WSC which stores it.

At the WebRTC application closes its WebSocket connection with WSC to enter a sleeping mode. The closing of the WebSocket connection between WSC and the WebRTC application is performed upon receiving a corresponding message by WSC from the WebRTC application indicating that the WebRTC application is entering the sleeping mode. Once the message is received WSC preserves stores the data pertaining to the WebSocket connection in a distributed storage e.g. fabric and starts a special timer thread to keep the connections with SIP entities e.g. proxies registrar CSCFs etc. open on behalf of the sleeping device.

After the WebSocket connection is closed at WSC receives a message intended for the WebRTC application. The message that is intended for the WebRTC application may be received from a UA. Upon receiving the message WSC stores it at its fabric component.

At WSC requests that the push notification server wakes up the WebRTC application. In order to request the push notification server to wake up the WebRTC application WSC sends a JSON message to the push notification server. The JSON message includes a JsonRTC session ID of the WebRTC application the identifying information and the token. The push notification server forwards this message to the device for waking it up.

At the WebSocket connection between WSC and the WebRTC application is reconnected and at the message that was intended for the WebRTC application is delivered to it.

As disclosed embodiments provide client wake up functionality so that a WebRTC application can sleep by closing a WebSocket connection with a gateway while at the same time being able to receive incoming messages. In one embodiment after the application closes its connection with the gateway if the gateway receives an incoming message meant for the application it requests that a push notification server wakes up the application. The gateway delivers the message to the application when the application wakes up and reconnects the WebSocket connection. Accordingly a device that is sensitive to resources can receive incoming messages while at the same time being able to close a WebSocket connection to a gateway and save resources such as battery data connection etc. Closing such WebSocket connection also saves resources such as corresponding network ports.

Several embodiments are specifically illustrated and or described herein. However it will be appreciated that modifications and variations of the disclosed embodiments are covered by the above teachings and within the purview of the appended claims without departing from the spirit and intended scope of the invention.

