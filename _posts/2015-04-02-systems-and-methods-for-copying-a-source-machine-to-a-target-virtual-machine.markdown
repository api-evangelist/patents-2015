---

title: Systems and methods for copying a source machine to a target virtual machine
abstract: Systems and methods of the present disclosure can facilitate generating virtual machines (VMs). The system can include an orchestrator executing on a server, an agent, a hypervisor, a transfer VM, and a target VM different from the transfer VM. The orchestrator can transmit the agent to be installed on a source machine to generate a snapshot and transmit a current state of a first filesystem of the source machine to the orchestrator, which can use it to configure a second filesystem on the hypervisor and initiate the transfer VM on the hypervisor using a default filesystem independent of the first and second filesystem configurations. The orchestrator can instruct the agent to transfer the snapshot to the transfer VM to write to the second filesystem, update the second filesystem to be operative to start an operating system, and create the target VM configured to launch from the second filesystem.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09146769&OS=09146769&RS=09146769
owner: 
number: 09146769
owner_city: 
owner_country: 
publication_date: 20150402
---
The present disclosure generally relates to managing virtual machines. More specifically the present disclosure relates to generating a target virtual machine from a source machine.

A virtual machine can be created from a source machine using a network. The source machine may be a physical machine or a virtual machine. Challenges may arise when copying the source machine to the virtual machine.

Systems and methods of the present disclosure allow for the creation of a virtual machine as a copy of a source machine without interfering with the source machine while correctly capturing the source machine and maintaining data security during the copying operation. For example a system of the present disclosure may clone a source machine to a target machine by transferring the file system data of the source machine using a data format independent of the hypervisor directly to the target virtual machine without using intermediate storage of data.

It can be useful to make a copy of a computing device. For example the copy may serve as a backup device that can be used if the original device becomes unusable for some reason. In another example the copy may be useful as a test environment in which experiments may be conducted without concern for losing the state of the device. In still another example using multiple copies of a device can share a workload between the copies and facilitate scaling the operation of the device to a larger capacity. In still another example a specific device configuration can be copied to sell as a pre configured device to multiple customers.

It can be useful to have the copy be a virtual machine. For example cloud services can provide virtual machines that can be convenient to manage remotely with less concern for specific hardware costs and configurations. In addition cloud services can facilitate creating and destroying virtual machines with relative ease which may facilitate scaling to larger numbers of machines with short notice and billing that may be based on usage. These cloud services may be able to provide more efficient use of physical hardware by using the same hardware for a second virtual machine when a first virtual machine is temporarily idle. In another example single virtual machines may be simpler to manage and may be able to run on multiple operating systems with relative ease.

The source machine for a copy may be a physical machine or it may be another virtual machine. The source machine for a copy may run any of a number of different operating systems and may also use any of a number of different filesystem implementations to access storage. The source machine for a copy may use more than one filesystem implementation to access different volumes in its storage.

The target virtual machine may be managed by a hypervisor. The hypervisor may be any of a number of different hypervisor implementations. The hypervisor may support an application programming interface API that can allow it to be accessed externally by another computing device and different hypervisor implementations may have different APIs for controlling them.

It may be challenging to copy source machines to target virtual machines in an environment with multiple operating systems and multiple filesystem implementations on the source machines and with multiple hypervisor implementations controlling the target virtual machines. The present disclosure describes systems and methods for copying a source machine to a target virtual machine that can work well in an environment that can allow multiple operating systems and multiple filesystem implementations on the source machine and multiple hypervisor implementations controlling the target virtual machine.

It may be challenging to maintain data security while copying a source machine to a target virtual machine. For example if the copy involves copying the filesystem data of the source machine to a third intermediate data storage the data may be vulnerable to eavesdropping for some period of time. In addition the provider of the intermediate data storage may fail to properly delete the filesystem data after the copy is complete either maliciously or accidentally. The present disclosure describes systems and methods for copying a source machine to a target virtual machine that can transfer the filesystem data of the source machine directly to the target virtual machine without using intermediate data storage.

At least one aspect of the present disclosure is directed to a system for generating virtual machines via a computer network. In some embodiments the system includes an orchestrator executing on a processor of a server that transmits an agent for installation on a source machine the agent configured to generate a snapshot of the source machine. An interface of the orchestrator receives from the agent installed on the source machine a current state of a first filesystem of the source machine the first filesystem having a first configuration. The orchestrator configures on a hypervisor executing on a host machine a second filesystem with a second configuration based on the first configuration. The orchestrator initiates on the hypervisor a transfer virtual machine using a default filesystem independent of the first configuration and the second configuration. The orchestrator instructs the agent to directly transfer the snapshot of the source machine to the transfer virtual machine the transfer virtual machine configured to write the second filesystem using the snapshot. The orchestrator updates the second filesystem written by the transfer virtual machine to be operative to start an operating system. The orchestrator creates a target virtual machine configured to launch the operating system from the second filesystem the target virtual machine different from the transfer virtual machine.

In some embodiments the server is further configured to receive by the transfer virtual machine responsive to the initiation the snapshot from the agent. The server can be configured to write by the transfer virtual machine responsive to the reception the second filesystem using the snapshot. The server can be configured to update by the transfer virtual machine the second filesystem to be operative to start the operating system. The server can be configured to launch by the transfer virtual machine the operating system from the second filesystem.

In some embodiments the server is further configured to initialize by the hypervisor the default filesystem from a stored image. The server can be configured to start by the hypervisor the transfer virtual machine from the default filesystem the transfer virtual machine configured to execute a second operating system different from the operating system.

In some embodiments the server is further configured to receive by the agent from the orchestrator a network address of the transfer virtual machine and a token. The server can be configured to create by the agent using the network address of the transfer virtual machine a network connection to the transfer virtual machine. The server can be configured to transmit by the agent to the transfer virtual machine using the network connection the token to authenticate the network connection to the transfer virtual machine. The server can be configured to accept by the transfer virtual machine responsive to the token the network connection. The server can be configured to use by the agent the network connection to directly transfer the snapshot of the source machine to the transfer virtual machine.

In some embodiments the server is further configured to destroy responsive to the transfer virtual machine writing the second filesystem the transfer virtual machine. The server can be configured to destroy after the transfer virtual machine is destroyed the default filesystem.

In some embodiments the source machine is further selected from one of a physical source machine or a virtual source machine.

In some embodiments the server is further configured to receive by the orchestrator from the source machine an indication of the operating system. The server can be configured to select by the orchestrator responsive to the reception the agent from a plurality of source agents based on the indication of the operating system. The server can be configured to transmit by the orchestrator to the source machine responsive to the selection the agent.

In some embodiments the server is further configured to receive by the orchestrator from the hypervisor an indication of a characteristic of the hypervisor. The server can be configured to select by the orchestrator responsive to the reception an interface between the orchestrator and the hypervisor based on the characteristic. The server can be configured to establish based on the interface a communication between the orchestrator and the hypervisor.

In some embodiments the server is further configured to start by the target virtual machine the operating system from the second filesystem.

In some embodiments the server is further configured to update the second filesystem by performing at least one of changing a networking configuration to remove a static network address changing a first device driver to a second device driver operative to communicate with an environment of the target virtual machine or changing a first configuration of the second filesystem to a second configuration of the second filesystem the first configuration causing an error during a starting of the target virtual machine.

In some embodiments the server is further configured to receive by the orchestrator via a user interface an option. The server can be configured to apply by the orchestrator the option. The option can further include at least one of a schedule operative to control the time of the receiving of the current state a count operative to control a number of copies of the target virtual machine and the second filesystem a subset operative to control a selection of the first filesystem included in the second filesystem or a name operative to identify an image of the second filesystem created by the hypervisor.

In some embodiments the server is further configured to determine a type of installation for the agent the type of installation including at least one of a manual installation process an automated process initiated by the orchestrator or an automated process initiated by a management server responsive to a signal from the orchestrator. The server can be configured to install the agent in accordance with the type of installation.

In some embodiments the server is further configured to record by the agent a timestamp corresponding to a snapshot of the first filesystem. The server can be configured to create by the agent a list of shadow blocks that are initially empty. The server can be configured to start by the agent a shadowing process operative to determine responsive to a modification of a block in the first filesystem an absence of the block in the list of shadow blocks copy responsive to the determination the block to a new shadow block and add responsive to the copying the new shadow block to the list of shadow blocks.

In some embodiments the server is further configured to execute by the source machine an application on the operating system.

Another aspect of the present disclosure is directed to a method of generating virtual machines via a computer network. The method includes a server and an orchestrator executing on the server via the computer network. The method includes the orchestrator transmitting an agent for installation on a source machine the agent configured to generate a snapshot of the source machine. The method includes the orchestrator receiving from the agent installed on the source machine a current state of a first filesystem of the source machine the first filesystem having a first configuration. The method includes the orchestrator configuring on a hypervisor executing on a host machine a second filesystem with a second configuration based on the first configuration. The method includes the orchestrator initiating on the hypervisor a transfer virtual machine using a default filesystem independent of the first configuration and the second configuration. The method includes the orchestrator instructing the agent to directly transfer the snapshot of the source machine to the transfer virtual machine the transfer virtual machine configured to write the second filesystem using the snapshot. The method includes the orchestrator updating the second filesystem written by the transfer virtual machine to be operative to start an operating system. The method includes the orchestrator creating a target virtual machine configured to launch the operating system from the second filesystem the target virtual machine different from the transfer virtual machine.

Yet another aspect of the present disclosure is directed to a non transitory computer readable medium storing instructions that when executed by one or more processors facilitate generating virtual machines via a computer network. The instructions include instructions to transmit an agent for installation on a source machine the agent configured to generate a snapshot of the source machine. The instructions include instructions to receive from the agent installed on the source machine a current state of a first filesystem of the source machine the first filesystem having a first configuration. The instructions include instructions to configure on a hypervisor executing on a host machine a second filesystem with a second configuration based on the first configuration. The instructions include instructions to initiate on the hypervisor a transfer virtual machine using a default filesystem independent of the first configuration and the second configuration. The instructions include instructions to instruct the agent to directly transfer the snapshot of the source machine to the transfer virtual machine the transfer virtual machine configured to write the second filesystem using the snapshot. The instructions include instructions to update the second filesystem written by the transfer virtual machine to be operative to start an operating system. The instructions include instructions to create a target virtual machine configured to launch the operating system from the second filesystem the target virtual machine different from the transfer virtual machine.

Systems and methods of the present disclosure can facilitate copying a source machine to a target virtual machine via a computer network. The system can include an orchestrator which can run on one or more processors of a server and can manage the overall process of copying. The system can include an agent which can run on one or more processors of the source machine and can be designed to run on the operating system of the source machine. The agent can manage operations that are required by the source machine in the process of copying. The system can include a hypervisor which can run on one or more processors of a host machine and can manage operations on virtual machines responsive to signals from the orchestrator. The system can include a transfer virtual machine which can run in the environment of the hypervisor and can manage the creation of the copied target filesystem for the target virtual machine.

The transfer virtual machine can operate with a default filesystem as its system disk. The operating system on the default filesystem may not be the same operating system as on the source machine target virtual machine server or host machine. As a result the same default filesystem can be used to copy multiple types of operating systems from the source machine to the target virtual machine. The same default filesystem can also operate with multiple different types of hypervisors running on multiple different types of host machines. As a result it may be simpler to create and test a default filesystem that can operate in several different environments. The default filesystem can be initialized or configured to contain the software utilities and drivers used by the transfer virtual machine to perform a copy. The default file system can be a lightweight system with a minimal set of software needed for the functions of the transfer virtual machine. This may facilitate storing and copying the default filesystem and may reduce the impact of the transfer virtual machine on the resources of the hypervisor such as memory CPU utilization and so on.

The agent can be installed and run on the source machine. In some embodiments the installation can be a manual process. In some embodiments the orchestrator can do the installation. In some embodiments the orchestrator can manage the installation using a management system that may be set up for the source machine.

The agent can contact the orchestrator. As a result the source machine may appear in a user interface for the orchestrator as part of a list of machines that can be available for copying. The agent can also report the configuration of the filesystem attached to the source machine for example the number of volumes the name of each volume the size of each volume the filesystem implementation used for each volume and so on.

The orchestrator can generate a user interface that receives from a user a selection of a source machine for copying and one or more cloud services for the target. The user interface may provide options for the copy such as a schedule for starting the operation a number of copies to create an optional creation of a hypervisor image at the cloud service a selection of a subset of the filesystem on the source machine to copy and so on. The orchestrator may receive via the user interface a selection from a user e.g. at a computing device using an input such as a keyboard mouse touch interface gesture input or audio input of a control to initiate the copying.

The orchestrator can use the application programming interface API of the cloud service to select a host machine and signal the hypervisor on the host machine to create a virtual target filesystem that can match the configuration of the filesystem on the source machine. The orchestrator can also use the hypervisor to create a default filesystem for use with the transfer virtual machine. The orchestrator can use the hypervisor to create the transfer virtual machine attach the target filesystem to the transfer virtual machine and start the transfer virtual machine from the default filesystem.

The orchestrator can signal the agent with addressing and authentication information for the transfer virtual machine. This signal can be an indication to the agent to start the copy. The agent can take a snapshot of the filesystem on the source machine. Initiating the snapshot can record a timestamp create a list of shadow blocks that is initially empty and start a shadowing process in which modifying a block in the filesystem can check if a shadow copy of the block is in the list and if no shadow copy exists create a shadow copy of the block and add it to the list. There may be support in the operating system on the source machine for creating and maintaining snapshots in this way. Once the snapshot has been initiated the agent can start copying data from the snapshot directly to a receiver running on the transfer virtual machine at the block level one block at a time.

The transfer virtual machine can write a block image of the filesystem from the source machine onto the target filesystem. It should be noted that this can be done with no particular knowledge of the structure of the filesystem or operating system it can be a direct binary copy. The agent can signal both the transfer virtual machine and the orchestrator upon completion of this process and the agent can terminate the snapshot which may free resources used by the list of shadow blocks and the shadowing process.

The transfer virtual machine can mount the target filesystem using a filesystem driver of the appropriate type that has been included in the default filesystem and can run scripts to adjust modify update or otherwise manipulate the target filesystem. For example the transfer virtual machine may update the networking configuration to remove static addresses changing device drivers to drivers that access the cloud environment recovering from a power failure and so on. The recovery from a power failure may facilitate starting the operating system the first time because without the recovery it could appear that the filesystem was associated with a live system that failed suddenly in operation and starting the operating system with the target filesystem in that state could generate errors. The power failure recovery may involve closing open files resetting process tables and so on.

The orchestrator can use the hypervisor to shut down the transfer virtual machine delete the transfer virtual machine delete the default filesystem create the target virtual machine and attach the target virtual machine to the target filesystem. This may complete the copy. The orchestrator may also use the hypervisor to start the target virtual machine from the target filesystem.

Turning to the drawings is an illustrative block diagram of an embodiment of a system for copying a source machine to a target virtual machine. An orchestrator can execute on a server . A hypervisor can execute on a host machine . The orchestrator can be used to install an agent on a source machine with a source filesystem . The orchestrator can use the hypervisor to create a transfer virtual machine and a default filesystem for the transfer virtual machine then associate the transfer virtual machine with the default filesystem and start the transfer virtual machine . The agent can transmit information about the configuration of the source filesystem to the orchestrator and the orchestrator can use the hypervisor to create a target filesystem with the same configuration as the source filesystem and to associate the transfer virtual machine with the target filesystem . The orchestrator can signal the agent and can transmit addressing and authentication information for the transfer virtual machine along with the signal. The agent can establish a connection to the transfer virtual machine . The agent can record a snapshot of the source filesystem which can represent the state of the source filesystem at one moment in time. The agent can transmit the contents of the source filesystem based on the snapshot to the transfer virtual machine . The transfer virtual machine can use the information in this transfer to write the target filesystem as a block by block copy of the source filesystem at the time when the snapshot was recorded. The transfer virtual machine can update the target filesystem with tweaks which may facilitate the target filesystem to serve as a system disk in the environment of the hypervisor . The orchestrator can use the hypervisor to delete the transfer virtual machine and the default filesystem create a target virtual machine which may have the same processor configuration as the source machine and associate the target virtual machine with the target filesystem . As a result the target virtual machine can be a copy of the source machine at the time when the snapshot was recorded and can be prepared to run in the environment of the hypervisor . The orchestrator may use the hypervisor to start the target virtual machine .

The default filesystem can be initialized to allow the transfer virtual machine to start and run an operating system. The operating system on the default filesystem may not be the same operating system as on the source filesystem and the target filesystem . As a result the same default filesystem can be used to copy multiple types of operating systems for the source filesystem and the target filesystem . The same default filesystem can also operate with multiple different types of hypervisor running on multiple different types of host machine . As a result it may be simpler to create and test a default filesystem that can operate in several different environments. The default filesystem can be initialized to contain the software utilities and drivers needed to implement the functions described here for the transfer virtual machine . The default filesystem can be configured as a lightweight system with a minimal set of software needed for the functions of the transfer virtual machine which may facilitate storing and copying the default filesystem and may reduce the impact of the transfer virtual machine on the resources of the hypervisor such as memory CPU utilization and so on.

The orchestrator may be a server or may be running on one or more processors of a server. They hypervisor may be a server may be running on one or more processors of a server or may be running on one or more processors of a host machine that may include components or functionality of a server. The one or more servers associated with the orchestrator source machine hypervisor server host machine transfer virtual machine or target virtual machine do not need to be physically proximate to each other or in the same machine farm. Thus the servers logically grouped as a machine farm may be interconnected using a wide area network WAN connection or a metropolitan area network MAN connection. For example a machine farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the machine farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Management of the servers may be de centralized. For example one or more servers may comprise components subsystems and circuits to support one or more management services. In one of these embodiments one or more servers provide functionality for management of dynamic data including techniques for handling failover data replication and increasing robustness. Each server may communicate with a persistent store and in some embodiments with a dynamic store.

A server may include a file server application server web server proxy server appliance network appliance gateway gateway gateway server virtualization server deployment server secure sockets layer virtual private network SSL VPN server or firewall. In one embodiment the server may be referred to as a remote machine or a node. In one embodiment the server may be referred to as a cloud.

The orchestrator source machine hypervisor server host machine transfer virtual machine and target virtual machine may be communicatively coupled using a computer network. The network can include a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In some embodiments there are multiple networks between the devices and the servers. In one of these embodiments the network may be a public network a private network or may include combinations of public and private networks.

The network may be any type or form of network and may include one or more of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may include a wireless link such as an infrared channel or satellite band. The topology of the network may include a bus star or ring network topology. The network may include mobile telephone networks utilizing any protocol or protocols used to communicate among mobile devices including advanced mobile phone protocol AMPS time division multiple access TDMA code division multiple access CDMA global system for mobile communication GSM general packet radio services GPRS or universal mobile telecommunications system UMTS . In some embodiments different types of data may be transmitted via different protocols. In other embodiments the same types of data may be transmitted via different protocols.

The system and its components such as an orchestrator a source machine a hypervisor a server a host machine a transfer virtual machine and a target virtual machine may include hardware elements such as one or more processors logic devices or circuits. For example the system and its components may include a bus or other communication component for communicating information and a processor or processing circuit coupled to the bus for processing information. The hardware elements can also include one or more processors or processing circuits coupled to the bus for processing information. The system also includes main memory such as a random access memory RAM or other dynamic storage device coupled to the bus for storing information and instructions to be executed by the processor. Main memory can also be used for storing position information temporary variables or other intermediate information during execution of instructions by the processor. The system may further include a read only memory ROM or other static storage device coupled to the bus for storing static information and instructions for the processor. A storage device such as a solid state device magnetic disk or optical disk can be coupled to the bus for persistently storing information and instructions.

The system and its components such as an orchestrator a source machine a hypervisor a server a host machine a transfer virtual machine and a target virtual machine may include e.g. computing devices desktop computers laptop computers notebook computers mobile or portable computing devices tablet computers smartphones personal digital assistants or any other computing device.

According to various embodiments the processes described herein can be implemented by the system or hardware components in response to the one or more processors executing an arrangement of instructions contained in memory. Such instructions can be read into memory from another computer readable medium such as a storage device. Execution of the arrangement of instructions contained in memory causes the system to perform the illustrative processes described herein. One or more processors in a multi processing arrangement may also be employed to execute the instructions contained in memory. In some embodiments hard wired circuitry may be used in place of or in combination with software instructions to effect illustrative embodiments. Thus embodiments are not limited to any specific combination of hardware circuitry and software. To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The orchestrator can be used to install an agent on another source machine with a source filesystem . The source machine may be running a different operating system from the source machine and the agent may be different from the agent in order to support a different operating system. The user can use the computing device to interact with the user interface to initiate a copy of the source machine into the environment of a hypervisor . The hypervisor may be a different hypervisor from the hypervisor and the interface between the orchestrator and the hypervisor may be different from the interface between the orchestrator and the hypervisor in order to support a different hypervisor. The user interface can also be used to indicate a set of options which may be applied to the copy. The orchestrator can use the hypervisor to create a transfer virtual machine and a default filesystem for the transfer virtual machine and associate the transfer virtual machine with the default filesystem and start the transfer virtual machine . Even if the operating system of the source machine is different from the operating system of the source machine and the hypervisor is different from the hypervisor the image on the default filesystem can be the same as the image on the default filesystem . The default filesystem can be created from a pre configured image that may be designed to facilitate the operations described here with respect to the transfer virtual machine . The agent can transmit information about the configuration of the source filesystem to the orchestrator which may include information about the volumes included in the source filesystem and the orchestrator can use the hypervisor to create a target filesystem with the same configuration as the source filesystem which may include volumes with the same configuration as volumes and to associate the transfer virtual machine with the target filesystem . The orchestrator can signal the agent and can transmit addressing and authentication information for the transfer virtual machine along with the signal. The agent can establish a connection to the transfer virtual machine . The agent can initiate a snapshot of the source filesystem which may record a timestamp and begin to keep a list of changes to the source filesystem along with a record of the data in the source filesystem prior to being changed in a snapshot . The agent can transmit the snapshot of the source filesystem to the transfer virtual machine . The transfer virtual machine can use the information in this transfer to write the target filesystem as a block by block copy of the source filesystem at the time indicated by the timestamp . The transfer of information can happen directly from the source machine to the transfer virtual machine without any intermediate steps which may facilitate the security of the data on the source filesystem and the reliability of the transfer operation. The transfer virtual machine can apply the options to the setup and execution of the block by block copy. The transfer virtual machine can update the target filesystem with a set of tweaks which may facilitate the target filesystem to serve as a system disk in the environment of the hypervisor . The orchestrator can use the hypervisor to delete the transfer virtual machine and the default filesystem create a target virtual machine which may have the same processor configuration as the source machine and associate the target virtual machine with the target filesystem . As a result the target virtual machine can be a copy of the source machine at the time recorded in the timestamp running in the environment of the hypervisor . The orchestrator may use the hypervisor to start the target virtual machine

In some embodiments the orchestrator in can include components or functionality of the orchestrator as described with respect to . In some embodiments the hypervisors and in can include components or functionality of the hypervisor as described with respect to . In some embodiments the source machines and in can include components or functionality of the source machine as described with respect to . In some embodiments the agents and in can include components or functionality of the agent as described with respect to . In some embodiments the transfer virtual machines and in can include components or functionality of the transfer virtual machine as described with respect to . In some embodiments the source filesystems and in can include components or functionality of the source filesystem as described with respect to . In some embodiments the snapshots and in can include components or functionality of the snapshot as described with respect to . In some embodiments the default filesystems and in can include components or functionality of the default filesystem as described with respect to . In some embodiments the target virtual machines and in can include components or functionality of the target virtual machine as described with respect to . In some embodiments the target filesystems and in can include components or functionality of the target filesystem as described with respect to .

In some embodiments the hypervisor in can include components or functionality of the hypervisor as described with respect to . In some embodiments the virtual machines in can include components or functionality of the transfer virtual machine and the target virtual machine as described with respect to . In some embodiments the filesystems in can include components or functionality of the target filesystem as described with respect to . In some embodiments the user in can include components or functionality of the user as described with respect to . In some embodiments the computing device in can include components or functionality of the computing device as described with respect to . In some embodiments the user interface in can include components or functionality of the user interface as described with respect to .

In some embodiments the orchestrator in can include components or functionality of the orchestrator as described with respect to . In some embodiments the source machine in can include components or functionality of the source machine as described with respect to . In some embodiments the storage in can include components or functionality of the source filesystem as described with respect to . In some embodiments the users and in can include components or functionality of the user as described with respect to . In some embodiments the interface device and the computing device in can include components or functionality of the computing device as described with respect to .

In some embodiments the orchestrator in can include components or functionality of the orchestrator as described with respect to . In some embodiments the hypervisors in can include components or functionality of the hypervisor as described with respect to . In some embodiments the source machines in can include components or functionality of the source machine as described with respect to . In some embodiments the virtual machines in can include components or functionality of the transfer virtual machine and the target virtual machine as described with respect to .

In some embodiments the source machine in can include components or functionality of the source machine as described with respect to . In some embodiments the filesystem in can include components or functionality of the source filesystem as described with respect to . In some embodiments the timestamp in can include components or functionality of the timestamps as described with respect to . In some embodiments the snapshot in can include components or functionality of the snapshot as described with respect to .

In some embodiments the orchestrator in can include components or functionality of the orchestrator as described with respect to . In some embodiments the storage in can include components or functionality of the storage as described with respect to . In some embodiments the transfer virtual machine in can include components or functionality of the transfer virtual machine as described with respect to . In some embodiments the default filesystem in can include components or functionality of the default filesystem as described with respect to . In some embodiments the target filesystem in can include components or functionality of the target filesystem as described with respect to . In some embodiments the target virtual machine in can include components or functionality of the target virtual machine as described with respect to . In some embodiments the scripts in can include components or functionality of the tweaks as described with respect to .

In some embodiments the orchestrator in can include components or functionality of the orchestrator as described with respect to . In some embodiments the user in can include components or functionality of the user as described with respect to . In some embodiments the computing device in can include components or functionality of the computing device as described with respect to . In some embodiments the user interface in can include components or functionality of the user interface as described with respect to . In some embodiments the hypervisor in can include components or functionality of the hypervisor as described with respect to . In some embodiments the options in can include components or functionality of the options as described with respect to . In some embodiments the target virtual machines in can include components or functionality of the target virtual machine as described with respect to . In some embodiments the target filesystems in can include components or functionality of the target filesystem as described with respect to . In some embodiments the source machine in can include components or functionality of the source machine as described with respect to . In some embodiments the source filesystem in can include components or functionality of the source filesystem as described with respect to . In some embodiments the source volumes in can include components or functionality of the source volumes and as described with respect to . In some embodiments the target volumes and in can include components or functionality of the target volumes and as described with respect to .

In some embodiments the user interface in can include components or functionality of the user interface as described with respect to .

Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. The subject matter described in this specification can be implemented as one or more computer programs e.g. one or more circuits of computer program instructions encoded on one or more computer storage media for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be or be included in a computer readable storage device a computer readable storage substrate a random or serial access memory array or device or a combination of one or more of them. Moreover while a computer storage medium is not a propagated signal a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be or be included in one or more separate components or media e.g. multiple CDs disks or other storage devices .

It should be understood that the systems described above may provide multiple ones of any or each of those components and these components may be provided on either a standalone machine or in some embodiments on multiple machines in a distributed system. The systems and methods described above may be implemented as a method apparatus or article of manufacture using programming and or engineering techniques to produce software firmware hardware or any combination thereof. In addition the systems and methods described above may be provided as one or more computer readable programs embodied on or in one or more articles of manufacture. The term article of manufacture as used herein is intended to encompass code or logic accessible from and embedded in one or more computer readable devices firmware programmable logic memory devices e.g. EEPROMs ROMs PROMs RAMs SRAMs etc. hardware e.g. integrated circuit chip Field Programmable Gate Array FPGA Application Specific Integrated Circuit ASIC etc. electronic devices a computer readable non volatile storage unit e.g. CD ROM floppy disk hard disk drive etc. . The article of manufacture may be accessible from a file server providing access to the computer readable programs via a network transmission line wireless transmission media signals propagating through space radio waves infrared signals etc. The article of manufacture may be a flash memory card or a magnetic tape. The article of manufacture includes hardware logic as well as software or programmable code embedded in a computer readable medium that is executed by a processor. In general the computer readable programs may be implemented in any programming language such as LISP PERL C C C PROLOG or in any byte code language such as JAVA. The software programs may be stored on or in one or more articles of manufacture as object code.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated in a single software product or packaged into multiple software products.

References to or may be construed as inclusive so that any terms described using or may indicate any of a single more than one and all of the described terms.

Thus particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain embodiments multitasking and parallel processing may be advantageous.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any inventions or of what may be claimed but rather as descriptions of features specific to particular implementations of particular inventions. Certain features described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

