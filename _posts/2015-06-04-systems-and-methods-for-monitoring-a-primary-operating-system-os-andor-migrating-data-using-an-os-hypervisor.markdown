---

title: Systems and methods for monitoring a primary operating system (OS) and/or migrating data using an OS hypervisor
abstract: Systems and methods for monitoring a primary Operating System (OS) and/or migrating data using an OS hypervisor. In some embodiments, an Information Handling System (IHS) includes a processor; and a memory coupled to the processor, the memory having program instructions stored thereon that, upon execution by the processor, cause the IHS to: provide an Operating System (OS) hypervisor configured to enable operation of a primary OS environment and a service OS environment concurrently, wherein the primary and service OS environments are distinct from each other; and allow the service OS, via the OS hypervisor, to monitor a state of the primary OS while forbidding the primary OS from monitoring a state of the service OS.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09465643&OS=09465643&RS=09465643
owner: DELL PRODUCTS, L.P.
number: 09465643
owner_city: Round Rock
owner_country: US
publication_date: 20150604
---
This disclosure relates generally to computer systems and more specifically to systems and methods for monitoring a primary Operating System OS and or migrating data using an OS hypervisor.

As the value and use of information continues to increase individuals and businesses seek additional ways to process and store information. One option is an Information Handling System IHS . An IHS generally processes compiles stores and or communicates information or data for business personal or other purposes. Because technology and information handling needs and requirements may vary between different applications IHSs may also vary regarding what information is handled how the information is handled how much information is processed stored or communicated and how quickly and efficiently the information may be processed stored or communicated. The variations in IHSs allow for IHSs to be general or configured for a specific user or specific use such as financial transaction processing airline reservations enterprise data storage global communications etc. In addition IHSs may include a variety of hardware and software components that may be configured to process store and communicate information and may include one or more computer systems data storage systems and networking systems.

In many situations an IHS may need to be serviced or supported. For example the IHS may have hardware and or software that needs to be fixed updated removed installed or replaced from time to time. To address these and other problems certain systems and methods described herein may enable a computer manufacturer or service provider to allow customers to have access to automated simplified support actions or operations for example even when an IHS is not otherwise able to boot to its primary or main Operating System OS or has other serious hardware or software failures.

Embodiments of systems and methods for monitoring a primary Operating System OS and or migrating data using a hypervisor are described herein. In an illustrative non limiting embodiment an Information Handling System IHS may include a processor and a memory coupled to the processor the memory having program instructions stored thereon that upon execution by the processor cause the IHS to provide an OS hypervisor configured to enable operation of a primary OS environment and a service OS environment concurrently wherein the primary and service OS environments are distinct from each other and allow the service OS via the OS hypervisor to monitor a state of the primary OS while forbidding the primary OS from monitoring a state of the service OS.

In some implementations the service OS may include one or more diagnostic tools. Monitoring the state of the primary OS may include accessing the state using an Application Programming Interface API provided by primary OS via the OS hypervisor to enable one way access to the primary OS by the service OS. The API may include a disk file or memory access API to name a few.

The program instructions upon execution by the processor may further cause the IHS to allow the service OS to suspend stop or restart the primary OS via the OS hypervisor. Additionally or alternatively the program instructions upon execution by the processor may further cause the IHS to detect by the OS hypervisor that a primary OS event has taken place and notify the service OS by the OS hypervisor of the primary OS event.

Additionally or alternatively the program instructions upon execution by the processor may further cause the IHS to determine by the service OS via the OS hypervisor that the primary OS event meets a threshold and take corrective action by the service OS via the OS hypervisor upon the primary OS. Corrective action may include restoring a file affected by the primary OS event. Additionally or alternatively corrective action may include a reboot of the primary OS.

The program instructions upon execution by the processor may further cause the IHS to backup a partition where the service OS resides into a Random Access Memory RAM prior to the determination. The partition may include a solid state portion of a hybrid Hard Disk Drive HDD and wherein the primary event may include an HDD failure. The program instructions upon execution by the processor may further cause the IHS to restore the backup from the RAM to a replacement HDD in connection with a hot swapping operation.

In another illustrative non limiting embodiment a computer implemented method may include providing an OS hypervisor configured to enable concurrent execution of a primary OS and a service OS where the primary and service OS are distinct from each other and allowing the service OS using one or more one way APIs provided via the OS hypervisor to monitor the primary OS while the primary OS is being executed.

In yet another illustrative non limiting embodiment a storage device may have program instructions stored thereon that upon execution by an IHS cause the IHS to provide an OS hypervisor configured to enable concurrent execution of a primary OS and a service OS wherein the primary and service OS are distinct from each other and allow the service OS using one or more one way APIs provided via the OS hypervisor to monitor the primary OS while the primary OS is being executed.

In some embodiments one or more of the techniques described herein may be performed at least in part by an IHS operated by a user. In other embodiments these techniques may be performed by an IHS having a processor and a memory coupled to the processor the memory including program instructions stored thereon that upon execution by the processor cause the IHS to execute one or more operations. In yet other embodiments a non transitory computer readable medium or memory device may have program instructions stored thereon that upon execution by an IHS cause the IHS to execute one or more of the techniques described herein.

To facilitate explanation of the various systems and methods discussed herein the following description has been split into sections. It should be noted however that the various sections headings and subheadings used herein are for organizational purposes only and are not meant to limit or otherwise modify the scope of the description or the claims.

The inventors hereof have recognized a need for providing systems and methods for service and support to computing devices. Existing tools intended to facilitate service and or support of a client device or Information Handling System IHS do not adequately address numerous problems such as for example situations when the IHS fails to boot a main or primary Operating System OS for any reason whether due to a hardware of software problem such that the IHS is said to be in a degraded state. To address these and other concerns embodiments described herein provide Basic I O System BIOS and or service OS level intelligence to enable a client device to self diagnose and to receive automated service and support. Additionally or alternatively in some embodiments the main or primary OS may be modified to implement one of more of the foregoing features.

The term degraded state as used herein refers to the state of an IHS that is not capable of booting a main or primary OS e.g. WINDOWS MAC OS LINUX etc. either fully or partially e.g. in WINDOWS s safe mode or the like . When operating in a degraded state the IHS may still be able to execute BIOS instructions and or a service OS SOS .

The term BIOS as used herein refers to a type of firmware used during an IHS s booting process e.g. power on or reset . The BIOS initializes and tests an IHS hardware components and loads a boot loader or an OS from a memory device. The BIOS additionally provides an abstraction layer for the hardware which enables software executed by the IHS to interact with certain I O devices such as keyboards displays etc. Incidentally the Unified Extensible Firmware Interface UEFI was designed as a successor to BIOS to address certain technical issues. As a result modern IHSs predominantly use UEFI firmware and the term BIOS as used herein is intended also encompass UEFI firmware and future variations thereof.

The term service OS as used herein refers to one or more program instructions or scripts distinct from an IHS s main OS or primary OS such that upon execution by an IHS e.g. upon failure by the IHS to load the main or primary OS enable one or more support diagnostics or remediation operations to be performed independently of the state of the main or primary OS. The service OS may include one or more service and support applications as described in more detail below. In some cases an SOS may be stored in a recovery partition of a hard drive. Additionally or alternatively an SOS may be stored in a Non Volatile Memory NVM or flash memory built into the client system. Additionally or alternatively the SOS may be stored in a remote location so as to allow an IHS to boot remotely from the cloud. 

In some embodiments service capabilities may be invoked either pre boot or pre OS. Pre boot capabilities may be built into the BIOS UEFI and pre OS capabilities may be provided by a service OS. For example pre boot services may include using enhanced BIOS diagnostics tools to detect hardware failure providing a Quick Response QR code to simplify access to support services etc. Meanwhile pre OS services may include enabling a service OS to provide customer automated assistance using built in remediation scripts to help diagnose and remediate the device improve support efficiency using live chat remote control support etc. In some implementations pre boot services may be focused on no boot scenarios whereas pre OS services may be focused on operations such as remediation boot from web re imaging from web etc.

As will be understood by a person of ordinary skill in the art in light of this disclosure virtually any IHS environment that requires service or support may implement one or more aspects of the systems and methods described herein. Furthermore certain aspects of the connected systems described herein may be implemented by computer manufacturers software providers and or service or support companies.

Turning now to a diagram illustrating an example of an environment where systems and methods for providing service and support to computing devices may be implemented is depicted according to some embodiments. As shown each of any number of client devices A N may be an IHS or other computing device generically referred to as IHS client client device or device including for example desktops laptops tablets smartphones and any other all in one AIO data processing device. In some situations devices may be located in geographically distributed or remote locations such as offices homes etc. Each device may be operated by an individual end consumer e.g. lay person or customer of a computer manufacturer or software provider for instance. In some cases two or more of client devices A N may be deployed within or managed by the same organization e.g. a business .

Tools intended to facilitate service and or support of client devices include service technicians live support operators and or backend service . Service technicians include trained employees or contractors that can travel to the site of device or that can receive the physical device e.g. at a retail store by mail etc. or part s thereof in order to make repairs for example. Live support operator s may be available for instance when device fails but it is sufficiently operational that it can still connect the user to operator s via chat email text messages Voice Over Internet Protocol VoIP call etc. Additionally or alternatively the user of client device may place a conventional phone call to live support operator s e.g. using a 1 800 number or the like . In some cases live support operator s may interactively guide the user in an effort to correct problems with client device e.g. troubleshooting .

Backend service may include one or more servers and or IHSs configured to perform one or more automated operations with respect to device . In various implementations backend service may be configured to communicate with a service OS prior to and or independently of IHS being able to boot a main OS and it may enable one or more support diagnostics or remediation operations to be performed remotely including but not limited to telemetry error reporting tracking chat etc.

Entities may have access to network . In various embodiments telecommunications network may include one or more wireless networks circuit switched networks packet switched networks or any combination thereof to enable communications between two or more of IHSs. For example network may include a Public Switched Telephone Network PSTN one or more cellular networks e.g. third generation 3G fourth generation 4G or Long Term Evolution LTE wireless networks satellite networks computer or data networks e.g. wireless networks Wide Area Networks WANs metropolitan area networks MANs Local Area Networks LANs Virtual Private Networks VPN the Internet etc. or the like.

For purposes of this disclosure an IHS may include any instrumentality or aggregate of instrumentalities operable to compute calculate determine classify process transmit receive retrieve originate switch store display communicate manifest detect record reproduce handle or utilize any form of information intelligence or data for business scientific control or other purposes. For example an IHS may be a personal computer e.g. desktop or laptop tablet computer mobile device e.g. Personal Digital Assistant PDA or smart phone server e.g. blade server or rack server a network storage device or any other suitable device and may vary in size shape performance functionality and price. An IHS may include Random Access Memory RAM one or more processing resources such as a Central Processing Unit CPU or hardware or software control logic Read Only Memory ROM and or other types of NVMs.

Additional components of an IHS may include one or more disk drives one or more network ports for communicating with external devices as well as various I O devices such as a keyboard a mouse touchscreen and or a video display. An IHS may also include one or more buses operable to transmit communications between the various hardware components.

CPU s are coupled to northbridge controller or chipset via front side bus . Northbridge controller may be configured to coordinate I O traffic between CPU s and other components. For example in this particular implementation northbridge controller is coupled to graphics device s e.g. one or more video cards or adaptors via graphics bus e.g. an Accelerated Graphics Port or AGP bus a Peripheral Component Interconnect or PCI bus or the like . Northbridge controller is also coupled to system memory via memory bus and to hard disk drive HDD . Memory may be configured to store program instructions and or data accessible by CPU s . In various embodiments memory may be implemented using any suitable memory technology such as static RAM SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. Conversely HDD may include any magnetic solid state SSD or hybrid data storage device capable of storing an OS and other applications.

Northbridge controller is coupled to southbridge controller or chipset via internal bus . Generally speaking southbridge controller may be configured to handle various of IHS s I O operations and it may provide interfaces such as for instance Universal Serial Bus USB audio serial parallel Ethernet or the like via port s pin s and or adapter s over bus . For example southbridge controller may be configured to allow data to be exchanged between IHS and other devices such as other IHSs attached to a network e.g. network . In various embodiments southbridge controller may support communication via wired or wireless general data networks such as any suitable type of Ethernet network for example via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fiber Channel SANs or via any other suitable type of network and or protocol.

Southbridge controller may also enable connection to one or more keyboards keypads touch screens scanning devices voice or optical recognition devices or any other devices suitable for entering or retrieving data. Multiple I O devices may be present in IHS . In some embodiments I O devices may be separate from IHS and may interact with IHS through a wired or wireless connection. As shown southbridge controller is further coupled to one or more PCI devices e.g. modems network cards sound cards or video cards and to one or more SCSI controllers via parallel bus .

Southbridge controller is also coupled to BIOS UEFI and to Super I O Controller via Low Pin Count LPC bus . BIOS UEFI includes non volatile memory having program instructions stored thereon. Those instructions may be usable by CPU s to initialize and test other hardware components and or to load an OS onto IHS . Super I O Controller combines interfaces for a variety of lower bandwidth or low data rate devices. Those devices may include for example floppy disks parallel ports keyboard and mouse temperature sensor and fan speed monitoring control among others. In various implementations southbridge controller may be configured to allow data to be exchanged between BIOS UEFI and another IHS attached to network e.g. a remote server or other source of technical service using wired or wireless capabilities of network adapter .

In some cases IHS may be configured to provide access to different types of computer accessible media separate from memory . Generally speaking a computer accessible medium may include any tangible non transitory storage media or memory media such as electronic magnetic or optical media e.g. magnetic disk a hard drive a CD DVD ROM a Flash memory etc. coupled to IHS via northbridge controller and or southbridge controller .

The terms tangible and non transitory as used herein are intended to describe a computer readable storage medium or memory excluding propagating electromagnetic signals but are not intended to otherwise limit the type of physical computer readable storage device that is encompassed by the phrase computer readable medium or memory. For instance the terms non transitory computer readable medium or tangible memory are intended to encompass types of storage devices that do not necessarily store information permanently including for example RAM. Program instructions and data stored on a tangible computer accessible storage medium in non transitory form may afterwards be transmitted by transmission media or signals such as electrical electromagnetic or digital signals which may be conveyed via a communication medium such as a network and or a wireless link.

A person of ordinary skill in the art will appreciate that IHS is merely illustrative and is not intended to limit the scope of the disclosure described herein. In particular any computer system and or device may include any combination of hardware or software capable of performing certain operations described herein. In addition the operations performed by the illustrated components may in some embodiments be performed by fewer components or distributed across additional components. Similarly in other embodiments the operations of some of the illustrated components may not be performed and or other additional operations may be available.

For example in some implementations northbridge controller may be combined with southbridge controller and or be at least partially incorporated into CPU s . In other implementations one or more of the devices or components shown in may be absent or one or more other components may be added. Accordingly systems and methods described herein may be implemented or executed with other IHS configurations.

As mentioned above in various embodiments certain service capabilities may be built at least in part into a client device s BIOS UEFI . In that regard shows block diagram of an example of BIOS UEFI . Particularly BIOS UEFI includes NVM mailbox configured to store program instructions that upon execution provide and or receive one or more service and support parameters or information to or from control logic of CPU s to implement one or more service and support applications described in detail below. In some cases NVM mailbox may serve as a mailbox to track issues and other information persistently. As noted above however at least a part of the aforementioned service capabilities may be provided via a service OS that is stored at least in part within a designated a partition of HDD and or on a remote IHS accessible to BIOS UEFI via network .

In some embodiments a variety of service and support applications may be at least partially embedded into BIOS UEFI and or NVM mailbox as described below.

Systems and methods described herein may include a service and support application configured to provide automated services. In some embodiments client device BIOS level intelligence may be provided to execute self diagnosis and to assist in automated services. Service capabilities are built into client device BIOS diagnostics pre boot service OS on disk or boot from cloud. Moreover these capabilities may be integrated with a services backend for automated client device error reporting tracking chat remediation etc.

In some embodiments an automated diagnostics procedure of an automated service and support application may include performing a BIOS diagnostics to discriminate hardware from software issues e.g. broken HDD or corrupt OS . Then BIOS UEFI s NVM mailbox may be used to track issues persistently from BIOS pre OS OS and or backend sources.

Upon detection of a failure a determination may be made as to the severity of that failure e.g. whether the failure is severe such as in a no video situation a no network scenario etc. or whether it is a simple failure such as an OS problem and remedial action s may then be taken by the automated service and support application as deemed appropriate. For example if a network is not available a Quick Response QR code or audio may be used to provide diagnostic failure and device identification information. Conversely if the network is available the automated service and support application may activate a phone home capability upon detection of a failure and it may boot the client device to a service OS.

In that scenario the client device may connect directly with a backend service Application Programming Interface API to initiate a warranty check e.g. via hardware service tag as hardware ID generate a service case update debug data initiate recovery or remediation operations etc. In some cases the automated service and support application may trigger an automatic dispatch of customer replaceable units CRUs parts or components within the client device.

At the point of need which often coincides with the point of failure the automated service and support application may make service offers based on failure diagnoses. For example such service offers may include an out of warranty upsell warranty upgrade additional service offers e.g. HDD recovery for dead drive upsell warranty carry in capability e.g. report closest repair facilities for carry in service etc.

Moreover with respect to recovery and remediation the automated service and support application may provide remote control remote scripting diagnostics live customer support backup re imaging and OS re install via local factory image or via web and the like.

Systems and methods described herein may include a service and support application configured to provide technical support in no video situations which are otherwise difficult to troubleshoot. In many cases when client device is not capable of outputting a video signal users have no other option but to place a phone call to the manufacturer because the device itself can provide no help.

To address this and other concerns a service and support application as described herein may include a audio only support system for example similar to an automated phone support system or Interactive Voice Response IVR but that is local to client device and capable of running in a pre OS or pre Boot environment. While a customer is interacting with the service and support application client device can run a diagnostics procedure. When appropriate the service and support application may handoff the local automated audio support to online voice support from the IHS manufacturer. If network is unavailable client device may prompt the user to connect directly to a nearby device distinct from client device to perform one or more of these operations.

In some embodiments the service and support application may include pre OS availability of audio based troubleshooting offline audio support concurrent with diagnostics and or merging or handover between offline and online audio support. The service and support application may also prompt the user to make peer to peer P2P connection to a nearby device readout codes for diagnosis dispatch verification and or prompt the user to add or insert external storage to which to output diagnostic results.

Systems and methods described herein may include a service and support application configured to provide an automated and authenticated mayday beacon with a cost effective 1 to 1 support for verified client device s failures.

When client device experiences a fault or hang before its main OS is made available a wireless signal beacon e.g. Bluetooth Wi Fi etc. may be sent e.g. on a periodic basis containing verification of the device credentials issued at the time of manufacture details regarding the fault and a direct link to the manufacturer s support decision tree location and or whether a premium account is linked. The beacon may be authenticated directly to a support representative with all failure information logged and available. This technique may prevent erroneous support calls by verifying the user has actually experienced a failure and authenticating that the proper support level has been funded which promotes a low cost one on one support service.

In some embodiments the service and support application may be configured to broadcast a distress signal with credentials to make authenticated jump to a support site provided by backend services from a secondary device or infrastructure. A certificate may be issued from the manufacturer containing client device s platform user information and or service level. Such a certificate and a landing page for service may be passed automatically while client device is out of service. Also the service may be rendered utilizing secondary device or infrastructure via authenticated and verified client device experiencing failure.

Systems and methods described herein may include a service and support application configured to provide network e.g. Internet recovery and service.

When client device fails it may phone home and boot from backend services a service OS to provide automated service and support. A service and support application in BIOS UEFI may include for example a boot loader where to go e.g. an IP address booting proper image for machine and or a service application. As such the service and support application may provide a smarter BIOS UEFI smart diagnostics in BIOS UEFI intelligent boot selection to local drive or web and IP awareness among other features.

In some implementations the service OS may be supported on many platforms and on many versions of those platforms. For example a single platform e.g. having a model name or number may be shipped from the manufacturer with different hardware configurations e.g. different CPUs etc. thus each combination of platform and version requiring that different specific drivers be built into or provided for in the service OS.

In some embodiments the service and support application may be configured to provide a Unified Extensible Firmware Interface UEFI BIOS module with smart diagnostics and IP support intelligently controls boot to a service OS. Client device connects to backend services to get proper and latest service OS for that particular device. Backend service or server may receive a client manifest and it may dynamically serve a service OS kernel drivers and a service application to client device for recovery and or remediation.

Systems and methods described herein may include a service and support application configured to improve customer experience while downloading a recovery OS by reducing the perception of wait time.

When client device has a malfunction it can boot to an alternate OS. In some cases the alternate OS is downloaded via network before client device is able to boot. The download time is variable often nontrivial and may negatively affect customer perception. To counter this the service and support application may estimate the download time of the alternate OS and based on an assessment of the delay may pull forward one or more low bandwidth activities and or options that the customer may need or desire to do anyway e.g. updating contact information thus helping save customer time and reducing the perception of delay.

In some embodiments the service and support application may be configured to prioritize lower bandwidth tasks based on estimated OS load time. Prioritization of activities may be based for example upon data about malfunction. As such the application may enable user input or interaction while OS is downloading e.g. updating contact information describing the problem that happened before failure etc. . The application may also submit a phone number for text alerts when failed client device is ready and it may start a local interactive debug troubleshooting operation while the OS is being downloaded.

Systems and methods described herein may include a service and support application configured to provide identity continuity in the servicing of a failed client device .

When client device fails and needs service a user may need to enter service credentials on a service web portal provided by backend service or server whether accessing the portal directly or via a service OS. However the user may not recall such infrequently used credentials at the point of need. By storing both a main OS s user credential hash and a service portal token a service and support application can authenticate the user and then automatically submit the service portal token to log user into the service portal without manual entry of customer credentials. This method may also be used to allow access to customers Wi Fi profiles and other type of data that needs protection.

In some embodiments the service and support application may be configured to use a BIOS s mailbox to communicate one or more services token s to enable a single sign on procedure while protecting the token s with user credentials.

Systems and methods described herein may include a service and support application configured to perform smart diagnosis and triage of client device failures.

In some cases the application may provide an automated method of hardware exoneration identifying software versus hardware issues with targeted debug. POST may be used to detect issues during power on sequence then those results may be used for firmware based diagnostics for next level of hardware diagnostics. Main OS POST and firmware based diagnostic results may be stored on the client device s BIOS s NVM or mailbox as device health data. In case client device is not able to boot its main OS a service OS may be started and uses health data to either run even more extensive hardware diagnostics or to run software fault detection and remediation test. Cloud connection to client device s manufacturer or backend service may facilitate the download of updated tests reporting of issues and initiation of replacement parts dispatch.

In some embodiments the service and support application may be configured to use a BIOS s NVM or mailbox to aggregate device health data. The application may use firmware and or a service OS. Each stage of diagnostics may use information from previous diagnostics results to target more detailed but specific subsequent tests.

Systems and methods described herein may include a service and support application configured to perform smart diagnosis using hosted resources. When client device cannot boot after repeated attempts it may begin a process to perform self evaluation and potentially self repair operations. Because having all executable diagnostics and repair modules present in the non bootable system would be costly operations may involve successively loading software modules from a remote support source . But modules loaded through internet wireless networks are likely slow to download and therefore should be reduced or minimized to be tailored exactly as needed for a given process.

To address these and other problems in some embodiments a service and support application may be configured to upload test results to backend service which automatically determines a subsequent module to be downloaded based on client device data and or historic analysis of other client devices. The application may provide a remote boot of diagnostic and repair software modules. Appropriate modules may be selected and or minimized to the next diagnosis stage in order to facilitate transfer over slow communications channels. A service may provide a reverse proxy for a hosted module to be loaded so that client device may boot from a single Uniform Resource Locator URL for each process.

Systems and methods described herein may include a service and support application configured to intelligently alter a boot order to aid in automated client device diagnosis and repair. When client device fails to completely boot it does not move on to another component as set in the boot order if a previously attempted component remains available for boot. Often the process gets stuck trying to boot and repair the main OS indefinitely. The pre set boot order remains static and unaltered.

In some embodiments by building intelligence into BIOS UEFI for determining a boot order for client device a service and support application may be configured to break out of a failing sequence and load alternative OSs and or repair and diagnostic modules from various local or remotely available resources selected by their availability performance or content. Depending upon the success of each stage client device may change the boot order again to try another source. A successful repair may lead back to booting the main OS as the primary boot resource. An alternative or service OS may result as the final stage if the main OS cannot be made bootable.

In some embodiments the service and support application may be configured to dynamically change a boot order based upon conditions of client device . The application may also set client device in temporary or permanent boot orders based upon the completion stage of the diagnosis and repair.

Systems and methods described herein may include a service and support application configured to export failure and diagnostic data from a malfunctioning client device. Client device may sometimes malfunction such that it cannot provide output or accept input from a user. It may still function at a low level however in order to capture its own failure codes and run diagnostics. These codes and diagnostic results are written to internal storage and are useful for system remediation but unfortunately remain captive on the malfunctioning client device.

To address these and other problems a service and support application may create an embedded capability that is triggered by a malfunction identifies the failure diagnostics data and exports the data upon insertion of an external storage device. The external device may then be taken to a functioning IHS or other client device which can receive the data for local analysis and or upload it for analysis or recordkeeping.

In some embodiments the service and support application may be configured to export the data to an external device having a marker file. The marker file may be generated by an IHS manufacturer or software provider and identifies the external device as belonging to an authorized service technician or other party. As such a service mode may be provided for malfunction situations in which a user cannot interact with or extract data from failed client device . Normal behavior that occurs when inserting an external storage device may be overridden in the service mode and instead client device may export related failure debug data to the external device. The service mode may be independent of the main OS.

Systems and methods described herein may include a service and support application configured to provide technician access to only services data on an encrypted drive. For diagnosis and remediation client device may use services data e.g. system telemetry failure and diagnostics data services history etc. . If a system has OS volume encryption e.g. BitLocker and fails over to a service OS the service OS cannot typically access the services data due to encryption. That is the latest and most valuable services data is trapped.

To address these and other concerns service and support application may create a separate services data partition in local storage e.g. client device s own hard drive also encrypted for consistency with user intent. The key for the services data partition may be different than the key used for the remainder of the volume encryption and may be stored by backend service with user permission to allow service technician access in controlled support situations. As such services data may be kept outside the inaccessible encrypted OS partition while still protected.

In some embodiments the service and support application may be configured to create a services data partition that is encrypted differently e.g. different key and or encryption algorithm than client device s main OS volume for purposes of services access. Access to the separately encrypted data may be useful to services applications and only visible to an authorized technician. Also the application may provide the ability to pull encryption key from cloud and decrypt service data on device distinct from the client device for example using technician credentials e.g. when network is not accessible by client device .

Systems and methods described herein may include a service and support application configured to protect the service OS administrator s password while allowing technician one time execution with elevated privileges. An initial password for a service OS may be created using a One Time Password OTP technique and a seed stored on client device s BIOS UEFI s NVM mailbox . The seed and a hardware service tag may be sent to backend services to provide a mechanism for service technician or live support operator s to run privileged applications in the service OS without using a master password. In some embodiments application of OTP in a support scenario may enable higher security for remote management and debug operations. NVM mailbox may be used for storing initial seed at factory tied to the client hardware service tag. A service technician at failure time may generate a code to request administrator permissions.

Systems and methods described herein may include a service and support application configured to provide automatic system stop and boot to a service OS for forensics analysis. In some embodiments detection of suspicious activity for secure systems may result in automated boot to service OS with automated forensics lockdown and analysis outside the potentially compromised main OS. The application may combine security intrusion or behavior capabilities with a service OS to provide new forensics features. For example detection of intrusion or malware in client device may initiate lock down mode boot to the service OS. The service OS then connects or phones home to backend services report a potential security incident and initiates data forensics collection. Client device may maintain a lockdown mode at BIOS level controlled by policy to maintain security of network and data for forensic analysis.

Systems and methods described herein may include a service and support application configured to migrate contents of an internal storage partition to a replacement storage device.

In some embodiments data contained on a secondary partition of client device s internal drive storage may be migrated from an old or existing drive to a replacement or upgraded drive by storing it in Dynamic RAM DRAM while the drive is hot swapped. If DRAM capacity is insufficient overflow may be handled by external storage e.g. USB drive for example. In another embodiment a Solid State Drive SSD portion may instead be a secondary partition on a standard hard drive. As such an application may migrate a specified drive partition into DRAM use external storage for data that exceeds the capacity of DRAM and or recognize and provisions replacement storage with contents of drive partition. These and other techniques are described in more detail in Section E below.

Systems and methods described herein may include a service and support application configured to increase the effectiveness of a service OS by utilizing a custom hypervisor.

A conventional service OS may be configured to run on client device only when the main OS is suspended. Such a conventional service OS may not be able to effectively monitor real time events in the main OS as they occur. For example a conventional service OS may only be able to examine the state of the primary disk data etc. using residual data collected by the main OS when the main OS was running. To address these and other concerns a service OS as described herein may run in a hypervisor in a first tier next to the main OS or in a second tier and the hypervisor may allow the service OS full access to the resources of the primary OS. Accordingly dynamic state of the primary OS may be monitored either constantly or periodically and actions and reports may occur immediately a watchdog OS .

In some embodiments a hypervisor environment may provide a service OS of client device with full access to the resources of the main OS but not necessarily vice versa for example to keep the service OS from being corrupted . The service OS may run as a peer of the primary OS. The peer service OS may be configured to monitor for process memory disk and other resources of the main OS and may be allowed to alter them as required. These and other techniques are described in more detail in Section E below.

At block method includes attempting to boot client device . For example block may be executed in response to a power on or reset event. Block determines whether a Power On Self Test POST procedure has been successfully performed upon client device by BIOS UEFI . If so then block determines whether a main OS has been successfully booted. In some cases a successful boot of the main OS may include a complete success in other cases however a successful boot may include cases where the main OS is booted in safe mode or the like with less than all of its functionality available to a user. If block detects successful boot of the main OS then control of client device is passed to the main OS at block and the method ends. In that case support and or service issues may be handled by the main OS.

Conversely if the POST operation fails at block service and support may be provided in a pre boot environment at block . Examples of service and support procedures available to client device in such a scenario include but is not limited to detecting network availability use of QR codes or the like with or without network connections collection and transmission of telemetry data and or event logs alerts and indications of failures and procedures for dealing with no video scenarios as outlined above.

If the main OS fails to boot at block block then determines whether a service OS can be booted. In some cases the service OS may be initiated from a memory local to the client device. For example the service OS may be stored in NVRAM or in a designated partition of HDD . Alternatively the service OS may be loaded from a backend service over network e.g. cloud boot . If the service OS is not capable of being booted at block then service and support may again be provisioned within the pre boot environment at block . Otherwise service and support operations may be provided in a pre OS environment at block before method ends.

In various implementations BIOS UEFI may be configured to use a boot strike count as part of a failure detection procedure. That is the number of unsuccessful main OS and or service OS boot attempts may be kept by BIOS UEFI and that information may be used by one or more of the aforementioned service and support operations in subsequent boot attempts.

As noted above in some cases service and support may be provided to a computer device such as client device by backend services via network . In that regard is a flowchart of a method for providing backend services and support to a computing device. In some embodiments method may be performed at least in part by BIOS UEFI and or CPU s of client device in cooperation with backend services for example when client device is operating in degraded state e.g. no video hard drive fault etc. either in pre boot environment or pre OS environment of .

At block method includes determining whether access to network is available to client device . If not then service and support operations may be provided as local remediation operations e.g. QR code services etc. at block . If there is network access however block includes client device phoning home to reach backend services which in turn may perform one or more checks. Examples of such checks include but are not limited to warranty and service entitlement checks performed using the client device s service tag or other identifying information such as the customer account token.

At block method includes uploading client device telemetry and or debug data to backend services . For example the telemetry and or debug data may be used by backend service to iteratively improve diagnostics and fault isolation. Then at block method includes any number of remote remediation and service operations performed by backend services . Examples of such operations include but are not limited to auto dispatch for CRUs point of need services such as warranty upsells warranty upgrades service offers etc. and HDD recovery with optional reporting of closest location office or store available for carry in service by the user . Other operations may include remote control of one or more components of client device chat support backup re imaging OS re install via local factory image or cloud etc.

When a main OS which is the primary software environment for a computer fails to run properly or exhibits signs of unusual behavior it may need to be observed and or inspected by diagnostic applications. These diagnostic applications may either run as part of the primary OS e.g. if the primary OS is functional enough to support the application and trustworthy enough to inspect itself or under an alternate service OS that may be booted and run instead of the primary OS. The service OS can then examine the primary storage medium e.g. an HDD etc. containing the software and data space of the primary OS. These conventional methods for detecting errors and issues in the primary OS revolve around analyzing diagnostics and data after the failure has occurred. A service OS booting to resolve primary OS issues is left to examine the state of the primary disk and data using residual data collected by the primary OS when it was running as well as the static state of information left on the primary storage medium.

In contrast with the foregoing systems and methods described herein may include a service and support application configured to monitor a primary Operating System OS and or migrate data using an OS hypervisor.

In various embodiments a service OS running under an OS hypervisor with permissions and full access to the primary OS may be configured to dynamically monitor the state of the primary OS and initiate actions and reports interceptions or alterations to the primary OS immediately. As such the service OS may act as a watchdog OS for the primary OS under control of the OS hypervisor.

In some cases the service OS may be executed as a tier 1 application next to the primary OS. Additionally or alternatively the service OS may be executed a tier 2 application on top of the primary OS. The latter implementation may be useful for example in situations where the primary OS remains trustworthy and functional.

In an OS hypervisor environment according to some embodiments rather than providing full isolation of two OSs primary and service the service OS may be provided one way access through programmatic Application Programming Interfaces APIs to the primary OS environment. One way APIs supported by the primary OS may include but are not limited to disk file and memory access Windows Management Instrumentation WMI and hardware access through drivers.

Also APIs provided by additional primary OS services to enhance the functionality of the service OS may be accessed. Normally such access through APIs would only be granted to applications running on the primary OS. In various embodiments however the service OS while running simultaneously or concurrently with the primary OS may be capable of accessing the primary OS as if it were an application running on the primary OS while remaining protected from being corrupted or brought down by the primary OS via the OS hypervisor.

In various implementations the service OS may exist independently of the primary OS. For example the service OS may be capable of suspending stopping or restarting the primary OS. If the primary OS is unable to operate properly and support system level and other services enabled by its APIs in a reliable and trustworthy manner then the service OS may still access the hardware and software environment and examine or change the state of the primary OS by utilizing the interfaces provided by the OS hypervisor.

Additionally since the service OS may have full access to all system storage and data as well as the OS hypervisor environment and base hardware access it may be enabled to migrate any portion of the environment including part of or the entire operating environment into a dynamic memory that the OS hypervisor reserves for storage. Backup files of the service OS and OS hypervisor environment which are stored on an HDD may be used to allow for replacement of the OS hypervisor and service OS. Then if non volatile storage such as the HDD is replaced the service OS can reimage itself using system backup files to recover the machine state. This technique be useful for example for rapid replacement e.g. hot swapping of failed storage media if the partition or files containing the service OS and hypervisor backup are still viable.

In some cases when the primary operating system backups are too large to fit in system DRAM the service OS may copy those backups into DRAM with overflow enabled to an additional attached storage e.g. such as USB . In this case the backups copied and restored may be a complete operating environment of both OSs and the OS hypervisor.

Although conventionally primary OS and service OS would be completely isolated from each other here element represents a firewall provided by an OS hypervisor API. In some embodiments one way APIs enabled in or through the OS hypervisor provide access to primary OS by service OS but not vice versa. Again only APIs provided by the OS hypervisor allow the service OS to access either the base hardware or primary OS . And because no APIs exist that are callable in the opposite direction that is from the primary OS toward the service OS service OS remains protected against primary OS .

In addition OS hypervisor provides a set of one or more APIs from primary OS to service OS . Through the API s service OS is capable of monitoring a state of primary OS . Again examples of these API s include but are not limited to disk file and memory access Windows Management Instrumentation WMI and hardware access through drivers. For example using such an API service OS may access primary OS to kill a process direct read write to modify affected disk bytes uninstall software or perform any other operation that primary OS is capable of performing upon itself.

And again using OS hypervisor service OS is be capable of accessing the primary OS as if it were an application running on the primary OS but it cannot be corrupted by the primary OS. That is OS hypervisor provides unidirectional one way access to primary OS by service OS .

At block and in response to block the OS hypervisor detects the file change or storage device read write error. Then at block the OS hypervisor notifies the service OS of the change or error. In some cases the change may be legitimate yet the service OS may inspect it in order to make such a determination.

At block the service OS determines that the primary OS has been significantly altered. For example the service OS may have a list of problem codes that once detected indicate that the alternations have been significant enough to trigger corrective action. In various implementations different groups of problem codes may trigger different actions. So at block the service OS inspects and remediates the primary OS boot media and control and restores any required files in more extreme scenarios as shown in below. Particularly at block the service OS may access APIs provided by the OS hypervisor that enable read write access by the service OS to the primary OS s file system and or media.

At block the primary OS is inspected and repaired by the service OS. And at block the repaired primary OS is put into normal operation by a user. Conversely at block the service OS determines whether the primary OS should be rebooted for example based on rules that indicate a reboot for a subset of problem codes on the code list. At block if a reboot is deemed necessary by the service OS then the service OS requests a restart of the primary OS to the OS hypervisor. At block the OS hypervisor restarts the primary OS which takes place at block .

In some cases upon detection of a failure of HDD A by OS hypervisor primary OS and or service OS the user may need to replace potentially defective HDD A with a new HDD B. After HDD A is removed from the IHS and new HDD B replaces it the contents of area which in are shown in as service OS B and backup files B and which are copies of elements A and A are subject to restore operation to move them out of DRAM area and into SSD partition B of new HDD B. Magnetic storage portion B may be used to install a clean copy of primary OS A and or primary data files A.

It should be understood that various operations described herein may be implemented in software executed by logic or processing circuitry hardware or a combination thereof. The order in which each operation of a given method is performed may be changed and various operations may be added reordered combined omitted modified etc. It is intended that the invention s described herein embrace all such modifications and changes and accordingly the above description should be regarded in an illustrative rather than a restrictive sense.

Although the invention s is are described herein with reference to specific embodiments various modifications and changes can be made without departing from the scope of the present invention s as set forth in the claims below. Accordingly the specification and figures are to be regarded in an illustrative rather than a restrictive sense and all such modifications are intended to be included within the scope of the present invention s . Any benefits advantages or solutions to problems that are described herein with regard to specific embodiments are not intended to be construed as a critical required or essential feature or element of any or all the claims.

Unless stated otherwise terms such as first and second are used to arbitrarily distinguish between the elements such terms describe. Thus these terms are not necessarily intended to indicate temporal or other prioritization of such elements. The terms coupled or operably coupled are defined as connected although not necessarily directly and not necessarily mechanically. The terms a and an are defined as one or more unless stated otherwise. The terms comprise and any form of comprise such as comprises and comprising have and any form of have such as has and having include and any form of include such as includes and including and contain and any form of contain such as contains and containing are open ended linking verbs. As a result a system device or apparatus that comprises has includes or contains one or more elements possesses those one or more elements but is not limited to possessing only those one or more elements. Similarly a method or process that comprises has includes or contains one or more operations possesses those one or more operations but is not limited to possessing only those one or more operations.

