---

title: Secure computing systems and methods
abstract: The present disclosure relates to systems and methods for facilitating trusted handling of genomic and/or other sensitive information. Certain embodiments may use a virtualized execution environment to execute code and/or programs that wish to access and/or otherwise use genomic and/or other sensitive information. In some embodiments, data requests from the code and/or programs may be routed through a transparent data access proxy configured to transform requests and/or associated responses to protect the integrity of the genomic and/or other sensitive information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09558322&OS=09558322&RS=09558322
owner: Intertrust Technologies Corporation
number: 09558322
owner_city: Sunnyvale
owner_country: US
publication_date: 20150501
---
This application claims the benefit of priority under 35 U.S.C. 119 e to U.S. Provisional Patent Application No. 61 987 365 filed May 1 2014 and entitled SECURE COMPUTING SYSTEMS AND METHODS and to U.S. Provisional Patent Application No. 62 077 691 filed Nov. 10 2014 and entitled SECURE COMPUTING SYSTEMS AND METHODS both of which are hereby incorporated by reference in their entireties.

Portions of the disclosure of this patent document may contain material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the U.S. Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever.

The present disclosure relates generally to systems and methods for facilitating trusted handling of information. More specifically but not exclusively the present disclosure relates to systems and methods for enabling secure governed and or audited use of genomic medical healthcare bioinformatics and or other sensitive information.

Data fuels scientific discovery and technology that restricts access to data may impede scientific process. This risk is particularly acute in healthcare systems where data that sits idle is data that may not be used to treat patients and or develop new technologies and or cures. Healthcare data however is sensitive in nature and its public disclosure may have certain detrimental effects. For example genomic information can reveal a significant amount of detail regarding health status and disease risk not only for a patient but for the patient s relatives as well. Even in an anonymized form genomic information may be susceptible to attacks that may compromise patient privacy and or the privacy of other associated individuals. Accordingly balancing the goals of increasing the amount of genomic data available for use by researchers and or other healthcare providers while preserving privacy of patients and or interested individuals and preventing compromising attacks can prove difficult.

Under some access models researchers and or other entities that may wish to access genomic and or other sensitive data may be carefully screened. Following successful screening however the researchers and or entities may be given unfettered and or relatively unrestricted access to the genomic and or other sensitive data under the assumption that they can be trusted to respect the privacy interests of associated subjects e.g. patients . Such an approach however may not address the inherent intransitivity of trust. For example such access models may not specifically address whether a trusted and or screened researcher may e mail a patient s personal data to a colleague whom they trust whether the researcher can legitimately e mail a subset of the information and if so how large of a subset would be acceptable what the ethical obligations of the researcher are with respect to managing the computing infrastructure on which the patient s personal data is stored and or the like.

A potential problem with this conventional access model is that it may expect users to enforce relatively complex policies that govern the use of data. Once information has been revealed and or otherwise provided to a recipient e.g. a researcher the burden is placed on the recipient to act with discretion in protecting the privacy of the data a requirement that may be in conflict with the recipient s desire to accomplish a particular scientific or research task that may be more readily achieved by sharing the personal data and or that may be beyond the recipient s technical capabilities.

Systems and methods are described herein that ameliorate some or all of these problems. Consistent with embodiments disclosed herein a data service may be used to provide stronger security and or privacy functionality in connection an application e.g. with a model view controller MVC web application and or the like that may interact with sensitive data e.g. genomic or other medical or bioinformatics data . In certain embodiments the disclosed systems and methods may address privacy concerns relating to the use of genomic and or other sensitive data and may mitigate the potential for compromising attacks involving such data. In further embodiments the disclosed systems and methods can be used to enable secure and or policy based access to and or use of sensitive data. Among other things embodiments of the disclosed systems and methods may facilitate policy based governance of access to and or use of genomic and or other sensitive data e.g. distribution analysis etc. improved interaction with and or use of distributed genomic and or other sensitive data reduced user involvement in genomic and or other sensitive data workflow processes and or the like.

A detailed description of systems and methods consistent with embodiments of the present disclosure is provided below. While several embodiments are described it should be understood that the disclosure is not limited to any one embodiment but instead encompasses numerous alternatives modifications and equivalents. For example while for purposes of illustration a number of examples have been provided in the context of genomic data it will be appreciated that the systems and methods disclosed herein are not limited to that context and could be readily used with other forms of sensitive data. In addition while numerous specific details are set forth in the following description in order to provide a thorough understanding of the embodiments disclosed herein some embodiments can be practiced without some or all of these details. Moreover for the purpose of clarity certain technical material that is known in the related art has not been described in detail in order to avoid unnecessarily obscuring the disclosure.

Various embodiments of the disclosure may be understood by reference to the drawings wherein like parts may be designated by like numerals in certain instances. Components of the disclosed embodiments as generally described and illustrated in the figures herein could be arranged and designed in a wide variety of different configurations. Thus the following detailed description is not intended to limit the scope of the disclosure as claimed but is merely representative of possible embodiments of the disclosure. In addition the steps of any method disclosed herein do not necessarily need to be executed in any specific order or even sequentially nor need the steps be executed only once unless otherwise specified.

Systems and methods are presented that facilitate secure governed and or audited use of genomic and or other sensitive information. In certain embodiments the disclosed systems and methods can be used to enable policy based governance of access to and or use of sensitive data improve interaction with and or use of distributed data reduce user involvement in data workflow processes and or the like. Consistent with embodiments disclosed herein a data service may provide a framework for trusted cloud services that store and or analyze genetic sequences and or other medical or bioinformatic information. Among other things embodiments of the disclosed data service may address issues of privacy with respect to genomic or other sensitive data by allowing researchers and clinicians to interact with data through computer programs e.g. trusted analytics that may be managed in a variety of ways according to enforced policies determined by the various stakeholders in the data. It will be appreciated that these systems and methods are novel as are many of the components systems and methods employed therein.

In certain embodiments the systems and methods described herein can for example be used in connection with digital rights management DRM technologies such as those described in commonly assigned U.S. Pat. No. 8 776 216 entitled Digital Rights Management Engine Systems and Methods filed Oct. 18 2006 the 216 patent service orchestration and DRM technologies such as those described in commonly assigned U.S. Pat. No. 8 234 387 entitled Interoperable Systems and Methods for Peer to Peer Service Orchestration filed Jun. 7 2004 the 387 patent information governance technologies such as those described in commonly assigned co pending U.S. patent application Ser. No. 13 444 624 entitled Information Security Systems and Methods filed Apr. 11 2012 the 624 application information processing technologies such as those described in commonly assigned co pending U.S. patent application Ser. No. 13 654 349 entitled Systems and Methods for Protecting and Governing Genomic and Other Information filed Oct. 17 2012 the 349 application and U.S. patent application Ser. No. 14 260 714 entitled Bioinformatic Processing Systems and Methods filed Apr. 24 2014 the 714 application and or computation technologies such as those described in commonly assigned co pending U.S. patent application Ser. No. 13 840 793 entitled Distributed Computation Systems and Methods filed Mar. 15 2013 the 793 application the contents of the 216 patent the 387 patent the 624 application the 349 application the 714 application and the 793 application are hereby incorporated by reference in their entireties as well as in other contexts.

Referring to a client system may provide a variety of functions that allow a user e.g. a researcher or clinician to process analyze or otherwise interact with genomic data . In certain embodiments the client system may be communicatively coupled with one or more data storage and or processing systems via a network . In some embodiments at least some of the one or more data storage and or processing systems may be communicatively coupled with each other via the network and or through one or more other communication channels.

The one or more data storage and or processing systems may among other things be configured to store and or manage genomic data and or interact with the client system in connection with the same. Consistent with the disclosed embodiments the one or more data storage and or processing systems may be associated with a genomic data service providing a framework for trusted cloud services that store and or analyze genetic sequences and or other information.

The client system may interact with information stored by the one or more data storage and or processing systems to perform various operations thereon. For example the client system may provide the one or more data storage and or processing systems with one or more programs applications code and or processes e.g. program configured to interact with genomic data stored thereon. The one or more data storage and or processing systems may execute such programs applications code and or processes in a trusted and or policy managed manner and may communicate associated results to the client system .

In some embodiments the data storage and or processing systems may interact with one another directly to compute a result. For example the client system may provide one of the data storage and or processing systems with one or more programs applications code and or processes e.g. program . This data storage and or processing system may evaluate whether it has access to the data required by the program and forward the program to other data storage and or processing systems as may be necessary or desirable receiving the computed results directly from the other data storage and or processing systems potentially performing additional processing on the results returned and then returning the results to client system .

The network may comprise any suitable combination of network communication devices and or channels and may use any suitable communication protocols and or technologies to facilitate communication between the client system the data storage and or processing systems and or one or more other systems. For example the network may comprise the Internet a local area network a virtual private network or any other communication network or combination thereof. For example in some embodiments the network may comprise a wireless carrier system such as a personal communications system PCS and or any other suitable communication system incorporating any suitable communications technologies standards and or protocols. In further embodiments the network may comprise an analog mobile communications network and or a digital mobile communications network utilizing for example code division multiple access CDMA Global System for Mobile Communications or Groupe Speciale Mobile GSM frequency division multiple access FDMA time divisional multiple access TDMA or orthogonal frequency division multiple access OFDMA standards. In certain embodiments the network may incorporate one or more satellite communication links. In yet further embodiments the network may use IEEE s 802.11 standards Bluetooth ultra wide band UWB Zigbee and or any other suitable technology or technologies.

The client system and or the data storage and or processing systems may comprise a variety of computing devices and or systems including for example laptop computer systems desktop computer systems sever computer systems distributed computer systems smartphones tablets and or the like. It will be appreciated that any suitable configuration of computing systems and storage media could be used in connection with systems including without limitation a single server or cluster of servers or a distributed collection of heterogeneous computer systems connected by a variety of networks e.g. such as the Internet public and or private networks and or the like .

In certain embodiments the client system and or the data storage and or processing systems may comprise at least one processor system configured to execute instructions stored on an associated non transitory computer readable storage medium. As discussed in more detail below the client system and or the data storage and or processing systems may further comprise a secure processing unit SPU configured to perform sensitive operations such as trusted credential and or key management secure policy management and or other aspects of the systems and methods disclosed herein. The client system and or the data storage and or processing systems may further comprise software and or hardware configured to enable electronic communication of information between the devices and or systems via the network using any suitable communication technology and or standard.

The data storage and or processing systems may be configured to store manage process distribute and or update certain data stored thereon. In certain embodiments the data storage and or processing systems may be associated with one or more processing domains jurisdictions organizations institutions users locations and or the like. As an example data storage and or processing system and associated data may be associated with a research institution data storage and or processing system and associated data may be associated with a jurisdiction that does not allow distribution of data from the jurisdiction and data storage and or processing system and associated data may be associated with a business organization offering data as a data product for clinical and or research purposes. In certain embodiments the data storage and or processing systems may be associated with one or more cloud based systems for the trusted storage and analysis of the data and may incorporate embodiments of the disclosed data service and or certain systems and methods disclosed for example in connection with the 349 application.

As discussed above an application executing on the client system may enable a user of the system to interact with the one or more data storage and or processing systems in connection with performing various workflow processes and or analyses using the data . For example in certain embodiments the client system may be configured to issue requests queries to programs applications code and or processes e.g. program executed on the data storage and or processing systems directing the data storage and or processing systems to perform certain processes and or operations using data managed thereon. Consistent with embodiments disclosed herein the one or more data storage and or processing systems may execute such programs applications code and or processes in a trusted and or policy managed manner and may communicate associated results to the client system . Results of the processes and or operations may be returned to the client system from the associated data storage and or processing systems .

In some embodiments the one or more data storage and or processing systems may include varying levels of hardware and or software security hardening based on the sensitivity of the data stored thereon. For example genomic data that does not include information associating particular genetic sequences with identification information regarding associated individuals e.g. names addresses Social Security numbers etc. may be protected by a less security hardened system than genomic data that includes such associations. In certain embodiments the one or more data storage and or processing systems may include one or more secure protected and or sandboxed execution environments for use in connection with the disclosed systems and methods as discussed in more detail below.

In certain embodiments prior to interacting with data managed by the one or more data storage and or processing systems the client system and or a user thereof may authenticate its identity and or rights to interact with and or otherwise use the data . For example username and or password authentication biometric authentication personal identification number authentication and or any other suitable type or combination of user authentication may be used in connection with authentication of the rights of the client system and or a user thereof to interact with and or use data and or system .

The one or more data storage and or processing systems and or the client system may be configured to enforce privacy and or policies associated with data specified by stakeholders of the data e.g. associated individuals institutions that gathered the data governmental authorities responsible for enforcing certain jurisdictional restrictions on the access or distribution of the data etc. . The policies may articulate certain restrictions conditions requirements and or other actions associated with the access use distribution and or the like of the data . Such policies may be enforced in connection with interaction with use distribution and or the like of the data . For example a policy may articulate that data may only be used in certain ways and or to derive certain computational results therefrom.

Examples of policies may include without limitation policies preventing and or otherwise restricting interaction with access to use of and or distribution of data policies articulating that certain security requirements be met prior to access use and or distribution of data policies articulating that certain actions be performed in connection with the access use and or distribution of data e.g. anonymization activities transformation activities auditing activities etc. and or the like. A variety of other types of policies may be associated with data and it will be appreciated that any suitable type of policy articulating restrictions conditions requirements and or actions to be enforced in connection with the interaction with access to use of and or distribution of data may be used in connection with the disclosed embodiments.

It will be appreciated that a number of variations can be made to the architecture and relationships presented in connection with within the scope of the inventive body of work. For example without limitation in some embodiments some or all of the functions performed by the client system may be performed by the one or more genomic data storage and or processing systems . Similarly some or all of the functions performed by the one or more data storage and or processing systems may be performed by the client system . Thus it will be appreciated that is provided for purposes of illustration and explanation and not limitation.

In some collaborative models research using genomic data may be conducted across distributed data centers by international teams of researchers operating on large pooled genomic data sets. Such models however may introduce certain legal ethical and or privacy considerations. Clinical settings where genomic data is used may also introduce a variety of potential storage and or computing considerations to ensure trust and security of genomic information e.g. cloud based and or hybrid storage considerations data distribution considerations security considerations etc. .

Certain features that may work well in a local environment may not work as well in connection with a decentralized distributed and or interconnected storage and computing network consistent with the disclosed embodiments. For example in a single local environment policy may be enforced through physical processes including for example locking doors to prevent access to computing equipment storing sensitive data using passwords to protect access to sensitive data and or the like. As described in more detail here in a distributed architecture spanning multiple institutions however other or additional security and or policy enforcement mechanisms may be needed to ensure that sensitive data and associated computing resources are used according to policies set by for example researchers institutions funders patients and or participants providing the data. In certain embodiments a data service is disclosed that may be associated with a distributed network that respects the policies of various stakeholders of genomic or other sensitive data.

Certain embodiments of the disclosed systems and methods may implement and or otherwise include a trust management system that may allow governing authorities to assert that entities handling sensitive data meet certain baseline requirements for membership in an associated distributed network. These requirements may dictate for example that a participating entity demonstrate the physical security of a data center associated with the entity that a certain level of data access and usage auditing is performed and or the like. If a would be participating entity meets associated requirements a trust management system may generate one or more cryptographic credentials that the entity may use to prove its identity to other participating entities and or systems and to demonstrate compliance with associated network participation requirements. In further embodiments such credentials may be used in connection with authenticating a user s identity and or associated rights to access and or otherwise use sensitive data. Consistent with embodiments disclosed herein trust management may extend to many types of actors entities and or institutions in associated distributed networks including human actors associated systems and bioinformatic programs thereby providing a framework that allows participants in one location to be trusted in others.

In a distributed system consistent with embodiments disclosed herein various participating entities and or institutions may be associated with different policies regarding data access and sharing use of associated computing resources and or the like. In some embodiments these policies may be articulated encoded and exchanged between entities and or institutions to ensure that the policies are respected and or enforced even on remote systems. For example if a research study participant has consented to the use of his or her genomic data by a specific participating institution and or in connection with a specific research study but not to broader uses of this data a policy that expresses such conditions may be persistently associated with the participant s genomic data. In some embodiments this policy may be enforced across the distributed network. A variety of entities may inject policy into such a distributed network including for example researchers research funders and or institutions pharmaceutical companies governments and or the like. In some embodiments the rights management and policy enforcement technologies described in the 216 patent and or the 387 patent can be used to express and enforce such policies although it will be appreciated that any suitable policy enforcement technology could be used.

In certain embodiments the disclosed systems and methods may enable data stakeholders in a distributed system from individuals to institutions to be able to view who has access to their data what queries have been executed on their data and or the like. In further embodiments developers of genomic and or bioinformatics tools and or applications may be able to view where and by whom their various tools and or applications have been deployed and or used. In some embodiments a combination of a priori and a posteriori mechanisms may be implemented in connection with the disclosed systems and methods to ensure that sensitive data is transferred only under authorized conditions and or to authorized destinations.

While trust and policy management tools may act on sensitive data before it is accessed embodiments of the disclosed systems and methods implementing auditing mechanisms may allow for forensic investigation of data leaks after they have occurred. Auditing mechanisms may further provide support for liability analysis in connection with privacy protection laws and or regulations such as for example the Health Insurance Portability and Accountability Act HIPPA the Health Information Technology for Economic and Clinical Health Act HITECH or the like.

Once sensitive data has been released in the clear it may be difficult to enforce data management policies and or audit the use of this data. In certain embodiments to ensure that data access is governed and auditable sensitive data may be protected through encryption. In further embodiments access to the keys that protect sensitive data may be governed as access to these keys may allow for access to the sensitive data itself.

Embodiments of the disclosed systems and methods may provide certain assurances to researchers and or other individuals or institutions that rely upon results of programs interacting with sensitive data over a distributed network. These assurances may include for example and without limitation some or all of the following 

In further embodiments the disclosed systems and methods may provide for verification that a software module interacting with sensitive data originates from a trusted source assurance that such a software module does not reveal sensitive data it should not e.g. by uploading it to a third party site or the like and or limiting the access by certain software modules from certain sources to certain computational resources and or data.

Rather than providing externally supplied software modules with direct access to sensitive data certain embodiments of the disclosed systems and methods make use of application programming interfaces APIs . illustrates an exemplary architecture for interacting with sensitive data using APIs consistent with embodiments of the present disclosure. In certain embodiments the illustrated architecture may be implemented in connection with a data service e.g. a genomic data service executing on a genomic data storage and or processing system or the like .

As illustrated one or more applications may be loaded into the data service by a user. In certain embodiments the user may use a distributed client system communicatively coupled with the data service in connection with their interactions with the data service . The application may be configured to interact with data stored on a data store . For example a researcher may create an application used to issue requests to analyze genomic data managed by the data store in connection with their research activities and load the created application into the data service . Among other things the application may be configured to issue one or more requests for certain genomic data managed by the data store and or computations to be performed in connection with the same and or receive one or more responses to such requests. Although illustrated as local to the data service it will be appreciated that in other embodiments the data store may be distributed.

From the perspective of the data service the application may be considered untrusted code. Accordingly requests by the application for access to data managed by the data store may be routed through an API associated with an authentication and authorization module of the data service . Information revealing computations using the requested sensitive data may be performed in a secure environment behind the API outside the direct access of the application . The authentication and authorization module may authenticate a requesting principal s identity and or an identity of the requesting application e.g. by examining a credential associated with the request or the like and or determine whether the requesting principal and or application is authorized to access and or otherwise use the requested data e.g. by enforcing an applicable policy and or the like .

If a requesting principal and or application is authenticated and the associated request is authorized the authentication and authorization module may forward the authorized request to the data store . In response the data store may return a response to the authentication and authorization module e.g. a result from a requested computation and or the like which may in turn forward the response from the data store to the requesting application . In certain embodiments the response may comprise results of a computation and or a process performed on requested genomic data managed by the data store . In further embodiments the response may comprise genomic data and or a subset thereof accessed from the data store . In some embodiments information relating to the authentication and or request authorization process described above may be sent to an auditing and or accounting module of the data service and or another service.

In some embodiments the architecture illustrated in connection with may use defined interfaces that may for example comprise Representational State Transfer REST APIs. Among other things the illustrated architecture may facilitate one or more of the following 

In certain circumstances the illustrated architecture may allow sensitive data to be returned into an untrusted environment of application . For example a request issued by the application may comprise a request to determine a number of genomes that have a particular variant given a list of genome identifiers. A response from the API to such a request may comprise associated variants by RSID. Under such circumstances the application may be capable of learning individual variants for each of the genomes in the list included in the request which may be chosen based on some other phenotypical characteristics. The secrecy of such associations may thus be compromised.

This potential concern may be reduced through use of a more sophisticated API capable of returning statistical information relating to a data set to a requesting application without revealing individual variants effectively moving information revealing computations into a secured environment behind the API.

The use of Application Programming Interfaces APIs may provide greater protection of sensitive data than direct access models particularly when computations that may reveal information are performed behind the API and or otherwise outside the reach of untrusted client side code. However designing an API that obscures all such computations may be difficult as untrusted code may have undesirable access to intermediate computational results and or products potentially revealing more sensitive data than may be necessary and or desired. Consistent with embodiments disclosed herein general purpose computational capability may be created within a trusted boundary of a genomic data service thereby reducing the potential for revealing sensitive data.

In some embodiments the illustrated data service may implement a variety of features and or functions to mitigate security and or privacy threats associated with undesirable access to sensitive data including for example and without limitation some or all of the following 

In certain embodiments programs e.g. code may be developed for use in connection with the data service in an untrusted environment e.g. a user s client system . The programs may be tested by developers using public data e.g. over unsecured HTTP or the like to verify that the developed programs and or applications operate as desired. Once a program is verified it may be uploaded to the data service . In some embodiments uploading the program to the data service may further include verifying that the developer is authenticated e.g. possesses credentials issued by a trusted authority and or the like and or allowing the developer to set certain policies governing the use of the uploaded program. Various assertions about the program including for example digital signatures asserting certain properties associated with the program may be added at upload and or at a later time.

To provide a certain degree of isolation and or security in some embodiments programs uploaded to the data service may be executed in virtualization containers and or in a sandboxed execution environment e.g. a limited virtualized execution environment and or machine . Programs and or software code executing in a sandboxed execution environment may be restricted to a controlled set of resources functions and or services associated with the data service . For example a sandboxed execution environment may allow software code executing therein to access only a certain subset of data sources governed by data service . Access to certain input output channels APIs networking resources processing resources temporary storage and or the like may be similarly controlled and or restricted.

Virtualization and or sandboxing can be implemented in any suitable manner. In some illustrative embodiments virtualization may be implemented using Docker e.g. a system based on a Linux container mechanism LXC . When user developed programs are loaded into the data service the system may create executable images of the programs and save them to a repository for retrieval at execution time. In some embodiments such executable images may be created automatically in response to a program being loaded into the data service .

As illustrated in a request to execute a particular program such as for example code may be received by the data service from a user s system. In certain embodiments the request may be issued from a client system that may be remote and or otherwise distributed from the system associated with the data service . In some embodiments the request may be passed through an authentication and or authorization process to ensure that the principal requesting the execution of a given computation is allowed by policy to do so.

The request may be received by an execution manager component of the data service . Among other things the execution manager may be configured to manage the lifecycle of a computation running on the data service manage interactions between users and the data service and or engage in auditing and accounting activities relating to the use of the data service . For example the execution manager may be configured to receive requests from a client system send associated responses to the client system and or interact with the sandboxed execution environment and or code executing therein a data access proxy and or an audit and or accounting module in connection with embodiments of the disclosed systems and methods.

In response to receiving the request the execution manager may load the requested program into the sandboxed execution environment . In some embodiments the execution manager may further perform a policy identification and or enforcement process and in response thereto place one or more conditions on the requested program . For example prior to executing the requested program the execution manager may require verification that the requested program be digitally signed by a trusted authority.

An execution context may be generated by the execution manager for the requested execution of the program . In some embodiments the execution context may allow the data service to associate sensitive information e.g. genomic data managed by data store with an executing program without placing the sensitive information into the address space of the program where it may be vulnerable e.g. within the sandboxed execution environment .

As an example the exemplary program illustrated in may be passed a genomic ID as its first argument. In some embodiments the program may check for variants in particular exons of the PIK3CA and PTEN genes. A malicious or erroneous program may reveal this genomic ID which under some threat models may allow attackers to piece together private and or otherwise sensitive information. To mitigate this threat the program may be handed an ephemeral identifier to use for the duration of its execution. In some embodiments this identifier may be a random identifier. In further embodiments the identifier may comprise a result of applying a relatively difficult to invert function e.g. encryption functions hashing functions etc. to the actual identifier. In some embodiments the mapping between actual identifiers and ephemeral identifiers may be maintained as part of the execution context generated by the execution manager .

In further embodiments the execution context generated by the execution manager may comprise information used to anonymize data and or responses from the data store . For example in some embodiments the execution context may comprise information used to introduce noise to data and or responses from the data designed to anonymize the returned data and or responses. For example techniques such as those described in the 624 application could be used.

Referring back to the execution manager may initialize a virtual machine instance e.g. a virtualized and or sandboxed execution environment and start the requested program . The execution manager may further pass any necessary execution parameters to the program within the virtualized execution environment . In certain embodiments the parameters may be passed to the program in a transformed state to avoid allowing the program access to sensitive information.

As the program executes it may request data from the data store . In certain embodiments these requests may comprise HTTP calls as shown in connection with the exemplary program illustrated in . Because the program may execute within a virtualized execution environment the ability of the program to access certain resources e.g. network resources and or endpoints outside a designated set of resources may be restricted.

In some embodiments requests for data from the program may be routed through a data access proxy of the data service . Among other things the data access proxy may transform requests and or responses received from and or sent to the program executing in the virtualized execution environment to protect the integrity of sensitive information managed by the data store . In certain embodiments the data access proxy may be transparent to the program . For example from the perspective of the program the program may initiate requests and receive responses as if it were communicating directly with the data store .

In some embodiments the data access proxy may comprise a transformation and policy enforcement module . The transformation and policy enforcement module may transform requests received from the program into secure data requests transform responses received from the data store prior to returning the responses to the program enforce applicable policy relating to the interaction of the program with the data store and or the like. In certain embodiments the transformation and policy enforcement module may use the execution context provided by the execution manager in connection with its various activities. For example in some embodiments the execution context may comprise information used to effectuate transformation and or policy enforcement actions performed by the transformation and policy enforcement module .

In some embodiments the transformation and policy enforcement module may prohibit or modify access to information in data store based on relationships between the originators of data stored in data store the principal on whose behalf program is being executed the creator of program and or the like. For example if a particular datum in data store concerns a specific individual who has established a policy preventing access to a specific subset of genomic information by all principals except for her physician the transformation and policy enforcement module may determine that the program has requested access to the forbidden information but is not being executed on behalf of the individual s physician and thus may prevent access to this data.

In some embodiments functions performed by the data access proxy and or the transformation and or policy enforcement module in connection with request and or response transformation and or policy enforcement activities may include without limitation some or all of the following 

Results from the data store generated in response to a secure request may be received by the data access proxy and or the transformation and or policy enforcement module . In certain embodiments upon receipt of the response the data access proxy and or the transformation and or policy enforcement module may enforce associated policy and or transform the response prior to returning the response to the program executing in the virtualized execution environment e.g. returning the response to the address space of the program . In some embodiments this policy enforcement and or transformation may be based at least in part on information included in the execution context generated by the execution manager .

In some embodiments the transformation and or policy enforcement module may transform results returned from data store to manage the amount of sensitive information returned into the address space of program . Such transformations may include for example eliminating certain fields in the response from data store changing or adding randomness to certain values in that response reducing the precision of values in the response or returning an error to program instead of a valid response.

Upon termination of the program its output a transformed version thereof and or a return value may be captured by the execution manager and may be returned to an original requestor e.g. a user and or a distributed client system interfacing with the data service . In further embodiments auditing information relating to interactions between and or operations of various elements of the data service may be provided to an auditing and or accounting module of the service . In certain embodiments auditing information may be digitally signed so that its authenticity may be verified later. In yet further embodiments because the data service may use virtualization on known virtual machines and may store sign and or tag various state information associated with its operation computations may be recreated at a later time to validate various auditing information e.g. recreated on a different system at a later time or the like .

In some embodiments some programs may comprise continuous computations that do not terminate after computing a single result. Such computations may for example collect information as it comes into the system and return outputs to execution manager according to the newly assimilated data. For instance a program may be monitoring a data store for a cancer diagnosis. Upon a new diagnosis the computation may look up the genetic information for the patient in a second data store and refine a model for genetic prediction of cancer. As new diagnoses enter into the data store the cycle repeats and the model is refined further.

In some embodiments some programs may in the natural course of computation or under the control of the execution manager be suspended and wait for some event or travel to another data service in order to do computations under a different set of policies or over a different set of data. For instance a program that compares the APOE status in mainland Chinese populations with Icelandic populations may travel multiple times between data services located in China and data services located in Iceland in order to comply with local policy and or to access different data stores.

In some embodiments some parts of a program may be involved in determining an optimal data service location for a particular purpose. For instance a program may consider the number of data points available in a data store versus their accuracy. For example a program modeling progression of childhood mitochondrial disease may decide to move to a location where the data are less accurate but far more numerous.

As discussed above in some embodiments of the disclosed systems and methods requests by an application for access to sensitive data and or for computations to be performed using such data may be routed through an API that may be defined semantically by an associated system. In certain embodiments information revealing computations using requested sensitive data may be performed in a secure environment behind the API outside the direct access of the untrusted application. Certain embodiments of the disclosed systems and methods may use REST APIs in connection with interactions with genomic data. illustrates an exemplary exchange between a service that exposes variant data via an API and a requesting program.

In some embodiments the disclosed data service may be language agnostic and associated programs for interacting with the sensitive data may interface with the data service via HTTP APIs. In certain embodiments programs used to interact with sensitive data may handle user I O using standard stdin stdout and stderr facilities. For example as discussed above the exemplary program illustrated in may check for variants in a given set of genes and exons. In some embodiments the program may receive an identifier of a genome record as its first command line argument and may write its results to stdout.

Following a successful policy check at the execution context is initialized at . As described elsewhere herein in some embodiments this may comprise creating or populating a data structure e.g. the execution context that will hold information about the computation. In some embodiments the execution context may contain metadata about the computation being performed including e.g. mappings between ephemeral identifiers generated for resources and the true identifiers of those resources.

At the program begins to execute. This may involve starting a virtual machine or other execution container running a script executing a program on a byte code interpreter and or the like. The program is provided with the arguments it needs to run information about where to fetch resources it needs locations for output and so forth.

Upon beginning execution of the computation the execution environment listens for and intercepts requests for access to data . By intercepting the requests coming from the governed computation policy can be applied results can be obscured identifiers remapped and so forth. Essentially at this stage techniques are applied to ensure that the information being delivered to a computation is appropriate under some set of policies.

The request might be intercepted using one or more different techniques. One implementation might use a transparent proxy on the same subnet as a virtual machine or container executing the computation. The program executing inside the container believes that it is accessing a normal URL but in fact its request is intercepted and processed by a proxy server that performs steps both on the request and response as shown at .

For example if the secure execution context received a request for data it first applies any appropriate transformations to the request possibly using information in the execution context to do so. For example in some implementations programs may request access to resources using a REST API. A program might ask for a specific genomic variant like this 

The URI might be transformed using information in the execution context to substitute in the true identifier for this genome. For example the URI may become this 

Where the mapping between the ephemeral identifier 123 and the true identifier 98482842872348 is part of the execution context.

It will be appreciated that other transformations are possible for example mapping resource specifiers in one namespace to another namespace. Many online resources use their own unique names for genes these names might be mapped to more standardized names.

As a further example rather than substituting in a true identifier for an ephemeral identifier the system might use a hashed or encrypted version of the true identifier as arguments for the execution of the program and this transformation step may involve adding an HTTP header to the request that allows the destination server to determine the true identifier.

In some embodiments the destination of the request may also be changed to reflect knowledge of the regulatory landscape the most convenient copy of the data the specific database known to contain the desired information and or the like.

As shown at in some embodiments requests are audited. The audit may contain the original request the transformed request a request obscured by encryption e.g. to prevent information leakage to inappropriate parties via the audit etc.

At policy is applied to the request. For example policies governing resource access are applied to the request to determine whether specific accesses are allowed. In one embodiment the policies are applied during the execution of the computation not a priori. The benefit of this setup is that a computation may determine as part of its execution which resources are to be accessed resources whose identifiers may not be known a priori so that authentication cannot be determined in advance.

For example a program may request from a server a list of genomes matching a specific criterion e.g. they have variant rs1234. A subsequent step might then interrogate the dynamically determined cohort to investigate correlations between variants rs1234 and rs5678. The specific accesses requested in the second step of this computation are not known and generally cannot be known since they depend upon the state of the specific genomic database being queried in advance. In such circumstances the authorization of such requests should be done at runtime.

Referring once more to at a determination is made as to whether the policies of the previous step allow the access. If access is allowed the request is forwarded to another system that stores the governed information. For example if the resources are identified via a REST API as outlined at the request is forwarded to this system.

At policies if any are applied to the results of the computation. The results returned from a sensitive data sources may for example themselves be subject to governance policies that cannot be evaluated before the result is generated. For example a very specific query that narrows down a cohort to a single person in a way that may render that individual subject to identification may be blocked.

At a determination is made as to whether to allow access to the results and at the results may be transformed if dictated by policy. Transformations may be applied on the returned values for several reasons including a inverting mappings made previously e.g. at possibly using information in the execution context b adding randomness to results that are determined to return too much personal information etc.

If access is not allowed e.g. a no exit from block or block then at a null exceptional result is returned signaling that an exceptional case has happened. This step should also be governed carefully as sometimes returning an exception result may leak information as well for example showing that a given individual is not part of a database. At the result may be audited like the request in raw form transformed form or even encrypted or otherwise obscured form to prevent casual log viewers from seeing information they should not see. The system may also perform an information accounting determining and recording the amount of information about a specific resource that has been revealed. This may be used in future policy decisions if too much information has been revealed according to some policy the system may refuse to answer further questions.

At a result is returned back to the program under execution. For example if the request was intercepted by a transparent proxy in this step the proxy provides the result back to the requester.

At a determination is made as to whether execution of the governed program has terminated. If not the process continues execution at block .

At a return value is constructed. For example in one embodiment when the governed computation has terminated the final result of this computational step is assembled into a data structure to be returned to the principal requesting the computation.

At policy is applied to the potential return value. In the same way that the results of each of the individual resource requests was governed and audited so too in some embodiments are the combination of these results. Otherwise a program could make a very long series of seemingly innocuous queries and combine the results together into something that reveals a great deal of information. The types of policies applied may for example be similar to those described in connection with block but they tend to concern combinations of information. For example a policy may require that incidental findings are either revealed or suppressed depending on the severity of those incidental findings. This might mean for example that a detected variant indicating an increased chance for a specific disease like Alzheimer s for which there is currently no medically proven course of action to avoid the condition be suppressed in a final result. This suppression may be the result of an institutional policy or a personal preference of the principal from whom the data was collected.

At a determination is made as to whether return is allowed by the policy and at the return value may be transformed similar to block but for the final results. For example each of the return values may be modified slightly to maintain confidentiality while preserving the statistics e.g. mean variance of the results.

If access is not allowed then a null exceptional result may be returned similar to block and at an execution audit may be created. The final result may be audited of course but in some embodiments some or all of the inputs and the entire state of the system as a result of this computation are audited as well. This step may be desirable for forensic purposes to recreate results that were obtained in the past. Suppose for example that a computation is used to dose a medication and the patient suffers an adverse reaction. It is important to know that the computation was performed correctly and to be able to demonstrate this fact. One method for doing this involves computing and storing hashes on the inputs and all implicit input state the computations themselves and the output results possibly in a digitally signed form. By storing the hashes along with the input and output data state data and results a very large class of computations e.g. those that are deterministic and referentially transparent can be recreated exactly.

At the results are returned to the requester or stored in a well defined location for later processing stages and at the execution context is cleaned up. For example the execution context that contained metadata about this computation may be destroyed after which processing stops.

It will be appreciated that has been provided for purposes of illustration and not limitation and that a number of changes could be made to the example process shown in without departing from the principles of the inventive body of work. For example in some embodiments various blocks could be omitted other blocks could be added steps could be performed in different order and or the like.

Some examples of additional details of and possible variations to the example process described above are provided below.

One of the reasons that some embodiments virtualize computations is based on the security assumption that any information given to the computation itself may potentially be leaked whether accidentally or maliciously. There are several mechanisms for protecting against this eventuality.

At block in an execution context is created that may contain among other things mappings between identifiers known to the system and identifiers as given to the computation. In some embodiments a computation is given a random ephemeral alias for a resource in the context of this specific execution. For example a resource that has an actual identity 12345678 may be assigned a random identifier 072963429. When the computation desires information about this resource it asks for 072963429. The system using the execution context maps this identifier to the true identifier 12345678.

An additional approach is to encrypt true identifiers using a key known to or discoverable by the servers hosting the sensitive data. A variation would be to use a keyed hash function such as HMAC and to use the hash as the resource identifier. Those skilled in the art will appreciate that there are many potential ways to obscure the identifier and that any suitable technique could be used.

One benefit of this approach is that it is compatible with testing computations against test data with computations being run outside of the trusted execution context. In such cases there is no execution context no proxy and hence no translation. If the tester knows some genome identifiers that have been made public the computation may be tested outside of the trusted execution context and then subsequently uploaded to the trusted context.

Consistent with the disclosed embodiments computations that may potentially reveal sensitive information may be isolated and or otherwise be performed in a virtualized and or protected execution environment e.g. in a sandboxed environment . In further embodiments more complex computations may use multiple stages that may further be individually isolated in protected processing environments. In some embodiments isolating stages of a computation may among other things improve security of the computation and or reduce the potential for sensitive information and or intermediate computation information from being undesirably revealed.

As an example a computation may determine carrier compatibility. A program configured to implement the computation may identify two subjects by a phenotypic identifier check the subjects for the presence or absence of a particular variant and determine whether the two subjects are carriers. Such a computation may however potentially reveal personally identifiable and or otherwise sensitive information. To reduce this risk consistent with certain embodiments disclosed herein the program may be implemented using a network of three separate programs such that each run in isolation may not make the connection between genotype and phenotype.

In some embodiments each of the computations may be performed inside of a sandboxed execution environment as illustrated in with the execution manager governing the interactions between each of the individually sandboxed computations. For example the computation if running inside of a sandboxed execution environment may return its results to the execution manager which then provides those results possibly after some transformation to programs and each running inside of their own sandboxed execution environments.

Certain embodiments of the disclosed data service may provide various mechanisms for specifying computational networks including for example computational networks such as that illustrated in connection with . In certain embodiments the disclosed data service may among other thing facilitate transformations between modules computational lifecycle management storage and or transport of intermediate computational products and or returning final computational results in a secure manner.

In some embodiments a Model View Controller web application architecture may be implemented in connection with an embodiment of the disclosed data service framework. illustrates an exemplary Model View Controller web application configured to interface with a genomic data service consistent with embodiments disclosed herein. In some embodiments the genomic data service may expose a secure API to facilitate interaction with genomic data managed thereon e.g. a REST API .

In certain embodiments an object relational model ORM implemented in connection with the web application may be adapted to interact with the secure API. In some embodiments an ORM system may be designed to allow application developers using web services frameworks such as Ruby on Rails or Django to interact with automatically generated model objects whose class corresponds to a database table and whose object instances correspond to rows within the table. In further embodiments web frameworks may be used supporting components that allow developers to transparently interact with a model object stored in a remote service over a REST API in a similar manner as for an object in a local database.

As an example of Object REST mapping a statement that retrieves a database record may be translated into a URL. For example a statement that retrieves the database record patient.rsid 1933437 may be translated into the URL http . . . genome 5685c028bf7811e3a21a12470ec1d3b5 variant rsid rs1933437 where the genome ID is associated with the patient object in the local database and the path is constructed automatically by the object to a REST mapping layer. In some embodiments such a request may be coupled with an authentication mechanism that allows code making the request to be identified and or audited.

Certain embodiments of the disclosed systems and methods may be integrated at an API level in a variety of circumstances including without limitation when associated computational modules 

Can pass intermediate products between various computational modules safely and or without otherwise compromising the integrity of the sensitive data.

In further embodiments such as when one or more of the above circumstances do not apply certain protection may be achieved by applying sandboxing and or virtualized execution environment techniques at an individual module level consistent with other embodiments of the disclosed systems and methods. illustrates an exemplary web application configured to interface with a genomic data service using a protected execution environment.

In some embodiments sandboxed modules may be invoked by controlled code directly. For example modules themselves may use an Object REST mapping as described above with an adapter being injected as a dependency into the virtualization container. In certain embodiments this approach may be implemented in circumstances where there may not be many dependencies on other module objects and or where necessary parameters may be passed to the sandboxed modules as parameters.

In further embodiments a level of indirection may be implemented. For example rather than mapping instance variables and method access to REST calls that return those items an object mapping may convert those requests into commands to execute the sandboxed modules passing in any necessary parameters.

Utilizing module level sandboxing may among other things allow the genomic data service to more safely handle third party code cryptographically verify code integrity and or the like. In certain embodiments to mitigate risk to intermediate products and or computational information e.g. that may be returned to a web application in certain architectures computational networks may be used in connection with the genomic data service framework. Particularly as discussed above a computational network may be specified to isolate certain intermediate computations of a computation and or program. Consistent with disclosed embodiments various intermediate computations may be executed within various protected execution environments thereby protecting the integrity of intermediate computational results.

At a request may be received from a user to perform a computation using a genomic data set. In some embodiments the request may be received by an execution manager executing on a system implementing certain embodiments of the disclosed genomic data service. The request may for example comprise a request to access the genomic data set and or a request for a result of a computation based on a genomic data set.

In response to receiving the request at one or more programs associated with the requested computation may be loaded into one or more virtualized and or otherwise sandboxed or limited execution environments. In some embodiments the one or more virtualized execution environments may be initialized in response to receiving the original request from the user. In further embodiments the one or more virtualized execution environments may be associated with different address space s from a data store configured to manage the genomic data set.

An execution context and or multiple execution contexts for the one or more programs may be generated by the execution manager at . In certain embodiments the execution context s may comprise a mapping between a set of actual identifiers associated with the genomic data set and a set of ephemeral identifiers provided to requesting programs. These identifiers may be generated in a variety of ways including for example randomly and or based on a difficult to invert function e.g. an encryption function a hashing function etc. .

At request s from the program s for access to and or use of the genomic data set may be received by a data access proxy module executing on the system. Using the execution context s the data access proxy module may generate and or otherwise transform the request s into secure data request s at . In further embodiments one or more identified policies may be used in connection with generating the secure data request s e.g. policies associated with the genomic data set the requesting user and or the requesting program s .

The generated secure data request s may be sent by the data access proxy module to a data store managing the genomic data set at . At the data access proxy module may receive a secure data response s from the data store in response to the secure data request s . Based on the execution context s and or identified policies the data access proxy module may transform the secure response at and may provide the transformed response to the program s executing in the virtualized execution environment s . A response to the user s original request generated by the one or more program s based on information received from the data access proxy module may be sent to the user at .

As illustrated in the system may include a processing unit system memory which may include high speed random access memory RAM non volatile memory ROM and or one or more bulk non volatile computer readable storage mediums e.g. a hard disk flash memory etc. for storing programs and other data for use and execution by the processing unit a port for interfacing with removable memory that may include one or more diskettes optical storage mediums e.g. flash memory thumb drives USB dongles compact discs DVDs etc. and or other computer readable storage mediums a network interface for communicating with other systems via one or more network connections using one or more communication technologies e.g. communicating with one or more client systems and or remote data stores a user interface that may include a display and or one or more input output devices such as for example a touchscreen a keyboard a mouse a track pad and the like and one or more busses for communicatively coupling the elements of the system .

In some embodiments the system may alternatively or in addition include an SPU that is protected from tampering by a user of system or other entities by utilizing secure physical and or virtual security techniques. An SPU can help enhance the security of sensitive operations such as trusted credential and or key management secure genomic data management and other aspects of the systems and methods disclosed herein. In certain embodiments the SPU may operate in a logically secure processing domain and be configured to protect and operate on sensitive information. In some embodiments the SPU may include internal memory storing executable instructions or programs configured to enable the SPU to perform secure operations. In further embodiments the SPU may be used to implement a protected execution environment for performing computations on genomic data as described herein. For example in some embodiments an SPU such as described in commonly assigned U.S. Pat. No. 7 430 585 the 585 patent and or U.S. Pat. No. 5 892 900 the 900 patent could be used.

The operation of the system may be generally controlled by a processing unit and or a SPU operating by executing software instructions and programs stored in the system memory and or other non transitory computer readable media such as removable memory . The system memory may store a variety of executable programs or modules for controlling the operation of the system . For example the system memory may include an operating system OS that may manage and coordinate at least in part system hardware resources and provide for common services for execution of various applications and a policy management module configured to manage and or enforce policy associated with genomic and or other sensitive data. The system memory may further include without limitation communication software configured to enable in part communication within and by the system computations e.g. programs computations and or applications configured to operate on genomic data or the like that in some circumstances may be untrusted a virtual machine module configured to implement generation of a virtualized and or otherwise protected and or sandboxed execution environment and or machine consistent with embodiments disclosed herein a trust management module configured to implement embodiments of the disclosed trust management processes an auditing and accounting module configured to implement auditing and or accounting processes consistent with the disclosed embodiments and or locally stored genomic data .

The systems and methods disclosed herein are not inherently related to any particular computer electronic control unit or other apparatus and may be implemented by a suitable combination of hardware software and or firmware. Software implementations may include one or more computer programs comprising executable code instructions that when executed by a processor of a computer system may cause the computer system to perform a method defined at least in part by the executable instructions. The computer program can be written in any form of programming language including compiled or interpreted languages and can be deployed in any form including as a standalone program or as a module component subroutine or other unit suitable for use in a computing environment. Further a computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network. Software embodiments may be implemented as a computer program product that comprises a non transitory storage medium configured to store computer programs and instructions that when executed by a processor of a computer system are configured to cause the computer system to perform a method according to the instructions. In certain embodiments the non transitory storage medium may take any form capable of storing processor readable instructions on a non transitory storage medium. A non transitory storage medium may be embodied by a compact disk digital video disk a magnetic tape a magnetic disk flash memory integrated circuits or any other non transitory memory device.

Although the foregoing has been described in some detail for purposes of clarity it will be apparent that certain changes and modifications may be made without departing from the principles thereof. It should be noted that there are many alternative ways of implementing both the systems and methods described herein. Accordingly the present embodiments are to be considered as illustrative and not restrictive and the invention is not to be limited to the details given herein but may be modified within the scope and equivalents of the appended claims.

