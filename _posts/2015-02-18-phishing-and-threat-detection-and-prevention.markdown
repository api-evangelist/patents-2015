---

title: Phishing and threat detection and prevention
abstract: A threat detection system receives links from emails opened in web browsers. The received links are compared with a whitelist of trusted links and blacklisted links associated with security threats. The threat detection system sends trusted identifiers when the received links are identified in the whitelist and sends block identifiers back to the web browsers when the received links are identified in the blacklist. The trusted identifiers cause the web browsers to display a trusted message and the block identifiers cause the web browsers to remove the received link and display a warning message. The threat detection system may receive threat reports for suspected links from employees of a same enterprise and allow an enterprise security administrator to asynchronously update the blacklists and whitelists based on the threat reports received from the enterprise users.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09509715&OS=09509715&RS=09509715
owner: SALESFORCE.COM, INC.
number: 09509715
owner_city: San Francisco
owner_country: US
publication_date: 20150218
---
This application claims the benefit of U.S. Provisional Patent Application 62 040 322 entitled AUTOMATED PHISHING DETECTION AND PREVENTION by Timothy Bach filed Aug. 21 2014 the entire contents of which is incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the United States Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The technology relates to electronic communication threat detection and prevention and more specifically to detecting and preventing phishing attacks.

Phishing is the attempt to acquire sensitive information such as usernames passwords and or credit card details by masquerading as a trustworthy entity in an electronic communication. Communications purporting to be from popular social websites auction websites banks online payment processors or information technology administrators are commonly used to lure the unsuspecting public.

Phishing emails may contain links to websites that are infected with malware. Phishing is typically carried out by email spoofing or instant messaging and often directs users to enter details at a fake website whose appearance is almost identical to the corresponding legitimate website. Most methods of phishing use some form of technical deception designed to make a link or uniform resource locator in an email and the spoofed website it leads to appear to belong to the spoofed organization. One strategy for combating phishing is to educate people how to recognize phishing attempts and how to deal with these attempts. Another popular approach to fighting phishing is to maintain a list of known phishing links and websites and to check links and websites against the list. Specialized spam filters can reduce the number of phishing emails that reach addressee inboxes.

A computer security incident response team may spread knowledge of targeted attacks via emails text messages and a computer security incident response team website. Anti phishing software consists of computer programs that attempt to identify phishing content contained in websites and e mail. Anti phishing software may display the real domain name for the website the viewer is visiting in an attempt to prevent fraudulent websites from masquerading as other legitimate web sites. However users tend not to check security information even when it is explicitly displayed to them.

Examples of systems apparatus computer readable storage media and methods according to the disclosed implementations are described in this section. These examples are being provided solely to add context and aid in the understanding of the disclosed implementations. It will thus be apparent to one skilled in the art that the disclosed implementations may be practiced without some or all of the specific details provided. In other instances certain process or method operations also referred to herein as blocks have not been described in detail in order to avoid unnecessarily obscuring the disclosed implementations. Other implementations and applications also are possible and as such the following examples should not be taken as definitive or limiting either in scope or setting.

In the following detailed description references are made to the accompanying drawings which form a part of the description and in which are shown by way of illustration specific implementations. Although these disclosed implementations are described in sufficient detail to enable one skilled in the art to practice the implementations it is to be understood that these examples are not limiting such that other implementations may be used and changes may be made to the disclosed implementations without departing from their spirit and scope. For example the blocks of the methods shown and described herein are not necessarily performed in the order indicated in some other implementations. Additionally in some other implementations the disclosed methods may include more or fewer blocks than are described. As another example some blocks described herein as separate blocks may be combined in some other implementations. Conversely what may be described herein as a single block may be implemented in multiple blocks in some other implementations. Additionally the conjunction or is intended herein in the inclusive sense where appropriate unless otherwise indicated that is the phrase A B or C is intended to include the possibilities of A B C A and B B and C A and C and A B and C. 

In some implementations the users described herein are users or members of an interactive online enterprise social network also referred to herein as an enterprise social networking system an enterprise collaborative network or more simply as an enterprise network. Such online enterprise networks are increasingly becoming a common way to facilitate communication among people any of whom can be recognized as enterprise users. One example of an online enterprise social network is Chatter provided by salesforce.com inc. of San Francisco Calif. salesforce.com inc. is a provider of enterprise social networking services customer relationship management CRM services and other database management services any of which can be accessed and used in conjunction with the techniques disclosed herein in some implementations. These various services can be provided in a cloud computing environment as described herein for example in the context of a multi tenant database system. Some of the described techniques or processes can be implemented without having to install software locally that is on computing devices of users interacting with services available through the cloud.

The disclosed implementations may be described with reference to an email Chatter and more generally to enterprise social networking those of ordinary skill in the art should understand that the disclosed techniques are neither limited to Chatter nor to any other services and systems provided by salesforce.com inc. and can be implemented in the context of various other database systems such as cloud based systems that are not part of a multi tenant database system or which do not provide enterprise social networking services.

In some implementations the environment is an environment in which an on demand database service exists. An on demand database service such as that which can be implemented using the system is a service that is made available to users outside of the enterprise s that own maintain or provide access to the system . As described above such users generally do not need to be concerned with building or maintaining the system . Instead resources provided by the system may be available for such users use when the users need services provided by the system that is on the demand of the users. Some on demand database services can store information from one or more tenants into tables of a common database image to form a multi tenant database system MTS . The term multi tenant database system can refer to those systems in which various elements of hardware and software of a database system may be shared by one or more customers or tenants. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows of data such as feed items for a potentially much greater number of customers. A database image can include one or more database objects. A relational database management system RDBMS or the equivalent can execute storage and retrieval of information against the database object s .

Application platform can be a framework that allows the applications of system to execute such as the hardware or software infrastructure of the system . In some implementations the application platform enables the creation management and execution of one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

In some implementations the system implements a web based customer relationship management CRM system. For example in some such implementations the system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms renderable web pages and documents and other information to and from user systems and to store to and retrieve from a database system related data objects and Web page content. In some MTS implementations data for multiple tenants may be stored in the same physical database object in tenant database . In some such implementations tenant data is arranged in the storage medium s of tenant database so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. The system also implements applications other than or in addition to a CRM application. For example the system can provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform . The application platform manages the creation and storage of the applications into one or more database objects and the execution of the applications in one or more virtual machines in the process space of the system .

According to some implementations each system is configured to provide web pages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another for example in a server farm located in a single building or campus or they may be distributed at locations remote from one another for example one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to refer to a computing device or system including processing hardware and process space s an associated storage medium such as a memory device or database and in some instances a database application for example OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database objects described herein can be implemented as part of a single database a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and can include a distributed database or storage network and associated processing intelligence.

The network can be or include any network or combination of networks of systems or devices that communicate with one another. For example the network can be or include any one or any combination of a LAN local area network WAN wide area network telephone network wireless network cellular network point to point network star network token ring network hub network or other appropriate configuration. The network can include a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I . The Internet will be used in many of the examples herein. However it should be understood that the networks that the disclosed implementations can use are not so limited although TCP IP is a frequently implemented protocol.

The user systems can communicate with system using TCP IP and at a higher network level other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used each user system can include an HTTP client commonly referred to as a web browser or simply a browser for sending and receiving HTTP signals to and from an HTTP server of the system . Such an HTTP server can be implemented as the sole network interface between the system and the network but other techniques can be used in addition to or instead of these techniques. In some implementations the network interface between the system and the network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a number of servers. In MTS implementations each of the servers can have access to the MTS data however other alternative configurations may be used instead.

The user systems can be implemented as any computing device s or other data processing apparatus or systems usable by users to access the database system . For example any of user systems can be a desktop computer a work station a laptop computer a tablet computer a handheld computing device a mobile cellular phone for example a smartphone or any other Wi Fi enabled device wireless access protocol WAP enabled device or other computing device capable of interfacing directly or indirectly to the Internet or other network. The terms user system and computing device are used interchangeably herein with one another and with the term computer. As described above each user system typically executes an HTTP client for example a web browsing or simply browsing program such as a web browser based on the WebKit platform Microsoft s Internet Explorer browser Apple s Safari Google s Chrome Opera s browser or Mozilla s Firefox browser or the like allowing a user for example a subscriber of on demand services provided by the system of the user system to access process and view information pages and applications available to it from the system over the network .

Each user system also typically includes one or more user input devices such as a keyboard a mouse a trackball a touch pad a touch screen a pen or stylus or the like for interacting with a graphical user interface GUI provided by the browser on a display for example a monitor screen liquid crystal display LCD light emitting diode LED display among other possibilities of the user system in conjunction with pages forms applications and other information provided by the system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above implementations are suitable for use with the Internet although other networks can be used instead of or in addition to the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

The users of user systems may differ in their respective capacities and the capacity of a particular user system can be entirely determined by permissions permission levels for the current user of such user system. For example where a salesperson is using a particular user system to interact with the system that user system can have the capacities allotted to the salesperson. However while an administrator is using that user system to interact with the system that user system can have the capacities allotted to that administrator. Where a hierarchical role model is used users at one permission level can have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users generally will have different capabilities with regard to accessing and modifying application and database information depending on the users respective security or permission levels also referred to as authorizations .

According to some implementations each user system and some or all of its components are operator configurable using applications such as a browser including computer code executed using a central processing unit CPU such as an Intel Pentium processor or the like. Similarly the system and additional instances of an MTS where more than one is present and all of its components can be operator configurable using application s including computer code to run using the processor system which may be implemented to include a CPU which may include an Intel Pentium processor or the like or multiple CPUs.

The system includes tangible computer readable media having non transitory instructions stored thereon in that are executable by or used to program a server or other computing system or collection of such servers or computing systems to perform some of the implementation of processes described herein. For example computer program code can implement instructions for operating and configuring the system to intercommunicate and to process web pages applications and other data and media content as described herein. In some implementations the computer code can be downloadable and stored on a hard disk but the entire program code or portions thereof also can be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disks DVD compact disks CD microdrives and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any other type of computer readable medium or device suitable for storing instructions or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium for example over the Internet or from another server as is well known or transmitted over any other existing network connection as is well known for example extranet VPN LAN etc. using any communication medium and protocols for example TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for the disclosed implementations can be realized in any programming language that can be executed on a server or other computing system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

In the network interface is implemented as a set of HTTP application servers . Each application server also referred to herein as an app server is configured to communicate with tenant database and the tenant data therein as well as system database and the system data therein to serve requests received from the user systems . The tenant data can be divided into individual tenant storage spaces which can be physically or logically arranged or divided. Within each tenant storage space user storage and application metadata can similarly be allocated for each user. For example a copy of a user s most recently used MRU items can be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant can be stored to tenant storage space .

The process space includes system process space individual tenant process spaces and a tenant management process space . The application platform includes an application setup mechanism that supports application developers creation and management of applications. Such applications and others can be saved as metadata into tenant database by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications can be coded using PL SOQL which provides a programming language style interface extension to API . A detailed description of some PL SOQL language implementations is discussed in commonly assigned U.S. Pat. No. 7 730 478 titled METHOD AND SYSTEM FOR ALLOWING ACCESS TO DEVELOPED APPLICATIONS VIA A MULTI TENANT ON DEMAND DATABASE SERVICE by Craig Weissman issued on Jun. 1 2010 and hereby incorporated by reference in its entirety and for all purposes. Invocations to applications can be detected by one or more system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

The system of also includes a user interface UI and an application programming interface API to system resident processes to users or developers at user systems . In some other implementations the environment may not have the same elements as those listed above or may have other elements instead of or in addition to those listed above.

Each application server can be communicably coupled with tenant database and system database for example having access to tenant data and system data respectively via a different network connection. For example one application server can be coupled via the network for example the Internet another application server can be coupled via a direct network link and another application server can be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are examples of typical protocols that can be used for communicating between application servers and the system . However it will be apparent to one skilled in the art that other transport protocols can be used to optimize the system depending on the network interconnections used.

In some implementations each application server is configured to handle requests for any user associated with any organization that is a tenant of the system . Because it can be desirable to be able to add and remove application servers from the server pool at any time and for various reasons in some implementations there is no server affinity for a user or organization to a specific application server . In some such implementations an interface system implementing a load balancing function for example an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one implementation the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in some instances three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner by way of example system can be a multi tenant system in which system handles storage of and access to different objects data and applications across disparate users and organizations.

In one example storage use case one tenant can be a company that employs a sales force where each salesperson uses system to manage aspects of their sales. A user can maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process for example in tenant database . In an example of a MTS arrangement because all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having little more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example when a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates regarding that customer while waiting for the customer to arrive in the lobby.

While each user s data can be stored separately from other users data regardless of the employers of each user some data can be organization wide data shared or accessible by several users or all of the users for a given organization that is a tenant. Thus there can be some data structures managed by system that are allocated at the tenant level while other data structures can be managed at the user level. Because an MTS can support multiple tenants including possible competitors the MTS can have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that can be implemented in the MTS. In addition to user specific data and tenant specific data the system also can maintain system level data usable by multiple tenants or other data. Such system level data can include industry reports news postings and the like that are sharable among tenants.

In some implementations the user systems which also can be client systems communicate with the application servers to request and update system level and tenant level data from the system . Such requests and updates can involve sending one or more queries to tenant database or system database . The system for example an application server in the system can automatically generate one or more SQL statements for example one or more SQL queries designed to access the desired information. System database can generate query plans to access the requested data from the database. The term query plan generally refers to one or more operations used to access information in a database system.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined or customizable categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to some implementations. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or element of a table can contain an instance of data for each category defined by the fields. For example a CRM database can include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table can describe a purchase order including fields for information such as customer product sale price date etc. In some MTS implementations standard entity tables can be provided for use by all tenants. For CRM database applications such standard entities can include tables for case account contact lead and opportunity data objects each containing pre defined fields. As used herein the term entity also may be used interchangeably with object and table. 

In some MTS implementations tenants are allowed to create and store custom objects or may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. Commonly assigned U.S. Pat. No. 7 779 039 titled CUSTOM ENTITIES AND FIELDS IN A MULTI TENANT DATABASE SYSTEM by Weissman et al. issued on Aug. 17 2010 and hereby incorporated by reference in its entirety and for all purposes teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In some implementations for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

A threat detection system may detect and prevent phishing attacks and other security threats. A user system may receive an email. The user system may send links contained in the email to a threat detection manager. The threat detection manager may check the link with whitelists of known secure websites and blacklists of known phishing websites. The threat detection manager may send a trust indication to the user system when the link is identified in the whitelist. The user system then may display a trusted message when the user moves a cursor over the link.

If not on the whitelist the threat detection manager may check the link with the blacklist of known phishing websites. If the link is identified in the blacklist the threat detection manager sends a block indication to the user system. The user system may replace the link in the email with a warning message identifying the blacklisted link. The warning message may include the option for overriding the warning and selecting the link. The override feature allows the user to respond to legitimate emails but reduces the likelihood of the user inadvertently selecting blacklisted links.

The threat detection manager also may send an ok indication when the link is not located in either the whitelist or blacklist. The user system then may display an ok message when the user moves the cursor over the link.

Users of a particular enterprise may report suspicious emails and or links to the threat detection manager. The security administrator may add links to confirmed safe websites to the whitelist. A security administrator for the enterprise also may add links for confirmed phishing websites to the blacklist Thus the threat detection system may use crowd sourcing for detecting enterprise centric phishing attacks.

The threat detection system may identify threats at the time the user opens the email. This enables the threat detection system to identify and remove links after phishing emails arrive in user mailboxes but prior to displaying the email to the user. This enables the threat detection system to provide asynchronous up to the minute real time protection for recently detected phishing attacks.

Threats may be referred to below as phishing attacks but include any virus malware or any electronic communication that tries to acquire sensitive information such as usernames passwords and credit card details by masquerading as a trustworthy entity in an electronic communication that attempts to damage or disable a computer system and or that threatens the security of a user enterprise and or computer system.

The description below also refers generally to links. A link may include a hostname IP address email address or any other name or address. In one example links may include universal resource locators URLs but also may include any other addressing or communication scheme or protocol for connecting communicating and or accessing different network devices locations and or content.

A server may contain third party blacklists of links associated with phishing attacks. For example companies such as Google Norton Mcafee Trendmicro etc. may operate servers that identify links associated with viruses malware phishing and any other types of security threat.

User system A as described above may operate a web browser that accesses an online email service . For example a Google Chrome web browser or a Mozilla Firefox web browser may access a Gmail or Thunderbird email service . Of course user system A may operate any type of browser that accesses any type of email service . For example email service may operate on a private enterprise server such as Microsoft Outlook .

A second user system B may connect to server via a web browser and access a user interface operated by threat detection manager . User systems A and B communicate with server via network as described above.

An extension operating within browser may operate as a security agent . A user may select or open an electronic mail message email within email service . Security agent may send a link within email to threat detection manager in response to a user selecting or opening email .

Threat detection manager may compare link with entries in whitelists and blacklists and send a trust level indicator back to security agent based on the results of the comparison. For example threat detection manager may send a trust indicator back to security agent when link is identified in whitelists . In response to trust indicator security agent may display a message next to link indicating the link is trusted.

Threat detection manager may identify link in blacklist and send an associated block indicator back to security agent . In response to block indicator security agent may remove link from email .

Threat detection manager may send an ok indicator back to security agent when link is not identified in whitelists or blacklists . In response to ok indicator security agent may display a message next to link indicating the link is ok and not listed in either blacklists or whitelists . Threat detection manager also may send messages with threat indicators that indicate how link was resolved with whitelists and blacklists and the associated reason link was assigned a particular threat indicator .

In the example of threat detection manager identifies link in blacklist and sends a block indicator to security agent . In response to block indicator security agent modifies the document object model DOM for email by replacing link with an image showing the name associated with link crossed out. Thus the user opening email is prevented from connecting to the host website or web page associated with link .

Threat detection system allows users to report suspicious emails or suspicious links to threat detection manager . For example security agent may display a window see for reporting email and or link . Security agent sends the identified email and or link to threat detection manager . A security administrator operating user system B may open user interface to access threat detection manager and display a threat report . Threat report may identify the hostname or IP address for the link and or the sender email address for email .

The security administrator may determine a threat level for the hostname and or IP address in threat report . For example the security administrator may identify intermediate and final destinations associated with hostname and or IP address . The security administrator then may perform a manual search or use known phishing malware or virus attack software to identify threat status for the intermediate and final hostnames and IP addresses .

Based on the analysis the security administrator may select an icon for assigning hostname or IP address to blacklists or select an icon for assigning hostname or IP address to whitelists . User interface then sends an update message to threat detection manager assigning hostname or IP address to blacklists or whitelists . Otherwise hostname or IP address remains unaffiliated with blacklists and whitelists .

Threat detection manager may use crowd sourcing to create enterprise centric blacklists and whitelists . For example a company may load security agent on the web browsers of all company employees. All security agents may send threat reports to the same threat detection manager . The security administrator monitoring user interface is immediately notified of any suspicious emails and associated links directed to any company employee. The security administrator may immediately add links confirmed as phish attacks to the company specific blacklist or immediately add confirmed non threats to a company specific whitelist . Thus threat detection system may identify and block enterprise related threats more accurately and more quickly than global malware related blacklists.

As mentioned above threat detection manager also may correlate enterprise related blacklists with third party blacklists . For example threat detection manager may add third party blacklist to enterprise specific blacklists . Threat detection system may asynchronously update blacklists via dashboard independently of any updates in third party blacklist .

A user may question the legitimacy of email A. As described above browser includes an extension that operates as security agent . Security agent displays window in response to selecting an icon not shown displayed in browser . In another example security agent may display window in response to the user right clicking a mouse button hovering a cursor over email address or hovering the cursor over link . Of course other schemes could also be used for displaying window .

Window queries the user to report a suspect email by selecting icon and or report a suspect URL by entering the link into a field . In response to selecting icon security agent sends email A email address and or any links within email A to threat detection manager . A user may right click on any link such as link to enter the associated URL into field . Security agent sends the URL to threat detection manager in response to selecting icon .

Dashboard page A may include a field for entering a hostname or IP address that may already exist in the threat detection system or that the security administrator would like to add to the threat detection system. For example the administrator may enter or identify a hostname or IP address currently in a blacklist or in a whitelist via field . A field may display any notes assigned to the hostname or IP address entered into field .

Boxes identify different phishing statistics. Box A may identify the number of active phishing attacks. For example the threat detection system may count the number of times a blacklisted link from a same host or IP address is received by users in the enterprise network. The threat detection manager may identify an active attack for any link identified as blacklisted and blocked over some configurable threshold number of times within a configurable time period. For example a link may be identified as an active attack if identified and blocked more than 25 times within 30 minutes. Of course this is just one example set of thresholds that may be configured for identifying active attacks in block A.

Box B may identify the total number of links caught and blocked over a particular time period. For example threat detection manager may identify in box B the total number of all blacklists links removed from emails over the last 24 hours. In another example the security administrator may enter a specific blacklisted link into field and threat detect manager may indicate in block B the number of times that specific link was detected and removed from emails.

Box C may identify the total number of suspected emails reported by users. For example threat detection manager may increment the number in box C each time a user reports a suspected phishing email. In another example the security administrator may enter a specific hostname IP address or email address into field and threat detection manager may count the number of reports that included the hostname IP address or email address in field .

Box D may identify the number of whitelist requests. In another example threat detection manager may increment the number in box D whenever a user sends a whitelist request identifying the link entered into field .

Blacklist page B may include different tabs for different blacklists. For example a first tab A may be associated with a hostname blacklist a second tab B may be associated with an IP address blacklist a third tab C may be associated with a phish tank blacklist and a fourth tab D may be associated with an email sender blacklist. The security administrator selects tab A to view and or enter hostnames into a hostname blacklist A.

The security administrator enters the hostname www.irs.gov into field and may enter comments into field . Host name www.irs.gov is then added as entry of hostname blacklist A. Selecting tab B displays another page for displaying and or entering blacklisted IP addresses. Tab C is selected for displaying a list of all phishing links in all of the blacklists Selecting tab D displays a page for displaying and or entering blacklisted email sender addresses.

Selecting whitelists from page list displays a page similar to blacklist page B but that displays and enters hostnames IP address and sender email addresses into different whitelists. Selecting caught from page list displays a report identifying the blacklisted links that have been blocked. Selecting attacks from page list displays the host names or addresses for the different phishing attacks and may display a list of the top 10 phishing attacks sent to the most users.

Referring to in response to selecting or opening email B in web browser security agent sends link A to threat detection manager . Threat detection manger identifies link A in blacklist and sends a block indicator back to security agent . Based on the block indicator security agent modifies the DOM of email B by replacing link A with an image showing the name associated with link A crossed out.

Threat detection manager may send an additional warning message A with the block indicator. In another example security agent may store a set of messages that are associated with different security threat levels and display one of the messages based on the type of threat indicator received back form threat detection manager .

Security agent displays warning message A in a popup window when email A is opened or in response to the user moving a cursor over image . Warning message A may include text indicating why link A was blocked. For example warning message A may indicate that link A was identified in a blacklist Security agent may display warning message A with a first red background to indicate a highest threat level.

Warning message A also may include link B same hostname or IP address as link A and allow the user to ignore the warning. Relocating link B in warning message A provides a notice from inside of a separate warning notification. The user may be less likely to unintentionally select a link located within warning message A. Providing link B in warning message A enables the user to carefully override a link removal that was mistakenly blacklisted.

Warning message A also may include a link B for the user to report email B to threat detection manager . Link A may have been mistakenly blacklisted. The user may select a link C to connect to threat detection manager and request reassignment of link A to a whitelist.

The user may open another email in web browser . Security agent sends links A and B from email to threat detection manager . In this example threat detection manager identifies link B in a whitelist and does not locate link A in any blacklist or whitelist.

Threat detection manager sends a first threat indicator back to security agent identifying link A as ok and sends a second threat indicator back to security agent identifying link B as trusted. Security agent modifies the DOM for email by attaching a message A to link A indicating link A was not found in any blacklists Security agent may display message A with a second background color such as blue. Message A also may include a link B for reporting link A to threat detection manager .

Security agent may attach a message to link B identifying link B as trusted. Security agent may display message A with a third background color such as green. Web browser may display message A or in response to a cursor moving over links A or B respectively.

In one example threat detection manager may automatically add items to blacklists . For example threat detection manager may automatically add a link to the blacklist after a threshold number of users such as 10 users report a same link as a possible threat. After the 10 reported threats threat detection manager may automatically start removing the link from user email messages.

Threat detection manager also may automatically generate a sub warning threat indicator that does not block the suspected link. For example threat detection manager may generate a sub warning threat indicator for links reported by a second lower threshold number of users such as 5 users. The sub warning threat indicator causes security agent to display a sub warning message with the link identifying the number of users reporting the link as a potential threat. Security agent may display the sub warning message in a fourth background color different from the background colors used in warning message A ok message A and trusted message .

In operation the threat detection manager receives a link from a user. For example a security agent on a web browser may send a link from an email selected or opened by the user. In operation threat detection manager compares the hostname IP address email address URL or any other identifier associated with the link with the whitelists.

The threat detection manager in operation sends a trust indicator back to the security agent if the link is whitelisted. The threat detection manager may assign a trusted indicator to links with whitelisted intermediate and final hosts or that have a whitelisted final host with no intermediate hosts.

If the link is not whitelisted the threat detection manager in operation compares the received link with any blacklists After checking the blacklist of explicit phishing links the threat detection manager may check external third party phishing warning databases.

If the link is blacklisted in either the explicit blacklist or the external third party blacklist the threat detection manager in operation sends a block indicator back to the security agent on the web browser. In operation the threat detection manager may update a database that tracks the number of phishing attacks and catches by adding an additional phishing catch and incrementing the total number of times the link has been caught over some specified time period.

As mentioned above the threat detection system may blacklist any link with a non secure final and or intermediate link. For example some links may address a non blacklisted redirection site such as Bit.ly . However the non blacklisted redirection website may forward the link to a final phishing website. In another example the intermediate website may be a phishing site and the final destination may be a secure website. The threat detection system may blacklist any link associated with an intermediate or final phishing host or IP address.

Threat detection manager also may resolve a hostname for a URL to an IP address and check the IP address against blacklisted IP addresses. For example a link may comprise the URL http evil.com and may resolve to the IP address 123.123.123.123. Threat detection manager may have previously determined IP address 123.123.123.123 points to a known phishing server and added the IP address to a blacklist.

The evil.com domain may be a new domain not seen before by threat detection manager . Threat detection manager may evaluate http evil.com and determine http evil.com resolves to 123.123.123.123. Even though the URL is not currently blacklisted the IP address associated with the URL is blacklisted. Accordingly threat detection manager may block the http evil.com link and add the link to a blacklist.

In operation the detection manager does not locate the link in any whitelist or blacklist and sends an ok indicator back to the security agent. After operations and the threat detection manager returns to operation and continues monitoring for any new updates to the blacklists and whitelists.

The security administrator may add known secure IP address ranges to the whitelists. For example the security administrator may add a set of IP addresses associated with an enterprise to the whitelists. The security administrator also may blacklist specific URL locations but whitelist the URL host. For example the security administrator may whitelist a link to known public hosting site but blacklist a URL to a specific directory web page or document located on the public hosting site.

The threat detection system does not need to identify and remove phishing threats at the time the emails arrive at the enterprise network. Sending links in response to users opening email messages allow the threat detection system to identify phishing attacks even after emails arrive in user inboxes based on asynchronous up to the minute blacklist updates. However in another example the security agent may detect new emails received in a user inbox and send the associated links to the threat detection manager prior to the user opening the emails.

In operation the security agent receives threat level indicators back from the threat detection manager. For example the threat detection manager may send block indications for links identified in a blacklist send trust indications for links identified in a whitelist and send ok indications for links not identified in any blacklist or whitelist.

In operation the security agent receives a trusted indication for the link. In operation the security agent attaches a trusted message to the link that the web browser displays when the user moves a cursor over the link. The trusted message notifies the user that the link was identified in a whitelist.

In operation the security agent receives a block indication for a link. In operation the security agent replaces the link with a warning notice. For example the security agent may modify hypertext markup language HTML code in the web page DOM that removes the link and displays a warning message. The security agent also may replace the link with an image of the link name crossed out

The warning notice notifies the user that the link was identified in a blacklist. As explained above the warning notice also may include the link and allow the user to override the warning and connect to the linked host computer.

In operation the security agent receives an ok identifier for the link. The security agent attaches an ok message to the link that the web browser displays when the user moves a cursor over the link. The ok message notifies the user that the link was not identified in any whitelist or blacklist.

Threat detection system may provide substantially real time automatic monitoring and editing for phishing attacks. Users no longer need to view security posts and remember names of dangerous links. Further the user may report suspicious links with a single mouse click as shown in . The threat detection system may operate within a specific enterprise where a security administrator may quickly create and update company centric blacklists and whitelists in response to user initiated phishing reports.

It should also be noted that the security agent may identify documents other than emails. For example the security agent may detect links in any web page post and or other document opened on the web browser. The security agent also may search through files or any other documents attached or linked to an email or web page and block blacklisted links within the files or documents. The threat detection system also may identify and block entire emails based on the associated source IP address.

The specific details of the specific aspects of implementations disclosed herein may be combined in any suitable manner without departing from the spirit and scope of the disclosed implementations. However other implementations may be directed to specific implementations relating to each individual aspect or specific combinations of these individual aspects. Additionally while the disclosed examples are often described herein with reference to an implementation in which an on demand database service environment is implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the present implementations are not limited to multi tenant databases or deployment on application servers. Implementations may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the implementations claimed.

It should also be understood that some of the disclosed implementations can be embodied in the form of various types of hardware software firmware or combinations thereof including in the form of control logic and using such hardware or software in a modular or integrated manner. Other ways or methods are possible using hardware and a combination of hardware and software. Additionally any of the software components or functions described in this application can be implemented as software code to be executed by one or more processors using any suitable computer language such as for example Java C or Perl using for example existing or object oriented techniques. The software code can be stored as a computer or processor executable instructions or commands on a physical non transitory computer readable medium. Examples of suitable media include random access memory RAM read only memory ROM magnetic media such as a hard drive or a floppy disk or an optical medium such as a compact disk CD or DVD digital versatile disk flash memory and the like or any combination of such storage or transmission devices. Computer readable media encoded with the software program code may be packaged with a compatible device or provided separately from other devices for example via Internet download . Any such computer readable medium may reside on or within a single computing device or an entire computer system and may be among other computer readable media within a system or network. A computer system or other computing device may include a monitor printer or other suitable display for providing any of the results mentioned herein to a user.

While some implementations have been described herein it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of the present application should not be limited by any of the implementations described herein but should be defined only in accordance with the following and later submitted claims and their equivalents.

