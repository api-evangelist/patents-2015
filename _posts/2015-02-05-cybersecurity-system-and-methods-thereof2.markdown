---

title: Cyber-security system and methods thereof
abstract: A system and method for adaptively securing a protected entity against cyber-threats are presented. The method includes selecting at least one security application configured to handle a cyber-threat, wherein the at least one security application executes a plurality of security services assigned to the at least one security application; determining at least one workflow rule respective of the at least one security application; receiving a plurality of signals from the plurality of security services, wherein each signal of the plurality of signals is generated with respect to a potential cyber-threat; generating at least one security event respective of the plurality of received signals; checking determining if the at least one security event satisfies the at least one workflow rule; and upon determining that the at least one security event satisfies the workflow rule, generating at least one action with respect to the potential cyber-threat.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09565204&OS=09565204&RS=09565204
owner: Empow Cyber Security Ltd.
number: 09565204
owner_city: Ramat Gan
owner_country: IL
publication_date: 20150205
---
This application claims the benefit of U.S. Provisional Application No. 62 085 844 filed on Dec. 1 2014 and U.S. Provisional Application No. 62 026 393 filed on Jul. 18 2014 the contents of which are hereby incorporated by reference.

The present disclosure generally relates to cyber security systems and more particularly to real time customizable and programmable cyber security systems for threat mitigation.

The Internet provides access to various pieces of information applications services and vehicles for publishing information. Today the Internet has significantly changed the way we access and use information. The Internet allows users to quickly and easily access services such as banking e commerce e trading and other services people access in their daily lives.

In order to access such services a user often shares his personal information such as name contact details highly confidential information such as usernames passwords bank account number credit card details and the like with service providers. Similarly confidential information of companies such as trade secrets financial details employee details company strategies and the like are also stored on servers that are connected to the Internet. There is a threat that such confidential data may be accessed by malware viruses spyware key loggers and various other methods of unauthorized access including using legitimate tools e.g. a remote desktop and remote processes services that have been compromised to access or to install malware software that will allow access such information. Such unauthorized access poses great danger to unwary computer users.

Recently the frequency and complexity level of attacks has increased with respect to attacks performed against all organizations including but not limited to cloud providers enterprise organizations and network carriers. Some complex attacks known as multi vector attack campaigns utilize different types of attack techniques and target network and application resources in order to identify at least one weakness that can be exploited to achieve the attack s goals thereby compromising the entire security framework of the network.

Another type of complex attack is an advanced persistent threat APT . An APT is an attack in which an unauthorized hacker gains access to a network and remains undetected for a long period of time. The intention of an APT attack is usually to steal data rather than to cause direct damage to the network or organization. APT attacks typically target organizations in sectors with high value information such as the national defense manufacturing retail and financial industries.

These attacks are frequently successful because modern security solutions are not sufficiently agile and adaptive with respect to detection investigation and mitigation of resources needed to meet such evolving threats. Current security solutions cannot easily and promptly adapt to detect and mitigate new attack behavior or attacks that change their behavior in a significant manner. In addition current security solutions cannot easily and promptly adapt to new network technologies and topologies implemented by the entities to be protected.

For example in modern computing platforms such virtualization and software defined networks SDN face real challenges to security systems. Such platforms host an enormous number of tenants with virtual distributed and dynamic resources. Each tenant can be removed or created in minutes and can be transformed into a malicious resource thereby attacking its own neighbors tenants or remote network entities.

Specifically currently available solutions suffer from drawbacks including for example programmability capabilities automatic mitigation and collaboration. For example a security defense system that is not programmable becomes ineffective in a matter of a few days or even a few hours because such security systems fail to resist or adapt to any new attack behavior in time.

Security solutions and in particular solutions for APT attacks do not provide reliable automatic mitigation capabilities. Typically APT security solutions are not designed for both detection and automatic mitigation. In addition system administrators do not trust currently available APT security solutions due to the high level of false positive alerts generated by such systems. As a result of such false positive alerts system administrators must often manually perform mitigation actions rather than permit automatic mitigation which usually prolongs the time to mitigate attacks.

Moreover current security solutions do not share attack information and detection investigation and mitigation solutions between different companies due to the risk of revealing confidential data of a protected entity. This lack of communication limits the ability to adapt one security system using information related to attack behavior detected by another system in another organization or same organization which would permit the security systems to promptly react to new threats by allowing a security system that has been subject to a new threat and successfully addressed the threat to provide information about the security functions or applications that were used.

It would therefore be advantageous to provide a solution that would overcome the deficiencies of the prior art cyber security systems by permitting readily adaptable and customizable cyber security system. It would be further advantageous if such a solution would automatically detect and mitigate incoming threats.

A summary of several example aspects of the disclosure follows. This summary is provided for the convenience of the reader to provide a basic understanding of such embodiments and does not wholly define the breadth of the disclosure. This summary is not an extensive overview of all contemplated embodiments and is intended to neither identify key or critical elements of all aspects nor to delineate the scope of any or all aspects. Its sole purpose is to present some concepts of one or more embodiments in a simplified form as a prelude to the more detailed description that is presented later. For convenience the term some embodiments may be used herein to refer to a single embodiment or multiple embodiments of the disclosure.

Certain embodiments disclosed herein include a method for adaptively securing a protected entity against cyber threats. The method comprises selecting at least one security application configured to handle a cyber threat wherein the at least one security application executes a plurality of security services assigned to the at least one security application determining at least one workflow rule respective of the at least one security application receiving a plurality of signals from the plurality of security services wherein each signal of the plurality of signals is generated with respect to a potential cyber threat generating at least one security event respective of the plurality of received signals checking determining if the at least one security event satisfies the at least one workflow rule and upon determining that the at least one security event satisfies the workflow rule generating at least one action with respect to the potential cyber threat

Certain embodiments disclosed herein also include a method for adaptively securing a protected entity against cyber threats. The method comprises selecting at least one security application configured to handle a cyber threat wherein the at least one security application executes a plurality of security services assigned to the selected at least one security application and wherein each security service of the plurality of security services is configured to execute at least one engine receiving a plurality of signals related to the protected entity analyzing the plurality of received signals to determine if the selected at least one security application is optimally configured to handle a potential cyber threat that threatens the protected entity and upon determining that the at least one security application is not optimally configured to handle the potential cyber threat reprogramming the selected at least one security application.

Certain embodiments disclosed herein also include a system for adaptively securing a protected entity against cyber threats. The system comprises a processor and a memory the memory containing instructions that when executed by the processor configure the system to select at least one security application configured to handle a cyber threat wherein the at least one security application executes a plurality of security services assigned to the at least one security application determine at least one workflow rule respective of the at least one security application receive a plurality of signals from the plurality of security services wherein each signal of the plurality of signals is generated with respect to a potential cyber threat generate at least one security event respective of the plurality of received signals determine if the at least one security event satisfies the at least one workflow rule and upon determining that the at least one security event satisfies the workflow rule generate at least one action with respect to the potential cyber threat.

Certain embodiments disclosed herein also include a system for adaptively securing a protected entity against cyber threats comprising a processor and a memory the memory containing instructions that when executed by the processor configure the system to select at least one security application configured to handle a cyber threat wherein the at least one security application executes a plurality of security services assigned to the selected at least one security application and wherein each security service of the plurality of security services is configured to execute at least one engine receive a plurality of signals related to the protected entity analyzing the plurality of received signals to determine if the selected at least one security application is optimally configured to handle a potential cyber threat that threatens the protected entity and upon determining that the at least one security application is not optimally configured to handle the potential cyber threat reprogram the selected at least one security application.

It is important to note that the embodiments disclosed herein are only examples of the many advantageous uses of the innovative teachings herein. In general statements made in the specification of the present application do not necessarily limit any of the various claimed embodiments. Moreover some statements may apply to some inventive features but not to others. In general unless otherwise indicated singular elements may be in plural and vice versa with no loss of generality. In the drawings like numerals refer to like parts through several views.

The various disclosed embodiments include cyber security systems and methods thereof. The disclosed embodiments are designed to secure protected entities. A protected entity may include for example a L2 3 network element a server application e.g. Web Mail FTP Voice and Video conferencing database ERP and so on middle box devices e.g. firewalls load balancers NAT proxies devices etc. SDN controllers e.g. OpenFlow controllers and virtual overlay network controllers and personal computing devices e.g. PCs laptops tablet computers smartphones wearable computing devices a smart TV and other devices with internet connectivity also known as IoT .

In some configurations the protected entity may be deployed or otherwise accessed through various computing platforms. As noted above computing platforms may include but are not limited to virtualized networks and software defined networks SDN . The disclosed cyber security system is configured to detect and mitigate multi vector attack campaigns that carry advanced persistent threat APT attacks web injections attacks phishing related threats misuse of applications and server resources denial of service DoS and distributed DoS DDoS attacks business logic attacks violations of access policy and so on. The APTs include but are not limited to malware command and control and malware spreading. The business logic type of attacks include but are not limited to network intelligence gathering such as network scans application scans and web scraping types of attacks. The disclosed cyber security system is designed to achieve comprehensive protection by providing a programmable customizable and adaptive architecture for responding to cyber threats.

In an embodiment the disclosed cyber security system is arranged as a layered model allowing the system to adapt to changes in the protected entity and to ongoing attack campaigns. In one embodiment the cyber security system provides the ability to create define or program new security applications to modify the functionality of existing applications and to easily correlate and create workflows between multiple applications. A security application defines how to detect and mitigate a threat to the protected entity which specific resources should be utilized for the protection where the protection should take place and so on. In an embodiment a security application can be defined using a set of security services discussed in more detail below.

The security applications and services can be shared or collaborated across different cyber security systems of the same or different companies. In an embodiment security applications can be saved in a central repository thereby allowing system administrators to import applications to their systems or to export applications that have been developed. It should be noted that a plurality of security applications can be utilized to detect and mitigate an on going attack campaign.

An SDN can be implemented in wide area networks WANs local area networks LANs the Internet metropolitan area networks MANs ISP backbones datacenters and the like. Each network element in the SDN may be a router a switch a bridge a load balancer a DPI device and so on as well as any virtual instantiations thereof. Typically elements of the SDN include a central SDN controller and a plurality of network elements . In certain implementations the central SDN controller communicates with the network elements using an OpenFlow protocol which provides a network abstraction layer for such communication a Netconf protocol which provides mechanisms to install manipulate and delete the configuration of network devices and so on. In an exemplary configuration the network may be a hybrid network in which a SDN is a sub network of a conventional network in which its elements cannot be programmed by a central SDN controller.

In one embodiment the security system interfaces with the network through the central SDN controller . In another embodiment the functionality of the cyber security system can be integrated in the central SDN controller . Alternatively the functionality of the cyber security system operates directly with the network elements in the data plane or it can be a mix of the above . This allows implementing security functions in various locations in the network SDN Legacy non SDN networks or hybrid networks to protect the protected entity .

In an embodiment security functions are programmed by the cyber security system to perform detection investigation and mitigation functions labeled as f f and f respectively in . The functions are executed during different phases of the operation of the cyber security system i.e. detection investigation and mitigation phases and independently programmed by the cyber security system . It should be noted that some or all the functions f f and f can be implemented or otherwise performed in the network .

In an exemplary implementation the cyber security system includes a security stack module and a network interface module . The security stack module is configured to control and execute the various phases to protect the protected entity . Specifically the security stack module is configured to create control program and execute the security functions f f and f through a plurality of security applications or apps. The operation of the security stack module is discussed in greater detail herein below with respect to .

The network interface module provides an interface layer of the cyber security system with the central SDN controller to allow commutation with SDN based network elements . In another embodiment the network interface module also communicates with legacy network elements in the network . Non limiting examples for communication drivers that allow for configuration control and monitoring of legacy network elements include but are not limited to border gateway protocol BGP flow specifications NetConf command line interfaces CLIs NetFlow middle box devices drivers e.g. L4 L7 drivers DPI device drivers end point device drivers mobile host based security applications server applications and so on.

Specifically the security application unit includes the security applications apps . Each security application represents a different type of security protection or function including for example APT detection and mitigation low and slow attacks protection reputation security intelligence web page scraping detection mitigation and so on. The modules or functions interfacing with a security application provide the required services allowing the creation or otherwise updating of a security application according to evolving security needs.

In an embodiment the security application unit is preconfigured with a set of security applications . Additional security applications can be added and removed from the security application unit as needed. In an embodiment all security applications hosted in the security application unit implement pre defined APIs in order to efficiently communicate with the security services .

The security services unit includes different types of security services . Each security service is designed to host multiple security decision engines and to serve one or more security applications . The security services are also designed to provide efficient control over security functions f f and f in the network data plane.

Each security service includes programmable security decision engine s . The system can use a set of pre defined engines import engines and or create a new security decision engine and share export an engine. The creation and modification of such engines can be performed through a programming language. The engines and therefore the security services can allow the cyber security system to adapt to new threats new attack behaviors unknown behaviors or attacks that utilize new evasion techniques.

Following are exemplary and non limited security services that can be maintained and executed by the security services unit . A first type of security service provides programmable anomaly detection of network activities toward the network elements e.g. toward routers switches misuse of bandwidth resources and so on .

Another type of security service provides programmable anomaly detection of network activities toward the server applications e.g. Web mail FTP VoIP on so on . Another type of security service provides programmable detection of users anomalous activities.

Another type of security service allows for managing and analyzing of multiple types of reputation sources third party intelligence security sources . The service allows creation of a self generated reputation database that can become a reputation source for other security applications and for third party security systems. The reputation database maintains reputations of sources. Such reputations may be used to identify third party security applications that are less likely to contain threats than other applications.

Another type of security service allows programming advanced challenge response actions that validate the legitimacy of users applications. Yet another type of security service allows control for multiple types of sandbox functions in the network mixing and matching the best functions for each task in order to analyze content such as web objects mails attachments executable files and so on and to identify anomalous code behavior. This type of service also allows creation and modification of sandbox analysis rules for analysis optimization.

Yet another type of security service generates real time RT attack or anomaly fingerprints. These real time attack fingerprints represent network traffic patterns of attacks such as user based attacks e.g. malware generated network traffic activities server based attacks e.g. web scraping network activities brute force network activities etc. and network based attacks e.g. network Distributed Denial of Service DDoS attacks network activities . These real time attack fingerprints can be used for real time mitigation of threats as well as for reputation and forensic analysis.

Yet another type of security service allows for management of multiple types of attack signatures databases DBs for example third party intrusion attack signature databases integration and or injection of the relevant attack signature into data plane DPI functions and monitoring of the results in a way that can be managed by the security application or by other security services.

Yet another type of security service allows mapping a source IP address to a network user identity. This service may be communicatively connected to the north bound interface in order to query the information from third party identity management systems.

It should be noted that programmability of the security stack module as enabled by the architecture of the system allows a user to select different types of security services thereby providing a mix and match capability. Specifically this capability is achieved by the data plane unit and a network interface module which provides an abstraction layer for all underlining data plane functions in the network such as routers switches DPI devices sandbox servers challenge response servers and so on .

Information that is needed for operation of the security services may be retrieved from the data plane unit and or from the north bound interface . It should be noted that the security services in the unit also communicate and interface with the security applications unit the security applications unit controls and manages the security services in the security services unit .

It should be further noted that the security services listed above are merely examples and other services can be utilized in the cyber security system according to the embodiments disclosed herein. In various non limiting embodiments a programming language is provided in order to allow users to create and modify security applications and to create and modify the engines contained in each security service as per business needs.

The data plane unit provides central management of the data plane resources such as routers switches middle box devices and so on. In an embodiment the data plane unit allows the security services to retrieve and store the required network and application information from the data plane resources as well as to enforce security network control actions. Various functions provided by the data plane unit include topology discovery traffic monitoring data collection traffic redirection traffic distribution L2 L3 load balancing for scaling out resources traffic copy and so on.

Topology discovery involves interacting with the data plane network elements SDN controllers and orchestration systems in order to retrieve network topology information. This function is important for the topology awareness that is needed by other data plane s functions as well as security services and applications.

The redirection and scale functions are designed to manage all network traffic redirection functions which include but are not limited to traffic redirection smart traffic copying traffic distribution and so on.

The data collection may involve collecting statistics data from the probes and storing such statistics. Statistics collection may include but is not limited to network based statistics from network elements application based network statistics from DPI resources including middle boxes and servers and user based statistics from network DPI middle boxes and end point resources. The monitor and collector services normalize the statistical information into a format that can be analyzed by the security services in the security services unit .

The data plane unit further provides the following functions management of quality of service QoS actions in the network elements and a set of mitigation functions. The mitigation functions include basic access control list ACL services which are layer 2 to layer 4 access control list services that manage the distributed rules throughout the network elements. Software defined networks as well as legacy network elements and hybrid networks may be supported by this service.

Advanced ACL functions possess similar characteristics to basic ACL functions but can define more granular access rules including application parameters L7 . Specifically an ACL function can use the generated RT fingerprints from a real time fingerprint generation service discussed before as a blocking rule. The ACL function typically operates with DPI network elements for enforcing the application level ACL rules. Service rate limits manage the QoS rules in the data plane device. Black hole route function provides an extension of the redirection data plane services that manage redirection of users into a black hole. Typically black holes are network locations where incoming or outgoing traffic is silently discarded or dropped without informing the source that the data did not reach its intended recipient .

In an embodiment the data plane services allow both real time detection and near real time detection. Real time detection of attacks is facilitated by feeding the statistics directly from the data plane collectors in real time to the security services unit without storing the raw stats i.e. storing only the result in the security services unit . In general the data plane unit provides all raw information that is required by the security services and controls the network via decisions made by the security services and security applications .

In some exemplary implementations certain functions provided by the data plane unit can be implemented in the central SDN controller . Examples for such functions may include but are not limited to redirection monitoring and data collection.

The north bound interface interfaces between the security stack module and one or more external systems not shown . The external systems may include for example third party security analytics systems security intelligence feeds security portals datacenter orchestration control systems identity management systems or any other system that can provide information to the security stack module . This enables a wider context based security decision making processes. In an embodiment the interfaces may include standard interfaces such as CLI REST APIs Web user interface as well as drivers that are already programmed for control configuration and or monitoring of specific third party systems and so on. The north bound interface also interfaces with network interface module .

In an exemplary and non limiting embodiment the security services may include but are not limited to a network anomaly security service a user application anomaly security service a sandbox security service a reputation security service a user identity security service attack signatures security service a challenge response security service a real time fingerprint generation security service an anti virus AV security service and a Web application WAF security service .

The network anomaly security service is a near real time service that is programmed to analyze user based network behavior. In an embodiment the network anomaly security service includes a user profile data structure and a set of decision engines programmed to continuously generate user based scores of anomaly SoA . A SoA is a security signal that can be correlated by a security application . A high SoA reflects a user network behavior anomaly that characterizes different types of network based attacks such as network pre attack probes scanning activities intelligence gathering malware L3 L4 network level propagation activities low and slow misuse of TCP stack resource attacks abnormal user communication channels and so on. In an embodiment any detection performed by the service is performed in a near real time. To this end the network anomaly security service is programmable to generate a complex event processing design model that does not store long term user data.

The user application anomaly security service is programmed to continuously learn the network and application connections activities of a user or a group of users . In an embodiment the service implements one long term e.g. at least 12 weeks of adaptive baseline per traffic parameter. The user profile data structure of this service aggregates L3 L7 parameters as well as application metadata and continuously generates base lines for each parameter or for multiple parameter function such as traffic ratio including 24 by 7 24 7 differentiated baselines i.e. storing base line per time and day in the week.

The user application anomaly service includes a set of security engines programmed by a set of engine rules. A user can modify and program new security engines by defining a new set of engine rules. Each engine is programmed to continuously generate SoA per each user or users group. High SoA reflects unusual user application activity such as communication with drop points communication with command and control servers malware propagation activities application brute force application scans user misbehaving applications e.g. fake applications and so on. A drop point provides internal and external drop points zones that are used as part of advanced information stealth attack campaigns. A detailed block diagram of the user application anomaly service is provided in .

In an embodiment both network and user application anomaly services and can be programmed to generate SoAs that correlate signals from other security services . Such correlation is performed by a set of engine rules discussed in greater detail below.

The sandbox security service is programmed to selectively select the required sandbox function required to analyze content such as web objects mails attachments executable files and the like. The sandbox security service is configured to control and manage the sandbox function resources as well as to analyze their outputs.

The reputation security service is configured to allow managing and analyzing of multiple types of reputation sources e.g. third party intelligence security sources . The reputation security service allows creation of a self generated reputation database that can become a reputation source for other security applications and for third party security systems. For APT threat detection the analysis and management of reputation information is focused on phishing sites bad reputation malware sites drop points and credit card servers. The user identity security service allows mapping source IP address to network user identity. To this end the user identity security service can query an identity management system.

The attack signatures security service is configured to allow management of multiple types of attack signature databases DBs such as third party intrusion signatures databases to integrate inject the relevant attack signatures to data plane DPI functions and to monitor the results in a way that can be managed by the security app or by other security services . The security service also allows management and control of third party data plane devices such as network intrusion detection services NIDS and network intrusion prevention services NIPS in the data plane. In order to allow APT threat detection client vulnerability based attack signatures are managed by the attack signatures security service .

Other types of security services that can be used to detect APT threats include but are not limited to a user challenge response security service that is configured to allow the programming of advanced challenge response actions that validate the legitimacy of users applications and a user real time fingerprint generation security service which is responsible for analyzing detected anomaly parameters e.g. an anomaly that was detected by the user application anomaly service and to create in real time or near real time a fingerprint that characterizes the anomaly. Such fingerprints can be used for real time investigation and mitigation of threats as well as for reputation and forensics analysis.

It should be noted that the security services listed above are merely examples and other services can be utilized in the system according to the embodiments disclosed herein. In various non limiting embodiments a programming language is provided in order to allow users to create and modify security applications and to create and modify the engines contained in each security service on case by case basis.

Furthermore as shown in each unit and as well as the security stack module are communicatively interconnected through a predefined set of interfaces and or APIs collectively labeled as interfaces . As a result the cyber security system is fully programmable and configurable. The interfaces may be designed to be unidirectional bidirectional or one to many bi directional flows of information between the various modules and units.

It should be noted that modules in the cyber security system and the units and in the security stack module are independent. Thus any changes in one unit or module do not necessarily result in any changes to the other modules.

According to an embodiment the cyber security system is designed to activate deactivate and correlate between security applications in unit and security services in the unit in order to define create or otherwise program a robust solution for detecting and mitigating attacks against the protected entity. The sequence for activating deactivating and correlating the various functions and modules of the cyber security system is based on one or more workflow rules. In an embodiment the detection investigation and or mitigation functions are performed in the system based on at least one workflow rule defined to handle a certain threat.

At a top level the correlation model allows each security application to correlate feeds received from other security applications thereby making the entire security decision making process more holistic and context based i.e. correlating decision outputs from different security application types before making a final security decision.

To this end each security application may communicate with other security applications and services by means of a controller managing the correlation of the different feeds.

At a lower level the correlation of feeds occurs between multiple security services. This allows a single security application to make decisions based on multiple services in order to increase the overall decision accuracy.

According to one embodiment the correlation of various feeds is performed by a set of workflow or correlation rules which are processed and applied by a controller of a security application. In an embodiment the set of workflow rules are defined by the user. In another embodiment the controller implements a learning mechanism to define or otherwise select a set of correlation rules to execute. The workflow rules are set respective of the attacks that the cyber security system can handle. That is in an exemplary implementation a set of workflow rules is defined for each different type of threat.

Each some or all of the modules of the cyber security system and the various units of the security stack module may be realized by a processing system. The processing system may comprise or be a component of a larger processing system implemented with one or more processors. The one or more processors may be implemented with any combination of general purpose microprocessors microcontrollers digital signal processors DSPs field programmable gate array FPGAs programmable logic devices PLDs controllers state machines gated logic discrete hardware components dedicated hardware finite state machines or any other suitable entities that can perform calculations or other manipulations of information.

The processing system may also include machine readable media for storing software. Software shall be construed broadly to mean any type of instructions whether referred to as software firmware middleware microcode hardware description language or otherwise. Instructions may include code e.g. in source code format binary code format executable code format or any other suitable format of code . The instructions when executed by the one or more processors cause the processing system to perform the various functions described herein.

The security service includes a user profile module a plurality of user anomaly behavioral engines and a set of normalization functions . The user profile module is configured to store and compute baseline parameters for the user activity over a predefined period of time e.g. between 4 to 12 weeks . The user profile module typically stores baselines of each user traffic parameter as well as baselines of multiple parameters function e.g. ratios of inbound vs. outbound traffic parameters relative portions of application traffic parameter relative frequency and so on .

In an embodiment each profile stored in the user profile module is structured to include two sections classification and characteristics. The classification section includes user traffic classification parameters in a hierarchical structure. Each hierarchy level is defined as a flow path. The characteristics section includes dynamic characteristics of traffic parameters per each classification flow path. The characteristics of a traffic parameter include real time values and baselines of rate variant and rate invariant parameters. As a non limiting example a flow path may define an end to end traffic path between two network entities in different granularity levels. The classification of the flow path may be based on for example a source identity a destination identity a protocol type a layer 4 port an application type a browser type an operating system and the like. The characteristics of the traffic parameters include for example packet per second PPS connections per second CPS a packet size a number of concurrent connections a flow data symmetry upload download ratio a request type e.g. browser type requests vs. API call and so on.

The user anomaly behavior engines are configured to generate based on engine rules and a respective user profile one user based score of anomaly SoA per user. In order to compute a SoA for a user real time and adaptive baselines of a user are retrieved from the user profile module and each parameter therein is normalized by adaptive normalization functions . As noted above each parameter or set of parameters has its own adaptive normalization function . The adaptive normalization functions are tuned by the adapted base lines in a time interval typically one hour . Each adaptive normalization function generates a parameter deviation weight in a format that can be processed by the user anomaly behavior engines . The adaptive normalization functions are also responsible for normalizing signals from other security services

The computed SoAs are provided to a security application which decides based on the programmed workflow and workflow rules an action to be executed. Such an action may include for example initiate an investigation phase remain in detection phase collect more information activate another service or engine and so on.

As shown in the user application anomaly behavior security service can also correlate outputs signals of other security services e.g. services . A typical output will be correlated with outputs from reputation attack fingerprints sandboxes and services discussed in detail above . The outputs of the security services e.g. services may be integer values Boolean values and so on. The values are normalized by the adaptive normalization functions into a format that can be processed by the user application anomaly security service engines.

In an exemplary implementation such as for example an implementation configured to detect APT attacks the user application anomaly security service is configured with a set of user anomaly behavior engines . Each user anomaly behavior engine is programmed to evaluate or detect user behavioral anomalies caused due to APTs activities. These anomalies may include but are not limited to unusual geographic communications e.g. users communicating with new geographical locations unusual user communication with specific destinations unusual content types consumed by a specific application e.g. binary content being consumed by Facebook or Twitter accounts users connections with unusual traffic symmetry e.g. unusual upload or download activities clients that act like servers etc. unusual user application behavior based on bandwidth consumption and or connection consumption repetitive or similar behavior patterns of a user s connection across different destinations users that unusually communicate with the same destination and with a similar connection pattern users unusual time based activity e.g. 24 7 activity based on parameters such as connection bandwidth destinations application type and so on cross users connection behavior similarity unusual periodic client communication in same intervals to the same target and so on.

The user anomaly behavior engines can also be configured to detect or evaluate anomalies related to applications executed on a user device. Such anomalies may include for example unusual DNS traffic e.g. too many DNS query from the same client same size of DNS requests from the same client fast flux behavior e.g. a single domain that is represented by multiple dynamically changed IP addresses non real HTTP traffic over typical HTTP ports unusual usage of web email servers unusual browser types usage and unusual point to point traffic patterns. In an embodiment each user anomaly behavior engine generates a SoA that quantifies the deviation of the user s or user group s behavioral parameters from the norm as determined respective of a profile maintained in the user profile module . The SoA may be in a form of an integer value a Boolean value a level e.g. high low medium or any other form that measure level of activity. The SoA is continuously generated and therefore can be changed over time and used to measure trends of anomaly scores.

In an embodiment the SoA is generated by a set of engine rules that can be processed by each engine in a security service . The engine rules typically include one or more of a set of Boolean operators AND OR NOT etc. a set of weight levels Low Mid High and so on. Following are non limiting examples for engine rules for user abnormal protocol usage 

The BPM is a number of bytes per minute the CPM is the number of L4 connections per minute and the aggregated bytes is the number of bytes of the user s flow in a relatively long period e.g. 1 hour . The user L4 dest port flow defines the scope of flows which the rule s parameters apply to in this case all parameters apply to dest L4 connection flows this flow is defined as an aggregation of all of the user s L4 connections with the same destination port number .

The high and low values are configurable. The parameters Aggregated bytes CPM and BPM are part of the user application profiles. The generated SoA signals are fed to the security application . The security application can translate the generated SoAs into a security event fed to the application s workflow rules. For example a high SoA value may be translated into a security event while a low SoA value may not translate into a security event.

Each top controller sends and receives alerts to and from other security applications . As a non limiting example the top controller may send alerts to and receive alerts from security applications through . Each of the top controllers subscribes to at least one security application . A subscribed security application is a security application that the top controller may send alerts to or receive alerts from.

In the embodiment shown in the top controller is at least subscribed to security applications and . Similarly in the embodiment shown in the top controller is at least subscribed to security applications and and the top controller is at least subscribed to security applications and .

In an embodiment a master top controller e.g. the top controller is configured of activating and deactivating security applications via other top controllers . To this end the master top controller is configured with a set of workflow rules. The master top controller typically subscribes to each security application associated with another top controller .

The various security services not shown in output security signals to the security applications . The security signals may be generated in response to detection of malware activity protocol usage anomaly a drop of point behavior a network scan behavior and so on.

An example for such signals is the SoA described above. An application checks if one and or any combination of the received signals satisfy at least one event rule. The event rules are further correlated to check if they satisfy a workflow rule. Events that satisfy at least one workflow rule will trigger an action such as but not limited to a mitigation action an investigation action and so on. The processes for checking and correlating rules are further described in .

As shown in the exemplary and non limiting a security service generates and outputs security signals . The security service may be any of the security services noted above. The security signals are fed to a security application that checks if one and or any combination of the received security signals satisfy at least one security event rule . The security signals may be generated in response to detection of malware activity protocol usage anomaly a drop point behavior and so on. In an embodiment each signal is generated with a context attribute that maps the signal into the relevant application s and relevant event rule s . The signal context attributes are configured by the security application when the security application is created.

In an embodiment the event rules can be applied to a signal value a duration a frequency and so on. In an embodiment the security signal is in a form of a pulse. The security signal may be generated by a security decision engine not shown programmed to monitor for users that send information into an internal drop zone network entity.

In this embodiment the security event rules define that if the pulse is high high SoA for a duration of more than 25 seconds then a security event is triggered. Following are non limiting example for event rules 

Referring back to the security events are generated respective of the security signals received from the security service and matched to the security rules . In an embodiment each event rule processes the relevant signal and generate a security event accordingly. Processing of security signals includes different types of functions such as a simple signal counter an exponential moving counter a signal period identification function a frequency function and so on.

The security events are correlated by the security application using the workflow rule . As noted above security events that satisfy at least one workflow rule will trigger an action such as but not limited to a mitigation action an investigation action and so on. As an example a workflow rule can correlate between a reputation event and a user anomaly event. In an embodiment the workflow rules can be defined for the different phases of the operation of the system security application i.e. a detection phase an investigation phase and a mitigation phase.

This type of non conditional rule is typically used for events that represent a security function such as but not limited to an ACL a challenge response a RT fingerprint service and the like. Each of the network entities defined in a conditional or non conditional rule may be any physical or logical network entity. Such entities include but are not limited to a range of IP addresses a sub net a host a domain name user name VPNs and the like. An event parameter is either a triggered security event or a specific security function e.g. an investigation or mitigation function such as ACL Challenge response function and so on . The attributes list a set of network attributes that are associated with the generated event e.g. source identity destination identity destination L4 port L7 protocol application etc. . The exp.p parameter sets an expiration period in seconds minutes hours and days. The rule can further defines one or more Boolean operators such as OR AND NOT AND THEN AND THEN which defines a time dependency between events . The action parameter defines at least one action to be performed if the rule is satisfied. The action may be for example a start service a stop service report terminate all services create a group event and so on.

In the above example a new security event that combines two security events the manual pre attack probe event and automatic scanning event is created. The group event represents in this case significant pre attack probes activities. A group event allows for simplification of the language because one can write the next rules with a fewer number of event objects

In the second example the workflow rule activates a mitigation service if one of the users has been detected as having a high SoA that represents a user behavior that sends information to drop point.

At S one or more security applications to be utilized for a protection of the protected entity are selected. The selection may be performed based on the threat to handle a level of service that the owner of the protected entity is subscribed to external protection considerations and so on. The threats that the security applications and hence the cyber security system can handle include but are not limited to APT attacks web injections attacks phishing related threats misuse of applications and servers resources DoS and DDoS attacks business logic attacks and violations of access policy. The APT attacks may include but are not limited to malware command and control and malware spreading. The business logic type of attacks may include but are not limited to network scans application scans and web scrapping types of attacks.

As noted above each security application may be included or otherwise executed a set of security services. Thus one or more security services to be executed by each applications are selected as well. For example if the security services S S and Sare defined respective of a first security application SAand a second security application SA each of these services may be included in a security application to be executed. That is the first security application SAmay include Sand S while the second security application SAmay include services Sand S. In an embodiment one some or all of the security services assigned to an application are executed in the foreground while the rest of are executed in the background. As will be discussed in detail herein services can be always add to a security application during its runtime.

At S at least one workflow rule is set. The workflow rule defines in part an activation sequence for security services or functions. For example an application SA1 a service Scan initially run in the foreground and Scan run in the background. Upon determination that Sis required then execution of Scan be initiated in the foreground. The workflow rule may be set by a user e.g. an administrator or automatically by a user upon selection of the appropriate security application.

At S the security application is activated and executed by the security system. The security application operates to detect investigate and or mitigate threats as discussed in detail above. The activation of action in response to the execution of the security application is determined by the at least one workflow rule.

At S various feeds received during the runtime of the application are received and analyzed. Such feeds may include signals e.g. SoAs generated by security services risk intelligence feeds and the like. The risk intelligence feeds may be provided by a security service configured to detect new threats or from external systems communicatively connected to the cyber security system.

At S it is checked if the analysis of such feeds should trigger the reprogramming of the security application. For example if a new threat has been detected or the attack scale has been increased and the initially assigned security services cannot efficiently handle such cases then security application should be re programmed. Other feeds that may trigger the re programming of the security application include identification that the protection mechanisms provides by the security application do not efficiently operate. If S results with a yes answer application continues with S where a reprogramming process of the security application is performed execution returns to S.

According to an embodiment S includes determining which security services or engines executed therein are required to improve the security application assigning such security services to the security application setting new or modifying existing event rules to correlate signals generated by newly assigned services setting new or modifying existing workflow rules to handle the events generated by the newly added services programming new engines operable within running security service s activating new engines operable within a running security service s and activating the new security services.

In one embodiment the new security services may be pre configured in the security services unit or imported from a different cyber security unit or a repository. The selection of the new security services may be performed by a user or suggested by the system.

In a further embodiment additional security services can be seamlessly assigned and executed by the security application without modifying event rules and or the workflow rules initially set e.g. at S . According to this embodiment any new security service and or its respective engines are assigned with a unique tag. The security application can process the event rules while considering the signals output by the new service and or its respective engines. The signals may be also tagged. For example a SoA signal can be tagged with a unique tag A10232 of the a new security service and evaluated by an event rule 

Each SoA signal with the unique tag will be processed by one of two methods persistent where SoA is processed separately by the event rule or additively where all SoA signals with the same tag are processed together as if they were arrived from the same security service and its respective engines. That is two or more engines using the same tag generate a SoA signal that will be processed by the same event rule. Furthermore when a security service and or its respective engine s with the same tag is added the workflow rule does not need to change as well as the same workflow rule processes resulted events. Thus cyber security system disclosed herein can execute new security services and or engines without updating the event and or workflow rules.

It should be noted that due to the architecture of each security stack module e.g. the module the execution of new services does not require halting the operation of the security application.

In an embodiment the security application and services defined therein can be programmed by a user through a set of graphical interfaces or through a predefined set of templates. This would allow users to provision configure and control the security services in the security stack create new security applications or engines modify existing security applications and engines and more.

As a non limiting example for the operation of the method disclosed herein a security application includes a first security service configured to detect an abnormal activity a second service configured to investigate the abnormal activity and a third security service configured to mitigate an attack. Specifically the first security service is configured to detect a range of source IP addresses from the Internet that are acting in an anomaly manner e.g. seems like a user password cracking brute force activities . A workflow rule defines that the first service is configured with indicates that when suspicious sources are detected the second security service is triggered.

As an example the second service evaluates the sources according to their most relevant reputation DB and finds a match with a high score e.g. some of the sources are known to be bad reputation bot sources . The trigger for the third service as defined by the workflow rule is a detection of such high score. The third service provides a mitigation action such as for example via implementation of Distributed ACLs. This application is programmed to retrieve the most updated network topology information and implement ACLs at the point or distributed points that are nearest to the network access. Access is restricted for a pre defined period.

It should be noted that different security applications and or services can be executed in parallel. It should be further noted that more than one security application can be executed in each phase of operation. Furthermore multiple security applications from different domains or disciplines can be executed in parallel.

The various embodiments disclosed herein can be implemented as hardware firmware software or any combination thereof. Moreover the software is preferably implemented as an application program tangibly embodied on a program storage unit or computer readable medium consisting of parts or of certain devices and or a combination of devices. The application program may be uploaded to and executed by a machine comprising any suitable architecture. Preferably the machine is implemented on a computer platform having hardware such as one or more central processing units CPUs a memory and input output interfaces. The computer platform may also include an operating system and microinstruction code. The various processes and functions described herein may be either part of the microinstruction code or part of the application program or any combination thereof which may be executed by a CPU whether or not such a computer or processor is explicitly shown. In addition various other peripheral units may be connected to the computer platform such as an additional data storage unit and a printing unit. Furthermore a non transitory computer readable medium is any computer readable medium except for a transitory propagating signal.

It should be understood that any reference to an element herein using a designation such as first second and so forth does not generally limit the quantity or order of those elements. Rather these designations are generally used herein as a convenient method of distinguishing between two or more elements or instances of an element. Thus a reference to first and second elements does not mean that only two elements may be employed there or that the first element must precede the second element in some manner. Also unless stated otherwise a set of elements comprises one or more elements. In addition terminology of the form at least one of A B or C or one or more of A B or C or at least one of the group consisting of A B and C or at least one of A B and C used in the description or the claims means A or B or C or any combination of these elements. For example this terminology may include A or B or C or A and B or A and C or A and B and C or 2A or 2B or 2C and so on.

All examples and conditional language recited herein are intended for pedagogical purposes to aid the reader in understanding the principles of the disclosed embodiments and the concepts contributed by the inventor to furthering the art and are to be construed as being without limitation to such specifically recited examples and conditions. Moreover all statements herein reciting principles aspects and embodiments as well as specific examples thereof are intended to encompass both structural and functional equivalents thereof. Additionally it is intended that such equivalents include both currently known equivalents as well as equivalents developed in the future i.e. any elements developed that perform the same function regardless of structure.

