---

title: Processing event messages for user requests to execute program code
abstract: A service manages a plurality of virtual machine instances for low latency execution of user codes. The service can provide the capability to execute user code in response to events triggered on an auxiliary service to provide implicit and automatic rate matching and scaling between events being triggered on the auxiliary service and the corresponding execution of user code on various virtual machine instances. An auxiliary service may be configured as an event triggering service to detect events and generate event messages for execution of the user codes. The service can request, receive, or poll for event messages directly from the auxiliary service or via an intermediary message service. Event messages can be rapidly converted to requests to execute user code on the service. The time from processing the event message to initiating a request to begin code execution is less than a predetermined duration, for example, 100 ms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09483335&OS=09483335&RS=09483335
owner: Amazon Technologies, Inc.
number: 09483335
owner_city: Seattle
owner_country: US
publication_date: 20150929
---
Any and all applications for which a foreign or domestic priority claim is identified in the Application Data Sheet or any correction thereto are hereby incorporated by reference under 37 CFR 1.57.

The present application s Applicant previously filed the following U.S. patent applications on Sep. 30 2014 the disclosures of which are hereby incorporated by reference in their entireties 

Generally described computing devices utilize a communication network or a series of communication networks to exchange data. Companies and organizations operate computer networks that interconnect a number of computing devices to support operations or provide services to third parties. The computing systems can be located in a single geographic location or located in multiple distinct geographic locations e.g. interconnected via private or public communication networks . Specifically data centers or data processing centers herein generally referred to as a data center may include a number of interconnected computing systems to provide computing resources to users of the data center. The data centers may be private data centers operated on behalf of an organization or public data centers operated on behalf or for the benefit of the general public.

To facilitate increased utilization of data center resources virtualization technologies may allow a single physical computing device to host one or more instances of virtual machines that appear and operate as independent computing devices to users of a data center. With virtualization the single physical computing device can create maintain delete or otherwise manage virtual machines in a dynamic manner. In turn users can request computer resources from a data center including single computing devices or a configuration of networked computing devices and be provided with varying numbers of virtual machine resources.

In some scenarios virtual machine instances may be configured according to a number of virtual machine instance types to provide specific functionality. For example various computing devices may be associated with different combinations of operating systems or operating system configurations virtualized hardware resources and software applications to enable a computing device to provide different desired functionalities or to provide similar functionalities more efficiently. These virtual machine instance type configurations are often contained within a device image which includes static data containing the software e.g. the OS and applications together with their configuration and data files etc. that the virtual machine will run once started. The device image is typically stored on the disk used to create or initialize the instance. Thus a computing device may process the device image in order to implement the desired software configuration.

Companies and organizations no longer need to acquire and manage their own data centers in order to perform computing operations e.g. execute code including threads programs software routines subroutines processes etc. . With the advent of cloud computing storage space and compute power traditionally provided by hardware computing devices can now be obtained and configured in minutes over the Internet. Thus developers can quickly purchase a desired amount of computing resources without having to worry about acquiring physical machines. Such computing resources are typically purchased in the form of virtual computing resources or virtual machine instances. These instances of virtual machines which are hosted on physical computing devices with their own operating systems and other software components can be utilized in the same manner as physical computers.

However even when virtual computing resources are purchased developers still have to decide how many and what type of virtual machine instances to purchase and how long to keep them. For example the costs of using the virtual machine instances may vary depending on the type and the number of hours they are rented. In addition the minimum time a virtual machine may be rented is typically on the order of hours. Further developers have to specify the hardware and software resources e.g. type of operating systems and language runtimes etc. to install on the virtual machines. Other concerns that they might have include over utilization e.g. acquiring too little computing resources and suffering performance issues under utilization e.g. acquiring more computing resources than necessary to run the codes and thus overpaying prediction of change in traffic e.g. so that they know when to scale up or down and instance and language runtime startup delay which can take 3 10 minutes or longer even though users may desire computing capacity on the order of seconds or even milliseconds. Thus an improved method of allowing users to take advantage of the virtual machine instances provided by service providers is desired.

According to aspects of the present disclosure by maintaining a pool of pre initialized virtual machine instances that are ready for use as soon as a user request is received delay sometimes referred to as latency associated with executing the user code e.g. instance and language runtime startup time can be significantly reduced.

Generally described aspects of the present disclosure relate to the management of virtual machine instances and containers created therein. Specifically systems and methods are disclosed which facilitate management of virtual machine instances in a virtual compute system. The virtual compute system maintains a pool of virtual machine instances that have one or more software components e.g. operating systems language runtimes libraries etc. loaded thereon. The virtual machine instances in the pool can be designated to service user requests to execute program codes. The program codes can be executed in isolated containers that are created on the virtual machine instances. Since the virtual machine instances in the pool have already been booted and loaded with particular operating systems and language runtimes by the time the requests are received the delay associated with finding compute capacity that can handle the requests e.g. by executing the user code in one or more containers created on the virtual machine instances is significantly reduced.

In certain embodiments a message queue a message bus or any other message intermediary service is provided to facilitate transportation or communication of event messages generated in a first programmatic environment e.g. at an auxiliary service to the programmatic environment provided by the virtual compute system described herein. To further facilitate propagation and transportation of a triggered event from the first programmatic environment to the virtual compute system event messages may be generated to include information descriptive of the triggered event a user associated with a request to execute user code in response to the triggered event and programmatic information to enable the virtual compute system to convert the event message into a user request for further processing by the virtual compute system. The event message and or programmatic information contained therein may be structured according to a schema a code model or an application programming interface API to facilitate both creation generation of the event message at the auxiliary service and conversion processing of the event message at the virtual compute system.

In another aspect a virtual compute system may maintain a pool of virtual machine instances on one or more physical computing devices where each virtual machine instance has one or more software components loaded thereon. When the virtual compute system receives a request to execute the program code of a user which specifies one or more computing constraints for executing the program code of the user the virtual compute system may select a virtual machine instance for executing the program code of the user based on the one or more computing constraints specified by the request and cause the program code of the user to be executed on the selected virtual machine instance.

One benefit provided by the systems and methods described herein is an implicit and automatic rate matching and scaling between events being triggered on an auxiliary service and the corresponding execution of user code on various virtual machine instances. Thus the virtual compute system is capable of responding to events on demand whether the events are triggered infrequently e.g. once per day or on a larger scale e.g. hundreds or thousands per second .

Specific embodiments and example applications of the present disclosure will now be described with reference to the drawings. These embodiments and example applications are intended to illustrate and not limit the present disclosure.

With reference to a block diagram illustrating an embodiment of a virtual environment will be described. The example shown in includes a virtual environment in which users e.g. developers etc. of user computing devices may run various program codes using the virtual computing resources provided by a virtual compute system .

By way of illustration various example user computing devices are shown in communication with the virtual compute system including a desktop computer laptop and a mobile phone. In general the user computing devices can be any computing device such as a desktop laptop mobile phone or smartphone tablet kiosk wireless device and other electronic devices. In addition the user computing devices may include web services running on the same or different data centers where for example different web services may programmatically communicate with each other to perform one or more techniques described herein. Further the user computing devices may include Internet of Things IoT devices such as Internet appliances and connected devices. The virtual compute system may provide the user computing devices with one or more user interfaces command line interfaces CLI application programing interfaces API and or other programmatic interfaces for generating and uploading user codes invoking the user codes e.g. submitting a request to execute the user codes on the virtual compute system scheduling event based jobs or timed jobs tracking the user codes and or viewing other logging or monitoring information related to their requests and or user codes. Although one or more embodiments may be described herein as using a user interface it should be appreciated that such embodiments may additionally or alternatively use any CLIs APIs or other programmatic interfaces.

The user computing devices access the virtual compute system over a network . The network may be any wired network wireless network or combination thereof. In addition the network may be a personal area network local area network wide area network over the air broadcast network e.g. for radio or television cable network satellite network cellular telephone network or combination thereof. For example the network may be a publicly accessible network of linked networks possibly operated by various distinct parties such as the Internet. In some embodiments the network may be a private or semi private network such as a corporate or university intranet. The network may include one or more wireless networks such as a Global System for Mobile Communications GSM network a Code Division Multiple Access CDMA network a Long Term Evolution LTE network or any other type of wireless network. The network can use protocols and components for communicating via the Internet or any of the other aforementioned types of networks. For example the protocols used by the network may include Hypertext Transfer Protocol HTTP HTTP Secure HTTPS Message Queue Telemetry Transport MQTT Constrained Application Protocol CoAP and the like. Protocols and components for communicating via the Internet or any of the other aforementioned types of communication networks are well known to those skilled in the art and thus are not described in more detail herein.

The virtual compute system is depicted in as operating in a distributed computing environment including several computer systems that are interconnected using one or more computer networks. The virtual compute system could also operate within a computing environment having a fewer or greater number of devices than are illustrated in . Thus the depiction of the virtual compute system in should be taken as illustrative and not limiting to the present disclosure. For example the virtual compute system or various constituents thereof could implement various Web services components hosted or cloud computing environments and or peer to peer network configurations to implement at least a portion of the processes described herein.

Further the virtual compute system may be implemented in hardware and or software and may for instance include one or more physical or virtual servers implemented on physical computer hardware configured to execute computer executable instructions for performing various features that will be described herein. The one or more servers may be geographically dispersed or geographically co located for instance in one or more data centers.

In the environment illustrated the virtual environment includes a virtual compute system which includes a frontend a warming pool manager and a worker manager . In the depicted example virtual machine instances instances are shown in a warming pool A managed by the warming pool manager and instances are shown in an active pool A managed by the worker manager . The illustration of the various components within the virtual compute system is logical in nature and one or more of the components can be implemented by a single computing device or multiple computing devices. For example the instances can be implemented on one or more physical computing devices in different various geographic regions. Similarly each of the frontend the warming pool manager and the worker manager can be implemented across multiple physical computing devices. Alternatively one or more of the frontend the warming pool manager and the worker manager can be implemented on a single physical computing device. In some embodiments the virtual compute system may comprise multiple frontends multiple warming pool managers and or multiple worker managers. Although four virtual machine instances are shown in the example of the embodiments described herein are not limited as such and one skilled in the art will appreciate that the virtual compute system may comprise any number of virtual machine instances implemented using any number of physical computing devices. Similarly although a single warming pool and a single active pool are shown in the example of the embodiments described herein are not limited as such and one skilled in the art will appreciate that the virtual compute system may comprise any number of warming pools and active pools.

In the example of the virtual compute system is illustrated as being connected to the network . In some embodiments any of the components within the virtual compute system can communicate with other components e.g. the user computing devices and auxiliary services which may include monitoring logging billing services a storage service an instance provisioning service a message queue service and or other services that may communicate with the virtual compute system of the virtual environment via the network . In other embodiments not all components of the virtual compute system are capable of communicating with other components of the virtual environment . In one example only the frontend may be connected to the network and other components of the virtual compute system may communicate with other components of the virtual environment A via the frontend . In some embodiments any of the auxiliary services may be configured to operate as an event triggering service A in order to listen for events specified by users of the auxiliary service and trigger generation of event messages for processing by the virtual compute system as described in more detail herein. Thus for example the storage service may be configured to operate as an event triggering service A in order to provide the capability of executing user code on the virtual compute system in response to events as they occur on the storage service .

In one embodiment the one or more auxiliary services may be registered or configured to be polled or queried for events to trigger execution of user codes on the virtual compute system . Such registration or configuration may be provided or enabled via the one or more user interfaces provided to the user computing devices . For example a user interface may provide options for the user to select or specify an auxiliary service as an event triggering service A such that events on the event triggering service A may trigger generation of event messages or such that the event triggering service A may be periodically polled or queried for events such as by an intermediary polling system.

In one embodiment the event triggering service A may be configured to associate an event or event type with a particular program code to be executed on the virtual compute system that is the event triggering service A may store or have access to data which associates the event with the particular program code . In another embodiment the event triggering service A may not necessarily associate an event or event type with a particular program code to be executed on the virtual compute system but rather the event triggering service A may generate event messages which the virtual compute system is configured to interpret as being associated with the program code to be executed on the virtual compute system that is the virtual compute system may store or have access to data which associates the event with the particular program code In another embodiment an intermediary system or service may be configured to handle interpretation and routing of event messages to execute the program code such that neither the event triggering service A nor the virtual compute system may store or have access to the event to program code association data. For example the event triggering service A may generate an event message that is agnostic to any particular program code to be executed and the event message may be routed to the virtual compute system or an intermediary system which evaluates the event message and associated metadata to determine which program code to execute in response and initiate a corresponding request to execute the program code.

As mentioned above any of the auxiliary services may be configured to operate as an event triggering service A. These include but are not limited to remote storage systems database systems message queue systems for example a message queue service provided by the virtual compute system a message queue system owned and or operated by a user or client separate from the virtual compute system and so on web services auditing services health monitoring services for example for monitoring health status of a virtual compute system logging services billing services resource management systems and services for example for managing lifecycles and or ownership of virtual computing environments and the like and so on.

Users may use the virtual compute system to execute user code thereon. For example a user may wish to run a piece of code in connection with a web or mobile application that the user has developed. One way of running the code would be to acquire virtual machine instances from service providers who provide infrastructure as a service configure the virtual machine instances to suit the user s needs and use the configured virtual machine instances to run the code. Alternatively the user may send a code execution request the virtual compute system . The virtual compute system can handle the acquisition and configuration of compute capacity e.g. containers instances etc. which are described in greater detail below based on the code execution request and execute the code using the compute capacity. The virtual compute system may automatically scale up and down based on the volume thereby relieving the user from the burden of having to worry about over utilization e.g. acquiring too little computing resources and suffering performance issues or under utilization e.g. acquiring more computing resources than necessary to run the codes and thus overpaying .

The frontend receives and processes all the requests sometimes in the form of event messages to execute user code on the virtual compute system . In one embodiment the frontend serves as a front door to all the other services provided by the virtual compute system . The frontend processes the requests and makes sure that the requests are properly authorized. For example the frontend may determine whether the user associated with the request is authorized to access the user code specified in the request.

The user code as used herein may refer to any program code e.g. a program routine subroutine thread etc. written in a specific program language. In the present disclosure the terms code user code and program code may be used interchangeably. Such user code may be executed to achieve a specific task for example in connection with a particular web application or mobile application developed by the user. For example the user codes may be written in JavaScript node.js Java Python and or Ruby. The request may include the user code or the location thereof and one or more arguments to be used for executing the user code. For example the user may provide the user code along with the request to execute the user code. In another example the request may identify a previously uploaded program code e.g. using the API for uploading the code by its name or its unique ID. In yet another example the code may be included in the request as well as uploaded in a separate location e.g. the storage service or a storage system internal to the virtual compute system prior to the request is received by the virtual compute system . The virtual compute system may vary its code execution strategy based on where the code is available at the time the request is processed.

The frontend may receive the request to execute such user codes in response to Hypertext Transfer Protocol Secure HTTPS requests from a user. Also any information e.g. headers and parameters included in the HTTPS request may also be processed and utilized when executing the user code. As discussed above any other protocols including for example HTTP MQTT and CoAP may be used to transfer the message containing the code execution request to the frontend . The frontend may also receive the request to execute such user codes when an event is detected such as an event that the user has registered to trigger automatic request generation. For example the user may configured an auxiliary service to operate as an event triggering service A by registering the user code with the auxiliary service and specifying that whenever a particular event occurs e.g. a new file is uploaded the request to execute the user code is sent to the frontend . Alternatively the user may have registered a timed job e.g. execute the user code every 24 hours . In such an example when the scheduled time arrives for the timed job the request to execute the user code may be sent to the frontend . A timed or scheduled job may be implemented using the techniques of this disclosure to for example model the job as an event generated by a timer service. For example the timer service may generate an event message indicating that it is now time to run a user code and the virtual compute system may implement a process to run code at a certain time by utilizing the timer service to remind the virtual compute system to run the user code. In yet another example the frontend may include or have access to a queue of incoming code execution requests and when the user s batch job is removed from the virtual compute system s work queue the frontend may process the user request. In yet another example the request may originate from another component within the virtual compute system or other servers or services not illustrated in .

In yet another example the request may originate from another component within the virtual compute system or other servers or services not illustrated in . In some embodiments a request to execute activate user codes may be generated in response to an event associated with the user computing device or an auxiliary service . For example in response to an end user uploading a new image from a user computing device to an auxiliary service such as storage service configured to operate as an event triggering service A the event triggering service A can trigger a request to execute activate a code to generate a thumbnail of the image. The code may be hosted in the active pool or downloaded from a storage service storage service to the virtual compute system .

In any of the examples described above and throughout this disclosure an event message representative of a request to execute the user code may be initially received by a message queue service and provided to or placed in a message queue. The message queue service may be implemented as a component of the auxiliary services or as a different component. In certain embodiments the frontend may periodically poll the message queue service to identify and retrieve event messages for processing. Message events may be placed in the message queue for example by the message queue service such as in response to when an event is detected for which the user has registered to trigger automatic generation of a request to execute user code. In some instances it may be desirable or more practical to detect such events trigger generation of an event message and provide the event message to the message queue service . For example depending on the embodiment the message queue service may be configured to allow ordering of message events so that certain message events may receive a higher priority. In another example the message queue service may be specifically or specially configured to facilitate transportation of certain types of programmatic events such as database operations certain types of data suitable for batch processing and so on. In one embodiment the message queue service may be configured to provide streaming and or ordered transport of messages for example as a sharded set of data . The frontend may then poll the message queue service and retrieve event messages for further processing by the virtual compute system .

In another embodiment instead of or in combination with using the message queue service the frontend may query the event triggering service A directly to request and receive event messages for further processing such as via invocation of an API provided by the event triggering service A. In another embodiment the event triggering service A may interface directly with the frontend via one or more APIs and function calls. For example when an event is detected and an event message is generated the event triggering system A may invoke an API provided by the frontend to provide the event message directly to the frontend without necessarily providing the event message to the message queue service .

A user request may specify one or more third party libraries including native libraries to be used along with the user code. In one embodiment the user request includes a package file for example a compressed file a ZIP file a RAR file etc. containing the user code and any libraries and or identifications of storage locations thereof . In some embodiments the user request includes metadata that indicates the program code to be executed the language in which the program code is written the user associated with the request and or the computing resources e.g. memory etc. to be reserved for executing the program code. For example the program code may be provided with the request previously uploaded by the user provided by the virtual compute system e.g. standard routines and or provided by third parties. In some embodiments such resource level constraints e.g. how much memory is to be allocated for executing a particular user code are specified for the particular user code and may not vary over each execution of the user code. In such cases the virtual compute system may have access to such resource level constraints before each individual request is received and the individual requests may not specify such resource level constraints. In some embodiments the user request may specify other constraints such as permission data that indicates what kind of permissions that the request has to execute the user code. Such permission data may be used by the virtual compute system to access private resources e.g. on a private network .

In some embodiments the user request may specify the behavior that should be adopted for handling the user request. In such embodiments the user request may include an indicator for enabling one or more execution modes in which the user code associated with the user request is to be executed. For example the request may include a flag or a header for indicating whether the user code should be executed in a debug mode in which the debugging and or logging output that may be generated in connection with the execution of the user code is provided back to the user e.g. via a console user interface . In such an example the virtual compute system may inspect the request and look for the flag or the header and if it is present the virtual compute system may modify the behavior e.g. logging facilities of the container in which the user code is executed and cause the output data to be provided back to the user. In some embodiments the behavior mode indicators are added to the request by the user interface provided to the user by the virtual compute system . Other features such as source code profiling remote debugging etc. may also be enabled or disabled based on the indication provided in the request.

In some embodiments the virtual compute system may include multiple frontends . In such embodiments a load balancer may be provided to distribute the incoming requests and or event messages to the multiple frontends for example in a round robin fashion.

The warming pool manager ensures that virtual machine instances are ready to be used by the worker manager when the virtual compute system receives a request to execute user code on the virtual compute system . In the example illustrated in the warming pool manager manages the warming pool A which is a group sometimes referred to as a pool of pre initialized and pre configured virtual machine instances that may be used to service incoming user code execution requests. In some embodiments the warming pool manager causes virtual machine instances to be booted up on one or more physical computing machines within the virtual compute system and added to the warming pool A prior to receiving a code execution request that will be executed on the virtual machine instance. In other embodiments the warming pool manager communicates with an auxiliary virtual machine instance service e.g. an instance provisioning service to create and add new instances to the warming pool A. For example the warming pool manager may cause additional instances to be added to the warming pool A based on the available capacity in the warming pool A to service incoming requests. In some embodiments the warming pool manager may utilize both physical computing devices within the virtual compute system and one or more virtual machine instance services to acquire and maintain compute capacity that can be used to service code execution requests received by the frontend . In some embodiments the virtual compute system may comprise one or more logical knobs or switches for controlling e.g. increasing or decreasing the available capacity in the warming pool A. For example a system administrator may use such a knob or switch to increase the capacity available e.g. the number of pre booted instances in the warming pool A during peak hours. In some embodiments virtual machine instances in the warming pool A can be configured based on a predetermined set of configurations independent from a specific user request to execute a user s code. The predetermined set of configurations can correspond to various types of virtual machine instances to execute user codes. The warming pool manager can optimize types and numbers of virtual machine instances in the warming pool A based on one or more metrics related to current or previous user code executions.

As shown in instances may have operating systems OS and or language runtimes loaded thereon. For example the warming pool A managed by the warming pool manager comprises instances . The instance includes an OS A and a runtime B. The instance includes an OS A. In some embodiments the instances in the warming pool A may also include containers which may further contain copies of operating systems runtimes user codes etc. which are described in greater detail below. Although the instance is shown in to include a single runtime in other embodiments the instances depicted in may include two or more runtimes each of which may be used for running a different user code. In some embodiments the warming pool manager may maintain a list of instances in the warming pool A. The list of instances may further specify the configuration e.g. OS runtime container etc. of the instances.

In some embodiments the virtual machine instances in the warming pool A may be used to serve any user s request. In one embodiment all the virtual machine instances in the warming pool A are configured in the same or substantially similar manner. In another embodiment the virtual machine instances in the warming pool A may be configured differently to suit the needs of different users. For example the virtual machine instances may have different operating systems different language runtimes and or different libraries loaded thereon. In yet another embodiment the virtual machine instances in the warming pool A may be configured in the same or substantially similar manner e.g. with the same OS language runtimes and or libraries but some of those instances may have different container configurations. For example two instances may have runtimes for both Python and Ruby but one instance may have a container configured to run Python code and the other instance may have a container configured to run Ruby code. In some embodiments multiple warming pools A each having identically configured virtual machine instances are provided.

The warming pool manager may pre configure the virtual machine instances in the warming pool A such that each virtual machine instance is configured to satisfy at least one of the operating conditions that may be requested or specified by the user request to execute program code on the virtual compute system . In one embodiment the operating conditions may include program languages in which the potential user codes may be written. For example such languages may include Java JavaScript Python Ruby and the like. In some embodiments the set of languages that the user codes may be written in may be limited to a predetermined set e.g. set of 4 languages although in some embodiments sets of more or less than four languages are provided in order to facilitate pre initialization of the virtual machine instances that can satisfy requests to execute user codes. For example when the user is configuring a request via a user interface provided by the virtual compute system the user interface may prompt the user to specify one of the predetermined operating conditions for executing the user code. In another example the service level agreement SLA for utilizing the services provided by the virtual compute system may specify a set of conditions e.g. programming languages computing resources etc. that user requests should satisfy and the virtual compute system may assume that the requests satisfy the set of conditions in handling the requests. In another example operating conditions specified in the request may include the amount of compute power to be used for processing the request the type of the request e.g. HTTP vs. a triggered event the timeout for the request e.g. threshold time after which the request may be terminated security policies e.g. may control which instances in the warming pool A are usable by which user etc.

The worker manager manages the instances used for servicing incoming code execution requests. In the example illustrated in the worker manager manages the active pool A which is a group sometimes referred to as a pool of virtual machine instances that are currently assigned to one or more users. Although the virtual machine instances are described here as being assigned to a particular user in some embodiments the instances may be assigned to a group of users such that the instance is tied to the group of users and any member of the group can utilize resources on the instance. For example the users in the same group may belong to the same security group e.g. based on their security credentials such that executing one member s code in a container on a particular instance after another member s code has been executed in another container on the same instance does not pose security risks. Similarly the worker manager may assign the instances and the containers according to one or more policies that dictate which requests can be executed in which containers and which instances can be assigned to which users. An example policy may specify that instances are assigned to collections of users who share the same account e.g. account for accessing the services provided by the virtual compute system . In some embodiments the requests associated with the same user group may share the same containers e.g. if the user codes associated therewith are identical . In some embodiments a request does not differentiate between the different users of the group and simply indicates the group to which the users associated with the requests belong.

As shown in instances may have operating systems OS language runtimes and containers. The containers may have individual copies of the OS and the runtimes and user codes loaded thereon. In the example of the active pool A managed by the worker manager includes the instances . The instance has an OS A runtimes B C and containers D E. The container D includes a copy of the OS A a copy of the runtime B and a copy of a code D . The container E includes a copy of the OS A a copy of the runtime C and a copy of a code E . The instance has an OS A runtimes B C E F a container D and codes G H. The container D has a copy of the OS A a copy of the runtime B and a copy of a code D . As illustrated in instances may have user codes loaded thereon and containers within those instances may also have user codes loaded therein. In some embodiments the worker manager may maintain a list of instances in the active pool A. The list of instances may further specify the configuration e.g. OS runtime container etc. of the instances. In some embodiments the worker manager may have access to a list of instances in the warming pool A e.g. including the number and type of instances . In other embodiments the worker manager requests compute capacity from the warming pool manager without having knowledge of the virtual machine instances in the warming pool A.

In the example illustrated in user codes are executed in isolated compute systems referred to as containers e.g. containers D E D . Containers are logical units created within a virtual machine instance using the resources available on that instance. For example the worker manager may based on information specified in the request to execute user code create a new container or locate an existing container in one of the instances in the active pool A and assigns the container to the request to handle the execution of the user code associated with the request. In one embodiment such containers are implemented as Linux containers. The virtual machine instances in the active pool A may have one or more containers created thereon and have one or more program codes associated with the user loaded thereon e.g. either in one of the containers or in a local cache of the instance . Each container may have credential information made available therein so that user codes executing on the container have access to whatever the corresponding credential information allows them to access.

Once a request has been successfully processed by the frontend the worker manager finds capacity to service the request to execute user code on the virtual compute system . For example if there exists a particular virtual machine instance in the active pool A that has a container with the same user code loaded therein e.g. code D shown in the container D the worker manager may assign the container to the request and cause the user code to be executed in the container. Alternatively if the user code is available in the local cache of one of the virtual machine instances e.g. codes G H which are stored on the instance but do not belong to any individual containers the worker manager may create a new container on such an instance assign the container to the request and cause the user code to be loaded and executed in the container.

If the worker manager determines that the user code associated with the request is not found on any of the instances e.g. either in a container or the local cache of an instance in the active pool A the worker manager may determine whether any of the instances in the active pool A is currently assigned to the user associated with the request and has compute capacity to handle the current request. If there is such an instance the worker manager may create a new container on the instance and assign the container to the request. Alternatively the worker manager may further configure an existing container on the instance assigned to the user and assign the container to the request. For example the worker manager may determine that the existing container may be used to execute the user code if a particular library demanded by the current user request is loaded thereon. In such a case the worker manager may load the particular library and the user code onto the container and use the container to execute the user code.

If the active pool A does not contain any instances currently assigned to the user the worker manager pulls a new virtual machine instance from the warming pool A assigns the instance to the user associated with the request creates a new container on the instance assigns the container to the request and causes the user code to be downloaded and executed on the container.

The user code may be downloaded from an auxiliary service such as the storage service of . Data A illustrated in may comprise user codes uploaded by one or more users metadata associated with such user codes or any other data utilized by the virtual compute system to perform one or more techniques described herein. Although only the storage service is illustrated in the example of the virtual environment may include other levels of storage systems from which the user code may be downloaded. For example each instance may have one or more storage systems either physically e.g. a local storage resident on the physical computing system on which the instance is running or logically e.g. a network attached storage system in network communication with the instance and provided within or outside of the virtual compute system associated with the instance on which the container is created. Alternatively the code may be downloaded from a web based data store provided by the storage service .

Once the worker manager locates one of the virtual machine instances in the warming pool A that can be used to serve the user code execution request the warming pool manager or the worker manger takes the instance out of the warming pool A and assigns it to the user associated with the request. The assigned virtual machine instance is taken out of the warming pool A and placed in the active pool A. In some embodiments once the virtual machine instance has been assigned to a particular user the same virtual machine instance cannot be used to service requests of any other user. This provides security benefits to users by preventing possible co mingling of user resources. Alternatively in some embodiments multiple containers belonging to different users or assigned to requests associated with different users may co exist on a single virtual machine instance. Such an approach may improve utilization of the available compute capacity.

In some embodiments the virtual compute system may maintain a separate cache in which user codes are stored to serve as an intermediate level of caching system between the local cache of the virtual machine instances and a web based network storage e.g. accessible via the network . The various scenarios that the worker manager may encounter in servicing the request are described in greater detail below with reference to .

After the user code has been executed the worker manager may tear down the container used to execute the user code to free up the resources it occupied to be used for other containers in the instance. Alternatively the worker manager may keep the container running to use it to service additional requests from the same user. For example if another request associated with the same user code that has already been loaded in the container the request can be assigned to the same container thereby eliminating the delay associated with creating a new container and loading the user code in the container. In some embodiments the worker manager may tear down the instance in which the container used to execute the user code was created. Alternatively the worker manager may keep the instance running to use it to service additional requests from the same user. The determination of whether to keep the container and or the instance running after the user code is done executing may be based on a threshold time the type of the user average request volume of the user and or other operating conditions. For example after a threshold time has passed e.g. 5 minutes 30 minutes 1 hour 24 hours 30 days etc. without any activity e.g. running of the code the container and or the virtual machine instance is shutdown e.g. deleted terminated etc. and resources allocated thereto are released. In some embodiments the threshold time passed before a container is torn down is shorter than the threshold time passed before an instance is torn down.

In some embodiments the virtual compute system may provide data to one or more of the auxiliary services as it services incoming code execution requests. For example the virtual compute system may communicate with the monitoring logging billing services . The monitoring logging billing services may include a monitoring service for managing monitoring information received from the virtual compute system such as statuses of containers and instances on the virtual compute system a logging service for managing logging information received from the virtual compute system such as activities performed by containers and instances on the virtual compute system and a billing service for generating billing information associated with executing user code on the virtual compute system e.g. based on the monitoring information and or the logging information managed by the monitoring service and the logging service . In addition to the system level activities that may be performed by the monitoring logging billing services e.g. on behalf of the virtual compute system as described above the monitoring logging billing services may provide application level services on behalf of the user code executed on the virtual compute system . For example the monitoring logging billing services may monitor and or log various inputs outputs or other data and parameters on behalf of the user code being executed on the virtual compute system . Although shown as a single block the monitoring logging and billing services may be provided as separate services.

In some embodiments the worker manager may perform health checks on the instances and containers managed by the worker manager e.g. those in the active pool A . For example the health checks performed by the worker manager may include determining whether the instances and the containers managed by the worker manager have any issues of 1 misconfigured networking and or startup configuration 2 exhausted memory 3 corrupted file system 4 incompatible kernel and or any other problems that may impair the performance of the instances and the containers. In one embodiment the worker manager performs the health checks periodically e.g. every 5 minutes every 30 minutes every hour every 24 hours etc. . In some embodiments the frequency of the health checks may be adjusted automatically based on the result of the health checks. In other embodiments the frequency of the health checks may be adjusted based on user requests. In some embodiments the worker manager may perform similar health checks on the instances and or containers in the warming pool A. The instances and or the containers in the warming pool A may be managed either together with those instances and containers in the active pool A or separately. In some embodiments in the case where the health of the instances and or the containers in the warming pool A is managed separately from the active pool A the warming pool manager instead of the worker manager may perform the health checks described above on the instances and or the containers in the warming pool A.

In some embodiments the virtual compute system is adapted to begin execution of the user code shortly after it is received e.g. by the frontend . A time period can be determined as the difference in time between initiating execution of the user code e.g. in a container on a virtual machine instance associated with the user and receiving a request to execute the user code e.g. received by a frontend . Another time period can be determined as the difference in time between 1 detection of an event on an event triggering service and 2a receiving a request to execute the user code e.g. received by a frontend and or 2b initiating execution of the user code e.g. in a container on a virtual machine instance associated with the user . Another time period can be determined as the difference in time between 1 retrieving accessing or receiving an event message e.g. directly or indirectly from on an event triggering service and 2 initiating processing of a request to execute the user code e.g. in a container on a virtual machine instance associated with the user . The virtual compute system is adapted to begin execution of the user code within a time period that is less than a predetermined duration. In one embodiment the predetermined duration is 500 ms. In another embodiment the predetermined duration is 300 ms. In another embodiment the predetermined duration is 100 ms. In another embodiment the predetermined duration is 50 ms. In another embodiment the predetermined duration is 10 ms. In another embodiment the predetermined duration may be any value chosen from the range of 10 ms to 500 ms. In some embodiments the virtual compute system is adapted to begin execution of the user code within a time period that is less than a predetermined duration if one or more conditions are satisfied. For example the one or more conditions may include any one of 1 the user code is loaded on a container in the active pool A at the time the request is received 2 the user code is stored in the code cache of an instance in the active pool A at the time the request is received 3 the active pool A contains an instance assigned to the user associated with the request at the time the request is received or 4 the warming pool A has capacity to handle the request at the time the request is received.

The worker manager may include an instance allocation unit for finding compute capacity e.g. containers to service incoming code execution requests and a user code execution module for facilitating the execution of user codes on those containers. An example configuration of the frontend is described in greater detail below with reference to .

The memory may contain computer program instructions grouped as modules in some embodiments that the processing unit executes in order to implement one or more aspects of the present disclosure. The memory generally includes RAM ROM and or other persistent auxiliary or non transitory computer readable media. The memory may store an operating system that provides computer program instructions for use by the processing unit in the general administration and operation of the worker manager . The memory may further include computer program instructions and other information for implementing aspects of the present disclosure. For example in one embodiment the memory includes a user interface unit that generates user interfaces and or instructions therefor for display upon a computing device e.g. via a navigation and or browsing interface such as a browser or application installed on the computing device. In addition the memory may include and or communicate with one or more data repositories not shown for example to access user program codes and or libraries.

In addition to and or in combination with the user interface unit the memory may include an event request processing unit which may include an event message polling unit A and an event message conversion unit B that may be executed by the processing unit . In one embodiment the user interface unit the event message polling unit A and the event message conversion unit B individually or collectively implement various aspects of the present disclosure e.g. processing an event message for a request to executed user code as described herein. In another embodiment a separate polling service may be implemented for example via a polling fleet configured to poll an event source or a message queue and perform at least an initial message conversion or processing to prepare the event message for further processing by the frontend and or another component of the virtual compute system .

The event message polling unit A periodically polls for event messages to be processed into requests to execute user code. For example the event message polling unit A may periodically access a message queue such as the message queue service or any other message queue service or message bus to determine or detect whether an event message has been placed in the message queue for processing by the virtual compute system . An event message may be placed in the message queue according to for example the routine described herein with reference to . In response to determining or detecting an event message in the message queue the event message polling unit A may retrieve the message event from the message queue and initiate further processing of the event message as further described herein. In another embodiment the event message polling unit A may poll the event triggering service A directly rather than from a message queue. For example some event triggering services such as certain types of databases may support direct polling of event messages that need not necessarily rely on an intermediary message queue.

The event message conversion unit B manages the conversion of the event message e.g. as accessed or retrieved from a message queue such as the message queue into a request to execute user code e.g. ready for further processing in accordance with the processes described in U.S. application Ser. No. 14 502 992 titled THREADING AS A SERVICE filed on Sep. 30 2014 which was previously incorporated by reference in its entirety above . Conversion of the event message is described in more detail with reference to herein. In one embodiment the event message is generated in a format representative of a remote procedure call to facilitate rapid conversion and or immediate function invocation by the virtual compute system when the event message is processed. Such an implementation enables a high degree of functional transparency and reduced latency between an auxiliary system responding to an event trigger and the virtual compute system processing the event message generated by the auxiliary system responsive to the event trigger.

While the event message polling unit A and the event message conversion unit B are shown in as part of the frontend in other embodiments all or a portion of the event message polling unit A and the event message conversion unit B may be implemented by other components of the virtual compute system and or another computing device. For example in certain embodiments of the present disclosure another computing device in communication with the virtual compute system may include several modules or components that operate similarly to the modules and components illustrated as part of the frontend . In some embodiments the frontend may further include components other than those illustrated in .

Turning now to a routine implemented by one or more components of the auxiliary service such as the storage service configured to operate as an event triggering service A will be described. Although routine is described with regard to implementation by event triggering service A one skilled in the relevant art will appreciate that alternative components such as a user device or the virtual compute system may implement routine or that one or more of the blocks may be implemented by a different component or in a distributed manner.

At block of the illustrative routine the event triggering service A detects an event or activity that has been designated to trigger or activate execution of a user code on the virtual compute system . For example in some embodiments the event triggering service A may be configured to enable or activate event notifications for one or more events. In one embodiment the event trigger and notification configuration settings may be provided or specified by a user. For example when the user provides or uploads user code to the virtual compute system and or to the storage service the user may at that time specify one or more events for which the event triggering service A should listen and which corresponding functions or routines of the user code are to be executed in response to detection of the one or more events. As one illustrative example a user may upload or have previously uploaded or otherwise provided to the virtual compute system a user code to generate a thumbnail image and further specify that the code to generate a thumbnail image is to be executed in response to an end user uploading a new image to an auxiliary system such as an image sharing system . In this example the image sharing system will then monitor or detect an image upload event. In some embodiments the event trigger and notification configuration settings may be provided or specified by a configuration file or other data format that may be provided for example with the user code. In various embodiments the user uploading the user code and the end user performing some other action with respect to the auxiliary service configured as an event triggering service such as uploading a new image may be separate and distinct users or entities.

Next at block the event triggering service A generates an event message in association with the detected activity event. For example the event triggering service A may generate the event message according to the event trigger and notification configuration settings previously provided by the user. The configuration settings can specify for example a schema a code model or an API associated with the user code to be executed by the virtual compute system in response to the event being triggered. For example the event message may be generated to comprise among other things a user account identifier associated with the user a function identifier to identify a function to be invoked on the virtual compute system and one or more event message parameters including any input parameters required and or optional to be provided with the function invocation.

In some embodiments the event message may include data or metadata that indicates the program code to be executed the language in which the program code is written the user associated with the request and or the computing resources e.g. memory etc. to be reserved for executing the program code. For example the event message may specify that the user code is to be executed on Operating System A using Language Runtime X. When the event message is processed by the virtual compute system see e.g. the virtual compute system or one of its components may locate a virtual machine instance that has been pre configured with Operating System A and Language Runtime X and assigned to the user. The virtual compute system may then create a container on the virtual machine instance for executing the user code therein. If a container having the code already exists on the virtual machine instance the virtual compute system can buffer the current request for execution on the container once the container becomes available.

In one embodiment the format of the event message or at least a portion of the event message may represent a standard remote procedure call such that the event triggering service A may only need to perform minimal processing to provide relevant information in the event message that may be needed to invoke the function on the virtual compute system. For example such a standard remote procedure call format may enable an auxiliary system which runs a different operating system or language runtime than the virtual compute system to seamlessly communicate with the virtual compute system via the event message generated in such a standard format. In one embodiment the format of the remote procedure call may be provided by the user and designed to match or correspond to the user code to be executed. For example when an image upload event is detected the format of the event message may represent a remote procedure call to a function to be executed in response on the virtual compute system such as invoke generateThumbnail userID imageName imagePath or generateThumbnail userID imageName imagePath or similar.

In some embodiments such as certain instances where a trusted or secure relationship is established between the event triggering service A and the virtual compute system the event message may further comprise the user code to be executed by the virtual compute system . For example the user may provide the user code to the event triggering service A instead of or in addition to providing the user code to the virtual compute system and further designate that the user code is to be provided with the event message to the virtual compute system for execution at runtime. In another embodiment the event message may comprise a location such as a URI of the user code to be executed by the virtual compute system such that the virtual compute system can remotely invoke the user code via the URI.

At block the event triggering service A provides the event message for further processing by the virtual compute system. For example in one embodiment the event message is provided to a message queue such as the message queue . The message queue service may be a component of the auxiliary system e.g. as shown in or it may be a separate system or service in communication with the auxiliary system and or the virtual compute system over the network . The particular format of the event message may be based at least in part on a specification associated with the message queue being used to transport the event message. Additionally a particular message queue being used may be based on the type of event message being generated and provided to the virtual compute system. For example a particular message queue may be suited to transport messages relating to database operations and thus an event message generated in response to a database event trigger may be provided using the particular message queue. How the virtual compute system accesses and processes the event message is described in greater detail below with reference to . In another embodiment the event message may be provided or made available for access by the virtual compute system directly without the need for an intermediary message queue. For example the event triggering service A may provide or enable an API which the virtual compute system may invoke in order to request one or more available event messages from the event triggering service A. The virtual compute system may then invoke the API for example on a periodic basis instead of or in combination with polling a message queue in order to access and or retrieve event messages for processing.

While the routine of has been described above with reference to blocks the embodiments described herein are not limited as such and one or more blocks may be omitted modified or switched without departing from the spirit of the present disclosure.

Turning now to a routine implemented by one or more components of the virtual compute system e.g. the frontend will be described. Although routine is described with regard to implementation by the frontend one skilled in the relevant art will appreciate that alternative components may implement routine or that one or more of the blocks may be implemented by a different component or in a distributed manner.

At block of the illustrative routine the frontend may optionally periodically poll a message queue e.g. message queue for an event message which may represent a request to execute user code. For example the block may continue the event messaging process from the block of in scenarios where the event triggering service A provides event messages via the message queue.

Next at block the frontend accesses or retrieves an event message for processing by the virtual compute system . In one embodiment the event message is accessed or retrieved from the message queue. Retrieval of the event message removes the event message from the message queue to prevent duplication of further processing associated with the event. In another embodiment the event message may be accessed or retrieved from the event triggering service directly such as by invocation of an API provided by the event trigger service by which the frontend can request and receive event messages ready for processing by the virtual compute system . The event message can include or comprise any of the information and metadata described above with reference to including for example a user account identifier associated with the user a function identifier to identify a function to be invoked on the virtual compute system and one or more event message parameters including any input parameters required and or optional to be provided with the function invocation.

At block the frontend converts the event message into a request to execute user code such that the request to execute user code may be further processed by the virtual compute system including for example as described in U.S. application Ser. No. 14 502 992 titled THREADING AS A SERVICE filed on Sep. 30 2014 which was previously incorporated by reference in its entirety above . Conversion of the event message may involve parsing the event message to identify and or extract the function identifier any input parameters and other metadata that may be needed to generate a request to execute the user code which was designated by the user to be executed in response to the event trigger. For example the event message may include or comprise at least one or more of the following information related to an event payload e.g. event data which may conform to a known or defined schema or other format an event wrapper or envelope provided for example by the event message bus or by the event triggering service for example which may part of an implicit lease on the event message provided by the message queue service and or event metadata associated with the event including an identity for which the event message was signed an identity of the event producer or source of the event trigger for example which event triggering service triggered the event a name or owner of the message queue on which the event message was transported and so on.

As described with reference to in one embodiment the format of the event message may represent a standard remote procedure call such that once retrieved from the message queue the frontend may only need to perform minimal processing to generate a corresponding request to execute the user code. For example when an image upload event is detected the format of the event message may represent a remote procedure call to a function to be executed in response on the virtual compute system such as invoke generateThumbnail userID imageName imagePath or generateThumbnail userID imageName imagePath or similar. Thus in one embodiment the frontend may extract this remote procedure call and immediately invoke the specified function to initiate a request. Further as discussed above with reference to the request to execute the user code may further specify that the user code is to be executed on Operating System A using Language Runtime X which may be included as additional inputs for the request to execute the user code.

At block the frontend may optionally verify security access and or authenticate the user associated with a user account identifier provided with the event message and determine that the user is authorized to access the specified user code. In some embodiments the security and or authentication may be omitted or performed in a separate process or as part of the processing of the request to execute the user code. In some embodiments the security and or authentication may be performed earlier in the routine such as prior to the conversion performed at block .

At block the frontend provides the request to execute the user code to the virtual compute system . In certain embodiments the frontend itself may perform further processing of the request for example as described in U.S. application Ser. No. 14 502 992 titled THREADING AS A SERVICE filed on Sep. 30 2014 which was previously incorporated by reference in its entirety above. The request can include a program code composed in a programming language. Various program languages including Java PHP C Python etc. can be used to compose the user code. The request can include configuration information relating to code execution requirements. For example the request can include information about program language in which the program code is written information about language runtime and or language library to execute the user code. The configuration information need not include any specific information regarding the virtual machine instance that can host the user code.

While the routine of has been described above with reference to blocks the embodiments described herein are not limited as such and one or more blocks may be omitted modified or switched without departing from the spirit of the present disclosure. For example the block may be modified such that the frontend receives an event message from the user device .

The routine of may include different processes or routines which may be performed in a different order. One alternative example is provided as follows although other variations may be possible. First an event message may be received or accessed by the frontend which parses the event message using a schema if one is available . The frontend may combine the parsed event message with additional event metadata e.g. an event wrapper information about the message queue identity or source of the event trigger and so on in order to determine or establish information about the event the source or owner of the event and other information which may be provided to the virtual compute system . The frontend may then perform at least an initial authorization and or security check as needed to verify secured access and related execution of user code. The frontend may then evaluate the parsed event message and additional event metadata in order to route the message to an appropriate program or user code to be called in response to the event. The frontend may then perform mapping of the event message into a request to execute the user code by for example converting the content of the message and or the event metadata into arguments variables and other inputs in the programming language of the user code selected to process the event message. Additional information may be added to the request to execute the user code including for example an identity associated with the signer or provider of the event message. The frontend may then call a function method or other entry point in the programming language optionally with conditions based on aspects of the event message and or event metadata to initiate processing of the request.

During processing of the request to execute user code the frontend may continue to perform additional processes to facilitate processing of the event message or payload. For example if the original event message or payload comprised an aggregate collection of one or more sub events each sub event may be relayed to the virtual compute system for execution via the user code one at a time. The frontend may be configured to manage splitting the original aggregate event message payload into multiple single events. The frontend may also be configured to for example facilitate intermediate or aggregate checkpoint services which may be required as part of processing of the original event message. For example an aggregate event message comprising multiple events may require some of first events to be processed and completed first before later second or tertiary events in this case the frontend may be further configured to facilitate processing of the first events check for status of completion of the first events before routing the later second or tertiary events for processing execution by the virtual compute system.

After processing execution of the user code for an event message the frontend may be further configured to provide additional post processing. For example the frontend may perform certain cleanup operations for example releasing a lease on the associated event message wrapper perform result calculations provide return values if needed perform checkpoint operations which for example as described above may occur during processing or in between processing of sub events related to an aggregate event message and so on. In some embodiments the frontend may perform logging monitoring alarming notifications and or other reporting associated with the completion successful or unsuccessful of the event on behalf of the user program. In some cases such logging monitoring and so on may be performed in addition to any logging monitoring and related processes performed during execution of the user code itself. For example the frontend may be configured to report on the outcome of the event and related execution of user code in response to the event for example back to the event triggering service A or to the user.

It will be appreciated by those skilled in the art and others that all of the functions described in this disclosure may be embodied in software executed by one or more physical processors of the disclosed components and mobile communication devices. The software may be persistently stored in any type of non volatile storage.

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

Any process descriptions elements or blocks in the flow diagrams described herein and or depicted in the attached figures should be understood as potentially representing modules segments or portions of code which include one or more executable instructions for implementing specific logical functions or steps in the process. Alternate implementations are included within the scope of the embodiments described herein in which elements or functions may be deleted executed out of order from that shown or discussed including substantially concurrently or in reverse order depending on the functionality involved as would be understood by those skilled in the art. It will further be appreciated that the data and or components described above may be stored on a computer readable storage medium and loaded into memory of the computing device using a drive mechanism associated with a computer readable storing the computer executable components such as a CD ROM DVD ROM or network interface. Further the component and or data can be included in a single device or distributed in any manner. Accordingly general purpose computing devices may be configured to implement the processes algorithms and methodology of the present disclosure with the processing and or execution of the various data and or components described above.

It should be emphasized that many variations and modifications may be made to the above described embodiments the elements of which are to be understood as being among other acceptable examples. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

