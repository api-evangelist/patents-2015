---

title: Dynamically defined virtual private network tunnels in hybrid cloud environments
abstract: A plurality of virtual private network (VPN) tunnels between a first cloud and a second cloud in a hybrid cloud environment are managed by a VPN Manager. A request including a first set of requirements is received from a first cloud application resident in the first cloud for a first VPN tunnel. The request is sent to a system in a first cloud, wherein the first system creates the first VPN tunnel according to the first set of requirements. The VPN Manager receives an event pertaining to the first VPN tunnel. In response to the event, the VPN Manager sends a modification request to the first system containing a second set of requirements. The first system tunes the first VPN tunnel according to a second set of requirements.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09571457&OS=09571457&RS=09571457
owner: International Business Machines Corporation
number: 09571457
owner_city: Armonk
owner_country: US
publication_date: 20151215
---
This disclosure relates generally to communications in a cloud computing environment. More particularly it relates to dynamically creating virtual private network tunnels in a hybrid cloud environment.

An emerging information technology IT delivery model is cloud computing by which shared resources software and information are provided over the Internet to computers and other devices on demand. Cloud computing can significantly reduce IT costs and complexities while improving workload optimization and service delivery. With this approach an application instance can be hosted and made available from Internet based resources that are accessible through a conventional Web browser over HTTP. An example application might be one that provides a common set of messaging functions such as email calendaring contact management and instant messaging. A user would then access the service directly over the Internet. Using this service an enterprise would place its email calendar and or collaboration infrastructure in the cloud and an end user would use an appropriate client to access his or her email or perform a calendar operation.

Cloud computing resources are typically housed in large server farms that run network applications either using a hardware architecture so called bare metal cloud hosting or using a virtualized architecture wherein applications run inside virtual servers or so called virtual machines VMs that are mapped onto physical servers in a data center facility. The virtual machines typically run on top of a hypervisor which is a control program that allocates physical resources to the virtual machines.

It is known for an organization to arrange computing resources in a hybrid cloud environment containing both a private cloud in which the computing resources are owned by the organization and provide services only for that organization and a public cloud in which another organization provides computing services for a plurality of tenants including the organization operating the hybrid cloud. One benefit of a hybrid cloud model is having on premises private infrastructure that is directly accessible while providing access to the public cloud environment in times of high demand. With this integration however there is a need for secure communication between the two environments. One way in which communications are established is through a dedicated virtual public network VPN tunnel.

According to this disclosure a method apparatus and computer program product for managing a plurality of VPN tunnels between a first cloud and a second cloud in a hybrid cloud environment is described. In a first aspect of the invention a method carried out by a first VPN Manager manages the plurality of VPN tunnels. The VPN Manager receives a request from a first cloud application resident in the first cloud. The request including a first set of requirements for a first VPN tunnel in the plurality of VPN tunnels. The request is sent to a system in a first cloud wherein the first system creates the first VPN tunnel according to the first set of requirements. The VPN Manager receives an event pertaining to the first VPN tunnel. In response to the event the VPN Manager sends a modification request to the first system containing a second set of requirements. The first system tunes the first VPN tunnel according to a second set of requirements.

In another aspect of the invention an apparatus including a processor and a computer memory holding computer program instructions is used to manage the plurality of VPN tunnels. The instructions are executed by the processor. The instructions include program code which receives a first request from a first cloud application resident in the first cloud. The request includes a first set of requirements for a first VPN tunnel in the plurality of VPN tunnels. Also included is program code which sends the first request to a first system in a first cloud. The first system creates the first VPN tunnel according to the first set of requirements. Program code which receives a second request from a second cloud application resident in the first cloud. The second request includes a second set of requirements for a second VPN tunnel in the plurality of VPN tunnels. The program code sends the second request to the first system in the first cloud where the first system creates the second VPN tunnel according to the second set of requirements. The program code then receives an event pertaining to the first VPN tunnel. In responsive to the event the program code sends a merge request to the first system to merge the second VPN tunnel into the first VPN tunnel. The first system tunes the first VPN tunnel according to a second set of requirements.

In another aspect of the invention a computer program product in a non transitory computer readable medium is used manage the plurality of VPN tunnels. The computer program instructions include program code which receives a first request from a first cloud application resident in the first cloud. The first request includes a first set of requirements for a first VPN tunnel in the plurality of VPN tunnels. Program code sends the first request to a first system in a first cloud where the first system creates the first VPN tunnel according to the first set of requirements. Program code receives a second request from a second cloud application resident in the first cloud. The second request including a second set of requirements for a VPN tunnel in the plurality of VPN tunnels. The program code sends the second request to the first system in the first cloud where the first system modifies the first VPN tunnel according to the second set of requirements. The first VPN tunnel carries traffic from the first and second cloud applications. The program code receives an event pertaining to the first VPN tunnel. Responsive to the event the program code sends a split request to the first system to split the first VPN tunnel into the first VPN tunnel and a second VPN tunnel. The first system tunes the first VPN tunnel according to the first set of requirements for traffic for the first application and tunes the second VPN tunnel according to a second set of requirements for traffic for the second application.

The foregoing has outlined some of the more pertinent features of the disclosed subject matter. These features should be construed to be merely illustrative. Many other beneficial results can be attained by applying the disclosed subject matter in a different manner or by modifying the invention as will be described.

Hybrid cloud environments drive the need for secure communication between applications between different cloud hosting environments. As the number of applications and platforms grows the number of communication paths which need to be secured grows rapidly. Today customers often install dedicated VPNs to bridge between different clouds in the hybrid cloud environments but dedicated VPNs drag along a number of drawbacks including limited flexibility and creating a large communication hole by opening up the firewall to allow communication in environments that need to be secured. For a highly granular requirement like event management across a hybrid cloud environment small logs may be sent from a plethora of devices to a central server yet traditional VPN options require wide communication channels to be opened between the source devices and the central server far in excess of that which is required to transmit the small amount of data. The present invention provides a means to provide more highly tuned VPNs based on application requirements and topology requirements for the hybrid cloud environment than prior art solutions.

A hybrid cloud environment is a cloud environment which contains both a private cloud in which the computing resources are owned by the organization and provide services only for that organization and a public cloud in which another organization provides computing services for a plurality of tenants including the organization.

A node can be any electronic device client server peer service application or other object capable of sending receiving or forwarding information over communications channels in a network.

A VPN agent is an application which manages a VPN tunnel at one of the two nodes which are endpoints of the tunnel.

A VPN manager is a cloud application which manages an infrastructure of VPN tunnels in the hybrid cloud environment. In preferred embodiments the VPN Manager also manages an infrastructure of VPN agents which in turn manage respective VPN tunnels.

A VPN tunnel is a communications channel between two nodes that transports data by encapsulating the data s Internet Protocol IP packets according to any suitable cryptographic tunneling protocol.

With reference now to the drawings and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments of the disclosure may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the disclosed subject matter may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

With reference now to the drawings depicts a pictorial representation of an exemplary distributed data processing system in which aspects of the illustrative embodiments may be implemented. Distributed data processing system may include a network of computers in which aspects of the illustrative embodiments may be implemented. The distributed data processing system contains at least one network which is the medium used to provide communication links between various devices and computers connected together within distributed data processing system . The network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server and server are connected to network along with storage unit . In addition clients and are also connected to network . These clients and may be for example personal computers network computers or the like. In the depicted example server provides data such as boot files operating system images and applications to the clients and . Clients and are clients to server in the depicted example. Distributed data processing system may include additional servers clients and other devices not shown.

In the depicted example distributed data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course the distributed data processing system may also be implemented to include a number of different types of networks such as for example an intranet a local area network LAN a wide area network WAN or the like. As stated above is intended as an example not as an architectural limitation for different embodiments of the disclosed subject matter and therefore the particular elements shown in should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.

With reference now to a block diagram of an exemplary data processing system is shown in which aspects of the illustrative embodiments may be implemented. Data processing system is an example of a computer such as client in in which computer usable code or instructions implementing the processes for illustrative embodiments of the disclosure may be located.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor SMP system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices. A storage device is any piece of hardware that is capable of storing information either on a temporary basis and or a permanent basis. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer recordable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code. The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. As one example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C C Objective C or the like and conventional procedural programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system other than the SMP system mentioned previously without departing from the spirit and scope of the disclosed subject matter.

As will be seen the techniques described herein may operate in conjunction within the standard client server paradigm such as illustrated in in which client machines communicate with an Internet accessible Web based portal executing on a set of one or more machines. End users operate Internet connectable devices e.g. desktop computers notebook computers Internet enabled mobile devices or the like that are capable of accessing and interacting with the portal. Typically each client or server machine is a data processing system such as illustrated in comprising hardware and software and these entities communicate with one another over a network such as the Internet an intranet an extranet a private network or any other communications medium or link. A data processing system typically includes one or more processors an operating system one or more applications and one or more utilities. The applications on the data processing system provide native support for Web services including without limitation support for HTTP SOAP XML WSDL UDDI and WSFL among others. Information regarding SOAP WSDL UDDI and WSFL is available from the World Wide Web Consortium W3C which is responsible for developing and maintaining these standards further information regarding HTTP and XML is available from Internet Engineering Task Force IETF . Familiarity with these standards is presumed.

Cloud computing is a model of service delivery for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks network bandwidth servers processing memory storage applications virtual machines and services that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics at least three service models and at least four deployment models all as more particularly described and defined in Draft NIST Working Definition of Cloud Computing by Peter Mell and Tim Grance dated Oct. 7 2009.

On demand self service a cloud consumer can unilaterally provision computing capabilities such as server time and network storage as needed automatically without requiring human interaction with the service s provider.

Broad network access capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms e.g. mobile phones laptops and PDAs .

Resource pooling the provider s computing resources are pooled to serve multiple consumers using a multi tenant model with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction e.g. country state or datacenter .

Rapid elasticity capabilities can be rapidly and elastically provisioned in some cases automatically to quickly scale out and rapidly released to quickly scale in. To the consumer the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.

Measured service cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service e.g. storage processing bandwidth and active user accounts . Resource usage can be monitored controlled and reported providing transparency for both the provider and consumer of the utilized service.

Software as a Service SaaS the capability provided to the consumer is to use the provider s applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser e.g. web based e mail . The consumer does not manage or control the underlying cloud infrastructure including network servers operating systems storage or even individual application capabilities with the possible exception of limited user specific application configuration settings.

Platform as a Service PaaS the capability provided to the consumer is to deploy onto the cloud infrastructure consumer created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks servers operating systems or storage but has control over the deployed applications and possibly application hosting environment configurations.

Infrastructure as a Service IaaS the capability provided to the consumer is to provision processing storage networks and other fundamental computing resources where the consumer is able to deploy and run arbitrary software which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems storage deployed applications and possibly limited control of select networking components e.g. host firewalls .

Private cloud the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on premises or off premises.

Community cloud the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns e.g. mission security requirements policy and compliance considerations . It may be managed by the organizations or a third party and may exist on premises or off premises.

Public cloud the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.

Hybrid cloud the cloud infrastructure is a composition of two or more clouds private community or public that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability e.g. cloud bursting for load balancing between clouds .

A cloud computing environment is service oriented with a focus on statelessness low coupling modularity and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes. A representative cloud computing node is as illustrated in above. In particular in a cloud computing node there is a computer system server which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with computer system server include but are not limited to personal computer systems server computer systems thin clients thick clients hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like. Computer system server may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. Computer system server may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

Referring now to by way of additional background a set of functional abstraction layers provided by a cloud computing environment is shown. It should be understood in advance that the components layers and functions shown in are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted the following layers and corresponding functions are provided 

Hardware and software layer includes hardware and software components. Examples of hardware components include mainframes in one example IBM zSeries systems RISC Reduced Instruction Set Computer architecture based servers in one example IBM pSeries systems IBM xSeries systems IBM BladeCenter systems storage devices networks and networking components. Examples of software components include network application server software in one example IBM WebSphere application server software and database software in one example IBM DB2 database software. IBM zSeries pSeries xSeries BladeCenter WebSphere and DB2 are trademarks of International Business Machines Corporation registered in many jurisdictions worldwide 

Virtualization layer provides an abstraction layer from which the following examples of virtual entities may be provided virtual servers virtual storage virtual networks including virtual private networks virtual applications and operating systems and virtual clients.

In one example management layer may provide the functions described below. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing provide cost tracking as resources are utilized within the cloud computing environment and billing or invoicing for consumption of these resources. In one example these resources may comprise application software licenses. Security provides identity verification for cloud consumers and tasks as well as protection for data and other resources. User portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement SLA planning and fulfillment provides pre arrangement for and procurement of cloud computing resources for which a future requirement is anticipated in accordance with an SLA.

Workloads layer provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation software development and lifecycle management virtual classroom education delivery data analytics processing transaction processing and others e.g. enterprise specific functions in a private cloud .

It is understood in advance that although this disclosure includes a detailed description on cloud computing implementation of the teachings recited herein are not limited to a cloud computing environment. Rather embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.

Hybrid cloud environments drive the need for secure communication between applications between different hosting environments. As the number of applications and platforms grows the number of secure communication paths grows rapidly. Prior art dedicated VPNs create large communication channels in environments that need to be secured. Many transmission needs are highly granular requirements such as event management wherein log data is sent from many devices to a central server traditional VPN use wide communication channels which are unneeded and pose security risks. Other examples of applications which transmit small amounts of data between clouds include applications trying to sync data on a periodic basis e.g. once in a month or monitoring applications which send regular but small amounts of data.

Prior art software VPNs can partially solve this problem by creating communication paths for particular applications or particular clouds however application based solutions generally apply only to a single application can be hard to manage can be hard to monitor and do not take advantage of efficiency of scale.

The present invention includes embodiments that dynamically deploy and reconfigure highly tuned VPNs based on application requirements from multiple applications and provide optimal topologies for the hybrid cloud environments.

At a high level the general process for embodiments of the invention is illustrated in . As shown in step the cloud applications whether they are in the private cloud or public cloud interact with a central VPN Manager to request tunnel creation. The central VPN Manager can be installed in either the public or private clouds and provided to the organization as a SaaS a PaaS or an IaaS capability. For the sake of simplicity the flow which results from the requests of a single cloud application is shown. However in a preferred embodiment multiple cloud applications will be interacting with the VPN Manager simultaneously and the process depicted in may be in different stages for respective applications. In step the application requesting the creation of a VPN tunnel provides the desired requirements for the VPN tunnel such as protocol port bandwidth limit and other characteristics e.g. the security qualities and the throughput capabilities.

Next in step the VPN Manager provides a VPN endpoint agent or simply VPN agent for installation on the requesting machine or another machine in the same cloud. In preferred embodiments the VPN agent is then installed in the target machine. The VPN endpoint agent may vary slightly to accommodate the requirements of the requesting machine for example a Linux based system versus an iOS based system. In some embodiments of the invention the VPN agents may be specialized configured in different types and the type of VPN agent assigned to a particular VPN tunnel varies according the requested qualities and capabilities for the VPN tunnel. In other embodiments of the invention a generic full featured VPN agent is used which can provide a variety of VPN tunnel types. Depending on whether the request is the application s or whether another application resident on the same machine has made a previous request a VPN agent may already be present at the endpoint or a nearby machine. Further embodiments of the invention use existing agents such as Chef agents or an API to existing VPN controllers rather than deploying a VPN agent. So step is optional in many embodiments of the invention. In step the VPN agent communicates with the VPN Manager to receive deployment configuration details as requested previously by the application and deploys the VPN tunnel according to those details.

As shown in step the requesting applications can change the desired requested security qualities and throughput capabilities throughout the application lifecycle for the VPN tunnel. The tuning of the VPN tunnel can change the security and other capabilities of the tunnel or as discussed below may involve merging or splitting the VPN tunnels to accommodate the changing requirements of the cloud applications. For example in the case of changing the characteristics of the VPN tunnel the VPN Manager may instruct the VPN agents to change a VPN tunnel from a big VPN pipe two way fast security protocol tunnel used during deployment to a VPN tunnel which is a small one way very secure VPN pipe for production. The VPN network can be tuned to optimize security by only allowing the traffic and permissions needed by the authorized applications on a minimum number of VPN tunnels. Traffic performance can be increased by providing more VPN tunnels with a higher allowed bandwidth at a possible cost to security. In one preferred embodiment applications will communicate to the VPN Manager and the VPN Manager in turn will communicate to the VPN agents on the two endpoints of the VPN tunnel. This step that is dynamically changing the throughput and security qualities of a VPN tunnel can be repeated throughout the application lifecycle.

As shown in step the application can provide a VPN filter plugin to the VPN Manager. The VPN filter will be used to filter traffic passing over the VPN tunnel. VPN filters provide the ability to permit or deny traffic after it exits a VPN tunnel and traffic before it enters a VPN tunnel generally by listing the ACL fields for what IP Port s should be permitted or denied. This step can be done as part of the request step or later as part of the changing security qualities e.g. as part of the change request in step . A VPN filter originally requested in step could be superseded or supplemented by a later requested VPN filter. This step requesting a new VPN filter can be repeated throughout the application lifecycle. The VPN filter on a particular VPN tunnel can be modified in response to requests from other applications which share the communication bandwidth of the VPN tunnel when the VPN tunnel is merged with other VPN tunnels or split into multiple VPN tunnels.

By event and traffic logging the VPN Manager provides visibility into the VPN configuration shown as step . In most preferred embodiments of the invention event logging is provided. In some embodiments traffic logging is provided as well. In one preferred embodiment the event and traffic logging are VPN Manager related audit events. In other embodiments of the invention the events related to applications connecting to other applications can be logged via the VPN agent. For example the bandwidth used by the applications including bandwidth history may be logged by the VPN agents. In yet other embodiments application communication traffic may be logged by the agents. Security related events will be consumed by Security Operations Center SOC for monitoring for security breaches. Event and traffic logging are described in greater detail below in connection with .

In preferred embodiments of the invention the VPN Manager will route and reroute traffic across existing VPN agents and deploy new VPN agents to optimize traffic flow as needed step . In response to detected drops in traffic for example using available traffic logs which are stored and monitored the VPN Manager can instruct the VPN agents to merge VPN tunnels if the security requirements for the traffic on the two VPN tunnels are compatible. The detecting could be performed at the VPN agent which monitors application traffic. Alternatively merging VPN tunnels could be in response to a well behaved application sending a message to the VPN Manager that it has transitioned from a deployment phase to a production phase and thus requires less bandwidth. The VPN Manager determines that in view of the predicted reduction in demand there is an opportunity to merge VPN tunnels. Alternatively new requests from new or existing applications may cause new VPN agents to be created to handle a new anticipated load or requirement. The security requirements of the applications may change with the application lifecycle which may create the need for new VPN agents. This step may entail reassigning different VPN agents to different VPN tunnels killing unneeded VPN agents and creating and providing new VPN agents to handle the merged VPN tunnel or to handle a new VPN tunnel if new traffic is expected.

Also as depicted as step the VPN tunnels may need to be reconfigured because requests made by the applications during the lifecycle of the applications monitored traffic changes or due to changes in the machines on which the applications reside. As the application topology changes and machines get moved the VPN Manager will instruct the VPN agents to reconfigure merge and split VPNs as needed. According to the invention splitting a VPN tunnel involves rerouting traffic from existing applications or machines which were previously handled by a single VPN tunnel to two VPN tunnels. In contrast adding or creating a new VPN tunnel meets a new application request from an application which has not been previously served by the VPN Manager but involves only traffic from a new source. The split of the VPN tunnel can contain traffic from new sources but to be considered a split some of the traffic on each of the VPN tunnels must come from existing sources. To a degree the reconfiguration of the VPN tunnels and the preceding step of reconfiguring the VPN agents are similar steps as the VPN agents may need to be reconfigured and reassigned concurrently with the VPN tunnels however in the drawing reconfiguring VPN agents and reconfiguring VPN tunnels are shown as separate steps for sake of clarity.

In a preferred embodiment of the invention the capabilities of the VPN Manager in concert with the VPN agents at the endpoints include the ability to create new VPN tunnels between different clouds within the hybrid cloud environment. The VPN Manager has the ability to configure tunnel policies such as bandwidth thresholds minimum and maximum and security policies. The VPN Manager has the ability to federate with other VPN Managers which manage other cloud environments. The VPN Manager can optimize VPN tunnel infrastructure by merging or splitting VPN tunnels dynamically in response to new requests changes in the application lifecycle changes in traffic or network reconfiguration or to dynamically configure VPN tunnel specifications for existing VPN tunnels. The VPN tunnel policies are used by the VPN Manager to decide whether a proposed optimization is allowed and whether a new request for VPN service can be accommodated by the existing VPN tunnel infrastructure or will require VPN tunnels to be merged added split or reconfigured.

Creating and maintaining a VPN tunnel is well known in the prior art. The VPN tunnel can be created according to the requirements specified by the administrator or requesting application. A VPN tunnel can be created by a software application or by a dedicated hardware device. The problem which the invention addresses is that once created the prior art VPN tunnels are static and do not adapt to changes in the cloud environment such as application lifecycle changes and network topology changes. Because of their static natures the prior art VPN tunnels present more of a security exposure than the those of the present invention. The present invention tunes the infrastructure of VPN tunnels to allow only the necessary traffic between cloud environments within the overall hybrid cloud environment.

More detailed descriptions of selected illustrative embodiments are provided below. As shown in one preferred embodiment of the invention is used in a hybrid cloud environment that integrates on premise infrastructure hosting a private cloud cloud workload on an IaaS infrastructure and an application in a SaaS environment . The figure also depicts a VPN Manager operating in a generic cloud environment . The generic cloud environment in which the VPN Manager is resident can be either a private cloud or a public cloud. Machines A D are shown resident in IaaS infrastructure machines E and F are shown in the SaaS environment machines G J are shown in the private cloud and machines K and L are shown in the generic cloud environment . Log and Event Manager is shown resident on machine M. VPN Manager is resident on either machine K or machine L.

As shown in VPN tunnels and are configured according to an illustrative embodiment of the invention. In this embodiment of the invention an administrator is configuring the VPN tunnels using a user interface. In other embodiments of the invention VPN Manager aware applications make requests directly to the VPN Manager. The administrator has Machine A contact the VPN Manager and request a VPN tunnel connection to Machine M so that log and event information can be reported to the log and event manager . As part of this request Machine A provides the desired requirements for the VPN tunnel 

The inclusion of a security policy is optional. A security policy would most likely be included by a VPN Manager aware application. In lieu of a provided security policy the VPN Manager will construct a security policy from the requirements provided by the requesting machine or application. Further there may be a default security policy for communication between the respective clouds within the hybrid cloud environment. In the event of a conflict between a default security policy and provided or constructed security policy the VPN Manager may issue an alert to the administrator via a user interface or have rules for resolving such conflicts e.g. a provided security policy has precedence over a default security policy. Although both security requirements and security policies can be used in embodiments of the invention in preferred embodiments of the invention these terms have the following meanings. A security requirement is a security type parameter that the requesting machine requires to be present in a VPN tunnel. Examples of security requirements include a VPN protocol and encryption security protocol to be used. A security policy would indicate how the security requirements are to be used in a VPN tunnel. It could be a mandate that the VPN only use the security requirements specified by the requestor. As another example if a requestor specified security requirement a limited subset of compatible protocols which if requested by another requestor or used by another VPN tunnel which would form a basis for a candidate for joining the existing VPN tunnel or merger of the VPN tunnels. Alternatively a security policy could be permissive allowing any security requirements specified by requestors from the same cloud to be included in the VPN tunnel but no other security protocols if not requested by authorized machines. As another example a security policy could state that certain security requirements were not compatible in the same VPN tunnel. Thus a security policy can be used to evaluate whether the security requirements of a plurality of applications or a plurality of VPN tunnels are compatible.

In one preferred embodiment if the VPN Manager has no prior contact with Machine M the VPN Manager awaits a connection from Machine M. In this embodiment the administrator registers Machine M with the VPN Manager. In response to the request or registration the VPN Manager installs VPN agents respectively on Machine M and Machine A. Next acting through the installed VPN agents the VPN Manager configures the VPN between Machine A and Machine M with the specified parameters in the Machine A request syslog port unidirectional bandwidth etc. . That is the VPN Manager issues instructions and configuration requirements to the VPN agents which the VPN agents or other existing entities carry out. As is known to those skilled in the art the VPN tunnel would use a selected VPN security technology such as the Internet Protocol security IPsec Secure Socket Layer Transport Layer Security SSL TLS or multiprotocol label switching MPLS to secure the tunnel. Other VPN security protocols include Datagram Transport Layer Security DTLS Microsoft Point to Point Encryption MPPE and Secure Shell SSH protocols. The VPN security requirements in the Machine A could include the selection of the VPN security protocol as well as the capabilities to encrypt data according to different encryption standards such as support data encryption standards DES Triple DES 3DES and Advanced Encryption Standard AES with different key sizes or multicast or group encryption standards. The VPN security requirements can include the ability to compress data according to a standard such as Lempel Ziv Stac LZS prior to encryption.

The administrator next has Machine B contact VPN Manager and request a VPN connection to Machine M. As part of this request Machine B provides the desired requirements for the VPN 

In response to the request the VPN Manager installs a VPN agent on Machine B. The VPN Manager identifies the pre existing nearby VPN tunnel originating from Machine A. After establishing that Machine A s and Machine B s security policies are compatible the VPN Manager configures Machine B via the VPN agent on Machine B to send specified traffic to Machine A. Specified traffic is that traffic allowed by the security policies. For example certain security policies may allow only http traffic and not ftp traffic on the VPN tunnel. Then the VPN Manager reconfigures the A to M VPN tunnel to include the VPN filters from the Machine B requirements . In this way an existing VPN tunnel from one machine can be reconfigured to pass traffic from another machine in the same cloud . The resulting VPN tunnel has the following properties Unidirectional two packet types one from each of the applications two protocols syslog and SCP coming from two sources. The aggregate VPN filter for VPN tunnel is more permissive in that it now allows traffic from two sources and two packet types however in the preferred embodiment the VPN filter still checks that the correct packet type is coming from the correct machine.

In this illustrative embodiment the VPN Manager can manage VPN tunnels between more than two clouds in which the organization has machines. Continuing the example the administrator requests that a VPN tunnel from Machine F from Generic SaaS Application in SaaS environment to the Log and Event Manager in private cloud be created. Either the administrator or the Generic SaaS Application owner makes a request to the VPN Manager using the administrator supplied credentials to create a VPN tunnel. The request contains the desired requirements for the VPN 

In this illustrative embodiment Machines A and B provide log and event data to the Log and Event Manager on Machine M through VPN tunnel and Machine F provides such data through VPN tunnel . As shown in the figure co located Machines G and I also provide log and event data to the Log and Event Manager. As Machines G and I can communicate directly through the private network in private cloud with Machine M there is no need to involve the VPN Manager .

The steps described above provide an illustrative example of the initial configuration of the VPN tunnels. As will be discussed below as the needs of the applications change during their lifecycle a well behaved application can issue further requests to change the parameters needed for the tunnel. For example during deployment or other periods of high usage the application will require a high bandwidth through the tunnel. At other times for example during routine monitoring the application will require a lower bandwidth. The application can issue further requests changing the requested bandwidth. In alternative embodiments the VPN agent managing the VPN tunnel can monitor traffic coming from a set of applications. If the monitored traffic is much lower than requested the VPN agent or VPN Manager can recognize an opportunity to merge the tunnel with another suitable or reconfigure the tunnel for a lower bandwidth. At end of life e.g. when the application is uninstalled as part of the uninstallation process a well behaved application will inform the VPN Manager that a VPN tunnel is no longer required. The security requirements of an application can also change during its lifecycle. In yet other embodiments of the invention the event and logging information is presented to an administrator who can issue requests for changing the VPN agent and VPN tunnel configuration based on perceived application lifecycle changes from the event and logging information.

If insufficient space was available in the panel a scroll control would be presented allowing the administrator to scroll through all of the available parameters. Non editable parameters could be presented in a greyed out manner. Other views of the network are envisioned in preferred embodiments of the invention. For example all of the machines in the networks could be presented so that new VPN connections could be created. A point and drag mechanism could be used to define the new tunnel. In response to a point and drag operation by the administrator default editable parameters could be populated in the requested configuration panel which the administrator could edit or submit. In another alternative embodiment an application view can be presented showing the applications operating in each of the environments rather than the machines.

Alerts can be presented. For example in one preferred embodiment VPN tunnel or VPN parameter panel is presented in a highlighted manner indicating an action for the administrator s attention. For example highlighting two tunnels in the interface may indicate an opportunity for merging the two tunnels to provide more efficient service. Highlighting a single tunnel may indicate that the throughput is exceeding the capacity of the tunnel or that a new request for service cannot be accommodated with the existing tunnel because of a conflict between a new set of requirements and the already existing VPN parameters for the tunnel created by prior requests. If the highlighted tunnels were selected by the administrator additional details such as event logs and throughputs which were causes of the alerts can be presented in additional panels.

The VPN Manager would expose options to manually add delete and reconfigure VPN agents and VPN tunnels. In one preferred embodiment the user interface UI would be a UI REST API interface. The Web based UI will use the REST API or an external application could use the REST API directly.

In an illustrative embodiment of reconfiguration of the VPN tunnels is shown. This example shows an example of a network topology change which causes the VPN Manager to change the VPN tunnel infrastructure of the hybrid cloud. In the example it is the removal of a machine from one of the clouds. Other network topology changes include the addition or removal of a cloud application the addition of a clone machine having a same cloud application as another machine e.g. for load balancing moving a cloud application from one machine to another machine and moving a cloud application from one cloud to another cloud e.g. from a private cloud to a public cloud. In preferred embodiments of the invention this sort of network topology change will be sent to the VPN Manager as an event and the VPN Manager will either perform automatic reconfiguration of the VPN tunnel infrastructure or present an alert to the administrator as a situation which is a candidate for a VPN tunnel reconfiguration.

As denoted by the X the administrator removes Machine A from the IaaS infrastructure which triggers a reconfiguration of Machine B traffic handled by Machine A. As the administrator begins removal of Machine A the VPN agent on Machine A contacts VPN Manager in the cloud . The VPN Manager analyzes the combined VPN connections in VPN tunnel in this case the VPN tunnel which originates from Machine A also handles traffic from Machine B. The VPN Manager instructs VPN agent on Machine B to create a Machine B to Machine M VPN tunnel using pre existing requirements i.e. the existing requirements from Machine B and any other machine in IaaS infrastructure which had been using VPN tunnel . Since Machine A is being removed none of its requirements are relevant. Only the Machine B requirements are used when setting up the VPN filter for the tunnel. In the diagram the Machine B requirements when requesting VPN service are illustrated. Machine B had provided the desired requirements for the VPN 

As shown the VPN parameters for the new VPN tunnel are different from the parameters for the combined VPN tunnel shown in or VPN tunnel in this figure. VPN tunnel is removed as denoted by the X . By only accommodating requested parameters from recognized machines which have current VPN tunnel needs security is increased.

In embodiments of the invention there are sets of rules for merging and splitting the VPN tunnels. Security based rules are concerned with whether the security requirements or policies of each of the applications being serviced by or potentially being serviced by a VPN tunnel are compatible with the other applications security requirements or policies. Merging VPN tunnels would be conditioned on the security requirements of the applications being serviced by candidate VPN tunnels being compatible. In embodiments of the invention the compatibility of the security requirements are interpreted based on the security policies of the applications or the security policy of the VPN Manager for cloud to cloud communication. For example if one VPN tunnel allows only http traffic and another VPN tunnel allows only ftp traffic due to the application security policies then the two tunnels cannot be merged. However if both tunnels allow http traffic or all traffic then they can be merged. As another example the two applications on two different VPN tunnels may require two different security or encryption protocols and the security policy of the VPN Manager in effect for communication between the two clouds requires that a single encryption protocol be used. Thus an application security requirement or policy can prevent merger of VPN tunnels which might otherwise be merged for throughput efficiency.

In view of a new request from an application containing a new set of security requirements an evaluation of the current VPN in view of a compatibility rule could cause the current VPN tunnel to be split. In a preferred embodiment compatibility for a potential merge is determined by evaluating the security requirements and VPN filters on the two VPN tunnels for direct conflicts. If a conflict is found in some embodiments a user interface may display the candidate VPN tunnels to an administrator to display the conflicts and the changes needed to make the VPN tunnels compatible. In this way an administrator can decide if modifying the VPN filter adding additional types of traffic or security or encryption protocols to the current VPN would be acceptable from a security standpoint. Another case when the VPN tunnel can be split in an embodiment is when the security requirements change of one of the applications which use a shared VPN tunnel. For example if an application now wants to transmit ftp traffic in addition to the original http traffic and the current VPN tunnel does not allow ftp traffic then the VPN tunnel could be split. As another example if one of the applications wants a higher level of encryption than the current VPN tunnel it may make sense to split the current VPN tunnel rather than to incur higher overhead on all traffic. Other compatibility based rules for parameters other than security based parameters are used in other embodiments of the invention.

Another set of rules is based on bandwidth or throughput of a VPN tunnel. A bandwidth rule can be based on an upper or lower threshold on bandwidth for example. Splitting VPN tunnels can be performed if the traffic of multiple applications is crossing the permissible tunnel limit bandwidth . In this case the VPN Manager will then split the tunnel. Merging VPN tunnels can be performed if one or more compatible VPN tunnels has a bandwidth below the minimum tunnel bandwidth limit.

In an illustrative embodiment of reconfiguration and merging the VPN tunnels is shown. This example shows the case where the demands from the applications on machines A and B have changed because of reduced bandwidth requirements allowing merger of VPN tunnels and . Another case which would allow a merger of the VPN tunnels is a change in security protocols for one of the applications so that the new set of security protocols is compatible according to security policies in effect. As shown VPN tunnel is being removed between the clouds and as the other VPN tunnel can accommodate the aggregate demand. In preferred embodiments of the invention the traffic in addition to security requirements on the two VPN tunnels must be compatible for merger. In preferred embodiments of the invention the VPN Manager receives information from the VPN agents and assigned to Machine A and Machine B. The VPN Manager reconfigures VPN agent on Machine B to modify the Machine B to Machine M VPN tunnel adding requirements i.e. the existing requirements from Machine A which had been using VPN tunnel . In the diagram the Machine A requirements and Machine B requirements are illustrated. Machine A provides the desired requirements for the VPN tunnel 

As shown the VPN parameters for the modified VPN tunnel are different from the parameters from the individual VPN tunnels and when they were supporting a single application. By only accommodating requested parameters from recognized machines security is increased. In this figure the VPN agent on Machine A forwards the traffic from Machine A to the VPN agent on Machine B so that VPN tunnel can handle the combined traffic.

In an illustrative embodiment of splitting a VPN tunnel is shown. In this example VPN tunnel is no longer adequate to handle the communications from both Machine A and Machine B. The splitting of VPN tunnel can be the result of an administrator action or a request by a VPN Manager aware application indicating that its requirements have changed or will change soon. The VPN Manager analyzes the combined VPN connections in VPN tunnel which originates from Machine B also handles traffic from Machine A and can display an alert to an administrator via a user interface. In this example a new set of requirements is received from the application running on Machine A indicating an expected increase in demand due to an update which will require a bidirectional VPN tunnel as well as a new security encryption protocol. In recognition that these new requirements cannot be fulfilled with VPN tunnel or at least that modification of VPN tunnel in response to the new requirements is not optimal either from a security or throughput standpoint the VPN Manager reconfigures VPN agent on Machine A to create a new Machine A to Machine M VPN tunnel using the new requirements. Thus the old VPN tunnel is split as traffic from the sources on Machine A and Machine B will be serviced by two VPN tunnels in the new VPN tunnel infrastructure.

Again by only accommodating requested parameters from recognized machines security is increased so the new VPN parameters for the modified VPN tunnel are different from the parameters for the combined VPN tunnel shown in . Similarly the VPN parameters for new created VPN tunnel only reflect the requirements for Machine A.

In step the VPN Manager waits for events to be reported by the VPN agents. As events are received step the events are logged step . The VPN Manager determines whether the received event s trigger a rule in step . To trigger a rule the most recently received events may need to be correlated with event which have already been logged. As has been mentioned previously one example of a rule is a traffic threshold rule. If the traffic on a VPN is exceeding or projected to exceed a threshold the VPN Manager will issue instructions to the VPN agents to split a single VPN tunnel into two tunnels. Another traffic threshold rule is a minimum traffic rule. If adjacent VPN tunnels have traffic below a threshold the VPN Manager may issue instructions to the VPN agents to merge VPN tunnels. Another example of a rule is a security related rule. If there have been security events related to a VPN tunnel the VPN Manager may issue instructions to the VPN agents to change the security parameters for the tunnel. For example detected intrusion events for one of the machines being serviced by a VPN tunnel has experienced problematic events which bear further scrutiny. Thus the VPN Manager may issue instructions to the VPN agent s for that tunnel to monitor events from the machine more closely or split the VPN tunnel so that events from the affected machine can be monitored i.e. all events from the new tunnel are monitored while allowing events from other nonaffected machines to have lower intrusion detection overhead.

If the event is a modification request made by a VPN Manager aware application the default rule may be to comply with the request. In this case the VPN Manager will issue instructions to the VPN agent s consistent with the modification request. Another rule would be to evaluate whether the modification request is consistent with the security policies in place for the VPN tunnel and if not to alert an administrator for further action.

If a rule has been triggered by the event s in step the VPN Manager will issue instructions to the VPN agents to tune the VPN tunnel s appropriately. As explained above tuning the VPN tunnel s includes modifying the parameters on a VPN tunnel merging VPN tunnels or splitting a VPN tunnel into two or more VPN tunnels. In one preferred embodiment the rule will trigger an alert in a user interface to allow an administrator to confirm and or modify the instructions to the VPN agents. The process returns to wait for new events in step .

Based on the information received in step a decision is made whether a change to the existing VPN infrastructure is indicated. An affirmative decision can be based on many factors. First as described above there could be a new administrator or application based request for changes to the VPN tunnel settings. The new request could pertain to a new connection for a new application or a new machine or to a change to an existing VPN tunnel between already subscribing machines. Second the change could be indicated by the throughput measurements by the VPN agents. VPN tunnels could be initially created by applications in a deployment phase of the application lifecycle where high bandwidth requirements exist. Thus to provide the needed bandwidth separate VPN tunnels are created. Later in the production phase of the application lifecycle the bandwidth requirements of the applications are lower so provided that the security requirements are compatible between applications VPN tunnels can be merged. Third at the end of the application lifecycle when the application is removed the VPN tunnel and VPN agent for that application can be removed or modified to support only those applications still resident at the end point. The VPN agents report that the VPN tunnels are being underutilized and therefore are candidates for merger with other VPN tunnels. The VPN Manager having a map of all of the existing VPN tunnels under its control issues the needed commands for merger e.g. an existing set of requirements for the VPN tunnel to be closed is sent to the first VPN agent controlling the first VPN tunnel to remain open a command to alter the VPN characteristics of the first VPN tunnel to those new requirements a command to forward communications from the second VPN agent currently controlling the second VPN tunnel to be closed instead to the first VPN agent and so forth.

The change could be an indication that a VPN tunnel needs to be split because of new bandwidth or security requirements. Previously merged VPN tunnels are often prime candidates for splitting into multiple tunnels. During the application lifetimes there made be periods in which the bandwidth or security requirements change for example during an update or in response to an indicated intrusion of one of the cloud applications i.e. requiring special security handling. Another reason a VPN tunnel needs to be split is due to new request by additional machines or applications. Suppose that in the example above described in reference to that VPN tunnel was adequate to service Machine A and Machine B however application or administrator requests were made for VPN service for Machines C and D and a single VPN tunnel could not fulfill the bandwidth requirements for all four machines. One option might be to create a new VPN tunnel servicing Machines C and D. However the VPN Manager might establish that the requirements for Machines A and C are more compatible than Machines A and B and so it would be most efficient to have one VPN tunnel service Machines A and C and a second VPN tunnel service B and D. If no change is indicated then the process returns to monitoring the VPN tunnels step .

In step a determination whether the change can be accomplished with the existing set of VPN tunnels. In general it will be more efficient and the cloud will be less porous to security attacks the fewer VPN tunnels between the two clouds that are maintained. A comparison of the requested bandwidth current bandwidth and available bandwidth of the current tunnel is made. A comparison of the existing and requested security parameters is made to determine the compatibility of the security parameters requested by the respective applications. If the existing VPN tunnels can be used including merger of the existing VPN tunnels the existing VPN agents are issued the desired requirements to make any needed changes to the VPN tunnels. If the VPN tunnels can be used it is likely that there are VPN agents already installed in the requesting machines. However if new VPN agents are needed e.g. in an embodiment where specialized rather than generic VPN agents are used the VPN Manager sends them to the machine endpoints in step . The process then continues monitoring the existing VPN infrastructure step .

On the other hand if the change requires a new VPN tunnel the process then determines whether a VPN agent is already installed in step . If not in step the VPN Manager sends the new VPN agent to the endpoint which needs it. In step the new VPN tunnel is created through the new and or existing VPN agents. The new VPN tunnel may be considered a split of an existing tunnel. The process then returns to step to monitor the VPN infrastructure for possible changes.

In the preferred embodiments of the invention a central VPN Manager is controlled by a single system or cloud provider. For example in cloud environments it would be valuable for IaaS and PaaS providers to provide a VPN capability as enabled by the present invention into those environments.

A federation model can be used where one VPN Manager is provided by one cloud provider and the cloud provider uses a model similar to federated identity OAuth OpenID etc. to create a trust model between client networks and other cloud networks. When an application belonging a one organization wants a VPN tunnel it can use a federation type authentication with the organization VPN server to have trust established with the cloud provider VPN Manager.

One embodiment is illustrated in . An application for a first organization is resident on Machine M in one of a first set of clouds and needs a VPN tunnel created to communicate with Machine F in one of a second set of clouds belonging to a different organization. VPN tunnels between machines in set of clouds are managed by VPN Manager while VPN tunnels in set of clouds are managed by VPN Manager .

Then when applications want a VPN tunnel they make a request to their own VPN provider server e.g. the application on Machine M contacts VPN Manager . The VPN Manager would communicate with its counterpart VPN Manager to set up the new VPN tunnel . Thus clients would communicate with the other trusted clients using a VPN tunnel to provide an access point and encryption. The VPN tunnel can flow through the central server or the VPN Manager can spawn an additional lightweight tunnel. Similar to the description above for VPN tunnels within a hybrid cloud environment the VPN tunnels managed between the two cloud environments and can be reconfigured merged and split to accommodate the needs of the applications during their lifecycles.

The above described subject matter provides many advantages. In preferred embodiments the merging and splitting of VPN tunnels allows for network optimizations. The VPN Manager can take into consideration available bandwidth available machine compute network topology and VPN overhead when making decisions around location and combination of VPNs. The prior art uses dedicated VPN tunnels to provide security between cloud environment. By monitoring the throughput on given VPN tunnels the VPN Manager can suggest the creation of an additional VPN tunnel to split VPNs handling a large amount of traffic or suggest merging underutilized VPNs terminating at locations within the same cloud.

When integrated into cloud environments with sufficient privilege the VPN Manager may automatically deploy a dedicated machine to offload VPN traffic. If the VPN Manager has the credentials of a cloud administrator available then it can use the credentials to automatically create a VM in the cloud and dedicate it for processing VPN traffic thus creating a new VPN Manager to share the load. This will help ease the load on the existing machine running the VPN Manager and also makes the VPN Manager more scalable for the hybrid cloud. All or some VPN agents will then start communicating with the new VPN Manager. In another embodiment the VPN Manager may also offload to a dedicated VPN appliance depending on availability. If the VPN Manager detects a VPN appliance it can install or use an already installed VPN Manager then in similar fashion to cloud VM the VPN Manager can start offloading traffic to the VPN appliance to relieve some of the workload on the existing VPN manager. While invention can be largely autonomic in some preferred embodiments of the invention the administrator may manually tune the VPN tunnels through the user interface. In autonomic embodiments of the invention a user interface can be provided to alert the administrator of actions taken by the VPN Manager. The administrator can examine the log of events detected by the agents and the subsequent actions taken by or directed to be taken by the VPN Manager to either adjust the autonomic policies or to overrule actions taken by the VPN Manager. The administrator can install physical VPN appliances and configure the VPN Manager to explicitly use those appliances by default.

In alternative embodiments rather than the agent based management discussed above the VPN Manager could leverage cloud APIs or leverage existing agents such as Chef client agents to reconfigure the endpoints of the VPN tunnels. In these embodiments the actions described above as taken by the VPN agents are instead taken by other network entities such as the Chef agents or other VPN controlling mechanisms already resident in the cloud infrastructure. When using the cloud APIs there could be software based networking available in the cloud which could be used to create VPN tunnels for all VMs connected to a software defined network SDN instead of deploying agents on each and every machine.

As discussed above an application can change the VPN parameters for the VPN tunnel as the lifecycle of the application changes. For example during an application deployment process the application may require different communication bandwidth and security protocols. For example an SSH protocol over the VPN tunnel may be required during the product installation but not during the product runtime. The application can provide a new set of requirements for dynamic VPN tunnel reconfiguration to the VPN Manager.

The VPN Manager provides dynamic VPN deployment management and reconfiguration responsive to detailed and dynamic requirements supplied by a set of applications or machines within the organizations networks. By allowing the merger and splitting of multiple flexible VPN tunnels the efficiency and security of a hybrid cloud is improved. Further an organization can use the invention to provide VPN tunneling capabilities with federation with the cloud environment controlled by partners or other trusted entities. Federation of VPN capability through establishment of trust between VPN Managers belonging to different organizations allows applications to leverage existing trust relationships without requiring the application itself to join multiple organizations.

Embodiments of the invention allow changes to the VPN tunnel topology in response to automated deployment and removal of cloud hosted hardware for more efficient management and to offload VPN activity. The choice of VPN technology is responsive to environment changes and requirements of the requesting applications. By leveraging cloud infrastructure APIs automated deployment tools the VPN Manager can manage VPN tunnels with a minimum of additional infrastructure. Embodiments of the invention responsively change the communication based on application lifecycle such as real time changing of allowed protocols based on application driven commands. By continuously monitoring the VPN tunnel requirements provided by administrator or the set of applications embodiments of the invention provide for dynamic VPN tunnel reconfiguration.

There are many advantages of the invention over the prior art. The invention provides dynamic VPN deployment management and reconfiguration responsive to detailed and dynamic requirements supplied by the applications. Moreover multiple VPN Managers can manage VPNs in different clouds and through federation of VPN capability through establishment of trust between VPN Managers applications can leverage the existing trust relationship to request a VPN from a trusted VPN Manager from a different cloud.

The combination of multiple flexible VPN tunnels into a single VPN tunnel improves efficiency and security of intercloud communications. If needed splitting of combined VPNs to meet new demands can also be accomplished. In embodiments of the invention the hardware used to provide the VPN function is automatically deployed and removed for more efficient management. The VPN technology chosen for creating a given tunnel is responsive to cloud environment and the requirements specified by the application. Where specialized VPN agents are used the specialized VPN agents are configured to provide the requirements requested by the application or machine requesting a VPN tunnel. The cloud infrastructure itself is flexible allowing reassignment of tasks between machines. This flexibility can be leveraged in the VPN management process APIs automated deployment tools by assigning such resources dynamically to additional manage VPNs as needed.

The VPN tunnels can be responsively changed to provide for expansion or restriction of the communication channel based on the application lifecycle as well as real time changing of the allowed protocols in a VPN tunnel based on application driven commands. In preferred embodiments of the invention the VPN agents continuously monitor VPN requirements provided by administrator or the application or a set of applications and the actual throughput being demanded by the application for dynamic VPN reconfiguration. As described the approach herein may be implemented manually or in an automated manner in whole or in part.

While a preferred operating environment and use case has been described the techniques herein may be used in any other operating environment in which it is desired to deploy services.

As has been described the functionality described above may be implemented as a standalone approach e.g. one or more software based functions executed by one or more hardware processors or it may be available as a managed service including as a web service via a SOAP XML interface . The particular hardware and software implementation details described herein are merely for illustrative purposes are not meant to limit the scope of the described subject matter.

More generally computing devices within the context of the disclosed subject matter are each a data processing system such as shown in comprising hardware and software and these entities communicate with one another over a network such as the Internet an intranet an extranet a private network or any other communications medium or link. The applications on the data processing system provide native support for Web and other known services and protocols including without limitation support for HTTP FTP SMTP SOAP XML WSDL UDDI and WSFL among others. Information regarding SOAP WSDL UDDI and WSFL is available from the World Wide Web Consortium W3C which is responsible for developing and maintaining these standards further information regarding HTTP FTP SMTP and XML is available from Internet Engineering Task Force IETF .

In addition to the cloud based environment the techniques described herein may be implemented in or in conjunction with various server side architectures including simple n tier architectures web portals federated systems and the like.

Still more generally the subject matter described herein can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the trusted platform module function is implemented in software which includes but is not limited to firmware resident software microcode and the like. Furthermore the interfaces and functionality can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain or store the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or a semiconductor system or apparatus or device . Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD. The computer readable medium is a tangible non transitory item.

The computer program product may be a product having program instructions or program code to implement one or more of the described functions. Those instructions or code may be stored in a computer readable storage medium in a data processing system after being downloaded over a network from a remote data processing system. Or those instructions or code may be stored in a computer readable storage medium in a server data processing system and adapted to be downloaded over a network to a remote data processing system for use in a computer readable storage medium within the remote system.

In a representative embodiment the techniques are implemented in a special purpose computing platform preferably in software executed by one or more processors. The software is maintained in one or more data stores or memories associated with the one or more processors and the software may be implemented as one or more computer programs. Collectively this special purpose hardware and software comprises the functionality described above.

In the preferred embodiment the functionality provided herein is implemented as an adjunct or extension to an existing cloud compute deployment management solution.

While the above describes a particular order of operations performed by certain embodiments of the invention it should be understood that such order is exemplary as alternative embodiments may perform the operations in a different order combine certain operations overlap certain operations or the like. References in the specification to a given embodiment indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic.

Finally while given components of the system have been described separately one of ordinary skill will appreciate that some of the functions may be combined or shared in given instructions program sequences code portions and the like.

