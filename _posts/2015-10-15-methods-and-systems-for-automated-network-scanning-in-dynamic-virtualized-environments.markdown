---

title: Methods and systems for automated network scanning in dynamic virtualized environments
abstract: Systems and methods for managing jobs to be scanned based on existence of processing nodes are described. One of the methods includes obtaining identification information regarding operation of a first set of the processing nodes from an inventory and creating a job for scanning the processing nodes of the first set for security vulnerability. The job includes the identification information. The method further includes verifying the inventory to determine the first identifying information of the first set of processing nodes for removal from the job and loading the job having second identifying information for a second set of processing nodes that remain after the verifying operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09479527&OS=09479527&RS=09479527
owner: Zynga Inc.
number: 09479527
owner_city: San Francisco
owner_country: US
publication_date: 20151015
---
This patent application is a continuation of and claims priority to and the benefit under 35 U.S.C. 120 of co pending patent application Ser. No. 14 296 338 filed on Jun. 4 2014 titled Methods and Systems for Automated Network Scanning in Dynamic Virtualized Environments which claims priority to and the benefit under 35 U.S.C. 120 of U.S. patent application Ser. No. 13 438 688 filed on Apr. 3 2012 titled Methods and Systems for Automated Network Scanning in Dynamic Virtualized Environments now issued as U.S. Pat. No. 8 769 697 which claims priority to and benefit of under 35 U.S.C. 119 e to U.S. provisional patent application having Application No. 61 543 795 filed on Oct. 5 2011 and titled Methods and Systems for Automated Network Scanning In Dynamic Virtualized Environments all of which are incorporated by reference herein in their entirety for all purposes.

The present invention relates to methods and systems for automated network scanning in dynamic virtualized environments.

A cloud is a common word used to define computing systems and storage that have been networked to provide computing and storage resources to devices connected to the Internet. The reliability and security of a cloud is usually performed in a world where computer networks are a key element in intra entity and inter entity communications and transactions. Various tools have been used by network administrators government security consultants and hackers to test the vulnerabilities of the cloud such as for example whether any virtual machines VMs in the cloud can be accessed and controlled remotely without authorization. Through this intensive testing the cloud can be hardened against common vulnerabilities and esoteric attacks.

A tool such as a vulnerability scanner can be used to test an individual VM in the cloud to determine which VMs are open these open VMs may provide access for possible intrusion and potentially represent a vulnerability that can be exploited by a malicious hacker. However because of the vast number of hosts in a provider s multi tenancy cloud scanning takes a long time.

Embodiments of the present invention provide methods and systems for automated network scanning in dynamic virtualized environments

In one embodiment a host information processing system HIPRS minimizes operational overhead when scanning rapidly changing sets of hosts also sometimes referred to as nodes by automatically retrieving inventory records via an application programming interface API and synchronizing a job with the inventory records before each block within the job is dispatched for scanning A job is a scan job performed by a vulnerability scanner. In some embodiments HIPRS minimizes unintentional scanning of foreign hosts. In one embodiment the foreign hosts are not owned or operated by an owner of the vulnerability scanner.

In various embodiments HIPRS increases accuracy of scan data by preventing unintentionally scanned foreign hosts from being reported in result sets. In one embodiment HIPRS load balances blocks across multiple vulnerability scanners to increase overall performance and allow for horizontal scaling.

HIPRS uses cloud environments with nearly all hosts indexed in a continuously updated inventory database. Using this inventory database HIPRS is able to construct a job that includes information such as Internet Protocol IP addresses or nicknames of a set of hosts and further includes associated state tracking information used to manage the job.

When the job is initialized a snapshot of the current inventory including information about N hosts is taken and stored in a job bundle. The snapshot is then logically partitioned into X blocks of host information.

Before the job bundle is uploaded to a vulnerability scanner HIPRS synchronizes a job host database with the current cloud inventory and removes information regarding terminated hosts from the blocks. The job host database is a part of a storage system that includes information regarding a job. In one embodiment the synchronization is performed to subtract information regarding terminated hosts from blocks.

In one embodiment the job initialization process also creates metadata entries for tracking the job such as a job name and a runtime error log. Each block has a state value associated with it which is used for tracking the state of the block and the overall progress of the job. If there are pending blocks to be scanned HIPRS selects the next block available and queries a vulnerability scanner to determine a state of previously dispatched blocks and to determine whether there are scanning resources available to scan a new block. If the vulnerability scanner indicates that a previously dispatched scan task is finished its associated work unit is marked complete in the job host database and no further processing is performed on the work unit. If scanning resources are available HIPRS dispatches the next pending block for scanning and then records metadata to associate a task identification ID returned by the vulnerability scanner with the block for tracking.

In some embodiments if an error is encountered when communicating with the vulnerability scanner or if the vulnerability scanner indicates that an exception occurred during a scan the block is marked with an error flag and may be marked for rescan manually by a user.

In one embodiment when all blocks within a job are marked complete or as having an error the job is considered completed.

In some embodiments after the job completes HIPRS provides a mechanism to retrieve an export of vulnerability scan data for additional post processing. In various embodiments the vulnerability scan data can be obtained in other forms and methods such as by accessing a file a database a graphical user interface GUI that provides graphical results tabulated data lists metrics etc. In some embodiments the vulnerability scan data can also be sent to interested administrators for review by email notifications text messages links etc. In one embodiment hosts marked as terminated are not included in the job database to enhance reporting accuracy.

In one aspect a method for managing jobs to be scanned based on existence of processing nodes is provided. The method includes obtaining identification information regarding operation of a first set of the processing nodes from an inventory and creating a job for scanning the processing nodes of the first set for security vulnerability. The job includes the identification information. The method further includes verifying the inventory to determine the first identifying information of the first set of processing nodes for removal from the job and loading the job having second identifying information for a second set of processing nodes that remain after the verifying operation.

In another aspect the method includes receiving scanning results from the loaded job. The scanning results are processed to remove results associated with processing nodes that were removed during the scanning.

In yet another aspect a method for managing jobs to be scanned based on existence of processing nodes is described. The method includes loading a job having identifying information for a first set of the processing nodes receiving scanning results from the loaded job and removing results associated with a second set of processing nodes that were removed during the scanning.

In another aspect a system for managing jobs to be scanned based on existence of processing nodes is described. The system includes a memory device configured to store a job creator module and a job loader module. The system further includes a processor configured to execute the job creator module to obtain identification information regarding operation of a first set of the processing nodes from an inventory. The job loader module is executed to create a job for scanning the processing nodes of the first set for security vulnerability. The job includes the identification information. Moreover the processor is configured to execute the job loader module to verify the inventory to determine first identifying information of a first one of the processing nodes of the first set for removal from the job. The job loader module is executed to load the job having second identifying information for a second set of processing nodes that remain after the verification.

In yet another aspect a method for managing jobs to be scanned based on existence of processing nodes is described. The method includes obtaining identification information regarding operation of the processing nodes creating a job having the identification information determining identifying information of at least one of the processing nodes for removal from the job and removing the at least one processing node based on the determined identifying information. The identification information is updated after the removing operation. The method further includes loading the job having the updated identification information for processing nodes that remain after the removing operation. The loading is performed for scanning the remaining processing nodes for vulnerability to security attacks.

Other aspects of the invention will become apparent from the following detailed description taken in conjunction with the accompanying drawings illustrating by way of example the principles of various embodiments of the present invention.

It should be noted that various embodiments of the present invention may be practiced without some or all of these specific details. In other instances well known process operations have not been described in detail in order not to unnecessarily obscure various embodiments of the present invention.

A host information processing system HIPRS and its functionality are described herein. A host is commonly referred to as a node which has processing power and assigned an Internet Protocol IP address or other identifier. A host may be a virtual machine VM or a physical machine or a combination of the VM and the physical machine. Although specific mention may be made to virtual machines in various sections of the patent application various embodiments can also work on physical machines.

In one embodiment HIPRS includes a computer which further includes a controller and may include a display device. In various embodiments the controller may execute an interactive program to render a report on the display. A display device as used herein may be a monitor which is capable of receiving and rendering video output from the controller. A monitor may be a cathode ray tube CRT monitor a liquid crystal display LCD monitor or a light emitting diode LED monitor.

In some embodiments HIPRS communicates with a cloud to determine whether a host has been terminated. The determination is used to avoid a vulnerability scan of the host and or to avoid generating a report that includes data from a vulnerability scan of the host.

HIPRS communicates with one or more vulnerability scanner nodes to dispatch pending blocks which are described below to perform a vulnerability scan. A vulnerability scan is used to determine whether a host possesses a vulnerability that can be exploited by a malicious hacker.

Any processing node N N may terminate at any time for a variety of reasons. In one embodiment processing node N terminates when it malfunctions or lacks operation. In some embodiments processing node N terminates when an application executing within the node changes. In other embodiments the node N terminates when an owner of the processing node N releases ownership to another entity. For example the processing node N terminates when a company X takes control of the processing node N to execute an application. In this example the processing node N was controlled by another company Y to execute an application before the termination. In one embodiment an entity that executes an application on a node controls the node. In some embodiments an entity that executes an operating system on a node controls the node. The termination of any processing node N N from cloud at any time provides a dynamic changing environment. The cloud changes dynamically with termination of processing node.

An inventory stores identifying information regarding operation of the nodes N N and N which are controlled by an entity. Inventory is specific to an entity in that the inventory includes identifying information regarding processing nodes controlled by the entity. In one embodiment inventory avoids storing identifying information regarding node N that is controlled by an entity different from one controlling the nodes N N and N. In one embodiment identifying information regarding a node includes an IP address of the node a MAC address of the node a nickname of the node a name of an application executing within the node a name of an operating system executing within the node or a combination thereof.

A job creator module within HIPRS accesses the identifying information regarding the nodes N N and N from inventory to create a job . The job has identifying information regarding the nodes N N and N. The job is created to provide to vulnerability scanner node to determine whether any node N N or N is vulnerable to security attacks by hackers. In one embodiment the node N is vulnerable to security attack when the node N does not have the latest software security updates installed. In another embodiment the node N is vulnerable to security attack when the node is unprotected by a firewall. In one embodiment a security attack includes installing or running unauthorized code or programs such as viruses and malware on node N N or N. The unauthorized code or programs lack authorization from an owner of the node N N or N.

Before uploading job to vulnerability scanner node a job loader module accesses the inventory to determine identifying information of any one of the plurality of processing nodes N N and N for removal from the job . In one embodiment job loader module compares identifying information stored in inventory with identifying information in job to determine whether processing node N N or N is terminated. When processing node N N or N is terminated information identifying the node is deleted from inventory . In one embodiment processing node N is terminated between a time of creation of job and a time of the verification by job loader module .

When job loader module determines that identifying information regarding processing node N N or N is missing from inventory the job loader module determines to purge identifying information regarding the node from job to create a job . After the purge the job loader module submits job to vulnerability scanner node . In one embodiment the new job includes identifying information regarding processing nodes N and N and excludes identifying information regarding the processing node N.

Upon receiving job the vulnerability scanner node executes a vulnerability scan on the processing nodes such as N and N identified in the job . The vulnerability scanner node generates scanning results. In one embodiment the vulnerability scanner node generates scanning results indicating that node N is a high risk node and N is a low risk node. In another embodiment vulnerability scanner generates scanning results indicating that node N has a risk score of 7 out of 10 and node N has a risk score of 4 out of 10.

In one embodiment the scanning results are provided by the vulnerability scanner node to job loader module . During the scan processing node N or N or both may have been terminated. If so inventory is updated to remove identifying information regarding the terminated processing node such as N. When inventory is updated job creator updates the job to purge identifying information regarding the terminated node to create a job . Job loader module access the job to determine that processing node such as N was terminated. Job loader module removes such as deletes from the scanning results results of scanning the terminated processing node such as node N to generate scanning results . In some embodiments the job loader module deletes a risk score or a risk level provided to the node N from scanning results received from vulnerability scanner node to generate the scanning results . In one embodiment the scanning results are displayed on a display device to show to a user .

In another embodiment the job loader module may avoid requesting scanning results for job from vulnerability scanner node . Rather the job loader module accesses vulnerability scanning results to delete a portion of the scanning results to further generate the scanning results . The portion corresponds to the terminated processing node that was terminated during execution of the job by vulnerability scanning node . The scanning results are displayed on display device or on a display device of vulnerability scanner node

It should be noted that although four nodes are shown in cloud in one embodiment a different number of nodes may be included within cloud .

Each server includes a central processing unit CPU . Servers and are coupled with networks and . Each network and may be the Internet or an Intranet.

Servers are coupled with each other and to a storage system via one or more networks. In one embodiment server is coupled with a storage system via network . Similarly server is coupled with a storage system via network and server is coupled with a storage system via network . Also server is coupled with server via network and server is coupled with server via network . The large amount of data is stored in one or more of storage systems and accessed by one or more of servers via one or more networks .

As used herein a storage system is a random access memory RAM a read only memory ROM or a combination of RAM and ROM. In one embodiment storage system includes a database that allows one or more of servers to access data. In some embodiments a storage system includes one or more memory devices such as flash memory cards a redundant array of independent disks RAID and hard disks.

Although a few components are shown in cloud in some embodiments additional components such as a display device an input device a printer speakers an optical drive a universal serial bus USB port a graphics processing unit GPU a video card are included. Examples of input device include a mouse a keyboard a stylus and any other wired or wireless input device. Examples of a display device are provided above.

A VM such as VM VM or VM is executed by one or more servers . In one embodiment VM is a software application executed by servers and . A VM includes an operating system OS . In one embodiment VM includes an OS VM includes an OS and VM includes an OS . It should be noted that a VM includes a virtual processor and a virtual storage system which are not shown for convenience. A virtual processor is processing power of one or more servers . Also a virtual storage system is storage capability of one or more storage systems .

An OS within a VM may be the same or different than an OS within another VM. In one embodiment OS may be a Linux operating system and OS may be a Windows operating system. In another embodiment OS may be an OS X Lion operating system and OS may be a Unix operating system.

An application within an OS runs on top of the OS. In one embodiment application runs on top of OS . Moreover an application within a VM may be the same or different than an application within another VM. For example application may be FARMVILLE game software developed by ZYNGA Inc. and application may be a word processing software developed by GOOGLE corporation of Mountain View Calif. In another embodiment application may be MICROSOFT EXCEL software developed by MICROSOFT corporation of Seattle Wash. and application may be CITYVILLE game software developed by ZYNGA Inc.

In some embodiments an application includes a gaming service application a music service application a video service application a shopping service application an image storage service application a search service application a document storage service application a document creation service application a social network service application or any other service application that generates data that is distributed via a massive distributed server system. In one embodiment the server system includes multiple servers .

It should be noted that application or is developed by an entity. In one embodiment if application or is not developed by an entity it may be under control of the entity. In some embodiments an application or is under control of an entity if the application is licensed by the entity from a developer of the application. In one embodiment an application or is under control of an entity if the entity is authenticated with a passcode to allow the entity to control execution of the application.

A hypervisor is a platform virtualization software that is executed by each server and to create manage and monitor any number of VMs. The hypervisor allocates components such as servers networks storage systems and other components of cloud to VMs for a time period based on availability of the components. In one embodiment VM is executed by server for a time period and by server for a time period. In another embodiment OS is stored within storage system for a time period and is stored in storage system for a time period.

In one embodiment the hypervisor is used to emulate virtual hardware partition physical hardware virtualize physical hardware or execute VMs to provide access to the components of cloud . Hypervisor may include a hypervisor manufactured by VMWare corporation of Palo Alto Calif. an open source product whose development is overseen by Xen.org community HyperV VirtualServer or virtual PC hypervisors provided by Microsoft corporation or others.

Each VM and has an associated IP address. For example VM has an IP address IP VMhas another IP address IP and VMhas yet another IP address IP.

One or more servers collect and store one or more IP addresses of one or more VMs in an inventory . An inventory as used herein is a database. Inventory includes one or more IP addresses of one or more VMs which is running one or more applications developed by or controlled by a single entity. In some embodiments the single entity may own or control operation of the vulnerability scanner node or

When VM or terminates one or more servers delete an IP address of the VM from inventory . A VM or terminates when an IP address of the VM changes the VM stops executing or an OS within the VM changes. In some embodiments any change to a VM after storage of an IP address of the VM in inventory is considered termination of the VM.

HIPRS which may be a computer or a processor accesses the IP addresses within inventory to create a job bundle. HIPRS updates the job bundle before submitting the job bundle to a vulnerability scanner node or . In one embodiment HIPRS updates the job bundle to delete an IP address of VM or that has been terminated. VM or is terminated between a time of storage of an IP address of the VM in inventory and a time of access of the IP addressed by HIPRS from the inventory . The updated job bundle is provided by HIPRS to vulnerability scanner node or

Upon receiving the updated job bundle vulnerability scanner node or applies a set of security checks to determine whether VM or is vulnerable to security attacks from hackers. In one embodiment vulnerability scanner node applies security checks to determine whether VM includes a Windows operating system and if so determines that VM may be subject to security attacks from hackers. In another embodiment vulnerability scanner node applies security checks to determine whether VM is executing a particular application such as a computer virus or backdoor program and if so determines that VM is vulnerable to security attacks from hackers.

Vulnerability scanner node or may be a computer or a processor connected to cloud . In one embodiment vulnerability scanner node or is a server.

In some embodiments vulnerability scanner node generates a report such as one indicating the various classes of vulnerability to display on a display device to a user. The display device on which the report is displayed may be a part of vulnerability scanner node or a component of cloud .

It should be noted that although a limited number of VMs servers networks and storage systems are shown in in some embodiments a different number of servers networks and storage systems may be used. Moreover it should be noted that although a specific number of hypervisor and HIPRS are shown in in other embodiments a different number of hypervisors and HIPRSs may be used. Also any number of vulnerability scanners may be used.

Referring back to a job loader module accesses block from storage system and accesses updated IP addresses from inventory . IP addresses within inventory may have been updated by one or more servers to drop IP address IP. In one embodiment the IP addresses IP IP and IPare updated within inventory between a time of storage of the IP addresses IP IP and IPin inventory and a time of access of one or more of the IP addresses IP IP and IPfrom the inventory by job loader module .

One or more servers determines whether one of VMs corresponding to IP address IPhas been terminated and purges the IP address IPfrom inventory upon determining that the VM has been terminated. After the purge the job loader module compares the inventory with the block to determine that the IP address IPhas been purged from inventory and to purge the IP address IPfrom block . The IP address IPis purged from block to generate a block or to update block to block .

When the block is updated to block another job bundle is created and stored in storage system by job loader module . The job bundle includes the block . An embodiment of block and an embodiment of job bundle are shown in . As shown IP address IPis deleted from block to create the block .

Referring back to job loader module provides the job bundle including the block to vulnerability scanner node . When block is submitted to vulnerability scanner node job loader module may access a block report status indicating a status such as pending of block and may access a job report status indicating a status such as pending of job bundle . Unless all blocks within job bundle are scanned by vulnerability scanner or job creator module maintains the job report status of pending .

In some embodiments job loader module submits a previously un dispatched block to vulnerability scanner node . This distribution of blocks between different scanners and allows the job loader module to distribute work load between vulnerability scanner nodes and

Vulnerability scanner node receives the job bundle including the block and applies the security checks via a portion of cloud to VMs and having the IP addresses IPand IPto determine whether the VMs and are vulnerable to security attacks. Vulnerability scanner node generates vulnerability scan report data indicating vulnerability of VMs and and provides the vulnerability scan report data to job loader module . It should be noted that a large amount of time which may have an order of hours may have passed between submission of job bundle to vulnerability scanner for vulnerability scanning and reception of the vulnerability scan report data by job loader .

While vulnerability scanning is in progress job loader accesses a job bundle to determine whether one or more of the VMs and having IP addresses IPand IPhave been terminated. The job bundle is generated by updating the job bundle . The update is performed by job loader module to match IP addresses of job bundle with IP addresses of inventory . The IP addresses within inventory may have been updated by one or more servers to purge the IP address IP. In response to determining that IP address IPis purged from inventory the job loader module updates the block to purge the IP address IPof VM from block . The purge is performed to generate another block an embodiment of which is shown in . The block excludes the IP address IPof VM . When the block is updated to block another job bundle is created and stored in storage system by job loader module . The job bundle includes the block . An embodiment of the job bundle is also shown in . As shown in block indicates to job loader module that VM has been terminated.

Job loader module requests to receive the vulnerability scan report data for VMs and identified by block from vulnerability scanner node . Upon reception of the vulnerability scan report data for block job loader module deletes a portion of the vulnerability scan report data corresponding to scan of the VM that was terminated while a vulnerability scan of the VMs and was in progress. The deletion of the portion is performed to generate vulnerability scan report data which is provided by job loader to display device . In one embodiment display device receives the vulnerability scan report data to render a vulnerability scan report to show to user .

In another embodiment instead of requesting the vulnerability scan report for the block from vulnerability scanner node the job loader module deletes the portion of the vulnerability scan report data from the vulnerability scanner to generate the vulnerability scan report data . A processor of the vulnerability scanner stores the vulnerability scan report data in a storage system . In one embodiment display device of the vulnerability scanner receives the vulnerability scan report data from the processor to render a vulnerability scan report.

In some embodiments display device receives the block report status to render a block report to show to user . In one embodiment display device accesses the job report status from storage system to render a job report on display device to show to user . The job report is an aggregation of block report status of all blocks within job bundle .

In operation in response to determining that one or more of VMs have been terminated IP addresses of the VMs are subtracted from job bundle . In operation it is determined whether any unprocessed blocks within the job bundle remain. For example job loader module determines whether all blocks within job bundle have been scanned for vulnerability scan. If all blocks have been scanned the job bundle is marked complete in block report status in operation . On the other hand in response to determining that a pending block remains in job bundle to be scanned in operation the pending block is selected. In operation the pending block is uploaded to vulnerability scanner node or for vulnerability scanning.

In operation in response to determining that one or more of VMs have died IP addresses of the VMs are subtracted from job bundle to create the job bundle . The job bundle is updated in operation to create the job bundle .

It is noted that various embodiments are described using information such as IP addresses of VMs . In other embodiments these various embodiments can be described using other information such as VM nicknames instead or a combination of the nicknames and IP addresses. In one embodiment VM nicknames include nicknames of applications . For example a VM nickname is FarmVille . Another VM nickname may be Mafia .

The CPU is a logic circuit that responds to and processes instructions fetched from memory device . In many embodiments CPU is provided by a microprocessor unit such as that manufactured by Intel Corporation of Mountain View Calif. that manufactured by Motorola Corporation of Schaumburg Ill. that manufactured by Transmeta Corporation of Santa Clara Calif. that manufactured by International Business Machines of White Plains N.Y. or that manufactured by Advanced Micro Devices of Sunnyvale Calif. Computer may be based on any of these processors or any other processor capable of operating as described herein.

In one embodiment network interface is a network interface card NIC that enables CPU to communicate with a network such as the Internet.

In one embodiment memory device is one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the CPU . In some embodiments memory device is a Static random access memory SRAM Dynamic random access memory DRAM or Ferroelectric RAM FRAM . The memory device may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. The CPU communicates with memory device I O interface and network interface via a system bus .

It should be noted that in one embodiment one or more modules and may be stored in memory device and executed by CPU .

Embodiments of the present invention may be practiced with various computer system configurations including hand held devices microprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The embodiments can also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a wire based or wireless network.

With the above embodiments in mind it should be understood that the embodiments can employ various computer implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Any of the operations described herein that form part of the invention are useful machine operations. The invention also relates to a device or an apparatus for performing these operations. The apparatus can be specially constructed for a specific purpose. The apparatus is selectively activated or configured by a computer program stored in the computer.

In one embodiment a module as used herein is embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data which can be thereafter be read by a computer. Examples of the computer readable medium include hard drives network attached storage NAS read only memory ROM random access memory compact disc ROMs CD ROMs CD recordables CD Rs CD rewritables RWs magnetic tapes and other optical and non optical data storage devices. The computer readable medium can include computer readable tangible medium distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.

Although the method operations were described in a specific order it should be understood that other housekeeping operations may be performed in between operations or operations may be adjusted so that they occur at slightly different times or may be distributed in a system which allows the occurrence of the processing operations at various intervals associated with the processing as long as the processing of the overlay operations are performed in the desired way.

Although the foregoing invention has been described in some detail for purposes of clarity of understanding it will be apparent that certain changes and modifications can be practiced within the scope of the appended claims. Accordingly the present embodiments are to be considered as illustrative and not restrictive and the invention is not to be limited to the details given herein but may be modified within the scope and equivalents of the appended claims.

