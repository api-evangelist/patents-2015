---

title: System and method for resource access with identity impersonation
abstract: A gateway device comprising a processor and a memory, the processor is configured to receive a resource request message from an endpoint associated with a user, the resource request message including an external token, a resource operation, and a resource identifier. The processor is also configured to retrieve, from the memory, an authentication identifier associated with one of the endpoint and the user based on the external token and authorize the resource operation with a directory service using the authentication identifier. The processor is further configured to receive an authorization token from the directory service and initiate the resource operation with an internal resource using the authorization token.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09509684&OS=09509684&RS=09509684
owner: FullArmor Corporation
number: 09509684
owner_city: Boston
owner_country: US
publication_date: 20151014
---
Embodiments of the present disclosure relate generally to enterprise computing resources and more particularly but not by way of limitation to a resource access system method and networking protocols for enabling external network access to enterprise computing resources residing in an internal network.

Computing resources such as file servers printers intranet devices and email servers live in a secure corporate network e.g. a corporation s enterprise intranet or internal network that may be managed via a directory service such as ACTIVE DIRECTORY AD Microsoft Corporation Redmond Wash. . Some directory services such as AD handle resource discovery authentication and management of enterprise computing resources and users. Cloud services and cloud connected mobile devices that run outside the corporate network have limited options on ways to connect back into an internal premise domain. Currently the most common way to do this is via a Virtual Private Network VPN setup between the cloud service or client that is outside the network and an internal gateway server inside the corporate network. A VPN allows two services to communicate via a single dedicated tunnel.

 CLIENT DEVICE in this context refers to any machine that interfaces to a communications network to obtain resources from one or more server systems or other client devices. A client device may be but is not limited to a mobile phone desktop computer laptop portable digital assistants PDAs smart phones tablets ultra books netbooks laptops multi processor systems microprocessor based or programmable consumer electronics game consoles set top boxes or any other communication device that a user may use to access a network.

 COMMUNICATIONS NETWORK in this context refers to one or more portions of a network that may be an ad hoc network an intranet an extranet a virtual private network VPN a local area network LAN a wireless LAN WLAN a wide area network WAN a wireless WAN WWAN a metropolitan area network MAN the Internet a portion of the Internet a portion of the Public Switched Telephone Network PSTN a plain old telephone service POTS network a cellular telephone network a wireless network a Wi Fi network another type of network or a combination of two or more such networks. For example a network or a portion of a network may include a wireless or cellular network and the coupling may be a Code Division Multiple Access CDMA connection a Global System for Mobile communications GSM connection or other type of cellular or wireless coupling. In this example the coupling may implement any of a variety of types of data transfer technology such as Single Carrier Radio Transmission Technology 1 RTT Evolution Data Optimized EVDO technology General Packet Radio Service GPRS technology Enhanced Data rates for GSM Evolution EDGE technology third Generation Partnership Project 3GPP including 3G fourth generation wireless 4G networks Universal Mobile Telecommunications System UMTS High Speed Packet Access HSPA Worldwide Interoperability for Microwave Access WiMAX Long Term Evolution LTE standard others defined by various standard setting organizations other long range protocols or other data transfer technology.

 MODULE in this context refers to logic having boundaries defined by function or subroutine calls branch points application program interfaces APIs or other technologies that provide for the partitioning or modularization of particular processing or control functions. Modules are typically combined via their interfaces with other modules to carry out a machine process. A module may be a packaged functional hardware unit designed for use with other components and a part of a program that usually performs a particular function of related functions. Modules may constitute either software modules e.g. code embodied on a machine readable medium or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain physical manner. In various example embodiments one or more computer systems e.g. a standalone computer system a client computer system or a server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein. In some embodiments a hardware module may be implemented mechanically electronically or any suitable combination thereof. For example a hardware module may include dedicated circuitry or logic that is permanently configured to perform certain operations. For example a hardware module may be a special purpose processor such as a Field Programmable Gate Array FPGA or an Application Specific Integrated Circuit ASIC . A hardware module may also include programmable logic or circuitry that is temporarily configured by software to perform certain operations. For example a hardware module may include software executed by a general purpose processor or other programmable processor. Once configured by such software hardware modules become specific machines or specific components of a machine uniquely tailored to perform the configured functions and are no longer general purpose processors. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations. Accordingly the phrase hardware module or hardware implemented module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where a hardware module comprises a general purpose processor configured by software to become a special purpose processor the general purpose processor may be configured as respectively different special purpose processors e.g. comprising different hardware modules at different times. Software accordingly configures a particular processor or processors for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time. Hardware modules can provide information to and receive information from other hardware modules. Accordingly the described hardware modules may be regarded as being communicatively coupled. Where multiple hardware modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses between or among two or more of the hardware modules. In embodiments in which multiple hardware modules are configured or instantiated at different times communications between such hardware modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware modules have access. For example one hardware module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware module may then at a later time access the memory device to retrieve and process the stored output. Hardware modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information . The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions described herein. As used herein processor implemented module refers to a hardware module implemented using one or more processors. Similarly the methods described herein may be at least partially processor implemented with a particular processor or processors being an example of hardware. For example at least some of the operations of a method may be performed by one or more processors or processor implemented modules. Moreover the one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors with these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. an Application Program Interface API . The performance of certain of the operations may be distributed among the processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processors or processor implemented modules may be located in a single geographic location e.g. within a home environment an office environment or a server farm . In other example embodiments the processors or processor implemented modules may be distributed across a number of geographic locations.

 GATEWAY in this context refers to a computing device application or system that performs operations as described herein and not strictly operations associated with typical network gateways. Typical network gateways enable the passing of network traffic between multiple networks sometimes performing network protocol conversion or translation between two different protocols. Typical proxy devices applications or systems act as an agent or a substitute actor for performing an operation on behalf of another. The term gateway as used herein is not meant to limit the operations of the described devices applications or systems to that of a typical network gateway. Rather the gateways described herein may perform operations similar to network gateways proxies or any other operations as described herein.

The description that follows includes systems methods techniques instruction sequences and computing machine program products that embody illustrative embodiments of the disclosure. In the following description for the purposes of explanation numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident however to those skilled in the art that embodiments of the inventive subject matter may be practiced without these specific details. In general well known instruction instances protocols structures and techniques are not necessarily shown in detail.

There are multiple limitations to known approaches when dealing with cloud services and remote computing resources such as the need for lightweight connection pooling and dynamic switching and the heavy requirements on the client and server sides for specialized software and handshake in order to orchestrate a secure connection. Known Virtual Private Network VPN solutions often require dedicated hardware where connections for each user may be opened and maintained even when not actively in use. Because cloud services are transient and often require minimal prerequisites there is a need for a mechanism that can address the dynamic nature of a secure cloud to on premise connection and resource sharing along with the minimal infrastructure requirements of being accessible via a simple web browser heterogeneous cloud connected mobile device or via well established web based APIs.

Further in some situations users may work around the limitations of known systems. For example a user wanting to access files on their intranet may copy their files to an external environment such as an Internet based file hosting service in order to have access to their files while outside the enterprise intranet. This practice is sometimes referred to as shadow IT where users become their own Information Technology IT department by employing alternate systems solutions or applications that circumvent architectural or security limitations of their existing enterprise IT systems. These unsanctioned workarounds can cause many problems such as security issues e.g. unauthorized access to the data data breach data control issues e.g. inability for the business entity to revoke access to the data for terminated employees and version control issues e.g. no synchronization between the multiple copies to name but a few. If users had sufficient access to the internal resources such problems could be avoided.

A Resource Access System method and associated protocols are described herein for addressing these technical problems by providing external network based access to computing resources within a protected network e.g. internal servers or systems within an intranet network of a business entity . In other words and for example the Resource Access System enables computing devices outside of an enterprise network e.g. Internet based devices such as users smartphones or remote computing devices to access internal computing resources intranet components or on premise resources within the enterprise network. The enterprise environment may provide many internal computing resources components or systems to its employees. These intranet components may for example be managed by a directory service such as ACTIVE DIRECTORY AD Microsoft Corporation Redmond Wash. . An AD domain controller provides authentication and authorization services for users of the network e.g. employees such as providing username and password authentication for internal servers personal computers and other intranet computing resources.

For example an employee e.g. the user may have access to their own personal share e.g. directory of files the internal resource or component or a database driven application accessing an internal database resource when logged into their work computer on the enterprise intranet. As such the user may authenticate and authorize use of the internal resource e.g. their share or the internal database through an AD domain controller also within the intranet network. However AD services may be inhibited for devices and or applications outside of that enterprise s intranet and perhaps for some device types not typically joined to the directory service e.g. smartphones tablets making remote access to directory services unavailable or unusable to those devices. Further enterprise application app developers may wish to leverage the advantages of Internet cloud based app deployment e.g. lower cost greater scalability externally accessible when developing new apps or may wish to migrate existing non cloud based apps to the cloud. As such the business entity may develop cloud based apps for use by the employee while remote e.g. when the user is away from the business premises such as via an Internet based cloud service . Accordingly it may be advantageous to provide access to the internal computing resource through the external app and or to the external or endpoint device e.g. access to the employee s share on the employee s mobile device . The term endpoint is used herein for purposes of convenience to refer to the external application and or the external device e.g. from the Internet which is to be the consumer of the internal computing resources i.e. to which access is sought through the Resource Access System described herein.

The Resource Access System RAS performs pass through authentication and impersonation provide external access to internal computing resources of the enterprise. In some example embodiments the RAS includes at least two devices a gatekeeper and a resource gateway or just gateway . The gatekeeper acts as the first point of contact for the endpoint when initiating access to the internal resource s and in some embodiments a router for subsequent traffic from the endpoint to the resource gateway. The gatekeeper resides within the external cloud or other eternal network e.g. the Internet and has network connectivity to endpoint devices of the users or external applications such as the cloud apps. Further the gatekeeper has network connection capability enabled to the resource gateway which resides in the internal network e.g. the intranet as well as perhaps other resource gateways e.g. each supporting different domains or different intranets . For incoming API requests the gatekeeper determines which resource gateway is the target of the API request and forwards the API request accordingly. As such the gatekeeper is able to support multiple resource gateways.

The resource gateway acts on behalf of the endpoint to facilitate access to internal resources such as AD domain servers server systems databases file shares and so forth. The resource gateway provides access to internal resources for the endpoint. To initiate this access the endpoint submits resource requests through to the resource gateway in the form of API calls passed to the gatekeeper and or the resource gateway e.g. as Representational State Transfer REST API calls via Hypertext Transfer Protocol HTTP S and optionally JavaScript Object Notation JSON messages . More specifically when the endpoint initiates resource request operations e.g. via API calls the resource gateway authenticates with an internal directory service e.g. an AD domain controller as the user e.g. with credentials of the user in order to access the internal resources on behalf of the external endpoint. In other words the resource gateway pretends to be the user in order to perform access request operations to the internal resource similar to how the user would were they connected to the intranet and authenticating with the directory service directly. As such the resource gateway appears to the AD domain server to be the user and the internal directory service responds to the operations submitted by the gateway as such.

To enable endpoint communication with the gateway in some embodiments the endpoint includes an API client configured with a suite of application program interface API commands for various resource types e.g. printers file shares databases and so forth and for various resource requests e.g. different operations for the given resource type . The API commands or API calls serve as a message submission format through which the endpoint or app may initiate requests for access to the internal resources. In other words each type of internal resource may have a set of API calls defined where each API call defines a particular operation appropriate for that internal resource.

To perform resource operations on behalf of the external user the gateway includes one or more resource controllers for the various types of internal resources supported by the gateway. For example the gateway may include a database controller e.g. for performing operations with internal databases a share controller e.g. for performing file level operations with users shares a printer controller and so forth. Each of these controllers is customized to perform one or more resource operations with the associated resource type e.g. as also defined by the API operations for that resource type . Each of the API operations includes a resource type and a resource operation as well as additional operational parameters where the resource type may be used to identify a particular controller and where that particular controller is configured to perform each of the various resource operations for that resource type. For purposes of discussion the nomenclature used herein to identify particular operations is API where identifies the resource type and associated controller and where identifies the operation to be performed e.g. on a resource of that . For example the operation API share download indicates a download operation on a share type resource e.g. downloading a file from a particular share .

In some embodiments the Resource Access System provides a user administration system RAS user system that brokers various access controls such as which users will have access to the internal computing resources from the external network. The RAS user system acts as an access control mechanism through which administrators can define or configure which operations may be performed by particular users through the Resource Access System e.g. from the external network . This extra resource control mechanism acts in addition to and beside the resource privileges already afforded through the native AD domain controllers. In other words even though a user may be privileged to access a particular database resource while on the internal network the user administration module may prohibit that same user from accessing the database resource from the external network e.g. for security concerns . The user administration module includes a set of user roles to which each user may be assigned as well as resource privilege assignments for each user.

For example a user may be an employee of the business entity to which the enterprise network belongs. During the user s normal work day the user may operate on a computing device that is directly connected to the enterprise network such as a desktop device or a mobile device A such as a laptop computer. In other words the device A is an internal device that can directly access the directory service for authentication and authorization services e.g. for accessing other internal computing resources without requiring the resource gateway . For example the user may access a share on a fileserver e.g. a server to access the marketing department files and the directory service may authenticate and authorize such access operations directly with the internal device A.

The user may also desire to access the internal computing resources from outside the enterprise network e.g. externally . For example the user may have need to access the marketing department files during an evening or weekend when the user is not at work e.g. not directly attached to the enterprise network . The Resource Access System described herein enables the user and or the endpoint to access the internal computing resources from the external communications network .

To enable such access the Resource Access System includes a resource gateway and a gatekeeper . The gateway resides within the enterprise network e.g. internally and the gatekeeper resides in the external communications network e.g. externally . The gateway and the gatekeeper communicate with each other and or the endpoints e.g. endpoint device over the external communications network . The enterprise network may be separated from the communications network by one or more perimeter devices not separately shown such as a firewall device e.g. a device that prohibits some network traffic but allows other traffic . Further the enterprise network may use private networking addresses such as non routing Internet Protocol IP address ranges. As such the internal computing resources may not be directly accessible to the endpoints. In the example embodiment the gatekeeper operates as a cloud component e.g. as a service running on the cloud services system and the resource gateway operates on an internal server . However the gatekeeper and resource gateway may operate in any software or hardware based architecture that enables the systems and methods described herein.

In the example embodiment the gatekeeper communicates with the resource gateway through communications paths NAT path A that leverage network address translation NAT traversal. The Resource Access System includes a NAT T Server and a NAT T Client that communicate with each other over the communications network . The NAT T Client opens a persistent set of SSL connections to the NAT T Server generally represented in as the NAT path A. During operation the NAT T Client and or NAT T Server may transact communications with each other over the NAT path A. The NAT path A may enable the gatekeeper to communicate with the gateway and avoid some of the network architecture limitations that may be present in the enterprise network . For example the NAT path A may enable the gatekeeper to communicate with the gateway when the gateway may not use port forwarding or may not be located in a DMZ subnetwork within the enterprise network . In some embodiments the Resource Access System may additionally or alternatively include a non NAT path or direct communications path direct path B between the gatekeeper and the gateway . The NAT T Server and or the NAT T Client may open direct HTTPS connections with each other. For example if the network architecture of the enterprise network allows the gatekeeper to directly open TCP IP connections with the gateway then the gatekeeper may open an encrypted connection directly with the gateway e.g. as needed .

The internal computing resources are managed by a directory service such as ACTIVE DIRECTORY AD DOMAIN SERVICES AD DS which may also be referred to herein as an internal computing resource . Each particular type of directory service may manage authentication and authorization operations differently. For example the directory services may be Lightweight Directory Access Protocol LDAP an industry standard application protocol for accessing and maintaining distributed directory information services over IP networks or an LDAP based or Kerberos based directory service similar to AD e.g. providing similar authentication or authorization services such as Oracle Internet Directory OID OpenLDAP or eDirectory. For example LDAP authentication may performed using a bind operation e.g. providing a fully qualified domain name of the user and the user s password to the LDAP service e.g. the directory service using X.500 protocol. Other directory services that provide similar operations as described herein may be supported by the Resource Access System as the directory service . Further multiple types of directory services may be supported individually or concurrently by the Resource Access System .

In the example embodiment the directory service provides user authentication and authorization operations for users such as user and computing resources on the enterprise network including the internal computing resources as well as external endpoints such as endpoint device and endpoint applications. As is generally known in the art authentication may include a process for verifying who a particular computing actor is or whether a particular computing actor is who they say they are. For example an actor or entity may provide credentials such as a login name and password and using that information the directory service may compare the provided login name and password with a directory of known users. If the login name is found and the provided password matches the password stored for that user authentication is completed successfully e.g. the actor is authenticated as that user . Further as is generally known in the art authorization may include a process for verifying whether a particular computing actor e.g. the authenticated user is privileged to access a particular computing resource. In other words while the user may be who they say they are e.g. properly authenticated that user may or may not be privileged to access the particular computing resource. For example the requesting user may attempt to read a file on a share configured for all of the users in the marketing department for an enterprise. As such authentication may include determining whether the requesting user is in a marketing department group of users within the directory service.

The endpoint includes an application that initiates resource operation requests for the internal computing resources through the Resource Access System . The requesting application may be a user level software application a cloud based application a middleware application an operating system level application a database system or a hardware based implementation. Further the endpoint may be provided by an endpoint device such as a server computing device or a personal computing device of the user e.g. external device B or by the cloud services system e.g. as a software as a service application . In the example embodiment the endpoint does not have direct access to the directory service and or the internal computing resources e.g. because of networking constraints and as such engages the Resource Access System to access the internal computing resources . As used herein the term endpoint may be used interchangeably to refer to the requesting application or to the computing device hosting the requesting application or both.

During operation the Resource Access System receives resource requests or resource operation requests from the endpoints . The gatekeeper forwards the resource requests to the gateway e.g. through the NAT T server and client . The resource gateway processes the operations requests with the internal resources on behalf of the endpoint and transmits operations responses back to the gatekeeper and back through to the endpoint . The resource operations requests and operations performed by the gateway and other internal resources are described in greater detail below.

The identity controller is a central controller for the resource gateway that manages interactions with the gatekeeper e.g. initially processing incoming resource requests and transmitting outgoing responses as well as provides certain authentication and authorization operations with active directory . Authentication operations are described in greater detail below particularly in respect to . Authorization operations are described in greater detail below particularly in respect to .

Each of the controllers are associated with one or more particular type s of resource e.g. Oracle databases or Windows network shares or third party applications or one or more particular internal resource s e.g. the printer named MarketingPTR and each are configured to perform one or more resource operations on the associated resource e.g. perform database queries or access files or submit a print request . Each particular internal resource has one or more resource operations that may be performed by the resource gateway on behalf of the endpoint . Further some of the internal resources are managed in some respect by the directory service e.g. active directory for example for authentication and or authorization services. Some of the internal resources may not be directly managed by the directory service and may include their own dedicated directory service. For example some database servers may provide their own directory services for authentication and or authorization of user access requests. The Resource Access System may support either or both types of internal resources those managed by a separate directory service such as AD and those managed by a dedicated directory service in each case still providing external access to the endpoints for the internal resource .

In the example embodiment the directory controller interacts with active directory to perform directory services resource operations e.g. AD DS such as file share access application access authorization services user group and resource inquiries and changes and such. Authorization services are described in greater detail below with respect to . The SharePoint controller interacts with file shares to perform SharePoint resource operations to particular resources e.g. managed by a particular SharePoint server not separately shown . For example the directory controller may initially authorize access to the particular SharePoint server for the user then pass the resource operation request on to the SharePoint Controller which then interacts with the SharePoint server to provide authorization for operation request of the user for that particular resource e.g. which may subsequently involve a callback from the SharePoint server to AD for authorization of the user to the requested resource .

The database controller interacts with database servers to perform database resource operations such as reading modifying writing deleting or otherwise updating data to database servers . The resource gateway may include separate database controllers for different vendors databases e.g. one controller for Oracle databases and another controller for IBM DB2 databases or for different versions of databases e.g. one controller for Oracle version 10x and another controller for Oracle version 11x or for particular databases e.g. one controller for the database named MarketingDB and another controller for the database named ResearchDB . Further as mentioned above some database servers may include their own directory service e.g. for managing authentication and or authorization . As such the database controller or the identity controller may additionally manage authentication and or authorization operations with the database servers directly rather than or in addition to the authentication and or authorization operations conducted with the directory service .

The share controller interacts with file shares to perform share resource operations such as for example file creation read access write access and delete operations and directory and file management operations. The printer controller interacts with printers to perform printer resource operations.

The cloud app controller interacts with internal cloud applications or external resources such as external cloud services e.g. 3party apps to perform various application operations. External resources may include cloud services such as OFFICE 365 Microsoft Corporation Redmond Wash. DROPBOX DropBox Inc. a Delaware Corporation and BOX Box Inc. a Delaware Corporation . The external cloud service for example may be a service available to users of the enterprise network . As such even though the external cloud services may be an external resource in the sense that the cloud service may be outside of the enterprise network and may even be directly accessible by endpoints the gateway may still support resource operation requests to such external resources from endpoints . As such the external cloud services may be treated similar to the internal resources as described herein.

Other controllers may also be included in the resource gateway . Similar to other resource types other controllers may be provided in order to interface with and perform resource operations on other internal resources . These other internal resources may include any applications that support one or more native resource operations that may be submitted by another application e.g. via an API or other interface .

Each internal resource supports one or more native resource operations such as the examples given above. As such the Resource Access System defines a set of resource operations that may be requested by endpoints . More specifically in the example embodiment the Resource Access System defines a set of resource operations for various types of internal resources . Each controller associated with the particular type of resource is configured to perform that set of resource operations on internal resources of that type. These resource operations are defined as a set of API calls that may be submitted by the endpoints or by the gatekeeper on behalf of the endpoints . These API calls and their specific contents are described in greater detail below.

Each of the types of internal resources may support differing avenues of communication between the particular type of internal resource and the associated controller . For example active directory may support resource operations submitted via the X.500 protocol and database servers may support resource operations submitted through custom database connection libraries and printers may support resource operations submitted through device drivers. As such it should be understood that each controller and or resource gateway includes any particular code drivers libraries networking protocols or other software or hardware that enables the particular controllers to perform resource operations and receive response information from the associated internal resources as described herein.

During operation a resource operation request e.g. an API call is submitted by the endpoint to the resource gateway e.g. through the gatekeeper as described above . The resource operation request is passed to a particular controller based on the type of resource associated with the resource operation request. For example if the resource operation request is a database resource operation the resource operation request is passed to the database controller . If the resource operation request is a SharePoint resource operation the resource operation request is passed to the SharePoint controller . The assigned controller then interacts with one or more internal resources to perform the resource operation on behalf of the user and or endpoint . Once the resource operation is complete the results of the resource operation are transmitted back to the endpoint e.g. through the gatekeeper .

The API request identifies an API operation e.g. indicating what resource operation is to be performed and a resource identifier e.g. indicating on what internal resource the resource operation is to be performed . Further the API request also identifies a domain e.g. a domain name associated with the enterprise network and a username of the requesting user e.g. an identifier associated with the user and or a token for the user e.g. a session token or external token as described below . The API request may also include other operational parameters that further clarify or tailor the resource operation based on the type of resource operation being performed. For example the API request may include these and other input variables or other operational parameters associated with the API request in the form of a JSON string or XML block providing one or more individual REST resources e.g. key value pairs .

In the example embodiment the API client constructs the API request to include a resource type and a resource operation as well as additional parameters . In other embodiments the resource type may not be expressly included but rather may be determined from other parameters in the API request such as a resource identifier e.g. of an internal resource . For purposes of discussion the nomenclature used herein to identify particular API operations is API where identifies the resource type and associated controller and where identifies the operation to be performed e.g. on a resource of that such as the internal resource . For example the operation API share download indicates a download operation on a share type resource e.g. downloading a file from a particular share . It should be understood that this nomenclature is for purposes of discussion and not necessarily indicative of the precise syntax of the API request .

As mentioned above in the example embodiment the API request is formatted as HTTP REST messages within which the and information is embedded. For example for a directory operation that retrieves AD users the API request may include GET HTTPS RAS system Directory GetUsers as the HTTP verb and resource path where the is for example a DNS name or IP address of the gatekeeper and where is identified by the folder name Directory in the resource path and the is identified by the file name GetUsers in the resource path e.g. and where RAS system and any folder names preceding the folder may be content insignificant to the processing of the API request by the identity controller . As such this example API request may be referred to herein e.g. under this nomenclature as API Directory GetUsers. Similarly because each includes potentially multiple i.e. each controller associated with a particular resource type may make available multiple resource operations the entire class of resource operations for a given may be referred to herein API . For example API share may be used to refer to an API operation that falls under the share resource type e.g. the share controller or to the class of share API operations.

Returning again to the API client establishes an HTTPS connection with the gatekeeper and transmits the API request across the secure channel for processing. Upon receipt of the API request an API router examines the contents of the API request to determine the domain associated with the request. In the example embodiment the gatekeeper manages multiple domains such as the enterprise network and other networks each of which includes a resource gateway similar to the resource gateway . The API router maintains a mapping table that associates each domain name with a particular gateway. For example presume the enterprise network is associated with the domain name my co.com and the user e.g. John Smith is an employee of MyCo and has a username of jsmith within a domain controller in the enterprise network all purely fictitious for purposes of this disclosure . As such the API router identifies the domain name my co.com from the API request searches the mapping table for my co.com domain identifies an address e.g. an IP address associated with the resource gateway and subsequently forwards the API request to the resource gateway for processing. As such the gatekeeper is able to route resource operation requests between various domains .

The API Router transmits the API request to the gateway through a communications path . As discussed with regard to the gatekeeper and or gateway may leverage the NAT path A or the direct path B for communications across the communications network . The API router may determine which path A B to use for the API request . Upon receiving the API request and after determining which gateway the API request is associated with e.g. gateway the API router checks a communications setting e.g. a Boolean flag associated with the gateway to determine whether the gateway may be directly accessed e.g. via direct path B or whether the gateway uses the NAT T Server and Client for communication e.g. via NAT path A .

For example in some enterprise environments the gatekeeper may be able to initiate TCP IP communications directly with the gateway and as such the API router may establish an encrypted channel over the direct path B with the gateway e.g. HTTPS . In other enterprise environments the gateway may not be directly accessible from the gatekeeper e.g. not in an outer network layer or a DMZ of the enterprise network . To facilitate communications into the gateway the API router may transmit the API request to the NAT T Server . The NAT T Server resides in the external network e.g. in the cloud and in some embodiments may operate as a separate server or service or may operate as a service on the gatekeeper itself or may operate as a part of API router . The NAT T Client resides in the enterprise network and is enabled to open connections out to the portal server e.g. outbound TCP IP connections through a perimeter firewall . The NAT T Client opens one or more persistent SSL connections request channels to the NAT T Server . During a resource access operation such as after receiving the API request the API router transfers the API request to the NAT T Server for transfer to the gateway . After receiving the API request from the API router the NAT T Server identifies one of the open persistent request channels to the appropriate gateway e.g. to the NAT T Client associated with the gateway and transmits the API request e.g. now in HTTP over SSL channel over the NAT path A to the NAT T Client . The NAT T Client then makes for example an HTTPS connection to the resource gateway and transfers the API request on to the gateway for processing. Response messages are transmitted back to the endpoint device or app in similar and reversed fashion e.g. using the persistent SSL connections of the NAT path A back to the gatekeeper .

The NAT T Server may listen on two separate TCP IP ports for connection attempts from multiple sources such as for example 4343 for connection attempts from the NAT T Client s and 4344 for gatekeeper s e.g. API routers . As mentioned above the NAT T Client connections over NAT path A may be requested and persistent SSL connections which may be maintained tracked and used when needed communication with the associated gateway is necessary. The NAT T Client may maintain more than one connection to the NAT T Server as each connection may only service a single request at a time. As such when a new API request passes to the NAT T Client the NAT T Client may establish an additional SSL connection with the NAT T Server for example in order to always maintain at least one open and currently unused connection over the NAT path A between the NAT T Client and the NAT T Server . In some embodiments unused connections may be removed and or new connections may be created in order to maintain a pool of available or unused connections between the NAT T Server and the NAT T Client for that particular NAT T Client .

The resource gateway receives the API request from the gatekeeper and processes the API request . In the example embodiment the identity controller initially fields all incoming requests. The identity controller establishes and maintains a token e.g. a session token for the user that is used for external communications e.g. between the gateway and the gatekeeper and or the endpoint . This token is referred to herein as the external token of the user to distinguish from other tokens associated with the user and communications between components. The identity controller stores the external token of the user in an external token cache . This external token is a session token that is shared with the endpoint and is provided by the endpoint in subsequent API requests to among other things establish authentication credentials for the endpoint e.g. to certify that the user has already logged in . It should be noted that this external token is created as between the gateway and the endpoint and is distinct from any other tokens that may be established for encrypting point to point communications between for example the gateway and the NAT T client the NAT T Client and the NAT T Server the NAT T Server and the gatekeeper the gateway and the gatekeeper or the endpoint and the gatekeeper e.g. tokens that may be created as a part of HTTPS or SSL communications .

The identity controller initially examines the contents of the API request to determine which resource controller e.g. from the pool of resource controllers will perform or process the API request . More specifically in the example embodiment the API request includes a and as described above e.g. as part of an HTTP REST message format . The identity controller uses the to identify the particular controller that will process the API request e.g. from the pool of controllers . The identity controller may identify the resource controller using a mapping table such as the example mapping table shown in Table 1 

For some resource types the identity controller may field the request itself e.g. without passing the API request on to another resource controller . As shown in Table 1 for example the identity controller handles all API Login requests e.g. authentication operations with the Domain Controller . The identity controller performs authentication of the user to establish a token for the user with the directory service e.g. the domain controller . This token is referred to herein as an internal token or an authentication identifier to distinguish from other tokens associated with the user such as the external token described above. In an API Login API request the user provides their authentication credentials e.g. domain username and password for the domain controller in the API request . The identity controller performs authentication with the domain controller and as the user e.g. with the user s credentials . If authentication is successful the domain controller provides the internal token for the user to the identity controller . The identity controller stores the internal token for the user in an internal token cache . Further the identity controller associates the internal token of the user with the external token of the user e.g. in different columns of a shared table or by commonly identifying each based on a separate identifier for the user such as the domain username of the user . In some embodiments the internal token is stored and used by the gateway and is not sent back to the gatekeeper or the endpoint as it is the gateway that will use the internal token to execute resource operations on behalf of e.g. as the user . API Login operations are described in greater detail below with respect to .

For API requests that are not assigned to the identity controller e.g. based on Table 1 the identity controller passes the API request on to the assigned resource controller for processing. In the example embodiment the API request not only includes the as described above but also includes a resource identifier identifying which internal resource e.g. from the pool of internal resources is to be the target of the . In some embodiments a key value pair within the JSON or XML content of the API request may identify the or a particular internal resource e.g. the server name of a particular database or the IP address of a particular printer and the gateway may identify the resource controller and or the internal resource using this data. Accordingly the resource controller identifies the to be performed as well as the internal resource on which to perform the .

As described above the resource gateway e.g. the resource controller performs the on the internal resource as the user e.g. with the user s credentials . More specifically when the resource controller receives the API request for processing the resource controller retrieves the user s internal token from the internal token cache . The resource controller then performs the with the internal resource as the user providing the user s internal token to the internal resource . The internal resource performs authorization for the with the domain controller based on the provided token e.g. identifying the SID of the user and confirming whether the user is permissioned to execute the on that particular internal resource . The processing of resource operations is described below in greater detail with respect to .

After the resource operation is completed with the internal resource the gateway e.g. the particular resource controller generates a response message not separately shown in with the results of the e.g. provided by the internal resource . The Resource Access System defines a schema for each type of resource operation both for the API request as well as the response message. Each response schema includes one or more key value pairs the value s of which may be populated based on the output and or results of performing the resource operation on the internal resource . These key value pairs are assembled as a JSON string or XML block and passed back through the particular communications channels through which the API request was sent not separately illustrated in . As such the endpoint receives the response message and may for example parse the JSON string for the particular fields of interest to the endpoint e.g. results status variables output of the resource operation or other values .

In some embodiments the endpoint may alternatively include a browser client that constructs and transmits API requests to a web service e.g. operated by or otherwise in conjunction with the gatekeeper . The API requests constructed by the browser client are in the form of HTTP requests submitted to the web service from for example a browser on the endpoint . The web service receives the API request from the browser client constructs or reconstructs the API request into an HTTP REST type request as described above e.g. as would be constructed by an API client and submits the API request to the API router for continued processing as described above. In other words the web service acts as an API client proxy for generating API requests in a standard form e.g. like an API client would for endpoints that do not have the API client or for whatever reason submit API requests through the browser client .

In some embodiments the Resource Access System also includes a dedicated user authentication and authorization system specific to the Resource Access System referred to herein as the RAS User System not separately identified in . This RAS User System provides authentication and or authorization services for the incoming API requests and as such are referred to herein as external authentication or external authorization e.g. because an API request from an external endpoint is being authenticated or authorized . Further the RAS User System may be referred to herein as a secondary user system e.g. a user system in addition to the directory service . The identity controller performs such external authentication and authorization operations based on for example the user resource operation resource type and or internal resource identified in the incoming API request . For example the RAS User System may authenticate the endpoint and or the gatekeeper based on the API request e.g. based on the username provided in the API request or based on an external token provided in the API request . Additional details of the external authentication and authorization process is described below with respect to .

At operation the endpoint initiates an API Login request. This request may be similar to the API request shown and described above with respect to and as described above may be generated by the API client on the endpoint or the browser client . The API Login request includes user credentials of the user such as a domain name a user name or ID within that domain and a password. The endpoint transmits the API Login request to the gatekeeper e.g. via an encrypted communications channel such as HTTPS using a DNS name or IP address for the gatekeeper . For example presume our user is still John Smith username jsmith an employee of MyCo which uses the domain name my co.com . As such the API Login request may include domain name user name password of my co.com jsmith AbCdEf12 . The API Login may also include a URL for the domain name that may serve for example to distinguish between multiple sub domains within an overall enterprise. In some embodiments the domain name and or URL may be included as unencrypted text e.g. as the resource path of the REST message and the JSON string may include UserName jsmith Password AbCdEf12.

At operation the gatekeeper receives the API Login request and identifies a target gateway for the request. More specifically the gatekeeper inspects the contents of the API Login request to extract the domain name included within the request. As mentioned above the gatekeeper may process requests for several networks . The gatekeeper uses the domain name included in the API Login request to identify which network and thus which gateway to identify as the target of the API Login request. The gatekeeper maintains a database mapping between domain names and their associated networks and thus their associated gateways. For example a domain mapping table may include an entry for domain name gateway IP of my co.com 11.22.33.44 . The gatekeeper extracts the domain name my co.com from the API Login request searches the domain mapping table to identify the example entry above and identifies the IP address of 11.22.33.44 to use for the target gateway for this request e.g. the resource gateway . It should be understood that the IP address associated with the target gateway may not necessarily be an IP address directly hosted by the gateway. For example the IP address may be hosted by a perimeter device such as an enterprise firewall that performs network address translation for traffic from the gatekeeper to the gateway .

In some embodiments the gatekeeper may use the URL to identify the associated gateway . In other embodiments the gatekeeper may take a client name or client identifier as a part of the API Login request and may determine the associated gateway from the client name or client identifier. In still other embodiments the API Login request may specify the IP address of the gateway and the gatekeeper may simply use that IP address directly as given in the API Login request.

At operation the gatekeeper routes the API Login request to the resource gateway e.g. as described above with respect to the API router . At operation the resource gateway receives the API Login request from the gatekeeper and extracts the user credentials e.g. the domain name the user name the password from the API Login request. At operation the resource gateway initiates an authentication operation with the directory service e.g. the AD domain controller . More specifically the authentication operation with the directory service is performed using the user credentials provided in the API Login request. In other words the resource gateway performs an authentication with the directory service as if it were the user . In the example embodiment the directory service is the AD domain controller .

At operation the directory service authenticates the user credentials sent from the gateway . For example in embodiments where the directory service is AD e.g. using Kerberos authentication the resource gateway may send an authentication request e.g. a Kerberos authentication service request or AS REQ to the Key Distribution Center KDC with the user credentials to an authentication service AS of the domain and the AS may generate and transmit a ticket granting ticket TGT back to the gateway after verifying the user credentials e.g. as an AS REP response . Under AD the TGT is the internal token or authentication identifier for the user and may be locally cached on the gateway e.g. in RAM memory or in the internal token cache .

At test if the directory service determines that the user credentials are not valid then the directory service rejects the authentication request to the gateway . In turn at operation the gateway transmits an API Login failure response to the gatekeeper e.g. in response to the initial API Login REST request . At operation the gatekeeper routes the API Login failure response to the endpoint received by the endpoint at operation .

If at test the directory service determines that the user credentials are valid then the directory service responds with the internal token at operation . At operation the gateway receives the internal token associated with the API Login request and stores the internal token for later use. For example the resource gateway may store the internal token within the internal token cache for use in future API requests of the user .

Referring now to the resource gateway in some embodiments includes the RAS User System described above. is a swimlane flowchart illustrating additional process operations that may be performed by the gateway in such embodiments. At operation the gateway validates the user within the RAS User System. In other words not only is the user validated within the directory service e.g. at operation but the user must also be authenticate and or authorize within the RAS User System. More specifically the RAS User System includes a database of users of the Resource Access System . Each user identified within the RAS User System includes a user identifier that uniquely identifies each user within the RAS User System. In the example embodiment the user identifiers within the RAS User System mirror the user identifiers of the directory service e.g. the domain name and or SID defined within the AD domain controller . In some embodiments the user identifiers may not mirror the user identifiers of the directory service but the RAS User System may maintain a mapping between the RAS User System user identifiers and the associated directory service user identifiers.

The gateway searches the RAS User System for the user identifier associated with the API Login request. At test if the user is not found in the RAS User System or is expressly denied e.g. RAS role None described below or disabled via a Boolean flag or is otherwise not configured in the RAS User System to allow a general login to the Resource Access System then the user is not authorized to use the Resource Access System and the gateway transmits an API Login failure to the gatekeeper at operation . At operation the gatekeeper routes the API Login failure to the endpoint who receives the failure at . In some embodiments operations and are similar to operations and shown in .

If at test the gateway determines that the user is authorized to access the Resource Access System then the gateway determines a role for the user e.g. based on user name . Each user in the RAS User System may be assigned to one of the pre defined roles including Admin User Read Only User and None . A user with role None is not allowed to log in to the Remote Access System and is thus subject to a failure of the API Login request as described above. A user with the role Read Only User is allowed to log into the Remote Access System and can view information but is not allowed to perform any write operations e.g. even if they have permission to perform the operation natively with the resource such as through the directory service . A user with the role User is allowed to perform all user level operations based on the user s native permissions e.g. the RAS User System will not restrict an operation that would otherwise be allowed by the directory service . A user with the role Admin has the permissions equivalent to the role of User plus the ability to administer the RAS User System e.g. including changing user roles such as adding or removing Admins .

In some embodiments the roles are assigned as AD groups e.g. within the AD domain controller . For example group names for each role may be created within AD as RAS Admins RAS Users and RAS ReadOnly . Some directory services such as AD may use a most restrictive approach to resolving permission contention between conflicting rules for the same user. For example presume the user is a member of a group Marketing which is given read write privileges to a file Marketing Spreadsheet.xls . Presume also that the user is also a member of a group Management which is given read only privileges to the same file Marketing Spreadsheet.xls . When the user attempts to access the file for write the directory service determines that the user is given write permission to the file by being a member of the group Marketing but is given read only privileges to that file by the group Management . In such a most restrictive rule resolution scheme the directory service may deny write access to the user in this scenario.

The RAS User System leverages this most restrictive feature of rule resolution of the directory service e.g. the native AD group policy . More specifically and for example the user has privileges defined by the directory service e.g. the AD domain controller by a set of groups A B and C. In other words groups A B and C define what the user can access e.g. while on the enterprise network internally or the resultant set of policies that apply for the user . The RAS User System assigns an extra e.g. additional group to the user when the user accesses the Resource Access System externally e.g. from the Internet which may limit or alter the user s permissions as compared to what they had natively when accessing the enterprise network internally. In other words the RAS roles may leverage the directory service groups to limit or otherwise preempt what the user may otherwise have had access to. The RAS ReadOnly group for example may include read only permissions to resources e.g. altering access control lists ACLs for files that when combined with groups A B and C serve to preempt write privileges that the user may otherwise have had e.g. as described in the example above . These roles and associated groups may be configured to create specific policies specific to users coming in through the Resource Access System . The RAS Users role may be defined as a group with little or no additional restrictive permissions allowing external users to access internal resources as they normally would e.g. were they within the enterprise network internally .

This ability of the RAS User System to leverage the rule conflict resolution attributes of the director service enables the Remote Access System to preempt or override users internal permissions when accessing resources from the external network e.g. restrict access to certain files or certain file servers by adding in one or more additional groups to the user when the user is accessing resources externally. This method of implementation leverages the native features of the directory service . As such administrators may make changes to the RAS User System using normal AD management tools and without affecting or altering the users normal e.g. internal permissions. In other words and continuing the example the RAS User System does not need to modify groups A B and C but simply layers additional groups onto the user s permissions based on the role defined for the user.

As such the roles defined herein provide an additional control that may potentially further restrict what the user may or may not do from outside the enterprise network e.g. restricting some operations that might otherwise be allowed by the internal resources natively . The gateway may control aspects of external access to users that may be significant for various reasons such as for example security or privacy concerns for certain data or certain types of resources e.g. restricting sensitive data from being accessed from outside the network even if that user would normally have access to the data while within the enterprise network user access controls for terminated employees e.g. limiting remote access to terminated employees while they may still retain internal access until their exit date or restricting external access to certain operations that might otherwise be available to the user e.g. prohibiting deletion of files from outside the enterprise network .

At operation the gateway generates an external token for the endpoint. This external token is used during later operations among other things to identify the endpoint and certify that the endpoint has already authenticated with the Remote Access System e.g. that there should already be an internal token stored for this endpoint user . The external token may be stored in the external token cache . Further at operation the gateway associates the external token with the internal token of the user e.g. together in a database . This association may also include the user identifier as well e.g. the domain name and user name from the API Login request . As such the gateway may be able to access any of the other two data elements given the third.

Returning now to the gateway transmits a success response to the API Login request to the gatekeeper at operation . The success response includes the external token as well as a status indicator for the API Login request. At operation the gatekeeper receives the response to the API Login request and routes the response to the appropriate endpoint . At operation the endpoint receives the successful response to the API Login request. Once the endpoint has successfully logged into the Remote Access System the endpoint may commence resource operations through submitting additional API requests as described below with regard to .

At operation the endpoint initiates an API request. This request may be similar to the API request shown and described above with respect to and as described above may be generated by the API client on the endpoint or the browser client . The API request includes the external token of the user e.g. generated and received by the endpoint as described above the domain name and the user SID and operational parameters as described above with respect to the API request e.g. a resource operation an internal resource or other operational parameters associated with particular resource operations . The external token is tied to a session ID associated with the user so they may not be hijacked and maliciously used and may also include an expiration timer.

Table 2 below shows a list of example API requests that may be performed by the Resource Access System for a few example resource types 

The Resource Access System defines an input schema for generating API calls for each particular resource operation as well as an output schema for the output provided by that particular resource operation. For example the resource operation API SQL GetTables may have an input schema listed here in JSON format of 

where the ServerName is the name of a database server provided as a part of the API request. The output schema for this resource operation again listed in JSON format may be 

The fields of the input schema and output schema are defined by the Resource Access System and the endpoint may form API requests e.g. as a part of operation for particular resource operations according to the pre defined input schema for that resource operation as well as expect the particular fields to be populated in successful responses.

Returning to the endpoint transmits the API Login request to the gatekeeper e.g. via an encrypted communications channel such as HTTPS using a DNS name or IP address for the gatekeeper . At operation the gatekeeper receives the API request identifies the targeted gateway for the request and routes the API request to the gateway at operation . Operations and may be similar to operations and .

At operation the resource gateway receives the API request from the gatekeeper and extracts the user credentials e.g. the domain name the user name the external token from the API request. is a flowchart illustrating additional operations for performing operation . As a part of operation the gateway extracts the user and or external token data from the API request at operation A. The gateway accesses the external token cache to verify the validity of the external token provided with the API request. Each external token may include a timeout value or an expiration time for which the external token remains valid. If C the external token is not valid e.g. does not exist in the external token cache or has expired the API request may be rejected by the gateway at operation D and the user may be prompted to re establish a new external token e.g. perform the API Login process again . If C the external token is valid the gateway uses the external token provided with the API request to identify the associated internal token for the user e.g. from the internal token cache . If F the internal token for the user is not valid e.g. does not exist in the internal token cache or has expired the API request may similarly be rejected by the gateway at operation D. If F the internal token is valid then the gateway proceeds with operation .

Referring now to at operation the resource gateway performs an authorization operation with the directory service for the resource operation. is a flowchart illustrating additional operations for performing operation . As a part of operation the gateway determines the resource identified by the API request at operation A. For some resource operations the input schema may include an input variable that identifies the resource such as a resource name an IP address DNS name a TCP port number a share a file name a path and or a directory identifier for the resource e.g. a service principal name SPN . In some embodiments the endpoint may first execute a resource query operation such as for example API Share GetFilesAndFolders which may enumerate and return a list of resources e.g. files and folders to which the user has access. As such from this list of resource the endpoint may identify the specific resource to access e.g. a server name IP address directory path and filename of a file and may use this as the resource name to include as a part of this resource operation.

In some embodiments at operation B the gateway may authorize the API request based on the RAS User System. For example the gateway may check the role of the user against the resource operation or the requested resource. If the role is defined as Read Only User the RAS User System may restrict certain such as API Share DeleteFiles or API Share CheckoutFile. If C the user is not permissioned to perform the particular resource operation identified by the API request or is not permissioned to access the resource identified by the API request for example based on the role of the user then the gateway may reject the API request at operation D and transmit a rejection message to the endpoint . If C the user is permissioned to perform the given API request then the gateway creates and transmits an authorization request to the directory service at operation E. In the example case of AD the authorization request is a Ticket Granting Service Request TGS REQ message to the KDC of the directory service . The TGS REQ identifies the resource by service principal name SPN as well as the internal token of the user e.g. the TGT . Once transmitted then the process shifts to the directory service with operation .

Referring again to at operation the directory service validates user access to the requested resource e.g. as described above through RAS role AD group policies and or file ACLs . If the user is permissioned by the directory service to access the given resource then the directory service issues a service ticket back to the gateway for the API request at operation . In the case of AD the KDC responds with a TGS REP message with the service ticket.

At operation the gateway receives and caches the service ticket from the directory service . At operation the gateway identifies a resource controller for processing the given API request e.g. one of the controllers . As described above with respect to an appropriate controller may be identified in one of several ways such as for example based on the provided with the API request or by the particular resource identified by the API request. At operation the API request is processed by the identified resource controller . Also as described above it should be understood that the various types of resource controllers and or resources may each operate quite differently when performing different resource operations. For example SQL resource type operations performed by a database controller may interact with database servers to perform the various than Share resource type operations performed by share controllers interacting with file shares . In many cases operation includes transmitting the service ticket and or the internal token to the resource .

At operation the resource validates the service ticket. In some embodiments the validation of the service ticket may satisfy authentication of the user for the resource but may not completely satisfy authorization to access the particular resource and or perform the requested operation. The resource may also examine the internal token for additional authorization of the user the particular resource e.g. a particular file on a share and or the requested operation. For example the resource may examine group membership information provided with the Privilege Attribute Certificate PAC from the service ticket. If authorized the resource performs the requested operation at operation and returns a response to the gateway at operation .

At operation the gateway e.g. the resource controller receives the return response e.g. output contents requested file status information from the resource . The gateway then forms a response message that includes some or all of the data received from the resource . More specifically the gateway identifies the output schema for the particular API request and builds the response message with the data from the resource based on that output schema e.g. as a JSON string . At operation the gateway transmits the response message to the gatekeeper who then passes the message back to the endpoint . As described above the endpoint is then able to unpack the response message and extract the requested data thus accomplishing external access to an internal resource through the Resource Access System .

In operation the method includes receiving a login operation request from an external endpoint the login operation request including a user identifier and user login credentials of a user. In some embodiments the login operation request is an application program interface API message formatted as a hypertext transfer protocol HTTP representational state transfer REST message. At operation the method includes constructing an authentication request including the user identifier and the user login credentials.

At operation the method includes transmitting the authentication request to an internal directory service such as the domain controller . At operation the method includes receiving an authentication response from the internal directory service the authentication response including an authentication identifier for the user. In some embodiments the authentication identifier is a Ticket to Grant Tickets TGT . At operation the method includes storing the authentication identifier in the memory the authentication identifier for use by the processor in pass through impersonation of the user.

In some embodiments the method further includes generating an external token associated with the endpoint associating the authentication identifier with the external token and transmitting the external token to the endpoint. In some embodiments the method further includes authorizing the user based on a secondary user system and determining a role for the user based on the user identifier. In some embodiments the method further includes receiving a resource operation request from the endpoint determining the authentication identifier associated with the resource operation request and initiating a resource operation with an internal resource as the user.

In operation the method includes receiving a resource request message from an endpoint associated with a user the resource request message including an external token a resource operation and a resource identifier. In some embodiments the resource request message is an application program interface API message formatted as a hypertext transfer protocol HTTP representational state transfer REST message. In operation the method includes retrieving from the memory an authentication identifier associated with one of the endpoint and the user based on the external token. In some embodiments the authentication identifier is a Ticket to Grant Tickets TGT wherein authorizing the resource operation with the directory service further includes transmitting the TGT to the directory service and the method further includes receiving a service ticket from the directory service.

At operation the method further includes authorizing the resource operation with a directory service using the authentication identifier. At operation the method also includes receiving an authorization token from the directory service. At operation the method further includes initiating the resource operation with an internal resource using the authorization token.

In some embodiments the method also includes providing multiple resource controllers for multiple resource types each resource controller of multiple resource controllers is configured to initiate resource operations on a particular type of internal resource determining a first resource type based on the resource request message and identifying a first resource controller from the multiple resource controllers based on the first resource type wherein the identified first resource controller is associated with the first resource type and wherein the internal resource is of the first resource type.

In some embodiments the method further includes defining multiple application program interface API calls each API call of the multiple API calls including an input schema and an output schema wherein the resource request message is formatted based on the input schema receiving response data from the internal resource based on initiating the resource operation constructing a response message formatted based on the output schema and including the response data and transmitting the response message to the endpoint.

In some embodiments the method also includes performing a second layer authorization of the resource operation based on permissions associated with the user within a secondary user system wherein the second layer authorization is configured to restrict at least one resource operation for the user that is authorized by the directory service.

In operation the method includes receiving by a gatekeeper device residing in an external network a resource operation request from the endpoint the resource operation request is associated with a user. In some embodiments receiving by the gatekeeper device the resource operation request further includes receiving the resource operation request through a web service and the method further includes reformatting the resource operation request into an application program interface API format prior to transmitting the resource operation request to the gateway device. In some embodiments the resource operation request is an application program interface API message formatted as a hypertext transfer protocol HTTP representational state transfer REST message.

In operation the method includes transmitting the resource operation request from the gatekeeper device to a gateway device residing in an internal network. In operation the method includes receiving by the gateway device the resource operation request.

In operation the method includes authenticating with a directory service as the user using credentials of the user. In some embodiments authenticating further includes receiving by the gateway device an internal token associated with the user and the method further includes authorizing the resource operation request using the internal token associated with the user.

In operation the method includes authorizing the resource operation request with the directory service. In operation the method includes initiating the resource operation request with the internal resource.

In some embodiments the resource operation request includes a domain name and the method further includes selecting by the gatekeeper device the gateway device from multiple gateways based on the domain name wherein transmitting the resource operation request to the gateway device is based on the selecting. In some embodiments the method also includes establishing a first connection from the gateway device to the gatekeeper device wherein the first connection is initially unused using the first connection by the gatekeeper device to transmit the resource operation request to the gateway device and establishing a second connection from the gateway device to the gatekeeper device based on the using the first connection. In some embodiments the method further includes generating an external token associated with the endpoint associating the external token with the internal token and identifying the internal token for use in the authorizing after receiving the resource operation request.

It should be noted that the present disclosure can be carried out as a method and embodied in a system. The embodiments described above and illustrated in the accompanying drawings are intended to be exemplary only. It will be evident to those skilled in the art that modifications may be made without departing from this disclosure. Such modifications are considered as possible variants and lie within the scope of the disclosure.

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain physical manner. In various example embodiments one or more computer systems e.g. a standalone computer system a client computer system or a server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In some embodiments a hardware module may be implemented mechanically electronically or any suitable combination thereof. For example a hardware module may include dedicated circuitry or logic that is permanently configured to perform certain operations. For example a hardware module may be a special purpose processor such as a Field Programmable Gate Array FPGA or an Application Specific Integrated Circuit ASIC . A hardware module may also include programmable logic or circuitry that is temporarily configured by software to perform certain operations. For example a hardware module may include software executed by a general purpose processor or other programmable processor. Once configured by such software hardware modules become specific machines or specific components of a machine uniquely tailored to perform the configured functions and are no longer general purpose processors. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the phrase hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner or to perform certain operations described herein. As used herein hardware implemented module refers to a hardware module. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where a hardware module comprises a general purpose processor configured by software to become a special purpose processor the general purpose processor may be configured as respectively different special purpose processors e.g. comprising different hardware modules at different times. Software accordingly configures a particular processor or processors for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Hardware modules can provide information to and receive information from other hardware modules. Accordingly the described hardware modules may be regarded as being communicatively coupled. Where multiple hardware modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses between or among two or more of the hardware modules. In embodiments in which multiple hardware modules are configured or instantiated at different times communications between such hardware modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware modules have access. For example one hardware module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware module may then at a later time access the memory device to retrieve and process the stored output. Hardware modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions described herein. As used herein processor implemented module refers to a hardware module implemented using one or more processors.

Similarly the methods described herein may be at least partially processor implemented with a particular processor or processors being an example of hardware. For example at least some of the operations of a method may be performed by one or more processors or processor implemented modules. Moreover the one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors with these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. an Application Program Interface API .

The performance of certain of the operations may be distributed among the processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processors or processor implemented modules may be located in a single geographic location e.g. within a home environment an office environment or a server farm . In other example embodiments the processors or processor implemented modules may be distributed across a number of geographic locations.

The modules methods applications and so forth described in conjunction with are implemented in some embodiments in the context of a machine and an associated software architecture. The sections below describe representative software architecture s and machine e.g. hardware architecture that are suitable for use with the disclosed embodiments.

Software architectures are used in conjunction with hardware architectures to create devices and machines tailored to particular purposes. For example a particular hardware architecture coupled with a particular software architecture will create a mobile device such as a mobile phone tablet device or so forth. A slightly different hardware and software architecture may yield a smart device for use in the internet of things. While yet another combination produces a server computer for use within a cloud computing architecture. Not all combinations of such software and hardware architectures are presented here as those of skill in the art can readily understand how to implement the systems and methods described herein in different contexts from this disclosure.

In the example architecture of the software may be conceptualized as a stack of layers where each layer provides particular functionality. For example the software may include layers such as an operating system libraries frameworks middleware applications and presentation layer . Operationally the applications and or other components within the layers may invoke application programming interface API calls through the software stack and receive a response returned values and so forth illustrated as messages in response to the API calls . The layers illustrated are representative in nature and not all software architectures have all layers. For example some mobile or special purpose operating systems may not provide a frameworks middleware layer while others may provide such a layer. Other software architectures may include additional or different layers.

The operating system may manage hardware resources and provide common services. The operating system may include for example a kernel services and drivers . The kernel may act as an abstraction layer between the hardware and the other software layers. For example the kernel may be responsible for memory management processor management e.g. scheduling component management networking security settings and so on. The services may provide other common services for the other software layers. The drivers may be responsible for controlling or interfacing with the underlying hardware. For instance the drivers may include display drivers camera drivers Bluetooth drivers flash memory drivers serial communication drivers e.g. Universal Serial Bus USB drivers Wi Fi drivers audio drivers power management drivers and so forth depending on the hardware configuration.

The libraries may provide a common infrastructure that may be used by the applications and or other components and or layers. The libraries typically provide functionality that allows other software modules to perform tasks in an easier fashion than to interface directly with the underlying operating system functionality e.g. kernel services and or drivers . The libraries may include system libraries e.g. C standard library that may provide functions such as memory allocation functions string manipulation functions mathematic functions and the like. In addition the libraries may include API libraries such as media libraries e.g. libraries to support presentation and manipulation of various media format such as MPREG4 H.264 MP3 AAC AMR JPG PNG graphics libraries e.g. an OpenGL framework that may be used to render 2D and 3D in a graphic content on a display database libraries e.g. SQLite that may provide various relational database functions web libraries e.g. WebKit that may provide web browsing functionality and the like. The libraries may also include a wide variety of other libraries to provide many other APIs to the applications and other software components modules.

The frameworks also sometimes referred to as middleware may provide a higher level common infrastructure that may be used by the applications and or other software components modules. For example the frameworks may provide various graphic user interface GUI functions high level resource management high level location services and so forth. The frameworks may provide a broad spectrum of other APIs that may be used by the applications and or other software components modules some of which may be specific to a particular operating system or platform.

The applications include built in applications and or third party applications . Examples of representative built in applications may include but are not limited to a contacts application a browser application a book reader application a location application a media application a messaging application an endpoint application one or more controllers a directory service gateway applications gatekeeper applications and or a game application. Third party applications may include any of the built in applications as well as a broad assortment of other applications. In a specific example the third party application e.g. an application developed using the Android or iOS software development kit SDK by an entity other than the vendor of the particular platform may be mobile software running on a mobile operating system such as iOS Android Windows Phone or other mobile operating systems. In this example the third party application may invoke the API calls provided by the mobile operating system such as operating system to facilitate functionality described herein.

The applications may use built in operating system functions e.g. kernel services and or drivers libraries e.g. system APIs and other libraries frameworks middleware to create user interfaces to interact with users of the system. Alternatively or additionally in some systems interactions with a user may occur through a presentation layer such as presentation layer . In these systems the application module logic can be separated from the aspects of the application module that interact with a user.

Some software architectures use virtual machines. In the example of this is illustrated by virtual machine . A virtual machine creates a software environment where applications modules can execute as if they were executing on a hardware machine such as the machine of for example . A virtual machine is hosted by a host operating system operating system in and typically although not always has a virtual machine monitor which manages the operation of the virtual machine as well as the interface with the host operating system i.e. operating system . A software architecture executes within the virtual machine such as an operating system libraries frameworks middleware applications and or presentation layer . These layers of software architecture executing within the virtual machine can be the same as corresponding layers previously described or may be different.

In the example embodiment the controllers operate as an application s in the applications layer. However in some embodiments the controllers may operate in other software layers or in multiple software layers e.g. framework and application or in any architecture that enables the systems and methods as described herein.

The machine may include processors memory and I O components which may be configured to communicate with each other such as via a bus . In an example embodiment the processors e.g. a Central Processing Unit CPU a Reduced Instruction Set Computing RISC processor a Complex Instruction Set Computing CISC processor a Graphics Processing Unit GPU a Digital Signal Processor DSP an Application Specific Integrated Circuit ASIC a Radio Frequency Integrated Circuit RFIC another processor or any suitable combination thereof may include for example processor and processor that may execute instructions . The term processor is intended to include multi core processor that may comprise two or more independent processors sometimes referred to as cores that may execute instructions contemporaneously. Although shows multiple processors the machine may include a single processor with a single core a single processor with multiple cores e.g. a multi core process multiple processors with a single core multiple processors with multiples cores or any combination thereof.

The memory storage may include a memory such as a main memory or other memory storage and a storage unit both accessible to the processors such as via the bus . The storage unit and memory store the instructions embodying any one or more of the methodologies or functions described herein. The instructions may also reside completely or partially within the memory within the storage unit within at least one of the processors e.g. within the processor s cache memory or any suitable combination thereof during execution thereof by the machine . Accordingly the memory the storage unit and the memory of processors are examples of machine readable media.

As used herein machine readable medium means a device able to store instructions and data temporarily or permanently and may include but is not be limited to random access memory RAM read only memory ROM buffer memory flash memory optical media magnetic media cache memory other types of storage e.g. Erasable Programmable Read Only Memory EEPROM and or any suitable combination thereof. The term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database or associated caches and servers able to store instructions . The term machine readable medium shall also be taken to include any medium or combination of multiple media that is capable of storing instructions e.g. instructions for execution by a machine e.g. machine such that the instructions when executed by one or more processors of the machine e.g. processors cause the machine to perform any one or more of the methodologies described herein. Accordingly a machine readable medium refers to a single storage apparatus or device as well as cloud based storage systems or storage networks that include multiple storage apparatus or devices. The term machine readable medium excludes transitory signals per se.

The I O components may include a wide variety of components to receive input provide output produce output transmit information exchange information capture measurements and so on. The specific I O components that are included in a particular machine will depend on the type of machine. For example portable machines such as mobile phones will likely include a touch input device or other such input mechanisms while a headless server machine will likely not include such a touch input device. It will be appreciated that the I O components may include many other components that are not shown in . The I O components are grouped according to functionality merely for simplifying the following discussion and the grouping is in no way limiting. In various example embodiments the I O components may include output components and input components . The output components may include visual components e.g. displays such as a plasma display panel PDP a light emitting diode LED display a liquid crystal display LCD a projector a cathode ray tube CRT or wearable devices such as head mounted display HMD devices acoustic components e.g. speakers haptic components e.g. a vibratory motor resistance mechanisms other signal generators and so forth. The input components may include alphanumeric input components e.g. a keyboard a touch screen configured to receive alphanumeric input a photo optical keyboard or other alphanumeric input components point based input components e.g. a mouse a touchpad a trackball a joystick a motion sensor or other pointing instrument tactile input components e.g. a physical button a touch screen that provides location and or force of touches or touch gestures or other tactile input components motion sensing input components e.g. hand controllers audio input components e.g. a microphone and the like.

In further example embodiments the I O components may include biometric components motion components environmental components or position components among a wide array of other components. For example the biometric components may include components to detect expressions e.g. hand expressions facial expressions vocal expressions body gestures or eye tracking measure biosignals e.g. blood pressure heart rate body temperature perspiration or brain waves identify a person e.g. voice identification retinal identification facial identification fingerprint identification or electroencephalogram based identification and the like. The motion components may include acceleration sensor components e.g. accelerometer gravitation sensor components rotation sensor components e.g. gyroscope position sensing components and so forth. The environmental components may include for example illumination sensor components e.g. photometer temperature sensor components e.g. one or more thermometer that detect ambient temperature humidity sensor components pressure sensor components e.g. barometer acoustic sensor components e.g. one or more microphones that detect background noise proximity sensor components e.g. infrared sensors that detect nearby objects gas sensors e.g. gas detection sensors to detection concentrations of hazardous gases for safety or to measure pollutants in the atmosphere or other components that may provide indications measurements or signals corresponding to a surrounding physical environment. The position components may include location sensor components e.g. a Global Position System GPS receiver component altitude sensor components e.g. altimeters or barometers that detect air pressure from which altitude may be derived orientation sensor components e.g. magnetometers and the like.

Communication may be implemented using a wide variety of technologies. The I O components may include communication components operable to couple the machine to a network or devices via coupling and coupling respectively. For example the communication components may include a network interface component or other suitable device to interface with the network . In further examples communication components may include wired communication components wireless communication components cellular communication components Near Field Communication NFC components Bluetooth components e.g. Bluetooth Low Energy Wi Fi components and other communication components to provide communication via other modalities. The devices may be another machine or any of a wide variety of peripheral devices e.g. a peripheral device coupled via a Universal Serial Bus USB .

In various example embodiments one or more portions of the network may be an ad hoc network an intranet an extranet a virtual private network VPN a local area network LAN a wireless LAN WLAN a wide area network WAN a wireless WAN WWAN a metropolitan area network MAN the Internet a portion of the Internet a portion of the Public Switched Telephone Network PSTN a plain old telephone service POTS network a cellular telephone network a wireless network a Wi Fi network another type of network or a combination of two or more such networks. For example the network or a portion of the network may include a wireless or cellular network and the coupling may be a Code Division Multiple Access CDMA connection a Global System for Mobile communications GSM connection or other type of cellular or wireless coupling. In this example the coupling may implement any of a variety of types of data transfer technology such as Single Carrier Radio Transmission Technology 1 RTT Evolution Data Optimized EVDO technology General Packet Radio Service GPRS technology Enhanced Data rates for GSM Evolution EDGE technology third Generation Partnership Project 3GPP including 3G fourth generation wireless 4G networks Universal Mobile Telecommunications System UMTS High Speed Packet Access HSPA Worldwide Interoperability for Microwave Access WiMAX Long Term Evolution LTE standard others defined by various standard setting organizations other long range protocols or other data transfer technology.

The instructions may be transmitted or received over the network using a transmission medium via a network interface device e.g. a network interface component included in the communication components and using any one of a number of well known transfer protocols e.g. hypertext transfer protocol HTTP . Similarly the instructions may be transmitted or received using a transmission medium via the coupling e.g. a peer to peer coupling to devices . The term transmission medium shall be taken to include any intangible medium that is capable of storing encoding or carrying instructions for execution by the machine and includes digital or analog communications signals or other intangible medium to facilitate communication of such software.

Throughout this specification plural instances may implement components operations or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the subject matter herein.

Although an overview of the inventive subject matter has been described with reference to specific example embodiments various modifications and changes may be made to these embodiments without departing from the broader scope of embodiments of the present disclosure. Such embodiments of the inventive subject matter may be referred to herein individually or collectively by the term invention merely for convenience and without intending to voluntarily limit the scope of this application to any single disclosure or inventive concept if more than one is in fact disclosed.

The embodiments illustrated herein are described in sufficient detail to enable those skilled in the art to practice the teachings disclosed. Other embodiments may be used and derived therefrom such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. The Detailed Description therefore is not to be taken in a limiting sense and the scope of various embodiments is defined only by the appended claims along with the full range of equivalents to which such claims are entitled.

As used herein the term or may be construed in either an inclusive or exclusive sense. Moreover plural instances may be provided for resources operations or structures described herein as a single instance. Additionally boundaries between various resources operations modules engines and data stores are somewhat arbitrary and particular operations are illustrated in a context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within a scope of various embodiments of the present disclosure. In general structures and functionality presented as separate resources in the example configurations may be implemented as a combined structure or resource. Similarly structures and functionality presented as a single resource may be implemented as separate resources. These and other variations modifications additions and improvements fall within a scope of embodiments of the present disclosure as represented by the appended claims. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

