---

title: Protecting websites from cross-site scripting
abstract: Methods and systems for protecting websites from cross-site scripting are disclosed. A request for a web page comprising a web page element is received from a client. It is determined if the web page comprises a data integrity token for the web page element. It is also determined if a value of the data integrity token matches an expected value. If the web page comprises the data integrity token and if the value matches the expected value, the web page comprising the web page element is sent to the client. If the web page does not comprise the data integrity token or if the value does not match the expected value, a protective operation is performed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09553865&OS=09553865&RS=09553865
owner: Amazon Technologies, Inc.
number: 09553865
owner_city: Reno
owner_country: US
publication_date: 20150511
---
This application is a continuation of U.S. application Ser. No. 13 663 256 filed Oct. 29 2012 now U.S. Pat. No. 9 032 519 which here is hereby incorporated by reference in its entirety.

Website operators such as online merchants are engaged in an ongoing battle to maintain information security. The complexity of the internet s infrastructure is accompanied by numerous security vulnerabilities. One such vulnerability is known as cross site scripting. A cross site scripting exploit may be used by an attacker to breach the security of a web browser or other web based application. By breaching a browser s security the attacker may gain access to a user s session at a particular website. For a user engaged in a session at the website of an online merchant for example a cross site scripting exploit may permit an attacker to gain access to private information associated with the user s session such as financial information authentication credentials and or elements of the user s personal identity e.g. a real name an e mail address etc. .

In particular a cross site scripting flaw may be exploited to enable an attacker to inject a client side script into a web page. The client side script may be injected into a web page sent by a server to the client without the knowledge or consent of the server s operators. When processed in the client s browser the script may access private information stored in one or more cookies or other storage elements in the memory of the browser. The script may forward the stolen information to a third party recipient for potential use in fraudulent or otherwise malicious schemes.

Cross site scripting exploits are often placed into two categories non persistent and persistent. In a non persistent or reflected exploit data provided to a server by a client e.g. the client s browser may be included in a web page sent back to the client without properly sanitizing the data. The data introducing the exploit is typically provided to the client through a link to the server provided by a third party. The link may contain an injected script or any other content that is interpretable as code by the browser. When the improperly sanitized data is sent i.e. reflected from the server back to the client the injected script may be executed on the client s browser. In a persistent or stored exploit data introducing the exploit is stored by the web server and provided by the server to each client that requests a particular web page. The data may include a script that is executed on the client side when provided by the server to the client. The script may be introduced into the server s web page through user supplied content from a malicious third party. Whether the script is sent to the client using the non persistent or persistent type of exploit execution of the script on the client side may result in sensitive information being stolen and or misused.

Accordingly it is desirable for website operators to have techniques for detecting and or remediating cross site scripting exploits.

While embodiments are described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that embodiments are not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to. 

Various embodiments of methods and systems for protecting websites from cross site scripting are described. Using the systems and methods described herein a data integrity token having a checksum as its value may be added to particular web page elements e.g. tags and or attributes when web pages are generated. Before a page is sent to a client any web page element that lacks the data integrity token or the correct checksum may be subjected to protective or remedial action. For example a web page element that fails the integrity check may be negated or made ineffective e.g. by escaping it removing it or replacing it with a comment or the sending of the page may be blocked. In this manner the use of both persistent and non persistent cross site scripting exploits may be prevented.

In one embodiment the cross site scripting filter system and its components may be managed by an online merchant. A client computer system may communicate with the cross site scripting filter system over one or more networks e.g. the internet . Using the web server web pages and their components e.g. images video audio scripts etc. may be sent to a client browser upon receiving appropriate requests from the browser. The browser may comprise any suitable set of program instructions executable to receive web data and render web pages based on the web data. Web pages may be generated in accordance with a markup language such as HTML HyperText Markup Language . In one embodiment the web server may generate elements of a web page dynamically e.g. upon request from a client browser . In generating a web page the web server may retrieve elements of web pages from storage. The web server may host one or more web servers under a domain such as amazon.com. Individual ones of the web servers may be hosted at related addresses within the same domain e.g. server 1.amazon.com and server 2.amazon.com. In one embodiment different ones of the web servers may be tasked with providing different types of data to client browsers. For example one set of web servers may provide textual elements of web pages and another set of web servers may provide images referenced in the web pages.

A third party computer system also referred to herein as a third party may be coupled to the client and or web server over the network s . The third party computer system may be managed by a third party that seeks to use a cross site scripting exploit to gain illegitimate access to private information associated with the client computer system and or browser . The private information may comprise financial information authentication credentials elements of the user s personal identity e.g. a real name an e mail address etc. and or any other information stored using the client computer system and or browser that is not intended to be available to the third party . Additionally the third party computer system may exploit a cross site scripting flaw to collect anonymous usage statistics. The third party computer system may comprise a web server an e mail server a web client or any other suitable computer system for exploiting a cross site scripting flaw to access the client s information.

Using the filter module a script or any other set of instructions provided by the third party may be subjected to protective or remedial action before a requested web page is sent from the web server to the client computer system . As used herein the term script may refer to a script tag or any reference invoking a set of instructions. In one embodiment a third party script may be escaped in a web page by encoding the script e.g. using an HTML comment so that it will not be automatically executed in the browser . In one embodiment a third party script may be removed from a web page sent from the web server to the client . In one embodiment a requested page containing a third party script may not be sent to the client . In one embodiment an alternative page or a redirect link may be sent to the client instead of the requested page if the requested page includes a third party script. The use of the cross site scripting filter system to protect websites from cross site scripting is discussed in greater detail below.

The data integrity token may comprise any suitable token that is usable to verify that the associated web page element is secure from a cross site scripting exploit. In one embodiment the data integrity token may be a custom attribute such as X or any other suitable token. The value of the data integrity token may be a hash of one or more values generated using a hash function such that the data integrity token for each vulnerable item is indicated as X hash value . In one embodiment the value of the data integrity token may be a checksum. The value of the data integrity token may be generated as a hash of one or more values such as a request identifier request ID for the requested web page the injectable content of the web page element and or any other suitable values e.g. a secure key . A request ID may be generated internally by the web server for each requested web page in a manner that is difficult for an outside entity to predict such as by using a random or pseudo random number generator.

In one embodiment the value of the data integrity token may be calculated as a checksum based on the request ID and the injectable content of the web page element. The injectable content of the web page element comprises any part of a web page element e.g. a tag attribute or other control element where malicious content may be injected. In one embodiment the value of the custom X attribute is calculated as follows tag.attribute NmtokenBase64 Concatenate 24 24 canonize tag If the tag contains content e.g. a tag then that content may also be included in the output of the canonize tag function. In one embodiment the canonize tag function supplies the following text into the CRC24 function the tag name a null byte all tag attributes except the special X attribute in alphanumeric order where each tag attribute is represented as an attribute name an equals sign an attribute value and a null byte and if this is a script or style tag the content between the start of this tag and the closing tag. In one embodiment NmtokenBase64 is an XML Nmtoken name token as modified for base64.

Before the web page is sent to the client a cross site scripting filter may verify the presence of the data integrity token and the correctness of its value for each protected web page element in the web page. The filter may iterate through every web page element e.g. tag attribute or other control element beginning with a first web page element. As shown in the filter may determine if the web page element in the current iteration is protected. As discussed above the protected status of each web page element may be determined using a lookup table. If the web page element in the current iteration is not protected the method may proceed to to determine whether all the web page elements have been checked. If there are web page elements not yet checked by the filter then the method may proceed to the next web page element as shown in . When all the web page elements have been checked the method may end.

If the web page element in the current iteration is protected then the filter may determine if the web page element includes the data integrity token as shown in . If the protected web page element does include the data integrity token then the filter may generate the expected value of the data integrity token as shown in . In one embodiment the expected value of the data integrity token may be generated using the same technique or function e.g. hash function and using the same input e.g. the request ID for the page the injectable content etc. as used in . As shown in the filter may determine if the value e.g. a hash or checksum for the data integrity token matches the expected value. If the values match then the protected web page element passes the integrity check and the method may proceed to to determine whether all the web page elements in the web page have been checked. If there are web page elements not yet checked by the filter then the method may proceed to the next web page element as shown in .

If a protected web page element does not have the data integrity token or if the value of the token does not match the expected value then the integrity check fails and the web page may be considered to include a cross site scripting exploit. Accordingly as shown in the cross site scripting exploit may be remediated. In various embodiments the remediation operation may use various techniques to protect the client browser from the cross site scripting exploit. In one embodiment remediation comprises modifying the web page to negate an effect of the web page element or otherwise to render the web page element ineffective. In one embodiment a remediated script may be escaped in the modified web page by encoding the script e.g. as an HTML comment so that it will not be automatically executed in the browser . In one embodiment the remediated script may be removed from the web page element in the modified web page. In one embodiment remediation comprises replacing the script with a comment e.g. an HTML comment that includes an identifier of an entry in a log file where the entry in the log file provides details of the attempt to use the cross site scripting exploit. If the web page is sent to the client then when the page is rendered in the client s browser the script introduced using the cross site scripting exploit will not be run due to the remediation operation performed in . In one embodiment remediation comprises blocking the access of the client to the web page e.g. by not sending the web page . In one embodiment remediation comprises sending an alternative web page or a redirect link to the client instead of the requested web page. The alternative web page or the page at the redirect link may inform a user of the client browser of the attempted use of the cross site scripting exploit.

The method may end after all the protected web page elements in the web page have been checked. If none of the protected web page elements failed the integrity check then the original web page may be sent to the client and safely rendered in the client browser. In one embodiment a modified version of the original web page may be sent to the client after all the protected web page elements have been checked where the modified web page includes one or more remediated cross site scripting exploits. The modified web page may also be safely rendered in the client browser.

The filter module may apply a data integrity token verification functionality to each protected web page element in the web page. As discussed above with respect to any protected web page element that lacks the data integrity token or the correct expected value of the data integrity token may be deemed to constitute a cross site scripting exploit. In one embodiment any cross site scripting exploits may be filtered by performing a protective or remediative operation such that the exploits are made ineffective e.g. by deleting them from the web page by escaping them by confining them to comments or by blocking the page altogether. The result of this filtering may be referred to as a filtered web page . In one embodiment the filtered web page may comprise a different web page or a redirect link to warn the user of the attempted use of a cross site scripting exploit. The web server may send the filtered web page to the requesting client for safe rendering in the browser .

In one embodiment the web page rendering module may include a cross site scripting protection API Application Programming Interface . The cross site scripting protection API may permit developers to add cross site scripting filtering functionality to elements of web pages. For example the cross site scripting protection API may provide a set of tools for automatically adding cross site scripting protection instrumentation to web pages and their constituent elements such as HTML templates or other HTML components. The cross site scripting protection API may be used to add the data integrity token e.g. X to each protected web page element in an HTML document. In one embodiment web pages and their elements may be instrumented with the data integrity token before a relevant web page is requested by a client. The addition of the data integrity tokens may be a manual process an automated process or a mixed manual automated process. In one embodiment a developer or administrator of the cross site scripting filtering system may selectively apply the cross site scripting filtering to different combinations of web page elements e.g. tags and attributes . In one embodiment the value of the data integrity token may be added e.g. based on a hash function at runtime after the web page request is received and a corresponding request ID is generated. In one embodiment an existing base of code for web pages may be converted for use with the cross site scripting filter system using the cross site scripting protection API .

In one embodiment the cross site scripting protection API may provide the following type definitions and functions 

The function new tag may create an HTML tag with the specified name. The function add attr may add a non scriptable key value pair. To add a data integrity token to a scriptable attribute the add script attr API may be used instead. To generate a script tag the body of the script may be appended to using the add script body API. In one embodiment the script t type is a filename or abstract key that points at a static script which is passed in the json value.

The json value t object may be implemented in accordance with a suitable data interchange format such as JavaScript Object Notation JSON . In one embodiment the json value t type may be defined as follows 

In one embodiment the cross site scripting protection API may also provide the following function for including the contents of a file after adding the data integrity token e.g. the X attribute to each tag inside the file 

Examples of cross site scripting exploits that may be filtered using a cross site scripting filter system are discussed as follows. In a first example a cross site scripting exploit is contained in the following link received by the web server 

If this link were to be processed by the web server and reflected back to the client the vulnerable HTML output would include the following text 

The exploit may be detected because the filter module expects the security e.g. X attribute in tags. Because the tag injected by the attacker does not have an X attribute the filter module may replace the tag with the following comment where the comment identifies an entry in a log file that provides details of the attempt at using the cross site scripting exploit 

If this web data were to be processed by the web server and sent to the client the vulnerable HTML output would include the following code 

If this web data were to be processed by the web server and sent to the client the vulnerable HTML output would include the following code 

In at least some embodiments a computer system that implements a portion or all of one or more of the technologies described herein such as the cross site scripting filter system may include a general purpose computer system that includes or is configured to access one or more computer readable media. illustrates such a general purpose computing device . In the illustrated embodiment computing device includes one or more processors coupled to a system memory via an input output I O interface . Computing device further includes a network interface coupled to I O interface .

In various embodiments computing device may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may include any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store program instructions and data accessible by processor s . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing one or more desired functions such as those methods techniques and data described above are shown stored within system memory as code i.e. program instructions and data .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computing device and other devices attached to a network or networks such as other computer systems or devices as illustrated in for example. In various embodiments network interface may support communication via any suitable wired or wireless general data networks such as types of Ethernet network for example. Additionally network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

In some embodiments system memory may be one embodiment of a computer readable i.e. computer accessible medium configured to store program instructions and data as described above for for implementing embodiments of the corresponding methods and apparatus. However in other embodiments program instructions and or data may be received sent or stored upon different types of computer readable media. Generally speaking a computer readable medium may include non transitory storage media or memory media such as magnetic or optical media e.g. disk or DVD CD coupled to computing device via I O interface . A non transitory computer readable storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc that may be included in some embodiments of computing device as system memory or another type of memory. Further a computer readable medium may include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface . Portions or all of multiple computing devices such as that illustrated in may be used to implement the described functionality in various embodiments for example software components running on a variety of different devices and servers may collaborate to provide the functionality. In some embodiments portions of the described functionality may be implemented using storage devices network devices or special purpose computer systems in addition to or instead of being implemented using general purpose computer systems. The term computing device as used herein refers to at least all these types of devices and is not limited to these types of devices.

Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer readable medium. Generally speaking a computer readable medium may include storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM etc. ROM etc. In some embodiments a computer readable medium may also include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as network and or a wireless link.

The various methods as illustrated in the Figures and described herein represent exemplary embodiments of methods. The methods may be implemented in software hardware or a combination thereof. In various of the methods the order of the steps may be changed and various elements may be added reordered combined omitted modified etc. Various of the steps may be performed automatically e.g. without being directly prompted by user input and or programmatically e.g. according to program instructions .

Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended to embrace all such modifications and changes and accordingly the above description is to be regarded in an illustrative rather than a restrictive sense.

