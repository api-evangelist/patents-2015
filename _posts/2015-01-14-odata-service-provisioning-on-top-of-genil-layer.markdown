---

title: OData service provisioning on top of GenIL layer
abstract: The disclosure generally describes computer-implemented methods, software, and systems for allowing provisioning of open data protocol (OData) services on top of a generic interaction layer (GenIL). One computer-implemented method includes receiving an OData-compliant request for data, determining a GenIL data provider to receive the OData-compliant request for data, determining the memory location of the data, requesting the data from the determined memory location, receiving the requested data from the determined memory location, converting, using at least one computer, the received data into an OData-compliant format, rendering an OData-compliant response, and transmitting the OData-compliant response.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09436362&OS=09436362&RS=09436362
owner: SAP SE
number: 09436362
owner_city: Walldorf
owner_country: DE
publication_date: 20150114
---
This application claims priority under 35 U.S.C. 120 to U.S. application Ser. No. 13 463 406 filed May 3 2012 and now issued as U.S. Pat. No. 9 043 829 issued May 26 2015 and also claim priority under 35 U.S.C. 119 to Chinese Patent Application No. 201210126439.X filed Apr. 26 2012 both disclosures of which are incorporated herein by reference.

The present disclosure relates to computer implemented methods software and systems for allowing provisioning of OData services on top of a GenIL layer.

Access to a business suite system is typically provided through a custom graphical user interface which interfaces with back end business objects and data through a business object layer using an associated generic interaction layer GenIL . With the rise in use of mobile computing and other computing platforms such as smart phones and tablet computers the use of open data protocol OData is becoming more prevalent. Allowing devices to access the business suite system using OData has necessitated the development of custom OData GenIL interfaces. The development of the custom OData GenIL interfaces has resulted in a high cost of development and maintenance for each OData GenIL interface and an overall higher total cost of ownership for the business suite system.

The present disclosure relates to computer implemented methods software and systems for allowing provisioning of OData services on top of a GenIL layer. One computer implemented method includes receiving an OData compliant request for data determining a GenIL data provider to receive the OData compliant request for data determining the memory location of the data requesting the data from the determined memory location receiving the requested data from the determined memory location converting using at least one computer the received data into an OData compliant format rendering an OData compliant response and transmitting the OData compliant response.

Other implementations of this aspect include corresponding computer systems apparatus and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform particular operations or actions by virtue of having software firmware hardware or a combination of software firmware or hardware installed on the system that in operation causes or causes the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

The foregoing and other implementations can each optionally include one or more of the following features alone or in combination. In particular one implementation can include all the following features 

In a first aspect combinable with the general implementation the OData compliant request for data is for at least one of an object model or object model associated runtime data.

In a second aspect combinable with any of the previous aspects the OData compliant request for data is generated pre runtime.

In a third aspect combinable with any of the previous aspects the object model associated runtime data is associated with an object model mapped from a GenIL compliant format to an OData compliant format.

In a fourth aspect combinable with any of the previous aspects the GenIL data provider is for providing GenIL compliant data for at least one of an object model or runtime data.

In a fifth aspect combinable with any of the previous aspects the request for data from the determined memory location is in a GenIL compliant format.

A sixth aspect combinable with any of the previous aspects includes constructing an OData object model from the received data.

The subject matter described in this specification can be implemented in particular implementations so as to realize one or more of the following advantages. First a generic adaptor may be implemented to facilitate communication between OData services and a GenIL interface communicating with a back end memory. Second there is no need to deploy any portion of the adaptor on the back end memory. Third the generic adaptor is transparent to existing applications. Fourth the generic adaptor supports object model customization flexibility through the use of a variety of customizable OData compliant tools. Other advantages will be apparent to those skilled in the art.

The details of one or more implementations of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

The disclosure generally describes computer implemented methods software and systems for allowing provisioning of OData services on top of a GenIL layer. For the purposes of this disclosure a business suite is a bundle of business applications that provide integration of information and processes collaboration tools industry specific functionality and scalability. The business suite provides the delivery of end to end business processes which span organizational boundaries such as business departments and locations integrates business partners such as customers suppliers and service providers and allows an organization to align business plans budgets and operational reports. With only a web browser business suite users can begin work once they have been authenticated offering a single point of access to information functionality and services. The business suite may present information from diverse sources in a unified and structured way and provide additional services such as dashboards an internal search engine e mail news navigation tools and various other features. The business suite is often used by enterprises to providing their employees customers and possibly additional users with a consistent look and feel and access control and procedures for multiple applications which otherwise would have been separate entities altogether.

Generally through a graphical user interface GUI a business suite user is provided with an efficient and user friendly presentation of data provided by or communicated within the system. The term graphical user interface or GUI may be used in the singular or the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore a GUI may represent any graphical user interface including but not limited to a web browser a touch screen or a command line interface CLI that processes information and efficiently presents the information results to the user. In general a GUI may include a plurality of user interface UI elements some or all associated with a web browser such as interactive fields pull down lists and buttons operable by the business suite user. These and other UI elements may be related to or represent the functions of the web browser.

In general the business suite server is a server that stores one or more business applications where at least a portion of the business applications are executed via requests and responses sent to users or clients within and communicably coupled to the illustrated example distributed computing system . In some implementations the business suite server may store a plurality of various business applications . In other implementations the business suite server may be a dedicated server meant to store and execute only a single business application . In some implementations the business suite server may comprise a web server where the business applications represent one or more web based applications accessed and executed by the client via the network or directly at the business suite server to perform the programmed tasks or operations of the business application .

At a high level the business suite server comprises an electronic computing device operable to receive transmit process store or manage data and information associated with the example distributed computing system . Specifically the business suite server illustrated in is responsible for receiving application requests for example business suite navigation requests from one or more client applications associated with the client of the example distributed computing system and responding to the received requests by processing said requests in the associated business application and sending the appropriate response from the business application back to the requesting client application . In addition to requests from the client requests associated with the business applications may also be sent from internal users external or third party customers other automated applications as well as any other appropriate entities individuals systems or computers.

As used in the present disclosure the term computer is intended to encompass any suitable processing device. For example although illustrates a single business suite server environment can be implemented using two or more servers as well as computers other than servers including a server pool. Indeed business suite server may be any computer or processing device such as for example a blade server general purpose personal computer PC Macintosh workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further illustrated business suite server may be adapted to execute any operating system including Linux UNIX Windows Mac OS Java Android iOS or any other suitable operating system. According to one implementation business suite server may also include or be communicably coupled with an e mail server a web server a caching server a streaming data server and or other suitable server.

The business suite server also includes an interface a processor and a memory . The interface is used by the business suite server for communicating with other systems in a distributed environment including within the environment connected to the network for example the client as well as other systems communicably coupled to the network not illustrated . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated example distributed computing system .

As illustrated in the business suite server includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of the environment . Each processor may be a central processing unit CPU a blade an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally the processor executes instructions and manipulates data to perform the operations of the business suite server . Specifically the processor executes the functionality required to receive and respond to requests from the client and or allowing provisioning of OData services on top of a GenIL layer.

Regardless of the particular implementation software may include computer readable instructions firmware wired and or programmed hardware or any combination thereof on a tangible medium transitory or non transitory as appropriate operable when executed to perform at least the processes and operations described herein. Indeed each software component may be fully or partially written or described in any appropriate computer language including C C Objective C Java Visual Basic assembler Perl any suitable version of 4GL as well as others. While portions of the software illustrated in are shown as individual modules that implement the various features and functionality through various objects methods or other processes the software may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The business suite server also includes a memory or multiple memories . The memory may include any type of memory or database module and may take the form of volatile and or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. The memory may store various objects or data including caches classes frameworks applications backup data jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the business suite server . Additionally the memory may include any other appropriate data such as VPN applications firmware logs and policies firewall policies a security or access log print or other reporting files as well as others. While memory is illustrated as in integral component of the business suite server in alternative implementations memory can be external to the business suite server and or the example distributed computing system .

The business suite server further includes an application programming interface API . The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function or even a set of APIs. In some implementations the API can be used to interface between the business application and or one or more components of the business suite server or other components of the example distributed computing system both hardware and software. For example in one implementation the business application can utilize API to communicate with the client . Although the API is shown as a stand alone component within the business suite server there may be multiple other APIs in the example distributed computing system that are integrated into or accessible by individual components both hardware and software.

The service layer provides software services to the example distributed computing system . The functionality of the business suite system may be accessible for all service consumers via this service layer. Software services such as business suite navigation provide reusable defined business functionalities through a defined interface. The defined interface may be software written in extensible markup language XML or other suitable language. While illustrated as an integrated component of the business suite server in the example distributed computing system alternative implementations may illustrate the service layer as a stand alone component in relation to other components of the example distributed computing system . Moreover any or all parts of the service layer may be implemented as child or sub modules of another software module or enterprise application not illustrated or of another hardware module not illustrated without departing from the scope of this disclosure.

The memory i.e. a back end data system holds data for the business suite server . In some implementations the memory includes a business object business object model and business object model data . Although illustrated as single instances there may be more than one instance of the business object business object model and business object model data .

The business object can be considered a representation of an intelligible business non business entity such as an account an order employee an invoice a financial report etc. The business object may encompass both functions for example in the form of methods and data such as one or more properties. For example an account business object may have properties such as Name Priority Value etc. Business objects may reduce system complexity by reducing a system into smaller units. The implementation details of business objects are typically hidden from a non development user and may be accessed through the defined functions and encapsulated data. Business objects also form a point of entry of the functions and data of a system and enable the system to easily share communicate display or otherwise operate with other systems. A business object may also be considered the target of a request for data in a particular business suite for example through a web page and may contain a view to be displayed when the business object is accessed. In some implementations the business object can control the location of a selected view personalized views for a specific business suite user and dynamic views. While illustrated as integrated with memory of the business suite server in the example distributed computing system in alternative implementations the business object can be stored external to the business suite server .

The business object model is a structured way of representing relationships associations roles etc. of business objects applicable to an organization. For example the business object model may be represented through the use of an entity relationship diagram ERD or other suitable diagram or descriptive method. An example a business object model for ProductSeller may include root business objects such as Account and Order each of which may contain their own methods properties and relationships to other dependent objects in the business object model . The root business objects may also have associations with other dependent business objects . Examples of a dependent object for the Account root business object may include AccountAddressUS. Example dependent objects for the Order rood business object may include OrderPartner and OrderItemShipmentData. While illustrated as integrated with memory of the business suite server in the example distributed computing system in alternative implementations the business object model can be stored external to the business suite server .

The business object model data is data associated with a specific instance of a business object . For example for the example AccountAddressUS dependent object above there may be properties Name Title Address1 Address2 City State and PostalCode. Business object data would be the data associated with each property for example Name XYZ Inc. Address1 12345 Any Street Address2 Suite ABC City Some City etc. In some implementations the business object model data may include among other things text images sounds videos and animations. While illustrated as integrated with memory of the business suite server in the example distributed computing system in alternative implementations the business object model data can be stored external to the business suite server .

Turning now to is a block diagram illustrating a client GUI multi tier architecture . Access to the business suite server as indicated within dashed line is provided through a client described below for example a web browser or other suitable GUI application interfacing with a user interface UI presentation layer that further interfaces with an application programming interface API not illustrated provided by a business objects layer BOL . From this point on the presentation layer and the business objects layer will collectively be referred to as the BOL . The BOL APIs provide a consistent interface for a GUI application to access business objects associated with the business application .

Associated with the BOL is a generic interaction layer GenIL which provides a consistent interface for the BOL to access business application business objects through APIs and for the business application to return data to the client . At a high level GenIL acts as a bridge between the client and the business application . Because of this architecture the client is not affected by changes to the underlying business application business objects as long as the BOL GenIL APIs interface s does not change. This architecture also generally ensures that changes to a particular layer API etc. can also be isolated from affecting other layers APIs etc.

Open Data Protocol OData is a web protocol for querying and updating data and allows for a user to request data from a data source over the Hypertext Transfer Protocol and receive results back from the data source in formats such as Atom Publishing Protocol Atom Javascript Object Notation JSON Extensible Markup Language XML etc. In some implementations the request may be divided into multiple segments. In some implementations the multiple request segments may made and or received concurrently and or in parallel. Mobile computing and other computing platforms such as smartphones and tablet computers can use OData and are an increasingly important method of access to business suite information. To provide access to the business suite server using OData compliant computing platforms an OData GenIL Adaptor OGA is used to at least provide pre runtime object model mapping and runtime conversion of data associated with the mapped object model.

In some implementations the OGA can be implemented as software and or hardware and may include one or more software and or hardware modules to provide the pre runtime object model mapping and runtime conversion of data services.

Turning now to illustrate an example of a pre runtime mapping by the OGA of an object model for example the object model ProductSeller described above from a GenIL compliant format here in an advanced business application programming ABAP language to an OData compliant model here in XML as shown by the header . For example if prior to runtime a particular client requests to view and or edit the ProductSeller business object model the OGA will convert the GenIL compliant model retrieved from the memory to an OData compliant model to transmit the particular client . In the example conversion the GenIL compliant model Root objects are mapped to an OData compliant XML EntityType . Likewise the GenIL compliant Aggregation relations are mapped to an OData compliant XML Association . As will be apparent to one of ordinary skill there are multiple possible mappings apart from the examples shown. In some implementations the mapping is done automatically while in other implementations client input through a GUI may be required to complete the mapping. In some implementations the mapping can be bi directional. In some implementations the GenIL compliant model and or the OData compliant model may be pre processed and or post processed as part of the mapping between the model formats.

Once the object model has been mapped by the OGA a request by client for runtime data associated with the mapped object model will at a high level be requested from the memory converted by the OGA from a GenIL format for example ABAP to an OData compliant format for example XML and returned to the client . For example if a particular client requests all orders from accounts with Name XYZ Inc. between January 1 to March 31 a request is made by the OGA to memory to retrieve the applicable runtime data corresponding to the mapped data model . The returned runtime data if any is converted from a GenIL compliant format to an OData compliant format and returned to the client . In some implementations the conversion is done automatically while in other implementations client input through a GUI may be required to complete the conversion. In some implementations the conversion is bi directional. In some implementations the GenIL compliant runtime data and or the OData compliant runtime data may be pre processed and or post processed as part of the conversion. In some implementations runtime data can be requested and converted prior to or in the absence of a mapping of a data model. In some implementations requests for and or processing of runtime data can be different depending upon whether the runtime data is associated with a root object or with a dependent object and or single or multiple data sets are requested. In some implementations OData requests for and or processing of runtime data generated by client GUI actions for example pressing a GUI button selecting a menu item generating a navigation request etc. can be different depending upon the specific client GUI action and or whether the client GUI action calls a method and or generates a query dynamic query.

The OGA may be implemented in various ways within the example distributed computing system . In one implementation the OGA can be incorporated into the gateway server . In another implementation the OGA can be incorporated into the business suite server .

Mobile computing platforms may access the business suite server through the gateway server . The gateway server provides a defined API and acts as an interface gateway between a client and the business suite server . In some implementations the gateway server can communicate with clients using OData through hypertext transfer protocol HTTP or hypertext transfer protocol secure HTTPS requests. In some implementations the gateway server can use a remote function call RFC interface to communication with ABAP and or non ABAP programs. In some implementations the gateway server can be stand alone. In some implementations the gateway server can be incorporated into any component of the example distributed computing system . In some implementations the gateway server may be a hardware server a software server and or a virtual server. In some implementations the gateway server can be part of a web server a streaming server an RSS server or other suitable server.

Turning now to is a block diagram illustrating an updated client GUI multi tier architecture with the OGA incorporated into the gateway server . At a high level the gateway server receives OData compliant requests from client and using the OGA the gateway server converts the OData compliant request into a GenIL compliant request and communicates the request to the BOL using the GenIL . BOL receives data responsive to the OData request from the GenIL and transmitted to the OGA . The OGA converts the received data to OData compliant data. The gateway server transmits the converted OData compliant data to the client . While illustrates the OGA as integrated with gateway server in alternative implementations all or portions of the OGA can be implemented in other components of the example distributed computing system or the OGA can interface with the gateway server as a stand alone component.

Turning now to is a block diagram illustrating the architecture of the gateway server and the OGA incorporated within the gateway server . The gateway server includes metadata component runtime component and the OGA . The runtime component also determines which business add in BADI to use to load a requested object model from the BOL . In some implementations BADIs are supplied by a client. In other implementations BADIs are supplied by the gateway server owner.

The metadata component manages metadata within the gateway server . The metadata describes OData models that are exposed as OData service documents and OData metadata documents. The metadata may contain references to object models. The metadata infrastructure manages access to gateway server content bases upon metadata exposes the standardized description of OData services by assembling OData service documents and metadata documents from internal and external sources. The service registry is a data store storing a linkage between a particular OData service and an actual implementation of the particular OData service.

The runtime component analyzes and processes requests from client . In some implementations the runtime component embeds features such as automatic logging and tracing configuration based routing transaction handling etc. In some implementations some common services can be offered using an API for reuse by an OData runtime . Examples of common services may include metering services for enabling usage based charging and push service notifications. The OData runtime contains functionality required to exposes OData services. The generic runtime processes protocol agnostic gateway server content. The generic runtime remains stateless between individual requests and access to backend memories.

The OGA includes a model provider for GenIL and a business data provider for GenIL . The generic GenIL model provider transforms a GenIL compliant model to an OData compliant model and vice versa. A generic GenIL data provider connects with the GenIL and reads processes data associated with an object model.

Turning now to is a flow chart for mapping a requested object model from a GenIL compliant format to an OData compliant format with the GenIL OData Adaptor incorporated into the gateway server. For clarity of presentation the description that follows generally describes method in the context of . However it will be understood that method may be performed for example by any other suitable system environment software and hardware or a combination of systems environments software and hardware as appropriate. For example one or more of the business suite server the client or other computing device not illustrated can be used to execute method and obtain any data from the memory of the client the business suite server or the other computing device not illustrated .

At an OData compliant request is made by a client to a gateway server for an object model. From method proceeds to .

At the metadata component of the gateway server receives the client initiated OData compliant request. The metadata component determines the proper model data provider for GenIL and delegates the request to it. In some implementations the model data provider for GenIL can be a BADI. The determined BADI requests the client requested object model from the OGA. From method proceeds to .

At the OGA receives the BADI initiated request for the client requested object model. The OGA determines the client requested object model and the location of the client requested object model at the business suite back end memory. The OGA requests the client requested object model from the GenIL with a GenIL compliant request. From method proceeds to .

At the GenIL receives the OGA initiated request for the client requested object model. The GenIL loads the object model from the business suite server back end memory. The GenIL transmits the loaded object model to the OGA. From method proceeds to .

At the OGA receives the GenIL loaded object model from the GenIL. The OGA converts the received object model to OData and transmits the OData to the metadata component of the gateway server. From method proceeds to .

At the metadata component of the gateway server receives the OGA converted OData from the OGA. The metadata component of the gateway server constructs an OData compliant model from the received OData. From method proceeds to .

At the metadata component of the gateway server renders an OData compliant response with the constructed OData compliant model. The metadata component transmits the rendered OData compliant response to the client. From method proceeds to .

At the client receives the metadata component rendered OData response containing the constructed OData object model. The client processes the received OData response. After method stops.

Turning now to is a flow chart for converting runtime data associated with an object model mapped from a GenIL compliant format to an OData compliant format with the GenIL OData Adaptor incorporated into the gateway server. For clarity of presentation the description that follows generally describes method in the context of . However it will be understood that method may be performed for example by any other suitable system environment software and hardware or a combination of systems environments software and hardware as appropriate. For example one or more of the business suite server the client or other computing device not illustrated can be used to execute method and obtain any data from the memory of the client the business suite server or the other computing device not illustrated .

At an OData compliant request is made by a client to a gateway server for runtime data associated with an object model. From method proceeds to .

At the runtime component of the gateway server receives the client initiated OData compliant request. The runtime component determines the proper runtime data provider for GenIL and delegates the request to it. In some implementations the runtime data provider for GenIL can be a BADI. The determined runtime data provider for GenIL requests the client requested runtime data from the OGA. From method proceeds to .

At the OGA receives the BADI initiated request for the client requested runtime data. The OGA determines the client requested runtime data and the location of the client requested runtime data at the business suite back end memory. The OGA requests the client requested runtime data from the GenIL with a GenIL compliant request. From method proceeds to .

At the GenIL receives the OGA initiated request for the client requested runtime data. The GenIL loads the runtime data from the business suite server back end memory. The GenIL transmits the loaded runtime data to the OGA. From method proceeds to .

At the OGA receives the GenIL loaded runtime data from the GenIL. The OGA converts the received runtime data to OData and transmits the OData to the runtime component of the gateway server. From method proceeds to .

At the runtime component of the gateway server renders an OData compliant response with the constructed OData compliant runtime data. The runtime component transmits the rendered OData compliant response to the client. From method proceeds to .

At the client receives the runtime component rendered OData response containing the OData runtime data. The client processes the received OData response. After method stops.

Turning now to is a block diagram illustrating an updated client GUI multi tier architecture with the OGA incorporated into the business suite server . At a high level the gateway server receives OData compliant requests from client and transmits the OData compliant request to the BOL . The OGA converts the OData compliant request into a GenIL compliant request and communicates the request to the BOL . BOL receives data responsive to the OData compliant request from the GenIL and transmits the received data to the OGA . The OGA converts the received data to OData compliant data. The OData compliant data is transmitted to the gateway server and from the gateway server the client . While illustrates the OGA as integrated with the business suite server in alternative implementations all or portions of the OGA can be implemented in other components of example distributed computing system or the OGA can interface with the business suite server as a stand alone component.

Turning now to is a block diagram illustrating the architecture of the business suite server with the OGA as indicated within the dashed line as incorporated within the business suite server . The OGA includes a gateway service enablement tool gateway GenIL model analyzer GenIL model provider and generic GenIL data provider .

The gateway service enablement tool reads GenIL compliant OData Compliant model information analyzes the read information using the gateway GenIL model analyzer and generates a corresponding OData compliant GenIL compliant model respectively. The generic GenIL model provider transforms a GenIL compliant model to an OData compliant model and vice versa. A generic GenIL data provider connects with the GenIL and reads processes data associated with an object model. The OData channel add on is a gateway server add on for backend memory enablement and provisioning allowing OData channel development.

Turning now to is a flow chart for a mapping of a requested object model from a GenIL compliant format to an OData compliant format with the GenIL OData Adaptor incorporated into the business suite server. For clarity of presentation the description that follows generally describes method in the context of . However it will be understood that method may be performed for example by any other suitable system environment software and hardware or a combination of systems environments software and hardware as appropriate. For example one or more of the business suite server the client or other computing device not illustrated can be used to execute method and obtain any data from the memory of the client the business suite server or the other computing device not illustrated .

At an OData compliant request is made by a client to a gateway server for an object model. From method proceeds to .

At the metadata component of the gateway server receives the client initiated OData compliant request. The metadata component determines the proper model data provider for GenIL and delegates the request to it. In some implementations the model data provider for GenIL can be a BADI. The determined BADI requests the client requested object model from the OData channel add on. From method proceeds to .

At the OData channel add on receives the BADI initiated request for the client requested object model and forwards the request to the OGA. From method proceeds to .

At the OGA determines the client requested object model and the location of the client requested object model at the business suite back end memory. The OGA requests the client requested object model from the GenIL with a GenIL compliant request. From method proceeds to .

At the GenIL receives the OGA initiated request for the client requested object model. The GenIL loads the object model from the business suite server back end memory. The GenIL transmits the loaded object model to the OGA. From method proceeds to .

At the OGA receives the GenIL loaded object model from the GenIL. The OGA converts the received object model to OData and transmits the OData to the OData channel add on. From method proceeds to .

At the OData channel add on transmits the OData to the metadata component of the gateway server. From method proceeds to .

At the metadata component of the gateway server receives the OGA converted OData from the OData channel add on. The metadata component of the gateway server constructs an OData compliant model from the received OData. From method proceeds to .

At the metadata component of the gateway server renders an OData compliant response with the constructed OData compliant model. The metadata component transmits the rendered OData compliant response to the client. From method proceeds to .

At the client receives the metadata component rendered OData response containing the constructed OData object model. The client processes the received OData response. After method stops.

Turning now to is a flow chart for converting runtime data associated with an object model mapped from a GenIL compliant format to an OData compliant format with the GenIL OData Adaptor incorporated into the business suite server. For clarity of presentation the description that follows generally describes method in the context of . However it will be understood that method may be performed for example by any other suitable system environment software and hardware or a combination of systems environments software and hardware as appropriate. For example one or more of the business suite server the client or other computing device not illustrated can be used to execute method and obtain any data from the memory of the client the business suite server or the other computing device not illustrated .

At an OData compliant request is made by a client to a gateway server for runtime data associated with an object model. From method proceeds to .

At the runtime component of the gateway server receives the client initiated OData compliant request. The runtime component determines the proper runtime data provider for GenIL and delegates the request to it. In some implementations the runtime data provider for GenIL can be a BADI. The determined runtime data provider for GenIL requests the client requested runtime data from the OData channel add on. From method proceeds to .

At the OData channel add on receives the BADI initiated request for the client requested runtime data from the gateway server runtime component. The OData channel add on delegates the request to the OGA. From method proceeds to .

At the OGA determines the client requested runtime data and the location of the client requested runtime data at the business suite back end memory. The OGA requests the client requested runtime data from the GenIL with a GenIL compliant request. From method proceeds to .

At the GenIL receives the OGA initiated request for the client requested runtime data. The GenIL loads the runtime data from the business suite server back end memory. The GenIL transmits the loaded runtime data to the OGA. From method proceeds to .

At the OGA receives the GenIL loaded runtime data from the GenIL. The OGA converts the received runtime data to OData and transmits the OData to the OData channel add on. From method proceeds to .

At the OData channel add on returns the OData to the runtime component of the gateway server. From method proceeds to .

At the runtime component of the gateway server renders an OData compliant response with the constructed OData compliant runtime data. The runtime component transmits the rendered OData compliant response to the client. From method proceeds to .

At the client receives the runtime component rendered OData response containing the OData runtime data. The client processes the received OData response. After method stops.

Returning to the illustrated example distributed computing system also includes the client or multiple clients . The client may be any computing device operable to connect to or communicate with at least the business suite server via the network using a wireline or wireless connection. In general the client comprises an electronic computer device operable to receive transmit process and store any appropriate data associated with the example distributed computing system .

The illustrated client further includes a client application . The client application is any type of application that allows the client to request and view content on the client . In some implementations the client application can be and or include a web browser. In some implementations the client application can use parameters metadata and other information received at launch to access a particular set of data from the server . Once a particular client application is launched a user may interactively process a task event or other information associated with the business suite server . Further although illustrated as a single client application the client application may be implemented as multiple client applications in the client .

The illustrated client further includes an interface a processor and a memory . The interface is used by the client for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the business suite server as well as other systems communicably coupled to the network not illustrated . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the example distributed computing system .

As illustrated in the client includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of the example distributed computing system . Each processor may be a central processing unit CPU an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally the processor executes instructions and manipulates data to perform the operations of the client . Specifically the processor executes the functionality required to send requests to the business suite server and to receive and process responses from the business suite server .

Further the illustrated client includes a GUI . The GUI interfaces with at least a portion of the example distributed computing system for any suitable purpose including generating a visual representation of a web browser. In particular the GUI may be used to view and navigate various web pages located both internally and externally to the business suite server .

The illustrated client also includes a memory or multiple memories . The memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. The memory may store various objects or data including caches classes frameworks applications backup data business objects jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the client . Additionally the memory may include any other appropriate data such as VPN applications firmware logs and policies firewall policies a security or access log print or other reporting files as well as others.

There may be any number of clients associated with or external to the example distributed computing system . For example while the illustrated example distributed computing system includes one client alternative implementations of the example distributed computing system may include multiple clients communicably coupled to the business suite server and or the network or any other number suitable to the purposes of the example distributed computing system . Additionally there may also be one or more additional clients external to the illustrated portion of the example distributed computing system that are capable of interacting with the example distributed computing system via the network . Further the term client and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover while the client is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

The illustrated client is intended to encompass any computing device such as a desktop computer laptop notebook computer wireless data port smart phone personal data assistant PDA tablet computing device one or more processors within these devices or any other suitable processing device. For example the client may comprise a computer that includes an input device such as a keypad touch screen or other device that can accept user information and an output device that conveys information associated with the operation of the business suite server or the client itself including digital data visual information or a GUI as shown with respect to the client .

Although this disclosure discusses an adaptor providing an interface between OData and GenIL as will be appreciated by one of ordinary skill in the art the adaptor may be adapted to provide an interface between any suitable communication protocols and or data formats without departing from the spirit of the disclosure.

The preceding figures and accompanying description illustrate example processes and computer implementable techniques. But example distributed computing system or its software or other components contemplates using implementing or executing any suitable technique for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time including concurrently individually in parallel and or in combination. In addition many of the steps in these processes may take place simultaneously concurrently in parallel and or in different orders than as shown. Moreover example distributed computing system may use processes with additional steps fewer steps and or different steps so long as the methods remain appropriate. Process steps may also be executed and described software services may also execute on various components of example distributed computing system so long as the methods remain appropriate.

In other words although this disclosure has been described in terms of certain implementations and generally associated methods alterations and permutations of these implementations and methods will be apparent to those skilled in the art. Accordingly the above description of example implementations does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

