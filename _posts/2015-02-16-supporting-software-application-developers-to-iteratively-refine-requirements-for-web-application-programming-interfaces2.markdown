---

title: Supporting software application developers to iteratively refine requirements for web application programming interfaces
abstract: Providing Web API recommendations for a context of an application is provided. A ranked list of recommended Web APIs and a set of Web API recommendations regarding the context of the application is sent to a client device via a network. In response to determining that a selection of a set of Web APIs in the ranked list of recommended Web APIs was received, the selected set of Web APIs is added to the context of the application to generate a new context of the application. A display of a relationship among the set of added Web APIs to the new context of the application is sent to the client device via the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09588738&OS=09588738&RS=09588738
owner: International Business Machines Corporation
number: 09588738
owner_city: Armonk
owner_country: US
publication_date: 20150216
---
The disclosure relates generally to Web application programming interfaces and more specifically to supporting software application developers to iteratively refine requirements for Web application programming interfaces Web APIs .

An application programming interface API is a set of routines protocols and tools for building software applications. An API makes it easier for software developers to develop a software application by providing basic building blocks. These basic building blocks provide functions and sets of attributes associated with those functions including behavior and execution of those functions. A software developer then puts the basic building blocks together to create the software application. In essence a software application s API defines the proper way for the software developer to request services from that software application. A Web API makes these services available through the Web to a potentially large set of consuming applications.

Web APIs may be used for accessing a Web based software service. Multiple Web APIs may be composed to accomplish a function unbeknownst to an end user. For example when an end user buys movie tickets online and enters credit card information the movie ticket Web site uses a Web API to send the credit card information to a remote software application that verifies whether the credit card information is correct. Once payment is confirmed the remote software application sends a response back to the movie ticket Web site indicating that the move ticket Web site may issue the tickets to the end user. The end user only sees the movie ticket Web site interface but behind the scenes many software applications are working together using different Web APIs to provide the Web based software service. Thus Web based software service applications may be based on many different Web APIs from multiple sources.

According to one illustrative embodiment a computer implemented method for providing Web API recommendations for a context of an application is provided. A computer sends a ranked list of recommended Web APIs and a set of Web API recommendations regarding the context of the application to a client device via a network. In response to the computer determining that a selection of a set of Web APIs in the ranked list of recommended Web APIs was received the computer adds the selected set of Web APIs to the context of the application to generate a new context of the application. The computer sends a display of a relationship among the set of added Web APIs to the new context of the application to the client device via the network. According to other illustrative embodiments a computer system and a computer program product for recommending Web API requirements for a context of an application are provided.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

With reference now to the figures and in particular with reference to diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that are only meant as examples and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

In the depicted example server and server connect to network along with storage . Server and server may be for example server computers with high speed connections to network . In addition server and server may provide a set of one or more services to client devices connected to network . For example server and server may provide one or more Web API recommendation services to software application developers of registered client devices. A Web API recommendation service is a process that provides a software application developer with sets of one or more Web APIs recommendations while developing a Web based software service application within a particular context including attributes of the recommended Web APIs and potential new Web API requirements that the software application developer may consider to further refine the Web based software service application. The context of the software application is a set of aspects related to the development and execution of the particular software application. For example the set of aspects related to the development and execution of the particular software application may include legal requirements of the application performance requirements of the application business goals and functions associated with the application target audience of the application goal of the application functionality of the application et cetera.

Client device client device and client device also connect to network . Client devices and are registered clients to server or server . In the depicted example server or server may provide information such as boot files operating system images software applications Web APIs specific portions of Web APIs and Web API recommendations to client devices and .

In this example client devices and are computers such as desktop computers or network computers with wire or wireless communication links to network . However it should be noted that client devices and are intended as examples only. In other words client devices and may include laptop computers tablet computers handheld computers smart phones and personal digital assistants for example.

Storage is a network storage device capable of storing data in a structured format or unstructured format. Storage may provide storage of a plurality of different client device user names and associated identification numbers user profiles and user account information associated with the Web API recommendation service. Storage also may store software applications Web APIs specific portions of Web APIs Web API usage histories for development and refinement of different application contexts attributes of each of the different Web APIs relationships and dependencies between the different Web APIs graph based Web API data models previous Web API recommendations for particular software service application contexts and the like. Further storage unit may store other data such as authentication or credential data that may include user names passwords and biometric data associated with the plurality of users e.g. software application developers and system administrators. It should be noted that storage unit may store any data that may be utilized by the Web API recommendation service.

In addition it should be noted that network data processing system may include any number of additional server devices client devices and other devices not shown. Program code located in network data processing system may be stored on a computer readable storage medium and downloaded to a computer or other data processing device for use. For example program code may be stored on a computer readable storage medium on server and downloaded to client device over network for use on client device .

In the depicted example network data processing system may be implemented as a number of different types of communication networks such as for example an internet an intranet a local area network LAN and a wide area network WAN . is intended as an example and not as an architectural limitation for the different illustrative embodiments.

With reference now to a diagram of a data processing system is depicted in accordance with an illustrative embodiment. Data processing system is an example of a computer such as server in in which computer readable program code or instructions implementing processes of illustrative embodiments may be located. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software applications and programs that may be loaded into memory . Processor unit may be a set of one or more hardware processor devices or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices . A computer readable storage device is any piece of hardware that is capable of storing information such as for example without limitation data computer readable program code in functional form and or other suitable information either on a transient basis and or a persistent basis. Further a computer readable storage device excludes a propagation medium. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage may be removable. For example a removable hard drive may be used for persistent storage .

In this example persistent storage stores Web API recommendation application application context Web API search terms Web API recommendation query Web API relationship engine Web API search results and new application context . Web API recommendation application is a software program that provides the Web API recommendation service to a software application developer while developing a software application including attributes of recommended Web APIs and potential new Web API requirements that the software application developer may consider to further refine the software application. Application context is a set of aspects related to the development and execution of the particular software application such as for example legal requirements of the application performance requirements of the application business goals and functions associated with the application target audience of the application goal of the application functionality of the application et cetera. Web API recommendation application receives initial application context from the software application developer via a network using a registered client device such as client device in .

In addition Web API recommendation application also receives Web API search terms from the software application developer. Web API search terms correspond to application context and include initial Web API requirements for the context of the application being developed or refined. Initial Web API requirements for the context of the application may include for example an initial list of required Web APIs selected by the software application developer for the context of the application i.e. application context a category from which to select and recommend other Web APIs for the context of the application full text search terms used to search for other recommended Web APIs for the context of the application attributes or characteristics such as quality of service QoS and terms of service ToS for other recommended Web APIs et cetera.

After receiving Web API search terms which include initial Web API requirements Web API recommendation application defines Web API recommendation query for the context of the application. Web API recommendation query includes for example Web API search terms and the initial list of required Web APIs selected by the software developer for the context of the application. Web API recommendation application sends Web API recommendation query to Web API relationship engine . Web API relationship engine identifies a list of recommended Web APIs for the context of the application using graph based Web API data model . Graph based Web API data model is a model in the form of a graph structure which includes Web API data for the context of the application. Web API data includes for example names and descriptions of Web APIs attributes of the Web APIs and relationships between the Web APIs for the context of the application. However it should be noted that graph based Web API data model may represent a plurality of different graph based Web API data models for a plurality of different contexts for a plurality of different applications.

Web API relationship engine sends Web API search results to Web API recommendation application . Web API search results contains ranked list of recommended Web APIs for the context of the application and set of Web API recommendations . Ranked list of recommended Web APIs is a list of recommended Web APIs ranked by order of relationship to the context of the application. For example Web API relationship engine will list a recommended Web API with a highest or strongest relationship to the context of the application first in ranked list of recommended Web APIs . Set of Web API recommendations may include information such as for example instructions on how to use one or more of the Web APIs within ranked list of recommended Web APIs or what data format to use with the Web APIs.

Afterward Web API recommendation application sends Web API search results to the software application developer for review and possible selection of recommended Web APIs within ranked list of recommended Web APIs . API recommendation application may then add any recommended Web API selections made by the software application developer to application context to generate new application context . New application context is a refined or modified version of the application containing the added Web APIs. Subsequently Web API recommendation application may iterate through the process for new application context to further refine new application context by recommending further Web APIs to add to new application context .

Communications unit in this example provides for communication with other computers data processing systems and devices via a network such as network in . Communications unit may provide communications through the use of both physical and wireless communications links. The physical communications link may utilize for example a wire cable universal serial bus or any other physical technology to establish a physical communications link for data processing system . The wireless communications link may utilize for example shortwave high frequency ultra high frequency microwave wireless fidelity Wi Fi bluetooth technology global system for mobile communications GSM code division multiple access CDMA second generation 2G third generation 3G fourth generation 4G 4G Long Term Evolution LTE LTE Advanced or any other wireless communication technology or standard to establish a wireless communications link for data processing system .

Input output unit allows for the input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keypad a keyboard a mouse and or some other suitable input device. Display provides a mechanism to display information to a user and may include touch screen capabilities to allow the user to make on screen selections through user interfaces or input data for example.

Instructions for the operating system applications and or programs may be located in storage devices which are in communication with processor unit through communications fabric . In this illustrative example the instructions are in a functional form on persistent storage . These instructions may be loaded into memory for running by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and run by a processor in processor unit . The program code in the different embodiments may be embodied on different physical computer readable storage devices such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for running by processor unit . Program code and computer readable media form computer program product . In one example computer readable media may be computer readable storage media or computer readable signal media . Computer readable storage media may include for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . Computer readable storage media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . In some instances computer readable storage media may not be removable from data processing system .

Alternatively program code may be transferred to data processing system using computer readable signal media . Computer readable signal media may be for example a propagated data signal containing program code . For example computer readable signal media may be an electro magnetic signal an optical signal and or any other suitable type of signal. These signals may be transmitted over communication links such as wireless communication links an optical fiber cable a coaxial cable a wire and or any other suitable type of communications link. In other words the communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communication links or wireless transmissions containing the program code.

In some illustrative embodiments program code may be downloaded over a network to persistent storage from another device or data processing system through computer readable signal media for use within data processing system . For instance program code stored in a computer readable storage media in a data processing system may be downloaded over a network from the data processing system to data processing system . The data processing system providing program code may be a server computer a client computer or some other device capable of storing and transmitting program code .

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. The different embodiments may be implemented using any hardware device or system capable of executing program code. As one example data processing system may include organic components integrated with inorganic components and or may be comprised entirely of organic components excluding a human being. For example a storage device may be comprised of an organic semiconductor.

As another example a computer readable storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable storage media are examples of physical storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

In the course of developing illustrative embodiments it was discovered that the use of Web based service APIs is becoming more prevalent. As the number of Web based service APIs continues to grow more companies will utilize Web based service architectures. As a result a software application developer may continually change a set of Web APIs consumed by a Web based service application based on feedback by users of the Web based service QoS defined for the Web based service ToS defined for the Web based service change in Web API requirements for the Web based service et cetera. Currently Web API requirements are collected via Web search using a standard search engine and Web API selection is usually done individually without regard for the entire context of the application. Consequently compatibility between selected Web APIs is not addressed and integration gaps are difficult to identify using current methods.

Illustrative embodiments support a software application developer in continuously defining and redefining the requirements regarding the use of Web APIs and the implied integration aspects required to build an application within a particular context. Illustrative embodiments enable an iterative approach to define Web API requirements when using a set of Web APIs and leveraging the attributes and relationships among the set of Web APIs required for the context of the application. Illustrative embodiments continuously adapt Web API requirements for the context of the application based on the Web API recommendations issued by the illustrative embodiments. A Web API recommendation may instruct a software application developer to use a particular data format with a recommended Web API or to use a particular authorization method with the recommended Web API for example.

In addition illustrative embodiments continuously update Web API recommendations for the context of an application as illustrative embodiments continuously adapt the Web API requirements for the context of the application. Illustrative embodiments assemble a set of recommended Web APIs along with their associated attributes characteristics components frameworks and guidelines and potential Web API requirements to build the application within the particular context. Web API requirements may include for example which Web APIs to use for a particular context of an application which specific portions of Web APIs to use pointers to software development kits for the particular context of the application and attributes such as QoS and ToS for each recommended Web API. An application context results from iteratively defining and adapting Web API requirements and accepting Web API recommendations.

Illustrative embodiments build upon Web API recommendations for further refinement by 1 filtering a list of recommended Web APIs to reduce a number of recommended Web APIs based on functionality such as for example Web API category or Web API term and full text search terms on Web API names and attributes and nonfunctional requirements such as ToS and QoS and the like and 2 ranking the filtered list of Web APIs based on the relationships to already selected Web APIs such as for example common historic usage common characteristics or attributes matching data formats and the like. Thus illustrative embodiments create a control point that attracts software application developers to initiate their application development and iterative refinement.

Thus illustrative embodiments provide a computer implemented method computer system and computer program product for refining Web API requirements for developing a software application. Web API requirements include functionalities or non functionalities as well as specific Web APIs to use in the software application. The requirements reflect the context of the application in development. The requirements initially consist of a set of developer defined search terms for functionalities and or non functionalities. A developer states these search terms using a client device and sends them to a server computer via a network. Based on these search terms the server computer sends a ranked list of recommended Web APIs to the client device via a network including information on their functionalities and non functionalities and potential requirements. In response to receiving the ranked list of recommended Web APIs the developer adapts the requirements for functionalities or non functionalities by updating the search terms and creates or adapts a set of selected Web APIs from the ranked list of recommended Web APIs. The developer sends back the updated requirements to the server computer via a network. The server computer again sends recommended Web APIs to the client device via the network now including a display of the relationships among the set of selected Web APIs made by the developer and the recommended Web APIs made by the server computer. Again the developer may then adapt requirements including the set of selected Web APIs based on the recommendations resulting in an iterative process.

With reference now to a diagram of an example of a graph based Web API data model is depicted in accordance with an illustrative embodiment. Graph based Web API data model may be for example graph based Web API data model in . Web API data such as Web API data in are represented in the graph structure. For example each node in the graph structure may represent a corresponding Web API or a specific portion of a Web API which is referred to as an endpoint EP . A Web API endpoint addresses a specific issue task or process with regard to the context of the application. A Web API recommendation application such as for example Web API recommendation application in takes as input current Web API requirements and bases its Web API recommendations on traversing relationships within the graph structure of graph based Web API data model .

In addition it should be noted that other nodes within the graph structure of graph based Web API data model may represent for example a user an application or mashup common characteristics or attributes of Web APIs or specific portions of Web APIs as well as other information. A mashup is a Web application that combines the use of multiple Web APIs. A Web API may be a combination of multiple Web API endpoints.

Graph based Web API data model includes names and descriptions of Web APIs in corresponding Web API nodes such as for example Web API and Web API within the graph structure because the names and descriptions are unique to each corresponding Web API. A specific example of Web API node data such as name and description of a Web API is shown in . Also it should be noted that a typical graph based Web API data model would include more nodes and relationships than shown in the example of . is only intended as a simple example.

Graph based Web API data model may store common Web API characteristics or attributes such as for example Web API QoS and ToS in their own node such as common characteristic node C to which multiple Web API nodes have a relationship. For example Web API endpoint nodes EP EP and EP may have a relationship to common characteristic node C . As a result graph based Web API data model does not store the common characteristic in Web API endpoint nodes EP EP and EP to decrease or eliminate data redundancy. Instead graph based Web API data model generates the relationships between common characteristic node C and Web API endpoint nodes EP EP and EP having a relationship to the common characteristic or attribute stored in node C .

Graph based Web API data model denotes usage of a Web API by generating a relationship between the node corresponding to the particular Web API and a node corresponding to an application such as for example mashup M . For example graph based Web API data model may denote use of Web API y by generating a relationship in the graph structure such as Web API y relationship Application z. Consequently a search of graph based Web API data model for required or recommended Web APIs for a particular context of Application z relies on 1 matching Web API names and descriptions and 2 looking for relationships to required Web API attributes. Recommendation and ranking of Web APIs relies on looking for direct and indirect relationships between Web APIs within graph based Web API data model .

In the example of user U wants to know which Web API endpoints in graph based Web API data model have been used with Web API endpoint EP . In this example Web API endpoint EP has a relation with mashup M which in turn has a relation with Web API endpoint EP and Web API endpoint EP . As a result graph based Web API data model may determine that Web API endpoints EP and EP have been used with Web API endpoint EP and may recommend that Web API endpoints EP and EP be added to mashup M to refine or modify the context of mashup M .

With reference now to a diagram of an example of Web API node data is depicted in accordance with an illustrative embodiment. Web API node data may be for example Web API data in . In this example Web API node data includes uniform resource locator URL creation date customer identification ID description name type ID and type . A Web API relationship engine such as for example Web API relationship engine in uses Web API node data which includes name and description to uniquely identify a corresponding Web API such as for example Web API in .

With reference now to a flowchart illustrating a process for providing Web API recommendations for a context of an application is shown in accordance with an illustrative embodiment. The process shown in may be implemented in a computer such as data processing system in .

The process begins when the computer receives a context of an application from a client device via a network step . The context of the application may be for example application context in . The client device and network may be for example client device and network in .

In addition the computer receives search terms that include initial Web API requirements for the context of the application from the client device via the network step . The search terms and initial Web API requirements may be for example Web API search terms and initial Web API requirements in . Also it should be noted that the context of the application search terms and initial Web API requirements are sent by a software application developer using the client device.

After receiving the search terms and initial Web API requirements for the context of the application in step the computer defines a Web API recommendation query that includes the search terms and selected Web APIs for the context of the application step . The selected Web APIs for the context of the application are found in the initial Web API requirements sent by the software application developer. The Web API recommendation query may be for example Web API recommendation query in .

The computer sends the Web API recommendation query for the context of the application to a Web API relationship engine that contains a graph based Web API data model of Web API descriptions attributes and relationships step . The Web API relationship engine graph based Web API data model and Web API data may be for example Web API relationship engine graph based Web API data model and Web API data in . Subsequently the computer receives a search result from the Web API relationship engine containing a list of recommended Web APIs for the context of the application step . The search result may be for example Web API search results in .

Then the computer filters the list of recommended Web APIs for the context of the application based on the attributes of the recommended Web APIs in the list step . Further the computer ranks the recommended Web APIs in the filtered list based on the relationships of the recommended Web APIs to the context of the application step . The ranked list of recommended Web APIs may be for example ranked list of recommended Web APIs in . The computer sends the ranked list of recommended Web APIs and a set of Web API recommendations regarding the context of the application to the client device via the network step . The set of Web API recommendations may be for example set of Web API recommendations in .

Afterward the computer makes a determination as to whether the computer received a selection of a Web API in the ranked list of recommended Web APIs step . If the computer determines that a selection of a Web API in the ranked list of recommended Web APIs was not received no output of step then the process proceeds to step . If the computer determines that a selection of a Web API in the ranked list of recommended Web APIs was received yes output of step then the computer adds the selected Web API to the context of the application to generate a new context of the application step . The new context of the application may be for example new application context in .

Subsequent to adding the selected Web API to the context of the application in step the computer makes a determination as to whether the computer received a selection of another Web API in the ranked list step . If the computer determines that a selection of another Web API in the ranked list was received yes output of step then the process returns to step where the computer adds the other selected Web API to the context of the application. If the computer determines that a selection of another Web API in the ranked list was not received no output of step then the computer sends a display of a relationship among the added Web APIs to the new context of the application to the client device via the network step . The software application developer using the client device may use the display of the relationship among the added Web APIs to develop further refinements to the context of the application.

Then the computer makes a determination as to whether the computer received more search terms for Web API requirements step . If the computer determines that more search terms for Web API requirements were received yes output of step then the process returns to step where the computer defines another Web API recommendation query. If the computer determines that more search terms for Web API requirements were not received no output of step then the process terminates thereafter.

Thus illustrative embodiments provide a computer implemented method computer system and computer program product for providing Web API recommendations for a context of an application. The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiment. The terminology used herein was chosen to best explain the principles of the embodiment the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed here.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

