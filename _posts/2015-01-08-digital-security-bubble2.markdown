---

title: Digital security bubble
abstract: A digital security bubble encapsulation is disclosed. A first key and a device identifier of at least one recipient is requested from a first server. A message containing one or more components is encrypted using a second key. The second key is encrypted using the first key. The encrypted message, the encrypted second key, and the device identifier are encapsulated in a digital security bubble encapsulation. The digital security bubble encapsulation is transmitted to a second server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09584316&OS=09584316&RS=09584316
owner: Wickr Inc.
number: 09584316
owner_city: San Francisco
owner_country: US
publication_date: 20150108
---
This application is a continuation of co pending U.S. patent application Ser. No. 14 089 634 entitled DIGITAL SECURITY BUBBLE filed Nov. 25 2013 which is incorporated herein by reference for all purposes which is a continuation of U.S. patent application Ser. No. 13 942 554 entitled DIGITAL SECURITY BUBBLE filed Jul. 15 2013 now U.S. Pat. No. 8 625 805 which claims priority to U.S. Provisional Patent Application No. 61 672 099 entitled DIGITAL SECURITY BUBBLE IS A CROSS PLATFORM ALGORITHM THAT SECURES COMMUNICATIONS ORIGINATING FROM A MOBILE DEVICE COMPUTER WEB OR ANY OTHER DEVICE CONNECTED VIA EITHER A CELLULAR NETWORK WIFI BLUETOOTH OR OPTICAL CONNECTION WITH OTHER DEVICES. COMMUNICATIONS COULD BE TEXT VIDEO AUDIO PICTURES AND ANY TYPE OF FILES THAT COULD BE SENT AS ATTACHMENTS filed Jul. 16 2012 and is incorporated herein by reference for all purposes.

Users of electronic devices increasingly desire to communicate privately and securely with one another. Unfortunately existing approaches to securing communications can be difficult and or cumbersome to use. As one example some approaches to data security make use of digital certificates or keys or pre shared passwords which can be tedious to manage. Further existing approaches are often susceptible to interception e.g. eavesdropping and man in the middle attacks forensic analysis and impersonation.

The invention can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer program product embodied on a computer readable storage medium and or a processor such as a processor configured to execute instructions stored on and or provided by a memory coupled to the processor. In this specification these implementations or any other form that the invention may take may be referred to as techniques. In general the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein the term processor refers to one or more devices circuits and or processing cores configured to process data such as computer program instructions.

A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.

Users of client devices such as client devices communicate securely with one another using techniques described herein. As shown in client devices include personal computers laptop computers tablets and mobile telephony devices . Some client devices e.g. tablet device make use of techniques described herein via a messaging application also referred to as an app obtained from a software distribution server . Examples of software distribution servers which can comprise a single server or multiple servers working in cooperation include app stores e.g. provided by Apple Google Blackberry Microsoft and Blackberry and other webservers offering app downloads. Client devices can also make use of a web interface e.g. provided by platform instead of or in addition to a dedicated messaging application. Other types of devices not depicted in can also be used in conjunction with the techniques describe herein such as game consoles video players e.g. incorporating DVD Blu ray Red Laser Optical and or streaming technologies and other network connected appliances as applicable.

Communications are exchanged via one or more networks depicted collectively in as network cloud . Such networks can include wired wireless cellular and satellite networks. And such networks can be closed private networks as well open networks e.g. the Internet . Further as used herein communications and messages can take a variety of forms including text messages documents audiovisual files SMSes voice and video calls. Further the content can pertain to electronic transactions such as credit card security password protection directories and storage drive protection video on demand security online gaming gambling electronic distribution of music videos documents online learning systems databases cloud storage and cloud environments bank transactions voting processes military communications security of medical records communication between medically implanted devices and doctors etc. As will be described in more detail below the exchange of communications is facilitated by security platform .

Suppose a user of client device hereinafter referred to as Alice would like to send a secure message to her friend Bob a user of client device in accordance with techniques described herein. In some embodiments in order to send a message Bob Alice first obtains a copy of a messaging application suitable for her device. For example if Alice s tablet device runs iOS she could obtain an app for her tablet from the Apple App Store an example of software distribution server . Bob similarly obtains an appropriate application suitable for his client device e.g. an Android based smartphone from an appropriate location e.g. the Google Play store . In some embodiments client devices make use of a web based application e.g. made available by platform through interface instead of or in addition to a dedicated installed application.

Once Alice s tablet has obtained a copy of the messaging app the app is installed and Alice is able to register for an account. An instance of a messaging app usable in conjunction with the techniques described herein is depicted in as app installed on device . Examples of events that can occur during an installation initialization registration process are illustrated in and will now be described.

In some embodiments process is performed on a client device such as Alice s client device . The process begins at when a public private keypair for the application is generated on client device e.g. using RSA ECDH or any other asymmetric encryption algorithms . As one example the keypair can be generated using Eliptic Curve Algorithm with Diffie Helman Key Exchange ECDH . Other cryptographic standards can also be used such as RSA. At a random server seed is generated and at a random local seed is generated. The seeds are used in conjunction with cryptographic key generation and in some embodiments the seeds are determined based on captured hardware information described in more detail below .

At a device identifier deviceID is created from captured hardware information. Examples of captured hardware information include hard drive identifiers motherboard identifiers CPU identifiers and MAC addresses for wireless LAN Bluetooth and optical cards. Combinations of information pertaining to device characteristics such as RAM CACHE controller cards etc. can also be used to uniquely identify the device. Some or all of the captured hardware information is run through a cryptographic hash algorithm such as SHA 256 to create a unique deviceID for the device. The captured hardware information can also be used for other purposes such as to seed cryptographic functions.

At Alice is asked via an interface provided by app to supply a desired username. Alice enters Alice into the interface. A determination is made as to whether the username is available. As one example app can supply a cryptographic hash of Alice to platform for checking. If platform does not already have a record for that hash the username Alice is available for Alice to use. If platform already has a record of that hash Alice is instructed by the interface to pick an alternate username. Once Alice has selected an available username she is asked to supply a password.

At an application identifier appID is created. The appID is a unique identifier for the particular installation of the messaging app. If Alice installs the messaging app on multiple devices each of her devices will have its own unique appID. And each of her devices will also have its own unique deviceID. In some embodiments the appID is created by hashing Alice s selected password and other information such as device information.

Finally at Alice s public key deviceID and appID are sent to platform in a secure manner. As one example in some embodiments app is configured to communicate with platform via TLS. At the conclusion of process Alice is ready to send and receive secure communications described in Sections C and E below respectively.

As mentioned above security platform is configured to facilitate the exchange of communications e.g. among any all of client devices . Additional detail regarding various aspects of platform will now be provided.

Security platform includes one or more interface s for communicating with client devices such as client devices . As one example platform provides an application programming interface API configured to communicate with apps installed on client devices such as app and app . Platform can also provide other types of interfaces such as a web interface or stand alone software programs for desktops and laptops running on various Operating Systems OS . The web interface can allow users of client devices such as client devices and to exchange messages securely whether with one another or other users without the need for a separately installed messaging application. The stand alone software program allows users to exchange secure messages via software that is downloaded by each user.

Security platform also includes a database . Included in database is a record for each user of platform . Each record has associated with it information such as the user s public key deviceID s appID s and messages. As shown in database is relational and stores information in a variety of tables including a table of hashed usernames a table of public keys a table of deviceIDs a table of appIDs and a table of messages . Other techniques can also be used to store the information used by platform . For example messages can be stored in a separate storage instead of being stored within database .

Finally security platform includes a processing engine which performs a variety of tasks including interacting with database on behalf of interface s . The embodiment of platform depicted in comprises standard commercially available server hardware e.g. having a multi core processor s 8 G of RAM gigabit network interface adaptor s and hard drive s running a typical server class operating system e.g. Linux . In various embodiments platform is implemented across a scalable infrastructure comprising multiple such servers solid state drives and or other applicable high performance hardware.

Whenever platform is described as performing a task either a single component or a subset of components or all components of platform may cooperate to perform the task. Similarly whenever a component of platform is described as performing a task a subcomponent may perform the task and or the component may perform the task in conjunction with other components.

Returning back to Alice s desire to send a message to Bob at the conclusion of Section A above Alice has successfully registered her username Alice with security platform . And Bob is also a user of platform . Suppose Alice would like to send a message to Bob. She loads app and is presented with an interface that includes a compose option. Alice selects the compose option and is presented with a message composition interface.

An example message composition interface is shown in . In particular depicts interface as rendered on an example tablet device connected to the Internet via an appropriate connection such as 3G 4G or higher cellular connection WiFi Satellite wireless or wired LANs Bluetooth etc. Tablet device includes a touchscreen. An on screen keyboard is provided for Alice in region . Alice can enter the usernames of one or more recipients in region . She can enter message text in region . Alice can optionally add attachments by interacting with buttons shown in region . Examples of attachments include but are not limited to documents pictures and audiovisual clips. By selecting button Alice can specify various message control options such as the lifetime expiration of the message on which device s it can be unencrypted read and sharing saving forwarding recalling and deleting options.

If Alice is satisfied with her message she can send it to Bob by clicking the send button . If she wishes to cancel out of composing the message she can click the cancel button . Suppose Alice clicks send button after composing the message shown in interface . An example of the events that occur in some embodiments in conjunction with Alice sending a message is illustrated as process in and will now be described.

At a random symmetric encryption key is generated e.g. by app on device . As one example the symmetric key is an AES 256 bit key. At the symmetric encryption key is used to encrypt the message body any attachments and any message control options. In some embodiments Alice s own information e.g. her public key deviceID s and appID s are included in the DSB as well. Finally at the symmetric key is encrypted with the public key of each recipient. A DSB encapsulation is then generated and contains the aforementioned components. Examples of the DSB format are provided in Section D below.

In some cases a user may own multiple devices. For example Bob may be the owner of device and both of which are configured with secure messaging apps. Each of Bob s installations will have its own deviceID and appID. When the DSB is created each of Bob s devices will be considered a separate device under the same username account.

The generated DSB is securely transmitted to platform e.g. by being encrypted with a symmetric key shared by the app and platform and also encapsulated by TLS as an additional security layer . Irrespective of how many recipients Alice designates for her message and e.g. how many recipients there are or how many devices Bob has only one DSB will be created and transmitted to platform . Upon receipt of the DSB processing engine opens the DSB and determines the recipients of the message. Specifically the processing engine performs a match against the deviceIDs in a cryptographic hash and camouflaged representation included in the DSB and the deviceIDs stored in database as well as the username in a cryptographic hash and camouflaged representation in the DSB and the ones stored in the database . A cryptographic hash and camouflaged representation means that the hash algorithm i.e. SHA256 that is used for the deviceID username and appID values is further camouflaged in some embodiments by taking multiple hashes of the result values i.e. multiple rounds of SHA256 of the previous SHA256 value i.e. SHA SHA SHA SHA . . . . Processing engine also creates an entry for the received DSB in message table and notifies the recipient s that a new message is available. In various embodiments other actions are also performed by platform with respect to the DSB. As one example platform can be configured to remove the DSB as soon as the recipient successfully downloads it. As another example platform can enforce an expiration time e.g. seven days by which if the DSB has not been accessed by the recipient the DSB is deleted. Where multiple recipients are included in a DSB platform can be configured to keep track of which recipients have downloaded a copy of the DSB and remove it once all recipients have successfully downloaded it or an expiration event has occurred .

DSB also includes for each message recipient 1 n the key Ekencrypted by each of the recipient s respective public keys as shown in region . Further DSB includes a combination of each recipient s respective deviceID hashed username and appID collectively denoted HWk in region . These constituent parts are also referred to herein as parameters. Additional detail regarding the parameters is shown in namely a plurality of parameters such as hashed username deviceID and appID are encrypted using SK which is a symmetric key generated by the client and shared with platform .

In some embodiments e.g. as is shown in a spreading function is used to spread the encrypted symmetric keys inside the DSB as shown in region by spreading the bits of the encrypted key in a spreading function generated pattern with the default function being a sequential block or data. The spreading function also contains the cryptographic hashed representation of the recipient usernames that are used by the server to identify the recipients of the message and to set the message waiting flag for each of them. Finally the DSB is itself encrypted using key Ek encrypted portion which is a symmetric key shared between app and platform . Additional detail regarding portions and are shown in where SK in is Ekin and represents the symmetric encryption key shared by the app and platform and where UserPubkey in is Ekin and represents the recipient s public key e.g. generated at .

As mentioned above Bob is also a user of platform . When Bob loads his copy of the messaging app on his smartphone i.e. app on device the app communicates with platform e.g. via interface to determine whether Bob has any new messages. Since Alice has sent a message to Bob since he last used app a flag is set in database indicating to app that one or messages are available for download.

At i.e. assuming the decryption was successful hardware binding parameters are checked. As one example a determination is made as to whether device information i.e. collected from device can be used to construct an identical hash to the one included in the received DSB. If the hardware binding parameters fail the check i.e. an attempt is being made to access Alice s message using Bob s keys on a device that is not Bob s contents of the DSB will be inaccessible preventing the decryption of Alice s message. If the hardware binding parameter check is successful the device is authorized to decrypt the symmetric key i.e. using Bob s private key generated at which can in turn be used to decrypt Alice s message.

As explained above in addition to text messages e.g. shown in region of users can compose messages that include a variety of multi media attachments e.g. by interacting with region of . Returning to the example of suppose Alice attached a picture of her dog Fido to the message prior to sending to Bob. As explained above and as illustrated in attachments to her message i.e. the dog photograph will also be encrypted and can only be decrypted by intended recipients.

Some devices such as tablet device and phone provide native support for users of those devices to capture their screens. As one example a user of an iOS device can capture what is being displayed on the device by holding down the menu button and while the button is being held also pressing the power lock button. Alice may wish for Bob to be able to view her dog photograph for a limited time and then have it no longer available to him. Unfortunately if Bob uses the built in screen capture feature of his phone while viewing Alice s picture he ll be able to save a copy for later viewing.

In some embodiments messaging app is configured to help mitigate screen capture attempts by users. An example of the process is shown in . In some embodiments process is performed on a client device such as Bob s client device . The process begins at when x y coordinates of one or more fingers are detected in an appropriate region. As one example portion of interface includes a message to Bob asking him to place his finger on icon in order to view Alice s dog picture. When Bob does so the x y coordinates of his finger will be detected at .

The x y coordinates are checked every time they change for example when the finger touching the icon moves . If the move is more than a few pixels e.g. more than 10 pixels this can be indicative of a user attempting to manipulate the device and take a screen shot while also holding down icon . The attachment preview will accordingly end at if the change in finger position is too great minimizing the possibility of a receiver taking unauthorized screen shots of attachments received in a secure message. Once an attachment preview has ended in this manner in some embodiments the user can view the attachment again so long as it has not expired by placing and holding a finger steady in region .

In some embodiments the number of pixels by which a finger may move without being considered an attempted screen capture is adjustable by the sender. For example a sender can allow for more pixels less sensitive or fewer pixels more sensitive depending on the desired sensitivity. The number of pixels can also be determined by the application e.g. based on the native resolution of the device or other characteristics of the device etc. .

In some embodiments multiple screen areas or screen figures are required to be touched. This forces the user to hold more than one finger to tap and hold an area or areas making it even more difficult to attempt to take a screen shot with the device.

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.

