---

title: Installer-free applications using native code modules and persistent local storage
abstract: Some embodiments provide a system that executes an application. During operation, the system obtains a resource list associated with the application and stores a set of resources including a native code module from the resource list through communications over a network connection, wherein the resources are stored in persistent local storage. The application then loads the application in the web browser and loads the native code module into a secure runtime environment. Next, the application executes the application independently of the network connection using the native code module and the stored resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09075637&OS=09075637&RS=09075637
owner: Google Inc.
number: 09075637
owner_city: Mountain View
owner_country: US
publication_date: 20150114
---
This application is a continuation of U.S. application Ser. No. 14 319 690. Filed Jun. 30 2014 which is a continuation of U.S. application Ser. No. 14 147 699 filed Jan. 6 2014 which is a continuation of U.S. application Ser. No. 12 267 425 filed Nov. 7 2008 the contents of each of which are incorporated by reference.

The present embodiments relate to techniques for executing applications on computer systems. More specifically the present embodiments relate to a method and system for executing installer free applications using native code modules.

Computer systems may include a number of native applications that require significant processing resources to execute. Such applications may perform tasks such as image processing audio and video decoding and mixing mathematical modeling and or simulation. To run efficiently these applications are often written in a combination of general purpose programming languages such as C or C and low level languages such as assembly language. Consequently the applications may be restricted to specific platforms may involve a lengthy installation process and may pose a security risk to the computer systems on which the applications are installed.

On the other hand web applications which have become more prevalent in recent years are typically written in scripting languages that are more secure and require no installation. However web applications may lack the performance capabilities of native applications. In particular a web application may run one or two orders of magnitude more slowly than a native application. Furthermore web applications are often unable to operate without sending and receiving data with one or more servers through a network connection with the servers. As a result web applications are currently unable to implement computationally intensive functions that are available in native applications and may also lack the ability to execute independently of a network connection.

Some embodiments provide a system that executes an application. During operation the system obtains a resource list associated with the application and stores a set of resources including a native code module from the resource list obtained through communications over a network connection wherein the resources are stored in persistent local storage. The application then loads the application in the web browser and loads the native code module into a secure runtime environment. Next the application executes the application independently of the network connection using the native code module and the stored resources.

In some embodiments the system also intercepts a network request for one of the resources from the web browser and serves the network request using the stored resources.

In some embodiments the system also periodically updates the stored resources using the network connection.

In some embodiments the system also validates the native code module prior to loading the native code module into the secure runtime environment.

In some embodiments executing the application independently of the network connection involves locally storing data associated with the application and synchronizing the data with a server using the network connection.

In some embodiments one or more of the stored resources are used to render graphics for the application.

In some embodiments the stored resources further include at least one of a document a web script a media file and a graphics processing module.

In some embodiments the resource list is obtained based on at least one of a user of the application and a state of the application.

In some embodiments the application is loaded and executed without an installation procedure involving the user.

The following description is presented to enable any person skilled in the art to make and use the embodiments and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present embodiments. Thus the system is not limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein.

The data structures and code described in this detailed description are typically stored on a computer readable storage medium which may be any device or medium that can store code and or data for use by a computer system. The computer readable storage medium includes but is not limited to volatile memory non volatile memory magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs DVDs digital versatile discs or digital video discs or other media capable of storing computer readable media now known or later developed.

The methods and processes described in the detailed description section can be embodied as code and or data which can be stored in a computer readable storage medium as described above. When a computer system reads and executes the code and or data stored on the computer readable storage medium the computer system performs the methods and processes embodied as data structures and code and stored within the computer readable storage medium.

Furthermore the methods and processes described below can be included in hardware modules. For example the hardware modules can include but are not limited to application specific integrated circuit ASIC chips field programmable gate arrays FPGAs and other programmable logic devices now known or later developed. When the hardware modules are activated the hardware modules perform the methods and processes included within the hardware modules.

The described embodiments provide a method and system for executing an application. This application may correspond to a web application that is loaded in a web browser and executed on a computing system such as a personal computer PC a mobile phone a personal digital assistant PDA a graphing calculator a portable media player a global positioning system GPS receiver and or another electronic computing device. In addition the web application may be obtained by the computing system from a server and execute through communications with the server over the network connection.

More specifically embodiments provide a method and system for executing the web application as a native application using a native code module. The native code module contains native code that is executed within a secure runtime environment. The web application may further be executed independently of the network connection by storing the native code module and or other resources associated with the web application on the computing system. Subsequent network requests for the resources may be intercepted and served using the stored resources. As a result the native code module and other stored resources may allow the application to be executed independently of the network connection and or loaded without an installation procedure involving a user of the application.

Computing system may correspond to an electronic device that provides one or more services or functions to a user. For example computing system may operate as a mobile phone personal computer PC global positioning system GPS receiver portable media player personal digital assistant PDA and or graphing calculator. In addition computing system may include an operating system not shown that coordinates the use of hardware and software resources on computing system as well as one or more applications e.g. web browser web application that perform specialized tasks for the user. For example computing system may include applications such as an email client address book document editor web browser and or media player. To perform tasks for the user applications may obtain the use of hardware resources e.g. processor memory I O components wireless transmitter etc. on computing system from the operating system as well as interact with the user through a hardware and or software framework provided by the operating system as described below.

Those skilled in the art will appreciate that computing system may include functionality to execute both native applications and non native applications. In other words computing system may include native applications such as web browser that are locally installed on computing system and specific to the operating system and or one or more hardware devices on computing system . Such applications may be compiled into native e.g. machine code that executes directly on one or more central processing units CPUs of computing system . Code execution in the applications may further be optimized by writing the applications in a combination of general purpose programming languages e.g. C C etc. and assembly language as well as utilizing libraries that provide hardware acceleration e.g. graphics hardware acceleration to the applications. However the installation of native applications may compromise computing system and private data stored on computing system .

Computing system may also include functionality to execute platform independent non native applications. In particular computing system may obtain web application from one or more servers e.g. server 1 server x using a network connection with the server s and load web application in web browser . For example web application may be downloaded from an application server over the Internet by web browser .

Once loaded web application may provide features and user interactivity comparable to that of native applications on computing system . For example web application may function as an email client document editor media player computer aided design CAD system and or computer game. Web application may also include dynamic user interface elements such as menus buttons windows sub windows icons animations and or other graphical objects that emulate analogous user interface elements in native applications. In other words web application may correspond to a rich Internet application RIA .

Furthermore web application may execute on computing system regardless of the type of platform e.g. operating system drivers etc. associated with computing system . Though platform independent applications such as web application may be more portable and secure than native applications such cross platform applications may lack certain performance and execution capabilities of native applications.

More specifically non native applications such as web application may be written using scripting languages that are interpreted rather than compiled such as JavaScript JavaScript is a registered trademark of Sun Microsystems Inc. . The interpreted nature of web application and or other non native applications may result in significantly slower execution times for the non native applications than those of compiled native applications. Non native applications may also be unable to utilize low level libraries and or application programming interfaces API that are available for use by native applications. Consequently non native applications may provide limited functionality in certain tasks.

In addition web application may be unable to execute without a network connection with one or more servers e.g. server 1 server x associated with web application . For example web application may require communications with the server s to send and receive data retrieve code modules load web pages and or otherwise perform tasks for the user. Attempts to load and or access web application without the network connection may result in errors such as HyperText Transfer Protocol HTTP errors and or other issues that interfere with the execution of web application . As a result web application may be limited in the ability to operate in standalone mode e.g. without a network connection .

To provide computationally intensive features to the user a native code module associated with web application may be used to execute computationally intensive code on behalf of web application . Like web application native code module may be obtained from one or more servers e.g. server 1 server x by web browser . For example web application may provide a hyperlink to native code module on the Internet. Web browser may then download native code module from the Uniform Resource Locator URL specified in the hyperlink. Alternatively native code module may be specified by the user or by an external source such as another web application and or a native application. Execution of computationally intensive code for web applications using native code modules is described in a co pending non provisional application by inventors Evangelos Kokkevis Matthew Papakipos and David C. Sehr entitled Method and System for Executing Applications Using Native Code Modules having Ser. No. 12 266 602 and filing date 7 Nov. 2008 which is incorporated herein by reference.

In one or more embodiments native code module is executed by a plugin associated with web browser . In one or more embodiments plugin includes a variety of mechanisms to ensure the safe execution of native code module . In particular native code module may be validated by a validator provided by plugin prior to execution. Native code module validation is described in a co pending non provisional application by inventors J. Bradley Chen Matthew T. Harren Matthew Papakipos David C. Sehr and Bennet S. Yee entitled Method for Validating an Untrusted Native Code Module having Ser. No. 12 117 634 and filing date 8 May 2008 which is incorporated herein by reference.

Once native code module is validated native code module may be loaded into a secure runtime environment provided by plugin . Note that this secure runtime environment need not actually be part of the browser at all. It could be a separate application with which the browser communicates. Native code execution in a secure runtime environment is described in a co pending non provisional application by inventors J. Bradley Chen Matthew T. Harren Matthew Papakipos David C. Sehr Bennet S. Yee and Gregory Dardyk entitled Method for Safely Executing an Untrusted Native Code Module on a Computing Device having Ser. No. 12 117 650 and filing date 8 May 2008 which is incorporated herein by reference. Secure runtime environment may also be provided by a web browser extension to web browser and or secure runtime environment may be built into web browser .

Furthermore because native code module may include binary code that runs directly on hardware native code module may be platform independent with respect to the operating system of computing system web browser and or other software components on computing system . As described in the above referenced applications plugin and or native code module may also include mechanisms for executing on a variety of instruction set architectures including the use of fat binaries and binary translators. Consequently the validation and execution of native code module may enable web application to safely utilize natively executing code in performing tasks for the user.

In one or more embodiments native code module corresponds to a graphics processing module that enables hardware accelerated graphics for web application . The use of native code module to render graphics for web application is described in further detail below with respect to .

In one or more embodiments a local server module associated with web browser is used to enable execution of web application independently of a network connection with the server s . As with plugin local server module may be implemented as a browser plugin to web browser a web browser extension to web browser and or a component of web browser . To enable offline execution of web application local server module may obtain a resource list associated with web application from the server s . For example resource list may be obtained from a Uniform Resource Locator URL specified by web application using the network connection.

Resource list may correspond to a file that contains a set of resources e.g. resource 1 resource n required for execution of web application . For example resource list may include a set of URLs for resources such as documents e.g. HyperText Markup Language HTML documents Portable Document Format PDF documents word processing documents spreadsheets etc. web scripts e.g. JavaScript code modules media files e.g. audio files images video files etc. and or native code module .

Local server module may then use resource list to retrieve the resources through communications over the network connection and store the resources in a local resource store which can comprises persistent non volatile storage. For example local server module may store the resources in a local directory on computing system . Local server module may also implement a storage mechanism e.g. a relational database for local storage of data associated with web application . Native code module may then be provided to plugin from local resource store and used to perform computationally intensive tasks for the user. Furthermore the storing of native code module and or other resources used by web application may allow local server module to intercept and serve network requests for the resources from web browser using local resource store .

In particular local server module may intercept a network request e.g. an HTTP request for a resource associated with web application if the resource is stored in local resource store and serving of network requests from local resource store is enabled. For example local server module may serve the network request from local resource store if the resource store is enabled for serving and or if a cookie associated with the resource specifies that the resource is to be served from resource store . If serving of the network request for the resource from resource store is enabled local server module may serve the network request using resource store regardless of the availability of a network connection between computing system and the server s . Consequently the use of resource store by local server module may allow web application to be executed independently of the network connection e.g. in standalone mode . In other words requests for data code modules and or other resources by web application may be served from resource store by local server module in lieu of the server s and a network connection with the servers.

Local server module may also include functionality to periodically update the resources in resource store if a network connection is available. More specifically local server module may allow for both manual and automatic updates to resources in resource store . For example local server module may receive a request for a manual update from web application upon the initial loading of web application by web browser . Similarly local server module may automatically update resource store upon intercepting and serving network requests for resources using resource store . Alternatively local server module may update resource store and or limit updates to resource store to a pre specified frequency e.g. once every ten seconds . Because updates to web application may be performed by local server module without user intervention web application may be loaded and executed without an installation procedure involving the user.

To update resources in resource store local server module may obtain the latest version of resource list using the network connection and compare the latest version with the version of resource list used to populate resource store . If the versions are different the resources in resource store are updated using the new e.g. latest version of resource list . For example resource list and resource store may each include numeric versions that denote the current set of resources used by web application . Differences between the versions of resource list and resource store may prompt an update of the resources. For example a change in resource list version from 1 to 2 may trigger an update as well as a change in version from 2 to 1. 

As the resources are updated network requests for the resources may continue to be served from resource store . The version of resource store may then be updated to the latest version e.g. the version of resource list once the update has completed. Moreover the update may be retried if the version of resource list has changed during the update.

In one or more embodiments resource list is obtained based on the user of web application and or a state of web application . For example resource list may be obtained based on the user s authentication credentials and or access privileges to one or more components of web application . Along the same lines resource list may contain different sets of resources as the user and or web application requests use of the resources. For example web application may correspond to a computer game that specifies different resource lists for different stages of the computer game. Instead of downloading all resources required for the computer game when the game first loads local server module may update resource list and resource store as the user progresses through the computer game so that new stages are obtained and loaded as the user encounters the new stages.

In one or more embodiments executing web application independently of a network connection involves locally storing data associated with web application and synchronizing the data with the server s if the network connection is available. As described above data associated with web application may be stored in a relational database and or another local storage mechanism. However unlike other resources used by web application e.g. native code module updates to the data may involve both sending and receiving changes to the data using the network connection. For example web application may correspond to a web based email client that synchronizes data with the server s by retrieving new emails in the user s inbox from the server s and sending offline changes made by the user e.g. new emails deleted emails etc. to the server s when a network connection is available.

To enable hardware accelerated graphics for web application native code module communicates with a trusted code module through a command buffer interface . Trusted code module then sends rendering commands to a graphics processing unit GPU on computing system which renders graphics for web application by executing the rendering commands. Web based graphics rendering using browser plugins is described in a co pending non provisional application by inventors Robin Green Evangelos Kokkevis Matthew Papakipos and Gregg Tavares entitled Web Based Graphics Rendering System having Ser. No. 12 174 586 and filing date 16 Jul. 2008 which is incorporated herein by reference. Hardware accelerated graphics rendering for web applications using native code modules is described in a co pending non provisional application by Antoine Labour and Matthew Papakipos entitled Hardware Accelerated Graphics for Web Applications Using Native Code Modules having Ser. No. 12 267 095 and filing date 7 Nov. 2008 which is incorporated herein by reference.

In one or more embodiments native code module corresponds to a graphics processing module such as a scenegraph renderer or a graphics library. As mentioned previously native code module and or other resources used by web application may be obtained from one or more servers using a network connection and stored in resource store by local server module to enable offline execution of web application . For example native code module may be stored to enable offline execution of a computer game computer aided design CAD tool a video editing application and or a photo editing application.

Initially a resource list associated with the application is obtained operation . The application may correspond to a web application that performs tasks for a user such as web application of . The resource list may be obtained from a URL specified by the application using a network connection. The resource list may further be obtained based on factors such as the user of the application and or the state of the application. Next a set of resources from the resource list including a native code module is stored in local persistent storage operation . For example the resources may be stored in a local directory and or a local relational database. In addition to the native code module the resources may include documents web scripts media files graphics processing modules and or other resources required or used by the application to execute. Next the application is loaded in a web browser operation .

The native code module may also be validated operation prior to executing the native code module. If the native code module is found to be invalid the native code module is discarded without having been executed. If the native code module is successfully validated the native code module is loaded into a secure runtime environment operation . The secure runtime environment may be provided by a plugin associated with the web browser a browser extension to the web browser and or a component within the web browser.

The application may then be executed independently of the network connection using the stored resources operation and the native code module. In particular the storing of the native code module and other resources used by the application may allow the application to execute in standalone mode regardless of the presence of a network connection. Network requests made operation by the web browser for a resource may be intercepted operation and served using the stored resources operation if serving of the resource from the resource store is enabled. If no network requests associated with the application are made no interception and redirection is required. Standalone execution of the application may further involve locally storing data associated with the application when the network connection is unavailable and synchronizing the data with a server when the network connection is available.

The stored resources may also be updated operation if the network connection is available. For example the stored resources may be manually updated by the application e.g. upon initial loading of the application or the stored resources may automatically be updated periodically or upon serving a network request from the stored resources. If the stored resources are to be updated the stored resources are updated using the network connection operation . More specifically the stored resources may be updated based on changes to the resource list e.g. different versions of the resource list . Note that the stored resources could theoretically be updated by a client side application as well.

The application may continue executing operation with or without the presence of a network connection. For example the application may execute until the user is finished using the application. If execution is to continue the application is executed independently of the network connection using the stored resources operation . Network requests for the resources may be intercepted and served using the stored resources operations and updates to the stored resources may be periodically made if a network connection is available operation . As a result the use of the native code module and the storing of resources may allow the application to provide native performance hardware graphics acceleration and or offline execution to the user in a secure environment.

The foregoing descriptions of embodiments have been presented only for purposes of illustration and description. They are not intended to be exhaustive or to limit the embodiments to the forms disclosed. Accordingly many modifications and variations will be apparent to practitioners skilled in the art. Additionally the above disclosure is not intended to limit the present embodiments. The scope of the embodiments is defined by the appended claims.

