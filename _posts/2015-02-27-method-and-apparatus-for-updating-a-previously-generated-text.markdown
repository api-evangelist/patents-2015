---

title: Method and apparatus for updating a previously generated text
abstract: Methods, apparatuses, and computer program products are described herein that are configured to enable updating of an output text. In some example embodiments, a method is provided that comprises generating a new message for each updateable data element based on a predetermined indication. The method of this embodiment may also include determining a classification for each new message by comparing each new message with a corresponding message that describes the updateable data element. The method of this embodiment may also include generating an additional document plan tree that contains at least a portion of the new messages. The method of this embodiment may also include combining the additional document plan tree with an original document plan tree.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09336193&OS=09336193&RS=09336193
owner: Arria Data2Text Limited
number: 09336193
owner_city: Aberdeen
owner_country: GB
publication_date: 20150227
---
This application is a continuation of International Application No. PCT US2012 061051 filed Oct. 19 2012 which claims priority to International Application No. PCT US2012 053115 filed Aug. 30 2012 and International Application No. PCT US2012 053127 filed Aug. 30 2012 which is hereby incorporated herein in its entirety by reference.

Embodiments of the present invention relate generally to natural language generation technologies and more particularly relate to a method apparatus and computer program product for updating previously generated text.

In some examples a natural language generation NLG system is configured to transform raw input data that is expressed in a non linguistic format into a format that can be expressed linguistically such as through the use of natural language. For example raw input data may take the form of a value of a stock market index over time and as such the raw input data may include data that is suggestive of a time a duration a value and or the like. Therefore an NLG system may be configured to input the raw input data and output text that linguistically describes the value of the stock market index for example securities markets rose steadily through most of the morning before sliding downhill late in the day. 

Data that is input into a NLG system may be provided in for example a recurrent formal structure. The recurrent formal structure may comprise a plurality of individual fields and defined relationships between the plurality of individual fields. For example the input data may be contained in a spreadsheet or database presented in a tabulated log message or other defined structure encoded in a knowledge representation such as the resource description framework RDF triples that make up the Semantic Web and or the like. In some examples the data may include numerical content symbolic content or the like. Symbolic content may include but is not limited to alphanumeric and other non numeric character sequences in any character encoding used to represent arbitrary elements of information. In some examples the output of the NLG system is text in a natural language e.g. English Japanese or Swahili but may also be in the form of synthesized speech.

In some example embodiments a method is provided that comprises generating a new message for each updateable data element based on a predetermined indication. The method of this embodiment may also include determining a classification for each new message by comparing each new message with a corresponding message that describes earlier behavior of the updateable data element. The method of this embodiment may also include generating an additional document plan tree that contains at least a portion of the new messages. The method of this embodiment may also include combining the additional document plan tree with an original document plan tree.

In further example embodiments an apparatus is provided that includes at least one processor and at least one memory including computer program code with the at least one memory and the computer program code being configured with the at least one processor to cause the apparatus to at least generate a new message for each updateable data element based on a predetermined indication. The at least one memory and computer program code may also be configured to with the at least one processor cause the apparatus to determine a classification for each new message by comparing each new message with a corresponding message that describes earlier behavior of the updateable data element. The at least one memory and computer program code may also be configured to with the at least one processor cause the apparatus to generate an additional document plan tree that contains at least a portion of the new messages. The at least one memory and computer program code may also be configured to with the at least one processor cause the apparatus to combine the additional document plan tree with an original document plan tree.

In yet further example embodiments a computer program product may be provided that includes at least one non transitory computer readable storage medium having computer readable program instructions stored therein with the computer readable program instructions including program instructions configured to generate a new message for each updateable data element based on a predetermined indication. The computer readable program instructions may also include program instructions configured to determine a classification for each new message by comparing each new message with a corresponding message that describes earlier behavior of the updateable data element. The computer readable program instructions may also include program instructions configured to generate an additional document plan tree that contains at least a portion of the new messages. The computer readable program instructions may also include program instructions configured to combine the additional document plan tree with an original document plan tree.

In yet further example embodiments an apparatus is provided that includes means for generating a new message for each updateable data element based on a predetermined indication. The apparatus of this embodiment may also include means for determining a classification for each new message by comparing each new message with a corresponding message that describes earlier behavior of the updateable data element. The apparatus of this embodiment may also include means for generating an additional document plan tree that contains at least a portion of the new messages. The apparatus of this embodiment may also include means for combining the additional document plan tree with an original document plan tree.

In some example embodiments a method is provided that comprises generating a new message for each updateable data element during an update time window. The method of this embodiment may also include updating an original document plan tree such that is comprises each of the new messages. The method of this embodiment may also include causing an updated output text to be generated based on the original document plan tree.

In further example embodiments an apparatus is provided that includes at least one processor and at least one memory including computer program code with the at least one memory and the computer program code being configured with the at least one processor to cause the apparatus to at least generate a new message for each updateable data element during an update time window. The at least one memory and computer program code may also be configured to with the at least one processor cause the apparatus to update an original document plan tree such that is comprises each of the new messages. The at least one memory and computer program code may also be configured to with the at least one processor cause the apparatus to cause an updated output text to be generated based on the original document plan tree.

In yet further example embodiments a computer program product may be provided that includes at least one non transitory computer readable storage medium having computer readable program instructions stored therein with the computer readable program instructions including program instructions configured to generate a new message for each updateable data element during an update time window. The computer readable program instructions may also include program instructions configured to update an original document plan tree such that is comprises each of the new messages. The computer readable program instructions may also include program instructions configured to cause an updated output text to be generated based on the original document plan tree.

In yet further example embodiments an apparatus is provided that includes means for generating a new message for each updateable data element during an update time window. The apparatus of this embodiment may also include means for updating an original document plan tree such that it comprises each of the new messages. The apparatus of this embodiment may also include means for causing an updated output text to be generated based on the original document plan tree.

Example embodiments will now be described more fully hereinafter with reference to the accompanying drawings in which some but not all embodiments are shown. Indeed the embodiments may take many different forms and should not be construed as limited to the embodiments set forth herein rather these embodiments are provided so that this disclosure will satisfy applicable legal requirements. Like reference numerals refer to like elements throughout. The terms data content information and similar terms may be used interchangeably according to some example embodiments to refer to data capable of being transmitted received operated on and or stored. Moreover the term exemplary as may be used herein is not provided to convey any qualitative assessment but instead merely to convey an illustration of an example. Thus use of any such terms should not be taken to limit the spirit and scope of embodiments of the present invention.

In some examples natural language generation systems are configured to produce textual outputs that describe complex systems such as but not limited to the generation of text relating to complex machinery clinical summaries financial summaries weather reports and or the like. In many instances a user of a natural language generation system may otherwise be required to interpret data symbols or other information in order to make a decision or otherwise gain an understanding of a current context a situation an alert condition or an event relating to a complex system. In order to make such a decision or to otherwise react to an event a user may need to obtain an awareness e.g. situational awareness of the current context e.g. both at the time of an event and at a time subsequent to the event the situation the alert condition or the event related to the complex system before taking an action.

Accurate mental models are one of the prerequisites for achieving situational awareness. A mental model can be described as a set of well defined highly organized yet dynamic knowledge structures developed over time from experience. As such in order to assist a user such as a decision maker in analyzing a complex system an output text e.g. situational analysis text or an alert validation text may be generated as is described in both PCT US2012 053115 filed Aug. 30 2012 and PCT US2012 053127 filed Aug. 30 2012 which are incorporated by reference in their entirety herein. However the output text may be generated at a time in which a triggering event occurred or at some other time in the past that is prior to review by a user. Such a delay may result in the information contained in the output text becoming stale or otherwise outdated. For example a doctor investigating a heart rate alarm may receive an output text describing related data e.g. blood pressure respiration rate or the like actions which could affect heart rate e.g. medication surgery or the like and or background information e.g. genetics medical conditions or the like at the time of the heart rate alarm. However that text may not contain all of the relevant information should a doctor review the output text 30 minutes after the heart rate alarm was triggered.

As such in order to be useful to a reader in providing situational awareness the output text may need to be updated to account for the behavior of the complex system in the time period after the triggering event or after an output text was last reviewed. For example an output text may be updated in a manner that highlights how the behavior of one or more systems within the complex system has changed since the output text was first produced. For example if an original alert was generated in response to the heart rate of a patient being dangerously high then it would be useful for a reader of an output text to know whether the heart rate has remained at its current high level increased to an even more dangerous level or decreased to a safe level e.g. baseline since the time of the alarm.

Consequently the example method apparatus and computer program product described herein is configured to produce updates for previously generated output texts based on updateable data elements analyzed over an update time window e.g. a set time period a fixed time interval a user defined time period and or the like to provide a user group of users or other operator with situational awareness of an event a current status a happening or the like. In some example embodiments and at a time that is subsequent to the generation of the original text one or more updateable data elements e.g. a state behavior happening and or occurrence of a data channel that may be described by one or more original messages may be determined. Based on the located one or more updateable data elements new messages may be constructed that analyze or otherwise describe the updateable data elements over the update time window. The new messages may then be compared with an original message such as a most recent message that describes the updateable data element to determine any changes over the update time window. Specifications may then be added to the new messages to linguistically highlight the results of the comparison. In some example embodiments an additional document plan containing the new messages is added to the original document plan and the resultant document plan is configured to be processed by a microplanner and a realizer to generate an updated text. Alternatively or additionally instead of the new messages populating an additional document plan the new messages may replace or may otherwise be combined with the original messages that describe the same updateable data element in the original document plan.

In some example embodiments a natural language generation system such as natural language generation system is configured to generate words phrases sentences text or the like which may take the form of a natural language text referred to herein as an original output text. The natural language generation system comprises a document planner a microplanner and or a realizer in some example embodiments. The natural language generation system may also be in data communication with the raw input data message store and or domain model . Other natural language generation systems may be used in some example embodiments such as a natural language generation system as described in Building Natural Language Generation Systems by Ehud Reiter and Robert Dale Cambridge University Press 2000 which is incorporated by reference in its entirety herein.

In some example embodiments and during the generation of the original text a data analysis system may be configured to instantiate or otherwise build one or more original messages based on the raw input data . Raw input data may include data such as but not limited to time series data that captures variations across time e.g. profits rainfall amounts temperature or the like spatial data that indicates variation across location e.g. rainfall in different regions spatial temporal data that combines both time series data and spatial data e.g. rainfall across time in different geographical output areas a previously generated text and or the like. The raw input data contained or otherwise made accessible by the raw input data may be provided in the form of numeric values for specific parameters across time and space but the raw input data may also contain alphanumeric symbols such as the RDF notation used in the semantic web or the content of database fields. The raw input data may be received from a plurality of sources and as such data received from each source sub source or data that is otherwise related may be grouped into or otherwise referred to as a data channel.

In some examples a message store or knowledge pool may store the one or more original messages e.g. original messages that describe updateable data elements new messages and or the like that are received from or instantiated by the data analysis system . In some examples the original messages may be received from one or more other sources such as from other natural language generation systems other remote data stores or the like. Messages are language independent data structures that correspond to informational elements in a text and or collect together underlying data referred to as slots arguments or features which can be presented within a fragment of natural language such as a phrase or sentence. Messages may be represented in various ways for example each slot may consist of a named attribute and its corresponding value these values may recursively consist of sets of named attributes and their values and each message may belong to one of a set of predefined types. The concepts and relationships that make up messages may be drawn from an ontology e.g. a domain model that formally represents knowledge about the application scenario. In some examples the domain model is a representation of information about a particular domain. For example a domain model may contain an ontology that specifies the kinds of objects instances concepts and or the like that may exist in the domain in concrete or abstract form properties that may be predicated of the objects concepts and the like relationships that may hold between the objects concepts and the like and representations of any specific knowledge that is required to function in the particular domain. The one or more original messages stored in the message store are accessible by the natural language generation system .

As such and in some example embodiments the document planner is configured to input one or more original messages from the message store and to arrange those original messages based on a document plan. The output of the document planner may be a tree structured object or other data structure that is referred to herein as an original document plan tree. In some examples the original document plan tree is configured such that the leaf nodes of the tree may contain the original messages and the intermediate nodes of the tree structure object indicate how the subordinate nodes are related e.g. elaboration consequence contrast sequence and or the like to each other.

The microplanner is configured to construct a text specification based on the original document plan tree output from the document planner such that the original document plan tree may be expressed in natural language. In some example embodiments the microplanner may convert the one or more messages in the original document plan tree into one or more phrase specifications in a text specification. In some example embodiments the microplanner may perform aggregation lexicalization and referring expression generation. In some examples aggregation includes but is not limited to determining whether two or more messages can be combined together linguistically to produce a more complex phrase specification. For example one or more messages may be aggregated so that both of the messages can be described by a single sentence. In some examples lexicalization includes but is not limited to choosing particular words for the expression of concepts and relations. In some examples referring expression generation includes but is not limited to choosing how to refer to an entity so that it can be unambiguously identified by the reader.

A realizer is configured to traverse a text specification output by the microplanner to express the text specification in natural language. The realization process is applied to each phrase specification and further makes use of a grammar which specifies the valid syntactic structures in the language and further provides a way of mapping from phrase specifications into the corresponding natural language sentences. The output of the process is in some example embodiments the original output text.

In some example embodiments the textual update system is configured to access the one or more original messages in the message store and the original document plan tree in order to generate or cause the generation of an updated output text. The textual update system is further configured to determine one or more updateable data elements. An updateable data element may be described by one or more original messages in the original document plan tree and for example may describe at least one of a state behavior happening and or occurrence of the one or more data channels. For example an example updateable state may include detecting whether a machine was activated or not during a particular time interval and an example updateable behavior may include whether a temperature detected was rising remaining stable or falling. In some examples the updated text may be generated for an update time window such as a time period that is subsequent to the original output text a time period that is subsequent to the generation of an updated output text a fixed time interval a time period bounded by a triggering event a user requested time period and or the like. In some examples an updated text may be generated at a fixed interval until a user indicates that he she has read the output text.

The textual update system may be configured to analyze each updateable data element such as by using the data analysis system over the time period defined by the update time window. The result of the analysis is the instantiation of a new message or messages that in some examples summarizes or otherwise describes the updateable data element during the update time window identifies a significant event during the update time window e.g. an occurrence that satisfies a threshold is identified by the domain model as important is flagged by the user has a high importance level or the like indicates an occurrence or happening during the time window and or the like. In some example embodiments the data analysis system may use the same methods computations or analysis used during the creation of the one or more original messages describing the updateable data element in the creation of each of the new messages.

For each new message that is generated by the data analysis system the textual update system may be configured to compare that new message to a corresponding message that describes the earlier behavior of the updateable data element. In some examples the comparison occurs between the new message and the most recent message that describes or otherwise summarizes the updateable data element. For example each updateable data element is described by one or more messages that summarize or otherwise describe how the updateable data element behaved over a certain time as such the most recent message is the message that describes the most recent time period. As a result of the comparison the textual update system may determine or otherwise classify the comparison as having an unchanged state or an unchanged data value when compared to a baseline e.g. a measurement calculation or location used as a basis for comparison provided as meta data by a domain model user input or the like or previous values in the updateable data element as having a state and or data value that are stabilizing at a baseline as having a state that has changed as indicating that a value of a data channel is stable as indicating a value of data channel is changing in the same or opposite direction as indicated by the updateable data element and or the like. Alternatively or additionally a new message may be classified based on the nature of the change indicated by the new message the updateable data element described by the message and or the like.

The textual update system in conjunction with the document planner may then generate an additional or new document plan based on the new messages and their respective classification and or categorization. In some examples new messages having the same classification and or categorization may be grouped and ordered within each group based on the order of corresponding original messages describing the updateable data elements in the original document plan an importance a user preference and or the like.

The textual update system may optionally add an annotation to a new message or to a grouping of messages that provides instructions or a specification for realization. In some example embodiments this annotation may override otherwise default behavior by the microplanner and or the realizer . In some examples the annotation may indicate that a new message or group of new messages is to be omitted in an instance in which the new message or groups of messages indicates that the original messages describing the updateable data element and the new message both indicate that a behavior of a data channel is stable at a baseline and or the like. In some example cases an annotation may indicate that a standard lexicalization should be modified. Such lexicalization modifications include but are not limited to if the verb is be change to remain otherwise add the adverb still if the verb is be change to return to otherwise add the adverb again if the verb is be change to change to otherwise leave alone unless a message specific lexicalization is given for a state change e.g. start and stop for a run status state change change the verb W to continue to VV if the verb is be change to became otherwise add back after the verb e.g. fell back to NN and or the like. In some examples the annotation may result in a change in linguistic form for example to use the linguistic form XX stabilized at a new value of VV. 

The grouped and ordered messages having appropriate annotations in the form of a new or additional document plan may then be inserted into the original document plan to form a combined or resultant document plan. In some examples the additional document plan may be inserted in its entirety at specific location in the original document plan such as after the first paragraph of the original document plan. However in other embodiments the additional document plan can be merged with the original document plan such that the new messages share a document plan tree leaf node with the corresponding earlier message. Alternatively or additionally the original document plan may comprise an indication of where new messages should be inserted should new messages be available. The combination of the original document plan and the additional document plan may then be output to a microplanner and realizer for the generation of the updated output text.

By way of an example and as is described herein the environment of is configured to generate an updated output text. For example the data analysis system may receive raw input data such as the data in the following table that illustrates a the behavior of a primary data channel e.g. heart rate and a related data channel e.g. respiration rate 

As is demonstrated by the raw input data in the table above heart rate rose to beats per minute bpm at time point . As such the data analysis system may be configured to generate one or more messages based on the raw input data in the one or more data channels e.g. heart rate and respiration rate . Using the heart rate data channel as an example a message may include portions of the raw input data to include abstractions of the data but may also include additional distinctions necessary for the generation of text as the raw input data is likely to be insufficient for such a purpose. For example using the raw input data above a HeartRateTrend message may be instantiated such that it indicates heart rate rose to 118 at time point and also indicate that a baseline heart rate is typically between 50 75 an Event message may be instantiated with an indication that caffeine was given at time point and a RespirationRate message may indicate that the respiratory rate was stable at 15 and may further indicate that a baseline respiratory rate is 15. As such these original messages may be arranged in a document plan and using the microplanner and the realizer an original output text may be generated that recites the patient s heart rate jumped to 118 bpm after she was given caffeine. Respiration was stable at 15 bpm. 

By way of further example the textual update system may be configured to update the original output text. As such the textual update system may initially determine that the heart rate data channel and the respiration data channel are updateable data elements because they relate to a state behavior happening and or occurrence of the heart rate and respiration rate data channels. In this case the application of caffeine would not represent an updatable data element because it is an event. In examples where caffeine was given continuously intravenously a state indicating whether caffeine was being currently administered or not could be updateable. In this example the textual update system in conjunction with the data analysis system may determine that the heart rate returned to 70 bpm and therefore the textual update system would create or otherwise have access to a new message that indicates that heart rate returned to 70 bpm. The textual update system may further determine that respiration rate remained stable at and then may create or otherwise have access to a new message indicating as such.

The new messages may then be classified or otherwise categorized. The new message relating to heart rate may be classified such that the classification indicates that the behavior of the updateable data element has changed when compared to the previous message described the data element e.g. HeartRateTrend message that indicates that heart rate rose to 118 bpm and is stabilizing to the baseline. The new message relating to respiration may be classified as unchanged at the baseline because when compared to the previous message the respiration rate has remained the same. Based on the classification the new messages may be added to an additional document plan. As such the textual update system may annotate the new messages with realization instructions. In this case the new message relating to heart rate may be annotated such the verb be is changed to return to because the heart rate is returning to a baseline and the new message relating to respiration may be omitted because both the original message that described the updateable data element and the new message indicated a stable behavior of the updateable data element at a determined baseline.

The textual update system in conjunction with the document planner may cause the additional document plan to be inserted into the original document plan such that the original document plan can be processed by the microplanner and the realizer to generate an updated output text. In some examples the updated output text may recite The patient s heart rate jumped to 118 bpm after was given caffeine. Respiration was stable at 15 bpm. Afterwards heart rate returned to 70 bpm. 

Blocks illustrates a for loop that is configured to add at least one new message to NewMessages that describes or otherwise summarizes each updateable data element stored in UpdateableDataElements and referred to by CurrentDataElement. At block CurrentDataElement is set to a first stored updateable data element. At block at least one new message that describes the currently selected updateable data element in UpdateableDataElements is added to NewMessages. At decision block it is determined whether there is an additional updateable data element in UpdateableDataElements. If so then at block CurrentDataElement is set to the next updateable data element and the process loops back to block . If there is not an additional updateable data element in UpdateableDataElements at decision block then the process ends.

Blocks illustrate a for loop that is configured to loop through each message in NewMessages which contains the set of message that were generated in and were classified in and add each of the messages to a document plan node in an instance in which the message and the document plan node share a corresponding classification type. At block NewMessage is set the first message in NewMessages. At decision block it is determined whether NewMessage classification equals ClassificationType. If so then the NewMessage currently selected by NewMessage is added to the currently selected Node otherwise the process continues at block . At decision block it is determined whether there are additional messages in NewMessages. If so then at block NewMessage is set to the next message in NewMessages and the process loops back to decision block . If there are not any additional messages in NewMessages then at decision block it is determined whether there are any remaining classification types in the data structure ClassificationType. If so then at block the ClassificationType is set to the next classification and the process loops back to block . If it is determined that there are not any remaining classification types in the data structure ClassificationType then the process ends.

In the example embodiment shown computing system comprises a computer memory memory a display one or more processors input output devices e.g. keyboard mouse CRT or LCD display touch screen gesture sensing device and or the like other computer readable media and communications interface . The processor may for example be embodied as various means including one or more microprocessors with accompanying digital signal processor s one or more processor s without an accompanying digital signal processor one or more coprocessors one or more multi core processors one or more controllers processing circuitry one or more computers various other processing elements including integrated circuits such as for example an application specific integrated circuit ASIC or field programmable gate array FPGA or some combination thereof. Accordingly although illustrated in as a single processor in some embodiments the processor comprises a plurality of processors. The plurality of processors may be in operative communication with each other and may be collectively configured to perform one or more functionalities of the output text update system as described herein.

The data analysis system and or the natural language generation system are shown residing in memory . The memory may comprise for example transitory and or non transitory memory such as volatile memory non volatile memory or some combination thereof. Although illustrated in as a single memory the memory may comprise a plurality of memories. The plurality of memories may be embodied on a single computing device or may be distributed across a plurality of computing devices collectively configured to function as the output text update system. In various example embodiments the memory may comprise for example a hard disk random access memory cache memory flash memory a compact disc read only memory CD ROM digital versatile disc read only memory DVD ROM an optical disc circuitry configured to store information or some combination thereof.

In other embodiments some portion of the contents some or all of the components of the data analysis system and or the natural language generation system may be stored on and or transmitted over the other computer readable media . The components of the data analysis system and or the natural language generation system preferably execute on one or more processors and are configured to generate updated output texts as is described herein.

Alternatively or additionally other code or programs e.g. an administrative interface a Web server and the like and potentially other data repositories such as data repository also reside in the memory and preferably execute on one or more processors . Of note one or more of the components in may not be present in any specific implementation. For example some embodiments may not provide other computer readable media or a display .

The data analysis system and or the natural language generation system are further configured to provide functions such as those described with reference to . the data analysis system and or the natural language generation system may interact with the network via the communications interface with remote data sources alert systems e.g. remote reference data remote performance data remote aggregation data remote alert systems and or the like third party content providers and or client devices . The network may be any combination of media e.g. twisted pair coaxial fiber optic radio frequency hardware e.g. routers switches repeaters transceivers and protocols e.g. TCP IP UDP Ethernet Wi Fi WiMAX Bluetooth that facilitate communication between remotely situated humans and or devices. In some instance the network may take the form of the internet or may be embodied by a cellular network such as an LTE based network. In this regard the communications interface may be capable of operating with one or more air interface standards communication protocols modulation types access types and or the like. The client devices include desktop computing systems notebook computers mobile phones smart phones personal digital assistants tablets and or the like.

In an example embodiment components modules of the data analysis system and or the natural language generation system are implemented using standard programming techniques. For example the data analysis system and or the natural language generation system may be implemented as a native executable running on the processor along with one or more static or dynamic libraries. In other embodiments the data analysis system and or the natural language generation system may be implemented as instructions processed by a virtual machine that executes as one of the other programs . In general a range of programming languages known in the art may be employed for implementing such example embodiments including representative implementations of various programming language paradigms including but not limited to object oriented e.g. Java C C Visual Basic.NET Smalltalk and the like functional e.g. ML Lisp Scheme and the like procedural e.g. C Pascal Ada Modula and the like scripting e.g. Perl Ruby Python JavaScript VBScript and the like and declarative e.g. SQL Prolog and the like .

The embodiments described above may also use synchronous or asynchronous client server computing techniques. Also the various components may be implemented using more monolithic programming techniques for example as an executable running on a single processor computer system or alternatively decomposed using a variety of structuring techniques including but not limited to multiprogramming multithreading client server or peer to peer running on one or more computer systems each having one or more processors. Some embodiments may execute concurrently and asynchronously and communicate using message passing techniques. Equivalent synchronous embodiments are also supported. Also other functions could be implemented and or performed by each component module and in different orders and by different components modules yet still achieve the described functions.

In addition programming interfaces to the data stored as part of the data analysis system and or the natural language generation system such as by using one or more application programming interfaces can be made available by mechanisms such as through application programming interfaces API e.g. C C C and Java libraries for accessing files databases or other data repositories through scripting languages such as XML or through Web servers FTP servers or other types of servers providing access to stored data. The raw input data message store and or the domain model may be implemented as one or more database systems file systems or any other technique for storing such information or any combination of the above including implementations using distributed computing techniques. Alternatively or additionally the raw input data message store and or the domain model may be local data stores but may also be configured to access data from the remote data sources alert systems .

Different configurations and locations of programs and data are contemplated for use with techniques described herein. A variety of distributed computing techniques are appropriate for implementing the components of the illustrated embodiments in a distributed manner including but not limited to TCP IP sockets RPC RMI HTTP Web Services XML RPC JAX RPC SOAP and the like . Other variations are possible. Also other functionality could be provided by each component module or existing functionality could be distributed amongst the components modules in different ways yet still achieve the functions described herein.

Furthermore in some embodiments some or all of the components of the data analysis system and or the natural language generation system may be implemented or provided in other manners such as at least partially in firmware and or hardware including but not limited to one or more ASICs standard integrated circuits controllers executing appropriate instructions and including microcontrollers and or embedded controllers FPGAs complex programmable logic devices CPLDs and the like. Some or all of the system components and or data structures may also be stored as contents e.g. as executable or other machine readable software instructions or structured data on a computer readable medium so as to enable or configure the computer readable medium and or one or more associated computing systems or devices to execute or otherwise use or provide the contents to perform at least some of the described techniques. Some or all of the system components and data structures may also be stored as data signals e.g. by being encoded as part of a carrier wave or included as part of an analog or digital propagated signal on a variety of computer readable transmission mediums which are then transmitted including across wireless based and wired cable based mediums and may take a variety of forms e.g. as part of a single or multiplexed analog signal or as multiple discrete digital packets or frames . Such computer program products may also take other forms in other embodiments. Accordingly embodiments of this disclosure may be practiced with other computer system configurations.

As is shown in operation an apparatus may include means such as the natural language generation system the textual update system the processor or the like for determining a classification for each new message by comparing each new message with a corresponding original message that describes the same updateable data element. In some examples the comparison occurs between the new message and the most recent message that describes or otherwise summarizes the updateable data element. For example each updateable data element is described by one or more messages that summarize or otherwise describe how the updateable data element behaved over a certain time as such the most recent message is the message that describes the most recent time period. As is shown in operation an apparatus may include means such as the natural language generation system the textual update system the processor or the like for generating an updated document plan or document plan tree. As is shown in operation an apparatus may include means such as the natural language generation system the textual update system the processor or the like for generating a document plan tree node in the updated document plan tree for each classification.

As is shown in operation an apparatus may include means such as the natural language generation system the textual update system the processor or the like for placing each of the new messages within a document plan tree node the classification of the new message corresponding to the classification of the document plan tree node. As is shown in operation an apparatus may include means such as the natural language generation system the textual update system the processor or the like for ordering each message within each generated document plan tree node based on the location of the corresponding message e.g. the most recent corresponding message within the original document plan tree.

As is shown in operation an apparatus may include means such as the data analysis system the natural language generation system the textual update system the processor or the like for generating an annotation for one or more of the generated document plan tree nodes the annotation providing realization instructions. In some example embodiments an annotation may take the form of a linguistic marker that is added to the beginning of the additional document plan tree to signify that the new messages in the additional document plan tree are an update to the messages in the original document plan tree. As is shown in operation an apparatus may include means such as the data analysis system the natural language generation system the textual update system the processor or the like for populating the original document plan tree with the updated document plan tree at a predetermined location. The original document plan tree may then be output to a microplanner and or a realizer for transformation in an update output text.

Accordingly blocks of the flowchart support combinations of means for performing the specified functions and combinations of operations for performing the specified functions. It will also be understood that one or more blocks of the flowcharts and combinations of blocks in the flowchart can be implemented by special purpose hardware based computer systems which perform the specified functions or combinations of special purpose hardware and computer instructions.

In some example embodiments certain ones of the operations herein may be modified or further amplified as described herein. Moreover in some embodiments additional optional operations may also be included. It should be appreciated that each of the modifications optional additions or amplifications described herein may be included with the operations herein either alone or in combination with any others among the features described herein.

Many modifications and other embodiments of the inventions set forth herein will come to mind to one skilled in the art to which these inventions pertain having the benefit of the teachings presented in the foregoing descriptions and the associated drawings. Therefore it is to be understood that the inventions are not to be limited to the specific embodiments disclosed and that modifications and other embodiments are intended to be included within the scope of the appended claims. Moreover although the foregoing descriptions and the associated drawings describe example embodiments in the context of certain example combinations of elements and or functions it should be appreciated that different combinations of elements and or functions may be provided by alternative embodiments without departing from the scope of the appended claims. In this regard for example different combinations of elements and or functions than those explicitly described above are also contemplated as may be set forth in some of the appended claims. Although specific terms are employed herein they are used in a generic and descriptive sense only and not for purposes of limitation.

