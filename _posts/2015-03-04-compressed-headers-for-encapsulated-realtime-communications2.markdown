---

title: Compressed headers for encapsulated real-time communications
abstract: A system performs tunneling for real time communication (“RTC”) between a source endpoint and a destination endpoint. The system receives, by a server, a request from a user equipment (“UE”) for enabling header compression of inner internet protocol (“IP”) and transport headers of media traffic encapsulated within a tunnel. The media traffic corresponds to the RTC between the source endpoint and the destination endpoint. The system determines a mapping that maps one or more indices to identifying information of the source endpoint and the destination endpoint, and sends a response to the UE including the mapping. Upon sending the response, the UE and the server communicate the media traffic according to the mapping, where the media traffic includes media packets in which inner IP and transport headers are replaced with an index within the one or more indices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09609035&OS=09609035&RS=09609035
owner: Oracle International Corporation
number: 09609035
owner_city: Redwood Shores
owner_country: US
publication_date: 20150304
---
One embodiment is directed generally to a communications network and in particular to delivering real time traffic over a communications network.

Many enterprises have moved from telephony services using the Public Switched Telephone Network PSTN provided by a traditional telephone company to telephony services using the Internet Protocol IP provided by an IP Telephony service provider . Such services are commonly known as Voice over IP VoIP or IP Telephony. IP Telephony uses an IP network e.g. the Internet as a backbone and can thus provide advanced features such as video conferencing call recording and call forwarding.

Recently driven by the growing base of mobile data subscribers ubiquitous Internet access and high bandwidth that is now available in both fixed and mobile networks advanced services accessed via the Internet known as Over the Top OTT services have become popular. However while OTT services threaten traditional telephony offerings innovative service providers are introducing their own OTT services and must therefore overcome a number of unique challenges as they deploy and market these new services.

One embodiment is a system for tunneling of real time communication RTC between a source endpoint and a destination endpoint. The system receives by a server a request from a user equipment UE for enabling header compression of inner internet protocol IP and transport headers of media traffic encapsulated within a tunnel. The media traffic corresponds to the RTC between the source endpoint and the destination endpoint. The system determines a mapping that maps one or more indices to identifying information of the source endpoint and the destination endpoint and sends a response to the UE including the mapping. Upon sending the response the UE and the server communicate the media traffic according to the mapping where the media traffic includes media packets in which inner IP and transport headers are replaced with an index within the one or more indices.

One embodiment provides efficient tunnels for real time communications RTC services between a client and a tunneling server. In one embodiment when redundant inner network and transport headers corresponding to a fixed source and a fixed destination are transmitted in packetized media traffic that is encapsulated within a tunnel such headers are replaced by equivalent compressed headers which are understood by the client and the tunneling server. Accordingly embodiments improve RTC throughput by providing efficient tunneling of media traffic.

In performing RTC UE communicates media traffic e.g. speech video etc. with a media server in service provider network . UE also communicates signaling traffic with a signaling server within service provider network according to an application layer protocol such as the Session Initiation Protocol SIP . SIP is a signaling communications protocol conventionally used for controlling multimedia communication sessions such as voice and video calls over IP networks. SIP is configured to be independent of the underlying transport layer. Accordingly SIP can run on different transport protocols such as the Transmission Control Protocol TCP the User Datagram Protocol UDP etc. TCP is one of the core protocols of the IP suite and provides reliable ordered and error checked delivery of a stream of octets between programs running on computers connected to an IP network such as a local area network an intranet or the public Internet. A datagram is a basic transfer unit associated with a packet switched network for which the delivery arrival time and order of arrival need not be guaranteed by the network. UDP is a protocol that uses a simple connectionless transmission model with a minimum of protocol mechanisms. Applications that do not require the reliability of a TCP connection may instead use UDP which emphasizes low overhead operation and reduced latency rather than error checking and delivery validation.

Network further includes a tunneling server that together with a tunneling client within UE provides functionality for establishing and managing tunnels for performing RTC according to the Tunneled Services Control Function TSCF standard as described in for example 3rd generation partnership program 3GPP technical report TR 33.830 V0.5.0 the disclosure of which being incorporated herein by reference.

In general using a tunnel for communication refers to using a delivery protocol to encapsulate a different payload protocol. The TSCF standard provides client side and server side network elements for establishing managed Transport Layer Security TLS tunnels for performing RTC. TLS is a cryptographic protocol configured to provide communication security over the Internet. TLS is an Internet Engineering Task Force IETF standards track protocol as provided in for example IETF request for comments RFC 2246 RFC 4346 RFC 5246 and or RFC 6176.

In one embodiment tunneling client and tunneling server establish and manage a TSCF tunnel according to the TSCF standard. TSCF tunnel encapsulates traffic within an outer protocol e.g. TCP . In this embodiment UE may use TSCF tunnel to traverse security devices e.g. firewalls proxies etc. and connect to tunneling server to reach service provider network for performing RTC. In one embodiment UE may execute a SIP based RTC application that relies on a library such as the software development kit SDK provided by the Tunneled Session Management Solution from Oracle Corp.

System includes a bus or other communication mechanism for communicating information and a processor coupled to bus for processing information. Processor may be any type of general or specific purpose processor. System further includes a memory for storing information and instructions to be executed by processor . Memory can be comprised of any combination of random access memory RAM read only memory ROM static storage such as a magnetic or optical disk or any other type of computer readable medium. System further includes a communication device such as a network interface card to provide access to a network. Therefore a user may interface with system directly or remotely through a network or any other method.

Computer readable media may be any available media that can be accessed by processor and includes both volatile and nonvolatile media removable and non removable media and communication media. Communication media may include computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.

Processor may further be coupled via bus to a display such as a Liquid Crystal Display LCD . A keyboard and a cursor control device such as a computer mouse may further be coupled to bus to enable a user to interface with system on an as needed basis.

In one embodiment memory stores software modules that provide functionality when executed by processor . The modules include an operating system that provides operating system functionality for system . The modules further include a tunneling module for providing tunneling and all other functionality disclosed herein. In one example embodiment tunneling module may implement tunneling server of in conjunction with one or more remaining elements of . System can be part of a larger system such as added functionality to the Acme Packet 4500 session border controller from Oracle Corp. Therefore system can include one or more additional functional modules to include the additional functionality. A database is coupled to bus to provide centralized storage for tunneling module and additional functional modules .

In one embodiment tunneling module and or additional functional modules may include a receiving module that receives by a server a request from a UE for enabling header compression of inner IP and transport headers of media traffic encapsulated within a tunnel where the media traffic corresponds to the RTC between the source endpoint and the destination endpoint a determining module that determines a mapping that maps one or more indices to identifying information of the source endpoint and the destination endpoint and a sending module that sends a response to the UE including the mapping as will be described herein with reference to .

Referring again to with some known systems tunneling client and tunneling server establish TSCF tunnel as a TCP TLS tunnel that encapsulates UDP media traffic. Table 1 provides example protocol layers when TSCF tunnel is used for encapsulating and communicating UDP media traffic.

With these known systems RTC media traffic e.g. speech video etc. inside TSCF tunnel is usually communicated between fixed source and destination IP addresses and transport ports and specific IP addresses are assigned to tunneling client and tunneling server when they establish maintain and terminate TSCF tunnel . However such fixed IP addresses and transport ports are generally included in every single inner IP and transport header typically 28 bytes .

One disadvantage with this known configuration is that the inclusion of highly redundant information in the inner IP and transport headers results in a waste of bandwidth. This bandwidth waste is further aggravated when very low bitrate codecs are used i.e. when the amount of payload in each packet is very small . Examples of very low bitrate codecs that implement very small payloads typically 12 bytes are the Adaptive Multi Rate AMR codec and the International Telecommunication Union ITU G.711 and G.723 Speech Codecs.

In contrast to the known systems embodiments of the present invention allow for header compression at the inner UDP layer within a tunneling configuration. In one embodiment the inner IP and transport headers are replaced with much shorter indices typically 3 or 4 bytes each in order to dramatically improve the overall transmission throughput of TSCF tunnel . One embodiment first detects redundancy in header transmission and then adaptively enables or disables header compression accordingly and without client application intervention. Thus embodiments reduce the required bandwidth for media communication for example 12 reduction in required bandwidth for a high bit rate codec such as the ITU G.711 codec and 65 reduction in required bandwidth for a low bit rate codec such as the AMR codec . One embodiment provides a software application programming interface API at UE that allows for dynamic enabling disabling of the header compression functionality.

In one embodiment the header compression functionality is provided based on a bi directional mapping between each index and a corresponding sequence of inner IP and transport headers. That is each index corresponds to a specific IP header and transport header i.e. a sequence of headers thus a one to one mapping is provided between an index and two headers. In one embodiment the mapping functionality is implemented at a first compressed header module at tunneling client and a second compressed header module at tunneling server . Based on the mapping first compressed header module and second compressed header module perform mapping between IP and transport headers of the inner UDP of media traffic and corresponding indices.

For example when a media packet is transmitted from UE to tunneling server first compressed header module replaces the IP and transport headers of the inner UDP of the packet with a corresponding index according to the mapping received from tunneling client for the corresponding RTC. Upon reception of the packet by tunneling server second compressed header module replaces the index with corresponding IP and transport headers according to the mapping. The same functionality is provided in the opposite direction when a media packet is transmitted from tunneling server to UE .

In one embodiment the mapping between the inner IP and transport headers and the corresponding indices is dynamically enabled and performed without intervention of application . For example when tunneling client and tunneling server determine that media traffic is communicated between fixed endpoints they enable header compression functionality for that communication by implementing a respective one of first compressed header module and second compressed header module . Accordingly the implementation of header compression functionality is transparent to application .

In one embodiment the mapping between the inner IP and transport headers and the corresponding indices is based on a hash map. In one embodiment TSCF tunnel supports up to 256 individual mappings between indices and headers. That is tunneling server stores a table with 256 entries where each entry relates an index to an IP header and a transport header i.e. a sequence of IP and transport headers thus providing a one to one mapping.

One embodiment provides control messages for communicating compressed header media traffic encapsulated within TSCF tunnel . According to the TSCF standard control messages between tunneling clients and a tunneling server are of a request response type and a control message response for a request includes either a corresponding reply or an error code indicating why the request could not be honored. TSCF control messages utilize a Type Length Value TLV encoding. TLV is defined as the variable length concatenation of a unique Type represented by an integer and a Value containing the actual value identified by the Type.

One embodiment provides a TSCF service request control message to enable header compression functionality. In this embodiment when RTC traffic endpoints have fixed IP address and transport ports tunneling client sends a TSCF client service request message of type Enable Header Compression to tunneling server including TSCF client connection information TLVs that identify source and destination endpoints. Subsequently tunneling server maps this connection information i.e. IP addresses and transport ports into an index for example an 8 bit index and sends a TSCF service response control message of type Enable Header Compression back to tunneling client including a header compression index TLV that indicates the index value that tunneling client should use to identify the corresponding sequence of headers. Thereafter tunneling client or tunneling server communicate media traffic with inner IP and transport headers replaced with a compressed header i.e. the index .

In one embodiment the length of the compressed header is based on the payload size. In one non limiting example embodiment the compressed header is either 3 bytes or 4 bytes depending on the amount of data to be sent. Tables 2 and 3 provide example media packet configurations with such compressed headers.

In the example configuration of Table 2 a 3 byte compressed header is used for payload lengths smaller than 256 bytes. In the example configuration of Table 3 a 4 byte header is used for payload lengths between 256 and 65535 bytes.

One embodiment provides a TSCF service request control message to disable header compression functionality. In this embodiment when UE determines that this functionality needs to be terminated tunneling client sends a client service request control message of type Disable Header Compression to tunneling server to remove the mapping between connection information and indices. This request includes a compression index TLV to indicate that the index needs to be removed.

One embodiment provides a number of TSCF TLVs for implementing client service request control messages of type Enable Header Compression and Disable Header Compression for enabling and disabling header compression respectively. For example this embodiment provides a TLV for implementing a client service request control message of type Connection Info IPv4 to indicate source and destination IP addresses and ports of the subject endpoints. The client service response control messages to this request is of the same type and includes a Header Compression Index TLV indicating the index to be used to compress the sequence of IP and transport headers. If tunneling server is not configured to support this functionality it responds to tunneling client with a TLV indicating an error code e.g. tsc response service unavailable .

Table 4 provides examples TLVs for implementing TSCF service request and response control messages for implementing header compression according to some present embodiments.

One embodiment marks a network socket at UE as a candidate source socket for header compression. A network socket is an endpoint of an inter process communication flow across a computer network which is the point for sending or receiving packet delivery services. A datagram socket is a type of connectionless network socket. Each packet sent or received on a datagram socket is individually addressed and routed. A stream socket is a type of connection oriented and sequenced network socket which provides functionality for creating and destroying connections and for detecting errors. In one embodiment when a network socket is marked as a candidate source socket for header compression the software library at UE checks for traffic between that source socket and other destinations. When the software library determines that the number of communicated packets is above a threshold tunneling client initiates negotiation with tunneling server for enabling header compression functionality.

In one embodiment header compression functionality is requested by tunneling client via an API e.g. a tsc socket API . For example header compression functionality may be requested by setting a corresponding socket option as provided in the following example functionality.

At tunneling client sends a TSCF service request control message e.g. a header compression service request message to tunneling server to request enablement of header compression functionality. The message includes TSCF client connection information TLVs that identify source and destination endpoints for media communication.

At tunneling server maps this connection information i.e. IP addresses and transport ports of the source and destination endpoints to an index and sends a TSCF service response control message e.g. a header compression service response message to tunneling client . The message includes the index which should be used for mapping.

At tunneling client and tunneling server begin communicating media traffic in which inner IP and transport headers are replaced with a compressed header i.e. the index .

In one embodiment the mapping functionality is backward compatible such that new clients may interact with relatively older servers. For example when at tunneling client sends the header compression service request message to tunneling server if tunneling server is older and does not recognize such type of TSCF service request at it responds back to tunneling client with an error response code to prevent tunneling client from using header compression functionality while not affecting regular tunneling functionality.

In one embodiment when tunneling client receives the header compression service response message from tunneling server at tunneling client uses a notification e.g. a tsc notification header compression to indicate to application that header compression functionality is enabled. The following example functionality provides this notification and the corresponding callback.

At tunneling server receives a request from tunneling client for enabling header compression of inner IP and transport headers of media traffic encapsulated within TSCF tunnel . The request is a service request control message according to the TSCF standard and includes a TSCF TLV indicating the identifying information of a source endpoint and a destination endpoint that communicate the media traffic in an RTC. The identifying information includes IP addresses and transport ports of the source endpoint and the destination endpoint. In one embodiment tunneling client requests enabling of the header compression when detecting media traffic between source and destination endpoints with fixed IP addresses and transport ports.

At tunneling server determines a mapping that maps one or more indices to the identifying information of the source endpoint and the destination endpoint.

At tunneling server sends a response to tunneling client including the mapping. Upon sending the response tunneling client and tunneling serve may communicate media traffic according to the mapping where the media traffic includes media packets in which inner IP and transport headers are replaced with an index within the one or more indices. The response is a service response control message according to the TSCF standard and includes a TSCF TLV indicating the mapping.

In one embodiment the header compression is disabled by tunneling client by sending a corresponding service request control message according to the TSCF standard.

As disclosed embodiments provide a TSCF tunneling configuration that implements compressed headers. One embodiment determines whether traffic is communicated between a fixed source address transport and a fixed destination address transport and automatically enables disables header compression functionality accordingly. Thus when speech or video payloads are packetized and transmitted from a fixed source endpoint to a fixed destination endpoint the compression of redundant header information results in efficient use of bandwidth. This gain is even more significant when smaller payloads e.g. payloads of highly efficient low bit rate codecs such as AMR are communicated. Accordingly embodiments give the end user the possibility of improving the overall network performance and increasing the number of simultaneous serviceable tunnel clients for a fixed bandwidth. Further embodiments improve the overall call quality by reducing network congestion.

Several embodiments are specifically illustrated and or described herein. However it will be appreciated that modifications and variations of the disclosed embodiments are covered by the above teachings and within the purview of the appended claims without departing from the spirit and intended scope of the invention.

