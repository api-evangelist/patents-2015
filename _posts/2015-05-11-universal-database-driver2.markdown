---

title: Universal database driver
abstract: Methods, systems, and computer program products are included to provide a universal database driver, into which one or more driver implementations may be loaded. The universal database driver communicates with one or more databases using the appropriate driver implementation for each database. A driver manager is provided that requests driver implementations corresponding to the databases, and loads the driver implementations into the universal database driver.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09547508&OS=09547508&RS=09547508
owner: Red Hat, Inc.
number: 09547508
owner_city: Raleigh
owner_country: US
publication_date: 20150511
---
A Java Database Connectivity JDBC Application Programming Interface API defines an interface for an application to interact with a database. For example a user may use the JDBC API to connect to a database and insert data values into a database locate data values in the database delete data values from the database and or retrieve data values from the database.

There are many different database types. Each database type may have a different communication protocol. Accordingly a JDBC API that provides an interface for one type of database may not be compatible with another type of database.

Each JDBC API may be implemented in a JDBC driver. A database vendor that provides a database may distribute a JDBC driver to the users of the database in order for the users to access the database. As the number of database types continues to increase the number of JDBC drivers released by database vendors also continues to increase as well.

For a user this creates the problem of identifying accessing and installing the correct JDBC driver for each database that the user would like to access. This problem is compounded as additional versions of databases and JDBC drivers are released. In many instances a user may not have access privileges to install the required JDBC driver needed to access a database. For example installing a driver may require system administrator access that the user does not have.

According to an example a computer implemented method includes specifying at an application a uniform resource locator URL and a database request wherein the URL identifies a location of a database wherein the URL is associated with a property that identifies a driver implementation wherein the database request corresponds to the database. The method further includes communicating the URL and the database request to a universal database driver. The method further includes establishing a first connection to a driver implementation module associated with the database. The method further includes receiving via the first connection a driver implementation from the driver implementation module. The method further includes loading the driver implementation into the universal database driver to form a first database driver. The method further includes providing the first database driver as an interface to communicate the database request to the database.

According to an example a non transitory computer readable medium includes computer readable instructions the computer readable instructions executable by a processor to cause the processor to receive a uniform resource locator URL and a request corresponding to the URL wherein the URL is associated with a database and a driver implementation. The instructions further executable to request the driver implementation from a driver implementation module the driver implementation module being associated with the database. The instructions further executable to receive the driver implementation from the driver implementation module. The instructions further executable to create an instance of a driver the instance of the driver having methods that correspond to methods of the driver implementation. The instructions further executable to map a method of the instance of the driver to a method of a shim class. The instructions further executable to call the method of the shim class to at least one of i connect to the database ii send the request to the database and iii receive a result corresponding to the request.

According to an example a system includes a processor and a memory. The system further includes a universal database driver the universal database driver executable by the processor to communicate a database request to a database. The system further includes a driver manager communicatively coupled to the universal database driver the driver manager to request via a network a driver implementation from a driver implementation module that is an extension of the database the driver manager further to load the driver implementation into the universal database driver wherein at least one method corresponding to the driver implementation is mapped to at least one method corresponding to the universal database driver. The system further includes a cache communicatively coupled to the universal database driver and the driver manager the cache to store the driver implementation.

In the following description specific details are set forth describing some embodiments consistent with the present disclosure. It will be apparent however to one skilled in the art that some embodiments may be practiced without some or all of these specific details. The specific embodiments disclosed herein are meant to be illustrative but not limiting. One skilled in the art may realize other elements that although not specifically described here are within the scope and the spirit of this disclosure. In addition to avoid unnecessary repetition one or more features shown and described in association with one embodiment may be incorporated into other embodiments unless specifically described otherwise or if the one or more features would make an embodiment non functional.

System architecture includes a machine such as a computing device that includes hardware software or a combination of both hardware and software. The machine includes an application a universal database driver a cache and a driver manager . The application universal database driver cache and driver manager may be structured as software components hardware components or a combination of both.

In some examples the application is a JAVA application. In the present example the application is structured to specify a uniform resource locator URL that corresponds a database . The database is associated with data corresponding to the application . The URL includes properties such as a string that identifies the database driver required to access the database and any additional properties used to access the database .

For example the URL may be specified in a connection string for the database along with the properties for accessing the database such as 

String url jdbc postgresql address test user user password pw databasedriver java.postgresql.Driver where address is the location of a machine hosting the database test is the specific database to access on the machine user is a username used to access the database pw is the password corresponding to the username and java.postgresql.Driver is the identifier of the driver implementation that is required to access the database . In this example the driver implementation is a JDBC driver. Accordingly the driver implementation may be structured as one or more classes that are stored in a JAR file.

In another example the properties may be associated with the URL but not stored in the URL itself. For example the URL and properties may be specified as follows 

Parameter.setProperty databasedriver java.sql.Driver . In this example the driver implementation java.sql.Driver is specified as a property that is set in a parameter variable that is separate from the URL string. The properties are associated with the URL string even when not part of the string itself such that a communication of the URL string may also include a communication of the properties.

In other examples additional properties may be specified corresponding to the driver implementation. For example different driver implementations may be specified based on the specified properties associated with the URL. For example a driver implementation of a particular driver may provide encryption while another driver implementation of that driver does not provide encryption. Accordingly based on which property is specified the application may control whether to use the driver implementation that provides encryption or the driver implementation that does not provide encryption. In another example driver implementations may be customized for other purposes besides encryption. For example driver implementations may be customized for the purposes of debugging or providing special SQL construct support.

In other examples the application represents an application server that communicates with a client application via a network. The client application may be for example a browser based application on a remote client machine that accesses the application remotely.

In the present example the universal database driver is structured to receive the URL and one or more database requests that are sent from the application . In some examples the universal database driver is a universal JDBC database driver that is configured to provide a JDBC API interface for the application to access one or more databases such as database on behalf of the application . A database driver is referred to as a universal database driver if it is capable of being used to interface with databases that require different drivers. For example a database driver is a universal database driver if it is capable of interfacing with a first database that requires a first database driver and a second database that requires a second database driver where the first database driver and the second database driver are different database drivers. In some examples the universal database driver is a template into which a database driver implementation may be loaded to form a database driver that is capable of interfacing with a particular database or database type. The template may be for example a shim class as described below in further detail. In some examples a universal driver includes a template which when mapped to and or loaded with particular database driver implementations is capable of interfacing to databases corresponding to the database driver implementations. For example a universal database driver may be loaded with a first database driver implementation in order to interface with a first database and be loaded with a second database driver implementation in order to interface with a second database.

A database request may be for example a statement that is executed to search insert data into delete and or retrieve data values from one or more databases. In some examples the database request is an SQL statement such as a SELECT statement a DELETE statement an INSERT statement and so forth. In other examples the database request is a non SQL database request. In the present example the universal database driver is structured with a driver implementation that is loaded into the universal database driver by the driver manager . The driver implementation provides a compatibility layer such that the universal database driver is configured to communicate between the application and one or more databases.

In the present example the universal database driver is structured to accept as input one or more driver implementations from the driver manager . In the present example the universal database driver is structured with a shim class. In some examples shim class is a class that inherits data and behavior of a base class. In other examples a shim class is a class that provides a compatibility layer for accessing data and or methods of another class. In yet another example a shim class is a template class that passes on its calls to another class. A shim class may be used for example to provide access to data and or methods of one or more classes that are included in one or more database implementations. In some examples a universal database driver is a program that includes a shim class that is capable of accessing data and or methods of one or more driver implementations in order to act as an interface with one or more databases.

The universal database driver is structured to identify classes of an input driver implementation and to map those classes to the shim class. In particular methods of the input driver implementation may be mapped to methods of the shim class. Accordingly by calling methods of the shim class methods of the driver implementation may be called. The shim class therefore provides a layer that translates between the application and the driver implementation input by the driver manager . Input of a driver implementation into the universal database driver and mapping of the driver implementation is referred to as loading the driver implementation into the universal database driver .

In the present example the cache is structured as a relational database that stores records. Records may be structured as key value pairs. In the present example each key corresponds to a URL. The value associated with each key corresponds to the driver implementation that is associated with the URL. In some examples the value is a pointer to the driver implementation. In other examples the value is an identifier corresponding to the driver implementation.

In the present example the driver manager is a component that manages driver implementations such as JDBC database drivers. In some examples the driver manager is a JAVA component. The driver manager is structured to send the URL and its associated properties to a driver implementation module to retrieve a driver implementation that corresponds to the URL and its specified properties. For example if the driver implementation is stored in a JAR file the JAR file may be downloaded from the driver implementation module to the driver manager . The driver manager is structured to input the received driver implementation into the universal database driver and the cache . Inputting the received driver implementation into the cache allows future use of the driver implementation without having to request the driver implementation from the driver implementation module . Providing local access to driver implementations allows driver implementations to be accessed more efficiently.

System architecture includes a database management system . In some examples the database management system is deployed on a machine that is separate from the machine and accessible to the machine components via a network . For example the database management system may be deployed on a remote database server. In other examples the database management system may be stored locally on the machine . In the present example the database management system is structured to receive database requests URLs and URL properties from the components of the machine .

The database management system includes a driver implementation module that is structured to respond to driver implementation requests by sending driver implementations to the driver manager . In the present example the driver implementation module is structured as an extension of the database such that a first access of the database results in retrieval of the appropriate driver implementation for accessing the database . In the present example the driver implementation module includes a data store that stores driver implementations associated with the database . Driver implementation module is structured to match driver implementation requests from the driver manager with stored driver implementations and to return the matching driver implementations to the driver manager .

The database management system includes a database that is structured as a data store. The database management system is structured to access the data store to store query delete sort and retrieve data values on behalf of the universal database driver and the application .

The database may include any type of database such as one or more flat files SQL databases XML databases and variants and combinations thereof. For example a database may be a relational database or a non relational database.

In the present example the user application is structured as separate from a JAVA virtual machine JVM . For example the user application may be a browser application or other application running on a remote user machine. The user application is structured to send a URL including URL properties and a database request to the universal JDBC driver that is running on the JVM . The user application is communicatively coupled to the universal JDBC driver such as via a network and an application server.

In the present example a universal JDBC driver is structured as a JDBC driver for a plurality of different and non compatible database types. For example the universal JDBC driver is structured to interact with different JDBC driver implementations and call methods of those JDBC driver implementations in order to act as a universal JDBC driver for accessing the database as well as other databases not shown .

The universal JDBC driver is communicatively coupled to a cache a driver manager and a database . The cache is structured to store driver implementations. The driver manager is structured to receive driver requests from the universal JDBC driver to request the driver implementations corresponding to the driver requests from a driver implementation module and to load driver implementations received from the driver implementation module into the universal JDBC driver and cache . Accordingly the driver manager is communicatively coupled to the driver implementation module and the cache .

In the present example the database and the driver implementation module are stored on a database server . The database server may be for example a machine that is remote from a machine hosting the JVM and is accessible over a network. While one database server is shown here there may also be a plurality of database servers that are accessible to the universal JDBC driver and the driver manager.

At block an application specifies a URL including properties corresponding to the URL and a database request. The URL includes a database address and a database identifier. In the present example the URL includes the properties in the URL such as in a string that includes delimiters that separate the properties. In other examples the properties are stored separately from the URL such as in one or more property variables that are associated with and communicated with the URL. Properties include for example a driver implementation that is associated with the database identified in the URL. In the present example the request is a database statement that may be executed to insert search delete or perform other action on data values in the database.

At block the application sends the URL including the properties of the URL and the request to a universal database driver. The universal database driver receives the URL and the request.

At block the universal database driver requests a driver implementation corresponding to the URL from the cache. This may be performed by inputting the URL as a search key and returning any values that correspond to that key. If the driver implementation is located in the cache the process continues at block .

At block if the cache does not identify any driver implementations matching the URL then the universal database driver is able to determine that the driver implementation is not stored in the cache. Accordingly the universal database driver proceeds by sending the URL to a driver manager.

At block the driver manager identifies the address of the database such as by parsing the URL. For example the address of the database may be a first portion of a URL string the identity of the database may be a second portion of the URL string and properties of the database may be a third portion of the URL string. The first portion and the second portion may be separated for example by a I delimiter. The second and the third portions may be separated for example by a delimiter with each property in the URL being separated by a delimiter. In other examples the properties are stored separately from but in association with the URL string.

The driver manager sends the URL to the specified database address. The address may include a unique identifier for the location of the database and a port number. A driver implementation module corresponding to the address receives the URL. In some examples the driver implementation module monitors the port at the address for incoming requests. In other examples a database management system or other module monitors incoming requests and forwards driver implementation requests to the driver implementation module.

At block the driver implementation module parses the URL and properties to identify the particular database implementation to return responsive to the request from the driver manager. For example the driver implementation may be one or more classes that are stored in a JAR file. The driver implementation module may perform a matching of a driver implementation specified in a property of the URL with one or more JAR files in order to identify the JAR file that stores the driver implementation. The identified JAR file in this example would be communicated to the driver manager responsive to the request.

At block the driver manager receives the driver implementation from the driver implementation module and caches the driver implementation in a cache. In the present example a record is created in the cache corresponding to the driver implementation. The URL is specified as the key and the driver implementation or an identifier associated with the driver implementation is specified as the value corresponding to the key. The value may be a pointer or other identifier for the driver implementation such that the driver implementation may be retrieved from the cache when the cache receives a query containing the URL or some portion thereof .

At block the driver manager loads the driver implementation into the universal database driver. In the present example the loading of the driver implementation into the universal database driver is performed by the driver manager parsing the URL to identify a file name corresponding to the driver implementation. The driver manager inputs the file name to the universal database driver. The universal database driver scans the file to identify one or more classes in the file specified by the file name. The universal database driver creates a driver instance of a driver class where the driver class corresponds to the one or more classes in the file. The driver instance is input into the shim class and the shim methods are mapped to the methods of the driver instance thereby mapping the shim class to the driver implementation. After performing the mapping the universal database driver registers the shim class with the driver manager. Accordingly by calling methods of the shim class methods of the driver implementation are executed. This process may be repeated each time a driver implementation that is loaded into the shim class such that the shim class is mapped to a different driver implementation each time the process is performed.

At block the universal database driver calls a method of the shim class to connect to the database. Because the connection method of the shim class is mapped to a connection method of the driver implementation the connection method specified by the driver implementation is executed to connect to the database. After connecting the universal database driver sends the request to the database. In the present example the sending of the request is also performed by calling a method of the shim class that is mapped to the driver implementation. The driver implementation may include for example connection methods request sending methods and methods for receiving results of a request. Accordingly connections to the database requests and results may all be modified as specified by the driver implementation.

Computer system includes processing device processor main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM double data rate DDR SDRAM or DRAM RDRAM and so forth static memory e.g. flash memory static random access memory SRAM and so forth and data storage device which communicate with each other via bus .

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like.

More particularly processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or a processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processor is configured to execute instructions for performing the operations and steps discussed herein.

Computer system also may include video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT alphanumeric input device e.g. a keyboard cursor control device e.g. a mouse and signal generation device e.g. a speaker .

Data storage device may include a computer readable storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within main memory and or within processor during execution thereof by computer system main memory and processor also constituting computer readable storage media. The instructions may further be transmitted or received over network via network interface device .

While data storage device is shown in an example to be a single medium the term data storage device should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions.

The term computer readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

In the foregoing description numerous details are set forth. It will be apparent however to one of ordinary skill in the art having the benefit of this disclosure that the present disclosure may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present disclosure.

Some portions of the detailed description have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as determining measuring generating setting performing computing comparing applying creating ranking classifying and the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Certain examples of the present disclosure also relate to an apparatus for performing the operations herein. This apparatus may be constructed for the intended purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

Although illustrative embodiments have been shown and described a wide range of modification change and substitution is contemplated in the foregoing disclosure and in some instances some features of the embodiments may be employed without a corresponding use of other features. One of ordinary skill in the art would recognize many variations alternatives and modifications. Thus the scope of the invention should be limited only by the following claims and it is appropriate that the claims be construed broadly and in a manner consistent with the scope of the embodiments disclosed herein.

