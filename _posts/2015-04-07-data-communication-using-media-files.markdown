---

title: Data communication using media files
abstract: A web browser may implement a single origin policy that makes an exception for media files such as markup language image files. In cases where the delivery of data to a browser may be blocked by a single origin policy, such as where the data originates from a domain other than the domain that originates the initially presented content, the data may be encoded in one or more media files, such as images, to circumvent the single origin policy. The data may be encoded using height and width dimensions, pixel colors, transparencies, or other characteristics of the media file(s). The media file(s) may be sent to the browser and decoded to access the data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09332027&OS=09332027&RS=09332027
owner: Amazon Technologies, Inc.
number: 09332027
owner_city: Seattle
owner_country: US
publication_date: 20150407
---
This application is a continuation of and claims priority to U.S. patent application Ser. No. 13 973 813 filed on Aug. 22 2013 titled Image Size Communication the contents of which are incorporated by reference into the present disclosure.

Respective users search for and access information machine executable files and other website based content using web browsers running on various apparatus. However security against viruses or other malicious code is of paramount concern. The security measures themselves sometimes hinder user access to information and appropriate solutions are desirable which maintain security while allowing access.

Certain implementations and embodiments will now be described more fully below with reference to the accompanying figures in which various aspects are shown. However various aspects may be implemented in many different forms and should not be construed as limited to the implementations set forth herein. Like numbers refer to like elements throughout.

Web browsers enable users of various apparatus to access or exchange information share and view digital photographs acquire program code for various purposes and so on. A typical web browser may be configured to issue general or specific requests for information and accept data or executable code provided in response to such a request. The web browser may also be configured to process received data for storage or presentation to a user provide received code to a processor for execution and so on.

For example a user may access a banking website using a web browser while searching for information regarding personal finance. The website may include various information regarding savings accounts or investing suggestions for securing favorable terms on a mortgage and so forth. The website may also include a home loan interest calculation program that may be downloaded to the user s device and run as executable code. If the banking website is an authenticated or otherwise trustworthy source then such a calculation program is likely of a benign nature and may be of significant help to the user. In such a case the user may download the calculation program using their web browser and allow the executable code to run with a significant measure of confidence. That is content or program code received from a trusted or authenticated website likely raises few if any security concerns.

A common occurrence is the requesting and acquisition of data information or other content from a plurality of websites or sources during an online session. Under such circumstances a user may employ their web browser to seek information of a specific nature and receive content from numerous websites trustworthy or otherwise. In fact a user may not even be aware of the particular websites that respond to a request as an intentionally accessed web server may automatically contact another web server seeking content or portions thereof. Such an operation may be transparent to the user and potentially risky with respect to malicious code that may be acquired from an unknown source and sent to the web browser.

Web browser design has advanced in response to the problems associated with malicious content. One added measure of security is the enforcement of a single source policy or same source policy . Generally a web browser under a single source policy will authenticate i.e. establish as trustworthy a particular website and thereafter accept content of various types from that website during a present online session. Conversely such a web browser will reject numerous types of content notably executable files scripts and so forth from other websites during the single source online session. Thus a single source is trusted while others are not or less so .

However single source policies often make exceptions for image files as these are not processed as executable code and are unlikely to be used to introduce viruses or other malicious content. Image files can include for non limiting example digital photographs computer generated graphics graphs maps tables and so forth. Markup languages such as hypertext markup language HTML extensible markup language XML or others use respective established elements and syntax for defining images. Web browsers are configured to identify these elements and process them in predetermined ways. In short a markup language image file has particular parameters that are recognized and treated as those of an image and not as some other form of executable code by the receiving web browser.

Therefore data may be safely communicated from an un authenticated website source to a web browser enforcing a single source policy if such data is encoded using respective markup language image elements. Such data may be requested or a response or responses provided by way of varying pathways. Additionally specific filenames may be included in the request as well as an indication that a response is to be encoded using one or more image parameters.

For example a user may access a web server of an online merchant by way of the web browser running on the user s client device. The merchant web server is also referred to as a first domain for purposes of this example. The web browser may be running a single source policy that authenticates the first domain and therefore accepts most or all types of content from the first domain. Pursuant to the single source policy the web browser will reject many types of content from websites or sources other than the first domain during the present single source session.

For purposes herein a domain refers to one or more web servers or other computing devices configured so as to appear essentially as a single entity from a perspective outside of that domain. For example a domain may include three web servers cooperating to provide content on a website of one or several webpages that is accessible by any number of client devices. Without limitation the Internet may provide access to any number of different domains each appearing as a distinct presence from the vantage point of a client device or its user.

Continuing the previous example the user requests information regarding merchandise offered for sale through the first domain such as personal digital media players. Corresponding information photographic images or other content are retrieved from storage at the first domain and provided to the web browser of the client device where it is processed and presented to the user. The user interested in warranty information for a particular audio player clicks on a corresponding link as provided by the first domain. However the manufacturer offering the warranty coverage does not provide the actual warranty content to the first domain just the link for retrieving that information from another unauthenticated web server.

The web browser recognizes based on the link that the information source is a second domain for purposes of the present session. The web browser then sends a request to the second domain in response to the user actuation clicking of the warranty link. The request indicates that an acceptable response must be encoded using markup language image elements.

The second domain receives the request and retrieves the corresponding warranty information. The second domain then encodes that information using one or more encoding schemes that are correlated to respective height and width dimensions for a number of images. For purposes of the present example the warranty information is encoded using the height and width dimensions of a total of 77 respective image files. That is the height and width dimensions of each image may be decoded to construct i.e. extract a respective portion of the warranty information.

The 77 images are then provided from the second domain to the web browser. The images may be communicated to the web browser using a variety of pathways. The web browser receives the respective images parsing the height and width dimensions of each and providing them to a decoding module of the client device. The decoding module cross references or otherwise determines the necessary decoding schemes using the height and width dimensions and the actual warranty information is decoded i.e. constructed or assembled for presentation to the user.

Other image elements such as file identifiers pixel color identification values file sizes pixel transparency values pixel red green blue values or other parameters may also be used to encode data or information for reception in a single source context. In one example images having only a single predetermined color e.g. each image is all blue are used to encode data by way of their respective parameters. Such single color images are handled and decoded accordingly and all others images are treated as regular image files. Additionally decoding modules may be configured to treat all such decodable image files as data strings or other sorts of information and to decode no images as executable code in further interest of security.

Thus existing single source policies may be circumvented when desired without undue risk of exposure to malicious content and without need to modify existing web browsers. Thus the techniques and resources described in this disclosure may be deployed or implemented immediately so that various kinds of information may be acquired during single source online sessions from one or more unauthenticated domains.

The client device includes a browser module i.e. web browser . The browser module is configured to access respective websites and to acquire or request data information images and so forth in accordance with user input. The browser module may be configured to operate at least some of the time in accordance with a single source policy .

Also depicted is a first domain . The first domain may include one or more web servers hosting providing any number of webpages collectively defining a first website. Thus the first domain and the first website are interchangeable concepts from the perspective of the browser module . Further depicted is a second domain . The second domain may include one or more web servers providing any number of webpages such that a second website is defined. The second domain and the second website are interchangeable concepts from the perspective of the browser module . The first domain and the second domain may be respectively configured to provide textual subject matter program code digital images audio files or other types of content to the client device .

For example the user may provide input to the client device causing the browser module to access a first domain . The browser module may then authenticate the first domain such that a trusted single source online session is established in accordance with the single source policy . Content may be transmitted to the browser module in response to a user query for information and so on. The browser module accepts the content in accordance with the single source policy .

For purposes of illustration the first domain is a web server for an online merchandise retailer and the content is information regarding the use of a particular digital camera having model number A3908 . The user views the content on the client device and determines that more detail is required regarding certain camera operations. The user then provides input directing the browser module to download a user manual for the camera to the client device . The browser module responds to the input by sending a request to the second domain which for illustration purposes is a web server for the manufacturer of the camera. The browser module directs the request to the second domain using a corresponding universal resource locator URL included in the content .

The request may include a particular file name or other identifier for the user manual as well as some indication that a response is to be encoded using image parameter based encoding. For instance the request may indicate that a single source policy is presently in effect with another domain. Other sorts of Indicators may also be used. The second domain is configured to recognize the specific subject matter of the request as well as the need to encode a response by way of image parameters such as markup language image elements.

The second domain retrieves the camera user manual information from storage depicted as response data . The second domain also includes an encoding module . The encoding module may be configured to use the response data to generate or derive respective values or parameters that may be encoded using markup language image elements. The encoding module may include electronic circuitry computer readable storage media including data structures or program code or any other suitable constituency.

The encoding module parses the response data as one or more respective portions and encodes each portion using the height and width dimensions elements of a respective markup language image file. The encoding module passes the respective height and width dimensions which may be referred to as dimensional pairs to an image generation module . As depicted the response data has been encoded as a plurality of N dimensional pairs and these have been passed to the image generation module .

The image generation module may be configured to receive respective parametric values from the encoding module and to use these values to define one or more markup language images or image files . The image generation module may include electronic circuitry computer readable storage media including data structures or program code or any other suitable constituency.

Continuing the present example the image generation module generates a total of N images . . . N using the height and width dimensional pairs provided by the encoding module . For instance the image is defined by a height of 193 pixels and a width of 29 pixels and so on. The second domain then provides the respective images i.e. media files or image files 124 1 124 N to the browser module where they are received and accepted as markup language images in accordance with the single source policy .

The browser module processes the images so as to identify and parse the image elements such that the respective dimensional pairs collectively define image element data . The image element data is passed from the browser module to a decoding module . The decoding module may be configured to identify or determine one or more respective decoding schemes or specific decoded values or strings using markup language image parameters provided by the browser module . The decoding module may include electronic circuitry computer readable storage media including data structures or program code or any other suitable elements or resources.

The decoding module uses the respective dimensional values e.g. 193 29 of the image element data to identify i.e. associate or correlate a respective decoding scheme for each of the images . Such association may be performed by cross referencing decoding schemes strings or values within a data structure by using the dimensional values as arguments within one or more mathematical operations or by another suitable technique.

The decoding module uses the associated decoding schemes to construct the camera user manual as decoded data . Thus the images are processed so that the height and width dimensions of each are used to derive respective portions and collectively the entirety of the camera user manual requested by the user .

In the example just described above only the height and width dimensional values are used to construct the underlying information. Thus the decoding module may be further configured to ignore other elements or parameters of the images such as the respective pixel colors image file sizes in bytes and so forth. However it is contemplated herein that these or other markup language image elements may also be used in other respective information encoding and decoding schemes.

It is further contemplated that other media file types besides images may be used to convey data past a single origin policy . For example an audio file may be defined by respective characteristics that are associated with respective encoding schemes. Other media file types and their respective parameters or characteristics may also be used.

Depicted is response data including the alphabetic string SMITH . The response data is illustrative and relatively simple in the interest of clarity. However other data or information of generally unlimited nature or quantity may be encoded using image file parameters according to the processes and resources described herein. For purposes of illustration the response data has been retrieved in accordance with a customer identification number provided in a request and is passed to the encoding module .

The encoding module includes a data structure . The data structure includes a data element column of respective characters arranged one per row. As depicted the first row of the data structure includes the letter A the second row the letter B and so on. For purposes of illustration the data structure is understood to include a total of 255 characters each associated with a respective encoding scheme. Other data structures having other counts or specific elements may also be used.

The data structure also includes a height column including respective image height dimensions in units of pixels associated with the respective characters of the data element column. The data structure also includes a width column including image width dimensions in units of pixels associated with the respective characters. For example the first row of the data structure cites the letter A which is associated with an image height dimension of 1 pixel and a width dimension of 5 pixels.

Notably the illustrative data structure includes the same width dimension of 5 pixels for each character. That is each of the characters A B and so on may be encoded as individual markup language images wherein the widths are uniform throughout the entire character set. A decoding module e.g. may for instance be configured to interpret only those images of width 5 pixels as being encoded data and process them accordingly.

The relatively simple encoding scheme depicted by the data structure is directed to non limiting illustration and clarity and more complex or comprehensive encoding schemes are contemplated. For example an encoding scheme may be defined wherein entire words of a predefined lexicon correspond to respective height and width dimensional pairs. In yet another example respective pixel colors are used to encode an alphanumeric character or string and each of the corresponding images is of fixed height and width dimensions e.g. 10 10 . Other encoding schemes using respective markup language image elements may also be used.

The encoding module uses the data structure to encode the five respective letters of the response data SMITH . Each of the letters is cross referenced by the encoding module to a correlated height and width value set or pair . The letter S correlates to a height of 19 pixels and a width of 5 pixels. The letter M correlates to a height of 13 pixels and a width of 5 pixels and so forth. The five particular height pairs collectively define encoded data .

The encoding module passes the encoded data to the image generation module . The image generation module then generates five respective images or image files . Each of the images is encoded in accordance with a markup language element standard such as without limitation HTML. For instance the image encodes the letter S by way of an image height of 19 pixels and an image width of 5 pixels.

The four images encode the letters M I T and H respectively by way of their individual parameters. The images may be provided to the client device accepted under an exception within the single source policy and processed to decode the original response data SMITH .

In another example data is encoded using respective images having content in accordance with a common theme or subject matter flags birds flowers electronic device symbols polygons and so forth. The actual data may be encoded using the height and width dimensions a boarder dimension or color or other seemingly incidental parameters of each image. Use of a common theme may mislead an unauthorized party that intercepts or acquires such images and then attempts to interpret their meaning or significance. Thus if such common theme images appear to have special meaning in their visually presented contents which they do not the actual encoded information by way of the parameters may be further safeguarded.

At the client device sends a request for content to the first domain . For example the user of the client device may be seeking information about merchandise for sale by the first domain an e commerce retailer. The client device responds to input from the user by sending a request to the first domain .

At the first domain provides content to the client device in response to the request for content . In the present example the content may include digital photographs descriptive text audio narration or other data pertaining to imported articles of clothing. The content is received by the client device and accepted in its entirety in accordance with the single source policy . Thus the user may view the digital photographs read the descriptive text and so on.

At the client device sends a request for data to the second domain . The request includes one or more specific filenames and an indication that a single source policy is in effect. In the present example the user seeks information regarding a returns and exchanges policy for an article of clothing presented by the content . Such returns and exchanges are handled by the second domain which is a customer service affiliate of the e commerce retailer. In turn a URL and a specific filename for the corresponding information are provided by the content .

At the second domain retrieves response data in accordance with the request . In particular information under the specific filename is retrieved from storage or other resources defining response data . Thus the response data includes the returns and exchanges policy as sought after by the user .

At the response data is encoded as image size data. In the present example the response data is encoded by an encoding module of the second domain . Such encoding may use one or more encoding schemes make use of a data structure e.g. and so on. The encoding module processes the response data or portions thereof such that height and width values defining one or more dimensional pairs are derived. The resulting dimensional pairs collectively define image size data analogous to encoded data .

At images based on the image size data are generated. In the present example the image generation module uses the image size data to generate one or more images . Each of the images is respectively encoded using markup language image elements including height and width dimensions. Thus the height and width dimensions of the one or more images corresponds to a portion or the entirety in the case of one image of the data . Also each of the one or more images includes the filename as specified in the request for identification by the client device .

At the one or more images are provided from the second domain to the client device . The browser module receives and accepts the images as exceptions to the single source policy .

At image size data for the images is accessed. In the present example the browser module accesses or parses the respective markup language image elements of the images such that the height and width dimensions are identified. The one or more identified dimensional pairs define image element data .

At the image element data is decoded. In the present example the decoding module of the client device receives the image element data and uses it to identify one or more decoding schemes. For instance the decoding module may use the height and width dimensions of the image element data to cross reference predefined strings or values within a data structure e.g. or lookup table. The decoding module uses the identified decoding schemes or correlated values to construct the decoded data namely the returns and exchanges policy. The decoded data i.e. the returns and exchanges information may now be presented to the user of the client device .

Response data includes two respective elements a User ID of JONES and an Account Type value or code of 21A17P . For purposes of non limiting example the two respective elements of the response data are recorded within a customer database or data structure for an e commerce merchant defining a second domain . Further to the example the user has sent a request for the two elements of response data which must be encoded using image parameters due to the single source policy that is in effect. The data is gathered from corresponding storage and passed to the encoding module .

The encoding module receives the response data and cross references each element against predefined pixel parameter values within a data structure . The data structure includes respective rows or records each corresponding to individual data elements within the customer database of the second domain . The data structure includes a string column having respective strings or values of the database elements. The data structure also includes a red column a green column and a blue column each citing respective values of intensity. The data structure also includes a transparency column with respective numerical transparency values. Each of the string elements therefore corresponds to a pixel defined by respective values in the columns . For example a User ID DAVIS is associated with a pixel of red intensity value of 20 green intensity value of 90 blue intensity value of 45 and transparency value of 80. In turn an Account Type 18B16Q is associated with a pixel of red intensity value of 15 green intensity value of 50 blue intensity value of 66 and transparency value of 84. Thus each string element may be encoded using respective parameter values for a single pixel within a canvas image . From a different perspective each row of the data structure represents a database value associated with a respective encoding scheme.

Returning to the present example the encoding module uses the data structure to encode the two elements of the response data using image pixel data . Thus JONES is encoded as pixel color and transparency values 20 92 47 80 and 21A17P is encoded as pixel color and transparency values 15 60 68 84 .

The image pixel data is passed from the encoding module to a markup language generator module . In one implementation the image generation module is equivalent to or configured to include the functionality of the markup language generator module . The markup language generator module is configured to generate HTML5 canvas images including the respective data elements encoded by the image pixel data . In the present example the markup language generator module generates a canvas image . Pixels of the canvas image encode the values JONES and 21A17P respectively.

Additionally the id parameter of the canvas image includes data myCanvas and cites to a particular image foo.png located at a uniform resource locator URL address in hypertext protocol. Therefore the canvas image includes data identification information and image names and their locations. The canvas image may now be provided to the user by way of the client device for processing and decoding thus reconstructing the requested data elements.

At the client device sends a request for content to the first domain . For example the user of the client device may be seeking information about existing accounts and accounting practices from the first domain an e commerce merchant having Internet accessibility. The client device responds to input from the user by sending a request to the first domain . The user is understood to be an authorized auditing entity and is therefore privy to accounting information maintained by the first domain .

At the first domain provides content to the client device in response to the request for content. In the present example the content may include descriptive text graphs or tables of accounting related data or other corresponding information. The content also provides one or more canvas tags so as to allow providing a response using canvas images as well as citations userid and accounttype for particular information sought by the user . The content is received by the client device and accepted in its entirety in accordance with the single source policy . Thus the user may view the graphs or tables read the descriptive text and so on.

At the client device sends a request for an image to the second domain . In the present example the request names a particular image such as foo.png as well as the specific citations included with the content namely userid and accounttype .

The request also includes the one or more canvas tags sent with the content . Specific account information is stored and provided by the second domain which is an affiliate of the e commerce merchant.

At the second domain retrieves response data in accordance with the request . In particular the requested customer name JONES i.e. userid and their account specification 21A17P i.e. accounttype are retrieved from storage or other resources defining response data .

At the response data is encoded as pixel color and transparency values. In the present example the response data is encoded by an encoding module of the second domain . In the present example the encoding makes use of the data structure . Other encoding resources or processes may also be used. The encoding module processes the response data deriving respective pixel color red green blue and transparency values. The resulting pixel parameter values collectively define image pixel data . Additionally a particular image named foo.png is retrieved from the cited URL address in accordance with the canvas tags provided with the content .

At one or more images based on the image pixel data are generated. In the present example the image generation module is configured to encode data using HTML5 canvas images . Thus the image generation module uses the canvas tags the image foo.png and the image pixel data to generate a canvas image . Also the canvas image includes the data image name foo.png as specified in the request .

At the canvas image is provided from the second domain to the client device . The browser module receives the canvas image as exceptions to the single source policy .

At the canvas image pixel values are accessed. In the present example the browser module accesses or parses the respective pixel values of the canvas image . Thus the specific red green blue and transparency values for each of the two pixels are identified and parsed as respective data elements or sets. Also the canvas image is identified as conveying customer name and account specification respectively.

At the canvas images are decoded. In the present example the decoding module of the client device receives the canvas image pixel values and uses them to identify respective decoding schemes. For instance the decoding module may use the reconstructed image pixel data to cross reference predefined values within a data structure equivalent or analogous to the data structure . The decoding module uses the correlated pixel color and transparency values to construct the customer name JONES and their account specification 21A17P . The decoded customer information e.g. response data may now be presented to the user of the client device .

The process of the diagram depicts one illustrative way in which data of a sensitive nature may be encoded using image parameters in accordance with a predefined data structure of particular strings or values. Thus two goals may be served circumventing a single source policy e.g. and securing communication of sensitive information. Without the possession of or access to the particular data structure the canvas images would be rendered as mere images likely of irrelevant appearance or content.

For instance the user or another authorized party may acquire the data structure during an authenticated access session between the client device and the second domain . Under such circumstances the second domain would be dealt with as a trusted source. Thereafter the data structure may be used without need to re establish an authenticated session with the second domain or another data source . Furthermore periodic or occasional authenticated access between the client device and the second domain would allow for synchronizing or updating the data structure as needed.

In the previous example a single data structure was used to encode and decode data that passed through a single origin policy . That is a single data structure was used to define pixel values for each data element e.g. customer name and account specification that was encoded in a single image e.g. foo.png . In another instance multiple data structures may be used for encoding and decoding thus allowing even greater information density. For example each pixel in an image may correspond to a respective data structure based on pixel location or number within the image. Thus an image made up of 90 pixels may be encoded and decoded using 90 respective data structures or lookup tables . Other data structure to pixel correspondences may also be used.

The client device may include one or more input output I O interface s to allow the processor or other portions of the client device to communicate with other devices. The I O interfaces may comprise inter integrated circuit 12C serial peripheral interface bus SPI Universal Serial Bus USB as promulgated by the USB Implementers Forum RS 232 one or more device interfaces such as High Definition Multimedia Interface HDMI as promulgated by HDMI Licensing LLC and so forth.

The I O interface s may couple to one or more I O devices . The I O devices may include input devices such as one or more of a camera a microphone a touch sensor a button a mouse a keyboard and so forth. The I O devices may also include output devices such as one or more of a display audio speakers haptic output devices and so forth. The display may comprise an electrophoretic display projector liquid crystal display interferometric display light emitting diode display and so forth. In some embodiments the I O devices may be physically incorporated with the client device or may be externally placed.

The client device may also include one or more communication interfaces . The communication interfaces are configured to provide communications with the client device the first domain the second domain other web servers routers access points and so forth. The communication interfaces may include devices configured to couple to one or more networks including PANs LANs WLANs WANs WWANs and so forth.

The client device may also include one or more busses or other internal communications hardware or software that allow for the transfer of data or other signals between the various modules and components of the client device .

As shown in the client device includes one or more memories . The memory comprises one or more computer readable storage media CRSM . The CRSM may be any one or more of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium a mechanical computer storage medium and so forth. The memory provides storage of computer readable instructions data structures program modules and other data for operation of the client device .

The memory may include at least one operating system OS module . The OS module is configured to manage hardware resource devices such as the I O interfaces the I O devices the communication interfaces and provide various services to applications or modules executing on the processors . Also stored in the memory may be one or more of the following modules. These modules may be executed as foreground applications background tasks daemons and so forth.

A user interface module is configured to provide one or more user interface elements to the user with the I O devices and to accept inputs received from the I O devices . The user interface may include one or more visual audible or haptic elements. For example the user interface may be configured to provide a graphic user interface an audible user interface and so forth. The user interface may be configured to present the decoded data e.g. and so on to the user using the I O devices .

A communication module is configured to support communication between the client device and the first domain the second domain other web servers or client devices and so forth. One or more application modules may include one or more of eBook readers calculators word processors spreadsheets slideshow presenters drawing programs and so forth.

The browser module and the decoding module as respectively described above may also be included in the memory . Other modules may also be present. For example a digital rights management module may provide support for presenting or processing content protected using one or more digital rights management schemes.

The memory may also include a datastore to store information. The datastore may use a flat file database linked list tree executable code or other data structure to store the information. In some implementations the datastore or a portion of the datastore may be distributed across one or more other devices including servers network attached storage devices and so forth.

As depicted here the datastore may store the single source policy the image element data the decoded data a data structure collectively including any or all of the data structure or the data structure and so forth. Other data may also be stored. For example the other data may include user preferences configuration files and so forth.

The second domain may include one or more processors configured to execute one or more stored instructions. The processors may comprise one or more cores. The second domain may include one or more I O interface s to allow the processor or other portions of the second domain to communicate with other devices. The I O interfaces may comprise 12C SPI USB RS 232 and so forth.

The I O interface s may couple to one or more I O devices . The I O devices may include input devices such as one or more of a keyboard mouse and so forth. The I O devices may also include output devices such as indicator lights a display for use by administrative or maintenance personnel a printer and so forth. In some embodiments the I O devices may be physically incorporated with the second domain or may be externally placed.

The second domain may also include one or more communication interfaces . The communication interfaces are configured to provide communications with the client device the first domain routers access points other servers and so forth. The communication interfaces may include devices configured to couple to one or more networks including PANs LANs WLANs WANs WWANs and so forth.

The second domain may also include one or more busses or other internal communications hardware or software that allow for the transfer of data between the various modules and components of the second domain .

As shown in the second domain includes one or more memories . The memory comprises one or more CRSM. The memory provides storage of computer readable instructions data structures program modules and other data for the operation of the second domain .

The memory may include at least one OS module . The OS module is configured to manage hardware resource devices such as the I O interfaces the I O devices the communication interfaces and provide various services to applications or modules executing on the processors . Also stored in the memory may be one or more of the following modules. These modules may be executed as foreground applications background tasks daemons and so forth.

A user interface module may be configured to provide one or more application programming interfaces web interfaces and so forth. The user interface module is configured to accept inputs and send outputs using the I O interfaces the communication interfaces or both.

A communication module is configured to support communication with the client device the first domain and so forth. In some implementations the communication module may support encrypted communications. For example hypertext transport protocol secured HTTPS or transport layer security TLS may be supported.

The memory may also include the encoding module the image generation module or the markup language generator module as respectively described above. Other modules may also be present. In one implementation one of the other modules may be an authentication module which cooperates with the communication module when establishing an authenticated i.e. single source access session with the client device .

The memory may also include a datastore to store information. The datastore may use a flat file database linked list tree executable code or other data structure to store the information. In some implementations the datastore or a portion of the datastore may be distributed across one or more other devices including servers network attached storage devices and so forth.

As depicted here the datastore may store data collectively including any or all of the response data the response data the response data and so forth. The datastore may also store images collectively including any or all of the images the images the canvas image and so forth. The datastore may further store data structures collectively including any or all of the data structure the data structure and so on. The datastore may also include one or more encoding schemes configured to encode data or information by way of respective image parameters using mathematical operations or other encoding techniques.

Other data may also be stored. For example the other data may include information used to detect a single source policy e.g. in effect when communicating with the client device and so forth.

Block sends a request for content to the first domain. For purposes of an illustrative example the browser module of the client device accesses the first domain and establishes a single source session therewith. The browser also issues a request for information regarding a jewelry item offered for sale through the first domain .

Block receives content from the first domain. In the present example the first domain sends content to the browser module in response to the request. The content includes information regarding the jewelry item. The content may also include links to other information such different gemstone options for inclusion in the jewelry item.

Block sends a request for data to the second domain. In the present example the user clicks on one of the links included in the content . The browser module responds by sending the request to the second domain asking for additional information regarding an option for including an emerald set in the jewelry item. The request includes an indication that the single source policy is in effect and that a response should thus be encoded using image parameters.

Block receives images from the second domain. In the present example the browser module receives a plurality of images e.g. encoded using established markup language elements and syntax.

Block parses parameters within the received images used to encode the data response. In the present example each of the images received by the browser module is characterized by height and width dimensions. The browser module identifies these respective dimensional elements and passes them to the decoding module as data analogous to the image element data .

Block constructs decoded data using the image parameters. In the present example the decoding module uses the dimensional element data to cross reference respective alphabetic numeric or other characters within the data structure or another analogous data structure . Using these characters information regarding the emerald gemstone option is reconstructed and may be presented to the user of the client device .

Block receives a request for data. In a non limiting example the second domain receives a request for data from the browser module of the client device . The request includes an identifier number for a particular customer name sought after by the user and an indication that a response is to be encoded using markup language image elements. The request also includes one or more canvas tags or canvas image tags for use in encoding a response to the request .

Block retrieves response data from storage. In the present example the second domain locates the particular customer name identified by number in the request within storage e.g. data . The customer name DAVIS is then retrieved from storage.

Block encodes the response data using image pixel data . In the present example the encoding module cross references the string element matching the customer name DAVIS against correlated parameter values for respective canvas images . Specifically the encoding module identifies pixel color and transparency values within the data structure associated with the customer name DAVIS . These respective pixel parameters define image pixel data .

Block generates one or more canvas images using the image pixel data . In the present example the image pixel data is passed from the encoding module to the markup language generator module . The markup language generator module generates a canvas image having a pixel defined by the color and transparency values and respectively. Thus the sought after customer name DAVIS has been encoded using a single canvas image file.

Block provides the images. In the present example the second domain sends the canvas image to the browser module of the client device . The client device may decode the canvas image and construct the customer name DAVIS for presentation to the user in accordance with methods and resources as described above.

Those having ordinary skill in the art will readily recognize that certain steps or operations illustrated in the figures above can be eliminated or taken in an alternate order. Moreover the methods described above may be implemented as one or more software programs for a computer system and are encoded in a computer readable storage medium as instructions executable on one or more processors.

The computer readable storage medium can be any one of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium and so forth. Separate instances of these programs can be executed on or distributed across separate computer systems. Thus although certain steps have been described as being performed by certain devices software programs processes or entities this need not be the case and a variety of alternative implementations will be understood by those having ordinary skill in the art.

Additionally those having ordinary skill in the art readily recognize that the techniques described above can be utilized in a variety of devices environments and situations.

Although the present disclosure is written with respect to specific embodiments and implementations various changes and modifications may be suggested to one skilled in the art and it is intended that the present disclosure encompass such changes and modifications that fall within the scope of the appended claims.

