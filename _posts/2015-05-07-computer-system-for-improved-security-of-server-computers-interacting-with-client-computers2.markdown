---

title: Computer system for improved security of server computers interacting with client computers
abstract: A computer system is configured to improve security of server computers interacting with client computers, and comprises: a memory, a processor coupled to the memory, and source code obfuscation logic coupled to the memory and the processor. The source code obfuscation logic is configured to read, from the memory, one or more original source code instructions that are configured to achieve an expected result when executed by a web browser on a client computer; to apply one or more obfuscation transformations, to the one or more original source code instructions, to produce one or more obfuscated source code instructions that are configured to achieve the same expected result when executed by the web browser but is expressed in an obfuscated format; to write the one or more obfuscated source code instructions to the memory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09582666&OS=09582666&RS=09582666
owner: Shape Security, Inc.
number: 09582666
owner_city: Mountain View
owner_country: US
publication_date: 20150507
---
The present disclosure generally relates to security techniques applicable to client server systems and relates more specifically to techniques for improving resistance of server computers to attacks by client computers.

A scripting language is a programming language for writing computer programs in the form of scripts. Examples of scripting languages include JavaScript or ECMAScript ActionScript Dart VBScript Typescript Ruby and Python. A script is a program distributed as source code and executed by interpretation rather than compilation. Interpretation is advantageous because deployment and customization are simplified. These advantages make scripting well suited for adding custom behaviors to an already installed application such as a web browser. Browser support has made JavaScript the most widely used programming language for the Internet.

Execution by interpretation may also present drawbacks for a scripting language. Since a script is distributed to a browser as source code security and intellectual property are heightened concerns. Source code is vulnerable to reverse engineering copying spoofing and cracking. For example when script source code is delivered to a browser malicious programs can alter the script source code for malicious purposes such as capturing passwords bank information and other sensitive information causing the browser to execute the maliciously altered script source code rather than the original script source code that the server computer generated. Algorithms and data are difficult to hide when source code is publicized.

Machine analysis is an important part of misuse of source code. For example bots compromised endpoints or malicious software may attempt to read and analyze source code for malicious purposes. To achieve security by obscurity techniques are needed to prevent or encumber machine analysis of scripts.

While each of the drawing figures illustrates a particular embodiment for purposes of illustrating a clear example other embodiments may omit add to reorder and or modify any of the elements shown in the drawing figures. For purposes of illustrating clear examples one or more figures may be described with reference to one or more other figures but using the particular arrangement illustrated in the one or more other figures is not required in other embodiments.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

In an embodiment a computer system is configured to improve security of server computers interacting with client computers and comprises a memory a processor coupled to the memory and source code obfuscation logic coupled to the memory and the processor. The source code obfuscation logic is configured to read from the memory one or more original source code instructions that are configured to achieve an expected result when executed by a web browser on a client computer to apply one or more obfuscation transformations to the one or more original source code instructions to produce one or more obfuscated source code instructions that are configured to achieve the same expected result when executed by the web browser but is expressed in an obfuscated format and to write the one or more obfuscated source code instructions to the memory.

In an embodiment a computer implemented method for improving security of a server computer is configured to deliver computer program source code to a client computer and comprises using a security control computer that is topologically interposed between the server computer and the client computer obtaining from the server computer one or more original source code instructions that are configured to achieve an expected result when executed by a web browser on the client computer applying an obfuscation transformation to the one or more original source code instructions to produce one or more obfuscated source code instructions that are configured to achieve the same expected result when executed by the web browser but is expressed in an obfuscated format communicating the one or more obfuscated source code instructions to the web browser of the client computer.

Embodiments discussed herein provide numerous benefits and improvements over the general idea of increasing the resistance of servers to reverse engineering spoofing and cracking. Unauthorized reuse of scripts or data is made more difficult. Human analysis is thwarted by reducing the readability of scripts.

Memory may be a volatile random access memory RAM a non volatile flash memory or any memory device able to read and write digital data. Memory may store original source code instructions . Original source code instructions are configured to achieve an expected result when executed by a web browser on a client computer. Original source code instructions may be a text encoding of statements expressed in a web browser scripting language such as JavaScript ActionScript Dart VBScript Typescript Ruby or Python.

Processor may be a central processing unit a microprocessor or other instruction processing device. Processor is coupled to or executes source code obfuscation logic perhaps after reading source code obfuscation logic from memory . Source code obfuscation logic includes processing instructions that cause processor and memory to perform obfuscation transformations . Obfuscation transformations reconfigure source code instructions from one form into another form that distorts the structure of the source code without altering the effects of the source code. In various embodiments source code obfuscation logic and or obfuscation transformations may be implemented using one or more computer programs or other software elements firmware in read only memory one or more FPGAs or ASICs or in other hardware logic. Computer system may in one embodiment comprise a special purpose computer or may be implemented using a general purpose computer into which instructions are loaded and executed to thereby program the computer to perform the functions described herein.

In operation at time T source code obfuscation logic causes processor to read original source code instructions from memory . At time T source code obfuscation logic causes processor to apply obfuscation transformations to original source code instructions which produces obfuscated source code instructions . Obfuscated source code instructions are expressed in a same scripting language as original source code instructions . Obfuscated source code instructions are expressed in an obfuscated format that makes interpretation by a human difficult. Although obfuscated source code instructions and original source code instructions are structurally different either of source code instructions or achieves the same result when executed by a web browser on a client computer. At time T source code obfuscation logic causes processor to write obfuscated source code instructions into memory .

Although source code obfuscation logic may have many obfuscation transformations available the applicability of an individual transformation may depend on the presence of an identifiable pattern in original source code instructions . Consequently for a given original source code instructions in some embodiments only a subset of obfuscation transformations may be applied.

Each of obfuscation transformations may be applied if at all in sequence. Obfuscated source code instructions produced by one transformation may be used as original source code instructions for a subsequent transformation.

Because a transformation is applied to an identified pattern and restructuring caused by other transformations already applied may create or destroy that pattern different obfuscated source code instructions may be achieved depending on a particular sequential ordering of obfuscation transformations . A single pass by source code obfuscation logic over original source code instructions may exhaustively apply an individual transformation to all occurrences of a pattern. However because other subsequent transformations may cause new instances of that pattern to appear a repeated pass with the individual transformation may yield different obfuscated source code instructions .

For purposes of illustrating a clear example shows a single instance of computer system logic and transformations but in other embodiments multiple instances may be used. For example computer system may be implemented using a large number of similar instances of processor memory and logic that operate in parallel and or for scalability and load balancing purposes.

In step a computer reads original source code from memory. For example original source code instructions reside in memory and are configured to achieve an expected result when executed by a web browser on a client computer. Memory earlier may have received original source code instructions from an upstream source such as a web server or from a file system. Source code obfuscation logic causes processor to read original source code instructions from memory . Source code obfuscation logic may marshal original source code instructions into intermediate data structures as a preface to applying obfuscation transformations . Source code obfuscation logic may scan original source code instructions into tokens. Source code obfuscation logic may parse original source code instructions into an abstract syntax tree. Source code obfuscation logic may annotate original source code instructions with semantic analysis.

In step the computer applies obfuscation transformations. For example source code obfuscation logic may apply each of obfuscation transformations in sequence. For each of obfuscation transformations source code obfuscation logic may identify instances of a pattern in original source code instructions that match the input requirements of the transformation being applied. Source code obfuscation logic applies each transformation in sequence to produce obfuscated source code instructions . The output of each transformation may be a syntax tree a token stream or actual source code instructions in obfuscated form.

In step the computer writes obfuscated source code into memory. For example source code obfuscation logic may serialize an intermediate data structure into obfuscated source code instructions . Source code obfuscation logic writes obfuscated source code instructions into memory . Obfuscated source code instructions may be buffered in memory before being written to a file system or transmitted to a web browser on a client computer.

Using this approach computer system achieves source code obfuscation that exceeds prior techniques for confusing humans and automation that attempt reverse engineering or exploit discovery.

Each of security control computer and server computer may be a web server a rack server a personal computer or other networked computer. An implementation may combine security control computer and server computer into a single computer. Security control computer may be an implementation of computer system although computer system may have other implementations.

Client computer may be a personal computer a smart phone or any networked computer that executes a web browser. Client computer executes web browser that may load web pages and scripts from other networked computers such as web servers. Web browser may be any software component that processes web content and execute scripts that it receives. Web browser may run as a standalone browser application or be embedded within a dedicated software application. Web browser may render a web page that it receives or process web content in a headless manner.

Server computer may contain original JavaScript . Although JavaScript is used for browser scripting in this example other browser scripting languages are suitable for use with the same techniques. Server computer may dynamically generate original JavaScript or load it from a file system. Original JavaScript may be part of a web page. Server computer may be configured to transmit original JavaScript to security control computer . Alternatively server computer may be configured to transmit original JavaScript to client computer . However security control computer is topologically interposed between server computer and client computer . In either case server computer transmits original JavaScript perhaps encapsulated within a web page over network link to security control computer .

Security control computer includes JavaScript obfuscation logic and obfuscation transformations . JavaScript obfuscation logic may be an implementation of source code obfuscation logic although source code obfuscation logic may have other implementations. Security control computer executes JavaScript obfuscation logic to apply obfuscation transformations to original JavaScript . In this example obfuscation transformations include many independent transformations that may be applied.

JavaScript obfuscation logic may transform original JavaScript into obfuscated JavaScript . Obfuscated JavaScript may be an implementation of obfuscated source code instructions although obfuscated source code instructions may have other implementations. JavaScript obfuscation logic transmits obfuscated JavaScript perhaps encapsulated within a web page over network link to client computer which may execute obfuscated JavaScript in web browser .

Using this approach security control computer delivers JavaScript exceeding prior levels of security. With increased security comes the possibility of safely shifting more functionality from server to client computer thereby increasing scalability and decreasing energy consumption by a data center.

In various embodiments source code obfuscation logic implements as the obfuscation transformations one or more of the obfuscation transformations that are described in this section. Any one or more of these obfuscations may be combined such that a statement may be obfuscated by multiple transformations. For purposes of illustrating clear examples script source code snippets set forth in this section show JavaScript but in other embodiments the obfuscations described in this section are applicable to other scripting languages. The statements in this section may serve as a functional specification and or design specification that a skilled programmer software engineer and or computer engineer may use to implement an embodiment using any suitable programming development environment programming language digital logic or other computer elements. Thus this section may serve as an example of steps that may be used for implementing the claimed functions recited in the claims and are provided in sufficient detail such that one skilled in the art would know how to program a microprocessor or computer to perform the steps of the claims in any of various embodiments.

Some obfuscation transformations do not alter the structure of a script. Examples include peephole obfuscations that can be applied to an individual statement without consideration of interdependencies that involve surrounding statements.

An integer literal is a more human readable way to define a number. A less readable way is to define an expression that calculates the number when executed in web browser . The expression may include operators literal operands and symbolic operands. According to a numeric expression substitution obfuscation of obfuscation transformations JavaScript obfuscation logic may scan original JavaScript for occurrences of an integer literal. JavaScript obfuscation logic may find a snippet of JavaScript such as Original Snippet 1.

When processing Original Snippet 1 JavaScript obfuscation logic may apply a transformation that replaces integer literals 6 and 0 with an expression that uses a different literal to achieve the same result when executed in web browser . Such a transformation yields Obfuscated Snippet 1. Implementations of JavaScript obfuscation logic may use different literals and operators to compose the expression.

A string literal is a more human readable way to define a character string. A less readable way is to define a concatenation of substrings that assembles the character string when executed in web browser . According to literal deconstruction obfuscation of obfuscation transformations JavaScript obfuscation logic may scan original JavaScript for occurrences of a string literal. JavaScript obfuscation logic may find a snippet of JavaScript such as Original Snippet 2.

When processing Original Snippet 2 JavaScript obfuscation logic may apply a transformation that decomposes the string literal into substrings that are concatenated to achieve the same result when executed in web browser . Such a transformation yields Obfuscated Snippet 2. Implementations of JavaScript obfuscation logic may use different heuristics for deciding at which points to sever the string literal into substrings. For example the substrings may have identical or random lengths. An implementation may define substrings that each are composed of only vowels only consonants or only punctuation. For example no substring of Obfuscated Snippet 2 has both a vowel and a consonant.

String assembly by a concatenation operator is not the only way to perform literal deconstruction obfuscation. Passing an array of substrings to a join function may accomplish the same obfuscation in a different way. The join function may achieve greater obfuscation because it allows removal of a common character from the substrings. An implementation may scan a string literal to discover a most frequent character and then use that character as a separator with which to split the string literal into substrings that lack that character. JavaScript obfuscation logic may find a snippet of JavaScript such as Original Snippet 3.

When processing Original Snippet 3 JavaScript obfuscation logic may use an a character as a separator to split the string literal into substrings that are joined to achieve the same result when executed in web browser . Such a transformation yields Obfuscated Snippet 3.

A JavaScript identifier may be composed by selecting letters from hundreds of strange Unicode letters. A distinct and meaningful name is a more human readable way of declaring a variable. A less readable name is meaningless and similar to other variable names. According to visually similar identifiers obfuscation of obfuscation transformations JavaScript obfuscation logic may scan original JavaScript for occurrences of a variable name. JavaScript obfuscation logic may find a snippet of JavaScript such as Original Snippet 4.

When processing Original Snippet 4 JavaScript obfuscation logic may use visually similar names to rename variables to achieve the same result when executed in web browser . Such a transformation yields Obfuscated Snippet 4. Implementations of JavaScript obfuscation logic may generate a variable name by repetition of a few base letters. Repetition reduces readability because a human has difficulty distinguishing between two variable names composed of the same repeating letter but repeated different amounts. Occurrences of a base letter may modified by adding a diacritic. Diacritics reduce readability because they are unfamiliar and visually subtle. Diacritics may be drawn from multiple natural languages to ensure unfamiliarity.

Web browser need not execute every statement within obfuscated JavaScript . Obfuscated JavaScript may contain unreachable statements that cannot be executed and exist only to distract a human reader. Unreachable statements may include arbitrary expressions. To further decrease readability unreachable statements may include duplicates of statements from original JavaScript .

JavaScript obfuscation logic may cause a duplicate statement to be unreachable by enclosing the duplicate statement within a control flow statement that includes a condition that always evaluates as false. According to a duplicate code injection of obfuscation transformations JavaScript obfuscation logic may scan original JavaScript for occurrences of statements. JavaScript obfuscation logic may find a snippet of JavaScript such as Original Snippet 5.

When processing Original Snippet 5 JavaScript obfuscation logic may clone lines 01 03 and embed the cloned lines within a statement block that is unreachable. Such a transformation yields Obfuscated Snippet 5. Although the unreachable statements are shown adjacent to the original statements adjacency may be avoided. The conditional expression that guards the unreachable block may be subjected to others of obfuscation transformations .

JavaScript obfuscation logic may cause a duplicate statement to be unreachable by enclosing the duplicate statement within a function that is not invoked. According to a distractor functions obfuscation of obfuscation transformations JavaScript obfuscation logic may scan original JavaScript for function definitions. JavaScript obfuscation logic may find a snippet of JavaScript such as Original Snippet 6.

When processing Original Snippet 6 JavaScript obfuscation logic may clone function find and rename the clone. Such a transformation yields Obfuscated Snippet 6. Although the function clone is shown adjacent to the original function adjacency may be avoided. Human readability may be reduced by using a variation of the original name when renaming the clone. A web page may include dynamic content which requires that the web page be regenerated every time it is requested. Reverse engineering may involve repeated requests for a regenerated web page. During each regeneration JavaScript obfuscation logic may move the original function to a different location within obfuscated JavaScript to further confuse human analysis tasks such as interactive debugging. For example original JavaScript may include a statement followed by the original function whereas the relative ordering of the statement and the original function may be reversed in obfuscated JavaScript . Some user defined functions are especially important either to the JavaScript interpreter or to the web browser. Obfuscating an important function may be a strategic way to thwart human analysis. For example a constructor a document object model event listener or a timer handler are functions that are ripe for obfuscation such as cloning.

Modern scripting languages are object oriented. Herein are obfuscations that are designed to reduce the readability of object oriented scripts.

A JavaScript object keeps data in properties. JavaScript has alternate ways of accessing a property. Dot notation is a more human readable way to access a property directly by a name of the property. Bracket notation with a string literal is less readable because it requires four punctuation characters while dot notation requires only one punctuation character. According to an object property obfuscation of obfuscation transformations JavaScript obfuscation logic may scan original JavaScript for occurrences that access a named property of a JavaScript object. For example JavaScript obfuscation logic may find a snippet of JavaScript in which a years property of a person object is accessed such as line 01 of Original Snippet 7. Line 01 involves a data property. Line 02 shows a similar example but with a function property.

When processing Original Snippet 7 JavaScript obfuscation logic may apply a transformation that replaces direct access of the years and jump properties with a property access that uses a string literal to achieve the same result when executed in web browser . Such a transformation yields Obfuscated Snippet 7.

JavaScript object notation JSON is a more human readable way to define an object instance. JSON combines object instantiation and property initialization into a single statement. A less readable way is to decouple instantiation and initialization by initializing each property in a separate statement to achieve the same result when executed in web browser . According to an object literal obfuscation of obfuscation transformations JavaScript obfuscation logic may scan original JavaScript for occurrences of an object literal. JavaScript obfuscation logic may find a snippet of JavaScript such as Original Snippet 8.

When processing Original Snippet 8 JavaScript obfuscation logic may instantiate an empty object instance and place each property initialization in a separate statement to achieve the same result when executed in web browser . Such a transformation yields Obfuscated Snippet 6. Although the object instantiation and property initializations are shown on adjacent lines adjacency is not required and may be avoided to decentralize initialization. An implementation may also rely on automatic declaration hoisting within a JavaScript scope to further hide the object instantiation.

Obfuscation is an example of logic refactoring. Many refactorings are accomplished by introducing a function. Obfuscated JavaScript may define a function that is not defined in original JavaScript . Obfuscated JavaScript may also invoke the function. The definition and invocation of the function may occur in adjacent statements or may be separated by other statements to decrease human readability. The name of the function may be similar to the name of another function to decrease human readability.

Directly in line is a more human readable way to use an expression. A less readable way is to extract the expression into a function and invoke the function to achieve the same result when executed in web browser . According to a code extraction obfuscation of obfuscation transformations JavaScript obfuscation logic may scan original JavaScript for occurrences of an expression. JavaScript obfuscation logic may find a snippet of JavaScript such as Original Snippet 9.

When processing Original Snippet 9 JavaScript obfuscation logic may extract the right hand side of the equation into a function and then invoke the function to achieve the same result when executed in web browser . Such a transformation yields Obfuscated Snippet 9. Although the definition and invocation of the function are shown on adjacent lines adjacency is not required and may be avoided to hide the function definition. An implementation may also rely on automatic declaration hoisting within a JavaScript scope to further hide the function declaration. Depending on the placement of the function definition the signature of the function may need arguments for variables used in the extracted expression.

An integer literal is a more human readable way to define a number. A less readable way is to define a recursive function that when invoked with particular argument values may achieve the same result when executed in web browser . According to a recursive function injection obfuscation of obfuscation transformations JavaScript obfuscation logic may scan original JavaScript for occurrences of an integer literal. JavaScript obfuscation logic may find a snippet of JavaScript such as Original Snippet 10.

When processing Original Snippet 10 JavaScript obfuscation logic may define a recursive function having a counter parameter and an accumulator parameter to achieve the same result when executed in web browser . Such a transformation yields Obfuscated Snippet 10. When invoked with particular values for the counter and the accumulator the function may recursively decrement the counter until zero. Each recursive invocation of the function may adjust the accumulator by a specific amount. Although the definition and invocation of the recursive function are shown on adjacent lines adjacency is not required and may be avoided to hide the function definition.

A literal is a more human readable way to use a value. A less readable way is to define a closure that returns the value when invoked in web browser . According to an immediately invoked function expression obfuscation of obfuscation transformations JavaScript obfuscation logic may scan original JavaScript for occurrences of a literal. The literal may be number a string or an object. JavaScript obfuscation logic may find a snippet of JavaScript such as Original Snippet 11.

When processing Original Snippet 11 JavaScript obfuscation logic may define a JavaScript immediately invoked function expression to achieve the same result when executed in web browser . Such a transformation yields Obfuscated Snippet 11.

Web browser scripting is the primary use of JavaScript. Web browsers employ special application programming interfaces API to provide intimate access to web page internals or browser machinery. Web page internals are exposed by the document object model DOM . Browser machinery is exposed by the browser object model BOM . Obfuscation transformations may include transformations that apply only to usage of these dedicated APIs.

The BOM predefines important objects. An official name of a predefined object is a more human readable way to reference the predefined object. A less readable way is to define and use an alias of the predefined object to achieve the same result when executed in web browser . Obfuscating a predefined object may be a strategic way to thwart human analysis. According to a predefined object aliasing of obfuscation transformations JavaScript obfuscation logic may scan original JavaScript for occurrences of a predefined object. JavaScript obfuscation logic may find a snippet of JavaScript such as Original Snippet 12.

When processing Original Snippet 12 JavaScript obfuscation logic may declare and use a variable that references a predefined object to achieve the same result when executed in web browser . Such a transformation yields Obfuscated Snippet 12. The window object is a special case that in many circumstances may be implicitly synonymous with the this keyword. The this keyword may also be omitted in many circumstances. Although the declaration and use of the aliases are shown on adjacent lines adjacency is not required and may be avoided to hide an alias declaration. Automatic JavaScript hoisting may also be used to further hide an alias declaration.

The BOM predefines a containment hierarchy of named objects arranged according to relationships between parent and children objects. Accessing a BOM object by name is a more human readable way to reference the BOM object. A less readable way is to iterate over the siblings of a BOM object to obtain a reference to the BOM object to achieve the same result when executed in web browser . According to a BOM enumeration obfuscation of obfuscation transformations JavaScript obfuscation logic may scan original JavaScript for occurrences of a BOM object. JavaScript obfuscation logic may find a snippet of JavaScript such as Original Snippet 13.

When processing Original Snippet 13 JavaScript obfuscation logic may refer to the window object as the parent of the document object and iterate over the names of children of window to find a reference to the document to achieve the same result when executed in web browser . Such a transformation yields Obfuscated Snippet 13. Although only one level of children in the BOM hierarchy is shown in Obfuscated Snippet 13 an implementation may enumerate and traverse multiple levels of the BOM hierarchy. The criteria by which the desired child is detected during enumeration depend on arbitrary but invariant aspects of uniqueness of a named child. Criteria may include the name of the child or other properties of the child that distinguish the child from its siblings. In Obfuscated Snippet 13 the characters of the name of the child are sampled.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention and what is intended by the applicants to be the scope of the invention is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

