---

title: Method and system for hybrid testing
abstract: Embodiments of the present disclosure relate to methods and systems for hybrid testing, combining the optimization features of functional testing brought forth to security testing. One disclosed method may include receiving a list of input points associated with a software unit under test and assigning, by a processor, risk values to the input points based on one or more risk rating factors. The risk values may reflect security risk associated with the input points. The method may further include providing, to the software unit under test, input values indicative of a functional test for input points assigned values reflecting a low security risk and input values indicative of a security test for input points assigned values reflecting a high security risk. The method may further include executing a security test for the software unit under test using the input values.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09619372&OS=09619372&RS=09619372
owner: WIPRO LIMITED
number: 09619372
owner_city: Bangalore
owner_country: IN
publication_date: 20150210
---
The present disclosure relates generally to software testing. More particularly the present disclosure relates to methods and systems for hybrid software testing.

Software products undergo a wide range of testing before being released to production. For example software products may be evaluated using functional testing and security testing. The goal of a functional test may be to verify that the software under test performs as intended i.e. positive test cases and not as disallowed i.e. negative test cases . Functional testing generally provides preset test values to the software unit under test according to the software product s intended business use cases. The goal of a security test on the other hand may be to break the software under test instead of ensuring the software under test works as intended per business logic. Security testing generally provides unexpected and nontraditional values to the software unit under test in an attempt to identify weaknesses in the software and areas where the software may be vulnerable to attack.

Functional test cases may be more easily understood by stakeholders and therefore more easily accepted as a development cost. Security testing however is may often be miss understood or less understood by stakeholders and may sometimes be treated as a check mark criteria. Therefore some business applications may desire the integration of security testing with functional testing. However integration of functional and security testing may be difficult because security testing may have very little relevance to a functional test environment since the test objectives and test methods of the two are nearly disjoint.

Accordingly it may be advantageous to provide simple and efficient methods and systems for hybrid testing of software products. It may also be advantageous to provide methods and systems for hybrid testing that may reduce the total cost and time associated with executing functional and security tests independently.

In one embodiment a method for hybrid testing is disclosed. The method may include receiving a list of input points associated with a software unit under test and assigning by a processor risk values to the input points based on one or more risk rating factors. The risk values may reflect security risk associated with the input points. The method may further include providing to the software unit under test input values indicative of a functional test for input points assigned risk values reflecting a low security risk and input values indicative of a security test for input points assigned risk values reflecting a high security risk. The method may further include executing a security test for the software unit under test using the input values.

In another embodiment a system for hybrid testing is disclosed. The system may comprise one or more hardware processors and one or more memory devices storing instructions executable by the one or more hardware processors. The instructions may be executable by the one or more hardware processors for receiving a list of input points associated with a software unit under test and assigning by a processor risk values to the input points based on one or more risk rating factors. The risk values may reflect security risk associated with the input points. The instructions may also be executable the one or more hardware processors for providing to the software unit under test input values indicative of a functional test for input points assigned risk values reflecting a low security risk and input values indicative of a security test for input points assigned risk values reflecting a high security risk. The instructions may further be executable the one or more hardware processors for executing a security test for the software unit under test using the input values.

In yet another embodiment a non transitory computer readable medium is disclosed which may store instructions for hybrid testing. The instructions may include receiving a list of input points associated with a software unit under test and assigning by a processor risk values to the input points based on one or more risk rating factors. The risk values may reflect security risk associated with the input points. The instructions may also include providing to the software unit under test input values indicative of a functional test for input points assigned risk values reflecting a low security risk and input values indicative of a security test for input points assigned values reflecting a high security risk. The instructions may further include executing a security test for the software unit under test using the input values.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

Exemplary embodiments are described regarding the accompanying drawings. In the figures the left most digit s of a reference number identifies the figure in which the reference number first appears. Wherever convenient the same reference numbers are used throughout the drawings to refer to the same or like parts. While examples and features of disclosed principles are described modifications adaptations and other implementations are possible without departing from the spirit and scope of the disclosed embodiments. It is intended that the following detailed description be considered as exemplary only with the true scope and spirit being indicated by the following claims.

Embodiments of the present disclosure provide improved methods and systems for hybrid software testing. The disclosed embodiments may categorize certain input points of a software unit under test to be tested under the auspices of functional testing while keeping the rest of the inputs subject to the unpredictable and unconstrained maneuvering scope of security testing. The disclosed embodiments may flexibility assign risk ratings to each input point and then quarantine input points having a risk rating greater than a specified risk rating threshold. Those input points having a risk rating greater than the threshold may be subjected to a security test i.e. penetration test while the remaining input points may be allocated functional test specific input values.

Accordingly it may be advantageous to provide methods and systems for hybrid software testing. It may also be advantageous to provide methods and systems for hybrid testing that may reduce the total cost and time associated with executing functional and security tests independently.

As shown in hybrid tester may include one or more communications interfaces . Communications interface may send and or receive various data and information between hybrid tester and other components. For example communications interface may send and or receive various data and information between hybrid tester and other hybrid testers network clients servers SUTs e.g. SUT databases etc. Examples of communications interface may include a modem a wired or wireless communications interface e.g. an Ethernet Wi Fi Bluetooth Near Field Communication WiMAX WAN LAN etc. a communications port e.g. USB IEEE 1394 DisplayPort DVI HDMI VGA Serial port etc. a PCMCIA slot and card a cellular communications interface e.g. GSM EDGE LTE LTE Advanced CDMA cdmaOne CDMA2000 etc. Communications interface may transfer software and data in the form of signals which may be electronic electromagnetic optical or other signals capable of being received by communications interface . These signals may be provided to and from communications interface via a network not shown which may be implemented using wireless wire cable fiber optics radio frequency RF link and or other communications channels. Alternative or in addition these signals may be provided to and from communications interface via a direct connection such as for example Wi Fi Direct Bluetooth or a direct wired connection e.g. Ethernet USB etc. .

In some embodiments communications interface may provide i.e. transmit send transfer etc. test input values to SUT . Communications interface may provide the test input values so that hybrid tester may execute a security test for SUT using the input values. Each input value may be associated with a specific input point of SUT . However input values may be associated with multiple input points of SUT or some combination thereof. The security test may comprise a penetration test a source code security test any other security tests known in the art or any combination of security testing thereof. The test input values may be indicative of a functional test or a security test. The input values will be described in further detail below in reference to input value provider .

Communications interface may receive outputs from SUT as a result of the executed security test. For example SUT will generally provide a response to the input values received from hybrid tester . Hybrid tester and or a user e.g. test architect may review the responses provided by SUT and determine whether the responses are within an acceptable range. Functional test input values may be selected to generate expected acceptable i.e. positive test cases or unacceptable i.e. negative test cases responses. On the other hand successful and unsuccessful security test results are difficult to identify because test response are unpredictable due to the objective of the security test to break the SUT . Thus the test architect may be one capable of differentiating between security test outcomes.

In some embodiments communications interface may receive a list of N input points. The input points may be associated with SUT . Input points may be locations in the SUT that allow for external sources to provide input. For example an input point may be a text entry point where a user may enter a user name password addresses personal information number values combination of words and other characters or any form of text entry known in the art. Hybrid tester may store the received list of input points in a database not shown .

In some embodiments input output I O may receive the list of input points. In still some other embodiments communications interface and I O may each receive a portion of the list of input points. By way of example I O may include physical keyboards virtual touch screen keyboards mice joysticks styluses etc. I O may receive the list of input points for example as input from a user such as a test architect.

Risk value assignor may assign risk values to the input points received by communications interface and or I O . The risk values may reflect security risk associated with the received input points. Risk values may for example reflect a low security risk a high security risk or any classification of security risk known in the art. Risk value assignor may assign risk values to input points based on one or more risk rating factors and store the assigned risk values in a database not shown along with the associated input points. In some embodiments the risk rating factors may be stored in a risk rating factor database . In some other embodiments the risk rating factors may be stored in a component remote to hybrid tester such as for example a server client remote database etc. Hybrid tester may access or retrieve the risk rating factors from the remote component through communications interface . In still some further embodiments the risk rating factors may be received by I O in the form as input from a user e.g. a test architect .

Risk rating factor database may comprise a spreadsheet with or without executable macros a database such as a database with executable SQL queries MySQL IBM DB2 Microsoft Access PERL C C Java or any form of storage that is capable of storing the risk rating factors. The risk rating factors may comprise various criteria used to determine whether an input point is a high security risk or a low security risk. For example the risk rating factors may comprise a source of input associated with each input point credibility of a provider of the input transmission line security of the channel for inputs that are remotely provided positioning of the input points relative to a firewall or intrusion detection and intrusion prevention associated with the software unit under test or any criteria known in the art for used to determine input point security risk. The source of input associated with each input point may be for example the Internet an intranet a wireless access point direct connection wired or wireless or any other source of input known in the art. Credibility of the input provider may be based on the type of input provider. For example an input provider may be defined as a class of user such as for example an employee a customer an unknown third party an administrator a general user or any other class of users known in the art.

In some embodiments a user e.g. test architect may provide input via I O to modify or override the risk values assigned by risk value assignor . For example the user may retrieve risk values assigned to the input points by risk value assignor that are stored in the database. In some embodiments the user may review the risk values using a display screen of hybrid tester not shown . The user may determine e.g. based on the user s knowledge of software testing and the SUT that a risk value assigned to one or more input points may be incorrect or undesirable. The user may correct the risk value by assigning an updated risk value to the input point and store the input point and its updated risk value back in the database. In some embodiments the user may be familiar with SUT and have such knowledge as the legal and compliance implications of each type of data generally received for each input point the expected source of the inputs the production deployment environment locations of firewalls intrusion detection systems IDS intrusion prevention systems IPS the type and value sensitivity of the expected inputs etc.

Input value provider may provide input values to SUT for executing the security test. The test input values may be provided to SUT through communications interface . In some embodiments the input values may be provided based on the risk values assigned to the input points. Moreover the input values may be indicative of a functional test or a security test. For example input value provider may provide input values indicative of a functional test for input points assigned risk values reflecting a low security risk. As another example input value provider may provide input values indicative of a security test for input points assigned risk values of a high security risk. Thus testing time and costs can be reduced compared to independent functional and security tests by using predictable test values i.e. values that would typically be used in a functional test for input points that may not need rigorous validation while still performing security testing on input points having a high security risk. Moreover testing time and costs can be reduced by running a single test i.e. a security test on a SUT and using predictable and unpredictable test values when needed.

Input value provider may provide input values to SUT using a cross bar X Bar Switch. The X Bar Switch may be an N N matrix where N is the total number of input points that are being tested during the security test for a SUT . Each cell position I I of the X Bar Matrix where I may be a given input point for 0 I N may contain a value identifying whether a test value indicative of a functional test or a test value indicative of a security test will be provided for the Iinput point of SUT . The For example a cell position I I may contain a value of 1 thereby identifying a test value indicative of a functional test will be provided. As another example a cell position I I may contain a value of 1 thereby identifying a test value indicative of a security test will be provided. However it will be noted that any values may be used to distinguish between test values indicative of a functional test and test values indicative of a security test. Input value provider may provide an input value to SUT for each Ipoint according to the value stored in cell position I I .

In some embodiments the input values may be stored in an input value database . In some other embodiments the input values may be stored in a component remote to hybrid tester such as for example a server client remote database etc. Hybrid tester may access or retrieve the input values from the remote component through communications interface . In still some further embodiments the input values may be received by I O in the form as input from a user e.g. a test architect . Input value database may comprise a spreadsheet with or without executable macros a database such as a database with executable SQL queries MySQL IBM DB2 Microsoft Access PERL C C Java or any form of storage that is capable of storing the input values.

In some embodiments example method may include receiving a list of input points at . For example communications interface of hybrid tester may receive a list of input points associated with a SUT e.g. SUT . As another example I O of hybrid tester may receive the list of input points as input from a user e.g. test architect . Hybrid tester may store the input points in a database.

In some embodiments example method may include assigning risk values to the input points at . For example risk value assignor of hybrid tester may assign the risk values to the input points based on one or more risk rating factors. The risk values may reflect security risk associated with the input points.

In some embodiments example method may include providing input values to the SUT at . For example input value provider may provide input values indicative of a functional test input values indicative of a security test or any other input values to SUT known in the art. Input value provider may provide input values indicative of a functional test for input points assigned risk values reflecting a low security risk. Input value provider may provide input values indicative of a security test for input points assigned risk values reflecting a high security risk. Input value provider may provide the input values to SUT for example via communications interface .

In some embodiments example method may include executing a security test for the SUT at . For example hybrid tester may execute a security test for SUT using the input values. The security test may comprise a penetration test a source code security test any other security tests known in the art or any combination thereof. Communications interface may receive outputs from SUT as a result of the executed security test. For example SUT will generally provide a response to the input values received from hybrid tester . Hybrid tester and or a user e.g. test architect may review the responses provided by SUT and determine whether the responses are within an acceptable range. Functional test input values may be selected to generate expected acceptable i.e. positive test cases or unacceptable i.e. negative test cases responses. On the other hand successful and unsuccessful security test results are difficult to identify because test response are unpredictable due to the objective of the security test to break the SUT . Thus the test architect may be one capable of differentiating between security test outcomes.

In some embodiments example method may include comparing risk rating factor values at . For example risk value assignor of hybrid tester may serially compare values of each risk rating factor with respective threshold values. Risk value assignor may determine the values of each risk rating factor based on the amount of risk each risk rating factor contributes to the security risk of a given input point. The threshold values may be predetermined by for example the customer the test architect the software development business the software testing business e.g. if the software testing business is a third party business or some combination thereof. The threshold values may be selected based upon for example production use cases the level of security threat each risk rating factor imposes on the input point or any other factor known in the art. Moreover the threshold values may be different or the same for each input point.

Risk value assignor may determine whether each risk rating factor value exceeds the respective threshold value at . If one of the risk rating factor values exceeds a respective threshold value at then risk value assignor may calculate a risk value for each input point at . If no risk rating factor value exceeds a respective threshold value at then risk value assignor may calculate a weighted vector sum value for each input point based on the risk rating factors.

Risk value assignor may compare the weighted vector sum values to a threshold risk value at . The threshold risk value may be predetermined by for example the customer the test architect the software development business or some combination thereof. The threshold risk value may be set based upon for example production use cases the level of susceptibility to security threats of each of each input point or any other factor known in the art. Moreover the threshold risk value may be different or the same for each input point.

Risk value assignor may determine whether the weighted vector sum values exceed the threshold risk value at . If an input point has a weighted vector sum value that exceeds a threshold risk value at then risk value assignor may assign a risk value reflecting a high security risk to that input point at . If an input point has a weighted vector sum value that does not exceed a threshold risk value at then risk value assignor may assign a risk value reflecting a low security risk to the input point. Accordingly input value provider may provide input values indicative of a functional test or security test for input points based on their assigned security risk.

Processor may be disposed in communication with one or more input output I O devices via I O interface . The I O interface may employ communication protocols methods such as without limitation audio analog digital monoaural RCA stereo IEEE 1394 serial bus universal serial bus USB infrared PS 2 BNC coaxial component composite digital visual interface DVI high definition multimedia interface HDMI RF antennas S Video VGA IEEE 802.11 a b g n x Bluetooth cellular e.g. code division multiple access CDMA high speed packet access HSPA global system for mobile communications GSM long term evolution LTE WiMax or the like etc.

Using the I O interface the computer system may communicate with one or more I O devices. For example the input device may be an antenna keyboard mouse joystick infrared remote control camera card reader fax machine dongle biometric reader microphone touch screen touchpad trackball sensor e.g. accelerometer light sensor GPS gyroscope proximity sensor or the like stylus scanner storage device transceiver video device source visors etc. In some embodiments I O interface may be implement some or all of the functions of I O described above. Output device may be a printer fax machine video display e.g. cathode ray tube CRT liquid crystal display LCD light emitting diode LED plasma or the like audio speaker etc. In some embodiments a transceiver may be disposed in connection with the processor . The transceiver may facilitate various types of wireless transmission or reception. For example the transceiver may include an antenna operatively connected to a transceiver chip e.g. Texas Instruments WiLink WL1283 Broadcom BCM4750IUB8 Infineon Technologies X Gold 618 PMB9800 or the like providing IEEE 802.11a b g n Bluetooth FM global positioning system GPS 2G 3G HSDPA HSUPA communications etc. In some embodiments transceiver may implement some or all of the functions of communications interface described above.

In some embodiments the processor may be disposed in communication with a communication network via a network interface . The network interface may communicate with the communication network . The network interface may employ connection protocols including without limitation direct connect Ethernet e.g. twisted pair 10 100 1000 Base T transmission control protocol internet protocol TCP IP token ring IEEE 802.11a b g n x etc. The communication network may include without limitation a direct interconnection local area network LAN wide area network WAN wireless network e.g. using Wireless Application Protocol the Internet etc. Using the network interface and the communication network the computer system may communicate with data store and or devices and . These devices may include without limitation personal computer s server s fax machines printers scanners various mobile devices such as cellular telephones smartphones e.g. Apple iPhone Blackberry Android based phones etc. tablet computers eBook readers Amazon Kindle Nook etc. laptop computers notebooks gaming consoles Microsoft Xbox Nintendo DS Sony PlayStation etc. or the like. In some embodiments the computer system may itself embody one or more of these devices.

In some embodiments the processor may be disposed in communication with one or more memory devices e.g. RAM ROM etc. via a storage interface . The storage interface may connect to memory devices including without limitation memory drives removable disc drives etc. employing connection protocols such as serial advanced technology attachment SATA integrated drive electronics IDE IEEE 1394 universal serial bus USB fiber channel small computer systems interface SCSI etc. The memory drives may further include a drum magnetic disc drive magneto optical drive optical drive redundant array of independent discs RAID solid state memory devices solid state drives etc. Variations of memory devices may be used for implementing for example data store .

The memory devices and memory collectively may store a collection of program or database components including without limitation an operating system user interface web browser mail server mail client user application data e.g. any data variables or data records discussed in this disclosure etc. In some embodiments memory may implement some or all of the functions of risk rating factor database and input value database described above. The operating system may facilitate resource management and operation of the computer system . Examples of operating systems include without limitation Apple Macintosh OS X Unix Unix like system distributions e.g. Berkeley Software Distribution BSD FreeBSD NetBSD OpenBSD etc. Linux distributions e.g. Red Hat Ubuntu Kubuntu etc. IBM OS 2 Microsoft Windows XP Vista 7 8 etc. Apple iOS Google Android Blackberry OS or the like. User interface may facilitate display execution interaction manipulation or operation of program components through textual or graphical facilities. For example user interfaces may provide computer interaction interface elements on a display system operatively connected to the computer system such as cursors icons check boxes menus scrollers windows widgets etc. Graphical user interfaces GUIs may be employed including without limitation Apple Macintosh operating systems Aqua IBM OS 2 Microsoft Windows e.g. Aero Metro etc. Unix X Windows web interface libraries e.g. ActiveX Java Javascript AJAX HTML Adobe Flash etc. or the like.

In some embodiments the computer system may implement a web browser stored program component. The web browser may be a hypertext viewing application such as Microsoft Internet Explorer Google Chrome Mozilla Firefox Apple Safari etc. Secure web browsing may be provided using HTTPS secure hypertext transport protocol secure sockets layer SSL Transport Layer Security TLS etc. Web browsers may utilize facilities such as AJAX DHTML Adobe Flash JavaScript Java application programming interfaces APIs etc. In some embodiments the computer system may implement a mail server stored program component. The mail server may be an Internet mail server such as Microsoft Exchange or the like. The mail server may utilize facilities such as ASP ActiveX ANSI C C Microsoft .NET CGI scripts Java JavaScript PERL PHP Python WebObjects etc. The mail server may utilize communication protocols such as internet message access protocol IMAP messaging application programming interface MAPI Microsoft Exchange post office protocol POP simple mail transfer protocol SMTP or the like. In some embodiments the computer system may implement a mail client stored program component. The mail client may be a mail viewing application such as Apple Mail Microsoft Entourage Microsoft Outlook Mozilla Thunderbird etc.

In some embodiments computer system may store user application data such as the data variables records etc. e.g. a data repository node properties mapped node properties risk rating factors input values input points etc. as described in this disclosure. Computer system may also store application data including a middleware migration system comprising a migration configuration engine a scan processor and or a migration engine . Such databases may be implemented as fault tolerant relational scalable secure databases such as Oracle or Sybase. Alternatively such databases may be implemented using standardized data structures such as an array hash linked list struct structured text file e.g. XML table or as object oriented databases e.g. using ObjectStore Poet Zope etc. . Such databases may be consolidated or distributed sometimes among the various computer systems discussed above in this disclosure. It is to be understood that the structure and operation of any computer or database component may be combined consolidated or distributed in any working combination.

Software Cross Bar Switch may be a key element of hybrid testing system with Penetration Testing tool in one side injecting traffic for all of the inputs of the Software Under Test SUT while the Functional Test Cases on the other side also injecting traffic for the same set of inputs. The overlap of the input values one comprehensive set created by the Penetration Testing tool and another comprehensive set created by the Functional Test cases require to be resolved by the X Bar Switch at the center.

If SUT has N inputs then X Bar Switch may be an N N matrix with one column for each input and one row for each output. X Bar Switch may be a diagonal matrix i.e. only the cells I I are relevant for 0

Risk Rating Rule Base may be a Rule Base either in a spreadsheet with Macros executed or in a lightweight DB with SQL queries executed that captures the risk of inputs using the following criteria Source of the input intranet or extranet Credibility of the response provider employees customers strangers . . . Positioning of the security first few lines of defense against attackers with respect to the Software Under Test run time placement in the Production environment.

Rule Evaluation of Input Point Risks may for each input to SUT evaluate the risk for the respective input by executing Risk Rating Rule Base . An input may be either High Risk which assigns it a Rating 1 or Low Risk which assigns it a Rating 0.

Values to X Bar Switch are fed initiated by a Visual Editor shown to its left. The initial values for X Bar Switch may be provided pre populated by Risk Rating Rule Base however the Security Test Architect operating Visual Editor has value override ability. Security Test Architect may be intimately familiar with the role of each one of the N input values to SUT . For example if one input is a person s name whereas another input is a person s Social Security Number then the Security Test Architect must understand the legal and compliance implications of each type of data for the respective input. Security Test Architect may be intimately familiar with the source of the input as would be expected to be generated in the Prod environment of SUT . For example if one input the person s name is generated from a user operating from intranet source only then it would be marked lower in Risk rating than another input the person s Social Security Number provided over the internet from a remote browser. Security Test Architect may have a complete knowledge of the Prod deployment environment with respect to the SUT and specifically must know the locations of the Firewall the IDS IPS and all potential legitimate and attacker users of the said application. Security Test Architect may be intimately familiar with the type and value sensitivity of the respective inputs. As an example if one particular input field is a CHAR then the effect of injecting nulls or special characters require to be provisioned. Whereas if another particular input is a Numeric then negative large values or Zero or Positive exponential out of range values must be tested.

Based upon the application knowledge and intimate awareness of the Prod execution environment of the application Security Test Architect may obtain input from List of High Risk Input Points and List of Low Risk Input Points . Both these lists may be pre generated by an application domain specialist. However Security Test Architect must combine the two lists and compare and determine which one wins for each one of the N input points.

The other components of hybrid testing system include SUT which operates upon receiving the N input values for the software executes the application and validates the output per business case logic. An important distinction required to be made re output validation for business case logic which is applicable only for functional test designated inputs vis vis validating the stability of SUT which is applicable for the security test designated inputs . As when the security test succeeds SUT is expected to break instead of providing predictable response and Security Test Architect is expected to be aware as how to differentiate between the two sets of such outcome.

Penetration Testing Tool may be a commercial or freeware SIT stage security vulnerability detection tool. It generates traffic to inject SUT with for each input point for the SUT . Functional Test Cases may be business use cases generated values for each input point of SUT .

In some embodiments example method may include a test Architect receiving the list of N input points for the Software Under Test SUT at .

In some embodiments example method may include evaluating risk of the inputs and classify at . The N input points are each evaluated by the Risk Rating Rule Base to be categorized as either High Risk or Low Risk. This process of categorization produces two lists one for High Risk Input Points and the other for Low Risk Input Points.

In some embodiments example method may include receiving Prod Deployment Environment Specs at . Next the Production deployment configuration diagram is received and assessed against these two lists the High Risk and the Low Risk input points lists.

In some embodiments example method may include re classifying High Risk and Low Risk Inputs at . Depending upon the Production environment certain input may require to be re classified from one list to the other.

In some embodiments example method may include Risk Comparison and Value Assignment at . Post classification the two lists are processed on a per Input basis to assign a value 1 if the particular Input is High Risk and 1 if the particular Input is Low Risk. These 1 or 1 values are populated to the X Bar Switch for the N input values. The Visual Editor displays the pre populated N input values to the Security Test Architect. The Security Test Architect does not need to manually generate these values however s he may override certain values.

In some embodiments example method may include switching the inputs using X bar switch at . For each input position 0

In some embodiments example method may include Test Case Execution and Results Determination at . Finally the test cases are executed and results validation are done. Functional test cases are separated from security test case defects. For security defects false positives are detected and eliminated.

The underlying idea of the present subject matter namely bringing the benefits of input space optimized functional testing to the input space non optimized domain of security testing falls under the broad topic of hybrid testing. It may be noted that the idea of combining benefits of functional testing and security testing can be extended to the various implementations without deviating from scope of the invention.

In one implementation the Risk Values computed both as the input risk factors and the risk thresholds may be dynamically obtained either by i computation with one or more rules or by ii user provision or by iii table lookup. The benefits of a non static and user controlled Risk values will include the ability to adopt to changing environment requirements e.g. a project that is operating in a high risk environment as opposed to another project in a lower risk environment. This ability is particularly applicable to software security in power grid or software security in mission critical applications.

In another implementation once a set of inputs are designated to be high risk and thus qualifying to receiving its input values from security test module aka. the penetration test module two or more sub groups of Risk levels all within the higher echelon of Risk may be imposed within the security inputs. As an example if the software under test has 20 inputs and 12 of them are identified to be high risk thus the said 12 would require to be value populated by the penetration testing tool the next proposed idea is to further partition this 12 inputs into perhaps two or three sub groups e.g. Highest 4 Next high 6 and last High 2 . The idea is to split the 12 inputs into multiple groups e.g. 3 groups in this example. The goal underlying to this idea is further optimization. The very highest group clearly needs to be allocated all wild character and null values and control character as inputs. Suppose a particular Input K amongst this 12 input fields could be populated to 400 distinct values consisting of all possible wild characters null control characters and so on. Now if input K is indeed in the very highest bracket of security risk i.e. the Highest 4 then input K should certainly be subject to all of the 500 distinct input values. But suppose input K is high risk but not the very highest group instead the 2highest group i.e. the Next high 6 then a potential optimization is perhaps not to populate all the 500 input values but every 2or every 3rd of the 500 input values. Likewise if the input K belongs to the third highest risk group i.e. the last High 2 then one may further optimize by taking every 5or every 10of the 500 input values. The idea is to progressively sparse out the input values that are populated. With a judicious usage of Modulus or Div function one may reduce the large number of input values that security penetration test imposes. Overall this idea falls within the scope of hybrid testing where multi ary Risk level is considered extending from binary Risk level.

In one implementation the current idea of optimizing a test that is inherently a security test but by using values from functional test domain can be reversed to propose a dual objective. In the dual objective the test designer starts with a functional test but adds hardening to the functional test by selectively identifying a few input points which become worthy of security hardening. The designated hardened inputs are assigned more values than the nominal functional testing calls for. This idea can be described as bringing functional testing towards security testing. whereas the main idea proposed in this invention would be dual i.e. bringing security testing towards functional testing .

In one implementation within the lower Risk part where input values are being assigned functional test values a further optimization can be done by using orthogonal array concept i.e. by pre populating only selective pairs of inputs values as opposed to all possible combinations of input values.

The specification has described methods and systems for migrating an interface. The illustrated steps are set out to explain the exemplary embodiments shown and it should be anticipated that ongoing technological development will change the manner in which particular functions are performed. These examples are presented herein for purposes of illustration and not limitation. Further the boundaries of the functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternative boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed. Alternatives including equivalents extensions variations deviations etc. of those described herein will be apparent to persons skilled in the relevant art s based on the teachings contained herein. Such alternatives fall within the scope and spirit of the disclosed embodiments. Also the words comprising having containing and including and other similar forms are intended to be equivalent in meaning and be open ended in that an item or items following any one of these words is not meant to be an exhaustive listing of such item or items or meant to be limited to only the listed item or items. It must also be noted that as used herein and in the appended claims the singular forms a an and the include plural references unless the context clearly dictates otherwise.

Furthermore one or more computer readable storage media may be utilized in implementing embodiments consistent with the present disclosure. A computer readable storage medium refers to any type of physical memory on which information or data readable by a processor may be stored. Thus a computer readable storage medium may store instructions for execution by one or more processors including instructions for causing the processor s to perform steps or stages consistent with the embodiments described herein. The term computer readable medium should be understood to include tangible items and exclude carrier waves and transient signals i.e. be non transitory. Examples include random access memory RAM read only memory ROM volatile memory nonvolatile memory hard drives CD ROMs DVDs flash drives disks and any other known physical storage media.

It is intended that the disclosure and examples be considered as exemplary only with a true scope and spirit of disclosed embodiments being indicated by the following claims.

