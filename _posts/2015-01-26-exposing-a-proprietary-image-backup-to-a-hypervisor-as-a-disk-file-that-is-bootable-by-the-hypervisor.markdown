---

title: Exposing a proprietary image backup to a hypervisor as a disk file that is bootable by the hypervisor
abstract: Exposing a proprietary image backup to a hypervisor as a disk file that is bootable by the hypervisor. In one example embodiment, a method of exposing a proprietary image backup to a hypervisor as a disk file that is bootable by the hypervisor may include identifying the proprietary image backup having a proprietary format and storing an operating system, creating a plugin file corresponding to the proprietary image backup, reconfiguring the operating system to cause the operating system to be bootable when using hardware emulated by the hypervisor, gathering operating system data from the proprietary image backup, reformatting, using a filter module, the operating system data into a native format of the hypervisor, booting the operating system in a virtual machine of the hypervisor, and storing the reformatted operating system data in a replacement disk file formatted in the native format of the hypervisor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09075649&OS=09075649&RS=09075649
owner: STORAGECRAFT TECHNOLOGY CORPORATION
number: 09075649
owner_city: Draper
owner_country: US
publication_date: 20150126
---
The embodiments disclosed herein relate to exposing a proprietary image backup to a hypervisor as a disk file that is bootable by the hypervisor.

Physical computers also known as physical machines face a myriad of threats to their smooth and continuous operation including threats to the data stored in storages of the physical machines. A storage is computer readable media capable of storing data. In order to mitigate these threats a backup of the data in a storage may be created at a particular point in time to enable the restoration of the data at some future time. Such a restoration may become desirable for example if the storage experiences corruption of its stored data if the storage becomes unavailable or if a user wishes to create a second identical storage.

When a user desires to restore the storage of a physical machine from a backup the restoration to a storage on a new physical machine can involve a number of challenges including taking an unacceptable amount of time. In order to shorten the amount of time it takes to restore the storage of a physical machine from a backup a user may restore the backup to a virtual storage on a virtual machine.

A virtual machine is a software based emulation of a physical machine in a process generally known as virtualization. A virtual machine generally operates based on the computer architecture and functions of a physical machine. A hypervisor is computer software computer firmware or computer hardware that creates and runs virtual machines. A computer on which a hypervisor is running one or more virtual machines is generally referred to as a host machine while each virtual machine running on the hypervisor is generally referred to as a guest virtual machine. A hypervisor generally creates a guest virtual machine by accessing a disk file that is bootable by the hypervisor and that contains or references data that is used to create the guest virtual machine. The hypervisor also generally presents the guest virtual machine with a virtual operating platform and manages the execution of an operating system of the guest virtual machine.

One common problem encountered when utilizing a hypervisor is that some hypervisors are only designed to access disk files that have a particular file format that is native to the hypervisor. For example Microsoft Hyper V hypervisors are designed to only be capable of accessing disk files having the VHD and VHDX file formats which are the native file formats for Microsoft Hyper V hypervisors for the purpose of creating a guest virtual machine. In particular Microsoft Hyper V technology lacks disk plugin application programming interfaces APIs which are necessary to enable third parties to quickly attach disk data from their own disk image formats into Microsoft Hyper V hypervisors for access by virtual machines. This inability of some hypervisors to access a variety of differently formatted disk files due to a lack of disk plugin APIs for example limits the disk files that can be used to create virtual machines using these hypervisors.

Another common problem encountered when utilizing a hypervisor is that often the hardware configuration emulated by a hypervisor is different from the hardware configuration of an operating system stored in a backup. Therefore when the backup is restored to a virtual storage on a virtual machine the hardware configuration of the restored operating system may be incompatible with the hardware configuration of the virtual machine making it difficult or impossible to boot the operating system in the virtual machine. Further the backup may also be missing disk centric data that is used in booting the operating system due to the backup only including data from a portion of a disk such as a partition or a volume of the disk which may also make it difficult or impossible to boot the operating system in the virtual machine.

The subject matter claimed herein is not limited to embodiments that solve any disadvantages or that operate only in environments such as those described above. Rather this background is only provided to illustrate one example technology area where some embodiments described herein may be practiced.

In general example embodiments described herein relate to exposing a proprietary image backup to a hypervisor as a disk file that is bootable by the hypervisor. The example methods disclosed herein may be employed to allow a hypervisor on a host machine to create a guest virtual machine by reconfiguring an operating system stored in a proprietary backup to be bootable using hardware emulated by the hypervisor and then booting the reconfigured operating system even where the hypervisor is designed to only be capable of creating guest virtual machines using disk files formatted in the native format of the hypervisor and even where the hardware configuration emulated by the hypervisor is different from the hardware configuration of the operating system stored in the proprietary backup. The example methods disclosed herein may therefore enable a hypervisor to access and boot an operating system of a proprietary backup in a virtual machine.

In one example embodiment a method of exposing a proprietary image backup to a hypervisor as a disk file that is bootable by the hypervisor may include identifying the proprietary image backup having a proprietary format and storing an operating system creating a plugin file corresponding to the proprietary image backup reconfiguring the operating system to cause the operating system to be bootable when using hardware emulated by the hypervisor gathering operating system data from the proprietary image backup reformatting using a filter module the operating system data into a native format of the hypervisor to cause the operating system data to appear to be gathered from a disk file formatted in the native format of the hypervisor booting the operating system in a virtual machine of the hypervisor and storing the reformatted operating system data in a replacement disk file formatted in the native format of the hypervisor.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are not restrictive of the invention as claimed.

The phrase native hypervisor disk file as used herein refers to a virtual machine disk file having a file format that is native to a particular hypervisor. An example is the VHDX file format used by Microsoft Hyper V hypervisors. Another example is the VMDK file format used by VMware hypervisors. The phrase proprietary file format as used herein refers to a file format which is not natively understood by a particular hypervisor. The phrase proprietary image backup as used herein refers to a file or data storage system such as a deduplication vault or database which contains an image based backup of at least a portion of a partition or volume of a storage and which is structured in a proprietary file format. An example is the StorageCraft ShadowProtect Full SPF image backup file format. The phrase plugin file as used herein refers to a file corresponding to a native hypervisor disk file which is recognizable by a filter module and which appears to be a native hypervisor disk file to the operating system the hypervisor and to all other applications due to the filtering functionality provided by a filter module. This file generally points to the proprietary disk file and is generally much smaller in size that a corresponding real native hypervisor disk file would be. An example would be a file named vm.vhdx which because of its vhdx file extension and due to the filtering activity of a filter module appears to be a Microsoft Hyper V VHDX native hypervisor disk file but in reality does not necessarily contain the typical content or structure of a native hypervisor disk file and rather is in reality a plugin file that points to a corresponding SPF proprietary image backup file named vm.spf that is separate from the plugin file. The phrase plugin file format as used herein refers to a file format of a plugin file which is different from the native hypervisor disk file format of the native hypervisor disk file to which the plugin file corresponds because the structure of the plugin file format is different from the native hypervisor disk file format and or because at least some portion of the data that would typically be stored in the plugin file having the same structure as the native hypervisor disk file format is stored elsewhere. From the example above the plugin file vm.vhdx would have a plugin file format structure that is different from the native hypervisor disk file format structure of VHDX native hypervisor disk files. In another example a plugin file named vm2.vhdx could have a plugin file format structure that is the same as the VHDX native hypervisor disk file format structure but the vm2.vhdx plugin file could be missing some data that would typically be stored in the native hypervisor disk file but is instead retrievable from a corresponding SPF proprietary image backup file named vm2.spf using a filter module.

The hypervisor may be computer software computer firmware or computer hardware of a host machine not shown that is configured to create run and manage one or more guest virtual machines such as the guest virtual machines and . The virtual machines and may be virtual machines that are created by run by and managed by the hypervisor . Each of the virtual machines and may be a software based emulation of a physical machine e.g. a physical computer that is configured to execute programs like the physical machine.

The creation of each of the virtual machines and may be achieved by the hypervisor accessing a disk file or image backup in the storage . In particular the hypervisor may create the virtual machine by accessing the native hypervisor disk file which has the native file format of the hypervisor . Similarly the hypervisor may create the virtual machine by accessing the native hypervisor disk file which also has the native file format of the hypervisor .

In contrast the hypervisor may create the virtual machine by the filter module exposing the proprietary image backup file to the hypervisor . The proprietary image backup file has a file format which is not natively understood by the hypervisor . In addition the proprietary image backup file may store an operating system that is not configured to be bootable when using hardware emulated by the hypervisor . Although the hypervisor is not capable of directly accessing the proprietary image backup file due to the proprietary image backup file having a file format that is not natively understood by the hypervisor and although the hypervisor is not capable of booting the operating system of the proprietary image backup file due to the operating system not being configured to be bootable when using hardware emulated by the hypervisor the methods disclosed herein may enable the filter module to reconfigure the operating system and expose the proprietary image backup file to the hypervisor in the native file format of the hypervisor in order for the hypervisor to boot the operating system in the virtual machine .

As disclosed in the filter module may be configured to operate at various levels in the system . For example the filter module may function as a file system filter module that is configured to operate between the hypervisor and the file system either as a stand alone file system filter module or as a file system filter module that is partially or totally integrated into the hypervisor or the file system as disclosed in . Additionally or alternatively the filter module may function as a block level filter module that is configured to operate between the file system and the storage either as a stand alone block level filter module or as a block level filter module that is partially or totally integrated into the file system as disclosed in . Additionally or alternatively the filter module may function as a stand alone file system module that is configured to operate between the file hypervisor and the storage as disclosed in . Therefore the filter module is not limited to operation at any particular level in the system .

In one example embodiment the hypervisor may be a Microsoft Hyper V hypervisor and the proprietary image backup file may be a StorageCraft ShadowProtect Full SPF image backup file. Using the example methods disclosed herein the Microsoft Hyper V hypervisor may create the virtual machine using the SPF image backup file and or using the corresponding plugin file even though the SPF image backup file format is not natively understood by the Microsoft Hyper V hypervisor. This is accomplished by the filter module reconfiguring the operating system stored in the SPF image backup file to cause the operating system to be bootable when using hardware emulated by the Microsoft Hyper V hypervisor and then intercepting each request sent from the Microsoft Hyper V hypervisor to the SPF image backup file and or to the plugin file and responding to the request in such a way that the SPF image backup file and or the plugin file appears to be a valid VHDX file which is a native hypervisor disk file for Microsoft Hyper V hypervisors. In this manner even though the Microsoft Hyper V hypervisor is not capable of directly accessing the SPF image backup file due to the SPF image backup file having a file format that is not natively understood by the Microsoft Hyper V hypervisor the methods disclosed herein enable the filter module to reconfigure the operating system and expose the SPF image backup file to the Microsoft Hyper V hypervisor in the native VHDX file format of the Microsoft Hyper V hypervisor to enable the booting of the operating system in a virtual machine.

Although only a single storage is disclosed in the system of it is understood that the system may instead include two or more storages. Further although the storage is disclosed in being local to the hypervisor it is understood that the storage may be remote from the hypervisor . Further one or more of the files and may be stored remotely from the hypervisor . For example the plugin file may be stored locally to the hypervisor while the proprietary image backup file is stored remotely from the hypervisor . Further although the filter module is the only filter module disclosed in the system of it is understood that the functionality of the filter module may be replaced or augmented by one or more similar filter modules or any other executable modules residing in the system or in another system that is local to or remote from the system . Additionally the proprietary image backup file may not be an actual file but may instead be any other data storage system such as a deduplication vault or database which contains disk data and which is structured in a proprietary file format.

Having described one specific environment with respect to it is understood that the specific environment of is only one of countless environments in which the example methods disclosed herein may be employed. The scope of the example embodiments is not intended to be limited to any particular environment.

As disclosed in the proprietary image backup file may originally include a volume boot record an operating system and data . The operating system may include a kernel storage controller device driver s and input output device driver s . It is understood that the operating system may include additional components beyond what is illustrated in .

Also disclosed in after the reconfiguring of the proprietary image backup file to cause an operating system of the proprietary image backup file to be bootable when using hardware emulated by the hypervisor of the proprietary image backup file may be included in a reconfigured disk file that may additionally include a master boot record MBR . The MBR may include boot loader code and a partition structure . The partition structure may include an identifier . The identifier may be a disk signature having a four byte value that is randomly generated and written to the MBR when the disk is first partitioned.

As discussed in greater detail below in connection with during the reconfiguring of the proprietary image backup file the hardware configuration of the operating system may be reconfigured to be compatible with the hardware configuration emulated by the hypervisor of . This reconfiguration may include changes to the kernel the storage controller device driver s the input output device driver s or some combination thereof. This reconfiguration may also include changes to the operating system specific portions of the volume boot record data or some combination thereof. In addition since the proprietary image backup file is missing disk centric data that is used in booting the operating system due to the proprietary image backup file only including data from a portion of a disk such as a partition or a volume of the disk this reconfiguration may additionally or alternatively include the addition of the disk centric MBR which may include operating system specific portions. Therefore this reconfiguration may enable the proprietary image backup file to be restored to a virtual storage on the virtual machine of and then the operating system to be booted in the virtual machine .

The method may include a step of identifying a proprietary image backup storing an operating system. For example the filter module of may identify at step the proprietary image backup file of as being a proprietary backup image having a proprietary format and storing an operating system as disclosed in .

The method may include a step of creating a plugin file corresponding to the proprietary image backup. For example the filter module of may create at step the plugin file of that corresponds to the proprietary image backup file of . Alternatively another module such as a kernel mode or user mode module that runs on the same host machine as the hypervisor or that runs on another local or remote machine may at step create the plugin file that corresponds to the proprietary image backup file . As noted above the proprietary image backup file has a proprietary file format and the plugin file has a plugin file format. Also noted above the plugin file may be stored in the storage where the proprietary image backup file is stored or the plugin file and or the proprietary image backup file may be stored in another local or remote storage. As illustrated in the plugin file may include a pointer that points to the proprietary image backup file . Additionally or alternatively the plugin file may be associated with the proprietary image backup file using a data storage system that is external to the plugin file such as a database that is stored elsewhere in the storage or in another local or remote storage.

The method may include a step of reconfiguring the operating system to cause the operating system to be bootable when using hardware emulated by the hypervisor. For example the hypervisor may at step reconfigure the operating system of to cause the operating system to be bootable when using hardware emulated by the hypervisor . This reconfiguration of the operating system at step may include modifying the operating system as stored in the proprietary image backup file . Alternatively this reconfiguration may include leaving the operating system as stored in the proprietary image backup file unmodified and storing modifications to the operating system in a location other than the proprietary image backup file such as in a reconfigured disk file . The differences between the original proprietary image backup file and the reconfigured disk file may be stored by creating a differencing disk file associated with the plugin file and storing the modifications to the operating system in the differencing disk file.

This reconfiguration of the operating system at step may additionally or alternatively include patching the storage controller device driver s of the operating system patching the kernel of the operating system patching the input output device driver s of the operating system patching boot code such as the boot loader code of the operating system patching the partition structure associated with the operating system patching the drive identifier patching a drive letter and or a volume identifier of a volume that stores the operating system or some combination thereof. It is understood that patching boot code may include patching boot code that is stored in boot sector s in a BIOS in executable boot loader files or some combination thereof.

The method may include a step of sending a file open request and a step of intercepting the file open request. For example the hypervisor of may at step send a file open request directed to the plugin file and the filter module may at step intercept the file open request. This interception of this request and the interception of all other requests discussed herein may be possible due to the filter module sitting between the hypervisor and the storage where the plugin file is stored in any of the positions disclosed in or in any combination of the positions disclosed in . In any such position the filter module is able to intercept examine and modify if desired all requests from the hypervisor to the storage .

Continuing with the above example even though the plugin file has a plugin file format the hypervisor may nevertheless attempt to open the plugin file because the plugin file may falsely appear to have a native file format. For example a portion of a name attribute of the plugin file such as the file extension of the name attribute of the plugin file may falsely identify the plugin file as having the native file format of the hypervisor . In this example the hypervisor may be a Microsoft Hyper V hypervisor the plugin file may be named vm.vhdx and the proprietary image backup file may be an SPF image backup file named vm.spf that is separate from the plugin file . The vhdx file extension falsely identifies the plugin file as having the native VHDX file format of the Microsoft Hyper V hypervisor . In reality of course the plugin file may not contain the typical content and or structure of a native VHDX file but instead is in reality a plugin file that points to the corresponding SPF image backup file named vm.spf that is separate from the plugin file . Alternatively the plugin file may have the native file format but may not yet be filled up with data as discussed below in connection with step .

The method may include a step of determining that the plugin file has a plugin file format. For example the filter module may at step determine that the plugin file has a plugin file format. This determination may be made in a variety of different ways. For example the filter module may determine that the plugin file has a plugin file format by determining that metadata that identifies the plugin file as having a plugin file format is present in the plugin file . Alternatively or additionally the filter module may determine that the plugin file has a plugin file format by determining that the plugin file is present in a list of files that have the plugin file format that is stored in a data storage system that is external to the plugin file such as a database that is stored elsewhere in the storage or in another storage. It is understood that the plugin file format may overlap or be identical in at least some embodiments with the native file format as discussed below in connection with step .

The method may include a step of reporting success and a step of receiving the success report. For example the filter module may at step respond to the previously received file open request with a report that the plugin file was opened successfully and the hypervisor may at step receive the success report.

This reporting of success may be performed at steps and either after actually having opened the proprietary image backup file or without actually having opened the proprietary image backup file . In practice it has been discovered that at least some hypervisors perform many reads of metadata of a disk file without actually requesting disk data and do so between several consecutive file open and file close requests on the disk files. This occurs most often when disk files are being attached to guest virtual machines or when virtual machine configuration settings are being modified. Therefore to improve performance the user experience and reduce resource usage the filter module may defer actually opening the proprietary image backup file until absolutely necessary. This may involve storing sufficient metadata to respond to other reads of virtual machine disk file metadata within and or associated with the plugin file itself so that such requests can be responded to without the typically expensive operation of opening the proprietary image backup file .

After the performance of step the hypervisor may believe that a native hypervisor disk file having the native file format of the hypervisor has been opened even where the actual file that has been accessed is the plugin file that has a plugin file format that may or may not coincide with the native file format. The plugin file may be subsequently used by the filter module to expose the proprietary image backup file to the hypervisor in the native file format of the hypervisor .

The method may include a step of sending read operations associated with an operating system boot and a step of intercepting read operations associated with the operating system boot. For example the hypervisor of may at step send read operations associated with a booting of the operating system of and the filter module of may at step intercept the read operations such as file read operations or block read operations associated with the booting of the operating system . The booting of the operating system may involve the execution of boot code such as the boot loader code which may result in the read operations sent and intercepted at steps and .

The method may include a step of gathering operating system data from the proprietary image backup. For example the filter module of may at step gather data of the operating system from the proprietary image backup file or the reconfigured disk file of .

The method may include a step of reformatting the operating system data into the native format of the hypervisor. For example the filter module of may at step reformat the operating system data that was gathered at step into the native format of the hypervisor to cause the operating system data to appear to be gathered from a disk file formatted in the native format of the hypervisor .

The method may include a step of sending the reformatted operating system data and a step of receiving the reformatted operating system data. For example the filter module of may at step send the reformatted operating system data and the hypervisor may at step receive the reformatted operating system data.

The method may include a step of booting the operating system using the reformatted operating system data. For example the hypervisor of may at step boot the operating system of using the reformatted operating system data received at step .

After the performance of the step the hypervisor of on a host machine will have successfully created the guest virtual machine by reconfiguring using the filter module the operating system stored in the proprietary image backup file to be bootable when using hardware emulated by the hypervisor and then booting the reconfigured operating system even though the hypervisor may only be designed to be capable of creating guest virtual machines using disk files formatted in the native format of the hypervisor and even though the hardware configuration emulated by the hypervisor is different from the hardware configuration of the operating system that was originally stored in the proprietary image backup file . The example methods disclosed herein therefore enable the hypervisor to access and boot the operating system of the proprietary image backup file in the virtual machine .

Additionally after the performance of the step the hypervisor will have been deceived by the filter module to believe that read operations were successfully executed on a native hypervisor disk file having the native file format of the hypervisor even though the actual file that has been read from is the proprietary image backup file having a proprietary file format. This deception on the part of the filter module allows the filter module to expose the proprietary image backup file to the hypervisor in the native file format of the hypervisor thereby expanding the types of disk files that can be effectively read by the hypervisor .

The method may include a step of reformatting data in the proprietary image backup from the proprietary format to the native format of the hypervisor. For example the filter module of may at step reformat data in the proprietary image backup file from the proprietary format to the native format of the hypervisor . The reformatting at step may be performed in connection with intercepted read requests that are directed to the plugin file or may be performed separately from any intercepted read request. Additionally the reformatting at step may be performed in connection with the reformatting performed at step .

The method may include a step of storing the reformatted data in a replacement disk file. For example the filter module of may at step store the reformatted data in a replacement disk file. The replacement disk file may be a disk file that has the native format of the hypervisor . For example the plugin file may have the native format of the hypervisor and may function as the replacement disk file. Alternatively the replacement disk file may be separate from the plugin file . In either case step may include filling up the replacement disk file with the reformatted data. Then once the data in the proprietary image backup file has finished being reformatted and stored in the replacement disk file at the conclusion of the step the proprietary image backup file can be replaced by the replacement disk file and requests directed to the plugin file that previously may have been serviced from proprietary image backup file may subsequently be serviced from the replacement disk file.

In addition even partial performance of the step may enable the filter module to respond to intercepted read requests by gathering data from the proprietary image backup file and the replacement disk file in a load balanced fashion which may enable data to be gathered simultaneously from both the proprietary image backup file and the replacement disk file to service the read requests. For example even before the step has completed and the replacement disk file is only partially filled up with the reformatted data from the proprietary image backup file the filter module may service intercepted read requests by balancing the gathering of data between the proprietary image backup file and the replacement disk file which may speed up servicing of the intercepted read requests.

After the performance of the step the filter module may have successfully created and or filled up the replacement disk file which is a native hypervisor disk file of the hypervisor enabling the virtual machine to be maintained using the replacement disk file. Since the replacement disk file is a native hypervisor disk file it may be more efficient for the hypervisor to maintain the virtual machine from the replacement disk file than it was from the proprietary image backup file as the functionality of the filter module may no longer be necessary for the hypervisor to maintain the virtual machine .

The method may include a step in which a file read request is sent and a step in which the file read request is intercepted. For example the hypervisor may at step send a file read request directed to the plugin file and the filter module may at step intercept the file read request.

After step the method may include a step in which the read request is modified to gather data from a proprietary disk file. For example the filter module may at step modify the read request to direct that data be gathered from the proprietary image backup file instead of from the plugin file . This modification may be enabled by the pointer in the plugin file and thereby indicates that the proprietary image backup file should be the actual target of any read and or write requests sent by the hypervisor to the plugin file .

The method may include a step in which the data is reformatted into a native file format of the hypervisor. For example the filter module may at step reformat the data that was gathered in response to the modified request at step into the native file format of the hypervisor . This reformatting of the data may be intended to make the data appear to the hypervisor to have been gathered from a native hypervisor disk file due to being formatted in the native file format of the hypervisor .

Additionally or alternatively after step the method may include a step of modifying the read request to gather data from the replacement disk file. For example the filter module may at step modify the read request that was intercepted at step to gather data that was originally stored in the proprietary image backup file but was subsequently reformatted into the native file format of the hypervisor and stored in the replacement disk file.

The method may include a step in which the gathered data is sent and a step in which the gathered data is received. For example the filter module may at step send the gathered data and the hypervisor may at step receive the gathered data.

After the performance of step the hypervisor will have been deceived by the filter module to believe that a read request was successfully executed on a native hypervisor disk file having the native file format of the hypervisor even though the actual file that has been read from or that was originally read from is the proprietary image backup file having a proprietary file format and or the read request will have been successfully executed on the replacement file.

The method may include a step in which a write request is sent and a step in which the write request is intercepted. For example the hypervisor may at step send a write request directed to a particular location in the plugin file and the filter module may at step intercept the write request.

After step the method may include a step in which the write request is modified to write the data to a location in the proprietary disk file in the proprietary file format. For example the filter module may at step modify the write request to direct that data be written to a location in the proprietary image backup file instead of to the plugin file .

Additionally or alternatively after step the method may include a step of modifying the write request to write data to a differencing disk file. For example the file system may at step write the data from the write request intercepted at step to a difference disk file. The difference disk file may be created having a native file format. The differencing disk file may be associated with the plugin file .

The differencing disk file may be facilitated where the hypervisor is configured with native snapshotting differencing disk capability to itself handle all write requests of a guest virtual machine by performing the write requests on a differencing disk file. For example where the hypervisor supports the creation of differencing disk files which are snapshots of a disk file the filter module or other module of the system can instruct the hypervisor to create a differencing disk associated with the plugin file . A differencing disk file may be similar in some respects to an incremental image backup file such as a StorageCraft ShadowProtect Incremental SPI image backup file. However unlike SPI image backup files which are updated with sequentially increasing offsets differencing disk files may permit random offset writes of virtual machine disk data. After the creation of the differencing disk file all writes of the guest virtual machine to the plugin file may instead be written by the hypervisor to the differencing disk file. The differencing disk file may have a native file format such as a VHDX or VMDK file format. In this example all of the write requests from the guest virtual machine may be handled by the hypervisor itself and are sent directly to the differencing disk file. The hypervisor in this example may continue to issue read requests to the plugin file but direct all write requests to the differencing disk file.

The method may include a step of reporting success and step of receiving the success report. For example the filter module may at step report success and the hypervisor may at step receive the success report.

After the performance of step the hypervisor will have been deceived by the filter module to believe that a write request was successfully executed on a native hypervisor disk file having the native file format of the hypervisor even though the actual file that has been written to is the proprietary image backup file having a proprietary file format or the write request will have been successfully executed on a differencing disk file.

It is understood that the steps of the method performed in the examples above by the filter module may be performed by a module other than the filter module such as a kernel mode or user mode module that runs on the same host machine as the hypervisor .

It is further understood that each of the steps discussed herein that involve modifying a request may instead be implemented by replacing and or associating the request with one or more new request s that is are configured to accomplish the same end result as a modified request. For example a modification of a read request may involve queuing the read request and initiating an associated read request to a proprietary disk file. The data received in response to the associated read request may then be filled into the queued read request s buffer such as by copying the associated read request s buffer into the buffer for the queued read request. In this example both the queued read request and the associated read request may use a shared buffer or they may have their own distinct buffers.

The embodiments described herein may include the use of a special purpose or general purpose computer including various computer hardware or software modules or filters as discussed in greater detail below.

Embodiments described herein may be implemented using computer readable media for carrying or having computer executable instructions or data structures stored thereon. Such computer readable media may be any available media that may be accessed by a general purpose or special purpose computer. By way of example and not limitation such computer readable media may include non transitory computer readable storage media including RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other storage medium which may be used to carry or store desired program code in the form of computer executable instructions or data structures and which may be accessed by a general purpose computer special purpose computer or virtual computer such as a virtual machine. Combinations of the above may also be included within the scope of computer readable media.

Computer executable instructions comprise for example instructions and data which cause a general purpose computer special purpose computer or virtual computer such as a virtual machine to perform a certain function or group of functions. Although the subject matter has been described in language specific to structural features and or methodological steps it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or steps described above. Rather the specific features and steps described above are disclosed as example forms of implementing the claims.

As used herein the term module or filter module may refer to software objects or routines that execute on a computing system. The different modules or filter modules described herein may be implemented as objects or processes that execute on a computing system e.g. as separate threads . While the system and methods described herein are preferably implemented in software implementations in hardware or a combination of software and hardware are also possible and contemplated.

All examples and conditional language recited herein are intended for pedagogical objects to aid the reader in understanding the example embodiments and the concepts contributed by the inventor to furthering the art and are to be construed as being without limitation to such specifically recited examples and conditions.

