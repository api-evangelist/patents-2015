---

title: Lightweight application virtualization architecture
abstract: An example method includes identifying a software package that is associated with a software application, wherein the software package includes platform-independent instructions that are configured to perform at least one computational task upon execution, and wherein the platform-independent instructions have a format that is not specific to any particular hardware platform. The method further includes selecting a computing system to perform the at least one computational task, providing, by the selected computing system, a container in which to perform the at least one computational task, obtaining, by the selected computing system, platform-dependent instructions that have been converted from the platform-independent instructions, wherein the platform-dependent instructions have a format that is specific to a hardware platform provided by the selected computing system, executing, by the selected computing system and in the container, the platform-dependent instructions to perform the at least one computational task.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09501304&OS=09501304&RS=09501304
owner: Architecture Technology Corporation
number: 09501304
owner_city: Minneapolis
owner_country: US
publication_date: 20150616
---
A cloud computing platform may be an attractive platform architecture for many applications particularly because of its support for elastic scaling in response to changing loads. However adoption of cloud computing may be hampered by reduced computing efficiency higher management cost and greater vulnerability to attack as compared with the use of traditional dedicated servers.

Cloud computing architectures are traditionally based on full or hardware level virtualization techniques providing cloud users with an easy path for migrating existing applications to a new environment. However replicating the entirety of an operating system and emulating the hardware it runs on introduces many inefficiencies. While sophisticated hypervisors can mitigate some of the duplicated memory and storage needs full virtualization remains inefficient at runtime and during elastic scaling operations by creating new instances in response to increased load. Full virtualization may also bring with it all the management headaches that may come with long term operating system maintenance including extensive configuration tasks and the potential need to apply regular security updates.

In one example a method includes in a cloud computing platform comprising one or more computing systems identifying a software package that is associated with a software application wherein the software package includes platform independent instructions that are configured to perform at least one computational task upon execution and wherein the platform independent instructions have a format that is not specific to any particular hardware platform provided by the one or more computing systems. The example method further includes selecting from the one or more computing systems a computing system to perform the at least one computational task providing by the selected computing system a container in which to perform the at least one computational task obtaining by the selected computing system platform dependent instructions that have been converted from the platform independent instructions wherein the platform dependent instructions have a format that is specific to a hardware platform provided by the selected computing system executing by the selected computing system and in the container the platform dependent instructions to perform the at least one computational task.

In one example a cloud computing platform comprises one or more computing systems that include one or more processors. The one or more processors are configured to identify a software package that is associated with a software application wherein the software package includes platform independent instructions that are configured to perform at least one computational task upon execution and wherein the platform independent instructions have a format that is not specific to any particular hardware platform provided by the one or more computing systems and to select from the one or more computing systems a computing system to perform the at least one computational task. The selected computing system provides a container in which to perform the at least one computational task obtains platform dependent instructions that have been converted from the platform independent instructions wherein the platform dependent instructions have a format that is specific to a hardware platform provided by the selected computing system and executing by the selected computing system and in the container the platform dependent instructions to perform the at least one computational task.

In one example a computer readable storage medium comprising instructions that when executed cause a cloud computing platform comprising one or more computing systems to perform operations comprising identifying a software package that is associated with a software application wherein the software package includes platform independent instructions that are configured to perform at least one computational task upon execution and wherein the platform independent instructions have a format that is not specific to any particular hardware platform provided by the one or more computing systems and selecting from the one or more computing systems a computing system to perform the at least one computational task. The example operations further comprise providing by the selected computing system a container in which to perform the at least one computational task obtaining by the selected computing system platform dependent instructions that have been converted from the platform independent instructions wherein the platform dependent instructions have a format that is specific to a hardware platform provided by the selected computing system and executing by the selected computing system and in the container the platform dependent instructions to perform the at least one computational task.

The details of one or more examples are set forth in the accompanying drawings and the description below. Other features objects and advantages of the disclosure will be apparent from the description and drawings and from the claims.

As described above while cloud computing is an attractive platform architecture for many applications such architectures are traditionally based on full or hardware level virtualization techniques. Replicating the entirety of an operating system and emulating the hardware it runs on may introduce many inefficiencies. Full virtualization may also introduce management issues that come with long term operating system maintenance. The traditional virtual machine abstraction is at too low a level for a generic compute cloud and as a result may require a full blown operating system in each virtual machine instance. When looking at a cloud as a general computing resource on which a new application can be developed to securely run this requirement limits the flexibility of the application architecture and it also dramatically increases the cloud resources needed by the application in terms of memory and computational power.

Operating system level virtualization OSLV is a powerful tool for improving the security of software systems by isolating software components within a single operating system instance. In doing so the use of OSLV eliminates the overhead of full virtualization per application. Isolating software components from one another and from the rest of the host system helps enforce the principle of least privilege by preventing compromised or malfunctioning components from accessing or modifying resources outside of their scope. OSLV can be viewed as an extension of an operating system s usual access controls. Operating systems by default limit a process ability to access certain resources including for example the private resources of other processes. OSLV is similarly enforced by the operating system but provides a higher degree of isolation by creating virtualization containers. Processes within a container can generally only access explicitly defined resources outside of their container. This approach has a lower overhead than hardware virtualization e.g. virtualization using virtual machines since it may not be necessary to virtualize the entire operating system and hardware.

One issue limiting the widespread application of OSLV to cloud software systems is that configuring and maintaining virtualization containers is a difficult time consuming and largely manual task because configuring individual properly secured containers for processes that need to communicate with one another is a difficult time consuming task that may involve expert knowledge to perform correctly. When these processes are part of a large distributed software system and communicate with one another across a multi host cloud network configuration may be even more challenging.

An OSLV based cloud infrastructure would be able to handle this container setup automatically based on configuration parameters provided by the application developer. Because the developer may not necessarily need to be concerned with operating system configuration or platform specific details the developer can focus on the details of a particular application. Flexibility and runtime efficiency may be dramatically increased if the application can be made operating system agnostic such that it could be deployed on whatever cloud hardware is currently available.

One or more aspects of the present disclosure provide a cloud architecture herein referred to as the Lightweight Application Virtualization Architecture or LAVA which allows new applications to be deployed utilizing fewer computing resources and less management burden as well as providing a high level of security. Techniques are provided to securely isolate application components and allow them to be easily deployed within the cloud infrastructure. This secure isolation is lightweight and operating system agnostic and further allows flexible secure communications amongst the deployed application components.

In various cases LAVA provides an efficient platform for deploying cloud applications while preserving the application isolation features of traditional cloud systems and shrinking the attack surface. LAVA operates by combining OSLV technologies with portable cross platform instructions e.g. bitcode and with flexible secure inter process communication IPC within and across cloud systems. Developers who use LAVA are able to create packages of code that can run efficiently as processes on a wide range of hardware and operating systems. The LAVA infrastructure virtualizes these packages while transparently configuring strong isolation and protected communications between them using OSLV. OSLV in turn relies on native operating system mechanisms. As will be discussed in further detail below a LAVA management web user interface may be able to configure system wide resource limits and may also be used to monitor and or control the individual LAVA computing systems that are part of the overall platform. As a result the use of LAVA will enable users to deploy scalable cloud based applications securely efficiently and with fine grained management of resource consumption.

An application developer may utilize development computing system as a toolchain. As shown in the example of application developer may utilize development computing system to generate application source code . As will be described in further detail below a LAVA toolchain may generate one or more LAVA software packages based on application source code . These software packages may then be deployed e.g. uploaded on cloud computing platform . Toolchain may comprise a collection of tools libraries and or application programming interfaces API s that development computing system may use to create packages which comprise portable software components that are executed by cloud computing platform .

Cloud computing platform in some examples may comprise a managed collection of computing devices that execute infrastructure cloud computing software. Users can run processing tasks distributed across cloud computing platform . Software applications that run on cloud computing platform are composed of packages . Unlike traditional cloud computing systems where a user controls an entire virtualized operating system packages each comprise a module that is executable as single process running on a host system of cloud computing platform . Packages are operating system independent portable code modules or instructions which may run the same on any given system of cloud computing platform regardless of the hardware and operating system that are implemented. In some examples as will be described in further detail below an individual package of packages may be an object file containing Low Level Virtual Machine LLVM bitcode and or other configuration data. LLVM provides an open source compiler front end that can output bitcode which is a platform independent intermediate software representation. LLVM tools of cloud computing platform can then convert bitcode into optimized native code for any supported hardware platform of a given system of cloud computing platform .

As noted above application developer may utilize toolchain of development computing system to create packages from application source code . These packages may be associated with one or more software applications. Toolchain may include a compiler front end such as an LLVM compiler front end e.g. LLVM GCC or Clang to generate platform independent instructions e.g. a bitcode object file . GCC based compiler front ends for LLVM are available for many programming languages including C C Java Ruby Python PHP Fortran and others. Toolchain may package this bitcode and any supporting resources such as data files into a package of packages .

The design approach of using LLVM bitcode as a deployed object file and compiling it to native code at runtime on cloud computing platform provides fast hardware independent computing capabilities. LLVM bitcode is both platform agnostic and language agnostic. Furthermore cloud computing platform can optimize LLVM bitcode at runtime to match the available hardware capabilities provided by cloud computing platform . This approach enables object files to be run and optimized on different hardware platforms supported by cloud computing platform .

Cloud computing platform includes different modules that together enable a service provider to run a LAVA cloud. These modules as shown in include one or more deployment modules one or more runtime modules one or more networking modules and management tools . In various examples deployment modules use OSLV technologies to provide secure isolated processes or containers for each of packages running in cloud computing platform . The specifications and properties of these containers are platform independent. In some cases the containers themselves may be implemented on supported platforms using certain technologies or operating systems such as jails on FreeBSD and cgroups LXC and vServer on Linux depending on the configuration of each computing system of cloud computing platform . The use of these containers enables individual processes to be strongly isolated from one another with low overhead.

Deployment modules automatically create and configure these containers as necessary which may include creating a new container and applying one or more security controls to the container e.g. locking it down before allowing a package associated with the container to run. The container may be configured to limit the process ability to access certain resources including for example the private resources of other processes. Cloud computing platform is capable of supporting a number of different operating systems enabling cloud computing platform to include a heterogeneous collection of hardware systems and or virtual machines. The use of cloud computing platform in such fashion may abstract away operating system specific details of how OSLV is implemented providing end users with a single OS independent container for each of packages regardless of the underlying technology. In some cases rather than creating a new container deployment modules may select or reserve a container from a pool of reusable and or pre created containers.

The implementation of deployment modules may additionally enable users and system administrators to restrict and measure system resource usage by packages . Resource restrictions enable users and system administrators to improve the security of a software application based on execution of one or more of packages associated with such application by minimizing the system resources that can be accessed by the application. It also enables system administrators to limit the impact of individual packages and users on cloud computing platform . For example system administrators may apply memory and or central processing unit CPU limits to prevent runaway software from degrading system performance. System resource restriction and measurement enables computing systems of cloud computing platform to implement equitable resource sharing.

Runtime modules are software components that run packages inside of containers or processes e.g. OSLV containers and may also provide certain API functions. As one example runtime modules may unpack an individual package of packages obtain e.g. using backend modules such as LLVM back end modules platform dependent instructions e.g. machine code that have been converted from a first group of platform independent instructions e.g. the LLVM intermediate bitcode objects and executes the platform dependent instructions supplying them with native runtime environment libraries that correspond to the system independent headers or API s that may be associated with the platform independent instructions. In general platform independent instructions are instructions that are hardware operating system and or programming language agnostic.

Networking modules provide secured network connections between packages enabling inter process communication across potentially un trusted networks. In some cases packages use simple TCP IP connections to exchange data. A user can specify what type of security restrictions such as encryption and authentication to apply to data flows between packages . Networking configurations on the host computing systems of cloud computing platform may explicitly control communication between packages and network connections between different computing systems of cloud computing platform rather than between OSLV containers on the same system may use tunnels to apply security to these network connections. The network tunnel architecture however is transparent to packages .

Management tools monitor and control cloud computing platform and also enable users to create and manage instances of packages . In various examples management tools provide a convenient management interface for users and system administrators. Using an interface provided by management tools service providers can for example configure system wide resource limits and monitor the health of computing systems that are included in cloud computing platform . Service providers can also obtain information about resource usage per user enabling usage based billing. Users can create and manage packages apply resource limits monitor resource usage and configure networking and security controls using management tools .

In some examples and as will be described in further detail below in cloud computing platform which comprises one or more computing systems cloud computing platform is able to identify a software package of packages that is associated with a software application. The software package includes platform independent instructions that are configured to perform at least one computational task upon execution and the platform independent instructions also have a platform independent format e.g. LLVM bitcode format that is not specific to any particular hardware platform provided by the one or more computing systems. Cloud computing platform selects e.g. based on one or more resources of the hardware platform provided by a particular computing system from the one or more computing systems a particular computing system to perform the at least one computational task. The selected computing system provides e.g. creates or selects a container in which to perform the at least one computational task. The selected computing system may obtain platform dependent instructions that have been converted from the platform independent instructions wherein the platform dependent instructions have a platform dependent format that is specific to a hardware platform provided by the selected computing system. The selected computing system then executes e.g. in the container the platform dependent instructions to perform the at least one computational task. In general as described throughout this application the term computing system may refer to any type of computing system such as for example a hardware or virtualized system.

As shown in the example of toolchain includes a compiler system independent headers object files system independent libraries metadata and platform independent instructions . Compiler may comprise a compiler front end to generate object files e.g. bitcode object files . As one example compiler may comprise an LLVM compiler front end e.g. LLVM GCC or Clang . GCC based compiler front ends for LLVM are available for many programming languages including C C Java Ruby Python PHP Fortran and others. In generating object files compiler may incorporate system independent headers that may correspond to system independent API s. At run time cloud computing platform may supply native runtime environment libraries that correspond to system independent headers .

Toolchain generates platform independent instructions e.g. LLVM bitcode from object files during a first phase link. Platform independent instructions may have a format that is not specific to any particular hardware platform provided by the computing systems included in cloud computing platform . In some cases toolchain may link zero or more system independent libraries e.g. LLVM bitcode libraries with object files to produce platform independent instructions . System independent headers and system independent libraries are platform independent components that are not specific to any particular computing system of cloud computing platform or to any operating system executed by a particular computing system.

Toolchain may package platform independent instructions and any supporting resources such as metadata into one or more packages . Metadata may include user supplied metadata associated with platform independent instructions . In general metadata may include any data that can be utilized by platform independent instructions . Once toolchain has generated packages these packages can be distributed e.g. uploaded onto cloud computing platform for execution.

As described previously in reference to cloud computing platform includes one or more deployment modules one or more runtime modules one or more networking modules and management tools . These modules may be implemented or otherwise executed by one or more of computing systems and or by one or more other computing systems not shown in that are also included in cloud computing platform . In various examples deployment modules uses OSLV technologies to create secure isolated processes or containers for each of packages running in cloud computing platform . Deployment modules may automatically create and configure these containers as necessary which may include creating a new container and applying one or more security controls to the container e.g. locking it down before allowing a package associated with the container to run. In some cases rather than creating a new container deployment modules may select or reserve one or more containers from a pool of reusable and or pre created containers such as containers that may have been previously used or created by deployment modules .

As shown in the example of deployment modules have provided containers and on example computing system and have also provided containers and on example computing system . The specifications and properties of these containers and may be platform independent. In some cases the containers themselves may be implemented on supported platforms using certain technologies such as jails on FreeBSD and cgroups LXC and or vServer on Linux depending on the operating system s supported by computing systems and . In some examples deployment modules may be executed by one or more of computing systems . In some examples deployment modules may be executed by one or more other computing devices that are part of cloud computing platform .

Runtime modules run packages inside of containers and may also provide certain API functions. As one example runtime modules may unpack an individual package obtain platform dependent instructions e.g. machine code that have been converted from a first group of platform independent instructions e.g. the LLVM intermediate bitcode and execute the platform dependent instructions supplying them with native runtime environment libraries that correspond to system independent headers or API s. illustrates examples of runtime modules A B C and D on computing systems and . For example computing system includes runtime modules A and B while computing system includes runtime modules C and D. On computing system runtime module A runs package A inside of container .

To do so runtime module A may unpack package A convert the platform independent instructions included in package A into platform dependent instructions that are specific to the hardware resources and or operating system provided by computing system and execute the platform specific instructions. Similarly runtime module B runs package B inside of container . On computing system runtime module C runs package C inside of container and runtime module D runs package D inside of container . Packages A D may be examples of packages shown in . Containers and may comprise OSLV containers. These containers may each comprise an operating system OS independent container on one of computing system or . In some examples one or more of packages A D illustrated in are associated with the same software application. In some cases two or more of packages A D are different instances of the same package. In other cases packages A D may each be associated with a different respective software application.

The implementation of deployment module may enable restriction and or measurement of system resource usage by each of packages A D. Resource restrictions for example may enable users and system administrators to improve the security of one or more software applications based on execution of one or more of packages A D associated with such applications by minimizing the system resources that can be accessed by these applications on computing system and or computing system . It also enables system administrators to limit the impact of individual processes and users on cloud computing platform . For example system administrators may apply certain memory and or CPU limits for one or more of computing systems .

In some examples networking modules may be executed by one or more of computing systems . Networking modules provide secured network connections between packages A D enabling inter process communication within a given computing system and intra process communication between computing systems. In some cases the packages utilize TCP IP connections to exchange data and certain security restrictions such as encryption and authentication may be applied to data flows between packages particularly if packages reside on different computing systems. As shown in package A may communicate directly with package B within computing system and package C may communicate directly with package D within computing system . However package B on computing system may also securely communicate with package D on computing system via one or more tunnels . The network tunnel architecture however is transparent to packages B and D.

Management tools monitor and control cloud computing platform and also enable creation and management of packages A D. In various examples management tools provide a convenient management interface for users and system administrators. Using an interface provided by management tools service providers can for example configure system wide resource limits and monitor the health of computing systems . Service providers can also obtain information about resource usage per user enabling usage based billing. Users can create and manage packages apply resource limits monitor resource usage and configure networking and security controls using management tools . In some examples management tools may be executed by one or more of computing systems . In some examples management tools may be executed by one or more other computing devices that are part of cloud computing platform .

Computing systems are capable of supporting a number of different operating systems enabling cloud computing platform to include a heterogeneous collection of hardware systems and or virtual machines. The use of cloud computing platform in such fashion may abstract away operating system specific details and provide a single OS independent container e.g. container for each respective package e.g. package A D regardless of the underlying technology.

As one non limiting example package A is illustrated in . As shown in runtime module A may run package A inside of container where container may comprise in certain cases a process or thread. To do so runtime module A may unpack package A and convert the platform independent instructions included in package A into platform dependent instructions that are specific to the hardware resources and or operating system provided by computing system . As shown in the example of package A is unpacked to obtain platform independent instructions .

Runtime module A may utilize one or more hardware backend modules to convert e.g. compile platform independent instructions into one or more native object files A e.g. native machine code for computing system and or processing units . As described earlier in reference to toolchain previously generates platform independent instructions from object files and zero or more system independent libraries during a first phase link. During a second phase link on computing system runtime module A uses native object files A and native runtime libraries to generate native executable A which comprises platform dependent instructions that are specific to processing units of computing system . Runtime module A links in native runtime libraries to match the system independent headers e.g. system independent headers originally compiled into platform independent instructions and or to resolve references to native runtime libraries at runtime. Upon generation of native executable A one or more processing units of computing system may execute the platform dependent instructions of native executable A. These platform dependent instructions have a format that is specific to a hardware platform provided by computing system . For example the platform dependent instructions for native executable A may be specific to one or more of processing units and may also be specific to the operating system s executed by processing units . Processing units may in some cases comprise a heterogeneous collection of one or more different types of processing units.

In some examples when platform independent instructions comprise LLVM bitcode hardware backend modules comprise one or more LLVM backend modules and native object files A comprise native LLVM machine code. Additionally native runtime libraries may comprise LLVM libraries that are linked in with the LLVM machine code to generate native executable A.

In some cases processing units may include one or more specialized processing units e.g. graphics processing units and or field programmable gate arrays . In these cases the format of platform independent instructions is not specific to the one or more specialized processing units while the format of platform dependent instructions of executable A is specific to the one or more specialized processing units. In various examples the computing systems included in cloud computing platform may comprise a heterogeneous group of computing systems that includes at least two different types of processing units e.g. graphics processing units and field programmable gate arrays amongst the different computing systems.

The conversion of platform independent instructions into platform dependent instructions A can in some cases take place in advance e.g. long before processing the request to perform the task or on demand e.g. immediately or shortly before performing the task . Furthermore platform dependent instructions A can be cached by computing system for later use. In addition in some cases the conversion operations may be performed by any computing system in cloud computing platform not just a selected computing system e.g. computing system . As one non limiting example if cloud computing platform includes N different kinds of computing systems and or processing unit architectures the computing systems of cloud computing platform may automatically generate and then store the N different sets of platform dependent instructions e.g. platform dependent instructions A N from platform independent instructions for a given software package e.g. package A so that when a user requests execution of the package cloud computing platform may select the correct ones of the pre generated platform dependent instructions based on the corresponding computing system and or processing unit s that are determined for execution of these instructions.

As an alternative to the example implementation shown in shows an example of computing system in which platform independent instructions can be run in computing unit e.g. an emulator interpreter or virtual machine . One example of computing unit may be an LLVM interpreter. Computing unit may perform just in time compilation to convert platform independent instructions into native platform dependent instructions A.

Alternately platform independent instructions could be translated into a sequence of non native instructions A that can then be run in computing unit . For example platform independent instructions could be translated into non native instructions A comprising Java bytecode and computing unit comprising a Java Virtual Machine could then execute the Java bytecode and use just in time compilation to generate platform dependent instructions A.

In some examples rather than producing an independent native executable e.g. executable A shown in computing system of may produce a native code module comprising platform dependent instructions A which in some instances may be loaded and executed by a support application . In these instances some of the support libraries that would have been linked into executable A shown in e.g. native runtime libraries may instead reside as part of support application e.g. a sandbox process . In certain cases platform independent instructions or non native instructions A such as Java bytecode may actually be directly executable on certain types of processing units .

As a result according to various examples the LAVA architecture described with reference to B provides an efficient platform for deploying cloud applications while preserving the application isolation features of traditional cloud systems and shrinking the attack surface. In these examples the LAVA architecture operates by combining OSLV technologies with portable cross platform packages and flexible secure inter process communication between packages both within and across cloud computing systems. Process level virtualization and inter process communications that are customized to each computing system in cloud computing platform and respective host operating system for each system may enable strong security with reduced attack surface compared with conventional virtual machine based clouds. Each of these computing systems is configured to run optimized native code for high performance and also to provide runtime flexibility while performing just in time compilation from architecture independent packages as illustrated in . Using the techniques described herein a developer e.g. application developer can create or adapt existing secure cloud based applications that may be automatically tailored for efficient operation within cloud computing platform letting the developer be more productive by focusing on domain specific issues rather than on details of operating system configuration management and updates. Further the techniques described herein may help increase the long term efficiency of deploying applications potentially lessening both hardware and management costs.

Thus in one example such as that illustrated in a single computing system such as computing system can host any or all of the controller access and compute functions. In this example computing system includes a controller node an access node and a compute node . Controller node communicates with each of access node and compute node via one or more control networks and access node communicates with compute node via one or more data networks as indicated in the figure.

In various examples controller node may be responsible for tracking cloud resources monitoring resource usage allocating resources to particular tasks and determining how to implement a particular user request given the available resources in cloud computing platform . For example if a user requests a collection of twenty containers on a single private network all running a respective package associated with an application foo controller node might do one or more of the following 1 determine which compute nodes e.g. compute node in compute notes in compute nodes in in cloud computing platform to use and how many containers to put on each compute node 2 reserve the appropriate number of containers on each compute node 3 instruct participating compute nodes to construct the network interfaces bridges tunnels or the like to implement the private network 4 wait for all participating compute nodes to finish implementing the network 5 ensure that each participating compute node has a copy of the foo executable and any associated packages 6 instruct the compute nodes to instantiate the containers and launch foo and or 7 report that the request was fulfilled. Controller node may also be logically responsible for administrative functions and other centralized cloud services such as user authentication and storage management. In one or more examples controller node may implement one or more features of deployment modules runtime modules networking modules and or management tools shown in .

A compute node such as compute node shown in compute nodes shown in or compute nodes shown in may run a computing service that is responsible for actually executing LAVA packages and managing the host resources used by LAVA. This may include creating and or managing network components e.g. virtual interfaces bridges tunnels creating and managing containers caching packages managing data storage e.g. local shared ephemeral monitoring system wide and per container resource consumption and or load and or implementing resource limits on containers. The compute service operates by communicating with controller node. In one or more examples a compute node may implement one or more features of deployment modules runtime modules networking modules and or management tools shown in .

An access node such as access node shown in access node shown in or access nodes shown in is any node that is part of cloud computing platform that runs a network access service. The network access service is responsible for providing external network connectivity for LAVA applications and users. This service may have two related components. First the network access service provides external network connectivity to applications that request it e.g. connecting to the Internet . The network access service may also be responsible for creating managing and or monitoring the virtual network components used to implement external access. Second the network access service provides an API endpoint to LAVA users. That is a user can connect to any access node and issue requests. These requests can then be forwarded to controller node . An access node may in various examples provide access to one or more of deployment modules runtime modules networking modules and or management tools .

As noted above in computing system includes controller node access node and compute node . However various other configurations of computing systems in cloud computing platform may also be utilized such as those shown in . In computing system includes controller node and an access node . Computing system includes a compute node and another computing system of cloud computing platform includes a compute node . Controller node communicates with access node compute node and compute node via one or more control networks. Access node communicates with compute node and compute node via one or more data networks. In a single node namely access node may comprise the access point to cloud computing platform . When a user issues a request via access node that request is sent to controller node . Controller node is able to communicate with one or more of compute nodes via the one or more control networks to satisfy the user request. If the launched application performs any input output operations with the user or connects to an external network the container for the package associated with the application is appropriately configured to communicate with access node over the one or more internal data networks.

In the example of in addition to access nodes and every compute node and as well as controller node may serve as access point to cloud computing platform . In this case a user might issue a request to controller node . Controller node may suggest a redirect to the compute node on which the container will be run e.g. compute node or . User input output and external network access can then use that compute node which may provide lower latency higher bandwidth and less load on any one access node and or .

As shown in the example of computing system includes one or more processing units one or more input devices one or more communication units one or more output devices and one or more storage devices . Communication channels may interconnect each of the components and for inter component communications physically communicatively and or operatively . In some examples communication channels may include a system bus a network connection an inter process communication data structure or any other method for communicating data between hardware and or software.

One or more input devices of computing system may receive input. Examples of input are tactile audio and video input. Examples of input devices include a presence sensitive screen touch sensitive screen mouse keyboard voice responsive system video camera microphone or any other type of device for detecting input from a human or machine.

One or more output devices of computing system may generate output. Examples of output are tactile audio and video output. Examples of output devices include a presence sensitive screen sound card video graphics adapter card speaker cathode ray tube CRT monitor liquid crystal display LCD or any other type of device for generating output to a human or machine. Output devices may include display devices such as cathode ray tube CRT monitor liquid crystal display LCD or any other type of device for generating tactile audio and or visual output.

One or more communication units of computing system may communicate with one or more other computing systems or devices via one or more networks by transmitting and or receiving network signals on the one or more networks. Examples of communication unit include a network interface card e.g. such as an Ethernet card an optical transceiver a radio frequency transceiver or any other type of device that can send and or receive information such as through a wired or wireless network. Other examples of communication units may include short wave radios cellular data radios wireless Ethernet network radios as well as universal serial bus USB controllers. Communication units may provide wired and or wireless communication.

One or more storage devices within computing system may store information for processing during operation of computing system e.g. computing system may store data accessed by one or more modules processes applications or the like during execution at computing system . In some examples storage devices on computing system may be configured for short term storage of information as volatile memory and therefore not retain stored contents if powered off. Examples of volatile memories include random access memories RAM dynamic random access memories DRAM static random access memories SRAM and other forms of volatile memories known in the art.

Storage devices in some examples also include one or more computer readable storage media. Storage devices may be configured to store larger amounts of information than volatile memory. Storage devices may further be configured for long term storage of information as non volatile memory space and retain information after power on off cycles. Examples of non volatile memories include magnetic hard discs optical discs floppy discs flash memories or forms of electrically programmable memories EPROM or electrically erasable and programmable EEPROM memories. Storage devices may store program instructions and or data associated with one or more software firmware elements or modules.

For example when computing system comprises an example of development computing system shown in storage devices may store application source code and packages . In addition storage devices may store instructions and or data associated with system independent headers object files system independent libraries metadata platform independent instructions and compiler shown in .

In other examples when computing system comprises an example of a computing system included in cloud computing platform e.g. computing system storage devices may store instructions and or data associated with deployment modules runtime modules networking modules and management modules shown in . Storage devices may also store instructions and or data associated with package A platform independent instructions native object files A native runtime libraries native executable platform dependent instructions A and hardware backend modules shown in .

Storage devices also stores instructions and or data associated with an operating system which may be used by computing system during operation. As described herein cloud computing platform may include any number of different computing systems and these computing systems may utilize one or more different operating systems e.g. FreeBSD Linux .

Computing system further includes one or more processing units that may implement functionality and or execute instructions within computing system . For example processing units may receive and execute instructions stored by storage devices that execute the functionality of the elements and or modules described herein. These instructions executed by processing units may cause computing system to store information within storage devices during program execution. Processing units may also execute instructions of the operating system to perform one or more operations described herein. In those examples in which computing system comprises a computing system of cloud computing platform processing units may comprise an example of processing units shown in .

As illustrated in in a cloud computing platform e.g. cloud computing platform comprising one or more computing systems the process may include identifying a software package e.g. package A shown in B that is associated with a software application . The software package includes platform independent instructions e.g. platform independent instructions that are configured to perform at least one computational task upon execution where the platform independent instructions have a format that is not specific to any particular hardware platform provided by the one or more computing systems.

The process illustrated in further includes selecting from the one or more computing systems a computing system e.g. computing system to perform the at least one computational task and providing by the selected computing system a container e.g. container or in which to perform the at least one computational task . The process further includes obtaining by the selected computing system platform dependent instructions e.g. platform dependent instructions A shown in B that have been converted from the platform independent instructions . The platform dependent instructions have a format that is specific to a hardware platform provided by the selected computing system e.g. computing system and processing units included in computing system . The process may further include executing by the selected computing system e.g. by processing units and in the container the platform dependent instructions to perform the at least one computational task . Obtaining the platform dependent instructions may include compiling by the selected computing system the platform independent instructions to generate the platform dependent instructions.

In some cases selecting the computing system to perform the at least one computational task comprises selecting the computing system e.g. by deployment modules based on one or more resources of the hardware platform provided by the computing system. For example the selecting may be based on which processing units or types of processing units are provided on a given computing system the operating system s that are used on the given system the current available memory and or processing bandwidth utilized or available on the given system current network load and or other resources associated with the system.

As previously described in some cases the selected computing system includes one or more specialized processing units. For example processing units illustrated in B may comprise one or more specialized processing units e.g. graphics processing units and or field programmable gate arrays . The format of the platform independent instructions is not specific to the one or more specialized processing units while the format of platform dependent instructions is specific to the one or more specialized processing units. In these cases executing the platform dependent instructions to perform the at least one computational task includes executing by the one or more specialized processing units the platform dependent instructions. The platform independent instructions may comprise Low Level Virtual Machine LLVM bitcode and converting the platform independent instructions into the platform dependent instructions may comprise compiling e.g. by hardware backend modules shown in the LLVM bitcode into the platform dependent instructions that are executable by the selected computing system.

In some examples the container comprises an operating system level virtualization OSLV container and providing the container in which to perform the at least one computational task comprises one of the following creating the container or selecting the container from a group of pre created containers provided by the selected computing system. In some cases the process of further includes configuring the container prior to executing the platform dependent of instructions. Configuring the container may include applying one or more security controls to the container where the security controls are configured to restrict access of the container to only a group of resources of the platform e.g. hardware platform provided by the selected computing system.

In some examples the software package comprises a first software package that is associated with a first software application the at least one computational task comprises at least one first computational task the selected computing system comprises a first selected computing system the platform independent instructions comprise a first group of platform independent instructions the platform dependent instructions comprise a first group of platform dependent instructions and the container comprises a first container. The example process of may further include identifying a second software package that is associated with a second software application the second software package including a second group of platform independent instructions that are configured to perform at least one second computational task upon execution where the second group of platform independent instructions have a format that is not specific to any particular hardware platform provided by the one or more computing systems.

In these examples the example process further includes selecting from the one or more computing systems a second computing system to perform the at least one second computational task and providing by the second selected computing system a second container in which to perform the at least one second computational task obtaining by the second selected computing system a second group of platform dependent instructions that have been converted from the second group of platform independent instructions wherein the second group of platform dependent instructions have a format that is specific to a hardware platform provided by the second selected computing system and executing by the second selected computing system and in the second container the second group of platform dependent instructions to perform the at least one second computational task.

In certain cases the first software application and the second software application comprise the same software application. In certain cases the first selected computing system and the second selected computing system comprise the same computing system. Executing the first group of platform dependent instructions in the first container and executing the second group of platform dependent instructions in the second container can occur during execution of a single instance of an operating system e.g. single instance of an operating system running on computing system . The example process may further include providing a secure communication mechanism between the first container and the second container where providing the secure communication mechanism includes applying one or more security restrictions to at least one data flow between the first container and the second container.

In other cases the first selected computing system e.g. computing system is different from the second selected computing system e.g. computing system . In these cases providing the secure communication mechanism includes providing one or more tunnels e.g. tunnels shown in between the first container and the second container.

In various examples the techniques of the present disclosure may provide higher performance and lower overhead in the implementation of cloud computing platform while maintaining the security and isolation of full or hardware virtualization. LAVA s portable executable packages enable a developer to create compile one run anywhere software that runs automatically on heterogeneous computing systems included in cloud computing platform regardless of the hardware and operating systems provided on such computing systems. In such fashion the techniques of the present disclosure may enable computational applications to more efficiently use computing hardware while gaining the benefits of cloud computing in cloud computing platform including scalability and elasticity.

For example the techniques of the present disclosure may provide scalability resource sharing and isolation of processes or applications in cloud computing platform without necessarily utilizing separate operating system instances on any given computing system included in cloud computing platform . Cloud computing platform enables users to run platform independent packages inside isolated OSLV containers e.g. package A of inside container package B inside container package C inside container package D inside container .

In various cases the present techniques apply strong operating system independent process isolation by using OSLV technologies to provide these configurable secure containers whose properties are independent of the underling operating system and OSLV technology. In many cases cloud computing platform uses LLVM bitcode and a platform independent runtime API so that developers e.g. application developer can create and deploy platform independent packages. However cloud computing platform is able to take advantage of specialized hardware or software capabilities of individual cloud computing systems e.g. computing systems and or for improved efficiency. These computing systems are capable of compiling platform independent instructions into platform dependent instructions at run time which allows the same package to be optimized for a wide variety of different platforms including those that use e.g. graphics processing units.

As described previously cloud computing platform is capable of controlling and or measuring resource usage per computing system included in cloud computing platform such as by using underlying capabilities e.g. OSLV capabilities to enable users and system administrators to control and or measure resource usage by packages. Cloud computing platform may in some cases achieve such control and or measurement through the selection of which computing systems execute which packages at deployment e.g. by deployment modules . Cloud computing platform may also restrict resource access by one or more packages according to deployment policies as described previously. In such fashion cloud computing platform gives users detailed operating system independent control over the system resources that can be used by packages.

In addition cloud computing platform may provide flexible secure communication between packages. For example networking modules may provide secure communication channels between package instances whether or not the packages are contained in the same computer system of cloud computing platform or are contained in different systems. Network security controls are configurable by the user and transparent to running packages.

In one or more examples the functions described may be implemented in hardware software firmware or any combination thereof. If implemented in software the functions may be stored on or transmitted over as one or more instructions or code a computer readable medium and executed by a hardware based processing unit. Computer readable media may include computer readable storage media which corresponds to a tangible medium such as data storage media or communication media including any medium that facilitates transfer of a computer program from one place to another e.g. according to a communication protocol. In this manner computer readable media generally may correspond to 1 tangible computer readable storage media which is non transitory or 2 a communication medium such as a signal or carrier wave. Data storage media may be any available media that can be accessed by one or more computers or one or more processing units e.g. processors to retrieve instructions code and or data structures for implementation of the techniques described in this disclosure. A computer program product may include a computer readable medium.

By way of example and not limitation such computer readable storage media can comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices flash memory or any other storage medium that can be used to store desired program code in the form of instructions or data structures and that can be accessed by a computer. Also any connection is properly termed a computer readable medium. For example if instructions are transmitted from a website server or other remote source using a coaxial cable fiber optic cable twisted pair digital subscriber line DSL or wireless technologies such as infrared radio and microwave then the coaxial cable fiber optic cable twisted pair DSL or wireless technologies such as infrared radio and microwave are included in the definition of medium. It should be understood however that computer readable storage media and data storage media do not include connections carrier waves signals or other transient media but are instead directed to non transient tangible storage media. Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and Blu ray disc where disks usually reproduce data magnetically while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer readable media.

Instructions may be executed by one or more processing units e.g. processors such as one or more digital signal processors DSPs general purpose microprocessors application specific integrated circuits ASICs field programmable logic arrays FPGAs or other equivalent integrated or discrete logic circuitry. Accordingly the term processing unit or processor as used herein may refer to any of the foregoing structure or any other structure suitable for implementation of the techniques described herein. In addition in some aspects the functionality described herein may be provided within dedicated hardware and or software modules. Also the techniques could be fully implemented in one or more circuits or logic elements.

The techniques of this disclosure may be implemented in a wide variety of devices or apparatuses including a wireless handset an integrated circuit IC or a set of ICs e.g. a chip set . Various components modules or units are described in this disclosure to emphasize functional aspects of devices configured to perform the disclosed techniques but do not necessarily require realization by different hardware units. Rather as described above various units may be combined in a hardware unit or provided by a collection of interoperative hardware units including one or more processing units as described above in conjunction with suitable software and or firmware.

It is to be recognized that depending on the embodiment certain acts or events of any of the methods described herein can be performed in a different sequence may be added merged or left out altogether e.g. not all described acts or events are necessary for the practice of the method . Moreover in certain embodiments acts or events may be performed concurrently e.g. through multi threaded processing interrupt processing or multiple processing units rather than sequentially.

In some examples a computer readable storage medium comprises a non transitory medium. The term non transitory indicates that the storage medium is not embodied in a carrier wave or a propagated signal. In certain examples a non transitory storage medium may store data that can over time change e.g. in RAM or cache .

Various examples have been described. These and other examples are within the scope of the following claims.

