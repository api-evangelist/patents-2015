---

title: Data extraction and generation tool
abstract: An item to be processed is received and scanned. The scan identifies any functions or procedures in the item being processed, and extracts actual code representing those functions or procedures. Any invoking functions, which invoke the identified function, are, themselves, identified. Actual code for the invoking function is extracted as well. An output documentation file is generated that includes a name of the identified function or procedure, as well as actual code for the function or procedure, and actual code from at least one example of an invoking function.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09575751&OS=09575751&RS=09575751
owner: Microsoft Technology Licensing, LLC
number: 09575751
owner_city: Redmond
owner_country: US
publication_date: 20150623
---
Computing systems are currently in wide use. Some such computing systems are relatively large systems that include many hundreds or thousands of objects each of which can include a set of functions. Such systems can also include hundreds or thousands of different forms each having many different controls or control states.

Some of these types of systems generally provide a platform upon which a developer develops source code. The source code unlocks the capabilities and functionality of the platform and is stored as a solution in a data store for use by end users. Thus the various items in such a solution may be accessed by multiple different people. They may be accessed by the developer that developed the solution or a different developer who wishes to understand how the solution works so that modifications or customizations can be made. They may also be accessed by end users who may wish to obtain help in determining how to use the solutions. Further they may be accessed by test engineers in order to determine whether the entire solution is being adequately tested.

Such computing systems are often heavily customized For instance a base computing system may be developed or generated by a software manufacturer. The base computing system may be customized by a value added reseller or independent software vendor to generate a customized version. That customized version may be further customized at an end user organization in order to meet the specific needs of the customization. In such an environment it is difficult to keep help files and other documentation in general up to date so that they can be accessed in a meaningful way.

The discussion above is merely provided for general background information and is not intended to be used as an aid in determining the scope of the claimed subject matter.

An item to be processed is received and scanned. The scan identifies any functions or procedures in the item being processed and extracts actual code representing those functions or procedures. Any invoking functions which invoke the identified function are themselves identified. Actual code for the invoking function is extracted as well. An output documentation file is generated that includes a name of the identified function or procedure as well as actual code for the function or procedure and actual code from at least one example of an invoking function.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. The claimed subject matter is not limited to implementations that solve any or all disadvantages noted in the background.

Computing system itself illustratively includes servers or processors user interface component data store development platform functionality data extraction generation and search system which produces output documentation files and it can include other items . Data store can include source code logic components application objects processes workflows entities documentation files an index and it can include a wide variety of other information . Development platform functionality illustratively exposes functionality of the computing system so that it can be configured or otherwise developed by developer through developer system . The developer illustratively builds source code logic components application objects etc. to generate a solution.

Users illustratively use the solution generated by developer such as through client system . Client system can include one or more processors user interface components data store user interface displays that may include user input mechanisms and it can include other items . Users illustratively interact with user input mechanisms in order to control and manipulate the solution provided by computing system and that was developed by developer .

The solution implemented by computing system is thus built on top of the platform functionality that developer uses to code or otherwise configure the system for use by users . In generating the solution there may be multiple different levels of developers involved as well. Each different level of development may include its own customizations to a base computing system in order to arrive at the final solution that is deployed at an end user organization and used by the end users.

It can thus be difficult to gain a full understanding of the eventual items that comprise the solution that is either being developed or used. For instance it may be difficult to even identify all of the items of source code logic components application objects processes workflows entities etc. It can also be difficult to know the various functions or procedures that are employed what they do and how they are used e.g. how they are invoked by other functions or procedures in the system .

Data extraction generation and search system thus extracts information from the various items that make up the solution and generates output documentation files that can be consumed by a variety of different consumers. They can be consumed by end users by developer or other developers who are examining the code by various managers test engineers etc. System generates the output documentation files automatically. By automatically it is meant that system generates the output files with no substantial input from a human being other than perhaps to initiate the process or authorize the process.

Before describing the operation of system in more detail a brief overview will first be provided. Parsing component illustratively parses the item to be processed into its individual pieces. Function procedure identifier and extraction component then identifies any functions or procedures in the item and extracts the actual code of the identified functions or procedures. Invoking function identifier and extraction component performs a cross reference analysis to identify any other functions or procedures that call the functions or procedures identified by component in the current item being processed . In the event that no other functions or procedures call the present function then unused function identifier identifies the present function as being not used. It can also identify the function as being not heavily used if the number of invoking functions or procedures is below a threshold value for instance. Assuming that there is an invoking function then the actual code for at least one invoking function or procedure is extracted by extractor .

The syntax of the function or procedure being processed is identified by identifier and the parameters are identified by identifier .

Metric calculation component can also calculate a wide variety of different metrics for the item being processed. Some of these are discussed in greater detail below.

Output file generator then uses XML generator to generate an XML representation of the item being processed and HTML generator generates an HTML representation from the XML representation. It will be noted that instead of XML and HTML other outputs could be generated instead or in addition. These are examples only. Compression component can be used to compress a set of HTML representations into a single document. Tokenizer and indexing component tokenizes the file and indexes it in index . At that point the output documentation file is also stored in data store and it can be accessed for a variety of different reasons.

For instance it can be accessed by search system . Search system may receive a search query or search input from a user or developer and execute the search against index to identify documentation files that are relevant to the search. Explorer component illustratively generates a visualization of the documentation files so that they can be reviewed or otherwise explored by a user or a developer. Test gap analyzer can analyze the contents of the file to determine whether any functions or procedures represented in the file have adequate test APIs generated for them and a wide variety of other analyses can be performed as well.

Parsing component then parses the received item into its relevant parts. This is indicated by block . Function procedure identifier and extraction component illustratively scans the item to identify any functions or procedures in it. This is indicated by block . It then extracts actual code implemented by the function or procedure. This is indicated by block .

Invoking function identifier component and extraction component then scans the other code or performs a cross reference analysis in another way to identify any invoking functions those functions or procedures which call the identified function . This is indicated by block . If there are no other functions or procedures that call the identified function or if there are a relatively low number of them then unused function identifier can mark the function as being unused or lightly used . This is indicated by block . Identifying the invoking functions can be performed in other ways as well as indicated by block .

Assuming at block that there is at least one invoking function identified then component extracts the actual code for at least one of the invoking functions that were identified. This is indicated by block . This can be done in a wide variety of different ways. For instance extractor may identify which function or procedure invokes the present function or procedure most often during runtime. It may extract the code from that function or procedure as the example of an invoking function. It may also identify which function or procedure has most recently invoked the present function or procedure and extract code from that as an example. It can extract code from an example invoking function in other ways as well.

Syntax identifier then identifies the syntax of the function or procedure as indicated by block . Parameter identifier identifies the parameters the inputs and or outputs for the function or procedure as indicated by block . System then generates any other information that may be desired for an output documentation file. This is indicated by block .

By way of example metric calculation component can calculate a set of metrics for the item being analyzed. Some examples of different metrics that may be calculated include statistics about the rate of usage of the item being analyzed the impacted feature areas that are impacted by the item being analyzed a measure of time spent on generating the documentation for the current item being analyzed the number of lines of code in the item being analyzed whether the item is obsolete or whether its functions are non referenced functions etc.

Test gap analyzer can also identify whether there are any test gaps with respect to the item being analyzed. This is indicated by block . For instance it may be determined whether sufficient test APIs have been generated to test all the various functionality of the item being analyzed. If not it can identify the un tested areas as corresponding to a test gap. The other information generated for the output documentation file can be generated in a wide variety of other ways as well.

Once the information has been extracted or generated output file generator illustratively generates an output documentation file. This is indicated by block . As shown in the output documentation file can include a name a syntax identifier a parameter identifier a remarks section that shows the actual code of the function or procedure being processed as indicated by block an example section that includes an actual code example of an invoking function as indicated by block the various metrics that are calculated as indicated by block or a wide variety of other things .

Tokenizer and indexing component then breaks the file into its tokens such as words word strings or other tokens and indexes the file in index . This is indicated by block in . The documentation file is then stored in data store for later access. This is indicated by block . It can be exposed as a web service so that various people or organizations can access the documentation file. This is indicated by block . It can also be accessed by search system by explorer or in other ways as indicated by block .

Based on this information XML generator generates an XML representation of that information. This is indicated by block . HTML generator then generates an HTML representation from the XML representation. This is indicated by block . As mentioned above XML and HTML are examples only. Compression component can then compress a set of HTML files to generate help documentation for the associated computing system or application. This is indicated by block .

It will be noted that because the actual code sections and contain actual code from the computing system e.g. the application or solution that is being analyzed these code sections can be highly useful. Instead of having a fictional example of code that might be written the actual code can make reuse of functions or other items within the application or solution very easy. This not only enhances the efficiency of the developer or user but it can also enhance the efficiency of the development system.

It can be seen in pane that the user has highlighted the Create Customer procedure at node . Thus pane now shows the same detail from the documentation file generated for the Create Customer procedure as was shown in . However it can now be seen that all instances of the search terms e.g. Create Customer that were entered by the user are highlighted in pane as well. This gives the user an indication as to why this particular file was returned as a search result.

It can thus be seen that system generates documentation files that are easily searchable while working on development or during test automation. Also it generates documentation that can be released to help partners or other developers or users easily adopt and understand and thus be capable of reusing and extending the applications or other solutions deployed in computing system . The documentation files can be updated or generated automatically when a developer saves a new development to data store or when it is compiled . Therefore the documentation is up to date and automatically refreshable. As is described in greater detail below it can also be exposed through a cloud based interface as a service or otherwise.

The present discussion has mentioned processors and servers. In one example the processors and servers include computer processors with associated memory and timing circuitry not separately shown. They are functional parts of the systems or devices to which they belong and are activated by and facilitate the functionality of the other components or items in those systems.

Also a number of user interface displays have been discussed. They can take a wide variety of different forms and can have a wide variety of different user actuatable input mechanisms disposed thereon. For instance the user actuatable input mechanisms can be text boxes check boxes icons links drop down menus search boxes etc. They can also be actuated in a wide variety of different ways. For instance they can be actuated using a point and click device such as a track ball or mouse . They can be actuated using hardware buttons switches a joystick or keyboard thumb switches or thumb pads etc. They can also be actuated using a virtual keyboard or other virtual actuators. In addition where the screen on which they are displayed is a touch sensitive screen they can be actuated using touch gestures. Also where the device that displays them has speech recognition components they can be actuated using speech commands.

A number of data stores have also been discussed. It will be noted they can each be broken into multiple data stores. All can be local to the systems accessing them all can be remote or some can be local while others are remote. All of these configurations are contemplated herein.

Also the figures show a number of blocks with functionality ascribed to each block. It will be noted that fewer blocks can be used so the functionality is performed by fewer components. Also more blocks can be used with the functionality distributed among more components.

The description is intended to include both public cloud computing and private cloud computing. Cloud computing both public and private provides substantially seamless pooling of resources as well as a reduced need to manage and configure underlying hardware infrastructure.

A public cloud is managed by a vendor and typically supports multiple consumers using the same infrastructure. Also a public cloud as opposed to a private cloud can free up the end users from managing the hardware. A private cloud may be managed by the organization itself and the infrastructure is typically not shared with other organizations. The organization still maintains the hardware to some extent such as installations and repairs etc.

In the example shown in some items are similar to those shown in and they are similarly numbered. specifically shows that computing system can be located in cloud which can be public private or a combination where portions are public while others are private . Therefore user uses a client device and developer uses a developer device to access those systems through cloud .

It will also be noted that architectures or or portions of them can be disposed on a wide variety of different devices. Some of those devices include servers desktop computers laptop computers tablet computers or other mobile devices such as palm top computers cell phones smart phones multimedia players personal digital assistants etc.

In other examples applications or systems are received on a removable Secure Digital SD card that is connected to a SD card interface . SD card interface and communication links communicate with a processor which can also embody processors or servers from or other processors or servers in systems or along a bus that is also connected to memory and input output I O components as well as clock and location system .

I O components in one embodiment are provided to facilitate input and output operations. I O components for various embodiments of the device can include input components such as buttons touch sensors multi touch sensors optical or video sensors voice sensors touch screens proximity sensors microphones tilt sensors and gravity switches and output components such as a display device a speaker and or a printer port. Other I O components can be used as well.

Clock illustratively comprises a real time clock component that outputs a time and date. It can also illustratively provide timing functions for processor .

Location system illustratively includes a component that outputs a current geographical location of device . This can include for instance a global positioning system GPS receiver a LORAN system a dead reckoning system a cellular triangulation system or other positioning system. It can also include for example mapping software or navigation software that generates desired maps navigation routes and other geographic functions.

Memory stores operating system network settings applications application configuration settings data store communication drivers and communication configuration settings . Memory can include all types of tangible volatile and non volatile computer readable memory devices. It can also include computer storage media described below . Memory stores computer readable instructions that when executed by processor cause the processor to perform computer implemented steps or functions according to the instructions. Similarly device can have a client system which can run various business applications or embody parts or all of architecture . Processor can be activated by other components to facilitate their functionality as well.

Examples of the network settings include things such as proxy information Internet connection information and mappings. Application configuration settings include settings that tailor the application for a specific enterprise or user. Communication configuration settings provide parameters for communicating with other computers and include items such as GPRS parameters SMS parameters connection user names and passwords.

Applications can be applications that have previously been stored on the device or applications that are installed during use although these can be part of operating system or hosted external to device as well.

Additional examples of devices can be used as well. Device can be a feature phone smart phone or mobile phone. The phone can include a set of keypads for dialing phone numbers a display capable of displaying images including application images icons web pages photographs and video and control buttons for selecting items shown on the display. The phone can include an antenna for receiving cellular phone signals such as General Packet Radio Service GPRS and 1Xrtt and Short Message Service SMS signals. In some examples the phone also includes a Secure Digital SD card slot that accepts a SD card.

The mobile device can also be a personal digital assistant or a multimedia player or a tablet computing device etc. hereinafter referred to as a PDA . The PDA can include an inductive screen that senses the position of a stylus or other pointers such as a user s finger when the stylus is positioned over the screen. This allows the user to select highlight and move items on the screen as well as draw and write. The PDA can also include a number of user input keys or buttons which allow the user to scroll through menu options or other display options which are displayed on the display and allow the user to change applications or select user input functions without contacting the display. The PDA can also include an internal antenna and an infrared transmitter receiver that allow for wireless communication with other computers as well as connection ports that allow for hardware connections to other computing devices. Such hardware connections are typically made through a cradle that connects to the other computer through a serial or USB port. As such these connections are non network connections.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media is different from and does not include a modulated data signal or carrier wave. It includes hardware storage media including both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

Alternatively or in addition the functionality described herein can be performed at least in part by one or more hardware logic components. For example and without limitation illustrative types of hardware logic components that can be used include Field programmable Gate Arrays FPGAs Program specific Integrated Circuits ASICs Program specific Standard Products ASSPs System on a chip systems SOCs Complex Programmable Logic Devices CPLDs etc.

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into the computer through input devices such as a keyboard a microphone and a pointing device such as a mouse trackball or touch pad. Other input devices not shown may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A visual display or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer is operated in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a hand held device a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

It should also be noted that the different embodiments described herein can be combined in different ways. That is parts of one or more embodiments can be combined with parts of one or more other embodiments. All of this is contemplated herein.

a function identifier and extraction component that receives an item to be processed and identifies a function in the item to be processed and code that implements the identified function and that extracts the identified code and

a file generator that generates a file indicative of the identified function and that adds the extracted code to the file.

Example 2 is the computing system of any or all previous examples wherein the file generator comprises 

an XML generator component that generates the file indicative of the identified function as an XML file.

an invoking function identifier and extraction component that identifies as an invoking function a separate function that invokes the identified function and extracts code that implements the invoking function.

Example 4 is the computing system of any or all previous examples wherein the file generator generates the file by including an example section the example section indicating the invoking function is a usage example for the identified function and including in the example section the code that implements the invoking function.

Example 5 is the computing system of any or all previous examples wherein the file generator comprises 

Example 6 is the computing system of any or all previous examples wherein the HTML generator generates a set of HTML representations from a set of XML files for a set of functions identified by the function identifier and extraction component in a solution and wherein the file generator further comprises 

a compression component that compresses the set of HTML files as a set of documentation files for the solution.

an unused function identifier that determines whether the identified function has a usage level that is below a threshold level and if so indicates that the identified function has a low usage level.

a test gap analyzer that accesses test application programming interfaces test APIs for the item being processed the test APIs being invoked to test features of the item being processed the test gap analyzer determining whether the identified function has a corresponding test API and if not identifying a test gap corresponding to the identified function.

a syntax identifier that identifies a syntax for the identified function the file generator including a syntax indicator indicative of the identified syntax in the file.

a parameter identifier that identifies a set of parameters for the identified function the file generator including a set of parameter indicators indicative of the set of parameters in the file.

a metric calculation component that calculates a set of metrics for the identified function and the file generator including a set of metric indicators indicative of the set of metrics in the file.

a tokenizer and indexer component that tokenizes the file and indexes the file in an index searchable by a search system.

Example 14 is the computing system of any or all previous examples wherein the item to be processed comprises at least one of a source code file a table and a page.

identifying as an invoking function a separate function in the solution that invokes the identified function 

generating a file indicative of the identified function the file including a descriptive section that describes the identified function and that includes the code that implements the identified function and an example section that includes the code that implements the invoking function.

Example 16 is the computer implemented method of any or all previous examples wherein generating a file comprises 

Example 17 is the computer implemented method of any or all previous examples wherein generating the HTML file includes generating a set of HTML representations from a set of XML files for a set of functions identified in a solution and wherein generating the file further comprises 

Example 18 is the computer implemented method of any or all previous examples and further comprising 

Example 19 is the computer implemented method of any or all previous examples and further comprising 

accessing test application programming interfaces test APIs for the item being processed the test APIs being invoked to test features of the item being processed 

a function identifier and extraction component that receives an item to be processed and identifies a function in the item to be processed and code that implements the identified function and that extracts the identified code 

an invoking function identifier and extraction component that identifies as an invoking function a separate function that invokes the identified function and extracts code that implements the invoking function 

an unused function identifier that determines whether the identified function has a usage level that is below a threshold level and if so indicates that the identified function has a low usage level 

a test gap analyzer that accesses test application programming interfaces test APIs for the item being processed the test APIs being invoked to test features of the item being processed the test gap analyzer determining whether the identified function has a corresponding test API and if not identifying a test gap corresponding to the identified function and

a file generator that generates an XML file indicative of the identified function and that adds the extracted code to the file the file by including an example section the example section indicating the invoking function is a usage example for the identified function and including in the example section the code that implements the invoking function.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

