---

title: Automated service interface optimization
abstract: Disclosed are various embodiments for automated service interface optimization. In one embodiment, a service client and/or a service provider is reconfigured to use an optimized version of a data transfer interface, where the optimized version transfers fewer data items from the service provider to the service client. In another embodiment, service calls from a service client for multiple different data objects are aggregated into an aggregated service call for a data object. In yet another embodiment, an optimized data object is provided to a service client in response to a request for an unoptimized data object. If the service client attempts to use a data item excluded from the optimized data object, the excluded data item is then provided to the service client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09419899&OS=09419899&RS=09419899
owner: Amazon Technologies, Inc.
number: 09419899
owner_city: Seattle
owner_country: US
publication_date: 20150515
---
This application is a continuation of and claims priority to U.S. Patent Application entitled AUTOMATED SERVICE INTERFACE OPTIMIZATION filed on Sep. 8 2014 and assigned application Ser. No. 14 479 759 which issued May 19 2015 as U.S. Pat. No. 9 038 094 which is a continuation of and claims priority to U.S. Patent Application entitled AUTOMATED SERVICE INTERFACE OPTIMIZATION filed on Aug. 5 2013 and assigned application Ser. No. 13 959 340 which issued Sep. 9 2014 as U.S. Pat. No. 8 832 714 which is a continuation of and claims priority to co pending U.S. Patent Application entitled AUTOMATED SERVICE INTERFACE OPTIMIZATION filed on Dec. 17 2009 and assigned application Ser. No. 12 640 321 which issued Aug. 6 2013 as U.S. Pat. No. 8 505 034 all of which are incorporated herein by reference in their entirety.

In the context of a service oriented architecture a service provides software functionality in such a way that disparate systems are interoperable. The software functionality provided by a service often encompasses business logic. For each service there will be at least one service provider and any number of service clients configured to communicate with the service provider s .

The service provider is associated with an application programming interface API which defines how the service may be accessed for example through method or procedure calls. The service clients are configured to make service API calls which are sent to the service provider. The service provider is configured to provide data to the service client in response to a service API call often in the form of a data object. As service providers and service clients may be executing on different computer systems such data objects may be serialized and then transmitted over an appropriate data communications network.

In a service oriented architecture service providers and service clients may be implemented by different software development teams. In some cases the service provider may be implemented well before a service client is conceived and developed. For these reasons the developers of service providers may have an incomplete understanding of how the service or the data provided by the service will be used by the service clients. In order to simplify the software development process the developers of a service provider may decide to support as few service API calls as possible. Consequently the simplified API may be easier to maintain. As a non limiting example a service provider may support a single service API call that provides a data object containing all of the data that may be generated from the business logic embodied in the service provider.

However such data objects may contain data that is unnecessary for a particular service client. For example a service client may be implemented to generate a network page listing new items from an online catalog. Suppose that the service client obtains a list of item identifiers. The service client may then communicate with a service provider repeatedly to obtain the item titles associated with the respective items. Suppose that the service client makes a service API call ItemService.getItemByItemIdentifier ItemIdentifier id for each item identifier. Each of the getItemByItemIdentifier calls may result in an item data object which may for example be megabytes or more in size and contain all kinds of information about the respective item such as price weight images description and so on. Because the service client is configured to use the title of the item only which may be just a short character string all of the other data retrieved from the ItemService for each item is unnecessary.

Data objects provided by a service may be relatively large in data size consuming considerable bandwidth in the aggregate to be transmitted over data communication networks to service clients. In addition transmission of a data object across a data communications network may involve serialization and deserialization of the data object. Serialization is a data encoding process for data objects that is complex and may require considerable computing resources e.g. in terms of processor time memory space etc. in the aggregate to perform. Therefore serialization of a data object that contains data that will not be used by a service client may waste system resources.

Various embodiments of the present disclosure provide automated service interface optimization to address this problem. The various embodiments take into account that a given service API may not be optimized for every service client such as for example the service client using only the item title from an item object. To this end the various embodiments include a client framework and a provider framework in order to connect the service clients with a service provider. Based at least in part on client usage metrics the various embodiments are able to optimize the contents of a data object sent over a data communications network from a service provider to a service client. The optimized data objects realize benefits in reduced bandwidth consumption reduced computing resource demand for serialization and deserialization operations and other benefits. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a service environment according to various embodiments. The service environment includes one or more service clients that communicate with one or more service providers by way of a network . It is understood that a service client may be in communication with multiple service providers while a service provider may be in communication with multiple service clients . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The service client may comprise for example a server computer or any other computing device or system providing computing capability. The service client may represent multiple computer systems arranged for example in one or more server banks or other arrangements. To this end the service client may comprise for example a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computer systems may be located in a single installation or may be dispersed among many different geographical locations. In one embodiment the service client represents a virtualized computer system executing on one or more physical computing systems. For purposes of convenience the service client is referred to herein in the singular. However in one embodiment the service client represents a plurality of computer systems arranged as described above.

Various applications and or other functionality may be executed in the service client according to various embodiments. The components executed on the service client for example include a service client application a client framework application and other applications services processes systems engines or functionality not discussed in detail herein. The service client application is executed to provide functionality that uses at least one service. Thus the service client application is configured to make at least one service API call to the client framework application and to receive in response at least one data object from the client framework application .

The client framework application is executed to provide communication functionality between the service client application and at least one service provider . The client framework application may include a usage metrics application a communication layer and or other subcomponents. The usage metrics application is executed to determine various usage metrics associated with the service client application . Specifically the usage metrics application may determine which data fields and or methods within the data object are in fact used by the service client application . To this end the usage metrics application may be configured to examine at least a portion of code that implements the service client application for usage of each of the data fields and or methods.

The communication layer facilitates communication between the client framework application and at least one service provider over the network . The communication layer may include translation code that may be configured to translate one service API call to another service API call and another data object to the data object . In other words translation code may function as a client side adapter for changes to the service API.

The service provider may comprise for example a server computer or any other computing device or system providing computing capability. The service provider may represent multiple computer systems arranged for example in one or more server banks or other arrangements. To this end the service provider may comprise for example a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computer systems may be located in a single installation or may be dispersed among many different geographical locations. In one embodiment the service provider represents a virtualized computer system executing on one or more physical computing systems. For purposes of convenience the service provider is referred to herein in the singular. However in one embodiment the service provider represents a plurality of computer systems arranged as described above.

Various applications and or other functionality may be executed in the service provider according to various embodiments. Also various data is stored in a data store that is accessible to the service provider . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the service provider for example include a service provider application a provider framework application and other applications services processes systems engines or functionality not discussed in detail herein. The service provider application is executed to provide functionality related to a service. The service provider application may include business logic used to implement the particular service and or may act as an interface with other systems and or applications. The service provider application may access various data stored within the data store in order to implement the particular service and generate data objects as needed.

The provider framework application is executed to provide communication functionality between the service provider application and service clients . To this end the provider framework application may include a communication layer which may further include translation code . The translation code may function as a server side adapter for changes to the service API. The communication layer may for example translate a service API call received over the network to a service API call and may also translate a data object produced by a service provider application in response to the service API call into a data object suitable for transmission over the network . Thus the data object may be serialized or subjected to some other encoding to make it suitable for transmission over the network .

Next a general description of the operation of the various components of the service environment is provided. To begin the service client application makes a service API call which is received by the client framework application . Although herein the service API call is primarily referred to in the singular it is understood that the service API call may represent multiple service API calls for different data objects from a same service provider .

The communication layer of the client framework application processes the service API call and may in some embodiments execute translation code to translate the service API call into the service API call . The service API call is then transmitted over the network to the provider framework application executing on the service provider . The communication layer of the provider framework application receives the service API call and in some embodiments may execute translation code to process the service API call . Thus in some embodiments the service API call is translated into a service API call which is then submitted to the service provider application . Where the service API call represents multiple service API calls the translation to a service API call or a service API call may involve aggregation and or combination into fewer service API calls and or fewer service API calls . Such aggregation may use for example a cache buffer to store the multiple service API calls .

The service provider application receives the service API call and performs some functionality in response to the service API call . The service provider application may communicate with other applications and or systems and may retrieve data from the data store . Ultimately the service provider application is configured to generate a data object in response to the service API call . Where the service API call represents multiple service API calls the data object may represent different data objects corresponding to the respective service API calls .

The provider framework application receives the generated data object from the service provider application . The communication layer then processes the data object so that it may be transmitted over the network . To this end the communication layer may be configured to serialize or otherwise encode the data object into a data object for transmission over the network . The translation code may be employed in various embodiments to translate the data object into another format that may include fewer fields and or methods thereby producing an optimized data object . The optimized data object may be associated with a smaller data size and a lower data encoding complexity than that of the unoptimized data object .

In one embodiment the optimized data object may correspond to an aggregation of data items from multiple different data objects . As a non limiting example the optimized data object may include at least one data item from each respective set of data items of each of the multiple different data objects . The data items in the optimized data object may be selected based at least in part on the usage metrics determined by the usage metrics application . Likewise the optimized data object may have a smaller data size and lower data encoding complexity than that of the multiple different data objects . The optimized data object is then sent over the network to the service client .

The communication layer of the client framework application receives the data object from the service provider over the network . The communication layer may execute translation code in various embodiments in order to translate the data object into a data object . The communication layer may perform deserialization of or may otherwise decode the data object received over the network to produce the data object . Thereafter the client framework application returns the data object to the service client application . The service client application may then use the data object in order to perform some functionality.

The contents of the data object i.e. a set of data items may be analyzed in conjunction with usage metrics determined by the usage metrics application to determine a first subset of data items that are predicted to be accessed by the service client application during a time period and a second subset of data items that are predicted to be unaccessed by the service client application during the time period. The first subset of data items may be a proper subset of the set of data items. A proper subset is a subset that excludes at least one data item from the set. Ultimately the service provider may be configured to provide the optimized data object to the service client . The optimized data object includes the first subset of data items and excludes the second subset of data items. In embodiments where the optimized data object represents an aggregation of data items from multiple different data objects the optimized data object may include all distinct data items from the multiple different data objects the aggregation into a single optimized data object representing an optimization over multiple data objects .

Referring next to shown are diagrams of examples of data objects employed in various embodiments of the service environment . depicts a data object that is unoptimized and ordinarily produced by the service provider application executing on the service provider . The data object includes a plurality of accessors and a plurality of data fields . The accessors are employed in order to retrieve the data fields from the data object . Thus when an accessor getData is called the data field Data is returned. Similarly when an accessor getData is called a data field Data is returned. Further when an accessor getData is called a data field Data is returned. Although accessors are customarily used in service oriented architecture in order to obtain data fields it is understood that in various embodiments the data fields may be accessed directly without using a respective accessor .

In another optimized data object is depicted according to another embodiment. The optimized data object includes accessors and data fields . However accessors includes only one accessor getData and data fields includes only one data field Data . In contrast with the optimized data object depicted in the optimized data object depicted in omits accessors that will be unused or are predicted to be unused by the service client application . Further the optimized data object of omits data fields also that are unused or are predicted to be unused by the service client application .

Consequently the optimized data object of may have a smaller data size in serialized form than the optimized data object depicted in . However the optimized data object of may be of a different class or type than the optimized data object shown in . When the service client application is expecting a data object of a first class such as the class of the data object some translation may be necessary by the translation code on the service client in order for the service client application to use the optimized data object depicted in .

Turning now to shown is a service management environment according to various embodiments. The service management environment includes a computing resource in data communication with a plurality of service providers . . . a plurality of service clients . . . by way of a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks. The network may correspond to the network according to some embodiments.

The computing resource may comprise for example a server computer or any other computing device or system providing computing capability. The computing resource may represent multiple computer systems arranged for example in one or more server banks or other arrangements. To this end the computing resource may comprise for example a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computer systems may be located in a single installation or may be dispersed among many different geographical locations. In one embodiment the computing resource represents a virtualized computer system executing on one or more physical computing systems. For purposes of convenience the computing resource is referred to herein in the singular. However in one embodiment the computing resource represents a plurality of computer systems arranged as described above.

Various applications and or other functionality may be executed in the computing resource according to various embodiments. Also various data is stored in a data store that is accessible to the computing resource . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing resource for example include a service management application and other applications services processes systems engines or functionality not discussed in detail herein. The service management application is executed to optimize the service interfaces automatically between service providers and service clients .

The data stored in the data store includes for example client usage metrics source code compiled code and or potentially other data. The client usage metrics represents data gathered from instances of the usage metrics application executing on various service clients . The client usage metrics represents usage metrics associated with various service client applications . Source code represents code that may be employed within service client application service provider application client framework application provider framework application and or other applications employed in the service environment . The compiled code corresponds to a compiled version of the source code . In various embodiments compiled code may represent binary data bytecode intermediate code and or other code that is generated from the source code by the service management application or some other application.

Next a general description of the operation of the various components of the service management environment is provided. To begin the service management application determines a plurality of usage metrics for at least one service client corresponding to a set of data items e.g. data fields accessors etc. within a data object configured to be provided to the service client . Such a data object may be unoptimized or previously optimized. The service management application may obtain usage metrics from each respective service client that have been determined by a usage metrics application executing on each of the service clients .

The data object is obtainable by the at least one service client from a service provider by way of a service API call . The service API call may be the original API call selected by the developers in implementing the service client or may correspond to a modified API call used in obtaining an optimized data object . The service management application determines which accessors and data fields from the data object are in fact used by the respective service client or are predicted to be used by the service client . The service management application stores the usage metrics in the client usage metrics .

In response to determining the client usage metrics the service management application configures the respective service provider to provide an optimized data object to the respective service client . The optimized data object includes at least some of those data items from the set of data items that are predicted to be accessed by the respective service client according to the usage metrics stored in the client usage metrics and associated with the service client .

In one embodiment the service management application may configure the service client to provide a filtering parameter to the service provider . As non limiting examples the filtering parameter may specify which data items within a data object are to be included or which data items within the data object are to be excluded. To implement use of a filtering parameter the service management application may for example modify the code of the service client application in order to provide the filtering parameter in conjunction with the service API call or the service management application may modify the client framework application to provide the filtering parameter in conjunction with the service API call .

Alternatively the service provider may be configured to identify the service client that would be associated with a particular filtering parameter. As a non limiting example in such a case the provider framework application of the particular service provider may supply the filtering parameter corresponding to the identified service client to the service provider application with the service API call .

The service management application may configure the service provider application to process the filtering parameter such that the produced data object excludes the data fields and or accessors that are not needed by the service client . Alternatively the provider framework application may process the data object and the filtering parameter to produce an optimized data object that excludes the accessors and or data items that are not needed by the service client .

In another embodiment the service client application may be configured by the service management application to make a different service API call to request an optimized data object . Alternatively the client framework application may be configured to process an unmodified service API call and to translate that into a different service API call which is then sent over the network to the service provider . In another variation the provider framework application may be configured to receive an original service API call and translate that into a different service API call which is then submitted to the service provider application . In yet another variation the service provider application itself may be reconfigured to support a different service API call in order to produce an optimized data object .

Regardless of whether a filtering parameter or a different API call is used the data object sent over the network is optimized and excludes data items that are not needed or predicted to be needed by the service client . Various embodiments are provided for translating the original data object into an optimized data object . To this end in a first embodiment the service provider application may provide an optimized data object upon identification of the particular service client . Alternatively the provider framework application may act as an intermediary between the service provider application and the service client and translate an original data object into an optimized data object using for example translation code . The optimized data object may correspond to the data object depicted in or the data object shown in . Thus the optimized data object may be of a same class or of a different class than the original data object .

On the service client the client framework application may function to translate an optimized data object into some other format. As a non limiting example the optimized data object illustrated in may be translated into the optimized data object of for compatibility with an unmodified service client application . Furthermore the client framework application may facilitate data access through the accessors . As a non limiting example when accessor getData is invoked by the service client application instead of returning the empty value stored in data field the client framework application may then request the data field Data or the entire original data object from the service provider . To this end the client framework application may make a service API call corresponding to the original service API call to produce the original data object or the client framework application may provide a filtering parameter to the service provider indicating that the original data object containing the data field should be sent to the service client .

The optimization of the service interface may be performed in response to a manual indication received by the service management application or the service management application may be invoked on a regular basis according to a time period. For example the source code corresponding to a service client application or a service provider application may be recompiled into compiled code on a regular basis. This provides an opportunity for the service management application to refactor part of the source code to implement the optimizations described above.

As a non limiting example of refactoring the service management application may reconfigure an API specification from which source code may be generated. In one embodiment the source code that is generated may include code stubs or incomplete sections of source code where a software engineer is expected to complete the section manually with business logic code. In another embodiment the source code that is generated may already be completed with the business logic code. In various embodiments the service management application may modify the compiled code directly and perform the API optimizations at compile time.

Alternatively the service management application may push the updated translation code to the service clients and the service providers when necessary. By optimizing the translation code instead of the service client application or service provider application the optimization process may happen more transparently. Further the translation code may be updated for a next version of the API for the service provider so that the developers of the service client application may continue to use a previous version of the API if desired.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the service management application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the service management application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing resource according to one or more embodiments.

Beginning with box the service management application determines the client usage metrics associated with a service. Next in box the service management application refactors the source code implementing one or more applications executing on a service provider in order to optimize the interface between the service provider and one or more service clients .

In box the service management application refactors the source code that implements one or more applications executing on a service client in order for the service client to use the optimized interface. Alternatively the service management application may merely optimize the service provider such that the service provider can identify a particular service client and then provide an optimized data object based on the identification of the particular service client .

Thereafter in box the service management application compiles the applications implementing service providers and or the service clients . Then in box the service management application is configured to deploy the service providers and the service clients . Thereafter the service management application ends.

Moving on to shown is a flowchart that provides one example of the operation of a portion of the client framework application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the client framework application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the service client according to one or more embodiments.

Beginning with box the client framework application obtains code in order to implement an optimized service API from the service management application or the service provider . This code may in some embodiments correspond to the translation code . In box the client framework application receives an unoptimized service API call from a service client application . Next in box the client framework application transforms the unoptimized service API call into an optimized service API call . This transformation may include adding or modifying one or more filtering parameters to the optimized service API call or translating the unoptimized service API call into an entirely different service API call . The transformation may also involve combining multiple service API calls . Optimized service API call may be serialized for transmission over a network in various embodiments.

In box the client framework application then sends the optimized API call to the service provider . In response in box the client framework application receives an optimized data object from the service provider . Next in box the client framework application then transforms the optimized data object into a data object that is compatible with the unoptimized format. In box the client framework application then returns the unoptimized data object or multiple unoptimized data objects where appropriate to the service client application . Thereafter the client framework application ends.

Turning now to shown is a flowchart that provides an example of the operation of another portion of the client framework application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the client framework application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the service client according to one or more embodiments.

Beginning with box the client framework application provides an optimized data object to a service client application in response to a service API call . Then in box the client framework application determines whether the service client application uses data items that are not within the optimized data object . If in box the client framework application determines that the service client application does not use data that is not within the optimized data object the client framework application ends.

Otherwise if the client framework application determines in box that the service client application does use data items that are not within the optimized data object then the client framework application proceeds to box and obtains an unoptimized data object from the service provider . Next in box the client framework application provides the unoptimized data object to the service client application . In some embodiments only the missing requested data may be provided. Optionally in box the client framework application may be configured to initiate refactoring of the source code that is associated with the service client application or the client framework application . Alternatively the refactoring of the source code may be initiated by the service management application after examining client usage metrics . Thereafter the client framework application ends.

With reference to shown is a schematic block diagram of the service client according to an embodiment of the present disclosure. The service client includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the service client may comprise for example at least one computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are service client application client framework application and potentially other applications. In addition an operating system may be stored in the memory and executable by the processor .

Moving now to shown is a schematic block diagram of the service provider according to an embodiment of the present disclosure. The service provider includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the service provider may comprise for example at least one computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the service provider application the provider framework application and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

Referring next to shown is a schematic block diagram of the computing resource according to an embodiment of the present disclosure. The computing resource includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing resource may comprise for example at least one computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the service management application and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

Referring back to it is understood that there may be other applications that are stored in the memory and are executable by the processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java Java Script Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network or network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the service client application the client framework application the service provider application the provider framework application the service management application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the service management application and the client framework application . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the service client application the client framework application the service provider application the provider framework application and the service management application that comprises software or code can be embodied in any computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example electronic magnetic optical electromagnetic infrared or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

