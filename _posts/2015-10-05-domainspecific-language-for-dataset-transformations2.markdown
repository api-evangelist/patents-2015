---

title: Domain-specific language for dataset transformations
abstract: Techniques related to a domain-specific language for dataset transformations are disclosed. A server computer may process a table definition composed in a domain-specific language. The table definition may include a sequence of one or more dataset transformations to be performed on one or more source tables to generate a target table. The sequence may include a customized transformation. A source dataset may be provided as input to an implementation of the customized transformation. An output dataset may be generated as a result of executing the implementation. An intermediate table may be generated based on performing at least one dataset transformation on a particular source table. A supplemental portion for the intermediate table may be generated based on performing the at least one dataset transformation on an appended portion of the particular source table. The target table may be generated based on combining the supplemental portion with the intermediate table.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09576015&OS=09576015&RS=09576015
owner: Palantir Technologies, Inc.
number: 09576015
owner_city: Palo Alto
owner_country: US
publication_date: 20151005
---
This application claims the benefit of Provisional Appln. 62 216 192 filed Sep. 9 2015 the entire contents of which is hereby incorporated by reference as if fully set forth herein under 35 U.S.C. 119 e .

Embodiments relate to database technology and more specifically to a domain specific language for dataset transformations.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

A database management system DBMS supports generating and modifying stored data. For example a data definition language DDL or a data manipulation language DML may be used to interact with a database. However database interactions may be limited to the basic operations available in the DDL or DML. Furthermore complex operations written using these basic operations may be error prone and result in slow processing times.

A DBMS may manage multiple datasets and data in different datasets are often related by dependencies. Thus a data change in one dataset may require propagating the data change to another dataset. However propagating data changes to datasets may involve re computing an entire dataset. This may tie up computing resources especially if the data change is relatively small compared to unchanged data.

While each of the drawing figures depicts a particular embodiment for purposes of depicting a clear example other embodiments may omit add to reorder and or modify any of the elements shown in the drawing figures. For purposes of depicting clear examples one or more figures may be described with reference to one or more other figures but using the particular arrangement depicted in the one or more other figures is not required in other embodiments.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present disclosure. It will be apparent however that the present disclosure may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present disclosure. Modifiers such as first and second may be used to differentiate elements but the modifiers do not necessarily indicate any particular order. For example a second dataset may be so named although in reality it may correspond to a first second and or third dataset.

In an embodiment a domain specific language DSL may interface with an existing DDL and or DML to offer greater flexibility. For example the DSL may facilitate generating and or manipulating datasets stored in volatile and or non volatile memory. Datasets may be manipulated based on commands referred to herein as dataset transformations . Dataset transformations may be created and or customized by an end user of the DSL. Each dataset transformation may generate an output dataset based on one or more input datasets.

Zero or more dataset transformations may be included in a table definition. The table definition may generate an output table based on zero or more input tables. A sequence for the one or more dataset transformations may be determined based on a graphical representation of the one or more dataset transformations.

The DSL may support efficiently updating tables based on an incremental computation without explicitly invoking the incremental computation. The incremental computation may avoid re computing a particular table to reflect an update to a dependent table. Instead the incremental computation may involve performing one or more dataset transformations on a portion of the dependent table that includes the update. The transformed portion may then be incorporated into an older version of the particular table to generate a new version of the particular table that reflects the update.

Storage may include one or more database servers one or more storage devices and or one or more of any other system for maintaining source tables . For example storage may be a repository that supports maintaining multiple versions of each source table in such a manner that enables merging changes at any time that is convenient.

Tables e.g. source tables target tables may include tabular data that is persisted in storage and or server computer . For example source tables may be distributed database tables that are stored in a collective non volatile memory of a cluster of database computers. Tables may be stored in any format such as JavaScript Object Notation JSON Extensible Markup Language XML comma separated values CSV a B tree and or a binary encoding.

Server computer may generate tables and or datasets e.g. unpersisted data . Server computer may materialize datasets and store them in a volatile memory. Server computer may cause particular datasets to be stored as tables in a non volatile memory and or storage .

Server computer may include one or more web servers one or more file servers and or one or more of any other interface between storage and client computer . Server computer may store copies of tables and or references to the tables.

References may include pointers memory addresses symbolic links and or any other indirect reference to a table. Storing references to tables may reduce memory usage and enable data integration in O 1 time.

Storage may be on a separate device from server computer . Alternatively storage may be a persistent storage on server computer . Storage and server computer may communicate using a Representational State Transfer REST application programming interface API a Simple Object Access Protocol SOAP and or any other set of constraints for exchanging information. Source tables in any of a number of different formats may be uploaded to storage and or server computer based on a plugin that causes source tables to be stored in a common format.

Client application may be a browser an integrated development environment IDE and or any other user interface. Client application may enable composing a table definition in a DSL. As shall be described in greater detail hereafter the table definition may include a sequence of one or more dataset transformations to be performed on one or more source tables to generate a target table. The one or more dataset transformations may define the contents of the target table.

The DSL may be independent and different from a DDL and or a DML used with source tables . In other words server computer may translate between a DSL used with client application and a DDL and or DML used with source tables .

A computer may be one or more physical computers virtual computers and or computing devices. As an example a computer may be one or more server computers cloud based computers cloud based cluster of computers virtual machine instances or virtual machine computing elements such as virtual processors storage and memory data centers storage devices desktop computers laptop computers mobile devices and or any other special purpose computing devices. A computer may be a client and or a server. Any reference to a computer herein may mean one or more computers unless expressly stated otherwise.

A directed acyclic graph may be a graphical representation of a table definition for a target table . The table definition may include one or more dataset transformations e.g. transformations A B customized transformation to be performed on one or more source tables . The one or more dataset transformations may be represented as verbs such as aggregate sort and drop that describe an operation that is to be performed in terms of the problem domain instead of how to perform the operation as a sequence of programming language primitives. In other words table definitions may be composed using declarative programming.

For example table definition 1 generates target table based on performing transformation A on source table A.

Line 3 of table definition 1 indicates that transformation A is performed. However in an embodiment line 3 may indicate that customized transformation is performed. Dataset transformations shall be described in greater detail hereafter.

In the example of directed acyclic graph may be a graphical representation of table definition 2. Table definition 2 generates target table based on performing transformations A B and customized transformation on source tables A B.

Lines 6 9 of table definition 2 appear to be a separate table definition but may operate more like a dataset definition. Typically dataset is materialized but remains unpersisted. In effect lines 6 9 may be analogous to a Structured Query Language SQL CREATE VIEW statement. The dataset resulting from lines 6 9 may be transparent only to table definition 2.

Declarative programming may be used to express the logic of a table definition without describing the control flow of the table definition. Thus a sequence for the one or more dataset transformations may be determined based on the graphical representation. In the example of directed acyclic graph indicates that both transformation A and customized transformation must be performed prior to transformation B. However transformation A and customized transformation may be performed at any time relative to each other.

The directed acyclic graph may include zero or more leaf nodes and zero or more non leaf nodes . The zero or more leaf nodes may represent zero or more tables. In the example of each leaf node corresponds to a source table . In an embodiment a target table may also be represented by a leaf node . Each non leaf node may represent a dataset transformation.

A dataset e.g. source dataset output dataset may be a collection of data that is stored in storage and or server computer . Datasets may be stored in a volatile memory and or persisted in a non volatile memory. Datasets that are persisted may be called tables.

A dataset that is taken as an input of a dataset transformation is called a source dataset and a dataset that is generated as an output of a dataset transformation is called an output dataset . In the example of source table A is a source dataset for transformation A and an output dataset for transformation A is a source dataset for transformation B. Likewise source table B is a source dataset for customized transformation and an output dataset for customized transformation is a source dataset for transformation B. Thus transformation B generates an output dataset based on multiple source datasets . The output dataset for transformation B becomes target table when it is persisted.

A dataset transformation may be any of a number of operations that are performed on one or more datasets to generate yet another dataset. Each dataset transformation may be associated with an implementation that includes code for causing a particular operation to be performed. As mentioned above dataset transformations may describe what is to be accomplished without describing how to accomplish it. Thus an implementation may describe how a dataset transformation is to be performed.

Referring to dataset transformation may be transformation A transformation B or customized transformation of . Thus dataset transformation may be an operation that is available in a DSL by default e.g. transformation A B or an operation that is defined by an end user of the DSL e.g. customized transformation .

Transformation A may be an operation that filters out non engineering majors. An implementation of transformation A may include a function that compares each string value in a particular column with the string values in an enumerated list and returns a Boolean value. Source table A may be a source dataset that is provided as input to transformation A to generate an output dataset that represents the following data 

Customized transformation may be an operation that increments numeric values by two. An implementation of customized transformation may include a function that adds two to each numeric value in a particular column. Thus source table B may be a source dataset that is provided as input to customized transformation to generate an output dataset that represents the following data 

Transformation B may be an operation that joins datasets into a composite dataset based on matching values in a respective column of each dataset. An implementation of transformation B may include a function that performs an operation similar to a SQL INNER JOIN operation. For example the output datasets for transformation A and customized transformation may be provided as input to transformation B to generate an output dataset that represents the following data 

Processes A B may exist on a single computer or on multiple computers. For example processes A B may represent different threads on server computer or two different server computers .

As mentioned above a sequence of one or more dataset transformations may be determined based on a graphical representation of the one or more dataset transformations . For example the graphical representation depicted in may indicate that transformation A and customized transformation may be performed concurrently in a multi threaded application.

When a source table is updated with a data change the data change may be incorporated into a table that depends on the source table . However incorporating the data change may involve completely rebuilding the table that depends on the source table . For example at T1 a particular table may be generated based on performing a particular dataset transformation on a source table . At T2 the source table may be updated. Thus at T3 the particular dataset transformation may be performed on the updated source table to generate an updated version of the particular table.

Completely rebuilding a table may be computationally intensive especially if updates are frequent. Furthermore in some situations completely rebuilding a table may inefficiently incorporate updates. For example in the example datasets above for source table A may be updated to generate the following table 

Intermediate table of corresponds to target table of . Intermediate table is generated and persisted prior to generating supplemental portion . Thus intermediate table may be retrieved from storage and or server computer prior to generating target table .

In the example of appended portion is a portion of an updated source table that was appended to a previous version of source table A. Although depicted in the example updated source table above as the last row appended portion may be data that is added at any of a number of locations. For example appended portion may be a new first row a new column etc.

A supplemental portion may be a portion of an intermediate table that reflects an update to a source table . The supplemental portion may be generated based on performing a set of one or more dataset transformations on an appended portion and or one or more source tables . The set of one or more dataset transformations may be similar to that used to generate an intermediate table . In supplemental portion may represent the following data 

Transformation may be an operation that combines one dataset with another dataset to generate a composite dataset. In the example of intermediate table and supplemental portion are provided as input to transformation to generate an output dataset that represents the following data 

Referring to transformation C may be similar to or different from transformation A and transformation D may be similar to or different from transformation B. differs from in that supplemental portion depends on source table A as well as appended portion . For example in transformation A may be an operation that takes the last two rows of source table A. However appended portion may consist of only one row. Thus transformation C may take as input the last row of source table A in addition to appended portion .

Incremental computation may be an optimization that is available for deriving a target table based on one or more criteria. The one or more criteria may include one or more of the following 

An incremental status of a source table A refers to a manner in which an update is incorporated into the source table A. An incremental status of full indicates that a target table that depends on an updated source table must be completely rebuilt whereas an incremental status of incremental indicates that incremental computation may be used to generate a target table based on the updated source table. For example a source table B without any updates may have an incremental status of full . Similarly if an update replaces any data in a source table A the source table A may have an incremental status of full . In contrast an update that adds data to a source table A without replacing any data in the source table A may have an incremental status of incremental .

A target table may be derived based on incremental computation if the target table depends on at least one source table A with an incremental status of incremental . In other words incremental computation may be available if at least one source table A incorporates an update by appending the update.

An incremental computability of a dataset transformation may be categorized as one or more of the following 

A concatenate type corresponds to a dataset transformation that can be computed efficiently by appending data to a previous result of the dataset transformation without requiring access to the previous result. For example a rename transformation may correspond to a concatenate type because the rename transformation can change the name of a column in an update without accessing a previous renaming of the column.

Like the concatenate type a merge and append type corresponds to a dataset transformation that can be computed efficiently by appending data to a previous result of the dataset transformation . However the merge and append type requires access to the previous result. For example a distinct transformation may correspond to a merge and append type because the distinct transformation removes duplicate rows. Removing duplicate rows in an update cannot be performed confidently without checking for duplicate rows between the update and for example the previous result of removing duplicate rows.

A merge and replace type corresponds to a dataset transformation that can be computed efficiently by replacing data in a previous result of the dataset transformation . Like the merge and append type the merge and replace type requires access to the previous result. For example an aggregate transformation consisting of a sum operation may correspond to a merge and replace type because the sum operation calculates a subtotal for an update which is then added to a previous total to calculate a new total that replaces the previous total.

An impossible type corresponds to a dataset transformation that cannot take advantage of a previous result to perform incremental computation. In other words the impossible type may correspond to a dataset transformation that does not correspond to one of the aforementioned types. For example an aggregate transformation including a mostFrequentValue operation may correspond to an impossible type because the statistical mode of a previous result does not necessarily inform the statistical mode of an updated set of data.

Like source tables dataset transformations may be associated with an incremental status. An incremental status of full corresponds to a merge and replace type of incremental computability. However an incremental status of incremental corresponds to either a concatenate type or a merge and append type of incremental computability.

A dataset transformation may be associated with multiple types of incremental computability based on one or more dependencies of the dataset transformation . The one or more dependencies may include source tables and or other dataset transformations that provide input to the dataset transformation . For example a dataset transformation with two dependencies may correspond to a concatenate type if the first dependency has an incremental status of incremental a merge and append type if the second dependency has an incremental status of incremental and an impossible type if each dependency has an incremental status of incremental .

Furthermore a dependency of a dataset transformation may be characterized as reversible if the dependency can be reconstructed from an output of the dataset transformation . In other words a reversible dependency may be a dependency that can be derived based on performing an inverse dataset transformation on an output dataset . For example a source dataset of a dataset transformation that adds one to particular values is reversible because an output dataset of the dataset transformation can be subjected to an inverse operation that subtracts one from the particular values to derive the source dataset .

In an embodiment incremental computation may be available if both of the following criteria are satisfied 

In the example of source table A has an incremental status of incremental and source table B has an incremental status of full . Since source table A is a dependency of transformation A the incremental computability of transformation A must be assessed. Thus in order for target table to be generated based on incremental computation transformation A must correspond to a concatenate type a merge and append type and or a merge and replace type of incremental computability.

Transformation A may be an operation that filters out non engineering majors. Since two portions of a dataset can be filtered independently and then combined to yield the same result as filtering the dataset in its entirety transformation A corresponds to a concatenate type of incremental computability. Furthermore since a dataset transformation corresponding to a concatenate type is a dependency that has an incremental status of incremental transformation A has an incremental status of incremental . Thus in order for target table to be generated based on incremental computation the incremental computability of transformation B must also be assessed.

Transformation B may be analogous to a SQL INNER JOIN operation. Since performing transformation B on a dataset in its entirety yields the same result as combining two portions of the dataset upon which transformation B has been performed separately transformation B corresponds to a concatenate type of incremental computability.

Note that transformation is irrelevant to determining whether target table can be generated based on incremental computation because transformation will become part of the implementation of incremental computation once it is determined to be appropriate. In other words only the dataset transformations depicted in are relevant to the incremental computation analysis.

As a result of the foregoing incremental computation analysis server computer may determine that target table can be generated using incremental computation. Server computer may be configured to perform incremental computation whenever server computer determines that incremental computation is available.

At block the server computer may obtain an implementation of the dataset transformation . The table definition may exclude the implementation to facilitate manipulating data. The implementation may be obtained from a separate file at the server computer .

At block the server computer may provide the implementation with one or more source datasets as input. The one or more source datasets may be retrieved from a storage and or from the server computer . For example the server computer may rebuild a source dataset that was previously retrieved from a storage but subsequently removed from a volatile memory due to a failure. Rebuilding lost datasets may be based on logs maintained by the server computer that record a lineage e.g. a table definition source datasets dataset transformations of a lost dataset.

At block the server computer may generate an output dataset based on executing the implementation . The output dataset may be a transformed source dataset and or a composite of multiple source datasets . The output dataset may be stored in volatile memory.

At block the server computer may determine whether the table definition includes any subsequent dataset transformations . A subsequent dataset transformation may be determined based on a graphical representation of the table definition. If the table definition includes any subsequent dataset transformations the output dataset may be used as a source dataset for an immediately subsequent dataset transformation . Processing the immediately subsequent dataset transformation may involve a process not shown similar to repeating blocks . However if the table definition fails to include any subsequent dataset transformations block may proceed to block .

At block the server computer may generate a target table based on persisting the output dataset . The target table may be stored at server computer and or storage .

At block the server computer may determine whether each dataset transformation identified at block corresponds to a concatenate type a merge and append type and or a merge and replace type of incremental computability. If each dataset transformation is determined to correspond to an incremental computability type other than an impossible type block proceeds to block . Otherwise the incremental computation analysis ends and incremental computation is determined to be unavailable.

At block the server computer may identify any dependencies that are or depend on a dataset transformation corresponding to a merge and append type and or a merge and replace type. Incremental computation may still be available if such dependencies are reversible.

At block the server computer may determine whether each dependency identified at block is reversible. If any of the identified dependencies is not reversible the incremental computation analysis ends and incremental computation is determined to be unavailable. Otherwise block proceeds to block .

At block the server computer may obtain an intermediate table generated based on performing one or more dataset transformations on a source table . Although depicted in as being performed after block block may be performed prior to block after block or at any other suitable time. For example block of may correspond to block of .

At block the server computer may generate a supplemental portion for the intermediate table based on performing the one or more dataset transformations on at least an appended portion of the source table . In an embodiment the one or more dataset transformations may also be performed on the source table .

At block the server computer may generate a target table based on combining the supplemental portion with the intermediate table . Combining the supplemental portion with the intermediate table may involve performing a dataset transformation on the supplemental portion and the intermediate table . For example combining the supplemental portion with the intermediate table may involve performing a square root operation to derive subtotals for the supplemental portion and the intermediate table adding the subtotals to derive a total and squaring the total. An output dataset of the dataset transformation may be persisted to generate the target table .

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that depicts a computer system upon which an embodiment may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

In the foregoing specification embodiments have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the disclosure and what is intended by the applicants to be the scope of the disclosure is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

