---

title: Remote platform configuration
abstract: Technologies are disclosed that allow the firmware of a remotely located target device to be configured. The target device can receive a command to reboot into a special remote setup mode for remote configuration. Once in the remote setup mode, the firmware listens for and can respond to HTTP requests for information on configurable data and instructions to update the configurable data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09632806&OS=09632806&RS=09632806
owner: American Megatrends, Inc.
number: 09632806
owner_city: Norcross
owner_country: US
publication_date: 20150317
---
This application claims the benefit of provisional U.S. patent application No. 62 017 952 entitled SYSTEMS AND METHODS FOR REMOTE PLATFORM CONFIGURATION which was filed on Jun. 27 2014 and which is expressly incorporated herein by reference in its entirety.

In many computing systems low level instruction code or firmware is used as an intermediary between the hardware components of the computing system and high level software executing on the computing system such as an operating system. The firmware provides a set of software routines that allow high level software to interact with the hardware components of the computing system using standard calls. Configuring the firmware requires the use of complex operations tools and utilities that are platform and operating system specific.

In some environments such as in server farms firmware may need to be updated for computers that lack consoles or that are remotely located. A baseboard management controller BMC attached to the motherboard of a computer can allow the firmware of the computer to be configured using keyboard video and mouse redirection. However BMCs are not practical for small computer systems such as small servers desktops and laptops or any other scenario without a BMC or with a BMC with limited functionality. It is with respect to these and other considerations that the disclosure made herein is presented.

Technologies are described herein for remote platform configuration. Through the utilization of the technologies and concepts presented herein firmware can be configured for headless computing systems where a console is not available or remotely for any network connected computer.

According to one aspect presented herein a target device can receive a command from a remotely located client computer instructing the target device to reboot and enter into a remote firmware setup mode. During the reboot the firmware of the target device places the reboot process on standby while listening for further communication from the client computer. If further communication is received the target computer can authenticate the sender and enter the remote firmware setup mode.

According to another aspect presented herein the target computer may receive the command to reboot into the remote firmware mode from a user in physical proximity to the target computer. Once authenticated contact is made with a remotely located client computer the target device may also enter the remote firmware setup mode.

According to yet another aspect presented herein the target computer may receive and respond to inquiries from the authenticated client computer regarding configurable firmware data. The target computer may receive and respond to instructions from the client computer to update configurable firmware data.

It should be appreciated that the above described subject matter may also be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

Embodiments of the disclosure presented herein provide technologies for remote platform configuration. In the following detailed description references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements throughout the several figures aspects of an exemplary operating environment and the implementations provided herein will be described.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers embedded systems and the like. Embodiments presented herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Turning now to an illustrative computer architecture for practicing the embodiments discussed herein will be described. It should be appreciated that although the embodiments described herein are discussed in the context of a conventional desktop or server computer the embodiments may be utilized with virtually any type of computing device. shows an illustrative computer architecture for a computing system that is operative for remote platform configuration.

In order to provide the functionality described herein the computing system can include a baseboard or motherboard which can be a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication path. In one illustrative embodiment a central processing unit CPU operates in conjunction with a Platform Controller Hub PCH . The CPU may be a standard central processor that performs arithmetic and logical operations necessary for the operation of the computing system . The computing system may include a multitude of CPUs . Each CPU might include multiple processing cores.

The CPU provides an interface to a random access memory RAM used as the main memory in the computing system and possibly to an on board graphics adapter . The PCH may provide an interface between the CPU and the remainder of the computing system .

The PCH may also be responsible for controlling many of the input output functions of the computing system . In particular the PCH may provide one or more universal serial bus USB ports an audio codec a Gigabit Ethernet Controller and one or more general purpose input output GPIO pins . The USB ports may include USB 2.0 ports USB 3.0 ports and USB 3.1 ports among other USB ports. The audio codec may include Intel High Definition Audio Audio Codec 97 AC 97 and Dolby TrueHD among others. Power management circuitry and clock generation circuitry may also be utilized through the PCH .

The PCH may also include functionality for providing networking functionality through a Gigabit Ethernet Controller . The Gigabit Ethernet Controller is capable of connecting the computing system to another computing system via a network. Connections which may be made by the Gigabit Ethernet Controller may include LAN or WAN connections. LAN and WAN networking environments are commonplace in offices enterprise wide computer networks intranets and the internet.

The PCH may also provide a bus for interfacing peripheral card devices such as a graphics adapter . In one embodiment the bus comprises a PCI bus. The PCI bus may include a Peripheral Component Interconnect PCI bus a Peripheral Component Interconnect eXtended PCI X bus or a Peripheral Component Interconnect Express PCIe bus among others. The PCH may also provide a system management bus for use in managing the various components of the computing system .

The PCH is also configured to provide one or more interfaces for connecting mass storage devices to the computing system . For instance according to an embodiment the PCH includes a serial advanced technology attachment SATA adapter for providing one or more serial ATA ports . The serial ATA ports may be connected to one or more mass storage devices storing an operating system and application programs such as the SATA disk drive . As known to those skilled in the art an operating system comprises a set of programs that control operations of a computer and allocation of resources. An application program is software that runs on top of the operating system software or other runtime environment and uses computer resources to perform application specific tasks desired by the user.

According to one embodiment of the invention the operating system comprises the LINUX operating system. According to another embodiment of the invention the operating system comprises a version of the WINDOWS operating system from MICROSOFT CORPORATION. According to other embodiments the operating system can comprise the UNIX SOLARIS or Mac OS X operating system. It should be appreciated that other operating systems may also be utilized.

The mass storage devices connected to the PCH and their associated computer readable storage media provide non volatile storage for the computing system . Although the description of computer readable storage media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable storage media can be any available media that can be accessed by the computing system .

By way of example and not limitation computer readable storage media may comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. However computer readable storage media does not encompass transitory signals. Computer storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computing system .

A low pin count LPC interface may also be provided by the PCH for connecting a Super I O device . The Super I O device is responsible for providing a number of input output ports including a keyboard port a mouse port a serial interface a parallel port and other types of input output ports. The LPC interface may also connect a computer storage media such as a ROM or a flash memory such as a non volatile random access memory NVRAM for storing the firmware that includes program code containing the basic routines that help to start up the computing system and to transfer information between elements within the computing system . Some examples of firmware include Basic Input Output System BIOS firmware that is compatible with the Unified Extensible Firmware Interface UEFI or Open Firmware among others.

It should be appreciated that the program modules disclosed herein including the firmware may include software instructions that when loaded into the CPU and executed transform a general purpose computing system into a special purpose computing system customized to facilitate all or part of the operations disclosed herein. As detailed throughout this description the program modules may provide various tools or techniques by which the computing system may participate within the overall systems or operating environments using the components logic flows and or data structures discussed herein.

The CPU may be constructed from any number of transistors or other circuit elements which may individually or collectively assume any number of states. More specifically the CPU may operate as a state machine or finite state machine. Such a machine may be transformed to a second machine or a specific machine by loading executable instructions contained within the program modules. These computer executable instructions may transform the CPU by specifying how the CPU transitions between states thereby transforming the transistors or other circuit elements constituting the CPU from a first machine to a second machine wherein the second machine may be specifically configured to perform the operations disclosed herein. The states of either machine may also be transformed by receiving input from one or more user input devices network interfaces such as the gigabit ethernet controller other peripherals other interfaces or one or more users or other actors. Either machine may also transform states or various physical characteristics of various output devices such as printers speakers video displays or otherwise.

Encoding the program modules may also transform the physical structure of the storage media. The specific transformation of physical structure may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the storage media whether the storage media are characterized as primary or secondary storage and the like. For example if the storage media are implemented as semiconductor based memory the program modules may transform the physical state of the semiconductor memory when the software or firmware is encoded therein. For example the software may transform the state of transistors capacitors or other discrete circuit elements constituting the semiconductor memory.

As another example the storage media may be implemented using magnetic or optical technology such as hard drives or optical drives. In such implementations the program modules may transform the physical state of magnetic or optical media when the software is encoded therein. These transformations may include altering the magnetic characteristics of particular locations within given magnetic media. These transformations may also include altering the physical features or characteristics of particular locations within given optical media to change the optical characteristics of those locations. It should be appreciated that various other transformations of physical media are possible without departing from the scope and spirit of the present description.

It should be appreciated that the computing system may comprise other types of computing devices including hand held computers embedded computer systems personal digital assistants and other types of computing devices known to those skilled in the art. It is also contemplated that the computing system may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Referring now to a block diagram illustrates aspects of an interface between a UEFI firmware and an operating system according to one or more embodiments presented herein. As described with respect to the firmware may comprise a firmware compatible with the UEFI Specification which may be referred to herein as the Specification from the UEFI FORUM. The UEFI Specification describes an interface between the operating system and the system firmware . The UEFI Specification also defines an interface that platform firmware may implement and an interface that the operating system may use while booting. How the firmware implements the interface may be left up to the manufacturer of the firmware. The Specification can define a way for the operating system and firmware to communicate information necessary to support the operating system boot process.

According to some embodiments both a UEFI compatible firmware and a legacy BIOS support module may be present in the UEFI firmware . This allows the computing system to support a UEFI firmware interface and a legacy BIOS firmware interface. In order to provide this functionality an interface may be provided for use by legacy operating systems and applications. According to other embodiments only one of the UEFI compatible firmware and the legacy BIOS support module may be present in the firmware . According to yet other embodiments the firmware may interface with the hardware through any of various other architectures components or modules for the firmware without specific involvement of the UEFI compatible firmware or the legacy BIOS support module . Additional details regarding the operation and architecture of a UEFI Specification compliant firmware can be found in the UEFI Specification and in the specifications that make up the EFI Framework both of which are expressly incorporated herein by reference.

Turning now to a block diagram illustrates the architecture for a UEFI specification compliant firmware that provides an operating environment for one or more embodiments presented herein. As shown in the architecture can include platform hardware and an operating system . The platform firmware may retrieve an operating system OS image from the UEFI system partition using a UEFI boot loader O S Loader OS boot loader . The OS boot loader may retrieve an OS image from the O S partition .

Once started the OS boot loader may continue to boot the complete operating system . In doing so the OS boot loader may use UEFI boot services runtime services and interface to other supported specifications to survey comprehend and initialize the various platform components and the operating system software that manages them. Thus interfaces from other specifications may also be present on the system. For example the Advanced Configuration and Power Management Interface ACPI and the System Management BIOS SMBIOS specifications may be supported.

UEFI boot services may provide interfaces for devices and system functionality used during boot time. UEFI runtime services may also be available to the UEFI boot loader during the boot phase. For example a set of runtime services may be presented to ensure appropriate abstraction of base platform hardware resources used by the operating system during its operation. UEFI allows extension of platform firmware by loading UEFI driver and UEFI application images which when loaded have access to UEFI defined runtime and boot services. Various program modules can provide the boot time and run time services.

Referring now to a system diagram showing a system that embodies the concepts and technologies disclosed herein will be described. The system may include a target device that is to be configured remotely and a client computer from which remote configuring may be accomplished. The target device and client computer may be server computers desktop workstations laptops notebooks set top boxes or any other types of computing systems. In some embodiments the target device may feature a firmware and operating system as described with regard to and respectively. In some embodiments run time services provide interfaces that allow variables stored in NVRAM to be set and retrieved from the operating system . The operating system may receive communications from a client computer through a network such as the Internet or a local area network LAN . In other embodiments the firmware may contain instructions for a setup agent for receiving communications from the client computer through the network .

According to an embodiment a configuration client may send communications from the client computer to the run time services by way of standard tools provided by the operating system . For the purposes of illustration not limitation such standard tools may include the use of a remote desktop connection RDC or script based tools. In other embodiments the configuration client may send communications from the client computer to the setup agent . The configuration client may execute on top of a web browser . In various implementations the configuration client may be a script add on plugin application e.g. a Flash program or other such addition to the web browser . In other embodiments the configuration client may be a standalone application separate from the web browser which communicates with the target device over a TCP IP connection.

According to various embodiments communications may also be exchanged between the client computer and a remote setup service configured to run from the firmware of the target device during a specialized remote setup mode. The remote setup mode may be entered during a reboot of the target device . In an embodiment the remote setup service executes before the OS bootloader loads the operating system . In such a pre boot execution environment network communication services including TCP IP communication may be provided to the remote setup service by a UEFI network stack . The remote setup service may receive HTTP requests from the configuration client and may respond with HTTP responses . In some instances the remote setup service may alert listeners that is ready for remote configuration by broadcasting data via HTTP requests and receive HTTP responses . It should be appreciated that to aid in description the request and response in the system diagram of are illustrated as being an HTTP Request and an HTTP Response . However in some instances such as during authentication operations the request may be an HTTPS Request and the response may be an HTTPS Response .

In various implementations the communications from the configuration client may include a remote setup command . In some embodiments the remote setup command may be sent in an HTTP request . In other embodiments the remote setup command may be received using communications specific to the operating system . Using the standard operating system tools the remote setup command may instruct run time services in the operating system to set a remote setup flag then to reboot the target device . In some embodiments the remote setup command may be received by the setup agent which may set the remote setup flag and reboot the target device . The remote setup flag can be a variable a flag or an enumerated value that when present indicates that the target device should enter the remote setup mode. Upon rebooting the remote setup service may determine whether the remote setup flag has been set. There are several ways by which the remote setup flag may be set. On UEFI compatible operating systems run time services may be utilized to specify a particular memory location in which a non volatile UEFI variable will be stored and checked by the remote setup service upon reboot. In other embodiments the setup agent may utilize internal interfaces between non UEFI compatible operating systems and the firmware to store a variable value that the remote setup service can then retrieve upon reboot. In yet another embodiment when verification of a user s physical presence is needed prior to entering the remote setup mode the remote setup flag may be set locally when a user presses a particular button or hotkey combination during reboot.

Upon rebooting if the remote setup service determines that the remote setup flag has been set the remote setup service will suspend the normal reboot process during a standby period while listening on a pre specified port for an HTTPS request . If no HTTPS request is received during the standby period the reboot process may proceed in the normal fashion. If the remote setup service determines that an HTTPS request has been received during the standby period the remote setup service may authenticate the sender. Authentications may be performed using any authentication techniques implemented in the firmware including password authentications.

It should be appreciated that a remote setup flag on the target device is not necessary to enable the remote setup mode. According to some embodiments the target device can be configured to listen for an HTTP request each time the computing system reboots. The remote setup service may determine whether an HTTP request has been received from the network during a timeout period in the power on self test POST . The determination may require that an HTTP request be received from specific IP or media access control MAC addresses to be valid or may accept any HTTP request as being valid. In another embodiment the remote setup service may check for the presence of a remote setup flag stored on a separate network accessible machine either by default or upon being properly provisioned during a first deployment.

It should also be appreciated that to facilitate understanding the remote setup service is generally described as listening for an HTTPS request to be received during a timeout period in the POST operation. However in some embodiments upon a reboot the remote setup service may broadcast information alerting listeners that the system is ready to be configured remotely. Upon receiving the broadcast a user may respond by directing the configuration client to send an HTTPS response to the remote setup service indicating the desire to enter the remote setup mode. Accordingly the remote setup service may be configured to listen for any HTTP or HTTPS communication during the timeout period whether the communication is an HTTP request HTTP response HTTPS request or HTTPS response .

If authentication is successful REST APIs may be used by the configuration client to discover display and update configuration values for the firmware . Configuration values may include questions data data attributes e.g. the type of data or data offsets and other information. For example and not for limitation the configuration client may use the get set interface of the HTTP REST API to send an HTTP request seeking a list of setup questions available for the firmware . Using the platform level data model PLDM defined by the distributed management task force DMTF the remote setup service may build PLDM representations Human Interface Infrastructure HII questions of the setup questions. The HII questions may be returned to the configuration client in an HTTP response . For the purposes of further illustration and not limitation if a configuration client seeks to modify the length of the standby period the value of a timeout parameter will need to be modified.

The configuration client may send an HTTP request seeking the value of the timeout parameter PlatformName PLDM Timeout. The remote setup service may respond with an HTTP response containing xml representing the HII question for the parameter. The xml may contain the parameter name and value for the timeout parameter. The configuration client may send an additional HTTP request containing the name of the parameter and a new value for the parameter. Upon receiving the HTTP request the remote setup service may update the parameter value. In some embodiments a configuration client may use a client side scripting language such as JavaScript to make simultaneous updates to a number of different target devices as might occur in a server farm environment. A configuration client may make updates to multiple parameters on a single target device . In some embodiments a configuration client may also make updates to multiple parameters on multiple target devices .

Referring now to a flow diagram showing a routine for initiating a remote setup mode for remote platform configuration according to embodiments presented herein will be described. It should be appreciated that the logical operations described herein are implemented as a sequence of computer implemented acts or program modules running on a computing system and or as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in parallel or in a different order than those described herein.

The routine begins at operation where UEFI run time services or a setup agent may receive a remote setup command instructing the target device to enter the remote setup mode. The remote setup command may be contained in an HTTP request . The routine may proceed to operation where UEFI run time services specify the particular memory location in which a non volatile UEFI variable will be stored and later checked by the remote setup service upon reboot. In other embodiments the setup agent may utilize internal interfaces between the operating system and the firmware to store a variable value that the remote setup service may retrieve during the reboot. In other implementations the remote setup flag may alternatively be set locally by a hotkey combination entered during reboot. From operation the routine may proceed to operation .

At operation the remote setup service determines the status of the remote setup flag during the reboot of the target device . If the remote setup flag has not been set the routine may proceed to operation where the target device continues the reboot in a normal manner. However if the remote setup service determines the remote setup flag has been set the routine may proceed to operation where the remote setup service determines whether an HTTP request has been received. The remote setup service will hold the reboot operation in standby for a period of time determined by the timeout parameter discussed above with regard to the HII question . As noted earlier a remote setup flag is not necessary for the target device to enter the remote setup mode. In some embodiments the routine for initiating a remote setup mode may begin directly at operation where the target device upon each reboot is configured to listen for an HTTP communication an HTTP request or an HTTP response that occurs during the timeout period. If an HTTP communication is not received during the standby period the routine proceeds to operation where the reboot proceeds normally.

From operation the routine may continue to operation where the routine ends. If the remote setup service determines that an HTTP or HTTPS communication was received on a pre specified port during the standby period the routine may proceed to operation where a user may be authenticated. Authentication may be executed using any industry standard security mechanism to ensure adoption of the desired level of security. For illustration not for limitation an example list may include the use of passwords usernames and passwords public key infrastructure PKI and other known techniques. In some embodiments the desired level of security may be guaranteed on an open communication when the communication originates from a well defined and specified device. After a user is successfully authenticated the routine may continue to operation where the remote setup mode is entered. From operation the routine may proceed to operation where the routine ends.

Turning now to a routine for exposing configurable parameters to a client computer will be described. The routine begins at operation where the remote setup service receives an HTTP request from an authenticated configuration client user. The HTTP request may utilize REST APIs specifying specific parameters for display or a listing of all configurable parameters. At operation the remote setup service receives HII questions representing the requested parameters. An HTTP response containing xml for the requested parameters is sent to the configuration client . From operation the routine proceeds to operation where the routine ends.

It should be appreciated that according to implementations the mechanisms disclosed herein may allow a web browser to be used as a user interface for platform configurations remote or local for one or more target devices without using additional hardware such as BMCs or custom firmware user interfaces. The mechanisms disclosed herein may further allow the firmware of a target device to be configured while providing safeguards such as authenticated messaging or headless system solutions where a user is required to interact with the target device e.g by pressing a specific button or combination of buttons to ensure the user is physically present.

Based on the foregoing it should be appreciated that technologies for remote platform configuration have been presented herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claim.

