---

title: Security policy application through data tagging
abstract: Techniques are described for applying data usage policies through data tagging. A metadata tag may be applied to data to indicate a type of the data. In some cases, the tag may be applied to the data when the data is decrypted, and the tag may propagate with the data as the data is passed between processes. A software module may include control logic that is configured to apply data usage policies based on the type tag of data. When the software module attempts an action on the data, such as storing or communicating the data, the control logic may access policy information. Based on the policy information, the control logic may allow the action, prevent the action, or allow the action to proceed on a modified version of the data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09576147&OS=09576147&RS=09576147
owner: Amazon Technologies, Inc.
number: 09576147
owner_city: Seattle
owner_country: US
publication_date: 20150105
---
A business government entity or other organization may process and store large amounts of data associated with users customers products services vendors finances or operations generally. In some cases the stored data may include sensitive data describing financial accounts personal identification information private health information access credentials and so forth. An organization may implement processes and standards to ensure that such sensitive data remains confidential and not accessible to unauthorized personnel inside or outside the organization.

Certain implementations and embodiments will now be described more fully below with reference to the accompanying figures in which various aspects are shown. Aspects may be implemented in many different forms and should not be construed as limited to the implementations set forth herein. Like numbers refer to like elements throughout this disclosure.

This disclosure describes implementations of systems devices methods and computer readable media for applying a tag corresponding to a data type of data and employing the tag to enforce data usage policies in a computing environment. A type tag may codify or otherwise indicate a type or classification of a portion of data. For example if data includes an email address the type tag may indicate that the data includes an email address. In some implementations the data and the type tag may comprise a data structure that may be passed between software modules through function calls and returns or via network communications. Alternatively the type tag may be incorporated into a portion of the data e.g. at the beginning of the data during a tagging process. The tagged data may be written to data storage system s file s and so forth. In some cases the tagged data may be copied or passed between software modules and computing systems such that the type tag propagates with the data as it is copied or passed. In some implementations data may be tagged when it is decrypted. Accordingly data passed between software modules or computing systems may be encrypted or tagged. The data tagging may be performed by a decryption module that executes separately from the software module processing the data. Alternatively the data tagging and decryption may be performed by executable instructions that are included in or otherwise propagate with the encrypted data.

In some implementations a software module may include executable code that is configured to apply data usage policies based on the type tag of the data. For example a policy may indicate that data tagged as an email address may be passed to an application programming interface API that writes the data to a file on disk but the policy may also indicate that such data may not be passed to an API that sends the data over a network. As another example a policy may indicate that data tagged as a credit card number or other payment instrument information may be written to a file or stored in a data storage system after the data has been redacted or obfuscated to prevent unauthorized use.

In some cases the tagged data may include sensitive data such as user identification information e.g. names addresses and so forth payment instrument information e.g. credit card numbers bank account information routing information and so forth financial data health data security credentials e.g. usernames passwords certificates and so forth or other types of data. An organization may enforce data handling policies that govern how sensitive data may be communicated stored written or otherwise processed. Implementations employ data tagging to codify data handling policies within an organization and to ensure that the policies are consistently uniformly and automatically applied by the various software modules that handle the data.

The computing device s may include a software module . In some cases the software module may include one or more executable modules such as an application executable library API other type of executable interface class object program and so forth. The software module may execute in the active runtime e.g. physical memory of the computing device s . The software module may provide any type of functionality and may include or not include user interface UI elements.

In some cases the source code of the software module may be written in a programming language that compiles to machine executable binary code such as C C Objective C and so forth. In such cases the source code may be compiled linked or otherwise built to generate the software module as including any number of machine executable instructions that execute on the processor s and within the operating system OS of the computing device s . In some cases the source code of the software module may be written in a programming language that compiles to an intermediate language e.g. byte codes such as Java C and so forth. In such cases the source code may be compiled linked or otherwise built to generate the software module as including any number of executable instructions e.g. byte code instructions that execute within a runtime application such as a Java Virtual Machine JVM C runtime or any other runtime interpreter virtual machine or execution engine. In some cases the software module may include any number of executable instructions in a scripting language or interpreted language such as JavaScript ActiveScript VBScript Perl and so forth. In such cases the software module may execute within a runtime application such as a runtime an interpreter a virtual machine a scripting engine and so forth.

In some cases the software module may be a web application configured to execute at least partly in a web browser or other container for the presentation of web content such as a WebView or UIWebView class. Accordingly the software module may include dynamic scripting or programmatic elements described using any programming language such as JavaScript ActiveScript VBScript Perl and so forth. Implementations support the use of any web browser to execute the software module including but not limited to one or more of the following Mozilla Firefox Microsoft Internet Explorer Google Chrome Apple Safari Rockmelt and so forth. Implementations also support the use of a web browser such as the Amazon Silk browser in which the processing of content is performed partly on the computing device s and partly on other device s . In cases where the software module is to be presented at least partly within a web browser or other container for the presentation of web content the software module may include any number of web pages that are described at least in part using a markup language such as any version of Hypertext Markup Language HTML Dynamic HTML DHTML Extensible HTML XHTML Extensible Markup Language XML and so forth.

The software module may access encrypted data . In some cases the software module may receive the encrypted data from another software module not shown executing on the computing device s or on other device s . Implementations support the handling of encrypted data that is encrypted using any method. Implementations support the use of public key e.g. asymmetric cryptosystems such as any version of the Rivest Shamir Adleman RSA cryptosystem the Integrated Encryption Scheme IES the Digital Signature Standard DSS the Cramer Shoup cryptosystem or others. Implementations also support the use of symmetric cryptosystems such as any version of the Advanced Encryption Standard AES the Data Encryption Standard DES or others.

The software module may be configured to process data in an unencrypted state. Accordingly the software module may provide the encrypted data to a decryption module that is configured to decrypt the encrypted data . In some implementations the decryption module may execute on a different set of one or more computing devices than the software module . In such cases the encrypted data may be sent over a network not shown to the decryption module . Alternatively as shown in the decryption module may execute on a same set of computing device s as the software module . In some implementations the decryption module may execute on the same computing device s as the software module to avoid the additional latency that may be introduced through network calls to decrypt the encrypted data .

The decryption module may be configured to include one or more of decryption logic tagging logic or authorization logic . In some cases one or more of the decryption logic tagging logic or authorization logic may be included in the executable code of the decryption module . Alternatively one or more of the decryption logic tagging logic or authorization logic may be included in modules that are called from and that execute separately from the decryption module such as libraries APIs and so forth. For example the decryption module may call out to another device that executes the authorization logic as part of a service and the service may indicate to the decryption module whether the computing device s or the software module is authorized to access unencrypted data . The service may also indicate whether the software module is configured to handle the tagged data .

In some implementations the determination whether the software module is authorized to handle the data may be based at least partly on the particular action that the software module is to perform on the data . In such cases the software module may indicate to the authorization logic or the decryption module the action s to be performed on the data . The authorization logic may then determine whether the software module is authorized to perform the action s . Accordingly in some implementations at least a portion of the action control logic may be incorporated into the authorization logic or the decryption module to apply policy based authorization decisions based on one or more of the following the identity of the software module the identity of the computing device s the type tag of the data or the action s to be performed on the data . In such cases the software module may be configured to send an authorization request to the decryption module or the authorization logic before attempting an action and the result s of the attempted action may be based on a response to the authorization request sent from the decryption module or the authorization logic .

The decryption module may generate tagged data that is provided to the software module . The tagged data may include a type tag and the unencrypted data . The type tag may identify a data type of the unencrypted data .

The decryption logic may perform operations to decrypt the encrypted data and generate the unencrypted e.g. plaintext data . In some implementations the decryption logic may call a key broker service to request decryption key s to be employed in decrypting the encrypted data . The key broker service may execute on the computing device s or on other device s and may provide cryptographic key s or other information to authorized calling processes. In some implementations the decryption logic may employ a trusted platform module TPM to perform decryption operations. The TPM may comprise a hardware based key store or cryptographic module that is incorporated into the computing device s . A TPM may provide a secure environment for performing cryptographic operations.

The tagging logic may perform operations to determine a type tag corresponding to a data type of the unencrypted data . For example the type tag may indicate that the data includes a user name user identifier e.g. identification number user description user address e.g. home address email address etc. access credential e.g. login password etc. other user information payment instrument information e.g. a credit card number bank account number and so forth or some other type of data. The type tag may comprise metadata that describes the data . Implementations support the use of a type tag that is of any size and in any format. In some cases the type tag may comprise a code e.g. numeric code that corresponds to a data type. Alternatively the type tag may comprise descriptive text. The type tag is described further with reference to . An example process for determining the type tag for an instance of data is described further with reference to .

The authorization logic may perform operations to determine whether the software module is authorized to access the unencrypted data . The authorization logic may determine whether the software module is authorized based on a name version number or other information that identifies the software module . In some cases the determination may be based on information regarding the computing device s where the software module is executing such as the hardware configuration software configuration OS network access domain membership physical location or other information. The determination may also be based on the presence of the name or other identifier of the software module on a white list of authorized software module s . In some cases the determination may be based on the absence of the name or other identifier of the software module on a black list of unauthorized software module s .

In some cases one or more network administrators domain administrators developers testers managers or other individuals may designate a software module as authorized or unauthorized based on its configuration based on the computing device s on which the software module executes or based on other considerations. In some cases the designation of a software module as authorized may be based on the software module executing on computing device s that are part of a domain or connected over a network that is accessible to authorized processes or individuals. In some cases an authorized software module may execute in an environment that is secured against outside access by a network firewall or via other means.

The authorization logic may also determine whether the software module is configured to interpret the type tag and otherwise process tagged data . In some cases the determination that the software module is configured to handle tagged data may be based on the software module including or having access to action control logic . The action control logic may include or have access to policy information describing one or more policies governing action s that may be performed on the data associated with the type tag . In some implementations the policy information may be stored on the computing device s and accessed by the action control logic . The policy information may also be incorporated into e.g. written into the action control logic . In some cases the action control logic may perform a network call to a service executing on another device the network call requesting at least a portion of the policy information .

In some implementations the decryption module may provide the tagged data to the software module if the authorization logic determines that the software module is authorized to access the unencrypted data and configured for handling the tagged data . If the authorization logic determines that the software module is unauthorized or is not configured to handle tagged data the decryption module may send an error message to the software module indicating that the requested decryption operation has failed. An example process for decrypting and tagging the data is described with reference to .

In some cases the data may include sensitive data. Sensitive data may refer to any information that is confidential critical personal or private with respect to one or more users. For example sensitive data may include financial information or payment instrument information for customers or other users such as bank account numbers routing numbers credit card numbers other account information financial history and so forth. Sensitive data may also include personal identification information for customers or other users such as names identification numbers e.g. social security numbers or other government issued identifiers addresses email addresses social network IDs other account IDs telephone numbers and the like. Sensitive data may also include health care information health status information medical history or other health related information associated with customers or other users. In some cases sensitive data may include security credentials such as login names user names passwords tokens certificates and so forth.

In some cases the data may include user behavior data such as order history purchase history browsing history or clickstream data e.g. describing actions taken by a user on a web site or other application . The data may also include any type of information provided by a user such as voice input data or other audio data images videos documents handwriting samples medical information and so forth.

An organization such as a business may enforce data usage policies to ensure that sensitive data is not accessible to individuals outside the organization. In some cases data usage policies may ensure that access to sensitive data is limited to authorized personnel processes or devices within an organization. The data usage policies may be described in the policy information . In some implementations the policy information may be incorporated into e.g. coded into the action control logic or the action control logic may access a file or other data structure that includes the policy information . Alternatively the action control logic may call an API or a service that executes on the computing device s or elsewhere to provide the policy information in response to a request. In some cases updated policy information may be sent from a server device to update the data usage policies within an organization. The policy information is described further with reference to .

The software module may be configured to perform one or more actions on the data . For one or more actions to be performed on the data by the software module the action control logic may determine based on the policy information whether to allow disallow or modify the action s . For example the software module may be written to include an instruction that communicates data over a network or that calls an API to perform such communication. The type tag may indicate that the data includes a credit card number. Based on the policy information indicating that a credit card number may not be communicated over a network the action control logic may prevent the action from being performed by the software module . In some cases the action control logic may be incorporated into the software module as a library software development kit SDK or other set of executable instructions. Alternatively the action control logic may be included in a module that executes separately from the software module and that is callable from the software module . The process for applying the policy information to control the action s performed on the data is described further with reference to .

The action control logic may be configured to trap intercept or otherwise detect action s attempted by the software module . The action control logic may then determine whether to allow prevent or modify the action s based on the policy information . The action s controlled by the action control logic may include but are not limited to one or more of the following 

Sending the data over one or more networks to other computing device s or to other software module s executing on the other computing device s 

Storing the data in data storage system s that are external to or incorporated into the computing device s or

Writing the data to a log file or other file s storing the data in a register or otherwise placing the data in persistent or active memory on the computing device s .

Other possible action s are described further with reference to . The other computing device s may include any type of device including but not limited to those types of devices described with reference to the computing device s . The data storage system s may include any number and type of datastore s such as relational databases and non relational e.g. NoSQL datastore s .

In some implementations the type tag may indicate a level of sensitivity or criticality of the data . For example the type tag may indicate that the data is public confidential highly confidential or critical personally identifiable information PII . PII may include information that enables the identification location or communication with an individual. The policy information may include policies that indicate the action s that may be performed on data of various sensitivities. For example PII may be tagged as highly sensitive such that actions for communicating or storing such data may be restricted. As another example public information may be tagged as low sensitivity with fewer restrictions.

In some implementations the encrypted data may be sent to the decryption module with an indication of the action to be performed on the data and the decryption module may inspect the software module to determine whether the indicated action corresponds to the action that is actually performed. In some cases the inspection may include determining one or more libraries that are loaded by the software module e.g. active libraries and determining whether those one or more libraries are configured to perform the indicated action .

As shown in in some implementations the encrypted data may include executable logic comprising one or more of the decryption logic the tagging logic or the authorization logic . Such executable logic may comprise active information that executes when the software module attempts to access and process the encrypted data . In some implementations the executable logic comprises byte codes that wrap the encrypted data . Such byte codes may execute within the same JVM or other runtime execution engine as the software module . In some cases the executable authorization logic may compute a signature of the software module and validate that the software module includes the action control logic for processing tagged data . The authorization logic may also verify that the software module is authorized for handling unencrypted data as described above. If the software module is appropriately configured and authorized the executable decryption logic may decrypt the encrypted data based on computed decryption key s or based on key s received from a key broker service. In some cases the JVM or other runtime may assert to the key broker service that it is authorized to receive the decryption key s . The decryption logic may also employ a TPM to perform cryptographic operations as described above. Through the operations of the executable logic the encrypted data may be decrypted and tagged to generate the tagged data . The tagged data may then be processed further by the software module .

In some implementations the action s if allowed may be performed on the tagged data as a whole. Accordingly the type tag may propagate with the data as it is stored communicated or otherwise processed. In some implementations the type tag may be cleared or removed from the data when the data is subsequently re encrypted. Accordingly implementations may provide for the data to be stored communicated or otherwise processed in either an encrypted state or a tagged state to ensure that unencrypted data is handled according to the data handling policies operative within an organization. Some implementations may also provide for an API or other service to enable a process to request the clearing of the type tag from the data . In such cases the API or other service may send a notification to one or more operators indicating that the type tag has been cleared.

In cases where the data is associated with a user implementations may also ensure the privacy of the data by requesting the user s permission to use the data . Such a request may be configured as an opt in in which the data may not be collected processed or used prior to receiving explicit permission to do so from the user associated with the data . Alternatively implementations may employ an opt out model in which the collection processing and use of the data are discontinued on receiving a request to do so from the user.

The various devices of the environments and may communicate with one another using one or more networks. Such networks may include public networks such as the Internet private networks such as an institutional or personal intranet or some combination of private and public networks. The networks may include any type of wired or wireless network including but not limited to local area networks LANs wide area networks WANs wireless WANs WWANs wireless LANs WLANs mobile communications networks e.g. 3G 4G etc. and so forth. In some implementations the communications between the various devices in the environments and may be encrypted or otherwise secured. For example such communications may employ one or more public or private cryptographic keys ciphers digital certificates or other credentials supported by a security protocol such as any version of the Secure Sockets Layer SSL or the Transport Layer Security TLS protocol.

Implementations support the use of a type tag that describes the data type of the data to any degree of specificity. For example an email address may be assigned a different type tag depending on whether the email address is external e.g. for a customer supplier vendor end user etc. or internal e.g. for an employee to an organization. In some cases the type tag may indicate a quantity of items described by the data .

In some implementations the type tag may be incorporated into a portion of the data . For example the data may be altered to include the type tag in a predetermined number of bits at the beginning or end of the data or at another predetermined position within the data . Alternatively the type tag and the data may be included in a data structure that is propagated by processes that handle the data . Implementations may prevent the clearing of the type tag from the data except by authorized individuals or processes to ensure the consistent application of data usage policies.

In some cases tagged data may include multiple type tags . For example if the data is an address e.g. home address of an individual the tagged data may include multiple type tags indicating respectively a zip code a street address sensitive user data and so forth.

For example as shown in a policy may indicate that the software module is to be prevented from writing data to a log file if the data includes a user name. A policy may allow the software module to write an email address to a log file if the email address is filtered to remove or obfuscate the username portion of the email address such that the domain portion of the email address is written to the log file. A policy may prevent the software module from sending a password over a network. The result s of such an attempted action may include sending an alert to notify operator s or other individual s of the attempted action .

The action s may be performed by the instructions of the software module . The action s may also be performed by other modules such as libraries APIs and so forth in response to calls or requests from the software module . The action s may include but are not limited to one or more of the following 

Calling a particular service API or device such as using a Representational State Transfer based e.g. RESTful API to call a particular service 

Passing the data a local service executing on the computing device s or to a remote service executing on the other computing device s 

Performing a network call that lacks adequate security such as attempting to communicate the data over a network connection that is unsecured via TLS or another security protocol 

In some cases the action control logic may access one or more whitelists or blacklists to validate the attempted action s . A whitelist may describe one or more processes devices or individuals authorized to access the data . A blacklist may describe one or more processes devices or individuals unauthorized to access the data .

Prevent the attempted action and send a notification e.g. an alert error exception assertion etc. describing the attempted action 

Prevent the attempted action and suspend or terminate execution of the software module that attempted the action .

The result s may also include allowing the action but modifying the data to filter remove obfuscate or otherwise alter a portion of the data . For example the domain portion but not the username portion of an email address may be written to a file stored in a datastore communicated over a network or otherwise handled. As another example a credit card number may be written stored communicated or otherwise handled in a modified form such that the last four digits of the credit card number are visible but the remainder of the credit card number is obfuscated. In some cases a user name may be written stored communicated or otherwise handled but with the family name filtered out.

In some cases a policy may describe a device or software module that is a target of the action and the policy may describe the result s of attempting the particular action with respect to the target. For example for a particular type tag policies may indicate that communicating the data to device A may be allowed but communicating the data to device B may not be allowed. As another example for a particular type tag policies may indicate that storing the data is allowed in both datastore X and datastore Y but an alert is generated when the data is stored in datastore Y.

The computing device s may include one or more input output I O devices . The I O device s may include one or more input devices such as a keyboard a mouse a pen a game controller a touch input device an audio input device e.g. a microphone a gestural input device a haptic input device an image or video capture device e.g. a camera or other devices. In some cases the I O device s may also include one or more output devices such as a display an audio output device e.g. a speaker a printer a haptic output device and so forth. The I O device s may be physically incorporated with the computing device s or may be externally placed.

The computing device s may include one or more I O interfaces to enable components or modules of the computing device s to control interface with or otherwise communicate with the I O device s . The I O interface s may enable information to be transferred in or out of the computing device s or between components of the computing device s through serial communication parallel communication or other types of communication. For example the I O interface s may comply with a version of the RS 232 standard for serial ports or with a version of the Institute of Electrical and Electronics Engineers IEEE 1284 standard for parallel ports. As another example the I O interface s may be configured to provide a connection over Universal Serial Bus USB or Ethernet. In some cases the I O interface s may be configured to provide a serial connection that is compliant with a version of the IEEE 1394 standard. The computing device s may also include one or more busses or other internal communications hardware or software that enables the transfer of data between the various modules and components of the computing device s .

The computing device s may include one or more network interfaces that enable communications between the computing device s and other network accessible devices. The network interface s may include one or more network interface controllers NICs or other types of transceiver devices configured to send and receive communications over one or more networks. The computing device s may also include a TPM as described above.

The computing device s may include one or more memories described herein as memory . The memory comprises one or more computer readable storage media CRSM . The CRSM may include one or more of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium a mechanical computer storage medium and so forth. The memory provides storage of computer readable instructions describing data structures program modules processes applications or other data for the operation of the computing device s . In some implementations the memory may provide storage of computer readable instructions or other information in a non transitory format.

The memory may include an OS module . The OS module may be configured to manage hardware resources such as the I O device s the I O interface s the network interface s and the TPM . The OS module may also be configured to provide various services to applications processes or modules executed by the processor s . The OS module may include one or more of the following any version of the Linux OS any version of iOS from Apple Corp. of Cupertino Calif. USA any version of Windows or Windows Mobile from Microsoft Corp. of Redmond Wash. USA any version of Android from Google Corp. of Mountain View Calif. USA and its derivatives from various sources any version of Palm OS from Palm Computing Inc. of Sunnyvale Calif. USA and its derivatives from various sources any version of BlackBerry OS from Research In Motion Ltd. of Waterloo Ontario Canada any version of VxWorks from Wind River Systems of Alameda Calif. USA or other operating systems.

The memory may include one or more of the modules described above as executing on the computing device s such as one or more of the software module or the decryption module . The action control logic may be incorporated into the software module or may execute in a separate module. One or more of the decryption logic the tagging logic or the authorization logic may be incorporated into the decryption module or may execute in separate module s . In cases where the software module is a web application the memory may also include a web browser to execute the web application. The memory may also include one or more other modules such as a user authentication module or an access control module to secure access to the computing device s a cryptographic module to secure communications to and from the computing device s and so forth.

The memory may include or have access to data storage which stores data for operations of the computing device s . The data storage may comprise a file system database array structured list tree or other data structure and may be a relational or a non relational datastore. The data storage may store any of the information described above as being present on the computing device s such as one or more of the encrypted data the tagged data the type tag the data or the policy information . The data storage may also store other data such as user authentication information access control data cryptographic information or other information. In some implementations at least a portion of the information stored in the data storage may be stored externally to the computing device s on other devices that may communicate with the computing device s via the I O interface s or the network interface s .

In the example of the encrypted data includes executable instructions e.g. active data comprising one or more of the decryption logic the tagging logic or the authorization logic . In some cases the executable instructions may be byte codes that are executed within a JVM or other runtime when the software module accesses the encrypted data . As described above the executable instructions may decrypt the encrypted data to generate the data analyze the data to determine the type tag and generate the tagged data including the data and the type tag . In some implementations the tagged data may be in the active runtime memory of the software module . Alternatively the tagged data may be stored in the data storage e.g. persistent memory . In some cases before decrypting the encrypted data the authorization logic included in the executable instructions may perform operations to determine whether the software module is authorized to access the unencrypted data and configured to process the tagged data .

At data may be received or otherwise accessed. In some cases the data may be provided by a software module that is configured to process the data and perform one or more actions on the data. The received or accessed data may be encrypted or unencrypted.

At a determination is made whether the data is encrypted. If so the process may proceed to . If the data is unencrypted the process may proceed to .

At a determination is made whether the unencrypted data is tagged e.g. associated with a type tag . If so the process may proceed to . If the unencrypted data is not associated with a type tag the process may proceed to . In some implementations system s within an execution environment may not be allowed to process data that is both unencrypted and untagged. In such cases if the unencrypted data is not associated with a type tag the process may proceed to .

At a determination is made whether the software module is configured to handle or otherwise process tagged data . As described above such a determination may be made based on whether the software module includes or has access to the action control logic . If the software module is not configured to handle tagged data the process may proceed to . If the software module is configured to handle tagged data the process may proceed to .

At a determination is made whether the software module is authorized to access unencrypted data. Such a determination may be performed by the authorization logic as described above. If the software module is not authorized the process may proceed to . If the software module is authorized the process may proceed to .

At in some implementations no further processing may be performed on the data. In some cases at a notification such as an error exception assertion or other type of notification may be issued. In cases where is reached because the execution environment does not allow the handling of unencrypted untagged data the notification may indicate that the execution environment does not allow the handling of data that is both unencrypted and untagged. In cases where is reached because the software module is not configured to handle tagged data the notification may indicate that the software module is not configured to handle tagged data . In cases where is reached because the software module is not authorized to access unencrypted data the notification may indicate that the software module is not authorized to access unencrypted data.

At at least a portion of the encrypted data may be decrypted by the decryption logic to generate the unencrypted data .

At the tagging logic may determine a data type of the data . This determination is described further with reference to .

At the tagging logic may determine a type tag corresponding to the data type of the data . The type tag may be applied to the data to generate the tagged data .

At processing of the tagged data may continue. As described above in some implementations tagged data may be provided to the software module for further processing. The tagged data may include the type tag and the unencrypted data .

At a software module may access tagged data that includes unencrypted data and a type tag . As described above the type tag may correspond to a data type of the data .

At a determination may be made that the software module is configured to perform an action on the data or to call another module to perform the action . For example the software module may include one or more instructions describing a method call to perform the action or request that another module perform the action . The action control logic may trap intercept or otherwise detect the instruction s that perform the action

At the action control logic may access the policy information governing the performance of action s on data type s .

At the action control logic may perform one or more operations corresponding to the result s of a policy for the type tag and the action s . As described above such result s may include allowing the action s preventing the action s allowing the action s to proceed on a modified version of the data and so forth. In cases where the policy indicates that the action s are to be performed on a modified version of the data the modified version of the data may be determined by applying one or more modifications described in the policy information .

At in some cases the policy information may indicate that a notification is to be sent when the action s are attempted on data with the type tag . Such a notification may comprise an error exception alert assertion or other type of message. The notification may be sent to one or more operators engineers managers or other individuals associated with the software module or the computing device s . A notification may be sent when the action s are prevented. In some cases a notification may be sent when the action s are allowed. In some cases the policy information may also indicate that a log file is to be written to include information regarding the result s of the attempted action s .

At the process may access data to be tagged. In some cases the data may be generated by decrypting the encrypted data . At a determination is made whether the data includes or was provided along with an indication of its data type. In some cases the indication of the data type may be explicitly provided by an individual or process that generated or sent the data or the encrypted data . The indication of the data type may also be implicit. For example if the data originated from or is received from a service that manages and provides security credentials e.g. passwords certificates tokens etc. an inference may be made that the data is a security credential. If it is determined at that the data includes or is provided with an indication of its data type the process may proceed to . At the indicated data type is determined and the process may proceed to .

If it is determined at that the data does not include an indication of the data type the process may proceed to . At the data may be analyzed to determine a data type. In some cases the analysis may include pattern recognition to identify patterns corresponding to particular data types. For example the analysis may search for a pattern . to recognize that the data includes an email address. An email address may be internal to the organization that manages the computing device s such as where the email address is that of an employee manager owner and so forth. An email address may be external to the organization such as where the email address is that of an end user customer vendor and so forth. The analysis to determine the data type may also include searching for 16 digit numbers or apply a mod 10 e.g. Luhn algorithm to determine that the data includes a credit card number or other payment instrument information. In some cases the pattern recognition may employ a positive analysis to determine that the data fits a known pattern. Alternatively the pattern recognition may employ a negative analysis to determine that the data does not fit a known pattern. The determination of the data type may also be performed at least in part manually.

At the type tag corresponding to the data type is determined. At the tagged data is generated to include the type tag and the data . In some cases the determination of the type tag may be made via a lookup table that maps data types to codes e.g. numeric codes .

Although examples herein describe applying the type tag to the data as part of a decryption process implementations are not so limited. In some implementations the tagging logic may analyze unencrypted data to determine its data type and apply the type tag independently of a decryption process.

Those having ordinary skill in the art will readily recognize that certain steps or operations illustrated in the figures above may be eliminated combined or performed in an alternate order. Any steps or operations may be performed serially or in parallel. Moreover the methods described above may be implemented as one or more software programs for a computer system and may be encoded in a computer readable storage medium as instructions executable on one or more processors.

Embodiments may be provided as a computer program product including one or more non transitory computer readable storage media having stored thereon instructions in compressed or uncompressed form that may be used to program a computer or other electronic device to perform processes or methods described herein. The computer readable storage media may include one or more of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium and so forth. For example the computer readable storage media may include but are not limited to hard drives floppy diskettes optical disks read only memories ROMs random access memories RAMs erasable programmable ROMs EPROMs electrically erasable programmable ROMs EEPROMs flash memory magnetic or optical cards solid state memory devices or other types of physical media suitable for storing electronic instructions. Further embodiments may also be provided as a computer program product including a transitory machine readable signal in compressed or uncompressed form . Examples of machine readable signals whether modulated using a carrier or unmodulated include but are not limited to signals that a computer system or machine hosting or running a computer program may be configured to access including signals transferred by one or more networks. For example a transitory machine readable signal may comprise transmission of software by the Internet.

Separate instances of these programs can be executed on or distributed across any number of separate computer systems. Thus although certain steps have been described as being performed by certain devices software programs processes or entities this need not be the case. A variety of alternative implementations will be understood by those having ordinary skill in the art.

Additionally those having ordinary skill in the art readily recognize that the techniques described above can be utilized in a variety of devices environments and situations. Although the present disclosure is written with respect to specific embodiments and implementations various changes and modifications may be suggested to one skilled in the art. It is intended that the present disclosure encompass such changes and modifications that fall within the scope of the appended claims.

