---

title: Cloud-based server computing system for and method of providing cross-platform remote access to 3D graphics applications
abstract: A server computing system in a client-server computing environment includes a virtual display driver that marshals and transmits graphics application programming interface (API) functions to a client via a network. The server may receive capability information from the client, allowing the virtual display driver to resolve differences between the APIs supported on the server and the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09467534&OS=09467534&RS=09467534
owner: hopTo Inc.
number: 09467534
owner_city: Campbell
owner_country: US
publication_date: 20151210
---
The present application is a continuation and claims the priority benefit of U.S. patent application Ser. No. 14 276 248 filed May 13 2014 set to issue as U.S. Pat. No. 9 219 779 on Dec. 22 2015 which is a continuation of U.S. patent application Ser. No. 13 399 764 filed Feb. 17 2012 now U.S. Pat. No. 8 769 052 issued on Jul. 1 2014 which is a continuation in part and claims the priority benefit of U.S. patent application Ser. No. 13 341 570 filed Dec. 30 2011 now U.S. Pat. No. 8 766 990 issued Jul. 1 2014 the disclosures of which are incorporated by reference herein.

The present disclosure relates generally to a server computing system in a client server computing environment and more particularly to a server computing system for and method of providing cross platform remote access to 3D graphics applications.

In a client server computing system a computer application or program that is running on one computer i.e. the server may be accessible to another computer i.e. the client over a network such as over the Internet. The user interface running on the server is exposed and visible to the client. In this way the client has remote access to the server and the user of the client device can interact with the application that is running on the server.

The server application may be for example an application that processes two dimensional 2D and or three dimensional 3D graphics. In this example a 2D and or 3D graphics application may be used to render graphical objects on a computer display. Currently in a client server computing system the high level graphics representation e.g. Direct3D OpenGL is reduced to an image e.g. a bitmap image at the server. The image is then transmitted from the server to the client over the network. Once received at the client the image is rendered on the client display. Creating compressing and transmitting these image files may result in high CPU utilization i.e. computing load at the server especially when the application displays objects in motion and when there are a large number of remote users sharing the server. Further images are often large and therefore transmitting images to a large number of remote users consumes a large amount of network bandwidth.

The disclosure provides a server computing system in a client server computing environment that provides cross platform remote access to 3D graphics applications and methods of efficiently providing graphic commands to a computer client located remotely from the server. The server computing system of the disclosure exhibits numerous advantages over existing systems. In various embodiments the server provides 3D graphics application capabilities to a large number of clients while avoiding excessive computing load. Further the server computing system of the disclosure may provide such 3D graphics application capabilities at lower network bandwidth requirements. Further still the server computing system of the disclosure may be configured to service clients operating on different platforms.

While client and display are illustrated as separate physical components e.g. illustrative of a common implementation of a desktop or a workstation computing system such as clients running natively on Windows Linux UNIX and Mac OS X operating system the capabilities of such separate components can also be integrated in a single device e.g. a mobile device or a tablet computer . For example the mobile device can be an iPad tablet computer on the iOS operating system Apple Inc. Cupertino Calif. or other mobile client on either the Android operating system Google Inc. Mountain View Calif. or the Windows CE operating system Microsoft Corp. Redmond Wash. . Thus as used herein the terms client or client computer should be understood to include any such implementations.

Server is a server computing system that includes a server application a server 3D library and a virtual display driver that in accordance with the client server model of computing collectively function to enable server to provide various resources or services to client which may be located remotely from the server. In accordance with the present disclosure these resources or services pertain to computer graphics.

Client includes a client application a client 3D library and a client display driver . Collectively these elements function to enable the client and the client user to consume computer graphics resources or services provided by server .

Server application represents an application executing i.e. running on server . The functionality of server application shall be visible to and accessible by client via network . For example server application may be a computer aided design CAD application such as AutoCAD Autodesk Inc. San Rafael Calif. USA or Cadence Virtuoso Cadence Design Systems San Jose Calif. a medical clinical workflow application such as Symbia.net Siemens AG Munich Germany an interactive mapping application such as Google Earth Google Inc. or a 3D game. The functionality of server application shall be visible to and accessible by client via network . For example the functionality of server application may be accessed from client using a process herein known as application publishing which is currently supported by products such as GraphOn GO Global Microsoft Remote Desktop Services and Citrix XenApp. Such application publishing may be performed in accordance with teachings of commonly owned U.S. Pat. No. 5 831 609 filed Jun. 6 1995 entitled Method and system for dynamic translation between different graphical user interface systems which is incorporated by reference as though fully set forth herein.

Client application represents an application installed on and executing on client that emulates a user interface of server application . For example the client application may run in a browser and be implemented in a scripting language such as JavaScript a multimedia platform such as Adobe Flash or as a browser add on e.g. ActiveX control for Internet Explorer . Additionally client application may run as a standalone application. Client application may receive various input commands from the user via an input device not shown in then transmit these commands to server and update the user interface of client application in response to computer graphics commands transmitted from server back to client over network .

Server 3D library and client 3D library provide a set of common interfaces or graphics functions to server and client respectively. These components are also referred to herein as a high level graphics language or a graphics application programming interface API . In one embodiment of the disclosure both server and client utilize a library such as OpenGL Khronos Group Beaverton OR . This enables server and client to communicate at an interface or a graphics functions level even if server operates on a different computing platform from client . This is in contrast to conventional client server computing systems that have utilized operating system specific APIs to accomplish computer graphics rendering which should not be considered cross platform.

Virtual display driver is a software code module that enables commands or functions that are called in server 3D library to be marshaled i.e. encoded and transmitted to client over network . Marshaling or marshalling is the process of transforming the memory representation of such commands to a data format suitable for transmission via network . For example virtual display driver assigns an ID to each graphics function and converts function arguments from a platform specific byte order into a common byte order that all clients can read regardless of the native byte order of the client device. This encoding allows graphic objects and their motions to be represented much more efficiently than the conventional method of generating an image for each arrangement or view of the objects. Significantly less data must be compressed and transmitted by the server greatly reducing CPU usage on the server and network bandwidth usage.

Client display driver includes a software code module that receives marshaled data from server via client application and executes the 3D library functions using client 3D library . This enables client to handle intensive graphics rendering operations such as blending or shading while enabling server to share server application with a large pool of clients. This also reduces the bandwidth requirements of network as pixel array image data e.g. in the form of Bitmap image files no longer needs to be transmitted from server to individual clients such as client as was the case in conventional client server computing systems.

By way of useful background illustrates a flow diagram of a conventional method of providing cross platform remote access to 3D graphics applications in a client server computing system. Prior to invocation of the conventional method a server has accepted a connection from a client and a request to a client application on the server. The conventional method may include the following steps.

At a step the server application calls or invokes the appropriate function or functions i.e. graphics commands in the server 3D library that will satisfy the client request. For example the graphics commands may include blending or shading.

At a step the server 3D library executes each of the graphics commands and calls a virtual display driver on the server with the resulting pixel image array data e.g. bitmap image data . As previously described herein this conventional implementation burdens the server with both intensive graphics rendering operations and with servicing clients which may be undesirable in architectures where it is desirable that the server support a number of remote users simultaneously.

At a step the virtual display driver on the server encodes the pixel image array data and transmits the information to the client via the network. This step may include conventional data compression techniques such as zlib encoding.

At a step a server component accepts a connection from client . For example the connection may be established in accordance with a Transmission Control Protocol Internet Protocol TCP IP model as is known to one of skill.

At an optional step server exchanges capability information i.e. negotiate protocols with client which may be of use in later steps of method in which virtual display driver encodes commands from server 3D library . For example the capability information received by server may include information about the particular APIs e.g. OpenGL windowing APIs supported by components of client such as client display driver . The capability information may include the version or versions of client 3D library e.g. OpenGL 3.2 that are available on client . The capability information may also include any extensions available on client that can act as an adapter between the functionality of different versions of server 3D library and client 3D library .

At an optional step server may forward the capability information from the server component that is in direct network communication with client to virtual display driver . Virtual display driver then stores the information in a memory so that the information can be quickly accessed. This enables virtual display driver to maintain e.g. expand update a central repository of capability information of all client devices. It also enables virtual display driver to quickly lookup the capability of a particular client at resource or service request time.

At a step server application on server is initialized. In the example of server application being an AutoCAD application this step may include for example server carrying out various startup instructions of the AutoCAD application. Generally server application loads and initializes server 3D library . Then or at an earlier or later time server 3D library queries virtual display driver to determine its capabilities. Virtual display driver generally returns the capabilities of client but may also return capabilities that are not supported by client if virtual display driver or other software on server can convert a command that client does not support into one or more commands that client does support.

At a step server application calls or invokes the appropriate function or functions i.e. graphics commands in server 3D library in response to a request of client . For example if client issues a request to draw a 3D cube a call is made to server 3D library to satisfy the draw 3D cube request.

At a step server 3D library receives the call made by server application at step . Server 3D library then executes the function by making one or more calls to the virtual display driver taking into consideration the version specific capabilities that were received and stored at step . Unlike conventional client server computing systems server 3D library does not generally execute the graphics commands and produce a bitmap image.

At a step virtual display driver encodes each of the received graphics calls and transmits the information to client via network . According to one aspect of the disclosure virtual display driver may distinguish between platform specific graphics calls i.e. the call is specific to the platform of server e.g. windowing functions and cross platform graphics calls. If a platform specific call is intercepted virtual display driver can either translate the call to a cross platform supported interface or to a different platform specific call that is supported by client . By way of one example translation may include converting a Microsoft Windows operating system implementation of the OpenGL specification e.g. a WGL function to an X11 operating system implementation equivalent e.g. a GLX function . The capability information of optional steps and may be used to determine the specific translation required for server and client. If a cross platform graphic call is intercepted virtual display driver may transmit the call as is. Alternatively if the 3D command makes use of only two dimensions and can be transmitted more efficiently via an equivalent 2D command the 3D command may be converted to the 2D alternative. In all of these cases the transmitted information is a representation of a graphics command that each client supports.

At a step server receives a request to publish a server application to client via network . For example a request to draw a 3D cube can be received by server . Optionally the request can include information about relevant capabilities of client such as the version or versions of client 3D library supported on client .

At a step server application calls or invokes the appropriate function or functions i.e. graphics commands in server 3D library in response to the request received by server . For example if the request is to draw a 3D cube the graphics commands may relate to geometric operations and or rendering options such as blending or shading.

At a step server 3D library receives the call made by server application and executes the function by making one or more calls to virtual display driver . In one embodiment of the disclosure the calls made to virtual display driver take into consideration the capabilities of client received at step . Virtual display driver encodes each of the graphics calls and provides a transmission including the one or more graphics calls to client via network .

Various embodiments of the present disclosure allow for the functionality of this disclosure to be performed by an intermediary device such as a cloud server not shown which may be associated with the server and client or reside elsewhere in the network e.g. in the cloud . For example while client is interacting with server some of the methods described herein may be offloaded to the cloud server to be performed. Additionally the cloud server may be used to facilitate interaction between individual or multiple clients and server by performing protocol and or graphics conversions as described herein.

