---

title: URI service system and method
abstract: A URI-redirection via machine-scannable-code system and method are provided herein.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09413715&OS=09413715&RS=09413715
owner: Yahoo! Inc.
number: 09413715
owner_city: Sunnyvale
owner_country: US
publication_date: 20150424
---
This application is a continuation of and claims priority from co pending U.S. patent application Ser. No. 13 943 311 filed on Jul. 16 2013 entitled URI SERVICE SYSTEM AND METHOD which is a divisional application of U.S. application Ser. No. 12 908 547 filed on Oct. 20 2010 now U.S. Pat. No. 8 583 795 titled URI SERVICE SYSTEM AND METHOD which is a continuation in part of U.S. application Ser. No. 12 852 730 filed on Aug. 9 2010 now U.S. Pat. No. 8 438 245 titled REMOTE APPLICATION INVOCATION SYSTEM AND METHOD all of which are incorporated herein by reference in their entireties for all purposes.

The present disclosure relates to networked computing services and more particularly to handling URIs via machine scannable codes.

The term mobile tagging refers to the process of providing data to mobile devices commonly through the use of data e.g. a Uniform Resource Locator or URL encoded in a two dimensional barcode. For example addresses and or URLs are commonly encoded in two dimensional barcodes e.g. QR Codes Data Matrix codes High Capacity Color Barcodes or HCCBs and the like that are printed in magazines on signs buses business cards or other object. Users with a camera phone equipped with an appropriate reader application can scan the image of the two dimensional barcode to display text contact information connect to a wireless network open a webpage in the phone s browser and or perform other operations. For example the Android operating system for mobile devices provided by Google Inc. of Menlo Park Calif. supports the use of QR codes by natively including a barcode scanner application on some device models and by including a browser that supports Uniform Resource Identifier URI redirection which allows QR Codes to send metadata to existing applications on the device. The Symbian OS provided by Nokia Corporation of Tempere Finland also includes a barcode scanner that is able to read QR Codes.

Generally speaking two dimensional barcodes encode some sort of actionable text or other data . For example text representing contact information when recognized by a barcode scanner application could add the contact information to an address book on the device. Similarly text representing an event or appointment when recognized could add the event or appointment to a calendar on the device text representing geo location information when recognized could open a map application on the device and so on.

However actionable text such as the examples mentioned above can only be acted on when the barcode scanner application understands the format of the actionable text encoded in the two dimensional barcode. Some format standards exist and are commonly used for encoding actionable text in a two dimensional barcode. For example perhaps the most common actionable text encoded in two dimensional barcodes is text that represents a URL e.g. http google.com m . This string of text would be generally recognized as a URL by virtually all barcode scanner applications and the resulting action would typically be to open the URL in a browser application on the device.

However not all actionable text formats are so universally recognizable and many different mobile device manufacturers and or mobile device operating system providers may implement proprietary standards for formatting actionable text in two dimensional barcodes. For example mobile devices provided by NTT DoCoMo Inc. of Tokyo Japan may recognize URLs encoded using an alternate format e.g. MEBKM TITLE NTT DOCOMO URL http i.nttdocomo.co.jp f . While mobile devices provided by NTT DoCoMo may recognize such a URI other types of mobile device may not recognize such a URI.

Similarly differing formal and or de facto standards may be used by different types of mobile devices for interpreting encoded contact information event appointment information and other types of information. Consequently it may be difficult or even impossible in some cases to provide a single two dimensional barcode that will cause a variety of different types of mobile devices to perform a desired action.

In addition different types of mobile devices may implement cameras or other scanning components that have differing capture capabilities. While various types of two dimensional barcode may be able to encode several kilobytes or more of information not all mobile devices may be able to properly recognize many densely packed two dimensional barcodes. For example a first mobile device with an auto focus macro lens may be able to capture and resolve a two dimensional barcode encoded with several kilobytes of data while a second mobile device with a fixed focus lens may only be able to resolve as little as 200 bytes of data. Consequently even if the first and second devices both supported the same actionable text format the second device may still be incapable of acting on an information dense two dimensional barcode due to hardware limitations of the second device s capture components.

The detailed description that follows is represented largely in terms of processes and symbolic representations of operations by conventional computer components including a processor memory storage devices for the processor connected display devices and input devices. Furthermore these processes and operations may utilize conventional computer components in a heterogeneous distributed computing environment including remote file Servers computer Servers and memory storage devices. Each of these conventional distributed computing components is accessible by the processor via a communication network.

The phrases in one embodiment in various embodiments in some embodiments and the like are used repeatedly. Such phrases do not necessarily refer to the same embodiment. The terms comprising having and including are synonymous unless the context dictates otherwise.

Reference is now made in detail to the description of the embodiments as illustrated in the drawings. While embodiments are described in connection with the drawings and related descriptions there is no intent to limit the scope to the embodiments disclosed herein. On the contrary the intent is to cover all alternatives modifications and equivalents. In alternate embodiments additional devices or combinations of illustrated devices may be added to or combined without limiting the scope to the embodiments disclosed herein.

In some embodiments other servers and or devices not shown may also be present. For example in some embodiments one or more proxy devices firewalls and or other intermediaries not shown may exist between URI service server some or all of clients A C and or rendering client .

In some embodiments URI service server may communicate with database via network a storage area network SAN a high speed serial bus and or via other suitable communication technology. In some embodiments URI service server publisher device and or database may comprise one or more replicated and or distributed physical or logical devices.

In various embodiments network may include the Internet a local area network LAN a wide area network WAN a cellular data network and or other data network. In many embodiments there may be more mobile devices than are illustrated.

The URI service server also includes a processing unit a memory and an optional display all interconnected along with the network interface via a bus . The memory generally comprises a random access memory RAM a read only memory ROM and a permanent mass storage device such as a disk drive. The memory stores program code for a remote application invocation routine see discussed below one or more web application interface routines a dynamic machine scannable code generation routine see discussed below and a URI redirection routine see discussed below . In addition the memory also stores an operating system . These software components may be loaded from a computer readable storage medium into memory of the URI service server using a drive mechanism not shown associated with a non transient computer readable storage medium such as a floppy disc tape DVD CD ROM drive memory card or the like. In some embodiments software components may also be loaded via the network interface rather than via a computer readable storage medium .

In some embodiments URI service server may further comprise a specialized interface not shown for communicating with database such as a high speed serial bus or the like. In some embodiments URI service server may communicate with database via network interface . In other embodiments database may reside in memory .

Although an exemplary URI service server has been described that generally conforms to conventional general purpose computing devices an URI service server may be any of a great number of devices capable of communicating with the network database and or clients A C for example a personal computer a game console a set top box a handheld computer a cell phone or any other suitable device.

The mobile device also includes a processing unit a memory and a display all interconnected along with the network interface via a bus . The memory generally comprises a random access memory RAM a read only memory ROM and a permanent mass storage device such as a disk drive flash memory or other persistent storage technology. The memory stores program code for a non web browser application as well as one or more routines for respectively handling machine scanning operations including scanning decoding and interpreting machine scannable codes URL handling operations e.g. a web browser and routines for invoking the web browser and non web browser URI handling operations e.g. one or more non web browser applications and routines for invoking the non web browser applications . In addition the memory also stores an operating system . These software components may be loaded from a computer readable storage medium into memory of the mobile device using a drive mechanism not shown associated with a non transient computer readable storage medium such as a floppy disc tape DVD CD ROM drive memory card or the like. In some embodiments software components may also be loaded via the network interface rather than via a computer readable storage medium .

The mobile device also includes a scanner capable of capturing information encoded in machine scannable codes. For example in some embodiments scanner may comprise a camera or other optical scanner for capturing optically encoded machine scannable codes such as barcodes two dimensional barcodes and the like. In other embodiments scanner may comprise a radio transmitter and or receiver for capturing radio frequency identification RFID tags and the like. In still other embodiments scanner may comprise suitable components for scanning or reading codes encoded in other machine scannable media

Although an exemplary mobile device has been described that generally conforms to conventional general purpose computing devices an mobile device may be any of a great number of devices capable of communicating with the network and or URI service server for example a personal computer a game console a set top box a handheld computer a cell phone or any other suitable device.

For example in various embodiments the actionable data payload may include information such as contact information for invoking address book or contact manager applications on the differing mobile device types geo location information for invoking geo mapping applications on the differing mobile device types event information for invoking calendar or appointment applications on the differing mobile device types downloadable content information for invoking store or e commerce applications on the differing mobile device types and the like. In some embodiments the actionable data payload may include one kilobyte or more of data but mobile device s scanner may not be capable of resolving more than about 200 bytes of data.

Publisher sends actionable data payload to URI service server which generates a unique URL associated with the data payload. URI service server stores in database the data payload and the unique URL associated with the data payload.

In some embodiments the actionable data payload may include one kilobyte or more of data and may thus be too large to encode into a machine scannable code than can be reliably scanned by mobile devices with relatively low fidelity scanner components e.g. cameras with fixed focus lenses . In such embodiments the unique URL may consist of far less data than the actionable data payload. For example in one embodiment the unique URL may consist of 20 or even fewer characters. In many embodiments the unique URL may consist of less than about 200 bytes of data so that when the unique URL is encoded into a machine scannable code e.g. a two dimensional barcode the machine scannable code will not contain more information than can be reliably captured by mobile device types with relatively low fidelity scanner components.

In the illustrated embodiment URI service server encodes the unique URL into a machine scannable code and sends to publisher the machine scannable code with the encoded unique URL. For example in one embodiment URI service server may encode the unique URL into a two dimensional barcode and send an image of the barcode to publisher . In other embodiments URI service server may send the unencoded unique URL directly to publisher in addition to or instead of the machine scannable code. In some embodiments publisher may perform the encoding of the unique URL into the machine scannable code. For example in one embodiment publisher may receive the unique URL and encode it into one or more RFID rags.

Publisher manifests the machine scannable code encoded with the unique URL into at least one publication . In some embodiments publication may comprise one of a run of printed publications such as a magazines flyers brochures catalogs books and the like. In such embodiments manifesting the machine scannable code into publication may comprise printing or causing to be printed an image of the machine scannable code on one or more pages of the printed publication. In other embodiments publication may comprise an electronic publication such as a web page e mail message s instant message s and the like. In such other embodiments manifesting the machine scannable code into publication may comprise including an image of the machine scannable code or a link to such an image within the content of an electronic document such as an HyperText Markup Language HTML document. In still other embodiments publication may comprise an article of manufacture in which case manifesting the machine scannable code into publication may comprise affixing an RFID encoded with the unique URL to the article of manufacture.

At some point mobile device encounters publication and machine scans the machine scannable code manifested therein. For example in some embodiments mobile device may capture a picture of a machine scannable code printed on a page of publication or rendered as an electronic document on a display of a display device. In other embodiments mobile device may capture data emanating from an RFID tag affixed to publication . As discussed above in some embodiments the machine scannable code may encode only about 20 200 bytes of data so the machine scannable code may be relatively easily scannable even if mobile device has relatively low fidelity scanner components.

Having obtained a representation of the machine scannable code manifested in publication mobile device decodes the unique URL encoded in the machine scannable code and sends a request for the unique URL to URI service server .

URI service server queries database and retrieves the actionable data payload associated with the unique URL. URI service server also determines a device type of mobile device . For example in one embodiment the request for the unique URL from mobile device may include an implicit indication of the client type e.g. a client hardware and or software type may be indicated via an HTTP referrer header or other metadata incident to the request . In other embodiments determining a device type of mobile device may include additional communications not shown with mobile device .

Having determined a device type of mobile device URI service server generates a URI including the actionable data payload the URI being formatted so that mobile device will be able to interpret and act on the data payload by invoking a non web browser application.

Because the URI is to invoke a non web browser application in some embodiments the URI may not be a URL URLs being a subset of URIs . However some device types may handle some URLs as well as non URL URIs by non web browser applications. For example iPhone OS iOS devices provided by Apple Inc. of Cupertino Calif. may handle URLs in the form of http maps.google.com maps . . . by invoking the Maps non web browser application if present while URLs in the form of http phobos.apple.com WebObjects . . . may be handled by the iTunes non web browser application.

In some embodiments generating such a device type specific URI includes obtaining and using a device type payload type mapping as discussed below. In some embodiments the generated device type specific URI may comprise one kilobyte or more of data.

URI service server sends the device type specific URI to mobile device which invokes an appropriate non web browser application to handle the data payload. In other embodiments an equivalent result may be obtained by generating and delivering an alternately formed device type specific data structure in place of the device type specific URI e.g. device type specific Extensible Markup Language XML data device type specific JavaScript Object Notation JSON data and the like.

In block routine obtains information related to a plurality of different device types. For example in one embodiment the plurality of different device types may include device types such as the following 

In some embodiments the information related to the plurality of different device types may also include information related to non web browser applications that exist on each device type for handling the different payload types including the URL and or URI formats that are required to invoke the non web browser applications on each device type.

In subroutine block see discussed below routine creates a set of device type payload type mappings corresponding to the plurality of different payload types and the plurality of different device types. Specifically illustrates an exemplary device payload mapping subroutine in accordance with one embodiment. Beginning in starting loop block subroutine iterates over each data payload type and beginning in starting loop block subroutine iterates over each mobile device type. In block subroutine creates a mapping between the current data payload type and the current mobile device type. For example in one embodiment the created mapping may indicate that for the current device payload combination a particular URI format should be used including a particular URI scheme and a particular scheme specific syntax possibly including placeholders for various types of scheme specific data. In ending loop block subroutine iterates back to block to process the next mobile device type if any and ending loop block subroutine iterates back to block to process the next data payload type if any . subroutine ends in block making the created mappings available to the caller.

In one embodiment the created mappings may be comprise executable program code for handling a particular type of actionable data payload. For example in one embodiment mappings for combinations of geo location data payload types and various mobile device types may be embodied as in the following exemplary code snippet 

Similarly in one embodiment mappings for combinations of event or appointment data payload types and various mobile device types may be embodied as in the following exemplary code snippet 

Referring again to in block routine obtains an actionable data payload. For example in one embodiment routine may receive the actionable data payload from a remote publisher device e.g. publisher . In other embodiments routine may obtain actionable data payload from database or other local or remote data store.

As discussed above in various embodiments the actionable data payload may include information such as contact information for invoking address book or contact manager applications on the plurality of different device types geo location information for invoking geo mapping applications on the plurality of different device types event information for invoking calendar or appointment applications on the plurality of different device types downloadable content information for invoking store or e commerce applications on the plurality of different device types and the like. In some embodiments the actionable data payload may include one kilobyte or more of data.

In block routine stores the actionable data payload e.g. in database or other data store. In block routine generates a unique URL and associates the unique URL with the stored actionable data payload. In some embodiments the unique URL may consist of between 20 200 bytes of data. In other embodiments the unique URL may be larger or smaller.

In subroutine block see discussed below routine provides the unique URL for exposure via a machine scannable code to a plurality of mobile devices of the plurality of different device types.

In decision block subroutine determines whether to provide the unique URL. In some embodiments such as those in which subroutine has generated and provided the machine scannable code in block subroutine may not need to also provide the unique URI. In other embodiments including those in which subroutine determined not to generate a machine scannable code in block subroutine may in block provide the unique URL to a remote device e.g. publisher for encoding into a machine scannable code and subsequent exposure to a plurality of mobile devices of differing device types. Subroutine ends in block .

Referring again to beginning in starting loop block routine processes an ongoing series of requests for the unique URL from mobile devices of differing device types the mobile devices having obtained the unique URL by scanning manifestations of a machine scannable code to which the mobile devices were exposed. For example in various embodiments the mobile devices may have been exposed to printed publications or rendered electronic documents including images of a two dimensional barcode encoded with the unique URL articles of manufacture with affixed RFID tags encoded with the unique URL and the like.

In subroutine block see discussed below routine processes the current request for the unique URL from the current requesting mobile device.

From time to time routine may obtain information about a new mobile device type that was not previously known at the time the unique URL was generated and associated with the actionable data payload. In decision block routine determines whether any such new device information has been obtained. If not in block routine iterates back to block to process the next request for the unique URL if any . If information about one or more new mobile devices has been obtained then in subroutine block see discussion of above routine creates new device payload mappings for each new combination of mobile device type and payload type then in block iterates back to block to process the next request for the unique URL if any . After all requests for the unique URL have been processed routine ends in block .

In block subroutine determines a device type of the mobile device that issued the request currently being processed. For example in one embodiment the request for the unique URL from the mobile device may include an implicit indication of the client type e.g. a client hardware and or software type may be indicated via an HTTP referrer header or other metadata incident to the request . In other embodiments determining a device type of the requesting mobile device may include additional communications with the mobile device.

In decision block subroutine determines whether the determined device type of the requesting mobile device is known and a device type payload type mapping exists. If so in block subroutine obtains the mapping corresponding to the determined device type of the requesting mobile device and the determined payload type of the actionable data payload associated with the requested unique URL.

In block subroutine generates a device type specific URI including the actionable data payload. The URI is formatted so that the requesting mobile device will be able to interpret and act on the data payload by invoking a suitable non web browser application.

In block subroutine delivers the device type specific URI to the requesting mobile device where a URI handling routine will invoke a non web browser application to handle the actionable data payload included in the device type specific URI. For example depending on the payload type the requesting mobile device may act on the actionable data payload by adding or prompting to add a contact to a contacts list adding or prompting to add an event or appointment to a calendar or event list opening a mapping application to a geo location downloading or prompting to download downloadable content from a store or other content downloading application and the like.

On the other hand if in decision block subroutine determines that the determined device type of the requesting mobile device is not known and or that a device type payload type mapping does not exist then in block subroutine may generate a generic URI according to the data payload type and in block deliver the generic URI to the requesting mobile device. For example in one embodiment for a geo location type payload subroutine may generate an image of a map targeting a particular geo location and deliver a URI of the image to the requesting mobile device to be handled by a web browser or other image handling application. For another example in one embodiment for an event or appointment payload subroutine may generate a web page including event or appointment details and deliver the URI of the web page to the requesting mobile device to be handled by a web browser. Similarly in one embodiment for contact information payload subroutine may generate a web page including contact details and deliver the URI of the web page to the requesting mobile device to be handled by a web browser.

QR Code encodes the unique URL as a binary data stream according to standards defined by DENSO Corporation of Kariya Aichi Japan in ISO IEC 18004. However ISO IEC 18004 lacks an encoding standard for interpreting the data stream on the application layer for decoding various data payload types as discussed herein. The SPARQCode encoding standard specifies common formats for the interpretation of different data payload types at the application layer.

In the illustrated embodiment non machine readable pictogram indicates that the geo location or map data is the payload type of the actionable data payload associated with the unique URL encoded in QR Code . The SPARQCode standard specifies additional pictograms indicating various other actionable data payload types including contact information appointment or event information web address information raw data and the like.

Tables 1 5 below illustrate unique URLs and device type specific URIs for an exemplary geo location payload type and an exemplary event appointment payload type according to various embodiments.

For example in one embodiment an exemplary geo location data payload here referring to the Pike Place Market in Seattle Wash. may be associated with an exemplary unique URL e.g. http q.msky.us m 2675 which may be mapped to device type specific URIs as set out in Table 1 below.

To handle the device type specific URIs listed in Table 1 a requesting device of one of the device types set out in Table 1 would invoke a local mapping application to handle the indicated device type specific URI.

However in alternate embodiments other device types may not allow for invocation of a local mapping application on the requesting device. For example in one embodiment set out in Table 2 for certain device types a device type specific URI may resolve to a dynamically generated image of a map showing the geo location specified by the data payload.

For another example in one embodiment an exemplary calendar event data payload here referring to an event celebrating the 58th Birthday of the Barcode associated with an exemplary unique URL e.g. http www.mskynet.com r MNN may be mapped to device type specific URIs as set out in Table 3 below.

To handle the device type specific URIs listed in Table 3 a requesting device of one of the device types set out in Table 3 would make a request to the indicated device type specific URI and invoke a local calendaring application to handle the resultant iCalendar data see Table 5 discussed below .

However in alternate embodiments involving other device types a local calendaring application may be invoked indirectly such as by emailing iCalendar data to an email address associated with the requesting device. Consequently the device type specific URIs set forth in Table 4 below may resolve to a web page that prompts for an email address to which iCalendar data would then be emailed subsequently invoking a local calendaring application on the receiving device.

Table 5 shows various device type specific iCalendar payloads that may be delivered to requesting devices of various types according to the device type specific URIs set out in Table 3 and Table 4. The various iCalendar data payloads set out in Table 5 would ultimately be handled by a local calendaring application on the requesting device of the indicated type.

Although Tables 3 5 refer to an exemplary event payload delivered in the iCalendar data format in other embodiments the methods disclosed herein may be similarly adapted to other payload data types and data delivery formats.

Rendering client parses the source document and reads the image tag for the machine scannable code. When rendering the page rendering client sends a single request to URI service server for the specified image resource. For example in one embodiment rendering client may send a GET request for the specified image resource to URI service server via the Hypertext Transfer Protocol HTTP .

URI service server parses the request and identifies a destination URI which may be a URL specified by the request. For example in one embodiment URI service server may receive a request including one or more name value pairs such as qt url and or data http 3A 2F 2Fxkcd.com and the destination URL may be the value specified by a particular name e.g. data . In some embodiments URI service server may have a publically available application programming interface API defining the name value pair to use to indicate a destination URL. In various embodiments the request may include additional name value pairs that may affect various parameters of the requested machine scannable code image. URI service server stores the identified destination URI in database . In some embodiments the destination URI may identify a resource hosted by publisher . In other embodiments the destination URI may identify a resource hosted by another web server not shown .

URI service server generates a unique URI which may be a URL corresponding to the identified destination URI. In some embodiments if the identified destination URI has been previously requested URI service server may alternatively retrieve a previously generated unique URI from database . In other embodiments URI service server may generate a new unique URI for some or all subsequent requests for an identified destination URI. URI service server associates the generated unique URI if generated with the identified destination URI in database .

URI service server generates a machine scannable code image with the unique URI encoded therein. For example in some embodiments URI service server may generate a two dimensional barcode such as those illustrated in discussed above. In alternate embodiments if the unique URI has previously been encoded into a machine scannable code URI service server may retrieve a stored copy of the previously generated machine scannable code image from database .

URI service server delivers the machine scannable code image to rendering client which inserts the image into the web page it is rendering and displays the rendered web page on a display associated with the rendering client .

At some point while the machine scannable code image is displayed on a display associated with the rendering client a mobile device scans the rendered web page with a machine scannable code scanner e.g. a camera component and a barcode or two dimensional barcode reading application to obtain a facsimile of the machine scannable code image . Mobile device decodes the unique URI encoded in the machine scannable code image and sends a request for the unique URI to URI service server .

URI service server receives the request and sends a query to database to retrieve the destination URI corresponding to the requested unique URI. URI service server then responds to the unique URI request with a redirect to the destination URI. Mobile device then sends a request for the destination URI to publisher if the destination URI identifies a resource hosted by publisher or to another web server hosting the resource identified by the destination URI.

Thus as illustrated in the scenario described above any destination URL or other URI of any length can be converted to a compact unique URL or other URI encoded into a two dimensional barcode image or other machine scannable code image simply by including an image tag directing URI service server via a single resource request to generate a unique URI and encode it into a dynamically generated machine scannable code image.

In decision block routine stores the one or more received destination URI s e.g. in database . In block routine determines whether more than one destination URI was specified by the request. If not routine proceeds to block discussed below . If however the request specified more than one destination URI then in decision block routine determines whether explicit conditional specifiers were provided for the two or more destination URIs. For example in some embodiments the request may include two or more additional name value pairs specifying conditions associated with the two or more destination URIs.

For example in one embodiment a request may include one destination URI identifying an iPhone version of a particular application and a second destination URI identifying an Android version of the particular application. In this exemplary embodiment the request may further include name value pairs such as device1 iphone and device2 android which act as conditional specifiers for the first and second destination URIs. For example the conditional specifier iphone may indicate that when a machine scannable code generated in response to the request is scanned by an iPhone device the device may be redirected to the first destination URI whereas if the machine scannable code is scanned by an Android device the device may be redirected to the second destination URI.

In other embodiments the request may specify time based conditional specifiers such as day1 MTWRF and day2 SS which may indicate that a first destination URI is associated with weekdays while a second destination URI is associated with weekend days. Similarly in some embodiments the request may specify location based conditional specifiers such as state1 WA CA and state2 OR ID which may indicate that a first destination URI is associated with the states of Washington and California while a second destination URI is associated with Oregon and Idaho. Similarly in some embodiments the request may specify location based conditional specifiers such as zip1 98101 and zip2 98028 which may indicate that a first destination URI is associated with the zip code 98101 while a second destination URI is associated with the zip code 98028. In other embodiments other types of conditional specifier may be specified.

If the request specifies such conditional specifiers then in block routine stores the conditional specifiers e.g. in database in association with their respective destination URIs.

However in other embodiments a distinction between different application platforms may be inherent in the destination URLs and or distinctions between multiple destination URIs may be implicitly determinable based on the destination URLs themselves. For example in one embodiment a first destination URI may specify a first country code top level domain while a second destination URI may specify a first country code top level domain. In such an embodiment it may be implicit in the destination URIs that when a machine scannable code generated in response to the request is scanned by a device in the first country the device may be redirected to the first destination URI but a device in the second country may be redirected to the second destination URI and so forth. Similar implicit determinations may be made for various other types of destination URIs such as destination URIs that identify geographical coordinates or other location based information e.g. country state city neighborhood block and the like . In such embodiments devices may be redirected to the destination URI identifying the nearest coordinate or location. In such and similar embodiments the request may not include explicit conditional specifiers in which case routine may proceed from decision block directly to block .

In decision block routine determines whether a unique URI corresponding to the destination URI or to the group of destination URIs already exists. If so then routine proceeds to block . If not then in block routine generates a unique URI corresponding to the destination URI s and in block associates the generated unique URI with the destination URI s e.g. in database . In some embodiments routine may omit decision block generating a new unique URI for every machine scannable code generated regardless of whether other previously generated unique URIs are also associated with the destination URI s .

In block routine determines whether the request includes a group identifier. For example in one embodiment the request may include a name value pair such as group 123 . If not then routine proceeds to block discussed below. If the request includes a group identifier then in decision block routine determines whether the group identifier has one or more associated image customization attributes. For example in various embodiments a group identifier may be associated with one or more customized attributes such as image size image color image caption or other text string non scannable logo and the like.

If the group identifier has no associated image customization attributes then routine proceeds to block discussed below. However if the group identifier has one or more associated image customization attributes then in block routine generates a machine scannable code image encoded with the unique URI according to the one or more associated image customization attributes.

In block routine generates a machine scannable code image encoded with the unique URI according to one or more default image attributes e.g. in a default color in a default size with a default caption with a default non scannable logo and the like .

In block routine delivers the generated machine scannable code image to the requestor for rendering to a display. Routine ends in block .

In block routine retrieves the one or more destination URI s e.g. from database that are associated with the requested unique URI. In decision block routine determines whether more than one destination URI is associated with the requested unique URI. If only one destination URI is associated with the requested unique URI then in block routine redirects the requestor to the destination URI. In various embodiments the redirection mechanism may include a 3xx HTTP status code or other suitable redirection and or forwarding scheme.

However if more than one destination URI is associated with the requested unique URI then in decision block routine determines whether it can obtain one or more stored and or implicit conditional specifiers associated with the more than one destination URI. If routine cannot obtain one or more stored and or implicit conditional specifiers then in block routine may prompt the requestor to select one of the destination URI s such as by delivering a web page offering the requestor the various destination URI s as selectable options. In block routine redirects the requestor to the selected destination URI. In various embodiments the redirection mechanism may include a 3xx HTTP status code or other suitable redirection and or forwarding scheme.

On the other hand if routine can obtain one or more stored and or implicit conditional specifiers then in block routine matches the request for the unique URI to one of the conditional specifiers. For example in various embodiments matching the request for the unique URI to one of the conditional specifiers may include determining metadata associated with the request such as a requesting device type or software platform a physical or logical location associated with the requesting device a time of day day of week month year or other time related metadata and the like. The determined metadata may then be compared against the two or more conditional specifiers to find a matching destination URI. In some embodiments one of the destination URIs may be associated with a default or fallback conditional specifier in the event that no other more specific conditional specifier is found to match the request metadata. In block routine redirects the requestor to the matched destination URI.

In block routine stores one or more pieces of analytic metadata associated with the just completed redirect. For example in various embodiments routine may determine and store metadata associated with the request such as a requesting device type or software platform a physical or logical location associated with the requesting device a time of day day of week month year or other time related metadata and the like. In some embodiments routine may alternately or additionally classify analytic data according to a group identifier associated with the unique URI if any .

Routine ends in block . Subsequently in some embodiments routine may provide such analytic data in the form of a report to a URI service client on whose behalf the unique URI redirection may have been provided.

Although specific embodiments have been illustrated and described herein it will be appreciated by those of ordinary skill in the art that alternate and or equivalent implementations may be substituted for the specific embodiments shown and described without departing from the scope of the present disclosure. This application is intended to cover any adaptations or variations of the embodiments discussed herein.

