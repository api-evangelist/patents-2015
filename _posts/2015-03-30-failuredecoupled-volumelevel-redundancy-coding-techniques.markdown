---

title: Failure-decoupled volume-level redundancy coding techniques
abstract: Techniques described and suggested herein include systems and methods for storing, indexing, and retrieving original data of data archives on data storage systems using redundancy coding techniques. For example, redundancy codes, such as erasure codes, may be applied to archives (such as those received from a customer of a computing resource service provider) so as allow the storage of original data of the individual archives available on a minimum of volumes, such as those of a data storage system, while retaining availability, durability, and other guarantees imparted by the application of the redundancy code. Sparse indexing techniques may be implemented so as to reduce the footprint of indexes used to locate the original data, once stored. The volumes may be apportioned into failure-decorrelated subsets, and archives stored thereto may be apportioned to such subsets.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09459959&OS=09459959&RS=09459959
owner: Amazon Technologies, Inc.
number: 09459959
owner_city: Seattle
owner_country: US
publication_date: 20150330
---
The use of network computing and storage has proliferated in recent years. The resources for network computing and storage are often provided by computing resource providers who leverage large scale networks of computers servers and storage drives to enable clients including content providers online merchants and the like to host and execute a variety of applications and web services. Content providers and online merchants who traditionally used on site servers and storage equipment to host their websites and store and stream content to their customers often forego on site hosting and storage and turn to using the resources of the computing resource providers. The usage of network computing allows content providers and online merchants among others to efficiently and to adaptively satisfy their computing needs whereby the computing and storage resources used by the content providers and online merchants are added or removed from a large pool provided by a computing resource provider as need and depending on their needs.

The proliferation of network computing and storage as well as the attendant increase in the number of entities dependent on network computing and storage has increased the importance of optimizing data performance and integrity on network computing and storage systems. Data archival systems and services for example may use various types of error correcting and error tolerance schemes such as the implementation of redundancy coding and data sharding. Furthermore capacity and cost of persisting increasing quantities of data may be mitigated by the use of data storage devices or media that is considerably faster at sequential storage than random access storage relative to other data storage devices.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein include systems and methods for storing original data of data archives archives on data storage systems using redundancy coding techniques. For example redundancy codes such as erasure codes may be applied to incoming archives such as those received from a customer of a computing resource service provider implementing the storage techniques described herein so as to allow the storage of original data of the individual archives available on a minimum of volumes such as those of a data storage system while retaining availability durability and other guarantees imparted by the application of the redundancy code.

In some embodiments archives such as customer archives containing any quantity and nature of data are received from customers of a computing resource service provider through a service such as an archival storage service provided by one or more resources of the computing resource service provider. The archives may be sorted according to one or more common attributes such as the identity of the customer the time of upload and or receipt by e.g. the archival storage service. Such sorting may be performed so as to minimize the number of volumes on which any given archive is stored. In some embodiments the original data of the archives is stored as a plurality of shards across a plurality of volumes the quantity of which either shards or volumes which in some cases may have a one to one relationship may be predetermined according to various factors including the number of total shards necessary to reconstruct the original data using a redundancy code.

In some embodiments the volumes may be grouped into volume sets and in some of such embodiments the volume sets may be apportioned into failure decorrelated subsets of volumes or cohorts . A given volume set may include depending on the redundancy coding scheme used volumes that store original data of incoming archives as well as volumes that store derived data e.g. with mathematical transformations applied according to the implementing redundancy coding scheme . The volume set may include more volumes than is necessitated by the implemented redundancy coding scheme. In such embodiments a quantity of failure decorrelated subsets of the volume set is determined such that the number of volumes in each failure decorrelated subset corresponds to the number of volumes necessitated by the implemented redundancy coding scheme. In some embodiments the failure decorrelated subsets are implemented such that incoming archives to be stored in a given volume set are committed to different failure decorrelated subsets according to some apportionment scheme e.g. based on an attribute of the incoming data itself in a predetermined sequence etc. 

In some embodiments one or more indices may be generated in connection with e.g. the order in which the archives are to be stored as determined in connection with the sorting mentioned immediately above. An index may in some embodiments be generated for each volume of the plurality and in such embodiments may reflect the archives stored on the respective volume to which it applies. The indices may be of any appropriate type and may include sparse indices. In embodiments where sparse indices are used the index e.g. for a given volume may point to a subset of archives stored or to be stored on e.g. that volume. The subset may be selected on any basis and for any appropriate interval. Examples may include the identification of the archives located at an interval of x blocks or bytes of the volume or the identification of the archives at an interval of n archives where x or n may be predetermined by e.g. the archival storage service or an administrator thereof.

In some embodiments the sparse indexes are used in connection with information relating to the sort order of the archives so as to locate archives without necessitating the use of dense indexes e.g. those that account for every archive on a given volume. Such sort order related information may reside on the volume s or in some embodiments on an entity separate from the volume s . Similarly the indexes may be stored on the same volume s to which they apply or in some embodiments separately from such volume s . In embodiments where the sort order related information and or the indexes are stored on the applicable volumes they may be included with the original data of the archives and stored therewith as shards as previously mentioned.

In some embodiments the original data of the archives and in embodiments where the indices are stored on the volumes the indices is processed by an entity associated with e.g. the archival storage service using a redundancy code such as an erasure code so as to generate redundancy coded shards that may be used to regenerate the original data and if applicable the indices. In some embodiments the redundancy code may utilize a matrix of mathematical functions a generator matrix a portion of which may include an identity matrix. In some of such embodiments the redundancy coded shards may correspond at least in part to the portion of the generator matrix that is outside of the identity matrix. Redundancy coded shards so generated may be stored in further volumes. The total number of volumes may include the volumes bearing the original data and indices as well as the volumes containing the redundancy coded shards.

In some embodiments retrieval of an archive stored in accordance with the techniques described herein may be requested by an entity such as a client device under control of a customer of the computing resource service provider and or the archival storage service provided therefrom as described in further detail throughout this disclosure. In response to the request the data storage system e.g. the system including the aforementioned volumes and providing the archival storage service may locate based on information regarding the sort order of the archives as stored on the volumes the specific volume on which the archive is located. Thereafter the index or indices may be used to locate the specific volume whereupon it is read from the volume and provided to the requesting entity. In embodiments where sparse indexes are employed the sort order information may be used to locate the nearest location or archive that is sequentially prior to the requested archive whereupon the volume is sequentially read from that location or archive until the requested archive is found.

In some embodiments if one of the volumes or a shard stored thereon is detected as corrupt missing or otherwise unavailable a new shard may be generated using the redundancy code applied to generate the shard s in the first instance. In some embodiments the new shard may be a replication of the unavailable shard such as may be the case if the shard includes original data of the archive s . In some embodiments the new shard may be selected from a set of potential shards as generated by e.g. a generator matrix associated with the redundancy code so as to differ in content from the unavailable shard such as may be the case if the unavailable shard was a shard generated from the redundancy code and therefore contains no original data of the archives . In such cases in certain embodiments an entirely new volume may be generated rather than a shard.

As used herein and as described in further detail throughout this disclosure the volumes may be any container whether logical or physical capable of storing or addressing data stored therein. Such data may include archives or derivatives thereof e.g. shards . Volumes may be associated with one or more other volumes as cohorts which may for example be arranged and or implemented in a failure decoupled manner as described in more detail herein. An archive may be any data object or collection of data objects to be processed using the techniques described herein. For example archives may be received by a customer of a system implementing the described techniques for processing and storage therewith. Shards may be any quantity of data such as a portion of a data object for example a plurality of shards may be generated as a result of encoding a data object using a redundancy code. A generator matrix may be a matrix of functions used by some of such redundancy codes and used to encode a given data object or portion thereof into their encoded form which as may be contemplated may be in the form of the aforementioned shards .

The data storage system may be any computing resource or collection of such resources capable of processing data for storage and interfacing with one or more resources to cause the storage of the processed data. Examples include physical computing systems e.g. servers desktop computers laptop computers thin clients and handheld devices such as smartphones and tablets virtual computing systems e.g. as may be provided by the computing resource service provider using one or more resources associated therewith services e.g. such as those connecting to the data storage system via application programming interface calls web service calls or other programmatic methods and the like. In some embodiments the resources of the data storage system as well as the data storage system itself may be one or more resources of a computing resource service provider such as that described in further detail below. In some embodiments the data storage system and or the computing resource service provider provides one or more archival storage services and or data storage services such as those described in further below through which the client entities may transact data such as the archives .

The archives may include any quantity of data in any format. For example the archives may be single files or in some embodiments may include several files. The archives may be encrypted by e.g. the client device s or in some embodiments may be encrypted by a component of the data storage system after receipt of the archives such as on the request of a customer of the data storage system and or the computing resource service provider.

The data storage system may sort the archives according to one or more criteria and in the case where a plurality of criteria is used for the sort such criteria may be sorted against sequentially and in any order appropriate for the implementation . Such criteria may be attributes common to some or all of the archives and may include the identity of the customer the time of upload e.g. by the client device and or receipt by the data storage system archive size expected volume and or shard boundaries relative to the boundaries of the archives e.g. so as to minimize the number of archives breaking across shards and or volumes and the like. As mentioned such sorting may be performed so as to minimize the number of volumes on which any given archive is stored. Such techniques may be used e.g. to optimize storage in embodiments where the overhead of retrieving data from multiple volumes is greater than the benefit of parallelizing the retrieval from the multiple volumes. Information regarding the sort order may be persisted e.g. by the data storage system for use in techniques described in further detail herein.

As previously discussed in some embodiments one or more indices may be generated in connection with e.g. the order in which the archives are to be stored as determined in connection with the sorting mentioned immediately above. The index may be a single index or may be a multipart index and may be of any appropriate architecture and may be generated according to any appropriate method. For example the index may be a bitmap index dense index sparse index or a reverse index. Embodiments where multiple indices are used may implement different types of indices according to the properties of e.g. the archives to be stored via the data storage system . For example a data storage system may generate a dense index for archives over a specified size as the size of the index itself may be small relative to the number of archives stored on a given volume and may also generate a sparse index for archives under that specified size as the ratio of index size to archive size increases .

The data storage system is connected to or includes one or more volumes on which the archives and in some embodiments the generated indices are stored. The volumes may be any container whether logical or physical capable of storing or addressing data stored therein. In some embodiments the volumes may map on a one to one basis with the data storage devices on which they reside and in some embodiments may actually be the data storage devices themselves . In some embodiments the size and or quantity of the volumes may be independent of the capacity of the data storage devices on which they reside e.g. a set of volumes may each be of a fixed size such that a second set of volumes may reside on the same data storage devices as the first set . The data storage devices may include any resource or collection of resources such as those of a computing resource service provider that are capable of storing data and may be physical virtual or some combination of the two.

As previously described one or more indices may in some embodiments be generated for each volume of the plurality and in such embodiments may reflect the archives stored on the respective volume to which it applies. In embodiments where sparse indices are used a sparse index for a given volume may point to a subset of archives stored or to be stored on that volume such as those archives which may be determined to be stored on the volume based on the sort techniques mentioned previously. The subset of volumes to be indexed in the sparse index may be selected on any appropriate basis and for any appropriate interval. For example the sparse index may identify the archives to be located at every x blocks or bytes of the volume e.g. independently of the boundaries and or quantity of the archives themselves . As another example the sparse index may identify every nth archive to be stored on the volume . As may be contemplated the indices whether sparse or otherwise may be determined prior to actually storing the archives on the respective volumes. In some embodiments a space may be reserved on the volumes so as to generate and or write the appropriate indices after the archives have been written to the volumes .

In some embodiments the sparse indexes are used in connection with information relating to the sort order of the archives so as to locate archives without necessitating the use of dense indexes e.g. those that account for every archive on a given volume . Such sort order related information may reside on the volume s or in some embodiments on an entity separate from the volume s such as in a data store or other resource of a computing resource service provider. Similarly the indexes may be stored on the same volume s to which they apply or in some embodiments separately from such volume s .

As mentioned the archives are stored bit for bit e.g. the original data of the archives on a subset of the plurality of volumes . Also as mentioned appropriate indices may also be stored on the applicable subset of the plurality of volumes . The original data of the archives is stored as a plurality of shards across a plurality of volumes the quantity of which either shards or volumes which in some cases may have a one to one relationship may be predetermined according to various factors including the number of total shards necessary to reconstruct the original data using a redundancy code. In some embodiments the number of volumes used to store the original data of the archives is the quantity of shards necessary to reconstruct the original data from a plurality of shards generated by a redundancy code from the original data. As an example illustrates five volumes three of which contain original data and two of which contain derived data such as redundancy coded data. In the illustrated example the redundancy code used may require any three shards to regenerate original data and therefore a quantity of three volumes may be used to write the original data even prior to any application of the redundancy code .

The volumes bearing the original data may each contain or be considered as shards unto themselves. In embodiments where the sort order related information and or the indexes are stored on the applicable volumes they may be included with the original data of the archives and stored therewith as shards as previously mentioned. In the illustrated example the original data is stored as three shards which may include the respective indices on three associated volumes . In some embodiments the original data and in embodiments where the indices are stored on the volumes the indices is processed by an entity associated with e.g. the archival storage service using a redundancy code such as an erasure code so as to generate the remaining shards which contain encoded information rather than the original data of the archives. The original data may be processed using the redundancy code at any time after being sorted such as prior to being stored on the volumes contemporaneously with such storage or after such storage.

Such encoded information may be any mathematically computed information derived from the original data and depends on the specific redundancy code applied. As mentioned the redundancy code may include erasure codes such as online codes Luby transform codes raptor codes parity codes Reed Solomon codes Cauchy codes Erasure Resilient Systematic Codes regenerating codes or maximum distance separable codes or other forward error correction codes. In some embodiments the redundancy code may implement a generator matrix that implements mathematical functions to generate multiple encoded objects correlated with the original data to which the redundancy code is applied. In some of such embodiments an identity matrix is used wherein no mathematical functions are applied and the original data and if applicable the indexes are allowed to pass straight through. In such embodiments it may be therefore contemplated that the volumes bearing the original data and the indexes may correspond to objects encoded from that original data by the identity matrix rows of the generator matrix of the applied redundancy code while volumes bearing derived data correspond to other rows of the generator matrix. In the example illustrated in the five volumes include three volumes that have shards corresponding to the original data of the archives while two have shards corresponding to the derived data . In this example the applied redundancy code may result in the data being stored in a 3 5 scheme wherein any three shards of the five stored shards are required to regenerate the original data regardless of whether the selected three shards contain the original data or the derived data.

In some embodiments if one of the volumes or a shard stored thereon is detected as corrupt missing or otherwise unavailable a new shard may be generated using the redundancy code applied to generate the shard s in the first instance. The new shard may be stored on the same volume or a different volume depending for example on whether the shard is unavailable for a reason other than the failure of the volume. The new shard may be generated by e.g. the data storage system by using a quantity of the remaining shards necessary to regenerate the original data and the index if applicable stored across all volumes regenerating that original data and either replacing the portion of the original data corresponding to that which was unavailable in the case that the unavailable shard contains original data or reapplying the redundancy code so as to provide derived data for the new shard.

As previously discussed in some embodiments the new shard may be a replication of the unavailable shard such as may be the case if the unavailable shard includes original data of the archive s . In some embodiments the new shard may be selected from a set of potential shards as generated by e.g. a generator matrix associated with the redundancy code so as to differ in content from the unavailable shard such as may be the case if the unavailable shard was a shard generated from the redundancy code and therefore contains no original data of the archives .

In some embodiments retrieval of an archive stored in accordance with the techniques described herein may be requested by an entity such as a client entity under control of a customer of the computing resource service provider and or the archival storage service provided therefrom as described in further detail throughout this disclosure. In response to the request the data storage system may locate based on information regarding the sort order of the archives as stored on the volumes the specific volume on which the archive is located. Thereafter the index or indices may be used to locate the specific archive whereupon it is read from the volume and provided to the requesting client entity . In embodiments where sparse indexes are employed the sort order information may be used to locate the nearest location or archive that is sequentially prior to the requested archive whereupon the volume is sequentially read from that location or archive until the requested archive is found. In embodiments where multiple types of indices are employed the data storage system may initially determine which of the indices includes the most efficient location information for the request archive based on assessing the criteria used to deploy the multiple types of indices in the first instance. For example if archives under a specific size are indexed in a sparse index and archives equal to or over that size are indexed in a parallel dense index the data storage system may first determine the size of the requested archive and if the requested archive is larger than or equal to the aforementioned size boundary the dense index may be used so as to more quickly obtain the precise location of the requested archive.

In some embodiments the volumes may be grouped such that each given volume has one or more cohorts . In such embodiments a volume set e.g. all of the illustrated volumes may be implemented that incoming archives to be stored on the volumes are apportioned to one or more failure decorrelated subsets of the volume set. The failure decorrelated subsets may be some combination of the volumes of the volume subset where the quantity of volumes correlates to a number of shards required for the implemented redundancy code. In the illustrated example the overall volume set may comprise two failure decorrelated subsets volumes in a horizontal row where a given constituent volume is paired with a cohort e.g. . In some embodiments the incoming archives are apportioned to one or more of the cohorts in the failure decorrelated subset according to for example a predetermined sequence based on one or more attributes of the incoming archives and the like.

The illustrated example shows for clarity a pair wise cohort scheme though other schemes are contemplated as within scope of this disclosure some of which are outlined in greater detail herein. In the illustrated example some of the volumes of the volume set store original data of incoming archives e.g. while others store derived data e.g. . The system e.g. may implement a number of failure decorrelated subsets to which to store the incoming archives and in the pair wise scheme pictured the volumes used for a given archive may differ based on some arbitrary or predetermined pattern. As illustrated some archives may be apportioned to volumes of a given cohort that are assigned to one pattern or failure decorrelated subset e.g. as shown by shaded archives and derived data while others are apportioned to volumes in a different pattern e.g. solid archives and derived data . The patterns as mentioned may be arbitrary predefined and or in some cases sensitive to attributes of the incoming data. In some embodiments patterns may not be used at all and the member volumes of a given failure decorrelated subset may be selected randomly from a pool of volumes in the volume set.

As previously discussed the data storage system may sort the archives according to one or more criteria and in the case where a plurality of criteria is used for the sort such criteria may be sorted against sequentially and in any order appropriate for the implementation . Such criteria may be attributes common to some or all of the archives and may include the identity of the customer abstractions defined by the customer e.g. larger data objects associated with multiple archives of the same customer the time of upload and or receipt archive size expected volume and or shard boundaries relative to the boundaries of the archives e.g. so as to minimize the number of archives breaking across shards and or volumes unique identifiers of the archives themselves and the like. As previously mentioned such sorting may be performed so as to minimize the number of volumes on which any given archive is stored. For example larger archives may be sorted based on expected volume size such that larger archives are stored earlier in the volume and increasingly smaller archives are stored later in the volume. Such techniques may be used e.g. to optimize storage in embodiments where the overhead of retrieving data from multiple volumes is greater than the benefit of parallelizing the retrieval from the multiple volumes. For example devices using removable media may incur significant latency penalties when the media are physically changed and the sort order may concatenate and apportion archives so as to minimize the number of removable media necessary for the retrieval of the archives. As previously mentioned information regarding the sort order may be persisted e.g. by the data storage system for use in techniques described in further detail herein.

In some embodiments the data storage system may sort the archives two or more times at least one of which may correspond to the various characteristics of the data storage system and or the volume itself. For example a first sort may include one or more of the criteria delineated above and a second sort may incident to actual storage of the archives on one or more volumes re sort the sorted archives according to boundaries storage space and other volume characteristics so as to optimize the storage of the archives .

As previously described e.g. in connection with one or more indices of one or more types may in some embodiments be generated for each volume of the plurality and in such embodiments may reflect the archives stored on the respective volume to which it applies. In some embodiments the indexes are used in connection with information relating to the sort order of the archives so as to locate archives without necessitating the use of dense indexes e.g. those that account for every archive on a given volume . Such sort order related information may reside on the volume s or in some embodiments on an entity separate from the volume s such as in a data store or other resource of a computing resource service provider. Similarly the indexes may be stored on the same volume s to which they apply or in some embodiments separately from such volume s .

As mentioned the original data of archives are stored on a subset of the plurality of volumes and the quantity of the subset of volumes may be equal to the minimum number of shards required by the redundancy code to regenerate the original data. Also as mentioned appropriate indices may also be stored on the applicable subset of the plurality of volumes in connection with the original data of the stored archives . The original data of the archives is stored as a plurality of shards across a plurality of volumes the quantity of which either shards or volumes which in some cases may have a one to one relationship may be predetermined according to various factors including the number of total shards necessary to reconstruct the original data using a redundancy code. As an example illustrates five volumes three of which contain original data of stored archives corresponding to the incoming archives and two of which contain data derived from mathematical functions of the applied redundancy code. In the illustrated example the redundancy code used may require any three shards to regenerate original data and therefore a quantity of three volumes may be used to write the original data prior to any application of the redundancy code .

Similarly to previously discussed the volumes storing the original data of the stored archives are processed at a volume level by an entity associated with e.g. the archival storage service using a redundancy code such as an erasure code so as to generate the remaining shards which contain encoded information rather than the original data of the archives. As previously mentioned the original data may be processed using the redundancy code at any time after being sorted such as prior to being stored on the volumes contemporaneously with such storage or after such storage. As illustrated by the shaded archive a given archive may in certain cases break between two or possibly more volumes due to size placement and the like. In embodiments where the redundancy code is applied at a volume level e.g. the entirety of the contents of the volumes bearing the original data of the archives being considered as a single data object to be processed by the redundancy code failure of one of the two volumes or shards on which the original data of the illustrated archive resides may not necessitate rebuilding of both volumes but only the volume that is unavailable.

The encoded information may be any mathematically computed information derived from the original data and depends on the specific redundancy code applied. In some embodiments the redundancy code may implement a generator matrix that implements mathematical functions to generate multiple encoded objects correlated with the original data to which the redundancy code is applied. In some of such embodiments an identity matrix is used wherein no mathematical functions are applied and the original data and if applicable the indexes are allowed to pass straight through. It may be therefore contemplated that the volumes bearing the original data and the indexes may correspond to objects encoded from that original data by the identity matrix rows of the generator matrix of the applied redundancy code while volumes bearing derived data correspond to other rows of the generator matrix.

Similarly to previously discussed if one of the volumes or a shard stored thereon is detected as corrupt missing or otherwise unavailable a new shard may be generated using the redundancy code applied to generate the shard s in the first instance. The new shard may be stored on the same volume or a different volume depending for example on whether the shard is unavailable for a reason other than the failure of the volume. The new shard may be generated by e.g. the data storage system by using a quantity of the remaining shards necessary to regenerate the original data and the index if applicable stored across all volumes regenerating that original data and either replacing the portion of the original data corresponding to that which was unavailable in the case that the unavailable shard contains original data or reapplying the redundancy code so as to provide derived data for the new shard.

As previously discussed in some embodiments the new shard may be a replication of the unavailable shard such as may be the case if the unavailable shard includes original data of the archive s . In some embodiments the new shard may be selected from a set of potential shards as generated by e.g. a generator matrix associated with the redundancy code so as to differ in content from the unavailable shard such as may be the case if the unavailable shard was a shard generated from the redundancy code and therefore contains no original data of the archives .

As depicted some of the volumes of the volume set are designated as storing original data of archives to be stored and others are designated as storing derived data such as may be the case when a redundancy code and volume level encoding techniques such as described elsewhere herein are implemented. However other storage mechanisms and schemes are contemplated hereby including object level encoding techniques. As previously mentioned and in the illustrated example the overall volume set may comprise multiple failure decorrelated subsets volumes along one of the four horizontal traces depicted where a given constituent volume is paired with one or more cohort e.g. . In some embodiments the incoming archives are apportioned to one or more of the cohorts participating in one or more of the the failure decorrelated subsets according to for example a predetermined sequence based on one or more attributes of the incoming archives and the like.

The illustrated example shows for clarity a pair wise cohort scheme though other schemes are contemplated as within scope of this disclosure some of which are outlined in greater detail herein. As mentioned in the illustrated example some of the volumes of the volume set store original data of incoming archives e.g. while others store derived data e.g. . The system may implement a number of failure decorrelated subsets to which to store the incoming archives and in the pair wise scheme pictured the volumes used for a given archive may differ based on some arbitrary or predetermined pattern such as those depicted by the horizontal traces . As illustrated some archives may be apportioned to volumes of a given cohort that are assigned to one pattern or failure decorrelated subset while others are apportioned to volumes in a different pattern . The size of a given failure decorrelated subset may be adjusted in some embodiments to account for the characteristics of the expected incoming archives the volumes themselves or a combination. For example the failure decorrelated subsets may be configured to have an arbitrary byte size boundary e.g. may contain X bytes an object quantity boundary e.g. may include X objects or be a value derived from the quantity of failure decorrelated subsets desired.

The patterns as mentioned may be arbitrary predefined and or in some cases sensitive to attributes of the incoming data. For example in the planar representation shown the patterns may be selected such that each of the volumes selected for the patterns are evenly allocated and or accessed with few or none of the members of each given cohort e.g. vertical pair over or underrepresented in a given pattern. The patterns may be predefined e.g. independently of the attributes of the incoming data and selected to optimize some operational parameter e.g. mean time between failure or annualized failure rate of each volume or device thereon performance of each volume and or device thereon minimization of slack space power on time and the like and each pattern may be used and reused in some sequence and or at some interval. For example each N number of archives are stored to a given failure decorrelated subset before the following N archives are stored to the next failure decorrelated subset in the sequence and so on.

In other examples attributes of the incoming archives may be used to apportion archives having those attributes to a given failure decorrelated subset . For example an identity value or hash thereof either unique to the incoming archive or a customer thereof may be mapped such that a given range of values within the possible extent of values is mapped to a given sequence. In some embodiments as a result a customer may be able to have partial or full control over the specific failure decorerlated subset to which their archives are stored.

In some embodiments patterns may not be used at all and the member volumes of a given failure decorrelated subset may be selected randomly from a pool of volumes in the volume set. For example the patterns may be constructed out of random or pseudorandom combinations of eligible volumes e.g. with the correct number of volumes capable of storing original data and the correct number of volumes capable of storing derived data according to the specific redundancy coding used.

As previously discussed in some embodiments one or more indices may be generated in connection with e.g. the order in which the archives are to be stored as determined in connection with the sorting mentioned previously. The index may be a single index or may be a multipart index and may be of any appropriate architecture and may be generated according to any appropriate method. For example the index may be a bitmap index dense index sparse index or a reverse index. Embodiments where multiple indices are used may implement different types of indices according to the properties of e.g. the archives to be stored in the volume . For example the volume may utilize a dense index for archives over a specified size as the size of the index itself may be small relative to the number of archives stored on a given volume and may also generate a sparse index for archives under that specified size as the ratio of index size to archive size increases .

In embodiments where sparse indices are used a sparse index for a given volume may point to subindexes which in turn mark representative locations on the volume. The subindexes may be an abstraction that points to data that resides at a predetermined interval. In some embodiments the subindexes may be additional data or metadata that is stored in connection with or in some embodiments directly upon the volume and at a predetermined interval. In such embodiments it may be contemplated that the subindexes may be stored as part of the shard on the volume in a similar fashion as described in connection with above for the index and the original data of the archives.

In some embodiments the predetermined interval may be in blocks bytes or other units of data. For example the subindexes may identify the archives to be located at every x blocks or bytes of the volume e.g. independently of the boundaries and or quantity of the archives themselves . In some embodiments the predetermined interval may be delinated by number of volumes. For example the subindex may point to every nth archive to be stored on the volume . As may contemplated the sparse index and in some embodiments the subindexes may be generated and or written at a time before the storage of the archives contemporaneously with such storage or after such storage. In some embodiments the sparse index and the subindexes may be stored in a reserved space on the volume e.g. after the archives have been stored.

In some embodiments the sparse index is used in connection with information relating to the predetermined sort order of the archives so as to locate specific archives. As previously mentioned such sort order related information may reside on the volume s or in some embodiments on an entity separate from the volume s such as in a data store or other resource of a computing resource service provider. An entity requesting a given archive stored on the volume may determine based on the sort order related information and by reading the index the nearest subindex that is sequentially prior to the requested archive on the volume . The requesting entity may then cause the volume to be sequentially read from the location of that subindex until the requested archive is located and fully read.

In embodiments where multiple types of indices are employed the requesting entity may initially determine which of the indices includes the most efficient location information for the requested archive based on assessing the criteria used to deploy the multiple types of indices in the first instance. For example if archives under a specific size are indexed in a sparse index and archives equal to or over that size are indexed in a parallel dense index the requesting entity may first determine the size of the requested archive and if the requested archive is larger than or equal to the aforementioned size boundary may use the dense index in favor of the sparse index as to more quickly obtain the precise location of the requested archive.

At step original data such as original data of archives received from customers of e.g. a data storage system or a computing resource service provider as described in further detail above in connection with is sorted by e.g. the data storage system or associated entity. For example as previously described the sort order may be implemented on one or more attributes of the incoming data.

At step one or more indices such as sparse indices are generated by e.g. the data storage system for the original data. As previously discussed in connection with at least there may be more than one index for a given volume and such parallel indices may be of different types depending on the nature of the archives and or original data being stored.

At step the original data is stored e.g. by the data storage system on the subset of volumes determined in connection with step and in the order determined in step . Additionally at step the index generated in step is stored e.g. by the data storage system on an appropriate entity. As previously discussed the index may be stored as part of a shard on which the original data is stored or in some embodiments may be stored on a separate resource from that which persists the volume.

At step the redundancy code is applied e.g. by the data storage system to the determined subset of volumes e.g. shards as previously discussed in connection with and additional shards containing data derived from the application of the redundancy code are stored on a predetermined quantity of volumes outside the subset determined in connection with step . For example as previously discussed the ratio of volumes e.g. shards storing the original data to the overall quantity of volumes including those storing the derived data generated in this step may be prescribed by the recovery encoding ratio of the redundancy code applied herein.

At step in normal operation requested data may be retrieved e.g. by the data storage system directly from the subset of volumes storing the original data without necessitating retrieval and further processing e.g. by the redundancy code from the volumes storing the derived data generated in step . However at step if any of the volumes are determined e.g. by the data storage system to be unavailable a replacement shard may be generated by the data storage system by reconstructing the original data from a quorum of the remaining shards and re encoding using the redundancy code to generate the replacement shard. As previously discussed in connection with the replacement shard may be the same or different from the shard detected as unavailable.

At step the system determines which failure decorrelated subset s to store archives incoming to the system. As previously mentioned the determination may be made on any appropriate basis such as using the attributes of the incoming archives attributes of the volumes and or the failure decorrelated subset s and the like.

At step a redundancy code such as a forward error correction code or erasure code may be applied to the archives by the system. As previously discussed such application may be made prior to after or in connection with the storage of original data of the archives to be stored and in some embodiments may result generation of shards of derived data as well as shards of original data.

At step some or all of the results of the encoding of step are stored by the system on an appropriate failure decorrelated subset for the given archive as determined in steps and . As mentioned in some embodiments such storage may be performed using volume encoding techniques and thus the original data may be directly stored and or retrieved from some or all of the volumes without necessitating decoding unless such volumes become unavailable.

At step in connection with e.g. a request from an owner or customer of the stored archives the system locates the appropriate failure decorrelated subset and retrieves the archives. The manner in which the system locates the appropriate failure decorrelated subset may differ depending on how such failure decorrelated subsets and archives are apportioned. For example if the sequence of failure decorrelated subsets is predetermined and keyed to a given attribute of the archive the archive attribute may be used to identify which of the failure decorrelated subsets is storing the data.

At step one or more indices such as sparse indices are generated by e.g. the data storage system and point to subindexes that identify predetermined locations on the volume. The locations may be predetermined based on the parameters of the specific implementation such as the size of the volume the speed of reading and or writing the volume e.g. sequentially the number of archives per volume and the like. As previously discussed the subindexes may be abstractions or in some embodiments may be data or metadata elements stored on or in connection with the volume.

At step the original data sorted in step is stored by the data storage system on the volume with subindexes associated with pointing to or stored at predetermined locations mentioned in step . The index generated in step is stored at step by the data storage system on a resource associated with volume or in some embodiments on the volume itself according to the techniques described above in connection with at least .

At step a request such as from a client entity or other entity connected to the data storage system and or the volume for a subset of the original data stored on the volume is received by the volume or the data storage system associated with the volume. The data storage system and or the requesting entity may as previously discussed have access to information regarding the sort order of the original data as determined in step and in embodiments utilizing sparse indexes may use the index to locate an appropriate subindex at step . As previously discussed in some embodiments the appropriate subindex is the nearest location marked by the subindex that is sequentially prior to the requested subset of original data as stored on the volume. Once the subindex is determined in step at step the volume is sequentially read e.g. by the data storage system or the storage device on which the volume is implemented from the location denoted by the appropriate subindex until the requested subset of original data is located and retrieved.

The computing resource service provider may provide various computing resource services to its customers. The services provided by the computing resource service provider in this example include a virtual computer system service a block level data storage service a cryptography service an on demand data storage service a notification service an authentication system a policy management service a task service and one or more other services . It is noted that not all embodiments described include the services described with reference to and additional services may be provided in addition to or as an alternative to services explicitly described. As described each of the services may include one or more web service interfaces that enable the customer to submit appropriately configured API calls to the various services through web service requests. In addition each of the services may include one or more service interfaces that enable the services to access each other e.g. to enable a virtual computer system of the virtual computer system service to store data in or retrieve data from the on demand data storage service and or to access one or more block level data storage devices provided by the block level data storage service .

The virtual computer system service may be a collection of computing resources configured to instantiate virtual machine instances on behalf of the customer . The customer may interact with the virtual computer system service via appropriately configured and authenticated API calls to provision and operate virtual computer systems that are instantiated on physical computing devices hosted and operated by the computing resource service provider . The virtual computer systems may be used for various purposes such as to operate as servers supporting a website to operate business applications or generally to serve as computing power for the customer. Other applications for the virtual computer systems may be to support database applications electronic commerce applications business applications and or other applications. Although the virtual computer system service is shown in any other computer system or computer system service may be utilized in the computing resource service provider such as a computer system or computer system service that does not employ virtualization or instantiation and instead provisions computing resources on dedicated or shared computers servers and or other physical devices.

The block level data storage service may comprise one or more computing resources that collectively operate to store data for a customer using block level storage devices and or virtualizations thereof . The block level storage devices of the block level data storage service may for instance be operationally attached to virtual computer systems provided by the virtual computer system service to serve as logical units e.g. virtual drives for the computer systems. A block level storage device may enable the persistent storage of data used generated by a corresponding virtual computer system where the virtual computer system service may only provide ephemeral data storage.

The computing resource service provider also includes a cryptography service . The cryptography service may utilize one or more storage services of the computing resource service provider to store keys of the customers in encrypted form whereby the keys may be usable to decrypt customer keys accessible only to particular devices of the cryptography service .

The computing resource service provider further includes an on demand data storage service . The on demand data storage service may be a collection of computing resources configured to synchronously process requests to store and or access data. The on demand data storage service may operate using computing resources e.g. databases that enable the on demand data storage service to locate and retrieve data quickly to allow data to be provided in responses to requests for the data. For example the on demand data storage service may maintain stored data in a manner such that when a request for a data object is retrieved the data object can be provided or streaming of the data object can be initiated in a response to the request. As noted data stored in the on demand data storage service may be organized into data objects. The data objects may have arbitrary sizes except perhaps for certain constraints on size. Thus the on demand data storage service may store numerous data objects of varying sizes. The on demand data storage service may operate as a key value store that associates data objects with identifiers of the data objects that may be used by the customer to retrieve or perform other operations in connection with the data objects stored by the on demand data storage service .

In the environment illustrated in a notification service is included. The notification service may comprise a collection of computing resources collectively configured to provide a web service or other interface and browser based management console. The management console can be used to configure topics for which customers seek to receive notifications configure applications or people subscribe clients to the topics publish messages or configure delivery of the messages over clients protocol of choice i.e. hypertext transfer protocol HTTP e mail and short message service SMS among others . The notification service may provide notifications to clients using a push mechanism without the need to check periodically or poll for new information and updates. The notification service may further be used for various purposes such as monitoring applications executing in the virtual computer system service workflow systems time sensitive information updates mobile applications and many others.

As illustrated in the computing resource service provider in various embodiments includes an authentication system and a policy management service . The authentication system in an embodiment is a computer system i.e. collection of computing resources configured to perform operations involved in authentication of users of the customer. For instance one of the services and may provide information from a user to the authentication system to receive information in return that indicates whether the user requests are authentic.

The policy management service in an embodiment is a computer system configured to manage policies on behalf of customers such as customer of the computing resource service provider . The policy management service may include an interface that enables customers to submit requests related to the management of policy. Such requests may for instance be requests to add delete change or otherwise modify policy for a customer or for other administrative actions such as providing an inventory of existing policies and the like.

The computing resource service provider in various embodiments is also equipped with a task service . The task service is configured to receive a task package from the customer and enable executing tasks as dictated by the task package. The task service may be configured to use any resource of the computing resource service provider such as one or more instantiated virtual machines or virtual hosts for executing the task. The task service may configure the one or more instantiated virtual machines or virtual hosts to operate using a selected operating system and or a selected execution application in accordance with a requirement of the customer .

The computing resource service provider additionally maintains one or more other services based at least in part on the needs of its customers . For instance the computing resource service provider may maintain a database service for its customers . A database service may be a collection of computing resources that collectively operate to run one or more databases for one or more customers . The customer may operate and manage a database from the database service by utilizing appropriately configured API calls. This in turn may allow a customer to maintain and potentially scale the operations in the database. Other services include but are not limited to object level archival data storage services services that manage and or monitor other services.

The computing resource service provider further includes an archival storage service . The archival storage service may comprise a collection of computing resources that collectively operate to provide storage for data archiving and backup of customer data. The data may comprise one or more data files that may be combined to form an archive. The archival storage service may be configured to persistently store data that may be infrequently accessed and for which long retrieval times are acceptable to a customer utilizing the archival storage service . A customer may interact with the archival storage service for example through appropriately configured API calls made to the archival storage service to generate one or more archives upload and retrieve the one or more archives or monitor the generation upload or retrieval of the one or more archives.

The computing resource service provider additionally maintains one or more other services based at least in part on the needs of its customers . For instance the computing resource service provider may maintain a database service for its customers . A database service may be a collection of computing resources that collectively operate to run one or more databases for one or more customers . The customer may operate and manage a database from the database service by utilizing appropriately configured API calls. This in turn may allow a customer to maintain and potentially scale the operations in the database. Other services include but are not limited to object level archival data storage services services that manage and or monitor other services.

Components of the request processing subsystem may interact with other components of the data storage service e.g. through network communications . For example some requests submitted to the request processing subsystem may involve the management of computing resources which may include data objects stored by the data storage servers . The request processing subsystem for example may receive and process requests to modify computing resources. For instance in some examples data objects are logically organized into logical data containers. Data objects associated with a logical data container may for example be said to be in the logical data container. Requests to the data processing subsystem may include requests for creating logical data containers deleting logical data containers providing an inventory of a logical data container providing or updating access control policy with respect to one or more logical data containers and the like.

The requests may be processed by the management subsystem upon receipt by the request processing subsystem . If applicable various requests processed by the request processing subsystem and or management subsystem may result in the management subsystem updating metadata associated with data objects and logical data containers stored in the metadata store . Other requests that may be processed by the request processing subsystem include requests to perform operations in connection with data objects. The requests for example may include requests to upload data objects to the data storage service to download data objects from the data storage service to delete data objects stored by the data storage service and or other operations that may be performed.

Requests processed by the request processing subsystem that involve operations on data objects upload download delete e.g. may include interaction between the request processing subsystem and one or more data storage servers . The data storage servers may be computer system communicatively coupled with one or more storage devices for the persistent of data objects. For example in order to process a request to upload a data object the request processing subsystem may transmit data to a data storage server for persistent storage. It is noted however that in some embodiments client e.g. customer computer systems may transmit data directly to the data storage servers instead of through severs in the request processing subsystem.

In some embodiments the request processing subsystem transmits data to multiple data storage servers for the purposes of redundantly storing the data to allow the retrievability of data in the event of failure of an individual data storage server and or associated data storage device. For example in some embodiments the request processing subsystem uses a redundancy in coding scheme such as erasure coding to deconstruct a data object into multiple parts that are stored among the data storage servers . The parts may be configured such that if access to a certain number of parts is lost the data object may nevertheless be reconstructible from the remaining parts that remain accessible.

To enable efficient transfer of data between the request processing subsystem and the data storage servers and or generally to enable quick processing of requests the request processing subsystem may include one or more databases that enable the location of data among the data storage servers . For example the request processing subsystem may operate a key value store that serves to associate identifiers of data objects with locations among the data storage servers for accessing data of the data objects.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. Servers as used herein may be implemented in various ways such as hardware devices or virtual computer systems. In some contexts servers may refer to a programming module being executed on a computer system. As used herein unless otherwise stated or clear from context the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed virtual or clustered environment. The application server can include any appropriate hardware software and firmware for integrating with the data store as needed to execute aspects of one or more applications for the client device handling some or all of the data access and business logic for an application. The application server may provide access control services in cooperation with the data store and is able to generate content including but not limited to text graphics audio video and or other content usable to be provided to the user which may be served to the user by the web server in the form of HyperText Markup Language HTML Extensible Markup Language XML JavaScript Cascading Style Sheets CSS or another appropriate client side structured language. Content transferred to a client device may be processed by the client device to provide the content in one or more forms including but not limited to forms that are perceptible to the user audibly visually and or through other senses including touch taste and or smell. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the web server using PHP Hypertext Preprocessor PHP Python Ruby Perl Java HTML XML or another appropriate server side structured language in this example. It should be understood that the web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein. Further operations described herein as being performed by a single device may unless otherwise clear from context be performed collectively by multiple devices which may form a distributed and or virtual system.

The data store can include several separate data tables databases data documents dynamic data storage schemes and or other data storage mechanisms and media for storing data relating to a particular aspect of the present disclosure. For example the data store illustrated may include mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as page image information and access rights information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. The application server may provide static dynamic or a combination of static and dynamic data in response to the received instructions. Dynamic data such as data used in web logs blogs shopping applications news services and other such applications may be generated by server side structured languages as described herein or may be provided by a content management system CMS operating on or under the control of the application server. In one example a user through a device operated by the user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser. It should be noted however that embodiments of the present disclosure are not necessarily limited to the context of web pages but may be more generally applicable to processing requests in general where the requests are not necessarily requests for content.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed and or virtual computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop laptop or tablet computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network. These devices also can include virtual devices such as virtual machines hypervisors and other virtual devices capable of communicating via a network.

Various embodiments of the present disclosure utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as Transmission Control Protocol Internet Protocol TCP IP User Datagram Protocol UDP protocols operating in various layers of the Open System Interconnection OSI model File Transfer Protocol FTP Universal Plug and Play UpnP Network File System NFS Common Internet File System CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network a satellite network and any combination thereof.

In embodiments utilizing a web server the web server can run any of a variety of server or mid tier applications including Hypertext Transfer Protocol HTTP servers FTP servers Common Gateway Interface CGI servers data servers Java servers Apache servers and business application servers. The server s also may be capable of executing programs or scripts in response to requests from user devices such as by executing one or more web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Ruby PHP Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM as well as open source servers such as MySQL Postgres SQLite MongoDB and any other server capable of storing retrieving and accessing structured or unstructured data. Database servers may include table based servers document based servers unstructured servers relational servers non relational servers or combinations of these and or other database servers.

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU or processor at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disc Read Only Memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected when unmodified and referring to physical connections is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. The use of the term set e.g. a set of items or subset unless otherwise noted or contradicted by context is to be construed as a nonempty collection comprising one or more members. Further unless otherwise noted or contradicted by context the term subset of a corresponding set does not necessarily denote a proper subset of the corresponding set but the subset and the corresponding set may be equal.

Conjunctive language such as phrases of the form at least one of A B and C or at least one of A B and C unless specifically stated otherwise or otherwise clearly contradicted by context is otherwise understood with the context as used in general to present that an item term etc. may be either A or B or C or any nonempty subset of the set of A and B and C. For instance in the illustrative example of a set having three members the conjunctive phrases at least one of A B and C and at least one of A B and C refer to any of the following sets A B C A B A C B C A B C. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of A at least one of B and at least one of C each to be present.

Operations of processes described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. Processes described herein or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for embodiments of the present disclosure to be practiced otherwise than as specifically described herein. Accordingly the scope of the present disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the scope of the present disclosure unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

