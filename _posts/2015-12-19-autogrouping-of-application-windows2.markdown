---

title: Auto-grouping of application windows
abstract: Described herein are techniques for automatically forming groups of application windows. The techniques may be performed with a computing device executing a windowing system, the windowing system having a user interface element that can be interacted with by a user to manage applications executing on the computing device. Each application may correspond to a separate process and application window. It may be determined that an operation has occurred that will evict the application windows of target applications from the display, and in response an application group may be automatically formed. The application group may have indicia of the evicted target applications. The application group may be provided to the user interface element, and when the user interface element is interacted with by the user the user interface element displays user-selectable graphic application indicators for both the application group and applications other than the target applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09575643&OS=09575643&RS=09575643
owner: Microsoft Technology Licensing, LLC
number: 09575643
owner_city: Redmond
owner_country: US
publication_date: 20151219
---
This application is a continuation patent application of application with Ser. No. 13 874 449 filed Apr. 30 2013 entitled AUTO GROUPING OF APPLICATION WINDOWS which is now allowed. The aforementioned application s are hereby incorporated herein by reference.

Windowing systems are well known in the art of computing. Windowing systems often provide facilities for a user to interactively manage applications programs with windows displayable on a display. Basic functions such as opening closing minimizing maximizing resizing switching and arranging applications are commonly found in some windowing systems. Some windowing systems may allow multiple windows for respective applications to be concurrently displayed on a display.

A problem recognized only by the inventors is that there are times when due to system or user activity a user s arrangement or layout of application windows on a display may be lost or overridden. A user s time and effort spent arranging windows may be lost when those windows are later evicted from the display. In addition there may be times when a user would benefit from being able to manipulate a group of windows as a logical set possibly in response to an implicit action such as launching an application.

The following summary is included only to introduce some concepts discussed in the Detailed Description below. This summary is not comprehensive and is not intended to delineate the scope of the claimed subject matter which is set forth by the claims presented at the end.

Described herein are techniques for automatically forming groups of application windows. The techniques may be performed with a computing device executing a windowing system the windowing system having a user interface element that can be interacted with by a user to manage applications executing on the computing device. Each application may correspond to a separate process and application window. It may be determined that an operation has occurred that will evict or occlude the application windows of target applications from the display and in response an application group may be automatically formed. The application group may have indicia of the evicted target applications. The application group may be provided to the user interface element and when the user interface element is interacted with by the user the user interface element displays user selectable graphic application indicators for both the application group and applications other than the target applications.

Many of the attendant features will be explained below with reference to the following detailed description considered in connection with the accompanying drawings.

Embodiments discussed below relate to forming groups of application windows and allowing the user to interact with the groups in ways that the application windows themselves might be interacted with. Discussion will start with an overview of windowing systems. Layout and operations in a tiled windowing system are discussed next followed by description of how and when an application group may be formed. Integration of application groups into the windowing system is then covered along with explanation of how a user can interact with application groups and application windows in similar manners.

In one embodiment the tiled windowing system manages the layout of windows in a way that prevents application windows from occluding other application windows possibly with exceptions such as previewing manual window rearrangements dragging windows and other transient conditions.

The third example layout shows a third application having been inserted. With tiled layout management a user may only need to designate the third application window to be inserted and or possibly designate a slot or location for inserting the third application window the tiled window manager may automatically resize the displayed application windows or take other measures to accommodate the new application window. The fourth and fifth example layouts show other divisions of screen real estate that may be used. For ease of discussion examples discussed below show tiling using only a single horizontal row of application windows.

As can be seen a variety of user originated or system originated actions can trigger the removal of application windows from the display . For example a dormant off screen application might receive a wakeup signal and automatically enter a fullscreen mode in turn displacing application windows or a two display system might lose a display which the windowing system might interpret as an event that should close the windows on the lost display. Or an application might launch another application and the launched application might occupy the display.

Applications may be handled in different ways when they are evicted from the display . In some implementations applications that are evicted from the display are suspended. In other implementations applications may respond in customized ways to being displaced. For example one application may respond to an inactive signal by terminating whereas another application may respond by continuing to execute in the background. As will be described further below the windowing system may provide user interface elements to allow a user to quickly reactivate hidden or dormant applications open favorite or recent applications toggle between different applications and so forth. These same features of the windowing system may also handle application groupings or application group objects which may be formed by an explicit user instruction or implicitly by user or system actions that cause application windows to be evicted from the display for example.

The information in or associated with an application group object may vary according to implementation specifics. It may be possible to have minimal information such as a list of the applications in the group and the order they appear on the screen or for example a layout template and indicia of which regions thereof have which application windows . If the applications provide information about their size such information might be sufficient to enable re creation of the initial window layout that corresponds to the application group object . In other implementations the application group object might include information such as application states window sizes and locations and so forth. Such layout information might also include z order information or information that binds the group of windows together in their arrangement.

The grouping manager might capture an image of the display when the grouping event occurs. This image may be used as a thumbnail that is displayed when the windowing system needs to graphically represent the application group object. If the applications in the group continue to execute in the background when they are undisplayed then a live thumbnail may be generated from the applications in the group.

Note that in the example of the group store has a row for each application group object. Each row may have an identifier e.g. 1 and indicia of its member including at least information identifying which applications or application windows are in the group. In the example of group N is formed responsive to the grouping event received while applications A and B are displayed.

Regarding the grouping event such an event may originate from system activities or from user activity. A number of approaches may be used to detect or signal grouping events. The windowing system may have a laundry list of high level user interactions or commands that are to trigger a grouping event. Such a list might include fullscreen or maximize commands a logoff command switching a multi monitor mode from an extended mode e.g. two monitors treated as a single virtual display to a duplicate mode two monitors mirroring the same graphic content closing all windows interactively placing a new application window in a way that displaces the currently displayed applications and so forth. In addition events that do not relate to displacement of windows may also trigger group captures. The windowing system may have an application programming interface API that is used by applications and certain calls or methods of that API might be designed to have side effects of triggering grouping events. Other techniques for implicitly triggering grouping events may be used such as providing a layout manager of the windowing system with logic to detect certain types of layout changes or conditions that might correspond to a group of applications being simultaneously removed from the display.

In sum application group objects are containers that may be implicitly created to capture a screen view and in particular application windows and their layout before the screen view is altered lost displayed etc. The application group object may have information that allows the screen view to be substantially reproduced when requested. In addition as described next the application group object may in some ways be treated by the windowing system as an ordinary window object subject to ad hoc manipulation by a user in some same ways that windows are interactively manipulated.

The tiled windowing system may have various features or facilities that allow a user to manage applications on the computing device. Such features might include a recent applications module an active applications module and or a favorites module . These modules cooperate with the windowing system to track the semantically relevant information. When applications are opened or used the windowing system might populate a recent applications list with indicia of recently used applications. The windowing system might similarly populate or provide an active applications list which might include applications currently displayed on any connected monitors and or applications that are executing or suspended but are not currently displayed. Similarly a user might maintain a favorite applications list . These lists are used by the graphical user interface to display corresponding user interface elements that can be activated and used by the user to activate applications or application groups as the case may be.

The graphical user interface may be designed to handle group application objects in same ways that applications are handled. The group application objects in the group store may be added to any of the application lists and may be manipulated in the corresponding user interface elements . For example if the user selects the app5 icon in user interface element the corresponding application might be opened and a process of interactive placement of the application might begin. On the other hand if the application group icon is selected by the user then the corresponding application group object may be accessed and used to display the application windows of the applications in the group preferably recreating the layout of those applications when the group was formed. Note that this action might itself act as a grouping event that triggers formation of a new application group object for any applications displaced by the application windows of the selected group.

The ways in which an application group object may stand in the place of an application window are nearly limitless although some such functional equivalencies may be more useful than others. User controlled windowing operations that affect application window layouts or that determine which applications are displayed undisplayed or active inactivated may particularly benefit from being designed to accommodate application group objects as well as applications themselves.

In one embodiment the graphic representation whether a thumbnail or a generic symbol may itself serve as a new user interface element that can be provided with features such as menus selectable application icons or inquiries that allow applications to be individually selected and activated from the group which may or may not remove the selected application from the group . Similarly a group might be dissolved might have its applications added to the favorites list and so on.

While embodiments discussed above may be implemented with and helpful for a tiled windowing system the embodiments may be as readily implemented on non tiling or occlusion permitting windowing systems.

As noted a user may also explicitly trigger a group to be formed for instance using a specific command. In this case the applications and layout might remain after the group is formed and stored. In other words group formation need not be linked to eviction of application windows from a display.

In addition while application groups have been described as useful for reopening a prior application window arrangement application groups as sets of applications may be used in other ways as well. For example dragging a group onto a favorites tool might add the member applications to the favorites. A gesture or some type of drop target e.g. a trashcan might be provided to terminate the processes of the member applications and to dissolve the group. Gestures for managing execution state of an application might be applied to groups to manage as a single unit the execution state of the member applications. The implicit formation of application groups in ways described above is useful regardless of how those groups are ultimately used and in fact group formation has high utility because of the many practical uses of application groupings.

Application groups may be integrated with various functions of a windowing system. For example any manipulation of an application window such as closing hiding moving resizing replacing full screening and others may be applied to application groups.

Further regarding restoring applications in a group in one embodiment a graphic representation of an application group can be interacted with to selectively pull out applications or divide the group. Suppose a group is created having three applications and the group is in an application switching list. The group may be selected and shown onscreen and at that time the user may pick which of the member applications are to actually be inserted on the display any unselected applications can remain in the group which remains in the switching list perhaps as a new subgroup of the remaining applications.

Inclusion of the same application in different groups may be handled in different ways. Cross group inclusion may be simply prohibited. In one embodiment an application might retain state information for each group that it is a member of.

As discussed above windowing systems whether tiled or not may at times replace or remove application windows that are currently being displayed. To avoid possible loss of a user s time spent selecting and arranging application windows indicia of the content of a display or a managed area thereof may be captured and stored as an application group object. The application group object may then be used in the windowing system in places where applications or their windows are used.

Embodiments and features discussed above can be realized in the form of information stored in volatile or non volatile computer or device readable devices. This is deemed to include at least devices such as optical storage e.g. compact disk read only memory CD ROM magnetic media flash read only memory ROM or devices for storing digital information. The stored information can be in the form of machine executable instructions e.g. compiled executable binary code source code bytecode or any other information that can be used to enable or configure computing devices to perform the various embodiments discussed above. This is also deemed to include at least volatile memory such as random access memory RAM and or virtual memory storing information such as central processing unit CPU instructions during execution of a program carrying out an embodiment as well as non volatile devices storing information that allows a program or executable to be loaded and executed. The embodiments and features can be performed on any type of computing device including portable devices workstations servers mobile wireless devices and so on.

