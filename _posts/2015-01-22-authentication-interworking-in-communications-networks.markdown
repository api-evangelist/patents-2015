---

title: Authentication interworking in communications networks
abstract: A system performs authentication for real-time communications (RTC). The system receives a request from a browser application for web authentication of a user. The system then performs the web authentication by a security provider by reaching a first resource, where the security provider determines a security principal for the user. Subsequently, the system executes a security Groovy script to obtain an identity mapping from a second resource different than the first resource, where the identity mapping maps the security principal to an Internet Protocol (IP) Multimedia Subsystem (IMS) identity. The system then provides the identity mapping to a runtime Groovy script.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09401908&OS=09401908&RS=09401908
owner: Oracle International Corporation
number: 09401908
owner_city: Redwood Shores
owner_country: US
publication_date: 20150122
---
One embodiment is directed generally to a communications network and in particular to authentication in a communications network.

Voice communications are increasingly shifting to web and Internet based applications that are outside of traditional telephony networks. Enterprise users desire to access their unified communications applications with their own Internet connected mobile devices and consumers increasingly prefer Internet based communications channels for accessing contact centers.

Some communications service providers CSPs and enterprises have deployed real time communications RTC applications based on a protocol known as WebRTC. WebRTC is an open Internet standard for embedding real time multimedia communications capabilities e.g. voice calling video chat peer to peer P2P file sharing etc. into a web browser. For any device with a supported web browser WebRTC can use application programming interfaces APIs to equip the device with RTC capabilities without requiring users to download plug ins. By using WebRTC CSPs may create new web based communications services and extend existing services to web based clients.

WebRTC communications are authenticated according to typical web authentication technologies and corresponding databases. However some communications networks use authentication technologies and databases that are different than web authentication technologies and databases. This may cause authentication issues when a WebRTC applications needs to communicate with an entity in such communications networks.

One embodiment is a system that performs authentication for real time communications RTC . The system receives a request from a browser application for web authentication of a user. The system then performs the web authentication by a security provider by reaching a first resource where the security provider determines a security principal for the user. Subsequently the system executes a security Groovy script to obtain an identity mapping from a second resource different than the first resource where the identity mapping maps the security principal to an Internet Protocol IP Multimedia Subsystem IMS identity. The system then provides the identity mapping to a runtime Groovy script.

Embodiments provide flexible authentication for Real Time Communications RTC of a WebRTC browser application with another entity connected to a Session Initiation Protocol SIP network. In one embodiment a WebRTC gateway uses a security provider for performing web authentication and obtaining web security principals. The gateway then invokes a security Groovy script with the security principals to obtain a web SIP identity mapping for the browser application. Accordingly this embodiment decouples the security provider from identity mapping functionality. The Groovy script is flexible and can implement different functionalities for the mapping. For example it may access a database a Home Subscriber Server HSS a Representational State Transfer REST server which may be different than a REST server being accessed by the security provider etc.

In one embodiment WebRTC application performs RTC with an endpoint connected to a SIP network . SIP is a signaling communications protocol conventionally used for controlling multimedia communications sessions such as voice and video calls over Internet Protocol IP networks. An example of SIP network is an IP Multimedia Subsystem IMS network. IMS is an architectural framework for delivering IP multimedia services.

Network further includes a WebRTC session controller WSC that is a gateway for connecting a web application with a communications network. A gateway translates a protocol to another protocol. In WSC connects WebRTC application to SIP network . WSC provides interoperability for web to web and web to network RTC. WSC includes a signaling engine that bridges WebRTC signaling to SIP signaling. That is in order to initiate RTC between WebRTC application and an entity connected to SIP network WebRTC application establishes a signaling channel with WSC signaling engine over a JavaScript Object Notation JSON protocol for RTC JsonRTC . JSON is a lightweight data interchange format. JsonRTC establishes the sessions and subsessions used to pass messages between WSC and its client applications. Then another signaling channel based on SIP is established between signaling engine and SIP network .

System includes a bus or other communications mechanism for communicating information and a processor coupled to bus for processing information. Processor may be any type of general or specific purpose processor. System further includes a memory for storing information and instructions to be executed by processor . Memory can be comprised of any combination of random access memory RAM read only memory ROM static storage such as a magnetic or optical disk or any other type of computer readable media. System further includes a communications device such as a network interface card to provide access to a network. Therefore a user may interface with system directly or remotely through a network or any other method.

Computer readable media may be any available media that can be accessed by processor and includes both volatile and nonvolatile media removable and non removable media and communications media. Communications media may include computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.

Processor may further be coupled via bus to a display such as a Liquid Crystal Display LCD . A keyboard and a cursor control device such as a computer mouse may further be coupled to bus to enable a user to interface with system on an as needed basis.

In one embodiment memory stores software modules that provide functionality when executed by processor . The modules include an operating system that provides operating system functionality for system . The modules further include WebRTC session controller module for providing authentication and all other functionality disclosed herein. System can be part of a larger system such as added functionality to the Oracle Communications WebRTC Session Controller from Oracle Corp. Therefore system can include one or more additional functional modules to include the additional functionality. A database is coupled to bus to provide centralized storage for modules and .

Referring again to with known systems when WebRTC application that is running in a web browser or mobile device communicates with a web server this communication is authenticated using typical web authentication technologies such as OAuth basic access authentication or basic authentication form based authentication or form authentication mutual authentication etc. OAuth is an open standard of authorization which provides client applications with secure delegated access to server resources on behalf of a resource owner. Basic access authentication is a method for a Hypertext Transfer Protocol HTTP user agent to provide a user name and password when making a request. Form based authentication refers to the notion of a user being presented with an editable form to fill in security credentials such as password and submit in order to log into some system or service. Mutual authentication or two way authentication refers to the notion of two parties authenticating each other at the same time.

With known systems while WebRTC communications are authenticated using typical web authentication technologies SIP network may have a different way of authentication and identity management that is based on SIP signaling. For example an IMS system may perform authentication and identity management based on the 3rd Generation Partnership Project 3GPP specifications that use IMS public and private identities. IMS public identity or IP Multimedia Public Identity IMPU is used by a user for requesting communications to other users. IMS private identity or IP Multimedia Private Identity IMPI is a unique permanently allocated global identity assigned by a home network operator and used for example for registration authorization administration and accounting purposes. Authentication with an IMS network is usually performed using SIP signaling. This may cause a problem for authentication interworking for RTC between WebRTC endpoints and IMS SIP endpoints.

One known solution to provide authentication interworking between IMS networks and a web browser is to implement a security provider at a gateway to integrate web authentication with IMS identity and authentication framework. In this known solution the security provider accesses an authentication mapper which may be a REST server first for performing usual web authentications and then for obtaining a corresponding web IMS identity mapping. REST is an architectural style including a coordinated set of architectural constraints applied to components connectors and data elements within a distributed hypermedia system.

One disadvantage with this known approach is that the security provider accesses a single REST server for both web authentication and web IMS identity mapping hence this known solution is limited to the authentication functionality provided by such REST server.

In contrast to the known solutions one embodiment of the present invention provides flexible interworking between web authentication and SIP authentication by using a WebRTC gateway that includes a security provider that is decoupled from identity mapping functionality. This embodiment implements a security Groovy script within the WebRTC gateway for performing identity mapping. Groovy is an object oriented programming language for the JAVA platform. It permits access to the syntax tree during the compiling process before bytecode or machine code has been generated. Generally Groovy is a superset of JAVA and therefore JAVA code may likely be syntactically valid in Groovy. However Groovy includes additional syntax and features in addition to what is available in JAVA. Similar to JAVA Groovy code can be compiled into bytecode. This bytecode can be translated by a virtual machine VM into machine code. In one embodiment the security Groovy script is flexible and can implement different functionalities for the mapping. For example it may access a database an HSS i.e. the master user database that supports IMS network entities that handle calls and sessions another REST server different than the REST server accessed by the security provider etc.

Referring again to in one embodiment when a browser application e.g. WebRTC application authenticates with a system WSC uses a WebLogic platform for authentication to implement usual web authentication mechanisms such as OAuth basic authentication form authentication etc. to authenticate the HTTP request. WebLogic is a Java enterprise edition application server from Oracle Corp. When WebRTC application contacts WSC WSC performs web authentication by using a security provider inserted into the WebLogic platform.

Security provider may be for example a REST based basic authentication provider a OAuth provider etc. Security provider performs web authentication to establish a web security principal e.g. alice gmail.com corresponding to WebRTC application . A principal in computer security is an entity that can be authenticated by a computer system or network. It is referred to as a security principal in programming literature such as Java and Microsoft. Principals can be for example individual people computers services computational entities such as processes and threads or any group of such things. They need to be identified and authenticated before they can be assigned rights and privileges over resources in the network. A principal typically has an associated identifier such as a security identifier that allows it to be referenced for identification or assignment of properties and permissions.

Then WSC invokes a security Groovy script with the web security principal. Using the web security principal security Groovy script fetches corresponding web IMS identity mapping from a source that can provide such mapping i.e. the source includes an identity mapping between the security principal and a corresponding IMS identity . In one embodiment the source may be an authentication mapper or an authentication database e.g. HSS another database etc. . In one example embodiment security Groovy script may communicate with a REST based authentication mapper to map the web identity to necessary IMS principals on successful authentication. However embodiments provide flexibility such that if a customer desires to provide an authentication mapper that is not based on REST invocation a custom authentication mapper may be used.

Accordingly embodiments decouple security provider from security Groovy script such that different separate resources may be reached for Web authentication and Web IMS identity mapping . Additionally by decoupling security provider from security Groovy script the implementation of security Groovy script and runtime Groovy script may be pluggable independent of each other and independent of security provider . For example when security Groovy script is pluggable security provider may be any authentication provider without affecting the operation of runtime Groovy script . Similarly Web IMS identity mapping may be based on any IMS identity mapping without affecting the operation of security provider or runtime Groovy script . Therefore embodiments provide a comprehensive and complete authentication interworking between Web and IMS.

Once the mapping information is available it is kept associated with the web principal. The established web IMS identity mapping is then made available to a runtime Groovy script by WSC . In one embodiment if an IMS provider decides to not have any further authentication as well this information may also be saved by security Groovy script . For example if an IMS provider is set up so that WSC and the corresponding IMS network e.g. SIP network are in a trusted security domain security groovy script fetches the mapping information and makes it available to runtime groovy script . Then during JsonRTC signaling runtime groovy script passes special SIP headers e.g. P Asserted Identity to indicate that the authentication is already carried out and the IMS provider honors this indication.

In one embodiment when signaling is performed for RTC e.g. to initiate a call runtime Groovy script uses the established mapped IMS credentials to satisfy an authentication challenge from a server in SIP network e.g. IMS serving call session control function S CSCF server i.e. a central node of the signaling plane which is a SIP server that performs session control as well SIP registrar server i.e. a server that accepts REGISTER requests and places the information received in those requests into the location service for the domain it handles etc. For example for SIP signaling WSC acts as a SIP client and inserts the necessary authentication data into SIP messages. This data may include one or more of IMS public identity IMS private identity 3GPP authentication parameters P Asserted Identity etc. P Asserted Identity includes the identity of the originator of a request i.e. a call within a trusted network.

In one embodiment WSC also transparently handles digest authentication challenges that come from SIP network which may be for example an IMS network. Digest authentication or digest access authentication is a challenge response authentication where one party presents a question or challenge and another party must provide a valid answer or response to be authenticated. In one embodiment digest authentication may be used by a web server to negotiate credentials e.g. username or password with a web browser of a user to confirm the identity of the user before sending sensitive information such as online banking transaction history. For example when an IMS provider does not support any identity mapping and instead directly challenges the user runtime groovy script passes the challenge to the client side SDK e.g. JavaScript Android iOS etc. . The SDK then lets the client application and the user handle the challenge by entering their SIP credentials directly.

In one embodiment the customer environment may not have authentication mapping data. For example a carrier i.e. a telecommunications company may not be able to provide a mapping between the web principal of the user and an IMS principal. This may happen for example if a telecommunications company does not ask a customer for a facebook ID when the customer is signing up for a service. Thus there cannot be a mapping between facebook credentials and the IMS identity of the customer. When such mapping information is not available WSC transparently challenges the user i.e. WebRTC application at UE for the user name and password when the SIP authentication is performed at the time of initiating an RTC for such user. For example if the user of WebRTC application has not already provided credentials and hence a mapping of the credentials has not been performed and such user subsequently attempts to establish RTC WSC requests WebRTC application for the username and password of the user at that time.

In one embodiment when a SIP message is received by WSC signaling engine translates the message to JSON. The SIP message may be for example an incoming call into a web application i.e. a SIP INVITE message reaching WSC . The translated message is then sent to the correct node by a fabric component of signaling engine of WSC . Fabric is a component that brokers message frames and or other information across nodes in a cluster. A cluster includes multiple server instances running simultaneously and working together to provide increased scalability and reliability. Fabric ensures that the correct node handles the message. Once the node receives the message the necessary protocol handling for JsonRTC protocol is carried out. The message is then sent to the browser client.

In one embodiment WSC supports two ways of authenticating users authentication based on token or client cert e.g. Facebook OAuth token and HTTP basic authentication e.g. based on username and password . The following functionality provides an example web.xml of WSC module in accordance with one embodiment.

That is WSC first tries to see if there is any authorization token in a request. If so it tries to authenticate the user of WebRTC application with that authorization token. If WSC does not find an authorization token it prompts the client i.e. WebRTC application to enter username and password corresponding to HTTP basic authentication.

In one embodiment signaling engine provides WebSocket applications that are protected. That is a user i.e. WebRTC application needs to be authenticated before getting access to the WebSocket applications. A socket is a bidirectional communications endpoint for sending receiving data to from another socket. It is the fundamental technology for programming software to communicate on a transmission control protocol TCP IP network. A WebSocket is a protocol providing a full duplex communications channel over a single TCP connection. In this embodiment WSC performs web authentication before establishing a WebSocket connection with WebRTC application . However once the WebSocket connection is established no further web authentication is needed for WebRTC application to access WebSocket applications provided by WSC signaling engine .

In one embodiment security provider of signaling engine supports different kinds of identity asserters and authentication providers. An identity asserter is an entity which validates a token or certificate and returns a principal name based on the validated token. An authentication provider is an entity which in case of username password authentication verifies the supplied user name and password. If successful the authentication provider adds a list of principal e.g. javax.security.Principal objects into the subject e.g. javax.security.auth.Subject . Further in case of token authentication the authentication provider adds a list of principal objects into the subject based on the principal name returned by an identity asserter.

The authentication provider may be for example based on Lightweight Directory Access Protocol LDAP based on a relational database management system RDBMS etc. LDAP is an open vendor neutral industry standard application protocol for accessing and maintaining distributed directory information services over an IP network. The identity asserter may be for example based on Security Assertion Markup Language SAML . SAML is an Extensible Markup Language XML based open standard data format for exchanging authentication and authorization data between parties.

In one embodiment signaling engine further allows writing custom authentication providers and identity asserters chaining them in any order and providing configuration flags to control the flow in the chain of authentication providers and identity asserters based on the result of each provider in the chain. A provider in the chain is provided with the visibility to the principals returned by another provider who is in the chain prior to it. Once the authentication is successfully performed a corresponding subject has the populated principal objects as well as public and private credentials populated by the authentication providers. A subject is the absolute entity that requested or carried out authentication. A subject may have different principals. For example the name of a subject may be Bob while his driving license ID email ID and facebook ID may be different than Bob. Once the subject is populated with principal objects and public and private credentials the authentication request enters the signaling engine code i.e. runtime Groovy script . Signaling engine retrieves the authenticated subject in the thread and stores the credentials e.g. SIP identity and SIP credentials from the subject into the fabric of signaling engine for later use. For example the credentials may be needed in another node in a cluster for mapping JSON to SIP.

In one embodiment signaling engine further supports Facebook OAuth Identity asserter which validates Facebook OAuth tokens and returns a principal name for that token. In one embodiment signaling engine further supports a REST based authentication provider that invokes a REST web service to validate a supplied user name and password.

In one embodiment if an application in signaling engine needs to be accessible to any user e.g. anonymous access the corresponding allowed principals are set to guest. In addition a signaling engine servlet authentication filter needs to be enabled in the security provider chain and configured with a uniform resource locator URL pattern that is handled for guest access. The servlet authentication filter inspects the authentication request before the authentication providers are invoked. If the incoming request matches a signaling engine application URL pattern which is configured for guest access and if there are no other authorization headers in the request the servlet authentication filter adds an authorization header such that the request goes through the provider chain and the authentication succeeds as a guest user. The following configuration in WSC is an example where a single guest principal is populated into the authenticated subject in accordance with one embodiment.

In one embodiment in order to map web identity to SIP identity one of the authentication providers in the chain populates the subject with corresponding SIP credentials. In one embodiment this authentication provider may be a custom security provider developed by the customer and implemented along with security Groovy script . The security framework allows adding any number of principals as well as public and private credentials to the subject. For example if the customer already has an identity assertion system in place the customer can add a custom authentication provider in the chain such that it looks at the principal returned by the identity asserter finds the SIP credentials for that principal and adds the SIP credentials to the subject.

Alternatively or additionally if the customer is using an existing authentication provider such provider may look at the principal returned by the identity asserter find the SIP credentials for that principal and add the SIP credentials to the subject. In one embodiment security Groovy script can be customized by the customer based on the security providers that the customer will use i.e. will anticipate to use to establish mapping between web identity to SIP identity. At runtime runtime Groovy script in signaling engine fetches the subject information from the fabric of signaling engine retrieves the SIP credentials from the subject and uses the SIP credentials in order to make a SIP request to SIP network .

In one example embodiment security provider of signaling engine is a REST authentication provider. Such a REST authentication provider is invoked when a user of a browser application i.e. WebRTC application submits a username and password to login to signaling engine e.g. using the basic authentication dialog or a form based login page . The REST authentication provider sends the request to a configured REST web service endpoint with the user name and password in the basic authentication header. If the response from the REST endpoint is 200 OK the authentication is considered to be successful. Any other response code indicates that the authentication has failed. In one embodiment the REST endpoint URL can be configured through an administrator console of WSC .

At WebRTC session controller module receives a request from a browser application e.g. WebRTC application at UE for web authentication of a user.

At security provider performs web authentication . When performing web authentication security provider determines a security principal for the user of the browser application e.g. WebRTC application at UE .

At security Groovy script is executed by signaling engine to determine an identity mapping that maps the security principal to an IMS identity. In one embodiment security Groovy script obtains the identity mapping from an authentication database e.g. HSS or an authentication mapper which may be different than the resources reached by security provider for performing web authentication.

At security Groovy script provides the identity mapping to runtime Groovy script . The identity mapping is saved stored at WSC to be used later for initiating RTC between the browser application e.g. WebRTC application at UE and another entity connected to SIP network which may be for example an IMS network .

At when initiating RTC for the browser application e.g. WebRTC application at UE a signaling channel is established between the browser application e.g. WebRTC application at UE and signaling engine of WSC . In one embodiment the browser application is a WebRTC application and this signaling channel is established according to JsonRTC.

At another signaling channel is established by runtime Groovy script between the session controller signaling engine of WSC and SIP network which may be for example an IMS network based on the identity mapping. This signaling channel is established according to SIP. In one embodiment based on the identity mapping runtime Groovy script inserts corresponding authentication data into SIP messages. In one embodiment the authentication data includes one or more of IMS public identity IMS private identity 3GPP authentication parameters or P Asserted Identity.

As disclosed embodiments provide flexible authentication for RTC between a WebRTC browser application and an entity connected to a SIP network. Embodiments bridge web authentication and SIP authentication by using a web SIP WebRTC gateway such that web authentication is integrated with IMS identity and authentication framework. In one embodiment the WebRTC gateway uses a security provider for performing web authentication and obtaining web security principals. The gateway then invokes a security Groovy script with the security principals to obtain a corresponding web SIP identity mapping. Accordingly embodiments decouple the security provider from identity mapping. The Groovy script is flexible and can implement different functionalities for the mapping. For example it may access a database an HSS a REST server which may be different than a REST server accessed by the security provider etc.

Several embodiments are specifically illustrated and or described herein. However it will be appreciated that modifications and variations of the disclosed embodiments are covered by the above teachings and within the purview of the appended claims without departing from the spirit and intended scope of the invention.

