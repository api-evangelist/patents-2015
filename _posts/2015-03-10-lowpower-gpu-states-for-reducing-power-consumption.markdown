---

title: Low-power GPU states for reducing power consumption
abstract: The disclosed embodiments provide a system that drives a display from a computer system. During operation, the system detects an idle state in a first graphics-processing unit (GPU) used to drive the display. During the idle state, the system switches from using the first GPU to using a second GPU to drive the display and places the first GPU into a low-power state, wherein the low-power state reduces a power consumption of the computer system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09158367&OS=09158367&RS=09158367
owner: Apple Inc.
number: 09158367
owner_city: Cupertino
owner_country: US
publication_date: 20150310
---
The instant application is a continuation of and hereby claims priority to pending U.S. patent application Ser. No. 14 190 310 which is titled Low Power GPU States for Reducing Power Consumption by the same inventors which was filed on 26 Feb. 2014. The instant application also claims priority to U.S. patent application Ser. No. 13 206 374 which is titled Low Power GPU States for Reducing Power Consumption by the same inventors which was filed on 9 Aug. 2011 and which issued as U.S. Pat. No. 8 692 833 on 8 Apr. 2014 to which parent application Ser. No. 14 190 310 also claims priority. Each of these applications is incorporated by reference.

The present embodiments relate to techniques for driving a display from a computer system. More specifically the disclosed embodiments relate to techniques for reducing power consumption in the computer system by driving the display from a low power GPU and placing a high power GPU in a low power state while the high power GPU is in an idle state.

Computer systems are beginning to incorporate high resolution high power graphics technology. Rapid developments in this area have led to significant advances in 2D and 3D graphics technology providing users with increasingly sophisticated visual experiences in domains ranging from graphical user interfaces to realistic gaming environments. Underlying many of these improvements is the development of dedicated graphics rendering devices or graphics processing units GPUs . A typical GPU includes a highly parallel structure that efficiently manipulates graphical objects by rapidly performing a series of primitive operations and displaying the resulting images on graphical displays.

Unfortunately there are costs associated with these increased graphics capabilities. In particular an increase in graphics performance is typically accompanied by a corresponding increase in power consumption. Consequently many computer systems and portable electronic devices may devote a significant amount of their power to support high performance GPUs which may cause heat dissipation problems and decrease battery life.

One solution to this problem is to save power during low activity periods by switching between a high power GPU that provides higher performance and a low power GPU with better power consumption. However applications that use the high power GPU may prevent a switch to the low power GPU even during idle periods in which graphics processing is not performed on the high power GPU.

Hence what is needed is a mechanism for reducing power consumption by switching from a high power GPU to a low power GPU during an idle state of the high power GPU.

The disclosed embodiments provide a system that drives a display from a computer system. During operation the system detects an idle state in a first graphics processing unit GPU used to drive the display. During the idle state the system switches from using the first GPU to using a second GPU to drive the display and places the first GPU into a low power state wherein the low power state reduces a power consumption of the computer system.

In some embodiments placing the first GPU into the low power state involves powering off the first GPU and an interface with the first GPU and maintaining power to video memory of the first GPU.

In some embodiments the system also intercepts graphics calls to the first GPU during the low power state. If a graphics call to the first GPU is received the system restores the first GPU from the low power state switches from using the second GPU to using the first GPU to drive the display and directs the graphics call to the first GPU.

In some embodiments intercepting graphics calls to the first GPU involves acquiring a lock for a first graphics call to the first GPU and queuing the first graphics call and subsequent graphics calls to the first GPU.

In some embodiments the system also saves a GPU configuration state of the first GPU in video memory of the first GPU prior to placing the first GPU into the low power state. The system then restores the first GPU from the low power state by restoring the GPU configuration state from the video memory.

In some embodiments the system also saves an interface configuration state of the interface in memory on the computer system prior to placing the first GPU into the low power state. The system further restores the first GPU from the low power state by concurrently restoring the interface configuration state from the memory during restoring of the GPU configuration state from the video memory.

In some embodiments switching from using the first GPU to using the second GPU to drive the display involves copying pixel values from a first framebuffer for the first GPU to a second framebuffer for the second GPU and initiating a switch from the first framebuffer to the second framebuffer as a signal source for driving the display.

In some embodiments the first GPU is a high power GPU which resides on a discrete GPU chip and the second GPU is a low power GPU which is integrated into a processor chipset.

The following description is presented to enable any person skilled in the art to make and use the embodiments and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present disclosure. Thus the present invention is not limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein.

The data structures and code described in this detailed description are typically stored on a computer readable storage medium which may be any device or medium that can store code and or data for use by a computer system. The computer readable storage medium includes but is not limited to volatile memory non volatile memory magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs DVDs digital versatile discs or digital video discs or other media capable of storing code and or data now known or later developed.

The methods and processes described in the detailed description section can be embodied as code and or data which can be stored in a computer readable storage medium as described above. When a computer system reads and executes the code and or data stored on the computer readable storage medium the computer system performs the methods and processes embodied as data structures and code and stored within the computer readable storage medium.

Furthermore methods and processes described herein can be included in hardware modules or apparatus. These modules or apparatus may include but are not limited to an application specific integrated circuit ASIC chip a field programmable gate array FPGA a dedicated or shared processor that executes a particular software module or a piece of code at a particular time and or other programmable logic devices now known or later developed. When the hardware modules or apparatus are activated they perform the methods and processes included within them.

During operation display stream from discrete GPU and display stream from embedded GPU both feed into data inputs of GMUX . Source select signal feeds into a select input of GMUX and determines which one of the two graphics sources will drive display . In the illustrated embodiment source select signal is produced by bridge chip which includes specific logic for generating source select signal . Note that source select signal can also be produced by a logic block other than bridge chip . The display stream from the selected graphics source then feeds into display .

In one embodiment discrete GPU and embedded GPU communicate through data path to synchronize their display streams. Note that synchronizing the display streams involves synchronizing both the respective timing signals and the respective data signals.

In one embodiment discrete GPU is a high performance GPU that consumes a significant amount of power whereas embedded GPU is a lower performance GPU that consumes a smaller amount of power. In this embodiment when the graphics processing load is light computer system switches from using discrete GPU to using embedded GPU to drive display and subsequently powers down discrete GPU thereby saving power. On the other hand when the graphics processing load becomes heavy again computer system switches graphics sources from embedded GPU back to discrete GPU . As a result the rendering and display of graphics in computer system may involve a tradeoff between performance and power savings.

For example computer system may begin by using embedded GPU as the signal source for driving display until an event associated with a dependency on discrete GPU is detected through a graphical application programming interface API associated with a graphics library video playback and or a window manager. The event may correspond to the use of a graphics library in computer system playback of hardware decodable content and or initialization of an application e.g. a computer game with a dependency on discrete GPU . In response to the event computer system may switch from embedded GPU to discrete GPU as the signal source for driving display . During the switch threads that depend on discrete GPU may be blocked until discrete GPU is fully driving display . A switch back to embedded GPU as the signal source may be made after all dependencies on discrete GPU are removed e.g. after video playback of hardware decodable content use of graphics libraries and or execution of applications associated with discrete GPU are complete .

Although we have described a system that includes a discrete GPU and an embedded GPU the disclosed technique can generally work in any computer system comprising two or more GPUs each of which may independently drive display . Moreover GPUs in the same computer system may have different operating characteristics such as power consumption levels. For example the computer system may switch between a general purpose processor e.g. central processing unit CPU and a special purpose GPU e.g. discrete GPU to drive display . Hence the disclosed technique is not limited to the specific embodiment illustrated in .

Also note that the above described process for switching between graphics sources does not involve shutting down or reinitializing the computer system. As a result the switching process can take substantially less time than it would have if a re initialization had been required. Consequently the disclosed technique facilitates rapid and frequent switching between the graphics sources.

In one or more embodiments computer system includes functionality to reduce power consumption for example during idle states of discrete GPU . Such idle states may occur when executing applications have dependencies on discrete GPU but such applications have not made graphics calls to update display using discrete GPU . For example discrete GPU may enter an idle state after the graphical content of display has not been updated by discrete GPU for a pre specified length of time e.g. number of frames milliseconds etc. .

Once an idle state is detected in discrete GPU a switch is made from using discrete GPU to using embedded GPU to drive display and discrete GPU is placed into a low power state. To make the switch pixel values may be copied from a first framebuffer for discrete GPU to a second framebuffer for embedded GPU and a switch may be initiated from the first framebuffer to the second framebuffer as the signal source for driving display .

Prior to placing discrete GPU into the low power state a GPU configuration state of discrete GPU is saved in video memory of discrete GPU and an interface configuration state of an interface with discrete GPU is saved in memory on computer system . To place discrete GPU into a low power state discrete GPU and the interface are powered off and power to video memory is maintained. Because only video memory in discrete GPU is powered in the low power state the low power state may reduce the power consumption of the computer system. For example 1 3 watts of power may be required to keep discrete GPU in a powered on idle state while only 200 milliwatts may be needed to provide power to video memory .

During the low power state applications with dependencies on discrete GPU are not transferred to embedded GPU . Instead graphics calls from the applications to discrete GPU may be intercepted by a shim. The shim may acquire a lock for the first graphics call to discrete GPU and queue the first graphics call and subsequent graphics calls to discrete GPU . Once graphics calls to discrete GPU are received by the shim driving of display by discrete GPU may possibly resume. In particular discrete GPU may be restored from the low power state a switch may be made from using embedded GPU to using discrete GPU to drive display and intercepted graphics calls may be directed to discrete GPU . Furthermore restoration of discrete GPU from the low power state may be accelerated by restoring the GPU configuration state of discrete GPU from video memory and concurrently restoring the interface configuration state of the interface with discrete GPU from memory . Driving of displays during idle states of high power GPUs and restoration of GPUs from low power states are discussed in further detail below with respect to .

These data clock signals and feed into clock MUX which selects one of data clock signals and to be forwarded to display stream assembler . In one embodiment GMUX controller provides select signal to clock MUX . Alternatively select signal can be provided by other sources such as processor or another controller.

Next display streams and with data clocks separated feed into data buffers and respectively. Data buffers and examine display streams and to determine when blanking intervals occur and produce respective blanking interval signals and . Data buffers and also produce output data streams that feed into data MUX .

Blanking interval signals and feed into GMUX controller which compares blanking intervals and to determine how much overlap if any exists between the blanking intervals of display streams and . Note that blanking interval signals and can indicate vertical or horizontal blanking intervals. If GMUX controller determines that blanking intervals and have a sufficient amount of overlap GMUX controller asserts select signal as the blanking intervals begin to overlap. This causes clock MUX and data MUX to switch between display streams and during the period when their blanking intervals overlap. Because the switching occurs during the blanking intervals the switching process will not be visible on display .

Finally the output of data MUX and the selected data clock feed into display stream assembler which re serializes the data stream before sending the data stream to display .

Prior to placing GPU into the low power state a device driver executing on processor may configure GPU to save the GPU configuration state of GPU on video memory of GPU . The GPU configuration state may include mode settings for GPU characteristics of one or more displays driven by GPU and or other information related to the configuration of GPU within the computer system. Processor may additionally save an interface configuration state of interface in memory on the computer system. For example processor may save the PCI configuration space of a PCIe device corresponding to GPU in memory before GPU is placed into the low power state.

Next GPU may be placed into the low power state by powering off GPU and interface and maintaining power to video memory . During the low power state a shim may be inserted to intercept graphics calls to device driver and or GPU . For example shim may acquire a lock for the first graphics call to GPU and queue the first graphics call and subsequent graphics calls to GPU .

Furthermore the receipt of a graphics call by shim may trigger the restoration of GPU from the low power state to enable processing of the graphics call by GPU . For example shim may intercept a graphics call to GPU related to the updating of a cursor window and or desktop in the user interface of the computer system.

To initiate the restoration of GPU from the low power state processor may communicate with a microcontroller associated with GPU . For example processor may transmit a signal to microcontroller through a General Purpose Input Output GPIO port monitored by microcontroller . Next microcontroller may restore the GPU configuration state of GPU from video memory while processor concurrently restores the interface configuration state of interface from memory . Once GPU is restored graphics calls intercepted e.g. queued by shim may be directed to GPU through device driver and shim may be removed.

Such restoration of GPU from the low power state may be significantly faster than restoration of GPU from a fully powered off state. In particular conventional powering up of GPU from a fully powered off state e.g. when switching from using an embedded GPU to using GPU to drive a display may begin with the restoration of interface followed by the restoration of GPU . First processor may reestablish interface by rebuilding the interface configuration state of interface which may take 16 20 milliseconds. Next driver may use the reestablished interface to initiate the restoration of GPU which may require another 10 20 milliseconds. During restoration of GPU up to 2 Gbytes of resources used by GPU may be transferred from memory over interface to video memory because data in video memory does not persist if GPU is completely powered off. Because data transfer over interface is relatively slow GPU may not be restored from the fully powered off state for up to 250 milliseconds.

On the other hand GPU may be restored from the low power state by concurrently restoring the GPU and interface configuration states from video memory and memory respectively instead of sequentially rebuilding the configuration states. The transfer of GPU resources from memory to video memory may also be omitted since the resources are persisted on video memory during the low power state. As a result restoration of GPU from the low power state may be completed in 30 50 milliseconds instead of hundreds of milliseconds.

The accelerated restoration of GPU may further facilitate a reduction in the power consumption of the computer system without impacting the graphics performance of the computer system. For example GPU may be placed into the low power state whenever GPU is detected to be in an idle state. During the low power state a low power embedded GPU may be used to drive a display connected to the computer system instead of GPU thus reducing the power consumption of the computer system by 1 2 watts. Once graphics calls to GPU are received efficient restoration of GPU from the low power state may allow GPU to begin processing the graphics calls after an imperceptible delay. Consequently the system of may provide the power savings associated with a self refreshing panel in a computer system that is not connected to a self refreshing panel.

Initially at time interface is active GPU is idle and GPU is off. In addition a first framebuffer e.g. FB 1 for GPU is used to drive the display while a second framebuffer e.g. FB 2 for GPU is not connected to the display. For example data in the first framebuffer may be pulled by a pipe at the refresh rate of the display and sent to the display to modify the graphical output of the display.

Once a decision is made to disable GPU e.g. an idle state for GPU is detected a switch is made from using GPU to using GPU to drive the display. At time GPUs and interface are prepared for the switch. More specifically a GPU configuration state of GPU is saved to video memory of GPU and an interface configuration state of interface is saved to memory on the computer system. GPU may also be restored from the powered off state by powering up GPU reinitializing device drivers for GPU determining characteristics of the display and or copying configuration information e.g. mode settings color lookup table CLUT etc. from GPU to GPU . After configuration e.g. restoration of GPU is complete pixel values may be copied from the first framebuffer to the second framebuffer.

At time a switch is initiated from the first framebuffer to the second framebuffer as the signal source for driving the display and GPU is placed into a low power state. During the low power state GPU and interface are powered off while power to video memory of GPU is maintained. In addition a shim may be inserted to intercept graphics calls to GPU . For example the shim may intercept graphics calls to GPU by acquiring a lock for the first graphics call to GPU and queuing the first and subsequent graphics calls to GPU .

At time a graphics call to GPU is received by the shim. To enable processing of the graphics call by GPU GPU may be restored from the low power state at time . As with restoration of GPU restoration of GPU may include powering up of GPU and reinitializing device drivers for GPU . Furthermore the restoration of GPU may be accelerated by concurrently restoring the GPU and interface configuration states from video memory and memory on the computer system respectively and omitting the transfer of resources for GPU from the memory to the video memory e.g. because the resources are persisted on the video memory during the low power state . Note that after GPU is restored valid pixel values should exist in the first framebuffer in GPU .

Finally at time a switch is made from using GPU to using GPU to drive the display. Graphics calls queued by the shim are also directed to GPU via interface and the shim is removed. In other words the operations associated with times may switch from using GPU to using GPU to drive the display whenever GPU is detected to be in an idle state. The operations may also place GPU in a low power state during the idle state. Finally the operations may expedite the restoration of GPU from the low power state after graphics calls are intercepted by the shim during the low power state. Consequently the operations may reduce the power consumption of the computer system without producing a perceptible effect on the graphics performance of the computer system.

First a disabling condition e.g. an idle state is detected in a first GPU used to drive the display wherein the disabling condition causes the first GPU to be disabled operation . For example the disabling condition can be an idle state which may be detected after the GPU has not processed graphics calls and or updated the contents of the display for a number of frames and or a length of time. Next a switch from using the first GPU to using a second GPU to drive the display is made operation . The second GPU may correspond to a low power e.g. embedded GPU while the first GPU may correspond to a high power e.g. discrete GPU. To make the switch pixel values may be copied from a first framebuffer for the first GPU to a second framebuffer for the second GPU and a switch may be initiated from the first framebuffer to the second framebuffer as a signal source for driving the display.

In addition the GPU configuration state of the first GPU is saved in video memory of the first GPU operation the first GPU is placed into a low power state operation and graphics calls to the first GPU are intercepted operation . To place the first GPU into the low power state the first GPU and an interface with the first GPU are powered off and power to video memory of the first GPU is maintained. The shim may then intercept graphics calls by acquiring a lock for the first graphics call to the GPU and queuing the first graphics call and subsequent graphics calls to the first GPU. In some embodiments the shim is inserted above the driver to reduce the amount of driver hardening that is required. In this way the shim may acquire relevant locks to help avoid having the driver touch powered down hardware. This makes it possible to prevent calls from reaching the driver to avoid having to harden drivers as much. Note that the drivers could alternatively be hardened to themselves to achieve the same effect. 

While the first GPU is in the low power state the display is driven by the second GPU. As a result the low power state may reduce a power consumption of the computer system. The first GPU may remain in the low power state and graphics calls to the first GPU may be intercepted operation until a graphics call to the first GPU is received operation . Upon receiving the graphics call the first GPU may possibly be restored from the low power state operation . Restoration of GPUs from low power states is discussed in further detail below with respect to .

Next a switch from using the second GPU to using the first GPU to drive the display is made operation . For example pixel values may be copied from the second framebuffer to the first framebuffer and a switch may be initiated from the second framebuffer to the first framebuffer as a signal source for driving the display. Finally the graphics call is directed to the first GPU operation to enable processing of the graphics call by the first GPU.

First a GPU configuration state of the GPU is saved in video memory of the GPU operation and an interface configuration state of an interface with the GPU is saved in memory on the computer system operation . Next the GPU is placed into a low power state operation by powering off the GPU and interface and maintaining power to the video memory.

The GPU may be restored operation from the low power state. For example the GPU may be placed into the low power state upon detecting an idle state of the GPU and restored from the low power state upon receiving a graphics call to the GPU. Prior to restoration of the GPU the low power state is maintained operation .

To restore the GPU from the low power state the GPU configuration state is restored from the video memory operation and the interface configuration state is concurrently restored from the memory operation . Furthermore resources used by the GPU may be persisted on the video memory during the low power state thus allowing the GPU to be restored from the low power state without transferring the resources from the memory to the video memory. As a result restoration of the GPU from the low power state may be significantly faster than restoration of the GPU from a fully powered off state.

The foregoing descriptions of various embodiments have been presented only for purposes of illustration and description. They are not intended to be exhaustive or to limit the present invention to the forms disclosed. Accordingly many modifications and variations will be apparent to practitioners skilled in the art. Additionally the above disclosure is not intended to limit the present invention.

