---

title: Template based software container
abstract: A hierarchical template framework may include lower tier templates that identify groups of software components for discrete software services. The template framework also may include upper tier templates that include one or more lower tier templates and identify software components for a prearranged group of the software services configured to support and operate with an associated category of core software functions. A software developer may build a software application from the software components identified in a selected upper tier template, lower tier templates, and any other core software components identified for the core software functions. The templates prevent the software developer from having to manually locate and test all of the software components for different software services used in a software application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09646064&OS=09646064&RS=09646064
owner: SALESFORCE.COM, INC.
number: 09646064
owner_city: San Francisco
owner_country: US
publication_date: 20150625
---
This application claims the benefit of U.S. Provisional Patent Application 62 090 284 entitled LIGHTWEIGHT SERVICE CONTAINER THAT SUPPORTS RAPID DESIGN BUILD AND DEPLOYMENT OF APPLICATIONS AND SERVICES by Igor Shmulevich et al. filed Dec. 10 2014 the entire contents of which are incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the United States Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also correspond to implementations of the claimed inventions.

Software developers face a daunting task managing software components when building software applications. For example a software developer may combine dozens or hundreds of preexisting software components together to build a Java based software application. The software components may have different versions and different dependencies stored in different software libraries.

After identifying the correct software components the developer faces the additional time consuming task of testing the software application to ensure the software components operate correctly together on the intended platform. The testing process becomes even more complex when the software application is integrated into a larger legacy software system with hundreds of existing legacy software applications. After testing the software developer still may only launch the new software application in conjunction with a next scheduled release for the legacy software system. Thus software developers may find it difficult to quickly develop and launch new software applications.

Examples of systems apparatus computer readable storage media and methods according to the disclosed implementations are described in this section. These examples are being provided solely to add context and aid in the understanding of the disclosed implementations. It will thus be apparent to one skilled in the art that the disclosed implementations may be practiced without some or all of the specific details provided. In other instances certain process or method operations also referred to herein as blocks have not been described in detail in order to avoid unnecessarily obscuring the disclosed implementations. Other implementations and applications also are possible and as such the following examples should not be taken as definitive or limiting either in scope or setting.

In the following detailed description references are made to the accompanying drawings which form a part of the description and in which are shown by way of illustration specific implementations. Although these disclosed implementations are described in sufficient detail to enable one skilled in the art to practice the implementations it is to be understood that these examples are not limiting such that other implementations may be used and changes may be made to the disclosed implementations without departing from their spirit and scope. For example the blocks of the methods shown and described herein are not necessarily performed in the order indicated in some other implementations. Additionally in some other implementations the disclosed methods may include more or fewer blocks than are described. As another example some blocks described herein as separate blocks may be combined in some other implementations. Conversely what may be described herein as a single block may be implemented in multiple blocks in some other implementations. Additionally the conjunction or is intended herein in the inclusive sense where appropriate unless otherwise indicated that is the phrase A B or C is intended to include the possibilities of A B C A and B B and C A and C and A B and C. 

Some implementations described and referenced herein are directed to systems apparatus computer implemented methods and computer readable storage media for identifying articles helpful in resolving user queries.

A database system might display a case associated with a customer support query. The database system may initiate a search for other cases related to the new case. The database system may extract relevant terms from the title and or description provided in the new case using a term weighting algorithm such as more like this MLT . The relevant terms are then used in a search query for identifying the related cases.

The database system identifies articles linked to the related cases ranks the articles and causes the articles to be displayed on a remote user system in an order based on the ranking. The database system may rank the articles based on a number of related cases linked to the articles. The database system also may rank the article based on other parameters such as relevancy scores for the related cases labels assigned to the cases last modified dates of the related cases etc.

The database system may identify more relevant articles by first finding related cases that use a similar vocabulary to describe similar customer problems. The database system then identifies the articles that were previously determined to help resolve the prior problems. Thus the database system may bridge the gap between vocabularies used by customers to describe problems and vocabularies used in articles to describe solutions to those problems.

In some implementations the users described herein are users or members of an interactive online enterprise social network also referred to herein as an enterprise social networking system an enterprise collaborative network or more simply as an enterprise network. Such online enterprise networks are increasingly becoming a common way to facilitate communication among people any of whom can be recognized as enterprise users. One example of an online enterprise social network is Chatter provided by salesforce.com inc. of San Francisco Calif. salesforce.com inc. is a provider of enterprise social networking services customer relationship management CRM services and other database management services any of which can be accessed and used in conjunction with the techniques disclosed herein in some implementations. These various services can be provided in a cloud computing environment as described herein for example in the context of a multi tenant database system. Some of the described techniques or processes can be implemented without having to install software locally that is on computing devices of users interacting with services available through the cloud. While the disclosed implementations may be described with reference to Chatter and more generally to enterprise social networking those of ordinary skill in the art should understand that the disclosed techniques are neither limited to Chatter nor to any other services and systems provided by salesforce.com inc. and can be implemented in the context of various other database systems such as cloud based systems that are not part of a multi tenant database system or which do not provide enterprise social networking services.

In some implementations the environment is an environment in which an on demand database service exists. An on demand database service such as that which can be implemented using the system is a service that is made available to users outside of the enterprise s that own maintain or provide access to the system . As described above such users generally do not need to be concerned with building or maintaining the system . Instead resources provided by the system may be available for such users use when the users need services provided by the system that is on the demand of the users. Some on demand database services can store information from one or more tenants into tables of a common database image to form a multi tenant database system MTS . The term multi tenant database system can refer to those systems in which various elements of hardware and software of a database system may be shared by one or more customers or tenants. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows of data such as feed items for a potentially much greater number of customers. A database image can include one or more database objects. A relational database management system RDBMS or the equivalent can execute storage and retrieval of information against the database object s .

Application platform can be a framework that allows the applications of system to execute such as the hardware or software infrastructure of the system . In some implementations the application platform enables the creation management and execution of one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

In some implementations the system implements a web based customer relationship management CRM system. For example in some such implementations the system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms renderable web pages and documents and other information to and from user systems and to store to and retrieve from a database system related data objects and Web page content. In some MTS implementations data for multiple tenants may be stored in the same physical database object in tenant database . In some such implementations tenant data is arranged in the storage medium s of tenant database so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. The system also implements applications other than or in addition to a CRM application. For example the system can provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform . The application platform manages the creation and storage of the applications into one or more database objects and the execution of the applications in one or more virtual machines in the process space of the system .

According to some implementations each system is configured to provide web pages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another for example in a server farm located in a single building or campus or they may be distributed at locations remote from one another for example one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to refer to a computing device or system including processing hardware and process space s an associated storage medium such as a memory device or database and in some instances a database application for example OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database objects described herein can be implemented as part of a single database a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and can include a distributed database or storage network and associated processing intelligence.

The network can be or include any network or combination of networks of systems or devices that communicate with one another. For example the network can be or include any one or any combination of a LAN local area network WAN wide area network telephone network wireless network cellular network point to point network star network token ring network hub network or other appropriate configuration. The network can include a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I . The Internet will be used in many of the examples herein. However it should be understood that the networks that the disclosed implementations can use are not so limited although TCP IP is a frequently implemented protocol.

The user systems can communicate with system using TCP IP and at a higher network level other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used each user system can include an HTTP client commonly referred to as a web browser or simply a browser for sending and receiving HTTP signals to and from an HTTP server of the system . Such an HTTP server can be implemented as the sole network interface between the system and the network but other techniques can be used in addition to or instead of these techniques. In some implementations the network interface between the system and the network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a number of servers. In MTS implementations each of the servers can have access to the MTS data however other alternative configurations may be used instead.

The user systems can be implemented as any computing device s or other data processing apparatus or systems usable by users to access the database system . For example any of user systems can be a desktop computer a work station a laptop computer a tablet computer a handheld computing device a mobile cellular phone for example a smartphone or any other Wi Fi enabled device wireless access protocol WAP enabled device or other computing device capable of interfacing directly or indirectly to the Internet or other network. The terms user system and computing device are used interchangeably herein with one another and with the term computer. As described above each user system typically executes an HTTP client for example a web browsing or simply browsing program such as a web browser based on the WebKit platform Microsoft s Internet Explorer browser Apple s Safari Google s Chrome Opera s browser or Mozilla s Firefox browser or the like allowing a user for example a subscriber of on demand services provided by the system of the user system to access process and view information pages and applications available to it from the system over the network .

Each user system also typically includes one or more user input devices such as a keyboard a mouse a trackball a touch pad a touch screen a pen or stylus or the like for interacting with a graphical user interface GUI provided by the browser on a display for example a monitor screen liquid crystal display LCD light emitting diode LED display among other possibilities of the user system in conjunction with pages forms applications and other information provided by the system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above implementations are suitable for use with the Internet although other networks can be used instead of or in addition to the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

The users of user systems may differ in their respective capacities and the capacity of a particular user system can be entirely determined by permissions permission levels for the current user of such user system. For example where a salesperson is using a particular user system to interact with the system that user system can have the capacities allotted to the salesperson. However while an administrator is using that user system to interact with the system that user system can have the capacities allotted to that administrator. Where a hierarchical role model is used users at one permission level can have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users generally will have different capabilities with regard to accessing and modifying application and database information depending on the users respective security or permission levels also referred to as authorizations .

According to some implementations each user system and some or all of its components are operator configurable using applications such as a browser including computer code executed using a central processing unit CPU such as an Intel Pentium processor or the like. Similarly the system and additional instances of an MTS where more than one is present and all of its components can be operator configurable using application s including computer code to run using the processor system which may be implemented to include a CPU which may include an Intel Pentium processor or the like or multiple CPUs.

The system includes tangible computer readable media having non transitory instructions stored thereon in that are executable by or used to program a server or other computing system or collection of such servers or computing systems to perform some of the implementation of processes described herein. For example computer program code can implement instructions for operating and configuring the system to intercommunicate and to process web pages applications and other data and media content as described herein. In some implementations the computer code can be downloadable and stored on a hard disk but the entire program code or portions thereof also can be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disks DVD compact disks CD microdrives and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any other type of computer readable medium or device suitable for storing instructions or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium for example over the Internet or from another server as is well known or transmitted over any other existing network connection as is well known for example extranet VPN LAN etc. using any communication medium and protocols for example TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for the disclosed implementations can be realized in any programming language that can be executed on a server or other computing system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

In the network interface is implemented as a set of HTTP application servers . Each application server also referred to herein as an app server is configured to communicate with tenant database and the tenant data therein as well as system database and the system data therein to serve requests received from the user systems . The tenant data can be divided into individual tenant storage spaces which can be physically or logically arranged or divided. Within each tenant storage space user storage and application metadata can similarly be allocated for each user. For example a copy of a user s most recently used MRU items can be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant can be stored to tenant storage space .

The process space includes system process space individual tenant process spaces and a tenant management process space . The application platform includes an application setup mechanism that supports application developers creation and management of applications. Such applications and others can be saved as metadata into tenant database by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications can be coded using PL SOQL which provides a programming language style interface extension to API . A detailed description of some PL SOQL language implementations is discussed in commonly assigned U.S. Pat. No. 7 730 478 titled METHOD AND SYSTEM FOR ALLOWING ACCESS TO DEVELOPED APPLICATIONS VIA A MULTI TENANT ON DEMAND DATABASE SERVICE by Craig Weissman issued on Jun. 1 2010 and hereby incorporated by reference in its entirety and for all purposes. Invocations to applications can be detected by one or more system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

The system of also includes a user interface UI and an application programming interface API to system resident processes to users or developers at user systems . In some other implementations the environment may not have the same elements as those listed above or may have other elements instead of or in addition to those listed above.

Each application server can be communicably coupled with tenant database and system database for example having access to tenant data and system data respectively via a different network connection. For example one application server can be coupled via the network for example the Internet another application server can be coupled via a direct network link and another application server can be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are examples of typical protocols that can be used for communicating between application servers and the system . However it will be apparent to one skilled in the art that other transport protocols can be used to optimize the system depending on the network interconnections used.

In some implementations each application server is configured to handle requests for any user associated with any organization that is a tenant of the system . Because it can be desirable to be able to add and remove application servers from the server pool at any time and for various reasons in some implementations there is no server affinity for a user or organization to a specific application server . In some such implementations an interface system implementing a load balancing function for example an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one implementation the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in some instances three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner by way of example system can be a multi tenant system in which system handles storage of and access to different objects data and applications across disparate users and organizations.

In one example storage use case one tenant can be a company that employs a sales force where each salesperson uses system to manage aspects of their sales. A user can maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process for example in tenant database . In an example of a MTS arrangement because all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having little more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example when a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates regarding that customer while waiting for the customer to arrive in the lobby.

While each user s data can be stored separately from other users data regardless of the employers of each user some data can be organization wide data shared or accessible by several users or all of the users for a given organization that is a tenant. Thus there can be some data structures managed by system that are allocated at the tenant level while other data structures can be managed at the user level. Because an MTS can support multiple tenants including possible competitors the MTS can have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that can be implemented in the MTS. In addition to user specific data and tenant specific data the system also can maintain system level data usable by multiple tenants or other data. Such system level data can include industry reports news postings and the like that are sharable among tenants.

In some implementations the user systems which also can be client systems communicate with the application servers to request and update system level and tenant level data from the system . Such requests and updates can involve sending one or more queries to tenant database or system database . The system for example an application server in the system can automatically generate one or more SQL statements for example one or more SQL queries designed to access the desired information. System database can generate query plans to access the requested data from the database. The term query plan generally refers to one or more operations used to access information in a database system.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined or customizable categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to some implementations. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or element of a table can contain an instance of data for each category defined by the fields. For example a CRM database can include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table can describe a purchase order including fields for information such as customer product sale price date etc. In some MTS implementations standard entity tables can be provided for use by all tenants. For CRM database applications such standard entities can include tables for case account contact lead and opportunity data objects each containing pre defined fields. As used herein the term entity also may be used interchangeably with object and table. 

In some MTS implementations tenants are allowed to create and store custom objects or may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. Commonly assigned U.S. Pat. No. 7 779 039 titled CUSTOM ENTITIES AND FIELDS IN A MULTI TENANT DATABASE SYSTEM by Weissman et al. issued on Aug. 17 2010 and hereby incorporated by reference in its entirety and for all purposes teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In some implementations for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

A hierarchical template framework uses templates to build software applications. The templates identify groups of software components for previously built and previously tested software services. The hierarchical template framework may include upper tier templates that build a container of support services for a core software application functions.

The upper tier templates may include other lower tier templates identifying sub groups of software components associated with lower tier software services that may operate within the container. The template framework relieves software developers from the time consuming task of manually locating and testing all of the different software components needed for creating new software applications.

The template framework may build new software applications independently but in conjunction with legacy software systems. The template may provide a set of support services for operating the application with the legacy software system. The prearranged set of services may relieve software developers from some of the typical integration and testing typically performed when adding new software applications to legacy software systems and enable new software applications to be launched independently of pre scheduled legacy system release dates.

Templates identify different groups of software components for building different software applications and services. For example template A may identify software components for building a UI tier application and template B may identify software components for building a headless application template. Template C may identify software components for building a lower tier service used in either template A or B.

Template D may identify software components for a specific UI service that may operate within the UI tier application associated with template A template E may identify software components for an application programming interface API service template F may identify software components for a grammar service template G may identify software components for an alerting service and template H may identify software components for a metric service. Of course these are just examples and templates may identify software components for building any software application or service.

Library may include different upper tier application templates such as templates A and B and lower tier templates such as lower tier service template C and UI service template D. Upper tier templates may build a container of general support services used by core application functions . For example a software developer may use a same set of support services for different customized core functions . In one example container may include all of the services needed for core functions to operate in conjunction with an enterprise system.

In this example template A identifies software components for a logging service A error reporting services B component service C rendering service D configuration service E and monitoring service F. Template A may include any other service or module needed for building launching and or running application .

Template A may include a core UI tier function A and the software developer may add additional custom functions B. For example the software developer may write custom Java code B for a new CPU utilization function that operates within application . The software developer also may select additional templates for adding additional services to application . For example the software developer may select template D to add UI service C to application .

Templates may include extensible markup language xml code and a project object model POM that identify software components dependencies libraries etc. in different repositories. Software development tool may use the xml and POM for UI tier template A UI service template D and custom functions B to download identified software components from the repositories into a directory. Template D then uses the downloaded software components to build application .

The software developer selects templates by copying associated blocks of xml into a program directory. In another example software development tool may display icons associated with templates . In response to selecting the icons software development tool may automatically copy the xml for the associated template into the program directory.

The following shows one example portion of template A that includes lower tier templates for logging service A and monitoring service F.

Templates are used for building out of the box previously built and previously tested fully functional software applications and services. Lower tier templates prevent software developers from manually locating all of the individual software components used for a discrete software service. Upper tier templates such as template A further relieve software developers from identifying locating and testing the software components for an entire prearranged group of support services used by a particular category of core functions . The software developer may create new software application simply by selecting appropriate core functions .

System level changes can be made to support services without modifying underlying core functions . For example a developer may modify one of services in template A. Software developers can then use the same template A that includes the updated service to rebuild all related applications . Thus software developers may no longer need to redesign and retest each software application for each new software update.

Templates may link and download software components for associated services into a program directory. For example UI tier template A may include xml that links and downloads software components for logging service A error reporting service B component service C configuration service E monitoring service F security service G HTTP container H and public API binding service I.

Some templates are hierarchical and may include one or more sub tier templates . For example UI tier template A includes sub tier templates I and J. In this example sub tier template I includes xml that links and downloads software components A for a rendering service D and sub tier template J includes xml that links and downloads software components B for building a plugin service J.

Template A represents a first application category that includes a user interface and template B represents a second application category that does not use a user interface. Template B may link to a second set of software components for a second set of support services E F G and I used by software applications that do not include a user interface. With no user interface headless application template B use as smaller group of software services than UI tier template B.

Lower tier service template C represents a third general software application category for creating lower tier services. A software developer may use template C to create individual services that operate within the containers formed by upper tier templates A and B. For example a software developer may use service template C to create a service that renders a specific form or webpage based on metadata such as a form number field value date client name etc.

Service template C may identify software components for a relatively small set of software services such as for configuration services E and other basic services L. Lower tier service template C also may include even lower tier templates that identify an out of the box set of software components for micro services.

Templates may link to open source software components stored in public repositories and or link to proprietary software components stored in private repositories. The xml in templates may initiate web requests that download and package software components from the repositories into a single uber jar with a digital signature that ensures integrity of the application. The uber jar may include java classes opened from other java jars. Some templates may link to some of the same software components . Templates may remove redundant software components from the same application.

In operation B the xml in the selected template identifies software component names versions and dependencies for the new product feature. The selected template may provide a container or shell for the new product feature that includes integration points build and tests. As mentioned above the container also may include support services used by the product feature for operating with a larger enterprise software system.

In operation C the template selected by the developer may require additional software services. If so the developer in operation D may select additional templates providing the additional services. For example the software developer in selected template D for additional UI service C.

In operation E the software developer may want to add custom core functions to the product feature that are not provided by any of the templates in the template library. In operation F the software developer may write custom software and add additional xml that accesses the custom software. For example in the software developer added custom functions B.

In operation G the selected templates are used to build the software product features. For example the software development tool in uses the xml in the selected templates to download software components and build the associated software application. The template build may compile java classes and use a specific extension that loads all of the software components into a same uber jar.

For example the software developer may enter a simple command path java jar that causes the software development tool in to download the software components identified by the selected templates into a file system and then package the downloaded components into a single java uber jar that stores the software components in one file. The uber jar may contain all the OSGi bundles dependencies needed for loading and deploying the software application and any associated services. If additional software services are added the software components may be added to the previously packaged uber jar.

Software development tool may load all the OSGi bundles directly from a local repository which may significantly reduce build packaging time. In another example the software development tool may include sets of compatible OSGi bundles automatically downloaded and packaged based on dependencies.

As mentioned above a software developer may need to create new software services in conjunction with existing legacy software systems. Previously the developer may have created a new application integrated the new application with a legacy software system and then tested the new application to ensure correct operability within the legacy software system. The additional integration and testing with the legacy software system increased software development time. Release of the new software application also may be limited to pre scheduled release dates for the legacy software system.

Template A in may build a container of support services that operate in conjunction with a legacy software system . For example new application may include logging service A rendering service D monitoring service F API client service I and a java virtual machine JMV UI M. In addition to services template A may also build additional core functions added by the software developer.

New software application and legacy software system may operate on application server hardware located within database system described above in . In another example new application and legacy software system may operate on different server hardware. In at least one example new application and legacy software system may operate within the multi tenant space described above in . Of course new application and legacy software system may operate on any software platform and include any functionality.

In this example legacy software system is assigned a first port address A and new application is assigned a second port address B. A client operating on one of user systems described above in may use a universal resource locator URL address to direct requests either to legacy software system or to new application .

In one example the client on the user system may operate within a web browser. A user may use the web browser to access different webpages operated either by new application or legacy software system . A user may access a first webpage provided by legacy software system . The user may send a first request A to legacy software system via the first webpage. The first webpage sends request A that includes a URL to a load balancer . Load balancer forwards request A with URL to port address A on legacy software system .

In response to request A legacy software system may send another webpage or display a link. The user may send a second request B via the second webpage or link. The second request B may include the same URL but with an additional prefix . Load balancer directs any messages with URL and prefix to new application .

While operating in conjunction with legacy software system new application also may operate independently and outside of legacy software system . Further at least some combination of services in container and or core functions may have previously been tested in conjunction with legacy software system . Thus the software developer may need less time to develop and test new software application .

New application may use API client service I to access data associated with legacy software application . For example new application may use API client service I to call a public API service and access configuration data and or other client data generated by legacy system .

In another example new application may comprise an authentication application that operates in conjunction with a login service operating within legacy system . One of templates in may identify software components for creating an authentication application . The software developer selects the authentication template and may add additional code to the template for any additional core functionality.

The software developer uses a software development tool such as Maven to download the software components from either public and or private repositories identified by the authentication application template and package all of the software components into a single java uber jar. The developer deploys the authentication application contained in the java uber jar on application server hardware in conjunction with legacy software system .

After launching authentication application a user may access legacy system and enter a username and password. After confirming the username and password legacy system may display a link to authentication application . The user may select the link sending a request B with a URL associated with authentication application . In response to request B authentication application may display a webpage or popup window prompting the user to enter a cell phone number. In response to receiving the cell phone number authentication application then may send a secret code to the cell phone number. The user may enter the secret code into the previously displayed login webpage to access other applications operating within legacy software system .

Thus the template quickly downloads packages and launches authentication application independently from legacy software system . The template includes a container of services used for operating in conjunction with legacy software system relieving the software developer from identifying building and testing the associated software components. While shown operating in conjunction with legacy system the software developer also may use the templates to create stand alone software applications.

The specific details of the specific aspects of implementations disclosed herein may be combined in any suitable manner without departing from the spirit and scope of the disclosed implementations. However other implementations may be directed to specific implementations relating to each individual aspect or specific combinations of these individual aspects. Additionally while the disclosed examples are often described herein with reference to an implementation in which an on demand database service environment is implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the present implementations are not limited to multi tenant databases or deployment on application servers. Implementations may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the implementations claimed.

It should also be understood that some of the disclosed implementations can be embodied in the form of various types of hardware software firmware or combinations thereof including in the form of control logic and using such hardware or software in a modular or integrated manner. Other ways or methods are possible using hardware and a combination of hardware and software. Additionally any of the software components or functions described in this application can be implemented as software code to be executed by one or more processors using any suitable computer language such as for example Java C or Perl using for example existing or object oriented techniques. The software code can be stored as a computer or processor executable instructions or commands on a physical non transitory computer readable medium. Examples of suitable media include random access memory RAM read only memory ROM magnetic media such as a hard drive or a floppy disk or an optical medium such as a compact disk CD or DVD digital versatile disk flash memory and the like or any combination of such storage or transmission devices. Computer readable media encoded with the software program code may be packaged with a compatible device or provided separately from other devices for example via Internet download . Any such computer readable medium may reside on or within a single computing device or an entire computer system and may be among other computer readable media within a system or network. A computer system or other computing device may include a monitor printer or other suitable display for providing any of the results mentioned herein to a user.

While some implementations have been described herein it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of the present application should not be limited by any of the implementations described herein but should be defined only in accordance with the following and later submitted claims and their equivalents.

