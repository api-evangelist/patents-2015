---

title: Methods and apparatus for control and detection of malicious content using a sandbox environment
abstract: A non-transitory processor-readable medium storing code representing instructions to cause a processor to perform a process includes code to cause the processor to receive a set of indications of allowed behavior associated with an application. The processor is also caused to initiate an instance of the application within a sandbox environment. The processor is further caused to receive, from a monitor module associated with the sandbox environment, a set of indications of actual behavior of the instance of the application in response to initiating the instance of the application within the sandbox environment. The processor is also caused to send an indication associated with an anomalous behavior if at least one indication from the set of indications of actual behavior does not correspond to an indication from the set of indications of allowed behavior.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09519779&OS=09519779&RS=09519779
owner: Invincea, Inc.
number: 09519779
owner_city: Fairfax
owner_country: US
publication_date: 20150713
---
This application is a continuation of U.S. patent application Ser. No. 13 690 452 entitled Methods and Apparatus for Control and Detection of Malicious Content Using a Sandbox Environment filed Nov. 30 2012 now U.S. Pat. No. 9 081 959 which claims priority to and the benefit of U.S. Provisional Patent Application No. 61 566 162 filed Dec. 2 2011 and entitled Methods and Apparatus for Control and Detection of Malicious Content Using a Sandbox each of which is incorporated herein by reference in its entirety.

Some embodiments described herein relate generally to a sandboxed protection system that protects a computing device from malicious content.

Information and application providers are continually challenged to deliver value and convenience to consumers by for example providing compelling information protection mechanisms. As the amount of the digitally available information increases the amount of viruses and other malicious information or software malware that can harm computing devices and endanger information safety and security is also on the rise. Some known anti virus software is used to prevent detect and remove various types of malware. Some known anti virus clients however for example use signature based detection methods in which a computer is scanned for traces of known threats. Signatures can be developed based on examining known malware. Thus threats previously unknown to anti virus clients can go unnoticed and or undetected.

Thus it would be desirable to provide an alternative protection system such as a sandbox that instead of using a signature based detection paradigms can detect malicious software based on for example software behavior.

In some embodiments a non transitory processor readable medium storing code represents instructions to cause a processor to receive a set of indications of allowed behavior associated with an application. The processor is also caused to initiate an instance of the application within a sandbox environment. The processor is further caused to receive from a monitor module associated with the sandbox environment a set of indications of actual behavior of the instance of the application in response to initiating the instance of the application within the sandbox environment. The processor is also caused to send an indication associated with an anomalous behavior if at least one indication from the set of indications of actual behavior does not correspond to an indication from the set of indications of allowed behavior.

Known anti virus software is used to prevent detect and remove various types of malware from computer devices. Some known anti virus clients however use signature based detection methods in which a computer is scanned for traces of known threats. Signatures can be developed based on examining known malware. Thus threats previously unknown to anti virus clients can go unnoticed and or undetected.

A sandbox can be used to separate and or isolate running programs from each other. A sandbox can provide a controlled set of resources for use by suspicious programs. In some embodiments a sandboxed protection system can detect malware in a way that overcomes shortcomings of the traditional anti virus clients and network gateway products. In some embodiments for example the sandboxed protection system can use behavioral based malware detection.

In some embodiments behavior based malware detection includes recognizing behaviors that software applications are allowed to perform. Behaviors not recognized can be considered suspect. For a typical user s computer this can be an extraordinarily complex problem because the configuration is a dynamic operation. For example over time many applications can be installed and run on the computer. Many of these applications can access unsafe content on a network such as for example the Internet. In some embodiments the sandboxed protection system can be designed to monitor processes and or applications such as web browsers document readers etc. that are running in a sandbox environment. Such a sandbox environment can include applications installed by and or recognized by the sandboxed protection system. In some embodiments applications not installed by and or recognized by the sandboxed protection system can be excluded from the sandbox environment. Thus the sandboxed protection system can understand the behaviors of the applications running in the sandbox environment. In some embodiments any behavior that falls outside of normal behavior i.e. anomalous behavior can be classified as a potential infection.

In some embodiments after the sandboxed protection system detects anomalous behavior the sandbox environment is no longer clean. The event that produced the anomalous behavior can be labeled as an infection. In some embodiments the user can be informed of the infection and or can be prompted to restore the sandbox to a clean state. Additionally in some embodiments the behaviors originating from the infection can be collected and or organized into a forensic report. This forensic report can be provided to a separate data server when the user restores the sandbox to a clean state. In other embodiments the forensic report can be stored locally instead of or in addition to providing the report to the separate data server. A system administrator can based on the forensic report view the forensic data. In some embodiments the forensic data can describe and or show in detail what happened during the infection session where the infection came from which portions of the sandbox environment were infected and or which devices within a network were infected. In other embodiments the forensic data can include a summary of the infections. In some embodiments system administrators can view the full scope of infections that could have occurred on their network.

Apparatus systems and methods are described herein to provide control and detection of malicious content using a sandbox environment. In some embodiments a non transitory processor readable medium storing code representing instructions to cause a processor to perform a process includes code to cause the processor to receive a set of indications of allowed behavior associated with an application. The processor is also caused to initiate an instance of the application within a sandbox environment. The processor is further caused to receive from a monitor module associated with the sandbox environment a set of indications of actual behavior of the instance of the application in response to initiating the instance of the application within the sandbox environment. The processor is also caused to send an indication associated with an anomalous behavior if at least one indication from the set of indications of actual behavior does not correspond to an indication from the set of indications of allowed behavior.

In some embodiments an apparatus includes a control module implemented in at least one of a memory or a processing device. The control module is configured to initiate an instance of a first application and an instance of a second application within a sandbox environment. The control module is also configured to receive from a monitor module associated with the sandbox environment a set of indications of actual behavior of the instance of the first application and a set of indications of actual behavior of the instance of the second application. An indication of a behavior is within both the set of indications of actual behavior of the instance of the first application and the set of indications of actual behavior of the instance of the second application. The control module is also configured to classify the behavior as an anomalous behavior for the first application based on a baseline behavior set for the first application. The control module is configured to not classify the behavior as an anomalous behavior for the second application based on a baseline behavior set for the second application. The control module is further configured to send a signal in response to classifying the behavior as an anomalous behavior for the first application.

In some embodiments an apparatus includes a control module implemented in at least one of a memory or a processing device. The control module is configured to receive a set of indications of allowed behavior associated with a first application. The control module is configured to initiate an instance of the first application within a sandbox environment such that the instance of the first application initiates an instance of a second application within the sandbox environment. The control module is also configured to receive from a monitor module associated with the sandbox environment a set of indications of actual behavior of the instance of the second application in response to the instance of the first application initiating the instance of the second application. The control module is also configured to send an indication associated with an anomalous behavior if at least one indication from the set of indications of actual behavior of the instance of the second application does not correspond to an indication from the set of indications of allowed behavior associated with the first application.

As used herein the singular forms a an and the include plural referents unless the context clearly dictates otherwise. Thus for example the term a sandbox environment is intended to mean a single sandbox environment or a combination of sandbox environments e.g. sandbox environments with a series of configurations for classes of applications for applications with different levels of trust etc. .

In some instances the sandbox environment can include an application helper module . The application helper module is an application extension or add on that monitors activity within an application running on UE . For example an application helper module can be used under the supervision of the sandboxed protection system to monitor an identifier of a source of an anomalous behavior. For example the application helper module can monitor Uniform Resource Locators URLs accessed by a user of UE using a browser application.

As used herein a module can be for example any assembly and or set of operatively coupled electrical components and can include for example a memory a processor electrical traces optical connectors software executing or to be executed in hardware and or the like. Furthermore a module can be capable of performing one or more specific functions associated with the module as discussed further below.

The sandboxed protection system can provide a security mechanism for separating running programs associated with UE . In some instances a sandbox environment can be used by UE under control of the sandboxed protection system to execute untested code or untrusted programs from unverified third parties suppliers untrusted users and untrusted websites. The sandboxed protection system can provide a tightly controlled set of resources in which guest programs can run such as scratch space on a data store . In some instances the sandboxed protection system can limit disallow or restrict capabilities of a UE such as for example network access ability to inspect a host system read from input devices etc.

As shown in a sandboxed protection system can include an application control module a sandbox monitor module an event engine module a guest monitor module a kernel mode module a rule generation module a data store and a trust classification module . Furthermore the sandboxed protection system communicates with one or more User Equipments UEs or other devices computer network systems etc. via input signal and output signal . Thus is merely an example illustrating the types of components that can be included within a sandboxed protection system

In various instances the sandboxed protection system and its components may be located anywhere within a communication network system not shown in including but not limited to within the UE within one or more service provider devices not shown or in separate locations within the communication network system.

In some instances the application control module is configured to control the sandbox environment by sending an output signal to the sandbox environment via the output signal . For example the application control module can initiate a module within the UE that is executed by the host operating system using the sandbox environment of UE . The application control module can initiate the sandbox environment for example by activating one or more applications and or processes within the sandbox environment . The application control module can also terminate a sandbox environment by terminating one or more applications and or processes running within the sandbox environment . The application control module can also initialize or clean the sandbox environment by for example restarting the sandbox environment or restoring a standard or predefined set of configurations to the sandbox environment .

In some instances the sandbox control module is configured to initiate a module to run within the sandbox environment to monitor application activity within the sandbox environment . In some embodiments the application helper module can monitor activity within the sandbox environment that the host operating system is unable to monitor outside the sandbox environment

In some instances the kernel mode module can control a kernel mode of operation of software applications within the host operating system . In some instances in kernel mode operation a process can have complete and unrestricted access to the underlying hardware of the UE . In such instances the kernel mode module enables a running process to execute any Central Processing Unit CPU not shown instruction and or reference any memory not shown address. In some instances the kernel mode module can reserve the kernel mode operation for lowest level most trusted functions of the host operating system

In some instances the event engine module can control a user mode of operation of software applications within the host operating system . In some instances in user mode operation a process is unable to directly access hardware and or reference memory of the UE . In some instances the event engine module enables a process running in user mode to delegate requests to system Application Programming Interfaces APIs to access hardware or memory of the UE . The protection provided by the user mode isolation enables the host operating system to recover crashes in user mode. In some instances most of the processes and or code associated with applications running on a UE can be executed in user mode controlled by the event engine module

In some instances the application control module can activate the event engine module . The event engine module can be included within the application control module . The event engine module is a rule based event processing engine that can determine if an event e.g. a process a service etc. is allowed to be executed on UE or is an infection e.g. a malware .

In some instances the event engine module can be responsible for receiving event data and analyzing the received data to determine if an anomalous behavior has occurred. In some instances the event engine module can receive data associated with events in substantially real time.

In some instances the sandboxed protection system can substantially constantly and or periodically detect anomalous behavior and or collect data associated with the anomalous behavior from applications and or processes in the sandbox environment . In some instances the collected data can be evaluated by the event engine module using a script e.g. a rule based filter and the associated processes can be added to a tree of processes and or process behaviors referred to herein as an evaluation tree stored in data store or in data store . In some instances the evaluation tree can be used by the event engine module to keep track of and or monitor the current state of the sandbox environment . For example if application App launches application App then App is defined as a node in the evaluation tree with App as its child. In some instances behaviors associated with a potential infection are added to the evaluation tree and or behaviors not associated to a potential infection are not added to the evaluation tree. In some instances as more information is gathered about a node e.g. an application in the evaluation tree new information can be associated with the node as an attribute. Upon occurrence of an anomalous behavior the evaluation tree can be serialized to a forensic report. The forensic report can be stored in a data store or a data store as a record of an infected session.

In some instances in order to effectively define what a sandboxed application process and or service is allowed to do features of a product including the application and or the process can be defined ahead of time for example by the provider or at run time for example by the sandboxed protection system via regulated authorization. For example a rule can be defined to identify behaviors of a sandboxed application process and or service that may trigger an infection. The rule can be used by the event engine module to determine a behavior as allowed or not allowed for the sandboxed application process and or service. In some instances when defining allowable rules for file and registry events techniques such as for example wild cards can be used as a shortcut to match a single rule to multiple files and or folders. Thus in such instances a balance can be reached regarding how strict each rule should be. If too many events associated with a process are allowed then a potential infection can be missed. However if too many events are restricted then a false positive can alert the user of UE in which an allowed behavior is detected as anomalous.

Additionally in some instances some system administrators can have the authority to pre configure the sandboxed applications with their own software applications processes and or browser add ons. In such instances the system administrators can build and or define a reliable set of rules that covers the allowed behaviors of the applications and or processes and enters the rules into the sandboxed protection system via input signal . The rules may be stored by the sandboxed protection system in rules database and accessed by the application control module event engine module or other components of the sandboxed protection system . In some instances to handle these challenges the sandboxed protection system can associate levels of trust to the applications and or processes being monitored in the sandbox environment

In some instances the event engine module can receive a notification from the sandbox monitor module associated with a behavior of an instance of an application running within the sandbox environment . For example the event engine module may receive a notification from the sandbox monitor module indicating that an instance of a Web browser running within the sandbox environment is trying to modify a system file. The event engine module can receive a set of rules from the rules database describing allowed behavior associated with the application. The set of rules may include rules describing file modification rights of the Web browser application. The event engine module can analyze the set of rules and determine whether the system file modification by the Web browser is allowed. If the modification is allowed by the Web browser the event engine module can send a signal to the application control module that the modification attempt by the Web browser is an allowed behavior. The application control module can in response allow the Web browser instance to continue execution and modify the system file. Otherwise if the analysis results by the event engine module indicate that the attempt by the Web browser to modify the file system is not allowed the event engine module indicates the system file modification as an anomalous behavior and sends the indication to the application control module . The application control module can in response terminate the file system modification attempt terminate the Web browser terminate the sandbox environment or take other predetermined actions associated with such anomalous behaviors. Furthermore the event engine module can store the anomalous behavior in the rules database associated with the Web browser application.

In some instances the trust classification module can associate a trust level to each application process and or service that is executed within the sandbox environment . The trust classification module can also associate a set of trusted processes with each application process and or service. The trust level and or the set of trusted processes may be defined at least based on past behavior of the application process and or service user input application process and or service type type of data associated with UE that the application process and or service attempts to access etc. The trust classification module can store the trust level and or the set of trusted processes associated with each application process and or service at the rules database

In some instances the sandbox monitor module can monitor activities of an instance of an application within the sandbox environment by tracing network activities of the running instance of the application within the sandbox environment . The sandbox monitor module can also monitor one or more executable files of the instance of the application.

In some instances different levels of trust can be associated with applications and or processes based on monitoring of the applications and or processes by the sandbox monitor module . For example in some instances an application process and or service can be classified as trusted untrusted suspect or unknown . In some instances such a classification can be performed by a trust classification module of the sandboxed protection system . In some instances the rule author e.g. a system administrator can make a determination of whether an application process and or service in the sandbox environment is trusted or untrusted. The sandboxed protection system can then automatically assign trust levels suspect and unknown after further evaluation of the application process and or service. In other instances the rule author can also make the determination of whether the application process and or service is suspect or unknown. In still other instances the sandboxed protection system can automatically assign a trust level to each application process and or service based on a type of the application process and or service e.g. game browser word processor etc. observed behavior of the application process and or service etc. In some instances a system administrator can request the sandboxed protection system to override a trust level for an application process and or service. Similarly in some instances a system administrator can request the sandboxed protection system to modify the trust levels of applications and or processes. Classifying the trustworthiness of each process in a guest application can provide flexibility for customization of the scope of malware detection.

In some instances declaring a process as trusted in the rules can essentially imply that any possible behavior exhibited and or actions performed by the process and or the process s child processes are considered as allowed behavior. In some instances trusted processes can be allowed to perform any action. In such instances by classifying a process as trusted the sandboxed protection system can effectively disable detection for that process. In such instances for example if a trusted process launches a child process the child process can inherit the trust and become trusted. As another example if a file is written by a trusted process and launched by a different process the new process can be trusted because the file inherits the trust from the trusted process. This behavior can be common for programs that update themselves. In other instances a system administrator can request the sandboxed protection system for manual or rule based reclassification of each child process launched and or written by a trusted process.

Trusting a process is typically a less secure option than not trusting the process. Thus in some instances the sandboxed protection system can warn the system administrators about the risk of adding new software into the sandbox environment . For example a system administrator that would like to install a WebEx application process and or service in the sandbox environment but would also like to avoid defining allowed behaviors for the WebEx process and all child processes can declare WebEx.exe as a trusted process. In some instances a system administrator can declare a process as trusted by providing the path to the root process to a trusted process section of the rules stored in rules database and processed by the event engine module

In some instances processes that are monitored by the sandbox monitor module as potential propagation methods for infection can be declared and or classified as untrusted by the trust classification module . In some instances if the event engine module detects that an untrusted application process and or service performs a suspicious behavior that is not explicitly defined as allowed this is a trigger for an infection. In some instances the rules database can include whitelisted rules for untrusted applications and or processes that define normal trusted operating behaviors of the applications and or processes.

For example in a Microsoft Windows environment a main account in the sandbox environment can run and or execute as a limited user. Therefore some processes associated with the main account may not have permission to modify registry keys inside HKEY LOCAL MACHINE. If a process without having the permission attempts to modify a portion of the registry key the sandboxed protection system can recognize the attempted modification as a trigger behavior for an infection. A process P however which runs in the system context can have permission to modify registry keys inside HKEY LOCAL MACHINE. In order to prevent process P from triggering an infection a rule that allows P to access the registry key can be defined as seen in the Heuristic Table shown below .

In some instances after an infection has occurred the process that caused the infection can be classified by the sandboxed protection system as suspect. In some instances after the process is classified as suspect the sandboxed protection system can record subsequent behaviors being performed by the process and or its child processes. In some instances similar to trusted processes behavior originating from a suspect process can inherit the suspect trust level. After an event is evaluated as being suspect by the event engine module it can be added to the evaluation tree so that it can be serialized into a forensic report e.g. a report file in data store . The forensic report can be analyzed by the event engine module and can provide details of the suspect events.

In some instances additional information on suspect behaviors and or events associated with processes and applications such as for example cryptographic hash functions e.g. Message Digest MD5 hashes Secure Hash Algorithm SHA hashes etc. providing unique signatures for files can be captured by the sandboxed protection system . After a hash value is calculated it can be sent to the event engine module to be attached as an attribute to the application and or the process in the evaluation tree. The hash value can be used to lookup and or compare the triggering application process and or service against a third party malware e.g. virus database. This lookup can provide information about number of anti virus clients that scanned the process as being infected.

In some instances the sandboxed protection system also includes a user configurable feature which can terminate and or kill any suspect processes as they are detected. In some instances the process termination can be accomplished by terminating and or killing a process as soon it is classified as suspect. In other instances the sandboxed protection system can provide information about the suspect processes to a system administrator and allow the administrator to terminate and or kill a process.

In some instances a process can be classified as unknown if its path is not explicitly listed as trusted or untrusted in the rules database . In some instances because this process has not yet been configured and or classified it can perform actions and or behaviors without triggering an infection. In some instances however unlike trusted processes the unknown trust of this process is not inherited across child processes. An unknown process can for example launch an application App and application App can be tracked as untrusted. In some instances because unknown process behaviors are important to know about and evaluate the behaviors of an unknown process can be added to the evaluation tree and can show up in an infection report e.g. a forensic report if the session becomes tainted. While four trust levels are shown and described herein in other instances any number of trust levels can be used.

In some instances designing the allowable behavior rules can depend on the types of behaviors that can trigger an infection. In some instances for example infections can be determined based on the following heuristics table. In various instances other infection triggers can be added with additional sensors and or types of events.

In some instances when an infection is detected an attempt can be made by the sandboxed protection system to determine the originating source of the infection. For example if the infection is triggered by a web browser e.g. Internet Explorer Firefox etc. or a child process of a web browser then the source can be determined based on a URL history of a user of UE . The URL trace events can be captured from an application helper module attached to the web browser. The URL trace events can be fed to the event engine module which then correlates the main URL and any URLs redirected from that main URL with an infection. The event engine module can correlate the URLs by tracing backwards in time from the most recent URL matching a Process Identifier PID associated with an infection root. For another example a process application service and or the like can be identified as the originating source of the infection.

In some instances for example the sandboxed protection system can allow a user of UE to launch a portable document format PDF file on the UE for viewing inside the sandbox environment . Since PDF readers are a prime attack propagation method for viruses the sandboxed protection system can trace the source to the PDF file if an infection is originated from the PDF reader or its child processes. The sandboxed protection system can do this by keeping and or maintaining a map of processes in the sandbox environment that were launched when the PDF file was redirected from the host operating system . When an infection occurs the sandboxed protection system can check the map to see if the PDF file belongs to an infected process. This technique can be used to track an infection if other redirected documents from the host operating system are determined to be the source of an infection.

After the source of an infection is determined the source can be added as a node in the evaluation tree as a child of the infected process and or application. This source can be included in the summary of infection report e.g. the forensic report provided to a system administrator by the sandboxed protection system . In some instances if no source for the infection is found the name of the infected process can be used.

As previously discussed rules can be defined and stored in the rules database by users by system administrators by application providers etc. A set of rules can be associated with each application process and or service. The set of rules associated with an application process and or service define allowed behavior of the application process and or service. In some instances the rules associated with an application process and or service can be used by the event engine module to determine whether a behavior triggers and or is associated with an infection. The rules can be divided up into a plurality of rule sets for example a main rule set e.g. rules associated with the host operating system a custom rule set e.g. rules associated with applications and or processes etc. In some instances the main rule set can be provided with and or standard to the sandboxed protection system . In some instances system administrators can introduce their own custom rule sets by entering rules into the sandboxed protection system via input . In some instances the applications executed in sandbox environment e.g. browsers can be customizable for installing software. A custom rule set file can enable the event engine module to define allowable behaviors for new processes that would otherwise trigger an infection. When the event engine module is initialized the main rule set can be merged with the custom rule sets and for example compiled into a byte code. The sets of rules may be stored in the rules database

In some instances the sandboxed protection system includes a rule generation module that automatically generates rules for an application process and or service based on previously declared infections associated with same or similar applications and or processes e.g. applications with the same type . For example the rules generation module can generate rules based on infections that have been declared as false positives. The rule generation module can also generate rules based on sets of rules existing in the rules database for the application process and or service. The rule generation module can address various issues associated with application process and or service behavioral detection. For example the rule generation module can define allowed behaviors for new applications. The rule generation module can also provide a false positive infection report e.g. forensic report and convert the report into a new set of rules. The rule generation module can further enable a system administrator to develop rules for their own set of plug ins that have not been already declared and or included in the main rule set.

In some instances the sandboxed protection system can include functionality to automatically generate allowed rules from an infection that may be a false positive. In some instances for example the system administrators can view the forensic report provided by the sandboxed protection system and provide an indication to allow a process and or behavior of a process. For example the system administrator can click a button labeled Allow . . . next to the entry for a process and or behavior of a process. In some instances this button can enable the system administrator to add the process and or behavior of the process to the main rule set e.g. windows.rul and or a custom rule set e.g. custom.rul . In some instances a system administrator can provide an input to the sandboxed protection system to trust new processes for example by selecting a checkbox for Trust newly encountered processes the system administrator can automatically classify new processes as trusted which while less secure can reduce the chance of false positives.

In some instances when a user of a UE generates custom rules the forensic report the main rule set and or the custom rule set if exists can be sent from UE to the rule generation module via input signal . The rule generation module can receive the inputs and generate a new custom rule set for example to be saved in rules database . After the new custom rule set is generated the sandboxed protection system can send a signal to the UE via output signal . In response to the signal the UE can provide an option to the user e.g. a button to display a save dialog that allows the user to retrieve the newly defined custom rule set from the rules database

Additionally in some instances the sandboxed protection system can be set to a training mode. The training mode can be for example a command line parameter. In some instances while the sandboxed protection system is in training mode infections sent to the UE can be flagged by the event engine module as training samples and distinguished visually e.g. in a report and or in the rule generation module from real infections with an indicator such as a different color or special icon. This can help distinguish between actual infection reports and training samples that are used to generate rules by the rule generation module . In some instances training samples can then be converted into additional rules automatically or via interaction with the system administrator. The events collected in the training sample can be filtered reduced and or output as new detection rules. The new rules can be downloaded and used by the event engine module for future detection and or analysis.

In some instances for determining behavior of the processes executed in the sandbox environment multiple sensors not shown can be defined and or set up on the UE to capture events e.g. anomalous behavior and collect data about events. In some instances the sensors can include module detection e.g. process detection . In some instances even though the sandboxed protection system can classify a new process as trusted false positives can still occur. For example when writing rules for a WebEx plug in although WebEx is installed and webex.exe has been declared and or classified as a trusted process webex.dll is still loaded into a browser e.g. Internet Explorer . Anything webex.dll does can show up as a behavior originating from the browser e.g. iexplore.exe . Therefore in order to fully whitelist WebEx the sandboxed protection system can whitelist suspicious behaviors for the browser that could otherwise be compromising. In order to solve this problem the sandboxed protection system can understand what modules are doing irrespective of the process into which they are loaded.

Similarly stated the sandboxed protection system can separate behaviors from modules and processes. Referring to the above example the sandboxed protection system can declare classify and or recognize webex.dll as a trusted module. Anything webex.dll does can be allowed however the browser e.g. iexplore.exe can trigger an infection if it performs the same suspicious behavior. Similarly in some embodiments the sandboxed protection system can declare classify and or recognize webex.dll as untrusted but whitelist the behaviors originating from that module for added security.

In some instances the guest monitor module provides an operating system device driver that can monitor and or report activity associated with a network a file system a registry and or initiation and or termination of processes within UE

The data collected by the sensors can be stored in data store and sent to the event engine module to be processed and analyzed based on a previously defined list of allowed behavior for the processes.

In some instances the events can be captured in substantially real time. For example events can be captured using a kernel driver that hooks onto and or monitors process events file events registry events and or network events as the events are being performed. In some instances for example the application helper module can be loaded in a web browser e.g. Internet Explorer or Firefox to capture Uniform Resource Locator URL events. These captured events can be sent to the event engine module for analysis. The event engine module can process each event by running it through a rule based filter. In some instances the rules for the rule based filter can be defined using a scripting language optimized to filter events efficiently. As shown in the host operating system executes a sandbox environment controlled by a sandboxed protection system

In some instances the sandboxed protection system can be activated by instructions stored in a memory e.g. a non transitory processor readable medium on the UE . Additionally in some instances the sandboxed protection system can include additional modules and or engines such as for example a trust classification module a rule engine a detection engine and or the like each not shown . Such modules and or engines can be hardware modules and or engines or software modules and or engines executing in hardware.

In some instances applications such as web browsers documents viewers etc. are executed within the sandbox environment . The sandbox monitor module and the application helper module report application events e.g. application behaviors associated with applications to the application control module . The application control module can control the sandbox environment shown as arrow for example by initiating terminating or modifying applications and or processes executed within the sandbox environment using the application events . Furthermore the guest monitor module reports kernel mode events such as events associated with the host operating system to the application control module shown as arrow . In some instances the application control module and or the event engine module can use the operating system events for controlling the applications within the sandbox environment

Examples of the processes by sandboxed protection system are further described below in connection with flowcharts of and .

In some instances the sandbox protection system can control the sandbox environments via the communication network . In such instances control signals can be sent between the sandbox protection system and the sandbox environments via the communication network . For example the sandbox environments can be running on an execution server that a user of UE can access remotely by a sandbox access module via the communication network . Each UE has access to a sandbox environment located within one or more execution server s . The sandbox environments are structurally and or functionally similar to the sandbox environment and of .

In some embodiments the sandboxed protection system can be operatively coupled to the UEs via for example a communication network . In such embodiments control signals can be sent between the sandboxed protection system and the UEs via the communication network . As previously discussed the sandboxed protection system and its components may be located anywhere within a communication network system including but not limited to within the UEs or in separate locations within the communication network system .

The execution server s are equipped with one or more processors and one or more data storages e.g. memories . A storage location on the execution server s can be associated with the UE as a sandbox environment . For example the UE may have access to a sandbox environment installed on the execution server s such that the UE can access the sandbox environment via the communication network and can execute applications and or processes within the sandbox environment on the execution server s . In this example the UE can initiate downloading an application from the application provider s into the sandbox environment on the execution server s . The UE can then initiate execution of the application on the execution server s . The sandbox protection system can control the execution of the downloaded application on the execution server s via the communication network .

Communication network can be any communication network such as the Internet an Intranet a Local Area Network LAN a Wide Area Network WAN a telephone network an Ethernet network a fiber optic network a wireless network a cellular network etc. configurable to allow the one or more UEs the sandboxed protection system the one or more application provider s and the one or more execution server s to communicate with communication network and or to each other through communication network .

In some instances communication network can include multiple networks operatively coupled to one another by for example network bridges routers switches and or gateways. For example the UEs can be operatively coupled to a cellular network and the application provider s the sandboxed protection system and or the one or more execution server s can be operatively coupled to a fiber optic network. The cellular network and the fiber optic network can each be operatively coupled to one another via one or more network bridges routers switches and or gateways such that the cellular network the Ethernet network and the fiber optic network are operatively coupled to form a communication network. Alternatively the cellular network and fiber optic network can each be operatively coupled to one another via one or more additional networks. For example the cellular network and the fiber optic network can each be operatively coupled to the Internet such that the cellular network the fiber optic network and the Internet are operatively coupled to form a communication network.

As illustrated in UEs are operatively coupled to communication network via network connection application provider s are operatively coupled to communication network via network connection execution server s are operatively coupled to communication network via network connection and the sandboxed protection system is operatively coupled to communication network via network connection . Network connections and can be any appropriate network connection for operatively coupling UEs application provider s execution server s and the sandboxed protection system .

A network connection can be a wireless network connection such as for example a wireless fidelity Wi Fi or wireless local area network WLAN connection a wireless wide area network WWAN connection and or a cellular connection. A network connection can be a wired connection such as for example an Ethernet connection a digital subscription line DSL connection a broadband coaxial connection and or a fiber optic connection.

As mentioned above in some instances a computer network system can include more than one UE more than one sandboxed protection system more than one application provider s and more than one execution server s . A UE a sandboxed protection system an application provider and or an execution server s can be operatively coupled to the communication network by heterogeneous network connections. For example a first UE can be operatively coupled to the communication network by a WWAN network connection a second UE can be operatively coupled to the communication network by a DSL network connection and a sandboxed protection system can be operatively coupled to the communication network by a fiber optic network connection.

The application provider s can be for example a web server configured to provide various applications to electronic devices such as UEs . For example the UE can be in communication with the application provider s via the communication network under the supervision of the sandboxed protection system .

The UEs can be any of a variety of electronic devices that can be operatively coupled to communication network . A UE can be a personal computer a laptop computer a personal digital assistant PDA a cellular telephone a portable mobile internet device and or some other electronic communication device. The UEs can include a web browser configured to access a webpage or website hosted on or accessible via the application provider s over communication network . The UEs can be configured to support for example HTML using JavaScript. For example the UEs can include a web browser such as Firefox Safari Opera and Chrome. An Internet page or website can be accessed by a user of a web browser at a UE by providing the web browser with a reference such as a uniform resource locator URL for example of a webpage. For example a user of a UE can access an application provider via a URL designated for the application provider . In some instances UEs can include specialized software for accessing a web server other than a browser such as for example a specialized network enabled application or program.

In some instances portions of a website accessible via a web server for example an application provider can be located in an execution server s accessible to the application provider . A memory within the execution server s can be at least one of a database a data warehouse and or the like. A UE can also include a display monitor or user interface UI a keyboard various ports e.g. a USB port and other user interface features such as for example touch screen controls audio components and or video components each not shown . A UE can be operatively coupled to communication network via the UI and network connection .

At a set of rules for processes within the sandbox environment is defined by the rule generation module . The rules can include for example classifying processes and or applications using trust classifications provided by the trust classification module . In some instances the rules can include predefined rules for the system and or custom defined rules by a system administrator. The rules are stored in the rules database

At the sandbox monitor module monitors events and activities associated with running applications and or processes within the sandbox environment based on the rules associated with the applications and or processes. The sandbox processes can be monitored based on the rules in the rules database . The sandbox monitor module can report any anomalous event or activity to the event engine module

At the event engine module analyzes the report received from the sandbox monitor module with reference to the associated rules in the rules database to determine whether the anomalous behavior is malicious. The event engine module can declares an infection based on the detected malicious behavior and the rules of the rules database

At the event engine module adds the detected infection to an evaluation tree within the data store . The evaluation tree can be used for further analysis of the infection by the sandboxed protection system or by a system administrator. The analysis results can be used by the rule generation module for updating the rules database

In some instances not shown in the sandboxed protection system can automatically and or dynamically disable and or ignore an infection detection. Disabling and or ignoring detection events can be used for example in cases where some events are generated intentionally that otherwise would trigger the event engine module to report an infection. For example if a user of UE intentionally runs an unknown process such as an application or an installer in the sandbox environment without previously defining rules to trust the process.

At the rule generation module revises the rules in the rules database based on the detected infections reported as the evaluation tree. In some instances the rule generation module can automatically revise the rules in the rules database based on the monitored behavior of the sandbox environment by the sandbox monitor module and the analysis of the monitored behavior including the infections detected by the event engine module . In other instances a system administrator can manually revise the rules based on the detected infections evaluation tree content etc. In still other instances the rules may remain unchanged based on the infection.

At the sandboxed control module restarts the sandbox environment such that the infected environment can be terminated and a new clean sandbox environment can be restarted. The process of monitoring the sandbox environment by the sandbox monitor module based on the rules of the rules database can then continue with the clean sandbox environment . Alternatively the sandbox control module can terminate and or restart the application process and or service with malicious behavior without restarting the sandbox environment

At the event engine module receives from the sandbox monitor module a set of indications of actual behavior of the instance of the application within the sandbox environment . The event engine module can store the actual behavior indications in the data store .

At the event engine module analyzes the actual behavior of the instance of the application in comparison with the allowed behavior associated with the instance of the application in the data store to detect correspondences and discrepancies. If the allowed behavior and the actual behavior correspond the event engine module can conclude that no infection has occurred and malicious behavior has not been detected.

If at least one indication from the set of indications of actual behavior does not correspond to an indication from the set of indications of allowed behavior at the event engine module sends an indication associated with an anomalous behavior to the application control module . The indication associated with the anomalous behavior can be used by the application control module to terminate the application and or to terminate sandbox environment s process to send an indication of the anomalous behavior to a system administrator or to a user and or the like.

In some instances the application control module can send the indication associated with the anomalous behavior to the event engine module for example to define an evaluation tree. The evaluation tree including the indication associated with the anomalous behavior can be stored in data store associated with the application for example added to the rules database associated with the application.

In some instances the sandbox monitor module can be configured to monitor at least one event of the instance of the application within the sandbox environment such as for example process events e.g. executing unauthorized processes of the instance of the application file events e.g. access of unauthorized files of the instance of the application registry events e.g. registry updates of the instance of the application network events e.g. network connection events of the instance of the application or thread injection events e.g. behavior associated with inserting and run executable code within the address space of another process of the instance of the application etc.

In some instances the rule generation module uses the anomalous behavior detected by the event engine module and revises the set of indications rules of allowed behavior associated with the application. The revised set of rules can replace the set of rules in the rules database

In some instances the indication associated with the anomalous behavior can include a trace associated with a source of the anomalous behavior. For example the application can be a web browser application and the indication associated with the anomalous behavior can include a uniform resource locator URL trace associated with the web browser application. For another example the source trace can include an identifier of an application process service and or the like. The source trace enables the rule generation module to revise the rules to enable the sandbox control module to control application access to the sources that cause anomalous behavior of the application.

In some instances the set of rules indicating allowed behavior associated with the application is based at least in part on a trust level associated with the application. The trust level can be defined by the trust classification module based on for example user input previous behavior of the application e.g. history of actual behavior in data store application type etc. Furthermore the set of indications of allowed behavior associated with the application can include an identifier of a trusted process associated with the application.

In some instances the sandbox monitor module can monitor activities of an instance of an application within the sandbox environment by tracing network activities of the running instance of the application within the sandbox environment . The sandbox monitor module can also monitor one or more executable files of the instance of the application.

At the event engine module receives from a sandbox monitor module associated with the sandbox environment a set of indications of actual behavior of the instance of the first application and a set of indications of actual behavior of the instance of the second application. The first application and the second application can be from the same application type two instances of the same application running simultaneously on sandbox environment or from different application types two different applications running simultaneously on sandbox environment . In some instances the set of indications of actual behavior of the instance of the first application and the set of indications of actual behavior of the instance of the second application can overlap such that the instance of the first application and the instance of the second application may show the same actual behavior. However the same actual behavior that can be declared as anomalous behavior for an instance of the first application can be declared as an allowed behavior for an instance of the second application or vise versa.

At the event engine module checks the rules database to find a baseline behavior set for the first application e.g. a set of allowed behavior for the first application . If the actual behavior is an anomalous behavior for the first application based on the baseline behavior set for the first application in the rules database the event engine module classifies the actual behavior as anomalous behavior for the first application.

At the event engine module checks the rules database to find a baseline behavior set for the second application. If the actual behavior is not an anomalous behavior for the second application based on the baseline behavior set for the second application e.g. a set of allowed behavior for the second application in the rules database event engine module does not classify the actual behavior as anomalous behavior for the second application.

For example the event engine module can classify a behavior B as an anomalous behavior for the first application based on a baseline behavior set for the first application but not classify the behavior B as an anomalous behavior for the second application based on a baseline behavior set for the second application.

Note that as shown in the sandboxed protection system can be located within the UEs or in a separate location coupled with the UEs via the communication network . Therefore in some instances as shown in the sandboxed protection module can include the sandbox environments 

In some instances the sandbox control module can be operatively coupled to the sandbox environment via a network. For example as shown in the sandboxed protection system that includes the sandbox control module is coupled to the UEs that include sandbox environments via communication network by network connections and .

In some instances the set of indications of actual behavior of the instance of the first or second application includes at least one of a process event identifier of the instance of the first or second application a file event identifier of the instance of the first second application a registry event identifier of the instance of the first or second application or a network event identifier of the instance of the first second application.

At the event engine module can send a signal to other components of the sandboxed protection system such as the application control module to indicate classifying of the actual behavior as anomalous behavior for the first application. The application control module can send a signal to initiate actions such as first application termination sandbox environment termination notifying a system administrator or a user about the anomalous behavior etc.

At the sandbox control module initiates an instance of the first application within a sandbox environment such that the instance of the first application initiates an instance of a second application within the sandbox environment . For example execution of the first application can start execution of a second application without an intervention by the application control module . The sandbox monitor module can detect initiation of the second application and report the initiation to the application control module and or to the event engine module

At event engine module receives from the sandbox monitor module associated with the sandbox environment a set of indications of actual behavior of the instance of the second application as previously discussed with regards to in response to the instance of the first application initiating the instance of the second application. The first application and the second application can be from the same application type or from different application types.

If at least one indication from the set of indications of actual behavior of the instance of the second application does not correspond to an indication from the set of indications of allowed behavior associated with the first application at the event engine module sends an indication associated with an anomalous behavior associated with the second application to the application control module . The indication associated with the anomalous behavior can be used by the application control module to terminate the second application and or the sandbox environment process etc. Furthermore the event engine module can add the anomalous behavior to an evaluation tree associated with the second application.

In some instances the rule generation module uses the anomalous behavior of the second application detected by the event engine module and revises the set of indications rules of allowed behavior associated with the first application and or the set of indications rules of allowed behavior associated with the second application. The revised set of indications can replace the set of indications in rules database

In some instances the second application can be for example a web browser application and the indication associated with the anomalous behavior can include a uniform resource locator URL trace associated with the web browser application. The source trace enables the rule generation module to revise the set of indications rules of allowed behavior associated with the first and or second application such that access of second application to the sources that caused anomalous behavior can be controlled.

In some instances the set of indications of allowed behavior associated with the first application is based at least in part on a trust level associated with the first application. The trust level can be defined by the trust classification module based on for example user input previous behavior of the first application e.g. history of actual behavior in data store first application type previous behavior of the second application e.g. history of actual behavior in data store second application type etc. Furthermore the set of indications of allowed behavior associated with the first application can includes an identifier of a trusted process associated with the first application.

It is intended that the systems and methods described herein can be performed by software executed on hardware hardware or a combination thereof. Hardware modules may include for example a general purpose processor a field programmable gate array FPGA and or an application specific integrated circuit ASIC . Software modules executed on hardware can be expressed in a variety of software languages e.g. computer code including C C Java Ruby Visual Basic and other object oriented procedural or other programming language and development tools. Examples of computer code include but are not limited to micro code or micro instructions machine instructions such as produced by a compiler code used to produce a web service and files containing higher level instructions that are executed by a computer using an interpreter. Additional examples of computer code include but are not limited to control signals encrypted code and compressed code.

Some embodiments described herein relate to a computer storage product with a non transitory computer readable medium also can be referred to as a non transitory processor readable medium having instructions or computer code thereon for performing various computer implemented operations. The computer readable medium or processor readable medium is non transitory in the sense that it does not include transitory propagating signals per se e.g. a propagating electromagnetic wave carrying information on a transmission medium such as space or a cable . The media and computer code also can be referred to as code may be those designed and constructed for the specific purpose or purposes. Examples of non transitory computer readable media include but are not limited to magnetic storage media such as hard disks floppy disks and magnetic tape optical storage media such as Compact Disc Digital Video Discs CD DVDs Compact Disc Read Only Memories CD ROMs and holographic devices magneto optical storage media such as optical disks carrier wave signal processing modules and hardware devices that are specially configured to store and execute program code such as Application Specific Integrated Circuits ASICs Programmable Logic Devices PLDs Read Only Memory ROM and Random Access Memory RAM devices.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Where methods and steps described above indicate certain events occurring in certain order the ordering of certain steps may be modified. Additionally certain of the steps may be performed concurrently in a parallel process when possible as well as performed sequentially as described above. Although various embodiments have been described as having particular features and or combinations of components other embodiments are possible having any combination or sub combination of any features and or components from any of the embodiments described herein.

