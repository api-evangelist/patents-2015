---

title: Display driving architectures
abstract: A display driving architecture that can include two graphics pipelines with an optional connection between them to provide a mirrored mode. In one embodiment, one of the two pipelines can be automatically configured (e.g. routed in one of a plurality of ways, such as routing to do color conversion) based upon the type of cable that is coupled to a connector of the one pipeline. In another embodiment, a connection of a cable can cause display information (e.g. resolutions of an external display) to be provided to an application which can select a display mode while one of the graphics pipelines is kept in a low power state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09129396&OS=09129396&RS=09129396
owner: Apple Inc.
number: 09129396
owner_city: Cupertino
owner_country: US
publication_date: 20150120
---
This application is a continuation of co pending U.S. application Ser. No. 12 895 707 filed on Sep. 30 2010 which claims the benefit of U.S. Provisional Application No. 61 298 522 filed on Jan. 26 2010 and U.S. Provisional Application No. 61 292 830 filed on Jan. 6 2010 which applications are incorporated herein by reference.

This application relates generally to the field of display driving architectures and more particularly in certain embodiments to those display driving architectures which can drive two or more displays concurrently.

Electronic devices such as computer systems wireless cellular telephones mobile computing devices tablet computing devices or other data processing systems often include a built in internal visual display device. The internal display device is used to display visual content generated by or stored on the electronic device. The internal display device may be for example an internal liquid crystal display LCD device.

Certain electronic devices may additionally include a connector such as an Extended Video Graphics Array XVGA connector or other connector known in the art to connect to an external visual display device. The external display device may be for example a standalone LCD or cathode ray tube CRT display. In some instances the electronic device can be set up such that both the internal display device and the external display device display the same visual content concurrently. This may be referred to as a mirrored mode. Alternatively certain electronic devices can also be set up so that the two display devices will display different images such as portions of an extended desktop which allows a user to move a window from one desktop to another desktop by moving the window between the two displays.

Display driving architectures are described herein. In one embodiment a display driving architecture can include two display or graphics pipelines with an optional connection between them to provide a mirrored mode. A first graphics or display pipeline can be coupled to an internal display device to drive the internal display device while a second graphics or display pipeline can be coupled to a connector which is configured to drive an external display device. A connection from the first graphics pipeline to the second graphics pipeline can provide a mirrored mode to display an image concurrently on both the internal display device and the external display device. In this mirrored mode the second graphics pipeline may be powered down to conserve power while the first graphics pipeline generates display data for display on both the internal display device and the external display device.

In another embodiment one of the two pipelines can be automatically configured based upon the type of cable that is coupled to a connector of one of the pipelines. The automatic configuring can involve routing in one of a plurality of ways such as routing to do color space conversion or routing to not do color space conversion. The routing can occur within a second display pipeline which drives the connector that in turn drives the external display device.

In another embodiment a data processing system can employ a power conservation technique to conserve power within the second graphics pipeline. In one implementation of this technique a connection of a cable can cause display information such as a resolution of the external display to be provided to an application which can select a display mode such as a resolution displayable on the external display device while the second graphics pipeline is kept in a low power state. In a method according to this embodiment data is generated to be displayed on an internal display of the data processing system through a first display pipeline. When it is determined that a cable has been coupled to the connector which drives the external display a signal such as interrupt signal causes an operating system component to retrieve information about the external display such as resolution information and provides that information to a software application which can select a resolution for the external display or can select a color mode for the external display while maintaining the second display pipeline which will drive the external display in a low power state. After selecting a resolution or other state for the external display the software application can begin to generate data to be displayed on the external display and in one embodiment only after the data is generated and ready to be drawn on the external display device will the operating system cause the second display pipeline to be powered up from its low power state. In this manner overall power consumption of the data processing system can be reduced by keeping the second display pipeline in a low power state until the system is ready to drive display content to the external display device.

Some embodiments include one or more application programming interfaces APIs in an environment with calling program code interacting with other program code being called through the one or more interfaces. Various function calls messages or other types of invocations which further may include various kinds of parameters can be transferred via the APIs between the calling program and the code being called. In addition an API may provide the calling program code the ability to use data types or classes defined in the API and implemented in the called program code.

At least certain embodiments include an environment with a calling software component interacting with a called software component through an API. A method for operating through an API in this environment includes transferring one or more function calls messages or other types of invocations or parameters via the API.

Various embodiments and aspects of the inventions will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment. The processes depicted in the figures that follow are performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software or a combination of both. Although the processes are described below in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

The data processing system may further include a video decoder which can be a hardware video decoder or a video decoder implemented with both hardware and software to decode compressed and optionally encrypted media data. The video decoder may be employed to decode video from a camera or from a storage device which stores the video content such as for example a movie. The data processing system can include one or more memory devices such as RAM flash etc. which can store the data used to generate displayable content as well as the displayable content itself. Memories A B and C can be either separate memories or the same memory such as a single integrated circuit or multiple integrated circuits implementing a single memory space etc. as is known in the art. The CPU and the GPU can generate images or other data to be displayed and store those images in memory. As shown in the example of the GPU can generate images to be displayed and store those images into memory B and memory C while the CPU can store images it creates to be displayed into memory B. Alternatively the CPU can write to both memories B and C while the GPU could write only one or both. The memory A can be used to store video data being decoded such as a compressed or encrypted movie. The output from the video decoder provides video data which can be temporarily stored in a memory A the output of which is the output which is used to drive both display pipelines and . The output from the memory B drives both display pipelines and similarly the output from memory C also drives both display pipelines and . Further details with respect to an embodiment of the display pipelines and are provided below in conjunction with .

The output from the display pipeline is coupled to an input of a gamma correction component . Further details in connection with this gamma correction component are provided below in conjunction with . The output from the gamma correction component is coupled to the internal display device to drive the internal display device and is also coupled through connection to the connector driver which also receives the output from the display pipeline . Further details in connection with the connector driver are provided below in conjunction with . The connector driver drives the connector an example of which is shown in . This connector can in certain embodiments provide information about the display apparatus which it drives such as the external display device . In one embodiment the connector can provide information about the resolution or color modes or other features of the external display device which the external display device can support. An example of such information is the information known as EDID Extended Display Information Data . This data can specify resolutions and color modes that the external display device can support which also indicates resolutions and display modes that the external display device cannot support. The EDID information can be provided to an operating system component as described further below which in turn can pass this information to a user application to allow the user application to select a resolution or a color mode or both as described further below.

The connection from the output of the gamma correction component allows for in at least certain embodiments a mirrored mode in which the internal display device and the external display device both display the same image on their displays. It will be appreciated that the display devices themselves may be any one of a variety of type of display devices such as an LCD display an LED Light Emitting Diode display an organic LED display or a CRT etc. In an alternative embodiment the data processing system can include an optional scaler and timer generator in the path of the connection to provide for greater flexibility in connecting an external display device. For example the optional sealer and timer generator in the path of connection can allow external display devices to have resolutions or screen sizes that are different than the resolutions or screen size of the internal display device.

The frame buffer library in the software stack of may implement software routines for managing frame buffers such as frame buffers to drive the one or more displays of the data processing system. The window server software component may implement known software processes to manage windows for applications. The application launcher may be a software process that allows a user to launch one or more applications or just one application at a time depending upon the implementation. In one embodiment the application launcher may be the software program known as Springboard which is an application launcher provided by Apple Inc. on the iPhone. The user application may be any one of a plurality of user applications such as a web browser a document viewer a picture viewer a movie player a word processing or text editing application an email application or other applications known in the art. The user application can make use of a software framework or one or more software libraries for creating and drawing user interface objects such as buttons windows and other user interface elements and components as are known in the art. This framework can be the user interface UI framework . In the example shown in software messages are passed between the framework and the user application in order to communicate information about resolution and color modes of an external display device to the user application and in order to receive a selection from the user application of a resolution and color mode for the external display device. An accessory daemon may be employed to monitor the connection of an external display device and to provide other functions in connection with the methods shown in and which are described further below. In one embodiment as will be described further below information about the external display device is passed from the hardware and up through the software stack to the user application. In one embodiment this display information may be filtered EDID display information which is used by the user application or the operating system to select a resolution and color mode which are available for use on the external display device. The selection is then passed back down through the software stack to operating system components which then can configure one or more display pipelines as described herein to operate with the external display device. In addition in those embodiments which employ power conservation for the second display pipeline the operating system can maintain the second display pipeline in a low power state while the software messages are passed up and down the software stack and the display pipeline is prepared to be configured and then the operating system components can cause the second display pipeline to be powered up when the user application begins drawing content for display on the external display device. At that point the operating system components can both power up the second display pipeline and configure it e.g. select video routing color space conversion etc. based upon selections made by the user application or the operating system.

In operation an application such as a user application is launched and prepares to draw content for display on the external display device. At this point the application has not yet drawn the content for display and hence the second display pipeline e.g. display pipeline can still be maintained in a low power state. Operation can represent the initialization operations which occur when an application is launched but before it is ready to draw content for display on the external display device. When the application begins to draw the content as shown in operation then the operating system can cause the second display pipeline to be powered up. This embodiment allows an application which will eventually generate display data for display to be launched and let the application remain idle for a period of time e.g. 30 seconds or more and in that time the second display pipeline can remain in a low power state and not be powered up until the application actually begins to draw content for display on the external display device. This can occur when the user application is a movie playing application and the user has launched the application but has not yet selected through a user interface a play command.

The low power states in either embodiment of or can include keeping the connector e.g. connector or connector or connector itself in a low power state e.g. by turning off transmitters or drivers within the connector and also can include keeping the connector driver in a low power state. Further in one embodiment a display port driver e.g. display port drivers can be configured to turn off power to the transmitters or drivers within the connector if for example no data is being transported by the connector within a set period of time.

In one embodiment the connector e.g. any one of connectors or can be a connector that complies with the VESA Video Electronics Standards Association DisplayPort Standard Version 1 Revision 1a Jan. 11 2008 and the display port drivers e.g. display port drivers can also comply with such a standard. In this embodiment the filtering described herein can make use of the actual link established during training under that standard see section 2.5.3.3 of the Jan. 11 2008 standard so that the available resolutions and colors can be limited to those that can adequately use the actual link and those that would exceed the bandwidth of the actual link would be filtered out. The training as is known in the art allows the connector and the external display device to test the cable by transmitting known patterns to the external display which then determines whether they have been correctly received and if not correctly received the transmitter tries a low data rate and fewer lanes and the results of this testing can be used to further filter out states e.g. resolutions and color modes that may exist in an EDID from an external display device. In this way the noise surrounding the cable the length of the cable and the quality of the cable can be analyzed in the training process and then states in the EDID set of states that do not work because of noise cable quality etc. can be filtered out of the supported display modes. Moreover this training can also cause filtering out of modes due to limitations of the transmitter.

The data processing system or the data processing system may be a portable tablet device which includes a touch screen which is integrally mounted with and registered with the internal display device. Other modifications of the described embodiments may include one or more wireless transceivers coupled through input output controllers to the rest of the system such as the system shown in . These wireless transceivers may be used to communicate with one or more other devices or networks such as a wireless cell phone network or a WiFi network or other wireless networks.

One or more Application Programming Interfaces APIs may be used in some embodiments. An API is an interface implemented by a program code component hereinafter API implementing component that allows a different program code component hereinafter API calling component to access and use one or more functions methods procedures data structures classes and or other services provided by the API implementing component. An API can define one or more parameters that are passed between the API calling component and the API implementing component.

An API allows a developer of an API calling component which may be a third party developer to leverage specified features provided by an API implementing component. There may be one API calling component or there may be more than one such component. An API can be a source code interface that a computer system or program library provides in order to support requests for services from an application. An API can be specified in terms of a programming language that can be interpreted or compiled when an application is built.

In some embodiments the API implementing component may provide more than one API each providing a different view of or with different aspects that access different aspects of the functionality implemented by the API implementing component. In other embodiments the API implementing component may itself call one or more other components via an underlying API and thus be both an API calling component and an API implementing component.

An API defines the language and parameters that API calling components use when accessing and using specified features of the API implementing component. For example an API calling component accesses the specified features of the API implementing component through one or more API calls or invocations embodied for example by function or method calls exposed by the API and passes data and control information using parameters via the API calls or invocations. The API implementing component may return a value through the API in response to an API call from an API calling component. While the API defines the syntax and result of an API call e.g. how to invoke the API call and what the API call does the API may not reveal how the API call accomplishes the function specified by the API call. Various API calls are transferred via the one or more application programming interfaces between the calling API calling component and an API implementing component. Transferring the API calls may include issuing initiating invoking calling receiving returning or responding to the function calls or messages. The function calls or other invocations of the API may send or receive one or more parameters through a parameter list or other structure. A parameter can be a constant key data structure object object class variable data type pointer array list or a pointer to a function or method or another way to reference a data or other item to be passed via the API.

Furthermore data types or classes may be provided by the API and implemented by the API implementing component. Thus the API calling component may declare variables use pointers to use or instantiate constant values of such types or classes by using definitions provided in the API.

Generally an API can be used to access a service or data provided by the API implementing component or to initiate performance of an operation or computation provided by the API implementing component. By way of example the API implementing component and the API calling component may be an operating system a library a device driver an API an application program or other module it should be understood that the API implementing component and the API calling component may be the same or different type of module from each other . API implementing components may in some cases be embodied at least in part in firmware microcode or other hardware logic. In some embodiments an API may allow a client program to use the services provided by a Software Development Kit SDK library. In other embodiments an application or other client program may use an API provided by an Application Framework. In these embodiments the application or client program may incorporate calls to functions or methods provided by the SDK and provided by the API or use data types or objects defined in the SDK and provided by the API. An Application Framework may in these embodiments provide a main event loop for a program that responds to various events defined by the Framework. The API allows the application to specify the events and the responses to the events using the Application Framework. In some implementations an API call can report to an application the capabilities or state of a hardware device including those related to aspects such as input capabilities and state output capabilities and state processing capability power state storage capacity and state communications capability etc. and the API may be implemented in part by firmware microcode or other low level logic that executes in part on the hardware component.

The API calling component may be a local component i.e. on the same data processing system as the API implementing component or a remote component i.e. on a different data processing system as the API implementing component that communicates with the API implementing component through the API over a network. It should be understood that an API implementing component may also act as an API calling component i.e. it may make API calls to an API exposed by a different API implementing component and an API calling component may also act as an API implementing component by implementing an API that is exposed to a different API calling component.

The API may allow multiple API calling components written in different programming languages to communicate with the API implementing component thus the API may include features for translating calls and returns between the API implementing component and the API calling component however the API may be implemented in terms of a specific programming language.

It will be appreciated that the API implementing component may include additional functions methods classes data structures and or other features that are not specified through the API and are not available to the API calling component . It should be understood that the API calling component may be on the same system as the API implementing component or may be located remotely and accesses the API implementing component using the API over a network. While illustrates a single API calling component interacting with the API it should be understood that other API calling components which may be written in different languages or the same language than the API calling component may use the API .

The API implementing component the API and the API calling component may be stored in a machine readable medium which includes any mechanism for storing information in a form readable by a machine e.g. a computer or other data processing system . For example a machine readable medium includes magnetic disks optical disks random access memory read only memory flash memory devices etc.

In Software Stack an exemplary embodiment applications can make calls to Services A or B using Service API and to Operating System OS using OS API. Services A and B can make calls to OS using OS API.

In the foregoing specification the invention has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

