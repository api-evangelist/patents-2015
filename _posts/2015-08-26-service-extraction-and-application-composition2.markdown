---

title: Service extraction and application composition
abstract: Service extraction and application composition may include preprocessing and instrumenting an existing application that is to be converted to a service-oriented application. The existing application may be executed to generate traces related to a runtime behavior of services related to the existing application. The traces may be used to generate calling code related to the services related to the existing application. Representational state transfer (REST) application programming interfaces (APIs) that include the calling code to call the services related to the existing application may be generated. Refactored code for the existing application may be generated for invocation of the services related to the existing application by the REST APIs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09569177&OS=09569177&RS=09569177
owner: ACCENTURE GLOBAL SERVICES LIMITED
number: 09569177
owner_city: Dublin
owner_country: IE
publication_date: 20150826
---
This application claims priority to Indian Patent Application Number 4230 CHE 2014 filed Aug. 29 2014 entitled Service Extraction And Application Composition which is incorporated by reference in its entirety.

Applications typically include an n tier architecture that provides a model by which developers create flexible and reusable applications. For example by segregating an application into tiers when the application is to be modified a specific layer of the application is typically modified or added instead of reworking of the entire application. A variety of techniques are used to extract services from applications. A service represents a function that is performed by an application. For example for an e commerce application e.g. an online bookstore application a service includes login functionality that is performed by the application.

For simplicity and illustrative purposes the present disclosure is described by referring mainly to examples thereof. In the following description numerous specific details are set forth in order to provide a thorough understanding of the present disclosure. It will be readily apparent however that the present disclosure may be practiced without limitation to these specific details. In other instances some methods and structures have not been described in detail so as not to unnecessarily obscure the present disclosure.

Throughout the present disclosure the terms a and an are intended to denote at least one of a particular element. As used herein the term includes means includes but not limited to the term including means including but not limited to. The term based on means based at least in part on.

A variety of applications exist for performance of services. For such applications that do not include a service oriented design it is challenging to extract services to renew these applications to a service oriented design and implementation. For example applications that do not include a service oriented design typically include monolithic functionality implemented in the application code. Such applications also do not typically include a modular design. Instead modern applications are typically built by using a service oriented approach in order to provide for the leveraging of core services across applications. A service oriented approach may be described as an approach that employs representational state transfer REST services that are invoked by a REST uniform resource locator URL e.g. from a browser or a client application to invoke the functionality of an application. Thus a service oriented application may be described as an application that exposes functionality though REST services. The REST services are reusable functional components that are used to create application functionality. A REST service may represent the functionality that is invoked as part of a REST application programming interface API call. The REST API may include a URL and the types of parameters and values that are passed from the URL to the REST service such that the REST service performs the function that is intended. The service orientation for an application facilitates integrating with third party services such a map API to create more complex applications. With the advent of mobility as a driver in enterprise information technology IT service orientation provides for the development of mobile applications and application based on services.

In order to extract services from typical n tier applications and applications generally the services may be manually extracted and represented in a canonical format. This approach to the extraction of services from applications is typically based on expertise that is needed to extract services. The services may also be extracted by static code analysis that is used to extract features from the application code that are then mapped to services. A feature may be described as a type of code element that is being processed e.g. a class method Structured Query Language SQL query etc. the types of attributes and values that are passed to the code element and final details of the code element. Static code analysis techniques may also be used to transform code into an intermediate representation that is then analyzed to extract and represent services. Such static code analysis techniques can result in extraction of features that are not representative of the run time nature of the flow through the application code with the features and resulting analysis thus yielding irrelevant services.

In order to address at least the foregoing aspects related to extraction of services from applications according to examples disclosed herein a service extraction and application composition system and a method for service extraction and application composition are disclosed herein. Extraction of services as disclosed herein may be described as the identification and or retrieval of service for existing applications. Generally the system and method disclosed herein provide for implementation of a service oriented architecture i.e. for a service oriented application based on an existing application service composition and service integration to create new services and or modify existing services prototyping of a new service oriented application with respect to any platform type and service endpoint and prototype application composition. According to an example the existing application is a typical n tier legacy application that does not include a service oriented architecture. With respect to implementation of a service oriented architecture based on an existing application the system and method disclosed herein provide for the conversion of existing applications to an intermediate format i.e. REST based APIs as disclosed herein . The REST based APIs may represent an abstraction of the architecture of the World Wide Web WWW . REST may represent an architectural style including a coordinated set of architectural constraints applied to components connectors and data elements within a distributed hypermedia system. REST may disregard the details of component implementation and protocol syntax in order to focus on the roles of components the constraints upon their interaction with other components and their interpretation of significant data elements. Information extracted from the existing application may be used to migrate the existing application to a service oriented architecture. With respect to prototyping of a new service oriented application with respect to any platform type the system and method disclosed herein provide for the use of REST based APIs for prototyping a new application on any existing platform which supports web service calls.

According to an example the system and method disclosed herein provide for the extraction of services from existing applications such as legacy applications documentation refinement of services and generation of a deployable service based application for prototyping. An example of a legacy application is an e commerce application e.g. an online bookstore application . The services that are extracted from the existing application may include REST web services. An example of a service that is extracted includes login functionality that is performed by the existing application and implemented as servlet or by JSP pages that host functionality. Other examples of services that may be extracted for the e commerce application include logout functionality indexing of products product details user information etc. For an e commerce application REST web services may include user registration product search based on product identification ID etc. The system and method disclosed herein may include a library of analysis techniques e.g. based on a code signature library as disclosed herein that are applied to different types of applications. Code analysis may be performed for instrumentation feature extraction and feature representation. A user interface UI may be used to view results of the code analysis for documentation and for refinement. The system and method disclosed herein may be used to generate a REST service oriented prototype application that provides the functionality of a legacy application through a service interface. The system and method disclosed herein also provide for the definition of services e.g. by using a service modifier as disclosed herein and the generation of a skeleton service based application. The prototype application and or the skeleton service based application that are generated may be packaged for deployment on a local system or the Cloud. The system and method disclosed herein further provide for the addition of functionality to an existing application e.g. based on the addition of services to an existing application by using a service modifier i.e. an authoring interface as disclosed herein .

The service extraction and application composition system and the method for service extraction and application composition disclosed herein provide a technical solution to technical problems related for example to extraction of services from typical n tier applications and applications generally. The system and method disclosed herein provide the technical solution of preprocessing and instrumenting an existing application that is to be converted to a service oriented application. The existing application may be executed to generate traces related to a runtime behavior of services related to the existing application. The traces may be used to generate calling code related to the services related to the existing application. REST APIs that include the calling code to call the services related to the existing application may be generated. Refactored code for the existing application may be generated for invocation of the services related to the existing application by the REST APIs. A prototype application generated by the system and method disclosed herein thus provides for improvement in resource utilization by removing inconsistencies with applications that are generated and or services that are ascertained with other techniques. In order to provide for further improvements in resource utilization and application features new services may be added to the extracted services. Further in order to provide for further improvements in resource utilization and application features a new application may be generated based entirely on services that are specified as opposed to extracted from an existing application.

As described herein the elements of the service extraction and application composition system may be machine readable instructions stored on a non transitory computer readable medium. In addition or alternatively the elements of the service extraction and application composition system may be hardware or a combination of machine readable instructions and hardware.

With respect to the refactored code after extracting the services from the existing application the source code of the existing application may be modified for access by the REST APIs . The REST APIs may each include the calling code i.e. code from the calling code to call respective ones of the services . The refactored code may perform an assigned task that is performed by the respective services of the existing application . The response for each assigned task may be stored in a JSON.XML format and reverted to the REST APIs . The refactored code may include the modified code and non modified model classes that are called internally by the services . The code elements of the existing application that are invoked in the calling code may be represented as M.

With respect to the facade layer the refactored code may be wrapped in the facade layer . The facade layer may include the REST APIs and expose the REST APIs to a client. The facade layer may hide the internal complexities of the existing application and provide a REST based interface. These exposed REST APIs may be used to prototype a replica of the existing application or to generate the service oriented application .

With the use of codepoint inserters the existing application code i.e. code for the existing application may be preprocessed by scanning for the code signatures and instrumented by the use of the instrumentation code that is injected at appropriate locations to extract the functionality of the existing application . The instrumentation code that is specific to the type of the existing application may be stored in the code instrumentation library . The existing application may be rebuilt along with the instrumented code . Generally the instrumented code may include a data structure that holds the data that is edited code that is related to the features of the core elements e.g. methods calls etc. of the existing application and code that extracts the needed values from the running code of the existing application .

For the examples of referring to with respect to servlet applications examples of the instrumented code that is injected into the existing application may include migration.RequestToCSV call new migration.RequestToCSV call.insert servlet request this.getClass .getName Thread.currentThread .getStackTrace 1 .getMethodName . For the examples of referring to with respect to JSP pages examples of the instrumented code that is injected into the existing application may include . Based on the injection of the instrumented code into the existing application existing application information may be obtained from the existing application as described herein with respect to the traces .

The instrumented existing application i.e. the existing application that includes the instrumented code may be executed to generate the traces that are stored in the trace repository . Based on the execution of the instrumented existing application the trace repository information i.e. the traces may be based the runtime behavior of the services related to the existing application . The trace repository may include different types of trace repository information related for example to servlet applications JSP pages etc. For the examples of the Structured Query Language SQL query to generate a table for servlet applications is illustrated in . Similarly for the examples of the code for creating the table for storing information from JSP pages is illustrated in . The trace repository may include the traces that are related to parameters and values that are extracted from the code of the existing application REST service definitions interface code that is generated for interfacing the REST service that is created and the functionality of the existing application and a location of the instrumentation of the existing application e.g. for fault detection . Examples of the traces related to the parameters and values that are extracted from the code of the existing application include a username and a value for the username that is received a password and a value for the password that is received etc. Examples of the traces related to the REST service definitions include the REST service ID REST service name URL path that is invoked by a user and a description of a particular REST service. The traces may also include information related to methods that are invoked by the existing application and information related to any type of data flow related to a method that is invoked.

The calling code generator may utilize the trace repository information to generate the calling code . The calling code may include a data structure that accepts incoming parameter and value pairs that are part of a REST service call an existing application invocation code for invoking an appropriate part of the existing application that is related to the REST API invoked by a user a data structure that accepts a response from the existing application and converts the response to a JSON or XML format for returning to a user. For example the calling code generator may generate the calling code for each service in the trace repository which may then be used by the JAVA API for Restful Web Service JAX RS APIs to invoke refactored legacy services. The calling code may be stored in the calling code database . The calling code may be used in service stubs to call related services in the existing application to create a facade layer over the existing application as described with reference to . The facade layer that is consumed by the service oriented application is service based and allows for rapid reuse of the functionality of the existing application through modern services. For the examples of portions of calling code that is generated for the login servlet is illustrated in . For the example of lines link the login service to the existing application . For different service APIs the attributes and the servlet object reference may change.

The code generator may utilize the calling code from the calling code database to generate i.e. code the REST APIs . A REST API may include a method that is invoked when a REST service call is invoked. An appropriate calling code from the calling code database may be embedded in a REST API. The code generator may generate a class and method for a REST API that is to be executed and further embed the appropriate calling code as part of the REST API. Examples of the REST services include web services. The REST APIs may be used to call the existing application via the calling code . The calling code may thus form a bridge between the REST APIs and the existing application . The calling code may be bundled in the code of the REST APIs . illustrates an example of a REST API code template. For the REST APIs as shown at and annotated parameters may be replaced with actual data from the calling code database . For the examples of a REST API code snippet for the login servlet is illustrated in at with the parameter values shown at and calling code shown at . The REST API may return the JavaScript Object Notation JSON output as shown at .

The REST APIs may be used by the package generator to deploy the service oriented application . For example the REST APIs may be used by the package generator to deploy the service oriented application on the Cloud at see or downloaded and locally deployed by a user. The package generator may also package the refactored existing application with the REST APIs .

With respect to rapid service composition the service modifier may be used to add delete and or modify services for the existing application . For example with respect to modification of services any information for existing services may be modified to upgrade the existing services and or for matching with a change requirement. Any services that are added deleted and or modified based on the service modifier may be stored in the API database and further processed by the calling code generator and the code generator . The API database may include the API details such as for example API name path value etc. The REST APIs with respect to the services generated based on the service modifier may be similarly packaged by the package generator and deployed for example on the Cloud at . The package generator may also generate the package based on the type of Cloud.

The service modifier may be used to modify a service granularity with respect to the existing application . For example an e commerce application may include an API related to products that are available. In this regard the service modifier may be used to modify the API of the e commerce application to provide details of products that are available in a specified zip code or during a specified time period. The API for an application may also be broken down into different conditions to add modularity.

Generally the refactored code generator may add new code to the existing application code so that a service of the existing application is invoked by the calling code of the REST API i.e. coupled to the REST APIs as opposed to direct invocation by a user. The refactored code generator may also add new code to the existing application code to retrieve contextual information related to any failures. For example the refactored code generator may retrieve the line number and the class where a failure occurs. The line number and the class where a failure occurs may be used to debug the REST APIs . An example of the refactored code is shown in .

With respect to quick prototyping once the services of the existing application are exposed in form of the REST APIs and are accessible to authorized users the REST APIs may be transformed into frontend applications at a client platform. For example the exposed services may be used to develop the required service oriented application . Alternatively or additionally a prototyping tool may receive as input the exposed services and generate frontends for a particular platform.

The behavior of the service oriented application may be similarly stored in the trace repository . For example referring to the data model may be extracted and information related to the data model gathered inside the trace repository may be used to generate the final service endpoints. The service oriented application may be generated using the calling code generator and the code generator to generate the REST APIs .

Referring to the views of the service oriented application may be composed and the API may be called. The service oriented application that may be a mobile application or a web application may be generated. The HTML developed using the pretotyping tool may be used as an input to compose the service oriented application and the service endpoints may be triggered using the service oriented application .

Referring to at block the method may include receiving requirement information for a service oriented application that is to be generated.

At block the method may include receiving annotations related to the requirement information for the service oriented application that is to be generated.

At block the method may include instrumenting a data model related to the service oriented application that is to be generated.

At block the method may include utilizing the annotations related to the requirement information for the service oriented application that is to be generated and the instrumented data model related to the service oriented application that is to be generated to generate traces related to a runtime behavior of services related to the service oriented application that is to be generated.

At block the method may include utilizing the traces related to the runtime behavior of the services related to the service oriented application that is to be generated to generate calling code related to the services related the service oriented application that is to be generated.

At block the method may include generating REST APIs that include the calling code to call the services related the service oriented application that is to be generated.

For the method receiving requirement information for a service oriented application that is to be generated may further include utilizing pretotyping to receive the requirement information for the service oriented application that is to be generated.

Referring to at block the method may include injecting instrumentation code into an existing application that is to be converted to a service oriented application by identifying a code signature where a service of services related to the existing application is initiated to preprocess and instrument the existing application.

At block the method may include generating traces related to a runtime behavior of the services related to the existing application by executing the preprocessed and instrumented existing application.

At block the method may include generating calling code related to the services related to the existing application by utilizing the traces related to the runtime behavior of the services related to the existing application.

At block the method may include generating REST APIs that include the calling code to call the services related to the existing application.

At block the method may include generating refactored code for the existing application for invocation of the services related to the existing application by the REST APIs.

According to an example the method may include utilizing the REST APIs and the refactored code for the existing application to generate the service oriented application.

According to an example the method may include adding deleting and or modifying the services related to the existing application.

According to an example the method may include generating traces related parameters and values that are extracted from existing application code and REST service definitions.

According to an example the calling code may include an existing application invocation code for invoking a specified part of the existing application that is related to invocation of a REST API of the REST APIs.

The computer system may include a processor that may implement or execute machine readable instructions performing some or all of the methods functions and other processes described herein. Commands and data from the processor may be communicated over a communication bus . The computer system may also include a main memory such as a random access memory RAM where the machine readable instructions and data for the processor may reside during runtime and a secondary data storage which may be non volatile and stores machine readable instructions and data. The memory and data storage are examples of computer readable mediums. The memory may include a service extraction and application composition module including machine readable instructions residing in the memory during runtime and executed by the processor . The service extraction and application composition module may include the elements of the system shown in .

The computer system may include an I O device such as a keyboard a mouse a display etc. The computer system may include a network interface for connecting to a network. Other known electronic components may be added or substituted in the computer system.

What has been described and illustrated herein is an example along with some of its variations. The terms descriptions and figures used herein are set forth by way of illustration only and are not meant as limitations. Many variations are possible within the spirit and scope of the subject matter which is intended to be defined by the following claims and their equivalents in which all terms are meant in their broadest reasonable sense unless otherwise indicated.

