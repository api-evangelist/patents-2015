---

title: Federated search of multiple sources with conflict resolution
abstract: Methods and apparatuses related to federated search of multiple sources with conflict resolution are disclosed. A method may comprise obtaining a set of data ontologies (e.g., types, properties, and links) associated with a plurality of heterogeneous data sources; receiving a selection of a graph comprising a plurality of graph nodes connected by one or more graph edges; and transforming the graph into one or more search queries across the plurality of heterogeneous data sources. A method may comprise obtaining a first data object as a result of executing a first search query across a plurality of heterogeneous data sources; resolving, based on one or more resolution rules, at least the first data object with a repository data object; deduplicating data associated with at least the first data object and the repository data object prior to storing the deduplicated data in a repository that has a particular data model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09348880&OS=09348880&RS=09348880
owner: Palantir Technologies, Inc.
number: 09348880
owner_city: Palo Alto
owner_country: US
publication_date: 20150401
---
Embodiments relate to information retrieval technology and more specifically to federated search of multiple sources with conflict resolution.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

A user may wish to search for information related to an item of interest. However the user may be unable to decide which data source to search. The user may also be unfamiliar with a query language used for retrieving information from a data source. Additionally the user may be unsatisfied by search results from any single data source. Thus the user may become frustrated by the time consumed in performing multiples searches in multiple data sources. Worse yet the user may give up and the information may remain unknown to the user.

However a federated search of multiple data sources may return incompatible data. Different data sources may employ different data models. Different data sources may store different versions of the same data. Different data sources may have different permission levels.

While each of the drawing figures depicts a particular embodiment for purposes of depicting a clear example other embodiments may omit add to reorder and or modify any of the elements shown in the drawing figures. For purposes of depicting clear examples one or more figures may be described with reference to one or more other figures but using the particular arrangement depicted in the one or more other figures is not required in other embodiments. Modifiers such as first second and third may be used to differentiate elements but the modifiers do not necessarily indicate any particular order. For example second search query may be so named to differentiate it from first search query but second search query may refer to a second search query and or a third search query. Furthermore a grouping of similar items may be collectively referenced as a single item for clarity and ease of reference. For example a grouping of first data object and second data object may be collectively referenced as first data object . For clarity and ease of reference an original and a copy may both be referenced by the name of the original. For example deduplicated data and copy of the deduplicated data may both be referenced as deduplicated data .

A computer may be one or more physical computers virtual computers and or computing devices. As an example a computer may be one or more server computers cloud based computers cloud based cluster of computers virtual machine instances or virtual machine computing elements such as virtual processors storage and memory data centers storage devices desktop computers laptop computers mobile devices and or any other special purpose computing devices. A computer may be a client and or a server. Any reference to a computer herein may mean one or more computers unless expressly stated otherwise.

While some of the aforementioned elements are depicted in the figures and described herein as if implemented on a separate remote computer from each other this is done for explanation purposes only and one or more of the elements may be part of and or executed on the same computer. Each of the logical and or functional units depicted in the figures or described herein may be implemented using any of the techniques further described herein in connection with . For example a computer may comprise a general purpose computer configured with one or more stored programs which when executed cause performing the functions described herein for one or more logical and or functional units a special purpose computer with digital logic that is configured to execute the functions or digital logic that is used in other computing devices. While the figures include lines that indicate various devices and or modules being communicatively coupled each of the computers devices modules storage and logic may be communicatively coupled with each other.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present disclosure. It will be apparent however that the present disclosure may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present disclosure.

Methods and computer apparatuses related to federated search of multiple sources with conflict resolution are disclosed. A client computer may send a search query to a federated search computer. The search query may be represented in a graphical format such as graph nodes connected by graph edges histograms of selectable categories etc. Additionally or alternatively the search query may be represented via text in a syntax that describes one of these graphical formats. The search query may be executed across heterogeneous data sources such as databases and or repository systems that use different data models for modeling data. The results of the search query may be grouped based on similarities such as common unique identifiers. The federated search computer may send the results to the client computer in a graphical and or tabular format. The results may be filtered based on permissions associated with the results the client computer a third party authentication service and or a user of the client computer.

The client computer may send to the federated search computer a request to store the results in a repository system. The federated search computer may enrich e.g. supplement the results with data obtained from one or more additional search queries in one or more of the heterogeneous data sources. The federated search computer may send the results to the repository system. The repository system may deduplicate the results and store the deduplicated results. For example the repository system may eliminate any information that appears more than once in the results. Additionally or alternatively the repository system may infer that different results represent the same information. The repository system may send a unique identifier for the deduplicated results to the federated search computer. The federated search computer may send the unique identifier to the client computer. Thus the user may perform any action with the deduplicated results by referencing the unique identifier.

A change to data in one of the heterogeneous data sources may be imported automatically to the federated search computer. For example the federated search computer may subscribe to a data feed that automatically provides the federated search computer with changes to data. Additionally or alternatively the change to data may be inferred by the federated search computer. For example the federated search computer may infer a change to data in one of the heterogeneous data sources by comparing the results of a current search to cached data. The change to data may be synchronized with a change to data in the repository system. For example if the data in the repository is deemed outdated based on a ranking of data sources and or repositories the repository may be updated with the change to the data.

In an embodiment a method comprises obtaining a set of data ontologies associated with a plurality of heterogeneous data sources. For example the set of data ontologies may be obtained by processing the data ontology that is output by each of the plurality of heterogeneous data sources. The method may also comprise receiving a selection by a user of a graph comprising a plurality of graph nodes connected by one or more graph edges. A graph node may represent a data object type or a data object property that is described in at least one data ontology of the set of data ontologies. A graph edge may represent a data object link that is described in at least one data ontology of the set of data ontologies. Additionally the method may comprise transforming the graph into one or more search queries across the plurality of heterogeneous data sources. For example transforming the graph into a search query may involve converting the graph into a data structure than may easily be converted into query language.

One of the plurality of graph nodes may represent a first data object and a second data object that are resolved based on one or more resolution rules. For example the first data object and the second data object may be resolved by grouping them together based on similarities. The one or more resolution rules may comprise resolving at least the first data object with the second data object when the first data object and the second data object share a unique identifier that references the first data object and the second data object in one or more data sources of the plurality of heterogeneous data sources. For example a resolution rule may resolve the first data object with the second data object because they share the same primary key in the same database. Additionally or alternatively the one or more resolution rules may comprise resolving at least the first data object with the second data object when the first data object and the second data object share one or more data object properties that are specified by the one or more resolution rules and that uniquely identify the first data object and the second data object. For example the one or more resolution rules may specify that the first data object is resolved with the second data object if the first data object and the second data object share the same Vehicle Identification Number. The one or more resolution rules may also consider data object properties that are derived from combining multiple data object properties. For example the first data object may be resolved with the second data object if the first data object and the second data object share identical last names and are associated with heights that differ by less than 2 inches.

The transforming the graph into one or more search queries across the plurality of heterogeneous data sources may comprise transforming the graph into a serializable hierarchy of elements that correspond to the plurality of graph nodes and the one or more graph edges. The serializable hierarchy of elements may be easily converted into query language by performing serialization.

The graph may also be transformed to display one or more results of the one or more search queries. For example a search query represented by a pair of graph nodes connected by a graph edge may be transformed into a single graph node that represents the result of the search query.

The one or more results of the one or more search queries may be filtered based on one or more access control identifiers associated with one or more groups of users and one or more permissions. For example a particular result may be tagged with an access control identifier that indicates only people with top secret clearance may access and or modify the particular result.

In an embodiment a method may comprise obtaining a first data object as a result of executing a first search query across a plurality of heterogeneous data sources. For example the first search query may return a person named Mary with green eyes. The method may also comprise resolving based on one or more resolution rules at least the first data object with a repository data object. For example Mary s name and eye color may be grouped together with the data for Mary in the repository. Additionally the method may comprise deduplicating data associated with at least the first data object and the repository data object prior to storing the deduplicated data in a repository that has a particular data model. For example the data for Mary may now include her name twice so the repetition of her name may be deleted. However the resulting name may continue to contain references to both data sources to preserve data provenance.

The first search query may be transformed from a plurality of histograms of selectable categories. For example a pair of histograms may be converted into a serializable hierarchy of elements and the serializable hierarchy of elements may be converted into query language.

The plurality of heterogeneous data sources may comprise one or more caches associated with one or more other repositories. For example a search query may be executed in a repository cache in the same manner in which it is executed in one of the plurality of heterogeneous data sources.

The particular data model may comprise an object centric data model. For example the one or more results of the first search query may comprise a first data object containing one or more data object properties.

The resolving based on one or more resolution rules at least the first data object with a repository data object may comprise generating the repository data object generating a unique identifier based on one or more data object properties that uniquely identify the first data object and storing the unique identifier in the repository in a manner such that the unique identifier references the repository data object. The repository data object may comprise a stub data object. For example the stub data object may be generated to allow a prior version of the first data object to be resolved with a change to the first data object that has yet to be persisted in the repository.

The one or more resolution rules may comprise grouping at least the first data object with another data object that shares a unique identifier that references the another data object in one or more data sources of the plurality of heterogeneous data sources. Additionally or alternatively the one or more resolution rules may comprise grouping at least the first data object with another data object that shares a unique identifier that references the another data object in the repository. Additionally or alternatively the one or more resolution rules may comprise grouping at least the first data object with another data object that shares one or more data object properties that uniquely identify the another data object.

Prior to resolving at least the first data object with the repository data object at least the first data object may be resolved based on the one or more resolution rules with a second data object that is obtained from a second search query in one or more data sources of the plurality of heterogeneous data sources. The second search query may take as input one or more results of at least the first search query.

A change to data in one of the plurality of heterogeneous data sources may be automatically imported based on a push or pull technology. The change to data in one of the plurality of heterogeneous data sources and a change to data in the repository may be synchronized based on vector clocks repository rankings and or data source rankings.

Client computer may be a desktop computer a laptop computer a smartphone a tablet computer a smart television and or any other networked computer that acts as a client. Client computer may comprise a user interface such as a graphical user interface through which a user may enter commands and or interact with data. The user may send through client computer and or the user interface a search query to federated search computer . The search query may be written in Structured Query Language SQL Not Only SQL NoSQL XQuery Lightweight Directory Access Protocol LDAP and or any other language or protocol that retrieves information from a data source. The search query may comprise a Boolean expression. The search query may have one or more data object filters one or more data object property filters a time interval and or one or more geolocation queries. For example the search query may comprise one or more drop down lists with selectable data objects and or data object properties.

A particular search application programming interface API may be used to execute the search query across a plurality of heterogeneous data sources A Z e.g. multiple data sources with different data models . The particular search API may be uniform across the plurality of heterogeneous data sources A Z and or a plurality of client computers. For example the particular search API may associate the search query with a set of Uniform Resource Identifiers URIs . The set of URIs may correspond to the plurality of heterogeneous data sources A Z across which the search query is executed.

Additionally or alternatively the search query may be transformed from a graphical representation of the search query. In an embodiment the graphical representation may comprise a plurality of graph nodes connected by one or more graph edges a plurality of histograms of selectable categories and or any other format that depicts one or more relationships between one or more data object types e.g. person place organization and or data object properties e.g. height weight date of birth . The graphical representation may be transformed into the search query in client computer and or federated search computer .

Federated search computer may comprise one or more server computers and or one or more load balancers. Federated search computer may comprise a networked computer that acts as a server to one or more clients such as client computer . Federated search computer may receive requests for data and may respond with data. Federated search computer may be owned and or managed by one or more independent entities and may span across one or more computer networks such as the Internet. Additionally or alternatively federated search computer may respond with data that references data in federated search computer and or another computer.

Federated search computer may execute the search query across the plurality of heterogeneous data sources A Z. A particular data source API may be used to execute the search query across the plurality of heterogeneous data sources A Z. The particular data source API may be uniform across the plurality of heterogeneous data sources A Z. The particular data source API may be used to translate between federated search computer and the plurality of heterogeneous data sources A Z. For example the particular data source API may transform the search query into a format that is compatible with one or more data sources of the plurality of heterogeneous data sources A Z. Additionally or alternatively the particular data source API may transform one or more results of the search query into a particular data model that is compatible with federated search computer and or repository system .

The particular data model may comprise an object centric data model such as object centric data model described below. For example the one or more results of the search query may comprise one or more data objects. The one or more results of the search query may be in a tabular and or graphical format such as a data object graph.

One or more data sources of the plurality of heterogeneous data sources A Z may comprise a database a file a search engine a repository a repository cache and or any other system and or data structure that stores data. Additionally or alternatively one or more data sources of the plurality of heterogeneous data sources A Z may be a data structure stored in memory on one or more computers. Additionally or alternatively one or more data sources of the plurality of heterogeneous data sources A Z may be a data structure stored in shared memory between one or more computers. Additionally or alternatively one or more data sources of the plurality of heterogeneous data sources A Z may be at least in part non volatile storage.

One or more data sources of the plurality of heterogeneous data sources A Z may send the one or more results of the search query to federated search computer . A copy of the one or more results of the search query may be stored in one or more data source caches of a plurality of data source caches A Z. One or more data source caches of the plurality of data source caches A Z may store one or more results of any search query. The plurality of data source caches A Z may be located in the plurality of heterogeneous data sources A Z and or server computers deployed with the plurality of heterogeneous data sources A Z. One or more data source caches of the plurality of data source caches A Z may be a file a system and or a data structure that stores data. Additionally or alternatively one or more data source caches of the plurality of data source caches A Z may be a data structure stored in memory on one or more computers comprising at least in part a server computer deployed with one or more data sources of the plurality of heterogeneous data sources A Z. Additionally or alternatively one or more data source caches of the plurality of data source caches A Z may at least in part be a data structure stored in shared memory between one or more computers. Additionally or alternatively one or more data source caches of the plurality of data source caches A Z may be at least in part non volatile storage.

The plurality of heterogeneous data sources A Z and or federated search computer may generate and or assign one or more provenance identifiers to the one or more results of the search query. As used herein a provenance identifier refers to metadata that describes data relative to one or more sources of the data. The one or more provenance identifiers may be temporary unique uniform across the plurality of heterogeneous data sources A Z and or associated with one or more provenances of the one or more results of the search query. For example the one or more provenance identifiers may comprise one or more data source system identifiers e.g. a unique identifier for each of the plurality of heterogeneous data sources A Z one or more data source object identifiers e.g. a locally unique identifier for a data object in each of the plurality of heterogeneous data sources A Z and or one or more data source system version numbers e.g. a version number of each of the plurality of heterogeneous data sources A Z . Additionally or alternatively the plurality of heterogeneous data sources A Z and or federated search computer may maintain a mapping between the one or more provenance identifiers and the one or more results of the search query. A provenance identifier may be assigned to each data object and or each data object graph in the one or more results of the search query.

Temporary storage may be a database a configuration file and or any other system and or data structure that stores data. Temporary storage may be on a separate device from federated search computer . Additionally or alternatively temporary storage may be a data structure stored in memory on one or more computers comprising at least in part federated search computer . Additionally or alternatively temporary storage may at least in part be a data structure stored in shared memory between one or more computers. Additionally or alternatively temporary storage may be at least in part non volatile storage. Temporary storage may store the one or more provenance identifiers and or a copy of the one or more results of the search query. Additionally or alternatively temporary storage may maintain a mapping between the one or more provenance identifiers and the one or more results of the search query.

Federated search computer may send the one or more results of the search query to client computer . Federated search computer may filter the one or more results of the search query prior to sending the one or more results to client computer . Federated search computer may filter the one or more results of the search query based on a load level specified by client computer . For example client computer may specify a load level that indicates the number and or types of data object links the number and or types of data object properties and or the number and or types of media e.g. pictures video audio to be sent to client computer . Additionally or alternatively federated search computer may filter the one or more results of the search query based on one or more access control identifiers associated with one or more groups of users and one or more permissions. Prior to sending the one or more results to client computer federated search computer may optionally resolve e.g. place in a group of similar things the one or more results based on one or more similarities. For example two data objects in the one or more results may represent two different people but may be grouped together based on a shared data object property such as the same name.

When the user interacts with the one or more results client computer and or the user interface may send a persist request to federated search computer . As used herein a persist request refers to a request to store data. The persist request may be a request to store in repository system the one or more results and or one or more provenance identifiers associated with the one or more results. For example the persist request may be a request to store a provenance identifier associated with a first data object in the one or more results. If the one or more results were filtered prior to being sent to client computer federated search computer may retrieve the copy of the one or more results stored in an unfiltered state in one or more data source caches of the plurality of data source caches A Z and or temporary storage . If the copy of the one or more results is non existent in the one or more data source caches of the plurality of data source caches A Z and or temporary storage the search query may be executed again.

Based on the one or more provenance identifiers federated search computer may determine which of the plurality of heterogeneous data sources A Z returned the one or more results. For example federated search computer may determine based on the data source system identifier and or the data source system version number of the provenance identifier associated with the first data object that the first data object was obtained from data source A. Federated search computer may execute a second search query in one or more data sources of the plurality of heterogeneous data sources A Z that returned the one or more results of the search query i.e. a first search query . The second search query may take as input the one or more results of the first search query. For example federated search computer may execute a second search query in data source A that takes as input the first data object.

Federated search computer may resolve based on one or more local resolution rules comprising matching data source object identifiers and or matching unique data object properties one or more results of the second search query with the one or more results of the first search query. Resolving the one or more results of the second search query with the one or more results of the first search query may comprise performing a first union of matching results from the first search query and the second search query. For example the second search query may obtain a second data object that is grouped with the first data object based on a unique identifier e.g. a primary key a unique index that references the first data object and the second data object in the one or more data sources of the plurality of heterogeneous data sources A Z that returned the one or more results of the first search query and or based on one or more data object properties that uniquely identify the first data object and the second data object.

Optionally federated search computer may execute a third search query that takes as input the first union of matching results. The third search query may be executed in one or more data sources of the plurality of heterogeneous data sources A Z that is are related to the one or more data sources of the plurality of heterogeneous data sources A Z that returned the one or more results of the first search query. For example federated search computer may execute a third search query in data source Z that takes as input the first data object and the second data object. Federated search computer may determine based on a set of data ontologies a relationship between one or more data sources of the plurality of heterogeneous data sources A Z and the one or more data sources of the plurality of heterogeneous data sources A Z that returned the one or more results of the first search query. The set of data ontologies may describe the structure of data in the plurality of heterogeneous data sources A Z. For example the set of data ontologies may indicate data object types data object property types and or data object link e.g. a relationship between one or more data objects and or data object properties types available in one or more data sources of the plurality of heterogeneous data sources A Z.

Federated search computer may resolve based on the one or more local resolution rules one or more results of the third search query with the first union of matching results. Resolving the one or more results of the third search query with the first union of matching results may comprise performing a second union of matching results from the third search query and the first union of matching results. For example the third search query may obtain a third data object that is grouped with the first data object and the second data object based on a unique identifier that references the third data object as well as the first data object and or the second data object in one or more data sources of the plurality of heterogeneous data sources A Z and or based on one or more data object properties that uniquely identify the third data object as well as the first data object and or the second data object.

Federated search computer may send the first union of matching results and or the second union of matching results to repository system . Repository system may comprise repository interface computer and or repository . Repository interface computer may comprise one or more computers that act as a server to federated search computer . Repository interface computer may serve as a gateway to repository . Repository may be a database a file and or any other system and or data structure that stores data. Repository may be on a separate device from repository interface computer . Additionally or alternatively repository may be a data structure stored in memory on the one or more computers comprising at least in part repository interface computer . Additionally or alternatively repository may at least in part be a data structure stored in shared memory between one or more computers. Additionally or alternatively repository may be at least in part non volatile storage.

Repository interface computer may comprise repository cache . Repository cache may be a database a file and or any other system and or data structure that stores data. Repository cache may be on a separate device from repository interface computer . Additionally or alternatively repository cache may be a data structure stored in memory on the one or more computers comprising at least in part repository interface computer . Additionally or alternatively repository cache may at least in part be a data structure stored in shared memory between one or more computers. Additionally or alternatively repository cache may be at least in part non volatile storage.

Repository may have a particular data model. The particular data model may be the same for repository and federated search computer . The particular data model may comprise object centric data model . Object centric data model may be a conceptual structure that is independent of any particular database data model. For example a data object may correspond to one or more rows in a relational database and or an entry in a LDAP database. A data object may be a container for information that represents an entity such as a person a place an organization an event a document and or any other noun. A data object may be associated with a data object type e.g. Person Event Document and a display name which may be the value of a data object property. A data object may have one or more data object properties such as name eye color and or any other attribute of the data object. A data object property may have a type e.g. name and a value e.g. Alice . A data object may have more than one data object property of the same type. A data object link may connect one or more data objects one or more data object types one or more data object properties and or one or more data object property types. A data object link may represent a symmetrical e.g. Kin Of and or asymmetrical e.g. Child Of relationship.

Repository system and or repository interface computer may resolve based on one or more global resolution rules the first union of matching results with data stored in repository . Additionally or alternatively repository system and or repository interface computer may resolve based on the one or more global resolution rules the second union of matching results with data stored in repository . Resolving the data stored in repository with the first union of matching results and or the second union of matching results may comprise performing a third union of matching results from the data stored in repository . The third union of matching results may comprise a repository identifier. The repository identifier may be a unique identifier that is generated based on one or more data object properties that uniquely identify the first union of matching results and or the second union of matching results.

The one or more global resolution rules may comprise matching repository identifiers matching provenance identifiers and or matching unique data object properties. For example a repository data object may be grouped with the first data object the second data object and or the third data object based on a unique identifier that references the repository data object as well as the first data object the second data object and or the third data object in one or more data sources of the plurality of heterogeneous data sources A Z a unique identifier that references the repository data object as well as the first data object the second data object and or the third data object in repository and or one or more data object properties that uniquely identify the repository data object as well as the first data object the second data object and or the third data object.

In an embodiment resolving the first union of matching results and or the second union of matching results with data stored in repository may be impracticable based on the global resolution rules because the repository data object is non existent. When the repository data object is non existent repository system and or repository interface computer may generate data that is stored in repository and that is resolved based on the global resolution rules with the first union of matching results and or the second union of matching results. The generated data may comprise a repository identifier. The generated data may consist of a repository identifier. The repository identifier may be hashed and or stored in repository in a manner such that the repository identifier references the generated data.

For example when the repository data object is nonexistent in repository repository system and or repository interface computer may generate the repository data object. The repository data object may be a stub data object. Repository system and or repository interface computer may generate a repository identifier based on one or more data object properties that uniquely identify the first data object the second data object and or the third data object. Repository system and or repository interface computer may store the repository identifier in repository in a manner such that the repository identifier references the repository data object and or the stub data object. Repository system and or repository interface computer may resolve based on the one or more global resolution rules the repository data object and or the stub data object with the first data object the second data object and or the third data object.

Repository system and or repository interface computer may deduplicate the third union of matching results. For example repository system and or repository interface computer may deduplicate data associated with the repository data object as well as the first data object the second data object and or the third data object. Deduplication may comprise discarding data that appears in repository as well as in the third union of matching results. Deduplication may also comprise discarding data that appears more than once in the third union of matching results. Additionally deduplication may comprise discarding a subset of the third union of matching results that is determined to be inconsistent data based on result rankings. The result rankings may establish a hierarchy of results search queries and or data sources. For example the first data object may be determined to be a primary data object and data that conflicts with the data object properties of the primary data object may be discarded.

Repository system and or repository interface computer may store a copy of the deduplicated third union of matching results in repository cache . Repository system and or repository interface computer may send the deduplicated third union of matching results to repository . Repository system and or repository may store the deduplicated third union of matching results in repository . Storing the deduplicated third union of matching results may comprise inserting updating and or deleting data in repository . Repository system and or repository interface computer may send the repository identifier and or the deduplicated third union of matching results to federated search computer . Federated search computer may send the repository identifier and or the deduplicated third union of matching results to client computer . Repository system may communicate with other repository systems and or other federated search systems to share data in repository system .

When a change is made to data in one or more data sources of the plurality of heterogeneous data sources A Z and or repository system federated search computer may automatically import the change based on a push or pull technology. For example federated search computer may be subscribed to a data feed that provides federated search computer with the change. Additionally or alternatively the change may be inferred by federated search computer . For example federated search computer may periodically re execute the first search query the second search query and or the third search query in one or more data sources of the plurality of heterogeneous data sources A Z and compare the one or more results of the first search query the second search query and or the third search query to a previous copy of the one or more results of the first search query the second search query and or the third search query that is stored in the plurality of data source caches A Z. Federated search computer may also search repository cache for changes. The change may be detected based on a difference between hashed values and or any other similarity metric for detecting changes. The change may be imported to federated search computer .

Metadata may be generated and stored in the plurality of data source caches A Z with the one or more results of the first search query the second search query and or the third search query. Metadata may also be generated and stored in repository cache . The metadata may comprise vector clocks timestamps and or resolution information associated with the one or more results of the first search query the second search query and or the third search query. Customized rules may use the metadata to resolve conflicts and or eliminate inconsistency between among the plurality of heterogeneous data sources A Z and or repository systems.

Vector clocks may be assigned to the one or more results of the first search query the second search query and or the third search query. For example vector clocks may be assigned to the first data object the second data object the third data object the repository data object the first union of matching results the second union of matching results and or the third union of matching results. Vector clocks may be updated when any union of results changes and or when the repository data object changes.

Federated search computer may infer a change in a vector clock based on the change to data. For example federated search computer may detect a change to a data object in repository system by comparing entries in repository cache . Repository system may have communicated with another repository system and received an update with the change to the data object. Federated search computer may infer based on the change to the data object in repository system a change in a vector clock assigned to the data object in repository system .

Federated search computer may deconflict the change in the vector clock based on repository rankings and or data source rankings. For example the change in the vector clock assigned to the data object in repository system may conflict with a vector clock assigned to a related data object in data source A. The change in the vector clock assigned to the data object in repository system may be resolved with the vector clock assigned to the related data object in data source A based on rankings associated with repository system and data source A. The rankings may indicate that data source A is more authoritative than repository system and or data source Z indicated by a provenance identifier associated with the data object. The data object in repository system may then be restored to a previous state. Thus data synchronization may be maintained between data in the plurality of heterogeneous data sources A Z and data in the repository system .

Federated search computer may deconflict the change in the vector clock based on a customized deconfliction logic. For example a conflict between vector clocks assigned to a data object in repository system may be resolved differently depending on the one or more data sources of the plurality of heterogeneous data sources A Z in which the data object originated.

Client interface logic may process the first search query the persist request and or any other instructions sent from client computer . Client interface logic may forward the first search query to one or more translation logics of the plurality of translation logics A Z. Client interface logic may forward the persist request to resolution logic . Client interface logic may send the one or more results of the first search query the second search query and or the third search query to client computer . Client interface logic may retrieve the one or more results of the first search query from temporary storage . Client interface logic may filter the one or more results of the first search query prior to sending the one or more results to client computer .

One or more translation logics of the plurality of translation logics A Z may comprise a plugin a wrapper and or any other set of instructions that translates an existing interface into a compatible interface. One or more translation logics of the plurality of translation logics A Z may translate the first search query into a format that compatible with one or more data sources of the plurality of heterogeneous data sources A Z. One or more translation logics of the plurality of translation logics A Z may translate the one or more results of the first search query the second search query and or the third search query into the particular data model of federated search computer and or repository system . One or more translation logics of a plurality of translation logics A Z may provide federated search computer and or client interface logic with the set of data ontologies for the plurality of heterogeneous data sources A Z.

One or more translation logics of the plurality of translation logics A Z may generate and or assign one or more provenance identifiers to the one or more results of the first search query the second search query and or the third search query. One or more translation logics of the plurality of translation logics A Z may assign one or more access control identifiers to the one or more results of the first search query the second search query and or the third search query. An access control identifier may be a tuple comprising a user group and a permission for the user group. One or more translation logics of the plurality of translation logics A Z may transform the one or more results of the first search query the second search query and or the third search query into a graphical representation. One or more translation logics of the plurality of translation logics A Z may send the one or more results of the first query and or a graphical representation of the one or more results of the first query to temporary storage . One or more translation logics of the plurality of translation logics A Z may send the one or more results of the second query and or a graphical representation of the one or more results of the second query to enrichment logic and or repository system . One or more translation logics of the plurality of translation logics A Z may send the one or more results of the third query and or a graphical representation of the one or more results of the third query to repository system .

Resolution logic may process the persist request from client interface logic . Resolution logic may retrieve the one or more results of the first search query from temporary storage and or one or more data source caches of the plurality of data source caches A Z. Resolution logic may perform internal resolution such as the internal resolution described in Section 2.5 herein. Resolution logic may send the first union of matching results from the first search query and the second search query to enrichment logic and or repository system .

Optional enrichment logic may process the first union of matching results from the first search query and the second search query from resolution logic . Enrichment logic may perform enrichment such as the enrichment described in Section 2.6 herein. Enrichment logic may send the second union of matching results from the third search query and the first union of matching results to repository system .

Graphical user interface may comprise a set of instructions in client computer that allows the user to enter commands and or interact with data. Graphical user interface may display data from federated search computer in a graphical format. Graphical user interface may send data such as one or more search queries to federated search computer .

Graph edge may represent a data object link that is described in at least one data ontology of the set of data ontologies. Graph edge may connect a plurality of graph nodes. The user may specify a data object link for graph edge . For example federated search computer may provide graphical user interface and or client computer with a set of available data object links from the plurality of heterogeneous data sources A Z. The user may right click graph edge select from a list of available data object links and enter a value in a text box. After the user specifies a data object link for a first graph edge the set of available data object links may remain unchanged for a second graph edge. Additionally or alternatively after the user specifies a data object link for graph edge the set of available data object links may change in size.

Graph node may represent a data object type and or a data object property e.g. value and or type that is are described in at least one data ontology of the set of data ontologies. The user may specify a data object type and or a data object property for graph node . For example federated search computer may provide graphical user interface and or client computer with a set of available data object types and or available data object properties from the plurality of heterogeneous data sources A Z. The user may right click graph node and select from a list of available data object types and or available data object properties.

After the user specifies a data object type and or a data object property for a first graph node the set of available data object types and or available data object properties may remain unchanged for a second graph node. Additionally or alternatively after the user specifies a data object type and or a data object property for graph node the set of available data object types and or available data object properties may change in size.

For example when the user specifies a value for graph node a search query may be sent to federated search computer . The one or more results of the search query may increase the number of elements in the set of available data object links and or the set of available data object types and or available data object properties. In another example the one or more results of the search query may be grouped based on one or more similarities e.g. according to one or more resolution rules such as the one or more resolution rules used to perform internal resolution enrichment and or global resolution . Consequently the set of available data object links and or the set of available data object types and or available data object properties may increase in size.

Graph may represent one or more search queries across the plurality of heterogeneous data sources A Z. For example a pair of connected graph nodes may represent a single search query and multiple pairs of connected graph nodes may represent successive search queries. Additionally or alternatively graph in its entirety may represent a single search query. Graph may be transformed into a non graphical representation of the one or more search queries. Graphical user interface federated search computer client interface logic and or one or more translation logics of the plurality of translation logics A Z may transform graph into one or more non graphical search queries such as SQL queries. Transforming graph into the non graphical representation of the one or more search queries may comprise transforming graph into a serializable hierarchy of elements that correspond to the plurality of graph nodes and one or more graph edges. For example graph may be transformed into Extensible Markup Language XML or JavaScript Object Notation JSON .

One or more results of the one or more search queries may be displayed to the user in a graphical format. Prior to sending the one or more results of the one or more search queries to client computer federated search computer may group the one or more results of the one or more search queries based on one or more similarities. Graphical user interface federated search computer client interface logic and or one or more translation logics of the plurality of translation logics A Z may generate and or display a graphical representation of the one or more results of the one or more search queries. Graph may be transformed to display the one or more results of the one or more search queries.

Histogram A B may represent the set of available data object types and or available data object properties. Federated search computer may obtain the set of data ontologies associated with one or more data sources of the plurality of heterogeneous data sources A Z. Graphical user interface federated search computer and or client interface logic may aggregate the set of available data object types and or available data object properties. Graphical user interface federated search computer and or client interface logic may generate a graphical representation of the set of available data object types and or available data object properties. The graphical representation of the set of available data object types and or available data object properties may comprise histogram A B. Histogram A B may indicate the number of each of the available data object types and or the number of each of the available data object properties displayed in histogram A B.

Selectable category may correspond to an available data object type and or an available data object property in histogram A B. When the user chooses selectable category histogram B may be displayed. Histogram B may be identical to histogram A. Histogram B may differ from histogram A. Histogram B may differ from histogram A in that selectable categories associated with histogram B are more specific than selectable categories associated with histogram A. Additionally or alternatively histogram B may differ from histogram A in the number of selectable categories and or the number of elements in one or more selectable categories.

Choosing a selectable category may be analogous to selecting a graph edge and a graph node . For example a pair of histograms may represent a single search query and multiple pairs of histograms may represent successive search queries. Additionally or alternatively an entire series of histograms may represent a single search query. Thus a plurality of histograms may represent one or more search queries across the plurality of heterogeneous data sources A Z.

The plurality of histograms may be transformed into a non graphical representation of the one or more search queries. Graphical user interface federated search computer client interface logic and or one or more translation logics of the plurality of translation logics A Z may transform the plurality of histograms into one or more non graphical search queries. Transforming the plurality of histograms into the non graphical representation of the one or more search queries may comprise transforming the plurality of histograms into a serializable hierarchy of elements.

In step input via a graphical user interface indicating a selection of a graph comprising a plurality of graph nodes connected by one or more graph edges is received wherein a graph node represents a data object type or a data object property and a graph edge represents a data object link. For example graphical user interface may receive input indicating the selection of the graph. The user may interact with graphical user interface to select graph .

In step the graph is transformed into one or more search queries across the plurality of heterogeneous data sources. For example graphical user interface may transform graph into the one or more search queries. Graph may comprise a person data object type and a 555 5555 phone number data object property connected by an owner of data object link. Graph may be transformed into SELECT name FROM table WHERE phone number 555 5555 .

In optional step the graph is transformed into a serializable hierarchy of elements. The elements may correspond to the plurality of graph nodes and the one or more graph edges. For example graphical user interface may transform graph into the serializable hierarchy of elements. The code excerpt listed below and denoted Query Template is an example of a serializable hierarchy of elements.

Query Template introduces a procedural aspect to an XML format. Lines and correspond to the plurality of graph nodes. Line 11 corresponds to graph edge .

In optional step the serializable hierarchy of elements is transformed into the one or more search queries across the plurality of heterogeneous data sources. For example Query Template may be transformed into db.user.find object person link OwnerOf object phone .

In optional step the graph is transformed to display one or more results of the one or more search queries. For example federated search computer and or one or more translation logics of the plurality of translation logics A Z may generate a graphical representation of the one or more results of the one or more search queries. Graphical user interface may display the graphical representation of the one or more results of the one or more search queries to the user. Graphical user interface may delete all or part of graph prior to displaying the graphical representation of the one or more results of the one or more search queries. Additionally or alternatively graphical user interface may edit all or part of graph . For example Alice Bob and Charlie may be persons who share the same house phone. Thus graph may be transformed in a manner such that graph now comprises three graph nodes that are labeled Alice Bob and Charlie linked to the same Phone data object.

In optional step the one or more results is are filtered based on one or more access control identifiers associated with one or more groups of users and one or more permissions. One or more translation logics of the plurality of translation logics A Z may assign a set of access control identifiers to a provenance identifier or any other unique identifier stored on a search result. For example the set of access control identifiers may comprise a list of tuples each of which associates a group of users to one or more permissions such as own write read and or discovery . The group of users may identify one or more users and or one or more client computers based on a user pseudonym such as a hardware address a registered username a cookie a geolocation a software identifier and or an Internet Protocol IP address.

The set of access control identifiers may be associated with one or more data object properties. For example a search query may return a data object with a gender value of female and a Social Security Number SSN of 555 55 5555 . The set of access control identifiers may provide a user group representing everyone with read permission for the gender value. However the set of access control identifiers may provide a user group representing law enforcement officers with read permission for the SSN.

Federated search computer may optionally associate the set of access control identifiers with a set of coded identifiers comprising a character or a string of characters. For example an access control identifier that provides everyone with read and write permission may be associated with a coded identifier of 5 A . Federated search computer and or client interface logic may filter the one or more results based on the set of access control identifiers and or the set of coded identifiers. Additionally or alternatively federated search computer and or client interface logic may filter the one or more results based on additional logic applied to the set of access control identifiers and or the set of coded identifiers.

Resolution rules may be the criteria used to group one or more results of one or more search queries. Resolution rules may describe similarities used to group the one or more results of the one or more search queries. Resolution rules may be used to perform the grouping described herein in Section 2.4 Section 2.5 Section 2.6 and or Section 2.7. Additionally or alternatively resolution rules may be used to perform grouping between successive pluralities of graph nodes and or histograms.

Data source unique identifier may be all or part of a provenance identifier. Data source unique identifier may correspond to a unique identifier such as an index number used by one or more data sources of the plurality of heterogeneous data sources A Z to reference data stored in the one or more data sources of the plurality of heterogeneous data sources A Z. Resolution rules may group the one or more results of the one or more search queries based on matching data source unique identifiers.

Repository unique identifier may correspond to a unique identifier used by repository system to reference data stored in repository . The unique identifier may be a hashed value comprising one or more unique data object properties associated with a data object. Resolution rules may group the one or more results of the one or more search queries based on matching repository unique identifiers.

Unique data object property type may correspond to a data object property type that uniquely identifies an object type. For example the data object property type of SSN uniquely identifies the object type of people . Resolution rules may group the one or more results of the one or more search queries based on matching unique data object property types.

First data object may be a particular data object that results from a particular search query and or a particular grouping based on one or more similarities. First data object may be the repository data object the first data object the second data object the third data object the first union of matching results the second union of matching results and or the third union of matching results. First data object may also be the result of the grouping described herein in Section 2.4. Additionally or alternatively first data object may be one or more results of a search query comprising a plurality of graph nodes and or histograms.

Another data object may also be a particular data object that results from a particular search query and or a particular grouping based on one or more similarities. Another data object may be the repository data object the first data object the second data object the third data object the first union of matching results the second union of matching results and or the third union of matching results. Another data object may also be the result of the grouping described herein in Section 2.4. Additionally or alternatively another data object may be one or more results of a search query comprising a plurality of graph nodes and or histograms.

Match may represent a determination of whether first data object and another data object represent similar objects and or the same object. Resolution rules may be applied in any order and in any combination. For example if match is determined based on a first resolution rule a second resolution rule may remain unapplied. Alternatively the second resolution rules may be applied regardless of whether match is determined based on the first resolution rule.

Associated data may represent information associated with a particular data object. Associated data may comprise one or more data object properties that result from a particular search query and or a particular grouping based on one or more similarities. For example the first union of matching results may result from performing a union operation on associated data of the first data object with associated data of the second data object.

Deduplicated data may represent information that is ultimately stored in repository . In table another data object represents a repository data object. Applying resolution rules to first data object and a repository data object may subsequently involve deduplicating associated data of first data object and associated data of the repository data object. Deduplication may involve removing information that appears more than once. In table performing a union operation on associated data of first data object and associated data of another data object results in the same SSN appearing twice. After deduplication the SSN appears once in deduplicated data .

In optional step a request is received to store the first data object in a repository that has a particular data model wherein the request was sent by a client computer upon user interaction with the first data object. Federated search computer may send the one or more results of the first search query to client computer . Client computer may send the persist request to federated search computer when the user interacts with the one or more results of the first search query. For example federated search computer may process the persist request when the user clicks on the first data object.

In step at least the first data object is resolved based on one or more resolution rules with a repository data object. Federated search computer repository system and or repository interface computer may resolve the first data object the second data object the third data object the first union of matching results the second union of matching results and or the third union of matching results with the repository data object. For example federated search computer may obtain the repository data object from repository system and resolve at least the first data object with the repository data object.

In optional step a determination is made regarding the existence of the repository data object. Federated search computer repository system and or repository interface computer may query repository and or repository cache for the repository data object. A determination that the repository data object exists may lead directly to step . A determination that the repository data object does not exist may lead to step .

In optional step the repository data object comprising a stub data object is generated. Federated search computer repository system and or repository interface computer may generate the repository data object. For example federated search computer may generate the stub data object. The stub data object may consist of repository unique identifier .

In optional step a unique identifier is generated based on one or more data object properties that uniquely identify the first data object. The unique identifier may be repository unique identifier . Federated search computer repository system and or repository interface computer may generate the unique identifier. Step may be performed prior to simultaneously with and or subsequent to step .

In optional step the unique identifier is stored in the repository in a manner such that the unique identifier references the repository data object. Federated search computer repository system and or repository interface computer may store the unique identifier and or the repository data object in repository . The unique identifier may serve as a unique key and or an index value for the repository data object.

In step data associated with at least the first data object and the repository data object is deduplicated prior to being stored as deduplicated data in the repository. Federated search computer repository system and or repository interface computer may deduplicate associated data of first data object and associated data of the repository data object and or store deduplicated data in repository . For example federated search computer may deduplicate the third union of matching results with data associated with the repository data object.

In step a determination is made as to whether the first data object and the second data object share a unique identifier. A determination that the first data object and the second data object share a unique identifier may lead directly to step . A determination that the first data object and the second data object have different unique identifiers may lead to step . The unique identifier s may reference the first data object and or the second data object in the one or more data sources of the plurality of heterogeneous data sources A Z and or repository .

In step a determination is made as to whether the first data object and the second data object share one or more data object properties. A determination that the first data object and the second data object share one or more data object properties may lead to step . A determination that the first data object and the second data object have different data object properties may lead to step . Step may be performed prior to simultaneously with and or subsequent to step .

In step the first data object is grouped with the second data object. Federated search computer and or repository system may determine that the first data object and the second data object are the same object and or similar objects based on one or more resolution rules .

In step the first data object and the second data object are determined to be dissimilar objects. Based on the one or more resolution rules federated search computer and or repository system may determine that the first data object and the second data object represent data objects with nothing in common.

In step one or more results is are received from one or more data sources of the plurality of heterogeneous data sources. For example the California DMV database may return the names addresses and car accident counts for the people living in Palo Alto who have been in fifteen or more car accidents.

In step a second search query that takes as input a subset e.g. some or all of the one or more results of the first search query is executed in the one or more data sources of the plurality of heterogeneous data sources. For example federated search computer may search in the California DMV database for the SSNs associated with the names and addresses of the people returned by the first search query.

In step a first union of matching results from the first search query and the second search query is performed based on one or more resolution rules. For example federated search computer may add the SSNs to the names addresses and car accident counts of the people returned by the first search query.

In optional step a third search query that takes as input a subset e.g. some or all of the first union of matching results is executed in one or more other data sources of the plurality of heterogeneous data sources. For example federated search computer may search in the California criminal records database for felony convictions associated with the SSNs of the people returned by the first search query.

In optional step a second union of matching results from the third search query and the first union of matching results is executed based on the one or more resolution rules. For example federated search computer may add the felony convictions to the names addresses car accident counts and the SSNs of the people returned by the first search query.

In step B a change to data in a data source is automatically imported based on a push or pull technology. Step B may be an alternative to step A. For example whenever the change to data in the one or more data sources of the plurality of heterogeneous data sources A Z occurs federated search computer may be configured to automatically receive a push notification containing the change and or the location of the change.

In step a change in a vector clock assigned to a data object is inferred based on the change to the data. For example federated search computer may search in repository and or repository cache for the repository data object associated with the change described in the push notification. Federated search computer may search in the one or more data sources of the plurality of heterogeneous data sources A Z described in the push notification for the data object associated with the change. A vector clock entry assigned to the repository data object may have a value of 1 whereas a vector clock entry assigned to a federated data object may have a value of 2 .

In step the change in the vector clock is deconflicted based on repository rankings or data source rankings. For example a data source ranking may indicate that the one or more data sources of the plurality of heterogeneous data sources A Z associated with the data object is more authoritative than repository . Thus federated search computer may update the repository data object with the change to data in the data object. Alternatively conflicting data may be presented in graphical user interface to allow the user to deconflict manually.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that depicts a computer system upon which an embodiment may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

In the foregoing specification embodiments have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the disclosure and what is intended by the applicants to be the scope of the disclosure is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

