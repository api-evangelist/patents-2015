---

title: Database mapping of models for reporting tools in model driven development
abstract: Embodiments of the present invention provide a method, system and computer program product for mapping models to relational databases for reporting tools. In an embodiment of the invention, a model mapping method for models of a model driven development (MDD) environment can include initializing a database table and selecting a data source storing a modeling framework representation of a model. A first query can be executed against an application programming interface (API) of the data source supporting a modeling framework query language to retrieve selected elements of the model. Likewise, a second query can be executed against the API of the data source to retrieve selected attributes of the selected elements of the model. Finally, rows of the database table can be populated with the retrieved selected elements of the model and corresponding columns of the database table can be populated with the retrieved selected attributes of the selected elements of the model. Consequently, a report can be generated for the model based upon the rows and columns of the database table.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09552441&OS=09552441&RS=09552441
owner: International Business Machines Corporation
number: 09552441
owner_city: Armonk
owner_country: US
publication_date: 20150927
---
This application is a Continuation of U.S. application Ser. No. 12 496 290 filed Jul. 1 2009 now allowed the entirety of which is incorporated herein by reference.

The present invention relates to the field of model driven development and more particularly to reporting tools for reporting information contained in models produced in model driven development.

Modern software systems have become increasingly pervasive and open ended and are expected to deliver critical computing services in a dependable manner across multiple heterogeneous computing environments. To better manage the complexity of developing modern software systems software development strategies can be employed which raise the level of abstraction at which software systems are conceived implemented and evolved. Model driven development MDD represents one such software development strategy in which models are the primary artifacts of software development.

Modeling complex applications has several general benefits that can include a better understanding of the business or engineering situation at hand the construction and design of application architectures and the creation of visualizations of code and other forms of implementation. In this regard the essence of modeling is abstraction and any visualization of code is indeed an abstraction in that application information can be selectively exposed while details deemed unnecessary or unwanted can be suppressed. In conventional MDD visual models can be created utilizing model constructs or model types.

In a typical model driven development MDD process models are first class artifacts and as such consume a substantial amount of time and effort at the outset so that the models be used to generate lower level models and ultimately source code. Consequently tools that help gain better understanding of the information contained in models are known to be very useful. Reporting tools for MDD are an important aspect of MDD and allow for the creation of custom views of the information contained in models views that are easier to consume especially by non technical individuals. At present many reporting tools have been marketed for use in creating reports of information contained in models.

Notwithstanding the use of reporting tools does not come without complication. Specifically a discrepancy often exists between the format of data expected by the reporting tool and the format of data chosen for a model under consideration by the reporting tool. In this regard a common format of models is the format proposed by the Object Management Group OMG essentially a hierarchy of structured data that follows a meta model or a schema. The OMG proposed format utilizes the extensible markup language XML variant XML meta data interchange XMI as a format for persisting models. In concert with XMI the Eclipse Modeling Framework EMF provides a popular framework with services for defining meta models abstract syntax for modeling languages which can be used to create conforming models and persisting them in XMI.

Notably some of the more popular reporting tools such as the open source Business Intelligence Reporting Tool BIRT a plug in to the Eclipse environment are not designed to read structured data of models in its native format. Rather most popular reporting tools are designed to handle data structured in the format of a database specifically tables with rows and columns. To that end it is thus required to map the structured representation of models to a database representation. This approach has been adopted in reporting tools by providing a generic XML based data mapping extension that is able to consume models as XML data that follows a certain XML schema. Such extensions use an XML based query language for instance Xpath as a query engine operating on the data of the model.

Nevertheless some issues remain in using such solution for reporting on models in a MDD environment. In particular XMI semantics are not completely described by XML for example XMI has the notion of multiple inheritance that does not exist in XML. This incongruity results in the loss of information in transforming the information of the model from a native format to a database format. Also model implementations often provide an application programming interface API that applies to the model data. In consequence viewing a model through an API as pure data inhibits the ability to extrapolate useful information easily from models in the mapping process.

Addressing these inherent deficiencies a two phase approach has been proposed in which the first phase transforms models into simple XML data that can be easily consumed by the XML mapping process and the second phase performs the XML mapping. The XML transformation however introduces performance penalties resulting from additional required upfront processing and complexity designing a new report friendly XML schema and designing a mapping from the various meta models to the new report friendly XML schema. These problems are often amplified if attempting to do a complete schema mapping that fits any report generically rather than a tailored mapping for every report.

Embodiments of the present invention address deficiencies of the art in respect to reporting tools for models in a MDD environment and provide a novel and non obvious method system and computer program product for mapping models to relational databases for reporting tools. In an embodiment of the invention a model mapping method for models of a MDD environment can include initializing a database table and selecting a data source storing a modeling framework representation of a model. A first query can be executed against an API of the data source supporting a modeling framework query language to retrieve selected elements of the model. Likewise a second query can be executed against the API of the data source to retrieve selected attributes of the selected elements of the model. Finally rows of the database table can be populated with the retrieved selected elements of the model and corresponding columns of the database table can be populated with the retrieved selected attributes of the selected elements of the model. Consequently a report can be generated for the model based upon the rows and columns of the database table.

In another embodiment of the invention a data processing system can be configured for mapping a modeling framework representation of a model to a database representation of the model. The system can include a host computing platform with processor and memory a database coupled to the host computing platform and a mapping module. The mapping module can include program code executing in the memory by the processor of the host computing platform. The program code can be enabled upon execution by the processor to execute a first query against an API of a data source supporting a modeling framework query language to retrieve selected elements of a model and to execute a second query against the API of the data source to retrieve selected attributes of the selected elements of the model and to populate rows of a database table in the database with the retrieved selected elements of the model and populating corresponding columns of the database table with the retrieved selected attributes of the selected elements of the model.

In one aspect of the embodiment the data source can be an EMF representation of an instance model. As such the modeling framework query language can include EMF object constraint language EMF OCL or EMF extensible markup language XML path EMF Xpath . Additionally the API further can include an extended directive configured as an EMF plug in to concatenate an identifier for a specified element of the model with a resource path of the model. Comparably the API further can include an extended directive configured as an EMF plug in to resolve a retrieved identifier for a specified element as a context for another specified element in order to support processing nested data sets. In even yet another aspect of the embodiment the program code of the mapping module can be additionally enabled to generate an first additional table relating a specified element of the model to an identifier for the specified element of the model and a second additional table relating the identifier to identifiers for other elements in a one to many relationship with the specified element.

Additional aspects of the invention will be set forth in part in the description which follows and in part will be obvious from the description or may be learned by practice of the invention. The aspects of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the appended claims. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

Embodiments of the present invention provide a method system and computer program product for mapping a model to a database for reporting in a reporting tool for a MDD environment. In accordance with an embodiment of the present invention a model defined in an MDD environment can be loaded from a corresponding XMI persistence as a data source in an EMF framework. Thereafter a first query can be executed against the data source to produce the rows in a database representation of the model representative of the elements of the model. Also a second query can be executed against the data source to produce the columns for each row in the database representation of the model representative of the attributes of the elements of the rows. As such a mapping will have been generated between the database representation and the underlying model defined in the MDD environment. Finally a report can be generated from records in the database to present a view to information in the model.

In further illustration pictorially depicts a process for mapping a model to a database for reporting in a reporting tool for a MDD environment. As shown in a model generated from an MDD environment can be persisted in fixed storage in the form of a modeling framework representation such as an XMI persistence. Mapping logic can execute model framework queries against the modeling framework representation for instance using object constraint language OCL or XML path XPath query language compliant queries. At least one of the model framework queries can extract elements from the modeling framework representation of the model for corresponding rows of a database representation of the model while at least one other of the model framework queries can extract attributes for the elements from the modeling framework representation of the model for the columns of the database representation of the model . Thereafter a reporting tool can produce reports for the model based upon the database representation of the model .

The process described in connection with can be embodied within an MDD data processing system. In this regard is a schematic illustration of a MDD data processing system configured for mapping a model to a database for reporting in a reporting tool. The system can include a host computing platform with processor and memory coupled to a database and supporting the execution of an operating system hosting the operation of a mapping module accessing the database . Optionally the operating system further can host a reporting tool for designing and generating reports based upon the content of the database though the skilled artisan will recognize that the reporting tool can be hosted by a different host computing platform accessing the database .

The host computing platform can be configured for communicative coupling to one or more MDD environments over a computer communications network each MDD environment including a server supporting the execution of a modeling framework A such as the Eclipse modeling framework providing an API B to the framework supporting one or more query languages C as well as query language extensions D to the query languages as a plug in to the framework. The MDD environment can include a modeling framework representation of a model produced from the MDD environment stored in a data store and accessible through the server . For example the modeling framework representation can be an EMF representation of the model. Of note the mapping module can include program code that when executed in the memory of the host computing platform by the processor of the host computing platform can map the modeling framework representation of a model to a database representation of the model in the database .

Specifically at least two different queries A can be issued by the mapping module to at least one of the data sources in order to retrieve corresponding result sets B. The data sources can refer to corresponding instance models and optionally one or more meta data models. One query can extract a selection of model elements from the modeling framework representation of the instance model to form the rows of a database representation of the model in the database . By comparison another query can extract a selection of attributes of model elements from the modeling framework representation of the instance model to form the columns of the database representation of the model in the database . Subsequently the reporting tool can access the database in order to generate reports providing a view to the instance model.

Of note the query languages B supported by the modeling framework A can include EMF OCL or EMF XPath. Yet the query languages B can be extended to support additional query directives through the query language extensions D. For instance the query language extensions D can include a directive to retrieve an identifier for a specified element of a modeling framework representation of the instance model and also a directive to retrieve a concatenation of a resource path and identifier for a specified element of the modeling framework representation of the instance model. Using both directives columns can be generated in the database representation of the instance model in the database to be used as keys for joining different EMF data sets so as to more accurately identify the different elements present in different instance models referenced by the data sources .

Likewise the query language extensions D can include a directive to resolve a retrieved identifier for an element as the context for another element in order to support the processing of nested data sets. Specifically as reporting tools often support the notion of nested tables in that an inner table can determine its context from an outer table. As such a context need be passed from the data set of the outer table to the data set of the inner table. In most cases the context of an EMF data set includes the root elements of all instance models in an associated data source. Therefore the contexts must be passed to a data set through parameters. In the case of EMF data sets of EMF elements EMF elements represented as parameters are limited to having simple types. Therefore the use of an identifier or a concatenation of a resource path and identifier which are strings can be used as a context element in a data set so that once passed the context can be resolved back to an EMF element. The extended directive for resolving the retrieved identifier can include logic to resolve a parameter formed from the extended directive producing either an identifier or a concatenation of a resource path and identifier back to EMF elements depending on whether one or more instance models are used respectively.

Notably to support relationship mapping between elements in a model a relationship element can be extracted during a row query to identify a model element and the column query can include a reference by way of either an identifier or a concatenation of a resource path and identifier to another model element that enjoys a relationship with the identified model element. To handle multiple direct relationships between the identified model element and the other model elements e.g. one to many many to many then a key can be provided as the column entry to an additional table that includes all elements related to the identified model element.

In more particular illustration of the methodology performed by the mapping module is a flow chart illustrating a process for mapping a model to a database for reporting in a reporting tool for a MDD environment. Beginning in block a table in a database such as a relational database can be initialized for use and in block one or more data sources of a modeling framework representation of a model can be specified namely by way of a reference to one or more instance models and one or more meta models produced for use with a MDD environment. The reference can include a path to the models and a file name of the models. In block a query expression can be specified for the models to extract model elements from the data sources to populate the rows of the table and in block a query expression can be specified to extract attributes for the model elements from the data sources to populate the columns of the table. The query expressions can conform to a query language supported by a modeling framework through which the modeling framework representation of the models can be accessed. Examples include EMF OCL and EMF XPath.

In block as an optional step one or more parameters can be specified for use in the query expressions in order to simplify the specification of the query expressions. In this regard the parameters can have a name a type that is restricted to be a simple type and a default value. Thereafter the parameters can be used as a templated portion of the query expressions in lieu a manually specified portions of the query expressions. In any event in block the query expression for the rows can be executed against the data sources and in block the query expression for the column can be executed. In block the result set produced by the query expression for the rows can be used to specify the rows of the table in respect to selected elements of the model and in block the result set produced by the query expression for the columns can be used to populate the columns of the table with attributes for corresponding elements specified for the rows. Finally in block the database can be closed for use by a reporting tool in generating reports for the model.

Embodiments of the invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode and the like. Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system.

For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

