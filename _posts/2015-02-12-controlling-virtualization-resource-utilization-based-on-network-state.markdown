---

title: Controlling virtualization resource utilization based on network state
abstract: A controller device is connected to a group of virtual machines and one or more network devices in a network. The controller device is configured to store policies relating to when to start up and when to shut down the virtual machines based on users logging into the network, users logging out of the network, users attempting to access the plurality of virtual machines, and/or particular types of traffic in the network; receive network activity data from a network device of the one or more network devices in the network; identify, based on the network activity data and the policies, a virtual machine, of the group of virtual machines, to start up or shut down; and cause the virtual machine to start up or shut down.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09176758&OS=09176758&RS=09176758
owner: Juniper Networks, Inc.
number: 09176758
owner_city: Sunnyvale
owner_country: US
publication_date: 20150212
---
This application is a continuation of U.S. patent application Ser. No. 13 628 557 filed Sep. 27 2012 now U.S. Pat. No. 8 959 513 which is incorporated herein by reference.

Enterprises have been turning to the use of virtual machines over physical machines as a cost savings tool. A physical server may simultaneously run multiple virtual machines that may be used for various purposes. Enterprises typically have policies in place to determine when virtual machines should be running. These policies are static and based on time or load. A time based policy may indicate the days and or times that a particular virtual machine should be running. A load based policy may indicate a load threshold that may be used to determine when to add another virtual machine.

According to some example implementations a system may include a controller device. The controller device may be connected to a group of virtual machines and one or more network devices in a network. The controller device may store policies relating to when to start up and when to shut down the virtual machines based on users logging into the network users logging out of the network users attempting to access the plurality of virtual machines and or particular types of traffic in the network receive network activity data from a network device of the one or more network devices in the network identify based on the network activity data and the policies a virtual machine of the group of virtual machines to start up or shut down and cause the virtual machine to start up or shut down.

According to some example implementations a method may be performed by a controller device connected to a group of virtual machines and one or more network devices in a network. The method may include storing by the controller device policies relating to when to start up and when to shut down the virtual machines based on at least two of users logging into the network users logging out of the network users attempting to access the virtual machines or particular types of traffic in the network receiving by the controller device network activity data from a network device of the one or more network devices in the network identifying by the controller device and based on the network activity data and the policies a virtual machine to start up or shut down and causing by the controller device the virtual machine to start up or shut down.

According to some example implementations a computer readable medium may include instructions that when executed by one or more processors cause the one or more processors to store policies relating to when to start up and when to shut down a group of virtual machines based on at least three of users logging into a network users logging out of the network users attempting to access the virtual machines or particular types of traffic in the network receive network activity data from a network device of a group of network devices in the network identify based on the network activity data and the policies a virtual machine to start up or shut down and cause the virtual machine to start up or shut down.

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

An implementation described herein may provide dynamic policies for determining when to start up a virtual machine and when to shut down a virtual machine. Rather than static policies based on time or load these dynamic policies may be based on network activity data. As a result virtual machines may be available when needed and shut down when not needed.

For the example of assume that a particular user has been previously associated with three virtual machines e.g. VM 2 VM 5 and VM 7 . Assume further that the virtual machine controller stores policies that indicate that when the particular user logs into the network the virtual machine controller should start up virtual machines VM 2 and VM 5 that the virtual machine controller should start up VM 7 when the particular user requests to access VM 7 and that the virtual machine controller should shut down VM 2 VM 5 and VM 7 when the user logs out of the network.

As shown in assume that the particular user logs into the network. The virtual machine controller receives network activity data including information that the particular user has logged into the network. Based on this network activity data and the stored policies the virtual machine controller starts up VM 2 and VM 5 but does not start up VM 7. Thus when the particular user later attempts to access VM 5 VM 5 is already started up and running.

As a result virtual machines may be available when needed and shut down when not needed. This saves power in the network as the number of virtual machines that are running is directly proportional to the power that is being consumed.

As shown in environment may include user devices through A A 1 referred to generally as user devices and individually as user device network devices through B B 1 referred to generally as network devices and individually as network devices virtual machine controller and virtualization server .

Each of user devices may include a client device that is capable of communicating via a network such as a private network. Examples of user device may include a smart phone a personal digital assistant a laptop a tablet computer a personal computer a gaming device a desktop computer or a combination of these and or other types of communication devices. User devices may store and execute applications that communicate with a network such as the private network. Examples of these applications might include browser applications gaming applications communication applications word processing applications spreadsheet applications or the like.

Each of network devices may include a network device such a wired or wireless access point a router a proxy server a modem a gateway a bridge a firewall a combination of two or more of these network devices or another type of network device. Network devices may be associated with the private network and may process network traffic in the private network such as by routing network traffic filtering network traffic regulating network traffic terminating network traffic or receiving network traffic or the like. A network device may communicate with a user device and or another network device using a wireless interface and or a wired interface.

Virtual machine controller may include or be incorporated in a server device or a collection of server devices. In some implementations virtual machine controller may be a device separate from virtualization server . In some other implementations virtual machine controller may be incorporated in virtualization server . Generally virtual machine controller may store dynamic policies relating to when virtual machines should be started up and when virtual machines should be shut down. In some implementations virtual machine controller may directly control a virtual machine using for example an application programming interface API . In some other implementations virtual machine may provide instructions to virtualization server which may in turn carry out the instructions regarding a virtual machine.

Virtualization server may include a server device or a collection of server devices. Virtualization server may be responsible for implementing a group of virtual machines. Virtualization server may be capable of concurrently running multiple virtual machines. Each virtual machine may be associated with a particular user device a particular user of a user device or a particular application capable of running on or communicating with a user device .

The example quantity and configuration of devices illustrated in are provided for simplicity. In practice environment may include additional devices fewer devices different devices or differently arranged devices than illustrated in . In addition any single device illustrated in may be implemented as multiple possibly distributed devices. Further any two or more devices may be implemented as a single device. For example virtual machine controller and virtualization server may be combined into a single device that performs the functions of both virtual machine controller and virtualization server . Alternatively virtual machine controller and network device may be combined into a single device that performs the functions of both virtual machine controller and network device . Also a function described as being performed by one of the devices may be performed by a different device or a combination of devices.

As shown in environment may include user devices network devices virtual machine controller virtualization controller and collection device . In some implementations user devices network devices virtual machine controller virtualization controller and collection device may be associated with a private network.

User devices network devices virtual machine controller and virtualization controller may correspond to like devices described above with regard to . Unlike environment in environment may include collection device .

Collection device may include a server device or a collection of server devices. Collection device may collect network activity data from network devices . In one example implementation collection device may correspond to an interface for metadata access point IF MAP server. In another example implementation collection device may correspond to another type of device that collects network activity data. In some implementations collection device may provide a subscription service such that other devices can subscribe to receive certain kinds of network activity data. In these implementations collection device may receive network activity data from one or more of network devices and provide the network activity data subscribed to by virtual machine controller to virtual machine controller .

The example quantity and configuration of devices illustrated in are provided for simplicity. In practice environment may include additional devices fewer devices different devices or differently arranged devices than illustrated in . In addition any single device illustrated in may be implemented as multiple possibly distributed devices. Further any two or more devices may be implemented as a single device. Also a function described as being performed by one of the devices may be performed by a different device or a combination of devices.

Each virtual machine may include a software implementation of a physical machine e.g. a computer that executes programs like a physical machine. In some implementations as described above a virtual machine may be associated with a particular user device a particular user of a user device or a particular application capable of running on or communicating with a user device . In some implementations some virtual machines may execute the same operating system and or set of applications. In some other implementations some virtual machines may execute different operating systems and or sets of applications.

Each virtual machine may be controlled via an API to for example start up or shut down. For example a virtual machine may start up or shut down when instructed by virtual machine controller . A user device may interact with a running virtual machine to run an application to perform a function to provide certain content or the like. In some implementations user device may interact with a virtual machine using an application such as a remote desktop application.

The example quantity and configuration of components illustrated in are provided for simplicity. In practice virtualization server may include additional components fewer components different components or differently arranged components than illustrated in .

As shown in device may include a bus a processor a memory a storage device an input output device and a communication interface . Bus may include a path or a collection of paths that permits communication among the components of device .

Processor may include a processor a microprocessor an application specific integrated circuit ASIC a field programmable gate array FPGA or another type of processing component that interprets and executes instructions. Memory may include a random access memory RAM or another type of dynamic storage device that stores information and or instructions for execution by processor a read only memory ROM or another type of static storage device that stores static information and or instructions for use by processor and or another type of memory such as a hard drive a cache or a flash memory. Storage device may include a recording medium to store data that may be used by processor .

Input output device may include a component that permits an operator to input information to device such as a button a keyboard a keypad a touch screen display or the like and or a component that outputs information to the operator such as a light emitting diode LED a display a speaker or the like.

Communication interface may include any transceiver like component that enables device to communicate with other devices and or systems. For example communication interface may include a separate transmitter and receiver or a transceiver that combines the functionality of both a transmitter and a receiver. Communication interface may include a wired interface a wireless interface or both a wired interface and a wireless interface.

Device may perform certain operations as described in detail below. According to an example implementation device may perform these operations in response to processor executing sequences of instructions contained in a computer readable medium such as memory . A computer readable medium may be defined as a non transitory memory device. A memory device may include space within a single physical storage device or spread across multiple physical storage devices.

The software instructions may be read into memory from another computer readable medium such as storage device or from another device via communication interface . The software instructions contained in memory may cause processor to perform processes that will be described later. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

While shows device as having a particular quantity and arrangement of components in some implementations device may include additional components fewer components different components or differently arranged components.

Process may include storing dynamic policies block . For example virtual machine controller may store dynamic policies relating to when to start up and shut down virtual machines . In some implementations virtual machine controller may obtain some or all of the dynamic policies from an operator. For example an operator may input some or all of the dynamic policies into virtual machine controller . Additionally or alternatively virtual machine controller may obtain some or all of the dynamic policies from another device. For example a device may provide some or all of the dynamic policies for storage by virtual machine controller . Additionally or alternatively virtual machine controller may generate some or all of the dynamic policies. For example virtual machine controller may analyze a history of network activity data relating to interactions with virtual machines and or information regarding associations between virtual machines and user devices users and or applications to generate some or all of the dynamic policies. Virtual machine controller may identify patterns and generate some or all of the dynamic policies based on the identified patterns.

Virtual machine controller may store the dynamic policies in a data structure. is a diagram illustrating an example of a data structure that may store dynamic policies. In some implementations virtual machine controller may store data structure in a memory located in or accessible by virtual machine controller .

As shown in data structure may include a trigger field and a policies field . Trigger field may store information that may be used to identify relevant policies. Examples of information that may be stored in trigger field include user identifiers user group identifiers user device identifiers and application identifiers. A user identifier may include a string of characters that uniquely identifies a user of a user device . A user group identifier may include a string of characters that uniquely identifies a group of users such as a group of users having some formal or informal relationship like users working for the same department of a company users signed up for the same class at a school and or any other group of users. A user device identifier may include a string of characters that uniquely identifies a user device . An application identifier may include a string of characters that uniquely identifies an application capable of executing on or communicating with a user device .

Policies field may store dynamic policies. The policies may relate to users or user groups that have logged into the network users trying to access particular virtual machines and or particular types of network traffic in the network. The policies may indicate when to start up a particular virtual machine and or when to shut down a particular virtual machine . One example policy might indicate to start up a particular virtual machine when a particular user logs into the network. Another example policy might indicate to shut down a particular virtual machine when a particular user logs out of the network. Another example policy might indicate to start up a particular virtual machine when a user of a particular user group logs into the network. Another example policy might indicate to shut down a particular virtual machine when no users of a particular user group are logged into the network. Another example policy might indicate to start up a particular virtual machine when a user attempts to access a particular virtual machine . Another example policy might indicate to start up a particular virtual machine when network traffic is observed that relates to a particular application such as network traffic received at a particular port network traffic corresponding to a particular network address e.g. a uniform resource locator URL a uniform resource identifier URI an internet protocol IP address a media access control MAC address etc. network traffic otherwise identifying the particular application or the like. The preceding example policies are intended to only be examples. In some implementations policies field may store additional policies fewer policies or different policies to facilitate a determination of when to start up or shut down a virtual machine .

While shows data structure as having a particular quantity and arrangement of fields in some implementations data structure may include additional fields or different fields. While data structure has been shown as a table data structure may take any searchable form or arrangement of data within a memory device.

Returning to process may include receiving network activity data block . For example virtual machine controller may receive network activity data relating to communications in the network. As described above examples of the network activity data may include information regarding users logging into and out of the network information regarding access attempts by users to virtual machines information regarding communications relating to particular applications or the like. In some implementations virtual machine controller may receive the network activity data directly from network devices . In some other implementations virtual machine controller may receive the network activity data from network devices via one or more other devices such as via collection device . In yet some other implementations virtual machine controller may receive some network activity data directly from network devices and may receive some other network activity data from one or more other devices e.g. collection device .

Process may include selectively starting up and shutting down virtual machines based on the dynamic policies and the network activity data block . For example virtual machine controller may determine based on the network activity data and the dynamic policies whether to start up or shut down a virtual machine . For example virtual machine controller may search the policies e.g. stored in data structure based on information in the network activity data to identify a policy that is relevant to the network activity data. Based on the identified policy virtual machine controller may determine whether to start up or shut down a virtual machine .

When virtual machine controller determines that a particular virtual machine should be started up virtual machine controller may control the particular virtual machine via its API to cause the particular virtual machine to start up. When virtual machine controller determines that a particular virtual machine should be shut down virtual machine controller may control the particular virtual machine via its API to cause the particular virtual machine to shut down.

While shows process as including a particular quantity and arrangement of blocks in some implementations process may include fewer blocks additional blocks or a different order of blocks. Additionally or alternatively some of the blocks may be performed in parallel.

Assume that a user inputs a command into the user device to issue a request to log into the network. As shown by in the user device may generate a login request message and may transmit the login request message to the NAC. The NAC may receive the login request message. The NAC may process the login request message to determine whether the user is an authorized user that is permitted to access the network. Assume that the user is an authorized user. In this case the NAC may generate a login accepted message and may transmit the login accepted message to the user device as shown by in .

The NAC may transmit information to the VM controller that the user has used the user device to log into the network as shown by in . The VM controller may analyze the dynamic policies based on the information received from the NAC. Assume that the dynamic policies indicate that virtual machine VM 6 should be started up when the user logs into the network. In this case the VM controller may send an instruction to virtual machine VM 6 to start up as shown by in . Based on the instruction from the VM controller virtual machine VM 6 may start up as shown by in . For example virtual machine VM 6 may power up boot up or otherwise begin executing.

At some later time the user may interact with virtual machine VM 6 using the user device as shown by in . For example the user device may provide information to an application running on virtual machine VM 6 request information from an application running on virtual machine VM 6 or otherwise communicate or interact with an application running on virtual machine VM 6.

While shows a particular quantity and arrangement of operations in some implementations there may be fewer operations additional operations or a different arrangement of operations. Additionally or alternatively some of the operations may be performed in parallel or in a different order.

Assume that a user of a particular user group inputs a command into the user device to issue a request to log into the network. As shown by in the user device may generate a login request message and may transmit the login request message to the NAC. The NAC may receive the login request message. The NAC may process the login request message to determine whether the user is an authorized user that is permitted to access the network. Assume that the user is an authorized user. In this case the NAC may generate a login accepted message and may transmit the login accepted message to the user device as shown by in .

The NAC may transmit information to the MAP server that the user has used the user device to log into the network as shown by in . Assume that the VM controller has subscribed to receive network activity data from the MAP server. In this case the MAP server may transmit information to the VM controller that the user has used the user device to log into the network as shown by in .

The VM controller may analyze the dynamic policies based on the information received from the MAP server. Assume that the dynamic policies indicate that virtual machine VM 6 should be started up when a user belonging to the particular user group logs into the network. In this case the VM controller may send an instruction to virtual machine VM 6 to start up as shown by in . Based on the instruction from the VM controller virtual machine VM 6 may start up as shown by in . For example virtual machine VM 6 may power up boot up or otherwise begin executing.

At some later time the user may interact with virtual machine VM 6 using the user device as shown by in . For example the user device may provide information to an application running on virtual machine VM 6 request information from an application running on virtual machine VM 6 or otherwise communicate or interact with an application running on virtual machine VM 6.

While shows a particular quantity and arrangement of operations in some implementations there may be fewer operations additional operations or a different arrangement of operations. Additionally or alternatively some of the operations may be performed in parallel or in a different order.

Assume that a user inputs a command into the user device to issue a request to log out of the network. As shown by in the user device may generate a logout request message and may transmit the logout request message to the NAC. The NAC may receive the logout request message. The NAC may process the logout request message to disconnect the user from the network. The NAC may generate a logout accepted message and may transmit the logout accepted message to the user device as shown by in .

The NAC may transmit information to the VM controller that the user has used the user device to log out of the network as shown by in . The VM controller may analyze the dynamic policies based on the information received from the NAC. Assume that the dynamic policies indicate that virtual machine VM 6 should be shut down when the user logs out of the network. In this case the VM controller may send an instruction to virtual machine VM 6 to shut down as shown by in . Based on the instruction from the VM controller virtual machine VM 6 may shut down as shown by in . For example virtual machine VM 6 may power down or otherwise cease executing.

While shows a particular quantity and arrangement of operations in some implementations there may be fewer operations additional operations or a different arrangement of operations. Additionally or alternatively some of the operations may be performed in parallel or in a different order.

Assume that a user inputs a command into the user device to issue a request to access virtual machine VM 6. The request may refer specifically to virtual machine VM 6 or may refer to an application or content associated with virtual machine VM 6. As shown by in the user device may generate an access request message and may transmit the access request message to the firewall. The firewall may receive the access request message. The firewall may process the access request message to determine whether the access request message is malicious. Assume that the firewall determines that the access request message is not malicious. In this case the firewall may send the access request message onto the router switch as shown by in .

The router switch may receive the access request message and may send the access request message to the virtualization server as shown by in . Assume that virtual machine VM 6 is not executing on the virtualization server. In this case the virtualization server may return an access failed message to the user device as shown by in . Alternatively the virtualization server may not respond at all to the user device s access request. In either situation the user device may be notified of a failure of the access request e.g. either by receiving the access failed message or by failing to receive any response for a particular amount of time .

The firewall and or the router switch may transmit information to the VM controller that the user is attempting to access virtual machine VM 6 as shown by in . The VM controller may analyze the dynamic policies based on the information received from the firewall and or the router switch. Assume that the dynamic policies indicate that virtual machine VM 6 should be started up when a user attempts to access virtual machine VM 6. In this case the VM controller may send an instruction to virtual machine VM 6 to start up as shown by in . Based on the instruction from the VM controller virtual machine VM 6 may start up as shown by in . For example virtual machine VM 6 may power up boot up or otherwise begin executing.

In response to failure of the access attempt by the user device the user device may retry the access request as shown by in . While shows the access request retry as going directly from the user device to the virtualization server the access request retry may follow the same path as the initial access request. The user device may be configured to retry the access request a particular number of times. Assume that prior to one of these retry attempts virtual machine VM 6 starts up. Because virtual machine VM 6 has started up prior to the access request retry being received by the virtualization server the access request may succeed this time. Thus the user may interact with virtual machine VM 6 using the user device as shown by in . For example the user device may provide information to an application running on virtual machine VM 6 request information from an application running on virtual machine VM 6 or otherwise communicate or interact with an application running on virtual machine VM 6.

While shows a particular quantity and arrangement of operations in some implementations there may be fewer operations additional operations or a different arrangement of operations. Additionally or alternatively some of the operations may be performed in parallel or in a different order. For example the firewall and or the router switch may transmit information to the VM controller that the user is attempting to access virtual machine VM 6 prior to the user device determining that the first access request has failed.

Assume that a user inputs a command into the user device to issue a request to access a particular application that is available via virtual machine VM 6. The request may refer specifically to the particular application or may be directed to a particular port or network address associated with the particular application. As shown by in the user device may generate an access request message and may transmit the access request message to the firewall. The firewall may receive the access request message. The firewall may process the access request message to determine whether the access request message is malicious. Assume that the firewall determines that the access request message is not malicious. In this case the firewall may send the access request message onto the router switch as shown by in .

The router switch may receive the access request message and may send the access request message to the virtualization server as shown by in . Assume that virtual machine VM 6 is not executing on the virtualization server. In this case the virtualization server may return an access failed message to the user device as shown by in . Alternatively the virtualization server may not respond at all to the user device s access request. In either situation the user device may be notified of a failure of the access request e.g. either by receiving the access failed message or by failing to receive any response for a particular amount of time .

The firewall and or the router switch may transmit information to the VM controller that the user is attempting to access the particular application as shown by in . The VM controller may analyze the dynamic policies based on the information received from the firewall and or the router switch. Assume that the dynamic policies indicate that virtual machine VM 6 should be started up when a user attempts to access the particular application. In this case the VM controller may send an instruction to virtual machine VM 6 to start up as shown by in . Based on the instruction from the VM controller virtual machine VM 6 may start up as shown by in . For example virtual machine VM 6 may power up boot up or otherwise begin executing.

In response to failure of the access attempt by the user device the user device may retry the access request as shown by in . While shows the access request retry as going directly from the user device to the virtualization server the access request retry may follow the same path as the initial access request. The user device may be configured to retry the access request a particular number of times. Assume that prior to one of these retry attempts virtual machine VM 6 starts up. Because virtual machine VM 6 has started up prior to the access request retry being received by the virtualization server the access request may succeed this time. Thus the user may interact with virtual machine VM 6 using the user device as shown by in . For example the user device may provide information to an application running on virtual machine VM 6 request information from an application running on virtual machine VM 6 or otherwise communicate or interact with an application running on virtual machine VM 6.

While shows a particular quantity and arrangement of operations in some implementations there may be fewer operations additional operations or a different arrangement of operations. Additionally or alternatively some of the operations may be performed in parallel or in a different order. For example the firewall and or the router switch may transmit information to the VM controller that the user is attempting to access the particular application prior to the user device determining that the first access request has failed.

Implementations described herein may provide a system and or method for dynamically controlling the starting up and shutting down of virtual machines. Because virtual machines that are executing when not being used wastes power intelligently starting up and shutting down the virtual machines reduces power and costs.

The foregoing description provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above disclosure or may be acquired from practice of the implementations.

It will be apparent that aspects described herein may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement these aspects does not limit the implementations. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that software and control hardware can be designed to implement the aspects based on the description herein.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of the possible implementations. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one other claim the disclosure of the possible implementations includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used in the present application should be construed as critical or essential to the invention unless explicitly described as such. Also as used herein the article a is intended to include one or more items and may be used interchangeably with one or more. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

