---

title: Dynamic web services server
abstract: A method is provided for a multi-tenant system to accept web service calls from third party systems over a computer network. The method includes centrally receiving messages with different endpoint URLs from the third party systems over the computer network and processing each message by parsing an endpoint URL of the message to identify a tenant and an action for a payload of the message and authenticating the message. When the message is authenticated, the method further includes generating an acknowledgment of the message based on the identified tenant and the identified action and sending the acknowledgment over the computer network, routing the payload, the identified tenant, and the identified the action to a queue based on the identified tenant, retrieving the payload, the identified tenant, and the identified action from the queue, determining a user script corresponding to the identified action, and executing the user script on the payload.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09635007&OS=09635007&RS=09635007
owner: HEAT SOFTWARE USA INC.
number: 09635007
owner_city: Milpitas
owner_country: US
publication_date: 20150924
---
While all major platforms can access the Internet using web browsers they could not interact with each other over the Internet. For these platforms to work together web applications were developed. Web applications are applications that run on the web. These are built around the web browser standards and can be used by any browser on any platform.

Web services allow an application to publish its function or message to the rest of the world. Web services use Extensible Markup Language XML to code and to decode data and Simple Object Access Protocol SOAP to transport it using open protocols . Web services can help to solve the interoperability problem by giving different applications and different platforms a way to link their data.

As used herein the term includes means includes but not limited to the term including means including but not limited to. The terms a and an are intended to denote at least one of a particular element. The term based on means based at least in part on. The term or is used to refer to a nonexclusive such that A or B includes A but not B B but not A and A and B unless otherwise indicated.

To set up a web service a user logs into a first software system and creates an outbound message by setting an endpoint Uniform Resource Locator URL for the message and selecting fields to be included in the message. The first software system publishes a Web Service Description Language WSDL file that describes how the web service can be called what parameters it expects and what data structures it returns. Based on the WSDL a second software system creates web service logic with classes and methods to call receive and process the fields in the message.

When fields in a message change the first software system publishes a new WSDL. Based on the new WSDL the second software system has to change its web service logic by adding new classes and methods to receive and process the fields in the message which involves code change testing and deployment. Thus what is needed is a software system with an architecture that reduces the amount of code change testing and deployment when inbound messages change.

In examples of the present disclosure a multi tenant system has a web server that centrally accepts all kinds of web service call messages. The web server queues payloads of the web service call messages in different queues based the end point URLs of the web service calls. The payloads are retrieved and processed by different user scripts based the end point URLs of the web service calls. In this architecture the web server remains static when a web service changes. Only the user scripts are updated to accommodate the web service change.

System includes a web server that accepts any inbound web service call from any third party system that have endpoint URLs with a common hostname but different paths or query parameters. Web server includes a redirection module and a generic web handler e.g. a generic .ashx handler . For each web service call redirection module authenticates the web service call. As part of the authentication redirection module identifies the tenant and the action of web service call . Once a web service call is authenticated redirection module provides the identified tenant the identified action and the payload of the web service call to generic web handler .

Generic web handler looks up an acknowledgment message for the identified tenant and the identified action of web service call from an acknowledgment message table . If a corresponding acknowledgment message for the identified tenant and the identified action is found generic web handler sends the acknowledgement message. Generic web handler converts the payload of web service call to a different format such as a JavaScript Object Notation JSON creates a queue message with the identified tenant the identified action and the payload and passes the queue message to a queue router in system .

Queue router maps the identified tenant in the queue message to a queue from a number of queues and passes the queue message to that queue.

A script handler retrieves and processes queue messages from queue . Script handler maps the identified action to a user script e.g. a JavaScript from a number of user scripts and causes a script execution engine e.g. a JavaScript engine to execute the user script with the payload in the queue message as input. Script execution engine has a library of functions that may be called to manipulate fields and access read or write a database that is part of system . Executing user script script execution engine may call application services to read or write database or generate an outbound web service call or acknowledgment message to a third party system e.g. to read or write a third party database . The above description applies to pipelines for other tenants where each pipeline includes a message queue a script handler a script execution engine and user scripts .

A script editor provides a user interface to create user scripts . To create a new inbound web service connection script editor may receive a sample inbound web service call message and map new fields in the message to fields in database . To create a new outbound web service connection script editor may receive a WSDL and map fields in database to fields described in the WSDL. Afterwards script editor makes the new fields available to create user scripts.

System may be implemented on server computers and storage systems. For example 1 web server may be implemented on a server computer or a cluster of server computers 2 router message queue and script handler may be implemented on a server computer or a cluster of server computers 3 scrip execution engine and script editor may be implemented on a server computer or a cluster of server computers 4 application services may be implemented on a server computer or a cluster of server computers and 5 database may be implemented on a storage area network SAN or network area storage NAS .

In block redirection module centrally receives inbound web service call messages with different endpoint URLs from third party systems over a computer network. Each endpoint URL includes a hostname of web server a path identifying a tenant and an action and a query string identifying a customer defined Application Programming Interface API key. Block may be followed by block .

In block redirection module parses an endpoint URL of a web service call to identify a tenant an action and an API key of the web service call. Block may be followed by block .

In sub block redirection module performs system level external host IP address filtering. Redirection module may identify the external host IP address of web service call and compare it against a blacklist . When the external host IP address of web service call is not blacklisted sub block may be followed by sub block . Otherwise sub block may proceed to block .

In sub block redirection module performs tenant level external host IP address filtering. Each tenant creates a white list . Redirection module may map the identified tenant to its whitelist and compare the external host IP address of web service call against the whitelist. When the external host IP address of web service call is whitelisted sub block may be followed by sub block . Otherwise sub block may proceed to block .

In sub block redirection module performs credential validation. Redirection module may compare the identified API key against a recorded API key for the identified tenant in an API key list . When the credential of web service call is validated sub block may be followed by block . Otherwise sub block may proceed to block .

In block redirection module determines if web service call has been authenticated. If so block may be followed by block . Otherwise block may be followed by block .

In block redirection module passes the identified tenant the identified action and the payload of web service call to generic web handler . Redirection module may also pass the query string in the endpoint URL of web service call to generic web handler . Instead of passing the identified tenant the identified action and the query string as individual elements redirection module may pass the entire endpoint URL to generic web handler .

In block generic web handler receives an identified tenant an identified action a payload and a query string in the endpoint URL of a web service call from redirection module . Block may be followed by block .

In block generic web handler transforms the payload of web service call to a different format such as JSON that is compatible with script execution engine and user scripts . Generic web handler may also append the query string to the beginning of the payload which allows hardcoded values to be passed to script execution described later regardless of the content inside the message. Block may be followed by block .

In block generic web handler generates a queue message including the identified tenant the identified action and the payload of web service call and passes the queue message to router . Instead of including the identified tenant and the identified action as individual elements generic web handler may include the entire endpoint URL in the queue message. Block may be followed by block .

In block generic web handler looks up an acknowledgment message for the identified tenant and the identified action from acknowledgment message table . If an acknowledgment message for the identified tenant and the identified action is found generic web handler sends the acknowledgement message.

In block queue router references a tenant queue mapping to map an identified tenant or the entire endpoint URL in a queue message to a message queue . Block may be followed by block .

In block script handler retrieves a queue message from a corresponding queue . Script handler may retrieve queue messages from queue in a first in first out order. Block may be followed by block .

In block script handler references an action script mapping to map an identified action or the entire endpoint URL in the queue message to a user script . Block may be followed by block .

In block script handler calls script engine to run user script with the payload in the queue message as input.

In block script execution engine executes a user script with a payload of a queue message as input in response to script handler . Block may be followed by optional blocks to which depend on how user script is defined.

In optional block if so scripted script execution engine determines if the payload is from an initial request to accept the payload data e.g. an initial HTTP post . If so optional block may be followed by optional block . Otherwise optional block may be followed by optional block .

In optional block if so scripted script execution engine uses a session ID and an object ID to make an external web service call to the external host to request the payload data again. Any response would be processed by redirection module as a new inbound web service call.

In optional block if so scripted script execution engine makes a call to application services to read or write database . The write to database may be with a computed value calculated from one or more fields in the payload received through a web service call . Optional block may be followed by optional block

In optional block if so scripted script execution engine makes an external web service call e.g. to read or write a third party database . External web service call may include a computed value calculated from one or more fields in the payload received through a web service call . Optional block may be followed by optional block .

In optional block if so scripted script execution engine generates and sends an acknowledgement . In some examples script execution engine generates and sends acknowledgment only when the preceding scripted actions succeed without error.

In block script editor creates a web service connection from a third party system. For example the user provides a name also called integration name and a description for the web service connection. The user may also provide a fixed acknowledgment message for the web service connection which script editor saves under the web service connection in acknowledgement message table . When a fixed acknowledgment is not accepted by the third party system a user script that processes an external web service may be scripted to generate a dynamic acknowledgement for the web service call. Prior to creating the web service connection the user may set an API key and add one or more IP addresses of the third party system to its tenant level whitelist . Block may be followed by block .

In block script editor adds an external web service to the web service connection. For example the user provides a name also called service reference and an endpoint URL also called service address for the external web service. The user would use the same endpoint URL is used to create an outbound web service call at the third party system.

Script editor also saves the endpoint URL under the web service connection in acknowledgement message table so the fixed acknowledgement message is sent in response to a corresponding inbound web service call . Block may be followed by block .

In block script editor receives a sample web service call message from an external web service. This may occur automatically when the user selects a button on the GUI for script editor to request the third party system to send a sample web service call or the user manually builds and sends a sample web service call using a HTTP request builder based on prior knowledge of the third party system. Sample web service call is processed by redirection module and generic web handler and then routed by queue router directly to script editor . Block may be followed by block .

In block script editor maps information in the sample payload of service call to one or more fields in database . Script editor parses out the sample payload and displays a tree of third party fields also called request data in a first pane of a GUI for the script editor. When the user selects a third party field script editor generates a script snippet of the selected third party field as a script variable in a second pane of the GUI. Script editor allows the user to edit the script snippet and append it to a script in a third pane of the GUI. Script editor also allows the user to edit the script to map information in the payload to one or more fields in database . This mapping script e.g. lines to in pane is saved in a library of the web service connection for future reference. For other web service calls having the same third party fields the user may press a script snippet button and select the mapping script from a list of functions in library to retrieve a script snippet in pane and append it to the script in pane as needed. The user may also select a function e.g. to manipulate third party fields and write the result to database from list to retrieves a script snippet for that function to pane and append it to a script in pane as needed. When script snippets in the script share one or more variables script editor may reuse the variables from prior inserted scrip snippet instead of again appending the same variables to the script.

In block script editor creates a web service connection to one or more third party systems. For example the user provides a name also called integration name and a description for the web service connection. Block may be followed by block .

In block script editor adds an external web service to the web service connection by saving its endpoint URLs to the web service connection. For example the user provides a name also called service reference and an endpoint URL also called service URL . Instead of an endpoint URL the user may provide a WSDL for the external web service. If the external web service requires authentication the user may also provide a user name and a password. Block may be followed by optional block .

In optional block if the user did not provide a WSDL in block script editor uses the endpoint URL to download the WSDL for the external web service. Script editor may convert WSDL into a different format such as JSON. Block may be followed by block .

In block script editor maps information in database to information in WSDL . Script editor parses out the converted WSDL and displays a list of third party web services a list of third party methods under the selected web service a first tree of third party input fields under the selected method and a second tree of third party output fields under the selected method in a first pane of a GUI for the script editor. When the user selects a third party field script editor generates a script snippet of the selected third party field as a script variable in a second pane of the GUI. Script editor allows the user to edit the script snippet and append it to a script in a third pane of the GUI. Script editor also allows the user to edit the script to map information in WSDL to information in database . This mapping script is saved in library of the web service connection for future reference. For other web service calls having the same third party fields the user may press a script snippet button and select the mapping script from a list of functions in library to retrieve a script snippet and append it to the script in pane as needed. The user may also select a function e.g. to manipulate fields in database and send the result as a third party field in an outbound web service call to a third message system from list to retrieves a script snippet for that function to pane and append it to the script in pane as needed. When script snippets in a script share one or more variables script editor may reuse the variables from a prior inserted scrip snippet instead of again appending the same variables to the script.

Various other adaptations and combinations of features of the embodiments disclosed are within the scope of the present disclosure. Numerous embodiments are encompassed by the following claims.

