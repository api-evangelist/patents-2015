---

title: Technologies for secure bootstrapping of virtual network functions
abstract: Technologies for bootstrapping virtual network functions in a network functions virtualization (NFV) network architecture include a virtual network function (VNF) bootstrap service (VBS) in secure network communication with a VBS agent of a VNF instance. The VBS agent is configured to execute a secure VNF bootstrap capture protocol in the NFV network architecture. Accordingly, the VBS agent can be configured to register with the VBS via secure communications transmitted between the VBS and the VBS agent. The secure communications include transmitting a security quote from a TEE of a platform on which the VNF instance is instantiated and a security credential request to the VBS, as well as receiving a security credential in response to validating the security quote and the security credential request. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09578008&OS=09578008&RS=09578008
owner: Intel Corporation
number: 09578008
owner_city: Santa Clara
owner_country: US
publication_date: 20150511
---
Network operators and service providers typically rely on various network virtualization technologies to manage complex large scale computing environments such as high performance computing HPC and cloud computing environments. For example network operators and service provider networks may rely on network function virtualization NFV deployments to deploy network services e.g. firewall services network address translation NAT services load balancing services deep packet inspection DPI services transmission control protocol TCP optimization services etc. . Such NFV deployments typically use an NFV infrastructure to orchestrate various virtual machines VMs and or containers e.g. in a commodity server to perform virtualized network services commonly referred to as virtualized network functions VNFs on network traffic and to manage the network traffic across the various VMs and or containers.

Unlike traditional non virtualized deployments virtualized deployments decouple network functions from underlying hardware which results in network functions and services that are highly dynamic and generally capable of being executed on off the shelf servers with general purpose processors. As such the VNFs can be scaled in out as necessary based on particular functions or network services to be performed on the network traffic. Further the VNFs can be deployed across geographies on hosted infrastructure etc. as a per subscriber demand.

While the concepts of the present disclosure are susceptible to various modifications and alternative forms specific embodiments thereof have been shown by way of example in the drawings and will be described herein in detail. It should be understood however that there is no intent to limit the concepts of the present disclosure to the particular forms disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives consistent with the present disclosure and the appended claims.

References in the specification to one embodiment an embodiment an illustrative embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may or may not necessarily include that particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the art to effect such feature structure or characteristic in connection with other embodiments whether or not explicitly described. Additionally it should be appreciated that items included in a list in the form of at least one of A B and C can mean A B C A and B A and C B and C or A B and C . Similarly items listed in the form of at least one of A B or C can mean A B C A and B A and C B and C or A B and C .

The disclosed embodiments may be implemented in some cases in hardware firmware software or any combination thereof. The disclosed embodiments may also be implemented as instructions carried by or stored on one or more transitory or non transitory machine readable e.g. computer readable storage media which may be read and executed by one or more processors. A machine readable storage medium may be embodied as any storage device mechanism or other physical structure for storing or transmitting information in a form readable by a machine e.g. a volatile or non volatile memory a media disc or other media device .

In the drawings some structural or method features may be shown in specific arrangements and or orderings. However it should be appreciated that such specific arrangements and or orderings may not be required. Rather in some embodiments such features may be arranged in a different manner and or order than shown in the illustrative figures. Additionally the inclusion of a structural or method feature in a particular figure is not meant to imply that such feature is required in all embodiments and in some embodiments may not be included or may be combined with other features.

Referring now to in an illustrative embodiment a system for processing network traffic at a network functions virtualization NFV network architecture includes a number of network processing components including an NFV orchestrator a virtual infrastructure manager VIM and an NFV infrastructure . Additionally the NFV network architecture includes an NFV security services controller for managing and enforcing security monitoring and secure message transmission e.g. setting up secure communication channels authenticating messages transmitted across the secure communication channels maintaining security of the secure communication channels etc. over the NFV network architecture . As part of the initialization process of a virtual network function VNF instance of the NFV network architecture the NFV security services controller provides a secure message to a previously instantiated VNF instance of the NFV infrastructure that indicates to the VNF instance to perform a secure bootstrap. To do so the NFV security services controller includes a VNF bootstrap service see and the VNF instance includes a VNF bootstrap service VBS agent see which is responsible for performing the secure bootstrap and transmitting receiving messages. Accordingly the VNF instance can use the VBS agent to register with the NFV security services controller as an operational VNF instance and receive VNF bootstrap information such as start up policies configuration information and securely register as an operational VNF instance. Additionally in some embodiments the VBS agent can enable VNF instance licensing and enforcement.

The network processing and security monitoring components of the NFV network architecture can be deployed in various virtualization network architectures such as a virtual Evolved Packet Core vEPC infrastructure a virtualized Customer Premise Equipment vCPE infrastructure or any other type of operator visualized infrastructures. It should be appreciated that depending on the network architecture in which the NFV network architecture is deployed the NFV network architecture may include one or more NFV security services controllers one or more NFV orchestrators one or more VIMs and or one or more NFV infrastructures . It should be further appreciated that in some embodiments the NFV security services controller may be co located with the NFV orchestrator and or the VIM such as in an NFV management and orchestration MANO architectural framework.

The NFV infrastructure includes one or more computing nodes capable of managing e.g. creating moving destroying etc. a number of VMs and or containers e.g. in a commodity server that are configured to run as VNF instances. Each VNF instance typically relies on one or more VMs which may be running different software and or processes to perform network services on network traffic e.g. firewall services network address translation NAT services load balancing services deep packet inspection DPI services transmission control protocol TCP optimization services etc. . Further to provide certain network services multiple VNF instances may be created as a service function chain or a VNF forwarding graph i.e. a series of VNF instances performed in an ordered sequence to implement the desired network service .

The NFV security services controller may be embodied as or otherwise include any type of hardware software and or firmware capable of performing the functions described herein. As will be described in further detail below the NFV security services controller is configured to function as a security monitoring orchestrator. To do so the NFV security services controller is configured to transmit a security monitoring policy that includes various monitoring rules which include secure communication path policies configuration parameters and function descriptors to components throughout the NFV network architecture e.g. the VNF instances located in the NFV network architecture . The various security functions may include but are not limited to securing service function chaining SFC provisioning enforcing SFC security configuration and monitoring providing confidentiality protected tokens managing protected policy transmission and providing inter VNF SFC path protection.

To retrieve and or update the security monitoring policies the NFV security services controller may be configured to interface with one or more external security systems e.g. an Intel Security Controller security databases and or security policy engines. To communicate with the external security systems the NFV security services controller may deliver an application programming interface API and or the security policy to the external security services orchestration systems. In some embodiments the NFV security services controller may act as a trusted third party to authenticate messages across the various network and security monitoring components of the NFV network architecture . It should be appreciated that in some embodiments the NFV security services controller may have a higher security privilege than the other network and security monitoring components of the NFV network architecture to ensure the integrity and security of the NFV security services controller .

The NFV orchestrator may be embodied as or otherwise include any type of hardware software and or firmware capable of performing the functions described herein such as managing the lifecycle of the VNF instances e.g. instantiation scale out in performance measurements event correlation termination etc. via a VNF manager see managing global resources validating and authorizing resource requests of the NFV infrastructure on boarding of new VNF instances and or managing various policies and packages for the VNF instances. For example the NFV orchestrator may be configured to receive resource requests from a network operator that impacts a particular VNF. In use the NFV orchestrator manages any applicable processing storage and or network configuration adjustments based on the operator requests to bring the VNF into operation or into compliance with the resource requests. Once in operation the NFV orchestrator may monitor the VNF for capacity and utilization which may be adjusted by the NFV orchestrator as necessary.

The VIM may be embodied as or otherwise include any type of hardware software and or firmware capable of performing the functions described herein. The VIM is configured to control and manage compute storage and network resources e.g. physical and virtual of the NFV infrastructure such as within one operator s infrastructure sub domain. Additionally the VIM is configured to collect and forward various information related to the VIM such as performance measurements and events.

The NFV infrastructure may be embodied as or otherwise include any type of virtual and or physical processing and storage resources such as one or more servers or other computing nodes as well as virtualization software. For example the illustrative NFV infrastructure includes one or more computing nodes . The illustrative computing nodes include a first computing node which is designated as computing node and a second computing node which is designated as computing node N i.e. the Nth computing node of the computing nodes wherein N is a positive integer and designates one or more additional computing nodes .

Each of the computing nodes may be embodied as any type of computation or computer device capable of performing the functions described herein including without limitation a server e.g. stand alone rack mounted blade etc. a network appliance e.g. physical or virtual a high performance computing device a web appliance a distributed computing system a computer a processor based system a multiprocessor system a smartphone a tablet computer a laptop computer a notebook computer and or a mobile computing device. As shown in in an embodiment each of the computing nodes illustratively includes a processor an input output I O subsystem a memory a data storage device a secure clock and communication circuitry . Of course the computing node may include other or additional components such as those commonly found in a server e.g. various input output devices in other embodiments. Additionally in some embodiments one or more of the illustrative components may be incorporated in or otherwise form a portion of another component. For example the memory or portions thereof may be incorporated in the processor in some embodiments.

The processor may be embodied as any type of processor capable of performing the functions described herein. For example the processor may be embodied as a single or multi core processor s digital signal processor microcontroller or other processor or processing controlling circuit. The illustrative processor includes one or more trusted execution environment TEE supports or secure enclave supports which may be utilized by the computing node in establishing a trusted execution environment. It should be appreciated that in some embodiments the TEE supports provide hardware reinforced security for the trusted execution environment in which executing code may be measured verified or otherwise determined to be authentic. For example the TEE supports may be embodied as Intel Software Guard Extensions SGX technology. Although the TEE supports are illustratively shown in the processor it should be appreciated that in some embodiments one or more of the other components of the computing node may include the TEE supports . Further in some embodiments processor of the computing node may include a security engine e.g. security engine discussed below a manageability engine or a security co processor configured to utilize the TEE supports to establish a trusted execution environment.

The memory may be embodied as any type of volatile or non volatile memory or data storage capable of performing the functions described herein. In operation the memory may store various data and software used during operation of the computing node such as operating systems applications programs libraries and drivers. The memory is communicatively coupled to the processor via the I O subsystem which may be embodied as circuitry and or components to facilitate input output operations with the processor the memory and other components of the computing node . For example the I O subsystem may be embodied as or otherwise include memory controller hubs input output control hubs firmware devices communication links i.e. point to point links bus links wires cables light guides printed circuit board traces etc. and or other components and subsystems to facilitate the input output operations.

The illustrative memory includes a secure memory . In some embodiments the secure memory may be embodied as a secure partition of the memory whereas in other embodiments the secure memory may be embodied or included on a separate hardware component of the computing node . As described herein the secure memory may store various data provisioned to the computing node . For example the secure memory may store a secure key e.g. an attestation key a private direct anonymous attestation DAA key an Enhanced Privacy Identification EPID key or any other type of secure cryptographic key of the computing node that may be provisioned by a manufacturer of the chipset and or of a trusted execution environment. The secure memory may also store a password PIN or other unique identifier of the computing node provisioned therein for example by an original equipment manufacturer OEM of the computing node . Of course it should be appreciated that the secure memory may store various other data depending on the particular embodiment e.g. group names device identifiers whitelists expected PIN values etc. . In some embodiments the provisioned data may be stored in read only memory of the secure memory .

The illustrative memory additionally includes a basic input output system BIOS . The BIOS includes instructions e.g. a BIOS driver used during booting of the computing node to initialize the computing node during the boot process. In some embodiments the computing node may facilitate the orchestration of the VNF instances through a main platform firmware or pre boot firmware such as an extension of the Intel platform chipset or the platform BIOS based on the Unified Extensible Firmware Interface UEFI specification which has several versions published by the Unified EFI Forum.

The data storage device may be embodied as any type of device or devices configured for short term or long term storage of data such as for example memory devices and circuits memory cards hard disk drives solid state drives or other data storage devices. In use as described below the data storage device and or the memory may store security monitoring policies configuration policies or other similar data.

The secure clock may be embodied as any hardware component s or circuitry capable of providing a secure timing signal and otherwise performing the functions described herein. For example in the illustrative embodiment the secure clock may generate a timing signal that is separate and functionally independent from other clock sources of the computing node . Accordingly in such embodiments the secure clock may be immune or resistant to alteration by other entities such as for example software executing on the computing node . It should be appreciated that in some embodiments the secure clock may be embodied as standalone component s or circuitry whereas in other embodiments the secure clock may be integrated with or form a secure portion of another component e.g. the processor . For example in some embodiments the secure clock may be implemented via an on chip oscillator and or embodied as a secure clock of a manageability engine ME . It should further be appreciated that the secure clock may be synchronized to the secure clocks of the other computing nodes and granularity may be of the order that can distinguish distinct message timings.

The communication circuitry of the computing node may be embodied as any communication circuit device or collection thereof capable of enabling communications between the computing node and another computing node the NFV orchestrator the VIM the endpoint devices and or other connected network enabled computing node. The communication circuitry may be configured to use any one or more communication technology e.g. wired or wireless communications and associated protocols e.g. Ethernet Bluetooth Wi Fi WiMAX GSM LTE etc. to effect such communication. The illustrative communication circuitry includes a network interface card NIC and a switch . The NIC may be embodied as one or more add in boards daughtercards network interface cards controller chips chipsets or other devices that may be used by the computing node . For example the NIC may be embodied as an expansion card coupled to the I O subsystem over an expansion bus such as PCI Express. The switch may be embodied as any hardware component s or circuitry capable of performing network switch operations and otherwise performing the functions described herein such as an Ethernet switch chip a PCI Express switching chip etc.

As discussed above the computing node may also include a security engine which may be embodied as any hardware component s or circuitry capable of establishing a trusted execution environment TEE on the computing node . In particular the security engine may support executing code and or accessing data that is independent and secure from other code executed by the computing node . The security engine may be embodied as a Trusted Platform Module TPM a manageability engine ME an out of band processor or other security engine device or collection of devices e.g. a trusted zone TZ of an an ARM processor . In some embodiments the security engine may be embodied as a converged security and manageability engine CSME incorporated in a system on a chip SoC of the computing node .

Referring again to the illustrative NFV network architecture is communicatively coupled between the two endpoint devices . In the illustrative system the first endpoint device is designated as endpoint device and the second endpoint device is designated as endpoint device . However it should be appreciated that any number of endpoint devices may be connected through the NFV network architecture . The endpoint devices are communicatively coupled with the NFV network architecture via a network not shown using wired or wireless technology to form an end to end communication system in which the endpoint device can communicate with the endpoint device and vice versa. Accordingly the NFV network architecture can monitor and process the network communication traffic i.e. network packets transmitted between the endpoint devices .

The network via which the endpoint devices communicate may be embodied as any type of wired or wireless communication network including cellular networks such as Global System for Mobile Communications GSM or Long Term Evolution LTE telephony networks digital subscriber line DSL networks cable networks local or wide area networks global networks e.g. the Internet or any combination thereof. For example in some embodiments the network may be embodied as an NFV based Long Term Evolution LTE network having a vEPC architecture. It should be appreciated that the network may serve as a centralized network and in some embodiments may be communicatively coupled to another network e.g. the Internet . Accordingly the network may include a variety of network devices virtual and physical such as routers switches network hubs servers storage devices compute devices etc. as needed to facilitate communication between the endpoint devices and the NFV network architecture .

The endpoint devices may be embodied as any type of computation or computer device capable of performing the functions described herein including without limitation a smartphone a mobile computing device a tablet computer a laptop computer a notebook computer a computer a server e.g. stand alone rack mounted blade etc. a network appliance e.g. physical or virtual a web appliance a distributed computing system a processor based system and or a multiprocessor system. As shown in similar to the computing node of the illustrative endpoint device e.g. one of the endpoint devices of includes a processor an input output I O subsystem a memory a data storage device one or more peripheral devices and communication circuitry . As such further descriptions of the like components are not repeated herein for clarity of the description with the understanding that the description of the corresponding components provided above in regard to the computing node applies equally to the corresponding components of the endpoint devices .

Of course the endpoint devices may include other or additional components such as those commonly found in a mobile computing device capable of operating in a telecommunications infrastructure in other embodiments e.g. various input output devices . Additionally in some embodiments one or more of the illustrative components may be incorporated in or otherwise form a portion of another component. The peripheral devices may include any number of input output devices interface devices and or other peripheral devices. For example in some embodiments the peripheral devices may include a display touch screen graphics circuitry keyboard mouse speaker system and or other input output devices interface devices and or peripheral devices.

Referring now to an illustrative embodiment of the NFV network architecture of for securely bootstrapping a VNF of the NFV network architecture includes the NFV security services controller the NFV orchestrator the VIM and the NFV infrastructure of as well as a VNF manager . As described previously in use the NFV orchestrator manages the lifecycle of the VNF instances in the NFV infrastructure including instantiation scaling out in measuring performance correlating events termination etc. To do so the NFV orchestrator is configured to provide instructions to the VNF manager via a secure communication channel to manage the initialization and configuration i.e. scaling and deployment of the VNF instances of the NFV infrastructure see the VNF instances based on resources of the NFV infrastructure .

The VNF manager is further configured to perform overall coordination and adaptation for configuration and event reporting for the NFV infrastructure . The VNF manager is additionally configured to update and ensure the integrity of the VNF instances. To do so the VNF manager is configured to communicate with the VIM via a secure communication channel to determine the available physical resources on which to instantiate particular VNF instances. It should be appreciated that the VIM may make such a determination using any suitable techniques algorithms and or mechanisms. It should be further appreciated that in some embodiments a single VNF manger may be responsible for managing one or more VNF instances. In other words in some embodiments a VNF manager may be instantiated for each of the VNF instances.

The NFV network architecture additionally includes an operations support systems and business support systems OSS BSS that is communicatively coupled to the NFV orchestrator via a communication channel . The OSS BSS may be embodied as any type of computation or computing node capable of performing the functions described herein such as supporting various end to end telecommunication services in a telephone network. In some embodiments the OSS BSS may be configured to support management functions such as network inventory service provisioning network configuration and fault management as well as various business functions to support end to end telecommunication services that may be supported by the OSS BSS such as product management customer management revenue management order management etc.

The NFV security services controller is communicatively coupled to the NFV orchestrator via a secure communication channel . It should be appreciated that in some embodiments the NFV security services controller and the NFV orchestrator may be co located such as in the MANO architectural framework. Further the NFV security services controller is communicatively coupled to the VIM via a secure communication channel and the NFV orchestrator is communicatively coupled to the VIM via a secure communication channel . The secure communication channels of the NFV network architecture e.g. the secure communication channel the secure communication channel etc. may be protected with secure keys e.g. session keys and or other cryptographic keys used by the NFV security services controller to establish a root of trust RoT to establish the communication channels. In some embodiments the secure keys may be embodied as pairwise session keys that may be refreshed periodically. As such the NFV security services controller can be configured to act as an authentication server.

The NFV security services controller includes the VNF bootstrap service VBS that is configured to manage the VBS agents described further below of the VNF instances in the NFV infrastructure . In use the VBS manages the secure bootstrap process i.e. execution of the secure VNF bootstrap capture protocol of from a trust anchor perspective. Accordingly in some embodiments the NFV security services controller may additionally include a trusted execution environment TEE in which the VBS may reside. It should be appreciated however that in some embodiments the VBS may reside outside of the NFV security services controller such as on a dedicated VBS server. In such embodiments the VBS may still be run in a TEE.

Additionally the illustrative NFV security services controller interfaces with a security audit and forensic database . The security audit and forensic database is embodied as a secure database that includes security audit information relative to the various security monitoring components of the NFV network architecture . The security audit information may include any information related to the security of the NFV network architecture including for example configuration change logs network traces debug traces application traces etc. In the illustrative NFV network architecture the security audit and forensic database is additionally configured to interface with other network and security monitoring components of the NFV network architecture such as the VIM and the various NFV security services agents distributed across the NFV network architecture which will be discussed in further detail below. In some embodiments the various security monitoring components of the illustrative NFV network architecture that interface with the security audit and forensic database may use a secure clock e.g. the secure clock of to timestamp the logs received at the security audit and forensic database for secure storage.

As described previously in use the VIM controls and manages the allocation of virtual and physical i.e. hardware compute storage and network resources of the NFV infrastructure through messages securely transmitted via a secure communication channel . Additionally in some embodiments the VIM may be configured to collect and securely forward performance measurements and events of the NFV infrastructure compute storage and network resources e.g. physical and virtual to the security audit and forensic database . The illustrative VIM includes a VIM controller . The VIM controller is configured to function as a cloud operating system VNF install and activate service. For example in some embodiments the VIM controller may be embodied as a network policy controller or a networking service controller e.g. a software defined networking SDN controller or an OpenStack Neutron or as a compute service controller e.g. Openstack Nova . Additionally or alternatively in some embodiments the VIM controller may be embodied as an image service controller an identity service controller etc.

The NFV infrastructure includes all of the hardware and software components i.e. virtual compute storage and network resources virtualization software hardware compute storage and network resources etc. of the computing nodes from which the VNF instances may be deployed. It should be appreciated that the physical and or virtual components of the NFV infrastructure may span across different locations data centers geographies providers etc. Additionally it should be further appreciated that the network through which the components of the NFV infrastructure use to communicate and interface through may be considered to be included in the NFV infrastructure .

The illustrative NFV infrastructure includes a number of VNF instances and an operator infrastructure . The operator infrastructure includes one or more platforms the BIOS of and a hypervisor . The operator infrastructure may include multiple different network infrastructures for deploying the VNF instances . Accordingly an operator can use the multiple different network infrastructures to deploy on the NFV infrastructure i.e. a physical infrastructure or on another operators physical infrastructure as well as on a third party cloud hosting infrastructure and or at a customer s premises on customer equipment etc. For example deployment scenarios may include a monolithic operator operating in a private cloud model a network operator hosting virtual network operators in a hybrid cloud a hosted network operator hosted communications and application providers in a public cloud model managed network services on customer premises equipment etc.

The illustrative platforms include a first platform which is designated as platform and a second platform which is designated as platform N i.e. the Nth platform wherein N is a positive integer and designates one or more additional platforms . Each of the platforms includes the I O subsystem the NIC or the switch and the data storage of . Each of the platforms additionally includes an identifier e.g. a BIOS UEFI identifier unique to that platform which can be stored in a secure location e.g. the secure memory . The unique platform identifier may be a combination hash or globally unique identifier GUID of a hardware identifier an original equipment manufacturer OEM board identifier a BIOS UEFI stock keeping unit SKU identifier a field replaceable unit FRU identifier an operating system version identifier etc.

The illustrative platform additionally includes a TEE . The TEE may be established by a CSME an SGX an IE an ME or a physical virtual i.e. software based or firmware TPM e.g. a firmware TPM on the security engine that consists of a secure partition a security co processor or separate processor core etc. in a secure environment e.g. the TEE supports of the processor . Additionally the TEE can be securely provisioned in the platform through a secure provisioning procedure with the NFV security services controller . In some embodiments the secure provisioning procedure may be performed via a bootstrap with the NFV security services controller . Additionally or alternatively in some embodiments the secure provisioning procedure may be performed offline.

The hypervisor or virtual machine monitor VMM is configured to establish and or utilize various virtualized hardware resources e.g. virtual memory virtual operating systems virtual networking components etc. of the NFV infrastructure . Additionally the hypervisor may facilitate communication across the VNF instances . The illustrative hypervisor includes one or more cloud operating system agents that may be configured to bolster cloud service discovery service negotiation and or service composition. In some embodiments the hypervisor may additionally include a TEE that is configured to function similar to the TEE but at the virtual or hypervisor level of the NFV infrastructure .

The hypervisor in use runs the VNF instances generally via one or more VMs and or containers for running each of the VNF instances . In some embodiments the VNF instances may include a billing function a virtual switch vSwitch a virtual router vRouter a firewall a network address translation NAT a DPI an evolved packet core EPC a mobility management entity MME a packet data network gateway PGW a serving gateway SGW and or other virtual network function. In some embodiments a particular VNF instance may have multiple sub instances which could be executing on a single platform e.g. the platform or across different platforms e.g. the platform and the platform . In other words when virtualized network functions traditionally handled by physical hardware co located with a particular platform may be distributed as a number of VNF instances across one or more of the platforms .

Each of the VNF instances may include one or more VNF instances. For example in some embodiments any of the VNF instances may bundle multiple VNF instances of a service function chain. Further each of the VNF instances may include one or more VNF components VNFCs not shown . It should be appreciated that the VNF instances may be embodied as any suitable virtual network functions similarly the VNFCs may be embodied as any suitable VNF components. The VNFCs are processes and or instances that cooperate to deliver the functionality of one or more VNF instances . For example in some embodiments the VNFCs may be sub modules of the VNF instances . Similar to the VNF instances it should be appreciated that the VNFCs may be distributed across one or more platforms . It should be further appreciated that a particular VNF instance may be distributed across multiple platforms and still form a part of a VNF instance established on a one of the platforms . In such embodiments the VNF instances and or the VNFCs may be executing on the same platform e.g. the platform or the platform or within the same data center but on different platforms . Further in some embodiments the VNF instances and or the VNFCs may be executing across different data centers. Similar to the hypervisor facilitating communication across the VNF instances the hypervisor may additionally facilitate communications across the VNFCs.

The illustrative VNF instances include a first VNF instance which is designated as VNF a second VNF instance which is designated as VNF and a third VNF instance which is designated as VNF N i.e. the Nth VNF wherein N is a positive integer and designates one or more additional VNF instances . Each of the VNF instances are configured to perform as a virtual networking device e.g. a vSwitch a vRouter a firewall a NAT a DPI an EPC an MME a PGW a SGW etc. . In some embodiments one or more VNF instances may comprise a service function chain that is capable of performing a particular virtual function or service. One or more of the VNF instances may include a packet processor not shown to process the network traffic at the user data plane such as the Intel Data Plane Development Kit Intel DPDK .

Similar to the identifier unique to each of the platforms each of the VNF instances includes a unique identifier. The unique VNF instance identifier of the VNF instance may be a combination hash or a GUID of an image of the VNF instance a VNF descriptor identifier a VNF command line identifier a VNF OEM identifier a VNF vendor identifier and or VNFC identifiers. Accordingly the unique VNF instance identifier may be used by the NFV security services controller the VIM and or the VNF manager when securely communicating with the VNF instances . For example the VIM may initiate the spinning up a VNF instance at the NFV infrastructure via a secure communication channel using the unique VNF instance identifier. Similarly the VNF manager may use the unique VNF instance identifier when setting up a management session with a particular VNF instance via a secure communication channel .

Each of the illustrative VNF instances includes a VBS agent i.e. a VBS agent of the VNF a VBS agent of the VNF and a VBS agent of the VNF N to securely bootstrap each of the VNF instances to enable the VNF instances to be provisioned securely such as with a root credential. Further each of the illustrative VNF instances is in secure network communication with the VBS of the NFV security services controller via a secure communication channel as well as the operator infrastructure i.e. via secure communication channels .

As will be described in further detail below each VBS agent is configured to perform a secure bootstrap process i.e. the execution of the secure VNF bootstrap capture protocol of . To do so each VBS agent is configured to instantiate a previously spun up VNF instance create a public private key pair i.e. a public key and a private key to be used for security in communicating with the NFV security services controller when running the secure bootstrap process and run the secure bootstrap process. It should be appreciated that in some embodiments the NFV infrastructure may additionally include other VNF instances that do not include a VBS agent.

As described previously the VNF instances may bundle more than one VNF such as may be required in a service function chain. In such embodiments the secure bootstrap process can be used to bootstrap the entire service function chain. Additionally in embodiments wherein the VNF instances are factored along the control plane and the data plane the secure bootstrap process can be utilized in a one to one one to many or many to many control plane and data plane VNF instances.

Referring now to in use the NFV security services controller establishes an environment during operation. The illustrative environment of the NFV security services controller includes a secure communication module and the VNF bootstrapping service of . Additionally the VNF bootstrapping service includes a VBS agent communication module a VBS agent registration module .

The various modules of the environment may be embodied as hardware firmware software or a combination thereof. For example the various modules logic and other components of the environment may form a portion of or otherwise be established by hardware components of the NFV security services controller . As such in some embodiments any one or more of the modules of the environment may be embodied as a circuit or collection of electrical devices e.g. a secure communication circuit a VBS agent communication circuit and a VBS agent registration circuit etc. . Additionally or alternatively in some embodiments one or more of the illustrative modules may form a portion of another module and or one or more of the illustrative modules and or submodules which may be embodied as standalone or independent modules.

The secure communication module is configured to facilitate secure communications i.e. messages between the NFV security services controller and the various network processing components of the NFV network architecture . To do so the secure communication module is configured to secure communication paths between the NFV security services controller and the various network processing components of the NFV network architecture e.g. the VIM the VNF manager etc. . Accordingly in some embodiments the secure communication module may perform various key management functions cryptographic functions secure communication channel management and or other security functions. For example the secure communication module can be configured to secure the communication channel between the NFV security services controller and the VNF manager of e.g. the secure communication channel using pairwise session keys that are refreshed periodically to ensure the security of communications between the NFV security services controller and the VNF manager .

The VBS agent communication module similar to the secure communication module is configured to facilitate and manage secure communications i.e. messages between the VBS and the VBS agents of the VNF instances of the NFV infrastructure . The VBS agent registration module is configured to register the VBS agents upon execution of the secure bootstrap process. To do so the VBS agent registration module includes a VBS agent verification module and a VBS agent security credential module .

The VBS agent verification module is configured to verify secure bootstrap parameters of the VBS agent e.g. values and hashes . To do so the VBS agent verification module is be configured to verify an authenticity of a security quote received from a VBS agent during execution of the VBS capture protocol which is described in further detail below. Additionally or alternatively in some embodiments the VBS agent verification module may be configured to perform a whitelist check to verify a configuration of the VBS based on one or more provisioning parameters received by the VBS or the security controller during a secure provisioning of the VBS . In some embodiments the VBS agent verification module may be additionally or alternatively configured to detect a liveness of the messages i.e. that the messages have not expired such as in a replay attack between the VBS agent and the VBS using a nonce session which is also described further below. Additionally or alternatively in some embodiments the VBS agent verification module may be configured to verify an authenticity of a public key of the VNF instance of the VBS agent received from the VBS agent during execution of the VBS capture protocol.

The VBS agent security credential module is configured to provide a valid security credential e.g. a certificate a signed hash result etc. for the VBS agent being registered during execution of the VBS capture protocol. To do so the VBS agent security credential module may be configured to create or retrieve a valid security credential in response to the VBS agent verification module having verified the authenticity of the security quote and the public key of the VNF instance as well as having validated the liveness of the messages i.e. that the messages are not dead such as in a replay attack .

Referring now to in use each VNF instance e.g. VNF instances of establishes an environment during operation. The illustrative environment of the corresponding VNF instance includes a secure communication module and a VBS agent e.g. one of the VBS agents of . The illustrative VBS agent includes a VBS communication module and a VBS capture protocol execution module of the VBS agent. The various modules of the environment may be embodied as hardware firmware software or a combination thereof. For example the various modules logic and other components of the environment may form a portion of or otherwise be established by hardware components of the NFV security services agent. As such in some embodiments any one or more of the modules of the environment may be embodied as a circuit or collection of electrical devices e.g. a secure communication circuit VBS communication circuit and a VBS capture protocol execution circuit etc. . Additionally or alternatively in some embodiments one or more of the illustrative modules may form a portion of another module and or one or more of the illustrative modules and or submodules may be embodied as a standalone or independent module.

The secure communication module is configured to facilitate the secure transmission of data i.e. messages to and from the VBS agent. The VBS communication module similar to the secure communication module is configured to facilitate and manage secure communications e.g. registration data verification data configuration data etc. between the VBS agent and the VBS of the NFV security services controller such as during the secure bootstrap process. The VBS capture protocol execution module is configured to execute the secure VNF bootstrap capture protocol which is described in . To do so the VBS capture protocol execution module is configured to create a public private key pair i.e. a public key and a private key and request a security quote e.g. an attestation quote or a digitally signed value from which a TEE can be verified or authenticated from a TEE of a platform on which the VNF instance is instantiated e.g. the TEE of the platform of . Accordingly the TEE can attest to the identity and configuration of the VBS agent e.g. running correct VBS agent configured by the correct launch parameters the VBS agent generated the public key being requested. Additionally remote attestation can be implemented to detect possible security threats such as network packet tampering network packet corruption malicious content within network packets etc.

Referring now to in use a VNF instance e.g. one of the VNF instances of may execute a method for initializing a secure VNF bootstrap. The method begins at block in which the VNF instance determines whether an instantiation trigger was received such as from the OSS BSS of . It should be appreciated that in some embodiments the instantiation may be automatically performed subsequent to the VNF instance being created. If not the method loops back to block to continue to wait for the instantiation trigger to be received. If the instantiation trigger was received the method advances to block . At block the VNF instance instantiates based on a set of startup parameters i.e. startup requirements . It should be appreciated that the instantiated VNF instance is not active i.e. the VNF instance is not processing network traffic .

At block the VNF instance runs the secure VNF bootstrap capture protocol which is described in further detail in . At block the VNF instance determines whether an activation signal was received such as from the NFV security services controller or the VNF manager that indicates to activate the VNF instance i.e. to start processing network traffic . If not the method loops back to block to continue to wait for the activation signal to be received. If the activation signal was received the method advances to block . At block the VNF instance retrieves startup policies and configuration information specific to the operation to be performed by the VNF instance.

At block the VNF instance securely registers as an operational VNF instance. To do so the VNF instance securely transmits a registration request message to the VBS . At block the VNF instance determines whether a registration confirmation was received in response to the registration request message transmitted at block . If not the method loops back to block to continue to wait for the registration confirmation. If the registration confirmation was received the method advances to block . At block the VNF instance identifies a corresponding VNF manager e.g. the VNF manager such as by an IP address of the VNF manager which may be received with the registration confirmation. It should be appreciated that in some embodiments multiple VNF managers may be present in the NFV network architecture . Accordingly in such embodiments the VNF manager that corresponds to the VNF instance may be identified by a unique identifier associated with that VNF manager which may be provided to the VNF instance by the NFV security services controller . As such in such embodiments the VNF instance may request the unique identifier from the NFV security services controller before advancing.

At block the VNF instance connects to the identified VNF manager. Accordingly the identified VNF manager can manage the lifecycle of the VNF instance e.g. instantiate update query scale terminate etc. . In some embodiments at block the VNF instance enables VNF licensing and enforcement. Accordingly the licenses assigned to each of the VNF instances can be tracked and enforced e.g. by VNF vendors concerned with revenues generated by the VNF instances . To do so in some embodiments VNF license information e.g. a license number the unique VNF instance identifier etc. may be transmitted to the VNF manager the NFV security services controller and or a dedicated license management server. At block the VNF instance performs the operation i.e. service or function to which the VNF instance has been instantiated for.

Referring now to an embodiment of a communication flow for securely bootstrapping a VNF instance e.g. one of the VNF instances of of the NFV network architecture . The illustrative communication flow includes the NFV orchestrator the VIM controller of the VIM the cloud operating system agent of the hypervisor the hypervisor of NFV infrastructure one of the VBS agents of one of the VNF instances e.g. the VBS agent the VBS agent or the VBS agent the TEE of the platform the VBS of the NFV security services controller and the VNF manager . The illustrative communication flow additionally includes a number of message flows some of which may be executed separately or together depending on the embodiment.

At message flow the NFV orchestrator securely transmits a VNF instantiation trigger received from the OSS BSS to the VIM controller . The VNF instantiation trigger can include signatures of a signed VNF image and a signed VNF descriptor. The signed VNF descriptor is a data structure that describes requirements and or necessary elements of the VNF image including startup parameters i.e. startup requirements . At message flow the TEE securely provisions the VBS . To do so the TEE provides provisioning parameters and an identifier that is unique to the platform on which the VNF is to be instantiated i.e. the unique platform identifier to the security controller on which the VBS resides. Accordingly in some embodiments the TEE may be used to securely provision the VBS . The provisioning parameters include a public key of the VBS and an identifier of the VBS such as an IP address a DNS etc. As described previously the unique platform identifier may be a combination hash or GUID of a hardware identifier an OEM board identifier a BIOS UEFI SKU identifier a FRU identifier an operating system version identifier etc. In some embodiments the TEE may securely provision the VBS using out of band B communication technologies to transmit the public key of the VBS and the VBS identifier as well as any other provisioning items that may be needed to securely provision the VBS .

At message flow the VIM controller verifies signatures of the information received with the VNF instantiation trigger such as the signed VNF descriptor and the signed VNF image. In some embodiments the signed VNF image may include more than one signed VNF images. In such embodiments the more than one signed VNF images may be stitched and signed again as a group of VNF images or delivered as separate signed VNF images. Accordingly each signature associated with the signed VNF image is verified at the VIM controller .

At message flow the VIM controller securely transmits a command to spin up a VNF instance based on the VNF image and descriptor. The spin up command additionally includes a set of VBS parameters i.e. details of the VBS which may include the public key of the VBS the IP address of the VBS a domain name server DNS of the VBS a fully qualified domain name FQDN of the VBS a uniform resource locator URL of the VBS and or the like.

At message flow the hypervisor spins up a VNF instance e.g. one of the VNF instances based on the signed VNF image and the signed VNF descriptor. To do so the hypervisor verifies the VNF signatures e.g. signatures of the signed VNF image the signed VNF descriptor etc. at message flow and creates a VNF instance at message flow . At message flow the hypervisor registers with the TEE . To do so the hypervisor securely transmits an identifier unique to the created VNF instance. The unique VNF instance identifier may be a combination hash or a GUID of a VNF image instance identifier a VNF descriptor identifier a composition of VNFC identifiers a VNF command line identifier and VNF OEM identifier a VNF vendor identifier etc. Additionally the hypervisor may securely transmit configuration information of the VNF instance.

At message flow the VBS agent creates a public private key pair i.e. a public key and a private key for the VNF instance. At message flow the VBS agent retrieves a security quote from the TEE . Accordingly remote attestation can be implemented to detect possible security threats such as network packet tampering network packet corruption malicious content within network packets etc. To do so the VBS agent may securely transmit VNF identification information such as the unique platform identifier the unique VNF instance identifier etc. to the TEE .

At message flow the VBS performs a secure whitelisting with the VNF manager . In other words the VBS adds the VNF instance to the list or register of recognized i.e. privileged or otherwise approved VBS agents to be managed by the VNF manager . To do so the VBS may securely transmit VNF identification information e.g. the unique VNF instance identifier to the VNF manager and one or more VBS parameters e.g. the IP address of the VBS the DNS of the VBS etc. .

At message flow the VBS agent executes the secure VNF bootstrap capture protocol which is shown in . At message flow the VBS agent activates the VNF instance. In other words network traffic processing is enabled at the VNF instance. At message flow the VBS securely transmits a VNF activated message including the unique VNF instance identifier to the VNF manager to indicate that the VNF instance is now active. Similarly at message flow the VBS agent securely transmits a VNF activated message to the VNF manager to indicate that the VNF instance has been activated. Accordingly the VNF activated message includes the unique VNF instance identifier.

Referring now to in use a VBS agent e.g. the VBS agent the VBS agent or the VBS agent of may execute a method for executing a secure VNF bootstrap capture protocol. The method begins at block in which the VBS agent securely transmits a start message to the VBS . The start message may be embodied as any type of message that informs the VBS that the respective VBS agent has initiated. At block the VBS agent securely transmits the start message with a nonce e.g. a random challenge issued by the VBS agent to detect replays at the VBS generated by the VBS agent to be used for secure authentication. At block the VBS agent securely receives a start response message from the VBS . At block the VBS agent receives the nonce transmitted with the start message at block as part of the start response message. Additionally at block the VBS agent receives a nonce generated by the VBS as part of the start response message. Accordingly a liveness detection may be performed on the start response message to prove liveness of the response. Further at block the VBS agent receives the start response message signed by the VBS using a private key of the VBS .

At block the VBS agent securely transmits a registration request message to the VBS . To do so at block the VBS agent securely transmits a security quote signed by the TEE using a private key of the TEE as part of the registration request message. The security quote the calculation of which is described in further detail below is a digitally signed value from which a receiver of the security quote can authenticate the transmitter of the digitally signed value. Accordingly remote attestation can be implemented to detect possible security threats such as network packet tampering network packet corruption malicious content within network packets etc. Additionally at block the VBS agent securely transmits a security credential request signed by the VBS agent using a private key of the VNF to request a security credential e.g. a certificate a signed hash result etc. as part of the registration request message. In some embodiments the security credential request may include each of the nonces generated at the VBS and the VBS agent and a public key of the VNF instance. Additionally or alternatively in some embodiments the certification request may also include a quote signed by the TEE using the private key of the TEE .

At block the VBS agent securely receives a registration request message response from the VBS . At block the registration request message response received by the VBS agent includes a valid security credential. Additionally at block the registration request message response received by the VBS agent includes an IP address of a corresponding VNF manager e.g. the VNF manager of . At block the registration request message response received by the VBS agent is signed by the VBS using the private key of the VBS .

Referring now to an embodiment of a communication flow for executing a secure VNF bootstrap capture protocol by a VBS agent e.g. the VBS agent the VBS agent or the VBS agent of . The illustrative communication flow includes one of the VBS agents of one of the VNF instances e.g. the TEE of the platform and the VBS of the NFV security services controller . The illustrative communication flow additionally includes a number of message flows some of which may be executed separately or together depending on the embodiment.

At message flow the VBS agent securely transmits a start message that includes a nonce e.g. an arbitrary number for authentication to the VBS . At message flow the VBS securely transmits a start response message to the VBS agent that includes the nonce from the VBS agent and another nonce e.g. another arbitrary number for authentication . Further the start response message is signed by the VBS using a private key of the VBS . At message flow the VBS agent securely transmits a registration request message to the VBS . The registration request message includes a security quote see signed by the TEE using the private key signed by the TEE . The registration request message additionally includes a security credential request that includes the both the nonce from the VBS agent and the nonce from the VBS as well as the public key of the VNF instance on which the VBS agent is initialized. Further the security credential request is signed by the VBS agent using the private key of the VNF instance. The security quote calculated and signed by the TEE is the result of a TEE quoting operation which is described in further detail in .

At message flow the VBS verifies the security quote signed by the TEE that was received from the VBS agent. At message flow the VBS performs a series of whitelist checks to verify that the VBS is configured correctly. Accordingly in some embodiments the VBS may perform the whitelist checks by verifying the provisioning parameters sent by the TEE that were used to securely provision the VBS see message flow . Additionally or alternatively in some embodiments the VBS may perform the whitelist checks by verifying that the unique platform identifier received is valid with respect to a security policy e.g. a secure boot policy a TPM policy a versioning policy etc. of the platform on which the TEE that provisioned the VBS was instantiated. Additionally in some embodiments VBS may perform the whitelist checks b checking the validity of additional policies such as for license validity checks e.g. based on the unique VNF instance identifier . Further in some embodiments the VBS may additionally or alternatively verify whether the VBS agent is approved to communicate with the VBS as part of the whitelist checks such as by verifying that the VBS agent has been registered with the VBS .

At message flow the VBS verifies the security credential request by verifying the nonce session and the public key of the VNF instance received from the VBS agent. To do so the VBS performs a liveness check to detect any delayed or replay attacks using session nonces i.e. the nonce generated by the VBS agent and the nonce generated by the VBS . The session nonces can be random numbers used to detect attacks the values of which are stored associated with the flow corresponding to the messages transmitted therebetween. Accordingly the session nonces can be check for each flow to detect a liveness i.e. that the session has not expired of the communicated messages as well as to distinguish between multiple flows that the VBS may be executing.

At message flow the VBS creates or retrieves a valid security credential e.g. a security certificate a signed hash result etc. upon verification of the security credential request. It should be appreciated that the message flows through may be performed in any order however in some embodiments a local security policy may be used by the VBS that provides a timeline for session expiration. Accordingly the order of the performance of the message flows through may be based on the number of sessions currently active or being buffered by the VBS computing resources available to the VBS session time expiration constraints etc.

At message flow the VBS securely transmits a registration response message to the VBS agent. The registration response message includes the nonce generated by the VBS agent the nonce generated by the VBS a valid security credential an identifier of the VNF manager e.g. an IP address a DNS a FQDN a URL etc. responsible for managing the VBS agent a set of whitelisted VNF managers a set of authorized VNFCs if applicable the unique VNF instance identifier and one or more policies. The one or more policies may include any type of policy that provides direction or instruction to the VBS agent on how to perform a particular service or function such as a security monitoring policy a networking policy a network packet processing policy etc. Additionally the registration request message response is signed by the VBS using the private key of the VBS . It should be appreciated that in some embodiments the registration response message may include additional and or alternative parameters.

It should be appreciated that in some embodiments the security quote may be extensible for instance to include additional and or alternative information to support additional components of the platform on which the VNF instance is instantiated. For example the additional information may include a platform capabilities mask a platform NIC and or switch mask service function chaining SFC policies for a platform a list of security credential identifiers etc. Accordingly unlike traditional operator cloud networks using static images in unsecure and non scalable environments the dynamic nature of the secure VNF bootstrap capture protocol may reduce the amount of or need for static configuration and security options which may allow for more dynamic scaling out in of virtualized operator cloud networks.

Referring now to in use a trusted execution environment e.g. the TEE of may execute a method for performing a TEE quoting operation for a VBS agent e.g. the VBS agent the VBS agent or the VBS agent of . The method begins at block in which the TEE applies a hash function to a set of launch parameters of the VBS agent to generate a hash result. The launch parameters may include any parameters that may be used to launch an instance of the VNF and or the VBS agent. To do so at block the TEE applies the hash function to an image of a VNF instance a descriptor of the VNF instance an identifier unique to the VNF instance i.e. a unique VNF instance identifier and or an identifier that is unique to a platform i.e. a unique platform identifier on which the VNF instance is instantiated to generate a hash result. Accordingly the TEE can apply the first hash function when it loads the VNF since all of the VNF launch parameters are known by the TEE in order to launch the VNF. In other words the TEE can apply the first hash function without receiving any inputs from the VBS agent.

At block the TEE applies a hash function to a set of VBS identifiers of the VBS and one or more of the VBS agent launch parameters to generate a second hash result. The set of VBS identifiers may include any information that may be used to identify the VBS such as a public key of the VBS an IP address of the VBS a DNS of the VBS a FQDN of the VBS a URL of the VBS and or the like. To do so at block the TEE applies the hash function to the public key of the VBS the IP address of the VBS the unique VNF instance identifier the unique platform identifier. In some embodiments another hash function may be applied to the set of VBS identifiers of the VBS prior to applying the hash function at block . Additionally or alternatively in some embodiments the hash result of the hash function applied at block may additionally be included as an input in the hash function applied at block .

At block the TEE applies a hash function to a public key of the VNF instance to generate a hash result. It should be appreciated that in some embodiments the hash result of the hash function applied at block may additionally be included as an input in the hash function applied at block . Similar to the first hash function the TEE can apply the hash function of block without having received any input from the VBS agent. At block the TEE applies a hash function to all of the hash results of blocks and to generate a final hash result. At block the TEE signs the final hash result using a private key of the TEE to generate the security quote.

Illustrative examples of the technologies disclosed herein are provided below. An embodiment of the technologies may include any one or more and any combination of the examples described below.

Example 1 includes a virtual network function VNF bootstrap service VBS agent of a VNF instance for bootstrapping virtual network functions in a network functions virtualization NFV network architecture the VBS agent comprising a VBS capture protocol execution module to i transmit a start message to a VBS of the NFV network architecture wherein the VBS is communicatively coupled to the VBS agent and wherein the start message provides an indication that the VBS agent is instantiated ii receive a start response message from the VBS in response to transmission of the start message iii transmit a registration request message to the VBS in response to receiving the start response message wherein the registration request message includes a security quote usable to authenticate the VBS agent as the transmitter of the registration request message and a security credential request to request a security credential from the VBS and iv receive a registration response message from the VBS wherein the registration response message includes a security credential that indicates that the security quote and the security credential request have been validated by the VBS.

Example 2 includes the subject matter of Example 1 and wherein the start message includes a first nonce the start response message is signed by the VBS using a private key of the VBS and includes the first nonce and a second nonce generated by the VBS the security credential request is signed by the VNF instance using a private key of the VNF instance and includes the first nonce the second nonce and a public key of the VNF instance the registration response message is signed by the VBS using a private key of the VBS and further includes the first nonce the second nonce an identifier of a VNF manager responsible for managing the VBS agent a set of VNF managers that are whitelisted a set of VNF components VNFCs authorized by the VBS a unique VNF instance identifier and one or more policies and the policy includes instructions usable by the VBS agent to perform a particular function.

Example 3 includes the subject matter of any of Examples 1 and 2 and wherein the VBS capture protocol execution module is further to retrieve the security quote signed by a trusted execution environment TEE using a private key of the TEE wherein the TEE is located on a platform on which the VNF instance is instantiated.

Example 4 includes the subject matter of any of Examples 1 3 and wherein the VBS capture protocol execution module is further to i receive an instantiation trigger from an NFV orchestrator of the NFV network architecture and ii initialize the VBS agent wherein to transmit the start message comprises to transmit the start message in response to receiving the instantiation trigger.

Example 5 includes the subject matter of any of Examples 1 4 and wherein to initialize the VBS agent comprises to i create a public private key pair of the VNF instance wherein the public private key pair of the VNF instance includes a public key and a private key and ii retrieve the security quote from a trusted execution environment TEE of a platform on which the VNF instance was created wherein the security quote is signed by the TEE using a private key of the TEE

Example 6 includes the subject matter of any of Examples 1 5 and wherein the VBS capture protocol execution module is further to i generate the security credential request and ii sign the security credential request using the private key of the VNF instance in response to having received the start response message from the VBS.

Example 7 includes the subject matter of any of Examples 1 6 and wherein the VBS capture protocol execution module is further to activate the VNF instance to actively process network traffic received by the VNF instance in response to having received the security credential.

Example 8 includes the subject matter of any of Examples 1 7 and wherein the VBS capture protocol execution module is further to transmit an indication to a VNF manager of the NFV network architecture that indicates to the VNF manager that i the VNF instance is active and ii the configuration of the VNF instance is to be managed by the VNF manager wherein the indication includes a VNF instance identifier that is unique to the VNF instance and usable to add the VNF instance to a whitelist of authorized VNF instances at the VNF manager.

Example 9 includes the subject matter of any of Examples 1 8 and wherein to receive the registration response message from the VBS further comprises to receive an identifier of a VNF manager that is communicatively coupled to the VBS agent.

Example 10 includes the subject matter of any of Examples 1 9 and wherein to receive the identifier of the VNF manager comprises to receive at least one of an internet protocol IP address a domain name server DNS a fully qualified domain name FQDN a uniform resource locator URL .

Example 11 includes the subject matter of any of Examples 1 10 and wherein the VBS capture protocol execution module is further to connect to the VNF manager using the identifier of the VNF manager in response to receiving the identifier of the VNF manager.

Example 12 includes the subject matter of any of Examples 1 11 and wherein the VBS capture protocol execution module is further to transmit VNF license information to the VNF manager in response to having received the identifier of the VNF manager wherein the VNF license information includes information usable to track usage of a license associated with the VNF instance.

Example 13 includes a method for bootstrapping virtual network functions in a network functions virtualization NFV network architecture the method comprising transmitting by a VNF bootstrap service VBS agent of a VNF instance of the NFV network architecture a start message to a VBS of the NFV network architecture communicatively coupled to the VBS agent wherein the start message provides an indication that the VBS agent is instantiated receiving by the VBS agent and in response to the start message a start response message from the VBS transmitting by the VBS agent a registration request message to the VBS in response to receiving the start response message wherein the registration request message includes a security quote usable to authenticate the VBS agent as the transmitter of the registration request message and a security credential request to request a security credential from the VBS and receiving by the VBS agent a registration response message from the VBS wherein the registration response message includes a security credential that indicates each of the security quote and the security credential request have been validated by the VBS.

Example 14 includes the subject matter of Example 13 and wherein transmitting the start message comprises transmitting a first nonce receiving the start response message comprises receiving the start response message signed by the VBS using a private key of the VBS and includes the first nonce and a second nonce generated by the VBS transmitting the security credential request comprises transmitting the security credential request signed by the VNF instance using a private key of the VNF instance and includes the first nonce the second nonce and a public key of the VNF instance receiving the registration response message comprises receiving the registration response message signed by the VBS using a private key of the VBS and further includes the first nonce the second nonce an identifier of a VNF manager responsible for managing the VBS agent a set of VNF managers that are whitelisted a set of VNF components VNFCs authorized by the VBS a unique VNF instance identifier and one or more policies and the policy includes instructions usable by the VBS agent to perform a particular function.

Example 15 includes the subject matter of any of Examples 13 and 14 and further including retrieving by the VBS agent the security quote signed by a trusted execution environment TEE using a private key of the TEE wherein the TEE is located on a platform on which the VNF instance is instantiated.

Example 16 includes the subject matter of any of Examples 13 15 and further including receiving by the VBS agent an instantiation trigger from an NFV orchestrator of the NFV network architecture and initializing the VBS agent wherein transmitting the start message comprises transmitting the start message in response to receiving the instantiation trigger.

Example 17 includes the subject matter of any of Examples 13 16 and wherein initializing the VBS agent comprises i creating a public private key pair wherein the public private key pair of the VNF instance includes a public key and a private key and ii retrieving the security quote from a trusted execution environment TEE of a platform on which the VNF instance was created wherein the security quote is signed by the TEE using a private key of the TEE.

Example 18 includes the subject matter of any of Examples 13 17 and further including generating the security credential request and signing the security credential request using a private key of the VNF instance in response to having received the start response message from the VBS.

Example 19 includes the subject matter of any of Examples 13 18 and further including activating the VNF instance to actively process network traffic received by the VNF instance in response to receiving the security credential.

Example 20 includes the subject matter of any of Examples 13 19 and further including transmitting an indication to a VNF manager of the NFV network architecture that indicates to the VNF manager that i the VNF instance is active and ii the configuration of the VNF instance is to be managed by the VNF manager wherein the indication includes a VNF instance identifier that is unique to the VNF instance and usable to add the VNF instance to a whitelist of authorized VNF instances at the VNF manager.

Example 21 includes the subject matter of any of Examples 13 20 and wherein receiving the registration response message from the VBS further comprises receiving an identifier of a VNF manager that is communicatively coupled to the VBS agent.

Example 22 includes the subject matter of any of Examples 13 21 and wherein receiving the identifier of the VNF manager comprises receiving at least one of an internet protocol IP address a domain name server DNS a fully qualified domain name FQDN a uniform resource locator URL .

Example 23 includes the subject matter of any of Examples 13 22 and further including connecting to the VNF manager using the identifier of the VNF manager in response to receiving the identifier of the VNF manager.

Example 24 includes the subject matter of any of Examples 13 23 and further including transmitting VNF license information to the VNF manager in response to having received the identifier of the VNF manager wherein the VNF license information includes information usable to track usage of a license associated with the VNF instance.

Example 25 includes a computing device comprising a processor and a memory having stored therein a plurality of instructions that when executed by the processor cause the computing device to perform the method of any of claims .

Example 26 includes one or more machine readable storage media comprising a plurality of instructions stored thereon that in response to being executed result in a computing device performing the method of any of claims .

Example 27 includes a virtual network function VNF bootstrap service VBS agent of a VNF instance of a network functions virtualization NFV network architecture for bootstrapping virtual network functions in the NFV network architecture the method comprising means for transmitting a start message to a VBS of the NFV network architecture communicatively coupled to the VBS agent wherein the start message provides an indication that the VBS agent is instantiated means for receiving in response to the start message a start response message from the VBS means for transmitting a registration request message to the VBS in response to receiving the start response message wherein the registration request message includes a security quote usable to authenticate the VBS agent as the transmitter of the registration request message and a security credential request to request a security credential from the VBS and means for receiving a registration response message from the VBS wherein the registration response message includes a security credential that indicates each of the security quote and the security credential request have been validated by the VBS.

Example 28 includes the subject matter of Example 27 and wherein the means for transmitting the start message comprises means for transmitting a first nonce the means for receiving the start response message comprises means for receiving the start response message signed by the VBS using a private key of the VBS and includes the first nonce and a second nonce generated by the VBS the means for transmitting the security credential request comprises means for transmitting the security credential request signed by the VNF instance using a private key of the VNF instance and includes the first nonce the second nonce and a public key of the VNF instance the means for receiving the registration response message comprises means for receiving the registration response message signed by the VBS using a private key of the VBS and further includes the first nonce the second nonce an identifier of a VNF manager responsible for managing the VBS agent a set of VNF managers that are whitelisted a set of VNF components VNFCs authorized by the VBS a unique VNF instance identifier and one or more policies and the policy includes instructions usable by the VBS agent to perform a particular function.

Example 29 includes the subject matter of Examples 27 and 28 and wherein the means for receiving the registration response message from the VBS further comprises means for receiving an identifier of a VNF manager that is communicatively coupled to the VBS agent.

Example 30 includes the subject matter of Examples 27 29 and further including means for connecting to the VNF manager using the identifier of the VNF manager in response to receiving the identifier of the VNF manager.

Example 31 includes the subject matter of Examples 27 30 and further including means for transmitting VNF license information to the VNF manager in response to having received the identifier of the VNF manager wherein the VNF license information includes information usable to track usage of a license associated with the VNF instance.

Example 32 includes a virtual network function VNF bootstrap service VBS of a network functions virtualization NFV network architecture method for bootstrapping virtual network functions in the NFV network architecture the VBS comprising a VBS agent communication module to i receive a start message from a VBS agent of a VNF instance of the NFV network architecture that is communicatively coupled to the VBS wherein the start message provides an indication that the VBS agent has been instantiated ii transmit a start response message to the VBS agent in response to receiving the start message iii receive a registration request message from the VBS agent in response to transmitting the start response message wherein the registration request message includes a security quote and a security credential request to request a security credential from the VBS iv validate in response to having received the security credential request of the registration request message the security quote to authenticate the VBS agent as the transmitter of the registration request message and v transmit in response to validating the security quote a registration response message to the VBS agent wherein the registration response message includes a security credential that indicates the security quote has been validated by the VBS.

Example 33 includes the subject matter of Example 32 to receive the start message comprises to receive a first nonce to transmit the start response message comprises to transmit the start response message signed by the VBS using a private key of the VBS wherein the start response message includes the first nonce and a second nonce generated by the VBS and to receive the security credential request comprises to receive the security credential request signed by the VNF instance using a private key of the VNF instance wherein the security credential request includes the first nonce the second nonce and a public key of the VNF instance.

Example 34 includes the subject matter of Examples 32 and 33 wherein to transmit the registration response message comprises to transmit the registration response message signed by the VBS using a private key of the VBS wherein the registration response message further includes the first nonce the second nonce an identifier of a VNF manager responsible for managing the VBS agent a set of VNF managers that are whitelisted a set of VNF components VNFCs authorized by the VBS a unique VNF instance identifier and one or more policies and wherein the one or more policies include instructions usable by the VBS agent to perform a particular function.

Example 35 includes the subject matter of Examples 32 34 and wherein the VBS agent communication module is further to receive a set of provisioning parameters from a trusted execution environment TEE of a platform on which the VNF instance was created wherein the provisioning parameters are usable to securely provision the VBS and include i a platform identifier unique to the platform on which the VNF instance was created ii a public key of the VBS and iii a unique identifier of the VBS and provision the VBS based on the provisioning parameters.

Example 36 includes the subject matter of Examples 32 35 and further including a VBS agent verification module to i verify in response to receiving the registration request message an authenticity of the security quote based on a private key of the TEE wherein the security quote was signed using the private key of the TEE ii perform a whitelist check to verify a configuration of the VBS iii detect a liveness of the registration request message using the first and second nonce to ensure the first and second nonce have not expired and iv verify an authenticity of the public key of the VNF instance.

Example 37 includes the subject matter of Examples 32 36 and wherein to perform the whitelist check comprises to verify the provisioning parameters received by the VBS to securely provision the VBS.

Example 38 includes the subject matter of Examples 32 37 and wherein to perform the whitelist check comprises to verify the platform identifier corresponds to a valid platform identifier of a security policy accessible by the VBS.

Example 39 includes the subject matter of Examples 32 38 and further including a VBS agent security credential module to create the security credential in response to having i verified the authenticity of the security quote and the public key of the VNF instance and ii detected the registration request message is alive.

Example 40 includes the subject matter of Examples 32 39 and wherein the VBS agent communication module is further to i create a VBS public private key pair that includes a public key and a private key and ii sign the start response message using a private key of the VBS public private key pair wherein to transmit the start response message comprises to transmit the signed start response message.

Example 41 includes the subject matter of Examples 32 40 and wherein the VBS agent communication module is further to sign the registration response message using the private key of the VBS public private key pair wherein to transmit the start response message comprises to transmit the signed start response message.

Example 42 includes the subject matter of Examples 32 41 and wherein to transmit the registration response message to the VBS agent comprises to transmit an identifier of a VNF manager that is communicatively coupled to the VBS agent wherein the identifier is usable to identify the VNF manager to establish a communication channel with the VNF manager.

Example 43 includes the subject matter of Examples 32 42 and wherein to transmit the identifier of the VNF manager comprises to transmit at least one of an internet protocol IP address a domain name server DNS a fully qualified domain name FQDN a uniform resource locator URL .

Example 44 includes the subject matter of Examples 32 43 and wherein the VBS agent communication module is further to transmit a VNF activated message to a VNF manager that is usable by the VNF manager to set up a communication channel with the VNF instance.

Example 45 includes a method for bootstrapping virtual network functions in a network functions virtualization NFV network architecture the method comprising receiving by a VNF bootstrap service VBS of the NFV network architecture a start message from a VBS agent of a VNF instance of the NFV network architecture that is communicatively coupled to the VBS wherein the start message provides an indication that the VBS agent has been instantiated transmitting by the VBS and in response to receiving the start message a start response message to the VBS agent receiving by the VBS and in response to transmitting the start response message a registration request message from the VBS agent wherein the registration request message includes a security quote and a security credential request to request a security credential from the VBS validating by the VBS and in response to receiving the security credential request of the registration request message the security quote to authenticate the VBS agent as the transmitter of the registration request message and transmitting by the VBS and in response to validating the security quote a registration response message to the VBS agent wherein the registration response message includes a security credential that indicates the security quote has been validated by the VBS.

Example 46 includes the subject matter of Example 45 receiving the start message comprises receiving a first nonce transmitting the start response message comprises transmitting the start response message signed by the VBS using a private key of the VBS wherein the start response message includes the first nonce and a second nonce generated by the VBS and receiving the security credential request comprises receiving the security credential request signed by the VNF instance using a private key of the VNF instance wherein the security credential request includes the first nonce the second nonce and a public key of the VNF instance.

Example 47 includes the subject matter of Examples 45 and 46 and wherein transmitting the registration response message comprises transmitting the registration response message signed by the VBS using a private key of the VBS wherein the registration response message further includes the first nonce the second nonce an identifier of a VNF manager responsible for managing the VBS agent a set of VNF managers that are whitelisted a set of VNF components VNFCs authorized by the VBS a unique VNF instance identifier and one or more policies and wherein the one or more policies include instructions usable by the VBS agent to perform a particular function.

Example 48 includes the subject matter of Examples 45 47 and further including receiving by the VBS a set of provisioning parameters from a trusted execution environment TEE of a platform on which the VNF instance was created wherein the provisioning parameters are usable to securely provision the VBS and include i a platform identifier unique to the platform on which the VNF instance was created ii a public key of the VBS and iii a unique identifier of the VBS and provisioning the VBS based on the provisioning parameters.

Example 49 includes the subject matter of Examples 45 48 and further including verifying by the VBS and in response to receiving the registration request message an authenticity of the security quote based on a private key of the TEE wherein the security quote was signed using the private key of the TEE performing by the VBS a whitelist check to verify a configuration of the VBS detecting by the VBS a liveness of the registration request message using the first and second nonce to ensure the first and second nonce have not expired and verifying by the VBS an authenticity of the public key of the VNF instance.

Example 50 includes the subject matter of Examples 45 49 and wherein performing the whitelist check comprises verifying the provisioning parameters received by the VBS to securely provision the VBS.

Example 51 includes the subject matter of Examples 45 50 and wherein performing the whitelist check comprises verifying the platform identifier corresponds to a valid platform identifier of a security policy accessible by the VBS.

Example 52 includes the subject matter of Examples 45 51 and further including creating the security credential in response to having i verified the authenticity of the security quote and the public key of the VNF instance and ii detected the registration request message is alive.

Example 53 includes the subject matter of Examples 45 52 and further including creating a VBS public private key pair that includes a public key and a private key and signing the start response message using a private key of the VBS public private key pair wherein transmitting the start response message comprises transmitting the signed start response message.

Example 54 includes the subject matter of Examples 45 53 and further including signing the registration response message using the private key of the VBS public private key pair wherein transmitting the start response message comprises transmitting the signed start response message.

Example 55 includes the subject matter of Examples 45 54 and wherein transmitting the registration response message to the VBS agent comprises transmitting an identifier of a VNF manager that is communicatively coupled to the VBS agent wherein the identifier is usable to identify the VNF manager to establish a communication channel with the VNF manager.

Example 56 includes the subject matter of Examples 45 55 and wherein transmitting the identifier of the VNF manager comprises transmitting at least one of an internet protocol IP address a domain name server DNS a fully qualified domain name FQDN a uniform resource locator URL .

Example 57 includes the subject matter of Examples 45 56 and further including transmitting a VNF activated message to a VNF manager that is usable by the VNF manager to set up a communication channel with the VNF instance.

Example 58 includes a computing device comprising a processor and a memory having stored therein a plurality of instructions that when executed by the processor cause the computing device to perform the method of any of Examples 45 57.

Example 59 includes one or more machine readable storage media comprising a plurality of instructions stored thereon that in response to being executed result in a computing device performing the method of any of Examples 45 57.

Example 60 includes a virtual network function VNF bootstrap service VBS of a network functions virtualization NFV network architecture method for bootstrapping virtual network functions in the NFV network architecture the VBS comprising means for receiving a start message from a VBS agent of a VNF instance of the NFV network architecture that is communicatively coupled to the VBS wherein the start message provides an indication that the VBS agent has been instantiated means for transmitting in response to receiving the start message a start response message to the VBS agent means for receiving in response to transmitting the start response message a registration request message from the VBS agent wherein the registration request message includes a security quote and a security credential request to request a security credential from the VBS means for validating in response to receiving the security credential request of the registration request message the security quote to authenticate the VBS agent as the transmitter of the registration request message and means for transmitting in response to validating the security quote a registration response message to the VBS agent wherein the registration response message includes a security credential that indicates the security quote has been validated by the VBS.

Example 61 includes the subject matter of Example 60 and wherein the means for receiving the start message comprises means for receiving a first nonce wherein the means for transmitting the start response message comprises means for transmitting the start response message signed by the VBS using a private key of the VBS wherein the start response message includes the first nonce and a second nonce generated by the VBS and wherein the means for receiving the security credential request comprises means for receiving the security credential request signed by the VNF instance using a private key of the VNF instance wherein the security credential request includes the first nonce the second nonce and a public key of the VNF instance.

Example 62 includes the subject matter of Examples 60 and 61 and wherein the means for transmitting the registration response message comprises means for transmitting the registration response message signed by the VBS using a private key of the VBS wherein the registration response message further includes the first nonce the second nonce an identifier of a VNF manager responsible for managing the VBS agent a set of VNF managers that are whitelisted a set of VNF components VNFCs authorized by the VBS a unique VNF instance identifier and one or more policies and wherein the one or more policies include instructions usable by the VBS agent to perform a particular function.

Example 63 includes the subject matter of Examples 60 62 and further including means for receiving a set of provisioning parameters from a trusted execution environment TEE of a platform on which the VNF instance was created wherein the provisioning parameters are usable to securely provision the VBS and include i a platform identifier unique to the platform on which the VNF instance was created ii a public key of the VBS and iii a unique identifier of the VBS and means for provisioning the VBS based on the provisioning parameters.

Example 64 includes the subject matter of Examples 60 63 and further including means for verifying in response to receiving the registration request message an authenticity of the security quote based on a private key of the TEE wherein the security quote was signed using the private key of the TEE means for performing a whitelist check to verify a configuration of the VBS means for detecting a liveness of the registration request message using the first and second nonce to ensure the first and second nonce have not expired and means for verifying an authenticity of the public key of the VNF instance.

