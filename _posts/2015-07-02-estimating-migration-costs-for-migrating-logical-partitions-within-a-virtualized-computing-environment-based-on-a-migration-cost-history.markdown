---

title: Estimating migration costs for migrating logical partitions within a virtualized computing environment based on a migration cost history
abstract: Responsive to a hypervisor determining that insufficient local resources are available for reservation to meet a performance parameter for at least one resource specified in a reservation request for a particular logical partition managed by the hypervisor in a host system, the hypervisor identifies another logical partition managed by the hypervisor in the host system that is assigned at the least one resource meeting the performance parameter specified in the reservation request. The hypervisor estimates a first cost of migrating the particular logical partition and a second cost of migrating the another logical partition to at least one other host system communicatively connected in a peer-to-peer network based on at least one previously recorded cost stored by the host system of migrating a previous logical partition to the at least one other host system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09229764&OS=09229764&RS=09229764
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09229764
owner_city: Armonk
owner_country: US
publication_date: 20150702
---
This application is a continuation of commonly assigned U.S. patent application Ser. No. 14 534 481 filed Nov. 6 2014 which is a continuation of U.S. patent application Ser. No. 13 551 521 filed Jul. 17 2012 which is a continuation of U.S. patent application Ser. No. 13 325 487 filed Dec. 14 2011 which are both hereby incorporated herein by reference.

This invention relates in general to computing environments and more particularly to maintaining a migration cost history by each host system in a virtualized computing environment and efficiently estimating migration costs of multiple logical partitions at each host system based on the migration cost history to enable the host system to select a migration candidate based on estimated migration costs.

In a virtualized host system a hypervisor may manage the allocation of resources into one or more logical partitions or virtual machine each representing a separate logical grouping of resources assigned to an instance of an operating system upon which an application or workload runs. When an application running in a particular logical partition sends a memory allocation request to an operating system in a logical partition if the logical partition cannot satisfy the resource request with free memory the operating system rejects the resource request or satisfies the resource request using a performance tradeoff of paging items to disk which slows down memory accesses.

In view of the foregoing there is a need for a method to enable a hypervisor of a host system receiving a reservation request for a particular logical partition managed by the hypervisor in the host system to manage the allocation of resources to an application by migrating the logical partition for the application or by migrating another logical partition to free resources to meet the reservation request.

In one embodiment a method for managing requests for resources is directed to responsive to a hypervisor determining that insufficient local resources are available for reservation to meet a performance parameter for at least one resource specified in a reservation request for a particular logical partition managed by the hypervisor in a host system identifying another logical partition managed by the hypervisor in the host system that is assigned at the least one resource meeting the performance parameter specified in the reservation request. The method is directed to estimating by the hypervisor a first cost of migrating the particular logical partition and a second cost of migrating the another logical partition to at least one other host system communicatively connected in a peer to peer network based on at least one previously recorded cost stored by the host system of migrating a previous logical partition to the at least one other host system by identifying a plurality of previously recorded costs for migrations to the at least one other host system identifying a pricing policy applied by the host system responsive to the host system applying the pricing policy comprising an average pricing policy selecting a mean cost of the plurality of previously recorded costs to estimate the first cost and the second cost responsive to the host system applying the pricing policy comprising an optimist pricing policy selecting a best case cost of the plurality of previously recorded costs to estimate the first cost and the second cost and responsive to the host system applying the pricing policy comprising a pessimist pricing policy selecting a worst case cost of the plurality of previously recorded costs to estimate the first cost and the second cost. The method is directed to selecting by the hypervisor one of the particular logical partition and the another logical partition as a migration candidate based on a comparison of the first cost with the second cost wherein the hypervisor negotiates for offers to migrate the migration candidate to the at least one other host system.

In another embodiment a computer system comprise one or more processors one or more computer readable memories one or more computer readable storage devices and program instructions stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories. The stored program instructions comprise program instructions responsive to a hypervisor determining that insufficient local resources are available for reservation to meet a performance parameter for at least one resource specified in a reservation request for a particular logical partition managed by the hypervisor in a host system to identify another logical partition managed by the hypervisor in the host system that is assigned at the least one resource meeting the performance parameter specified in the reservation request. The stored program instructions comprise program instructions to estimate by the hypervisor a first cost of migrating the particular logical partition and a second cost of migrating the another logical partition to at least one other host system communicatively connected in a peer to peer network based on at least one previously recorded cost stored by the host system of migrating a previous logical partition to the at least one other host system by identifying a plurality of previously recorded costs for migrations to the at least one other host system identifying a pricing policy applied by the host system responsive to the host system applying the pricing policy comprising an average pricing policy selecting a mean cost of the plurality of previously recorded costs to estimate the first cost and the second cost responsive to the host system applying the pricing policy comprising an optimist pricing policy selecting a best case cost of the plurality of previously recorded costs to estimate the first cost and the second cost and responsive to the host system applying the pricing policy comprising a pessimist pricing policy selecting a worst case cost of the plurality of previously recorded costs to estimate the first cost and the second cost. The stored program instructions comprise program instructions to select by the hypervisor one of the particular logical partition and the another logical partition as a migration candidate based on a comparison of the first cost with the second cost wherein the hypervisor negotiates for offers to migrate the migration candidate to the at least one other host system.

In another embodiment a computer program product comprise one or more computer readable storage devices and program instructions stored on at least one of the one or more storage devices. The stored program instructions comprise program instructions responsive to a hypervisor determining that insufficient local resources are available for reservation to meet a performance parameter for at least one resource specified in a reservation request for a particular logical partition managed by the hypervisor in a host system to identify another logical partition managed by the hypervisor in the host system that is assigned at the least one resource meeting the performance parameter specified in the reservation request. The stored program instructions comprise program instructions to estimate by the hypervisor a first cost of migrating the particular logical partition and a second cost of migrating the another logical partition to at least one other host system communicatively connected in a peer to peer network based on at least one previously recorded cost stored by the host system of migrating a previous logical partition to the at least one other host system by identifying a plurality of previously recorded costs for migrations to the at least one other host system identifying a pricing policy applied by the host system responsive to the host system applying the pricing policy comprising an average pricing policy selecting a mean cost of the plurality of previously recorded costs to estimate the first cost and the second cost responsive to the host system applying the pricing policy comprising an optimist pricing policy selecting a best case cost of the plurality of previously recorded costs to estimate the first cost and the second cost and responsive to the host system applying the pricing policy comprising a pessimist pricing policy selecting a worst case cost of the plurality of previously recorded costs to estimate the first cost and the second cost. The stored program instructions comprise program instructions to select by the hypervisor one of the particular logical partition and the another logical partition as a migration candidate based on a comparison of the first cost with the second cost wherein the hypervisor negotiates for offers to migrate the migration candidate to the at least one other host system.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

In addition in the following description for purposes of explanation numerous systems are described. It is important to note and it will be apparent to one skilled in the art that the present invention may execute in a variety of systems including a variety of computer systems and electronic devices operating any number of different types of operating systems.

With reference now to the Figures and in particular with reference now to a block diagram illustrates one example of a virtualized computing environment in which a hypervisor manages negotiations for resources meeting at least one performance parameter including quality of service within the host system and among remote host systems for an application from an application initiated request for resources specifying the performance parameter.

In the example a virtualized computing environment may include one or more types of virtualized environments including but not limited to a workload distribution environment a cloud computing environment a grid environment a cluster environment and other types of computing environments implementing one or more virtualization layers using one or more types of virtual machines or systems for managing virtualized resources. In one example one or more host systems are identified within virtualized system environment where each host system is virtualized by including one or more logical partitions or virtual machines such as logical partition managed by a hypervisor or other firmware for managing a virtualization layer such as a virtualization layer of resources virtualized into partitioned logical pools of resources. In one example logical partition represents a partitioned virtual group of one or more hardware software and firmware resources currently configured in logical partition by hypervisor from one or more computing systems. In one embodiment a host system refers to a system in which a hypervisor such as hypervisor manages at least one logical partition and the remote host systems or other host systems refers to other virtualized systems managed by other hypervisors instances independent of hypervisor .

Hypervisor manages at least one of partitioning of resources to logical partitions the sharing of resources between logical partitions the dynamic movement of resources between logical partitions the distribution of workloads across logical partitions the movement of workloads from one partition to another logical partition and the migration of workloads and partitions from one host system to another host system within virtualized system environment . In addition hypervisor may communicate with other hypervisors of other hosts systems organized within virtualized system environment for peer to peer communication or may communicate with other host systems through a management interface.

In one example operating system within logical partition manages requests for resources from application and manages the allocation of specific resources for application . One of ordinary skill in the art will appreciate that operating system may represent a kernel and may include a resource management unit specified for monitoring resource usage within logical partition requesting additional resources from hypervisor and managing the use of resources within logical partition .

In one embodiment application submits one or more resource requests such as resource request to operating system specifying one or more resource requirements for application . Application may represent one or more instances of an application or may represent one or more workloads scheduled to run or running on an application.

In one embodiment resource request may request a lease of one or more types and amounts of resources and may specify one or more performance parameter requirements as illustrated at reference numeral . Performance parameters may include but are not limited to a lease start time a lease duration a desired quality of service QoS a resource locality and a cost. In one example a lease start time may specify now and may specify one or more future times. In one example a lease duration may specify a particular time or may specify a workload estimation. In one example a desired QoS may specify a particular type of resource a particular option for a resource or other values that indicate a quality of service for a particular type of resource. In one example a resource locality may specify local for a local host system global for use of local host systems and other host systems migration for use of other host systems and other indicators limiting resource locations. In one example cost may specify a price a particular number of units of usage or other value that indicates a charge for use of a resource. In another example cost may also specify a cost profile that should be applied to satisfy a resource request.

In the example operating system sends a request response that specifies whether resource request is locally granted meeting the specified performance parameters or whether resource request is locally declined. In addition response to request may include if a request is declined alternate options specifying recommended adjustments for one or more of the performance parameters or global offers including one or more offers for migrating application to a remote host system.

In one example for operating system to handle resource request as a negotiation to lease resources from application operating system includes a negotiation interface NI that provides an application programming interface API and controller for processing resource request from application where resource request includes resource specifications and performance parameters . NI receives resource request filters resource request to determine whether resource request is a request to initiate a negotiation for resources meeting performance parameters and formats resource request into a resource reservation request format accepted by hypervisor as illustrated by reservation res request . By application specifying resource request to call negotiation interface application is enabled to initiate a negotiation for resources both locally and remotely that meet specific performance parameters as set by application rather than ceding to the performance parameters selected by operating system hypervisor or other component.

In one example negotiation interface of operating system receives resource request and operating system queries a broker agent with res request to negotiate for local resources to be moved to logical partition meeting the performance parameters of resource request from the host system. Broker agent may consult local or internal tables for resources managed in the host system to determine the availability of resources within the host system. As illustrated if broker agent determines that resource request can be satisfied locally then operating system schedules a reservation of the available resources illustrated as a local system lease in host system for resource request and returns a reservation res response indicating the granting of local system lease . In addition hypervisor coordinates with operating system to transfer resources to fulfill local system lease during the lease period for the duration of the lease. Operating system returns request response to application indicating the resource request has been locally granted and allocates the resources leased to logical partition during the lease period to application .

In addition in one example if the performance parameters in resource request specify a locality that includes remote host resources and if broker agent determines that resource request cannot be satisfied within the host system broker agent makes a peer to peer hypervisor call that sends resource request directly to one or more hypervisors of other remote host systems. Broker agent waits for a period of time for responses by other host systems to the hypervisor call collects any responses to the hypervisor call and evaluates any responses from other host systems to the hypervisor call. Broker agent selects one or more of the responses from other host systems as the best offer for migrating application and passes the offer for migrating application to operating system in res response . Operating system returns the offer to application in global offers . If application accepts the offer for migrating application application calls negotiation interface to accept the offer as illustrated by offer acceptance operating system passes the offer acceptance to broker agent in res request and broker agent begins brokering the migration of application to the remote host system with the accepted offer. In one example application may initially submit resource request that automatically authorizes migration and broker agent will automatically start migrating application to the remote host system with the selected offer.

Broker agent may determine from among responses the one or more responses with the best offers from other host systems according to one or more policies and establish a lease of the resources on the other host system illustrated as global system lease . Broker agent controls migration of application alone or of logical partition to the other host system during the least time specified in global system lease .

Broker agent may also determine if one or more of the local host system and other host systems cannot satisfy one or more of the performance parameters in resource request whether alternate resources are available that do not meet all the performance parameters in resource request but reduce or omit one of performance parameter values. If alternate resources are available that do not meet all the performance parameters in resource request operating system may identify one or more options for performance parameters to use the alternate resources and return the options as one or more alternate options to return to application with response to request . In one example alternate options may include codes designated by operating system to identify one or more parameters that need to be adjusted or errors in the resource request.

When application receives alternate options or global offers in response to resource request application may accept global offers or adjust the performance parameter requirements and resubmit resource request . In one example application may adjust the performance parameter requirements for a resource lease according to alternate options . In another example application may adjust the performance parameter requirements for a resource lease in view of alternate parameter recommendations but also according to negotiation policies determined by application . For example if alternate options return a recommendation to reduce a quality of service value by 25 application may determine based on negotiation policies to reduce a quality of service value by a maximum amount of 10 but to increase a value of another factor such as cost or locality in a resubmitted resource request. By application receiving alternate options or global offers adjusting performance parameters in resource request setting offer acceptance and calling negotiation interface with resource request application is enabled continue to negotiate within the local host system and with other host systems for resources meeting performance requirements as specified by application .

In addition prior to broker agent making hypervisor call broker agent may determine whether there are one or more other applications identified within other logical partitions LPARs operating in the host system which if the other LPAR were migrated to one of the other host systems would release sufficient system resources of the host system to allow the host system to schedule resources for local system lease for logical partition in response to resource request . If there are one or more other LPARs operating in the host system which if migrated to one of the other host systems would release sufficient system resources of the host system to allow the host system to schedule local system lease for logical partition then broker agent may send cost requests to a cost estimator requesting estimated costs for migrating each of logical partition and the other LPARs. Cost estimator returns an estimated cost for migrating each of logical partition and the other LPARs and broker agent selects which logical partition to migrate based on policies such as choosing to migrate the logical partition with the lowest estimated migration cost. Once broker agent selects which one or more logical partitions to attempt to migrate for the negotiation based on estimated migration costs broker agent sends hypervisor call to the other host systems for the selected one or more logical partitions.

In the example cost estimator collects data related to migration costs of logical partitions to and from the host system from responses global system lease and broker agent and stores the collected historical data in a history table for use in estimating costs of future logical partition migrations for broker agent . In addition in the example cost estimator may select data from the history table that is relevant to the migration of an application or a logical partition out of the host system and attach the relevant historical cost data to a migration data header for the migrating LPAR where the other host system receiving the migrating LPAR strips the migration data header from the migrating LPAR and also stores the relevant historical cost data for the LPAR migration in a history table for use by the cost estimator of the remote host system for calculating future LPAR migration cost estimates. By cost estimator locally collecting and distributing historical cost data for LPAR migrations to and from the host system cost estimator is able to efficiently estimate costs for future LPAR migrations without requiring network bandwidth and other resource usage to query other host systems for estimated costs and cost estimator is able to efficiently update other host systems in the peer to peer network with historical cost data for LPAR migrations.

In one example migration costs collected by cost estimator are based on migration cost inputs that may include but are not limited to network latency between systems processor speeds of systems processor utilization on each system and a memory footprint of the partition. Cost estimator collects the historical cost data for LPAR migrations from estimated values of the migration cost inputs prior to migration and real values of the migration cost inputs after the migration.

In the example one or more components within a host system may control the migration of an LPAR to one of the other host systems using one or more techniques for controlling migrations to other host systems. Depending on the type of virtualized computing environment in which a host system is implemented the host system may additionally or alternatively control migrations of different layers and groupings of virtualized components including applications operating systems workloads and workload partitions.

In one example application may also submit resource request without specifying one or more performance parameters and cede to one or more of the performance parameters applied by operating system hypervisor or another host system to which application is migrated. For example application may be a legacy application that does not have the functionality to specify performance parameters in a resource request or may not have the functionality to specify performance parameters for a selection of resources in a resource request. For example application may submit resource request with a memory allocation request without any performance parameters that only specifies the size of the memory such as a malloc size request. In one example operating system receives the malloc size request without any performance parameters specified and still negotiates on behalf of application for memory of the size specified in the memory request using the quality of service implemented by operating system or as applied by hypervisor . In one example where operating system determines the quality of service for the malloc size request operating system may determine there is insufficient memory in a shared memory pool to allocate for the resource request but operating system may apply a quality of service policy for a performance trade off such as memory paging to satisfy the resource request. In another example operating system may automatically require a highest quality of service for fulfilling a memory request when the performance parameter is not specified and negotiate for real memory for application . In another example operating system may cede to the quality of service requirements provided by hypervisor . In one example hypervisor may apply a policy with a preference to migrate workloads within an ensemble of host systems.

In contrast to the previous example of application submitting resource request of malloc size without any performance parameters as previously described with reference to resource specification and performance parameters application may initiate a negotiation for resources meeting performance parameters specified by application such as by submitting a request using the command malloc size X bytes lease start time now lease duration 24 hours quality of service real memory locality anywhere cost 10 cap hidden where lease start time lease duration quality of service locality and cost are the performance parameters. In the example the quality of service value specified in a memory allocation request may specify real memory to designate that memory paging is not acceptable and the cost value specified to 10 cap hidden may request a cap of any increased cost for memory meeting the other parameters at a cap of 10 of the regular fee and the hidden cost profile parameter may specify that the additional cap should be hidden from other host systems.

With reference now to a block diagram illustrates one example of a broker agent for managing negotiations for resources meeting performance parameters in a virtualized computing environment. In one example broker agent is implemented in the hypervisor or other virtual machine management layer.

In one example broker agent includes managed resource tables . Managed resource tables may include tables or other data structures for managing the availability use location reservations and other aspects of one or more resources available in a host system. In the example managed resource tables include separate tables for each of RAM for managing the distribution of memory within the host system including shareable memory network bandwidth for managing the distribution of network resources within the host system CPU s for managing the distribution of processors within the host system storage for managing the distribution of disk space in the host system CPU frequency for managing distribution of processors based on processor frequency power budget for managing limits on power usage by applications and logical partitions in the host system and HW inventory for managing the hardware inventory files periodically stored from a scan of the hardware available in the host system.

In one example broker agent receives reservation requests from an operating system of a logical partition within the host system. Broker agent first maps the reservation request to the appropriate particular table within managed resource tables . For example if the reservation request is for a memory allocation then broker agent maps the reservation request to RAM within managed resource tables . illustrates one example of a reservation table entry for a reservation request mapped to a particular table within managed resource tables . In the example a reservation table entry is entered in a table appropriate for the type of resource being requested. Elements of reservation table entry may include but are not limited to an LPAR identifier ID identifying the LPAR of the operating system sending the reservation request a reservation start time and length a desired quality of service QoS a locality limitation and a cost limitation.

Next broker agent determines whether there are resources available in the particular table within managed resource tables that meet the performance parameters in the reservation request and meet the policy rules of policy . illustrates one example of the one or more types of policy rules that may be specified in policy . If broker agent determines there are resources available in the particular table that meet the performance requirements in the reservation request and that policy allows use of the resources from the local host system then broker agent reserves the resource for the requesting logical partition and returns a reservation response to the operating system of the requesting logical partition that the reservation has been granted. The operating system returns a request response to the requesting application indicating that the request for resources has been granted.

In the event that broker agent determines there are not resources available locally in the particular table that meet the performance requirements in the reservation request then broker agent may apply policy to determine what additional negotiations to perform. In one example policy may include in service policy a policy that requires broker agent in the event that the locality specification of a reservation request is specified as local to still query cost estimator with a cost request or to query remote host systems with a bid request to determine whether to include a locality adjustment in alternate parameter recommendations . In another example policy may include in service policy a policy that requires broker agent in the event that the locality specification of a reservation request is specified as local to determine whether there is another LPAR in the host system which if migrated would free sufficient resources in managed resource tables to provide sufficient local resources for a reservation request. If there is another LPAR in the host system which if migrated would free sufficient resources service policy may direct broker agent to call cost estimator or other host systems with a cost request for an estimated cost for migrating the other LPAR and a determination whether the migration is cost effective or broker agent may automatically broadcast a bid request to the other host systems.

In addition if broker agent determines there are not resources available locally and the locality setting of a reservation request allows for remote resourcing service policy may specify that broker agent needs to broadcast a bid request to the other host systems. In addition service policy may further specify that broker agent first needs to select which LPAR within the host system to select for the bid request if there are other LPARs which if migrated would free sufficient resources in the host system to meet the resource request requirements and may also required that brokerage agent submit cost requests for estimates of the cost of migrating each of the LPARs and select which LPAR to submit bid requests on behalf of for migration based on the estimated costs for migrating each LPAR. In the example other system map includes a mapping of the locations of one or more other host systems enabled to directly communicate through in a peer to peer management network. Broker agent broadcasts a bid request for the reservation request to the other host systems according to other system map and calls mediator to manage the status and collection of outgoing requests and incoming responses.

In one example illustrates a block diagram of a mediator that includes data structures for managing incoming communications and outgoing communications . In one example outgoing communications may include a record of bid requests broadcast by broker agent to multiple remote host systems requesting bids from the remote host systems for a reservation request and incoming communications may include a record of offers including bid offers received from the remote host systems for migrating a reservation request.

In one example a policy broker of mediator tracks a time when each separate bid request of bid requests is broadcast and waits a particular amount of time for collection of offers to each separate bid request of offers . Policy broker collects all offers to a bid request and determines based on workload system preferences and a remote selection policy of policy which responding remote host system to select to receive a particular application. Factors that may influence policy broker in determining the best remote host system for a particular workload may include but are not limited to I O requirements of the application including CPU memory usage network bandwidth and disk space requirements power usage of the application and hardware requirements such as a particular adapter or hardware accelerator required for an application. Once broker agent is approved to accept a particular offer broker agent sends a bid acceptance recorded in bid acceptances and acts as the broker for migrating the requesting application to a remote host system.

In another example broker agent may broadcast a cost request tracked in cost requests to other remote host systems where the cost request queries other remote host systems for an estimated cost of what it would cost the other remote host systems to run an application but is not a request for a remote host system place a bid committing to provide resources for a particular application. Policy broker monitors for and records cost responses from other remote host systems responding to cost requests . In one example broker agent may periodically query other remote host systems with cost requests . In another example broker agent may query other remote host systems with cost request when negotiating for resources for a particular reservation request.

In one example broker agent may additionally or alternatively broadcast a cost request tracked in cost requests to cost estimator where the cost request queries cost estimator of the host system for an estimated cost of what it would cost to migrate a particular LPAR to one or more other host systems based on historical cost data for previous LPAR migrations out of the host system to other host systems. Policy broker may monitor for and collect cost responses from cost estimator .

In addition mediator receives and records incoming communications from other remote host systems requesting costs bids and bid acceptances including cost requests bid requests and bid acceptances and mediator records outgoing communications from the host system to one or more host systems including cost responses and offers . For cost request and bid requests policy broker queries broker agent to determine a current cost for resources or to generate an offer to provide resources for a reservation request. Broker agent may call cost estimator to estimate a cost for migrating a LPAR to the host system based on historical cost data for previous LPAR migrations into the host system. Broker agent sends a response to the request to the requesting remote host system and mediator records the response to the request in cost responses or offers . When policy broker detects bid acceptances policy broker passes a reservation request to broker agent to reserve the resources for the remote host system. During the reservation lease time hypervisor receives a migration of an application and moves the reserved resources to a logical partition hosting the application.

In particular in one example when policy broker determines which responding remote host system to select to receive a particular application policy broker may apply remote selection policy of greedy and spread the work evenly among the remote host systems that discount costs to attract work from other host systems in other system map . In another example application may specify a cost in resource request of greedy .

In addition in one example for policy broker to assess costs associated with migration policy broker may apply remote selection policy of altruistic and determine whether to give away one application to satisfy the resource needs of another application. In another example application may specify a cost in resource request of altruistic . For example if broker agent needs resources for application B to run locally but all or a portion of the needed resources are in use locally by application A the altruistic policy instructs broker agent to send a cost query to remote host systems to estimate it would cost to run each of application A and application B. Policy broker receives the cost estimations for running application A and application B remotely from the other host systems. Policy broker may compare the sum cost of running application A remotely and application B locally with the sum cost of running application B remotely and application A locally and if the sum cost of running application B remotely and application A locally is greater then policy broker may decide to give away application A to the other host and broadcast an resource request for bids for application A rather than application B so that the local host system resources used by application A will be freed up for use by application B. Once policy broker determines which application to send to the remote host system then policy broker triggers broker agent to broadcast bid requests for the selected application to the remote host systems.

To apply the altruistic policy policy broker may request that broker agent assess which applications within the host system if migrated would free up sufficient resources for the requesting application such as application B in the previous example to run locally. In addition to apply the altruistic policy policy broker may request that broker agent assess which applications running within the host system require a lower QoS from the requesting application and then determining whether migrating any of these application would free up sufficient resources for the requesting application.

In the example broker agent may pass cost responses offers cost responses and offers to cost estimator for storage in a history table. By storing cost responses and offers made by the host system and received from other host systems cost estimator maintains historical data about recent estimated and actual costs of migrating LPARs to and from a host system.

In the example remote selection policy and service policy specified in policy for each host system are modular and configurable such that each host system may apply separate policies for different types of resources and such that each host system may apply a different set of policies in policy from any other host system in an ensemble of host systems. By specifying policy by resource and by host system each host system applies a set of policies specified for efficiently negotiating on behalf of applications based on an application initiated reservation request.

With reference now to a block diagram illustrates one example of a ensemble including multiple virtualized host systems each managed by a separate hypervisor instance. In the example ensemble represents one type of virtualized computing environment such as virtualized computing environment and includes a host system remote host system and remote host system communicatively connected through management network . In one example management network represents an established peer to peer network through which host system remote host system and remote host system directly communicate and through which a group of systems within ensemble run without a central management entity. In one example ensemble represents a pool of compatible host systems in which jobs can start on any host system in which job workloads have mobility to be automatically moved from and managed in one host system to another host system and in which each destination host system may volunteer to host job workloads.

In the example host system includes a hypervisor remote host system includes a hypervisor and remote host system includes a hypervisor . Each of hypervisor hypervisor and hypervisor may perform one or more of the functions described with respect to hypervisor and in particular may each perform one or more of the functions described with respect to broker agent . In the example hypervisor includes a broker agent for controlling negotiations for resource reservations for logical partitions and . In the example logical partitions and which are managed by a partition controller of hypervisor in host system are illustrated. One of ordinary skill in the art will appreciate that although not depicted hypervisor may manage at least one logical partition of remote host system and hypervisor may manage at least one logical partition of remote host system .

In the example LPAR includes multiple applications illustrated at reference numeral resource management a kernel and a negotiation interface NI . Resource management may include one or more resource controllers including memory management which may be accessed by hypervisor for monitoring use of resources within LPAR and adjusting local records of resource allocations to LPAR . Kernel may represent one instance of a guest operating system within LPAR . Similarly LPAR includes multiple applications illustrated at reference numeral resource management kernel and negotiation interface .

In the example negotiation interface and negotiation interface perform at least one of the functions described with reference to negotiation interface . For example negotiation interface may receive a resource request from application format the resource request into a reservation request and pass the reservation request to broker agent of hypervisor . Broker agent determines whether there are sufficient resources available for the reservation request on host system . If there are not sufficient resources available for the reservation request on host system broker agent broadcasts a call for bids to remote host system and remote host system through management network and waits for offers from remote host system and remote host system with bids for migration of application alone or LPAR to the remote host system. If application accepts a migration offer from one of the remote host systems such as remote host system then broker agent manages the migration to the reserved resources on remote host system .

As illustrated negotiation interface may receive resource requests from multiple applications however the reservation requests sent by negotiation interface to hypervisor may only identify LPAR and not the individual application initiating the request. Negotiation interface may manage a table of outgoing requests indexed by application and upon receiving a response from hypervisor match the response to the reservation request responded to and identify the associated requesting application.

In the example if broker agent applies an altruistic policy then in one example if application submits a resource request and the resource request specifies resources that would be available locally if not used by application broker agent may determine whether it is more cost effective to migrate application and thus LPAR to one of remote host systems and or to migrate application and thus LPAR to one of remote host systems and . In the example if broker agent applies a greedy policy then broker agent will evenly distribute work between remote host system and remote host system as each system is available to take work.

In another example if locally satisfying a resource request by application would cause an overcommitted state on host system broker agent may automatically initiate a partition migration operation for migrating LPAR to one of remote host systems and . In one example an overcommitted state may be caused by application requesting new memory pages that are not available in the memory currently allocated to LPAR and additional memory is also not available within host system . In particular policy may include a setting that as soon as a host system cannot meet the memory needs of a partition for a new memory page request policy requires that the partition needs to be migrated. In one example migration of LPAR may include starting the migration with the new pages that application requested and also using local swap space to store copies of local pages until the migration to a selected remote host from among remote host system or is complete.

In the example partition controller may control the partition migration operation for migrating LPAR or LPAR to one of remote host systems and and may control the partition migration operation for migrating partitions into host system from one of remote host systems and . In one example partition controller controls communications between broker agent and hypervisors and and controls partition migration operations responsive to broker agent initiating partition migration operations. In controlling partition migration operations partition controller may implement one or more different types of migration functions to handle different types of migration scenarios and to optimize migration operations. In one example partition controller may manage the memory allocations memory sharing and memory paging on host system during a migration of an LPAR to temporarily satisfy the memory requirements of an application while a partition migration occurs. In addition while partition controller is described with reference to migrating LPARs in another embodiment partition controller may also migrate applications workloads workload partitions or other individual and grouped virtualized components and partition controller may also migrate virtualized components across multiple host systems.

With reference now to a block diagram illustrates one example of a broker agent managing local memory allocations and logical partition migrations to provide memory meeting the quality of service requirements of one or more workloads. In the example as illustrated at reference numeral in a first system memory allocation the memory available in a host system is allocated between LPAR 1 LPAR 2 and LPAR 3 or is available in as free memory. In the example a workload in LPAR 3 requests a lease of memory for two hours and broker agent leases the memory to LPAR 3 from the free memory as illustrated at reference numeral . Next in the example a workload in LPAR 2 requests additional memory and specifies a performance parameter of real memory but the request requires a memory allocation that that is larger than the remaining free memory which would result in an overallocation as illustrated at reference numeral . Since broker agent determines that the additional memory required by LPAR 2 is not available locally and the requesting application in LPAR 2 requires real memory and an altruistic cost broker agent determines whether it is more cost effective to migrate LPAR 2 to a remote host system or to migrate LPAR 3 to a remote host system and free up the memory leased to LPAR 3 to locally provide the memory required by LPAR 2 . In the example broker agent determines that it is more cost effective to migrate LPAR 2 to a remote host system and LPAR 2 approves the offer to migrate to a remote host to receive the requested real memory.

In one example history table includes records of the costs associated with migrations in and out of the host system as illustrated at reference numeral . In one example each record may include one or more types of information including but not limited to a source ID of the host system a destination ID of a remote host system such as a remote host system or a remote host system and an LPAR ID of a migrating LPAR as illustrated at reference numeral migration cost estimations or migration actual costs . In one example migration cost estimates may include cost responses tracked by broker agent and migration actual costs may include bid offers tracked by broker agent where broker agent formats and stores cost responses and bid offers in history table as illustrated at reference numeral and actual migration costs tracked by partition controller for migrations into and out of the host system. In one example actual migration costs may include the tracked network latency between systems for the migration the amount of memory or number of CPUs migrated and other data indicating one or more types of resource costs of migrating logical partitions between systems. In one example one or both of the target system partition controller tracks the actual migration costs of migrating an LPAR to the target system. In another example the source system partition controller may receive a communication from the target system partition controller at the conclusion of an LPAR migration where the closing communication includes the actual costs for migration of the LPAR as tracked by the target system partition controller. In addition migration cost estimates and migration actual costs may include records from decoded LPAR migration headers by cost estimator from incoming LPAR migrations as illustrated by decoded LPAR migration header .

In one example cost estimator detects one or more records within history table that apply to current cost estimate components and cost estimator applies one or more of the policies specified in pricing and threshold policy to prioritize the records and calculate an estimated cost for migrating an LPAR. In the example cost estimator returns the estimated cost as cost estimate to broker agent . In one example broker agent may submit cost estimate components for multiple LPAR migrations and compare cost estimate returned for each LPAR to estimate which LPAR may be the least expensive to migrate to a remote host system such as remote host system or remote host system . As number complexity and size of a computing environment grows the number of metrics applied by cost estimator in calculating estimated costs and the weight given to each metric by cost estimator in calculating estimated costs is modular and configurable. For example as the complexity and size of a computing environment grows cost estimator may apply a greater weight to network latency costs in calculating the estimated costs of migrating an LPAR.

In one example pricing and threshold policy includes at least one pricing policy where pricing policies may be specified for particular resources and specified for the particular host system. Examples of pricing policies within pricing and threshold policy may include but are not limited to an average pricing policy an optimist pricing policy and a pessimist pricing policy. Cost estimator applies an average pricing policy by selecting the mean of the selection of historical data identified in history table . Cost estimator applies an optimistic pricing policy by selecting the best case of the selection of historical data identified in history table . Cost estimator applies a pessimist pricing policy by selecting the worst case of the selection of historical data identified in history table .

In one example when broker agent selects to migrate an LPAR from the host system to one or remote host systems or broker agent directs partition controller to control the migration of the selected LPAR. Partition controller receives the LPAR migration call and calls cost estimator with a request for a migration header for the migrating LPAR. Cost estimator receives migration header requests and searches history table for a selection of the latest relevant migration records for the target LPAR and the destination remote host system. The number of latest relevant migration entries selected may be specified for the type of resource the LPAR the destination remote host system or other searchable parameter. Cost estimator encodes a new migration data header with the selected migration entries identified by one or more of a source ID a destination ID or an LPAR ID as illustrated at reference numeral and returns the new migration data header to partition controller . In addition cost estimator deletes a selection of older entries about the LPAR based on a configured threshold number of entries to maintain as specified in pricing and threshold policy . When partition controller receives new migration data header with historical cost data for an LPAR migration partition controller encodes the LPAR migration with the migration data header and begins the migrations of the LPAR to the selected destination remote host system from among remote host systems and . In addition cost estimator may send a decoded LPAR migration header of new LPAR migration header for storage in history table such that history table includes a record of the selected migration cost for the LPAR migration out of the host system.

In one example when partition controller receives migrations of LPARs from one or more of remote host systems and partition controller the LPAR migration may include a migration data header with migration historical cost data. Partition controller strips the LPAR migration header from incoming LPAR migrations and cost estimator decodes the LPAR migration header and sends a decoded LPAR migration header to history table for storage such that history table includes a record of historical migration costs for LPAR migrations into the host system.

In the example by storing historical cost data for LPAR migrations out of and into a host system in history table historical cost information is available for cost estimator to efficiently estimate a cost of migrating LPARs based on previous historical costs when broker agent requires cost estimates to determine which LPAR to attempt to request migration bids for from remote host systems. In the example by including historical cost data for LPAR migrations in a migration data header with an LPAR migration the historical cost data in history table is efficiently updated at the remote host system receiving a migration for use in estimated future migration costs.

In the embodiment illustrated each host system in an ensemble communicatively connected in the peer to peer network environment implements a local cost estimator and maintain a local history table . In another embodiment the host systems in an ensemble may access a single system that hosts cost estimator and history table for the ensemble.

Computer system includes a bus or other communication device for communicating information within computer system and at least one hardware processing device such as processor coupled to bus for processing information. Bus preferably includes low latency and higher latency paths that are connected by bridges and adapters and controlled within computer system by multiple bus controllers. When implemented as a server or node computer system may include multiple processors designed to improve network servicing power. Where multiple processors share bus additional controllers not depicted for managing bus access and locks may be implemented.

Processor may be at least one general purpose processor such as IBM PowerPC IBM and PowerPC are registered trademarks of International Business Machines Corporation processor that during normal operation processes data under the control of software which may include at least one of application software an operating system middleware and other code and computer executable programs accessible from a dynamic storage device such as random access memory RAM a static storage device such as Read Only Memory ROM a data storage device such as mass storage device or other data storage medium. Software including operating system and application software may include but is not limited to code applications protocols interfaces and processes for controlling one or more systems.

In one embodiment the operations performed by processor may control the operations of flowchart of and and other operations described herein. Operations performed by processor may be requested by software such as operating system and application software or other code or the steps of one embodiment of the invention might be performed by specific hardware components that contain hardwired logic for performing the steps or by any combination of programmed computer components and custom hardware components.

Those of ordinary skill in the art will appreciate that aspects of one embodiment of the invention may be embodied as a system method or computer program product. Accordingly aspects of one embodiment of the invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment containing software and hardware aspects that may all generally be referred to herein as circuit module or system. Furthermore aspects of one embodiment of the invention may take the form of a computer program product embodied in one or more tangible computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk such as mass storage device a random access memory RAM such as RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction executing system apparatus or device.

A computer readable signal medium may include a propagated data signal with the computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction executable system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable radio frequency RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations of on embodiment of the invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer such as computer system partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network such as network through a communication interface such as network interface over a network link that may be connected for example to network .

In the example network interface includes an adapter for connecting computer system to network through a link. Although not depicted network interface may include additional software such as device drivers additional hardware and other controllers that enable communication. When implemented as a server computer system may include multiple communication interfaces accessible via multiple peripheral component interconnect PCI bus bridges connected to an input output controller for example. In this manner computer system allows connections to multiple clients via multiple separate ports and each port may also support multiple connections to multiple clients.

One embodiment of the invention is described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. Those of ordinary skill in the art will appreciate that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer such as computer system or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer such as computer system or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Network interface the network link to network and network may use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network the network link to network and network interface which carry the digital data to and from computer system may be forms of carrier waves transporting the information.

In addition computer system may include multiple peripheral components that facilitate input and output. These peripheral components are connected to multiple controllers adapters and expansion slots such as input output I O interface coupled to one of the multiple levels of bus . For example input device may include for example a microphone a video capture device an image scanning system a keyboard a mouse or other input peripheral device communicatively enabled on bus via I O interface controlling inputs. In addition for example output device communicatively enabled on bus via I O interface for controlling outputs may include for example one or more graphical display devices audio speakers and tactile detectable output interfaces but may also include other output interfaces. In alternate embodiments of the present invention additional or alternate input and output peripheral components may be added.

Those of ordinary skill in the art will appreciate that the hardware depicted in may vary. Furthermore those of ordinary skill in the art will appreciate that the depicted example is not meant to imply architectural limitations with respect to the present invention.

With reference now to a high level logic flowchart depicts a process and program for managing application initiated negotiations for resources with a specified performance parameter. In the example the process starts at block and thereafter proceeds to block .

Block illustrates an application calling an operating system with a resource request for a particular resource and at least one performance parameter. Next block illustrates a determination whether a response is received to the resource request from the operating system. Once the application receives a response to the resource request the process passes to block . Block illustrates a determination whether a resource request is granted. If a resource request is granted then the process passes to block . Block illustrates marking the request as granted and marking the location of the resource grant whether local or remote and the process ends.

Returning to block if a resource request is not granted then the process passes to block . Block illustrates a determination whether the response includes at least one of a remote offer and alternate options. If the response does not include at least one of a remote offer and alternate option then the process passes to block . Block illustrates calling an error handler to handle the declined resource request and the process ends.

Returning to block if the response does include at least one of a remote offer and alternate options then the process passes to block . Block illustrates determining whether to accept the remote offer or adjust performance parameters of the resource request to continue negotiating. Next block illustrates a determination whether the application accepts an offer. If the application accepts an offer then the process passes to block . Block illustrates calling the operating system with an offer acceptance set and the process passes to block . Returning to block if the application does not accept an offer then the process passes to block . Block illustrates calling the operating system with adjusted performance parameters in the resource request and the process returns to block .

With reference now to a high level logic flowchart illustrates one example of a process and program for a negotiation interface of an operating system managing application initiated negotiations for resources meeting performance parameters. In the example the process starts at block and thereafter proceeds to block . Block illustrates a determination whether a resource request call is received from an application. If a resource request call is received from an application then the process passes to block . Block illustrates formatting the resource request into a reservation request for the hypervisor. Next block illustrates recording the reservation request indexed by application identifier in an outgoing request table. Thereafter block illustrates sending the reservation request to the hypervisor. Next block illustrates a determination whether the operating system receives a response to the reservation request. Once the operating system receives a response to the reservation request then the process passes to block . Block illustrates updating the status of the reservation request with the response. Next block illustrates identifying the application identifier assigned to the reservation request responded to in the outgoing request table. Thereafter block illustrates sending the response to the request application as a request response and the process ends.

Referring now to a high level logic flowchart illustrates one example of a process and program for a hypervisor managing two levels of negotiations for resources based on an application initiated negotiation for resources meeting performance parameters specified by the application. In the example the process starts at block and thereafter proceeds to block . Block illustrates a determination whether a hypervisor receives an application initiated reservation request with performance parameters from an LPAR. If the hypervisor receives an application initiated reservation request with performance parameters from an LPAR then the process passes to block . Block illustrates negotiating to reserve at least one available local resource in the host system that meets the performance parameters for at least one resource specified in the reservation request. Next block depicts a determination whether any local resource meeting the performance parameters is identified as available for reservation. If at least one local resource meeting the performance parameters is identified as available then the process ends. If no local resource meeting the performance parameters is identified as available for reservation then the process passes to block . Block illustrates negotiating for offers to migrate the LPAR to a remote host system with resources available that meet the performance parameter for the at least one resource specified in the reservation request and the process ends.

Referring now to a high level logic flowchart illustrates one example of a process and program for a broker agent of a hypervisor managing application initiated negotiations for local or remote resources meeting performance parameters specified by the application. In the example the process starts at block and thereafter proceeds to block . Block illustrates a determination of whether the broker agent receives a reservation res request with performance parameters from a logical partition LPAR . If the broker agent receives a reservation request with performance parameters from an LPAR then the process passes to block . Block illustrates mapping a reservation table entry for the reservation request to the appropriate resource table in the managed resource tables. Next block illustrates a determination whether there are locally available resources in the mapped to resource table that satisfy the performance parameters of the reservation request. If there are locally available resources in the mapped to resource table that satisfy the performance parameters of the reservation request the process passes to block . Block illustrates reserving the available local resources for the reservation request. Next block illustrates returning a response to the requesting LPAR that the reservation request is granted and the process ends.

Returning to block if there are not locally available resources that satisfy the performance parameters then the process passes to block . Block illustrates a determination whether there is currently a local lease of the requested resource by another LPAR that is migratable to a remote host system. In one example an LPAR may be migratable to a remote host system if the quality of service cost or locality requirements of the LPAR allow for the LPAR to be migrated a remote host system. If there is not currently a local lease of the requested resource by another LPAR that is migratable then the process passes to block . Block illustrates marking the requesting LPAR as a migration candidate and the process passes to block .

Returning to block if there is currently a local lease of the requested resource by another LPAR that is migratable to a remote host system then the process passes to block . Block illustrates collecting costs from remote host systems for handling the requesting LPAR and the other LPAR by calling the cost estimator with a cost request or by calling the broker agent to broadcast a cost request to the other host systems. Next block illustrates a determination whether the estimated migration cost of the requesting LPAR is less than the estimated migration cost of the other LPAR. If the estimated migration cost of the requesting LPAR is less than the estimated migration cost of the other LPAR then the process passes to block . As previously described block illustrates marking the requesting LPAR as a migration candidate and the process passes to block . Returning to block if the estimated migration cost of the requesting LPAR is not less than the estimated migration cost of the other LPAR then the process passes to block . Block illustrates marking the other LPAR as a migration candidate and the process passes to block . By marking the other LPAR within a host system as the migration candidate the hypervisor next determines whether the other LPAR can be migrated to a remote host system to make room locally for the fulfilling the resource request for the requesting LPAR.

Block illustrates broadcasting the LPAR reservation request for the migration candidate LPAR to the ensemble. Next block illustrates a determination of whether the broker agent receives responses with offers to migrate the LPAR from one or more remote host systems during a waiting period. If no offers are received during the waiting period then the process passes to block . Block illustrates returning a response to the requesting LPAR indicating that the reservation request is denied.

Returning to block if the broker agent receives responses with offers from one or more remote host systems then the process passes to block . Block illustrates a determination whether the broker agent receives any offers that meet the performance parameters in the reservation request. If the broker agent determines that none of the offers meet the performance parameters in the reservation requirement then the process passes to block . If the broker agent determines that at least one offer of the offers meets the performance parameters in the reservation requirement then the process passes to block . Block illustrates selecting the lowest cost bid from the offers meeting the performance parameters. Next block illustrates requesting approval of the selected bids as an offer option from an approving entity for the migration candidate and the process passes to block . In one example where the requesting LPAR is marked as the migration candidate the approving entity may be the LPAR or the hypervisor. In another example where the other LPAR is marked as the migration candidate then the approving entity may be the hypervisor.

Block illustrates a determination whether the approving entity accepts the migration offer for the LPAR marked as the migration candidate. If the approving entity does not accept the migration offer then the process passes to block . If the approving entity does accept the migration offer then the process passes to block . Block illustrates sending a bid acceptance to the selected bidder host system. Next block illustrates calling the partition manager to begin an LPAR migration of the LPAR marked as the migration candidate to the selected bidder remote host system and the process passes to block . Block illustrates a determination whether the other LPAR is marked as the migration candidate. If the other LPAR is not marked as the migration candidate then the process ends. If the other LPAR is marked as the migration candidate then the process passes to block . Block illustrates reserving the resources freed from the migration of the other LPAR for the reservation request and the process ends.

Referring now to a high level logic flowchart illustrates a process and program for managing application initiated negotiations for resources from a legacy application or other application that does not specify a performance parameter in a resource request. In the example the process starts at block and thereafter proceeds to block . Block illustrates an application calling an operating system with a resource request for a particular resource. In the example the application calling the operating system with a resource request in contrast to the example illustrated in block of does not include a performance parameter in the resource request for one of multiple reasons such as the application being a legacy application that does not include the functionality to specify a performance parameter for any resource request the application having the functionality to specify performance parameters for some resource requests but not all resource requests or the application electing not to specify a performance parameter in the resource request. Next block illustrates a determination whether the requested resource is granted by the operating system. If the requested resource is granted by the operating system then the process ends. If the requested request is not granted by the operating system then the process passes to block . Block illustrates calling an error handler and the process ends. In one example an error handler called in block may perform the functions described in starting at block . In another example an error handler called in block may perform the process and program described in starting at block where the error handler may read the response from an operating system to determine whether the response includes a remote offer and alternate options. In the example in for a legacy application or other application that does not specify a performance parameter the negotiation for resources described in and are still performed within an ensemble of host systems where an operating system hypervisor or other component may specify the performance parameter.

As illustrated a cost estimator process starts at block and thereafter proceeds to block . Block illustrates the cost estimator determining whether an incoming migration history header call is received. If an incoming migration history header call is received then the process passes to block . Block illustrates decoding the header to identify a source host system a destination host system a migrated LPAR identifier estimated costs and actual costs. Next block illustrates storing the decoded header information in a history table. Thereafter block illustrates deleting a selection of old migration data for the identified LPAR from the history table based on a configured threshold such as a threshold number of entries about the identified LPAR and the process ends.

As illustrated a cost estimator block starts at block and thereafter proceeds to block . Block illustrates a determination whether a migration header request is received. If a migration header request is received then the process passes to block . Block illustrates selecting the N latest relevant migration entries from the history table for the LPAR ID or the destination ID where N is a value configured for the host system. Next block illustrates encoding the new migration data header with the selected migration entries LPAR ID source ID for the host system and destination ID for the remote host system. Thereafter block illustrates returning the new migration data header to the partition controller. Next block illustrates deleting a selection of oldest table entries about the LPAR based on a configured threshold such as a threshold number of LPAR entries to be stored and the process ends.

Returning to block if the cost estimator finds data then the process passes to block . Block illustrates the cost estimator determining which pricing policy to apply for the host system.

At block if the cost estimator determines that the average avg pricing policy applies then the process passes to block . Block illustrates selecting the mean pricing of the historical data found for the remote host system or target LPAR and the process passes to block .

Returning to block if the cost estimator determines that the optimist pricing policy applies then the process passes to block . Block illustrates selecting the best case pricing the historical data found for the remote host system or target LPAR and the process passes to block .

Returning to block if the cost estimator determines that the pessimist pricing policy applies then the process passes to block . Block illustrates selecting the worst case pricing of the historical data found for the remote host system or target LPAR and the process passes to block .

Block illustrates calculating the migration cost based on the selected historical data. Next block illustrates returning the calculated migration cost as a cost estimate and the process ends.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact occur substantially concurrently or the blocks may sometimes occur in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the one or more embodiments of the invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

While the invention has been particularly shown and described with reference to one or more embodiments it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention.

