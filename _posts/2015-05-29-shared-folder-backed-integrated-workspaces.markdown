---

title: Shared folder backed integrated workspaces
abstract: Disclosed are systems, methods, and non-transitory computer-readable storage media for shared folder backed integrated workspaces. In some implementations, a content management system can provide a graphical user interface (GUI) that integrates communications and content management into a single user interface. The user interface can include mechanisms that allow a user to provide input to generate a new workspace. The user interface can provide a mechanism to allow a user to view conversations related to the workspace and/or content items associated with the workspace. The user interface can present representations of content items associated with the workspace and allow the user to provide input to generate, view, edit, and share content items associated with the workspace.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09395893&OS=09395893&RS=09395893
owner: DROPBOX, INC.
number: 09395893
owner_city: San Francisco
owner_country: US
publication_date: 20150529
---
This application claims the benefit of and priority to U.S. Provisional Patent Application No. 62 136 871 filed on Mar. 23 2015 which is hereby expressly incorporated herein by reference in its entirety.

The present technology pertains to content management systems and more specifically pertains to integrated collaborative environments.

Employees of modern companies use many different software tools to perform a variety of job functions. E mail instant messaging chat and text SMS messaging are all used to communicate with coworkers and project teammates. Different file systems e.g. local machine drives network drives cloud storage etc. are used to keep track of documents media items and other content items that are necessary for performing work or that are the result of work. Different applications are used to view create and edit the various content items used by employees during the workday. While this variety of communication mechanisms digital storage locations and productivity applications adds flexibility to the work environment it also adds complexity and inefficiency when the employee needs to figure out how to communicate with coworkers where work related content items are located and which applications are needed to view create and edit the various content items documents files images media etc. that are necessary for performing the employee s job functions.

Additional features and advantages of the disclosure will be set forth in the description which follows and in part will be obvious from the description or can be learned by practice of the herein disclosed principles. The features and advantages of the disclosure can be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the disclosure will become more fully apparent from the following description and appended claims or can be learned by the practice of the principles set forth herein.

Disclosed are systems methods and non transitory computer readable storage media for shared folder backed integrated workspaces. In some implementations a content management system can provide a graphical user interface GUI that integrates communications and content management into a single user interface. The user interface can include mechanisms that allow a user to provide input to generate a new workspace. The user interface can provide a mechanism to allow a user to view conversations related to the workspace and or content items associated with the workspace. The user interface can present representations of content items associated with the workspace and allow the user to provide input to generate view edit and share content items associated with the workspace.

In some implementations an online shared folder of a content management system can serve as a repository for content items and messages associated with the workspace represented by the graphical user interface. For example the messages comments or other communications presented on the workspace GUI can be stored in the online shared folder and synced with a local shared folder on a user s client device. The content items discussed shared created and or edited through the workspace GUI can be stored in the shared folder. The shared folder can be shared with members e.g. users employees project teammates etc. of the workspace. For example the messages content items and other objects stored in one user s local copy of the online shared folder on the user s device can be synchronized with other users local shared folders on the other users devices. In some implementations the workspace GUI can be generated based on the contents of the online and or local shared folder. For example the workspace GUI can represent the contents e.g. messages content items etc. of the online and or local shared folder.

In some implementations a user can create a new content item using a browser interface to an online content management system. The user can specify the type of content item e.g. document to create and a name for the content item. The content item type and name can be sent to the content management system. The content management system can store templates corresponding to each type of document that can be created. Upon receipt of the request to create the new content item the content management system can copy the template corresponding to the requested content item type rename the template copy to the specified name and save the new content item to the users folder on the content management system. The online folder can then be synchronized with corresponding folders on the user s device. The user can access the new content item from the local folder to view and edit the new content item.

In some implementations when an authorized user is accessing a content item in the workspace through a web browser on a client device the web browser can recognize that the user has a local version of the content item in a local folder e.g. corresponding to the online shared folder on the client device and present an option to the user allowing the user to select a preview e.g. web delivered image version of the content item or select to open the local version of the content item in a native application on the client device. When the user selects to open the local version of the content item in the native application the user can edit the content item and all changes will be automatically synced back to the online shared folder.

In some implementations the workspace can integrate email and workspace messaging e.g. chat features so that workspace members can use email and workspace messaging interchangeably. The workspace can be assigned a workspace email address email mailing list . Emails addressed to from the workspace email address can be obtained e.g. from user s email account from email server etc. and workspace chat messages can be generated for each email address and added to the workspace message stream. When an authorized user generates a workspace chat message an email corresponding to the workspace chat message e.g. including the message content can be generated and sent to subscribers e.g. authorized users of the shared folder to the workspace email mailing list.

In some implementations email messages sent to a mail list associated with the shared folder can be transformed into workspace e.g. chat stream messages. When email messages contain attachments the attachments can be stripped from the email messages stored in the shared folder and the message can be presented in the message stream on the workspace user interface with a link to the attachment stored in the online shared folder.

In some implementations email messages associated with content items can be inserted into the content items as comments. For example if an email includes a content item attachment the body text of the email message can be inserted into the content item as a comment. If an email refers to a content time or is in an email thread associated with a content item then the email can be inserted into the content item as a comment. The comments inserted into a content item can be presented on a user interface when the user views the content item.

In some implementations a user can select a content item upon selection an options user interface can be displayed where the user can select a discuss option. When the user selects the discuss option the content item can be presented in a new message in the message stream and the user can enter a message to start a conversation e.g. message thread about the selected content item.

In some implementations comments in native document e.g. word document comments or previews e.g. metadata are added to the workspace message stream as conversations about the content item. When edits are made to content items a new message can be generated to indicate what changes were made and the new message can be added to the message stream or to a message thread corresponding to the content item.

In some implementations when a user adds a content item to a workspace message e.g. a chat post the content item is automatically added to the shared folder for the workspace and synchronized with the client devices of authorized users of the shared folder. In some implementations adding the content item to the chat message or post can trigger e.g. initiate synchronization of the content item with the client devices of workspace members.

In some implementations conversations specific to a content item across different conversation modes e.g. email workspace messaging chat text message etc. can be aggregated and associated with the content item. The user can then view all conversations specific to the content item in a single location. For example a user could click on a content item to trigger a conversation view of the content item. In the conversation view the user will see all conversations specific to that content item e.g. from email chat comments in documents etc. .

In some implementations a workspace user interface can present a message stream e.g. messages from various users arranged in time order . The message stream can include individual messages and threaded messages. Threaded messages can be for example multiple related messages e.g. original message reply message reply to reply in a conversation. When an individual message is received the default behavior of the message stream can be to scroll existing messages and add the new message. However when a user is interacting with an existing message or message thread e.g. hovering a cursor over an existing message entering a reply to an existing message the scrolling behavior is stopped e.g. the message stream is frozen while the user interacts with the existing message or message thread. Once the user stops interacting with the existing message the scrolling behavior of the message stream can be resumed.

In some implementations a workspace member can mention an external user in a workspace message. The online content management system can determine that an external user has been mentioned obtain contact information for the external user and send the chat message to the external user using a communication mechanism identified in the external user s contact information e.g. email text message sms message etc. . The external user can reply to the chat message using the same communication mechanism. When the external user s reply is received by the content management system the content management system can generate a chat message that includes the content of the external user s reply.

Various embodiments of the disclosure are discussed in detail below. While specific implementations are discussed it should be understood that this is done for illustration purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without parting from the spirit and scope of the disclosure.

The disclosed technology addresses the need in the art for an integrated collaborative workspace that provides a single user interface to communicate with coworkers generate and access work product e.g. files media documents digital content items etc. and access the software applications that are necessary to conduct business in the modern world.

In system a user can interact with content management system through client devices . . . collectively connected to network by direct and or indirect communication. Content management system can support connections from a variety of different client devices such as desktop computers mobile computers mobile communications devices e.g. mobile phones smart phones tablets smart televisions set top boxes and or any other network enabled computing devices. Client devices can be of varying type capabilities operating systems etc. Furthermore content management system can concurrently accept connections from and interact with multiple client devices .

A user can interact with content management system through a client side application installed on client device . In some embodiments the client side application can include a content management system specific component. For example the component can be a stand alone application one or more application plug ins and or a browser extension. However the user can also interact with content management system through a third party application such as a web browser that resides on client device and is configured to communicate with content management system . In either case the client side application can present a user interface UI for the user to interact with content management system . For example the user can interact with the content management system through a client side application integrated with the file system or through a webpage displayed using a web browser application.

Content management system can make it possible for a user to store content as well as perform a variety of content management tasks such as retrieve modify browse and or share the content. Furthermore content management system can make it possible for a user to access the content from multiple client devices . For example client device can upload content to content management system through network . The content can later be retrieved from content management system using the same client device or some other client device .

To facilitate the various content management services a user can create an account with content management system . The account information can be maintained in user account database . User account database can store profile information for registered users. In some cases the only personal information in the user profile can be a username and or email address. However content management system can also be configured to accept additional user information.

User account database can also include account management information such as account type e.g. free or paid usage information e.g. file edit history maximum storage space authorized storage space used content storage locations security settings personal configuration settings content sharing data etc. Account management module can be configured to update and or obtain user account details in user account database . The account management module can be configured to interact with any number of other modules in content management system .

An account can be used to store content such as digital data documents text files audio files video files etc. from one or more client devices authorized on the account. The content can also include folders or other mechanisms of grouping content items together with different behaviors such as collections playlists albums etc. For example an account can include a public folder that is accessible to any user. The public folder can be assigned a web accessible address. A link to the web accessible address can be used to access the contents of the public folder. In another example an account can include a photos folder that is intended for photos and that provides specific attributes and actions tailored for photos an audio folder that provides the ability to play back audio files and perform other audio related actions or other special purpose folders. An account can also include shared folders or group folders that are linked with and available to multiple user accounts. The permissions for multiple users may be different for a shared folder. For example the permissions settings associated with a shared folder can indicate that only certain users e.g. users associated with a business project team workspace etc. can access the shared folder.

The content can be stored in content storage . Content storage can be a storage device multiple storage devices or a server. Alternatively content storage can be a cloud storage provider or network storage accessible through one or more communications networks. Content management system can hide the complexity and details from client devices so that client devices do not need to know exactly where the content items are being stored by content management system . In one variation content management system can store the content items in the same folder hierarchy as they appear on client device . However content management system can store the content items in its own order arrangement or hierarchy. Content management system can store the content items in a network accessible storage SAN device in a redundant array of inexpensive disks RAID etc. Content storage can store content items using one or more partition types such as FAT FAT32 NTFS EXT2 EXT3 EXT4 ReiserFS BTRFS and so forth.

Content storage can also store metadata describing content items content item types and the relationship of content items to various accounts folders or groups. The metadata for a content item can be stored as part of the content item or can be stored separately. In one variation each content item stored in content storage can be assigned a system wide unique identifier.

Content storage can decrease the amount of storage space required by identifying duplicate files or duplicate segments of files. Instead of storing multiple copies content storage can store a single copy and then use a pointer or other mechanism to link the duplicates to the single copy. Similarly content storage can store files more efficiently as well as provide the ability to undo operations by using a file version control that tracks changes to files different versions of files including diverging version trees and a change history. The change history can include a set of changes that when applied to the original file version produce the changed file version.

Content management system can be configured to support automatic synchronization of content from one or more client devices . The synchronization can be platform agnostic. That is the content can be synchronized across multiple client devices of varying type capabilities operating systems etc. For example client device can include client software which synchronizes through a synchronization module at content management system content in client device s file system with the content in an associated user account. In some cases the client software can synchronize any changes to content in a designated folder and its sub folders such as new deleted modified copied or moved files or folders. The client software can be a separate software application can integrate with an existing content management application in the operating system or some combination thereof. In one example of client software that integrates with an existing content management application a user can manipulate content directly in a local folder while a background process monitors the local folder for changes and synchronizes those changes to content management system . Conversely the background process can identify content that has been updated at content management system and synchronize those changes to the local folder. The client software can provide notifications of synchronization operations and can provide indications of content statuses directly within the content management application. Sometimes client device may not have a network connection available. In this scenario the client software can monitor the linked folder for file changes and queue those changes for later synchronization to content management system when a network connection is available. Similarly a user can manually stop or pause synchronization with content management system .

A user can also view or manipulate content through a web interface generated and served by user interface module . For example the user can navigate in a web browser to a web address provided by content management system . Changes or updates to content in the content storage made through the web interface such as uploading a new version of a file can be propagated back to other client devices associated with the user s account. For example multiple client devices each with their own client software can be associated with a single account and files in the account can be synchronized between each of the multiple client devices .

Content management system can include a communications interface for interfacing with various client devices and can interact with other content and or service providers . . . collectively through an Application Programming Interface API . Certain software applications can access content storage through an API on behalf of a user. For example a software package such as an app on a smartphone or tablet computing device can programmatically make calls directly to content management system when a user provides credentials to read write create delete share or otherwise manipulate content. Similarly the API can allow users to access all or part of content storage through a web site.

Content management system can also include authenticator module which can verify user credentials security tokens API calls specific client devices and so forth to ensure only authorized clients and users can access files. Further content management system can include analytics module that can track and report on aggregate file operations user actions network usage total storage space used as well as other technology usage or business metrics. A privacy and or security policy can prevent unauthorized access to user data stored with content management system .

Content management system can include sharing module for managing sharing content publicly or privately. Sharing content publicly can include making the content item accessible from any computing device in network communication with content management system . Sharing content privately can include linking a content item in content storage with two or more user accounts so that each user account has access to the content item. The sharing can be performed in a platform agnostic manner. That is the content can be shared across multiple client devices of varying type capabilities operating systems etc. The content can also be shared across varying types of user accounts.

In some embodiments content management system can be configured to maintain a content directory identifying the location of each content item in content storage . The content directory can include a unique content entry for each content item stored in the content storage.

A content entry can include a content path that can be used to identify the location of the content item in a content management system. For example the content path can include the name of the content item and a folder hierarchy associated with the content item. For example the content path can include a folder or path of folders in which the content item is placed as well as the name of the content item. Content management system can use the content path to present the content items in the appropriate folder hierarchy.

A content entry can also include a content pointer that identifies the location of the content item in content storage . For example the content pointer can include the exact storage address of the content item in memory. In some embodiments the content pointer can point to multiple locations each of which contains a portion of the content item.

In addition to a content path and content pointer a content entry can also include a user account identifier that identifies the user account that has access to the content item. In some embodiments multiple user account identifiers can be associated with a single content entry indicating that the content item has shared access by the multiple user accounts.

To share a content item privately sharing module can be configured to add a user account identifier to the content entry associated with the content item thus granting the added user account access to the content item. Sharing module can also be configured to remove user account identifiers from a content entry to restrict a user account s access to the content item.

To share content publicly sharing module can be configured to generate a custom network address such as a uniform resource locator URL which allows any web browser to access the content in content management system without any authentication. To accomplish this sharing module can be configured to include content identification data in the generated URL which can later be used to properly identify and return the requested content item. For example sharing module can be configured to include the user account identifier and the content path in the generated URL. Upon selection of the URL the content identification data included in the URL can be transmitted to content management system which can use the received content identification data to identify the appropriate content entry and return the content item associated with the content entry.

In addition to generating the URL sharing module can also be configured to record that a URL to the content item has been created. In some embodiments the content entry associated with a content item can include a URL flag indicating whether a URL to the content item has been created. For example the URL flag can be a Boolean value initially set to 0 or false to indicate that a URL to the content item has not been created. Sharing module can be configured to change the value of the flag to 1 or true after generating a URL to the content item.

In some embodiments sharing module can also be configured to deactivate a generated URL. For example each content entry can also include a URL active flag indicating whether the content should be returned in response to a request from the generated URL. For example sharing module can be configured to only return a content item requested by a generated link if the URL active flag is set to 1 or true. Thus access to a content item for which a URL has been generated can be easily restricted by changing the value of the URL active flag. This allows a user to restrict access to the shared content item without having to move the content item or delete the generated URL. Likewise sharing module can reactivate the URL by again changing the value of the URL active flag to 1 or true. A user can thus easily restore access to the content item without the need to generate a new URL.

Content management system can include workspace server . Workspace server can be configured to manage shared folder backed workspaces. For example workspace server can receive workspace related messages and content items and store the messages and content items in a shared folder associated with the workspace. Workspace server can monitor the workspace shared folder and send state information describing the current state of the shared folder e.g. messages content etc. to client devices so that client devices can generate and display graphical user interfaces that allow users to interact with the workspace. For example workspace server can be a webserver that can serve browser based workspace graphical user interfaces e.g. web pages web applications etc. to browsers running on user client devices . Workspace server can be a server that delivers shared folder state information to workspace client applications e.g. other than a browser so that the workspace client applications can generate a graphical user interface representing the state of the workspace and or content in the shared folder associated with the workspace. The various functions of workspace server are described in further detail below.

While content management system is presented with specific components it should be understood by one skilled in the art that the architectural configuration of system is simply one possible configuration and that other configurations with more or less components are also possible.

In some implementations workspace server can generate a workspace based on shared folder . For example the user of client device can view the contents of shared folder through a web browser interface to content management system as described above. While viewing the contents of shared folder in the browser interface displayed on client device the user can provide input e.g. select a graphical element such as a button or link to cause workspace server to generate a workspace based on shared folder currently displayed on the web browser interface. For example the web browser on client device can send a message to workspace server through network requesting that a workspace be generated based on shared folder . Workspace server can generate the workspace based on shared folder and send workspace state information to client device so that client device can generate and display workspace graphical user interface e.g. WS GUI . For example WS GUI can be a webpage generated by workspace server and served to a web browser running on client device . WS GUI can be a graphical user interface of a native workspace client application running on client device . Similarly a user of client device can request a workspace based on shared folder and workspace server can send workspace state information to client device so that client device can generate and display workspace graphical user interface on client device .

In some implementations WS GUI or WS GUI can view and interact with shared folder through workspace server . For example a user can provide input to WS GUI to cause WS GUI to request from workspace server a preview image e.g. a representation of content of a content item stored in shared folder . Workspace server can deliver the preview image to WS GUI so that WS GUI can display the preview image of the content item on a display of client device . In some implementations WS GUI can interact with shared folder by directly accessing corresponding shared folder resident on client device . For example since shared folder is synchronized with shared folder the user of WS GUI can view or manipulate shared folder as if it were shared folder . For example instead of requesting from workspace server a preview image of a content item in shared folder WS GUI can access a copy of the content item stored locally in shared folder . Thus sometimes WS GUI will access the local shared folder when interacting with a workspace and sometimes WS GUI will request content or state information associated with a workspace e.g. associated with shared folder from workspace server .

In some implementations WS GUI can include a selectable graphical element for creating a new workspace. For example a user can select graphical element e.g. a button link etc. to cause WS GUI e.g. the browser or native application to send a message to workspace server requesting that a new workspace be generated. The user can specify e.g. through a graphical user interface not shown the name for the new workspace and an email address e.g. mailing list group email address etc. for the workspace. The message to workspace server can include the specified name and email address. Upon receiving the message workspace server can generate a shared folder e.g. shared folder for the workspace and an email account e.g. mail list for the workspace. Workspace server can send workspace e.g. shared folder state information to WS GUI for presentation to the user. For example workspace state information can include information about members of the workspace e.g. member profiles online status etc. content items in the shared folder and or messages generated by members of the workspace among other things.

In some implementations WS GUI can include a listing of workspaces to which the user belongs. For example the user of WS GUI may be a member of multiple workspaces e.g. Engineering Marketing Social etc. . The user can select one of the workspaces to view state information about the selected workspace. In the example WS GUI the user has selected the Engineering workspace. Thus WS GUI currently presents state information about the Engineering workspace. The workspaces listed on WS GUI can include an indicator to notify the user when the state of a workspace has changed. For example the Marketing workspace has a dot to the left of the workspace name indicating that something has changed within the workspace. For example the change could be that a content item associated with the workspace e.g. in the corresponding workspace shared folder has been added modified or deleted. The change could be that a new message has been received in the workspace for example.

In some implementations WS GUI can identify members of the displayed workspace. For example WS GUI can include graphical elements that represent and or identify members of the workspace and or users who have access to the shared folder associated with the workspace. For example each graphical element can present an image representing a corresponding member of the workspace. The user of WS GUI can select a graphical element to view information about the corresponding member of the workspace. For example a graphical user interface can be presented in response to selection of one of the graphical elements that displays a user profile e.g. name contact information online status etc. corresponding to the member associated with the selected graphical element . A graphical element can include an online status indicator e.g. green dot highlighting etc. that indicates that the member corresponding to the graphical element is online. For example when the member is online graphical element will display the online status indicator. When the member is offline graphical element will not display the online status indicator.

In some implementations WS GUI can include graphical element for adding a member to the workspace. For example a user can select graphical element to cause WS GUI to present a graphical user interface for adding a new member to the workspace and or shared folder associated with the workspace. The user can input the new member s name email address telephone number and or other data e.g. company department project etc. associated with the new member. WS GUI can send the new member s information to workspace server . Workspace server can add the new member to the workspace and share the shared folder associated with the workspace with the new member. Workspace server can add the new member to the email mailing list for the workspace.

In some implementations WS GUI can present content items stored in the shared folder of the displayed workspace. For example WS GUI can present graphical elements that represent content items stored in shared folder corresponding to the Engineering workspace. The user can select a graphical element to view the content item and or messages corresponding to the selected graphical element as described further below. In some implementations the presented graphical elements can represent all of the content items in the shared folder. In some implementations the graphical elements can represent content items selected based on usage statistics associated with the respective content items. For example the presented graphical elements can represent the top five most recently accessed content items. The presented graphical elements can represent the top ten most frequently accessed content items. The presented graphical elements can represent the top six content items accessed by the most number of workspace members.

In some implementations graphical elements can include representations of one or more bookmarked content items in the shared folder corresponding to the workspace. For example certain content items may be more important than others e.g. more frequently accessed a must read document for workspace members etc. . A user can designate a content item as an important content item to have the content item flagged bookmarked or pinned to the top of the list of graphical elements presented on WS GUI . Workspace server can automatically designate a content item as an important content item based on a variety of factors. For example workspace server can determine which content items are accessed the most frequently or by the most members of the workspace and automatically designate the content items as important content items. The important content items can be pinned at the top of the list of graphical elements so that the important content items are always easily accessible through WS GUI . The bookmarked content items can be the same for each member of the workspace. For example every workspace member will see the same bookmarked content items when each member launches WS GUI . An important content item can be associated with a graphical indicator e.g. a flag a pin bookmark etc. .

In some implementations WS GUI can include graphical elements for adding a new content item to the workspace. For example a user can select a graphical element to add a new folder to shared folder corresponding to the displayed workspace. A user can select a graphical element to add a new content item e.g. file media item etc. to the workspace. Upon selection of graphical element a graphical user interface can be presented to prompt the user to select an existing content item in the file system of the user s client device for inclusion in the workspace. The user can select an existing content item on the user s client device to have that content item stored in the local shared folder corresponding to the workspace. WS GUI can send a message to workspace server indicating that a new content item has been added to shared folder to cause the new content item in shared folder to be synchronized with the corresponding shared folders and . Thus WS GUI on client device can be updated to display the new content item in the workspace.

Upon selection of graphical element a graphical user interface can be presented to prompt the user to create a new content item in the workspace. The user can select the type of content item and provide a name for the content item. WS GUI can send the content item type and name to workspace server . Workspace server can generate a content item of the specified type and having the specified name and store the new content item in shared folder associated with the workspace as described further below.

In some implementations WS GUI can include message stream . For example message stream can include messages generated from a variety of sources such as email chat text message comments on content items comments in content items and workspace status updates. For example when a user adds a content item to the workspace as described above a message can be added to message stream indicating that the content item was added. Each message in the message stream can identify the workspace member who generated the message indicate when the message was generated and who has seen the message. For example the workspace message can indicate how many workspace members have seen the message. The workspace message can identify which members have seen the message.

In some implementations the user of WS GUI can generate a new message by inputting e.g. typing pasting dictating etc. a message into graphical element . Upon providing input e.g. selecting a return button selecting a send button etc. indicating that the user is finished composing the message the message can be added to message stream . In some implementations new messages are added to the bottom of message stream so that as a user reads towards the top of message stream the messages become increasingly older. For example message stream can behave like a typical chat user interface where new messages are posted at the bottom and the older messages scroll up as new messages are added.

In some implementations a user of WS GUI can add a content item to message stream by selecting graphical element . For example a user can compose a message using graphical element and add a content item to the message by selecting graphical element . Upon selection of graphical element a file browser interface can be presented that allows the user to select a content item from the client device s local file system from the shared folder associated with the workspace and or from a network resource e.g. the Internet . When the composed message is displayed in message stream a link to the selected content item and a representation of the selected content item can be displayed in the message. For example representation can be a preview image of the linked content item. The preview image can be live. For example the preview image can be updated when the linked content changes or is updated. If the linked content is a content item in the shared folder the preview image can be updated to reflect changes in the content item. If the linked content is a webpage or other web content the preview image can be updated to reflect the current state of the webpage or web content. If the content item is not already in the shared folder associated with the workspace the selected content item can be copied into the local shared folder e.g. shared folder on client device and WS GUI can trigger e.g. almost immediately synchronization of the newly added content item with shared folders and as described above so that each member of the workspace can access the content item referenced in the new message displayed in message stream . If the link is associated with network content e.g. an Internet web page then the link can be stored in a Links folder of the workspace shared folder.

In some implementations message stream can include individual messages. For example message is an individual message from member Bob. Message can indicate the member who generated the message the time when the message was generated how many other members have viewed the message and the message content e.g. something smart about engineering .

In some implementations message stream can include message thread . For example a message thread is a group of related messages within the message stream. A message thread is typically created when one member replies to a message generated by another user. For example in message thread Fred posted a message in message stream that includes a content item media.mp4. Bob replied to Fred s message thereby creating message thread . For example like Bob member Dave reply to Fred s message by selecting Reply graphical element associated with Fred s message and inputting a reply message into a graphical element in message thread to add a message to message thread . A message thread can be identified in message stream by a line connecting the messages in the message thread for example.

In some implementations message stream can combine chat and threaded message behaviors in the same graphical user interface. For example when members generate individual messages e.g. using graphical element message stream can behave like a typical chat user interface where new messages are presented at the bottom of message stream and older messages scroll up. However when a user interacts with e.g. hovers a cursor or pointer over composes a reply to provides some active or passive input to etc. an existing message or an existing message thread e.g. message thread the message stream will stop the upward scrolling behavior while the user is interacting with the existing message or message thread. Thus while the user is composing a reply to a message or message thread the messages in message stream will remain e.g. freezes in place. Once the user is no longer interacting with a message or message thread message stream can resume scrolling messages as new messages are generated in chat like fashion.

In some implementations a user can like a message displayed in message stream . For example a user can select Like graphical element to express approval of a message generated by another member of the workspace presented on WS GUI . The members who have liked a message can be indicted using graphical element .

In some implementations WS GUI can include search graphical element . For example a user can enter search terms into graphical element to cause WS GUI to perform a search based on the entered search terms. The search can be a workspace search that searches for content items and messages within the current workspace that match the search terms. The search can include content items messages email and other data on the user s local device. The search can be a global search that will search the workspace the user s local device content management system and network resources e.g. the Internet for content that matches the search terms entered by the user. The search results can be displayed on a graphical user interface not shown and the user can select items in the search results to preview the items or add the items to the current workspace.

In some implementations a user can view new content item through a web browser. For example once WS GUI is notified that new content item is available in shared folder on server device WS GUI can present new content item in the browser interface.

In some implementations a user can view new content item in a native application on client device . For example once WS GUI is notified that new content item is available in shared folder on client device WS GUI can prompt the user for input specifying how new content item should be displayed e.g. in the browser or in native application . In some implementations the user can specify native application for displaying new content item . For example if new content item is a word processing document native application can be a word processing application installed on client device and appropriate for presenting and editing the word processing document on client device . Thus the user can view and edit new content item using a native application executing locally on client device . Similarly when the user selects a content item represented by graphical elements on WS GUI the user can be given the option to open the selected content item in the web browser or in a native application.

At step client device can receive user input to generate a new content item. For example WS GUI can receive user input selecting graphical element . In response to the user s selection of graphical element WS GUI can present a prompt requesting that the user select a content item type and specify a name for the new content item. WS GUI can receive user input specifying the content item type and the name for the new content item.

At step client device can send a new content item request to workspace server . For example client device can send the user specified content item type and name to workspace server .

At step client device can receive a new content item in local shared folder on client device . For example content management system can synchronize shared folder on client device with shared folder on server device to deliver the new content item from server device to client device as described above.

At step client device can receive a notification that indicates that the new content item is available for viewing in the workspace. For example WS GUI can receive a notification from workspace server that the new content item is available in workspace shared folder . WS GUI can receive a notification from workspace server that the new content item has been synchronized with shared folder on client device . Alternatively WS GUI can detect the presence of the new content item in local shared folder . For example WS GUI can monitor shared folder for changes such as the addition of the new content item.

At step client device can receive user input selecting a preview image or native application presentation of the new content item. For example once WS GUI receives a notification that the new content item is available in the workspace WS GUI can present a prompt asking the user how the user would like to view the new content item. The prompt can present options for viewing a preview image of the new content item or opening and viewing the new content item in a native application on client device .

At step client device can present the new content item according to the user s selection. For example if the user selects to view a preview image workspace server can deliver a preview image of the new content item stored in shared folder to WS GUI for presentation to the user on client device . If the user selects to view the content item in a native application WS GUI can invoke a native application appropriate for the type of the new content item on client device . For example if the new content item type is a spreadsheet then WS GUI can invoke a spreadsheet application on client device for displaying the new content item stored in shared folder on client device . For example WS GUI can present the preview image and native application viewing options to a user anytime the user selects to open or view a content item within a workspace.

At step server device can generate a copy of an existing content item template. For example server device can store templates for each type of content item that can be generated by workspace server . Workspace server can determine from which template to generate the new content item based on the content item type in the request received at step . Workspace server can select a content item template based on the requested content item type and copy the content item template to make a new content item.

At step server device can rename the copy of the content item template according to the name specified in the request received at step . For example workspace server can assign to the new content item the content item name specified in the request received at step .

At step server device can store the template copy in shared folder on server device . For example workspace server can store the new content item in shared folder .

At step server device can trigger synchronization of shared folder on server device and shared folder on client device . For example upon storing the new content item in shared folder workspace server can command content management system to synchronize shared folder and shared folder so that the client devices associated with the workspace can be updated with the new content item. By triggering the synchronization upon creating and storing the new content item client devices e.g. users can have near immediate access to the newly generated content item.

At step server device can notify client device that the new content item is available. For example workspace server can notify WS GUI that the new content item is available in shared folder on server . Upon synchronization of shared folder on client device with shared folder on server device workspace server can notify WS GUI that the new content item is available locally on client device . Thus client device can open and display the new content item to the user in a native application associated with the new content item type.

In some implementations workspace server can convert email messages into workspace messages. For example a user e.g. workspace member can e.g. through WS GUI grant workspace server access to an email account of the user on email server . The user can provide workspace server with an account identifier e.g. email address and credentials e.g. user name password . Workspace server can use the account identifier and credentials to access the user s email account.

In some implementations workspace server can analyze emails in the user s email account to determine which emails are workspace related. For example a workspace can be associated with an email mailing list e.g. an email address that can be used to send and receive emails to from members of a group as described above. Workspace server can determine which emails in the user s email account are associated with the mailing list e.g. addressed to or from the email address for the mailing list . Workspace server can convert the emails associated with the mailing list into workspace messages and add the workspace messages to the workspace e.g. to shared folder so that the messages are displayed on WS GUI . For example workspace server can extract the content of an email and insert the content of the email into a workspace message object for display on WS GUI .

In some implementations workspace server can store email attachments in shared folder . For example user email account can receive an email from a workspace mailing list that includes an attachment e.g. content item media file etc. . Email server can send the email with attachment to email client for presentation to a user of client device . Workspace server can obtain email with attachment from user email account . For example because email is associated with the workspace mailing list e.g. email was received from the mailing list workspace server will obtain email from user email account .

Once workspace server obtains email workspace server will store email attachment in shared folder and generate workspace message that includes the contents of email and a link to email attachment in shared folder . Workspace server can then trigger synchronization of shared folders and so that shared folder can obtain a copy of email attachment . Workspace server can send workspace message to WS GUI so that the message and the link to attachment can be displayed in message stream . For example workspace message displayed in workspace stream can include the contents of email a link to attachment stored in shared folder and an embedded preview image of the attachment. In some implementations the contents e.g. the body the textual message portion of email can be tracked or associated with attachment e.g. content item as comments on attachment . When attachment is later opened and viewed by the user the comments e.g. email message can be presented to the user as described further below.

In some implementations workspace server can convert workspace messages into email messages. For example a user can generate a new workspace message using graphical element of WS GUI and add a content item to the message using graphical element as described above. The workspace message can include a link to the content item for example. The new workspace message can be sent from WS GUI i.e. WS GUI to workspace server . Workspace server can generate a new email that includes the contents of the workspace message including the link to the content item in shared folder and send the new email to the email mail list associated with the workspace. Because the user is associated with the mail list the new email with the link to the content item will be delivered to the user email account and ultimately delivered to email client .

For example by sending links in emails instead of attaching content items to emails the amount of storage needed to store emails can be reduced. Additionally users no longer need to worry about attachment size limits when using links to content items in shared folders rather than attaching large files. Further users can use the links in emails to obtain the latest version of a content item instead of only having access to a static outdated version of the content item.

In some implementations links allow workspace owners administrators users to have more control over access to content items. For example a user can disable a link when the user no longer wishes others to have access to a content item. The user can specify expiration dates for links. The user can restrict access to links to specified users or specified client devices.

In some implementations the user can specify options for when to generate emails from workspace messages. For example a user e.g. workspace member can specify that the user should only receive emails about initial workspace messages e.g. individual message or first messages in a message thread . The user can specify that the user should only receive emails about messages in which the user is mentioned e.g. mentioned Bob Steve etc. . The user can specify that the user should only receive emails about messages when another workspace member likes a workspace message originated by the user. Thus the user can avoid being overwhelmed by workspace emails generated for every new workspace message in the workspace.

At step server device can obtain email associated with the workspace from the user s email account. For example the workspace can have an email address. The email address can be a mailing list address used to send and receive emails from members of the workspace. Workspace server can use the email account identifier and credentials supplied by the user to access the user s email account. Workspace server can analyze the emails in the user s email account to determine which emails are associated with the workspace email address. Workspace server can obtain copies of each email that is associated with the workspace email address.

At step server device can store email attachments in the workspace shared folder. For example workspace server can determine which emails obtained from the user s email account have attachments. If an email does not have an attachment then the method can progress to step . If an email does have an attachment then the attachment can be stored in the shared folder associated with the workspace.

At step server device can generate a workspace message that includes a link to the attachment stored in the workspace s shared folder. For example workspace server can extract the body e.g. textual content of the email from the email and generate a new workspace message based on the content of the email. If the email has an attachment a link to the attachment stored in the workspace s shared folder can be generated and inserted in to the new workspace message.

At step server device can trigger synchronization of the server shared folder with corresponding shared folders on client devices. For example workspace server can send a command to content management system to cause content in the shared folders and of the workspace to be synchronized. Thus each shared folder and in the workspace can be updated to include the email attachment stored in the workspace shared folder.

At step server device can send the new workspace message to client devices and . For example workspace server can send the new workspace message e.g. with link to stored attachment to WS GUI on each client device. WS GUI can display the workspace message and or the link to the stored attachment in message stream for example. The workspace message can include a live preview image of the linked content as described above.

At step client device can receive user input generating a new workspace message with a link to content. For example WS GUI can receive user input to generate a new workspace message and link a content item to the workspace message as described above with reference to .

At step client device can copy the linked content or the link into the shared folder of client device . For example WS GUI can copy the linked content or the link into the workspace shared folder on client device .

At step client device can trigger synchronization of shared folder of client device with shared folder of server device . For example WS GUI can send a message to workspace server to trigger synchronization of shared folder and shared folder . Upon receiving the synchronization request workspace server can send a command to content management system to cause content management system to synchronize the shared folders. By triggering a synchronization of the shared folders WS GUI can ensure that the linked content item will be available to the recipient of the email generated at step below.

At step client device can send the workspace message to workspace server . For example WS GUI can send the workspace message to workspace server .

At step server device can trigger synchronization of shared folder of server device and shared folder of client device . For example if the workspace message includes a link to a content item in shared folder workspace server can determine whether the linked content item exists in shared folder . If the linked content item does not exist in shared folder on server device then workspace server can trigger synchronization of shared folder and shared folder so that shared folder will include the linked content item already stored in shared folder of client device . In some implementations either step of process or step of process will be performed. Step and step both provide for synchronizing shared folders when a workspace message that links content is to be converted into an email. However only one of the steps or are necessary to ensure that the linked content is available in shared folder on server device and other shared folders on other client devices .

At step server device can generate an email including the workspace message content and the link. For example workspace server can generate an email that includes the content of the workspace message and the link to the linked content.

At step server device can send the generated email to the workspace mailing list. For example workspace server can send the email generated based on the workspace message to the workspace mailing list so that members of the workspace can receive the workspace message as an email. The email can be delivered to the members of the workspace mailing list according to each member s preferences as described above.

In some implementations workspace server can send workspace messages to external users who are not members of a workspace. For example a workspace member can generate a workspace message as described above and mention an external user. For example the external user can be at mentioned e.g. Sue in a workspace message. If the mentioned external user is not one of the members of the workspace workspace server can access the email accounts of the members of the workspace to obtain contact information e.g. email address telephone number etc. for the mentioned external user. If workspace server is unable to locate contact information for the mentioned external user workspace server can send a message to WS GUI to cause WS GUI to prompt the workspace member for contact information for the external user mentioned in the workspace message. The workspace member can input contact information e.g. email address telephone number etc. into WS GUI . WS GUI can send the contact information to workspace server . Workspace server can send the workspace message in which the external user was mentioned to the external user using the contact information provided by the workspace member. For example workspace server can send the external user an email or text message e.g. SMS that includes the content of the workspace message in which the external user was mentioned. If the workspace message includes a link to content the external user can access the content e.g. through a web browser even though the external user is not a member of the workspace.

In some implementations an external user can add a workspace message to message stream . For example the external user can reply to an email or text message generated by workspace server . Workspace server can convert the email or text message reply into a workspace message and post the workspace message in message stream .

In some implementations a new message thread can be generated to discuss a selected content item. For example in response to the user selecting discussion option message thread can be created in the message stream displayed on WS GUI . As can be seen in workspace member Dave started the discussion thread for Content Item. Preview image corresponding to the content item is displayed in message thread proximate to Dave s initial message. Subsequently Bob and Dave have added workspace messages to message thread discussing the content item. While the example discussion described above occurs inline with other messages in the message stream a separate user interface can be presented to discuss the content item. For example user interface of below can be presented to facilitate discussion of the selected content item.

In some implementations graphical element can include options for opening the content item corresponding to graphical element . For example the options for opening a content item can include a selectable option for opening a preview image of the content item as described above. The options for opening a content item can include a selectable option for opening the content item in a native application running on the user s client device as described above. Upon receiving a user selection of either option or option WS GUI will cause the corresponding content item to be displayed in either the native application or a preview image as described above.

In some implementations comments can present comments associated with the selected content item collected from a variety of sources. For example workspace server can collect comments related to a selected content item from all available sources and send the collected comments to WS GUI for display in comments area . For example comments can include comments made about the selected content item in message stream . Comments can include comments made about the selected content item made in workspace member emails. Comments can include comments obtained from within the selected content item. For example some word processing applications allow users to generate comments and track changes inside a document. These internal comments and modifications can be extracted from the document and presented in comments . In some implementations comments can include change information such as identifying when a content item was created modified etc. Comments can identify what changes were made to the selected content item.

In some implementations graphical element can include graphical element for facilitating conversations about the currently displayed content item. For example a user can input a comment into graphical element and submit the comment to cause the comment to appear in comment area . Each user can comment on and discuss the currently displayed content item using graphical element and comments are .

In some implementations comments collected by workspace server can be added to the corresponding content item. For example if the content item is a word processing document that supports internal comments the comments collected from the variety of sources by workspace server can be added to the word processing document as internal comments.

At step workspace server can store the message as a comment for the content item. For example when workspace server determines that a message is associated with a content item workspace server can store the message in comment metadata corresponding to the content item. Thus messages from various sources e.g. email chat workspace message instant message text message etc. can be aggregated into the comment metadata for the content item. For example the comment metadata can be stored internally to the content item. The comment metadata can be stored separately from the content item e.g. in a separate file . All of the comments obtained for the content item regardless of source e.g. email chat message workspace message text message instant message comments from within the content item etc. can be stored in the comment metadata for the content item.

At step workspace server can receive a selection of the content item. For example a user of client device can view a representation of the content item e.g. an icon graphic text etc. that represents the content item on a workspace graphical user interface. For example the workspace graphical user interface can be a web interface displayed in a browser application. The workspace graphical user interface can be a user interface of a workspace specific native application. The user can select the representation of the content item displayed on the workspace graphical user interface to select the content item. The workspace graphical user interface can send the content item selection to workspace server .

At step workspace server can cause client device to present the selected content item and the comments for the content item. For example workspace server can send a webpage that displays the content item or preview image of the content item and the comments for the content item to the web browser running on client device . Workspace server can send the content item and the content item comments to the native application running on client device . For example workspace server can synchronize the content item and the content item comments metadata with the client device as described above. The content item and the comments can be displayed in a separate user interface e.g. WS GUI . The content item can the comments can be displayed in a content item specific message thread e.g. message thread of .

At step the client device can receive a selection of a content item displayed on the workspace GUI. For example a user of client device can provide input to WS GUI to select content item of .

At step the client device can present a content item discussion option. For example WS GUI can present options menu that includes discussion option in response to the user input received at step .

At step the client device can receive a selection of the discuss option. For example the user of client device can provide input to client device with respect to discussion option to select the discussion option.

At step the client device can generate a new message including the selected content item in the message stream. For example in response to receiving the selection of the discussion option client device can generate a new message for the message stream that includes the selected content item. Client device can send the new message to workspace server and present the new message and the selected content item in the message stream. Once the new message is presented to other workspace members the workspace members can reply to the message to continue the discussion of the selected content item and generate message thread of .

At step the server device can receive a message for the message stream. For example server device can receive a new workspace message generated by a member of the workspace.

At step the server device can determine that the message mentions an external user. For example an external user is any user who is not a member of the workspace e.g. not an authorized user of the workspace shared folder . The server device can determine that an external user is mentioned in the message by analyzing text in the message for a prefix that identifies a mentioned user. For example the prefix can be a single character or symbol e.g. . The prefix can be multiple characters or symbols e.g. at for etc. . Once the server device finds the prefix the server device can compare the string following the prefix to identifiers of workspace members. If the string does not match any workspace members the server device can determine that the mentioned user is an external user.

At step the server device can obtain contact information for the external user. For example the server device can request contact information from the client device of the workspace member who generated the workspace message that contains the mention of the external user. The client device can prompt the workspace member for contact information e.g. telephone number email address etc. of the external user. The client device can search a contacts database stored on the client device to obtain the contact information for the external user. In some implementations the server device can store a contacts database in a workspace member s account and search the contacts database to determine contact information for the external user.

At step the server device can send the message that mentions the external user to the external user according to a communication mechanism corresponding to the contact information obtained for the external user. For example if the contact information for the external user is a telephone number the server device can send the workspace message e.g. the text portion of the message to the external user using text messaging e.g. short message service messaging . If the contact information for the external user is an email address the server device can send the workspace message to the external user using email.

In some implementations the external user can respond to the workspace message using the same communication mechanism by which the external user received the workspace message. For example if the external user receives an email message the external user can reply using email. If the external user receives a text message the external user can reply by text message. When the server device receives the email or text message reply the server device can generate a new workspace message that contains the reply and post the new workspace message to the message stream as a reply to the message in which the external user was mentioned.

At step the client device can receive a new message for the message stream. For example a workspace member can generate a new workspace message as described above with reference to . At this point the new message can be received by the client device but not yet displayed or inserted into the message stream.

At step the client device can determine whether a user is interacting with an existing message in the message stream. For example client device can determine the position of an input cursor or pointer over WS GUI . When the cursor is located over one of the messages displayed on WS GUI then client device can determine that the user is interacting with an existing message. When the user is providing textual input in response to an existing message e.g. providing input to text input element then client device can determine that the user is interacting with an existing message. When the user is providing any other input e.g. a click touch swipe etc. with respect to an existing message in message stream e.g. selecting like element selecting reply element then client device can determine that the user is interacting with an existing message in message stream . When the user is not providing input to one of the messages displayed in message stream then client device can determine that the user is not interacting with an existing message in message stream .

At step the client device can scroll the message stream when the user is not interacting with an existing message in the message stream. For example when client device determines that the user is not interacting with an existing message client device can scroll the message stream to make room for the new message on WS GUI and insert the new message into the message stream as described above. For example if client device scrolls the message stream in an upward direction the new message can be inserted at the bottom of the message stream. If client device scrolls the message stream in a downward direction the new message can be inserted at the top of the message stream. The scrolling behavior can be the default behavior for adding a new message to the message stream when the new message is received.

At step the client device can freeze the message stream when the user is interacting with an existing message in the message stream. For example client device can freeze the message stream by ceasing the scrolling behavior in response to receiving the new message. While the user is interacting with an existing message client device will not scroll the message stream to make room for the new message.

At step the client device can insert the new message into the message stream. For example once the user stops interacting with the existing message client device can resume the scrolling behavior insert the new message into the message stream and display the new message on WS GUI .

To enable user interaction with the computing device an input device can represent any number of input mechanisms such as a microphone for speech a touch sensitive screen for gesture or graphical input keyboard mouse motion input speech and so forth. An output device can also be one or more of a number of output mechanisms known to those of skill in the art. In some instances multimodal systems can enable a user to provide multiple types of input to communicate with the computing device . The communications interface can generally govern and manage the user input and system output. There is no restriction on operating on any particular hardware arrangement and therefore the basic features here may easily be substituted for improved hardware or firmware arrangements as they are developed.

Storage device is a non volatile memory and can be a hard disk or other types of computer readable media which can store data that are accessible by a computer such as magnetic cassettes flash memory cards solid state memory devices digital versatile disks cartridges random access memories RAMs read only memory ROM and hybrids thereof.

The storage device can include software modules and for controlling the processor . Other hardware or software modules are contemplated. The storage device can be connected to the system bus . In one aspect a hardware module that performs a particular function can include the software component stored in a computer readable medium in connection with the necessary hardware components such as the processor bus display and so forth to carry out the function.

Chipset can also interface with one or more communication interfaces that can have different physical interfaces. Such communication interfaces can include interfaces for wired and wireless local area networks for broadband wireless networks as well as personal area networks. Some applications of the methods for generating displaying and using the GUI disclosed herein can include receiving ordered datasets over the physical interface or be generated by the machine itself by processor analyzing data stored in storage or . Further the machine can receive inputs from a user through user interface components and execute appropriate functions such as browsing functions by interpreting these inputs using processor .

It can be appreciated that example systems and can have more than one processor or be part of a group or cluster of computing devices networked together to provide greater processing capability.

For clarity of explanation in some instances the present technology may be presented as including individual functional blocks including functional blocks comprising devices device components steps or routines in a method embodied in software or combinations of hardware and software.

In some embodiments the computer readable storage devices mediums and memories can include a cable or wireless signal containing a bit stream and the like. However when mentioned non transitory computer readable storage media expressly exclude media such as energy carrier signals electromagnetic waves and signals per se.

Methods according to the above described examples can be implemented using computer executable instructions that are stored or otherwise available from computer readable media. Such instructions can comprise for example instructions and data which cause or otherwise configure a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Portions of computer resources used can be accessible over a network. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language firmware or source code. Examples of computer readable media that may be used to store instructions information used and or information created during methods according to described examples include magnetic or optical disks flash memory USB devices provided with non volatile memory networked storage devices and so on.

Devices implementing methods according to these disclosures can comprise hardware firmware and or software and can take any of a variety of form factors. Typical examples of such form factors include laptops smart phones small form factor personal computers personal digital assistants and so on. Functionality described herein also can be embodied in peripherals or add in cards. Such functionality can also be implemented on a circuit board among different chips or different processes executing in a single device by way of further example.

The instructions media for conveying such instructions computing resources for executing them and other structures for supporting such computing resources are means for providing the functions described in these disclosures.

Although a variety of examples and other information was used to explain aspects within the scope of the appended claims no limitation of the claims should be implied based on particular features or arrangements in such examples as one of ordinary skill would be able to use these examples to derive a wide variety of implementations. Further and although some subject matter may have been described in language specific to examples of structural features and or method steps it is to be understood that the subject matter defined in the appended claims is not necessarily limited to these described features or acts. For example such functionality can be distributed differently or performed in components other than those identified herein. Rather the described features and steps are disclosed as examples of components of systems and methods within the scope of the appended claims.

