---

title: Managing change events for devices in an enterprise system
abstract: Techniques are disclosed for communicating to remote devices information about change events related to changes in access to an enterprise system. A device access management system may facilitate communication about a change event to the remote devices. Information about a change event may be stored in a change event object based on the type of change event (e.g., a policy change, an application change, and a settings change). A change event queue may persistently store information corresponding to change events. One or more computing nodes may be scheduled to execute an action process for each change event based on the type of the change event. A computing node may communicate information (e.g., an instruction to implement adjust access) about a change event to remote devices. A change event may persist on the queue until all remote devices are notified about the change event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09652212&OS=09652212&RS=09652212
owner: Oracle International Corporation
number: 09652212
owner_city: Redwood Shores
owner_country: US
publication_date: 20150417
---
The present application claims the benefit and priority of U.S. Provisional Application No. 62 054 544 filed Sep. 24 2014 entitled Mobile Security Manager MSM the entire contents of which is incorporated herein by reference for all purposes.

The present disclosure relates generally to managing events related to accessing an enterprise system using remote devices. More particularly techniques are disclosed for communicating to remote devices information about events related to changes in access to the enterprise system.

With the proliferation of devices including mobile devices many enterprises are adopting a bring your own device BYOD policy. BYOD enables users to bring their own devices to connect to an enterprise s system to access resources e.g. applications or data provided by the enterprise. A BYOD policy may permit users to continue use of their own devices for personal use. Managing different uses e.g. personal use and corporate use of user owned devices in an enterprise system becomes a paramount concern for an enterprise. Permitting user owned devices to access an enterprise system can present new security risks. Once access to an enterprise system is obtained by a user owned device the enterprise system may be exposed to security risks from non compliant devices and non compliant use of devices. Security becomes an even greater concern when user owned devices are compromised e.g. hacked stolen or lost .

To facilitate management of user owned devices and corporate devices that access an enterprise system some enterprises may implement a mobile device management MDM system and or a mobile application management MAM system. Such systems may facilitate management and control of access to an enterprise system to ensure an enterprise system and its resources are secured. Management and control of access to an enterprise system may include communicating information about compliance and resources and actions that must be taken for maintaining access to the enterprise system.

An enterprise that has thousands of users e.g. employees contractors and customers may be faced with the task of managing access for thousands of devices that access the enterprise. At any given time an enterprise may have to communicate with many devices to inform those devices about the changes in access to an enterprise system. Due to the number of devices to which information needs to be communicated a tremendous burden may be placed on the system s that manage communication of such information. The systems utilized to facilitate communication of information to devices may become overloaded and sometimes unresponsive due to the number of devices that need to be notified. Many times communication of information related to changes in access to an enterprise system may be delayed or not delivered. To complicate matters further many devices may be affected by multiple changes related to accessing an enterprise system such that information about multiple changes must be communicated to devices. On many occasions information about changes in access may be forgotten or not processed by a device due to an error e.g. device error or communication error encountered by the device. Sometimes devices may encounter errors when information about the same change is communicated to those devices that previously encountered an error. As a result some devices may not receive information about a change in access to an enterprise system. For example if one access policy revokes access to a resource and another access policy provisions access to a resource that was revoked then the order of the events based on the access policies determines the final access to that resource.

A messaging service such as a Java Messaging Service JMS may be implemented to support a publish subscribe model. Such a model may allow changes to artifacts in an enterprise system to be notified by the enterprise system acting as a publisher to all interested subscribers of a topic of change. In the instance where there is one topic subscriber on each node in a server cluster the messaging service may be unable to facilitate processing of a change among the subscribers thereby leading to duplication of work or may result in an incorrect delivery order. A messaging service may be too heavyweight to enable management of new or different type of topics corresponding to a change in access to an enterprise system.

As a consequence of the many challenges described above for communicating some devices may not receive information about changes in access to an enterprise system. Enterprises are searching for ways to improve communication of information for management of both user owned and corporate devices which access an enterprise system.

The present disclosure relates generally to managing events related to accessing an enterprise system using remote devices. More particularly techniques are disclosed for communicating to remote devices information about events related to changes in access to the enterprise system. Access to an enterprise system may include access to resources and or actions in a secure environment of a remote device that provides access to the enterprise system. A device access management system may be implemented to facilitate communication with remote devices that access an enterprise system.

The device access management system may manage information about a change event e.g. a change in access to an enterprise system based on a type of the change event. Examples of type of change event may include without restriction a policy change an application change and a settings change. Information about change events may be stored in a data structure implemented as an object change event object e.g. a plain old Java object based on the type of change event. A metadata class may be defined for each different type of change event. The metadata class may define one or more fields of information that can be stored in a change event object defined based on that metadata class. A new metadata class may be defined for as new or different types of change events are defined. Based on the type of change event a change event object may be created to store information about that change event.

To ensure that information about a change event is persistent such that communication of the information to remote devices affected by the change event is assured for those remote devices the device access management system may implement a queue change event queue . The change event queue may store information e.g. a change event entry corresponding to each change event object for a change event. The device access management system may communicate a change event to devices by transmitting information in a change event object to remote devices to inform them of the change event. In some embodiments the device access management system may communicate a change event to remote devices using a notification service e.g. a push notification service . The remote devices may communicate with a notification service to receive notification about change events. A change event entry may remain on the change event queue until all devices affected by the change event corresponding to the change event entry have been notified about the change event. In some embodiments the change event may be retransmitted to remote devices to retry communication of the change event.

In some embodiments an action process may be defined for each type of change events. The action process may be a routine defined by an action process class. The action process may be initiated for a type of change event corresponding to the action process class for that type of change event. The action process class may include communicating information about a change event e.g. the change event object to remote devices affected by a change corresponding to the change event. The information communicated to a remote device may include an instruction or a command that causes the remote device to adjust access based on the change event.

In some embodiments the device access management system may utilize multiple computing nodes for execution of an access process corresponding to a change event. Multiple computing nodes may enable execution of the action process when the number of remote devices to be notified about the change event may be great. For example upon determining that thousands of remote devices are affected by a change event multiple computing nodes may be enlisted to perform the action process to notify different remote devices about the change event. Each computing node would implement a different instance of an action process to handle communicating the change event to a different set of remote devices. Use of multiple computing nodes may balance the load for execution of the action process for different remote devices affected by the change event rather than executing the action process on a single computing node for all the remote devices. A computing node designated to execute the action process for remote devices may handle management of the change event until each of those remote device receives a notification about the change event. In some embodiments a remote device may send a communication to the computing node indicating that the change event has been acknowledged. By distributing the action process between multiple computing nodes performance efficiency for communicating the change event to remote devices may be improved. A processing load for an action process may be balanced between multiple computing nodes such that one computing node is not overwhelmed to execute an action process for all remote devices affected by the change event.

Some embodiments of the present invention may be implemented by a computing system. The computing system may be implemented as part of a device access management system. The computing system may implement methods and operations. In at least one embodiment the computing system may include one or more processors and a memory storing instructions that when executed by the one or more processors cause the one or more processors to implement operations. The operations may be implemented to perform a method. In some embodiments a non transitory computer readable medium may comprise instructions that when executed by one or more processors causes operations to be performed. In some embodiments a non transitory computer readable medium may protect a computer from an electronic communication containing malicious code. In one example instructions stored on a computer readable medium when executed by one or more processors may cause the methods and operations described below to be implemented. Yet other embodiments relate to systems and machine readable tangible storage media which employ or store instructions for the methods and the operations described below.

In at least one embodiment a method may be implemented by the computer system. The method may include determining a type of change event corresponding to a change in access to an enterprise system for a plurality of remote devices. The method may include identifying an action process class associated with the type of change event. The action process class may define an action process to perform for the type of change event. The method may include selecting based on a processing load of each of a plurality of computing nodes a set of computing nodes of the plurality of computing nodes to perform the action process for the change in access. The method includes establishing based on the type of change event a first change event object for a first set of remote devices in the plurality of remote devices. A change event object may indicate information about the change in access. Establishing the first change event object may include instantiating the first change event object based on a change event entry for the first set of remote devices. The change event entry for the first set of remote devices may include information identifying each of the first set of remote devices. The first change event object may include information identifying each of the first set of remote devices. The method includes establishing based on the type of change event a second change event object for a second set of remote devices in the plurality of remote devices. Change event objects and action objects may be plain old Java objects. Each of the first set of remote devices may be different from each of the second set of remote devices.

The method includes initiating by a first computing node of the set of computing nodes using the first change event object the action process for a first action process object. The first action process object may be established based on the action process class. The method includes initiating by a second computing node of the set of computing nodes using the second change event object the action process for a second action process object. The second action process object may be established based on the action process class. The action process initiated for the first action process object may be initiated concurrently with the action process initiated for the second action process object.

In some embodiments the method may include adding to a change event queue a change event entry for each of the first set of remote devices and the second set of remote devices. The change event entry may indicate the change in access and the type of change event. The method may include removing from the change event queue the change event entry for the first set of remote devices upon receiving a response from each of the first set of remote devices. The response may indicate that each of the first set of remote devices has applied the change in access corresponding to the type of change event.

In some embodiments initiating using the first change event object the action process for a first action process object may include establishing the first action process object by instantiating the action process class using the first change event object and invoking the action process using the first action process object.

In some embodiments an action process invoked for the first action process object includes transmitting to each of the first set of remote devices an instruction indicating the change in access. The instruction may cause at least one remote device in the first set of remote devices to apply the change in access.

In some embodiments the method may include computing the processing load for each of the plurality of computing nodes. A processing load of a computing node may be computed based on a number of action processes the computing node has initiated. The first computing node is selected for the set of computing nodes based on an action process threshold. In some embodiments each of the set of computing nodes is selected based on the processing load for each of the set of computing nodes satisfying the action process threshold.

In some embodiments the method may include identifying the type of change event. The type of change event may include a policy change the policy change including a change in a compliance policy a change in an enrollment policy a change in a workspace policy a change in a device policy or a combination thereof. The action process to perform for a set of remote devices may include instructing each of the set of remote devices to apply the policy change

In some embodiments the method may include identifying a type of change event. The type of change event may include an application change the application change including adding an application to a catalog of applications accessible to the plurality of remote devices removing an application from the catalog modifying a version of an application in the catalog or a combination thereof. The action process to perform for a set of remote devices may include instructing each of the set of remote devices to apply the application change.

In some embodiments the method may include identifying a type of change event. The type of change event may include a change in a synchronization setting related to accessing the enterprise system. The action process to perform for a set of remote devices may include instructing each of the set of remote devices to apply the change in the synchronization setting.

In at least one embodiment another method may be implemented by the computer system. The method may include determining an action to be performed on a plurality of remote devices. The method may include adding on a queue a change event entry for each of a first set of remote devices and a second set of remote devices of the plurality of remote devices thereby adding multiple change event entries to the queue. Each of the first set of remote devices may be different from each of the second set of remote devices. The method may include assigning from the queue to a first computing node a first change event entry corresponding to the first set of remote devices. The method may include instantiating a first metadata object for the first change event entry and storing metadata identifying each of the first set of remote devices in the first metadata object. Instantiating of the first metadata object may be performed on the first computing node. The method may include instructing from the first computing node the action to be taken on each of the first set of remote devices based on the first metadata object. The method may include assigning from the queue to a second computing node a second change event entry corresponding to the second set of remote devices. The method may include instantiating a second metadata object for the second change event entry and storing metadata identifying each of the second set of remote devices in the second metadata object. The method may include instructing from the second computing node the action to be taken on each of the second set of remote devices based on the second metadata object.

The foregoing together with other features and embodiments will become more apparent upon referring to the following specification claims and accompanying drawings.

In the following description for the purposes of explanation specific details are set forth in order to provide a thorough understanding of embodiments of the invention. However it will be apparent that various embodiments may be practiced without these specific details. For example circuits systems algorithms structures techniques networks processes and other components may be shown as components in block diagram form in order not to obscure the embodiments in unnecessary detail. The figures and description are not intended to be restrictive.

Also it is noted that individual embodiments may be described as a process which is depicted as a flowchart a flow diagram a data flow diagram a structure diagram or a block diagram. Although a flowchart may describe the operations as a sequential process many of the operations can be performed in parallel or concurrently. In addition the order of the operations may be re arranged. A process is terminated when its operations are completed but could have additional steps not included in a figure. A process may correspond to a method a function a procedure a subroutine a subprogram etc. When a process corresponds to a function its termination can correspond to a return of the function to the calling function or the main function.

The present disclosure relates generally to managing events related to accessing an enterprise system using remote devices. More particularly techniques are disclosed for communicating to remote devices information about events related to changes in access to the enterprise system. Access to an enterprise system may include access to resources and or actions in a secure environment of a remote device that provides access to the enterprise system. A device access management system may be implemented to facilitate communication with remote devices that access an enterprise system.

The device access management system may utilize multiple computing systems to communicate information about a change event to several remote devices. Technical advantages of some embodiments of the invention include a system that enables different change events to be defined to enable change events to be communicated to a large number of remote devices at any given time. By defining different change events using a metadata class computing systems can be added or removed for facilitating communication of change events. With little or no configuration computing systems can be added to communicate information about change events based on the type of change event defined for a metadata class corresponding to the type of change event. The device access management system may manage information about a change event e.g. a change in access to an enterprise system based on a type of the change event. Examples of type of change event may include without restriction a policy change an application change and a settings change. Information about change events may be stored in a data structure implemented as an object change event object e.g. a plain old Java object based on the type of change event. A metadata class may be defined for each different type of change event. The metadata class may define one or more fields of information that can be stored in a change event object defined based on that metadata class. A new metadata class may be defined for as new or different types of change events are defined. Based on the type of change event a change event object may be created to store information about that change event.

To ensure that information about a change event is persistent such that communication of the information to remote devices affected by the change event is assured for those remote devices the device access management system may implement a queue change event queue . The change event queue may store information e.g. a change event entry corresponding to each change event object for a change event. The device access management system may communicate a change event to devices by transmitting information in a change event object to remote devices to inform them of the change event. In some embodiments the device access management system may communicate a change event to remote devices using a notification service e.g. a push notification service . The remote devices may communicate with a notification service to receive notification about change events. A change event entry may remain on the change event queue until all devices affected by the change event corresponding to the change event entry have been notified about the change event. In some embodiments the change event may be retransmitted to remote devices to retry communication of the change event.

Technical advantages of some embodiments of the invention include ensuring that information about change events are delivered to remote devices affected by those change events. The change event queue may enable the device access management system to manage information about change events and an order of those change events. Some remote devices may lose connectivity to an enterprise system for various reasons. A remote device can obtain information about a change event long after an occurrence of the change event because the change event may remain on the change event queue until all remote devices affected by the change event are notified. The remote device may be notified periodically about the change event without causing a delay in the communication of other change events.

Technical advantages of some embodiments of the invention include a system that enables different action processes to be defined based on a type of change event. In some embodiments an action process may be defined for each type of change events. The action process may be a routine defined by an action process class. By defining an action process class for an action process computing systems added to expand computing resources for managing change events can easily determine an action process without additional manual configuration. In a system that is grows in the number of devices to be notified the system can be easily expanded with little manual configuration to enable the system to handle processing and communication of change events to remote devices. The action process may be initiated for a type of change event corresponding to the action process class for that type of change event. The action process class may include communicating information about a change event e.g. the change event object to remote devices affected by a change corresponding to the change event. The information communicated to a remote device may include an instruction or a command that causes the remote device to adjust access based on the change event.

In some embodiments the device access management system may utilize multiple computing nodes for execution of an access process corresponding to a change event. Multiple computing nodes may enable execution of the action process when the number of remote devices to be notified about the change event may be great. For example upon determining that thousands of remote devices are affected by a change event multiple computing nodes may be enlisted to perform the action process to notify different remote devices about the change event. Each computing node would implement a different instance of an action process to handle communicating the change event to a different set of remote devices. Use of multiple computing nodes may provide many technical advantages. The computing nodes can balance the load for execution of the action process for different remote devices affected by the change event rather than executing the action process on a single computing node for all the remote devices. A computing node designated to execute the action process for remote devices may handle management of the change event until each of those remote device receives a notification about the change event. In some embodiments a remote device may send a communication to the computing node indicating that the change event has been acknowledged. By distributing the action process between multiple computing nodes performance efficiency for communicating the change event to remote devices may be improved. A processing load for an action process may be balanced between multiple computing nodes such that one computing node is not overwhelmed to execute an action process for all remote devices affected by the change event. In the instance when a computing node is unable to notify a remote device about a change event a different computing node may be utilized to continue to notify the remote device without affecting processing of other computing nodes. Therefore by defining change events and action processes using classes computing nodes with available processing resources can handle communication of information about a change event.

Computing system may be part of an enterprise system implemented for an enterprise. Computing system may include enterprise computer system which provides access to one or more resources provided by enterprise computer system . Examples of resources may include an application a service data or a combination thereof any of which may be hosted by a third party provider and provided to remote devices by enterprise computer system .

Users may access enterprise computing system using one or more remote devices such as remote devices . . . N collectively remote devices . Access to enterprise computer system using remote devices may be controlled and managed by device access management system . Each of remote devices may include a secure container application. The secure container application may provide a secure execution environment for communicating with device access management system to access enterprise computer system . Remote devices may communicate with device access management system to obtain access to resources e.g. an application provided by enterprise computer system . Access to enterprise computer system controlled by device access management system may include access to resources on a remote device and or access to perform actions in the secure container application.

Device access management system may manage authentication and enrollment of remote devices for accessing enterprise computer system . In some embodiments device access management system can manage change events related to accessing enterprise computer system using remote devices . Specifically device access management system can communicate to remote devices information about events related to changes in access to enterprise computer system by those remote devices .

Computing system may be defined by multiple zones each corresponding to a different communication zone. In some embodiments remote devices may be located in an external communication zone external zone . Device access management system and enterprise computer system may be located in a green communication zone green zone . Green zone may include one or more secure networks e.g. a corporate network . Green zone may be located inside the firewalls of an enterprise computing environment. External zone may be part of an external network e.g. the Internet which can be unsecure. For example external zone may be located outside the firewalls of green zone .

In some embodiments remote devices may communicate with computer systems in green zone through a security access system located in a demilitarized zone DMZ . An example of DMZ may be a corporate DMZ. Security access system may facilitate secure communication between remote devices and device access management system . For example security access system may provide a secure communication connection e.g. tunnel between a secure container application on any of remote devices and device access management system .

Security access system may provide services to authenticate a user of a remote device. Security access system may communicate with a user access management system to obtain authorization for a user of a remote device. For example security access system may obtain authorization tokens from user access management system to facilitate single sign on SSO authentication to resources provided by enterprise computer system . In one example security access system may be included in Oracle Mobile Security Access Server which is part of Oracle Mobile Security Suite provided by the Oracle Corporation.

Remote device may be of various different types including but not limited to endpoint devices a wearable device e.g. a smart watch a consumer device e.g. an appliance personal computers desktops Internet of Things IOT devices mobile or handheld devices such as a laptop a mobile phone a tablet computer terminals etc. and other types of devices. In some embodiments a remote device may be an application hosted on a computing device e.g. a mobile device an IOT Gateway or an IOT Edge device . In some embodiments a remote device may be endpoint such as a workspace that is running on another device. A workspace may be a controlled environment to provide access to enterprise data and applications on a device running the workspace. For example a secure container application may run on one or more of remote devices . Examples of remote devices may include without limitation devices e.g. a corporate device issued by an enterprise associated with enterprise computer system or a user s personal device BYOD device that is used to access enterprise computer system .

A remote device may store information about its identity for example a MAC media access control address a unique device identifier UDID or other device identifiers. A remote device may store metadata attributes about the remote device including a type of operating system on the remote device a version of the operating system a host identifier if the remote device is hosted on another device a device type an IMEI International Mobile Equipment Identity number a model of the remote device a service provider e.g. a carrier of the remote device a device name a device state or other information about the remote device.

In certain embodiments a remote device may be configured to implement e.g. execute and operate one or more applications. For example one or more of remote devices may execute a secure container application that is designed to hold containerized applications i.e. applications that have been securely linked to their specific container. Examples of applications may include without limitation a computer application a client application a proprietary client application a workspace a container and the like. In some embodiments an application implemented by a remote device may be accessible or operated via one or more network s .

A remote device may include a computing device that can be implemented using hardware firmware software or combinations thereof. A remote device may include memory and one or more processors. A memory may be coupled to the processor s and may include instructions stored thereon which when executed by the processor s cause the processor s to implement one or more operations methods or processes disclosed herein. A memory may be implemented using any type of persistent storage device such as computer readable storage media.

In some embodiments remote devices may be communicatively coupled to device access management system and enterprise computer system via one or more communication networks of various types. Examples of communication networks include without restriction the Internet a wide area network WAN a local area network LAN an Ethernet network a public or private network a wired network a wireless network and the like and combinations thereof. Different communication protocols may be used to facilitate the communications including both wired and wireless protocols such as IEEE 802.XX suite of protocols TCP IP IPX SAN AppleTalk Bluetooth and other protocols.

Device access management system may be implemented in a computer system which may comprise one or more computers and or servers which may be general purpose computers specialized server computers including by way of example PC servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters distributed servers or any other appropriate arrangement and or combination thereof. For example device access management system may include servers . All or some of servers may be located in the same geographical location or different geographical locations. The computing devices that make up device access management system may run any of operating systems or a variety of additional server applications and or mid tier applications including HTTP servers FTP servers CGI servers Java servers database servers and the like. Exemplary database servers include without limitation those commercially available from Oracle Microsoft and the like. Device access management system may be implemented using hardware firmware software or combinations thereof. In one example device access management system may be included in Oracle Mobile Security Manager which is part of Oracle Mobile Security Suite provided by the Oracle Corporation.

Device access management system may include at least one memory one or more processing units or processor s and storage. The processing unit s may be implemented as appropriate in hardware computer executable instructions firmware or combinations thereof. Computer executable instructions or firmware implementations of the processing unit s may include computer executable or machine executable instructions written in any suitable programming language to perform the various operations functions methods and or processes described herein. The memory in device access management system may store program instructions that are loadable and executable on the processing unit s as well as data generated during the execution of these programs. The memory may be volatile such as random access memory RAM and or non volatile such as read only memory ROM flash memory etc. . The memory may be implemented using any type of persistent storage device such as computer readable storage media. In some embodiments computer readable storage media may be configured to protect a computer from an electronic communication containing malicious code. The computer readable storage media may include instructions stored thereon that when executed on a processor perform the operations described herein.

Device access management system may also include or be coupled to additional storage which may be implemented using any type of persistent storage device such as a memory storage device or other non transitory computer readable storage medium. In some embodiments local storage may include or implement one or more databases e.g. a document database a relational database or other type of database one or more file stores one or more file systems or combinations thereof. For example device access management system may be coupled to or may include one or more data stores e.g. data stores . The memory and the additional storage are all examples of computer readable storage media. For example computer readable storage media may include volatile or non volatile removable or non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data.

In some embodiments device access management system can manage enrollment and authentication of remote devices to access enterprise computer system . Remote devices may be enrolled for user identities registered to access enterprise system . Just as a user identity is used to authenticate a user a remote device may be registered with an identity that is used to authenticate the remote device. An identity may be provisioned to a remote device and may be used to authenticate all further communications from that remote device.

Device access management system may store information about remote devices in device registry of data stores . The information may indicate a relationship between an identity of a user and an identity of each of one or more remote devices registered to access enterprise computer system for that identity. Device access management system may issue a certificate to a remote device for enrollment of that remote device with a user identity for accessing enterprise computer system . Device access management system may allow a remote device to access enterprise computer system if a request is from a user identity associated with an identity of the remote device.

Device access management system may be communicatively coupled to an identity management system . Identity management system may manage the lifecycle of users of enterprise computer system and their associated accounts provisioned for resources accessed from enterprise computer system . Identity management system may manage roles e.g. user groups defined for accessing enterprise computer system . In some embodiments identity management system may implement manage policies for roles defined for accessing enterprise computer system . Examples of identity management system may include Oracle Identity Manager provided by the Oracle Corporation.

User access management system may be communicatively coupled to device access management system . User access management system may handle scope management issuance of authorization tokens issuance of refresh tokens and issuance of access tokens. For example user access management system may process requests from security access system for access by remote devices . In some embodiments user access management system may manage access policies for access to resources provided by enterprise computer system . Examples of user access management system may include Oracle Access Manager provided by the Oracle Corporation.

In some embodiments device access management system may manage settings of remote devices that are enrolled to access enterprise computer system . Examples of settings may include without limitation device settings installation settings synchronization settings communication settings application settings or other settings related to accessing an enterprise system. Information about settings may be stored in settings data store of data stores . Some settings may correspond to information received from remote devices . Settings e.g. device settings and installation settings for some remote devices may be verified for enrollment and checked for compliance by enrolled remote devices . In some embodiments settings e.g. synchronization settings may be communicated to some remote devices to enable the secure container application on remote devices to configure synchronization of communication with device access management system and enterprise computer system .

Access to enterprise computer system using remote devices can be managed using one or more policies. Policies may be stored in and accessed from policy store in data stores . Examples of policies may include without limitation enrollment policies compliance policies workspace policies and device policies. Policies may be defined by an administrator of enterprise system. Device access management system may determine whether remote devices are compliant with policies which defines their access to enterprise computer system . In some embodiments device access management system can perform remedial actions to adjust access for a remote device based on a policy. Device access management system may communicate instructions to a remote device to instruct the remote device to take remedial action in response to compliance according to a policy. Notifications can be sent to remote devices to inform them of compliance and or non compliance with a policy and a time period for compliance.

As explained above device access management system may manage communication of information about change events e.g. event related to change in access to remote devices enrolled to access enterprise computer system . Information about change events may be stored and accessed from change events data store in data store . In some embodiments information about change events may be received from enterprise computer system identity management system and or user access management system . Information about change events may be received from a computing system operated by an administrator.

Upon identifying a change event device access management system can identify a type of change event. The type of change event can be determined based on information about a change event accessed from change events data store device access management system . Examples of types of change events may include without limitation a policy change an application change and a settings change. Other examples of types of change events may include without limitation a change in access to resources on a remote device in the secure container application executing on the remote device and a change in actions that can be performed in the secure container application. For example an action may include performing a copy paste operation from an application in the secure container application to a an application outside the secure container application container. In some embodiments a change event may correspond to a change in access that can be enforced on a remote device e.g. the secure container application executing on the remote device . Where a change in access can be enforced by device access management system without a change at a remote device the change in access may not be communicated to the remote device. As such change events may correspond to change that is enforceable at a remote device. Types of change events are further described below with reference to . Device access management system may determine a type of change event for a change based on a change event class that matches the change.

Device access management system may implement a persistent change event queue to manage change events corresponding to changes in access to an enterprise system. Information about a change event may be placed in a change event entry on change event queue for processing by one or more of servers . Servers may be utilized to execute an action process for managing access to enterprise computer system in response to a change event. A change event entry may remain on change event queue in a persistent fashion such that they are not removed until each remote device affected by the change event has been notified about the change event. In some embodiments a remote device may communicate with one of servers to send a message indicating acknowledgement for receiving notification about a change event. The server with which a remote device communicates is one which communicated a notification. The acknowledgement may indicate that the notification about the change event has been received. Change event queue may enable device access management system to manage change events to ensure that remote devices affected by each of those change events are notified about those change events. In some cases a remote device may communicate an acknowledge indicating receipt of a change event when the remote device has adjusted access to enterprise computer system based on the change event.

In some embodiments a change event object e.g. a plain old Java object may be instantiated for a change event. A change event object may be instantiated based on a change event class which is identified for a type of change event. A change event object may store information about a change event. A change event class may define the type of information to store in a change event object for a type of change event. Remote devices may be configured with information identifying change event classes. By defining a change event class remote devices and servers can identify a type of change event and the information corresponding to the change event based on the information defined by a change event class.

Device access management system may schedule one or more servers to execute an action process for each change event identified on change event queue . An action process may include communicating information about a change event to remote devices affected by the change event. The information about the change event may be communicated asynchronously to the remote devices. In some instances multiple change events may occur that affect the same remote device. In these instances each of the change events may be communicated to the same remote device in an asynchronous manner. However when the change events are dependent on the order of occurrence of those change events each of the change events may be communicated in the order of occurrence.

With thousands of users accessing enterprise computer system a single server may be overloaded to communicate information about a change event to all or many of remote devices affected by a change event. Device access management system may determine a processing load for servers to determine a set of servers that can be utilized to communicate information about a change event. By scheduling some of servers to execute an action process a processing load may be reduced on some servers that are overloaded with processing other action processes.

To further improve processing efficiency for communication of a change event device access management system may request multiple servers in servers to execute an action process for different sets of remote devices affected by a change event. Scheduling processing on servers is further described with reference to . A plurality of computing nodes may be operated based on servers . depict device access management system and a plurality of computing nodes that may be used to implement actions on remote devices for changes in access to an enterprise system. Embodiments described with reference to illustrate techniques that device access management system may implement to improve efficiency for communicating changes in access to an enterprise system and performing actions on remote devices in response to those changes. further illustrate techniques for implementing use of multiple computing nodes to reduce time for communicating changes to remote devices.

For each of the change event entries on change event queue one or more of servers may be requested by device access management system to initiate an action process. An action process may be identified based on a type of a change event indicated by a change event entry. An action process may be a routine defined by an action process class. An action process may be initiated for a type of change event corresponding to the action process class for that type of change event. The action process class may include communicating information about a change event e.g. the change event object to remote devices affected by a change corresponding to the change event. The information communicated to a remote device may include an instruction or a command that causes the remote device to adjust access to enterprise computer system based on the change event. Examples of action processes are described with reference to .

Now turning to a more detailed high level diagram of device access management system is shown according to some embodiments of the present invention. As shown in device access management system may include several subsystems and or modules including change event handler action processor scheduler and device manager . These subsystems and modules may be implemented in software e.g. program code instructions executable by a processor in hardware or combinations thereof. In some embodiments the software may be stored in a memory e.g. a non transitory computer readable medium on a memory device or some other physical memory and may be executed by one or more processing units e.g. one or more processors one or more processor cores one or more GPUs etc. .

With the adoption of BYOD for enabling access to an enterprise system e.g. enterprise computer system many users may access the enterprise system using their remote devices. For example a first user may use a set of endpoint devices . . . N collectively endpoint devices to access an enterprise system. A second user may use a set of endpoint devices . . . N collectively endpoint devices to also access an enterprise system. Although depicts some remote devices that are used to access an enterprise system the enterprise system may be accessed by thousands of users with thousands of device. Access to the enterprise system may be controlled through a computing system e.g. computing system including device access management system . With thousands of remote devices accessing an enterprise system managing changes in the access to the enterprise system may be difficult. Each change that occurs may need to be communicated to several devices to ensure their compliance with the changes.

To overcome the obstacles for communicating changes in access to many remote devices device access management system may employ the use of computing node computing node . . . computing node N collectively computing nodes . Computing nodes may be implemented for servers of . Computing nodes may be operated using servers of . Each of computing nodes may be included in or communicatively coupled to device access management system . As explained below multiple computing nodes may be utilized to execute one or more action processes for different remote devices.

Device manager may manage enrollment and compliance for remote devices accessing an enterprise system. Device manager may monitor and determine remote devices affected by a change event by checking information about remote devices in device registry . In some embodiments device manager may determine whether a remote device is affected by a change event based on enrollment of the remote device to access an enterprise system.

Change event handler may determine a change event corresponding to a change in access to an enterprise system for remote devices e.g. endpoint devices and endpoint devices . Information about change events may be accessed from change events data store . Change event handler may identify a type of change event based on a change event class for a change.

Change event handler may create a data structure e.g. a change event entry to store information about the change event. For example change event entry may be created for change event change event entry may be created for change event and change event entry may be created for change event . Each of change events may occur at the same time or at different times. A change event entry may be added to change event queue where it can be accessed later by one or more of computing nodes for executing an action process corresponding to the change event. As explained above change event queue may be implemented to manage change events in a persistent manner to ensure that remote devices affected by a change are notified about a change in access to an enterprise system.

Change event queue may be implemented as one or a combination of different types of queues including without restriction a linked list queue a first in first out FIFO queue or other types of data structures implemented as a queue. In some embodiments change event queue may be implemented as a database that stores change event entries in a relational manner. In some embodiments change event entries are added and removed from change event queue using serialization. Examples of serialization may include without limitation extended markup language XML serialization or other types of serialization techniques.

A change event entry may be processed by scheduling one or more of computing nodes to execute an action process for a change event identified by the change event entry. In some embodiments change event queue may be processed in a FIFO order based on an order in which change event entries are added to change event queue . In some embodiments multiple change event entries may be processed concurrently by one or more of computing nodes . For example change event entry may be processed before change event entry is processed. Change event entry may be processed before change event entry because each remote device identified in change event entry may not been notified about the change event corresponding to change event entry . A change event entry may remain on change event queue until each remote device identified in the change event entry is notified about the change.

The information in the change event entry may include the type of change event the change in access to the enterprise system and device identifiers of the remote devices affected by the change. A change event entry may indicate a set of remote devices to be informed about the change event. An example of a change event entry is described below with reference to . As will be explained further below a computing node may be requested to perform an action process for a change event and in doing so may access the change event entry from change event queue to determine information about the change event.

Action processor may determine an action process to execute based on a type of change event. In some embodiments an action process class may be defined for one or more change event classes. For a change event action processor may determine an action process class based on a change event class which can be determined based on a type of change event. In some embodiments data stores may store information indicating an association between action process classes and one or more types of change events. To schedule an action process a computing node may establish an instance e.g. an action process object described below with reference to of the action process class. The action process object may be used to invoke an action process e.g. a routine for the action process.

Scheduler may instruct one or more of computing nodes to execute an action process for change events on change event queue . In some embodiments scheduler may request a different computing node to execution an action process for each change event entry on change event queue .

In some embodiments scheduler may assess a processing load of each of computing nodes . A processing load of a computing node may be defined based on a value that indicates the processing capabilities of that computing node and or the current amount of work that is processed by that computing node. In some embodiments one or more third party systems may be used to determine a value that indicates the processing load of a computing node. For example one or more load balancer systems may be implemented to determine a load of computing nodes .

A processing load may be determined by computing a variety of measurements. The measurements individually or collectively may indicate the processing load of the computing node. In one example a processing load of a computing node may be determined by computing a value that indicates the number of change events that a computing node can manage. In another example a processing load of a computing node may be determined by computing the number of action processes that are being executed by the computing node. A processing load of a computing node may be determined based on the number of remote devices with which the computing node is communicating.

Scheduler may select a set of computing nodes e.g. one or more computing nodes that may perform an action process for a change event entry. One or more computing nodes from the set of computing nodes may be chosen to execute an action process for a change event. The set of computing nodes may be selected from a plurality of computing nodes. The set of computing nodes may include one or more computing nodes. For example device access management system may select a set of computing nodes e.g. a set of computing nodes including computing nodes and from computing nodes .

The set of computing nodes may be selected based on a processing load of each of a plurality of computing nodes. Each of the set of computing nodes may be selected for that set based on a processing load threshold. In some embodiments each of the computing nodes selected for a set of computing nodes may have a processing load that satisfies the processing load threshold. In one example the processing load threshold may be defined based on a threshold number of change events that a computing node can process. In another example the processing load threshold may be defined based on an action process threshold defined as a threshold number of actions processing a computing node has initiated. In this example each computing node of the set of computing nodes may be selected based on the processing load threshold such that the processing load for each computing node of the set of computing nodes satisfying the action process threshold.

In an enterprise system having thousands of remote devices accessing the enterprise system some computing nodes may be overloaded with requests and may be unresponsive to the other runtime traffic that it needs to handle from remote devices. Selecting a set of computing nodes based on a processing load may increase processing efficiency for communication of change events to remote devices. Computing nodes that have more available computing resources can be utilized to communicate change events to remote devices. Further by defining change events based on their types and an action process corresponding to those types of change events computing nodes can be added without additional configuration to enable those computing nodes to handle processing of the different types of change events. New change events and corresponding action processes can be defined as new types of change events are identified.

In some embodiments change event handler may create multiple change event entries for one change event. To utilize multiple computing nodes to balance the load for performing an action process to communicate the change event to remote devices affected by the change multiple change event entries may be created. The number of change event entries may be created based on the set of computing nodes selected to perform the action process. Each of the computing nodes utilized to communicate the change event may access a different one of the change event entries that are created. A change event entry may indicate a set of remote devices to be informed about the change event. Each of the remote devices in a set of remote devices for one change event entry may be different from each of the remote devices in a set of remote devices for another change event entry created for the same change event. One set of remote devices indicated by one change event entry for a change event may contain a different number of remote devices than another set of remote devices for another change event entry for the same change event.

The number of remote devices indicated in a change event entry may be chosen using a variety of techniques. For example the number of remote devices in a set of remote devices for a change event entry may be chosen based on the number of device identifiers in a page of memory. The page of memory may correspond to storage of device identifiers in device registry . The device identifiers identified in a page of memory may be stored in the change event entry and may be used by a computing node to identify a registered remote device for an action process. In some embodiments the number of remote devices for a change event entry may be chosen based on the number of computing nodes selected to perform the action process. A set of computing nodes may be chosen from computing nodes based on a processing load of each of computing nodes . Based on the number of computing nodes the remote devices to be notified about the change event may be distributed evenly amongst the change event entries. In some embodiments the processing load of each of the set of computing nodes may be considered when determining the number of remote devices to indicate in a change event entry.

Upon selecting one or more computing nodes to execute an action process for a change event identified by a change event entry a selected computing node may handle communication of the change event to remote devices. In some embodiments the modules and subsystems in device access management system may be configured for operation by each of computing nodes.

Each of computing nodes may communicate with remote devices through a communication system. Through the communication system messages may be communicated between each of computing nodes and one or more remote devices e.g. endpoint devices and endpoint devices . The communication system may provide services to send receive store and or access messages where a message can include any electronic communication generated by a sender and directed to one or more recipients such as email messages instant messages e.g. messages sent between users using various chat services SMS MMS messages e.g. messages conforming to Short Messaging Service and or Multimedia Messaging Service protocols supported by various cellular and other wireless data networks voice messages photo image messages social network messages and so on. Examples of messaging services may include email services such as Gmail a service of Google Inc. and Yahoo Mail a service of Yahoo Inc. . Other examples may include instant messaging or chat services such as Gmail s chat feature or Facebook s chat a service of Facebook Inc. SMS MMS services provided by cellular data carriers social network services with a messaging component e.g. social networks provided by Facebook Inc. or LinkedIn Corp. . The communication system may provide web based client interfaces dedicated application programs application program interfaces APIs and or other tools for facilitating communication between device access management system and remote devices.

The communication system may communicate with remote devices via one or more communication networks of various types. Examples of communication networks include without restriction the Internet a WAN a LAN an Ethernet network a public or private network a wired network a wireless network and the like and combinations thereof. Different communication protocols may be used to facilitate the communications including both wired and wireless protocols such as IEEE 802.XX suite of protocols TCP IP IPX SAN AppleTalk Bluetooth and other protocols.

In some embodiments the communication system may implement or use a push notification service e.g. Apple push notification service provided by the Apple corporation or Google notification service provided by the Google corporation . The push notification service may facilitate communication with remote devices e.g. endpoint devices and endpoint devices .

For a change event entry change event handler may instantiate a change event object based on the change event identified by the change event entry. A change event object may include metadata that identifies the change event and the remote devices to be notified about the change event.

Action processor may determine an action process to execute based on a type of change event. In some embodiments an action process class may be defined for one or more change event classes. For a change event action processor may determine an action process class based on a change event class which can be determined based on a type of change event. In some embodiments data stores may store information indicating an association between action process classes and one or more types of change events. To schedule an action process a computing node may establish an instance e.g. an action process object described below with reference to of the action process class. The action process object may be used to invoke an action process e.g. a routine for the action process. The action process may include communication information about a change event e.g. a change event object to one or more remote devices e.g. endpoint devices and endpoint devices .

When executing an action process a computing node may use the communication system to send a notification to a remote device about a change event identified by a change event entry. A notification may be sent asynchronously to remote devices. A remote device may regularly check with the communication system e.g. send a pull request to a notification service implemented by the communication system to determine whether any change events have occurred that affect the remote device. The remote device may communicate a pull request to the communication system to obtain information about the change event. In some embodiments a notification may activate e.g. wakeup the endpoint device to cause it to obtain information about the change event. The communication system may access the change event entry corresponding to the change event from change event queue . In some embodiments the communication system may communicate with one of computing nodes to obtain information from a change event entry corresponding to the change event indicated by the pull request from an endpoint device. The communication system may communicate with a computing node that sent a notification to the endpoint device about the change event indicated by the pull request.

Each remote device may include a secure container application that is configured to communicate with device access management system including computing nodes . The secure container application may have access to information included in data stores such as information about change event classes and action process classes. In some embodiments the secure container application can determine an action process to implement for a change event identified by a change event object transmitted from one of computing nodes . In some embodiments the secure container application may be configured to execute one or more operations e.g. change a policy update an application or adjust a setting based on an instruction from a computing node about a change event. The secure container application may be configured to communicate with the communication system to receive notifications about a change event and in response communicate a pull request for information about the change event. In some embodiments the secure container application may be configured to check with the communication system to determine whether any change events have occurred. The communication system may send information about change events to a remote device if the change events have not been communicated to a remote device. The information may be sent in response to a request for change events.

Each of computing nodes e.g. computing node computing node . . . computing node N may have a runtime environment e.g. runtime runtime . . . runtime . A runtime environment may include multiple execution threads e.g. a pool of threads for executing processes. In the example shown in computing node and computing node may each concurrently execute an action process for different change events. For example computing node and computing node may execute on a thread e.g. thread an action process for a change event corresponding to a change event entry on change event queue . To improve processing efficiency for communication to change event to endpoint devices action process may be executed on computing node for endpoint devices and action process may be executed on computing node for endpoint devices . After change event is added to change event queue a computing node such as computing node may be scheduled to execute action process on for change event . Action process may be executed on thread concurrently with action process executed on thread . After change event is added to change event queue a computing node such as computing node may be scheduled to execute action process on for change event . Action process may be executed on thread concurrently with action process executed on thread .

A computing node may remove a change event entry from change event queue when that computing node has completed the action process for the remote devices identified in the change event entry. A change event entry may persist on change event queue until the action process has completed for all remote devices identified in the change event entry. In this manner the change event entry is persistent and remains on change event queue . In one example the change event entry may remain on change event queue until all of the remote devices have received information about the change event identified by the change event entry. In another example the change event entry corresponding to the change event remains on change event queue in the event that a remote device does not receive a change event indicated by the change event entry or the remote device does not return an acknowledgement to a computing node that initiated an action process invoked for a change event. By maintaining a change event entry on change event queue device access management system can ensure that all remote devices receive notification and take action for a change event. By initiating an action process for a change event on different computing nodes for different remote devices processing or execution delays can be avoided. One computing node is not prevented from processing a change event entry due to remote devices that are unresponsive e.g. a remote device that is unable to acknowledge a change event or a remote device is unable to receive a notification about the change event .

Device access management system may implement change event queue to manage change events in a persistent fashion to ensure that remote devices affected by change events are notified. For each of the change event entries on change event queue one of computing nodes may initiate an action process based on a type of the change event indicated by the change event entry. An action process may be identified based on an association with a type of change event. The action process may include notifying the remote devices affected by the change event and in some instances causing the remote devices to adjust their access to the enterprise system based on the change event. Examples of action processes are described with reference to .

The sequence of operations may be initiated one or more operations performed by device access management system . Device access management system may determine that a change event change event has occurred for a change in access to an enterprise system for each of endpoint devices . A device registry e.g. device registry may be accessed for information about endpoint devices registered to access an enterprise system. Device access management system may use the information about registered endpoint devices to determine the endpoint devices affected by the change event. Device access management system may identify a type of the change event corresponding to the type of change in access. The type of change event may be determined based on information in change events data store which includes information defining the types of change events.

Device access management system may create a data structure e.g. a change event entry to store information about the change event. In some embodiments device access management system may create multiple change event entries for one change event. For example change event entry and change event entry may be created for change event . Change event entry may indicate a set of devices including endpoint device and endpoint device . Change event entry may indicate a set of devices including endpoint device and endpoint device . Each of change event entries may be added to change event queue where it can be accessed later by a computing node for determining an action process to initiate for the change event.

In some embodiments device access management system may select a set of computing nodes from computing nodes to perform an action process action process for change event . The set of computing nodes may be selected based on a processing load of each of computing nodes . For example device access management system may select a set of computing nodes including computing nodes and from computing nodes .

Device access management system may perform one or more operations to schedule change event for handling by the selected set of computing nodes e.g. computing node and computing nodes . For example device access management system may schedule computing node to handle change event entry and may schedule computing node to handle change event entry .

Upon scheduling of change event each of computing node may perform operations to handle processing for a change event entry corresponding to change event . Computing node may perform processing to handle change event entry and may computing node may perform processing to handle change event entry . Computing node may perform processing concurrently with computing node .

Each of computing nodes and computing nodes may instantiate a change event object based on a change event class corresponding to the type of change event for change event . A change event object for change event may include persisted metadata that defines the change event in a change event entry e.g. change event entry and change event entry . In other words the information included in a change event entry for change event may be included in a change event object that is instantiated for change event . For example a change event object may include device identifiers of devices identified in a change event entry.

Each of computing nodes and computing nodes may establish an action process object for change event . An action process class may be identified based on the type of change event indicated by a change event entry for change event . An action process class may include an execution routine e.g. run routine that defines the action process a computing node is to perform. The routine may be executed by a computing node on a processing thread available for that computing node. The action process may include communicating information about the change event to endpoint devices identified in a change event object for a change event entry. The information may include instructions for an endpoint device to perform to adjust operation for the change event. The action process may be performed for each endpoint device identified in the change event object for a change event. The action process may be performed concurrently for multiple endpoint devices.

Each of computing nodes and computing nodes may instantiate an action process object for the change event . An action process object may be instantiated by a computing node for a change event object instantiated by that computing node. An action process object may be instantiated based on the action process class corresponding to the type of change event. A change event object may be passed to a routine executed for the instantiation of the action process object. Examples of an action process object and action process class are described below with reference to .

Each of computing nodes and may initiate action process by invoking the execution routine for the action process class identified based on the type of change event for change event . The execution routine may be invoked by a computing node calling the execution routine for an action object instantiated by the computing node. Action process may be invoked by computing node for each endpoint device in set of devices . Action process may be invoked by computing node for each endpoint device in set of devices . Action process may include communicating information about change event to each endpoint device in a set of devices. The information about a change event may be communicated to a remote device as a notification. The notification may be communicated through a communication system that supports a notification service e.g. a push notification service . In some examples notifications may be communicated in a different order e.g. asynchronously that an order shown in . A remote device may communicate with the communication system e.g. send a pull request to obtain information about a change event identified by a notification. Computing node may communicate information about change event to each endpoint device in set of devices . Computing node may communicate information about change event to each endpoint device in set of devices . The information communicated to an endpoint device may include an instruction or information for adjusting operating of the endpoint device according to the change event.

In some embodiments a computing node may receive communications from an endpoint device when the endpoint device has completed operations for an action process. Operations for an action process may be completed when the endpoint devices have been notified about a change event and have performed actions to adjust access for the change event. For example computing node may receive from endpoint device of set of devices an acknowledgement indicating that action process has been completed for endpoint device . For example computing node may receive from endpoint device and endpoint device of set of devices an acknowledgement and an acknowledgement respectively indicating that action process has been completed for endpoint devices . Communications e.g. acknowledgements from remote devices may be received asynchronously from an order in which the communications are sent from different endpoint devices.

A computing node may remove a change event entry from change event queue when that computing node has completed the action process for the endpoint devices identified in the change event entry. In the example shown in computing node may perform operations to determine whether the action process has completed for each endpoint device in set of devices . Because endpoint device of set of devices has not communicated acknowledgement for change event computing nodes may refrain from removing change event entry from change event queue . Change event entry is not removed from change event queue and persists on change event queue until endpoint device indicates acknowledgement of change event .

In some embodiments computing node may indicate a status of a change event in change event entry . Computing node may attempt to retry execution of action process for endpoint devices e.g. endpoint device that are unresponsive. The number of retries may be determined based on change event entry which is defined by device access management system . Upon determining that the number of retries has been reached for retrying execution of an action process computing node may remove e.g. de queue change event entry from change event queue . Computing node may store information in an error log e.g. a server audit record indicating that an action process was not completed for endpoint device .

Computing node may transmit result information indicating a result of action process for change event . Result information may indicate a status of acknowledgement regarding action process for endpoint devices identified in change event entry . For example result information may indicate that acknowledgement was received from endpoint device and was not received from endpoint device . Result information may indicate endpoint devices that have received notification about change event .

In some embodiments subsequent attempts to retry execution of an action process may be performed by a different computing node. Upon receipt of result information device access management system may schedule another computing node e.g. computing node to retry execution of an action process that was not completed for change event .

Upon determining that each endpoint device of a set of endpoint devices has indicated acknowledgement for a change event a computing node may remove a change event entry from change event queue and send result information to device access management system . For example upon receiving acknowledgements computing node may remove change event entry from change event queue and may transmit result information to device access management system . Result information may indicate that action process was completed for change event entry .

Device access management system may perform operations to schedule one or more computing nodes to perform action processes for additional change events that occur in an enterprise system. For example illustrates a sequence of operations for initiating an action process for a change event according to some embodiments of the present invention. In particular illustrates an example of a second change event change event that is identified by device access management system after change event is identified by device access management system . In this example operations may occur after operations have been performed in the example illustrated in . In some embodiments all or some of operations may occur concurrently with operations based on when change event is determined.

Continuing from the example in change event entry may persistently remain on change event queue until all endpoint devices e.g. endpoint devices identified in change event entry have received information about change event . A change event entry may remain on the change event queue until all devices affected by the change event corresponding to the change event entry have been notified about the change event. In some embodiments the change event may be retransmitted to remote devices to retry communication of the change event. A change event entry such as change event entry may remain on change event queue even after another change event e.g. change event is identified. Device access management system may perform processing to notify remote devices e.g. endpoint devices affected by change event .

Computing node may perform operations to retry execution of action process for change event to notify endpoint device about change event . Execution of action process may be retried since acknowledgement was not received from endpoint device on a previous attempt to notify endpoint device about change event . Action process may include communicating information about change event to endpoint device .

The information about a change event may be communicated to a remote device as a notification. The notification may be communicated through a communication system that supports a notification service e.g. a push notification service . In some examples notifications may be communicated in a different order e.g. asynchronously that an order shown in . A remote device may communicate with the communication system e.g. send a pull request to obtain information about a change event identified by a notification.

Operations may include device access management system processing change event to notify endpoint devices affected by change event . In this example device access management system may create two change event entries to balance the process load for communication of change event to endpoint devices . Change event entry may be created for endpoint device . Change event entry may be created for a set of endpoint devices including endpoint devices .

Device access management system may select a set of computing nodes e.g. computing nodes to notify endpoint devices about change event . Device access management system may schedule computing node to handle an action process e.g. action process for change event entry and may schedule computing node to handle action process for change event entry . In some embodiments computing nodes and device access management system may concurrently handle processing for multiple change events when those change events do not conflict or dependent on each other. For example change events may conflict when they are related to changes in the same policy.

Upon scheduling of change event computing node may perform processing to handle change event entry and computing node may perform processing to handle change event entry . Each of computing nodes and computing nodes may instantiate a change event object based on a change event class corresponding to the type of change event for change event . Each of computing nodes and computing nodes may establish an action process object for change event .

Using the established action process object action process may be invoked by computing node for endpoint device and may be invoked by computing node for each endpoint device in set of devices . For action process computing node may communicate information about change event to endpoint device . Computing node may communicate information about change event to each endpoint device in set of devices . Computing node may receive from endpoint device an acknowledgement indicating that action process has been completed for endpoint device . Computing node may receive from endpoint devices of set of devices an acknowledgement respectively indicating that action process has been completed for endpoint devices . Communications e.g. acknowledgements from remote devices may be received asynchronously from an order in which the communications are sent from different endpoint devices.

In some embodiments a computing node may receive communication e.g. an acknowledgement from an endpoint device regarding one action process after the computing node has begun processing for a different action process. For example computing node may receive an acknowledgement from endpoint device after computing node has begun processing for action process . Acknowledgement may be received for a retry of action process . Although shown in a particular sequence acknowledgement may be received before after or concurrently with communication between computing node and endpoint device for action process .

Computing node may determine whether action process has completed for endpoint device . Upon receiving acknowledgement computing node may remove change event entry from change event queue and may transmit result information to device access management system . Result information may indicate that action process was completed for change event entry .

Computing node may determine whether action process has completed for endpoint device . Upon receiving acknowledgement computing node may remove change event entry from change event queue and may transmit result information to device access management system . Result information may indicate that action process was completed for change event entry .

Computing node may determine whether action process has completed for endpoint devices . Upon receiving acknowledgement computing node may remove change event entry from change event queue and may transmit result information to device access management system . Result information may indicate that action process was notified for change event entry .

Device access management may perform operations to handle processing for additional change event entries if any on change event queue . Operations may end when change event queue is empty.

In some embodiments data structure may be defined based on a metadata class change event class . A metadata class may define the type of information stored for a change event. The metadata class may define one or more fields of information for a change event to identifying a unique change event. The metadata class may be a template class that defines the type of information stored for any type of change event. Data structure may be implemented for different types of change events. In some embodiments a metadata class may be defined for each different type of change event. A change event object may be a metadata object that is represented by data structure . The data stored in data structure for a change event object may include metadata. The metadata may include data obtained from a change event entry. A change event object may be created by instantiating a change event class for a type of change event. A data structure representing a change event object may include the type of information defined by the change event class that was instantiated.

Data structure may be implemented as one or a combination of different types of data structures including without restriction an array a record a relational database table a hash table a linked list or other types of data structures. For purposes of illustration data structure is shown in an arrangement with a particular number of fields however data structure may be defined by more or fewer fields in different arrangement than shown. Each instance of data structure may be stored in a data store such as change events .

In the example shown in data structure may include a field type of Change Event that includes information indicating a type of change event. Examples of types of change events may include without restriction a policy change application change or synchronization settings change.

Field Change in data structure may include information indicating details about the change. For example field may indicate the policy that is changed for a policy change. In some embodiments field may include or reference information related to the change. For example when a policy has changed field may include a reference to a revised policy that has changed. Information in field may be included in a change event object that is created for the change event.

Data structure may include a field Change Event Status that includes information indicating a status of communicating the change event to a remote device. A computing node may use information in field to determine a status of the action process performed for the change event. Examples of the change event status may include without restriction pending error retry or acknowledged. For example the computing node may determine whether each of the remote devices identified by devices have acknowledged the change event communicated to the remote devices for the action process. A computing node may determine whether to retry initiating an action process for the change event based on the change event status. The computing node may update field with information indicating the status of the change event.

Data structure may include a field Device s that includes device information e.g. a device identifier of each remote device in a set of remote devices for which an action process is to be performed for the change event. The device information may be obtained from a device registry for each of the set of remote devices. The device information may be identified based on an association with an identity of a user registered with an enterprise system.

Data structure may include a field Retry Configuration that indicates a configuration for retrying the action process for the change event. The retry configuration may be based on various factors such as a type of change event. The retry configuration may indicate the number of times the action process may be attempted. A computing node and device access management system may use retry configuration to determine whether to invoke an action process again for a change event that was not acknowledged by a remote device.

In some embodiments a different action process class may be defined for each different action process corresponding to a type of change event. In some embodiments a different action process class may be defined for each different type of change event. Multiple action classes may be defined for a single type of change event where different action processes may be executed for the type of change event.

Data structure may be implemented as one or a combination of different types of data structures including without restriction an array a record a relational database table a hash table a linked list or other types of data structures. For purposes of illustration data structure is shown in an arrangement with a particular number of fields however data structure may be defined by more or fewer fields in different arrangement than shown. Each instance of data structure may be stored in a data store such as action processes data store .

Field in data structure may include information identifying an action process to be performed for a type of change event corresponding to the action process object. Examples of an action process may include without restriction a policy change process an application change process and a synchronization setting change. An action process may be different depending on the type of change event for which the action process is performed. In some embodiments different action processes may be defined for a single type of change event where different changes may be associated with the type of change event.

Data structure may include a field Change Event Status that includes information indicating a status of communicating the change event to a remote device. A computing node may use information in field to determine a status of the action process performed for the change event. Examples of the change event status may include without restriction pending error retry and acknowledged. For example the computing node may determine whether each of the remote devices has acknowledged the change event communicated to the remote devices for the action process. The remote devices may be identified by a change event object passed to an action process when initiated. The computing node may determine whether to retry initiating an action process for the change event based on the change event status.

An action process may be defined by one or more routines in an action process class. The routines may include code e.g. instructions to perform an action process. The routines may be invoked using an action process object instantiated based on the action process class. For example an action process class may include an execution routine e.g. a run routine which when invoked for an action process object initiates the execution routine. In some embodiments the execution method may accept a change event object indicating information about a change event. The execution method may use the information in a change event object to perform an action process for the change event.

The action process class may include one or more routines that are specific to a change in access associated with a type of change event. Some routines may include code that instructs an action process for a remote device to perform for a change event. One routine may include code to transmit the change event to a remote device and to instruct the remote device to perform an action process for the change event. For example when field indicates a policy change the action process may include changing a policy on a remote device. One routine may transmit information about the change event to a remote device and a policy to be changed on the remote device.

In the example above invoking an execution routine e.g. run may initiate an action process that includes updating a policy at a remote device. The execution routine may invoke other routines defined by the action class. In some embodiments an action process class may include an application programming interface API with one or more additional routines related to an action process. The routines may be invoked by the action process class for an action process object instantiated for that class. Examples of routines may include setTaskFailed and setTaskCompleted These routines may cause information to be stored in data structure about an action process. For example setTaskFailed may be invoked to store information in an action process object indicating a change event status of error in field . In another example setTaskCompleted may be invoked to indicate a change event status of acknowledged in field . The execution method can determine execution for an action process based on a change event status indicated by field in an action process object used to invoke the execution method.

Data structure may include a field Retry Configuration that indicates a configuration for retrying the action process for a change event. The retry configuration may be based on various factors such as a type of change event. The retry configuration may indicate the number of times the action process may be attempted. A computing node and device access management system may use retry configuration to determine whether to invoke an action process again for a change event that was not acknowledged by a remote device.

Field of data structure may include a change event object. Field may indicate a reference in storage to a change event object or may include information in the change event object itself. A change event object passed to an execution method may be stored using field . A computing node may update a change event status in a change event object referenced in field . In some embodiments an execution method in an action class may access information in the change event object referenced from field .

A change event object may be defined based on a metadata class. A change event object may be instantiated based on the metadata class. A data structure such as any of data structures may be created as a change event object based on the metadata class that is instantiated. A metadata class may define the type of information stored in a change event object instantiated based on that metadata class. A different metadata class may be defined for each type of change event. A change event object may include one or more fields of information about a change event. The fields may be defined based on the metadata class from which the change event object is instantiated. As such a change event object may include fields defined based on a metadata class for a type of change event. Examples of different metadata classes are described below. In some embodiments a change event object may be a plain old Java object defined based on a Java class.

Each of data structures may be implemented as one or a combination of different types of data structures including without restriction an array a record a relational database table a hash table a linked list or other types of data structures. For purposes of illustration data structures are shown in an arrangement with a particular number of fields however data structures may be defined by more or fewer fields in different arrangement than shown. Each instance of one of data structures may be stored in a data store such as change events data store .

Data structure is an example of a change event object for a type of change event categorized as a policy change. Field type of change event in data structure may include information identifying a policy change as one type of change event. Examples of a policy change may include without restriction a change in a compliance policy a change in an enrollment policy a change in a workspace policy and a change in a device policy.

In some embodiments a metadata class may include routines to obtain information stored in an object that is instantiated based on the class. For example the policy change class above may include routines such as getEndpointIds setEndpointIds and getType to obtain information stored in a change event object.

Field Policy Type includes information indicating a type of policy that has changed for accessing an enterprise system. The policy types may be defined in the metadata class from which data structure is instantiated. Examples of types of policies include without restriction an enrollment policy a compliance policy a workspace policy and a device policy.

In some embodiments data structure may include a policy information field Policy Information which indicates information about a policy that has changed. Field may include without restriction a policy name of a policy that has changed the policy a policy identifier of the policy and any other information identifying the policy.

Field Application Update in data structure may include information identifying applications that have changed for the policy change. In some embodiments the policy change class may define the applications that are added or removed for a policy.

Field Settings Update in data structure may include information identifying settings e.g. synchronization settings that have changed for the policy change. In some embodiments the policy change class may define the settings that are added or removed for a policy.

Field Group Update in data structure may include information identifying user groups that have changed for the policy change. In some embodiments the policy change class may define the groups that are added or removed for a policy. A user group may be defined as a group of users associated with one or more roles.

Field Device Identifiers in data structure may include device information such as device identifiers each of which identifies a remote device affected by the change represented by data structure .

Data structure is an example of a change event object for a type of change event categorized as an application change. Field type of change event in data structure may include information identifying an application change as one type of change event. Examples of an application change may include without restriction adding an application to a catalog of applications accessible to the plurality of remote devices removing an application from the catalog modifying a version of an application in the catalog changing access to the applications changing access to applications that can be pushed to a remote device or other type of changes to an application.

Field Application Identifiers in data structure may include information about an identifier of one or more applications that have changed. The application identifiers may be used to reference an application in storage.

Field Old Version in data structure may include an identifier of a version of application before that application changed. Field New Version includes an identifier of a version of application after an application has changed. A remote device can determine whether to update an application based on the version change between the old version and the new version.

Field Distribution Information in data structure may include information about distribution identifiers used to further identify an application that has changed.

Field Device Identifiers in data structure may include device information such as device identifiers each of which identifies a remote device affected by the change represented by data structure .

Data structure is an example of a change event object for a type of change event categorized as a synchronization settings change. Field type of change event in data structure may include information identifying a synchronization settings change as one type of change event.

Field Synchronization Settings in data structure may include information about one or more synchronization settings e.g. setting setting etc. that have changed. Examples of settings may include without limitation one or more client settings for a secure workspace and or one or more remote device settings such as email settings network settings e.g. virtual private network settings or Wifi settings . In some embodiments field may include the settings themselves that have changed or a reference to storage where the change in settings is stored.

Field Update in data structure may include information about the type of change for a synchronization setting. Examples of the type of change include adding a setting removing a setting or updating a setting.

Field Device Identifiers in data structure may include device information such as device identifiers each of which identifies a remote device affected by the change represented by data structure .

Now turning to a flowchart is shown illustrating a process for communicating change events to remote devices that access an enterprise system according to some embodiments of the present invention. In some embodiments the process depicted in may be implemented using device access management system and or one or more computing nodes depicted in .

The process depicted by flowchart may be implemented in software e.g. code instructions program executed by one or more processing units e.g. processors cores hardware or combinations thereof. The software may be stored in a memory e.g. on a memory device on a non transitory computer readable storage medium . The particular series of processing steps of flowchart is not intended to be limiting. Other sequences of steps may also be performed according to alternative embodiments. For example alternative embodiments of the present invention may perform the steps outlined above in a different order. Moreover the individual steps illustrated in may include multiple sub steps that may be performed in various sequences as appropriate to the individual step. Furthermore additional steps may be added or removed depending on the particular applications. While processing depicted in is with respect to a single change in access to an enterprise system the processing may be performed for multiple changes in access to the enterprise system. While processing depicted in is with respect to a single type of change event corresponding to a change in access to an enterprise system the processing may be performed for multiple types of change events corresponding to changes in access to the enterprise system. One of ordinary skill in the art would recognize many variations modifications and alternatives.

The processing in flowchart is initiated at step by determining a type of change event corresponding to a change in access to an enterprise system for a plurality of remote devices. For example device access management system may identify a change event corresponding to a change in access to enterprise computer system and may determine the types of the change event. Device access management system may manage access to an enterprise system. Managing access may include managing compliance policies for the remote devices managing applications distributed to the remote devices and or managing synchronization of settings for communication by the remote devices with the enterprise system.

Types of changes events may include for example a policy change an application change a change in a synchronization setting related to accessing the enterprise system or other type of identifiable change related to accessing an enterprise system. A change event may correspond to one or more events which individually or in combination correspond to a change in access to an enterprise system using a remote device. In some embodiments a change event may correspond to multiple types of change events.

One type of change event for example is a policy change. Examples of a policy change may include a change in a compliance policy for accessing an enterprise system a change in an enrollment policy for registering a remote device to access an enterprise system a change in a workspace policy for a workspace on a remote device that accesses an enterprise system or a change in a device policy of a remote device that accesses an enterprise system. A change in a policy may be identified when a policy is created updated or removed. A change in a policy may be identified as a change event and a type of the change event may be determined when a policy related to access to an enterprise system using a remote device has changed.

Another type of change event for example is an application change. Examples of an application change may include adding an application to a catalog of applications accessible to the plurality of remote devices removing an application from the catalog modifying a version of an application in the catalog or other change related to an application that accesses an enterprise system. When an application changes or an application is added to a group of applications accessible to a user of an enterprise system a change in an application may be identified as a change event.

Yet another type of change event for example is a change in a synchronization setting related to accessing an enterprise system. Examples of a change in a synchronization setting may include a change in a time period for synchronization of policies or a change in application synchronization settings.

An action process class associated with a type of change event may be identified at step . As explained above an action process object may correspond to a data structure that stores information defined by an action process class. An action process class may be associated with one or more types of change events. The action process class may define an action process to perform on a remote device for one or more types of change events associated with the action process class. As such the action process object may be associated with the one or more types of change events that are associated with the action process class from which the action process object is defined. An action process class can be identified based on a type of change event e.g. the type of change event determined at step .

At step a processing load for one or more computing nodes may be determined. For example device access management system may determine a processing load of each of computing nodes . A processing load of a computing node may correspond to a value indicating the processing capabilities of that computing node and or the current amount of work that is processed by that computing node. In some embodiments one or more third party systems may be used to determine a value that indicates the processing load of a computing node.

A processing load may be determined by computing a variety of measurements. The measurements individually or collectively may indicate the processing load of the computing node. In one example a processing load may be determined by computing a value that indicates the number of change events that a computing node can manage. In another example the processing load may be determined by computing the number of action processes e.g. an action process initiated using an action process object established based on action process class initiated by the computing node.

A set of computing nodes may be selected to perform an action process for a change in access at step . The set of computing nodes may be selected from a plurality of computing nodes. The set of computing nodes may include one or more computing nodes. For example device access management system may select a set of computing nodes e.g. a set of computing nodes including computing nodes and from computing nodes .

The set of computing nodes may be selected based on a processing load e.g. the processing load determined at step of each of a plurality of computing nodes. Each of the set of computing nodes may be selected for that set based on a processing load threshold. In some embodiments each of the computing nodes selected for a set of computing nodes may have processing load that satisfies the processing load threshold. In one example the processing load threshold may be defined based on a threshold number of change events that a computing node can process. In another example the processing load threshold may be defined based on an action process threshold defined as a threshold number of actions processing a computing node has initiated. In this example each computing node of the set of computing nodes may be selected based on the processing load threshold such that the processing load for each computing node of the set of computing nodes satisfying the action process threshold.

Processing for flowchart may continue to one or more process flows e.g. process flow and process flow . The action process e.g. the action process defined by the action process class identified at step may be implemented for each process flow. Each process flow may be implemented for a set of remote devices of the plurality of remote devices for which access to an enterprise system has changed. Each remote device in a set of remote devices e.g. set of devices for a process flow e.g. process flow may be different from each remote device in a set of remote devices e.g. set of devices corresponding to a different flow e.g. process flow . In some embodiments the process flows may be executed concurrently with each other.

In the example of process flow may be implemented for a first set of remote devices e.g. set of devices of a plurality of remote devices for which a type of change event was determined at step . At step a change event object may be established for the first set of remote devices. As explained above a change event object may correspond to a data structure that stores information. The information stored in a change event object may be defined based on a change event class. A change event object may indicate information about a change in access to an enterprise system. A different change event class may be defined for each of a plurality of types of change events. A change event object may be established based on a type of change event. The change event class corresponding to the type of change event may be used to establish the change event object.

A change event object may be established for a change in access for the first set of devices. A change event entry may be placed on a queue e.g. a change event queue of for a set of devices for which access has changed. In some embodiments a change event entry may be defined as a data structure. The change event entry may indicate the type of information to store for a change event corresponding to a type of change event. For example a change event entry may be defined much like a change event object based on a change event class corresponding to a type of change event for the change in access. The change event entry may include information indicating a change in access for the first set of devices and the type of change event. The change event entry may include information identifying each of the first set of remote devices. Establishing the change event object may include instantiating a change event object based on the change event entry for the first set of remote devices placed on the queue. In some embodiments the change event object once established may include information identifying the set of devices for which the change event object was established.

At step an action process for a first action process object may be initiated. The action process may be defined for an action process class identified at step . Instantiating the action process for a first action process object may include establishing a first action process object based on the action process class. The first action process object may be established by instantiating the action process class. During instantiation of the action process class a change event object e.g. the change event object established at step is passed to the action process class. Instantiating the action process for a first action process object may include invoking the action process using the first action process object. The action process may be invoked by calling a routine provided in the action process class. The first action process object may be passed to the routine when the action process is invoked.

Process flow may be implemented for a second set of remote devices e.g. set of devices . At step a change event object may be established for the second set of remote devices of a plurality of remote devices for which a type of change event was determined at step . A change event object may be established for a change in access for the second set of devices.

At step an action process for a second action process object may be initiated. The action process may be defined for an action process class identified at step . Instantiating the action process for a second action process object may include establishing a second action process object based on the action process class. The second action process object may be established by instantiating the action process class. During instantiation of the action process class a change event object e.g. the change event object established at step is passed to the action process class. Instantiating the action process for a second action process object may include invoking the action process using the second action process object. The action process may be invoked by calling a routine provided in the action process class. The second action process object may be passed to the routine when the action process is invoked. In some embodiments the action process initiated for the first action process object at step may be initiated concurrently with the action process initiated for the second action process object at step .

Processing for flowchart may end at step where each of the processing flows e.g. processing flow and processing flow ends after completing its execution.

In various embodiments server may be adapted to run one or more services or software applications such as services and applications that may implement a device access management system for managing events related to accessing an enterprise system using remote devices. In certain embodiments server may also provide other services or software applications can include non virtual and virtual environments. In some embodiments these services may be offered as web based or cloud services or under a Software as a Service SaaS model to the users of client computing devices and or . Users operating client computing devices and or may in turn utilize one or more client applications to interact with server to utilize the services provided by these components.

In the configuration depicted in software components and of system are shown as being implemented on server . In other embodiments one or more of the components of system and or the services provided by these components may also be implemented by one or more of the client computing devices and or . Users operating the client computing devices may then utilize one or more client applications to use the services provided by these components. These components may be implemented in hardware firmware software or combinations thereof. It should be appreciated that various different system configurations are possible which may be different from distributed system . The embodiment shown in is thus one example of a distributed system for implementing an embodiment system and is not intended to be limiting.

Client computing devices and or may include various types of computing systems. For example a client computing device may include portable handheld devices e.g. an iPhone cellular telephone an iPad computing tablet a personal digital assistant PDA or wearable devices e.g. a Google Glass head mounted display running software such as Microsoft Windows Mobile and or a variety of mobile operating systems such as iOS Windows Phone Android BlackBerry 10 Palm OS and the like. The devices may support various applications such as various Internet related apps e mail short message service SMS applications and may use various other communication protocols. The client computing devices may also include general purpose personal computers including by way of example personal computers and or laptop computers running various versions of Microsoft Windows Apple Macintosh and or Linux operating systems. The client computing devices can be workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems such as for example Google Chrome OS. Client computing devices may also include electronic devices such as a thin client computer an Internet enabled gaming system e.g. a Microsoft Xbox gaming console with or without a Kinect gesture input device and or a personal messaging device capable of communicating over network s .

Although distributed system in is shown with four client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with server .

Network s in distributed system may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of available protocols including without limitation TCP IP transmission control protocol Internet protocol SNA systems network architecture IPX Internet packet exchange AppleTalk and the like. Merely by way of example network s can be a local area network LAN networks based on Ethernet Token Ring a wide area network the Internet a virtual network a virtual private network VPN an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the Institute of Electrical and Electronics IEEE 802.11 suite of protocols Bluetooth and or any other wireless protocol and or any combination of these and or other networks.

Server may be composed of one or more general purpose computers specialized server computers including by way of example PC personal computer servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. Server can include one or more virtual machines running virtual operating systems or other computing architectures involving virtualization. One or more flexible pools of logical storage devices can be virtualized to maintain virtual storage devices for the server. Virtual networks can be controlled by server using software defined networking. In various embodiments server may be adapted to run one or more services or software applications described in the foregoing disclosure. For example server may correspond to a server for performing processing as described above according to an embodiment of the present disclosure.

Server may run an operating system including any of those discussed above as well as any commercially available server operating system. Server may also run any of a variety of additional server applications and or mid tier applications including HTTP hypertext transport protocol servers FTP file transfer protocol servers CGI common gateway interface servers JAVA servers database servers and the like. Exemplary database servers include without limitation those commercially available from Oracle Microsoft Sybase IBM International Business Machines and the like.

In some implementations server may include one or more applications to analyze and consolidate data feeds and or event updates received from users of client computing devices and . As an example data feeds and or event updates may include but are not limited to Twitter feeds Facebook updates or real time updates received from one or more third party information sources and continuous data streams which may include real time events related to sensor data applications financial tickers network performance measuring tools e.g. network monitoring and traffic management applications clickstream analysis tools automobile traffic monitoring and the like. Server may also include one or more applications to display the data feeds and or real time events via one or more display devices of client computing devices and .

Distributed system may also include one or more databases and . These databases may provide a mechanism for storing information such as user interactions information usage patterns information adaptation rules information and other information used by embodiments of the present invention. Databases and may reside in a variety of locations. By way of example one or more of databases and may reside on a non transitory storage medium local to and or resident in server . Alternatively databases and may be remote from server and in communication with server via a network based or dedicated connection. In one set of embodiments databases and may reside in a storage area network SAN . Similarly any necessary files for performing the functions attributed to server may be stored locally on server and or remotely as appropriate. In one set of embodiments databases and may include relational databases such as databases provided by Oracle that are adapted to store update and retrieve data in response to SQL formatted commands.

In some embodiments a cloud environment may provide one or more services for managing events related to accessing an enterprise system using remote devices. is a simplified block diagram of one or more components of a system environment in which services may be offered as cloud services in accordance with an embodiment of the present disclosure. In the illustrated embodiment in system environment includes one or more client computing devices and that may be used by users to interact with a cloud infrastructure system that provides cloud services including services for managing events related to accessing an enterprise system using remote devices. Cloud infrastructure system may comprise one or more computers and or servers that may include those described above for server .

It should be appreciated that cloud infrastructure system depicted in may have other components than those depicted. Further the embodiment shown in is only one example of a cloud infrastructure system that may incorporate an embodiment of the invention. In some other embodiments cloud infrastructure system may have more or fewer components than shown in the figure may combine two or more components or may have a different configuration or arrangement of components.

Client computing devices and may be devices similar to those described above for client computing devices and . Client computing devices and may be configured to operate a client application such as a web browser a proprietary client application e.g. Oracle Forms or some other application which may be used by a user of the client computing device to interact with cloud infrastructure system to use services provided by cloud infrastructure system . Although exemplary system environment is shown with three client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with cloud infrastructure system .

Network s may facilitate communications and exchange of data between client computing devices and and cloud infrastructure system . Each network may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including those described above for network s .

In certain embodiments services provided by cloud infrastructure system may include a host of services that are made available to users of the cloud infrastructure system on demand. In addition to services related to managing events related to accessing an enterprise system using remote devices various other services may also be offered including without limitation online data storage and backup solutions Web based e mail services hosted office suites and document collaboration services database processing managed technical support services and the like. Services provided by the cloud infrastructure system can dynamically scale to meet the needs of its users.

In certain embodiments a specific instantiation of a service provided by cloud infrastructure system may be referred to herein as a service instance. In general any service made available to a user via a communication network such as the Internet from a cloud service provider s system is referred to as a cloud service. Typically in a public cloud environment servers and systems that make up the cloud service provider s system are different from the customer s own on premises servers and systems. For example a cloud service provider s system may host an application and a user may via a communication network such as the Internet on demand order and use the application.

In some examples a service in a computer network cloud infrastructure may include protected computer network access to storage a hosted database a hosted web server a software application or other service provided by a cloud vendor to a user or as otherwise known in the art. For example a service can include password protected access to remote storage on the cloud through the Internet. As another example a service can include a web service based hosted relational database and a script language middleware engine for private use by a networked developer. As another example a service can include access to an email software application hosted on a cloud vendor s web site.

In certain embodiments cloud infrastructure system may include a suite of applications middleware and database service offerings that are delivered to a customer in a self service subscription based elastically scalable reliable highly available and secure manner. An example of such a cloud infrastructure system is the Oracle Public Cloud provided by the present assignee.

Cloud infrastructure system may also provide big data elated computation and analysis services. The term big data is generally used to refer to extremely large data sets that can be stored and manipulated by analysts and researchers to visualize large amounts of data detect trends and or otherwise interact with the data. This big data and related applications can be hosted and or manipulated by an infrastructure system on many levels and at different scales. Tens hundreds or thousands of processors linked in parallel can act upon such data in order to present it or simulate external forces on the data or what it represents. These data sets can involve structured data such as that organized in a database or otherwise according to a structured model and or unstructured data e.g. emails images data blobs binary large objects web pages complex event processing . By leveraging an ability of an embodiment to relatively quickly focus more or fewer computing resources upon an objective the cloud infrastructure system may be better available to carry out tasks on large data sets based on demand from a business government agency research organization private individual group of like minded individuals or organizations or other entity.

In various embodiments cloud infrastructure system may be adapted to automatically provision manage and track a customer s subscription to services offered by cloud infrastructure system . Cloud infrastructure system may provide the cloud services via different deployment models. For example services may be provided under a public cloud model in which cloud infrastructure system is owned by an organization selling cloud services e.g. owned by Oracle Corporation and the services are made available to the general public or different industry enterprises. As another example services may be provided under a private cloud model in which cloud infrastructure system is operated solely for a single organization and may provide services for one or more entities within the organization. The cloud services may also be provided under a community cloud model in which cloud infrastructure system and the services provided by cloud infrastructure system are shared by several organizations in a related community. The cloud services may also be provided under a hybrid cloud model which is a combination of two or more different models.

In some embodiments the services provided by cloud infrastructure system may include one or more services provided under Software as a Service SaaS category Platform as a Service PaaS category Infrastructure as a Service IaaS category or other categories of services including hybrid services. A customer via a subscription order may order one or more services provided by cloud infrastructure system . Cloud infrastructure system then performs processing to provide the services in the customer s subscription order.

In some embodiments the services provided by cloud infrastructure system may include without limitation application services platform services and infrastructure services. In some examples application services may be provided by the cloud infrastructure system via a SaaS platform. The SaaS platform may be configured to provide cloud services that fall under the SaaS category. For example the SaaS platform may provide capabilities to build and deliver a suite of on demand applications on an integrated development and deployment platform. The SaaS platform may manage and control the underlying software and infrastructure for providing the SaaS services. By utilizing the services provided by the SaaS platform customers can utilize applications executing on the cloud infrastructure system. Customers can acquire the application services without the need for customers to purchase separate licenses and support. Various different SaaS services may be provided. Examples include without limitation services that provide solutions for sales performance management enterprise integration and business flexibility for large organizations.

In some embodiments platform services may be provided by cloud infrastructure system via a PaaS platform. The PaaS platform may be configured to provide cloud services that fall under the PaaS category. Examples of platform services may include without limitation services that enable organizations such as Oracle to consolidate existing applications on a shared common architecture as well as the ability to build new applications that leverage the shared services provided by the platform. The PaaS platform may manage and control the underlying software and infrastructure for providing the PaaS services. Customers can acquire the PaaS services provided by cloud infrastructure system without the need for customers to purchase separate licenses and support. Examples of platform services include without limitation Oracle Java Cloud Service JCS Oracle Database Cloud Service DBCS and others.

By utilizing the services provided by the PaaS platform customers can employ programming languages and tools supported by the cloud infrastructure system and also control the deployed services. In some embodiments platform services provided by the cloud infrastructure system may include database cloud services middleware cloud services e.g. Oracle Fusion Middleware services and Java cloud services. In one embodiment database cloud services may support shared service deployment models that enable organizations to pool database resources and offer customers a Database as a Service in the form of a database cloud. Middleware cloud services may provide a platform for customers to develop and deploy various business applications and Java cloud services may provide a platform for customers to deploy Java applications in the cloud infrastructure system.

Various different infrastructure services may be provided by an IaaS platform in the cloud infrastructure system. The infrastructure services facilitate the management and control of the underlying computing resources such as storage networks and other fundamental computing resources for customers utilizing services provided by the SaaS platform and the PaaS platform.

In certain embodiments cloud infrastructure system may also include infrastructure resources for providing the resources used to provide various services to customers of the cloud infrastructure system. In one embodiment infrastructure resources may include pre integrated and optimized combinations of hardware such as servers storage and networking resources to execute the services provided by the PaaS platform and the SaaS platform and other resources.

In some embodiments resources in cloud infrastructure system may be shared by multiple users and dynamically re allocated per demand. Additionally resources may be allocated to users in different time zones. For example cloud infrastructure system may enable a first set of users in a first time zone to utilize resources of the cloud infrastructure system for a specified number of hours and then enable the re allocation of the same resources to another set of users located in a different time zone thereby maximizing the utilization of resources.

In certain embodiments a number of internal shared services may be provided that are shared by different components or modules of cloud infrastructure system to enable provision of services by cloud infrastructure system . These internal shared services may include without limitation a security and identity service an integration service an enterprise repository service an enterprise manager service a virus scanning and white list service a high availability backup and recovery service service for enabling cloud support an email service a notification service a file transfer service and the like.

In certain embodiments cloud infrastructure system may provide comprehensive management of cloud services e.g. SaaS PaaS and IaaS services in the cloud infrastructure system. In one embodiment cloud management functionality may include capabilities for provisioning managing and tracking a customer s subscription received by cloud infrastructure system and the like.

In one embodiment as depicted in cloud management functionality may be provided by one or more modules such as an order management module an order orchestration module an order provisioning module an order management and monitoring module and an identity management module . These modules may include or be provided using one or more computers and or servers which may be general purpose computers specialized server computers server farms server clusters or any other appropriate arrangement and or combination.

In an exemplary operation at step a customer using a client device such as client computing devices or may interact with cloud infrastructure system by requesting one or more services provided by cloud infrastructure system and placing an order for a subscription for one or more services offered by cloud infrastructure system . In certain embodiments the customer may access a cloud User Interface UI such as cloud UI cloud UI and or cloud UI and place a subscription order via these UIs. The order information received by cloud infrastructure system in response to the customer placing an order may include information identifying the customer and one or more services offered by the cloud infrastructure system that the customer intends to subscribe to.

At step the order information received from the customer may be stored in an order database . If this is a new order a new record may be created for the order. In one embodiment order database can be one of several databases operated by cloud infrastructure system and operated in conjunction with other system elements.

At step the order information may be forwarded to an order management module that may be configured to perform billing and accounting functions related to the order such as verifying the order and upon verification booking the order.

At step information regarding the order may be communicated to an order orchestration module that is configured to orchestrate the provisioning of services and resources for the order placed by the customer. In some instances order orchestration module may use the services of order provisioning module for the provisioning. In certain embodiments order orchestration module enables the management of business processes associated with each order and applies business logic to determine whether an order should proceed to provisioning.

As shown in the embodiment depicted in at step upon receiving an order for a new subscription order orchestration module sends a request to order provisioning module to allocate resources and configure resources needed to fulfill the subscription order. Order provisioning module enables the allocation of resources for the services ordered by the customer. Order provisioning module provides a level of abstraction between the cloud services provided by cloud infrastructure system and the physical implementation layer that is used to provision the resources for providing the requested services. This enables order orchestration module to be isolated from implementation details such as whether or not services and resources are actually provisioned on the fly or pre provisioned and only allocated assigned upon request.

At step once the services and resources are provisioned a notification may be sent to the subscribing customers indicating that the requested service is now ready for use. In some instance information e.g. a link may be sent to the customer that enables the customer to start using the requested services.

At step a customer s subscription order may be managed and tracked by an order management and monitoring module . In some instances order management and monitoring module may be configured to collect usage statistics regarding a customer use of subscribed services. For example statistics may be collected for the amount of storage used the amount data transferred the number of users and the amount of system up time and system down time and the like.

In certain embodiments cloud infrastructure system may include an identity management module that is configured to provide identity services such as access management and authorization services in cloud infrastructure system . In some embodiments identity management module may control information about customers who wish to utilize the services provided by cloud infrastructure system . Such information can include information that authenticates the identities of such customers and information that describes which actions those customers are authorized to perform relative to various system resources e.g. files directories applications communication ports memory segments etc. Identity management module may also include the management of descriptive information about each customer and about how and by whom that descriptive information can be accessed and modified.

Bus subsystem provides a mechanism for letting the various components and subsystems of computer system communicate with each other as intended. Although bus subsystem is shown schematically as a single bus alternative embodiments of the bus subsystem may utilize multiple buses. Bus subsystem may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. For example such architectures may include an Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus which can be implemented as a Mezzanine bus manufactured to the IEEE P1386.1 standard and the like.

Processing subsystem controls the operation of computer system and may comprise one or more processing units etc. A processing unit may include be one or more processors including single core or multicore processors one or more cores of processors or combinations thereof. In some embodiments processing subsystem can include one or more special purpose co processors such as graphics processors digital signal processors DSPs or the like. In some embodiments some or all of the processing units of processing subsystem can be implemented using customized circuits such as application specific integrated circuits ASICs or field programmable gate arrays FPGAs .

In some embodiments the processing units in processing subsystem can execute instructions stored in system memory or on computer readable storage media . In various embodiments the processing units can execute a variety of programs or code instructions and can maintain multiple concurrently executing programs or processes. At any given time some or all of the program code to be executed can be resident in system memory and or on computer readable storage media including potentially on one or more storage devices. Through suitable programming processing subsystem can provide various functionalities described above for managing events related to accessing an enterprise system using remote devices.

In certain embodiments a processing acceleration unit may be provided for performing customized processing or for off loading some of the processing performed by processing subsystem so as to accelerate the overall processing performed by computer system .

I O subsystem may include devices and mechanisms for inputting information to computer system and or for outputting information from or via computer system . In general use of the term input device is intended to include all possible types of devices and mechanisms for inputting information to computer system . User interface input devices may include for example a keyboard pointing devices such as a mouse or trackball a touchpad or touch screen incorporated into a display a scroll wheel a click wheel a dial a button a switch a keypad audio input devices with voice command recognition systems microphones and other types of input devices. User interface input devices may also include motion sensing and or gesture recognition devices such as the Microsoft Kinect motion sensor that enables users to control and interact with an input device the Microsoft Xbox 360 game controller devices that provide an interface for receiving input using gestures and spoken commands. User interface input devices may also include eye gesture recognition devices such as the Google Glass blink detector that detects eye activity e.g. blinking while taking pictures and or making a menu selection from users and transforms the eye gestures as input into an input device e.g. Google Glass . Additionally user interface input devices may include voice recognition sensing devices that enable users to interact with voice recognition systems e.g. Ski navigator through voice commands.

Other examples of user interface input devices include without limitation three dimensional 3D mice joysticks or pointing sticks gamepads and graphic tablets and audio visual devices such as speakers digital cameras digital camcorders portable media players webcams image scanners fingerprint scanners barcode reader 3D scanners 3D printers laser rangefinders and eye gaze tracking devices. Additionally user interface input devices may include for example medical imaging input devices such as computed tomography magnetic resonance imaging position emission tomography medical ultrasonography devices. User interface input devices may also include for example audio input devices such as MIDI keyboards digital musical instruments and the like.

User interface output devices may include a display subsystem indicator lights or non visual displays such as audio output devices etc. The display subsystem may be a cathode ray tube CRT a flat panel device such as that using a liquid crystal display LCD or plasma display a projection device a touch screen and the like. In general use of the term output device is intended to include all possible types of devices and mechanisms for outputting information from computer system to a user or other computer. For example user interface output devices may include without limitation a variety of display devices that visually convey text graphics and audio video information such as monitors printers speakers headphones automotive navigation systems plotters voice output devices and modems.

Storage subsystem provides a repository or data store for storing information that is used by computer system . Storage subsystem provides a tangible non transitory computer readable storage medium for storing the basic programming and data constructs that provide the functionality of some embodiments. Software programs code modules instructions that when executed by processing subsystem provide the functionality described above may be stored in storage subsystem . The software may be executed by one or more processing units of processing subsystem . Storage subsystem may also provide a repository for storing data used in accordance with the present invention.

Storage subsystem may include one or more non transitory memory devices including volatile and non volatile memory devices. As shown in storage subsystem includes a system memory and a computer readable storage media . System memory may include a number of memories including a volatile main random access memory RAM for storage of instructions and data during program execution and a non volatile read only memory ROM or flash memory in which fixed instructions are stored. In some implementations a basic input output system BIOS containing the basic routines that help to transfer information between elements within computer system such as during start up may typically be stored in the ROM. The RAM typically contains data and or program modules that are presently being operated and executed by processing subsystem . In some implementations system memory may include multiple different types of memory such as static random access memory SRAM or dynamic random access memory DRAM .

By way of example and not limitation as depicted in system memory may store application programs which may include client applications Web browsers mid tier applications relational database management systems RDBMS etc. program data and an operating system . By way of example operating system may include various versions of Microsoft Windows Apple Macintosh and or Linux operating systems a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems the Google Chrome OS and the like and or mobile operating systems such as iOS Windows Phone Android OS BlackBerry 10 OS and Palm OS operating systems.

Computer readable storage media may store programming and data constructs that provide the functionality of some embodiments. Software programs code modules instructions that when executed by processing subsystem a processor provide the functionality described above may be stored in storage subsystem . By way of example computer readable storage media may include non volatile memory such as a hard disk drive a magnetic disk drive an optical disk drive such as a CD ROM DVD a Blu Ray disk or other optical media. Computer readable storage media may include but is not limited to Zip drives flash memory cards universal serial bus USB flash drives secure digital SD cards DVD disks digital video tape and the like. Computer readable storage media may also include solid state drives SSD based on non volatile memory such as flash memory based SSDs enterprise flash drives solid state ROM and the like SSDs based on volatile memory such as solid state RAM dynamic RAM static RAM DRAM based SSDs magnetoresistive RAM MRAM SSDs and hybrid SSDs that use a combination of DRAM and flash memory based SSDs. Computer readable media may provide storage of computer readable instructions data structures program modules and other data for computer system .

In certain embodiments storage subsystem may also include a computer readable storage media reader that can further be connected to computer readable storage media . Together and optionally in combination with system memory computer readable storage media may comprehensively represent remote local fixed and or removable storage devices plus storage media for storing computer readable information.

In certain embodiments computer system may provide support for executing one or more virtual machines. Computer system may execute a program such as a hypervisor for facilitating the configuring and managing of the virtual machines. Each virtual machine may be allocated memory compute e.g. processors cores I O and networking resources. Each virtual machine typically runs its own operating system which may be the same as or different from the operating systems executed by other virtual machines executed by computer system . Accordingly multiple operating systems may potentially be run concurrently by computer system . Each virtual machine generally runs independently of the other virtual machines.

Communications subsystem provides an interface to other computer systems and networks. Communications subsystem serves as an interface for receiving data from and transmitting data to other systems from computer system . For example communications subsystem may enable computer system to establish a communication channel to one or more client computing devices via the Internet for receiving and sending information from and to the client computing devices.

Communication subsystem may support both wired and or wireless communication protocols. For example in certain embodiments communications subsystem may include radio frequency RF transceiver components for accessing wireless voice and or data networks e.g. using cellular telephone technology advanced data network technology such as 3G 4G or EDGE enhanced data rates for global evolution WiFi IEEE 802.11 family standards or other mobile communication technologies or any combination thereof global positioning system GPS receiver components and or other components. In some embodiments communications subsystem can provide wired network connectivity e.g. Ethernet in addition to or instead of a wireless interface.

Communication subsystem can receive and transmit data in various forms. For example in some embodiments communications subsystem may receive input communication in the form of structured and or unstructured data feeds event streams event updates and the like. For example communications subsystem may be configured to receive or send data feeds in real time from users of social media networks and or other communication services such as Twitter feeds Facebook updates web feeds such as Rich Site Summary RSS feeds and or real time updates from one or more third party information sources.

In certain embodiments communications subsystem may be configured to receive data in the form of continuous data streams which may include event streams of real time events and or event updates that may be continuous or unbounded in nature with no explicit end. Examples of applications that generate continuous data may include for example sensor data applications financial tickers network performance measuring tools e.g. network monitoring and traffic management applications clickstream analysis tools automobile traffic monitoring and the like.

Communications subsystem may also be configured to output the structured and or unstructured data feeds event streams event updates and the like to one or more databases that may be in communication with one or more streaming data source computers coupled to computer system .

Computer system can be one of various types including a handheld portable device e.g. an iPhone cellular phone an iPad computing tablet a PDA a wearable device e.g. a Google Glass head mounted display a personal computer a workstation a mainframe a kiosk a server rack or any other data processing system.

Due to the ever changing nature of computers and networks the description of computer system depicted in is intended only as a specific example. Many other configurations having more or fewer components than the system depicted in are possible. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

Determining unit may determine a type of change event corresponding to a change in access to an enterprise system for a plurality of remote devices. Identifying unit may identify an action process class associated with the type of change event wherein the action process class defines an action process to perform for the type of change event. Selecting unit may select based on a processing load of each of a plurality of computing nodes a set of computing nodes of the plurality of computing nodes to perform the action process for the change in access. Establishing unit may establish based on the type of change event a first change event object for a first set of remote devices in the plurality of remote devices wherein a change event object indicates information about the change in access. Establishing unit may establish based on the type of change event a second change event object for a second set of remote devices in the plurality of remote devices wherein each of the first set of remote devices is different from each of the second set of remote devices.

In certain embodiments the action process for a first action process object is initiated by a first computing node of the set of computing nodes using the first change event object and the first action process object is established based on the action process class.

In certain embodiments the action process for a second action process object is initiated by a second computing node of the set of computing nodes using the second change event object and the second action process object is established based on the action process class.

In certain embodiments computing unit may compute the processing load for each of the plurality of computing nodes wherein a processing load of a computing node is computed based on a number of action processes the computing node has initiated and wherein the first computing node is selected for the set of computing nodes based on an action process threshold and wherein each of the set of computing nodes is selected based on the processing load for each of the set of computing nodes satisfying the action process threshold.

In certain embodiments the action process invoked using the first action process object includes transmitting to each of the first set of remote devices an instruction indicating the change in access and wherein the instruction causes at least one remote device in the first set of remote devices to apply the change in access.

According to at least one example an apparatus may be provided for managing change events for changes in access to an enterprise system. The apparatus may comprise means for determining an action to be performed on a plurality of remote devices means for adding on a queue a change event entry for each of a first set of remote devices and a second set of remote devices of the plurality of remote devices thereby adding multiple change event entries to the queue wherein each of the first set of remote devices is different from each of the second set of remote devices means for assigning from the queue to a first computing node a first change event entry corresponding to the first set of remote devices means for instantiating a first metadata object for the first change event entry and storing metadata identifying each of the first set of remote devices in the first metadata object means for instructing from the first computing node the action to be taken on each of the first set of remote devices based on the first metadata object means for assigning from the queue to a second computing node a second change event entry corresponding to the second set of remote devices means for instantiating a second metadata object for the second change event entry and storing metadata identifying each of the second set of remote devices in the second metadata object and means for instructing from the second computing node the action to be taken on each of the second set of remote devices based on the second metadata object. In certain embodiments instantiating the first metadata object is performed on the first computing node.

Although specific embodiments of the invention have been described various modifications alterations alternative constructions and equivalents are also encompassed within the scope of the invention. The modifications include any relevant combination of the disclosed features. Embodiments of the present invention are not restricted to operation within certain specific data processing environments but are free to operate within a plurality of data processing environments. Additionally although embodiments of the present invention have been described using a particular series of transactions and steps it should be apparent to those skilled in the art that the scope of the present invention is not limited to the described series of transactions and steps. Various features and aspects of the above described embodiments may be used individually or jointly.

Further while embodiments of the present invention have been described using a particular combination of hardware and software it should be recognized that other combinations of hardware and software are also within the scope of the present invention. Embodiments of the present invention may be implemented only in hardware or only in software or using combinations thereof. The various processes described herein can be implemented on the same processor or different processors in any combination. Accordingly where components or modules are described as being configured to perform certain operations such configuration can be accomplished e.g. by designing electronic circuits to perform the operation by programming programmable electronic circuits such as microprocessors to perform the operation or any combination thereof. Processes can communicate using a variety of techniques including but not limited to conventional techniques for interprocess communication and different pairs of processes may use different techniques or the same pair of processes may use different techniques at different times.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that additions subtractions deletions and other modifications and changes may be made thereunto without departing from the broader spirit and scope as set forth in the claims. Thus although specific invention embodiments have been described these are not intended to be limiting. Various modifications and equivalents are within the scope of the following claims.

