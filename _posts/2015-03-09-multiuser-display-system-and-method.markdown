---

title: Multi-user display system and method
abstract: A system and method implementing a multi-user display linking multiple independent software processes with remote mobile devices is disclosed. The system/method augments multiple planes of conventional video graphics memory (VGM) controlled by a video graphics controller (VGC) in a host computing context (HCC) with a plane selection register (PSR) that enables isolation of individual planes of video memory within the VGM. The PSR is associated with a process mapping table (PMT) that maps in hardware a user process identification (PID) associated with an individual software process running within the HCC under control of a host operating system (HOS). HOS process context changes update the PSR with PMT content corresponding to an active HCC PID. A video graphics encoder (VGE) inspects areas of change within individual VGM planes and emits these changes as streaming video content to an Ethernet interface communicating with remote mobile devices associated with the HCC PIDs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09195429&OS=09195429&RS=09195429
owner: 
number: 09195429
owner_city: 
owner_country: 
publication_date: 20150309
---
This application claims benefit under 35 U.S.C. 119 and incorporates by reference U.S. Provisional Patent Application for CLOUD COMPUTING SYSTEM AND METHOD by inventors Joseph Scott Morton Christopher Michael McDonald and Glenn Donald Knepp filed electronically with the USPTO on Mar. 10 2014 with Ser. No. 61 950 289 EFS ID 18414620 confirmation number 2283.

This application claims benefit under 35 U.S.C. 120 and incorporates by reference U.S. Utility Patent Application for CLOUD COMPUTING SYSTEM AND METHOD by inventors Joseph Scott Morton Christopher Michael McDonald and Glenn Donald Knepp filed electronically with the USPTO on Mar. 10 2015 with Ser. No. 14 642 639 EFS ID 21718675 confirmation number 1436.

All of the material in this patent application is subject to copyright protection under the copyright laws of the United States and of other countries. As of the first effective filing date of the present application this material is protected as unpublished material.

However permission to copy this material is hereby granted to the extent that the copyright owner has no objection to the facsimile reproduction by anyone of the patent documentation or patent disclosure as it appears in the United States Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The present invention generally relates to multi user display systems and methods for deploying host computer system HCS software applications to a mobile user device MUD . More specifically and without limitation the present invention permits a single video graphics controller VGC to support a number of independent users via the use of independently coordinated video graphics memory that is updated and streamed to the end users as separate compressed video streams CVS .

As generally depicted in the deployment of multi user cloud computing services typically involves allocation of an individual host computer system HCS with host operating system software HOS to an individual end user . This configuration typically includes the use of a video display device driver VDD that services a video graphics controller VGC having video graphics memory VGM that stores graphical information to be presented to the end user . This graphical data in the graphics memory is then transmitted serially to the video graphics display VGD for presentation to the end user . A variety of host application software HAS may be operable in this context on the HCS under control of the HOS and the VDD to display information via the VGC on the video graphics display for use by the end user .

Some networked variations of this configuration exist where the computer system communicates through a computer communication network CCN such as the Internet to form a virtual private network VPN to which a mobile device communicates and displays information to a mobile end user . Within this context each end user has the opportunity to run a variety of host application software HAS executed on the HCS .

As generally depicted in deployment of this architecture on a scaled basis involves construction of a host computer system blade rack comprising a number of HCS CPU blades each of which communicates via an Ethernet interface to an Ethernet switch to a computer network and the end user mobile device MUD . Application software on the MUD communicates via a VPN network back to the individual HCS CPU blade allocated for that individual MUD . Mapping of each individual HCS CPU blade to the end user mobile device MUD is accomplished via a resource allocator computer system dedicated to processing service requests from the individual end user mobile devices MUD .

The deployment of HAS to a large number of end users using this traditional methodology can be problematic for several reasons including 

The typical approaches to HAS deployment to remote computing devices includes the use of a web browser interface on the HCS as an access portal to the HAS or the use of a virtual private network VPN that links the MUD to the HCS over a secure network interface. Both of these approaches suffer from significant performance limitations in that they require a large communication bandwidth overhead between the HCS and MUD to maintain a real time view of the display screen that is simulated by the HCS for the purposes of providing a virtualized display for the HAS. MUDs having limited processing power or limited communication bandwidth to the HCS suffer in these circumstances because these limitations result in poor application responsiveness and a resulting poor user experience.

Additionally the large communication overhead associated with VPN methodologies especially in situations where the video display experiences a high rate of change or user input such as keyboard or mouse input is common results in higher communication costs for MUDs using this form of interface. High frame rate updates by a typical VPN remote console simulator often result in very high communication link bandwidth utilization between the HCS and MUD and cannot be supported in situations where the communication link bandwidth is limited. All of these drawbacks may be cost performance prohibitive in situations where the end user has limited financial and hardware means.

As an example of a conventional prior art remote terminal services emulator MICROSOFT Corporation has implemented Remote Desktop Protocol RDP . RDP is based on and an extension of the ITU T.120 family of protocols. RDP is a multiple channel capable protocol that allows for separate virtual channels for carrying device communication and presentation data from the server as well as encrypted client mouse and keyboard data. RDP provides an extensible base and supports up to 64 000 separate channels for data transmission and provisions for multipoint transmission.

On the server RDP uses its own video driver to render display output by constructing the rendering information into network packets by using RDP protocol and sending them over the network to the client. On the client RDP receives rendering data and interprets the packets into corresponding Microsoft Windows graphics device interface GDI API calls. For the input path client mouse and keyboard events are redirected from the client to the server. On the server RDP uses its own keyboard and mouse driver to receive keyboard and mouse events.

RDP implements a multichannel capable protocol allowing for separate virtual channels for carrying presentation data serial device communication licensing information highly encrypted data keyboard mouse activity and so on. As RDP is an extension of the core T.Share protocol several other capabilities are retained as part of the RDP such as the architectural features necessary to support multipoint multiparty sessions . Multipoint data delivery allows data from an application to be delivered in real time to multiple parties without having to send the same data to each session individually for example Virtual Whiteboards .

The activity involved in sending and receiving data through the RDP stack is essentially the same as the seven layer OSI model standards for common LAN networking today. Data from an application or service to be transmitted is passed down through the protocol stacks sectioned directed to a channel through MCS encrypted wrapped framed packaged onto the network protocol and finally addressed and sent over the wire to the client. The returned data works the same way only in reverse with the packet being stripped of its address then unwrapped decrypted and so on until the data is presented to the application for use. Key portions of the protocol stack modifications occur between the fourth and seventh layers where the data is encrypted wrapped and framed directed to a channel and prioritized.

Each Terminal Server protocol currently only RDP and Citrix s ICA are supported will have a protocol stack instance loaded a listener stack awaiting a connection request . The Terminal Server device driver coordinates and manages the RDP protocol activity and is made up of smaller components an RDP driver Wdtshare.sys for UI transfer compression encryption framing and so on and a transport driver Tdtcp.sys to package the protocol onto the underlying network protocol TCP IP.

As can be seen from the above discussion RDP simulates the video graphics memory VGM within the video device driver VDD to render display output into packets that are then reinterpreted by the remote terminal application. This in essence creates a simulated video display in software that encodes video rendering information transmits it to a remote host and recreates the rendering commands within the context of the remote terminal display. This terminal simulation results in significant computational overhead both on the host computer system as well as the remote mobile device as each is responsible for a software translation of graphics rendered information. The resulting user experience can be unacceptable especially in situations where the intervening computer communication network has low bandwidth or is susceptible to high transmission error probabilities.

While some of the prior art may teach some solutions to several of these problems the core deficiencies in the prior art systems have not been addressed.

Accordingly the objectives of the present invention are among others to circumvent the deficiencies in the prior art and affect the following objectives 

While these objectives should not be understood to limit the teachings of the present invention in general these objectives are achieved in part or in whole by the disclosed invention that is discussed in the following sections. One skilled in the art will no doubt be able to select aspects of the present invention as disclosed to affect any combination of the objectives described above.

The present invention supports the deployment of multi user display host software applications HAS and content to a plurality of mobile computing devices MCD from a host computer system HCS over a computer communication network CCN . In an exemplary invention system embodiment the HCS is configured with conventional host operating system software HOS that supports execution of the HAS. This HOS is equipped with a video graphics controller VGC having multiple planes of video graphics display memory VGM . Each video memory graphics plane VGP may be associated with a separate user application context running under control of the HOS. A plane selection register PSR is used to select which VGP is active and configured to receive data from a video graphics controller VGC configured within the HCS and controlled by a video device driver VDD operating under control of the HOS. A process ID PID context associative memory CAM may be used to support context switches between users and provide the functionality of the PSR.

Within this context a plurality of virtual user machines VUM can be supported in which a given user application program UAP may operate independently of other processes running on the HOS. As a given UAP is provided time shared access to HCS resources graphics commands sent to the VDD during this time slice are associated with a UAP process ID PID . This PID is associated with a specific plane within the VGM by a plane mapping table PMT CAM memory that activates a specific plane within the VGM when the PID is written to the CAM address.

As individual VGP are updated by the VGC and as user context is switched to another VGP by the VDD via the PID CAM PSR a video graphics encoder VGE inspects a VGP and encodes changes in the VGP content into a data content that is streamed to the remote MUD via Ethernet TCP IP transport packets through a computer communication network CCN such as the Internet. This MPEG encoded content is then decoded on the remote MUD and presented for display to the remote user.

By utilizing streamed MPEG video rather than transmitting display images frame by frame from the HCS to the MUD the bandwidth requirements for hosting the HAS on the MUD are drastically reduced as the HCS can implement the HAS locally and merely provide a thin client audio video keyboard mouse interface to the MUD via translation services performed local to the MUD.

While this invention is susceptible of embodiment in many different forms there is shown in the drawings and will herein be described in detail preferred embodiments of the invention with the understanding that the present disclosure is to be considered as an exemplification of the principles of the invention and is not intended to limit the broad aspect of the invention to the embodiment illustrated.

The numerous innovative teachings of the present application will be described with particular reference to the presently preferred embodiment wherein these innovative teachings are advantageously applied to the particular problems of a MULTI USER DISPLAY SYSTEM AND METHOD. However it should be understood that this embodiment is only one example of the many advantageous uses of the innovative teachings herein. In general statements made in the specification of the present application do not necessarily limit any of the various claimed inventions. Moreover some statements may apply to some inventive features but not to others.

The present invention anticipates that a wide variety of remote video streaming formats may be used to implement the video streaming component of the present invention. Without limitation the RVS may include audio and or video formats including but not limited to MPEG MPEG 2 MPEG 4 H.264 THEORA WEBM DIRAC REALVIDEO VP8 and HEVC.

The present invention anticipates that a wide variety of host computer system and host operating system software HOS may be used to implement the present invention. Without limitation the HOS may include MICROSOFT WINDOWS MAC and LINUX operating system products.

While MPEG compression will be used as the exemplary video graphics encoder VGE video compression methodology in the following discussion the present invention is not limited to this particular form of video data compression. Thus the term video graphics encoder VGE may refer to any number of video compression techniques and specifically includes those selected from the group consisting of MPEG MPEG 2 MPEG 4 H.264 THEORA WEBM DIRAC REALVIDEO VP8 and HEVC.

The present invention has as a general object to use cloud technologies to deliver the latest software solutions to any internet enabled devices. The disclosed invention provides a complete desktop experience to mobile computing mobile user devices MCDs MUDs such as inexpensive pen and touch devices. Various invention embodiments for example would permit any WINDOWS MAC or LINUX software application running on a remote host computer to effectively operate on a USD 50 ANDROID tablet.

The present invention operates to lower the effective cost of deploying multi user display solutions. The present invention leverages multi user display to put the power of an expensive laptop into the hands of individuals unable to afford the tools necessary to support traditional multi user display resources. The present invention allows for an individual in any underdeveloped nation with a cellphone Internet connection and inexpensive tablet computer to have the same software tools available to any person in a developed nation.

This objective is achieved by changing the way in which software is deployed to mobile devices. Rather than executing host software applications HASs on the mobile computing device MCD these applications are executed on cloud host computer systems HCS . The presentation displays for HAS operating on the HCS are then streamed as MPEG video to the MCD. This allows the HCS to perform the heavy processing associated with the HAS and simultaneously minimize the communication bandwidth necessary to support a virtualized display to the MCD MUD. User input from the MCD MUD is translated into native HCS user input protocols and transparently entered into the HAS.

An overview of the present invention system is generally depicted in wherein a typical host computer system blade processor supporting a number of end users is illustrated. Here the host computer system CPU is controlled by operating system software read from a computer readable medium that implements a video display device driver VDD servicing a video graphics controller VGC . Associated with the VGC are a number of video graphics memory planes VMP that are allocated to individual mobile user devices MUD and their associated end users by the HCS HOS and VDD .

The operating system is configured to support multiple virtual machines MVM within the CPU by allocating CPU hardware resources among various end users . This would be consistent with a timeshared multi user environment known to those skilled in the art. However this multi user context is augmented with provisions within the VDD to select a particular VMP associated with a particular end user context prior to sending commands to the VGC . In this manner the commands sent to the VGC will be executed by the VGC against a particular memory plane in the VMP array. This architecture allows utilization of a single CPU HCS and single VGC to service a number of MUD devices associated with their end users .

The present invention differs from traditional graphics remote user systems incorporating graphics in that the VMP data is not serially streamed to the remote MUD using traditional VPN technologies but is rather inspected by a video graphics encoder VGE and then streamed in compressed format via an Ethernet interface to a computer communication network CCN to the MUD for display to the end user . Here the transmission overhead of large displays with high resolution is drastically minimized by the use of MPEG compression thus minimizing the necessary bandwidth in the CCN to support the display of information on the MUD . Each VMP is associated with an IP and or MAC address associated with the MUD and thus the video graphics encoder VGE may associate this transport information with the encoded data to the Ethernet interface for routing to the appropriate MUD .

Additional detail of a preferred exemplary system embodiment is depicted in wherein the host computer context supports multiple simultaneous MPEG video streams to a group of users in a mobile computer context MCC through a computer communication network CCN . This MCC may include a plurality of users each having a mobile user device with associated machine instructions read from a computer readable medium .

Within this context the VGC interacts with a VMP as selected by the PSR . The PSR is configured to select an individual memory plane within the VMP based on the user process context at the time the VGC is activated. The video graphics encoder VGE is configured to read a particular plane in the VMP and encodes this into a compressed video stream and transport this via an Ethernet interface to a selected MUD in the mobile user context . In conjunction with writes to the PSR a plane address access stack may keep track of accesses to the VMP to allow the VGE to selectively process individual planes within the VMP for transmission to the appropriate end user . An address access arbiter may be used to coordinate access to the VMP among the VGC and the VGE .

As generally depicted in interconnects between the HCS VGC and VGE may take the form of various address and data busses. In this preferred exemplary embodiment the HCS in conjunction with the VDD control the VGC but also serve to load the display ID latch with information from a PID to display index table . The process ID PID of a given user application context virtual machine is loaded into the latch information into a register used to decode an individual video RAM plane to which the VGC writes rendered graphics display information. The VGE then compresses individual video RAM planes and transmits the encoded information via Ethernet hardware to individual mobile user devices.

The present invention in many preferred embodiments may utilize a special purpose customized process ID PID context associative memory CAM to enable the selected VMP plane in the VGM. provides an overview of the PID CAM architecture in this context. The PID CAM operates in part as a conventional RAM memory having a CONTROL BUS READ WRITE CHIP ENABLE ADDRESS BUS and DATA BUS . The ADDRESS BUS is configured to address N PID words in the RAM and thus has log 2 N address lines. The DATA BUS is configured in M bits as wide as the datum containing the PROCESS IDENTIFICATION of the user processes as defined by the HOS. Typically this will be M 1 2 4 or 8 bytes in width.

The RAM portion of the PID CAM is decoded by a decoder that selects PID WORDS of M bits in width in an array that is N words in size. ENABLE signals from the decoder select individual PID words for READ R or WRITE W access via the DATA bus . This allows the PID CAM to be loaded by the HOS with the PID of every user application context requiring a graphics display VGP display plane from the VGC. The HOS in conjunction with the VDD is responsible for loading the PID CAM RAM cells with the appropriate PID values associated with the user video contexts simultaneously supported by the HOS.

Once the PID RAM cell is loaded with a vector of PID values the VDD operates as follows. Upon any application programming interface API request from the HOS to render graphics data on the VGC the VDD will first determine the PID of the currently active user process and write this PID via the DATA BUS to the PID CAM using the MATCH function . This triggers match logic associated with each PID RAM cell to attempt a match between the value on the DATA BUS and that contained in any of the associated PID RAM cell . The results of this equality match are a number of individual video graphics plane VGP enable lines that are used to enable a plane in the VGM. This plane enable signal is latched and remains active until the next MATCH is received by the PID CAM . After the MATCH function is completed by writing the user PID to the PID CAM and a particular plane of the VGM has been enabled the VDD communicates with the VGC to render graphics information to the selected and active VGP.

The PID CAM is a very fast device in this context and permits instantaneous switching from one user video context to another by directly generating enable lines that are used to enable disable planes of video memory to which the VGC will subsequently write rendered graphics information. Note also in this context that the VGC need not have any contextual information regarding the fact that video rendering commands from the VDD are being realized in more than one VGP plane in the VGM. This allows highly integrated and robust VGC controllers to be used in this context without any hardware adjustments to their memory interface or control logic.

The HOS and VDD are required to cooperate and ensure that the PID information contained in the PID CAM reflects the current PID values present in the HOS. For this reason the PID CAM in many application contexts is reset to all ZEROS on VDD initialization and individual RAM cells are cleared to ZERO to indicate scenarios in which the PID for the user context has been terminated and the user virtual machine deleted from the HOS.

Based on the previously described system context the present invention anticipates a methodology to support multiple user displays in the context of a HOS operating on a HCS within a timesharing and or multi tasking application execution environment. In this manner a plurality of users operating remote MUD computing devices may activate a variety of application software on the HCS under control of the HOS and thus share resources video graphics controller hard drive etc. that would normally be dedicated to a particular user. An exemplary present invention method can be generally described in the flowcharts of as incorporating the following steps 

This general method may be modified heavily depending on a number of factors with rearrangement and or addition deletion of steps anticipated by the scope of the present invention. Integration of this and other preferred exemplary embodiment methods in conjunction with a variety of preferred exemplary embodiment systems described herein is anticipated by the overall scope of the present invention.

An overview of the multiplexed video RAM architecture used in many preferred invention embodiments is generally depicted in . Here it can be observed that the HCS interacts with a host control address data bus to communicate with the video graphics controller VGC . The VGC has a separate video control unit control address data bus to communicate with video memory containing the representation of the user video display. The present invention augments the VGC with a process ID PID CAM that may be read written matched by the HCS under control of the video display driver VDD that is responsible for control of the VGC . Setup of the PID CAM typically involves writing a user process id PID into a location in the CAM whose address is associated with a video memory plane reserved for that user application context.

The PID CAM is written in a MATCH mode by the VDD with the current process ID of the user application context before the first video command sent to the VGC after an application context switch has occurred in the HOS. This write operation triggers a MATCH function in the PID CAM that enables selection of RAM memory for the VGC and RAM memory access for the video graphics encoder VGE . Access to the RAM memory is determined by VGC control address data select multiplexers and video graphics encoder VGE control address data select multiplexers . The combination of the VGC control address data select multiplexers and video graphics encoder VGE control address data select multiplexers permit individual memory planes to be isolated and provide for dual port memory access. This control logic may be externally applied to conventional RAM memories or in some circumstances integrated into a common IC package supporting full dual port access to RAM memory with independent CONTROL ADDRESS DATA bus configurations.

As described below the PID CAM in many preferred embodiments incorporates a two stage pipeline latch architecture in which MATCH writes to the PID CAM activate CONTROL ADDRESS DATA multiplexors to provide the VGC access to the memory plane associated with the currently selected user context and simultaneously activate CONTROL ADDRESS DATA multiplexors to provide the video graphics encoder VGE access to the memory plane associated with the previously selected user context. In this manner as a memory plane is updated by a user context it may be processed by the video graphics encoder VGE when the next user context is activated and another video memory plane is made active. In some preferred embodiments a plurality of video graphics encoders VGE may be used to encode a number of video memory planes simultaneously. This may be accomplished by increasing the depth of the pipeline latch and providing for additional MPEG CONTROL ADDRESS DATA busses to support the addition data of paths to the individual video memory elements.

The present invention in many preferred embodiments may make use of a specialized context associative memory CAM to coordinate access to video memory that is shared between the VGC display processor and video graphics encoder VGE . As generally depicted in this custom CAM memory has as its inputs a control bus comprising READ R WRITE W MATCH M and CHIP ENABLE CE controls as well as a conventional ADDRESS bus and DATA bus that are used to communicate with the VGC.

This PID CAM operates as follows. Under control of the HOS VDD a HOS virtual user PID is written to the memory array via the DATA bus using the control bus W and CE signals at a particular address determined by the ADDRESS bus . The particular memory array address written will be determined by the HOS based on available PID slots for concurrent user processing. This write configuration will generally be associated with the creation of a virtual machine process to support the individual end user and their request for execution of a software application under control of the HOS.

Once written the memory array will be used to compare in parallel incoming key data from the DATA bus as follows. Whenever a request for graphics output is processed by the HOS it will activate or call as a subroutine procedures in the VDD that interact with the VGC. Before graphics commands are sent to the VGC the VDD writes the current user PID via the DATA bus to the PID CAM and configures the CONTROL bus for a MATCH operation CE and M enabled . This triggers the parallel comparison logic within the PID CAM to simultaneously match the key data from the DATA bus against all data stored in the memory array and determine which if any memory array address index contains matching PID data. The output of this match operation is fed into a series of sequential latches that serve to provide a FIFO of matched PID keys from the memory array .

The output of the first index match latch serves as the memory address index for the VGC mux selection and activates access to a particular plane in the video graphics memory array. The output of the second index match latch serves as the memory address index for the MPEG mux selection and activates access to a particular plane in the video graphics memory array for the video compression process.

More detail of the PID CAM is provided in the comparison diagram depicted in . Here it can be seen that the traditional CAM operation incorporates a memory array and parallel comparison logic that compares key data against all the entries in the memory array and produces parallel match outputs that are then encoded to reproduce the encoded address of the matching memory key element.

The present invention PID CAM operates in a similar fashion but with a different mechanism for identifying match conditions. Here it can be seen that the present invention PID CAM operation incorporates a memory array and parallel comparison logic that compares key data against all the entries in the memory array and produces parallel match outputs that are then latched to provide individual memory select lines for the graphics controller video memory . Sequential latch data is fed to a follow on latch to store individual memory select lines for the MPEG memory. While it is possible for the present invention PID CAM to incorporate an encoder as present in the traditional CAM it is generally not necessary because the individual match lines provided by the present invention CAM may be directly used to select individual RAM memories as depicted in . This elimination of an intermediate encoder decoder for the memory selection serves to improve overall speed and performance of the system.

This FIFO processing of memory accesses by the PID CAM operates to allow during a given processor time slice access to a given video memory plane that is updated based on activity by a given user process in the context of the overall HOS operation. When the processor time slice is completed a context switch will occur to another user process at which time the VDD will load another PID into the CAM and select another video memory plane for active write by the graphics controller. Simultaneously the second follow on latch will have as its contents the PREVIOUS memory plane that was written during the previous user application context. The MPEG controller will inspect this memory plane and generate a compressed video output stream from this memory plane and transmit this to a remote MUD via the Ethernet interface on the CPU blade. Thus the MPEG compression process immediately follows in time the update of a video memory plane by the VDD and VGC.

In this manner updates to a virtualized user video display are immediately compressed by the video graphics encoder VGE during the next context switch to another user virtual machine. This allows user application contexts that are idle to not impact the overall performance of the system as without an update to the virtual user graphics display there will be no PID CAM activity for that user process. Since most activity on the end user MUD consists of idle time in which screen content is essentially static the methodology used in this PID CAM allows a large number of users to simultaneously run applications on a single CPU yet have their video display outputs separated physically by the fact that they have separate and distinct memory associated with the video output.

Furthermore note that this configuration only requires separate MEMORY to support each individual user application context. While MEMORY is relatively inexpensive other components in the blade system such as the main CPU VGC and Ethernet interface are relatively expensive. Thus this architecture leverages inexpensive portions of the system and minimizes overall cost associated with more expensive system components. Furthermore bandwidth utilization is optimized since the video graphics encoder VGE will only transmit a compressed representation of CHANGES in the individual user video display content rather than entire screens of raw data as are typically transmitted by VPN remote console applications. The use of MPEG compression also makes use of embedded MPEG hardware decoders present in many MUD devices that would normally be used by the end user.

The CONTROL ADDRESS DATA selection multiplexers described in may be illustrated in further detail in . Here a typical C A D MUX is depicted which is enabled from the PID CAM match latch output . The MUX SELECT enable SE is used to gate tri state buffers for the control lines and address bus lines and the enable for transmission gates or equivalently back to back bidirectional tri state buffers associated with the data bus .

Each video RAM memory chip supports conventional chip enable CE output enable R write enable W controls that are used in conjunction with an address bus A and data bus D to communicate to the video memory. This multiplexing architecture permits both the VGC and video graphics encoder VGE access to an individual video RAM but not at the same time. Implementation of the PID CAM ensures that accesses to a given memory RAM by the VGC are followed in time by accesses to that memory RAM by the video graphics encoder VGE so that there are never any simultaneous accesses to a given RAM element by both the VGC and video graphics encoder VGE .

One feature of the present invention that supports improved transmission efficiency of video information to remote MUDs is the identification of areas within the graphics RAM that have been modified by the VGC. To fully understand how this feature is accomplished a view of the graphics memory plane and its relationship to the virtual graphics display is required. As depicted in a virtual video display VVD comprises individual pixels typically having 1 2 3 or 4 bytes of color hue information associated with each pixel configured in a row column architecture. Common video pixel sizing configurations may include 640 480 1024 768 1140 1080 1920 1080 1600 1200 3840 2160 4096 2160 and some higher resolutions are also in use. For the purposes of this discussion we will assume 4 bytes pixel location as this is a common memory mapping in high quality graphics systems.

Mapping of these VDD resolutions onto physical VGM is depicted in wherein the row and column are mapped by a sequential address register that cycles through each row and each column within the row accessing bytes associated with each pixel 4 bytes in this example for transfer to the display device for visual interpretation. Traditionally MPEG encoding of the VGM would require that the entire memory be scanned to initially generate a baseline for the video compression. This baseline is encoded and transmitted to the remote MUD for initial presentation to the user. Subsequent to this operation complete scans of the VGM are issued to determine differentials in video content. These differentials in video content are then be encoded and sent to the receiving MUD for decoding and display update on the remote display screen.

An inherent performance issue in this scenario is the fact that the VGE must make complete scans of the VGM to determine the video content differentials. The present invention in many preferred embodiments optimizes this function by incorporating logic within the VGM to note ranges of ROW COLUMN that have been modified by the VGC. These ranges of video content that are modified are then directly used by the VGE to only use this information for the modified compression frames that are sent to the MUD. This optimization serves two purposes. First it drastically reduces the amount of computation time necessary for the VGE to determine what has been modified within the VGM. Second it reduces the bandwidth requirements for access to the VGM by the VGE. These two features in common permit one VGE to service multiple independent virtual user displays in one HCC with the HOS permitting multiple virtual user environments to coexist without the need for individual hardware to support the remote MUD displays.

Consistent with the description in a set of region modification registers RMR may be implemented as depicted in that determine a range of ROW COLUMN modifications in the VVD during a predetermined time or event interval. Here the aspect ratio of the virtual video display is presented as video aspect parameter VAP setup data to the RMR and the VGE so that information encoded in the VGM may be properly interpreted as illustrated in . The RMR receives the VAP as well as address and write control information as the video graphics memory is written by the VGC. With the VAP and address information the RMR determines a range of minimum ROW COLUMN and maximum ROW COLUMN that correspond to the modified video display region within the overall virtual video display map. This range information is generally a subset of the overall virtual display map and thus permits the VGE to limit the computational scope of the video compression to just a small portion of the overall virtual video map .

The VGE may be configured with signaling indicating the beginning of a frame capture that sets a time window for analysis of the address stream by the RMR so that updates to the minimum ROW COLUMN and maximum ROW COLUMN are reset during the processing of individual frame modifications that are emitted as compressed data from the VGE .

Additional detail on a preferred exemplary RMR implementation is depicted in . Here the VAP information is used in conjunction with a VGM address and the VGM write enable signal to latch the memory address into a register typically on the falling edge of the WE signal . The address latch then feeds a ROW COLUMN decoder logic block configured by the VAP information to produce ROW COL bus data representing the associated ROW COL for the video memory access. The ROW COL data busses are then compared against MIN ROW COL latch data and MAX ROW COL latch data by magnitude comparators configured to detect MIN and MAX values respectively. If a new MIN ROW COL is detected then the corresponding MIN ROW COL latches are updated. If a new MAX ROW COL is detected then the corresponding MAX ROW COL latches are updated. The updated MIN MAX ROW COL latch data is made available to the VGE for use in identifying the area of the video display that has changed and must be compressed and transmitted as an updated video segment to the MUD. As depicted the VGE may initiate a RST signal to reset the magnitude comparison operation by SETTING the MIN ROW COL latches and CLEARING the MAX ROW COL latches . In this manner the next write operation will generally reset the MIN ROW COL latches and the MAX ROW COL latches to new values associated with the specific area of VGM that is updated by the write cycle from the VGC.

An exemplary implementation of a preferred row column decoder is depicted in . Here the VAP comprises the number of pixels row P and the number of bytes pixel B . This VAP information is used in conjunction with the latched VGM address to determine the number of bits associated with a pixel address. For example if the virtual video display has 4 bytes pixel then the first two address lines of each memory address will be associated with the same pixel 2 2 4 . Thus each pixel word address PWA has four associated bytes any of which if modified will result in a VGE processing of that pixel location.

Determination of the individual ROW associated with the particular PWA is calculated using hardware integer division of the PWA by the pixels row P to yield a quotient W P corresponding to the particular row associated with the PWA. Determination of the individual COL associated with the particular PWA is calculated using modulo integer division of the PWA by the pixels row P to yield a remainder W P corresponding to the particular column associated with the PWA. Since the pixels row P value does not assume arbitrary values and as stated previously may be generally limited to a number of known constant values associated with common video aspect ratios such as 640 480 1024 768 1140 1080 1920 1080 1600 1200 3840 2160 4096 2160 . Each of these individual divisors may be used with specialized division hardware to perform the division and remainder process using a pseudo division process.

A variety of hardware accelerated division methods may be used to quickly calculate the quotient W P and remainder W P for the above ROW COL decoder. One such method involves multiplication of the dividend by the reciprocal of the fixed constant divisor using SHIFT and ADD operations. To illustrate this method consider the simple case of dividing the PWA by 3. The reciprocal of 3 in binary is approximately 0.0101 0101 0101 0101 0101 0101 0101 0101. As an example a pseudo division by the constant 3 may take the form of the following hardware process 

Each of the functions described above may be implemented by simple hardware ADD functions as well as SHIFT operators which are well known in the art and can be implemented much faster than conventional multiply divide instructions associated with traditional digital computers. The multiply instruction may also be implemented using SHIFT and ADD hardware. Thus this ROW COL decoder can be configured to divide by fixed constants associated with the pixels row and rapidly generate a ROW COL that is then compared against MIN MAX values to define a modification region that is loaded into the RMR registers for inspection by the VGE to define the area of the virtual video display that must be updated to the MUD.

The present invention system anticipates a wide variety of variations in the basic theme of construction but can be generalized as a multi user display system comprising 

This general system summary may be augmented by the various elements described herein to produce a wide variety of invention embodiments consistent with this overall design description.

The present invention method anticipates a wide variety of variations in the basic theme of implementation but can be generalized as a multi user display method comprising 

This general method summary may be augmented by the various elements described herein to produce a wide variety of invention embodiments consistent with this overall design description.

The present invention anticipates a wide variety of variations in the basic theme of construction. The examples presented previously do not represent the entire scope of possible usages. They are meant to cite a few of the almost limitless possibilities.

This basic system and method may be augmented with a variety of ancillary embodiments including but not limited to 

One skilled in the art will recognize that other embodiments are possible based on combinations of elements taught within the above invention description.

In various alternate embodiments the present invention may be implemented as a computer program product for use with a computerized computing system. Those skilled in the art will readily appreciate that programs defining the functions defined by the present invention can be written in any appropriate programming language and delivered to a computer in many forms including but not limited to a information permanently stored on non writeable storage media e.g. read only memory devices such as ROMs or CD ROM disks b information alterably stored on writeable storage media e.g. hard disks and USB thumb drives and or c information conveyed to a computer through communication media such as a local area network a telephone network or a public network such as the Internet. When carrying computer readable instructions that implement the present invention methods such computer readable media represent alternate embodiments of the present invention.

As generally illustrated herein the present invention system embodiments can incorporate a variety of computer readable media that comprise computer usable medium having computer readable code means embodied therein. One skilled in the art will recognize that the software associated with the various processes described herein can be embodied in a wide variety of computer accessible media from which the software is loaded and activated. Pursuant to 35 USPQ2d 1383 U.S. Pat. No. 5 710 578 the present invention anticipates and includes this type of computer readable media within the scope of the invention. Pursuant to 500 F.3d 1346 Fed. Cir. 2007 U.S. patent application Ser. No. 09 211 928 the present invention scope is limited to computer readable media wherein the media is both tangible and non transitory.

A system and method implementing a multi user display linking multiple independent software processes with remote mobile devices has been disclosed. The system method augments multiple planes of conventional video graphics memory VGM controlled by a video graphics controller VGC in a host computing context HCC with a plane selection register PSR that enables isolation of individual planes of video memory within the VGM. The PSR is associated with a process mapping table PMT that maps in hardware a user process identification PID associated with an individual software process running within the HCC under control of a host operating system HOS . HOS process context changes update the PSR with PMT content corresponding to an active HCC PID. A video graphics encoder VGE inspects areas of change within individual VGM planes and emits these changes as streaming video content to an Ethernet interface communicating with remote mobile devices associated with the HCC PIDs.

