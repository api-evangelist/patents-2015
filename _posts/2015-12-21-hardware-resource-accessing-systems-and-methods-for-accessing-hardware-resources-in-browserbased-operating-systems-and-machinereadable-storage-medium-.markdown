---

title: Hardware resource accessing systems and methods for accessing hardware resources in browser-based operating systems and machine-readable storage medium thereof
abstract: Methods for accessing hardware resources in an electronic device with a browser-based operating system (OS) which includes a user interface running in a browser are provided. A local server is first provided on the electronic device, wherein the local server has a corresponding URL and a dedicated network port. Then, upon receiving a service request from the client-side web application, the local server analyzes a service type of the service request and performs an operation to at least one of the hardware resources corresponding to the service type, wherein the service request is generated and directed to the local server according to the URL and the dedicated network port of the local server by the client-side web application on the electronic device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09420040&OS=09420040&RS=09420040
owner: VIA TECHNOLOGIES, INC.
number: 09420040
owner_city: New Taipei
owner_country: TW
publication_date: 20151221
---
This application is a Continuation of pending U.S. application Ser. No. 13 835 249 filed on Mar. 15 2013 which claims priority of U.S. Provisional Application No. 61 674 470 filed on Jul. 23 2012 the entirety of which is incorporated by reference herein.

The invention relates to methods and systems for accessing hardware resources and more particularly to methods and systems for accessing hardware resources in electronic devices with browser based operating systems.

Most desktop operating systems OSs are designed to work with applications installed and executed locally using solid state storage or a hard drive. Recently with improvements in computer technology and growth in processor design cloud computing has been used widely in many applications. A browser based OS such as Chromium OS is a simplified operating system that runs a web browser to allow the use of cloud computing to access applications and data in the cloud. The browser based OS boots into a web browser as its user interface instead of a typical desktop on regular operating systems. The browser based OS may be designed for electronic devices that are mainly used to browse the Internet such as Netbooks Mobile Internet Devices PCs mobile phones and so on.

Such browser based OSs work exclusively with web applications which are composed with web languages such as HTML Hypertext Markup Language or JavaScript. The browser based OS includes a browser running on a stripped down version of a kernel such as Linux while the applications run on the Internet instead of Linux. Because of its simplicity the browser based OSs can boot extremely quickly and are easy to use. However with everything stored on the cloud hardware requirements for electronic devices with browser based OSs are relatively low and hardware capabilities are also limited. In addition for reasons of security and technological limitations the web applications running in a browser based OS cannot directly communicate with device drivers and cannot access hardware resources as a native operating system can.

Hardware resources accessing systems for use in an electronic device and method for accessing hardware resources in an electronic device using the same are provided.

In one embodiment a method for accessing hardware resources in an electronic device with a browser based operating system OS which comprises a client side web application running in a browser is provided. The method comprises the following steps. A local server is first provided on the electronic device wherein the local server has a corresponding Universal Resource Locator URL and a dedicated network port. Upon receiving a service request from the client side web application a service type of the service request is analyzed and an operation is performed to at least one hardware resource corresponding to the service type by the local server wherein the service request is generated and directed to the local server according to the URL and the dedicated network port of the local server by the client side web application on the electronic device.

Another exemplary embodiment of a hardware resources accessing system for use in an electronic device with a browser based OS comprising a user interface running in a browser comprises a plurality of hardware resources a client side web application and a local server on the electronic device. The client side web application runs in the browser for generating a service request with a service type. The local server has a corresponding URL and a dedicated network port. Upon receiving a service request with a service type the client side web application directs the service request to the local server according to the URL and the network port of the local server such that the local server determines the service type and performs an operation to at least one of the hardware resources corresponding to the service type.

Methods and systems may take the form of a program code embodied in a tangible media. When the program code is loaded into and executed by a machine the machine becomes an apparatus for practicing the disclosed method.

This description is made for the purpose of illustrating the general principles of the invention and should not be taken in a limiting sense. The scope of the invention is best determined by reference to the appended claims.

The hardware resource accessing system comprises a browser based OS a plurality of hardware resources and a local server . The browser based OS is a simplified OS that includes a browser not shown running on a stripped down version of a kernel such as Linux and boots into the browser as its user interface. In one embodiment for example the browser based OS is the Chromium OS but the invention is not limited thereto. The hardware resources may comprise peripheral devices such as a memory unit a display unit a south bridge chip and or a north bridge chip sensors therein and interfaces such as universal serial bus USB connection ports and I O ports. For example the hardware resources that may be monitored or controlled may include but are not limited to CPU operation voltages CPU fan speeds CPU temperatures CPU clocks CPU loadings hard drive temperatures RAM information graphics card information power supply control and so on. The local server is configured on the electronic device which may receive a service request from a client side web application communicate with corresponding hardware resources to perform an operation corresponding to the service request and further reply with the information corresponding to the service request to the requested client side web application . The local server has a corresponding Universal Resource Locator URL e.g. 127.0.0.1 and a dedicated network port e.g. the net socket port 10005. The local server may be implemented via software or hardware. In one embodiment the local server is implemented via software. It is understood that each of the hardware resources may have a corresponding hardware driver not shown for controlling the access thereto and the local server may communicate with the drivers of the hardware resources to obtain hardware information therefrom. For example the local server may communicate with the USB driver of a USB connection port to access data via the USB connection port or communicate with a specific hardware driver to obtain hardware information of the processing unit. The local server is designed to perform function calls to the drivers in the kernel of the browser based OS of the hardware resources and to reply the hardware information by folding such received hardware information within a message e.g. an HTML document and returning the message to the client side web application .

The client side web application may be run in the browser of the browser based OS. The client side web application is composed with web languages such as HTML or client side web browser scripting languages such as JavaScript. The client side web application may comprise a user interface for displaying and indicating information regarding the hardware resources . The client side web application may be an application capable of generating a hardware access request to the local server and or an application capable of receiving data from the local server and then performing an operation corresponding to the received data.

It is understood that the client side web application the browser based OS and the drivers of the hardware resources may first be stored in a storage unit not shown in and may then be loaded by the processing unit not shown in to a memory unit not shown in for operation. The browser based OS may then boot into the browser as its user interface and the client side web application may run in the browser. The hardware resource accessing system may perform the method for accessing hardware resources of the invention which will be discussed further in the following paragraphs.

The hardware resource accessing system may further communicate with a neighboring device that is a neighbor to the electronic device with the hardware resource accessing system via a specific hardware interface such as a USB connection port and a wireless technology used therebetween such as Bluetooth to obtain the hardware information of hardware resources from the neighboring device or transmit commands to and or receive commands from the neighboring device via the specific hardware interface and the wireless technology. To be more specific a hardware unit e.g. an interface board may be provided to communicate with the local server via the specific hardware interface and communicate with the neighboring device to transmit commands to and or receive commands from the neighboring device via the wireless technology wherein the hardware unit may be configured in the electronic device or be external to the electronic device. The neighboring devices may comprise any type of electronic devices such as mobile phones displays household appliances robotics and so on.

Methods for accessing hardware resources in an electronic device with a browser based OS which comprises a client side web application running in a browser will be discussed in detail below.

In step S a local server is provided on the electronic device wherein the local server has a corresponding Universal Resource Locator URL e.g. 127.0.0.1 and a dedicated network port e.g. the net socket port 10005. Then when a user requests to access hardware resources e.g. to monitor or control specific hardware resources in step S the client side web application on the electronic device generates a service request with a service type and directs the service request to the local server according to the URL and the dedicated network port of the local server. Upon receiving the service request from the client side web application in step S the local server analyzes the service type and performs an operation to at least one hardware resource corresponding to the service type.

In one embodiment the service type comprises obtaining specific hardware information of the electronic device to request for local hardware monitoring. The local server may further analyze the received service request to obtain a service type such as a function call to corresponding application programming interfaces APIs perform an operation to the specific hardware resources to obtain the hardware information corresponding thereto and reply with a message containing the requested hardware information to the client side web application.

First the client side web application generates a service request with a service type of obtaining the specific hardware information of the electronic device to request for local hardware monitoring according to the URL and the network port of the local server step S . In one embodiment the service request may be generated in response to the user s action in the web application in another embodiment the service request may be generated periodically to constantly monitor the hardware of interest. Then the client side web application may transmit the service request to the local server via the browser step S . Upon receiving the service request the local server analyzes the service request to obtain the server type therein and communicates with requested hardware resource to obtain hardware information corresponding to the service request step S . The service type which may be a function call to corresponding APIs may indicate a hardware monitoring request and thus a hardware monitoring operation to the hardware resources to be monitored may be performed. The local server then obtains a reply message from the requested hardware resource step S and transmits the replied message containing the requested hardware information to the client side web application for updating or displaying the requested hardware status on its user interface step S .

It is understood that the client side web application may be executed by various schemes such as static web page technology or dynamic web page technology. In one embodiment when the client side web application is implemented as a dynamic web page the user may make requests for data from the server that will be assembled on the fly according to what is requested. Dynamic pages may change every time they are loaded and they may change their content based on what the user does such as actions to generate service requests obtaining the hardware information. Dynamic web pages may be constructed by client side scripting or server side scripting. Conventionally in client side scripting client side scripts embedded within an HTML document are executed by the user s web browser which then displays the document including visible output from the script. Client side scripts may also contain instructions for the browser to follow in response to certain user actions. In contrast server side scripts embedded within an HTML document are executed by the web server to generate output which is then sent to the user s web browser. Client side scripts have greater access to the information and functions available on the user s browser whereas server side scripts have greater access to the information and functions available on the server.

Client side scripting benefits by providing an improved user interface in which the user does not experience the unfriendly refreshing of the web page but instead sees perhaps an animated GIF file indicating that the request occurred and the page will be updated shortly.

In some embodiments the client side web application of the present invention is constructed by client side web browser scripting languages such as JavaScript used for Dynamic HTML DHTML . The scripting language may also allow the use of remote scripting a technique by which the DHTML page requests additional information from a server using for example an XMLHttpRequest object which is an API for transferring data between clients and servers.

In one embodiment using JavaScript the step of directing the service request to the local server according to the URL and the network port of the local server may be implemented by dynamic JavaScript insertion. Dynamic JavaScript insertion comprises the steps of defining a new element in a source code of the client side web application e.g. the HTML file which includes the URL and the dedicated network port of the local server and replace the original element in the head section in the source code of the client side web application with the new element. In this embodiment the step of directing the service request to the local server according to the URL and the network port of the local server to generate a hardware monitor request in JavaScript performed by the client side web application may further comprise following steps 1 Define a new JavaScript node in the source code of the client side web application e.g. the HTML file 2 Search the node in the head section of the source code of the client side web application 3 Set a callback function to receive the returned responses from the local server 4 Replace the node in the head section with the new node which includes the URL of the local server and 5 The browser sends a request to the URL of the local server . shows an example of this part of the source code.

In another embodiment the step of directing the service request to the local server according to the URL and the network port of the local server performed by the client side web application may further comprise the steps of creating an XMLHttpRequest object and opening the XMLHttpRequest object with the URL and the network port of the local server .

Without using client side scripting such as JavaScript the entire web page must be refreshed and the local server is required to respond with the whole HTML webpage code resulting in a large amount of data for transmission. By using client side scripting the local server may just respond with simple JavaScript variables by asynchronous transmission. Thus the work of the local server may be simplified and refined to process necessary messages only while the other parts are handed over to the browser and the client side web application .

In some embodiments if the client side web application is implemented as a JavaScript webpage the user interface of the client side web application may be divided into a number of JavaScript areas each area having a JavaScript variable corresponding thereto and an asynchronous transmission may be performed between the local server and the client side web application to deliver JavaScript variables only and update the JavaScript variables in the corresponding JavaScript areas only instead of updating the full page of the webpage provided by the client side web application. is a schematic diagram illustrating an embodiment of an exemplary web page related to the client side web application of the invention. As shown in the JavaScript webpage provided by the client side web application is divided into JavaScript areas wherein each of the JavaScript areas may have responsive JavaScript variables and the JavaScript variables in the corresponding JavaScript areas may be updated only when an updating of the webpage is required. is a schematic diagram illustrating an embodiment of an exemplary user interface of the client side web application of the invention. As shown in the webpage containing the user interface may comprise three items for hardware monitoring which are information regarding CPU voltage CPU fan speed and CPU temperature respectively. Each of the items has a JavaScript area and a related JavaScript variable corresponding thereto. An asynchronous transmission may then be performed between the local server and the client side web application to deliver JavaScript variables only and update the JavaScript variables in the corresponding JavaScript areas of the items only.

When the client side web application is started a new JavaScript node is defined and assigned with a URL of the local server corresponding to hardware monitoring APIs step S . The original JavaScript node in the head section is then replaced with the new JavaScript node step S . For example in one embodiment the original Javascript node in the head section of the source code may be replaced with a source address to a new API request of http localhost 10005 HardwareMonitor.js wherein the localhost and 10005 respectively indicate the URL and the dedicated network port of the local server and HardwareMonitor.js indicates the corresponding hardware monitoring API request for hardware monitoring. Subsequently a request is sent to the URL of the local server to request hardware information step S . Because the request is sent to the URL of the local server the local server receives the request analyzes the service type of the request and then communicates i.e. performs function calls with the drivers of the specific hardware resources to obtain hardware information therefrom accordingly. It is then determined whether any response is received step S . If a response is received the response is processed and the corresponding hardware information is displayed step S . For example referring to if a response with information regarding the JavaScript variables voltage 1.12 fan speed 7500 and Temperature 35 corresponding to the JavaScript areas of the items were received the displayed data of the items will be updated to 1.12 V 7500 RPM and 35 C. respectively. The process is repeated to continuously monitor the hardware information. If no response is received No in step S which may be due to connection failure abnormal operations of the local server etc. the client side web application returns to the replace step S to repetitively send requests to the local server until a response is received.

In some embodiments the user interface of the client side web application may further provide additional information for indicating whether an external device has been plugged in or whether any information from the external device or other hardware resources have been received.

In another embodiment the service type further comprises obtaining specific hardware information of the neighboring device such as a mobile phone and the local server may further transmit a command to the neighboring device to obtain the specific hardware information therefrom and then transmit the obtained specific hardware information of the neighboring device to the client side web application . For example the client side web application on the local host may send a service request with a service type of remote access according to the URL and the dedicated network port e.g. the net socket port 10005 to the local server via the dedicated network port. After receiving the service request the local server performs a function call to APIs provided by specific drivers e.g. the USB drivers to read write via a specific hardware interface e.g. the USB connection port and subsequently the electronic device at the local side may communicate with the neighboring device via a wireless technology such as Bluetooth.

In yet another embodiment the neighboring device may further send a request indicating a service type of remote monitoring to monitor the hardware information of the local electronic device with the hardware resource accessing system to the local electronic device via the specific hardware interface e.g. the dedicated USB connection port. The local server may then receive the request via the dedicated USB connection port and communicate with the drivers of responsive local hardware resources to obtain hardware information of specific local hardware resources. After obtaining the hardware information of specific local hardware resources the local server delivers a response containing such information via the dedicated USB connection and wireless technologies to the neighboring device .

In addition to hardware monitoring the web applications running in a browser based OS also cannot be as easily controlled from a neighboring device as those running in a native operating system can be. In still another embodiment the neighboring device may further send a request to control the operation of the electronic device with the hardware resource accessing system via the specific hardware interface e.g. the dedicated USB connection port. Upon receiving a request e.g. a command from the neighboring device via the specific hardware interface and the dedicated wireless technology the local server analyzes the request and performs an operation corresponding to the analyzed result. When the request from the neighboring device indicates a control operation the local server analyzes the request to obtain a control command corresponding thereto and transmits the control command to the client side web application such that the client side web application performs an operation corresponding to the control command. When the request from the neighboring device indicates a hardware monitoring request the local server obtains the hardware information of the electronic device and transmits the obtained hardware information to the neighboring device via the specific hardware interface.

For example the neighboring device may first send a control command e.g. a command to play a video in the local electronic device via the Bluetooth wireless technology and USB connections to the local server . The local server receives such a command and the client side web application of the browser based OS sends corresponding requests to the browser based OS . After receiving responses corresponding to such a command the client side web application may perform a responsive operation accordingly e.g. play a video .

Alternatively in some embodiments the neighboring device may be controlled by the client side web application running in the browser based OS . The client side web application may send commands via the local server and the specific hardware interface such as USB connections and wireless technologies in the fashion described above to control the operation of the hardware resources of the neighboring device . It is to be noted that the neighboring devices to be controlled may comprise any type of electronic device such as mobile phones displays household appliances robotics and so on. For example the client side web application may turn on off or change the settings of displays or household appliances.

Therefore the hardware resource accessing systems and methods for hardware resource accessing of the invention may provide a customized local server which includes a local URL and a dedicated network port on the local electronic device to communicate with the drivers of the hardware resources to be controlled or monitored to access device drivers and hardware resources via a designed client side web application in a browser based OS. The customized local server is designed to perform function calls to APIs to request hardware related services from the kernel of the browser based OS and to reply the hardware information by folding such received hardware information within a message e.g. an HTML document and returning the message to the client side web application such that the hardware monitoring or remote controlling operation between the electronic device with the browser based OS and a neighboring device that is a neighbor to the electronic device may be performed efficiently.

Methods for hardware resource accessing or certain aspects or portions thereof may take the form of a program code i.e. executable instructions embodied in tangible media such as floppy diskettes CD ROMS hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine thereby becomes an apparatus for practicing the methods. The methods may also be embodied in the form of a program code transmitted over some transmission medium such as electrical wiring or cabling through fiber optics or via any other form of transmission wherein when the program code is received and loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the disclosed methods. When implemented on a general purpose processor the program code combines with the processor to provide a unique apparatus that operates analogously to application specific logic circuits.

While the invention has been described by ways of examples and in terms of preferred embodiments it is to be understood that the invention is not limited thereto. On the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art . Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

