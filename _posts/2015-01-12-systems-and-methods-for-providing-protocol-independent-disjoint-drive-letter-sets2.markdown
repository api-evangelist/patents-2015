---

title: Systems and methods for providing protocol independent disjoint drive letter sets
abstract: A system and method for mounting multiple devices on an SLR enable information handling system is disclosed herein. A drive-letter may be assigned to a first user session in a first user session namespace only. A second user may have access to the same drive-letter as the mounting of drive-letters is specific to each specific user session and not the global namespace. A symbolic link is created for each assigned drive-letter and the corresponding drive-letter in the global namespace is deleted allowing for more than the standard mounting of only twenty-six different devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09639496&OS=09639496&RS=09639496
owner: Dell Products L.P.
number: 09639496
owner_city: Round Rock
owner_country: US
publication_date: 20150112
---
The present application is a continuation in part of application Ser. No. 14 528 655 entitled Session Level Restriction for Universal Serial Bus Storage Devices filed on Oct. 30 2014.

This disclosure relates generally to information handling systems and more particularly to protocol independent systems and methods for providing disjoint driver letter sets and in particular for providing sets for session isolated mass storage devices.

As the value and use of information continues to increase individuals and businesses seek additional ways to process and store information. One option available to users is information handling systems. An information handling system generally processes compiles stores and or communicates information or data for business personal or other purposes thereby allowing users to take advantage of the value of the information. Because technology and information handling needs and requirements vary between different users or applications information handling systems may also vary regarding what information is handled how the information is handled how much information is processed stored or communicated and how quickly and efficiently the information may be processed stored or communicated. The variations in information handling systems allow for information handling systems to be general or configured for a specific user or specific use such as financial transaction processing airline reservations enterprise data storage or global communications. In addition information handling systems may include a variety of hardware and software components that may be configured to process store and communicate information and may include one or more information handling systems data storage systems and networking systems.

A thin client or as it is sometimes referred to a lean client or a slim client is an information handling system or an executable software program running on an information handling system. A thin client generally relies on another information handling system such as a server to fulfill at least some of the requested computational roles. For example a user can access applications or other computational support services from a server by logging into the server from a thin client for example a terminal device. Multiple users may log into the same server from multiple terminal devices and may simultaneously request services from the server.

The detailed description set forth below is intended as a description of various configurations of the subject technology and is not intended to represent the only configurations in which the subject technology may be practiced. The appended drawings are incorporated herein and constitute a part of the detailed description. The detailed description includes specific details for the purpose of providing a thorough understanding of the subject technology. However it will be apparent to those skilled in the art that the subject technology may be practiced without these specific details. In some instances well known structures and components are shown in block diagram form in order to avoid obscuring the concepts of the subject technology.

In the following description details are set forth by way of example to facilitate discussion of the disclosed subject matter. It should be apparent to a person of ordinary skill in the field however that the disclosed embodiments are exemplary and not exhaustive of all possible embodiments.

For the purposes of this disclosure an information handling system may include an instrumentality or aggregate of instrumentalities operable to compute classify process transmit receive retrieve originate switch store display manifest detect record reproduce handle or utilize various forms of information intelligence or data for business scientific control entertainment or other purposes. For example an information handling system may be a personal computer a PDA a consumer electronic device a network storage device or another suitable device and may vary in size shape performance functionality and price. The information handling system may include memory one or more processing resources such as a central processing unit CPU or hardware or software control logic. Additional components or the information handling system may include one or more storage devices one or more communications ports for communicating with external devices as well as various input and output I O devices such as a keyboard a mouse and a video display. The information handling system may also include one or more buses operable to transmit communication between the various hardware components.

Herein a computer readable non transitory storage medium or media may include one or more semiconductor based or other integrated circuits ICs such as for example field programmable gate arrays FPGAs or application specific ICs ASICs hard disk drives HDDs hybrid hard drives HHDs optical discs optical disc drives ODDs magneto optical discs magneto optical drives floppy diskettes floppy disk drives FDDs magnetic tapes solid state drives SSDs RAM drives SECURE DIGITAL cards or drives any other suitable computer readable non transitory storage media or any suitable combination of two or more of these where appropriate. A computer readable non transitory storage medium may be volatile non volatile or a combination of volatile and non volatile where appropriate.

Particular embodiments are best understood by reference to wherein like numbers are used to indicate like and corresponding parts.

This disclosure contemplates any suitable number of information handling systems . This disclosure contemplates information handling system taking any suitable physical form. As example and not by way of limitation information handling system may be an embedded information handling system a system on chip SOC a single board information handling system SBC such as for example a computer on module COM or system on module SOM a desktop information handling system a laptop or notebook information handling system an interactive kiosk a mainframe a mesh of information handling systems a mobile telephone a personal digital assistant PDA a server a tablet information handling system a terminal a thin client a slim client a lean client or a combination of two or more of these. Where appropriate information handling system may include one or more information handling systems be unitary or distributed span multiple locations span multiple machines span multiple data centers or reside in a cloud which may include one or more cloud components in one or more networks. Where appropriate one or more information handling systems may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation one or more information handling systems may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more information handling systems may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein where appropriate.

In particular embodiments information handling system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular information handling system having a particular number of particular components in a particular arrangement this disclosure contemplates any suitable information handling system having any suitable number of any suitable components in any suitable arrangement.

In particular embodiments processor includes hardware for executing instructions such as those making up a computer program. As an example and not by way of limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . In particular embodiments processor may include one or more internal caches for data instructions or addresses. This disclosure contemplates processor including any suitable number of any suitable internal caches where appropriate. As an example and not by way of limitation processor may include one or more instruction caches one or more data caches and one or more translation lookaside buffers TLBs . Instructions in the instruction caches may be copies of instructions in memory or storage and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory or storage for instructions executing at processor to operate on the results of previous instructions executed at processor for access by subsequent instructions executing at processor or for writing to memory or storage or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual address translation for processor . In particular embodiments processor may include one or more internal registers for data instructions or addresses. This disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data for processor to operate on. As an example and not by way of limitation information handling system may load instructions from storage or another source such as for example another information handling system to memory . Processor may then load the instructions from memory to an internal register or internal cache. To execute the instructions processor may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . In particular embodiments processor executes only instructions in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere and operates only on data in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. In particular embodiments one or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . In particular embodiments memory includes random access memory RAM . This RAM may be volatile memory where appropriate. Where appropriate this RAM may be dynamic RAM DRAM or static RAM SRAM . Moreover where appropriate this RAM may be single ported or multi ported RAM. This disclosure contemplates any suitable RAM. Memory may include one or more memories where appropriate. Although this disclosure describes and illustrates particular memory this disclosure contemplates any suitable memory.

In particular embodiments storage includes mass storage for data or instructions. As an example and not by way of limitation storage may include a hard disk drive HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. Storage may be internal or external to information handling system where appropriate. In particular embodiments storage is non volatile solid state memory. In particular embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. This disclosure contemplates mass storage taking any suitable physical form. Storage may include one or more storage control units facilitating communication between processor and storage where appropriate. Where appropriate storage may include one or more storages . Although this disclosure describes and illustrates particular storage this disclosure contemplates any suitable storage.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between information handling system and one or more I O devices. Information handling system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and information handling system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touch screen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. This disclosure contemplates any suitable I O devices and any suitable I O interfaces for them. Where appropriate I O interface may include one or more device or software drivers enabling processor to drive one or more of these I O devices. I O interface may include one or more I O interfaces where appropriate. Although this disclosure describes and illustrates a particular I O interface this disclosure contemplates any suitable I O interface.

In particular embodiments communication interface includes hardware software or both providing one or more interfaces for communication such as for example packet based communication between information handling system and one or more other information handling systems or one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. As an example and not by way of limitation information handling system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example information handling system may communicate with a wireless PAN WPAN such as for example a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. Information handling system may include any suitable communication interface for any of these networks where appropriate. Communication interface may include one or more communication interfaces where appropriate. Although this disclosure describes and illustrates a particular communication interface this disclosure contemplates any suitable communication interface.

In particular embodiments bus includes hardware software or both coupling components of information handling system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCIe bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

In particular embodiments information handling system includes only the necessary components for a thin client to be operational and for the thin client to interface with one or more servers thin clients or other devices.

Client device may be a desktop computer a laptop computer a tablet computer a handheld device a mobile phone a kiosk a vending machine a billboard or any suitable information handling system. In particular embodiments a client device is an embedded computer and may have flash memory e.g. a solid state drive instead of a hard disk drive. In particular embodiments a client device is a thin client having limited processing capabilities and limited storage and such a thin client may require minimal management and updates. A client device may communicate with a server via one or more protocols such as Hypertext Transfer Protocol HTTP Hypertext Transfer Protocol Secure HTTPS File Transfer Protocol FTP Common Internet File System CIFS Independent Computing Architecture ICA protocol developed by Citrix Systems Inc. Remote Desktop Protocol RDP developed by Microsoft Corporation or any suitable protocol or combination of protocols.

A server may include one or more of a computing device a desktop computer a laptop computer a database a corporate server a repository server a configuration application server a domain name system DNS server a dynamic host configuration protocol DHCP server a virtual machine e.g. VMware Virtual Machine a desktop session e.g. Microsoft Terminal Server a published application e.g. Microsoft Terminal Server or any suitable information handling system. As an example a private e.g. corporate network may include a device manager server and a repository server each configured to communicate with multiple client devices across one or more domains sites or subnets of network . In particular embodiments a server may include one or more servers or functions of one or more servers. A client device may access software resources provided by a server such as for example operating systems add ons content or any other suitable data applications or images. In particular embodiments a client may access resources provided by a server only after providing suitable authentication information. Alternatively a server may provide software or other resources automatically to one or more client devices .

It may be desirable in the case of a private e.g. corporate network including multiple sites or subnets to deploy software including e.g. all or part of one or more operating systems applications add ons or data to one or more client devices across one or more sites or subnets. The client devices may for example be located remotely from one or more servers including e.g. device managers or resource repositories and as such there may be challenges in deploying software or other resources to the client devices. As an example limited connectivity or limited speed due to bandwidth constraints or network latencies may create delays in deploying software. As another example remote sites or subnets may not include managed components or may not have any personnel with information technology expertise necessary to implement software deployment to client devices at the sites or subnets. Additionally as the size of operating system images or other content e.g. videos increases deploying software or other data to remote sites or subnets may be further delayed. These issues may be further exacerbated in the case of embedded computers such as thin clients which may have limited processing capability and limited storage space. Traditional approaches involving using a static remote software repository for each subnet or site may not be feasible due to cost or management and monitoring requirements.

In particular embodiments one or more servers of a network may include a device manager that may manage one or more client devices e.g. thin clients of one or more sites or subnets of the network. The device manager may for example be a software based management tool that allows for software imaging software updates and software configurations to be deployed to the clients from one or more servers. The device manager may also perform any other suitable management function to manage client devices including for example enabling or performing e.g. automatically device discovery tracking of assets e.g. hardware or software inventory at client devices monitoring the status or health of client devices applying one or more policies to client devices including e.g. network settings of the client devices or remote administration and shadowing of client devices. The device manager may deliver any suitable resources including for example operating systems add ons content or any other suitable data applications or images to one or more client devices of network .

In particular embodiments a client device such as client device e.g. a thin client may be designed with minimal or limited storage capacity e.g. in a hard disk . The client device may be required however to run an operating system such as WINDOWS EMBEDDED or WINDOWS SERVER but the footprint of such an operating system may grow over time with newer releases or updates. Hence client devices may over time begin to run low on free storage space e.g. in the hard disk . Unwanted files may be deleted or full volume compression of the storage medium e.g. the hard disk may be implemented to increase available storage space. However full volume compression may introduce performance shortcomings e.g. increased number of instruction cycles required to compress uncompress data in the volume from the point of view of an end user of the client device. In particular embodiments optimized volume compression may be implemented to reduce effective disk usage on a client device while minimizing impact on system performance.

In particular embodiments client device e.g. a thin client a slim client or a lean client or one or more software components associated with client device may depend on server to fulfill its computational roles. As an example of a Virtual Desktop Infrastructure VDI and not by way of limitation client device may provide one or more terminal services to one or more users of client device . As such the users of client device may login to the same server and perform tasks on the same server substantially at the same time. In the VDI one or more I O devices may be connected to client device . In particular embodiments in order for the I O devices to work seamlessly communications associated with the I O devices may be redirected to a Virtual Desktop VD operating system OS or a Virtual Machine VM OS e.g. WINDOWS SERVER 2003 of the VDI. Furthermore communications for one or more of the I O devices may be restricted i.e. limited only to a particular user session as in session level restriction SLR or session isolation.

SLR may be implemented for many types of I O devices such as for example printers scanners and storage devices e.g. mass storage pen drive hard drive compact disc CD digital video disc DVD and BLU RAY disc . As an example and not by way of limitation SLR may be implemented for an I O device that is being operated by a current user or a current user session in a VM OS. In particular embodiments a third party kernel filter driver may be layered i.e. loaded on top of every device class of the I O device. Accordingly one or more of the symbolic links in the device stack of the I O device may be moved from global namespace to a pre determined namespace of the user session. Furthermore the third party kernel filter driver may block other user sessions i.e. I O requests of the other user sessions operating in the VM OS from accessing the device stack. As such the I O device may only be accessible by the current user or the current user session.

In particular embodiments a SLR enabled I O device may include a single device class i.e. driver stack. As an example and not by way of limitation a SLR enabled USB printer may be associated with a printer device driver stack or a printer class stack e.g. WINDOWS Printer Class . As such the third party kernel filter driver may only handle the printer device driver stack. Herein reference to a third party kernel filter driver may encompass a SLR filter driver or vice versa where appropriate. Herein reference to a device class stack may encompass a device driver stack or vice versa where appropriate. In particular embodiments a SLR enabled I O device may have two or more device driver stacks. Furthermore the device driver stacks may be handled in a coordinated manner. As an example and not by way of limitation a SLR enabled USB storage device may include a disk driver stack and a volume driver stack. As another example and not by way of limitation both disk driver stack and volume driver stack may be handled in a manner as described and illustrated in . In particular embodiments the disk driver stack may manage a specific device type such as for example disk or optical. In particular embodiments the volume driver stack may present one or more volumes of the storage device to users of the VM OS. In particular embodiments the volume driver stack may support basic or dynamic disks e.g. redundant array of inexpensive disks RAID . In order to restrict both raw disk access and volume level access to the USB storage device i.e. limit the accesses to a user session the SLR filter driver may handle the disk driver stack and the volume driver stack in a coordinated manner. In particular embodiments referencing the SLR enabled USB storage device a file system driver stack may be mounted on top of the disk driver stack and the volume driver stack based at least on a configuration by a user or an administrator of the VM OS.

In particular embodiments a hidden volume i.e. storage partition of a SLR enabled USB storage device operating may be accessed as a virtual volume. In particular embodiments the SLR enabled USB storage device may comprise one or more volumes i.e. storage partitions that are hidden from one or more users of the VM OS. In particular embodiments the SLR enabled USB storage device may operate in a terminal server environment. As an example and not by way of limitation the terminal server environment may include client device e.g. a thin client a slim client or a lean client being operated by a VDI that allows client device to communicate with server as discussed above. In particular embodiments the method of may allow a plurality of software components associated with the SLR enabled USB storage device to seamlessly and securely operate in the terminal server environment. To access a hidden volume of the SLR enabled USB storage device a software component associated with the SLR enabled USB storage device may request a user to enter a password. In particular embodiments if the password as entered by the user is correct i.e. matches a pre determined password the user may access and utilize the hidden volume as a virtual volume. Although the disclosure describes accessing particular hidden volume of particular SLR enabled USB storage device in a particular manner the disclosure contemplates accessing any suitable hidden volume of any suitable SLR enabled USB storage device in any suitable manner.

In a multi user environment the drive letters available for a given server may be exhausted by multiple users connecting and redirecting multiple mass storage devices such as USB flash drives hard disk drives floppy disk drives optical disk drives or any other mass storage device known to one of ordinary skill in the art. When subsequent users attempt to connect and redirect additional devices the connection requests may fail if available drive letters have been exhausted. For example twenty six drive letters may be available for mounting on a typical Windows based system corresponding to the number of letters in the English alphabet. In past systems each user would have access to mount any one of the available drives from another system. Once the available number of drives is reached requests to mount additional drives would be denied. illustrates an example method of providing protocol independent disjoint driver letter sets for a particular client s user session. In one embodiment the coordination exists between the disk stack volume manager and mount manager such that disjoint driver letter sets may be assigned for the multiple devices connected by any number of users in a multi user environment.

In step SLR for disk is enabled at an information handling system as described above for example at a server. In step a request is received from a client to mount one or more devices connected to the client. For example a user may connect a flash drive or other device during a user s session to the client. The user may want to access the device connected to the client via an application executing at the server while preventing other users from accessing the device. Thus the user may want the connected device to be accessible only through the client s user session and no other user session.

In step a drive letter is created in the global namespace for each device connected to the client for example by Windows Mount Manager. In other embodiments a mount point to a folder is created for each device connected to the client. For example a user may connect two devices to the client and expect that each device be assigned a unique drive letter by the server. In one embodiment the drive letter is assigned by Windows Mount Manager. For example the Wyse SLR driver filtering volume class stack may snoop for IOCTL MOUNTDEV LINK CREATED. This IOCTL is sent by the Windows Mount Manager to the Windows Volume Stack when the drive letter is created. In step it is determined if a drive letter for the volume has been created. If a drive letter has been created then at step the unique ID of the volume is retrieved. In one embodiment the volume is created by issuing an IOCTL MOUNTMGR POINTS to the Windows Mount Manager. In step a drive letter is created for each connected device using the unique ID. A drive letter is created in the client s user session namespace. The creation of the volume in the global namespace prevents the use of that drive letter for any other user session. If the drive letter for the volume is not created at step the process continues to receive requests from a client to mount a device connected to the client at step or may perform other processing. In one embodiment a request received such as that in step may trigger an alert interrupt or set a semaphore flag or other indicator that an event has occurred as is well known to one of ordinary skill in the art. The receipt of a request in step may initiate one or more threads for processing the request. The information related to the creation of the volume and other information necessary to sustain the connection and provide access to the device may be cached. For example the volume name the volume unique ID the session ID for the user client s user specific session device type of the connected device if known user ID the drive letter and any other parameter or information related to the volume or provided by the request for connection or necessary to maintain the accessibility of the device.

In step the drive letter assigned to the volume for the connected device is deleted from the global namespace. In one embodiment the drive letter is deleted by issuing the IOCTL IOCTL MOUNTMGR DELETE POINTS by the Windows Mount Manager. In step a notification is sent to the auxiliary application to create the drive letter symbolic link in the client user s session name space. All the necessary information has been previously stored in step . The drive letter assigned to the volume for the connected user device is unique only to that user s session and is not available for use by any other user in a different session. In this way the limited number of drive letters may be expanded so as to provide the maximum available drive letters to each unique user session. For example user A may have two devices connected and be assigned drive letters D and E in user A s session while user B may have three devices connected and be assigned driver letters D E and F in user B s session. User A need not know or be aware that user B has devices connected with the same drive letter designated as user A cannot access or see any device connected by user B and vice versa. In one embodiment the Windows Mount Manager manages the drive letter globally across the users of the information handling system or the server. Because the Wyse SLR driver manages the drive letter and information on a per user session basis and the information including the drive letter is deleted from the Windows Mount Manager at step the maximum number of assignable drive letters is not limited to the standard twenty six letters. Each user receives user specific drive letters which may mean that each user receives a possible twenty six drive letters for mounting.

In one embodiment the no drive letter registry entry is deleted. This registry entry is created in the name of the volume s unique ID at the registry path HKLM SYSTEM MountedDevices . Deleting this key allows the drive letter to be assigned for the same mass storage device on its next life. A verification occurs that the process of deleting the drive letter from the global namespace has made the drive letter available for a different session. In this way the drive letter is isolated to the client s user session namespace and not to the global namespace.

In step a drive letter is created in the client s user session namespace. This drive letter is the same as the drive letter that was deleted in step . The drive letter now exists only in the client s user session namespace and not in the global namespace. Thus if a new device is connected for a different user that device may be assigned the same drive letter. In one embodiment the drive letter is created in the client s user namespace by the Wyse SLR driver using the IoCreateSymbolicLink API. When creating the drive letter for example the path Sessions 0 DosDevices may be used. In one embodiment may be F and user session LUID which is unique for every client s user session may be 00000000 000003e4. The resulting path is Sessions 0 DosDevices 00000000 000003e4 R .

One of ordinary skill in the art would understand that the process illustrated above with respect to may be reiterated for each device connected to the client. One of ordinary skill in the art would also understand that the requests to create a volume may be handled sequentially substantially simultaneously or any order specified by one or more parameters. For example the server may query the registry to determine if the HKLSYSTEM Mounted Devices key exists and if so what the values of the entries are for this key. In step the client s user specific session drive letter symbolic link is queued to be deleted when the connected client device is removed or when any type of disconnection request is received for the connected client device.

When an auxiliary application is running in step the server notifies the auxiliary application to create the symbolic link for the assigned drive letter in the client s user session specific space or namespace. In step a manager for example a hardware manager is notified of the creation of the symbolic link. In one embodiment the Windows explorer.exe is notified by issuing a notification on volume device object using the IoReportTargetDeviceChange or IoReportTargetDeviceChangeAsynchronous APIs. In one embodiment the hardware manager may be a plug and play PnP device manager.

When a device with a previously assigned drive letter is removed in step it is determined if a device removal notification has been received. If no device removal notification has been received the process may continue to poll for such a request or may operate in any other known way understood by one of ordinary skill in the art. If a notification is received then in step the information associated with the drive letter may be cached. For example the volume name session information and drive letter may be cached. Next in step the auxiliary application is notified to delete the drive letter from the client s user session namespace. In one embodiment as illustrated in the symbolic link may be deleted from the client s user session specific namespace in step . Next in step when the symbolic link is deleted the hardware manager or the explorer.exe is notified by issuing a notification on volume device object using IoReportTargetDeviceChange or IoReportTargetDeviceChangeAsynchronous API. The manager may pass the cached information associated with the deleted symbolic link and this information may be used at least in part by the manager to permit re allocation or re mounting of the previously assigned drive letter.

The process determines in step if a device removal notification has been received. If a device removal notification has not been received the process continues to poll for such request. Step operates in the same manner as step . In step information is retrieved from the SLR driver. This information may be the drive letter volume name or other session information. In one embodiment the process issues IOCTLs to the Wyse SLR driver to retrieve the information. In step a process is spawned in the client s user session and in step the drive letter is deleted for the volume. In one embodiment the drive letter is deleted automatically from the current client s user session namespace. For example the drive letter is deleted from the volume using the DefineDosDevice API which automatically deletes the symbolic link in the current client s user session namespace. The symbolic link may also be deleted in step in the client s user session namespace.

In one embodiment when there is a drive letter in both local and global namespace the drive letter from local namespace has priority. For example Windows provides for local namespace priority. In one embodiment to avoid confusion when maintain the drive letter information on a per user basis or a per client user session basis if there is a drive letter already created in global namespace the same drive letter may not be created in the current client s users session namespace. For example the Wyse SLR driver maintains information on a per user basis and thus does not permit the allocation of a volume with a drive letter for a specific user session that is the same as a global namespace drive letter. For example in general all Windows systems allocate the drive letter C as the system drive in global namespace. The Wyse SLR drive for a connected device for example a USB drive does not permit the creation of a drive letter C in any client s user session namespace.

The processes illustrated in may be reiterated for each device connected to the client. The processes illustrated in may also in one embodiment be limited to a predetermined number of client specific connected devices. The limit on client specific connected devices may be less than the total number of allowable or available drive letters. The limit may also be determined based at least in part on the type of devices connected to the client. In one embodiment the process of may be implemented on the information handling system of and as further illustrated in .

Herein or is inclusive and not exclusive unless expressly indicated otherwise or indicated otherwise by context. Therefore herein A or B means A B or both unless expressly indicated otherwise or indicated otherwise by context. Moreover and is both joint and several unless expressly indicated otherwise or indicated otherwise by context. Therefore herein A and B means A and B jointly or severally unless expressly indicated otherwise or indicated otherwise by context.

The scope of this disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments described or illustrated herein that a person having ordinary skill in the art would comprehend. The scope of this disclosure is not limited to the example embodiments described or illustrated herein. Moreover although this disclosure describes and illustrates respective embodiments herein as including particular components elements feature functions operations or steps any of these embodiments may include any combination or permutation of any of the components elements features functions operations or steps described or illustrated anywhere herein that a person having ordinary skill in the art would comprehend. Furthermore reference in the appended claims to an apparatus or system or a component of an apparatus or system being adapted to arranged to capable of configured to enabled to operable to or operative to perform a particular function encompasses that apparatus system component whether or not it or that particular function is activated turned on or unlocked as long as that apparatus system or component is so adapted arranged capable configured enabled operable or operative.

