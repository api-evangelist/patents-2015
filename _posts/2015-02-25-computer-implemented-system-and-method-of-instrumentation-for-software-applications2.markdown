---

title: Computer implemented system and method of instrumentation for software applications
abstract: A method(s) and system(s) of monitoring and logging of various identified events of the operating system or the software application hosted on the operating system is disclosed. The method includes configuring the events associated with at least one event handler for monitoring. The method further includes assigning the at least one event handler to active processes of an operating system for handling of the events. Further, the method includes capturing of events by a different daemons and collecting the captured events. To this end, the captured similar events are grouped in one or more groups. The method further includes filtering of collected events based on a definable filter configuration and generating a dashboard representation of the filtered events. The dashboard representations of filtered events are then reported to the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09588869&OS=09588869&RS=09588869
owner: TATA CONSULTANCY SERVICES LTD.
number: 09588869
owner_city: Mumbai
owner_country: IN
publication_date: 20150225
---
The present disclosure relates in general to computer systems and in particular to a system and method of global context based instrumentation for software applications.

As technology has progressed the processing capability of computer systems has increased dramatically. Today s computer systems offer a set of features that enables rich user experiences for every application that is hosted on them. Thus the progress has led to a dramatic increase in the types of software applications which can be hosted and executed on the computer systems. This also led to increase in the functionality of these hosted software applications. Additionally technological advancements have led the way for multiple computer systems each executing multiple software applications to be easily connected together via a network. Accordingly software applications have become larger and more complicated in design. This increased complexity and scale in software application design present difficult challenges in assessing software.

To measure and improve the quality of conventional software applications use of software instrumentation is an effective solution. Further it is possible to determine the cause for a software application failure by examining the data gathered by various instruments. By analysing the gathered data over a time scale it is possible to identify recurring problems in software applications before they can cause massive damage. Furthermore it is also possible to identify and solve associated software quality issues based on the analysed data. Such causal analysis of the context in which the failure happens can then lead to an improvement in overall software quality.

Conventionally monitoring events in computing environment has been difficult to achieve. Conventional operating systems provide Management and

Instrumentation frameworks and performance counters to monitor application resource usage and execution status. Usually the operating system s event management framework facilitates recording the application errors and proprietary events in a standard centralized way in the form of an event log which can then be examined using the resident event viewer or by using a programming interface. To this end the event logging is helpful for recording important events such as low resource availability authentication failure etc. examining which can determine the conditions that cause the error event to occur.

Further if the event logging is built into an application then many of the application specific events can be captured in the event log and its trace can provide the sequence of operations that are performed in a software application. However operating system specific events GUI events network events that are triggered when this application is used are not captured which means the operating system events are not subscribed by the software application. This is a cause for concern as all software applications run on top of an operating system and it becomes difficult to pin point the exact reason for a software failure.

Therefore for the collected event data to be meaningful it is necessary to capture events pertaining to an operating system as well as all applications processes and services that run on top of the operating system. This necessitates the need for global context based instrumentation with regard to event capturing filtering and recording.

Hence there is a need for a system that provides global context based instrumentation to assert the quality of software applications.

An object of the present disclosure is to provide a generic instrumentation system for software applications.

Another object of the present disclosure is to provide a system that assesses the quality of software applications.

Still another object of the present disclosure is to provide a system that collects quantitative information about the execution status of software applications and operating systems.

Still another object of the present disclosure is to provide a system that non intrusively monitors and collects information pertaining to behaviour interactions usage and other relevant information of software applications and underlying operating system.

Still another object of the present disclosure is to manipulate and interact with the operating systems and other applications to facilitate event capturing.

Still another object of the present disclosure is to provide a non intrusive event logging system for configuring and sensing the events occurring within the system.

Other objects and advantages of the present disclosure will be more apparent from the following description when read in conjunction with the accompanying drawings which are not intended to limit the scope of the present disclosure.

This summary is provided to introduce concepts related to providing global context based instrumentation to assert the software quality which is further described below in the detailed description. This summary is neither intended to identify essential features of the present disclosure nor is it intended for use in determining or limiting the scope of the present disclosure.

In an embodiment method s and system s of monitoring and logging events in a computing environment is disclosed. The method may include configuring various events associated with multiple event handlers. Further the event handler is attached with an active process of the operating system to handle the various events. The method may further include capturing of various events by set of daemons running in the background of the operating system. To this end the various captured events are collected and grouped under one or other group based on the similarities of the events. The method may further include filtering of collected events based on a user definable filter configuration and generating a dashboard representation of the filtered events. The dashboard representation of the filtered events reported on a suitable display device.

The present disclosure relates to a system and a method of monitoring and logging events in a computing environment.

Unless specifically stated otherwise as apparent from the following discussions it is to be appreciated that throughout the present disclosure discussions utilizing terms such as configuring or assigning or capturing or collecting or filtering or generating or reporting or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Typically in databases event logging is handled by the logging subsystem which comprises a daemon and a viewer. While the log daemon handles log messages and parameter values from various processes in which the events were triggered the log viewer provides a readable output by combining the log data with a message template. The events are generated whenever any operations are performed on the database and event parameters may be the database status database resource status database query etc. Usually the event log message comprises of the message category symbolic message identifier transaction identifier events parameters and a severity level. These logs are predominantly used to ensure consistency in the database status thereby improving the computer system significantly. Further the events raised by other software components at different stages of execution may significantly reduce the time it takes to diagnose various problems.

Further the generic instrumentation is also an effective elucidation in measuring and improving the software applications hosted on the computing systems. The proposed generic instrumentation is achieved by incorporating generic event logging within the computing system. This generic event logging not only aids in trouble shooting failures of a software application but also captures detailed events including operating system events Graphic User Interface GUI events and performance events. In the present disclosure the system is capable of capturing a variety of events within an application. This in turn allows a user of the system to avoid incorporating additional application debugging modules. In addition to this software applications which are not capable of event logging may utilize the claimed system for event logging without any modification in their original applications.

Typically event recording is specific to a software application or system. But the present disclosure provides a universal or generic events recording capability in such a way that the events that are collected from all monitored applications are captured and recorded in a single location. This facilitates impact analysis of actions performed by a particular system on another. Further the present disclosure allows obtaining events pertaining to any specific application by filtering and querying. A user may input a query relating to a specific instance of a software application and then receive a filtered response representing requested details relating to that specific instance.

More importantly monitoring of various identified events of the operating system or the software application hosted on the operating system may be undertaken for many reasons. For example the events of the operating system may be monitored to determine the effect of adding a new piece of hardware the effect of adding a new software component and or to determine the amount of operating system resources being allocated to handle certain other events. Thus a plurality of events may be logged by the present disclosure to facilitate customizing the monitoring of the operating system. A user interface may be provided to the user to select events that are to be logged by the monitor. Similarly an Application Programming Interface API may be provided to process the events that are to be logged by the monitor. Since users may be interested in events that are not defined by the present disclosure users may define events that are to be logged and thus the present disclosure provides a mechanism for defining such events which can then be selected via the user interface or API.

The value of monitoring and logging of various identified events of the operating system or the software application hosted on the operating system may be increased if the data produced by such monitoring is viewable in a manner that facilitates understanding the complexity of the computing system. Thus the present disclosure includes a system and method for suitable display of monitoring of logged events data. The display of monitoring of logged data facilitates viewing items including but not limited to process states thread states process events thread events process switching thread switching events changing states of semaphores changing states of mutexs entering leaving a critical section and the occurrence of user defined events. Since numerous items may be viewed on the suitable display device the present disclosure provides for filtering the events based on a user definable filter configuration which may be viewed. For example the user may desire to view set of events associated with starting ending the execution of a critical operating system process and may not desire to view other events associated with the same process. The ability to view such events facilitates diagnosing problems associated with application programs including but not limited to operating systems GUIs input devices device drivers and or applications. Problems whose diagnosis may be facilitated include but are not limited to deadlocks pre mature termination resource blocking network mismanagement missed real time deadlines etc. The ability to filter events to be viewed facilitates viewing a smaller and or more focused set of data which may improve the ability to diagnose such problems.

The present disclosure describes systems and methods for monitoring and logging events in a computing environment. According to an aspect the monitoring and logging for selected set of events are based on collection of identified events by the daemons. Accordingly in an embodiment the monitoring and logging of events is implemented in the systems and the methods described herein.

According to an implementation the present disclosure discloses an event monitoring and logging mechanism in a computing environment. The events which are associated with event handlers are configured to monitor by the user. In process all events are time stamped and classified according to various pre defined categories as provided by the disclosure. Further every event which has an associated event handler is process based on the event configuration. Furthermore the set of event handlers are attached to every active process in the operating system to process the events received by the software applications corresponding to the process. In another implementation every event which is not configured for monitoring is attached to a dummy event handler which receives the event but does not process further and does not generate any event data.

In another implementation where event handlers are attached with the active processes of the operating system a plurality of daemons such as a process daemon are attached with the active process of the operating system. The plurality of daemons captures the identified events. To this end all the captured events are collected and grouped under one or more categories based on the similarity of the captured events. Further the collected events are filtered based on a definable filter configuration. The definable filter configuration may be defined by the user directly or it may be defined by the system based on the user requirements. Further the filter configuration may also depend on the configurational settings of the events. Further the filtered events are translated and or represented into an appropriate dashboard representation. Accordingly the dashboard representation of captured events data is reported on a suitable display device.

In another implementation the user may include anonymity to the captured event data. This may enable the masking of any reference to user profile or user data such as passwords user names login ids etc. in the captured event data.

In yet another implementation the system of the present disclosure may facilitate in selecting the events from a plurality of events consisting of a system specific events an operating system specific events a graphical user interface GUI events a network events a file system events a device driver events an input device events an application events a browser events and a presentation events.

In yet another implementation the system of the present disclosure may facilitate in capturing the selected events by a plurality of daemons consisting of a GUI daemon that is configured to listen capture handle and process the GUI events a browser daemon that is configured to listen capture handle and process the browser events a file system daemon that is configured to listen capture handle and process the file system events a network daemon that is configured to listen capture handle and process the network events a device daemon that is configured to listen capture handle and process the device driver events an input daemon that is configured to listen capture handle and process the keyword mouse and other input device events an application daemon that is configured to listen capture handle and process the application events a website daemon that is configured to listen capture handle and process the web site related events a presentation daemon that is configured to listen capture handle and process the presentation related events a performance daemon that is configured to listen capture handle and process the operating system performance related events and a management daemon that is configured to listen capture handle and process the operating system management related events.

In yet another implementation the system of the present disclosure may facilitate in providing an ability to the user to configure the profile of the events that need to be captured. To this end the system may also provide generating verbose data on user configured events.

In yet another implementation the system of the present disclosure may facilitate event handlers to be in active state whenever the system is in use. This benefits and optimizes the utilization of the system resources. Accordingly the event handlers may exit systematically whenever the parent processes and threads are terminated. Further such optimization may also reflects the less computing time necessary for communicating the events and event data including the filtering and recording of the event logs.

Still yet another aspect of the present disclosure provides a computer readable medium having embodied thereon a computer program for executing a method comprising configuring one or more events associated with one or more event handler for monitoring attaching the one or more event handler to one or more active processes of an operating system for processing of the one or more events capturing the one or more events by a plurality of daemons collecting the one or more events captured by the plurality of daemons and grouping of the captured similar events under one or more group filtering the one or more collected events based on a definable filter configuration generating a dashboard representation of the filtered one or more events and reporting the dashboard representation on a suitable display mode.

These and other advantages of the present disclosure would be described in greater detail in conjunction with the following figures. While aspects of described systems and methods for monitoring and logging events of a software applications may be implemented in any number of different computing systems environments and or configurations the embodiments are described in the context of the following exemplary system s .

As part of the generic instrumentation layer provided in manager worker composite system work together and collect the various events captured by the different daemons. The manager sub system instructs the worker to collect events under its scope and the worker sub system interacts with the corresponding sensor sub system for event collection. A collection of related events are grouped together to form a sensor sub system which listens to these events. This sub system interacts with the manager worker composite system to facilitate event collection. Every sensor sub system is associated to a worker sub system. This enables high performance in event processing. Once an event is received by the worker it queries the operating system and obtains additional details about the event performance details operating system execution status etc. . All the collected data is passed onto the recording sub component where consolidation and streaming to file and or database occurs. The viewer sub system filters the streamed data based on the definable filter configuration and generates appropriate dashboard and report representation of the captured data.

In one implementation the network environment may be a company network including thousands of office personal computers laptops various servers such as blade servers and other computing devices. Examples of a company may include an information technology IT company a product manufacturing company a human resource HR company a telecommunication company or other large conglomerates. It will also be appreciated by a person skilled in the art that the company may be any company involved in any line of business. In another implementation the network environment may be a smaller private network. In yet another implementation the network environment may be a public network such a public cloud.

The event logging system may be implemented in a variety of computing systems such as a laptop computer a desktop computer a notebook a workstation a mainframe computer a server a network server and the like. In one implementation the event logging system may be included within an existing information technology infrastructure or a database management structure. Further it will be understood that the event logging system may be connected to a plurality of user devices . . . N collectively referred to as the user devices or as an individual user device . The user device may include but is not limited to a desktop computer a portable computer a mobile phone a handheld device and a workstation. The user devices may be used by users such as database analysts programmers developers data architects software architects module leaders projects leaders database administrator DBA stakeholders and the like.

As shown in the figure the user devices are communicatively coupled to the event logging system over a network through one or more communication links for facilitating one or more end users to access and operate the event logging system . In one implementation the network may be a wireless network a wired network or a combination thereof. The network may also be an individual network or a collection of many such individual networks interconnected with each other and functioning as a single large network e.g. the Internet or an intranet. The network may be implemented as one of the different types of networks such as intranet local area network LAN wide area network WAN the internet and such. The network may either be a dedicated network or a shared network which represents an association of the different types of networks that use a variety of protocols for example Hypertext Transfer Protocol HTTP Transmission Control Protocol Internet Protocol TCP IP etc. to communicate with each other. Further the network may include a variety of network devices including routers bridges servers computing devices storage devices and the like.

In an implementation the event logging system may be coupled to a database . Although not shown in the figure it will be understood that the database may also be connected to the network or any other network in the network environment . In an implementation the database may include various input files and supporting files that may be used by the event logging system . In an implementation the database may be provided as a relational database and may store data in various formats such as relational tables object oriented relational tables indexed tables. However it will be understood that the database may be provided as other types of databases such as operational databases analytical databases hierarchical databases and distributed or network databases.

The event logging system further includes interface s for example to provide the input data in a hierarchical manner. Further the interface s may include a variety of software and hardware interfaces for example interfaces for peripheral device s such as a keyboard a mouse an external memory and a printer. Additionally the interface s may enable the event logging system to communicate with other devices such as web servers and external repositories. The interface s may also facilitate multiple communications within a wide variety of networks and protocol types including wired networks for example LAN cable etc. and wireless networks such as WLAN cellular or satellite. For the purpose the interface s may include one or more ports.

In an implementation the event logging system includes a processor s coupled to a memory . The processor s may be implemented as one or more microprocessors microcomputers microcontrollers digital signal processors central processing units state machines logic circuitries and or any devices that manipulate signals based on operational instructions. Among other capabilities the processor s may be configured to fetch and execute computer readable instructions stored in the memory .

The memory may include any computer readable medium known in the art including for example volatile memory such as static random access memory SRAM and dynamic random access memory DRAM and or non volatile memory such as read only memory ROM erasable programmable ROM flash memories hard disks optical disks and magnetic tapes.

Further the event logging system includes module s and data . The module s include for example configurator module assigning module event capture module event collector module event filter module generation module and other module s . The other module s may include programs or coded instructions that supplement applications or functions performed by the event logging system .

The data may include event data filtered data recorded data and other data . The other data amongst other things may serve as a repository for storing data that is processed received or generated as a result of the execution of one or more modules in the module s . Although the data is shown internal to the event logging system it may be understood that the data can reside in an external repository not shown in the figure which may be coupled to the event logging system . The event logging system may communicate with the external repository through the interface s to obtain information from the data .

As mentioned herein the present disclosure discloses a system and a method for monitoring and logging events in a computing environment. The present disclosure discloses the monitoring and logging for selected set of events which are based on collection of identified events by the daemons. Accordingly the monitoring and logging of events is implemented in the systems and the methods described herein.

In an implementation the event logging system may provide information such as feedback about the activity and performance of the computing systems as well as gather information about many of the problems and or errors that may occur during the operation of the systems. The event logging system may include a configurator module to configure the events associated with event handlers for monitoring purpose. The configurator module may be provided to configure the system resources for which the event needs to be captured. The configurator module may also be provided to configure the events that need to be listened. The configurator module may also be provided to configure the events details that need to be recorded. Further the configurator module may also be provided to configure the supplemental event details to be recorded.

According to the present implementation the event logging system may include the assigning module to attach the event handlers to every active process of the operating system to process the events received by the software application corresponding to the process. The assigning module may further passed theses selected events onto the software application for further processing. Further the assigning module may also attach a set of events which are not configured for monitoring by the configurator module to a dummy event handler. In this respect the dummy event handler may receive such set of events but does not process further and does not generate any event data.

According to the present implementation the event logging system may also include the event capture module to capture the identified events by different daemons. The event daemon may include a GUI daemon which is configured to capture the GUI related events. The event daemon may also include an application daemon which is configured to capture the application specific events. The event daemon may also include a process daemon which is configured to capture the operating system resource events. Further it may also be possible based on the processes applications and GUI windows that are currently active the number of active daemons varies. In additions the process daemons may attach themselves to every process that is executed to both existing as well as newly spawned. Similarly the GUI daemons may attach themselves to every GUI window that is displayed and Application daemons may attach themselves to certain predefined applications such as web browsers file explorer. In summary these daemons collectively cover the different possible events that are triggered by the operating system and any application that is hosted on the operating system.

According to the present implementation the event logging system may also include the event collector module to collect the events captured by the different daemons and arrange the similar captured events under one or more groups. Further the event logging system include the event filter module to filter all the collected events based on a definable filter configuration.

According to the present implementation the event logging system may also include the generation module to generate a dashboard representation of the filtered event data. Subsequently the dashboard representation of captured event data is reported to the user by suitably displaying on a display device.

In another implementation the configurator module may configure to assign event id and time stamp to all events of the computing environment. Further the events may also be classified according to pre defined categories. Such classification may help in consolidation and synchronization of the captured event logs. This may also help in resolving the conflict if any by ordering the captured events based on the time stamp classification and event id.

In another implementation the assigning module may configure to attach the event handlers to the active process of the operating system to process the events received by the software application corresponding to the process. The assigning module may also be configure to attach for all extensible applications such as browsers pluggable event handlers to every instance of the application so as to process the events received by the applications.

In another implementation the assigning module may configure to manage event handlers in such a way that it may responds to the directives of the user such as worker in a Manager Workers based organization.

The order in which the method is described is not intended to be construed as a limitation and any number of the described method blocks can be combined in any order to implement the method or alternative methods. Additionally individual blocks may be deleted from the method without departing from the spirit and scope of the disclosure described herein. Furthermore the method can be implemented in any suitable hardware software firmware or combination thereof.

At block the method may include configuring the events associated with one or more event handlers for monitoring. The configuring of the events may be indicative of assigning time stamp and classification based on the one or more pre defined categories. In an implementation the configurator module may be configured to associate the events with events handlers. It will be evident to a person skilled in the art that the configurator module may have various outside configuration settings provided to support any kind of configurational requirement of the system.

At block the method may include assigning the event handlers to the active processes of the operating system for processing of the events received by the software applications corresponding to the process. Further the events may be passed onto the software applications for further processing. In an implementation the assigning module may be configured to attach the event handlers to active processed of the operating system for processing of the events received by the applications corresponding to the process.

At block the method may include capturing the selected events by different daemons. This may be indicative of capturing events in the end users computing device. In an implementation the event capture module may be configured to capture the events by the plurality of daemons. It will be evident to a person skilled in the art that the event capture module may use various daemons consisting of a GUI daemon that is configured to listen capture handle and process the GUI events a browser daemon that is configured to listen capture handle and process the browser events a file system daemon that is configured to listen capture handle and process the file system events a network daemon that is configured to listen capture handle and process the network events a device daemon that is configured to listen capture handle and process the device driver events an input daemon that is configured to listen capture handle and process the keyword mouse and other input device events an application daemon that is configured to listen capture handle and process the application events a website daemon that is configured to listen capture handle and process the web site related events a presentation daemon that is configured to listen capture handle and process the presentation related events a performance daemon that is configured to listen capture handle and process the operating system performance related events and a management daemon that is configured to listen capture handle and process the operating system management related events.

At block the method may include collecting the events captured by the different daemons and grouping of the captured similar events under one or more groups. In an implementation the event collector module may be configured to collect the captured events and group the captured similar events in one or more groups.

At block the method may include filtering the collected events based on a definable filter configuration. In an implementation the event filter module may be configured to filter the collected events based on the definable filter configuration.

At block the method may include generating a dashboard representation of the filtered events. In an implementation the generation module may be configured to generate the dashboard representation of the filtered events data.

Further at block the method may include reporting the dashboard representation of the filtered events on a suitable display device.

Although implementations for determining consumption of resources have been described in language specific to structural features and or method it is to be understood that the appended claims are not necessarily limited to the specific features or method described. Rather the specific features and method are disclosed as exemplary implementations for determining consumption of resources.

It is to be understood that although the invention has been described above in terms of particular embodiments the foregoing embodiments are provided as illustrative only and do not limit or define the scope of the invention. Various other embodiments including but not limited to the following are also within the scope of the claims. For example elements and components described herein may be further divided into additional components or joined together to form fewer components for performing the same functions.

Any of the functions disclosed herein may be implemented using means for performing those functions. Such means include but are not limited to any of the components disclosed herein such as the computer related components described below.

The techniques described above may be implemented for example in hardware one or more computer programs tangibly stored on one or more computer readable media firmware or any combination thereof. The techniques described above may be implemented in one or more computer programs executing on or executable by a programmable computer including any combination of any number of the following a processor a storage medium readable and or writable by the processor including for example volatile and non volatile memory and or storage elements an input device and an output device. Program code may be applied to input entered using the input device to perform the functions described and to generate output using the output device.

Each computer program within the scope of the claims below may be implemented in any programming language such as assembly language machine language a high level procedural programming language or an object oriented programming language. The programming language may for example be a compiled or interpreted programming language.

Each such computer program may be implemented in a computer program product tangibly embodied in a machine readable storage device for execution by a computer processor. Method steps of the invention may be performed by one or more computer processors executing a program tangibly embodied on a computer readable medium to perform functions of the invention by operating on input and generating output. Suitable processors include by way of example both general and special purpose microprocessors. Generally the processor receives reads instructions and data from a memory such as a read only memory and or a random access memory and writes stores instructions and data to the memory. Storage devices suitable for tangibly embodying computer program instructions and data include for example all forms of non volatile memory such as semiconductor memory devices including EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROMs. Any of the foregoing may be supplemented by or incorporated in specially designed ASICs application specific integrated circuits or FPGAs Field Programmable Gate Arrays . A computer can generally also receive read programs and data from and write store programs and data to a non transitory computer readable storage medium such as an internal disk not shown or a removable disk. These elements will also be found in a conventional desktop or workstation computer as well as other computers suitable for executing computer programs implementing the methods described herein which may be used in conjunction with any digital print engine or marking engine display monitor or other raster output device capable of producing color or gray scale pixels on paper film display screen or other output medium.

Any data disclosed herein may be implemented for example in one or more data structures tangibly stored on a non transitory computer readable medium. Embodiments of the invention may store such data in such data structure s and read such data from such data structure s .

