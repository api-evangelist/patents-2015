---

title: Wrapping an application with field-programmable business logic
abstract: Systems, methods, and computer-readable media for wrapping an application with field-programmable business logic are presented. In some embodiments, a computing device may load application code of a mobile application. Subsequently, the computing device may modify the application code to wrap the application with an application wrapper that is configured to manage execution of the application based on one or more policy files and configured to intercept one or more functions of the application code, where the one or more policy files each define one or more access controls that are enforced by a device management system on one or more user devices. Subsequently, the computing device may create a library file comprising field-programmable business logic defining implementation code linked to one or more of the functions intercepted by the wrapper. The computing device may then provide the wrapped application and the library file to at least one user device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09606774&OS=09606774&RS=09606774
owner: Citrix Systems, Inc.
number: 09606774
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20150327
---
Aspects of the disclosure generally relate to computing hardware and computer software. In particular one or more aspects of the disclosure relate to computing hardware and computer software for wrapping an application with field programmable business logic.

Various kinds of computing devices from personal computers to mobile devices are becoming increasingly popular. In addition people are increasingly using these devices for both business purposes and personal uses. As these devices continue to grow in popularity and people continue to use them for an ever growing number of reasons device administrators demand more efficient and convenient tools for managing large numbers of complex devices running complex applications. Administrators have demanded and will continue to demand greater convenience functionality and ease of use from their computing devices and the computer software with which they interact.

Aspects of the disclosure relate to various systems and techniques that provide more convenient functional and easy to use ways for administrators to manage complex devices and complex applications.

Some mobile device applications may include multiple wrapped applications that may be modified according to policies. For example camera software on a mobile device may be restricted using policies on a user s mobile device so as to be inoperable. Because there may be a large number of applications that may be available to enterprise users of an organization and administered and managed by administrative users of the organization and mobile device management software techniques for efficiently and effectively distributing applications and updates to client devices can be useful to organizations and administrative users in managing applications. In accordance with one or more aspects of the disclosure discussed in greater detail below components of a wrapped application may be delivered in different pieces that are individually updateable.

Aspects of the disclosure provide efficient effective and convenient ways of updating managed applications. In particular in accordance with various aspects of the disclosure a mobile device may receive an update to a wrapped application or to a library file comprising business logic. The updates may be managed by a central server which may push updates or respond to requests from the mobile device.

In accordance with one or more aspects of the disclosure a computing device may load application code of a mobile application. Subsequently the computing device may modify the application code to wrap the application with an application wrapper that is configured to manage execution of the application based on one or more policy files and configured to intercept one or more functions of the application code where the one or more policy files each define one or more access controls that are enforced by a device management system on one or more user devices. In some embodiments the library file may be an iOS library. Subsequently the computing device may create a library file comprising field programmable business logic defining implementation code linked to one or more of the functions intercepted by the wrapper. The computing device may then provide the wrapped application and the library file to at least one user device.

In some embodiments modifying the application code may include adding at least one stub function to the application wrapper and the at least one stub function may reference the implementation code provided in the library file. Additionally or alternatively modifying the application code may include renaming a function defined in an application programming interface used by the application to cause execution of at least a portion of the implementation code defined in the field programmable business logic. Additionally or alternatively modifying the application code may include inserting at least one application hook into the application and the at least one application hook may cause execution of a portion of the implementation code defined in the field programmable business logic.

In some embodiments after providing the wrapped application and the library file to the at least one user device the computing device may create an updated library file. In some instances the updated library file may include updated field programmable business logic defining updated implementation code linked to functions intercepted by the wrapper. The computing device may then provide the updated library file to the at least one user device to cause the application wrapper to use the updated business logic to manage execution of the wrapped application. In some instances the updated library file may be provided to the at least one user device in response to determining that the at least one user device is using outdated business logic. In some instances providing the updated library file to the at least one user device may cause the application wrappers of other applications to use the updated business logic to manage execution of other wrapped applications.

In some embodiments a user device may receive an indication that an update to a library file is available. In some instances the library file may include field programmable business logic defining implementation code linked to one or more functions intercepted by the wrapper. In some instances the wrapper may be configured to manage execution of a mobile application on the computing device based on one or more policy files defining one or more access controls that are enforced by a device management system on the computing device.

In some embodiments after receiving an indication of the updated to the first library file the computing device may receive an application update indicating that an update to a wrapper for the application is available. Subsequently the computing device may update the wrapped application and may replace the wrapper and the application with the wrapped application.

In the following description of the various embodiments reference is made to the accompanying drawings identified above and which form a part hereof and in which is shown by way of illustration various embodiments in which aspects described herein may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope described herein. Various aspects are capable of other embodiments and of being practiced or being carried out in various different ways.

As a general introduction to the subject matter described in more detail below aspects described herein are directed towards a method of wrapping an application with field programmable business logic. A system may use wrap an application in order to provide more effective means of application and device management and to enforce polices. Field programmable business logic may be used to allow for flexibility in programming and maintaining updates for a user device. As a result an administrator may advantageously apply updates to field programmable business logic without having to re wrap an application.

It is to be understood that the phraseology and terminology used herein are for the purpose of description and should not be regarded as limiting. Rather the phrases and terms used herein are to be given their broadest interpretation and meaning. The use of including and comprising and variations thereof is meant to encompass the items listed thereafter and equivalents thereof as well as additional items and equivalents thereof. The use of the terms mounted connected coupled positioned engaged and similar terms is meant to include both direct and indirect mounting connecting coupling positioning and engaging.

Computer software hardware and networks may be utilized in a variety of different system environments including standalone networked remote access aka remote desktop virtualized and or cloud based environments among others. illustrates one example of a system architecture and data processing device that may be used to implement one or more illustrative aspects described herein in a standalone and or networked environment. Various network nodes and may be interconnected via a wide area network WAN such as the Internet. Other networks may also or alternatively be used including private intranets corporate networks LANs metropolitan area networks MAN wireless networks personal networks PAN and the like. Network is for illustration purposes and may be replaced with fewer or additional computer networks. A local area network LAN may have one or more of any known LAN topology and may use one or more of a variety of different protocols such as Ethernet. Devices and other devices not shown may be connected to one or more of the networks via twisted pair wires coaxial cable fiber optics radio waves or other communication media.

The term network as used herein and depicted in the drawings refers not only to systems in which remote storage devices are coupled together via one or more communication paths but also to stand alone devices that may be coupled from time to time to such systems that have storage capability. Consequently the term network includes not only a physical network but also a content network which is comprised of the data attributable to a single entity which resides across all physical networks.

The components may include data server web server and client computers . Data server provides overall access control and administration of databases and control software for performing one or more illustrative aspects describe herein. Data server may be connected to web server through which users interact with and obtain data as requested. Alternatively data server may act as a web server itself and be directly connected to the Internet. Data server may be connected to web server through the network e.g. the Internet via direct or indirect connection or via some other network. Users may interact with the data server using remote computers e.g. using a web browser to connect to the data server via one or more externally exposed web sites hosted by web server . Client computers may be used in concert with data server to access data stored therein or may be used for other purposes. For example from remote computer a user may access web server using an Internet browser as is known in the art or by executing a software application that communicates with web server and or data server over a computer network such as the Internet .

Servers and applications may be combined on the same physical machines and retain separate virtual or logical addresses or may reside on separate physical machines. illustrates just one example of a network architecture that may be used and those of skill in the art will appreciate that the specific network architecture and data processing devices used may vary and are secondary to the functionality that they provide as further described herein. For example services provided by web server and data server may be combined on a single server.

Each component may be any type of known computer server or data processing device. Data server e.g. may include a processor controlling overall operation of the rate server . Data server may further include random access memory RAM read only memory ROM network interface input output interfaces e.g. keyboard mouse display printer etc. and memory . Input output I O may include a variety of interface units and drives for reading writing displaying and or printing data or files. Memory may further store operating system software for controlling overall operation of the data processing device control logic for instructing data server to perform aspects described herein and other application software providing secondary support and or other functionality which may or might not be used in conjunction with aspects described herein. The control logic may also be referred to herein as the data server software . Functionality of the data server software may refer to operations or decisions made automatically based on rules coded into the control logic made manually by a user providing input into the system and or a combination of automatic processing based on user input e.g. queries data updates etc. .

Memory may also store data used in performance of one or more aspects described herein including a first database and a second database . In some embodiments the first database may include the second database e.g. as a separate table report etc. . That is the information can be stored in a single database or separated into different logical virtual or physical databases depending on system design. Devices may have similar or different architecture as described with respect to device . Those of skill in the art will appreciate that the functionality of data processing device or device as described herein may be spread across multiple data processing devices for example to distribute processing load across multiple computers to segregate transactions based on geographic location user access level quality of service QoS etc.

One or more aspects may be embodied in computer usable or readable data and or computer executable instructions such as in one or more program modules executed by one or more computers or other devices as described herein. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types when executed by a processor in a computer or other device. The modules may be written in a source code programming language that is subsequently compiled for execution or may be written in a scripting language such as but not limited to HyperText Markup Language HTML or Extensible Markup Language XML . The computer executable instructions may be stored on a computer readable medium such as a nonvolatile storage device. Any suitable computer readable storage media may be utilized including hard disks CD ROMs optical storage devices magnetic storage devices and or any combination thereof. In addition various transmission non storage media representing data or events as described herein may be transferred between a source and a destination in the form of electromagnetic waves traveling through signal conducting media such as metal wires optical fibers and or wireless transmission media e.g. air and or space . Various aspects described herein may be embodied as a method a data processing system or a computer program product. Therefore various functionalities may be embodied in whole or in part in software firmware and or hardware or hardware equivalents such as integrated circuits field programmable gate arrays FPGA and the like. Particular data structures may be used to more effectively implement one or more aspects described herein and such data structures are contemplated within the scope of computer executable instructions and computer usable data described herein.

With further reference to one or more aspects described herein may be implemented in a remote access environment. depicts an example system architecture including a generic computing device in an illustrative computing environment that may be used according to one or more illustrative aspects described herein. Generic computing device may be used as a server in a single server or multi server desktop virtualization system e.g. a remote access or cloud system configured to provide virtual machines for client access devices. The generic computing device may have a processor for controlling overall operation of the server and its associated components including RAM ROM I O module and memory .

I O module may include a mouse keypad touch screen scanner optical reader and or stylus or other input device s through which a user of generic computing device may provide input and may also include one or more of a speaker for providing audio output and a video display device for providing textual audiovisual and or graphical output. Software may be stored within memory and or other storage to provide instructions to processor for configuring generic computing device into a special purpose computing device in order to perform various functions as described herein. For example memory may store software used by the computing device such as an operating system application programs and an associated database .

Computing device may operate in a networked environment supporting connections to one or more remote computers such as terminals also referred to as client devices . The terminals may be personal computers mobile devices laptop computers tablets or servers that include many or all of the elements described above with respect to the data server or . The network connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. When used in a LAN networking environment computing device may be connected to the LAN through a network interface or adapter . When used in a WAN networking environment computing device may include a modem or other wide area network interface for establishing communications over the WAN such as computer network e.g. the Internet . It will be appreciated that the network connections shown are illustrative and other means of establishing a communications link between the computers may be used. Computing device and or terminals may also be mobile terminals e.g. mobile phones smartphones personal digital assistants PDAs notebooks etc. including various other components such as a battery speaker and antennas not shown .

Aspects described herein may also be operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of other computing systems environments and or configurations that may be suitable for use with aspects described herein include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network personal computers PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

As shown in one or more client devices may be in communication with one or more servers generally referred to herein as server s . In one embodiment the computing environment may include a network appliance installed between the server s and client machine s . The network appliance may manage client server connections and in some cases can load balance client connections amongst a plurality of backend servers .

The client machine s may in some embodiments be referred to as a single client machine or a single group of client machines while server s may be referred to as a single server or a single group of servers . In one embodiment a single client machine communicates with more than one server while in another embodiment a single server communicates with more than one client machine . In yet another embodiment a single client machine communicates with a single server .

A client machine can in some embodiments be referenced by any one of the following non exhaustive terms client machine s client s client computer s client device s client computing device s local machine remote machine client node s endpoint s or endpoint node s . The server in some embodiments may be referenced by any one of the following non exhaustive terms server s local machine remote machine server farm s or host computing device s .

In one embodiment the client machine may be a virtual machine. The virtual machine may be any virtual machine while in some embodiments the virtual machine may be any virtual machine managed by a Type 1 or Type 2 hypervisor for example a hypervisor developed by Citrix Systems IBM VMware or any other hypervisor. In some aspects the virtual machine may be managed by a hypervisor while in aspects the virtual machine may be managed by a hypervisor executing on a server or a hypervisor executing on a client .

Some embodiments include a client device that displays application output generated by an application remotely executing on a server or other remotely located machine. In these embodiments the client device may execute a virtual machine receiver program or application to display the output in an application window a browser or other output window. In one example the application is a desktop while in other examples the application is an application that generates or presents a desktop. A desktop may include a graphical shell providing a user interface for an instance of an operating system in which local and or remote applications can be integrated. Applications as used herein are programs that execute after an instance of an operating system and optionally also the desktop has been loaded.

The server in some embodiments uses a remote presentation protocol or other program to send data to a thin client or remote display application executing on the client to present display output generated by an application executing on the server . The thin client or remote display protocol can be any one of the following non exhaustive list of protocols the Independent Computing Architecture ICA protocol developed by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash.

A remote computing environment may include more than one server such that the servers are logically grouped together into a server farm for example in a cloud computing environment. The server farm may include servers that are geographically dispersed while and logically grouped together or servers that are located proximate to each other while logically grouped together. Geographically dispersed servers within a server farm can in some embodiments communicate using a WAN wide MAN metropolitan or LAN local where different geographic regions can be characterized as different continents different regions of a continent different countries different states different cities different campuses different rooms or any combination of the preceding geographical locations. In some embodiments the server farm may be administered as a single entity while in other embodiments the server farm can include multiple server farms.

In some embodiments a server farm may include servers that execute a substantially similar type of operating system platform e.g. WINDOWS UNIX LINUX iOS ANDROID SYMBIAN etc. In other embodiments server farm may include a first group of one or more servers that execute a first type of operating system platform and a second group of one or more servers that execute a second type of operating system platform.

Server may be configured as any type of server as needed e.g. a file server an application server a web server a proxy server an appliance a network appliance a gateway an application gateway a gateway server a virtualization server a deployment server a Secure Sockets Layer SSL VPN server a firewall a web server an application server or as a master application server a server executing an active directory or a server executing an application acceleration program that provides firewall functionality application functionality or load balancing functionality. Other server types may also be used.

Some embodiments include a first server that receives requests from a client machine forwards the request to a second server and responds to the request generated by the client machine with a response from the second server . First server may acquire an enumeration of applications available to the client machine and well as address information associated with an application server hosting an application identified within the enumeration of applications. First server can then present a response to the client s request using a web interface and communicate directly with the client to provide the client with access to an identified application. One or more clients and or one or more servers may transmit data over network e.g. network .

In some embodiments the operating system of the mobile device may be separated into a managed partition and an unmanaged partition . The managed partition may have policies applied to it to secure the applications running on and data stored in the managed partition. The applications running on the managed partition may be secure applications. In other embodiments all applications may execute in accordance with a set of one or more policy files received separate from the application and which define one or more security parameters features resource restrictions and or other access controls that are enforced by the mobile device management system when that application is executing on the device. By operating in accordance with their respective policy file s each application may be allowed or restricted from communications with one or more other applications and or resources thereby creating a virtual partition. Thus as used herein a partition may refer to a physically partitioned portion of memory physical partition a logically partitioned portion of memory logical partition and or a virtual partition created as a result of enforcement of one or more policies and or policy files across multiple apps as described herein virtual partition . Stated differently by enforcing policies on managed apps those apps may be restricted to only be able to communicate with other managed apps and trusted enterprise resources thereby creating a virtual partition that is impenetrable by unmanaged apps and devices.

The secure applications may be email applications web browsing applications software as a service SaaS access applications Windows Application access applications and the like. The secure applications may be secure native applications secure remote applications executed by a secure application launcher virtualization applications executed by a secure application launcher and the like. The secure native applications may be wrapped by a secure application wrapper . The secure application wrapper may include integrated policies that are executed on the mobile device when the secure native application is executed on the device. The secure application wrapper may include meta data that points the secure native application running on the mobile device to the resources hosted at the enterprise that the secure native application may require to complete the task requested upon execution of the secure native application . The secure remote applications executed by a secure application launcher may be executed within the secure application launcher application . The virtualization applications executed by a secure application launcher may utilize resources on the mobile device at the enterprise resources and the like. The resources used on the mobile device by the virtualization applications executed by a secure application launcher may include user interaction resources processing resources and the like. The user interaction resources may be used to collect and transmit keyboard input mouse input camera input tactile input audio input visual input gesture input and the like. The processing resources may be used to present a user interface process data received from the enterprise resources and the like. The resources used at the enterprise resources by the virtualization applications executed by a secure application launcher may include user interface generation resources processing resources and the like. The user interface generation resources may be used to assemble a user interface modify a user interface refresh a user interface and the like. The processing resources may be used to create information read information update information delete information and the like. For example the virtualization application may record user interactions associated with a graphical user interface GUI and communicate them to a server application where the server application will use the user interaction data as an input to the application operating on the server. In this arrangement an enterprise may elect to maintain the application on the server side as well as data files etc. associated with the application. While an enterprise may elect to mobilize some applications in accordance with the principles herein by securing them for deployment on the mobile device this arrangement may also be elected for certain applications. For example while some applications may be secured for use on the mobile device others might not be prepared or appropriate for deployment on the mobile device so the enterprise may elect to provide the mobile user access to the unprepared applications through virtualization techniques. As another example the enterprise may have large complex applications with large and complex data sets e.g. material resource planning applications where it would be very difficult or otherwise undesirable to customize the application for the mobile device so the enterprise may elect to provide access to the application through virtualization techniques. As yet another example the enterprise may have an application that maintains highly secured data e.g. human resources data customer data engineering data that may be deemed by the enterprise as too sensitive for even the secured mobile environment so the enterprise may elect to use virtualization techniques to permit mobile access to such applications and data. An enterprise may elect to provide both fully secured and fully functional applications on the mobile device as well as a virtualization application to allow access to applications that are deemed more properly operated on the server side. In an embodiment the virtualization application may store some data files etc. on the mobile phone in one of the secure storage locations. An enterprise for example may elect to allow certain information to be stored on the phone while not permitting other information.

In connection with the virtualization application as described herein the mobile device may have a virtualization application that is designed to present GUIs and then record user interactions with the GUI. The application may communicate the user interactions to the server side to be used by the server side application as user interactions with the application. In response the application on the server side may transmit back to the mobile device a new GUI. For example the new GUI may be a static page a dynamic page an animation or the like thereby providing access to remotely located resources.

The secure applications may access data stored in a secure data container in the managed partition of the mobile device. The data secured in the secure data container may be accessed by the secure wrapped applications applications executed by a secure application launcher virtualization applications executed by a secure application launcher and the like. The data stored in the secure data container may include files databases and the like. The data stored in the secure data container may include data restricted to a specific secure application shared among secure applications and the like. Data restricted to a secure application may include secure general data and highly secure data . Secure general data may use a strong form of encryption such as Advanced Encryption Standard AES 128 bit encryption or the like while highly secure data may use a very strong form of encryption such as AES 256 bit encryption. Data stored in the secure data container may be deleted from the device upon receipt of a command from the device manager . The secure applications may have a dual mode option . The dual mode option may present the user with an option to operate the secured application in an unsecured or unmanaged mode. In an unsecured or unmanaged mode the secure applications may access data stored in an unsecured data container on the unmanaged partition of the mobile device . The data stored in an unsecured data container may be personal data . The data stored in an unsecured data container may also be accessed by unsecured applications that are running on the unmanaged partition of the mobile device . The data stored in an unsecured data container may remain on the mobile device when the data stored in the secure data container is deleted from the mobile device . An enterprise may want to delete from the mobile device selected or all data files and or applications owned licensed or controlled by the enterprise enterprise data while leaving or otherwise preserving personal data files and or applications owned licensed or controlled by the user personal data . This operation may be referred to as a selective wipe. With the enterprise and personal data arranged in accordance to the aspects described herein an enterprise may perform a selective wipe.

The mobile device may connect to enterprise resources and enterprise services at an enterprise to the public Internet and the like. The mobile device may connect to enterprise resources and enterprise services through virtual private network connections. The virtual private network connections also referred to as microVPN or application specific VPN may be specific to particular applications particular devices particular secured areas on the mobile device and the like . For example each of the wrapped applications in the secured area of the phone may access enterprise resources through an application specific VPN such that access to the VPN would be granted based on attributes associated with the application possibly in conjunction with user or device attribute information. The virtual private network connections may carry Microsoft Exchange traffic Microsoft Active Directory traffic HyperText Transfer Protocol HTTP traffic HyperText Transfer Protocol Secure HTTPS traffic application management traffic and the like. The virtual private network connections may support and enable single sign on authentication processes . The single sign on processes may allow a user to provide a single set of authentication credentials which are then verified by an authentication service . The authentication service may then grant to the user access to multiple enterprise resources without requiring the user to provide authentication credentials to each individual enterprise resource .

The virtual private network connections may be established and managed by an access gateway . The access gateway may include performance enhancement features that manage accelerate and improve the delivery of enterprise resources to the mobile device . The access gateway may also re route traffic from the mobile device to the public Internet enabling the mobile device to access publicly available and unsecured applications that run on the public Internet . The mobile device may connect to the access gateway via a transport network . The transport network may be a wired network wireless network cloud network local area network metropolitan area network wide area network public network private network and the like.

The enterprise resources may include email servers file sharing servers SaaS applications Web application servers Windows application servers and the like. Email servers may include Exchange servers Lotus Notes servers and the like. File sharing servers may include ShareFile servers and the like. SaaS applications may include Salesforce and the like. Windows application servers may include any application server that is built to provide applications that are intended to run on a local Windows operating system and the like. The enterprise resources may be premise based resources cloud based resources and the like. The enterprise resources may be accessed by the mobile device directly or through the access gateway . The enterprise resources may be accessed by the mobile device via a transport network . The transport network may be a wired network wireless network cloud network local area network metropolitan area network wide area network public network private network and the like.

The enterprise services may include authentication services threat detection services device manager services file sharing services policy manager services social integration services application controller services and the like. Authentication services may include user authentication services device authentication services application authentication services data authentication services and the like. Authentication services may use certificates. The certificates may be stored on the mobile device by the enterprise resources and the like. The certificates stored on the mobile device may be stored in an encrypted location on the mobile device the certificate may be temporarily stored on the mobile device for use at the time of authentication and the like. Threat detection services may include intrusion detection services unauthorized access attempt detection services and the like. Unauthorized access attempt detection services may include unauthorized attempts to access devices applications data and the like. Device management services may include configuration provisioning security support monitoring reporting and decommissioning services. File sharing services may include file management services file storage services file collaboration services and the like. Policy manager services may include device policy manager services application policy manager services data policy manager services and the like. Social integration services may include contact integration services collaboration services integration with social networks such as Facebook Twitter and LinkedIn and the like. Application controller services may include management services provisioning services deployment services assignment services revocation services wrapping services and the like.

The enterprise mobility technical architecture may include an application store . The application store may include unwrapped applications pre wrapped applications and the like. Applications may be populated in the application store from the application controller . The application store may be accessed by the mobile device through the access gateway through the public Internet or the like. The application store may be provided with an intuitive and easy to use User Interface.

A software development kit may provide a user the capability to secure applications selected by the user by wrapping the application as described previously in this description. An application that has been wrapped using the software development kit may then be made available to the mobile device by populating it in the application store using the application controller .

The enterprise mobility technical architecture may include a management and analytics capability . The management and analytics capability may provide information related to how resources are used how often resources are used and the like. Resources may include devices applications data and the like. How resources are used may include which devices download which applications which applications access which data and the like. How often resources are used may include how often an application has been downloaded how many times a specific set of data has been accessed by an application and the like.

In this case the left hand side represents an enrolled mobile device with a client agent which interacts with gateway server which includes Access Gateway and application controller functionality to access various enterprise resources and services such as Exchange Sharepoint public key infrastructure PKI Resources Kerberos Resources Certificate Issuance service as shown on the right hand side above. Although not specifically shown the mobile device may also interact with an enterprise application store StoreFront for the selection and downloading of applications.

The client agent acts as the UI user interface intermediary for Windows apps desktops hosted in an Enterprise data center which are accessed using the High Definition User Experience HDX ICA display remoting protocol. The client agent also supports the installation and management of native applications on the mobile device such as native iOS or Android applications. For example the managed applications mail browser wrapped application shown in the figure above are all native applications that execute locally on the device. Client agent and application management framework of this architecture act to provide policy driven management capabilities and features such as connectivity and SSO single sign on to enterprise resources services . The client agent handles primary user authentication to the enterprise normally to Access Gateway AG with SSO to other gateway server components. The client agent obtains policies from gateway server to control the behavior of the managed applications on the mobile device .

The secure interprocess communication IPC links between the native applications and client agent represent a management channel which allows client agent to supply policies to be enforced by the application management framework wrapping each application. The IPC channel also allows client agent to supply credential and authentication information that enables connectivity and SSO to enterprise resources . Finally the IPC channel allows the application management framework to invoke user interface functions implemented by client agent such as online and offline authentication.

Communications between the client agent and gateway server are essentially an extension of the management channel from the application management framework wrapping each native managed application . The application management framework requests policy information from client agent which in turn requests it from gateway server . The application management framework requests authentication and client agent logs into the gateway services part of gateway server also known as NetScaler Access Gateway . Client agent may also call supporting services on gateway server which may produce input material to derive encryption keys for the local data vaults or provide client certificates which may enable direct authentication to PKI protected resources as more fully explained below.

In more detail the application management framework wraps each managed application . This may be incorporated via an explicit build step or via a post build processing step. The application management framework may pair with client agent on first launch of an application to initialize the Secure IPC channel and obtain the policy for that application. The application management framework may enforce relevant portions of the policy that apply locally such as the client agent login dependencies and some of the containment policies that restrict how local OS services may be used or how they may interact with the application .

The application management framework may use services provided by client agent over the Secure IPC channel to facilitate authentication and internal network access. Key management for the private and shared data vaults containers may be also managed by appropriate interactions between the managed applications and client agent . Vaults may be available only after online authentication or may be made available after offline authentication if allowed by policy. First use of vaults may require online authentication and offline access may be limited to at most the policy refresh period before online authentication is again required.

Network access to internal resources may occur directly from individual managed applications through Access Gateway . The application management framework is responsible for orchestrating the network access on behalf of each application . Client agent may facilitate these network connections by providing suitable time limited secondary credentials obtained following online authentication. Multiple modes of network connection may be used such as reverse web proxy connections and end to end VPN style tunnels .

The Mail and Browser managed applications have special status and may make use of facilities that might not be generally available to arbitrary wrapped applications. For example the Mail application may use a special background network access mechanism that allows it to access Exchange over an extended period of time without requiring a full AG logon. The Browser application may use multiple private data vaults to segregate different kinds of data.

This architecture supports the incorporation of various other security features. For example gateway server including its gateway services in some cases will not need to validate active directory AD passwords. It can be left to the discretion of an enterprise whether an AD password is used as an authentication factor for some users in some situations. Different authentication methods may be used if a user is online or offline i.e. connected or not connected to a network .

Step up authentication is a feature wherein gateway server may identify managed native applications that are allowed to have access to highly classified data requiring strong authentication and ensure that access to these applications is only permitted after performing appropriate authentication even if this means a re authentication is required by the user after a prior weaker level of login.

Another security feature of this solution is the encryption of the data vaults containers on the mobile device . The vaults may be encrypted so that all on device data including files databases and configurations are protected. For on line vaults the keys may be stored on the server gateway server and for off line vaults a local copy of the keys may be protected by a user password or biometric validation. When data is stored locally on the device in the secure container it is preferred that a minimum of AES 256 encryption algorithm be utilized.

Other secure container features may also be implemented. For example a logging feature may be included wherein all security events happening inside an application are logged and reported to the backend. Data wiping may be supported such as if the application detects tampering associated encryption keys may be written over with random data leaving no hint on the file system that user data was destroyed. Screenshot protection is another feature where an application may prevent any data from being stored in screenshots. For example the key window s hidden property may be set to YES. This may cause whatever content is currently displayed on the screen to be hidden resulting in a blank screenshot where any content would normally reside.

Local data transfer may be prevented such as by preventing any data from being locally transferred outside the application container e.g. by copying it or sending it to an external application. A keyboard cache feature may operate to disable the autocorrect functionality for sensitive text fields. SSL certificate validation may be operable so the application specifically validates the server SSL certificate instead of it being stored in the keychain. An encryption key generation feature may be used such that the key used to encrypt data on the device is generated using a passphrase or biometric data supplied by the user if offline access is required . It may be XORed with another key randomly generated and stored on the server side if offline access is not required. Key Derivation functions may operate such that keys generated from the user password use KDFs key derivation functions notably Password Based Key Derivation Function 2 PBKDF2 rather than creating a cryptographic hash of it. The latter makes a key susceptible to brute force or dictionary attacks.

Further one or more initialization vectors may be used in encryption methods. An initialization vector will cause multiple copies of the same encrypted data to yield different cipher text output preventing both replay and cryptanalytic attacks. This will also prevent an attacker from decrypting any data even with a stolen encryption key if the specific initialization vector used to encrypt the data is not known. Further authentication then decryption may be used wherein application data is decrypted only after the user has authenticated within the application. Another feature may relate to sensitive data in memory which may be kept in memory and not in disk only when it s needed. For example login credentials may be wiped from memory after login and encryption keys and other data inside objective C instance variables are not stored as they may be easily referenced. Instead memory may be manually allocated for these.

An inactivity timeout may be implemented wherein after a policy defined period of inactivity a user session is terminated.

Data leakage from the application management framework may be prevented in other ways. For example when an application is put in the background the memory may be cleared after a predetermined configurable time period. When backgrounded a snapshot may be taken of the last displayed screen of the application to fasten the foregrounding process. The screenshot may contain confidential data and hence should be cleared.

Another security feature relates to the use of an OTP one time password without the use of an AD active directory password for access to one or more applications. In some cases some users do not know or are not permitted to know their AD password so these users may authenticate using an OTP such as by using a hardware OTP system like SecurID OTPs may be provided by different vendors also such as Entrust or Gemalto . In some cases after a user authenticates with a user ID a text is sent to the user with an OTP . In some cases this may be implemented only for online use with a prompt being a single field.

An offline password may be implemented for offline authentication for those applications for which offline use is permitted via enterprise policy. For example an enterprise may want StoreFront to be accessed in this manner. In this case the client agent may require the user to set a custom offline password and the AD password is not used. Gateway server may provide policies to control and enforce password standards with respect to the minimum length character class composition and age of passwords such as described by the standard Windows Server password complexity requirements although these requirements may be modified.

Another feature relates to the enablement of a client side certificate for certain applications as secondary credentials for the purpose of accessing PKI protected web resources via the application management framework micro VPN feature . For example an application may utilize such a certificate. In this case certificate based authentication using ActiveSync protocol may be supported wherein a certificate from the client agent may be retrieved by gateway server and used in a keychain. Each managed application may have one associated client certificate identified by a label that is defined in gateway server .

Gateway server may interact with an Enterprise special purpose web service to support the issuance of client certificates to allow relevant managed applications to authenticate to internal PKI protected resources.

The client agent and the application management framework may be enhanced to support obtaining and using client certificates for authentication to internal PKI protected network resources. More than one certificate may be supported such as to match various levels of security and or separation requirements. The certificates may be used by the Mail and Browser managed applications and ultimately by arbitrary wrapped applications provided those applications use web service style communication patterns where it is reasonable for the application management framework to mediate https requests .

Application management client certificate support on iOS may rely on importing a public key cryptography standards PKCS BLOB Binary Large Object into the iOS keychain in each managed application for each period of use. Application management framework client certificate support may use a HTTPS implementation with private in memory key storage. The client certificate will never be present in the iOS keychain and will not be persisted except potentially in online only data value that is strongly protected.

Mutual SSL may also be implemented to provide additional security by requiring that a mobile device is authenticated to the enterprise and vice versa. Virtual smart cards for authentication to gateway server may also be implemented.

Both limited and full Kerberos support may be additional features. The full support feature relates to an ability to do full Kerberos login to Active Directory AD using an AD password or trusted client certificate and obtain Kerberos service tickets to respond to HTTP Negotiate authentication challenges. The limited support feature relates to constrained delegation in Citrix Access Gateway Enterprise Edition AGEE where AGEE supports invoking Kerberos protocol transition so it can obtain and use Kerberos service tickets subject to constrained delegation in response to HTTP Negotiate authentication challenges. This mechanism works in reverse web proxy aka corporate virtual private network CVPN mode and when http but not https connections are proxied in VPN and MicroVPN mode.

Another feature relates to application container locking and wiping which may automatically occur upon jail break or rooting detections and occur as a pushed command from administration console and may include a remote wipe functionality even when an application is not running.

A multi site architecture or configuration of enterprise application store and an application controller may be supported that allows users to be service from one of several different locations in case of failure.

In some cases managed applications may be allowed to access a certificate and private key via an API example OpenSSL . Trusted managed applications of an enterprise may be allowed to perform specific Public Key operations with an application s client certificate and private key. Various use cases may be identified and treated accordingly such as when an application behaves like a browser and no certificate access is required when an application reads a certificate for who am I when an application uses the certificate to build a secure session token and when an application uses private keys for digital signing of important data e.g. transaction log or for temporary data encryption.

As seen in the method may begin at step in which application code of may be loaded. For example at step a computing device e.g. data server may load application code of a mobile application. For example the application code may be source code that defines all of and or a portion of an Android application an iOS application a Windows application a Linux application or any other application type suitable for use in a computing device. In some instances the computing device may load the application code from a binary file received by the computing device. In some instances the application code may be present on the computing device e.g. stored on the computing device and loaded by the operating system. In other examples the computing device and or the operating system on the computing device may load the application code from an application store. For example on an Android device the Android operating system may load the application code from the Google Play Store. For another example on an Apple device the Apple iOS operating system may load the application code from the Apple App Store. In other examples the computing device may load the application code from a different application repository or directly from device memory. In some instances the computing device may receive the application code by network interface or input out interface .

As seen in the method may continue at step in which the application code may be wrapped. For example at step the computing device e.g. data server may load application code to wrap a mobile application with an application wrapper that is configured to manage execution of the application based on one or more policy files. The application wrapper may be further configured to intercept one or more function calls of the application code and the one or more policy files may each define one or more access controls that are enforced by a device management system on one or more user devices. In some instances the wrapped application may include a single executable file with modified code. In other instances the wrapped application may include a number of interrelated files that may operate together to perform some function. For example the wrapped application may be a combination of executable files linked libraries Java classes data files or any other file type suitable for execution alone or when combined with another file. In some instances the application wrapper may manage the execution of the application by adding or restricting functions of an executable file. Additionally or alternatively the application wrapper may manage the execution of the application by enhancing or restricting user access to functions of an executable file. In some instances policy files may include access controls an administrator may put in place. For example policy files may add or restrict functions accessible by a specific user in specific circumstances that may be defined by one or more policies in the policy files. In one example a policy file may specify access controls disabling a phone camera a microphone. In another example a policy file may allow for remote access or disable access to a function when not in the presence of a wireless connection. In some instances the device management system may include an application on a remote computer . In some instances the device management system may include a centralized management system which may propagate access controls to a number of client devices.

As seen in the method may continue at step in which a library file may be created. For example at step the computing device e.g. data server may create a library file that includes field programmable business logic defining implementation code linked to one or more of the functions intercepted by the wrapper. For example a library file implementation might be a dynamic link library a Java class or any other similar file type suitable for an application. In some instances field programmable business logic may include logical instructions that may allow a wrapper to manage execution of an application. For example field programmable business logic may define implementation code including a code definition for a declaration made in a wrapper. In another example field programmable business logic may define implementation code comprising other implementation logic such as a Python code file or a Java code file.

As seen in the method may continue at step in which a wrapped application and library file may be provided. For example at step a computing device e.g. data server may provide the wrapped application and library file to at least one user device. For example the computing device may provide the wrapped application and library file by sending the wrapped application and library file via network interface or input output interface to a computing device that is used by a particular user. For example the computing device may provide the wrapped application and library file in response to a request from a remote computer . For instance the remote computer may request the wrapped application and library file from a store front such as an application store like the Google Play Store the Apple App Store or any other application repository. As another example the computing device may push the wrapped application and library file to the client device externally. For instance the remote computer may load an application image file containing the wrapped application and library file or may have the application and library file pushed to the client device by the computing device.

As seen in the method may continue at step in which an update to business logic may be received. For example at step the computing device e.g. data server may receive an update to business logic defining updated implementation code linked to functions intercepted by the wrapper. For example the update may include updated code or underlying logic. As another example the update may include replacement code that replaces in whole or in part code or underlying logic.

As seen in the method may continue at step in which the library file may be updated. For example at step the computing device e.g. data server may create an updated library file comprising the updated field programmable business logic from step . For example in creating the updated library file the computing device may revise an existing library file with updated code that includes the updated field programmable business logic. For instance a separate application executing on the remote computer may make modifications to the business logic based on instructions received by the computing device. As another example in creating the updated library file the computing device may replace code or logic comprising the updated field programmable business logic. For instance a software tool in the remote computer may replace existing files with updated files. Or for instance the software tool may replace batches of code or logic with updated code or logic.

As seen in the method may continue at step in which the updated library file may be provided. For example at step the computing device e.g. data server may provide the updated library file to the at least one user device e.g. by sending the updated library file to the at least one user device via one or more communication interfaces . This may cause the application wrapper to use the updated business logic to manage execution of the wrapped application. For example the computing device may provide the updated library file through network interface or input output interface . For example the computing device may supply the updated library file in response to a request from a remote computer . For instance the remote computer may request the updated library file from an application store such as a store front like the Play Store the App Store or any other application repository. As another example the computing device may push the updated library file to the remote computer . For instance the remote computer may be flashed with an image containing the updated library file or may have the updated library file pushed to the remote computer by the computing device.

In some embodiments the updated library file may cause additional wrappers to use the updated business logic to manage execution of other wrapped applications. For instance a remote computer may contain a number of managed applications. A single updated library file may contain updates for multiple or all managed applications on a device. In some instances an agent application may provide the updated library file to the managed applications. In some instances the updated library file may allow the managed applications to be updated without a need to re wrap those applications.

As seen in the method may continue at step in which an update to a wrapped application may be received. For example at step the computing device e.g. data server may receive an application update indicating that an update to a wrapper is available. For example the update may include information updating one or more files that may make up the wrapped application. For instance the update may include a set of instructions that allow the remote computer to revise or replace files. In another instance the update may include replacements for code or one or more files that may make up the wrapped application.

As seen in the method may continue at step in which the application may be re wrapped. For example at step the computing device e.g. data server may replace the wrapper and or the application with the updated wrapped application which may use the update from step . For example the separate application executing on the remote computer may make modifications to the business logic based on instructions received by the computing device. As another example re wrapping the application may involve a device replacing code or logic. For instance the separate application may replace existing files with updated files. Or for instance a software tool may replace batches of code or logic with updated code or logic.

As seen in the method may continue at step in which the updated wrapped application may be provided. For example at step the computing device e.g. data server may provide the updated wrapped application to the at least one user device. For example the computing device may provide the updated wrapped application by sending the updated wrapped application to the at least one user device via network interface or input output interface . For example the updated wrapped application may be provided in response to a request from a remote computer . For instance the remote computer may request the updated wrapped application from the application store wherein the store front may be the Play Store the App Store or any other application repository. As another example the updated wrapped application may be pushed to the client device externally. For instance the remote computer may be flashed with an image containing the updated wrapped application or may have the updated wrapped application pushed to the remote computer by the computing device.

As seen in the method may begin at step in which an indication of an update to a library file may be received. For example at step the client device e.g. remote computer may receive an indication of an update to a first library file. The first library file may include field programmable business logic defining implementation code linked to one or more functions intercepted by a wrapper. The wrapper may be configured to manage execution of a mobile application on the client device based on one or more policy files defining one or more access controls that are enforced by a device management system on the client device. For example the update may supply updated code or underlying logic to the remote computer. As another example the update may supply replacements in whole or in part for code or underlying logic to the remote computer. The indication of the update to the first library file that is received by the client device at step may for example include information indicating that an update to the first library file is available and or information defining the updated business logic and or implementation code that may be associated with the business logic.

As seen in the method may continue at step in which an update to a library file may be downloaded. For example at step a client device e.g. remote computer may download an updated library file in response to receiving an indication that an update is available. The updated library file might include field programmable business logic defining updated implementation code linked to functions intercepted by the wrapper. In some instances the updated library file may have been provided as in step . The client device may download the application through network interface or input output interface . Another device a server a repository such as the Google Play Store or Apple App Store or any application repository might supply the file in some instances.

As seen in the method may continue at step in which the previous library file may be replaced with the updated library file. For example at step the client device e.g. remote computer may replace the first library file with the updated library file. The wrapper may then use the updated field programmable business logic when managing the execution of the mobile application. For instance the client device may replace a stand alone file with another file. As examples the client device may replace a file containing Java classes with another file containing java classes or replace one dynamic link library file with another dynamic link library file.

In some embodiments an application may use the updated library file without the need for re wrapping the application. Further in some embodiments additional wrappers may use the updated business logic to manage execution of additional wrapped applications. For instance a remote computer may contain a number of managed applications. A single updated library file may contain updates for multiple or all managed applications on a device. In some instances the updated library file may allow additional managed applications to be updated without a need to re wrap those additional applications. For example multiple wrappers may use a library file stored in the file system such that replacing an old library file with an updated library file replaces the file for multiple wrappers and allows the managed applications to use the updated field programmable business logic without re wrapping. In some instances an agent application may provide the updated library file to the managed applications. For example the agent may receive one copy of the updated library file and may distribute the updated library file among the managed applications for their use.

As seen in the method may begin at step in which an indication of an update to a wrapper for an application may be received. For example at step a client device e.g. remote computer may receive an application update indicating that an update to a wrapper for the application is available. For example the update may include updates to one or more files that may make up the wrapped application. For instance the update may include a set of instructions for the client device to revise one or more files that make up the application. In another instance the update may include replacements for code or one or more files that may make up the wrapped application.

As seen in the method may continue at step in which an update to a wrapper for an application may be downloaded. For example at step a computing device e.g. data server may download an updated wrapped application. In some instances the updated wrapper for an application may have been provided as in step . The client device may download the application through network interface or input output interface . Another device a server a repository such as the Google Play Store or Apple App Store or any application repository might supply the file.

As seen in the method may continue at step in which the previous library file may be replaced with the updated library file. For example at step the client device e.g. remote computer may replace the wrapper and the application with the updated wrapped application. For instance the client device may replace a stand alone file with another file. For instance an application running on the client device may make modifications based on instructions received by the client device. As another example re wrapping the application may include replacing code or logic. For instance a software tool on the client device may replace existing files with updated files. Or for instance the software tool may replace batches of code or logic with updated code or logic.

In some embodiments the library file may be of a certain type. For example in some embodiments the library file may be an iOS library. In another example the library file may be an Android Library. In another example the library file may be a dynamic link library. The library file may also be a Windows library a Windows phone library or any other suitable file type for a library file.

In some embodiments implementation code may be code definitions that implement code. For example a stub function may be a .h file and implementation code may be a .cpp file. As another example in Java the application wrapper may be defined as a Java class and that class may be implemented by the implementation code. Further any number of other means may be used to create implementation code including languages such as C C assembly or binary files. A wrapper might be a function and the implementation code may be a binary file injected into the wrapper in order to create executable code within an operating system. Implementation code may run independently and simply be called by the wrapper or it may require the wrapper to operate.

In some embodiments modifying the application code may include adding at least one stub function to the application wrapper the at least one stub function may reference the implementation code provided in the library file. A stub function may be a declaration of a function that overrides a function that already exists in an application. A stub function may also be a function created for the purpose of aiding the application wrapper and may add some additional functionality. The stub function may reference implementation code in the library file that limits functionality.

In some embodiments modifying the application code may include renaming a function defined in an application programming interface used by the application to cause execution of at least a portion of the implementation code defined in the field programmable business logic. For example the computing device or client device might rename an existing declaration for a function and create a new declaration with the original function so that function calls refer to the new function in place of the original function. For instance a function camera in the application programming interface might be changed to camera.old and a new camera might be created that simply terminates. This may prevent the user from being able to take a picture with a camera with his or her smartphone. In another example an existing function may be renamed with no replacement given so that the existing function no longer operates.

In some embodiments modifying the application code may include inserting an application hook into the application. The application hook might cause execution of a portion of the implementation code defined in the field programmable business logic. For example the computing device or client device might insert a subroutine to monitor for execution of a branch of code and the subroutine may execute code when the branch is detected. In another example the computing device or client device might insert a branching instruction that jumps to execution of the implementation code from a certain point in an application s code.

In some embodiments the updated library file may be provided to the at least one user device in response to determining that the at least one user device is using outdated business logic. For example the computing device or client device might determine that the library file is outdated. For instance a storefront application store such as the Google Play Store or the Apple App Store may assist the computing device or client device in determining that the library file is outdated. In another instance the client device may either check or receive an indication from the computer device indicating that the library file may be outdated. A library file may be outdated if a new file is available if the existing file is discontinued if a revision to a file is available etc.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are described as example implementations of the following claims.

