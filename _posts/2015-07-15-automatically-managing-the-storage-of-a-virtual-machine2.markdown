---

title: Automatically managing the storage of a virtual machine
abstract: Mechanisms are provided for automatically expanding a virtual storage of a virtual machine. The virtual machine monitors a usage of the virtual storage of the virtual machine. The virtual machine determines, based on the monitoring of the usage of the virtual storage, whether to expand the virtual storage of the virtual machine. In response to the virtual machine determining to expand the virtual storage of the virtual machine, a virtual machine manager executes one or more operations to expand the virtual storage. The monitoring and determining may be performed by a virtual storage management agent executing within the virtual machine and which may send an expansion request to an authorization engine to request expansion of the virtual storage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09535609&OS=09535609&RS=09535609
owner: International Business Machines Corporation
number: 09535609
owner_city: Armonk
owner_country: US
publication_date: 20150715
---
This application is a continuation of application Ser. No. 13 728 664 filed Dec. 27 2012 status allowed.

The present application relates generally to an improved data processing apparatus and method and more specifically to mechanisms for automatically managing the storage of a virtual machine.

A virtual machine VM is a software implementation of a machine i.e. a computer that executes programs like a physical machine. Virtual machines are separated into two major categories based on their use and degree of correspondence to any real machine. A system virtual machine provides a complete system platform which supports the execution of a complete operating system OS . These usually emulate an existing architecture and are built with the purpose of providing a platform to run programs where the real hardware is not available for use for example executing software on otherwise obsolete platforms or having multiple instances of virtual machines lead to more efficient use of computing resource both in terms of energy consumption as well as cost effectiveness known as hardware virtualization the key to a cloud computing environment or both. In contrast a process virtual machine also language virtual machine is designed to run a single program which means that it supports a single process. Such virtual machines are usually closely suited to one or more programming languages and built with the purpose of providing program portability and flexibility amongst other things . An essential characteristic of a virtual machine is that the software running inside is limited to the resources and abstractions provided by the virtual machine it cannot extend outside of its virtual environment.

Server based virtual machines are one way in which computing power and storage may be provided to client applications as a service. That is for each client application session or for a plurality of client application sessions from the same or different client computing devices a client virtual machine may be created on the server computing device that represents a separate instance of the server computing device and associated resources for that client application session or plurality of client application sessions. This client virtual machine may have its own instance of an operating system allocated virtual memory resources and the like.

However as mentioned above client application processes are limited by the resources allocated to the virtual machine. In order to modify such allocation of resources a skilled human operator must manually reconfigure the allocation of resources and even modify the physical resources of the physical machines to accommodate the need for more resources. This process can be very complex in environments where client segregation is present and virtual machines are connected to segregated networks. Client segregation refers to public clouds or more generally multi tenant environments where cloud resources compute storage and networks can be dedicated to tenants. The cloud infrastructure must guarantee that those resources are kept separate and secured so that only the assigned tenant can access them in a secure way. Thus virtual machines and storage devices must be configured to be accessed only from the networks dedicated to the tenant i.e. must be segregated. Managing a multi tenant environment adds complexity because the cloud environment must be more sophisticated to guarantee segregation of resources and the quality of service per each tenant. The cloud environment must manage the resource pools and the quota of resources that each tenant can use on the pools with over commitment policies possibly being in place to optimize the use of the resources across tenants. In such an environment a process of reconfiguring a virtual machine is more critical and error prone compared with a private single tenant environment.

In one illustrative embodiment a method in a data processing system is provided for automatically expanding a virtual storage of a virtual machine executing in the data processing system. The method comprises monitoring by the virtual machine a usage of the virtual storage of the virtual machine. The method further comprises determining by the virtual machine based on the monitoring of the usage of the virtual storage whether to expand the virtual storage of the virtual machine. Moreover the method comprises in response to the virtual machine determining to expand the virtual storage of the virtual machine executing by a virtual machine manager one or more operations to expand the virtual storage.

In other illustrative embodiments a computer program product comprising a computer useable or readable medium having a computer readable program is provided. The computer readable program when executed on a computing device causes the computing device to perform various ones of and combinations of the operations outlined above with regard to the method illustrative embodiment.

In yet another illustrative embodiment a system apparatus is provided. The system apparatus may comprise one or more processors and a memory coupled to the one or more processors. The memory may comprise instructions which when executed by the one or more processors cause the one or more processors to perform various ones of and combinations of the operations outlined above with regard to the method illustrative embodiment.

These and other features and advantages of the present invention will be described in or will become apparent to those of ordinary skill in the art in view of the following detailed description of the example embodiments of the present invention.

The illustrative embodiments provide mechanisms for automatically managing the storage of a virtual machine. The illustrative embodiments utilize an agent executing within the virtual machine that monitors the amount of free storage space available to the virtual machine such as in a virtual disk or storage allocated to the virtual machine. If the agent within the virtual machine detects a storage shortage based on one or more established threshold free space available values the agent is configured to automatically initiate a process for automatically enlarging the virtual disk or storage capacity allocated to the virtual machine.

The process for automatically enlarging the virtual disk or storage involves automatically generating and transmitting a request to an authorization engine by a virtual machine manager VMM to obtain authorization to increase the virtual disk storage allocated to the virtual machine VM . If the authorization engine determines that an increase in the virtual disk storage for the VM is authorized the agent of the VM interacts with the VMM to increase the virtual disk storage allocation to the VM. The agent may further interact with the operating system OS image of the VM to extend the partitions the OS has established such that they use all of the increased virtual disk storage space i.e. all of the new virtual disk storage area is allocated to one or more partitions of the OS.

In this way the mechanisms of the illustrative embodiments allow the VM to automatically increase its own amount of virtual disk storage on a server machine without requiring the interaction of a skilled human administrator to perform the increase in virtual disk storage space allocation. This avoids issues with VM operation in situations where no human administrator is available to service the server computing device or situations where a VM is associated with a computing device where a human administrator is present but does not have the required skill or security access to complete the operation of increasing the virtual disk storage space allocation. With the mechanisms of the illustrative embodiments the VM may expand its own virtual disk storage while the VM remains running and servicing client requests from client computing devices applications. The mechanisms of the illustrative embodiment also allow the completion of the operation for increasing virtual disk storage space allocation to a VM while running the VM in a complex network environment implementing network segregation such as in the case of virtual local area networks VLANs cloud systems firewalls and virtual routing and forwarding environments which allow using overlapping IP address ranges for different tenants.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in any one or more computer readable medium s having computer usable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in a baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Computer code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable radio frequency RF etc. or any suitable combination thereof.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to the illustrative embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions that implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Thus the illustrative embodiments may be utilized in many different types of data processing environments. In order to provide a context for the description of the specific elements and functionality of the illustrative embodiments are provided hereafter as example environments in which aspects of the illustrative embodiments may be implemented. It should be appreciated that are only examples and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the present invention may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

In the depicted example server and server are connected to network along with storage unit . In addition clients and are also connected to network . These clients and may be for example personal computers network computers or the like. In the depicted example server provides data such as boot files operating system images and applications to the clients and . Clients and are clients to server in the depicted example. Distributed data processing system may include additional servers clients and other devices not shown.

In the depicted example distributed data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course the distributed data processing system may also be implemented to include a number of different types of networks such as for example an intranet a local area network LAN a wide area network WAN or the like. As stated above is intended as an example not as an architectural limitation for different embodiments of the present invention and therefore the particular elements shown in should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.

In the depicted example data processing system employs a hub architecture including north bridge and memory controller hub NB MCH and south bridge and input output I O controller hub SB ICH . Processing unit main memory and graphics processor are connected to NB MCH . Graphics processor may be connected to NB MCH through an accelerated graphics port AGP .

In the depicted example local area network LAN adapter connects to SB ICH . Audio adapter keyboard and mouse adapter modem read only memory ROM hard disk drive HDD CD ROM drive universal serial bus USB ports and other communication ports and PCI PCIe devices connect to SB ICH through bus and bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash basic input output system BIOS .

HDD and CD ROM drive connect to SB ICH through bus . HDD and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. Super I O SIO device may be connected to SB ICH .

An operating system runs on processing unit . The operating system coordinates and provides control of various components within the data processing system in . As a client the operating system may be a commercially available operating system such as Microsoft Windows 7 . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system .

As a server data processing system may be for example an IBM eServer System P computer system running the Advanced Interactive Executive AIX operating system or the LINUX operating system. Data processing system may be a symmetric multiprocessor SMP system including a plurality of processors in processing unit . Alternatively a single processor system may be employed.

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as HDD and may be loaded into main memory for execution by processing unit . The processes for illustrative embodiments of the present invention may be performed by processing unit using computer usable program code which may be located in a memory such as for example main memory ROM or in one or more peripheral devices and for example.

A bus system such as bus or bus as shown in may be comprised of one or more buses. Of course the bus system may be implemented using any type of communication fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communication unit such as modem or network adapter of may include one or more devices used to transmit and receive data. A memory may be for example main memory ROM or a cache such as found in NB MCH in .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system other than the SMP system mentioned previously without departing from the spirit and scope of the present invention.

Moreover the data processing system may take the form of any of a number of different data processing systems including client computing devices server computing devices a tablet computer laptop computer telephone or other communication device a personal digital assistant PDA or the like. In some illustrative examples data processing system may be a portable computing device that is configured with flash memory to provide non volatile memory for storing operating system files and or user generated data for example. Essentially data processing system may be any known or later developed data processing system without architectural limitation.

Referring again to one or more applications executing on one or more of the client computing devices may access applications services resources or the like made available by one or more of the servers . For purposes of the following description it will be assumed that the client computing device runs a client application which accesses an application service resources or the like of server for example. The applications services resources or the like of the server may be provided as a part of a virtual machine VM executing on the server . The VM may be one of a plurality of VMs provided by the server . Each VM may have its own operating system OS instance or guest OS executing within the VM and may have its own VM resources including virtual disk storage allocation application instances device driver instances processor resource allocations and the like. In accordance with the illustrative embodiments set forth herein the VM may execute within the VM a virtual storage management agent that automatically monitors the VM s utilization of its allocated virtual disk storage hereafter referred to simply as virtual storage to determine if an expansion or increase in the virtual storage should be automatically requested and then automatically interacting with mechanisms internal and external to the VM to accomplish the expansion or increase in virtual storage.

The VMs are preferably managed by a virtual machine manager VMM executing on the server . The VMM may be for example implemented as a hypervisor part of a hypervisor or part of another type of virtual machine management mechanism. The VMMs of a plurality of servers may be managed by a VMM manager which may be provided within one of the servers or in a separate computing device coupled to the network . In one illustrative embodiment the VMM of a server may implement logic either provided in hardware software or a combination of hardware and software for providing an authorization engine and virtual disk storage management engine. Alternatively the authorization engine may be provided as logic external to the VMM such as in the VMM manager or a separate component in the same or a separate computing device from the server but coupled to the network . The authorization engine may work in conjunction with the virtual storage management VSM agent of the VM to process requests from the VSM agent to determine if requested expansion increase of allocated virtual memory in the VM should be authorized or not.

Physical storage such as hard disk storage solid state drive storage flash memory storage or other types of storage devices may be managed by a storage manager which may interface with the VMMs the VMM manager and other components of the illustrative embodiments as described hereafter to accomplish the automated management of VM storage. The storage manager is an optional component and is not necessary to the operation of the illustrative embodiments. However in one illustrative embodiment the network attached physical storage may be used to provide backend storage devices for the VMs of one or more of the servers and may have an associated storage manager for providing the network connectivity to network and may manage the physical redundant arrays of independent disks RAIDs of the physical storage to provision the storage for allocation to VMs of the servers . Alternatively or in addition other physical storage associated with the servers may be used to provide such backend storage devices for the VMs and may or may not make use of a storage manager.

The VMM manager is provided in the same or separate computing device from that of server computing device the example in shows the VMM manager being provided in a separate computing device . The VMM manager manages the VMMs of the various server computing devices only one of which is shown in but the network may in fact comprise a plurality of such server computing devices which may together be managed by a single VMM manager . The VMM manager may work in conjunction with the VMMs and the optional storage manager to service authorized requests for expansion increase of the a VM s allocated virtual storage e.g. the allocated virtual storage of a VM . The VMM manager may interact with the authorization engine to check for availability of the storage required by the VM the VMM manager knows the amount of space left on the datastore where the VM is running Based on the request from the VMM manager the authorization engine can make different decisions based on its policies. For example if there is no more space on the datastore where the VM is running the authorization engine may autonomously request the VMM manager to live migrate the VM onto a different datastore. Alternatively the authorization engine could simply deny the expansion request and send an alert to an administrator.

In some cases the expansion of the virtual storage may require more physical storage to be allocated to the server computing device and or the VM in which case the storage manager may be used to perform the actual allocation of additional physical storage of the storage system . For example if a request for an expansion of the virtual storage allocated to a VM is determined to be authorized the authorization result may be transmitted to the VMM manager or directly to the requesting VMM via the management network . The VMM manager or requesting VMM may then perform the necessary operations to expand or increase the allocated virtual storage of the VM . The VMM and VMM manager may provide various application programming interfaces APIs not shown which may be used to increase the size of the virtual storage of the VM note that a VM can have more than one virtual storage or virtual disk . There are also virtualization tools that are installed in the Guest OS of the VM and that can be called by the VSM agent to communicate with the VMM to initiate virtual storage or virtual disk expansion. In one illustrative embodiment one possible data flow for expanding the virtual storage may be that the VSM agent once receiving authorization from the authorization engine may use the VM s guest OS tools to request that the VMM expand the virtual storage or virtual disk as described hereafter with regard to for example . In another illustrative embodiment the authorization engine may request that the VMM manager expand the virtual storage or virtual disk of the VM and then communicates back the result to the VSM agent which then will only need to perform step of hereafter call guest OS tools command line or api for modifying the partition of the virtual storage or virtual disk so that the file system can start using the new storage.

The authorization engine provides the logic for determining whether a request for an expansion of allocated virtual storage to a VM as received from a VSM agent executing within the VM should be granted or denied. The authorization engine is shown in as being provided on a separate computing device from the other computing devices systems and . However the authorization engine may in some illustrative embodiments be hosted on one or more of the computing devices systems and and may be integrated with one or more of the components of these computing devices systems and . For example the authorization engine may be integrated with the VMM manager or the VMM .

The computing devices systems and are in communication with each other via a management network which provides communication pathways via hardware and software mechanisms for communication for management commands data packets or the like to facilitate the management of resources on the various computing devices systems. In particular to the illustrative embodiments the management network provides a communication pathway for communicating requests for expansion increase of virtual storage to VMs receiving responses to such requests exchanging commands and data for performing the expansion increase of virtual storage to VMs and the like. The management network may be part of a local area network wide area network the Internet or a combination of networks. For example the management network may be comprised of management connections between endpoint computing devices coupled to the network in . The management network may optionally be connected to the user network which provides the communication pathways for exchanging data packets and communications with user applications.

The management network is used by the management mechanisms such as the VSM agent the authorization engine the VMM the VMM manager and the like while the user network is used by the end users of the VMs to access the services provided by the VMs . A VM may be equipped with two or more virtual network interface cards vNICs one configured on the management network and one configured on the user network . Note that may be other vNICs. For example in a server that runs a database the server may have a vNIC configured on a high speed storage network. The management network is not routed to the Internet while the user network usually does route to the Internet such that the VMs services are accessible to clients over the Internet. The management network could be accessible from the Internet but only through virtual private network VPN devices a cloud administrator working from home might need to log into a VM to fix problems for example .

In operation the VSM agent executing inside of the VM either continuously periodically or in response to the occurrence of particular events within the operation or execution of the VM determines the amount of free space currently present in the allocated virtual storage . The periodic implementation of this monitoring may be based on an established schedule the elapse of a particular clock or counter or the like. For example the monitoring may be performed every X milliseconds seconds minutes at a particular time of day or the like. The event based implementation of the monitoring may be in response to a write operation being performed within the VM as a result of executing an application within the VM a predetermined number of write operations being performed a cache miss operation or any other event or operation that may be indicative of an increase in utilization of the allocated virtual storage for example.

The monitoring of the actual amount of virtual storage being used by the VM or that is free may be performed in any suitable manner. In one illustrative embodiment the monitoring of the utilization of the virtual storage by the VM is achieved by periodically polling the partition sizes with native operating system calls tools e.g. fdisk or diskpart. The total of the partition sizes may be compared against the total amount of virtual storage allocated to the VM to determine how much of the virtual storage is allocated to partitions within the VM with the difference between the total of the partition sizes and the total amount of virtual storage allocated to the VM being the amount of free space available within the virtual storage of the VM .

In another illustrative embodiment file system calls made by a virtual file system of the VM may be hooked i.e. have instructions associated with them that cause an interrupt or exception to be thrown which invokes an interrupt or exception handler that determines the amount of virtual storage being used and how much of the virtual storage is free or not used . Of course other methods and mechanisms for determining the amount of used virtual storage and or the amount of free or unused virtual storage may be used without departing from the spirit and scope of the illustrative embodiments.

Having determined the amount of used free virtual storage the amount of used free virtual storage may be compared against one or more pre defined threshold values to determine if a request for expansion increase in the virtual storage should be automatically generated. For example a predetermined threshold may specify an amount of free space where if the actual measured amount of free virtual storage equals or falls below this threshold value a request for an expansion increase in allocated virtual storage may be automatically generated. In another illustrative embodiment the predetermined threshold may specify an amount of used virtual storage where if the actual measured amount of used virtual storage meets or exceeds this threshold value then a request for an expansion increase in allocated virtual storage may be automatically generated.

For example the predetermined threshold value may be 10 free space such that if the actual measured amount of free space in the virtual storage of the VM is equal to or less than 10 then a request for expansion increase in the virtual storage may be automatically generated and sent to the VMM . Alternatively the predetermined threshold value may be 90 such that if the actual measured amount of used space in the virtual storage of the VM is equal to or greater than 90 then a request for expansion increase in the virtual storage may be automatically generated and sent to the VMM . Of course a combination of thresholds may be used and in embodiments where more detailed information about the manner in which the virtual storage is being used thresholds associated with the various amounts of virtual storage used in various ways may be utilized. For example if a first portion of virtual storage is used to store code and a second portion of the virtual storage is used to store client data various thresholds could be associated with these types of usage and used in a combined manner to determine whether an expansion or increase of the virtual storage is to be requested.

The VMM may forward the expansion increase request or may generate a separate expansion increase request to the authorization engine for evaluation. The expansion increase request may specify the particular VM requesting the expansion increase an identity of a client application or user associated with the VM and or other information that may be the basis for an evaluation as to whether the expansion increase request should be granted or denied. In one illustrative embodiment the expansion increase request contains the unique identifier of the VM . Based on this unique identifier the authorization engine may correlate the unique identifier with a user or tenant if in a multi tenant environment that owns the VM based on a data structure that stores information about the user tenant and the associated unique identifier. The user tenant has been configured to use up to a given quota of storage with this storage quota value being stored as part of the user tenant information. Thus one rule for allowing denying the expansion increase request is to check whether the user tenant would be exceeding the storage quota value if the expansion increase request were authorized if so then the request may be denied otherwise the request may be authorized. This storage quota value may be a quota of physical storage of the datastore backing the virtual machine and providing the physical storage with which the virtual storage is associated.

The amount of storage of an expansion increase request may be a fixed configuration parameter of the system. Alternatively the VSM agent may implement an algorithm that determines the amount of storage expansion increase that is to be requested and this value may be included in the expansion increase request based on previous requests e.g. start asking for a relatively small amount of storage expansion increase and then increase the requested amount based on how frequently the virtual storage or virtual disk is detected as becoming full. Of course other rules and criteria for determining whether to grant deny an expansion increase request may be used without departing from the spirit and scope of the illustrative embodiments.

The determination as to whether to grant or deny the expansion increase request may be performed automatically or semi automatically. In an automatic implementation of the authorization engine one or more pre defined rules may be applied against the information received in the expansion increase request and or management information maintained by the VMMs and or VMM manager to determine if conditions of the one or more rules are met. If the conditions of the one or more rules are met then the corresponding action to either grant deny the expansion increase request is performed. For example the simple rule may be to check the current allocated amount of virtual storage relative to a maximum allowed virtual storage for the particular user client application or service associated with the requesting VM . In a multi tenant environment where multiple different users make use of VMs that are backed by the same physical resources or a service provider sells services to various customers where each customer gets his her own VM the rules that are applied may first ensure that the particular user customer has not yet consumed their virtual storage quota assigned to him her before allowing an expansion increase in the virtual storage for the user customer s VM.

In a semi automatic embodiment for example an escalation process may be initiated that requires human approval for each escalation or at least a subset of the escalations of the size of the allocated virtual storage . That is the authorization engine may generate an initial recommendation for whether the expansion increase request should be granted or denied and this recommendation may be sent to a human user for approval. If the human user approves the recommendation then the corresponding action e.g. grant deny the expansion increase request is performed. In some illustrative embodiments the first escalation and possibly one or more additional escalations may be performed automatically with subsequent escalations in the size of the allocated virtual storage may require human approval.

It should be appreciated that these are only examples of ways in which to determine whether to grant or deny a request to expand increase the virtual storage assigned to a VM . Other mechanisms for determining whether to grant deny an expansion increase request may be used without departing from the spirit and scope of the illustrative embodiments.

If the authorization engine determines to deny the expansion increase request a response is sent back to the VMM which forwards the response to the VSM agent thereby notifying the agent of the denial and informing the agent to no longer generate automated expansion increase requests. This denial may be communicated to the user client application or service with which the VM is associated via the guest OS of the VM so that actions can be taken to accommodate the need for additional virtual storage . For example a message may be output to a user an administrator or the like so that they may evaluate whether to enter into an arrangement for obtaining additional virtual storage e.g. agreeing to pay additional fees to a provider of the server computing system and or storage system to obtain additional storage space.

If the authorization engine determines to grant the expansion increase request the authorization engine may return a response to the VMM associated with the requesting VM or the VMM manager that manages the VMM requesting that the VMM or VMM manager increase the size of the virtual storage associated with the VM . Once the size of the virtual storage has been expanded increased by the VMM and or VMM manager the information regarding the expanded increased virtual storage may be communicated to the VSM agent executing within the VM . The VSM agent may then interact with the guest OS of the VM to have the guest OS increase the size of partitions hosted by the virtual storage . For example a guest OS command or API may be used to increase the size of the partitions hosted by the virtual storage e.g. a diskpart command in the Microsoft Windows operating system may be used in one illustrative embodiment.

This method works successfully also in the case where there is no direct connectivity between the network hosting the VM and the network hosting the authorization component e.g. in a case where the VM does not have a vNIC configured on the management network or for security reasons the VSM agent is not provided with connectivity to the management network . In such a scenario an additional component may be used e.g. an agent running in the hypervisor. The agent running in the guest OS can use some VM to host communication mechanism like setting properties on the VM that can be read from the hypervisor to communicate the disk shortage to the agent running in the hypervisor. This second agent can communicate with the authorization component and start the authorization process in case of success or failure it can communicate back the outcome to the agent running the guest OS.

Thus the illustrative embodiments provide mechanisms for automatically adjusting the storage allocated to virtual machines using monitoring mechanisms within the virtual machines themselves. Thus the illustrative embodiments are concerned with the storage status from within the virtual machine not the status as viewed from outside the virtual machine. While other mechanisms are concerned with expanding a virtual machine s use of storage to an already allocated maximum amount of storage allowed to the virtual machine the illustrative embodiments allow for an expansion or increase in the amount of storage allocated to the virtual machine thereby expanding or increasing the maximum storage allocated to the virtual machine to thereby exceed the storage past its previous maximum.

In addition the illustrative embodiments may expand or increase the storage allocated to a virtual machine while the virtual machine is operating. That is the need for more storage is detected in advance by the virtual storage management agent executing in the virtual machine and monitoring the virtual storage of the virtual machine. After authorization for the expansion of the virtual storage is received in response to a request sent by the agent the agent itself may perform the expansion of the virtual storage and make it visible to the guest OS of the virtual machine. Thus there is no interruption of service of the virtual machine. This is especially important for virtual machines running server applications that provide services to client computing devices twenty four hours a day seven days a week. The automatic storage adjustment mechanisms operate even in the case of network segregation where there is no direct network connectivity between the virtual machine and the management network hosting the virtual machine manager and other management components.

As shown in the operation starts by determining a current amount of used and or free space in the virtual storage of the virtual machine step . As mentioned above there are many ways that this may be accomplished such as by using native operating system calls tools to poll the operating system for the current storage usage hooking file system calls or the like. The actual used and or free space values are compared against one or more thresholds step . A determination is made as to whether results of the comparison indicate that an expansion increase request should be transmitted step . If not then the operation terminates. If so then an expansion increase request is sent to the virtual machine manager which forwards the virtual machine manager to an authorization engine step .

The authorization engine evaluates the expansion increase request against a set of one or more rules to determine whether to grant or deny the expansion increase request and returns a response to the virtual machine manager step . The virtual machine manager returns the response to the virtual storage management agent which determines whether the response is a grant or denial of the request step . If the response is a denial then the agent configures itself to no longer send expansion increase requests and sends a message to a user administrator of the need for an expansion increase in the virtual storage associated with the virtual machine step . As noted above the user administrator may take actions to authorize the expansion increase of the virtual storage such as by paying a fee or the like.

If the response is a grant of the request then the agent initiates the expansion increase in the virtual storage of the virtual machine by instructing the virtual machine manager to expand increase the virtual storage step . Once the virtual storage has been increased by the virtual machine manager the agent instructs the guest operating system to modify the partition sizes within the virtual file system to make use of the expanded increased virtual storage step . The operation then terminates.

As noted above it should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In one example embodiment the mechanisms of the illustrative embodiments are implemented in software or program code which includes but is not limited to firmware resident software microcode etc.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

