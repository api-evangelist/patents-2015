---

title: Message transmission for distributed computing systems
abstract: A message from a source computer that includes message information indicating a destination target computer system to receive the message, is received. The received message in a storage component, is stored. An entry to a virtual queue for the received message, wherein the entry in the virtual queue points to a memory address of the received message that is stored in the message component, is created. Responsive to determining that the destination target computer system is available, the received message to a physical queue component and assigning an expiration condition to the received message is enqueued. The enqueued message to the destination target computer system is transmitted. Responsive to determining that the expiration condition for the received message is met, the received message from the physical queue is removed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09509641&OS=09509641&RS=09509641
owner: International Business Machines Corporation
number: 09509641
owner_city: Armonk
owner_country: US
publication_date: 20151214
---
The present invention relates generally to the field of transmitting messages for distributed computing system and more particularly to message queueing in middleware computing systems that are implemented in unreliable networks such as a mobile network or an Internet of Things IoT network.

Embodiments of the present invention disclose a method a computer system and computer program products. A message from a source computer that includes message information indicating a destination target computer system to receive the message is received. The received message in a storage component is stored. An entry to a virtual queue for the received message wherein the entry in the virtual queue points to a memory address of the received message that is stored in the message component is created. Responsive to determining that the destination target computer system is available the received message to a physical queue component and assigning an expiration condition to the received message is enqueued. The enqueued message to the destination target computer system is transmitted. Responsive to determining that the expiration condition for the received message is met the received message from the physical queue is removed.

A number of computer systems can be connected to a network such as a mobile network to exchange messages. One measure of reliability may be the ability of the network to guarantee delivery of data between computer systems connected to the network and to not accumulate messages that are in transit. A network may become less reliable based on an increasing number of the computer systems connected to the network and varying behaviors of the users of the computer systems resulting in message accumulation and blocking transportation of messages that are in transit. For example in a server push based communication service where a request for a given transaction such as transmission of a message is initiated by a publisher or server computer system messages that are in transit may be accumulated at a rapid rate and affect message transportation if a large number of target computer systems identified to receive the messages are not connected to the network or are unavailable.

Message oriented Middleware MoM is a software or hardware infrastructure that supports sending and receiving messages between computer systems that are connected to a network in a distributed computing environment. An MoM computer system can be implemented in a distributed computing environment to provide a communications layer which manages network interfaces network protocols operating systems and other functions of heterogeneous computer systems of the distributed computing environment. Typically the physical queue component of an MoM computer system handles queueing and transportation of messages to target computer systems identified to receive the messages of the distributed computing environment. The physical queue component of an MoM computer system can accumulate messages and in some instances messages in the queue may not successfully send to target computer systems identified to receive the messages. For example a source computer system such as a publisher or a server computer system in a server push based communication service can initiate transmission of a message to a number of target computer systems over a network in a distributed computing environment. The source computer system can send the message to an MoM computer system that queues the message in a physical queue component and is transmitted once one or more of the number of target computer systems are connected to the network or are available.

A virtual queue process engine can be implemented in an MoM computer system to reduce potential message accumulation in a physical queue component of the MoM computer system. One virtual queue in the virtual queue process engine may be associated with one target computer system of the distributed computing environment. Storage media for the virtual queue process engine can be used by each virtual queue to store messages in a message database. Messages can be transported bi directionally between the storage media based on various conditions and properties of the messages. After the MoM computer system determines that a message is ready to be transmitted to a target computer system that is identified to receive the message then the message can be queued to the physical queue component of the MoM computer system such that the physical queue component can transmit the message to the respective target computer system.

Embodiments of the present invention provide systems methods and computer program products for transporting messages in distributed computing environments that are deployed in an unreliable network. Embodiments of the present invention manage expiration conditions for messages to reduce message accumulation in middleware computer systems that are implemented in distributed computing environments.

In this embodiment communication channels are presented in which represent interactions between components of distributed computing environment such as receiving handling and transmitting a message. It should be understood that communication channels and are conditional communication channels and may occur in certain embodiments of the present invention.

Source computer system represents a platform that sends messages to target computer system that is connected to a network. In this embodiment source computer system includes an application programming interface API that is used to communicate with middleware computer system as described in greater detail below. For example the API of source computer system can issue a command to enqueue a message to be handled by middleware computer system and components therein. In this embodiment a message transmitted from source computer system to virtual queue process engine communication channel of middleware computer system .

Target computer system represents a platform that receives messages originating from source computer system . In this embodiment target computer system includes an API used to communicate with middleware computer system as described in greater detail below. For example the API of target computer system can issue a command to dequeue a message handled by middleware computer system and components therein. In this embodiment if target computer system is connected to a network and available to receive a message then target computer system is considered available. For example if network resources computational resources and or storage resources for target computer system are not be available then target computer system cannot receive a message until target computer system is available. In one embodiment target computer system can transmit a confirmation receipt to components of middleware computer system indicating that a message delivered from middleware computer system and components therein has been successfully received by target computer system .

Middleware computer system represents a platform that supports sending and receiving of messages between target computer system and source computer system . In this embodiment middleware computer system includes virtual queue process engine and physical queue component . Middleware computer system can be part of an MoM computer system that manages transportation of messages asynchronously. Middleware computer system can provide an asynchronous message delivery service such that source computer system and target computer system do not need to connect to a network at a same time.

Virtual queue process engine is logic or a module of middleware computer system that performs message handling. Virtual queue process engine operates generally to create a virtual queue such as virtual queue for each target computer system that is available. Virtual queue represents a data structure that may include an initialized data structure such as a struct along with pointers that point to memory addresses of message storage that contain received messages and message information. For example once target computer system becomes available virtual queue process engine may enqueue a message to virtual queue communication channel . As messages are received by middleware computer system virtual queue process engine manages bi directional movement of received messages between physical queue component and virtual queue communication channels and manages a message expiration process communication channels and and manages movement of received messages between hot zone and cold zone communication channels and . An expiration process may involve determining whether a message enqueued in physical queue component meets an expiration condition. For example the expiration condition can be calculated by determining whether a time out value is exceeded by a time difference between when a message is first enqueued in physical queue component and when a confirmation is received by virtual queue process engine indicating that target computer system received the message. If the calculated time difference for the message exceeds the specified time out value then the message enqueued in physical queue component is expired. An expiration condition is implemented to ensure that messages which have been enqueued in physical queue component at an earlier time e.g. old messages are not consuming additional computational network storage and or resources provided by physical queue component which may result in message accumulation in physical queue component .

Physical queue component represents another data structure that is used by middleware computer system to dispatch messages which are identified for delivery to target computer system as described in greater detail below. In one embodiment virtual queue process engine can transmit messages which are identified for delivery from virtual queue to physical queue component based on various conditions communication channel . For example one of the conditions may involve determining an accumulation status of messages or a message expiration status as described in greater detail below. In certain embodiments a message can expire in physical queue component which results in virtual queue process engine to perform message handling to dequeuing the message from physical queue component and enqueuing the message to virtual queue communication channel . Accordingly once target computer system is available and a received message is enqueued in physical queue component middleware computer system can successfully dispatch the message to an intended recipient such as target computer system communication channel .

Message storage includes two storage media hot zone and cold zone . Message storage can include one or more data structures such as message tables containing messages received by middleware computer system and message information for the received messages. As previously discussed virtual queue process engine can use virtual queue to reference information stored in message storage during message handling via pointers.

Hot zone represents a storage medium such as a high speed read write storage medium. In this embodiment virtual queue process engine stores received messages in hot zone based on parameters of the messages such as a size of the message an idle time of the message and speed of consumption of the message. For example virtual queue process engine can store messages in hot zone by default and move the received message from hot zone to cold zone if the received message is stored in hot zone longer than a specified time duration. In certain embodiments hot zone may reach a memory threshold where subsequent messages received by virtual queue process engine cannot be stored in hot zone because of a sufficient number of storage resources are not available in hot zone . Commands can be issued by API s of source computer system and target computer system such that messages can be retrieved from or stored to hot zone or cold zone .

Cold zone represents a storage medium such as a persistent disk storage medium that can be part of a storage repository for virtual queue process engine . In this embodiment virtual queue process engine designates messages to be stored in cold zone based on parameters of the messages as previously described. In this embodiment virtual queue process engine prioritizes storing messages in hot zone rather cold zone which can reduce a time duration associated with a processing time of middleware computer system for handling the designated messages. In certain embodiments API s of source computer system and target computer system can issue a command such as GET call to retrieve a message stored in cold zone . Virtual queue process engine permanently stores the message in cold zone communication channel before enqueuing the message to physical queue component communication channel . In certain embodiments a memory threshold of hot zone is reached and virtual queue process engine can only store the message in cold zone . In this instance prior to queueing the message to virtual queue virtual queue process engine may move a storage location for the message from cold zone to hot zone communication channel once a sufficient number of storage resources are available for hot zone . Accordingly virtual queue process engine manages a bi directional movement of a message between hot zone and cold zone .

Virtual queue process engine receives a message from source computer system step . Virtual queue process engine then stores the received message in message storage and manages bi directional movement of the received message between hot zone and cold zone step . In this embodiment once virtual queue process engine stores the received message in message storage virtual queue maintain entries for enqueued messages that point to memory addresses of messages stored in message storage . As previously described each target computer system that is designated to receive the message originating from source computer system is associated with a unique virtual queue . Virtual queue process engine determines whether target computer system becomes available decision . For example target computer system may notify virtual queue process engine when target computer system is available. If virtual queue process engine determines that target computer system is not available no branch decision then virtual queue process engine keeps the received message in virtual queue step . For example virtual queue process engine may keep the received message in virtual queue until target computer system becomes available.

If virtual queue process engine determines that target computer system is available yes branch decision then virtual queue process engine enqueues the message in physical queue component and assigns an expiration condition to the enqueued message step . As previously described the expiration condition can calculated by determining whether a time out value is exceeded by a time difference between when a message is first enqueued in physical queue component and when a confirmation is received by virtual queue process engine indicating that target computer system received the message. Virtual queue process engine determines whether the enqueued message is expired decision . If virtual queue process engine determines that the enqueued message is not expired no branch decision then virtual queue process engine notifies middleware computer system and components therein to send the enqueued message from physical queue component to target computer system step . In this embodiment virtual queue process engine receives a confirmation from target computer system indicating that the message sent from physical queue component has been successfully received by target computer system . In this instance virtual queue process engine can remove the message from physical queue component responsive to virtual queue process engine receiving the confirmation step . If a confirmation is not received by virtual queue process engine then if virtual queue process engine determines that the enqueued message is expired yes branch decision then virtual queue process engine removes the expired message from physical queue component step . In this embodiment virtual queue process engine maintains pointers for expired message in virtual queue that point to the expired message stored in message storage . If a confirmation is received by virtual queue process engine then the entry for the successfully transmitted message that is maintained by virtual queue is removed.

Computer system includes communications fabric which provides for communications between one or more processors memory persistent storage communications unit and one or more input output I O interfaces . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are computer readable storage media. In this embodiment memory includes random access memory RAM and cache memory . In general memory can include any suitable volatile or non volatile computer readable storage media. Software is stored in persistent storage for execution and or access by one or more of the respective processors via one or more memories of memory .

Persistent storage may include for example a plurality of magnetic hard disk drives. Alternatively or in addition to magnetic hard disk drives persistent storage can include one or more solid state hard drives semiconductor storage devices read only memories ROM erasable programmable read only memories EPROM flash memories or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage can also be removable. For example a removable hard drive can be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit provides for communications with other computer systems or devices via a network. In this exemplary embodiment communications unit includes network adapters or interfaces such as a TCP IP adapter cards wireless Wi Fi interface cards or 3G or 4G wireless interface cards or other wired or wireless communication links. The network can comprise for example copper wires optical fibers wireless transmission routers firewalls switches gateway computers and or edge servers. Software and data used to practice embodiments of the present invention can be downloaded through communications unit e.g. via the Internet a local area network or other wide area network . From communications unit the software and data can be loaded onto persistent storage .

One or more I O interfaces allow for input and output of data with other devices that may be connected to computer system . For example I O interface can provide a connection to one or more external devices such as a keyboard computer mouse touch screen virtual keyboard touch pad pointing device or other human interface devices. External devices can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. I O interface also connects to display .

Display provides a mechanism to display data to a user and can be for example a computer monitor. Display can also be an incorporated display and may function as a touch screen such as a built in display of a tablet computer.

Referring now to illustrative cloud computing environment is depicted. As shown cloud computing environment comprises one or more cloud computing nodes with which local computing devices used by cloud consumers such as for example personal digital assistant PDA or cellular telephone A desktop computer B laptop computer C and or automobile computer system N may communicate. Nodes may communicate with one another. They may be grouped not shown physically or virtually in one or more networks such as Private Community Public or Hybrid clouds as described hereinabove or a combination thereof. This allows cloud computing environment to offer infrastructure platforms and or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices A N shown in are intended to be illustrative only and that cloud computing nodes and cloud computing environment can communicate with any type of computerized device over any type of network and or network addressable connection e.g. using a web browser .

Referring now to a set of functional abstraction layers provided by cloud computing environment is shown. It should be understood in advance that the components layers and functions shown in are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted the following layers and corresponding functions are provided 

Hardware and software layer includes hardware and software components. Examples of hardware components include mainframes RISC Reduced Instruction Set Computer architecture based servers servers blade servers storage devices and networks and networking components . In some embodiments software components include network application server software and database software .

Virtualization layer provides an abstraction layer from which the following examples of virtual entities may be provided virtual servers virtual storage virtual networks including virtual private networks virtual applications and operating systems and virtual clients .

In one example management layer may provide the functions described below. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing provide cost tracking as resources are utilized within the cloud computing environment and billing or invoicing for consumption of these resources. In one example these resources may comprise application software licenses. Security provides identity verification for cloud consumers and tasks as well as protection for data and other resources. User portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement SLA planning and fulfillment provide pre arrangement for and procurement of cloud computing resources for which a future requirement is anticipated in accordance with an SLA.

Workloads layer provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation software development and lifecycle management virtual classroom education delivery data analytics processing transaction processing and distributed computing environment .

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the Figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

It is understood in advance that although this disclosure includes a detailed description on cloud computing implementation of the teachings recited herein are not limited to a cloud computing environment. Rather embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.

Cloud computing is a model of service delivery for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks network bandwidth servers processing memory storage applications virtual machines and services that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics at least three service models and at least four deployment models.

On demand self service a cloud consumer can unilaterally provision computing capabilities such as server time and network storage as needed automatically without requiring human interaction with the service s provider.

Broad network access capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms e.g. mobile phones laptops and PDAs .

Resource pooling the provider s computing resources are pooled to serve multiple consumers using a multi tenant model with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction e.g. country state or datacenter .

Rapid elasticity capabilities can be rapidly and elastically provisioned in some cases automatically to quickly scale out and rapidly released to quickly scale in. To the consumer the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.

Measured service cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service e.g. storage processing bandwidth and active user accounts . Resource usage can be monitored controlled and reported providing transparency for both the provider and consumer of the utilized service.

Software as a Service SaaS the capability provided to the consumer is to use the provider s applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser e.g. web based e mail . The consumer does not manage or control the underlying cloud infrastructure including network servers operating systems storage or even individual application capabilities with the possible exception of limited user specific application configuration settings.

Platform as a Service PaaS the capability provided to the consumer is to deploy onto the cloud infrastructure consumer created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks servers operating systems or storage but has control over the deployed applications and possibly application hosting environment configurations.

Infrastructure as a Service IaaS the capability provided to the consumer is to provision processing storage networks and other fundamental computing resources where the consumer is able to deploy and run arbitrary software which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems storage deployed applications and possibly limited control of select networking components e.g. host firewalls .

Private cloud the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on premises or off premises.

Community cloud the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns e.g. mission security requirements policy and compliance considerations . It may be managed by the organizations or a third party and may exist on premises or off premises.

Public cloud the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.

Hybrid cloud the cloud infrastructure is a composition of two or more clouds private community or public that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability e.g. cloud bursting for load balancing between clouds . A cloud computing environment is service oriented with a focus on statelessness low coupling modularity and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The terminology used herein was chosen to best explain the principles of the embodiment the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

