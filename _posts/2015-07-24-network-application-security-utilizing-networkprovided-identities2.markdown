---

title: Network application security utilizing network-provided identities
abstract: A network security system receives a request from a user over a network to access a network application. The system verifies user credentials for the user. The user credentials include a user identifier and specify a social network. The user is redirected to the social network for authentication. The system queries a rule-set database using the user identifier and an integer representation of the social network. The rule-set database includes recommendations as to access determined by a security application based at least in part on a known memory state for the user associated with the user identifier. Then the system blocks access by the user to the network application based on a recommendation in the rule-set database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09565177&OS=09565177&RS=09565177
owner: Zynga Inc.
number: 09565177
owner_city: San Francisco
owner_country: US
publication_date: 20150724
---
This application is a continuation application of co pending U.S. patent application Ser. No. 14 051 366 filed on Oct. 10 2013 which is a continuation of U.S. patent application Ser. No. 12 880 723 filed on Sep. 13 2010 which issued as U.S. Pat. No. 8 590 014 on Nov. 19 2013. Priority is claimed to both of these applications. And the disclosures of both of these applications are incorporated herein by reference.

The present disclosure generally relates to network security and in particular to network security systems that consider authenticated network provided user identities.

An Intrusion Detection System IDS is a device or software application that monitors network and or system activities for malicious activities or policy violations and produces reports to a management station. Intrusion prevention is the process of performing intrusion detection and attempting to stop detected possible incidents. Intrusion detection and prevention systems IDPS are primarily focused on identifying possible incidents logging information about them attempting to stop them and reporting them to security administrators. In addition organizations use IDPSs for other purposes such as identifying problems with security policies documenting existing threats and deterring individuals from violating security policies. IDPSs typically record information related to observed events notify security administrators of important observed events and produce reports. Many IDPSs can also respond to a detected threat by attempting to prevent it from succeeding. They use several response techniques which involve the IDPS stopping the attack itself changing the security environment e.g. reconfiguring a firewall or changing the attack s content.

Users of various network services such as email social networking systems and the like typically maintain accounts with such systems that are keyed to a user identifier. Some of these network service providers such as Yahoo Facebook and Google act as an identity provider to other third party systems. For example OpenID is an open standard that describes how users can be authenticated in a decentralized manner obviating the need for services to provide their own ad hoc systems and allowing users to consolidate their digital identities. The OpenID protocol does not rely on a central authority to authenticate a user s identity. The term OpenID may also refer to an ID as specified in the OpenID standard these IDs take the form of a unique URL and are managed by some OpenID provider that handles authentication. A so called relying party may use the OpenID protocol to authenticate the identity of a user relative to a so called OpenID Provider. Open Authentication OAuth is another standard for transferring and exchanging user credentials. The OAuth endpoints are configured with pre shared keys between one or many providers for example Yahoo Google with the consumer ref Application to be secured . Like OpenID OAuth uses a unique URL to validate the user and grant access between the consumer and provider.

The present invention provides methods apparatuses and systems directed to a network security system that correlates security related events to individual users as identified by a user identifier and an identity provider. The user identifier may be associated in one or more implicit or explicit social networks. Correlating events to users as opposed to remote hosts identified by a network address greatly expands the data that can be gathered associated and correlated thereby improving the ability to develop more sophisticated attack signatures.

These and other features aspects and advantages of the disclosure are described in more detail below in the detailed description and in conjunction with the following figures.

Network application system may maintain a plurality of user accounts in connection with a network application such as a game. The identity of the users associated with the accounts are tied to the identities maintained at one or more identity providers as described in more detail below.

Typically an end user at remote host initiates authentication by presenting a user identifier to network application via a browser or other user agent. Authentication module establishes the OP Endpoint URL that the end user uses for authentication. The authentication module and the identity provider establish an association a shared secret established using Diffie Hellman Key Exchange Rescorla E. Diffie Hellman Key Agreement Method RFC2631 . The identity provider uses an association to sign subsequent messages and the authentication module to verify those messages. The network application redirects the browser of the remote host to the identity provider with an OpenID Authentication request. The identity provider typically authenticates the user by requesting a username and password. Upon successful authentication the identity provider redirects the browser of the remote host back to the network application system with an assertion that the user has been authenticated. This assertion includes a digital signature generated with the shared key. The authentication module of the network application system verifies the information received from the identity provider including verifying the signature by using either the shared key established during the association or by sending a direct request to the identity provider . In one implementation the security framework described below attributes authenticated messages such as HTTP requests to the users identified in the requests in order to correlate security related events to users for enhanced attack analysis and signature generation.

As discussed above either identity provider or another system may provide one or more services that users access using their respective identities to perform various tasks. For example the identity provider may host an email service that allows users to send and receive email to other users. The identity provider may host an instant messaging Voice over IP VoIP or chat service that allow users to interact in real time. The identity provider may also host a web site for shopping and the like or a social networking service. All such services either explicitly or implicitly establish various associations or connections between users. For example a social networking system may maintain a social graph that models explicitly formed connections between users. An email service provider may monitor email addresses or contact databases of users to establish similar social graphs. In addition third party systems may aggregate and analyze data to provide a database of social graph data based on communications between users. As such the user identifiers and their implicit and explicit connections and associations establishes a form of social identity that can be relied on for enhanced security operations described herein.

The OAuth protocol enables delegated access to protected resources. The OAuth protocol was stabilized at version 1.0 in October 2007 and revised in June 2009 Revision A as published at . In the traditional client server authentication model the client uses its credentials to access its resources hosted by the server. With the increasing use of distributed web services and cloud computing third party applications require access to these server hosted resources. OAuth introduces a third role to the traditional client server authentication model the resource owner. In the OAuth model the client which is not the resource owner but is acting on its behalf requests access to resources controlled by the resource owner but hosted by the server. In addition OAuth allows the server to verify not only the resource owner authorization but also the identity of the client making the request. OAuth provides a method for clients to access server resources on behalf of a resource owner such as a different client or an end user . It also provides a process for end users to authorize third party access to their server resources without sharing their credentials typically a username and password pair using user agent redirections. For example a web user resource owner can grant a printing service client access to her private photos stored at a photo sharing service server without sharing her username and password with the printing service. Instead she authenticates directly with the photo sharing service which issues the printing service delegation specific credentials.

In order for the client to access resources it first has to obtain permission from the resource owner. This permission is expressed in the form of a token and matching shared secret. The purpose of the token is to make it unnecessary for the resource owner to share its credentials with the client. Unlike the resource owner credentials tokens can be issued with a restricted scope and limited lifetime and revoked independently. This specification consists of two parts. The first part defines a redirection based user agent process for end users to authorize client access to their resources by authenticating directly with the server and provisioning tokens to the client for use with the authentication method. The second part defines a method for making authenticated HTTP RFC2616 requests using two sets of credentials one identifying the client making the request and a second identifying the resource owner on whose behalf the request is being made.

As illustrates the front end framework may include one or more of the following components Memory IO Handler Allows the Security Layer to intercept the applications I O Plugin Manager Copies and polls all traffic with the Security Plugins and allows real time modification of Memory IO through the Memory IO Handler Backend Observation Observes and synchronizes configuration globally per user or source IP combination using DNS and TXT records and Backend Reporting Encodes signs and or encrypts events created by the plug ins for transmission.

The frontend framework implemented by the stub and plug ins can be created in a pluggable way allowing for several engines to run at the same time. In one implementation the stub and plug ins are a library accessed by network application for various security functions. Each engine or plug in can perform a separate security related task such as checking if the user is a computer versus a real person botter determining whether the user is sending malicious traffic Intrusion Detection or implementing proprietary business logic such as This user has been in this city game for more than 10 hours. For example the plug ins can be configured to detect cross site scripting attacks SQL injection internet bots DoS attacks and other attacks. The plug in engines may filter messages and send messages to the backend framework via API calls. The general API function calls are mapped into the shared component referred to as the dataFormat described as follows 

The backend framework implemented by security application receives UDP Packets from several network applications running the frontend framework. As illustrates the backend framework may include one or more of the following components UDP Event Service Receives UDP Events in the Backend Reporting Format decodes them and inserts them into Storage Storage A generic storage system e.g. SQL Mongo NoSQL system or Memcache Correlation System Polls storage on new events and processes them on an event by event basis Observer System Receives updates from the Correlation system from where it writes zonefiles these files are published to any Web Application for query using TXT records and contain information configured in the correlation engine and Web User Interface Allows for configuration and real time reporting of the correlation system through an AJAX based interface.

The security application may decrypt the packets if encrypted verify the HMAC and insert the data into a message queue. After inserting the data into a temporary message queue all data messages are indexed by the following fields 

Security application may also implement a rule set configuration system. Each chain can trigger an action such as alert e mail block track and log. If the rule set configuration triggers a block security application inserts an entry into the user rule set database recommending block of an endpoint or user by references to a set of attributes such as a specific UserID and Social Network pair Source IP Target IP address pair or Source IP address. The actions are then made available to the front end framework implemented by stub and plug ins as described below.

In one implementation the frontend framework may resolve the identity of the user associated with the HTTP request . This may involve validating the HTTP request such as authenticating any OpenID or other credentials as discussed above to attribute the message to a particular user identifier and identity provider network pair. The frontend framework may also access the user rule set database using various attributes associated with the user. The rule set database may be implemented using the Domain Name System protocol. Other protocols can be used. For example the frontend framework may query rule set database transmitting a DNS request and using the following example format SOCIAL NETWORK.USER ID.METHOD.APPLICATION ID.DOMAIN.COM where SOCIAL NETWORK is an integer representation of a social network or other identity provider e.g. Google Facebook Yahoo Hi5 and so on 

 example query for a social network user with a user identifier of 12345678 dig 1.12345678.uid.test.zynga.com where 1 is the 12345678 is a and uid is a ..test.zynga.com test.zynga.com is the DOMAIN in this case example query for source ip 127.0.0.1 dig 127.0.0.1.srcip.test.zynga.com The user rule set database may return DNS TXT records which the frontend framework may cache for faster access when subsequent HTTP requests are received. The response may include either pass or block indications depending on the status of the user as determined by the security application . The response may be formatted as follows RESPONSE CODE ACTION PAYLOAD DATA. Example Response 1290f049139f930109f01 block uid The foregoing example response informs the network application that the current user has been blocked and that any plugins should observe it. Additional elements like reconfiguration of firewall rule sets can be performed using split base64 encoded queries on multiple global TXT records. The frontend framework may apply the rule actions specified in the response . The response may also include other commands such as alert e mail track and log. A track command may cause the frontend framework to send all received messages associated with the user to security application . A log command may cause the frontend framework to selectively forward messages associated with the user to security application when one or more conditions are met. If the DNS lookup fails the front end framework may apply a default set of operations. In addition as illustrates the plug ins may also process the message to perform various threat detection tasks such as identifying bots SQL injection and other attacks. Still further some of the plug ins may operate to correlate messages or other events at the user level while other plug ins may operative to correlate messages or other events at the IP network address host level. Still further some plug ins may be stateless while others may maintain state information to identify attacks.

In some particular embodiments after the user has been verified and the state DNS TXT Records downloaded the memory and I O is handed over to the Security Plug in section of the Security Layer. Each Security Plug in loops through the request GET POST COOKIE and checks for malicious patterns or inputs. If nothing malicious is detected the control is handed back to the main network application. Detection of a possible malicious event triggers the reporting and notification engine.

Upon a malicious event the system creates a standard data format formatted with the following fields 

This data structure hash is JSON encoded signed and optionally encrypted for then to be sent to a central correlation engine via UDP packets to the reporting and notification backend.

After receiving the events a separate process referred to as The Correlation Engine which is configurable by a Web User Interface allows for multiple chains of rules to be executed on each event. As discussed above the correlation engine can executed various scripts that implement a chain. In one implementation a IF THEN ELSE like business focused language and or statistics focused scripts can be configured. The Correlation Engine allows the implementer of the Security Application to configure Time Expressions when writing an expression the concept of reoccurrence over time can be taken into consideration and

Grouped and Timed Expressions when writing an expression the concept of reoccurrence over time tied to a specific term user or key can be taken into consideration .

 If a user has attacked a network application enterprise more than 10 times today execute this action . . . . 

 If a user has attacked network application enterprise more than 10 times today and he s not playing a game please execute this action . . . . 

 If a user has been determined to be a botter is attacking network application enterprise at 4 PM and is not playing a game please execute this action . . . . 

 If a user has been determined to be a botter and has four friends that are botters please execute this action . . . . 

Particular embodiments may be implemented as hardware software or a combination of hardware and software. For example and without limitation one or more computer systems may execute particular logic or software to perform one or more steps of one or more processes described or illustrated herein. One or more of the computer systems may be unitary or distributed spanning multiple computer systems or multiple datacenters where appropriate. The present disclosure contemplates any suitable computer system. In particular embodiments performing one or more steps of one or more processes described or illustrated herein need not necessarily be limited to one or more particular geographic locations and need not necessarily have temporal limitations. As an example and not by way of limitation one or more computer systems may carry out their functions in real time offline in batch mode otherwise or in a suitable combination of the foregoing where appropriate. One or more of the computer systems may carry out one or more portions of their functions at different times at different locations using different processing where appropriate. Herein reference to logic may encompass software and vice versa where appropriate. Reference to software may encompass one or more computer programs and vice versa where appropriate. Reference to software may encompass data instructions or both and vice versa where appropriate. Similarly reference to data may encompass instructions and vice versa where appropriate.

Particular embodiments may be implemented in a network environment. illustrates an example network environment suitable for providing software validation as a service. Network environment includes a network coupling one or more servers and one or more clients to each other. In particular embodiments network is an intranet an extranet a virtual private network VPN a local area network LAN a wireless LAN WLAN a wide area network WAN a metropolitan area network MAN a portion of the Internet or another network or a combination of two or more such networks . The present disclosure contemplates any suitable network .

One or more links couple a server or a client to network . In particular embodiments one or more links each includes one or more wireline wireless or optical links . In particular embodiments one or more links each includes an intranet an extranet a VPN a LAN a WLAN a WAN a MAN a portion of the Internet or another link or a combination of two or more such links . The present disclosure contemplates any suitable links coupling servers and clients to network .

In particular embodiments each server may be a unitary server or may be a distributed server spanning multiple computers or multiple datacenters. Servers may be of various types such as for example and without limitation web server news server mail server message server advertising server file server application server exchange server database server or proxy server. In particular embodiments each server may include hardware software or embedded logic components or a combination of two or more such components for carrying out the appropriate functionalities implemented or supported by server . For example a web server is generally capable of hosting websites containing web pages or particular elements of web pages. More specifically a web server may host HTML files or other file types or may dynamically create or constitute files upon a request and communicate them to clients in response to HTTP or other requests from clients . A mail server is generally capable of providing electronic mail services to various clients . A database server is generally capable of providing an interface for managing data stored in one or more data stores.

In particular embodiments one or more data storages may be communicatively linked to one or more severs via one or more links . In particular embodiments data storages may be used to store various types of information. In particular embodiments the information stored in data storages may be organized according to specific data structures. In particular embodiment each data storage may be a relational database. Particular embodiments may provide interfaces that enable servers or clients to manage e.g. retrieve modify add or delete the information stored in data storage .

In particular embodiments each client may be an electronic device including hardware software or embedded logic components or a combination of two or more such components and capable of carrying out the appropriate functionalities implemented or supported by client . For example and without limitation a client may be a desktop computer system a notebook computer system a netbook computer system a handheld electronic device or a mobile telephone. The present disclosure contemplates any suitable clients . A client may enable a network user at client to access network . A client may enable its user to communicate with other users at other clients .

In particular embodiments each client may be a computing device such as a desktop computer or a work station or a mobile device such as a notebook computer a network computer or a smart telephone. Each client has network capabilities.

In particular embodiments a client may have a web browser such as MICROSOFT INTERNET EXPLORER GOOGLE CHROME or MOZILLA FIREFOX and may have one or more add ons plug ins or other extensions such as TOOLBAR or YAHOO TOOLBAR. A user at client may enter a Uniform Resource Locator URL or other address directing the web browser to a server and the web browser may generate a Hyper Text Transfer Protocol HTTP request and communicate the HTTP request to server . Server may accept the HTTP request and communicate to client one or more Hyper Text Markup Language HTML files responsive to the HTTP request. Client may render a web page based on the HTML files from server for presentation to the user. The present disclosure contemplates any suitable web page files. As an example and not by way of limitation web pages may render from HTML files Extensible Hyper Text Markup Language XHTML files or Extensible Markup Language XML files according to particular needs. Such pages may also execute scripts such as for example and without limitation those written in JAVASCRIPT JAVA MICROSOFT SILVERLIGHT combinations of markup language and scripts such as AJAX Asynchronous JAVASCRIPT and XML and the like. Herein reference to a web page encompasses one or more corresponding web page files which a browser may use to render the web page and vice versa where appropriate.

Web browser may be adapted for the type of client it resides. For example a web browser residing on a desktop computer may differ e.g. in functionalities from a web browser residing on a mobile device. A user of a social networking system may access the website via web browser .

Particular embodiments may be implemented on one or more computer systems. illustrates an example computer system . In particular embodiments one or more computer systems perform one or more steps of one or more methods described or illustrated herein. In particular embodiments one or more computer systems provide functionality described or illustrated herein. In particular embodiments software running on one or more computer systems performs one or more steps of one or more methods described or illustrated herein or provides functionality described or illustrated herein. Particular embodiments include one or more portions of one or more computer systems .

This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system taking any suitable physical form. As example and not by way of limitation computer system may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. Where appropriate computer system may include one or more computer systems be unitary or distributed span multiple locations span multiple machines or reside in a cloud which may include one or more cloud components in one or more networks. Where appropriate one or more computer systems may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation one or more computer systems may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein where appropriate.

In particular embodiments computer system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.

In particular embodiments processor includes hardware for executing instructions such as those making up a computer program. As an example and not by way of limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . In particular embodiments processor may include one or more internal caches for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal caches where appropriate. As an example and not by way of limitation processor may include one or more instruction caches one or more data caches and one or more translation lookaside buffers TLBs . Instructions in the instruction caches may be copies of instructions in memory or storage and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory or storage for instructions executing at processor to operate on the results of previous instructions executed at processor for access by subsequent instructions executing at processor or for writing to memory or storage or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual address translation for processor . In particular embodiments processor may include one or more internal registers for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data for processor to operate on. As an example and not by way of limitation computer system may load instructions from storage or another source such as for example another computer system to memory . Processor may then load the instructions from memory to an internal register or internal cache. To execute the instructions processor may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . In particular embodiments processor executes only instructions in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere and operates only on data in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. In particular embodiments one or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . In particular embodiments memory includes random access memory RAM . This RAM may be volatile memory where appropriate Where appropriate this RAM may be dynamic RAM DRAM or static RAM SRAM . Moreover where appropriate this RAM may be single ported or multi ported RAM. The present disclosure contemplates any suitable RAM. Memory may include one or more memories where appropriate. Although this disclosure describes and illustrates particular memory this disclosure contemplates any suitable memory.

In particular embodiments storage includes mass storage for data or instructions. As an example and not by way of limitation storage may include an HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. Storage may be internal or external to computer system where appropriate. In particular embodiments storage is non volatile solid state memory. In particular embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. This disclosure contemplates mass storage taking any suitable physical form. Storage may include one or more storage control units facilitating communication between processor and storage where appropriate. Where appropriate storage may include one or more storages . Although this disclosure describes and illustrates particular storage this disclosure contemplates any suitable storage.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more I O devices. Computer system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and computer system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touch screen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. This disclosure contemplates any suitable I O devices and any suitable I O interfaces for them. Where appropriate I O interface may include one or more device or software drivers enabling processor to drive one or more of these I O devices. I O interface may include one or more I O interfaces where appropriate. Although this disclosure describes and illustrates a particular I O interface this disclosure contemplates any suitable I O interface.

In particular embodiments communication interface includes hardware software or both providing one or more interfaces for communication such as for example packet based communication between computer system and one or more other computer systems or one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. As an example and not by way of limitation computer system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example computer system may communicate with a wireless PAN WPAN such as for example a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. Computer system may include any suitable communication interface for any of these networks where appropriate. Communication interface may include one or more communication interfaces where appropriate. Although this disclosure describes and illustrates a particular communication interface this disclosure contemplates any suitable communication interface.

In particular embodiments bus includes hardware software or both coupling components of computer system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCI X bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

Herein reference to a computer readable storage medium encompasses one or more non transitory tangible computer readable storage media possessing structure. As an example and not by way of limitation a computer readable storage medium may include a semiconductor based or other integrated circuit IC such as for example a field programmable gate array FPGA or an application specific IC ASIC a hard disk an HDD a hybrid hard drive HHD an optical disc an optical disc drive ODD a magneto optical disc a magneto optical drive a floppy disk a floppy disk drive FDD magnetic tape a holographic storage medium a solid state drive SSD a RAM drive a SECURE DIGITAL card a SECURE DIGITAL drive or another suitable computer readable storage medium or a combination of two or more of these where appropriate. Herein reference to a computer readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. 101. Herein reference to a computer readable storage medium excludes transitory forms of signal transmission such as a propagating electrical or electromagnetic signal per se to the extent that they are not eligible for patent protection under 35 U.S.C. 101. A computer readable non transitory storage medium may be volatile non volatile or a combination of volatile and non volatile where appropriate.

This disclosure contemplates one or more computer readable storage media implementing any suitable storage. In particular embodiments a computer readable storage medium implements one or more portions of processor such as for example one or more internal registers or caches one or more portions of memory one or more portions of storage or a combination of these where appropriate. In particular embodiments a computer readable storage medium implements RAM or ROM. In particular embodiments a computer readable storage medium implements volatile or persistent memory. In particular embodiments one or more computer readable storage media embody software. Herein reference to software may encompass one or more applications bytecode one or more computer programs one or more executables one or more instructions logic machine code one or more scripts or source code and vice versa where appropriate. In particular embodiments software includes one or more application programming interfaces APIs . This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments software is expressed as source code or object code. In particular embodiments software is expressed in a higher level programming language such as for example C Perl or a suitable extension thereof. In particular embodiments software is expressed in a lower level programming language such as assembly language or machine code . In particular embodiments software is expressed in JAVA. In particular embodiments software is expressed in Hyper Text Markup Language HTML Extensible Markup Language XML or other suitable markup language.

The present disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. For example while the embodiment described above operate in connection with Oauth and OpenID other embodiments of the invention can operate with other identity provider or open authentication protocols such as proprietary versions of OAuth as well as OpenID. In other words implementations of the invention are capable of plugging into a variety of identity provider systems based on shared or open standards and de centralized user authentication global unique user ids . Similarly where appropriate the appended claims encompass all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend.

