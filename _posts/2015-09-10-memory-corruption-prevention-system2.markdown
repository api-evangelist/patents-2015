---

title: Memory corruption prevention system
abstract: In some embodiments, a memory corruption prevention process includes detecting a memory instruction of a program, where the memory instruction specifies a virtual memory address of data. The memory corruption prevention process further includes accessing, in response to the memory instruction, a translation lookaside buffer (TLB) using at least a portion of the virtual memory address. The memory corruption prevention process further includes, in response to accessing the TLB, obtaining a physical memory address corresponding to the virtual memory address, where the physical memory address corresponds to the data. The memory corruption prevention process further includes, in response to accessing the TLB, obtaining an authentication value corresponding to the physical memory address. The memory corruption prevention process further includes determining, using the authentication value, whether the memory instruction is authorized to proceed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09639477&OS=09639477&RS=09639477
owner: Oracle International Corporation
number: 09639477
owner_city: Redwood Shores
owner_country: US
publication_date: 20150910
---
This disclosure relates to computing systems and more particularly to a memory corruption prevention system.

Memory corruption occurs in several ways including when the contents of a memory location are unintentionally modified due to programming errors. For example accessing memory past the end of an array of bytes reserved for a particular data structure may result in memory corruption. In addition memory corruption may occur when contents of a memory location are intentionally modified by a malicious attack. When the corrupted memory contents are used later in the computer program it may lead either to a program crash or to unexpected program behavior. Some programming languages for example C and C include features such as explicit memory management and pointer arithmetic. These features allow development of efficient applications and system software. However when a computer programmer incorrectly or maliciously uses these features memory corruption may occur.

Different types of computer programming languages have different degrees of vulnerability to memory corruption. Consider type safe and type unsafe computer languages. A type safe computer language does not permit a computer programmer to use a value as a data type to which it does not belong. For example a type safe language does not allow conversion of an integer variable to a pointer value. The C programming language on the other hand is one example of a type unsafe language. The C language is considered type unsafe due to use of casting particularly the casting of pointers to a void data type and vice versa. The C programming language is also type unsafe. 

Similarly a computer programming language may be characterized as memory safe when the language allows programs to release a portion of memory only when it is determined the portion of memory is unused for the remainder of the program evaluation. In contrast a programming language that is memory unsafe may cause security vulnerabilities with random access memory RAM access such as buffer overflows and dangling pointers. Programming languages such as C and C that support arbitrary pointer arithmetic casting and deallocation are typically memory unsafe. Some high level programming languages are memory safe due to disallowing pointer arithmetic and casting and by performing memory management techniques such as tracing garbage collection. However programming efficiency may be reduced.

Many malicious attacks reduce system security through memory corruption and may exploit memory unsafe and or type unsafe characteristics of a programming language. For example a type unsafe language may not prevent programming errors such as allowing user input to be used as a pointer value. A malicious attacker may exploit such programming errors to create memory corruption attacks and access various portions of programs or data. Other examples of programming errors include vulnerabilities regarding buffer overflow heap corruption such as heap buffer overflow and double free integer overflow and format strings.

Accordingly memory corruption comes in various forms and has various causes. When such corruption does occur particularly in the application development process it is desirable for a programmer to be able determine the memory access instruction that caused the corruption. But it is even more desirable to limit the number of occurrences of memory corruption in the first instance.

In one embodiment authentication values are utilized as part of execution of a computer program to detect memory corruption e.g. memory access errors where data is improperly read from or stored to an incorrect memory location . In particular in one embodiment during execution of a computer program authentication values are associated with memory locations of a physical memory. In response to a memory instruction a processing circuit may obtain based on a virtual memory address of the memory instruction a physical address of one of the memory locations e.g. using a translation lookaside buffer TLB . Additionally the processing circuit may obtain a corresponding authentication value based on the virtual memory address. For example the processing circuit may receive the physical address of the data and the physical address of the corresponding authentication value from the TLB. The processing circuit may compare the authentication value to an expected authentication value to determine whether the memory instruction is authorized to proceed. Additionally or alternatively the authentication value may indicate whether the memory instruction is authorized to proceed. Accordingly the authentication values may be utilized without the program needing to include software instructions that specifically address the authentication values.

In some cases extra bits may be used to store authentication values. However because such bits are limited in number and may be utilized for other purposes e.g. replacing bits experiencing hardware failures or storing error correction code ECC data in some embodiments other memory locations are used. The other memory locations may collectively be larger than the extra bits. Thus the other memory locations may include more information than the extra bits. In some cases an authentication value stored at the other memory locations may refer to a smaller portion of a memory device as compared to a system where extra bits of a memory device are used to store an authentication value.

These and other embodiments will become apparent upon reference to the following description and accompanying drawings.

While the embodiments disclosed herein are susceptible to various modifications and alternative forms specific embodiments are shown by way of example in the drawings and are described herein in detail. It should be understood however that drawings and detailed description thereto are not intended to limit the scope of the claims to the particular forms disclosed. On the contrary this application is intended to cover all modifications equivalents and alternatives falling within the spirit and scope of the disclosure of the present application as defined by the appended claims.

This disclosure includes references to one embodiment a particular embodiment some embodiments various embodiments or an embodiment. The appearances of the phrases in one embodiment in a particular embodiment in some embodiments in various embodiments or in an embodiment do not necessarily refer to the same embodiment. Particular features structures or characteristics may be combined in any suitable manner consistent with this disclosure.

Within this disclosure different entities which may variously be referred to as units circuits other components etc. may be described or claimed as configured to perform one or more tasks or operations. This formulation entity configured to perform one or more tasks is used herein to refer to structure i.e. something physical such as an electronic circuit . More specifically this formulation is used to indicate that this structure is arranged to perform the one or more tasks during operation. A structure can be said to be configured to perform some task even if the structure is not currently being operated. A translation lookaside buffer configured to store an authentication value address is intended to cover for example an integrated circuit that has circuitry that performs this function during operation even if the integrated circuit in question is not currently being used e.g. a power supply is not connected to it . Thus an entity described or recited as configured to perform some task refers to something physical such as a device circuit memory storing program instructions executable to implement the task etc. This phrase is not used herein to refer to something intangible. Thus the configured to construct is not used herein to refer to a software construct such as an application programming interface API .

The term configured to is not intended to mean configurable to. An unprogrammed FPGA for example would not be considered to be configured to perform some specific function although it may be configurable to perform that function after programming.

Reciting in the appended claims that a structure is configured to perform one or more tasks is expressly intended not to invoke 35 U.S.C. 112 f for that claim element. Accordingly none of the claims in this application as filed are intended to be interpreted as having means plus function elements. Should Applicant wish to invoke Section 112 f during prosecution it will recite claim elements using the means for performing a function construct.

As used herein the term based on is used to describe one or more factors that affect a determination. This term does not foreclose the possibility that additional factors may affect the determination. That is a determination may be solely based on specified factors or based on the specified factors as well as other unspecified factors. Consider the phrase determine A based on B. This phrase specifies that B is a factor that is used to determine A or that affects the determination of A. This phrase does not foreclose that the determination of A may also be based on some other factor such as C. This phrase is also intended to cover an embodiment in which A is determined based solely on B. As used herein the phrase based on is synonymous with the phrase based at least in part on. 

As used herein the phrase in response to describes one or more factors that trigger an effect. This phrase does not foreclose the possibility that additional factors may affect or otherwise trigger the effect. That is an effect may be solely in response to those factors or may be in response to the specified factors as well as other unspecified factors. Consider the phrase perform A in response to B. This phrase specifies that B is a factor that triggers the performance of A. This phrase does not foreclose that performing A may also be in response to some other factor such as C. This phrase is also intended to cover an embodiment in which A is performed solely in response to B.

As used herein the terms first second etc. are used as labels for nouns that they precede and do not imply any type of ordering e.g. spatial temporal logical etc. unless stated otherwise. For example in a processor having eight processing elements or cores the terms first processing element and second processing element can be used to refer to any two of the eight processing elements and not for example just logical processing elements 0 and 1.

In the following description numerous specific details are set forth to provide a thorough understanding of the disclosed embodiments. One having ordinary skill in the art however should recognize that aspects of disclosed embodiments might be practiced without these specific details. In some instances well known circuits structures signals computer program instruction and techniques have not been shown in detail to avoid obscuring the disclosed embodiments.

A corruption prevention system is disclosed that may detect memory corruption such as memory access errors in which data is improperly read from or stored to an incorrect memory location. In one embodiment the corruption prevention system uses authentication values e.g. color data or other program data to determine whether a memory instruction is authorized to proceed. These authentication values may be stored at a memory device and in some cases additionally stored as part of a physical address of corresponding data e.g. at a translation lookaside buffer TLB .

As used herein memory corruption is used in a broad sense and may take various forms and result from many different causes including bad pointers buffer overruns malicious attacks etc.

The authentication values may include different information in different embodiments. In particular in some embodiments the authentication values may include color data which when differing from expected color data may indicate that a memory access error is occurring. Accordingly in some embodiments a processing circuit e.g. a circuit including a load store circuit a memory management unit MMU and or another circuit is configured to determine based on comparing an authentication value to an expected authentication value whether a memory access error is occurring and thus whether a memory instruction is authorized to proceed. In some embodiments the authentication values include information that indicates that a memory access error is occurring such as information that indicates whether the memory location has been previously written by a program prior to a read operation from the program. Accordingly in some embodiments the processing circuit is configured to determine based on the content of the authentication value alone whether the memory instruction is authorized to proceed. In some embodiments the authentication value includes both color data and content that alone can be used to determine whether a memory instruction is authorized to proceed. In such embodiments a memory access error may be detected if the color data does not match the expected color data if the authentication value indicates a memory access error or both.

As used herein color data refers to a numerical sequence of data having a particular pattern. For example one piece of color data may be the sequence 0110 . Another piece of color data may be the sequence 1110 . Because 0110 and 1110 are different sequences the two pieces of color data have different color values and thus do not match. Although these examples refer to four bit color data color data may refer to a sequence having any length e.g. a piece of color data may be the sequence 110011 .

In various embodiments authentication values can correspond to different portions of the memory device. For example in one embodiment the authentication value corresponds to only a portion e.g. one eighth of a cache line of the memory device. In another embodiment the authentication value corresponds to a full cache line or to multiple cache lines.

Embodiments of the system described herein may store additional data as compared to a system that stores authentication values in a fixed set of extra bits in a memory cache. Additionally in embodiments in which the TLB is used to determine the authentication value a program may not need to include additional software resources e.g. additional instructions to utilize the corruption prevention system. Further because the corruption prevention system utilizes hardware configured to process the memory instruction detecting a potential memory corruption error may occur more quickly as compared to a corruption detection system that is solely software based.

This disclosure initially describes with reference to functions of various portions of an embodiment of a corruption prevention system and then describes various actions taken by the embodiment of the corruption prevention system in response to exemplary memory instruction. Example portions of one embodiment of the corruption prevention system are described with reference to . Example processes performed by one embodiment of the exemplary corruption prevention system in response to various types of memory instructions are described with reference to . The techniques and structures described herein however are in no way limited to the one or more corruption prevention systems shown in rather this context is provided only as one or more possible implementations. A method performed by an embodiment of a corruption prevention system is described with reference to . Finally an exemplary computing system that includes a corruption prevention system is described with reference to .

Turning now to a block diagram of one embodiment of an exemplary corruption prevention system is shown. In the illustrated embodiment corruption prevention system includes processing circuit TLB and memory device . Processing circuit includes control logic and comparator . Memory device includes location and authentication value for location .

At a high level corruption prevention system protects against memory corruption from a memory instruction by referring to an authentication value which can be used to identify a memory access that may result in memory corruption. The authentication value may include several pieces of data. First in some embodiments the authentication value may include information color data in some embodiments which may be compared to information from an expected authentication value expected color data to detect a memory access error. If the color data differs from the expected color data corruption prevention system may determine that a memory access error e.g. a program is attempting to access a storage location not associated with the program is occurring. Second in some embodiments the authentication value may include information other program data in some embodiments which by itself may indicate a memory access error is occurring. For example the authentication value may indicate that a program is attempting to read a memory location prior to writing a value to that memory location. In some embodiments the authentication value may include both color data and other program data. In response to detecting an error corruption prevention system may prevent the memory access from proceeding. Alternatively if no error is detected corruption prevention system may allow a memory instruction to proceed which may lead to the memory instruction completing.

When memory is requested e.g. by a program running on system memory is allocated to store the data e.g. location and the authentication value e.g. authentication value for the data. Additionally an entry in TLB stores the expected authentication value in one embodiment as part of data address as well as a pointer to the actual authentication value e.g. authentication value address . Accordingly in one embodiment when that memory location is subsequently accessed by memory instruction TLB request will result in TLB response that includes the expected authentication value and a pointer to authentication value . Authentication value request may then occur which uses a pointer e.g. authentication value address to the actual authentication value to access actual authentication value . The actual authentication value is returned as part of authentication value response . Comparator in one embodiment is configured to compare authentication value with the expected authentication value from TLB . Comparator in one embodiment is configured to determine whether authentication value indicates a memory access error. Corruption prevention system in one embodiment is configured to allow memory instruction to proceed only if the result of this comparison represents a match between authentication value and the expected authentication value from TLB and if authentication value does not indicate a memory access error. Processing circuit is thus configured to send a result of the memory instruction or an error message to a processor pipeline in response to memory instruction .

In some embodiments processing circuit includes a load store unit a memory management unit MMU or any combination thereof. Control logic is configured to determine what data to send to the various portions of corruption prevention system . Comparator is configured to determine whether memory instruction is authorized to proceed.

In some embodiments TLB is configured to store at least portions of virtual addresses e.g. tags and may further store at least portions of corresponding physical addresses e.g. data address which may specify an entire physical address or a portion thereof . In some embodiments TLB is additionally configured to store at least a portion of a corresponding authentication value address e.g. authentication value address . Accordingly in some cases in response to receiving TLB request which includes at least a portion of virtual address TLB is configured to provide TLB response that includes at least a portion of a corresponding physical address e.g. data address at least a portion of a corresponding authentication value address e.g. authentication value address or both. Alternatively in some embodiments TLB is configured to store authentication values and in response to a TLB request TLB is configured to return a corresponding authentication value. In this manner authentication values may be utilized in corruption prevention system without memory instruction having to specify such authentication values e.g. as an operand .

In some embodiments memory device as further described below with reference to is configured to store data at particular storage locations and is further configured to store corresponding authentication values. For example in the illustrated embodiment memory device includes location which stores data and also includes authentication value which can be used to determine whether a memory instruction e.g. memory instruction that addresses location is authorized to proceed. In some embodiments memory device may be a cache device. In these embodiments memory device may include groups of one or more extra bits associated with respective cache lines. In the illustrated embodiment portions of memory device other than the extra bits are used to store authentication values e.g. authentication value . Accordingly the extra bits may be utilized for purposes other than memory authorization e.g. storing ECC data storing data instead of memory locations that are experiencing one or more hardware failures etc. . Additionally the memory locations used to store authentication values for a particular cache line may collectively be larger than memory locations for a particular group of one or more extra bits associated with the particular cache line. Accordingly in some cases additional authentication data may be stored regarding the particular cache line and in some cases the authentication data may correspond to portions of a cache line instead of an entire cache line . Although in the illustrated embodiment location and authentication value are both located in memory device in other embodiments authentication value may be stored at another device e.g. TLB or another memory device .

As used herein the phrase extra bits refers to a set of bits in a memory device that are not ordinarily used to store addressable data. For example extra bits may refer to spare bits of a cache line which are used if a bit in the cache line experiences a hard error such as a hardware failure.

In some embodiments TLB may include more storage space for physical addresses than is needed for memory device . At least some of this additional storage space in a particular entry of TLB may be used to store an expected authentication value e.g. expected color data corresponding to data stored at a location addressed by the physical address at that entry. For example suppose memory device includes 2bits and is bit addressable such that all bits may be individually addressed by respective permutations of a 60 bit address. Further suppose that TLB has sufficiently capacity to store a 64 bit address. In this example the remaining four bits in each entry may be used to store an expected authentication value such as expected color data.

In embodiments in which TLB devotes more storage space to physical addresses than is needed to address memory device an authentication value generation algorithm e.g. a library file that can be used by multiple programs may be called to generate an authentication value in response to a memory allocation request by a program. In some embodiments the authentication value may include an expected authentication value such as expected color data. Accordingly in those embodiments the authentication value generation algorithm is or includes a coloring algorithm. A coloring algorithm may operate by pseudo randomly generating expected color data. Alternatively a coloring algorithm may operate by generating color data for memory locations such that logically adjacent data objects do not have the same color. In some embodiments the authentication value generation algorithm may include in the authentication value data that indicates that the associated location has not been written to.

As used herein logically adjacent data objects refer to data objects that do not have intervening physical addresses. For example a one byte data object located at physical address is logically adjacent to a four bit data object located at physical address and further logically adjacent to a two byte data object located at physical address .

In some embodiments in response to a memory allocation request by a program the authentication value generation algorithm performs a modified allocation process. In response to the memory allocation request a memory location is allocated and an initial physical memory address corresponding to the memory location is generated. Additionally a memory location configured to store an authentication value corresponding to the memory location is allocated. The authentication value generated by the authentication value generation algorithm may be stored at the associated allocated memory location. In embodiments in which TLB devotes more storage space to physical addresses than is needed to address memory device the initial physical memory address may be modified to include the expected authentication value e.g. expected color data . For example processing circuit may be configured to treat the four most significant bits of a physical memory address e.g. data address as expected color data. Accordingly the authentication value generator algorithm may generate an authentication value and overwrite the four most significant bits of the initial physical memory address with the authentication value. Alternatively the authentication value generator algorithm may concatenate the authentication value onto the initial physical memory address or otherwise modify the initial physical memory address such that the authentication value is the four most significant bits of a resulting physical memory address . The resulting physical memory address the corresponding virtual memory address and the authentication value address may be stored together. The virtual memory address may be returned in response to the memory allocation request.

In some embodiments in response to a memory request e.g. a memory request resulting in a TLB miss or an instruction prediction a TLB may receive tag information e.g. at least a portion of a virtual memory address and a physical memory address of the data. The TLB may further receive an authentication value address. In some embodiments the physical memory address is a modified physical memory address such that it also includes an authentication value. The TLB may store the received data in an entry of the TLB and in response to receiving an authentication value address may indicate that the physical memory address is associated with an authentication value. In sum the TLB may store an authentication value address in some embodiments.

In the illustrated embodiment processing circuit receives memory instruction e.g. from a portion of a processing pipeline . In the illustrated embodiment processing circuit extracts virtual address from memory instruction using control logic and sends virtual address to TLB as part of TLB request . TLB request requests a physical address and an authentication value address that correspond to virtual address . In response to TLB request TLB identifies that data address and authentication value address are associated with virtual address e.g. because data address authentication value address and virtual address are part of a single entry of TLB . Accordingly data address and authentication value address may be sent to processing circuit as part of TLB response in response to TLB request . In some embodiments data address includes expected color data. Processing circuit may extract the expected color data from data address in response to TLB response.

In the illustrated embodiment in response to TLB response processing circuit sends authentication value request in this case a read request and memory request to memory device . Authentication value request may include authentication value address . In a particular embodiment memory device may identify authentication value for location in response to receiving authentication value address . Memory device may send authentication value for location to processing circuit as part of authentication value response in response to authentication value request . Memory request may include data address . In some cases memory request may also include other data. For example when memory instruction includes a store instruction memory request may additionally include data to be stored at memory device . In response to memory request memory device may provide data to processing circuit e.g. in response to a load instruction .

In some embodiments TLB is configured to receive a portion of virtual address e.g. a virtual page address and to provide a portion of data address authentication value address or both e.g. physical page addresses of data address and authentication value address as opposed to complete physical addresses . In some cases a value added to authentication value address is scaled based on a ratio between the size of location and the size of authentication value for location . For example in a system having an 8 bit page size where locations are 4 bits and authentication values are 2 bits virtual address may identify bit and data address and authentication value address may identify different pages. Processing circuit may scale virtual address for authentication value address by half determining that 100 should be added to data address and 010 should be added to authentication value address . Additionally in some embodiments a number of bits added to data address may differ from a number of bits added to authentication value address e.g. authentication value address may be larger than data address . Accordingly processing circuit may generate e.g. using control logic addresses used in authentication value request memory request or both by adding additional bits e.g. from virtual address to data address to authentication value address or both.

In some embodiments corruption prevention system is configured such that authentication value address may be mathematically derived using data address . For example authentication value for location may be logically adjacent to location or may be a fixed number of bits away from location . Accordingly in some cases processing circuit may determine authentication value address from TLB response despite TLB response not explicitly including authentication value address.

In some embodiments as discussed further below processing circuit uses authentication value for location to determine whether memory instruction is authorized to proceed. For example authentication value for location may include color data. Processing circuit may compare using comparator the color data of authentication value to expected color data extracted from data address . In response to the color data of authentication value failing to match the expected color data processing circuit may determine that a memory access error is occurring and may determine that memory instruction is not authorized to proceed. As another example memory instruction may request a read of location . Authentication value for location may include other program data that indicates whether a program that includes memory instruction has previously written to location . If authentication value indicates that the program has not previously written to location processing circuit may determine that a memory access error is occurring and may determine that memory instruction is not authorized to proceed.

In response to processing circuit determining that memory instruction is not authorized to proceed processing circuit may interrupt memory request or may prevent results of memory request from being output e.g. as part of instruction response in response to memory instruction . In the illustrated embodiment determining whether memory instruction is authorized to proceed is performed concurrently with memory request . Accordingly in the case of a store request memory request may not be committed may not overwrite other data stored at a location addressed by memory request until processing circuit indicates whether memory request is authorized to proceed. However in other embodiments processing circuit may not send memory request to memory device until determining that memory request is authorized to proceed.

In some embodiments in response to determining that memory instruction is not authorized to proceed processing circuit outputs an error message e.g. as part of instruction response that indicates data used by processing circuit to determine that memory instruction is not authorized to proceed. For example in response to the color value of authentication value failing to match an expected color value processing circuit may output as part of instruction response the color value and the expected color value. Accordingly corruption prevention system may prevent potential memory corruption e.g. memory access errors from occurring and may further alert programmers that potential memory corruption errors could occur in a system that does not include corruption prevention system or a system where corruption prevention system is not enabled e.g. by utilizing one or more authentication indicators as described further below with reference to .

In response to processing circuit determining that memory instruction is authorized to proceed memory instruction may proceed which may lead to memory instruction completing. For example if memory instruction is a load instruction memory instruction may complete by processing circuit including data stored at location in instruction response . As another example if memory instruction is a store instruction memory instruction may complete by processing circuit indicating to memory device that a write operation at location may be committed. Accordingly corruption prevention system allows memory instruction to be executed if no memory corruption error is detected.

Turning now to a block diagram illustrating one embodiment of TLB and memory device of corruption prevention system is shown. In the illustrated embodiment TLB includes entries . Entries include respective fields that store authentication indicator tag physical address and authentication value address . In the illustrated embodiment memory device is a memory cache including lines indicated by reference numerals . Lines include respective extra bits and segments indicated by reference numerals . However in other embodiments memory device may be a different kind of memory device e.g. a data store .

As noted above in some embodiments TLB provides a physical address and an authentication value address in response to a virtual address. In particular in response to receiving a TLB request e.g. TLB request of TLB may compare a received virtual address portion e.g. virtual address to respective tags of entries indicated by reference numerals . In response to detecting a match between the virtual address and a tag of a particular entry TLB may determine using respective authentication indicator whether physical address of the particular entry corresponds to an authentication value. For example in the illustrated embodiment authentication indicator of entry indicates that respective physical address does not correspond to an authentication value. However in the illustrated embodiment authentication indicator of entry indicates that respective physical address correspond to an authentication value that can be retrieved using authentication value address .

As noted above memory device stores data e.g. data stored at location and corresponding authentication values e.g. authentication value for location . The data and authentication values stored at memory device may be addressed by corresponding portions of TLB . In the illustrated embodiment these references are depicted using various patterns. For example in the illustrated embodiment physical address of entry refers to segment of line and authentication value address of entry refers to segment of line . The data and authentication values may be stored on a same cache line or on different cache lines. Additionally multiple entries of TLB e.g. entry and entry may include respective physical addresses that address a single line of memory device e.g. line . Although in the illustrated embodiment authentication values are the same size as corresponding data in other embodiments authentication values are smaller or larger than corresponding data.

In the illustrated embodiment extra bits of lines are smaller than portions of memory device used to store authentication values e.g. segment of line and segment of line . Accordingly more information may be stored in the authentication values as compared to a system that stores authentication values for each cache line in the respective extra bits. Additionally in the illustrated embodiment extra bits may be otherwise used e.g. used to store ECC data used to replace a memory location experiencing a hard error such as a hardware failure etc. despite authentication values being utilized.

Turning now to a block diagram illustrating exemplary responses to a load instruction by corruption prevention system is shown. Accordingly processing circuit TLB and memory device of are shown.

In the illustrated embodiment processing circuit receives load instruction . Load instruction may correspond to memory instruction and may include virtual address . As discussed above processing circuit may obtain data address and authentication value address based on virtual address by communicating with TLB . Processing circuit may send authentication value address to memory device as part of authentication value request . Additionally processing circuit may send data address to memory device as part of read request .

In response to authentication value request processing circuit may receive from memory device authentication value response which may include a corresponding authentication value. Processing circuit may determine based on the corresponding authentication value whether load instruction is authorized to proceed. In response to determining that load instruction is authorized to proceed processing circuit may send data from read response as part of load response in response to load instruction .

In some embodiments in response to determining that load instruction is not authorized to proceed processing circuit may prevent load instruction from completing. For example processing circuit may receive in response to read request read response which contains data corresponding to read request . However in response to determining that load instruction is not authorized to proceed processing circuit may not send the data corresponding to read request as part of load response . Alternatively in some embodiments processing circuit may not send read request to memory device until after determining that load instruction is authorized to proceed. Accordingly in response to determining that load instruction is not authorized to proceed processing circuit may not send read request to memory device. Additionally in some embodiments in response to determining that load instruction is not authorized to proceed processing circuit may send an error message as part of load response .

Turning now to a block diagram illustrating exemplary responses to a store instruction by corruption prevention system is shown. Accordingly processing circuit TLB and memory device of are shown.

In the illustrated embodiment processing circuit receives store instruction . Store instruction may correspond to memory instruction and may include virtual address . As discussed above processing circuit may obtain data address and authentication value address based on virtual address by communicating with TLB . Processing circuit may send authentication value address to memory device as part of authentication value request . Additionally processing circuit may send data address to memory device as part of write request .

In response to authentication value request processing circuit may receive from memory device authentication value response which may include a corresponding authentication value. Processing circuit may determine based on the corresponding authentication value whether store instruction is authorized to proceed.

In some embodiments memory device does not delete data stored at a location addressed by write request until processing circuit confirms that store instruction is authorized to proceed. For example memory device may back up data at a location addressed by write request or may not immediately write the data of write request . In response to determining that store instruction is authorized to proceed processing circuit may send to memory device write confirm confirming that store instruction is authorized to proceed. In other embodiments write request may not be sent until after processing circuit determines that store instruction is authorized to proceed thus write confirm may not be used in this instance. In response to write request successfully completing processing circuit may send store response to a portion of a processing pipeline.

In some embodiments in response to determining that store instruction is not authorized to proceed processing circuit may prevent store instruction from completing. For example after sending write request in response to determining that store instruction is not authorized to proceed processing circuit may not send write confirm or may indicate that write request is not authorized to proceed. Alternatively in some embodiments processing circuit may not send write request to memory device until after determining that store instruction is authorized to proceed. Accordingly in response to determining that store instruction is not authorized to proceed processing circuit may not send write request to memory device. Additionally in some embodiments in response to determining that store instruction is not authorized to proceed processing circuit may send an error message as part of store response .

Turning now to a flow diagram of a method of operating a corruption prevention system is depicted. Method is an embodiment of a method of operating a corruption prevention system such as corruption prevention system of . Some portions of method may be performed in other orders or simultaneously.

At method includes detecting by a processing circuit a memory instruction of a program where the memory instruction specifies a virtual memory address for data. For example method may include processing circuit detecting memory instruction where memory instruction specifies virtual address .

At method includes accessing by the processing circuit in response to the memory instruction a TLB using at least a portion of the virtual memory address. For example method may include processing circuit sending TLB request to TLB where TLB request includes at least a portion of virtual address .

At method includes in response to accessing the TLB obtaining by the processing circuit a physical memory address corresponding to the virtual memory address where the physical memory address corresponds to the data. For example method may include processing circuit obtaining from TLB in response to TLB request data address where data address corresponds to data stored at location .

At method includes in response to accessing the TLB obtaining by the processing circuit an authentication value corresponding to the physical memory address. For example method may include processing circuit obtaining based on virtual address authentication value for location e.g. using authentication value address .

At method includes determining by the processing circuit whether the memory instruction is authorized to proceed where the determining uses the authentication value. For example method may include processing circuit determining whether memory instruction is authorized to proceed using authentication value . In some cases determining whether the memory instruction is authorized to proceed may be based on the authentication value alone e.g. determining whether the authentication value indicates that the program has previously written to the physical memory address . In other cases determining whether the memory instruction is authorized to proceed is based on other values e.g. based on a comparison between the authentication value and an expected authentication value .

One embodiment of a computer system configured to implement at least a portion of a memory corruption prevention system such as corruption prevention system of is shown in . In the illustrated embodiment the computer system includes one or more processors coupled to system memory via input output I O interface . Computer system further includes network interface coupled to I O interface .

In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA. One or more of processors may include at least a portion of a memory corruption prevention system. For example in the illustrated embodiment processor includes processing circuit of . However in other embodiments other processors may additionally include respective processing circuits. Additionally in some embodiments one or more of processors may include one or more memory devices e.g. memory device .

System memory may be configured to store instructions and data accessible by processor s . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing one or more desired functions such as those methods techniques and data described above for memory corruption prevention are shown stored within system memory as code and data . In some embodiments system memory includes or corresponds to memory device of . In other embodiments memory device is located elsewhere in computer system e.g. connected to I O interface or a peripheral device connected to network interface . System memory may be addressable by TLB translating virtual addresses into physical addresses of system memory .

In one embodiment I O interface is configured to coordinate I O traffic between processors system memory and any peripheral devices in the device including network interface or other peripheral interfaces. In some embodiments I O interface performs protocols timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into a processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network or networks . In various embodiments network interface may support communication via any suitable wired or wireless general data networks such as types of Ethernet network for example. Additionally the network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

In some embodiments the system memory may be one embodiment of a computer accessible medium configured to store program instructions and data as described above for for operating a corruption prevention system. However in other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media. Generally speaking a computer accessible medium may include non transitory storage media or memory media such as magnetic or optical media e.g. disk or DVD CD coupled to computer system via I O interface . A non transitory computer accessible storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc. that may be included in some embodiments of computer system as system memory or another type of memory. Further a computer accessible medium may include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface .

Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible medium. Generally speaking a computer accessible medium may include storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM etc. ROM etc. as well as transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as network and or a wireless link.

Although specific embodiments have been described above these embodiments are not intended to limit the scope of the present disclosure even where only a single embodiment is described with respect to a particular feature. Examples of features provided in the disclosure are intended to be illustrative rather than restrictive unless stated otherwise. The above description is intended to cover such alternatives modifications and equivalents as would be apparent to a person skilled in the art having the benefit of this disclosure.

The scope of the present disclosure includes any feature or combination of features disclosed herein either explicitly or implicitly or any generalization thereof whether or not it mitigates any or all of the problems addressed herein. Accordingly new claims may be formulated during prosecution of this application or an application claiming priority thereto to any such combination of features. In particular with reference to the appended claims features from dependent claims may be combined with those of the independent claims and features from respective independent claims may be combined in any appropriate manner and not merely in the specific combinations enumerated in the appended claims.

