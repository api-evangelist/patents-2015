---

title: Threshold filtering of compressed domain data using steering vector
abstract: In an embodiment, a processor includes a compression domain threshold filter coupled to a plurality of cores. The compression domain threshold filter is to: receive a sample vector of compressed data to be filtered; calculate, based at least on a first subset of the elements of the sample vector, an estimated upper bound value of a dot product of the sample vector and a steering vector; determine whether the estimated upper bound value of the dot product satisfies a filter threshold value; and in response to a determination that the estimated upper bound value of the dot product does not satisfy the filter threshold value, discard the sample vector without completion of a calculation of the dot product of the sample vector and the steering vector. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09503747&OS=09503747&RS=09503747
owner: Intel Corporation
number: 09503747
owner_city: Santa Clara
owner_country: US
publication_date: 20150128
---
This invention was made with Government support under contract number FA8650 13 3 7338 awarded by the Department of Defense. The Government has certain rights in this invention.

Embodiments relate generally to processing of compressed domain data. More particularly embodiments are related to threshold filtering of compressed domain data.

Advances in computing and networking have been associated with the use of compression technologies to reduce the size of data. For example internet services may utilize compression techniques to decrease the bandwidth required for network traffic. Further computing devices may utilize compression to reduce the amount of storage space required to store data.

Some computing systems involve processing of compressed domain data. In such systems it may be useful to only process compressed data elements that include a sufficient amount of desired information. For example an automated security system may analyze compressed video images from a surveillance camera to determine whether the images show any movements or changes. If a particular image includes information indicating a change the security system may perform further analysis on that image to identify any suspicious activity e.g. a trespasser within a secured area .

In accordance with some embodiments a filtering accelerator may provide threshold filtering of a compressed data sample. The filtering accelerator may use a steering vector to filter an unnecessary compressed data sample without performing a complete evaluation of the sample. Further the filtering accelerator may provide sorting of the steering vector. In addition the filtering accelerator may calculate a covariance matrix for use in updating the steering vector. In some embodiments the filtering accelerator may reduce the power time and or hardware required to perform filtering of the compressed data.

Although the following embodiments are described with reference to particular implementations embodiments are not limited in this regard. In particular it is contemplated that similar techniques and teachings of embodiments described herein may be applied to other types of circuits semiconductor devices processors systems etc. For example the disclosed embodiments may be implemented in any type of computer system including server computers e.g. tower rack blade micro server and so forth communications systems storage systems desktop computers of any configuration laptop notebook and tablet computers including 2 1 tablets phablets and so forth .

In addition disclosed embodiments can also be used in other devices such as handheld devices systems on chip SoCs and embedded applications. Some examples of handheld devices include cellular phones such as smartphones Internet protocol devices digital cameras personal digital assistants PDAs and handheld PCs. Embedded applications may typically include a microcontroller a digital signal processor DSP network computers NetPC set top boxes network hubs wide area network WAN switches wearable devices or any other system that can perform the functions and operations taught below. Further embodiments may be implemented in mobile terminals having standard voice functionality such as mobile phones smartphones and phablets and or in non mobile terminals without a standard wireless voice function communication capability such as many wearables tablets notebooks desktops micro servers servers and so forth.

Referring now to shown is a block diagram of an example processor in accordance with one or more embodiments. In some embodiments the processor may be included in an electronic device or component. For example the processor may be included in a cellular telephone a computer a server a network device a system on a chip SoC a controller a wireless transceiver a power supply unit etc. The processor may be a general purpose hardware processor e.g. a central processing unit CPU . In some embodiments the processor may be coupled to any type of computer memory not shown including dynamic random access memory DRAM static random access memory SRAM non volatile memory NVM a combination of DRAM and NVM etc.

In some embodiments the processor may include a compressed domain threshold filter and any number of processing cores A N. Each of the cores A N may be a general purpose hardware processing core. As shown the compressed domain threshold filter may be coupled to one or more of the cores A N.

In some embodiments the compressed domain threshold filter may be used to filter compressed data samples that fail to satisfy a filter threshold. As used herein satisfying a filter threshold refers generally to evaluating the sample using a particular level of a desired data property or quality. Note that depending on the current use of the compressed domain threshold filter the threshold may be a minimum level or a maximum level. For example samples that satisfy a threshold may include samples with values below the threshold samples with values above the threshold samples with values equal to the threshold and so forth. In one or more embodiments the compressed domain threshold filter may receive compressed data samples provided from a compressed domain sensor e.g. sound sensor image video sensor temperature sensor motion sensor pressure sensor etc. 

In some embodiments any samples that are not filtered by the compressed domain threshold filter may be considered to be sufficiently useful and may be provided to a consumer application or process. For example any unfiltered data samples may be provided to a compressed data application executed by one or more of the cores A N may be provided to a different computer or network location and so forth. Such compressed data applications may include e.g. depth estimation classification object recognition inference learning analysis etc.

Referring now to shown is a schematic of the compressed domain threshold filter in accordance with one or more embodiments. The compressed domain threshold filter may be a hardware unit dedicated to operations related to filtering compressed domain data. The compressed domain threshold filter receives input data samples to be filtered. Each input data sample may be referred to as a sample vector and may include multiple elements of compressed domain data e.g. compressed video images compressed audio data compressed measurements and so forth . shows an illustration of an example of a compressed data sample vector in accordance with one or more embodiments. As shown in the example of the sample vector includes thirty two elements numbered i 0 to 31 . Note that some element numbers of the sample vector are not shown in for the sake of clarity.

Referring again to the compressed domain threshold filter may receive a steering vector including multiple data elements. The number of elements in the steering vector may be equal to the number of elements in each sample vector. shows an illustration of an example of a steering vector in accordance with one or more embodiments. As shown in the example of the steering vector also includes thirty two elements numbered i 0 to 31 . Note that some element numbers of the steering vector are not shown in for the sake of clarity. In one or more embodiments each element i of the steering vector may be uniquely associated with a corresponding element i the sample vector . The elements of the steering vector may be used to subdue background information and simultaneously amplify information of interest in the corresponding elements of the sample vector . For example the first element i 0 of the steering vector may be a value used to extract useful information from the corresponding element i 0 of the sample vector .

In some embodiments the compressed domain threshold filter may sort the elements of the steering vector in order of decreasing value. For example after sorting the first element may have the largest value of all elements of the steering vector . Further the last element may have the smallest value of all elements of the steering vector . In some embodiments after the steering vector is sorted the elements of the sample vector are read in the corresponding order to match the sorted steering vector .

Referring again to the compressed domain threshold filter may perform a dot product of the steering vector and each sample vector. The dot product may be calculated as the sum of the products of the corresponding elements of the steering vector and the sample vector. For example the following formula corresponds to the dot product X Y of a steering vector X and a sample vector Y with both X and Y having elements i from to n 

In some embodiments the compressed domain threshold filter may perform the dot product calculation by iterating through each element i from to n to compute each product xy and may sum all of the products xyto obtain the dot product X Y. The compressed domain threshold filter may then determine whether the dot product of the sample vector and the steering vector satisfies a defined filter threshold level T. If the dot product for a particular sample vector satisfies the filter threshold T the compressed domain threshold filter passes the sample vector for further downstream processing shown in as passed data sample . However if the dot product for a sample vector does not satisfy the threshold level T the compressed domain threshold filter can filter e.g. discard or drop the sample vector.

In some embodiments the compressed domain threshold filter may estimate an upper bound value of the dot product without completing the full calculation of the dot product X Y. For example during an iteration through elements i 0 to n to calculate a dot product X Y the compressed domain threshold filter may reach at least one element specified as a checkpoint. The checkpoint element may be associated with a subset of the elements of the sample vector. This subset of the elements may be used to calculate a first portion of the dot product. The first portion of the dot product may be combined with a maximum value of the remaining portion of the dot product to determine an estimate of the upper bound value of the dot product X Y.

An example of a calculation of the upper bound value is described with reference to . Assume that element i 15 of the steering vector is specified as checkpoint elements. Thus in this example the compressed domain threshold filter iterates through elements from to to calculate a first portion A of the dot product X Y. The calculation of the first portion A associated with checkpoint element i 15 is shown by the following formula .

In response to reaching the checkpoint element i 15 the compressed domain threshold filter may estimate a remaining portion B of the dot product as the maximum value of the dot product for the remaining sixteen elements i.e. elements i 16 to 31 . In some embodiments the estimated remaining portion B may be based in part on a maximum remaining sample element y which is the element of the set of remaining sample elements i.e. yto y that is determined to have a maximum value. Further in some embodiments the estimated remaining portion B may be based in part on the next steering vector element xin the sequence. Note that because the steering vector is sorted in order of decreasing value the next element xof the steering vector has a larger value than the remaining elements of the steering vector . Furthermore the estimated remaining portion B may be based in part on the number of remaining elements i.e. sixteen .

In one or more embodiments the estimated remaining portion B may be calculated by multiplying the maximum remaining sample element ytimes the next steering vector element x and then multiplying the product times the number of remaining elements. In some embodiments this calculation may provide an estimate of the maximum possible value of the remaining portion of the dot product calculation. This calculation of the estimated remaining portion B associated with checkpoint element i 15 is shown by the following formula 16 .

In some embodiments the compressed domain threshold filter may estimate the upper bound UB of the dot product by summing the first portion of the dot product with the estimated remaining portion B. This calculation of the upper bound UB of the dot product associated with checkpoint element i 15 is shown by the following formula y 16 

In some embodiments the compressed domain threshold filter may estimate an upper bound value for multiple checkpoints. For example assume that in addition to element i 15 element i 23 is also specified as a checkpoint element. Assume also that maximum remaining sample element yis the element with the largest value of the set of remaining sample elements i.e. yto y . Thus in this example the compressed domain threshold filter may estimate the upper bound UB of the dot product associated with checkpoint element i 23 using the following formula 8 .

In another example assume that in addition to elements i 15 and i 23 element i 27 is also specified as a checkpoint element. Assume also that maximum remaining sample element yis the element with the largest value of the set of remaining sample elements i.e. yto y . Thus in this example the compressed domain threshold filter may estimate the upper bound UB of the dot product associated with checkpoint element i 27 using the following formula 4 .

In some embodiments the compressed domain threshold filter may use the estimated upper bound UB to determine whether to filter the sample vector. For example the compressed domain threshold filter may determine whether the estimated upper bound UB satisfies the defined filter threshold level T and if not may filter or otherwise discard the sample vector. Note that when the sample vector is filtered using the estimated upper bound UB the compressed domain threshold filter does not need to perform any remaining portion of the calculation of the dot product X Y. For example if UBis less than the filter threshold T the compressed domain threshold filter does not have to perform the remaining calculations of the dot product namely xy xy . . . xy . In another example if UBis less than the filter threshold T the compressed domain threshold filter does not have to perform the remaining calculations of the dot product namely xy xy . . . xy . Thus because the compressed domain threshold filter can filter some sample vectors at multiple checkpoints without performing the full dot product calculation the power and or time required to filter the compressed data samples may be reduced in some embodiments.

In some embodiments the number of checkpoints used by the compressed domain threshold filter may be based on the length of the sample vector and or the steering vector . For example in the case that the sample vector and or the steering vector includes less than thirty two elements the compressed domain threshold filter may use two or fewer checkpoint elements. In another example in the case that the sample vector and or the steering vector includes more than thirty two elements the compressed domain threshold filter may use four or more checkpoint elements. In some embodiments each checkpoint may be associated with an n power of two number of remaining bits in a vector e.g. 4 8 16 32 and so forth .

Referring now to shown is a sequence in accordance with one or more embodiments. In some embodiments all or a part of the sequence may be implemented by the compressed domain threshold filter shown in . In some embodiments some or all of the sequence may be implemented in hardware software and or firmware. In firmware and software embodiments it may be implemented by computer executed instructions stored in a non transitory machine readable medium such as an optical semiconductor or magnetic storage device. The machine readable medium may store data which if used by at least one machine causes the at least one machine to fabricate at least one integrated circuit to perform a method. For the sake of illustration the steps involved in the sequence may be described below with reference to which show examples in accordance with some embodiments. However the scope of the various embodiments discussed herein is not limited in this regard.

At block a threshold filter may receive a compressed data sample to be filtered. For example referring to the compressed domain threshold filter receives input data samples of compressed domain data to be filtered. In some embodiments the received data sample may be the sample vector shown in .

At block a determination is made about whether a change in background information has occurred in the compressed data. For example referring to one or more of the cores A N and or the compressed domain threshold filter may analyze the compressed data samples to determine whether background information has changed to a greater degree than allowed by a specified tolerance or threshold.

If it is determined at block that a change in background information has not occurred in the compressed data then at block the sequence continues at block described below . However if it is determined at block that a change in background information has occurred in the compressed data then at block a covariance matrix may be computed. At block the covariance matrix may be used to update the steering vector. For example referring to one or more of the cores A N and or the compressed domain threshold filter may update or generate a steering vector using the covariance matrix. Further the compressed domain threshold filter may sort the elements of the steering vector in order of decreasing value.

At block a dot product calculation may be performed to obtain a calculated value for the data sample. For example referring to the compressed domain threshold filter may calculate a dot product X Y using all elements of a sample vector and a steering vector. In another example the compressed domain threshold filter may calculate a portion of the dot product using a subset of elements of the steering vector and the sample vector and may estimate an upper bound value UB of the dot product based on the portion of the dot product.

At block a determination is made about whether the calculated value for the data sample satisfies the filter threshold. For example referring to the compressed domain threshold filter may determine whether the dot product X Y of the sample vector and the steering vector meets or exceeds the filter threshold T. In another example the compressed domain threshold filter may determine whether the estimated upper bound value UB of the dot product satisfies the filter threshold T.

If it is determined at block that the calculated value for the data sample does not satisfy the filter threshold then at block the current data sample is discarded and the sequence returns to block to receive a new compressed data sample. However if it is determined at block that the calculated value for the data sample satisfies the filter threshold then at block a determination is made about whether the rejection rate is within an acceptable range. For example referring to one or more of the cores A N and or the compressed domain threshold filter may determine whether the rate at which the compressed domain threshold filter is filtering the data samples is either too low or too high and is thus outside an acceptable filtering range.

If it is determined at block that the rejection rate is within an acceptable range then the sequence continues at block described below . However if it is determined at block that the rejection rate is not within an acceptable range then at block the defined threshold level is updated. For example referring to one or more of the cores A N and or the compressed domain threshold filter may determine that the rejection rate is too low and may thus increase the threshold level. In another example one or more of the cores A N and or the compressed domain threshold filter may determine that the rejection rate is too high and may thus lower the threshold level. Further in some embodiments when the rejection rate is too high the voltage and or clock frequency supplied to the domain threshold filter may be decreased thereby reducing the rejection rate and also conserving power.

At block a determination is made about whether recovery of the compressed data sample is needed. For example referring to one or more of the cores A N and or the compressed domain threshold filter may determine whether the compressed data sample is required to undergo a recovery process before it is sent to a downstream process or application.

If it is determined at block that recovery of the compressed data sample is not needed then at block the data sample may be processed in the compressed domain. For example referring to one or more of the cores A N may execute an application that receives and uses the compressed data sample. However if it is determined at block that recovery of the compressed data sample is needed then at block a recovery operation may be performed to obtain raw or uncompressed data. At block the raw data may be processed. For example referring to one or more of the cores A N may execute an application that performs a recovery operation e.g. sparse recovery of the compressed data sample. The application or another application may then process the recovered uncompressed data. After either block or block the sequence is completed.

Referring now to shown is a sequence in accordance with one or more embodiments. In some embodiments all or a part of the sequence may be implemented by the compressed domain threshold filter shown in . In some embodiments some or all of the sequence may be implemented in hardware software and or firmware. In firmware and software embodiments it may be implemented by computer executed instructions stored in a non transitory machine readable medium such as an optical semiconductor or magnetic storage device. The machine readable medium may store data which if used by at least one machine causes the at least one machine to fabricate at least one integrated circuit to perform a method. For the sake of illustration the steps involved in the sequence may be described below with reference to which show examples in accordance with some embodiments. However the scope of the various embodiments discussed herein is not limited in this regard.

At block a threshold filter may receive a sample vector of compressed data. For example referring to the compressed domain threshold filter receives input data samples of compressed domain data to be filtered. The received data sample may be e.g. the sample vector shown in .

At block a loop defined by blocks and may be entered to process each element i included in a dot product calculation. For example referring to the compressed domain threshold filter may iterate through elements i 0 to 31 to calculate a dot product X Y of the sample vector and the sorted steering vector .

At block partial calculations for a dot product are performed for each element i. For example referring to the compressed domain threshold filter may multiply a value xof the steering vector times a value yof the sample vector to obtain a product P and may sum the products Pto obtain a first portion of the dot product.

At block a determination is made about whether a checkpoint element has been reached in the steering vector and or the sample vector. For example referring to the compressed domain threshold filter may determine that the processing of the steering vector has reached element i 15 which is defined as a checkpoint element.

If it is determined at block that a checkpoint element has not been reached then the sequence returns to block to process a new element i. However if it is determined at block that a checkpoint element has been reached then at block an estimated upper bound UB of the dot product may be calculated. For example referring to the compressed domain threshold filter may calculate a first portion of the dot product using a subset of elements of the steering vector and the sample vector e.g. elements i 0 to 15 . Further the compressed domain threshold filter may calculate a second portion of the dot product by multiplying the maximum remaining sample element times the next steering vector element and then multiplying the product times the number of remaining elements. In some embodiments this second portion may provide an estimate of the maximum possible value of the remaining portion of the dot product calculation. Furthermore the compressed domain threshold filter may calculate an estimated upper bound UB of the dot product by based on the first portion and or the second portion of the dot product. For example the upper bound UB may be calculated by summing the first and second portions of the dot product.

At block a determination is made about whether the estimated upper bound UB of the dot product satisfies a filter threshold value. For example referring to the compressed domain threshold filter may determine whether the upper bound UB meets or exceeds the filter threshold value T.

If it is determined at block that the estimated upper bound UB of the dot product satisfies the filter threshold value then the sequence returns to block to process a new element i. However if it is determined at block that the estimated upper bound UB of the dot product does no satisfy the filter threshold value then at block the current sample is rejected. For example referring to the compressed domain threshold filter may filter or drop the current sample vector. Note that when a sample is rejected based on a determination that the estimated upper bound UB of the dot product does no satisfy the filter threshold value the sample is filtered without performing a full dot product calculation.

Once all elements i in the sample vector have been processed at block i.e. the calculation of dot product X Y is completed the sequence continues at block where a determination is made about whether the dot product satisfies the filter threshold. For example referring to the compressed domain threshold filter may determine whether the dot product X Y of the sample vector and the steering vector meets or exceeds the filter threshold T.

If it is determined at block that the dot product does not satisfy the filter threshold then at block the current sample is rejected. For example referring to the compressed domain threshold filter may filter or drop the current sample vector. However if it is determined at block that the dot product satisfies the filter threshold then at block the current sample is processed or otherwise used by a downstream application. For example referring to one or more of the cores A N may execute an application that receives and uses the current data sample. In some embodiments the data sample will first undergo sparse recovery to recover raw uncompressed data. After either block or block the sequence is completed. In some embodiments the sequence may be repeated for each sample vector that is processed by the threshold filter.

Referring now to shown is a block diagram of an example filtering accelerator in accordance with one or more embodiments. The filtering accelerator may generally correspond to all or a portion of the compressed domain threshold filter shown in . In the example of the filtering accelerator includes eight processor engines PEs A H also referred to collectively as PEs .

As shown in some embodiments the filtering accelerator may also include a register an address table and a mode control unit . The mode control unit may select an operating mode of the filtering accelerator . For example in some embodiments the mode control unit may control the filtering accelerator to operate in a threshold filtering mode a steering vector sorting mode and a covariance computation mode. By enabling the filtering accelerator to operate in these different modes the need for additional components and or circuits to perform these different functions is reduced.

In the threshold filtering mode the PEs A H may process multiple sample vectors A H also referred to collectively as sample vectors in parallel. For example the first PE A individually processes the sample vector A and determines whether to filter the sample vector A.

In some embodiments the register stores the current steering vector. The register may provide the steering vector elements to the first PE A. Further the steering vector elements may be propagated in sequence through serial connections between the PEs such that PE A provides elements of the steering vector to PE B PE B provides elements of the steering vector to PE C and so forth. In this manner each PE may not have to internally store the entire steering vector. In such serial connections a downstream processor engine e.g. PE B may be referred to herein as being a lower processor engine to an upstream processor engine e.g. PE A .

In the steering vector sorting mode the PEs A H may perform a linear sort of the steering vector. For example the first PE A may store the values of a subset of steering vector elements in internal registers and sort the values of the subset of elements in decreasing order. When the first PE A receives an additional element of the steering vector the first PE A may re sort the stored elements and the received element and may push the smallest element to the lower PE B. This process may be repeated for each element and each PE until all of the element values of the steering vector are stored in descending order across the PEs A H. Further the index value i of each element may be stored in the address table in an order corresponding to the sorted element values of the steering vector. For example assume that a steering vector includes four elements namely x 6 x 7 x 5 and x 9. Thus in this example the PEs may store the element values in a descending order of 9 7 6 5 . Further the address table may store the element index values in a corresponding order of 3 1 0 2 .

Referring now to shown is a block diagram of an example processor engine PE in accordance with one or more embodiments. The PE may be included in a threshold filter unit. For example the processor engine may generally correspond to one of the PEs A H included in the filtering accelerator shown in .

In some embodiments the PE may be able to selectively operate in a steering vector sorting mode. As shown in PE may include a first register . While operating in the steering vector sorting mode the first register may be addressed as three portions namely the first sub register A the second sub register B and the third sub register C shown in .

In some embodiments the PE may include a multiplier accumulator MAC to receive elements the steering vector . In some embodiments the MAC may receive one element xof the steering vector every four clock cycles. After being received by the MAC a first element xmay be sent to the multiplexer and may be stored in the third sub register C. The first element xis provided to multiplexer and multiplexer and is provided to the arithmetic logic unit ALU . The sort logic updates the address table with the index value i 0 corresponding to the first element x .

When a second element xis received is provided to MAC multiplexer second sub register B multiplexer and ALU in turn. The ALU then compares the first and second steering vector elements and outputs the larger value to be stored in the first register and outputs the smaller value to be stored in the second register . The sort logic then updates the address table with the index values i 0 and 1 stored in an order corresponding to the descending order of element values stored in the second register and the third register .

Similar processing may be performed for the third and fourth steering vector elements resulting in the first four received steering vector elements being sorted in descending order. In particular the first four steering vector elements sorted from largest to smallest are stored respectively in third sub register C second register third register and fourth register . Further when the PE receives any subsequent steering vector element the received steering vector element and the four stored steering vector elements are re sorted and the smallest steering vector element is pushed out to a lower processor engine. In this manner once all elements of the steering vector are received and processed by all PEs the steering vector has been sorted in descending order across the PEs . Further the address table will include the element index values stored in an order corresponding to the descending order of steering vector element values stored across the PEs .

In some embodiments the PE can operate in a threshold filtering mode. Upon initiating the threshold filtering mode the internal registers of the PE are cleared. For clock cycles to during the threshold filtering mode the PE simultaneously receives two elements of the sample vector e.g. a sample including multiple elements of compressed domain data . The PE processes these two elements of the sample vector in two separate paths of the threshold filtering mode. The first path is represented in by element y which is received by the multiplexer . Further the second path is represented by element y which is received by the multiplexer . These two paths of the threshold filtering mode are described in greater detail below.

In the first path of the threshold filtering mode the elements of the sample vector are processed in increasing order from the first element. For example during the first clock cycle after initiating the threshold filtering mode element yis the first element of the sample vector e.g. y and corresponds to the first element of the sorted steering vector e.g. element xwith the largest value . In some embodiments the PE determines the sorted order of the steering vector by using the element index values i stored in the address table . Note that these index values i are previously stored in the address table in sorted order during the steering vector sorting mode of the PE . In some embodiments the value of the steering vector element x may be obtained by using the sorted index value i from the address table to retrieve the corresponding value from the register shown in .

In one or more embodiments the MAC multiplies the value of sample vector element y e.g. y and the value of the corresponding steering vector x e.g. x . The resulting product is stored in the first register . In some embodiments while the PE is in the threshold filtering mode the first register is addressed as a single register location. In the next clock cycle the MAC multiplies the next sample vector element yin the sequence e.g. y and the corresponding steering vector x e.g. x . The resulting product is added to the value in the first register . This operation is repeated so that over multiple clock cycles the first register stores the cumulative sum of products. This cumulative sum of products may be referred to herein as a first portion of the dot product of the steering vector and the sample vector.

Turning to the second path of the threshold filtering mode the elements of the sample vector are processed in decreasing order from the last element. For example during the first clock cycle after initiating the threshold filtering mode element yis the last element of the sample vector and corresponds to the last element of the sorted steering vector i.e. the steering vector element with the smallest value .

In the second path elements yare initially received by multiplexer . For clock cycles of the threshold filtering mode the ALU compares the four received elements y and controls the multiplexer to store the maximum value i.e. y in the fourth register . For clock cycles the ALU compares the eight received elements y and controls the multiplexer to store the maximum value i.e. y in the third register . For clock cycles the ALU compares the sixteen received elements y and controls the multiplexer to store the maximum value i.e. y in the second register .

After clock cycle during the threshold filtering of a sample the second path may be disabled. Stated differently element ymay no longer be received by PE after clock cycle . Further by clock cycle a filtering evaluation associated with a checkpoint element i 15 may be performed by combining at least some results of the first path and the second path to calculate an upper bound estimate of the dot product. Specifically by clock cycle the first register stores the first portion of the dot product corresponding to the first sixteen elements namely A xy xy . . . xy . Further as discussed above the second register stores the maximum value yof the last sixteen elements of the sample vector. The four bit shifter performs a left shift of four bits on the maximum value y thereby multiplying the maximum value ytimes sixteen. In some embodiments the multiplexer is controlled to provide the output of the four bit shifter to the MAC . The MAC multiplies the output of the four bit shifter times the next steering vector element x thereby producing the estimated remaining portion B 16 y x . Next the estimated upper bound UBcan be calculated by summing the first portion of the dot product Aand the estimated remaining portion B. Further the estimated upper bound UBmay compared to the filter threshold T to determine whether to filter the current sample in association with checkpoint element i 15.

By clock cycle 26 a filtering evaluation associated with a checkpoint element i 23 may be performed. Specifically the first register stores the first portion of the dot product corresponding to the first twenty four elements namely A xy xy . . . xy . Further as discussed above the third register stores the maximum value yof the last eight elements of the sample vector. The three bit shifter performs a left shift of three bits on the maximum value y thereby multiplying the maximum value ytimes eight. In some embodiments the multiplexer is controlled to provide the output of the three bit shifter to the MAC . The MAC multiplies the output of the three bit shifter times the next steering vector element x thereby producing the estimated remaining portion B 8 y x . Next the estimated upper bound UBcan be calculated by summing the first portion of the dot product Aand the estimated remaining portion B. Further the estimated upper bound UBmay compared to the filter threshold T to determine whether to filter the current sample in association with checkpoint element i 23.

By clock cycle 31 a filtering evaluation associated with a checkpoint element i 27 may be performed. Specifically the first register stores the first portion of the dot product corresponding to the first twenty eight elements namely A xy xy . . . xy . Further as discussed above the fourth register stores the maximum value yof the last four elements of the sample vector. The two bit shifter performs a left shift of two bits on the maximum value y thereby multiplying the maximum value ytimes four. In some embodiments the multiplexer is controlled to provide the output of the two bit shifter to the MAC . The MAC multiplies the output of the two bit shifter times the next steering vector element x thereby producing the estimated remaining portion B 4 y x . Next the estimated upper bound UBcan be calculated by summing the first portion of the dot product Aand the estimated remaining portion B. Further the estimated upper bound UBmay compared to the filter threshold T to determine whether to filter the current sample in association with checkpoint element i 27.

In one or more embodiments the multiplexer may receive a maximum vector value Max and a minimum vector value Min . For example for vector elements defined as having five bits the maximum vector value may be thirty one corresponding to the value of 11111 in binary. Further the minimum vector value may be zero corresponding to the value of 00000 in binary. The multiplexer may use the Max and Min values to ignore vector element values that are above or below an acceptable range of vector element values.

Referring now to shown is a block diagram of an example filtering accelerator in accordance with one or more embodiments. In particular shows an example of the filtering accelerator operating in a covariance computation mode. In some embodiments the filtering accelerator may calculate each element aof an N by N covariance matrix using the following formula 

As shown the filtering accelerator may include an address generator to generate a set of address pairs based on the number of elements N in a sample vector. In some embodiments the address generator may include a down counter and an up counter . The number of bits in the down counter and the up counter may be determined to represent the binary value of the number of elements N in the sample vector. Assume that in the example of the number of elements in vectors processed by the filtering accelerator is thirty two which is 11111 in binary form. Thus in this example both the down counter and the up counter include five bits. Initially the down counter is set at the binary number 11111 and the up counter is set to the binary number 00000. For every clock cycle during the covariance computation mode the values of the down counter and the up counter may be output to PE A as an address pair. For example in the first clock cycle PE A receives the address pair 31 0 which corresponds to the pair of the current binary value of the down counter i.e. 11111 and the current binary value of the up counter i.e. 00000 .

In some embodiments for every clock cycle the up counter is incremented up by one bit while the down counter remains at the same value. For example in the second clock cycle PE A receives the address pair 31 1 which corresponds to the pair of the current binary value of the down counter i.e. 11111 and the current binary value of the up counter i.e. 00001 . The up counter is then incremented up in subsequent clock cycles causing the address generator to output address pairs reflecting the changing value of the up counter e.g. 31 2 31 3 and so forth .

In the example of when the binary value of the up counter is incremented up to 11111 the values of the down counter and the up counter are equal and the address generator outputs the address pair 31 31 to PE A. In some embodiments the address generator includes logic shown by a symbol in to detect the equal values of the down counter and the up counter . In response to this detection the address generator sends two signals namely a first signal sent to the down counter and a second signal sent to the up counter . The first signal may activate an enable command shown as En in of the down counter thereby causing the down counter to increment down by one i.e. to the binary value 11110 . The second signal may activate an reset command shown as Rst in of the up counter thereby causing the up counter to reset to the binary value 00000. The address generator then outputs the address pair 30 0 to PE A. The up counter is then incremented up in subsequent clock cycles causing the address generator to output address pairs reflecting the changing value of the up counter e.g. 30 1 30 2 and so forth . The address generator may then repeat this process to generate address pairs based on combinations of values of the down counter and the up counter . The generated address pairs are provided to the PE A.

For each address pair the first PE A retrieves the elements of the sample vector A that are identified by each address in the address pair and multiplies these elements and then passes the resulting value to the second PE B. The second PE B retrieves the elements of the sample vector B that are identified by each address in the address pair multiplies these elements sums the product with the value received from PE A and then passes the result to the third PE C. This process is repeated by the remaining PEs . The output of the last PE is divided by the number of PEs resulting in the single element of the covariance matrix that is identified by the address pair. After all address pairs are processed in this manner the elements of a first portion of the covariance matrix have been determined. Further the elements of the remaining portion of the covariance matrix may be determined by inverting each address pair and duplicating the elements located in the covariance matrix at the inverted address pair. For example the value of element 0 1 of the covariance matrix may be determined by copying the value of element 1 0 of the covariance matrix. In some embodiments the completed covariance matrix may be used to update the steering vector.

For example assuming vectors with thirty two elements the first PE A may initially receive the address pair 31 0 . In response the first PE A may retrieve and multiply the first and last elements of the sample vector A i.e. elements i 0 and 31 . This value is then passed to the second PE B. The second PE B may retrieve and multiply the first and last elements of the sample vector B and may sum this product with the value received from PE A. The remaining PEs C H repeat this calculation using the address pair 31 0 . The output from PE H is divided by eight i.e. the number of PEs A H resulting in the single element at location 31 0 of the covariance matrix. Further element 0 31 is determined by copying element 31 0 of the covariance matrix.

Note that the examples shown in are provided for the sake of illustration and are not intended to limit any embodiments. For example it is contemplated that in some embodiments the filtering accelerator and or the processor engine shown in may include different components additional components different arrangements of components and or different numbers of components than shown in . Also in some embodiments the filtering accelerator and or the processor engine may use only one operating mode or in any combination of operating modes. Further in some embodiments the sample vector and the steering vector shown in may include any number of elements. Furthermore in some embodiments the filter thresholds may be maximum levels or minimum levels.

It is also contemplated that in some embodiments sample vector elements steering vector elements threshold levels and or other values may be positive numbers and or negative numbers. Further in some embodiments the filtering accelerator may use any number of checkpoint elements. Furthermore in some embodiments the sorting of data described herein may be either in increasing order or in decreasing order.

It is further contemplated that in some embodiments the compressed domain threshold filter shown in and or the filtering accelerator and or the processor engine shown in may be implemented as a dedicated accelerator chip as an Intellectual Property IP block in a processor in a processing core in a System on a Chip SoC in a chipset or in any other device. It should be understood that the systems apparatus and methods described herein can include various combinations and or sub combinations of the components and or features of the different implementations described with reference to . It is contemplated that specifics in the examples shown in may be used anywhere in one or more embodiments.

Referring now to shown is a block diagram of a system in accordance with an embodiment of the present invention. As shown in system may include various components including a processor which as shown is a multicore processor. Processor may be coupled to a power supply via an external voltage regulator which may perform a first voltage conversion to provide a primary regulated voltage to processor .

As seen processor may be a single die processor including multiple cores . In addition each core may be associated with an integrated voltage regulator IVR which receives the primary regulated voltage and generates an operating voltage to be provided to one or more agents of the processor associated with the IVR . Accordingly an IVR implementation may be provided to allow for fine grained control of voltage and thus power and performance of each individual core . As such each core can operate at an independent voltage and frequency enabling great flexibility and affording wide opportunities for balancing power consumption with performance. In some embodiments the use of multiple IVRs enables the grouping of components into separate power planes such that power is regulated and supplied by the IVR to only those components in the group. During power management a given power plane of one IVR may be powered down or off when the processor is placed into a certain low power state while another power plane of another IVR remains active or fully powered.

Still referring to additional components may be present within the processor including an input output interface another interface and an integrated memory controller . As seen each of these components may be powered by another integrated voltage regulator . In one embodiment interface may be in accordance with the Intel Quick Path Interconnect QPI protocol which provides for point to point PtP links in a cache coherent protocol that includes multiple layers including a physical layer a link layer and a protocol layer. In turn interface may be in accordance with a Peripheral Component Interconnect Express PCIe specification e.g. the PCI Express Specification Base Specification version 2.0 published Jan. 17 2007 .

Also shown is a power control unit PCU which may include hardware software and or firmware to perform power management operations with regard to processor . As seen PCU provides control information to external voltage regulator via a digital interface to cause the external voltage regulator to generate the appropriate regulated voltage. PCU also provides control information to IVRs via another digital interface to control the operating voltage generated or to cause a corresponding IVR to be disabled in a low power mode . In some embodiments the control information provided to IVRs may include a power state of a corresponding core .

In various embodiments PCU may include a variety of power management logic units to perform hardware based power management. Such power management may be wholly processor controlled e.g. by various processor hardware and which may be triggered by workload and or power thermal or other processor constraints and or the power management may be performed responsive to external sources such as a platform or management power management source or system software .

In some embodiments the filtering accelerator may generally correspond to the compressed domain threshold filter shown in or the filtering accelerator and or processor engine shown in . Further the processor and or any of the cores may include some or all of the compressed domain threshold filter shown in and or the filtering accelerator and or processor engine shown in . While not shown for ease of illustration understand that additional components may be present within processor such as uncore logic and other components such as internal memories e.g. one or more levels of a cache memory hierarchy and so forth. Furthermore while shown in the implementation of with an external voltage regulator embodiments are not so limited.

Embodiments can be implemented in processors for various markets including server processors desktop processors mobile processors and so forth. Referring now to shown is a block diagram of a multi domain processor in accordance with one or more embodiments. As shown in the embodiment of processor includes multiple domains. Specifically a core domain can include a plurality of cores a graphics domain can include one or more graphics engines and a system agent domain may further be present. In some embodiments system agent domain may execute at an independent frequency than the core domain and may remain powered on at all times to handle power control events and power management such that domains and can be controlled to dynamically enter into and exit high power and low power states. Each of domains and may operate at different voltage and or power. Note that while only shown with three domains understand the scope of the present invention is not limited in this regard and additional domains can be present in other embodiments. For example multiple core domains may be present with each core domain including at least one core.

In general each core may further include low level caches in addition to various execution units and additional processing elements. In turn the various cores may be coupled to each other and to a shared cache memory formed of a plurality of units of a last level cache LLC . In various embodiments LLC may be shared amongst the cores and the graphics engine as well as various media processing circuitry. As seen a ring interconnect thus couples the cores together and provides interconnection between the cores graphics domain and system agent domain . In one embodiment interconnect can be part of the core domain . However in other embodiments the ring interconnect can be of its own domain.

As further seen system agent domain may include display controller which may provide control of and an interface to an associated display. In addition system agent domain may include a power control unit to perform power management.

As further seen in processor can further include an integrated memory controller IMC that can provide for an interface to a system memory such as a dynamic random access memory DRAM . Multiple interfaces may be present to enable interconnection between the processor and other circuitry. For example in one embodiment at least one direct media interface DMI interface may be provided as well as one or more PCIe interfaces. Still further to provide for communications between other agents such as additional processors or other circuitry one or more interfaces in accordance with an Intel Quick Path Interconnect QPI protocol may also be provided. Although shown at this high level in the embodiment of understand the scope of the present invention is not limited in this regard.

Although not shown for ease of illustration in in some embodiments processor and or the cores may include the compressed domain threshold filter shown in and or the filtering accelerator and or processor engine shown in .

While not shown for ease of illustration understand that additional components may be present within processor such as uncore logic and other components such as internal memories e.g. one or more levels of a cache memory hierarchy and so forth. Furthermore while shown in the implementation of with an external voltage regulator embodiments are not so limited.

Referring now to shown is a block diagram of a processor in accordance with an embodiment of the present invention. As shown in processor may be a multicore processor including a plurality of cores . In one embodiment each such core may be of an independent power domain and can be configured to enter and exit active states and or maximum performance states based on workload. The various cores may be coupled via an interconnect to a system agent or uncore that includes various components. As seen the uncore may include a shared cache which may be a last level cache. In addition the uncore may include an integrated memory controller to communicate with a system memory not shown in e.g. via a memory bus. Uncore also includes various interfaces and a power control unit which may include logic to perform the power management techniques described herein.

In addition by interfaces connection can be made to various off chip components such as peripheral devices mass storage and so forth. While shown with this particular implementation in the embodiment of the scope of the present invention is not limited in this regard.

Although not shown for ease of illustration in in some embodiments processor and or any of the cores may include the compressed domain threshold filter shown in and or the filtering accelerator and or processor engine shown in .

Referring to an embodiment of a processor including multiple cores is illustrated. Processor includes any processor or processing device such as a microprocessor an embedded processor a digital signal processor DSP a network processor a handheld processor an application processor a co processor a system on a chip SoC or other device to execute code. Processor in one embodiment includes at least two cores cores and which may include asymmetric cores or symmetric cores the illustrated embodiment . However processor may include any number of processing elements that may be symmetric or asymmetric.

In one embodiment a processing element refers to hardware or logic to support a software thread. Examples of hardware processing elements include a thread unit a thread slot a thread a process unit a context a context unit a logical processor a hardware thread a core and or any other element which is capable of holding a state for a processor such as an execution state or architectural state. In other words a processing element in one embodiment refers to any hardware capable of being independently associated with code such as a software thread operating system application or other code. A physical processor typically refers to an integrated circuit which potentially includes any number of other processing elements such as cores or hardware threads.

A core often refers to logic located on an integrated circuit capable of maintaining an independent architectural state wherein each independently maintained architectural state is associated with at least some dedicated execution resources. In contrast to cores a hardware thread typically refers to any logic located on an integrated circuit capable of maintaining an independent architectural state wherein the independently maintained architectural states share access to execution resources. As can be seen when certain resources are shared and others are dedicated to an architectural state the line between the nomenclature of a hardware thread and core overlaps. Yet often a core and a hardware thread are viewed by an operating system as individual logical processors where the operating system is able to individually schedule operations on each logical processor.

Physical processor as illustrated in includes two cores cores and . Here cores and are considered symmetric cores i.e. cores with the same configurations functional units and or logic. In another embodiment core includes an out of order processor core while core includes an in order processor core. However cores and may be individually selected from any type of core such as a native core a software managed core a core adapted to execute a native instruction set architecture ISA a core adapted to execute a translated ISA a co designed core or other known core. Yet to further the discussion the functional units illustrated in core are described in further detail below as the units in core operate in a similar manner.

As depicted core includes two hardware threads and which may also be referred to as hardware thread slots and . Therefore software entities such as an operating system in one embodiment potentially view processor as four separate processors i.e. four logical processors or processing elements capable of executing four software threads concurrently. As alluded to above a first thread is associated with architecture state registers a second thread is associated with architecture state registers a third thread may be associated with architecture state registers and a fourth thread may be associated with architecture state registers . Here each of the architecture state registers and may be referred to as processing elements thread slots or thread units as described above. As illustrated architecture state registers are replicated in architecture state registers so individual architecture states contexts are capable of being stored for logical processor and logical processor . In core other smaller resources such as instruction pointers and renaming logic in allocator and renamer block may also be replicated for threads and . Some resources such as re order buffers in reorder retirement unit ILTB load store buffers and queues may be shared through partitioning. Other resources such as general purpose internal registers page table base register s low level data cache and data TLB execution unit s and portions of out of order unit are potentially fully shared.

Processor often includes other resources which may be fully shared shared through partitioning or dedicated by to processing elements. In an embodiment of a purely exemplary processor with illustrative logical units resources of a processor is illustrated. Note that a processor may include or omit any of these functional units as well as include any other known functional units logic or firmware not depicted. As illustrated core includes a simplified representative out of order OOO processor core. But an in order processor may be utilized in different embodiments. The OOO core includes a branch target buffer to predict branches to be executed taken and an instruction translation buffer I TLB to store address translation entries for instructions.

Core further includes decode module coupled to fetch unit to decode fetched elements. Fetch logic in one embodiment includes individual sequencers associated with thread slots respectively. Usually core is associated with a first ISA which defines specifies instructions executable on processor . Often machine code instructions that are part of the first ISA include a portion of the instruction referred to as an opcode which references specifies an instruction or operation to be performed. Decode logic includes circuitry that recognizes these instructions from their opcodes and passes the decoded instructions on in the pipeline for processing as defined by the first ISA. For example decoders in one embodiment include logic designed or adapted to recognize specific instructions such as transactional instruction. As a result of the recognition by decoders the architecture or core takes specific predefined actions to perform tasks associated with the appropriate instruction. It is important to note that any of the tasks blocks operations and methods described herein may be performed in response to a single or multiple instructions some of which may be new or old instructions.

In one example allocator and renamer block includes an allocator to reserve resources such as register files to store instruction processing results. However threads and are potentially capable of out of order execution where allocator and renamer block also reserves other resources such as reorder buffers to track instruction results. Unit may also include a register renamer to rename program instruction reference registers to other registers internal to processor . Reorder retirement unit includes components such as the reorder buffers mentioned above load buffers and store buffers to support out of order execution and later in order retirement of instructions executed out of order.

Scheduler and execution unit s block in one embodiment includes a scheduler unit to schedule instructions operation on execution units. For example a floating point instruction is scheduled on a port of an execution unit that has an available floating point execution unit. Register files associated with the execution units are also included to store information instruction processing results. Exemplary execution units include a floating point execution unit an integer execution unit a jump execution unit a load execution unit a store execution unit and other known execution units.

Lower level data cache and data translation buffer D TLB are coupled to execution unit s . The data cache is to store recently used operated on elements such as data operands which are potentially held in memory coherency states. The D TLB is to store recent virtual linear to physical address translations. As a specific example a processor may include a page table structure to break physical memory into a plurality of virtual pages.

Here cores and share access to higher level or further out cache which is to cache recently fetched elements. Note that higher level or further out refers to cache levels increasing or getting further away from the execution unit s . In one embodiment higher level cache is a last level data cache last cache in the memory hierarchy on processor such as a second or third level data cache. However higher level cache is not so limited as it may be associated with or includes an instruction cache. A trace cache a type of instruction cache instead may be coupled after decoder to store recently decoded traces.

In the depicted configuration processor also includes bus interface module and a power controller which may perform power management in accordance with an embodiment of the present invention. In this scenario bus interface is to communicate with devices external to processor such as system memory and other components.

A memory controller may interface with other devices such as one or many memories. In an example bus interface includes a ring interconnect with a memory controller for interfacing with a memory and a graphics controller for interfacing with a graphics processor. In an SoC environment even more devices such as a network interface coprocessors memory graphics processor and any other known computer devices interface may be integrated on a single die or integrated circuit to provide small form factor with high functionality and low power consumption.

Although not shown for ease of illustration in in some embodiments processor and or cores and may include the compressed domain threshold filter shown in and or the filtering accelerator and or processor engine shown in .

Referring now to shown is a block diagram of a micro architecture of a processor core in accordance with one embodiment of the present invention. As shown in processor core may be a multi stage pipelined out of order processor. Core may operate at various voltages based on a received operating voltage which may be received from an integrated voltage regulator or external voltage regulator.

As seen in core includes front end units which may be used to fetch instructions to be executed and prepare them for use later in the processor pipeline. For example front end units may include a fetch unit an instruction cache and an instruction decoder . In some implementations front end units may further include a trace cache along with microcode storage as well as a micro operation storage. Fetch unit may fetch macro instructions e.g. from memory or instruction cache and feed them to instruction decoder to decode them into primitives i.e. micro operations for execution by the processor.

Coupled between front end units and execution units is an out of order OOO engine that may be used to receive the micro instructions and prepare them for execution. More specifically OOO engine may include various buffers to re order micro instruction flow and allocate various resources needed for execution as well as to provide renaming of logical registers onto storage locations within various register files such as register file and extended register file . Register file may include separate register files for integer and floating point operations. Extended register file may provide storage for vector sized units e.g. 256 or 512 bits per register.

Various resources may be present in execution units including for example various integer floating point and single instruction multiple data SIMD logic units among other specialized hardware. For example such execution units may include one or more arithmetic logic units ALUs and one or more vector execution units among other such execution units.

Results from the execution units may be provided to retirement logic namely a reorder buffer ROB . More specifically ROB may include various arrays and logic to receive information associated with instructions that are executed. This information is then examined by ROB to determine whether the instructions can be validly retired and result data committed to the architectural state of the processor or whether one or more exceptions occurred that prevent a proper retirement of the instructions. Of course ROB may handle other operations associated with retirement.

As shown in ROB is coupled to a cache which in one embodiment may be a low level cache e.g. an L1 cache although the scope of the present invention is not limited in this regard. Also execution units can be directly coupled to cache . From cache data communication may occur with higher level caches system memory and so forth. While shown with this high level in the embodiment of understand the scope of the present invention is not limited in this regard. For example while the implementation of is with regard to an out of order machine such as of an Intel x86 instruction set architecture ISA the scope of the present invention is not limited in this regard. That is other embodiments may be implemented in an in order processor a reduced instruction set computing RISC processor such as an ARM based processor or a processor of another type of ISA that can emulate instructions and operations of a different ISA via an emulation engine and associated logic circuitry.

Although not shown for ease of illustration in in some embodiments the core may include the compressed domain threshold filter shown in and or the filtering accelerator and or processor engine shown in .

Referring now to shown is a block diagram of a micro architecture of a processor core in accordance with another embodiment. In the embodiment of core may be a low power core of a different micro architecture such as an Intel Atom based processor having a relatively limited pipeline depth designed to reduce power consumption. As seen core includes an instruction cache coupled to provide instructions to an instruction decoder . A branch predictor may be coupled to instruction cache . Note that instruction cache may further be coupled to another level of a cache memory such as an L2 cache not shown for ease of illustration in . In turn instruction decoder provides decoded instructions to an issue queue for storage and delivery to a given execution pipeline. A microcode ROM is coupled to instruction decoder .

A floating point pipeline includes a floating point register file which may include a plurality of architectural registers of a given bit with such as or bits. Pipeline includes a floating point scheduler to schedule instructions for execution on one of multiple execution units of the pipeline. In the embodiment shown such execution units include an ALU a shuffle unit and a floating point adder . In turn results generated in these execution units may be provided back to buffers and or registers of register file . Of course understand while shown with these few example execution units additional or different floating point execution units may be present in another embodiment.

An integer pipeline also may be provided. In the embodiment shown pipeline includes an integer register file which may include a plurality of architectural registers of a given bit with such as 128 or 256 bits. Pipeline includes an integer scheduler to schedule instructions for execution on one of multiple execution units of the pipeline. In the embodiment shown such execution units include an ALU a shifter unit and a jump execution unit . In turn results generated in these execution units may be provided back to buffers and or registers of register file . Of course understand while shown with these few example execution units additional or different integer execution units may be present in another embodiment.

A memory execution scheduler may schedule memory operations for execution in an address generation unit which is also coupled to a TLB . As seen these structures may couple to a data cache which may be a LO and or L1 data cache that in turn couples to additional levels of a cache memory hierarchy including an L2 cache memory.

To provide support for out of order execution an allocator renamer may be provided in addition to a reorder buffer which is configured to reorder instructions executed out of order for retirement in order. Although shown with this particular pipeline architecture in the illustration of understand that many variations and alternatives are possible.

Note that in a processor having asymmetric cores such as in accordance with the micro architectures of workloads may be dynamically swapped between the cores for power management reasons as these cores although having different pipeline designs and depths may be of the same or related ISA. Such dynamic core swapping may be performed in a manner transparent to a user application and possibly kernel also .

Although not shown for ease of illustration in in some embodiments the core may include the compressed domain threshold filter shown in and or the filtering accelerator and or processor engine shown in .

Referring to shown is a block diagram of a micro architecture of a processor core in accordance with yet another embodiment. As illustrated in a core may include a multi staged in order pipeline to execute at very low power consumption levels. As one such example processor may have a micro architecture in accordance with an ARM Cortex A53 design available from ARM Holdings LTD. Sunnyvale Calif. In an implementation an 8 stage pipeline may be provided that is configured to execute both 32 bit and 64 bit code. Core includes a fetch unit that is configured to fetch instructions and provide them to a decode unit which may decode the instructions e.g. macro instructions of a given ISA such as an ARMv8 ISA. Note further that a queue may couple to decode unit to store decoded instructions. Decoded instructions are provided to an issue logic where the decoded instructions may be issued to a given one of multiple execution units.

With further reference to issue logic may issue instructions to one of multiple execution units. In the embodiment shown these execution units include an integer unit a multiply unit a floating point vector unit a dual issue unit and a load store unit . The results of these different execution units may be provided to a writeback unit . Understand that while a single writeback unit is shown for ease of illustration in some implementations separate writeback units may be associated with each of the execution units. Furthermore understand that while each of the units and logic shown in is represented at a high level a particular implementation may include more or different structures. A processor designed using one or more cores having a pipeline as in may be implemented in many different end products extending from mobile devices to server systems.

Although not shown for ease of illustration in in some embodiments the core may include the compressed domain threshold filter shown in and or the filtering accelerator and or processor engine shown in .

Referring now to shown is a block diagram of a micro architecture of a processor core in accordance with a still further embodiment. As illustrated in a core may include a multi stage multi issue out of order pipeline to execute at very high performance levels which may occur at higher power consumption levels than core of . As one such example processor may have a microarchitecture in accordance with an ARM Cortex A57 design. In an implementation a 15 or greater stage pipeline may be provided that is configured to execute both 32 bit and 64 bit code. In addition the pipeline may provide for 3 or greater wide and 3 or greater issue operation. Core includes a fetch unit that is configured to fetch instructions and provide them to a decoder renamer dispatcher which may decode the instructions e.g. macro instructions of an ARMv8 instruction set architecture rename register references within the instructions and dispatch the instructions eventually to a selected execution unit. Decoded instructions may be stored in a queue . Note that while a single queue structure is shown for ease of illustration in understand that separate queues may be provided for each of the multiple different types of execution units.

Also shown in is an issue logic from which decoded instructions stored in queue may be issued to a selected execution unit. Issue logic also may be implemented in a particular embodiment with a separate issue logic for each of the multiple different types of execution units to which issue logic couples.

Decoded instructions may be issued to a given one of multiple execution units. In the embodiment shown these execution units include one or more integer units a multiply unit a floating point vector unit a branch unit and a load store unit . In an embodiment floating point vector unit may be configured to handle SIMD or vector data of 128 or 256 bits. Still further floating point vector execution unit may perform IEEE 754 double precision floating point operations. The results of these different execution units may be provided to a writeback unit . Note that in some implementations separate writeback units may be associated with each of the execution units. Furthermore understand that while each of the units and logic shown in is represented at a high level a particular implementation may include more or different structures.

Note that in a processor having asymmetric cores such as in accordance with the micro architectures of workloads may be dynamically swapped for power management reasons as these cores although having different pipeline designs and depths may be of the same or related ISA. Such dynamic core swapping may be performed in a manner transparent to a user application and possibly kernel also .

Although not shown for ease of illustration in in some embodiments the core may include the compressed domain threshold filter shown in and or the filtering accelerator and or processor engine shown in .

A processor designed using one or more cores having pipelines as in any one or more of may be implemented in many different end products extending from mobile devices to server systems. Referring now to shown is a block diagram of a processor in accordance with another embodiment of the present invention. In the embodiment of processor may be a SoC including multiple domains each of which may be controlled to operate at an independent operating voltage and operating frequency. As a specific illustrative example processor may be an Intel Architecture Core based processor such as an i3 i5 i7 or another such processor available from Intel Corporation. However other low power processors such as available from Advanced Micro Devices Inc. AMD of Sunnyvale Calif. an ARM based design from ARM Holdings Ltd. or licensee thereof or a MIPS based design from MIPS Technologies Inc. of Sunnyvale Calif. or their licensees or adopters may instead be present in other embodiments such as an Apple A7 processor a Qualcomm Snapdragon processor or Texas Instruments OMAP processor. Such SoC may be used in a low power system such as a smartphone tablet computer phablet computer Ultrabook computer or other portable computing device.

In the high level view shown in processor includes a plurality of core units . Each core unit may include one or more processor cores one or more cache memories and other circuitry. Each core unit may support one or more instructions sets e.g. an x86 instruction set with some extensions that have been added with newer versions a MIPS instruction set an ARM instruction set with optional additional extensions such as NEON or other instruction set or combinations thereof. Note that some of the core units may be heterogeneous resources e.g. of a different design . In addition each such core may be coupled to a cache memory not shown which in an embodiment may be a shared level L2 cache memory. A non volatile storage may be used to store various program and other data. For example this storage may be used to store at least portions of microcode boot information such as a BIOS other system software or so forth.

Each core unit may also include an interface such as a bus interface unit to enable interconnection to additional circuitry of the processor. In an embodiment each core unit couples to a coherent fabric that may act as a primary cache coherent on die interconnect that in turn couples to a memory controller . In turn memory controller controls communications with a memory such as a DRAM not shown for ease of illustration in .

In addition to core units additional processor engines are present within the processor including at least one graphics unit which may include one or more graphics processing units GPUs to perform graphics processing as well as to possibly execute general purpose operations on the graphics processor so called GPGPU operation . In addition at least one image signal processor may be present. Signal processor may be configured to process incoming image data received from one or more capture devices either internal to the SoC or off chip.

Other accelerators also may be present. In the illustration of a video coder may perform coding operations including encoding and decoding for video information e.g. providing hardware acceleration support for high definition video content. A display controller further may be provided to accelerate display operations including providing support for internal and external displays of a system. In addition a security processor may be present to perform security operations such as secure boot operations various cryptography operations and so forth.

Each of the units may have its power consumption controlled via a power manager which may include control logic to perform the various power management techniques described herein.

In some embodiments SoC may further include a non coherent fabric coupled to the coherent fabric to which various peripheral devices may couple. One or more interfaces enable communication with one or more off chip devices. Such communications may be according to a variety of communication protocols such as PCIe GPIO USB IC UART MIPI SDIO DDR SPI HDMI among other types of communication protocols. Although shown at this high level in the embodiment of understand the scope of the present invention is not limited in this regard.

Although not shown for ease of illustration in in some embodiments the SoC may include the compressed domain threshold filter shown in and or the filtering accelerator and or processor engine shown in .

Referring now to shown is a block diagram of a representative SoC. In the embodiment shown SoC may be a multi core SoC configured for low power operation to be optimized for incorporation into a smartphone or other low power device such as a tablet computer or other portable computing device. As an example SoC may be implemented using asymmetric or different types of cores such as combinations of higher power and or low power cores e.g. out of order cores and in order cores. In different embodiments these cores may be based on an Intel Architecture core design or an ARM architecture design. In yet other embodiments a mix of Intel and ARM cores may be implemented in a given SoC.

As seen in SoC includes a first core domain having a plurality of first cores . In an example these cores may be low power cores such as in order cores. In one embodiment these first cores may be implemented as ARM Cortex A53 cores. In turn these cores couple to a cache memory of core domain . In addition SoC includes a second core domain . In the illustration of second core domain has a plurality of second cores . In an example these cores may be higher power consuming cores than first cores . In an embodiment the second cores may be out of order cores which may be implemented as ARM Cortex A57 cores. In turn these cores couple to a cache memory of core domain . Note that while the example shown in includes 4 cores in each domain understand that more or fewer cores may be present in a given domain in other examples.

With further reference to a graphics domain also is provided which may include one or more graphics processing units GPUs configured to independently execute graphics workloads e.g. provided by one or more cores of core domains and . As an example GPU domain may be used to provide display support for a variety of screen sizes in addition to providing graphics and display rendering operations.

As seen the various domains couple to a coherent interconnect which in an embodiment may be a cache coherent interconnect fabric that in turn couples to an integrated memory controller . Coherent interconnect may include a shared cache memory such as an L3 cache some examples. In an embodiment memory controller may be a direct memory controller to provide for multiple channels of communication with an off chip memory such as multiple channels of a DRAM not shown for ease of illustration in .

In different examples the number of the core domains may vary. For example for a low power SoC suitable for incorporation into a mobile computing device a limited number of core domains such as shown in may be present. Still further in such low power SoCs core domain including higher power cores may have fewer numbers of such cores. For example in one implementation two cores may be provided to enable operation at reduced power consumption levels. In addition the different core domains may also be coupled to an interrupt controller to enable dynamic swapping of workloads between the different domains.

In yet other embodiments a greater number of core domains as well as additional optional IP logic may be present in that an SoC can be scaled to higher performance and power levels for incorporation into other computing devices such as desktops servers high performance computing systems base stations forth. As one such example 4 core domains each having a given number of out of order cores may be provided. Still further in addition to optional GPU support which as an example may take the form of a GPGPU one or more accelerators to provide optimized hardware support for particular functions e.g. web serving network processing switching or so forth also may be provided. In addition an input output interface may be present to couple such accelerators to off chip components.

Although not shown for ease of illustration in in some embodiments the SoC may include the compressed domain threshold filter shown in and or the filtering accelerator and or processor engine shown in .

Referring now to shown is a block diagram of another example SoC. In the embodiment of SoC may include various circuitry to enable high performance for multimedia applications communications and other functions. As such SoC is suitable for incorporation into a wide variety of portable and other devices such as smartphones tablet computers smart TVs and so forth. In the example shown SoC includes a central processor unit CPU domain . In an embodiment a plurality of individual processor cores may be present in CPU domain . As one example CPU domain may be a quad core processor having 4 multithreaded cores. Such processors may be homogeneous or heterogeneous processors e.g. a mix of low power and high power processor cores.

In turn a GPU domain is provided to perform advanced graphics processing in one or more GPUs to handle graphics and compute APIs. A DSP unit may provide one or more low power DSPs for handling low power multimedia applications such as music playback audio video and so forth in addition to advanced calculations that may occur during execution of multimedia instructions. In turn a communication unit may include various components to provide connectivity via various wireless protocols such as cellular communications including 3G 4G LTE wireless local area techniques such as Bluetooth IEEE 802.11 and so forth.

Still further a multimedia processor may be used to perform capture and playback of high definition video and audio content including processing of user gestures. A sensor unit may include a plurality of sensors and or a sensor controller to interface to various off chip sensors present in a given platform. An image signal processor may be provided with one or more separate ISPs to perform image processing with regard to captured content from one or more cameras of a platform including still and video cameras.

A display processor may provide support for connection to a high definition display of a given pixel density including the ability to wirelessly communicate content for playback on such display. Still further a location unit may include a GPS receiver with support for multiple GPS constellations to provide applications highly accurate positioning information obtained using as such GPS receiver. Understand that while shown with this particular set of components in the example of many variations and alternatives are possible.

Although not shown for ease of illustration in in some embodiments the SoC may include the compressed domain threshold filter shown in and or the filtering accelerator and or processor engine shown in .

Referring now to shown is a block diagram of an example system with which embodiments can be used. As seen system may be a smartphone or other wireless communicator. A baseband processor is configured to perform various signal processing with regard to communication signals to be transmitted from or received by the system. In turn baseband processor is coupled to an application processor which may be a main CPU of the system to execute an OS and other system software in addition to user applications such as many well known social media and multimedia apps. Application processor may further be configured to perform a variety of other computing operations for the device.

In turn application processor can couple to a user interface display e.g. a touch screen display. In addition application processor may couple to a memory system including a non volatile memory namely a flash memory and a system memory namely a dynamic random access memory DRAM . As further seen application processor further couples to a capture device such as one or more image capture devices that can record video and or still images.

Still referring to a universal integrated circuit card UICC comprising a subscriber identity module and possibly a secure storage and cryptoprocessor is also coupled to application processor . System may further include a security processor that may couple to application processor . A plurality of sensors may couple to application processor to enable input of a variety of sensed information such as accelerometer and other environmental information. An audio output device may provide an interface to output sound e.g. in the form of voice communications played or streaming audio data and so forth.

As further illustrated a near field communication NFC contactless interface is provided that communicates in a NFC near field via an NFC antenna . While separate antennae are shown in understand that in some implementations one antenna or a different set of antennae may be provided to enable various wireless functionality.

A power management integrated circuit PMIC couples to application processor to perform platform level power management. To this end PMIC may issue power management requests to application processor to enter certain low power states as desired. Furthermore based on platform constraints PMIC may also control the power level of other components of system .

To enable communications to be transmitted and received various circuitry may be coupled between baseband processor and an antenna . Specifically a radio frequency RF transceiver and a wireless local area network WLAN transceiver may be present. In general RF transceiver may be used to receive and transmit wireless data and calls according to a given wireless communication protocol such as 3G or 4G wireless communication protocol such as in accordance with a code division multiple access CDMA global system for mobile communication GSM long term evolution LTE or other protocol. In addition a GPS sensor may be present. Other wireless communications such as receipt or transmission of radio signals e.g. AM FM and other signals may also be provided. In addition via WLAN transceiver local wireless communications such as according to a Bluetooth standard or an IEEE 802.11 standard such as IEEE 802.11a b g n can also be realized.

Although not shown for ease of illustration in in some embodiments the system may include the compressed domain threshold filter shown in and or the filtering accelerator and or processor engine shown in .

Referring now to shown is a block diagram of another example system with which embodiments may be used. In the illustration of system may be mobile low power system such as a tablet computer 2 1 tablet phablet or other convertible or standalone tablet system. As illustrated a SoC is present and may be configured to operate as an application processor for the device.

A variety of devices may couple to SoC . In the illustration shown a memory subsystem includes a flash memory and a DRAM coupled to SoC . In addition a touch panel is coupled to the SoC to provide display capability and user input via touch including provision of a virtual keyboard on a display of touch panel . To provide wired network connectivity SoC couples to an Ethernet interface . A peripheral hub is coupled to SoC to enable interfacing with various peripheral devices such as may be coupled to system by any of various ports or other connectors.

In addition to internal power management circuitry and functionality within SoC a PMIC is coupled to SoC to provide platform based power management e.g. based on whether the system is powered by a battery or AC power via an AC adapter . In addition to this power source based power management PMIC may further perform platform power management activities based on environmental and usage conditions. Still further PMIC may communicate control and status information to SoC to cause various power management actions within SoC .

Still referring to to provide for wireless capabilities a WLAN unit is coupled to SoC and in turn to an antenna . In various implementations WLAN unit may provide for communication according to one or more wireless protocols including an IEEE 802.11 protocol a Bluetooth protocol or any other wireless protocol.

As further illustrated a plurality of sensors may couple to SoC . These sensors may include various accelerometer environmental and other sensors including user gesture sensors. Finally an audio codec is coupled to SoC to provide an interface to an audio output device . Of course understand that while shown with this particular implementation in many variations and alternatives are possible.

Although not shown for ease of illustration in in some embodiments the system may include the compressed domain threshold filter shown in and or the filtering accelerator and or processor engine shown in .

Referring now to a block diagram of a representative computer system such as notebook Ultrabook or other small form factor system. A processor in one embodiment includes a microprocessor multi core processor multithreaded processor an ultra low voltage processor an embedded processor or other known processing element. In the illustrated implementation processor acts as a main processing unit and central hub for communication with many of the various components of the system . As one example processor is implemented as a SoC.

Processor in one embodiment communicates with a system memory . As an illustrative example the system memory is implemented via multiple memory devices or modules to provide for a given amount of system memory.

To provide for persistent storage of information such as data applications one or more operating systems and so forth a mass storage may also couple to processor . In various embodiments to enable a thinner and lighter system design as well as to improve system responsiveness this mass storage may be implemented via a SSD or the mass storage may primarily be implemented using a hard disk drive HDD with a smaller amount of SSD storage to act as a SSD cache to enable non volatile storage of context state and other such information during power down events so that a fast power up can occur on re initiation of system activities. Also shown in a flash device may be coupled to processor e.g. via a serial peripheral interface SPI . This flash device may provide for non volatile storage of system software including a basic input output software BIOS as well as other firmware of the system.

Various input output I O devices may be present within system . Specifically shown in the embodiment of is a display which may be a high definition LCD or LED panel that further provides for a touch screen . In one embodiment display may be coupled to processor via a display interconnect that can be implemented as a high performance graphics interconnect. Touch screen may be coupled to processor via another interconnect which in an embodiment can be an IC interconnect. As further shown in in addition to touch screen user input by way of touch can also occur via a touch pad which may be configured within the chassis and may also be coupled to the same IC interconnect as touch screen .

For perceptual computing and other purposes various sensors may be present within the system and may be coupled to processor in different manners. Certain inertial and environmental sensors may couple to processor through a sensor hub e.g. via an IC interconnect. In the embodiment shown in these sensors may include an accelerometer an ambient light sensor ALS a compass and a gyroscope . Other environmental sensors may include one or more thermal sensors which in some embodiments couple to processor via a system management bus SMBus bus.

Also seen in various peripheral devices may couple to processor via a low pin count LPC interconnect. In the embodiment shown various components can be coupled through an embedded controller . Such components can include a keyboard e.g. coupled via a PS2 interface a fan and a thermal sensor . In some embodiments touch pad may also couple to EC via a PS2 interface. In addition a security processor such as a trusted platform module TPM in accordance with the Trusted Computing Group TCG TPM Specification Version 1.2 dated Oct. 2 2003 may also couple to processor via this LPC interconnect.

System can communicate with external devices in a variety of manners including wirelessly. In the embodiment shown in various wireless modules each of which can correspond to a radio configured for a particular wireless communication protocol are present. One manner for wireless communication in a short range such as a near field may be via a NFC unit which may communicate in one embodiment with processor via an SMBus. Note that via this NFC unit devices in close proximity to each other can communicate.

As further seen in additional wireless units can include other short range wireless engines including a WLAN unit and a Bluetooth unit . Using WLAN unit Wi Fi communications in accordance with a given IEEE 802.11 standard can be realized while via Bluetooth unit short range communications via a Bluetooth protocol can occur. These units may communicate with processor via e.g. a USB link or a universal asynchronous receiver transmitter UART link. Or these units may couple to processor via an interconnect according to a PCIe protocol or another such protocol such as a serial data input output SDIO standard.

In addition wireless wide area communications e.g. according to a cellular or other wireless wide area protocol can occur via a WWAN unit which in turn may couple to a subscriber identity module SIM . In addition to enable receipt and use of location information a GPS module may also be present. Note that in the embodiment shown in WWAN unit and an integrated capture device such as a camera module may communicate via a given USB protocol such as a USB 2.0 or 3.0 link or a UART or IC protocol.

An integrated camera module can be incorporated in the lid. To provide for audio inputs and outputs an audio processor can be implemented via a digital signal processor DSP which may couple to processor via a high definition audio HDA link. Similarly DSP may communicate with an integrated coder decoder CODEC and amplifier that in turn may couple to output speakers which may be implemented within the chassis. Similarly amplifier and CODEC can be coupled to receive audio inputs from a microphone which in an embodiment can be implemented via dual array microphones such as a digital microphone array to provide for high quality audio inputs to enable voice activated control of various operations within the system. Note also that audio outputs can be provided from amplifier CODEC to a headphone jack . Although shown with these particular components in the embodiment of understand the scope of the present invention is not limited in this regard.

Although not shown for ease of illustration in in some embodiments the system may include the compressed domain threshold filter shown in and or the filtering accelerator and or processor engine shown in .

Embodiments may be implemented in many different system types. Referring now to shown is a block diagram of a system in accordance with an embodiment of the present invention. As shown in multiprocessor system is a point to point interconnect system and includes a first processor and a second processor coupled via a point to point interconnect . As shown in each of processors and may be multicore processors including first and second processor cores i.e. processor cores and and processor cores and although potentially many more cores may be present in the processors. Each of the processors can include a PCU or other power management logic to perform processor based power management as described herein.

Still referring to first processor further includes a memory controller hub MCH and point to point P P interfaces and . Similarly second processor includes a MCH and P P interfaces and . As shown in MCH s and couple the processors to respective memories namely a memory and a memory which may be portions of system memory e.g. DRAM locally attached to the respective processors. First processor and second processor may be coupled to a chipset via P P interconnects and respectively. As shown in chipset includes P P interfaces and .

Furthermore chipset includes an interface to couple chipset with a high performance graphics engine by a P P interconnect . In turn chipset may be coupled to a first bus via an interface . As shown in various input output I O devices may be coupled to first bus along with a bus bridge which couples first bus to a second bus . Various devices may be coupled to second bus including for example a keyboard mouse communication devices and a data storage unit such as a disk drive or other mass storage device which may include code in one embodiment. Further an audio I O may be coupled to second bus . Embodiments can be incorporated into other types of systems including mobile devices such as a smart cellular telephone tablet computer netbook Ultrabook or so forth.

Although not shown for ease of illustration in in some embodiments the system may include the compressed domain threshold filter shown in and or the filtering accelerator and or processor engine shown in .

Embodiments may be implemented in code and may be stored on a non transitory storage medium having stored thereon instructions which can be used to program a system to perform the instructions. The storage medium may include but is not limited to any type of disk including floppy disks optical disks solid state drives SSDs compact disk read only memories CD ROMs compact disk rewritables CD RWs and magneto optical disks semiconductor devices such as read only memories ROMs random access memories RAMs such as dynamic random access memories DRAMs static random access memories SRAMs erasable programmable read only memories EPROMs flash memories electrically erasable programmable read only memories EEPROMs magnetic or optical cards or any other type of media suitable for storing electronic instructions.

In one example a processor for performing compressed data filtering includes a plurality of cores and a compression domain threshold filter coupled to the plurality of cores. The compression domain threshold filter is to receive a sample vector of compressed data to be filtered calculate based at least on a first subset of the elements of the sample vector an estimated upper bound value of a dot product of the sample vector and a steering vector determine whether the estimated upper bound value of the dot product satisfies a filter threshold value and in response to a determination that the estimated upper bound value of the dot product does not satisfy the filter threshold value discard the sample vector without completion of a calculation of the dot product of the sample vector and the steering vector.

In an example the compression domain threshold filter is further to calculate a first portion of the dot product using the first subset of elements of the sample vector and a first subset of elements of the steering vector wherein the first subset of elements of the steering vector is associated with the first subset of elements of the sample vector and calculate the estimated upper bound value of the dot product using at least the first portion of the dot product. In an example the compression domain threshold filter is further to calculate a first product by multiplication of a maximum value of a remainder of the elements of the sample vector times a value of an element x of the steering vector wherein the element x of the steering vector is a next element after the first subset of the elements of the steering vector calculate a second product by multiplication of the first product times a total number of the remainder of the elements of the sample vector and calculate the estimated upper bound value of the dot product by summation of the first portion of the dot product and the second product.

In an example the compression domain threshold filter is further to in response to a determination that the estimated upper bound value of the dot product satisfies the filter threshold value evaluate a remainder of the elements of the sample vector calculate the dot product based on the elements of the sample vector and determine whether the dot product satisfies the filter threshold value.

In an example the compression domain threshold filter is further to in response to a determination that the estimated upper bound value of the dot product satisfies the filter threshold value calculate based on a second subset of the elements of the sample vector a second estimated upper bound value of the dot product of the sample vector and the steering vector and determine whether the second estimated upper bound value of the dot product satisfies the threshold value where the first subset of the elements is included in the second subset of the elements.

In an example the compression domain threshold filter is to calculate the estimated upper bound value in response to reaching a first checkpoint element of a number of checkpoint elements wherein the number of checkpoint elements is based on the length of the sample vector.

In an example the compression domain threshold filter is to switch between a steering vector sorting mode a threshold filtering mode and a covariance computation mode. In an example when in the steering vector sorting mode the compression domain threshold filter is to receive the steering vector wherein the steering vector is based on the compressed data and sort each element of the steering vector in order of decreasing value.

In another example a method for performing compressed data filtering includes receiving at a hardware accelerator of a processor a sample vector including N elements of compressed data iterating by the hardware accelerator through a first subset of elements of the sample vector to calculate a first portion of a dot product of the sample vector and a steering vector calculating by the hardware accelerator an estimated upper bound value of the dot product using at least the first portion of the dot product and in response to a determination that the estimated upper bound value of the dot product does not satisfy a filter threshold value dropping the sample vector without completing a calculation of the dot product of the sample vector and the steering vector.

In an example the first subset of elements of the sample vector includes elements to M and calculating the first portion of the dot product includes for each element i from to M multiplying a value xi of the steering vector times a value yi of the sample vector to obtain a product Pi and summing the products PO to PM to obtain the first portion of the dot product.

In an example the method also includes calculating by the hardware accelerator a second portion of the dot product by multiplying a maximum value of a remainder of the elements of the sample vector times a value of element M 1 of the steering vector times a total number of the remainder of the elements of the sample vector wherein the remainder of the elements of the sample vector includes elements from M 1 to N of the sample vector and calculating by the hardware accelerator the estimated upper bound value of the dot product by summing the first portion of the dot product and the second portion of the dot product.

In an example the method also includes in response to a determination that the estimated upper bound value of the dot product satisfies the filter threshold value continuing an evaluation of the remainder of the elements of the sample vector.

In an example the method also includes in response to a determination that an update to the steering vector is required calculating a covariance matrix based on the compressed data calculating the steering vector based on the covariance matrix and sorting by the hardware accelerator each element of the steering vector in order of decreasing value.

In an example calculating the estimated upper bound value of the dot product is performed in response to reaching a first checkpoint element of a number of checkpoint elements.

In another example a machine readable medium has stored thereon data which if used by at least one machine causes the at least one machine to fabricate at least one integrated circuit to perform the method of any of the above examples.

In another example an apparatus for processing instructions is configured to perform the method of any of the above examples.

In another example a system comprises a hardware accelerator including a plurality of processor engines and at least one core to execute at least one application. Each processor engine is to iterate through elements of a sample vector of compressed data to perform calculations for a dot product of the sample vector and a steering vector. Each processor engine is also to in response to reaching an element specified as a checkpoint in the sample vector calculate using at least a first subset of the elements of the sample vector an estimated upper bound for the dot product determine whether the estimated upper bound of the dot product satisfies a filter threshold value in response to a determination that the upper bound value of the dot product satisfies the filter threshold value iterate through at least some remaining elements of the sample vector and in response to a determination that the upper bound value of the dot product does not satisfy the filter threshold value filter the sample vector. The at least one application may use the sample vector when the sample vector is not filtered by the hardware accelerator.

In an example the hardware accelerator is to switch between at least two of a steering vector sorting mode a threshold filtering mode and a covariance computation mode.

In an example the plurality of processor engines are connected in series from a first processor engine to a last processor engine and when in the steering vector sorting mode elements of the steering vector are individually provided to the first processor engine and the elements of the steering vector are linearly sorted from the first processor engine to the last processor engine.

In an example when in the covariance computation mode the plurality of processor engines perform a sequential calculation on the compressed data from the first processor engine to the last processor engine to generate a covariance matrix.

In an example when in the threshold filtering mode each processor engine of the plurality of processor engines is to process one sample vector of compressed data in parallel.

In an example when in the threshold filtering mode each processor engine of the plurality of processor engines is to use the steering vector.

In an example the at least one application is to in response to a determination that an update to the steering vector is required update the steering vector based on a covariance matrix.

In an example the at least one application is to in response to a determination that a rejection rate of the hardware accelerator is outside an acceptable range adjust the filter threshold level.

In an example the checkpoint element of the sample vector is one of a number of checkpoint elements of the sample vector where the number of checkpoint elements is based on the length of the sample vector.

Embodiments may be used in many different types of systems. For example in one embodiment a communication device can be arranged to perform the various methods and techniques described herein. Of course the scope of the present invention is not limited to a communication device and instead other embodiments can be directed to other types of apparatus for processing instructions or one or more machine readable media including instructions that in response to being executed on a computing device cause the device to carry out one or more of the methods and techniques described herein.

References throughout this specification to one embodiment or an embodiment mean that a particular feature structure or characteristic described in connection with the embodiment is included in at least one implementation encompassed within the present invention. Thus appearances of the phrase one embodiment or in an embodiment are not necessarily referring to the same embodiment. Furthermore the particular features structures or characteristics may be instituted in other suitable forms other than the particular embodiment illustrated and all such forms may be encompassed within the claims of the present application.

While the present invention has been described with respect to a limited number of embodiments those skilled in the art will appreciate numerous modifications and variations therefrom. It is intended that the appended claims cover all such modifications and variations as fall within the true spirit and scope of this present invention.

