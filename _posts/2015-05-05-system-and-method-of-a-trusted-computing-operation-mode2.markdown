---

title: System and method of a trusted computing operation mode
abstract: A security monitor processing server is disclosed. The server comprises a plurality of processors, a memory, and a security monitor application that, when executed by a first processor checks for a message that requests establishment of a secure communication link between a different server and the server directed to it by the different server. The application sends a request to an operating system (OS) to suspend functionality of the other processors except for the first processor. The application sends a request to the OS to suspend a process executing on the first processor. The application conducts a communication session with the different server. The application, responsive to completion of the communication session sends a request to the OS to allow the other processors to resume functionality. The application sends a request to the OS to resume execution of the suspended process on the first processor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09565168&OS=09565168&RS=09565168
owner: Sprint Communications Company L.P.
number: 09565168
owner_city: Overland Park
owner_country: US
publication_date: 20150505
---
Some servers may utilize hardware assisted trust and some servers may not utilize hardware assisted trust. Servers that utilize hardware assisted trust may not be able to communicate with servers that do not utilize hardware assisted trust. Trusted servers may not be able to communicate with servers without trust because the trusted servers have technology that prevents the trusted servers from communicating with the non trusted servers. The non trusted servers may not be able to communicate with the trusted servers due to a lack of hardware support for trusted operations that allows the trusted servers to communicate in trust.

In an embodiment a security monitor processing server is disclosed. The server comprises a plurality of processors a memory and a security monitor application stored to the memory. The security monitor application when executed by a first processor of the plurality of processors checks for a message from a different server that requests establishment of a secure communication link between the different server and the security monitor application. The application responsive to finding the message sends a request to an operating system on the security monitor processing server to suspend functionality of the other processors of the plurality of processors except for the first processor. The application responsive to finding the message sends a request to the operating system to suspend a process executing on the first processor. The application conducts a communication session with the different server. The application responsive to completion of the communication session sends a request to the operating system to allow the other processors to resume functionality. The application responsive to completion of the communication session sends a request to the operating system to resume execution of the suspended process on the first processor.

In an embodiment a method of establishing hardware assisted trust to a communication server that does not utilize hardware assisted trust is disclosed. The method comprises a secure application of a security monitor server checking for a message that requests for establishment of a secure communication link between the first security monitor server and a different server wherein the application is executed on a first processor of a plurality of processors wherein the message is directed to the secure application from the different server. The method further comprises the application responsive to finding the message sending a request to an operating system to suspend the other processors of the plurality of processors except for the first processor. The method further comprises the application responsive to finding the message sending a request to the operating system to suspend a process executing on the first processor. The method further comprises the application conducting a communication session with the different server. The method further comprises the application responsive to completing the communication session sending a request to the operating system to release the other processors to resume functionality. The method further comprises the application responsive to completing the communication session sending a request to the operating system to resume execution of the suspended process on the first processor.

In an embodiment a method of establishing hardware assisted trust to a communication server that does not utilize hardware assisted trust is disclosed. The method comprises a security monitor application of a first server checking for a message from a second server that requests establishment of a secure communication link between the first server and the second server wherein the security monitor application is executed on a first processor of a plurality of processors wherein the message is directed to a secure application that also executes on the first processors wherein the message is from the second server. The method further comprises the security monitor application responsive to finding the message sending a request to an operating system to suspend the other processors among the plurality of processors except for the first processor wherein the security monitor application receives the message and a security token from the second server wherein the security token identifies the second server as a secure server. The method further comprises the security monitor application responsive to finding the message sending a request to the operating system to suspend a process executing on the first processor. The method further comprises the security monitor application invoking a secure application that executes on the first processor wherein the security monitor application sends a request to the operating system to invoke the secure application. The method further comprises the security monitor application sending the message to the secure application wherein the secure application engages in a communication session with the second server when trust has been established between the security monitor application and the second server. The method further comprises the security monitor application receiving a message from the secure application wherein the secure application sends a message to the security monitor application when it has finished the communication session with the second server. The method further comprises the security monitor application stopping the secure application wherein the security monitor application sends a request to the operating system to stop the secure application wherein the secure application does not work until it is re invoked. The method further comprises the security monitor application sending a request to the operating system to release the other processors from their suspended state and resume functionality. The method further comprises the security monitor application sending a request to the operating system to resume execution of the suspended process on the first processor.

These and other features will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings and claims.

It should be understood at the outset that although illustrative implementations of one or more embodiments are illustrated below the disclosed systems and methods may be implemented using any number of techniques whether currently known or not yet in existence. The disclosure should in no way be limited to the illustrative implementations drawings and techniques illustrated below but may be modified within the scope of the appended claims along with their full scope of equivalents.

The present disclosure teaches a system and methods for secure operation between servers that either utilize hardware assisted trust or do not utilize hardware assisted trust. Prior to implementation of a security monitor application that is described herein servers were unable to conduct trusted operations with servers that do not utilize hardware assisted trust.

The security monitor application is able to set up a trusted environment for communication between the security monitor processing server that does not utilize hardware assisted trust and another server that does utilize hardware assisted trust. By setting up a trusted environment to communicate and or process instructions such as writing data editing data performing transactions performing service requests and other instructions in the security monitor application enables the security monitor processing server to communicate with other servers that utilizes hardware assisted trust. This benefits companies that use servers that do not utilize hardware assisted trust so that they do not have to purchase or acquire new servers that do utilize hardware assisted trust in order to interwork with servers executing in trust.

For example an application on a server A performs a trusted block of code. Server A executes that trusted block of code using hardware assisted trust and or in a trusted execution environment as discussed more fully hereinafter. The trusted block of code requests an operation to be performed on its behalf by an application on a server B. Sever B however does not have hardware support for trusted execution. Those skilled in the art may use the present disclosure to achieve many of the purposes or requirements of trusted execution in hardware assisted trust but instead of having hardware assisted trust utilizing a software application in this case the security monitor application and operating system support on the server B to assure that no other processors or processes can be executing when the security monitory application possibly aided by a secure application launched by the security monitor application and the operating system are performing the operation requested to be done with trust.

In an embodiment a security monitor processing server comprises the security monitor application. The security monitor application may be implemented to facilitate communication between the security monitor processing server that does not utilize hardware assisted trust and other servers that do utilize hardware assisted trust. The security monitor application checks for a message directed to the security monitor application from a different server where the message requests the establishment of a secure communication link between the different server and the security monitor processing server. When the security monitor application finds the message that has been sent to it the security monitor application sends a request to an operating system of the security monitor processing server to suspend functionality of a plurality of processors of the server except for a first processor that the security monitor application executes on. The security monitor application also sends a request to the operating system to suspend other processes that may be executing on the first processor. In an embodiment the security monitor processing server may be described as semi secure because initially the security monitor processing server is inherently non trusted this remains the case until the security monitor application initiates suspension of other processors of the plurality of processors of the security monitor processing server and the other processes executing on the processor that the security monitor application is executing on.

The different server sends a security token or another form of validation for the security monitor application to use to establish that the different server is a secure server that the security monitor processing server may communicate with in trust once trust has been established by the security monitor application. Once trust has been established by the security monitor application the application conducts a communication session with the different server. During the communication session information is exchanged in trust between the security monitor application and the different server.

In an embodiment there may be a conflict of security when the security monitor processing server requests the suspension of the other processers and processes occurring on the security monitor processing server. The conflict may arise from how the security monitor processing application is able to be made aware of or able to validate that the process of suspending the other processers and processes on the active processor has occurred. There may be several ways the security monitor application may accomplish this. One implementation may involve the security monitor application delaying itself from taking action for a pre defined period of time so that the operating system may have time to suspend the other processors and the processes that are occurring on the active processor. Another implementation may involve the security monitor application invoking a confirmation method in the operating system so that the shutdown of the other processors and the processes occurring on the first processor may be confirmed. The confirmation method may be implemented in the operating system. In different embodiments one or the other of these two approaches may be employed without using the other approach. Alternatively in some embodiments both approaches may be used in a complementary manner. For example a delay may be observed and then the security monitor application may invoke the confirmation method in the operating system. In another embodiment the operating system may provide an atomic instruction or command for requesting suspension of other processes and or other processors such that when instruction completes an operation status is returned to the invoking process i.e. the security monitor application that the other processes and or processors have been suspended and hence secure communications may proceed or to the contrary that suspension of processes and or processors have failed and hence secure communications may not be supported at that time. These implementations may promote secure set up of the secure communication link between the processing server and the different server.

Once the communication session has been completed the security monitor application sends a request to the operating system to allow the other processors to resume functionality. The security monitor application also sends a request to the operating system to resume functionality of the process that was executing on the processor that the security monitor application executes on.

In an embodiment there may be a separate secure application that performs an operation requested by the other server. The security monitor application may serve as an intermediary to the secure application and the secure application may communicate with the different server after the security monitor application has established trust with the different server. In an embodiment the secure application may be integrated into the security monitor application. In another embodiment the security monitor application and the secure application may be separate. The secure application may be dormant while the security monitor application checks for messages from different servers. The security monitor application may start and stop functionality of the secure application via requests sent to the operating system. When a message is received from a different server the security monitor application may transmit the message to the secure application and the security monitor application may go dormant as the secure application conducts a communication session with the different server.

In an example of the system an auditing company may wish to retrieve information and records from a client company so that they are able to perform a full evaluation. The auditing company may own a server that is able to utilize hardware assisted trust while the server of the client company that the auditing company wants to retrieve information from does not utilize hardware assisted trust. However the client company may utilize the security monitor application so that it can set up a trusted environment for trusted communication. The security monitor application of the client company may wait to receive a message from the auditing company receive the message establish trust with the auditing company server conduct a communication session where the information is exchanged in trust and after conducting the communication session resume function as a non trusted server.

The security monitor application provides companies that use servers without hardware assisted trust capability the ability to communicate with servers that utilize hardware assisted trust without having to replace the servers that do not utilize hardware assisted trust. The security monitor application is able to set up a trusted environment for communication where trusted and secure communication between a trusted server and a non trusted server is established and accomplished. This function benefits a company that utilizes servers that do not have hardware assisted trust to be able to retain their servers and continue to use their servers without having to purchase or acquire servers.

A trusted security zone provides chipsets with a hardware root of trust a secure execution environment for applications and secure access to peripherals. A hardware root of trust means the chipset should only execute programs intended by the device manufacturer or vendor and resists software and physical attacks and therefore remains trusted to provide the intended level of security. The chipset architecture is designed to promote a programmable environment that allows the confidentiality and integrity of assets to be protected from specific attacks. Trusted security zone capabilities are becoming features in both wireless and fixed hardware architecture designs. Providing the trusted security zone in the main mobile device chipset and protecting the hardware root of trust removes the need for separate secure hardware to authenticate the device or user. To ensure the integrity of the applications requiring trusted data such as a mobile financial services application the trusted security zone also provides the secure execution environment where only trusted applications can operate safe from attacks. Security is further promoted by restricting access of non trusted applications to peripherals such as data inputs and data outputs while a trusted application is running in the secure execution environment. In an embodiment the trusted security zone may be conceptualized as hardware assisted security.

A complete Trusted Execution Environment TEE may be implemented through the use of the trusted security zone hardware and software architecture. The Trusted Execution Environment is an execution environment that is parallel to the execution environment of the main mobile device operating system. The Trusted Execution Environment and or the trusted security zone may provide a base layer of functionality and or utilities for use of applications that may execute in the trusted security zone. For example in an embodiment trust tokens may be generated by the base layer of functionality and or utilities of the Trusted Execution Environment and or trusted security zone for use in trusted end to end communication links to document a continuity of trust of the communications. Through standardization of application programming interfaces APIs the Trusted Execution Environment becomes a place to which scalable deployment of secure services can be targeted. A device which has a chipset that has a Trusted Execution Environment on it may exist in a trusted services environment where devices in the trusted services environment are trusted and protected against attacks. The Trusted Execution Environment can be implemented on mobile phones and tablets as well as extending to other trusted devices such as personal computers servers sensors medical devices point of sale terminals industrial automation handheld terminals automotive etc.

The trusted security zone is implemented by partitioning all of the hardware and software resources of the mobile device into two partitions a secure partition and a normal partition. The secure partition may be implemented by a first physical processor and the normal partition may be implemented by a second physical processor. Alternatively the secure partition may be implemented by a first virtual processor and the normal partition may be implemented by a second virtual processor. Placing sensitive resources in the secure partition can protect against possible attacks on those resources. For example resources such as trusted software applications may run in the secure partition and have access to hardware peripherals such as a touchscreen or a secure location in memory. Less secure peripherals such as wireless radios may be disabled completely while the secure partition is being accessed while other peripherals may only be accessed from the secure partition. While the secure partition is being accessed through the Trusted Execution Environment the main mobile operating system in the normal partition is suspended and applications in the normal partition are prevented from accessing the secure peripherals and data. This prevents corrupted applications or malware applications from breaking the trust of the device.

The trusted security zone is implemented by partitioning the hardware and software resources to exist in a secure subsystem which is not accessible to components outside the secure subsystem. The trusted security zone is built into the processor architecture at the time of manufacture through hardware logic present in the trusted security zone which enables a perimeter boundary between the secure partition and the normal partition. The trusted security zone may only be manipulated by those with the proper credential and in an embodiment may not be added to the chip after it is manufactured. Software architecture to support the secure partition may be provided through a dedicated secure kernel running trusted applications. Trusted applications are independent secure applications which can be accessed by normal applications through an application programming interface in the Trusted Execution Environment on a chipset that utilizes the trusted security zone.

In an embodiment the normal partition applications run on a first virtual processor and the secure partition applications run on a second virtual processor. Both virtual processors may run on a single physical processor executing in a time sliced fashion removing the need for a dedicated physical security processor. Time sliced execution comprises switching contexts between the two virtual processors to share processor resources based on tightly controlled mechanisms such as secure software instructions or hardware exceptions. The context of the currently running virtual processor is saved the context of the virtual processor being switched to is restored and processing is restarted in the restored virtual processor. Time sliced execution protects the trusted security zone by stopping the execution of the normal partition while the secure partition is executing.

The two virtual processors context switch via a processor mode called monitor mode when changing the currently running virtual processor. The mechanisms by which the processor can enter monitor mode from the normal partition are tightly controlled. The entry to monitor mode can be triggered by software executing a dedicated instruction the Secure Monitor Call SMC instruction or by a subset of the hardware exception mechanisms such as hardware interrupts which can be configured to cause the processor to switch into monitor mode. The software that executes within monitor mode then saves the context of the running virtual processor and switches to the secure virtual processor.

The trusted security zone runs a separate operating system that is not accessible to the device users. For security purposes the trusted security zone is not open to users for installing applications which means users do not have access to install applications in the trusted security zone. This prevents corrupted applications or malware applications from executing powerful instructions reserved to the trusted security zone and thus preserves the trust of the device. The security of the system is achieved at least in part by partitioning the hardware and software resources of the mobile phone so they exist in one of two partitions the secure partition for the security subsystem and the normal partition for everything else. Placing the trusted security zone in the secure partition and restricting access from the normal partition protects against software and basic hardware attacks. Hardware logic ensures that no secure partition resources can be accessed by the normal partition components or applications. A dedicated secure partition operating system runs in a virtual processor separate from the normal partition operating system that likewise executes in its own virtual processor. Users may install applications on the mobile device which may execute in the normal partition operating system described above. The trusted security zone runs a separate operating system for the secure partition that is installed by the mobile device manufacturer or vendor and users are not able to install new applications in or alter the contents of the trusted security zone.

Turning now to a system is described. The system comprises a security monitor processing server . The security monitor processing server comprises a plurality of processors a memory and a security monitor application and a plurality of processes or applications stored to the memory . The system further comprises a second server and a network .

The security monitor processing server is a server that does not utilize hardware assisted trust. Because the security monitor processing server does not utilize hardware assisted trust the server may normally be unable to communicate with other servers such as the second server that does utilize hardware assisted trust. This is because a server executing in trust does not generally permit an application to interwork with an untrusted remote host in view of breaching trust or exposing secrets. The security monitor application is able to establish a trusted communication environment so that the security monitor processing server may be able to communicate with the second server that utilizes hardware assisted trust.

The security monitor application may establish trust by suspending functionality of all processors of the plurality of processors except for one processor via an operating system of the security monitor processing server . The security monitor application may also suspend functionality of all other applications that are executing on the one processor via the operating system of the security monitor processing server . With all functionality except for itself suspended the security monitor processing server may be able to communicate in trust when it receives messages from servers like the second server . For example other applications that could be malware or infected with malware cannot spy on operations capture data present on internal server communication buses screen scrape data and other operations. The security monitor application may execute on any one of the plurality of processors . In an embodiment there may be at least four processors eight processors sixteen processors twenty four processors or another number of processors in the plurality of processors .

The security monitor processing server and the second server may be communicatively coupled via the network . The network may be a private communication network a public communication network or a combination thereof. While one security monitor processing server and one second server are illustrated in it should be understood that the system may comprise any number of security monitor processing servers and second servers .

In an embodiment the security monitor application is executed by a first processor of the plurality of processors . The security monitor application may execute on any processor of the plurality of processors . The security monitor application checks for a message from the second server that requests establishment of a secure communication link between the second server and the security monitor processing server . The message is directed to the security monitor application by the second server via the network . The security monitor application may check for the message from the second server at several predetermined periods of time that may comprise every second every ten seconds every thirty seconds every minute or another predetermined period of time. In an embodiment the second server may send a security token or another means of verification such as a personal identification number PIN or a passcode to the security monitor application to verify that the second server is a trusted server that security monitor application may communicate with. In an embodiment the processor that executes the security monitor application may schedule the security monitor application and one or more apps to execute in a time sharing method. Examples of time sharing methods may comprise round robin scheduling priority based scheduling or another form of scheduling. The security monitor application checks for messages from the different server when it is executed or in an active state.

Responsive to finding the message from the second server the security monitor application sends a request to the operating system of the security monitor processing server to suspend functionality of the other processors of the plurality of processors . Also in response to finding the message from the second server the security monitor application sends a request to the operating system of the security monitor processing server to suspend functionality of other applications that are occurring on the processor that the security monitor application will utilize to communicate with the second server . The two messages sent by the security monitor application to the operating system to suspend functionality of the plurality of processors may be sent in one message. By doing this the security monitor application is able to establish an environment for trusted communication between the security monitor application and the second server where other parties that are outside the system may not be able to see what is being communicated between the security monitor application and the second server . In an embodiment the communication session between the security monitor application and the second server may take place at predetermined intermittent time lengths. These predetermined intermittent time lengths may comprise a second five seconds ten seconds thirty seconds or another predetermined length of time. This may promote efficiency if the security monitor processing server has multiple requests from other severs and could multitask and address the other requests including the current request. In an embodiment the security monitor application may do functional processing other than just communicating with the different server . The security monitor application may perform functions such as writing data reading data perform transactions perform requested operations appending information to profiles of employees or clients and other processes.

In an embodiment there may be a conflict of security when the security monitor application requests the suspension of the other processers and processes occurring on the security monitor processing server . The conflict may arise from how the security monitor processing application is able to determine validate or be made aware of that the process of suspending the other processers and processes on the active processor has occurred. There may be several ways the security monitor application may accomplish this. One implementation may involve the security monitor application delaying itself from taking action for a pre defined period of time so that the operating system may have time to suspend the other processors and the processes that are occurring on the active processor . Another implementation may involve the security monitor application invoking a confirmation method in the operating system so that the shutdown of the other processors and the processes occurring on the active processor may be confirmed. The confirmation method may be pre determined by the operating system. These two implementations may be performed in a mutually exclusive method where one implementation may be performed without the other implementation being performed. In an embodiment both implementations may be performed. Another implementation may comprise the application instructing the operating system to send a confirmation message that details the status of the shutdown of the processors and the processes occurring on the active processor . These implementations may promote secure set up of the secure communication link between the processing server and the different second server .

When the communication session has concluded between the security monitor application and the second server the security monitor application sends a request to the operating system to allow the other processors of the plurality of processors to resume functionality. The security monitor application also sends another request to the operating system to resume execution of suspended applications that are executing on the first processor . The two messages sent at the conclusion of the communication session by the security monitor application to the operating system may be sent in one message.

In an example of the system the second server may be used by an auditing company which may wish to retrieve information and records from a client company that uses the security monitor processing server with the security monitor application . The client company may utilize the security monitor application to communicate in trust with the second server of the auditing company. The second server may send a message to initiate communication to the security monitor application . A security token PIN and or passcode may be sent with the message from the second server . The security monitor application may receive the message from the second server and validate the message and therefore the second server for trusted communication using the security token.

With the second server validated for trusted communication the security monitor application sends a message to the operating system of the security monitor processing server to suspend functionality of all processors of the plurality of processors except for the processor that the security monitor application is executing on. The security monitor application also sends a message to the operating system to suspend functionality of other applications that are executing on the processor that the security monitor application is executing on. In an embodiment the messages to the operating system may be sent as one message. By suspending functionality of the other processors and the applications that are occurring on the remaining active processor the security monitor application has established an environment for trusted communication between the security monitor processing server of the client company and the second server of the auditing company.

With a trusted environment established the security monitor application engages in a communication session or other forms of processing with the second server . During the communication session the information that the auditing company wants from the client company is exchanged. Because all other processors and applications are suspended the communication session is done in trust where no parties outside the system are able to see what information is exchanged. After completion of the communication session the security monitor application sends a message to the operating system of the security monitor processing server to resume functionality of the other processors and the applications that were previously executing on the processor that the security monitor application is executing on. With the other processors and applications on the processor that the security monitor application is executing on released from suspension the security monitor processing server returns to a state of non trust.

In a communication system is described. The system comprises a security monitor processing server . The security monitor processing server further comprises a plurality of processors and a memory . The memory further comprises a security monitor application a secure application and a plurality of processes or applications . The system further comprises a second server and a network . The security monitor processing server is a server that does not utilize hardware assisted trust. The server may not be able to normally to communicate in trust with other servers such as the second server which does utilize hardware assisted trust. While the second server does utilize hardware assisted trust it may be able to communicate out of trust with other servers such as the server but it may not communicate or perform other forms of processing requests in trust unless the other servers such as the server is able to do so in trust. The security monitor application in conjunction with the secure application may provide an environment for the security monitor processing server to communicate in trust with the second server . The security monitor application may intake requests for communication or processing from the second server . The security monitor application may check to see if there is a message for communication from the second server at several predetermined periods of time which may comprise every second every ten seconds every 30 seconds every minute or another period of time. The message may be from the second server and request the establishment of a secure communication link between the second server and the security monitor processing server . The message may be directed to the security monitor application . The security monitor application may receive a security token a personal identification number PIN or another form of verification from the second server so that it may validate the server for communication with the security monitor processing server . In an embodiment the secure application may be dormant while the security monitor application checks for messages from the second server .

When the security monitor application receives and validates the request for communication from the second server the security monitor application may send a request to an operating system of the security monitor processing server to suspend execution of functionality of the plurality of processors except for one processor that the secure application may execute on. The security monitor application may also send a request to the operating system to suspend a process or applications that are executing on the processor that did not have its functionality suspended. With the other processors of the plurality of processors suspended and any applications that are executing on the processor that is still functional suspended the security monitor application provides an environment for secure or trusted communication with the second server . With a trusted communication environment established the security monitor application may transmit the request for communication to the secure application . The security monitor application may send a message to the operating system to launch or invoke the secure application as the secure application may not execute until it is launched or invoked by the operating system. The secure application may remain dormant while the security monitor application is functioning.

In an embodiment the operating system may enter a secure state where only the security monitor application and or the secure application execute and only the security monitor application may be able to initiate an exit from the secure state. Said in other words the operating system may provide a privileged operation available only to the security monitor application that the security monitor application may invoke to put the operating system in the secure state. In the secure state the operating system does not allow other applications or other processors other than the processor that executes the security monitor application to invoke operating system commands. Additionally in the secure state the security monitor application may have access to powerful commands that allow it to command the operating system to suspend processing of other processors and discontinue or suspend processing of other applications and further to resume processing of other processors and resume processing of other applications .

In an embodiment the integrity of trust in the server when operating in the restricted secure operation mode this may also be referred to as a quasi trusted operation mode in some contexts described herein is contingent on the integrity of the operating system and the integrity of the security monitor application . If the operating system and the security monitor application have not been hacked or corrupted security of the data and the communication with the second server can be deemed trusted.

After doing this the security monitor application may go dormant so that the secure application may execute a communication session or perform actions without the threat of another party outside the system seeing the exchange. In an embodiment the secure application may be integrated into the security monitor application . In another embodiment the secure application may receive messages from the second server and transmit the message to the security monitor application for validation and then engage in the communication session or other forms of processing with the second server after trust has been established.

When the communication session or other form of processing has ended the secure application may send a message to security monitor application that it has finished communicating with the second server . The security monitor application may stop the secure application by sending a request to the operating system to stop the secure application . The secure application may not work again until it is re invoked by the operating system. The security monitor application may then send a message to the operating system of the security monitor processing server to release the suspended processors to resume functionality and another message to resume execution of the other applications that were suspended on the processor that the secure application executes on. In an embodiment the secure application may send the message to the operating system to resume execution of the suspended processors and the suspended applications on the processor that the secure application executes on. With functionality of the processors resumed the security monitor processing server goes back to a non trusted state.

In a method is described. At block a secure application of a first server checks for a message from a different server that requests for establishment of a secure communication link between the different server and the first server wherein the application is executed on a first processor of a plurality of processors wherein the message is directed to the secure application from the different server. At block responsive to finding the message the secure application sends a request to an operating system to suspend the other processors of the plurality of processors except for the first processor. At block responsive to finding the message the secure application sends a request to the operating system to suspend a process executing on the first processor. In some cases a plurality of other processes may be executing and the request may specify suspending all of these other processes. At block the secure application conducts a communication session with the different server. At block the secure application responsive to completing the communication session sends a request to the operating system to release the other processors to resume functionality. At block the secure application responsive to completing the communication session sends a request to the operating system to resume execution of the suspended process or processes on the first processor.

In a method is described. At block the security monitor application of a first server checks for a message from a second server that requests establishment of a secure communication link between the second server and the first server wherein the security monitor application is executed on a first processor of a plurality of processors wherein the message is directed to a secure application that also executes on the first processor. At block the security monitor application sends a request to an operating system executing on the first server to suspend the other processors among the plurality of processors except for the first processor wherein the security monitor application receives the message and a security token from the different server wherein the security token identifies the second server as a secure server. At block the security monitor application responsive to finding the message sends a request to the operating system to suspend a process executing on the first processor. At block the security monitor application invokes a secure application that executes on the first processor wherein the security monitor application sends a request to the operating system to invoke the secure application. At block the security monitor application sends the message to the secure application wherein the secure application engages in a communication session or other forms of processing such as writing data to a data store editing data to a data store performing transactions performing services on behalf of or at the request of the second server when trust has been established between the security monitor application and the second server. The secure application may engage in a communication session with the second server but it may also perform or execute other forms of processing such as writing or editing data searching for data and other forms of processing. At block the security monitor application receives a message from the secure application wherein the secure application sends a message to the security monitor application when it has finished the communication session with the second server. At block the security monitor application stops the secure application wherein the security monitor application sends a request to the operating system to stop the secure application wherein the secure application does not work until it is re invoked. At block the security monitor application sends a request to the operating system to release the other processors from their suspended state and resume functionality. At block the security monitor application sends a request to the operating system to resume execution of the suspended process on the first processor.

It is understood that by programming and or loading executable instructions onto the computer system at least one of the CPU the RAM and the ROM are changed transforming the computer system in part into a particular machine or apparatus having the novel functionality taught by the present disclosure. It is fundamental to the electrical engineering and software engineering arts that functionality that can be implemented by loading executable software into a computer can be converted to a hardware implementation by well known design rules. Decisions between implementing a concept in software versus hardware typically hinge on considerations of stability of the design and numbers of units to be produced rather than any issues involved in translating from the software domain to the hardware domain. Generally a design that is still subject to frequent change may be preferred to be implemented in software because re spinning a hardware implementation is more expensive than re spinning a software design. Generally a design that is stable that will be produced in large volume may be preferred to be implemented in hardware for example in an application specific integrated circuit ASIC because for large production runs the hardware implementation may be less expensive than the software implementation. Often a design may be developed and tested in a software form and later transformed by well known design rules to an equivalent hardware implementation in an application specific integrated circuit that hardwires the instructions of the software. In the same manner as a machine controlled by a new ASIC is a particular machine or apparatus likewise a computer that has been programmed and or loaded with executable instructions may be viewed as a particular machine or apparatus.

Additionally after the system is turned on or booted the CPU may execute a computer program or application. For example the CPU may execute software or firmware stored in the ROM or stored in the RAM . In some cases on boot and or when the application is initiated the CPU may copy the application or portions of the application from the secondary storage to the RAM or to memory space within the CPU itself and the CPU may then execute instructions that the application is comprised of. In some cases the CPU may copy the application or portions of the application from memory accessed via the network connectivity devices or via the I O devices to the RAM or to memory space within the CPU and the CPU may then execute instructions that the application is comprised of. During execution an application may load instructions into the CPU for example load some of the instructions of the application into a cache of the CPU . In some contexts an application that is executed may be said to configure the CPU to do something e.g. to configure the CPU to perform the function or functions promoted by the subject application. When the CPU is configured in this way by the application the CPU becomes a specific purpose computer or a specific purpose machine.

The secondary storage is typically comprised of one or more disk drives or tape drives and is used for non volatile storage of data and as an over flow data storage device if RAM is not large enough to hold all working data. Secondary storage may be used to store programs which are loaded into RAM when such programs are selected for execution. The ROM is used to store instructions and perhaps data which are read during program execution. ROM is a non volatile memory device which typically has a small memory capacity relative to the larger memory capacity of secondary storage . The RAM is used to store volatile data and perhaps to store instructions. Access to both ROM and RAM is typically faster than to secondary storage . The secondary storage the RAM and or the ROM may be referred to in some contexts as computer readable storage media and or non transitory computer readable media.

I O devices may include printers video monitors liquid crystal displays LCDs touch screen displays keyboards keypads switches dials mice track balls voice recognizers card readers paper tape readers or other well known input devices.

The network connectivity devices may take the form of modems modem banks Ethernet cards universal serial bus USB interface cards serial interfaces token ring cards fiber distributed data interface FDDI cards wireless local area network WLAN cards radio transceiver cards that promote radio communications using protocols such as code division multiple access CDMA global system for mobile communications GSM long term evolution LTE worldwide interoperability for microwave access WiMAX near field communications NFC radio frequency identity RFID and or other air interface protocol radio transceiver cards and other well known network devices. These network connectivity devices may enable the processor to communicate with the Internet or one or more intranets. With such a network connection it is contemplated that the processor might receive information from the network or might output information to the network in the course of performing the above described method steps. Such information which is often represented as a sequence of instructions to be executed using processor may be received from and outputted to the network for example in the form of a computer data signal embodied in a carrier wave.

Such information which may include data or instructions to be executed using processor for example may be received from and outputted to the network for example in the form of a computer data baseband signal or signal embodied in a carrier wave. The baseband signal or signal embedded in the carrier wave or other types of signals currently used or hereafter developed may be generated according to several methods well known to one skilled in the art. The baseband signal and or signal embedded in the carrier wave may be referred to in some contexts as a transitory signal.

The processor executes instructions codes computer programs scripts which it accesses from hard disk floppy disk optical disk these various disk based systems may all be considered secondary storage flash drive ROM RAM or the network connectivity devices . While only one processor is shown multiple processors may be present. Thus while instructions may be discussed as executed by a processor the instructions may be executed simultaneously serially or otherwise executed by one or multiple processors. Instructions codes computer programs scripts and or data that may be accessed from the secondary storage for example hard drives floppy disks optical disks and or other device the ROM and or the RAM may be referred to in some contexts as non transitory instructions and or non transitory information.

In an embodiment the computer system may comprise two or more computers in communication with each other that collaborate to perform a task. For example but not by way of limitation an application may be partitioned in such a way as to permit concurrent and or parallel processing of the instructions of the application. Alternatively the data processed by the application may be partitioned in such a way as to permit concurrent and or parallel processing of different portions of a data set by the two or more computers. In an embodiment virtualization software may be employed by the computer system to provide the functionality of a number of servers that is not directly bound to the number of computers in the computer system . For example virtualization software may provide twenty virtual servers on four physical computers. In an embodiment the functionality disclosed above may be provided by executing the application and or applications in a cloud computing environment. Cloud computing may comprise providing computing services via a network connection using dynamically scalable computing resources. Cloud computing may be supported at least in part by virtualization software. A cloud computing environment may be established by an enterprise and or may be hired on an as needed basis from a third party provider. Some cloud computing environments may comprise cloud computing resources owned and operated by the enterprise as well as cloud computing resources hired and or leased from a third party provider.

In an embodiment some or all of the functionality disclosed above may be provided as a computer program product. The computer program product may comprise one or more computer readable storage medium having computer usable program code embodied therein to implement the functionality disclosed above. The computer program product may comprise data structures executable instructions and other computer usable program code. The computer program product may be embodied in removable computer storage media and or non removable computer storage media. The removable computer readable storage medium may comprise without limitation a paper tape a magnetic tape magnetic disk an optical disk a solid state memory chip for example analog magnetic tape compact disk read only memory CD ROM disks floppy disks jump drives digital cards multimedia cards and others. The computer program product may be suitable for loading by the computer system at least portions of the contents of the computer program product to the secondary storage to the ROM to the RAM and or to other non volatile memory and volatile memory of the computer system . The processor may process the executable instructions and or data structures in part by directly accessing the computer program product for example by reading from a CD ROM disk inserted into a disk drive peripheral of the computer system . Alternatively the processor may process the executable instructions and or data structures by remotely accessing the computer program product for example by downloading the executable instructions and or data structures from a remote server through the network connectivity devices . The computer program product may comprise instructions that promote the loading and or copying of data data structures files and or executable instructions to the secondary storage to the ROM to the RAM and or to other non volatile memory and volatile memory of the computer system .

In some contexts the secondary storage the ROM and the RAM may be referred to as a non transitory computer readable medium or a computer readable storage media. A dynamic RAM embodiment of the RAM likewise may be referred to as a non transitory computer readable medium in that while the dynamic RAM receives electrical power and is operated in accordance with its design for example during a period of time during which the computer system is turned on and operational the dynamic RAM stores information that is written to it. Similarly the processor may comprise an internal RAM an internal ROM a cache memory and or other internal non transitory storage blocks sections or components that may be referred to in some contexts as non transitory computer readable media or computer readable storage media.

While several embodiments have been provided in the present disclosure it should be understood that the disclosed systems and methods may be embodied in many other specific forms without departing from the spirit or scope of the present disclosure. The present examples are to be considered as illustrative and not restrictive and the intention is not to be limited to the details given herein. For example the various elements or components may be combined or integrated in another system or certain features may be omitted or not implemented.

Also techniques systems subsystems and methods described and illustrated in the various embodiments as discrete or separate may be combined or integrated with other systems modules techniques or methods without departing from the scope of the present disclosure. Other items shown or discussed as directly coupled or communicating with each other may be indirectly coupled or communicating through some interface device or intermediate component whether electrically mechanically or otherwise. Other examples of changes substitutions and alterations are ascertainable by one skilled in the art and could be made without departing from the spirit and scope disclosed herein.

