---

title: Execution of end-to-end-processes across applications
abstract: An orchestrator executes an end-to-end process across applications. The executing of the end-to-end process by the orchestrator comprises executing flow logic by the orchestrator, the flow logic according to a data model defining arguments to include in interactions between the orchestrator and each of the applications. A message broker exchanges information among the orchestrator and the applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09311171&OS=09311171&RS=09311171
owner: Hewlett Packard Enterprise Development LP
number: 09311171
owner_city: Houston
owner_country: US
publication_date: 20151203
---
This is a continuation of U.S. application Ser. No. 14 563 327 filed Dec. 8 2014 which claims the benefit under 35 U.S.C. 119 e of U.S. Provisional Application No. 61 913 799 filed Dec. 9 2013 both hereby incorporated by reference in their entirety.

An enterprise may employ multiple applications to perform various tasks. The tasks can be performed by various applications and in some cases multiple applications can perform overlapping tasks. As an example the tasks can include tasks associated with information technology IT management such as management of development and production of program code management of a portfolio of products or services support management IT service management cloud and Software as a Service SaaS service management and so forth. IT management performs management with respect to components of an IT environment where the components can include computers storage devices communication nodes machine readable instructions and so forth. Various aspects of IT management can be modeled by an Information Technology Infrastructure ITIL that provides a set of best practices for IT management a Business Process Framework eTOM from the TM Forum and so forth. With advancements in IT management technology new IT management processes have been introduced such as self service IT IT as a service provider DevOps and autonomous IT and so forth.

Workflows performed by an enterprise can involve the use of a number of applications. An enterprise can refer to a business concern an educational organization a government agency an individual or any other entity. A workflow can refer to any process that the enterprise can perform such as a use case. Such a process of the workflow can also be referred to as an end to end process or an enterprise process since the process involves a number of activities of the enterprise from start to finish. A use case can refer to any specific business process or other service that an enterprise desires to implement. An application can refer to machine readable instructions such as software and or firmware that are executable. The application can include logic associated with an enterprise process which can implement or support all or parts of the enterprise process or processes . An application can be an application developed by the enterprise or an application provided by an external vendor of the enterprise. An application can be provided on the premises of the enterprise or in the cloud public cloud or virtual private cloud and the application can be a hosted application e.g. an application provided by a provider over a network a managed service a service managed and or operated by a third party that can be hosted or on premise or a software as a service SaaS a service available on a subscription basis to users and so forth. In some cases multiple applications used by the enterprise may be provided by different vendors.

Within a portfolio of applications used by an enterprise many applications may not be able to directly interact with each other. In general an application implements a particular set of business logic and is not aware of other applications that are responsible for performing other processes. The design of the application may or may not have taken into account the presence of other applications upstream or downstream with respect to an end to end process . This is especially true for older legacy applications. More recently applications can at least expose well defined application programming interfaces APIs that assume that the applications will be interacting with other systems. Such applications are called by their APIs or can call other APIs. Even with such APIs applications may not readily interact with each other. Different applications may employ different data formats different languages different interfaces different protocols and so forth.

Application developers have developed a portfolio of applications that rely on using point to point integration to provide some level of integration across the portfolio. With point to point integration a given application is aware of another application in the portfolio that is upstream or downstream of the given application. Such applications are mutually aware of each other.

A point to point integration mechanism can include a component or multiple components provided between applications to perform data transformations messaging services and other tasks to allow the applications to determine how and when to communicate and interact with each other.

Different point to point integration mechanisms can be provided for different subsets of applications. If there are a large number of applications in a portfolio of applications used by an enterprise then there can be a correspondingly large number of point to point integration mechanisms.

As applications evolve e.g. new release of an application new functionality added to an application variation of the expected use cases variation of interaction to take place between applications corresponding point to point integration mechanisms may have to be modified and or re tested. Modifying or re testing an integration mechanism between applications can be a time consuming and costly exercise particularly if there are a large number of integration mechanisms deployed by the enterprise. This exercise can rapidly become a complex combinatorial exercise. If point to point integration is used an enterprise may be hesitant to upgrade applications to add new applications to change application vendors or to modify processes since doing so can be complex and costly. However maintaining a static portfolio of applications can prevent an enterprise from being agile in meeting evolving demands by users or customers of the enterprise. If an enterprise has applications provided by multiple vendors additional challenges may arise. The application can be built to support updated releases of other applications which adds complexity to application development if an enterprise wishes to deploy another release of an application of another vendor.

In accordance with some implementations of the present disclosure a service exchange and integration framework referred to as a service exchange in the ensuing discussion is provided that is able to integrate applications in a flexible manner and orchestrate execution of workflows which can refer to enterprise processes or use cases as noted above . Applications are used to implement their respective logic parts of each workflow. These applications are orchestrated to automate the end to end enterprise process or use case.

According to the present disclosure orchestrating execution of a workflow can refer to modeling and executing the logic of sequencing of the tasks of the workflow. Some of the tasks of the workflow are delegated using the orchestration to be performed by the logic of the applications. As an example a workflow can include an order fulfillment workflow. An order fulfillment workflow can include the following tasks receive an order from a customer determine applications that are to be involved in fulfilling the order invoke the identified applications to fulfill the order and return a status e.g. confirmation number or information to further manage the order such as to view update cancel or repeat the order to the customer. Note that the foregoing example order fulfillment workflow is a simplified workflow that includes a simple collection of tasks. An actual order fulfillment workflow may involve many more tasks.

Each of the orchestrator message broker and adapters can be implemented as a combination of machine executable instructions and processing hardware such as a processor a processor core an application specific integrated circuit ASIC device a programmable gate array and so forth. In other examples any of the orchestrator message broker and adapters can be implemented with just processing hardware.

Note that is a view of the overall architecture and each of the components shown in can be a separate system. Alternatively some or all of the components shown in can be integrated into a system. The platform can also support a pattern that includes executing a workflow by the orchestrator making calls from the workflow to delegate tasks to applications receiving events e.g. responses to calls results produced by applications or other events or calls from the applications or from other sources and reacting by the orchestrator to the events or calls by performing actions.

The orchestrator is used to orchestrate the execution of a specific workflow that involves tasks performed by multiple applications e.g. a subset or all of application application . . . application N . To perform a workflow flow logic can be loaded into the orchestrator and the flow logic is executed by the orchestrator . Flow logic can include a representation of a collection of tasks that are to be performed. The flow logic can be in the form of program code e.g. a script or other form of machine executable instructions a document according to a specified language or structure e.g. Business Process Execution Language BPEL a Business Process Model and Notation BPMN etc. or any other type of representation e.g. Operations Orchestration from Hewlett Packard YAML Ain t Markup Language YAML Mistral from OpenStack etc. . The flow logic can be generated by a human a machine or program code and can be stored in a machine readable or computer readable storage medium accessible by the orchestrator .

The orchestrator is able to execute multiple flow logic to perform respective workflows. Multiple workflows and workflow instances instances of a particular workflow refer to multiple instantiations of the particular workflow can be concurrently executed in parallel by the orchestrator .

The orchestrator is able to evaluate interpret or execute a flow logic and perform tasks specified by the flow logic in response to a current state of the workflow and calls and events received by the orchestrator . A workflow can be a stateful workflow. As a stateful workflow is performed by the orchestrator the orchestrator is able to store a current state of the workflow to indicate the portion of the workflow already executed. Based on the workflow s current state and a received event the orchestrator is able to transition from a current state to a next state of the workflow and can determine a next action to perform where the next action may involve the invocation of another application. Whenever the orchestrator receives a new call or event e.g. response results or other event the orchestrator evaluates which workflow instance is to receive the call or event and loads the workflow instance with a correct state. In some cases it is possible that multiple workflow instances may check if they are supposed to be a recipient of a call or event.

In other examples a workflow can be a stateless workflow which does not keep track of a current state of the workflow. Rather the stateless workflow performs corresponding next steps or actions as events are received by the orchestrator . Use of a stateless workflow is generally suitable for asynchronous operation discussed further below . A stateful workflow can be used with both a synchronous operation and asynchronous operation.

The events e.g. results responses etc. received by the orchestrator can be provided by applications that are invoked in the workflow or from another source such as through the API of the message broker . The message broker can also direct an event to a particular workflow instance note that there can be multiple workflow instances executing concurrently . If the workflow instance is a stateful workflow then an event can be provided to a state of the workflow.

The message broker is operatively or communicatively coupled to the orchestrator and the adapters . Generally the message broker is used to exchange messages among components including the orchestrator and the adapters . A message can include any or some combination of the following a call e.g. API call or an event e.g. response result or other type of event . The message broker is responsible for ensuring that API calls and events e.g. responses results etc. are sent to the correct adapter or to the correct workflow instance multiple workflow instances may execute concurrently . Alternatively the endpoints adapters and workflow instances may all receive a call or event and make a decision regarding whether each endpoint should process the call or event.

The message broker can also have an interface which can include an API. An external entity can communicate with the message broker using the API such as to trigger a workflow enterprise process or use case or make progress or step through the workflow. The API of the message broker can also be used to communicate a status update of a workflow.

The message broker can include queues for temporarily storing information to be forwarded target components and can include information forwarding logic that is able to determine a destination of a unit of information based on identifiers and or addresses contained in the unit of information.

In some examples the message broker can employ an Advanced Message Queuing Protocol AMQP which is an open standard application layer protocol for message oriented middleware. AMPQ is described in a specification provided by the Organization for the Advancement of Structured Information Standards OASIS . An example of a message broker that employs AMPQ is RabbitMQ which is an open source message broker application.

In other examples other types of message brokers that employ other messaging or information exchange protocols can be used.

The information exchanged using the message broker can include information sent by the orchestrator where the information sent by the orchestrator can include applications calls and or data. An application call can refer to a command or commands or any other type of message that is issued to cause an instance of a respective application to execute to perform a requested task or tasks .

The information exchanged using the message broker can also include information sent by the applications. For example the information sent by an application can include response information that is responsive to a respective application call. The information sent by the applications can also include information sent autonomously by an application without a corresponding request from the orchestrator . Information from an application can be included in an event sent by the application where an event can refer to a representation of a unit of information. The event can include a response a result or any other information. Note that an event from an application can be in response to a synchronous call or asynchronous call. A synchronous call to an application by the orchestrator is performed for a synchronous operation. In a synchronous operation a workflow waits for a response to be received before proceeding further in other words the workflow blocks on the response . An asynchronous operation of a workflow refers to an operation in which the workflow does not wait for a response from an application in response to a call to the application.

In other examples an event from an application can be due to something else occurring at the application level or in the environment e.g. a support agent closes a ticket when using the application . Such an event can be sent to the workflow such as the workflow for an incident case exchange use case explained further below .

The message broker is able to respond to a call such as an API call from the orchestrator by making a corresponding call to the API of the respective instance of an application that is executing in a particular workflow instance. Adapters may register with the message broker and the message broker can use the registration to determine how to direct a call and how events e.g. results responses etc. are tagged or associated to a workflow instance. In some cases it is possible that a message a call or event may be addressed to several workflow instances in which case the message broker can direct the message to the several workflow instances.

When performing a workflow based on flow logic executed by the orchestrator the orchestrator can issue application synchronous or asynchronous calls to the message broker for invoking the applications at corresponding points in the workflow. A call can also be made by the orchestrator as part of throwing an event which refers to the workflow deciding to communicate the event as a result of some specified thing occurring .

The flow logic for a respective workflow can be written abstractly using a canonical data model CDM . Although the canonical data model is depicted as being inside the message broker it is noted that the canonical data model can be separate from the message broker in other examples.

The canonical data model can be used to express application calls to be issued by the orchestrator to the message broker . The canonical data model can also be used to express arguments e.g. messages for use in the calls as well as the logic to be performed. The application calls can be abstract calls. The canonical data model can be expressed in a specific language such as a markup language or in another form.

More generally a flow logic is written according to the canonical data model can represent the following arguments that are being exchanged in interactions of the applications the functions that are called to support the interactions the events e.g. responses results or other events that can result any errors that can arise and states of the use case executed across the applications. In general ad hoc data models can be used but they may change whenever a new use case is introduced or when an application changes. According to implementations of the present disclosure the canonical data model can be been defined across a large number of use cases representative of the relevant interactions that can take place in a particular domain such as IT management or another domain and across a wide set of applications that can be used to support subsets of the use cases. Thus in general a canonical data model can be shared across use cases of a particular domain. A different canonical data model can be used for use cases of another domain. If a use case involves applications in different domains then a canonical data model can be expanded to support the other domain or multiple canonical data models may be used.

The information representing interactions between applications and the information representing the states of the applications can be used to track a current state of a workflow assuming a stateful workflow . The information regarding the errors in the canonical data model can be used for handling errors that arise during execution of the applications. The information regarding the errors can be used to map an error of an application to an error of the workflow that is being performed by the orchestrator

By using the canonical data model the development of flow logic that is valid across large sets of applications can be achieved. Sharing a data model across the flow logic can facilitate combining the flow logic and or customizing the flow logic and also allows for adapters to be changed or modified to replace applications.

In other implementations the service exchange does not employ the canonical data model but rather development of the flow logic can be ad hoc such as by use of the ad hoc models noted above for each use case and or set of applications.

The application calls issued by the orchestrator can be sent through an interface between the orchestrator and the message broker . In this way the expression of the flow logic does not have to be concerned with specific data models or interfaces employed by the applications which simplifies the design of the orchestrator .

Also the orchestrator does not have to know specific locations of the applications the applications can be distributed across multiple different systems in disparate geographic locations. The message broker is responsible for routing the application calls to the respective adapters .

Information communicated between the message broker and the adapters is also in an abstract form according to the canonical data model. For example the message broker can forward an abstract application call from the orchestrator to a respective adapter. Similarly an adapter can send an event from an application to the message broker in an abstract form according to the canonical data model.

The adapters perform protocol translations between the protocol of the abstract API of the message broker and the protocols to which the interfaces exposed by the corresponding applications are bound. As an example the protocol of the abstract API of the message broker can be according to a Representational State Transfer REST protocol or some other protocol. The protocol of an interface exposed by an application can include Simple Object Access Protocol SOAP Remote Procedure Call RPC Session Initiation Protocol SIP and so forth.

Each adapter can also transform the data model of a message e.g. message carrying an event and an abstract API call to the data model and specific API call exposed by a particular application e.g. instance or release of the particular application . Stated differently the adapter performs interface adaptation or interface translation by converting the abstract message or abstract API to a message or API call that conforms to the API of the target application. The reverse conversion is performed in the reverse direction where the result response event message or API call from an application is converted to an abstract message or abstract API call that can be passed through the message broker to the orchestrator .

Each adapter can also perform address translation between an address in the address space used by the orchestrator and the message broker and an address in the address space of an application.

As an example the orchestrator can issue an abstract application call e.g. a call to a REST API to application . This abstract application call is received by the adapter which translates the abstract application call to one or multiple function calls according to the protocol used by application to perform the task s requested by the abstract application call made by the orchestrator . The adapter also adapts the APIs as noted above. A similar protocol translation and API translation are also performed in the other direction for a call or event produced by an application. The adapter can convert the message containing the call or event into an abstract message according to the protocol of the message broker and pass the abstract message to the orchestrator .

In some cases an adapter can also emulate a specific behavior. For example it is possible that an application is unable to generate an event. In this case the respective adapter can periodically poll the application with an API call to query if an something has occurred with the application and the adapter can generate throw an event on behalf of the application.

In some examples when an application is replaced by another application with less functionality the respective adapter can also delegate or orchestrate with another application or web service that provides the missing functionality.

The service exchange provides for a multi point orchestrated integration across multiple applications.

As noted above content of the service exchange platform including the orchestrator the message broker and the adapters can be changed such as from an administration system coupled to the service exchange . Applications can be changed flow logic can be changed and use cases can be created.

Any given application can be updated or replaced simply by replacing or modifying the corresponding adapter. For example if an enterprise wishes to upgrade or replace application in with a new application or an updated version of application then the corresponding adapter to which application is coupled can be replaced or updated to support the updated or replaced application. In some cases replacing the application can involve replacing a first application supplied by a first vendor with a second application supplied by a different vendor. In other cases replacing the application can involving replacing a first application supplied by a vendor with another application supplied by the same vendor. As yet another example replacing the application can include upgrading the application to a new release.

Changing a given adapter can involve removing a representation of the adapter which can be in the form of program code a markup language file or some other representation and replacing the removed representation of the adapter with a new representation of a different adapter. Changing the given adapter can alternatively involve modifying the given adapter or modifying a configuration of the given adapter to support the different application. The changing of the given adapter can be performed by a machine or by program code either autonomously such as in response to detection of a replacement of an application or in response to user input.

Changing an application may also involve moving an instance of the application from one instance to another instance or from one location to another location. The respective adapter can be updated or configuration of the adapter is changed the adapter itself remains unchanged to refer to another application instance or to an instance of the application at another location.

When changing an application to a new or updated application it may be possible that certain functionality of the previous application is no longer available from the new or updated application. In this case the respective adapter can delegate or orchestrate with another application or web service that provides the missing functionality. Alternatively the workflow can be modified to take into account the loss of functionality in the use case.

Also if new functionality is provided by new or upgraded application the workflow can be modified to use the new functionality.

In accordance with some implementations a workflow can be modified relatively easily by changing the respective flow logic with a different flow logic a modified version of the flow logic or a new flow logic . The different flow logic can then be loaded onto the orchestrator to implement the modified workflow. By using the service exchange workflows can be easily customizable by providing new or modified flow logic to the orchestrator . Nothing else has to be changed unless a new use case specifies use of new calls and data not covered in current adapters e.g. an adapter is able to call just a subset of APIs of the application or the canonical model. In this latter case the canonical data model can be updated and adapters can be updated to be able to make the calls or new adapters can be provided.

New use cases can also be created and corresponding flow logic and adapters can be provided. In addition the canonical data model may be updated accordingly.

The content changes noted above can be performed using any of various tools such as a Software Development Kit SDk tool or other type of tool used to create applications and other program code. A content pack can be updated using the tool and the modified content pack can be loaded using an administration system. The administration system can configure the adapters to point to the correct instance of an application. A new use case and respective content can be also created with a SDk tool. Note also that when the canonical data model is updated the canonical data model remains backwards compatible with content packs of existing use cases.

The orchestrator responds to an event or call by transitioning to a next state assuming a stateful workflow and invoking a next action to be performed for the end to end process. This can involve a further application call by the orchestrator to respective applications through the message broker . For a stateless workflow an identification is made of which flow logic applies to execute next steps.

The adapters perform at protocol and interface translations for information communicated between the message broker and the respective applications.

In some examples the portal includes a user interface UI . The portal can include machine executable instructions or a combination of machine executable instructions and processing hardware. The portal can be at a computer e.g. client computer that can be remote from the service exchange . The UI allows a user to interact with the service exchange .

A user can perform an action in the UI that triggers the execution of a flow logic of multiple different flow logic by the orchestrator to perform a workflow. For example the workflow can be an order fulfillment workflow as discussed further above. The order fulfillment workflow can be triggered in response to the user ordering an item or service through the UI . The order fulfillment workflow performed by execution of the flow logic includes tasks to fulfill the ordered item or service. For example in response to the order the order fulfillment workflow can be performed in which the orchestrator requests fulfillment of the order by orchestrating applications. In some cases the orchestrator can ask the applications which of them can fulfill the order. The orchestrator waits for confirmation from each of the applications after which a status indication or other information can be sent back to the UI by the flow logic to indicate a status success status or error status of the order.

An indication of user action in the UI e.g. an action to order an item or service can be communicated to the orchestrator and the corresponding workflow by the portal and the message broker . The indication can be communicated using the API e.g. REST API of the message broker .

This indication of user action received by the message broker can be communicated by a message broker application to the orchestrator which invokes execution of the corresponding flow logic to perform the requested workflow. An example of the message broker application is the RabbitMQ application. However in other examples other types of message broker applications or other applications for exchanging information between components can be employed.

In performing the workflow the flow logic as executed by the orchestrator can issue an application call to the application . The application call is sent by the orchestrator to the message broker application which forwards the application call to the respective adapter for the application . The adapter translates the application call to specific one or multiple function calls of the application .

In response to the application call the application produces a responsive event that is sent to the adapter which translates the event to an abstract format. The translated event is passed by the adapter to the message broker application . The message broker application in turn passes the event to a selected event handler of multiple event handlers. The selected event handler sends the event to the flow logic executed by the orchestrator . The event handler can receive an event temporarily store the event and propagate the event to the orchestrator . Different event handlers can handle different events.

Use of the event handlers allows the events to be asynchronous events associated with a stateless workflow for an asynchronous operation . In response to each event a respective event handler can launch the corresponding stateless flow. Note that a collection of the stateless flows make up a workflow.

In examples where the workflow is a stateful workflow the events are part of an exchange of information in a synchronous operation. In such a case the event handlers can be dispatchers of events or calls to a respectful stateful workflow instance. For a stateful workflow in response to the event the flow logic can transition from a current state of the workflow to a next state of the workflow and the flow logic can trigger a next action in response to the event .

Workflows that can be executed by the orchestrator can correspond to various use cases that are to be implemented by the service exchange . To implement a use case a corresponding flow logic and respective adapters can be added to the service exchange .

Another example use case can be an IT management use case for managing an IT infrastructure including computers storage devices communication nodes machine executable instructions etc. . The workflow for an IT management use case can include actions for addressing self service or support entered tickets that denote faults or errors in the IT infrastructure for upgrading or repairing components of the IT infrastructure for setting up user accounts for managing the security of the IT infrastructure and so forth. The workflow for the IT management use case can be performed by another flow logic that can be executed by the service exchange . A user enter ticket can be passed to a support system where the ticket is processed and a ticket number is returned to a user. The support system can then process update and close the ticket. The user is notified of updates and the user can also view update or close the ticket if received by the user.

Another example use case is incident case exchange. An incident case can refer to a representation of any incident that can occur in a system such as an IT infrastructure or any other type of system. A simplified workflow for an incident case exchange can include the following. A user for self service IT or a support customer support representative creates a ticket about an issue. The event corresponding to the ticket can be passed to a workflow which creates ticket and sends to a support desk application. Next notification of a ticket reference is provided to the user. Automatically or as the result of triage by support desk support personnel the ticket is sent or shared with other support desk personnel who may be responsible for all or part of the support issues e.g. other levels of support or domains of expertise or responsibility . The ticket may also be sent to all support desk personnel available including those of a third party. The support personnel can then process the ticket update the ticket and eventually close all or parts of the ticket. Updates are fed back to the user who can also answer questions add details or close the ticket. The foregoing steps are performed by having an incident case exchange workflow sharing and orchestrating next steps with the applications.

An example customization of the incident case exchange workflow can involve changing the first step to send the ticket to all or some subset of applications instead of to just one application. This customization can be performed by just changing the corresponding flow logic.

In other examples other use cases e.g. system security data management etc. can be supported using the service exchange .

Some use cases can be use cases according to a vendor neutral Reference Architecture provided by the IT4IT Forum. The reference architecture that provides guidance relating to integrating technology products and services that are used for IT management. In other examples the use cases can be according to other types of reference architectures for IT management.

Use cases according to the IT4IT Reference Architecture and artifacts associated with such use cases can be implemented using the service exchange according to the present disclosure. A canonical data model can be developed for such use cases domains where such canonical data model can include arguments functions events errors etc. for the use cases.

The workflow for an end to end process of a use case according to the IT4IT Reference Architecture can be orchestrated using the orchestrator of the service exchange according to some implementations of the present disclosure. Also adapters can perform protocol and interface translations for information between the orchestrator message broker of the service exchange and the applications.

Examples of use cases include a strategy to portfolio S2P use case to achieve alignment between IT deliverables and business goals using a framework that allows an organization to manage and optimize a portfolio of services for the enterprise a requirement to deployment R2D use case for creating or sourcing a new service or modifying an existing service a request to fulfill R2F use case to fulfill an order for an offering of the enterprise a detect to correct D2C use case to provide a framework to integrate monitoring event detection diagnosis change and remediation tasks and so forth. A use case can also include an end to end combination of any subset of the foregoing use cases or other use cases such as incident case exchange discussed above multi supplier case exchange dosed loop incident process CLIP service asset configuration management SACCI and so forth.

By deploying a use case using the service exchange according to the present disclosure it is possible to transition from a traditional IT management approach to any new style of IT management by a service provider cloud enterprise or any other enterprise. Such transition can be achieved for example by customizing modifying the use cases e.g. modifying the workflows and using or adding new applications.

The various blocks and of represent various functions that are associated with the R2F use case. Various circles within the blocks represent artifacts that are employed in the R2F use case. The block represents a function to allow a customer to order an offering where the order can be included in a shopping cart artifact . The offering can be presented by an offer artifact in the catalog aggregation and offer management block . An offer is a description of a service catalog entry represented by a service catalog entry artifact in the catalog composition and design block . The offer can include terms and conditions price configurable options approval service level agreement SLA and so forth. A catalog describes a service or services .

A subscription artifact is included in a request rationalization block . A subscription can include a registration record of service consumption. In some examples an offering ordered from a catalog is associated with a subscription. shows a relationship between the offer and subscription. Note that a single offer can have many subscriptions.

An order placed in the shopping cart causes a request to be generated the request is represented by a request artifact in the request rationalization block . Fulfillment execution is performed in response to the request as represented by the fulfillment request block in the fulfillment execution block . Based on this fulfillment request a desired service model represented by artifact in the fulfillment execution block can be derived for the request. Based on the desired service model an orchestration of deployment of the requested service can be performed using the service exchange .

A knowledge item artifact in the knowledge and collaboration block can represent the knowledge base associated with the RDF use case.

A chargeback contract artifact in the chargeback showback block represents a chargeback record that describes a payment for service used.

A usage record artifact in the usage block represents usage as captured during performance of a service. Usage records can be summarized in the chargeback record associated with a subscription

The processor s can be coupled to a non transitory machine readable or computer readable storage medium which can store various machine executable instructions. The machine executable instructions can include orchestration instructions to implement the orchestrator message broker instructions to implement the message broker including the message broker application and event handlers shown in and adapter instructions to implement the adapters .

The storage medium or storage media can include one or multiple forms of memory including semiconductor memory devices such as dynamic or static random access memories DRAMs or SRAMs erasable and programmable read only memories EPROMs electrically erasable and programmable read only memories EEPROMs and flash memories magnetic disks such as fixed floppy and removable disks other magnetic media including tape optical media such as compact disks CDs or digital video disks DVDs or other types of storage devices. Note that the instructions discussed above can be provided on one computer readable or machine readable storage medium or alternatively can be provided on multiple computer readable or machine readable storage media distributed in a large system having possibly plural nodes. Such computer readable or machine readable storage medium or media is are considered to be part of an article or article of manufacture . An article or article of manufacture can refer to any manufactured single component or multiple components. The storage medium or media can be located either in the machine running the machine readable instructions or located at a remote site from which machine readable instructions can be downloaded over a network for execution.

In the foregoing description numerous details are set forth to provide an understanding of the subject disclosed herein. However implementations may be practiced without some of these details. Other implementations may include modifications and variations from the details discussed above. It is intended that the appended claims cover such modifications and variations.

