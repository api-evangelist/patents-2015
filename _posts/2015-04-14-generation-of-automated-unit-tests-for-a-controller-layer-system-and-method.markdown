---

title: Generation of automated unit tests for a controller layer system and method
abstract: A method, computer program product, and computer system for receiving, by a computing device, a selection of one or more files for which to have one or more automated unit tests generated for an application under test. An action in the application under test is received while the application under test is used. Behavior data of how the application under test responds to the action is tracked. An automated unit test of the one or more automated unit tests is generated for underlying code of the application under test invoked when receiving the action based upon, at least in part, the behavior data of how the application under test responds to the action.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09400738&OS=09400738&RS=09400738
owner: International Business Machines Corporation
number: 09400738
owner_city: Armonk
owner_country: US
publication_date: 20150414
---
The subject application is a continuation application of U.S. patent application Ser. No. 14 454 236 filed on Aug. 7 2014 the entire content of which is herein incorporated by reference.

A common design pattern for developing software applications may include the model view controller pattern. For example the model may include the data the view may include how the user interacts with the software application and the controller may include the middle logic or service layer that the view may call to interact with the model. Users e.g. software developers working on a software application using the above noted model view controller pattern may be unaware if they make a change to the controller how it may affect various pieces of the view. Unit tests may be created to ensure that code in the controller layer continues to behave correctly.

In one implementation a method performed by one or more computing devices may include but is not limited to receiving by a computing device a selection of one or more files for which to have one or more automated unit tests generated for an application under test. An action in the application under test may be received while the application under test is used. Behavior data of how the application under test responds to the action may be tracked. An automated unit test of the one or more automated unit tests may be generated for underlying code of the application under test invoked when receiving the action based upon at least in part the behavior data of how the application under test responds to the action.

One or more of the following features may be included. It may be determined that the behavior data of how the application under test responds is unexpected and at least a portion of the behavior data may be removed in response to determining that the behavior data of how the application under test responds is unexpected. It may be determined that the behavior data of how the application under test responds is as expected wherein the automated unit test for the underlying code of the application under test invoked may be generated based upon determining that the behavior data of how the application under test responds is as expected. The behavior data of how the application under test responds may include at least one method called in response to receiving the action in the application under test. The behavior data of how the application under test responds may include at least one of a value and an object passed into the at least one method called in response to receiving the action in the application under test. The behavior data of how the application under test responds may include at least one of a value and an object returned by the at least one method called in response to receiving the action in the application under test. The automated unit test may call the at least one method using identical parameters used in response to receiving the action in the application under test.

In another implementation a computing system includes a processor and a memory configured to perform operations that may include but are not limited to receiving a selection of one or more files for which to have one or more automated unit tests generated for an application under test. An action in the application under test may be received while the application under test is used. Behavior data of how the application under test responds to the action may be tracked. An automated unit test of the one or more automated unit tests may be generated for underlying code of the application under test invoked when receiving the action based upon at least in part the behavior data of how the application under test responds to the action.

One or more of the following features may be included. It may be determined that the behavior data of how the application under test responds is unexpected and at least a portion of the behavior data may be removed in response to determining that the behavior data of how the application under test responds is unexpected. It may be determined that the behavior data of how the application under test responds is as expected wherein the automated unit test for the underlying code of the application under test invoked may be generated based upon determining that the behavior data of how the application under test responds is as expected. The behavior data of how the application under test responds may include at least one method called in response to receiving the action in the application under test. The behavior data of how the application under test responds may include at least one of a value and an object passed into the at least one method called in response to receiving the action in the application under test. The behavior data of how the application under test responds may include at least one of a value and an object returned by the at least one method called in response to receiving the action in the application under test. The automated unit test may call the at least one method using identical parameters used in response to receiving the action in the application under test.

In another implementation a computer program product resides on a computer readable storage medium that has a plurality of instructions stored on it. When executed by a processor the instructions cause the processor to perform operations that may include but are not limited to receiving a selection of one or more files for which to have one or more automated unit tests generated for an application under test. An action in the application under test may be received while the application under test is used. Behavior data of how the application under test responds to the action may be tracked. An automated unit test of the one or more automated unit tests may be generated for underlying code of the application under test invoked when receiving the action based upon at least in part the behavior data of how the application under test responds to the action.

One or more of the following features may be included. It may be determined that the behavior data of how the application under test responds is unexpected and at least a portion of the behavior data may be removed in response to determining that the behavior data of how the application under test responds is unexpected. It may be determined that the behavior data of how the application under test responds is as expected wherein the automated unit test for the underlying code of the application under test invoked may be generated based upon determining that the behavior data of how the application under test responds is as expected. The behavior data of how the application under test responds may include at least one method called in response to receiving the action in the application under test. The behavior data of how the application under test responds may include at least one of a value and an object passed into the at least one method called in response to receiving the action in the application under test. The behavior data of how the application under test responds may include at least one of a value and an object returned by the at least one method called in response to receiving the action in the application under test. The automated unit test may call the at least one method using identical parameters used in response to receiving the action in the application under test.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages will become apparent from the description the drawings and the claims.

As will be appreciated by one skilled in the art aspects of the present disclosure may be embodied as a system method or computer program product. Accordingly aspects of the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an aspect oriented programming language an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present disclosure are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present disclosure. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Referring now to there is shown generation process that may reside on and may be executed by a computer e.g. computer which may be connected to a network e.g. network e.g. the internet or a local area network . Examples of computer and or one or more of the client electronic devices noted below may include but are not limited to a personal computer s a laptop computer s mobile computing device s a server computer a series of server computers a mainframe computer s or a computing cloud s . Computer may execute an operating system for example but not limited to Microsoft Windows Mac OS X Red Hat Linux or a custom operating system. Microsoft and Windows are registered trademarks of Microsoft Corporation in the United States other countries or both Mac and OS X are registered trademarks of Apple Inc. in the United States other countries or both Red Hat is a registered trademark of Red Hat Corporation in the United States other countries or both and Linux is a registered trademark of Linus Torvalds in the United States other countries or both .

As will be discussed below in greater detail generation process may receive by a computing device a selection of one or more files for which to have one or more automated unit tests generated for an application under test. An action in the application under test may be received while the application under test is used. Behavior data of how the application under test responds to the action may be tracked. An automated unit test of the one or more automated unit tests may be generated for underlying code of the application under test invoked when receiving the action based upon at least in part the behavior data of how the application under test responds to the action.

The instruction sets and subroutines of generation process which may be stored on storage device coupled to computer may be executed by one or more processors not shown and one or more memory architectures not shown included within computer . Storage device may include but is not limited to a hard disk drive a flash drive a tape drive an optical drive a RAID array a random access memory RAM and a read only memory ROM .

Network may be connected to one or more secondary networks e.g. network examples of which may include but are not limited to a local area network a wide area network or an intranet for example.

Computer may include a data store such as a database e.g. relational database object oriented database triplestore database etc. and may be located within any suitable memory location such as storage device coupled to computer . Any data described throughout the present disclosure may be stored in the data store. In some implementations computer may utilize a database management system such as but not limited to My Structured Query Language MySQL in order to provide multi user access to one or more databases such as the above noted relational database. The data store may also be a custom database such as for example a flat file database or an XML database. Any other form s of a data storage structure and or organization may also be used. Generation process may be a component of the data store a stand alone application that interfaces with the above noted data store and or an applet application that is accessed via client applications . The above noted data store may be in whole or in part distributed in a cloud computing topology. In this way computer and storage device may refer to multiple devices which may also be distributed throughout the network.

Computer may execute an application under test AUT e.g. AUT examples of which may include but are not limited to e.g. a web conferencing application a video conferencing application a voice over IP application a video over IP application Instant Messaging IM chat application or other application that may interact with a software development application. Generation process and or AUT may be accessed via client applications . Generation process may be a stand alone application or may be an applet application script extension that may interact with and or be executed within AUT a component of AUT and or one or more of client applications . AUT may be a stand alone application or may be an applet application script extension that may interact with and or be executed within generation process a component of generation process and or one or more of client applications . One or more of client applications may be a stand alone application or may be an applet application script extension that may interact with and or be executed within and or be a component of generation process and or AUT . Examples of client applications may include but are not limited to e.g. a web conferencing application a video conferencing application a voice over IP application a video over IP application Instant Messaging IM chat application or other application that may interact with a software development application a software development application a standard and or mobile web browser an email client application a textual and or a graphical user interface a customized web browser a plugin an Application Programming Interface API or a custom application. The instruction sets and subroutines of client applications which may be stored on storage devices coupled to client electronic devices may be executed by one or more processors not shown and one or more memory architectures not shown incorporated into client electronic devices .

Storage devices may include but are not limited to hard disk drives flash drives tape drives optical drives RAID arrays random access memories RAM and read only memories ROM . Examples of client electronic devices and or computer may include but are not limited to a personal computer e.g. client electronic device a laptop computer e.g. client electronic device a smart data enabled cellular phone e.g. client electronic device a notebook computer e.g. client electronic device a tablet not shown a server not shown a television not shown a smart television not shown a media e.g. video photo etc. capturing device not shown and a dedicated network device not shown . Client electronic devices may each execute an operating system examples of which may include but are not limited to Android Apple iOS Mac OS X Red Hat Linux or a custom operating system.

One or more of client applications may be configured to effectuate some or all of the functionality of generation process and vice versa . Accordingly generation process may be a purely server side application a purely client side application or a hybrid server side client side application that is cooperatively executed by one or more of client applications and or generation process .

One or more of client applications may be configured to effectuate some or all of the functionality of AUT and vice versa . Accordingly AUT may be a purely server side application a purely client side application or a hybrid server side client side application that is cooperatively executed by one or more of client applications and or AUT . As one or more of client applications generation process and AUT taken singly or in any combination may effectuate some or all of the same functionality any description of effectuating such functionality via one or more of client applications generation process AUT or combination thereof and any described interaction s between one or more of client applications generation process AUT or combination thereof to effectuate such functionality should be taken as an example only and not to limit the scope of the disclosure.

Users may access computer and generation process e.g. using one or more of client electronic devices directly through network or through secondary network . Further computer may be connected to network through secondary network as illustrated with phantom link line . Generation process may include one or more user interfaces such as browsers and textual or graphical user interfaces through which users may access generation process .

The various client electronic devices may be directly or indirectly coupled to network or network . For example client electronic device is shown directly coupled to network via a hardwired network connection. Further client electronic device is shown directly coupled to network via a hardwired network connection. Client electronic device is shown wirelessly coupled to network via wireless communication channel established between client electronic device and wireless access point i.e. WAP which is shown directly coupled to network . WAP may be for example an IEEE 802.11a 802.11b 802.11g Wi Fi and or Bluetooth device that is capable of establishing wireless communication channel between client electronic device and WAP . Client electronic device is shown wirelessly coupled to network via wireless communication channel established between client electronic device and cellular network bridge which is shown directly coupled to network .

Some or all of the IEEE 802.11x specifications may use Ethernet protocol and carrier sense multiple access with collision avoidance i.e. CSMA CA for path sharing. The various 802.11x specifications may use phase shift keying i.e. PSK modulation or complementary code keying i.e. CCK modulation for example. Bluetooth is a telecommunications industry specification that allows e.g. mobile phones computers smart phones and other electronic devices to be interconnected using a short range wireless connection. Other forms of interconnection e.g. Near Field Communication NFC may also be used.

Referring also to there is shown a diagrammatic view of client electronic device . While client electronic device is shown in this figure this is for illustrative purposes only and is not intended to be a limitation of this disclosure as other configurations are possible. For example any computing device capable of executing in whole or in part generation process may be substituted for client electronic device within examples of which may include but are not limited to computer and or client electronic devices .

Client electronic device may include a processor and or microprocessor e.g. microprocessor configured to e.g. process data and execute the above noted code instruction sets and subroutines. Microprocessor may be coupled via a storage adaptor not shown to the above noted storage device s e.g. storage device . An I O controller e.g. I O controller may be configured to couple microprocessor with various devices such as keyboard pointing selecting device e.g. mouse custom device e.g. device USB ports not shown and printer ports not shown . A display adaptor e.g. display adaptor may be configured to couple display e.g. CRT or LCD monitor s with microprocessor while network controller adaptor e.g. an Ethernet adaptor may be configured to couple microprocessor to the above noted network e.g. the Internet or a local area network .

As discussed above and referring also at least to generation process may receive by a computing device a selection of one or more files for which to have one or more automated unit tests generated for an application under test. Generation process may receive an action in the application under test while the application under test is used. Behavior data of how the application under test responds to the action may be tracked by generation process . Generation process may generate an automated unit test of the one or more automated unit tests for underlying code of the application under test invoked when receiving the action based upon at least in part the behavior data of how the application under test responds to the action.

As noted above a common design pattern for developing software applications may include the model view controller pattern. For example the model may include the data the view may include how the user interacts with the software application and the controller may include the middle logic or service layer that the view may call to interact with the model. Users e.g. software developers working on a software application using the above noted model view controller pattern may be unaware if they make a change to the controller how it may affect various pieces of the view.

Automated unit tests may be created to ensure that code in the controller layer continues to behave correctly. However for a large code base that may not have any existing automated unit tests the software developers may feel uncertain if the changes being made to the controller layer will break pieces of the view and creating a solid unit test case suite from scratch may be onerous. Since view test automation may be brittle creating test automation for the controller layer may be a more valuable investment. For instance assume for example purposes only that a software developer e.g. user recently joined the APPLICATION EXAMPLE team for AUT . The AUT code base may e.g. be very large have no automated testing and or use the model view controller design pattern. It may take user months to learn and become completely comfortable with the code base and even then user may make a change to the controller layer and overlook a way that one piece of the view was expecting the controller to behave. In this example user may break functionality in the view and introduce defects into AUT .

Thus in some implementations generation process may automatically generate automated unit tests for e.g. the controller layer by invoking the view layer. As opposed to generating automated unit tests by performing static analysis of the code base and how to record tests of the higher level view layer generation process may generate automated unit tests for the underlying code that is actually being invoked when AUT is in use.

For example in some implementations generation process may receive by a computing device a selection of one or more files for which to have one or more automated unit tests generated for an application under test. For instance generation process may include a user interface such as the example and non limiting user interface shown in . In the example user interface may include a code editor not shown and other functionality similarly known to those skilled in the art for developing software applications such as example AUT . Further in the example generation process may receive e.g. via user cursor a selection of the files e.g. via object for which generation process is to have automated unit tests generated e.g. files that may be part of the controller portion of AUT that indicate generation process should track those files to generate automated unit tests . An example of a file e.g. UserProfile.java may include an example method e.g. method like that shown in .

Further assume in the example that generation process receives e.g. via user cursor a user input to launch AUT e.g. via object . Further assume in the example that generation process receives e.g. via user cursor a user input for generation process to begin tracking behavior data of AUT e.g. via object .

In some implementations generation process may receive an action in the application under test while the application under test is used. For instance assume for example purposes only that as user uses AUT user uses cursor to e.g. click an option or type something into a dialogue box not shown . For example and referring now at least to example user via generation process may receive an action to access e.g. BestUserEver s profile page in AUT and the user s name e.g. Jane Jones may be displayed on the page of AUT . Generation process may track information e.g. behavior data about the code that was called to access BestUserEver s profile page in AUT and may store the example behavior data e.g. behavior data shown in .

In some implementations as noted above behavior data of how the application under test responds to the action may be tracked by generation process . For instance the behavior data of how AUT responds may include at least one method called in response to receiving the action in AUT e.g. what methods or functions in the code for AUT are called in response to the above noted received action . As another example the behavior data of how AUT responds may include at least one of a value and an object passed into the at least one method called in response to receiving the action in AUT . As yet another example the behavior data of how AUT responds may include at least one of a value and an object returned by the at least one method called in response to receiving the action in AUT . In some implementations aspect oriented programming methods may be used by generation process to insert observer code to track each method s interaction with its own object and objects that are passed to it.

In some implementations generation process may generate an automated unit test of the one or more automated unit tests for underlying code of AUT invoked when receiving the action based upon at least in part the behavior data of how the application under test responds to the action. For example generation process may determine that the behavior data of how AUT responds is as expected wherein the automated unit test for the underlying code of AUT invoked may be generated based upon determining that the behavior data of how the application under test responds is as expected. For instance assume for example purposes only that user believes that AUT behaved as expected. In the example generation process may receive e.g. via user cursor a user input to indicate that user believes that AUT behaved as expected e.g. via object . For example if AUT behaved as expected generation process may generate automated unit tests that duplicate the above noted information i.e. behavior data that was tracked like the example automated unit test e.g. automated unit test shown at .

In the example user via generation process may now run automated unit tests such as automated unit test that were generated whenever user makes changes to the code base of AUT . Because the automated unit tests are testing code that is lower than the frequently changing and commonly brittle view the automated unit tests may be more stable. Once user via generation process has generated automated unit tests for the common functions in the view changes made to the controller are not likely to introduce defects in the view in those areas. In some implementations user via generation process may run these automated unit tests at any time to check for regressions. In some implementations generation process may remove any duplicate automated unit tests.

In some implementations the automated unit test may call the at least one method using identical parameters used in response to receiving the action in AUT . For example generation process may generate an automated unit test for every time a method was called in response to receiving the action in AUT . The automated unit test via generation process may call the function using the same parameters that were used when user took the action that was received . The automated unit test via generation process may verify that the return value is the same value that was returned when user took the action that was received . The automated unit test via generation process may also make assertions about the method s interactions with the objects that were passed as parameters or the state of the object that the method operates on.

In some implementations generation process may determine that the behavior data of how the application under test responds is unexpected and at least a portion of the behavior data may be removed by generation process in response to determining that the behavior data of how the application under test responds is unexpected. For instance assume for example purposes only that user believes that AUT did not behave as expected e.g. the return value is not the same value that was returned when user took the action that was received . In the example generation process may receive e.g. via user cursor a user input to indicate that user believes that AUT did not behave as expected e.g. via object . In some implementations if AUT did not behave as expected generation process may remove the behavior data tracked .

In some implementations generation process may track the runtime data over time by observing an actively used test system e.g. generation process . For example statistical analysis may then be performed on the data collected over time to generate useful typical and edge cases. For instance if a method accepts a string the data collected over time may allow user to understand what is the length of a typical string as well as what may be the extreme cases for which may need to be tested.

While one or more implementations may include user action e.g. via cursor and user interface it will be appreciated that any of the user action may be automated by generation process . For example determining that the behavior data of how the application under test responds may be accomplished automatically by generation process rather than requiring an input from user as described above. As another example the behavior data may be tracked automatically at any point e.g. while the application under test is being executed rather than requiring an input from user as described above. As such any description of using a user s input should be taken as an example only and not to limit the scope of the disclosure.

The terminology used herein is for the purpose of describing particular implementations only and is not intended to be limiting of the disclosure. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps not necessarily in a particular order operations elements and or components but do not preclude the presence or addition of one or more other features integers steps not necessarily in a particular order operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present disclosure has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the disclosure in the form disclosed. Many modifications variations and any combinations thereof will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the disclosure. The implementation s were chosen and described in order to best explain the principles of the disclosure and the practical application and to enable others of ordinary skill in the art to understand the disclosure for various implementation s with various modifications and or any combinations of implementation s as are suited to the particular use contemplated.

Having thus described the disclosure of the present application in detail and by reference to implementation s thereof it will be apparent that modifications variations and any combinations of implementation s including any modifications variations and combinations thereof are possible without departing from the scope of the disclosure defined in the appended claims.

