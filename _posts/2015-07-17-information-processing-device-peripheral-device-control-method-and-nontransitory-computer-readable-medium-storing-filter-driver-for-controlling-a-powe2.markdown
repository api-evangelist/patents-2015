---

title: Information processing device, peripheral device control method, and non-transitory computer readable medium storing filter driver for controlling a power state of a peripheral device
abstract: In an information processing device, if the power state of a peripheral device changed by a class driver is the low-power state, in which the peripheral device consumes less power than in its normal state but its operation is limited, a filter driver below the class driver suspends controlling the peripheral device in accordance with a control request from an application program without passing through the class driver until the power state of the peripheral device returns to the normal state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09563443&OS=09563443&RS=09563443
owner: Renesas Electronics Corporation
number: 09563443
owner_city: Kanagawa
owner_country: JP
publication_date: 20150717
---
This application is based upon and claims the benefit of priority from Japanese patent application No. 2014 169502 filed on Aug. 22 2014 the disclosure of which is incorporated herein in its entirety by reference.

The present invention relates to an information processing device a peripheral device control method and a filter driver. For example the invention relates to a technology that controls the power state of a peripheral device.

Universal Serial Bus USB is being widely used as a general purpose bus which connects a computer and a peripheral device to input or output data. For this reason various types of USB related technology are being considered.

One type is filter drivers e.g. Japanese Unexamined Patent Application Publication No. 2013 16166 Japanese Patent No. 4720959 Japanese Patent No. 4959766 U.S. Pat. No. 6 067 628 . Typically a filter driver is inserted below a device driver and provides additional functions that the device driver does not support. Another type is Selective Suspend e.g. U.S. Pat. No. 8 386 813 . Selective Suspend is a technology that saves power by selectively putting a USB device into a suspended state low power state in accordance with the operating state thereof.

Selective Suspend described above is a very useful technology to save power. However in the case of adopting Selective Suspend when a USB device is accessed attention must be paid to the power state of the USB device. That is there is a problem that accessing a suspended USB device would result in an error. This problem occurs in not only USB devices but also any other types of peripheral devices which are selectively put into a suspended state.

Other problems and novel features will be apparent from the description of the present specification and the accompanying drawings.

According to one embodiment if the power state of a peripheral device changed by a class driver is the low power state an information processing device suspends control of the peripheral device in accordance with a control request from an application program without passing through the class driver until the power state of the peripheral device returns to the normal state.

According to the one embodiment it is possible to prevent access to the peripheral device from resulting in an error.

Now preferred embodiments of the present invention will be described with reference to the accompanying drawings. Specific numbers and the like described in the embodiments below are only examples for facilitating the understanding of the present invention and are not limiting unless otherwise specified. Further matters and the like obvious for those skilled in the art in the following description and accompanying drawings are omitted or simplified as appropriate to clarify the description.

First referring to there will be described the configuration of a personal computer according to a first comparative example. As shown in the personal computer PC includes a USB host controller an operating system OS and an application program or simply referred to as application .

USB devices a USB hub and multiple USB devices are connected to the PC . While the PC is connected to the USB devices through the USB hub in the example shown in the PC may be connected to the USB devices directly that is not through the USB hub . The PC transmits and receives various types of data to and from the USB devices through the USB hub . The PC may transmit and receive various types of data to and from not the USB devices but the USB hub .

The USB hub relays data between the PC and USB devices . One USB device may be connected to the USB hub or multiple USB devices may be connected to the USB hub .

Examples of the USB devices include a human interface device a document related device a video device an audio device an external storage device and a communication device. Examples of the human interface device include a keyboard a mouse and a liquid crystal display. Examples of the document related device include a printer and a multifunction printer. Examples of the video device include a digital camera and a webcam. Examples of the audio device include a speaker and a headphone. Examples of the external storage device include a USB memory a hard disk drive an optical drive and a Floppy disk drive. Examples of the communication device include a modem and a Bluetooth adapter.

The USB host controller is a semiconductor chip that controls the USB hub and USB devices in accordance with requests from the OS . The USB host controller transmits and receives various types of data to and from the USB hub and USB devices under the control of the OS .

The OS schedules and executes multiple applications. The multiple applications include the application . The OS includes a USB host controller driver a USB hub class driver and multiple USB device class drivers . By using the drivers to the OS provides a function of controlling the USB devices and to the higher level program the application .

The USB host controller driver controls the USB host controller in accordance with a request from the USB hub class driver . To control the USB devices and the USB host controller driver requests the USB host controller to control the USB devices and . That is the USB host controller driver is a program below the USB hub class driver .

The USB hub class driver controls the USB hub as well as controls the USB devices in accordance with requests from the USB device class drivers . To control the USB devices and the USB hub class driver requests the USB host controller driver to control the USB devices and . That is the USB hub class driver is a program below the USB device class drivers .

The USB hub class driver also has a function of accommodating the differences among the USB device class drivers . Accordingly even when the different types of USB device class drivers issue requests to control the USB devices the USB hub class driver can issue to the USB host controller driver control requests according to a unified interface.

The USB device class drivers control the USB devices in accordance with requests from the application . To control the USB devices the USB device class drivers issues requests to control the USB devices to the USB hub class driver . That is the USB device class drivers are programs below the application which is running on the OS .

The application is a program software that performs any processes. The processes performed by the application include a process of controlling the USB devices . The application controls the USB devices using the USB device class drivers . Specifically to control the USB devices the application issues requests to control the USB devices to the USB device class drivers .

The respective USB device class drivers are prepared for the respective types of the USB devices . The types of the USB devices are also called device classes and are defined in the USB standard. Each USB device class driver provides an interface for controlling a corresponding type of USB device to the application which is running on the OS . Accordingly the application controls a USB device by using a USB device class driver corresponding to the type of the USB device .

As seen above the OS includes the drivers to for implementing the functions defined in the USB standard in regard to the USB devices and . Thus simply connecting the USB devices and to the PC allows them to be controlled. However additional functions which differ from the functions defined in the USB standard cannot be implemented by only the drivers to which are included in the OS as standard. The same also applies to functions that have been newly added to the USB standard but which are not supported by the drivers to which are included in the OS as standard. There are two conceivable methods for implementing these functions.

Referring to the configuration of a PC according to a first method will be described. Any description similar to that described with reference to will be omitted as appropriate. Compared to the PC shown in a PC shown in includes a unique USB hub driver in place of the USB hub class driver . Also compared to the PC shown in the PC shown in further includes a USB hub control application .

The USB hub control application is a program software that performs any processes. The processes performed by the USB hub control application include a process of controlling a USB hub . Note that the processes performed by the USB hub control application unlike the application includes a process of controlling the USB hub for the additional functions as described above. When the USB hub control application controls the USB hub for the additional functions the USB hub control application directly uses the unique USB hub driver to control the USB hub .

Compared to the USB hub class driver the unique USB hub driver further provides the USB hub control application which sits thereabove with a function of controlling the USB hub for the additional functions. Thus the unique USB hub driver can also request a USB host controller driver to control the USB hub for the additional functions.

According to this configuration the USB hub control application can control the USB hub for the additional functions by directly using unique USB hub driver .

Next referring to the configuration of a PC according to a second method will be described. Any description similar to that described with reference to will be omitted as appropriate. Compared to the PC shown in the PC shown in further includes a USB hub control application and a USB hub filter driver . The USB hub filter driver is additionally inserted between a USB host controller driver and a USB hub class driver . That is the PC shown in additionally includes the USB hub filter driver as a filter driver.

The USB hub control application shown in differs from that shown in in that it uses not the unique USB hub driver but the USB hub filter driver . Specifically when the USB hub control application shown in controls the USB hub based on the additional functions the USB hub control application controls the USB hub by directly using the USB hub filter driver without using the USB hub class driver .

Further the USB hub class driver shown in differs from that shown in in that it requests not directly but through the USB hub filter driver the USB host controller driver to control the USB devices and .

The USB hub filter driver controls the USB device and in accordance with requests from the USB hub class driver . To control the USB device and the USB hub filter driver requests the USB host controller driver to control the USB device and . As seen above the USB hub filter driver is a program below the USB hub class driver .

The USB hub filter driver also has a function of controlling the USB hub to provide the additional functions on the basis of the USB hub control application . That is the USB hub filter driver can also request the USB host controller driver to control the USB hub for the additional functions.

As seen above the USB host controller driver shown in differs from that shown in in that it controls the USB host controller in accordance with not a direct request from the USB hub class driver but a request from the USB hub filter driver .

According to this configuration the USB hub control application can control the USB hub for the additional functions using the USB hub filter driver .

Next referring to the function block configuration of the USB hub filter driver will be described. As shown in the USB hub filter driver includes a hub class transfer request relay function a power management request relay function and an application transfer request relay function .

In the types of requests to control the USB hub there are a transfer request requesting the transfer of data to the USB hub and a power management request requesting the change of the power state of the USB hub or the like. Further in the types of power management requests there are a Wait Wake request a Set Power D request and a Set Power D request. A Set Power D request is a request to make the transition of the USB hub from its normal operating state to its low power state a request to suspend the USB hub . A Wait Wake request is a request to enable the Remote Wake of the USB hub . A Set Power D request is a request to make the transition of the USB hub from the low power state to the normal operating state a request to resume the USB hub . The low power state is a state in which the USB hub consumes less power than in the normal operating state and its operation is limited. Both of a transfer request and a power management request are information in a form which can be transmitted and received in the PC .

The hub class transfer request relay function relays a transfer request between the USB hub class driver and the USB host controller driver . The power management request relay function relays a power management request between the USB hub class driver and the USB host controller driver .

The hub class transfer request relay function has a request receiving function a request transmission function a result receiving function and a result reporting function .

The request receiving function receives a transfer request from the USB hub class driver . The request transmission function transmits the transfer request received by the request receiving function to the USB host controller driver . The result receiving function receives from the USB host controller driver a transfer result which is information indicating the result of a process corresponding to the transfer request. The result reporting function reports the transfer result received by the result receiving function to the USB hub class driver .

The power management request relay function has a request receiving function a request transmission function a result receiving function and a result reporting function .

The request receiving function receives a power management request from the USB hub class driver . The request transmission function transmits the power management request received by the request receiving function to the USB host controller driver . The result receiving function receives from the USB host controller driver a power management result which is information indicating the result of a process corresponding to the power management request. The result reporting function reports the power management result received by the result receiving function to the USB hub class driver .

In the requests issued from the USB hub control application to the USB hub filter driver there is a transfer request requesting the transfer of data to the USB hub . The application transfer request relay function relays the transfer request between the USB hub control application and the USB host controller driver .

The application transfer request relay function includes a request receiving function a request transmission function a result receiving function and a result reporting function .

The request receiving function receives a transfer request from the USB hub control application . The request transmission function transmits the transfer request received by the request receiving function to the USB host controller driver . The result receiving function receives from the USB host controller driver a transfer result indicating the result of a process corresponding to the transfer request. The result reporting function reports the transfer result received by the result receiving function to the USB hub control application .

Next referring to a transfer process performed by the PC according to the third comparative example will be described. In this comparative example there will be described a process in which the USB hub filter driver transfers data to the USB hub in accordance with a request from the USB hub control application .

First when the USB hub control application transmits data to the USB hub the USB hub control application transmits to the USB hub filter driver a transfer request to transfer data to the USB hub S . The request receiving function of the USB hub filter driver receives the transfer request from the USB hub control application . The request transmission function thereof transmits the transfer request to the USB host controller driver S . In accordance with the transfer request from the USB hub filter driver the USB host controller driver instructs the USB host controller to start to transfer the data to the USB hub S .

The USB host controller starts to transfer the data to the USB hub in accordance with the instruction from the USB host controller driver S . More specifically the transfer request includes the data to be transferred to the USB hub . The USB host controller driver transmits the data to be transferred to the USB hub to the USB host controller . The USB host controller transmits the data from the USB host controller driver to the USB host controller . In this way the data requested to transfer by the USB hub control application are transmitted to the USB hub .

This data includes for example information in which the USB hub control application requests the USB hub to perform a desired operation. Examples of such a request include a request to report the state of the USB hub and a request to set the operation of the USB hub . For example if the USB hub is requested to report the states of the ports thereof the USB hub transmits information indicating the states of each of the ports to the USB host controller . The USB host controller transfers the information received from the USB hub to the USB hub control application through the USB host controller driver and USB hub filter driver .

Upon completion of the transfer of all the data to the USB hub the USB host controller reports the completion of the transfer to the USB host controller driver using an interrupt S . In response to the interrupt from the USB host controller indicating the completion of the transfer the USB host controller driver transmits a transfer result indicating the normal completion of the transfer request to the USB hub filter driver S . The result receiving function of the USB hub filter driver receives the transfer result from the USB host controller driver . The result reporting function thereof transmits the transfer result to the USB hub control application S .

Next referring to Selective Suspend of USB device will be described. USB device class drivers and USB hub class drivers have a function of putting the corresponding USB devices USB hubs and USB devices into the low power states suspended states in accordance with the operating states of the USB devices even when the PC is running. This function is generally called Selective Suspend. 

For example if the operation of any USB device has not been detected by the corresponding the USB device class driver over a predetermined period of time the USB device class driver puts the USB device into the low power state.

Further if no USB device is connected to any downstream port of the USB hub or if any USB device or another USB hub is connected to any downstream port of the USB hub but the USB device is in the low power state the USB hub class driver puts the USB hub into the low power state. When the USB device or USB hub is put into the low power state the communication link between the USB device or USB hub and the USB hub or USB host controller located on the upstream side thereof is disabled. The transfer of the data to the low power state USB device or USB hub is interrupted.

The USB device connected to the downstream port is in the low power state. Accordingly the USB hub is also in the low power state. For the USB hub although the USB hub connected to the downstream port is in the low power state and the downstream ports and are unconnected the USB device connected to the downstream port is in the normal operating state. Accordingly the USB hub remains in the normal operating state

For the low power state USB hub if new USB devices are connected to the unconnected downstream port and or if the USB device connected to the downstream port is disconnected or if the USB hub receives information requesting the restoration to the normal operating state Remote Wake from the low power state USB device connected to the downstream port the USB hub reports Remote Wake to the USB host controller through the upstream USB hub in order to restore itself to the normal operating state. For example assuming that the USB device is a mouse when the user performs an operation on the mouse the USB hub reports Remote Wake to the USB host controller . As seen above Remote Wake is issued when a predetermined operation is performed on the USB device or .

Next referring to a Selective Suspend process performed by the PC according to the third comparative example will be described. Specifically there will be described a process in which the USB hub class driver puts the USB hub into the low power state.

Before putting the USB hub into the low power state the USB hub class driver transmits a Wait Wake request to the USB hub filter driver in order to enable the Remote Wake function of the USB hub S . The request receiving function of the USB hub filter driver receives the Wait Wake request from the USB hub class driver . The request transmission function thereof transmits the Wait Wake request to the USB host controller driver S .

The USB host controller driver does not immediately complete the Wait Wake request but rather puts it on hold S . The USB host controller driver also transmits a Set Feature DEVICE REMOTE WAKEUP request to the USB hub through the USB host controller S . A Set Feature DEVICE REMOTE WAKEUP request is information requesting the USB hub to enable the Remote Wake reporting function. The USB hub enables the Remote Wake reporting function in accordance with the Set Feature DEVICE REMOTE WAKEUP request from the USB host controller driver S .

Subsequently the USB hub class driver transmits a Set Power D request to the USB hub filter driver S . The request receiving function of the USB hub filter driver receives the Set Power D request from the USB hub class driver . The request transmission function thereof transmits the Set Power D request to the USB host controller driver S . In accordance with the Set Power D request from the USB hub filter driver the USB host controller driver instructs the USB host controller to suspend the port having the USB hub connected thereto S . The USB host controller puts the port having the USB hub connected thereto into the low power state in accordance with the instruction from the USB host controller driver S .

When the port suspending process is completed the USB host controller driver transmits a power management result indicating the normal completion of the Set Power D request to the USB hub filter driver S . The result receiving function of the USB hub filter driver receives the power management result from the USB host controller driver . The result reporting function thereof transmits the power management result to the USB hub class driver S .

Next referring to a resume process performed by the PC according to the third comparative example will be described. Specifically there will be described a process in which when after the process described with reference to any USB device is connected to any downstream port of the selectively suspended USB hub the PC receives Remote Wake from the USB hub and restores the USB hub to the normal operating state.

When the USB hub detects that the USB device has been connected thereto S the USB hub transmits Remote Wake to the USB host controller S . In accordance with Remote Wake from the USB hub the USB host controller reports Remote Wake to the USB host controller driver using an interrupt S . Upon receipt of Remote Wake from the USB host controller the USB host controller driver transmits to the USB hub filter driver the power management result put on hold in step S and indicating the normal completion of the Wait Wake request S . The result receiving function of the USB hub filter driver receives the power management result from the USB host controller driver . The result reporting function thereof transmits the power management result to the USB hub class driver S .

In general the transfer request and the power management request are called I O request packets IRPs . If the OS supports I O request packets each driver can register in the OS a completion routine that the driver executes when receiving a report indicating the normal completion of a request in an I O request packet. For this reason the USB host controller driver puts the Wait Wake request on hold as described above and upon receipt of Remote Wake from the USB hub reports the normal completion of the Wait Wake request to the USB hub class driver . Thus the USB hub class driver can execute a completion routine that it has registered in the OS when issuing the Wait Wake request. In this case the completion routine registered by the USB hub class driver with respect to the Wait Wake request is a process of transmitting a Set Power D request described below.

The USB hub class driver transmits a Set Power D request to the USB hub filter driver in accordance with the power management result from the USB host controller driver S . The request receiving function of the USB hub filter driver receives the Set Power D request from the USB hub class driver . The request transmission function thereof transmits the Set Power D request to the USB host controller driver S . In accordance with the Set Power D request from the USB hub filter driver the USB host controller driver instructs the USB host controller to resume the port having the USB hub connected thereto S . The USB host controller resumes the port and restores the USB hub to the normal operating state in accordance with the instruction from the USB host controller driver S .

After the port is resumed the USB host controller driver transmits to the USB hub filter driver a power management result indicating the normal completion of the Set Power D request S . The result receiving function of the USB hub filter driver receives the power management result from the USB host controller driver . The result reporting function thereof transmits the power management result to the USB hub class driver S .

Subsequently the USB hub class driver accesses the USB hub through the USB hub filter driver USB host controller driver and USB host controller and then detects the USB device connected to the downstream port of the USB hub and starts to initialize it S . Specifically when the USB hub class driver detects that the USB device is connected to the USB hub it performs the acquisition of the configuration information of the USB device the assignment of a device address and the like.

However the USB hub filter driver according to the third comparative example does not consider satisfying both the control of the power state of the USB hub by the USB hub class driver and the access to the USB hub from the USB hub control application through the USB hub filter driver . That is in the USB hub filter driver according to the third comparative example the application transfer request relay function works independently of the hub class transfer request relay function and power management request relay function . For this reason the USB hub class driver and USB hub control application independently issue the power management request and the transfer request data for the USB hub respectively. As a result these two processes may compete against each other. Hereafter examples in which the two processes compete against each other will be described in detail.

First referring to a first example will be described. To simplify the description processes similar to those described with reference to are given the same reference signs and the description thereof is omitted as appropriate.

This example is a case in which first the USB hub class driver puts the USB hub to the low power state S to S and then the USB hub filter driver starts to transfer data to the USB hub in accordance with a transfer request from the USB hub control application S to S . In this case although the USB host controller driver instructs the USB host controller to start to transfer the data in step S the USB host controller cannot transfer the data normally. This is because the USB hub has already been put into the low power state. For this reason the USB host controller reports the transfer error to the USB host controller driver using an interrupt S . Upon receipt of the interrupt from the USB host controller indicating the transfer error the USB host controller driver transmits a transfer result indicating the erroneous completion of the transfer request to the USB hub filter driver S . The result receiving function of the USB hub filter driver receives the transfer result from the USB host controller driver . The result reporting function thereof transmits the transfer result to the USB hub control application S . In this way the transfer request for the USB hub from the USB hub control application completes with an error.

Next referring to a second example will be described. To simplify the description processes similar to those described with reference to are given the same reference signs and the description thereof is omitted as appropriate.

This example is a case in which first the USB hub filter driver starts to transfer data to the USB hub upon receipt of a transfer request from the USB hub control application S to S and then the USB hub class driver puts the USB hub into the low power state before the transfer of the data is completed S to S . In this case although the transfer of the data to the USB hub has yet to be completed the USB host controller driver puts the port into the low power state in accordance with a Set Power D request received from the USB hub class driver . Thus the USB host controller is prevented from transferring the remaining data normally. Accordingly the USB host controller reports the transfer error to the USB host controller driver S . As a result the USB host controller driver completes the transfer request from the USB hub filter driver with an error S . The USB hub filter driver also completes the transfer request from the USB hub control application with an error S .

As seen above the PC according to the third comparative example has a problem that when the power management request from the USB hub class driver and the transfer request from the USB hub control application without passing through the USB hub class driver compete against each other the transfer request results in an error. More specifically the problem is as follows the USB hub class driver recognizes the power state of the USB hub in order to control the power state of the USB hub the application transmits a transfer request through the USB hub class driver accordingly when the USB hub is put in the low power state the USB hub class driver can block the transfer request for example the USB hub class driver can perform control such as putting on hold of the transfer request from the application until the power state of the USB hub is restored to the normal operating state on the other hand a transfer request from the USB hub control application is not transmitted through the USB hub class driver but rather directly transmitted to the USB hub filter driver and accordingly even when the USB hub is put in the low power state the transfer request from the USB hub control application is not blocked and the data is transferred to the USB hub resulting in an error. Hereafter an embodiment for solving this problem will be described.

Next a PC according to a first embodiment will be described. Elements similar to those described thus far are given the same reference signs and descriptions thereof are omitted as appropriate. The configuration of the PC according to the first embodiment is similar to that of the PC shown in and will not be described.

The PC includes a central processing unit CPU and a storage unit and processes described below are performed by executing applications and and an OS drivers to stored in the storage unit by the CPU. This also applies to programs performed by each PC in later embodiments. The storage unit includes at least one storage device which can store the programs and . The storage device is for example a memory hard disk or the like.

Referring to there will be described the function block configuration of a USB hub filter driver according to the first embodiment. Compared to the USB hub filter driver shown in the USB hub filter driver according to the first embodiment further has a power state management function and a transfer state management function . A power management request relay function an application transfer request relay function the power state management function and the transfer state management function work in conjunction with one another.

The power state management function manages the power state of the USB hub while monitoring a power state change request from the USB hub class driver . Specifically the power state management function relays a power management request transferred from the request receiving function to the request transmission function in the power management request relay function and a power management result transferred from the result receiving function to the result reporting function the power management request relay function . The power state management function recognizes the power state of the USB hub on the basis of the power management request and the power management result when the power state management function relays the power management request and the power management result.

The transfer state management function manages the processing state of a transfer request from the USB hub control application . The transfer state management function relays a transfer request transferred from the request receiving function to the request transmission function in the application transfer request relay function and a transfer result transferred from the result receiving function and the result reporting function in the application transfer request relay function . The transfer state management function controls the transfer request and recognizes the execution state of the transfer request on the basis of the transfer request and the transfer result when the transfer state management function relays the transfer request from the USB hub control application and the transfer result.

Next referring to there will be described the function block configuration of the power state management function according to the first embodiment. The power state management function manages the current power state of the USB hub by recognizing the current power state as one of the following four states.

The power state management function has a resume request issuance function and a suspend request on hold function . When the transfer request is issued from the USB hub control application for the low power state USB hub the resume request issuance function puts the low power state USB hub into the normal operating state resumes the USB hub . When a Set Power D request is issued from the USB hub class driver while data is transferred to the USB hub the suspend request on hold function puts the Set Power D on hold until the transfer is completed.

When the power state management function receives a power management request Set Power D request to make a transition of the USB hub from the normal operating state to the low power state from the USB hub class driver and transmits the power management request to the USB host controller driver the power state management function changes the power state to Suspend Pending . Subsequently if the power state management function receives from the USB host controller driver a power management result indicating the normal completion of the power management request Set Power D request the power state management function updates the power state to Suspended . In contrast if the suspension of the USB hub fails and the power state management function receives a power management result indicating the erroneous completion of the power management request Set Power D request from the USB host controller driver the power state management function returns the power state to Working .

When the power state management function receives a power management request to restore the USB hub to the normal operating state Set Power D request from the USB hub class driver and transmits the power management request to the USB host controller driver the power state management function changes the power state to Resume Pending . Subsequently when the power state management function receives a power management result indicating the normal completion of the power management request Set Power D request from the USB host controller driver the power state management function updates the power state to Working . In contrast when the resumption of the USB hub fails and the power state management function receives a power management result indicating the erroneous completion of the power management request Set Power D request from the USB host controller driver the power state management function returns the power state to Suspended .

If the power state is Suspended at the time point when the USB hub filter driver receives a transfer request from the USB hub control application the USB hub filter driver resumes the USB hub and after the power state becomes Working starts to transfer data to the USB hub . If the power state is Resume Pending at the time point when the USB hub filter driver receives a transfer request from the USB hub control application the USB hub filter driver does nothing at that time point since the resume process has already started. Subsequently when the power state becomes Working the USB hub filter driver starts to transfer data the USB hub . If the power state is Suspend Pending at the time point when the USB hub filter driver receives a transfer request from the USB hub control application the USB hub filter driver does nothing at that time point since the suspended process is being executed. Subsequently when the power state becomes Suspended the USB hub filter driver resumes the USB hub again. After the power state becomes Working the USB hub filter driver starts to transfer data to the USB hub .

Next referring to there will be described the function block configuration of the transfer state management function according to the first embodiment. As shown in the transfer state management function has a transfer request counter a transfer request counter update function a transfer request queue a transfer request on hold function and an on hold transfer execution function .

The transfer request counter indicates the number of transfer requests which have been issued by the USB hub control application and which are being processed but are yet to be completed. The storage unit of the PC is used as the transfer request counter . The transfer request counter update function updates the transfer request counter . More specifically when the request receiving function receives a transfer request the transfer request counter update function is called and increments the transfer request counter by 1. Further when the result receiving function receives a transfer result the transfer request counter update function is called and decrements the transfer request counter by 1. Accordingly when the transfer request counter is 0 it means that there is no transfer request which has been issued by the USB hub control application and is being processed when the transfer request counter indicates a value other than 0 it means that there is are transfer request s which has have been issued by the USB hub control application and is are being processed.

The transfer request queue stores transfer requests to be put on hold. More specifically the storage unit of the PC is used as the transfer request queue and stores the pointers of transfer requests issued by the USB hub control application . If the USB hub is put in a state in which the transfer of data cannot be started immediately such as the low power state the transfer request on hold function queues a transfer request from the USB hub control application into the transfer request queue to put it on hold. If the USB hub is put into the normal operating state and thus the transfer request is allowed to be processed the on hold transfer execution function retrieves the transfer request on hold from the transfer request queue and transmits it.

Next referring to there will be described processes performed by the USB hub filter driver according to the first embodiment. First referring to there will be described a process that the USB hub filter driver performs when receiving a transfer request from the USB hub control application .

When the request receiving function receives a transfer request from the USB hub control application the transfer request counter update function increments the transfer request counter by S . The transfer state management function acquires the current power state from the power state management function and determines whether the power state is Working S . If the current power state is Working S Yes the transfer state management function transmits the transfer request to the USB host controller driver through the request transmission function S . If the current power state is a state other than Working S No the transfer state management function queues the transfer request into the transfer request queue through the transfer request on hold function to put it on hold S .

The transfer state management function then determines whether the current power state acquired from the power state management function is Suspended S . If the current power state is Suspended S Yes the power state management function changes the current power state to Resume Pending . Subsequently the resume request issuance function transmits a power management request to restore the USB hub to the normal operating state Set Power D request to the USB host controller driver through the request transmission function S . If the current power state is a state other than Suspended S No the current power state is not changed nor is the above power management request transmitted.

Next referring to there will be described a process that the USB hub filter driver performs when receiving a power management request to put the USB hub into the low power state Set Power D request from the USB hub class driver .

When the request receiving function receives a power management request Set Power D request from the USB hub class driver the power state management function acquires the current transfer request counter from the transfer state management function and determines whether the value is 0 S . If the transfer request counter is 0 S Yes the power state management function changes the current power state to Suspend Pending S . The power state management function then transmits the Set Power D request to the USB host controller driver through the request transmission function S . In contrast if the transfer request counter is a value other than 0 S No the power state management function puts the Set Power D request on hold through the suspend request on hold function S . This is because there is are transfer request s which has have been issued by the USB hub control application and is are being processed.

Next referring to there will be described a process that the USB hub filter driver performs when receiving from the USB host controller driver a transfer result indicating the normal completion of a transfer request from the USB hub control application .

When the result receiving function receives the transfer result from the USB host controller driver the transfer request counter update function decrements the transfer request counter by 1 S . The result reporting function transmits to the USB hub control application a transfer result indicating that the transfer request is completed S . Subsequently the power state management function determines whether there is any power management request to put the USB hub to the low power state Set Power D request which is put on hold by the suspend request on hold function S . If it is determined in step S that there is a power management request Set Power D request on hold the power state management function acquires the value of the transfer request counter from the transfer state management function and determines whether the value is 0 S . If the transfer request counter is 0 S Yes it means that all transfer requests issued by the USB hub control application are completed and therefore processes similar to steps S and S are performed S S . Thus the USB hub is put into the low power state.

Next referring to there will be described a process that the USB hub filter driver performs when receiving from the USB host controller driver a power management result indicating the normal completion of a Set Power D request.

When the result receiving function receives the power management result from the USB host controller driver the power state management function changes the current power state to Suspended S . The power state management function then determines whether there is are any transfer request s which is are put on hold in the transfer request queue through the transfer state management function S . If there is are transfer request s on hold S Yes the current power state is changed to Resume Pending S . Subsequently the resume request issuance function transmits a power management request to restore the USB hub to the normal operating state Set Power D request to the USB host controller driver through the request transmission function S .

Next referring to there will be described a process that the USB hub filter driver performs when receiving from the USB host controller driver a power management result indicating the normal completion of a Set Power D request.

When the result receiving function receives a power management result with respect to a Set Power D request from the USB host controller driver the power state management function changes the current power state to Working S . The transfer state management function determines whether there is are any transfer request s which is are put on hold in the transfer request queue S . If there is are such transfer request s the transfer state management function repeats the following processes 1 and 2 using the on hold transfer execution function until there is no longer any transfer request on hold in the transfer request queue S .

 2 A process of transmitting the retrieved transfer request to the USB host controller driver through the request transmission function S 

Next referring to there will be described a process performed when the USB hub filter driver receives a transfer request from the USB hub control application with the USB hub put in the low power state based on Selective Suspend.

When the USB hub filter driver receives a Set Power D request from the USB hub class driver S the USB hub filter driver changes the current power state to Suspend Pending S and then transmits the Set Power D request to the USB host controller driver S S . Thus the USB hub is put into the low power state S S .

When the USB hub filter driver receives from the USB host controller driver a power management result indicating the normal completion of the Set Power D request S the USB hub filter driver changes the current power state of the USB hub to Suspended and memorizes that the USB hub is put in the low power state S . The USB hub filter driver then transmits the power management result indicating the normal completion of the Set Power D request to the USB hub class driver S .

Subsequently when the USB hub filter driver receives a request to transfer data to the USB hub from the USB hub control application S the USB hub filter driver increments the transfer request counter S . Since the current power state is Suspended that is the USB hub is put in the low power state the USB hub filter driver does not immediately transmit the transfer request to the USB host controller driver but rather performs the following processes. Thus processes similar to steps S to S are performed and the USB hub is restored to the normal operating state.

When the USB hub filter driver receives a power management result indicating the normal completion of the Set Power D request from the USB host controller driver S the USB hub filter driver changes the current power state to Working S and transmits the power management result indicating the normal completion of the Set Power D request to the USB hub class driver S . The USB hub filter driver then retrieves the transfer request put on hold in the transfer request queue S and transmits it to the USB host controller driver S . Thus the transfer of the data to the USB hub is started S to S . Since the USB hub has been already restored to the normal operating state the transfer of the data to the USB hub is completed normally S to S .

Next referring to there will be described a process performed when the USB hub class driver attempts to selectively suspend the USB hub with data being transferred to the USB hub .

When data is being transferred to the USB hub in accordance with a transfer request S to S if the USB hub filter driver receives a Set Power D request from the USB hub class driver S the USB hub filter driver temporarily puts the Set Power D request on hold since the current transfer request counter is a value other than 0 that is the transfer request for the USB hub has yet to be completed S .

Subsequently when the USB hub filter driver receives from the USB host controller driver a transfer result indicating the normal completion of the request to transfer the data to the USB hub S S the USB hub filter driver decrements the transfer request counter S and then transmits the transfer result to the USB hub control application S . Further since the transfer request counter is 0 the USB hub filter driver changes the current power state to Suspend Pending S and then transmits the Set Power D request on hold to the USB host controller driver S . Thus a process of suspending the USB hub is started S to S . When the USB hub filter driver receives a power management result indicating the normal completion of the Set Power D request from the USB host controller driver S the USB hub filter driver changes the current power state to Suspended S and then transmits the power management result to the USB hub class driver S .

In this case the USB hub filter driver may delay the processing of the Set Power D request on hold by a predetermined period of time after receiving the transfer result indicating the completion of the transfer request from the USB host controller driver . If the USB hub filter driver receives a new request to transfer data to the USB hub from the USB hub control application during the predetermined period of time the USB hub filter driver may put the processing of the Set Power D request on hold again and transmit the transfer request to the USB host controller driver to first process the new transfer request. Thus if the USB hub control application often issues transfer requests it is possible to avoid unnecessary suspend and resume processes and thus to reduce the time required until the transfer is completed.

As seen above the USB hub filter driver according to the first embodiment includes the power state management function when relays a power state management request for the USB hub issued to the USB host controller driver by the USB hub class driver that is a Set Power D request or Set Power D request updates the power state of the USB hub on the basis of the power state management request and thus manages the power state of the USB hub . Specifically when a Set Power D request is completed normally the power state management function memorizes that the USB hub has been put into the low power state Suspended when a Set Power D request is completed normally the power state management function memorizes that the USB hub has been restored to the normal operating state Working .

Further the USB hub filter driver according to the first embodiment includes the transfer state management function when receives a transfer request for the low power state USB hub from the USB hub control application puts the transfer request on hold and manages information on a transfer request being processed.

More specifically when the transfer state management function receives a transfer request for the USB hub from the USB hub control application the transfer state management function checks the current power state of the USB hub if the current power state is the low power state Suspended the transfer state management function puts the transfer request on hold the power state management function issues a Set Power D request to the USB host controller driver in order to restore the USB hub to the normal operating state and after the Set Power D request is completed normally and thus the USB hub is restored to the normal operating state Working the transfer state management function starts to transfer the data to the USB hub .

Further when the power state management function receives a Set Power D request from the USB hub class driver the power state management function checks whether there is are any transfer request s from the USB hub control application which is are being processed. If there is are transfer request s being processed the power state management function puts the Set Power D request on hold. After the processing of all the transfer request s is completed the power state management function transmits the Set Power D request to the USB host controller driver and starts to suspend process for the USB hub .

Thus it is possible to solve the problem that the transfer of data to the low power state USB hub results in an error. That is it is possible to satisfy both of the transfer of data to the USB hub requested by the USB hub control application and the Selective Suspend control of the USB hub requested by the USB hub class driver . More specifically even when the USB hub is put in the low power state at the time point when the USB hub filter driver receives a transfer request from the USB hub control application or even when the USB hub filter driver receives a power management request to put the USB hub into the low power state from the USB hub class driver while a transfer request from the USB hub control application is being processed the transfer of the data to the USB hub can be normally completed.

Next a PC according to a second embodiment will be described. Elements similar to those described thus far are given the same reference signs and descriptions thereof are omitted as appropriate. The configuration of the PC according to the second embodiment is similar to that of the PC according to the first embodiment and therefore will not be described.

The function block configuration of a USB hub filter driver according to the second embodiment is similar to that of the USB hub filter driver shown in and therefore will not be described. Also the function block configuration of a transfer state management function according to the second embodiment is similar to that of the transfer state management function shown in and therefore will not be described.

Referring now to there will be described the function block configuration of a power state management function according to the second embodiment. As shown in compared to the power state management function shown in the power state management function according to the second embodiment has a pseudo Remote Wake generation function and a suspend request change function in place of the resume request issuance function and suspend request on hold function .

The pseudo Remote Wake generation function generates a situation in which Remote Wake has been reported from the USB hub in a pseudo manner in order to restore the USB hub to the normal operating state. When the suspend request change function receives a power management request to put the USB hub into the low power state Set Power D request from the USB hub class driver while data is transferred to the USB hub the suspend request change function makes a change to the content of the power management request to prevent a suspend process from being performed and transmits the resulting power management request to the USB host controller driver .

Next referring to there will be described a process that the USB hub filter driver performs when receiving a power management request to enable Remote Wake Wait Wake request from the USB hub class driver .

When the request receiving function receives a power management request Wait Wake request from the USB hub class driver the pseudo Remote Wake generation function stores pointer information indicating the point of the received Wait Wake request within itself S and transmits the Wait Wake request to the USB host controller driver using the request transmission function S .

Typically when each transfer request and power management request Wait Wake request Set Power D request Set Power D request or the like is issued it is held as information in a reserved region of the storage unit of the PC . For this reason to be exact the drivers to and transmit and receive the pointer of each of the transfer request and the power management request the address of the request in the reserved region of the storage unit to and from one another as transmitting and the receiving each of the transfer request and the power management request. As described above the transfer request and the power management request are typically called I O request packets. Accordingly by storing the pointer information of a Wait Wake request transmitted to another driver as described above it is possible to control according to the transmitted Wait Wake request on the basis of the stored pointer information at any timing.

Next referring to there will be described a process that the USB hub filter driver performs when receiving a transfer request from the USB hub control application .

The process shown in differs from the process according to the first embodiment described with reference to in that if the current power state is Suspended S Yes step S is performed in place of steps S and S and if the current power state is Suspended S Yes the pseudo Remote Wake generation function cancels the Wait Wake request transmitted to the USB host controller driver on the basis of the pointer information of the Wait Wake request stored in step S S .

Next referring to there will be described a process that the USB hub filter driver performs when receiving from the USB host controller driver a power management result indicating the completion of a Wait Wake request.

When the result receiving function receives the power management result from the USB host controller driver the pseudo Remote Wake generation function determines whether the completion status of the Wait Wake request indicated by the power management result is Canceled S . Specifically if the USB hub filter driver instructs the USB host controller driver to cancel the Wait Wake request by specifying the pointer of the request the USB host controller driver transmits to the USB hub filter driver a power management result in which the completion status of the Wait Wake request corresponding to this pointer is set to Canceled.

If the completion status is Canceled that is if the Wait Wake request has been cancelled S Yes the pseudo Remote Wake generation function determines whether this Wait Wake request is the Wait Wake request previously cancelled by itself in step S S .

Typically an I O request packet includes the field of a completion status indicating the processing result of a request packaged within itself. When a higher level driver transmits an I O request packet to a lower level driver the lower level driver sets a completion status indicating the processing result of the request in the I O request packet and then returns the resulting I O request packet to the request source higher level driver. That is the I O request packet is information which is held on the PC until the processing of the request is completed and returned to the request source. For this reason each of the transfer result and the power management result is information that is each of the transfer request and the power management request in which the completion status is set. Accordingly the pseudo Remote Wake generation function determines the Wait Wake request whose completion has been reported is the Wait Wake request previously cancelled by itself if the pointer stored in step S and the pointer of the power management result the power management request whose completion status is set are matched.

If the Wait Wake request whose completion has been reported is the Wait Wake request previously cancelled by itself S Yes the pseudo Remote Wake generation function changes the completion status of the Wait Wake request to Success S . If the completion status is not Canceled step S No or if the completion status is not the Wait Wake request cancelled by itself step S No or after step S is performed the completion status of the Wait Wake request is changed to Success the pseudo remote wake generation function transmits a power management result indicating the completion of the Wait Wake request to the USB hub class driver S . Accordingly if step S is No the completion status of the power management result reported to the USB hub class driver is set by the USB host controller driver if step S is No the completion status is set to Canceled and if step S is performed the completion status is set to Success.

Next referring to there will be described a process that the USB hub filter driver performs when receiving a Set Power D request from the USB hub class driver .

The process shown in differs from the process according to the first embodiment described with reference to in that if the transfer request counter is a value other than 0 S No steps S and S are performed in place of step S. If the transfer request counter is a value other than 0 S No the suspend request change function changes the power state designated by the power management request Set Power request from D to D S . The suspend request change function then transmits a power management request to restore the USB hub to the normal operating state Set Power D request to the USB host controller driver through the request transmission function S .

Next referring to there will be described a process that the USB hub filter driver performs when receiving from the USB host controller driver a transfer result indicating the completion of a transfer request from the USB hub control application .

The process shown in differs from the process according to the first embodiment described with reference to in that after step S is performed steps S and S are performed in place of steps S to . After step S is performed the pseudo Remote Wake generation function determines whether the pointer information of the Wait Wake request is stored S . If the pointer information of the Wait Wake request is stored S Yes the pseudo Remote Wake generation function performs a process similar to step S S . Thus the Wait Wake request is cancelled.

Next referring to there will be described a process that the USB hub filter driver performs when receiving from the USB host controller driver a power management result indicating that a Set Power D request has been completed normally.

The process shown in differs from the process according to the first embodiment described with reference to in that step S is further performed if step S is No steps S to S are performed and if step S is Yes steps S and S are performed. When the result receiving function receives the power management result from the USB host controller driver the suspend request change function determines whether the power management result is a power management result indicating the completion of the Set Power request based on which the power state has been changed in step S S . As with the Wait Wake request described above this determination may be made by previously storing the pointer information of the Set Power request and comparing the Set Power request with the pointer of the power management result. If the power management request is a power management request indicating the completion of the Set Power request based on which the power state has been changed S Yes the suspend request change function changes the power state designated by the power management result the Set Power request in which the completion status is set from D to D S . The suspend request change function then transmits a power management result indicating the normal completion of the power management request to put the USB hub into the low power state Set Power D request to the USB hub class driver through the result reporting function S .

Next referring to there will be described a process performed when the USB hub filter driver receives a transfer request from the USB hub control application with the USB hub put in the low power state based on Selective Suspend.

When the USB hub filter driver receives a Wait Wake request from the USB hub class driver S it stores the pointer of the Wait Wake request within itself S . The USB hub filter driver then transmits the Wait Wake request to the USB host controller driver S . The USB host controller driver does not immediately complete the Wait Wake request but rather puts it on hold within itself S . Subsequently steps S and S shown in are performed but not shown in . Subsequently as described with reference to the USB hub is put into the low power state and the current power state managed by the USB hub filter driver is changed to Suspended S to S S .

When the USB hub filter driver receives a transfer request from the USB hub control application S the USB hub filter driver increments the transfer request counter S . Since the current power state is Suspended the USB hub filter driver queues the transfer request into the transfer request queue to temporarily put it on hold S . Then by using the pointer information of the Wait Wake request previously stored in step S the USB hub filter driver instructs the USB host controller driver to cancel the Wait Wake request S . In accordance with the instruction to cancel the Wait Wake request the USB host controller driver cancels the Wait Wake request on hold S . The USB host controller driver then transmits to the USB hub filter driver a power management result in which the completion status of the Wait Wake request is set to Canceled S .

When the USB hub filter driver receives the power management result indicating the completion status of the Wait Wake whose cancellation the USB hub filter driver has requested is set to Canceled the USB hub filter driver changes the completion status to Success S and transmits a power management result indicating the normal completion of the Wait Wake request to the USB hub class driver S . When the USB hub class driver receives the power management result indicating the normal completion of the Wait Wake request the USB hub class driver determines that the USB hub has actually issued Remote Wake and then issues a Set Power D request to the USB host controller driver through the USB hub filter driver in order to restore the USB hub to the normal operating state S . Subsequent processes S to S S S to S are similar to those described with reference to and therefore will not be described. Thus the USB hub is restored to the normal operating state and the transfer of data to the USB hub is completed normally. Note that if the completion status of the Wait Wake request is Canceled the USB hub class driver issues no Set Power D request in accordance with the power management result. However in the above process the USB hub filter driver changes the completion status of the Wait Wake request to Success and then causes the USB hub class driver to issue a Set Power D request. Thus it can restore the USB hub to the normal operating state so that data is transferred to the USB hub .

Next referring to there will be described a process performed when the USB hub class driver attempts to selectively suspend the USB hub during data transfers to the USB hub .

When the USB hub filter driver is transferring data to the USB hub in accordance with a transfer request S to S if it receives a Wait Wake request from the USB hub class driver S the USB hub filter driver stores the pointer of the Wait Wake request within itself S . The USB hub filter driver then transmits the Wait Wake request to the USB host controller driver S . Subsequently steps S to S shown in are performed but not shown in .

Subsequently when the USB hub filter driver receives a Set Power D request from the USB hub class driver S the USB hub filter driver changes the change destination power state designated by the Set Power request from D to D S and transmits it as a Set Power D request to the USB host controller driver S . Since the USB hub is originally put in the normal operating state D the USB host controller driver does nothing and transmits a power management result indicating the normal completion of the Set Power D request to the USB hub filter driver S . When the USB hub filter driver receives the power management result indicating the normal completion of the Set Power D request from the USB host controller driver the USB hub filter driver changes the change destination power state designated by the Set Power request from D to D S and transmits a power management result indicating the normal completion of the Set Power D request to the USB hub class driver S .

Thus the USB hub class driver recognizes that the Set Power D request issued by itself has been performed normally and that the USB hub has been put into the low power state. On the other hand the USB hub remains in the normal operating state and therefore the transfer of data to the USB hub being performed based on the request from the USB hub control application is continued and then completed normally S to S . Note that when the USB hub filter driver receives the Set Power D request the USB hub filter driver may transmit a power management result indicating the normal completion of the Set Power D request to the USB hub class driver rather than changing the Set Power request and transmitting the changed request to the USB host controller driver .

In the process thus far the USB hub class driver recognizes that the USB hub is in the low power state whereas the USB hub is actually in the normal operating state. There is a mismatch between both states. For this reason when the transfer of data to the USB hub based on the request from the USB hub control application is completed the USB hub filter driver cancels the Wait Wake request previously issued by the USB hub class driver S . Subsequent processes S S S S are similar to those described with reference to and therefore will not be described.

Subsequently when the USB hub class driver receives a power management result indicating the normal completion of the Wait Wake request the USB hub class driver transmits a Set Power D request to the USB host controller driver through the USB hub filter driver in order to restore the USB hub to the normal operating state S S . The USB host controller driver receives the Set Power D request but does nothing since the USB hub has been already put in the normal operating state and completes the Set Power D request S S . In this stage the power state of the USB hub recognized by the USB hub class driver matches the actual power state.

Subsequently if the USB hub class driver starts a Selective Suspend process again the USB hub filter driver transmits a Set Power D request to the USB host controller driver as usual unless there is any transfer request from the USB hub control application at that time point. Thus the USB hub is put into the low power state.

In the second embodiment as in the first embodiment a transfer request is processed only after the USB hub is restored to the normal operating state. Thus the problem that a start of the transfer of data to the low power state USB hub results in an error can be solved.

In the first embodiment the USB hub filter driver directly transmits a Set Power D request to the USB host controller driver to start a process of restoring the USB hub to the normal operating state. In the second embodiment on the other hand the USB hub filter driver normally completes a Wait Wake request from the USB host controller driver and thus generates in a pseudo manner a state in which the USB hub has issued Remote Wake and then reports this state to the USB hub class driver . Since the USB hub class driver performs a usual operation as if the USB hub class driver had received Remote Wake the USB hub class driver can restore the USB hub to the normal operating state. That is since the USB hub class driver issues a Set Power D request by the completion routine registered with respect to the Wait Wake request the USB hub class driver can restore the USB hub to the normal operating state. Thus it is possible to construct a simple low cost system which utilizes the existing process performed by the USB hub class driver .

In the first embodiment the USB hub filter driver puts a Set Power D request from the USB hub class driver on hold within itself. Accordingly if it takes time to transfer data to the USB hub it also takes time to complete the Set Power D request. In the second embodiment on the other hand a Set Power D request from the USB hub class driver is immediately processed. Thus the problem that it takes time to perform a Selective Suspend process from the USB hub class driver can be avoided.

Next referring to a modification of the personal computer according to the second embodiment will be described. shows a modification of the process performed by the pseudo Remote Wake generation function . The process shown in is a process obtained by making a change to the process shown in .

In this modification instead of temporarily storing the pointer information of a Wait Wake request from the USB hub class driver transferring the Wait Wake request to the USB host controller driver and then cancelling the pointer information the USB hub filter driver itself puts the Wait Wake request from the USB hub class driver on hold S S . That is the USB hub filter driver does not transmit the Wait Wake request to the USB host controller driver . Subsequently as shown in steps S to and S are performed. Subsequently if the USB hub is put in the low power state at the time point when the USB hub filter driver receives a transfer request from the USB hub control application the USB hub filter driver directly normally completes the Wait Wake request on hold S . That is as shown in steps S to S S and S to S are performed. As seen above the USB hub filter driver alone may operate as if the USB hub had issued Remote Wake without collaborating with the USB host controller driver in a pseudo manner.

In the first and second embodiments a usual power state change request Set Power is used as a method by which the USB hub class driver selectively suspends the USB hub . In a third embodiment there will be described a method for solving a problem in a case where the port to which a USB hub connected is changed to the low power state using another method.

Referring now to there will be described a problem in a case where a USB hub class driver selectively suspends the USB hub using another method. In this method the USB hub class driver suspends and resumes the port of the USB host controller to which the USB hub connected by directly calling interface functions provided by a USB host controller driver that is a suspend function and a resume function .

The USB hub class driver transmits an interface acquisition request Query Interface to the USB host controller driver during initialization S . In response to this request the USB host controller driver transmits interface function information in itself reference information of the suspend and resume functions to the USB hub class driver S . More specifically this interface function information is information indicating the pointers addresses of the functions the suspend and resume functions of the USB host controller driver .

Subsequently to selectively suspend the USB hub the USB hub class driver calls the suspend function on the basis of the interface function information from the USB host controller driver S . In the suspend function of the USB host controller driver a process to put the port of the USB host controller to which the USB hub to be suspended is connected into the low power state is performed S . Thus the USB hub is put into the low power state. After the process is performed the suspend function is normally completed and the process being performed by the personal computer is restored to the USB hub class driver which has called this function S .

In this case also if the USB hub filter driver receives a transfer request for the low power state USB hub from the USB hub control application and then attempts to transfer the data to the USB hub the transfer would result in an error S to S . An embodiment for solving this problem will be described below.

Next a PC according to the third embodiment will be described. Elements similar to those described thus far are given the same reference signs and descriptions thereof are omitted as appropriate. Further the configuration of the PC according to the third embodiment is similar to that of the PC according to the first embodiment and therefore will not be described.

First referring to there will be described the function block configuration of a USB hub filter driver according to the third embodiment. As shown in compared to the USB hub filter driver according to the first embodiment described with reference to the USB hub filter driver according to the third embodiment further has a suspend control interface relay function .

The suspend control interface relay function relays an interface acquisition request Query Interface and interface functions suspend and resume functions from a USB hub class driver . The suspend control interface relay function also manages the power state of a USB hub in conjunction with a power state management function .

Next referring to the function block configuration of the suspend control interface relay function will be described. As shown in the suspend control interface relay function has an interface information acquisition request relay function .

The interface information acquisition request relay function relays an interface acquisition request Query Interface transmitted from the USB hub class driver to a USB host controller driver .

The suspend control interface relay function also has a suspend function and a resume function to be provided to the USB hub class driver by the USB hub filter driver . The suspend control interface relay function is also storing reference information of a suspend function and a resume function in the USB host controller driver in itself. More specifically the reference information is stored in the storage unit of the PC .

The interface information acquisition request relay function has a request receiving function a request transmission function a result receiving function a result reporting function an interface information storage function and an interface information change function .

The request receiving function receives an interface acquisition request from the USB hub class driver . The request transmission function transmits the interface acquisition request to the USB host controller driver . The result receiving function receives an interface acquisition result from the USB host controller driver . The result reporting function transmits the interface acquisition result to the USB hub class driver . The interface acquisition request and interface acquisition result are information in a form which can be transmitted and received in the PC .

When the result receiving function receives an interface acquisition result from the USB host controller driver the interface information storage function stores reference information of the suspend function and resume function returned from the USB host controller driver as the interface acquisition result. That is the interface acquisition result includes the reference information of the suspend function and resume function . The interface information change function changes the reference information of the suspend function and resume function indicated by the interface acquisition result to the reference information of the suspend function and resume function in the USB hub filter driver and then transmits the resulting interface acquisition result to the USB hub class driver using the result reporting function .

Next referring to there will be described processes performed by the USB hub filter driver according to the third embodiment. First referring to there will be described a process that the USB hub filter driver performs when receiving a transfer request from a USB hub control application .

The process shown in differs from the process according to the first embodiment described with reference to in that after step S is performed steps S and S are performed in place of step S. If the current power state is Suspended S Yes the current power state is changed to Resume Pending S . Subsequently the suspend control interface relay function calls the resume function of the USB host controller driver on the basis of the stored reference information S . Thus the USB hub is restored to the normal operating state. Subsequently the on hold transfer execution function of the transfer state management function performs processes S S to S to be performed when the resume process is completed S .

Next referring to there will be described a process in which the USB hub filter driver performs when the USB hub class driver calls the suspend function of the USB hub filter driver .

The process shown in differs from the process according to the first embodiment described with reference to in that steps S and S are performed in place of step S and step S is performed in place of step S. If the transfer request counter is 0 S Yes the suspend control interface relay function changes the current power state to Suspend Pending S and then calls the suspend function of the USB host controller driver S . Thus the USB hub is put into the low power state. The suspend control interface relay function then changes the current power state to Suspended S . In contrast if the transfer request counter is a value other than 0 S No the suspend function returns an error S .

Next referring to there will be described a process performed when the USB hub filter driver receives a transfer request from the USB hub control application while the USB hub put in the low power state based on Selective Suspend.

The USB hub filter driver relays an interface acquisition request from the USB hub class driver to the USB host controller driver S . When the USB hub filter driver receives an interface acquisition result from the USB host controller driver S the USB hub filter driver stores interface function information reference information of the suspend function and resume function returned from the USB host controller driver as the interface acquisition result. Further the USB hub filter driver replaces the interface function information with the interface function information reference information of the suspend function and resume function in the USB hub filter driver and then transmits it as the interface acquisition result to the USB hub class driver S .

To selectively suspend the USB hub the USB hub class driver calls the suspend function returned in response to the interface acquisition request previously transmitted thereby that is the suspend function provided by the USB hub filter driver S . When the suspend function of the USB hub filter driver is called the USB hub filter driver calls the suspend function of the USB host controller driver previously stored within itself S . Thus the USB hub is put into the low power state S S and the suspend function is completed normally S . The USB hub filter driver then changes the current power state of the USB hub to Suspended S . Thus the suspend function is completed normally S .

If the USB hub filter driver receives a transfer request from the USB hub control application in this state S the USB hub filter driver calls the resume function of the USB host controller driver S . Thus the USB hub is restored to the normal operating state S S . The USB hub filter driver then changes the current power state to Working S and starts to transfer data to the USB hub S to S . Since the USB hub has been already restored to the normal operating state the transfer of data to the USB hub is completed normally S to S .

Next referring to there will be described a process performed when the USB hub class driver calls the suspend function while data is transferred to the USB hub .

If the suspend function in the USB hub filter driver is called S when data is being transferred to the USB hub in accordance with a transfer request S to S the USB hub filter driver causes the suspend function to return an error and refuses the suspend request since the current transfer request counter is a value other than 0 S . Thus the USB hub to which data is being transferred is no longer suspended and the transfer to the USB hub is completed normally S to S .

Subsequently if the USB hub class driver calls the suspend function again when the USB hub filter driver is not requested to transfer the USB hub filter driver calls the suspend function of the USB host controller driver to suspend the USB hub .

As seen above even in the case in which the USB hub class driver calls the interface functions the suspend and resume functions to control Selective Suspend of the USB hub it is possible to solve the problem that the transfer of data to the low power state USB hub results in an error.

Next a PC according to a fourth embodiment will be described. In the fourth embodiment a first specific example of the above USB hub control application program will be described.

Referring to the configuration of the PC according to the fourth embodiment will be described. As shown in the PC includes a USB Power Delivery system policy management application program also referred to as a system policy management application as the USB hub control application program . Further instead of the USB hub a USB hub supporting the USB Power Delivery standard is connected to the PC .

The PC also includes a USB hub general purpose control library . The USB hub general purpose control library provides the system policy management application with a general purpose application programming interface API for transferring data to the USB hub through a USB hub filter driver . According to this configuration the USB Power Delivery system policy management application program does not transmit a transfer request to the USB hub filter driver by directly calling the system call function of the OS but rather transmits a transfer request to the USB hub filter driver by calling the USB hub general purpose control library by specifying details of the transfer request. By using the USB hub general purpose control library it is possible to easily control the USB hub with respect to additional functions even on another application without having to directly control the USB hub filter driver or prepare a separate dedicated filter driver.

As an additional function the system policy management application controls the USB hub with respect to the functions defined in the USB Power Delivery standard. The USB Power Delivery is a new USB standard about the power supply between the USB devices and through a USB cable. The USB hub supporting the USB Power Delivery has a function of adjusting power supplied from a downstream port thereof in accordance with a request from a device connected to the downstream port. The USB Power Delivery additionally defines details of a transfer request to acquire information about the power supply state and to control the power supply state between the system policy management application and USB hub . Thus the USB hub not only can singly determine whether the USB hub can supply power but also can control the system level power supply state by the system policy management application on the PC and the user

As described above data to be transferred to the USB hub may include information requiring a desired operation. In the fourth embodiment the data may include the following requests.

 1 A request to acquire information about the power supply capability of each port of the USB hub that is power that can be supplied from each port and to report acquired information to the system policy management application

 2 A request to report power supply request received from USB devices connected to the respective ports of the USB hub to the system policy management application

 3 A request to give the USB hub an instruction as to whether the USB hub should accept or refuse power supply request received from the USB devices connected to the respective ports of the USB hub

Thus for example the system policy management application can change power supplied to the USB devices from the USB hub or display power supplied to the USB devices reported from the USB hub on a display device e.g. a liquid crystal display connected to the PC to present the power to the user.

Next a PC according to a fifth embodiment will be described. In the fifth embodiment a second specific example of the above USB hub control application program will be described.

Referring to the configuration of a PC according to the fifth embodiment will be described. The PC shown in includes a USB hub ROM write application program as the USB hub control application program .

As an additional function the USB hub ROM write application program controls a USB hub so that data stored in a ROM e.g. a flash ROM included in the USB hub is rewritten. Typically the data stored in this ROM is firmware executed by a CPU included in the USB hub . As described above data to be transferred to the USB hub may include information requesting a desired operation. In the fifth embodiment the included data may include a request to rewrite data in the ROM and the data to be used for rewrite as the information.

Next a sixth embodiment will be described. A PC according to the sixth embodiment can perform a process described below by combining the second and third embodiments. Referring to there will be described a process that a USB hub filter driver performs when receiving a transfer request from a USB hub control application in a combination of the second and third embodiments.

The process shown in differs from the process according to the second embodiment described with reference to and the process according to the third embodiment described with reference to in that step S is further performed if step S is No step S is performed and if step S is Yes steps S S and S are performed.

Specifically if the current power state is Suspended S the USB hub filter driver performs different operations on the basis of whether the USB hub filter driver has previously acquired reference information of a resume function of a USB host controller driver in accordance with an interface acquisition request from a USB hub class driver .

If the USB hub filter driver has previously acquired the reference information of the resume function of the USB host controller driver the USB hub filter driver changes the power state to Resume Pending S and then calls a resume function of the USB host controller driver to resume a USB hub S in accordance with the process of the third embodiment. Subsequently the USB hub filter driver changes the power state to Working and then transmits all the transfer requests on hold to the USB host controller driver S S to S .

In contrast if the USB hub filter driver has not acquired the reference information of the resume function of the USB host controller driver the USB hub filter driver cancels the Wait Wake request using a pseudo Remote Wake generation function to resume the USB hub S in accordance with the process of the second embodiment.

The USB hub filter driver described above can singly accommodate both a USB hub class driver which does not control the power state of the USB hub by calling the function as described in the second embodiment and a USB hub class driver which controls the power state of the USB hub by calling the function as described in the third embodiment. Thus the above USB hub filter driver can solve the problem that a transfer request results in an error in both the USB hub class drivers .

Referring to there will be described an information processing device according to one embodiment extracted from the first to sixth embodiments. As shown in an information processing device includes a first application program a second application program a class driver and a filter driver .

The first application program transmits a request to control a peripheral device . The first application program corresponds to the application program . The second application program runs on an operation system on which the first application program runs and transmits a request to control the peripheral device . The second application program corresponds to the USB hub control application USB Power Delivery system policy management application program and USB hub ROM write application program .

The class driver relays a control request from the first application program . The class driver corresponds to the USB hub class driver.

The filter driver sits below the class driver and controls the peripheral device in accordance with a control request from the first application program through the class driver as well as controls the peripheral device in accordance with a control request from the second application program without passing through the class driver . The filter driver corresponds to the USB hub filter driver .

The filter driver includes a power state management unit and a control unit . The power state management unit changes the power state of the peripheral device in accordance with a request to change the power state of the peripheral device from the class driver and recognizes the changed power state of the peripheral device . The power state management unit corresponds to the power state management function . The control unit controls the peripheral device in accordance with control requests from the first application program and second application program . The control unit corresponds to the transfer state management function .

If the power state of the peripheral device recognized by the power state management unit is the low power state the control unit suspends controlling the peripheral device in accordance with a control request from the second application program until the power state of the peripheral device returns to the normal state.

In the configuration described above the filter driver recognizes the power state of the peripheral device . If the recognized power state is the low power state the filter driver puts a transfer request from the second application program on hold. Thus even when the second application program directly issues a request to control the peripheral device to the filter driver without passing through the class driver which controls the power state of the peripheral device it is possible to prevent the filter driver from accessing the low power state peripheral device and thus causing an error.

Any of the programs to and described above can be stored in various types of non transitory computer readable media and then provided to the computer PC . Examples of the non transitory computer readable media include various types of tangible storage media. Examples of the non transitory computer readable medium include magnetic storage media e.g. flexible disks magnetic tapes hard disk drives optico magneto storage media e.g. optico magneto disks compact disk read only memory CD ROM compact disc recordable CD R CD R W semiconductor memory e.g. mask ROM programmable ROM PROM erasable PROM EPROM flash ROM and random access memory RAM . Any program may be provided to the computer by various types of transitory computer readable media. Examples of the transitory computer readable media include electric signals optical signals and electromagnetic waves. The transitory computer readable media can provide any program for the computer via a wire communication path such as an electric line or optical fiber or a wireless communication path.

While the present invention has been described in detail based on the embodiments the invention is not limited thereto. As a matter of course various changes can be made to the embodiments without departing from the spirit and scope of the invention.

While the configurations of the embodiments are implemented in personal computers in the above descriptions the configurations may be implemented in other types of devices. The configurations may be implemented in various types of information processing devices to which USB devices can be connected including personal computers servers televisions and game machines.

While the information processing device controls USB devices as the target peripheral devices in the above embodiments the information processing device may control peripheral devices supporting standards other than the USB.

While the USB hub is controlled in the above embodiments the USB device connected to the PC without interposing through the USB hub may be controlled in a similar manner.

While the invention has been described in terms of several embodiments those skilled in the art will recognize that the invention can be practiced with various modifications within the spirit and scope of the appended claims and the invention is not limited to the examples described above.

Furthermore it is noted that Applicant s intent is to encompass equivalents of all claim elements even if amended later during prosecution.

