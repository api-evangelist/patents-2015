---

title: Providing a database as a service in a multi-tenant environment
abstract: In one embodiment, the present invention is directed to a system with multiple computing hosts each having a hypervisor to provide a virtual environment for the host and one or more containers each including a database instance and at least one database. These databases, and the database instance can be provided as a service to a user of a multi-tenant environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09633054&OS=09633054&RS=09633054
owner: Rackspace US, Inc.
number: 09633054
owner_city: San Antonio
owner_country: US
publication_date: 20150127
---
This application is a continuation of U.S. patent application Ser. No. 13 323 069 filed Dec. 12 2011 the content of which is hereby incorporated by reference.

Computer based databases are used by almost every kind of business to handle various tasks related to data management. A typical database such as a relational database provides an ability for a user to query the database to access requested data. Oftentimes a large business may house databases in a datacenter facility of the business.

Other database users may not have the need or resources to have such equipment and in fact many businesses and other entities contract with a cloud based datacenter to provide computing resources in an elastic manner. While these resources can be used for various business tasks such as web serving and so forth in general there is not an ability to provide database services in a flexible on demand manner.

According to one aspect the present invention is directed to a system that has multiple computing hosts each having a hypervisor to provide a virtual environment for the host and one or more containers each including a database instance and at least one database. These databases and the database instance can be provided as a service to a user of a multi tenant environment. Furthermore the container may provide for isolation such that database services for multiple users of the multi tenant environment can be located within a single computing host. In addition a storage area network SAN can be coupled to the computing hosts. The SAN can provide block level storage for databases provided as a service. More specifically each of the databases provided as a service can be in communication with a SAN volume.

Responsive to a customer request a scheduler can automatically identify one of the computing hosts to handle the database service for the customer. In addition a package manager may be coupled to the computing hosts to provide a database instance to a container responsive to a request from a guest operating system OS within the container.

Another aspect of the present invention is directed to a method for handling database operations. Specifically the method can include receiving a database creation request from a user in a scheduler of a cloud computing environment. This cloud environment can include computing nodes each coupled to a SAN as described above. The scheduler can select one of the computing nodes on which to create the database. Based on this selection a container can be spawned in the selected node which includes a guest operating system. Then via this guest operating system a database instance can be requested and received from a repository coupled to the node. Thereafter the database instance can be installed in the container and the database created in the container. Such operations include associating the database with the database instance and a volume of the SAN.

A still further aspect of the present invention is directed to a system that includes various components which in some implementations can be realized via servers and storage units of a datacenter environment. The system may include a scheduler to receive a request for a database service from a remote user and to schedule the request to a compute host where each of multiple compute hosts has a hypervisor to provide a virtual environment and multiple containers each including a database instance and at least one database. These databases can be provided as a service to users of the datacenter. In addition the system can include a SAN coupled to the compute hosts to provide block level storage for the databases and where each of the databases is in communication with a volume of the SAN.

The system can further include a package manager coupled to the compute nodes to receive a request to instantiate a database server in the selected compute host and an object store to store a database server image and to enable the selected compute node to instantiate the database server from the database server image responsive to control by the package manager.

Using such a system wide scalability of databases for multiple customers of a datacenter can be realized. Embodiments can provide for automated programming of instances including providing for replication of database instances scaling database instances when the volume of data exceeds a threshold or so forth.

In various embodiments a database as a service DBaaS can be provided in a multi tenant datacenter environment. By provision of a DBaaS users of the datacenter can perform database operations with great scalability and improved access times. As will be discussed herein embodiments may implement such database operations using container based virtualization in which faster access times can be realized due to the direct interaction between a database instance in the container and a physical mass storage device such as disk based storage of a host computing platform including the container. In this way the overhead consumed in conventional virtualization environments to interface with a virtual hard disk interposed between a guest and an underlying physical storage device can be avoided.

To provide scalability as well as to enable replication redundancy and so forth embodiments can further provide a storage area network SAN for use with the DBaaS such that the data of a given database is securely stored in the SAN. Different implementations are possible however in one embodiment the SAN can be a local SAN present in a rack based server cabinet including multiple host servers and the SAN.

Referring now to shown is a block diagram of a high level view of a container virtualization environment in accordance with an embodiment of the present invention. As shown in a host may be a physical computing host such as a server computer. As is well known to those skilled in the art host can include various hardware including a processor a system memory and a mass storage such as a hard drive. Of course many different types of computing hosts exist such as different flavors of servers which typically include additional hardware components such as network interface cards NICs other I O devices additional computing resources and so forth. Of course the computing devices further include various firmware and or software such as one or more operating systems and BIOS as well as potentially many different applications to be executed on the server.

As shown in the embodiment of host can include a hypervisor which may be a layer of virtualization software that performs control and orchestration for a virtual environment of the host. In the embodiment of hypervisor can run at a highest privilege level and may be in communication with various components within the system. For purposes of discussion herein a container may be present. In various embodiments container can be a layer of virtualization software that enables a direct communication link with certain hardware of the system. Multiple containers can be present within a single computing host although only one is shown for ease of illustration in .

In one embodiment Linux containers can be used as the underlying virtualization technology as such containers virtualize the critical pieces of hardware that databases use the most. That is database servers rely heavily on memory processor and hard drives to serve content to its clients. While both containers and traditional virtualization are very efficient at separating memory allocations per guest virtualization is sub par when isolating processor and hard drive resources when compared to containers. In one embodiment the container technology may be OpenVZ containers which is an open source project mainly developed by Parallels Inc. Renton Wash.

Because memory is the main resource that database services utilize the most memory is the core measurement used to allocate a container. As an example the processing resources on a host computer can be provisioned based on a percentage of subscribed memory. For example if a host node was configured with 16 GB of memory and a guest container was configured with 1 GB of that memory then it would subsequently get 1 16of the processing power of the host node.

Processor isolation in traditional virtualization is done through emulating a processor for the guest operating system. This emulation in and of itself incurs a large amount of overhead to maintain and scale thus reducing the overall amount of resources that can be used to actually host guests. Conversely container virtualization in accordance with an embodiment of the present invention can offer a much simpler yet more elegant method of processor scheduling and prioritization. Computer processor power is measured in several ways but most commonly by its clock rate. This clock rate is tied to the speed in which a processor can execute a number of instructions per second. This value differs from processor to processor but is fixed for a given processor. Using OpenVZ tools access to a processing power integer can be obtained that represents the units available on the host node. This integer is represented in OpenVZ terms as cpuunits . When a guest or container is provisioned it is assigned a number of cpuunits either by a template configuration or by using the OpenVZ management commands. This number cannot exceed the maximum cpuunits for the host machine and represents the processing power being allocated to the container. For reference OpenVZ considers one 1 Ghz PIII processor to be equivalent to 50000 cpu units. OpenVZ also sets a limit on cpu time for each container and this is represented with the cpulimit setting. Lastly OpenVZ also enables control of the number of virtual cpus presented to the container using a cpus option. Once the total processing power of a host computer is known an algorithm using the percentage of memory subscribed to a new guest can be used to calculate the total processing power given to that guest. For example assume a host node has a total cpuunits rating of 800000 using the previous example of a guest node given 1 16of a host node s processing power this container would have a cpuunits setting of 50000 or the processing power equivalent to one 1 Ghz PIII processor.

The hard drive resource on a given host is the largest contributor to latency in a database server. The ability to fairly schedule access to hard drives provides an ability to assure performance on a database as a service platform in accordance with an embodiment of the present invention. In one such embodiment disk space utilization and disk IO priority can be set using management tools of OpenVZ. IO fairness and priority can be realized using a priority grouping that uses an integer between 0 and 7 with 7 being the highest priority in one embodiment. The percentage of subscribed memory can be used to calculate the group in which a container will be located. This is done by taking the maximum value and multiplying it by the percentage of allocated resource and rounding that number up to the nearest integer not to exceed 7. This priority group number is a relative number so that if all containers are subscribed such that they are all in priority group 4 each will receive equal share of IO access via the IO scheduler.

The aspect of containers that gives greater performance comes from the utilization of these schedulers rather than emulating hardware for the guests to use referred to as time slicing or bean counting.

Within each container a guest operating system can be present. This guest OS can perform control and other supervisory functions for one or more applications to be executed within the container. For purposes of illustration herein a representative example of such applications can be a database application. As will be discussed further in particular embodiments a database instance can be implemented via a MySQL server. Given the container based virtualization container can communicate directly with a mass storage which in the embodiment of can be a local hard drive of the host. In this way improved access times can be realized. This is particularly beneficial for database applications as almost all of the operations to be performed in a database environment such as writes reads updates and so forth are performed with a disk access. Although shown at this high level in the embodiment of realize that many more components can be present in a server. For example a container further includes a guest agent. In general the guest agent orchestrates the commands that are sent to the database instance as well as control interactions with a package repository for managing packages installed on the system. As examples the guest agent can perform database user management backups recovery imports exports and replication. Furthermore understand that although a single container is shown for purposes of illustration in a given embodiment many such containers that can be present. For example in a rack mounted server approximately 40 60 containers can be present in a given host server although embodiments are not so limited.

Referring now to shown is a block diagram of a portion of a datacenter environment in accordance with an embodiment of the present invention. As shown in datacenter environment can include a pair of cabinets and . Each cabinet can include a SAN and and multiple hosts and . In typical implementations SAN can be provided as a top of rack storage area network that can provide for a large amount of storage. Of course in other examples the SAN can be located outside of the cabinet. As an example each SAN can be a 4 TB storage formed of multiple disk drives or other mass storage devices. To provide for redundancy error recovery and so forth the data present in a given cabinet s SAN can be mirrored or replicated to the SAN of the other cabinet according to a given RAID protocol e.g. a RAID10 implementation. Via this RAID implementation fault tolerance is provided with failover redundancy to the other cabinet along with other features of the RAID10 protocol such as synchronous block replication.

Each host can be realized as a rack mounted server that can generally be configured as discussed above with regard to . Each host can include multiple containers and where each container can be associated with a different isolated environment. For purposes of discussion herein it can be assumed that each container includes a database instance and one or more databases that execute on this instance in addition to a guest OS. Although the discussion herein is with regard to database instances understand that other container based resources such as caching services web servers and so forth can also be present. Note that each container can be isolated from the other containers and as such each container can include a database instance and multiple databases associated with a single customer of the multi tenant environment. Accordingly each container is a non shared resource of the multi tenant environment. However it is possible to use a large container in a multi tenant fashion such that a single database instance can be shared provided there are security mechanisms to handle multiple sub accounts customers on the instance. Note that by way of the container virtualization described herein a container can be configured with a relatively small amount of memory such as a 512 MB slice of system memory. In this way a large number of containers can be configured within a single host server. In contrast for typical cloud based server instances the memory footprint is generally on the order of at least 2 4 GB per virtual server.

As a result a large number of containers can be configured on a single host server. With a base container size of 512 MBs it is possible to have a large number of isolated containers on a single host. For example assume a given host server has a memory footprint of 36 GB also assume some amount of memory is allocated to an OS and other overhead software approximately 50 containers can be provided within a single host. Although described for example with this allocation understand the scope of the present invention is not limited in this regard.

To further illustrate how communications occur between a given database and a SAN reference can be made to . As shown in a single host is shown in communication with a SAN . As seen in for purposes of illustration host includes multiple containers . Each container includes a corresponding guest and a corresponding database instance. Specifically in the embodiment of the database instances may be MySQL servers . Although shown in the embodiment of as being MySQL servers understand the scope of the present invention is not limited in this regard. For example a PostgreSQL server or other database server that can be run in Linux may be present. Each container can further include multiple databases that are associated with the given MySQL instance. Specifically container includes a first database DB and a second database DB. In turn container includes a third database DB and a third container includes a fourth database DB. While shown with this particular configuration in the embodiment of understand that more containers may be present and each of the containers both illustrated in and other additional containers can include more databases as appropriate.

As seen each database can be in communication with SAN . Although two physical disks are shown for illustration in understand the scope of the present invention is not limited in this regard and many more physical disks can be provided. Note that each database of a database instance can be associated with a single volume of the SAN. As will be described further below on creation of a database this association between a database and volume of a SAN can be defined.

Referring now to shown is a block diagram of a high level infrastructure that can handle incoming database requests to a multi tenant datacenter in accordance with an embodiment of the present invention. Incoming database requests from end users can be communicated e.g. via a public application programming interface API to an application server . As an example this application server can be a rack mounted server configured to receive incoming requests from customers of the data center routed from a router or other gateway to a network e.g. the Internet. In turn application server can communicate the requests to a scheduler . Although the scope of the present invention is not limited this regard in some embodiments scheduler can be an open source scheduler of a cloud environment of the multi tenant environment. In turn scheduler can be in communication with multiple computing hosts . In general these computing hosts can be configured as described above and each of the computing hosts in the embodiment of can be configured to include multiple containers each having a database instance associated therewith. In turn each of the computing hosts can be in communication with at least one block level storage device of a storage area network .

As further seen in each computing host can include multiple containers. In the embodiment of a detailed view of computing host includes multiple containers . Each such container includes a database instance namely a MySQL instance and a number of databases not shown for ease of illustration in . As further seen each host can include a host agent which may be a hypervisor or other supervisor or orchestration layer software. Although shown at this high level in the embodiment of understand that additional components can be present and further understand that additional layers of software both of the multi tenant environment as well as for the DBaaS specifically can be present in the various components shown in .

Referring now to shown is a block diagram illustrating interaction between various components used in a multi tenant environment to provide database services. In the embodiment shown in environment can correspond to a portion of a multi tenant datacenter that includes resources for use by multiple customers of the datacenter. Such resources can include computing resources storage resources routing resources load balancer resources among many other such resource types. Note that in the datacenter environment some of these resources can be dedicated resources associated with a single customer while others of the resources can be shared or cloud based resources in which the resources can be dynamically allocated to customers. The resources also can be shared in the sense that multiple instances of a given resource each associated with a given customer can be present in a single physical resource.

As seen in datacenter environment can include an application programming interface API that receives incoming requests obtained from a network via a message bus . Note that network can be configured to receive requests from various customers via the Internet and pass them through message bus to API . In various embodiments message bus may be configured by registered components to identify queues from which they are to receive messages. In turn API can be of an open source cloud management system that receives incoming requests of different types and forwards them to appropriate destinations. For purposes of discussion and illustration herein understand that the requests can all be database requests either corresponding to a request to create a database modify an attribute of a database such as seeking replication capability for the database or to access a previously created database e.g. for purposes of storing data into the database or accessing and or updating the data already present.

To this end API can be in communication with a scheduler which may be a scheduler of the open source cloud based environment. For purposes of discussion herein scheduler can be configured to receive database requests and provide them to an appropriate resource for handling. More specifically scheduler can allocate incoming database requests to a corresponding compute host or node . This allocation can be based on availability of resources on the computing host to handle the database instance. Note that a single such host is shown for ease of illustration. However as discussed above in given implementations many such hosts can be present. As seen a compute host can include a hypervisor that may act as supervisor layer and can be in communication with a container that in turn can be configured with a database instance along with a guest which may include both a guest OS and a guest agent.

In general during creation of a database instance within a container guest can communicate with a package manager to request instantiation of the database instance. In addition to this database instance provided within a container various setup operations to enable storage of data of the database instance in a network based location can further be performed. Specifically responsive to a database creation request compute host can create a volume that can be provided in a block level storage which in various embodiments can be a storage area network. In addition an object store may also be present. Object store may store hypervisor guest images from which these images can be retrieved cached and used locally to create instances. Although shown with this particular configuration in the embodiment of understand the scope of the present invention is not limited in this regard.

To understand how a database can be created in an environment such as that of reference can be made to which is a flow diagram of a method of creating a database in a database as a service system in accordance with an embodiment of the present invention. As shown in method can be performed by various logic within a multi tenant datacenter environment that can handle incoming requests and assign them to resources of the datacenter environment appropriately. As seen method can begin by receiving a database creation request in a scheduler of the environment block . Next control passes to block where the scheduler can identify a host to handle the requested database. Various scheduling algorithms can be used in this determination. For example assume the request is from a customer having dedicated database resources such as dedicated cabinets including a local storage area network resources can be allocated appropriately in this cabinet. Or for a cloud based request the scheduler can identify a cabinet by available computing and storage resources to handle the database. The identified host may be allocated an IP address e.g. from a network layer of the environment.

When the identified computing host has been selected control passes to block where a remote block storage can be configured and connection information for the selected host and database can be allocated block . This configuration of the remote block storage can be by identification of a volume within the block storage to be allocated to the database instance. This volume can be assigned a universally unique identifier UUID or a regular ID. In addition to provide for communications between host and block storage an appropriate identifier can be established e.g. along with a password. In one embodiment an iSCSI qualified name IQN can be provided at configuration time. Upon supply of this name a two way challenge handshake authentication policy CHAP password can be set up. Thus at this point this identification information can be used to access the database instance within the container without the need for an IP or other global address.

At this point a container in which to house the database instance can be spawned within the selected host e.g. via the hypervisor block . This spawning of the container includes a guest OS and a guest agent of the container. In turn this guest can request a database instance from a package manager. This database instance as discussed above can be a database server such as a MySQL instance. Then at block the host can receive and install the database instance within the container. Accordingly a database as requested by the customer can be associated with the database instance and the SAN volume at block .

Note that all of the databases which can be an unlimited number within a given database instance are associated with a single volume on the SAN. In one embodiment associating the database with the database instance and the SAN volume can include mounting a volume in var lib mysql. In this way it appears to the database instance that its operations with regard to storage are to a local mass storage device rather than the remote block level storage. Thus the database is configured and ready for operation.

To further illustrate provisioning of a database reference can be made to which is a flow of various communications in a datacenter environment to provision such a database. As seen an incoming request from a user to create a database via a create DB guest request is received. Note that this user can be authenticated via validation of a token. Responsive to this request a scheduler can find an available node to handle the database request. To this end the scheduler can request capacity information from a data store namely block storage of . The data store can provide this information and based at least in part on this information the scheduler can determine an available node and pass a message with the request to create the database instance to a queue for this node.

Next a compute worker which may be a guest agent on the host node reads this message and sends a request to seek an IP address from a network component. In turn the network component can generate this IP address e.g. using information in the data store and then provide the information to create a host record via a domain name system DNS server which can be implemented as a DNSaaS in one embodiment.

This IP address can be returned to the message queue so that the compute worker can request volume provisioning responsive to this verification that the IP address has been obtained. Accordingly a volume can be provisioned and the compute worker can request e.g. a hypervisor on the host to create a guest which first installs a guest worker that can be obtained from a package repository. Note that this guest is created within a container within the identified host. A guest worker then calls the guest OS to request containing of a database instance from the package repository. When this instance is received it can be installed. Thus the instance can be made available for handling database scenarios. This availability of the instance can be indicated to the requester via a verification message that the database instance is ready for operation. Although shown at this high level in the implementation understand the scope of the present invention is not limited in this regard. Furthermore note that while these particular operations are shown with regard to creating a database instance similar operations can be performed for other activities with regard to databases.

For example similar requests and operations can be made to request replication of a database instance to thus provide for improved data security. Also internal mechanisms within the datacenter environment can be used to programmatically enable operations such as moving a container including a multiple database instances or all containers of a host from one host machine to another while allowing the data of these database instances to persist e.g. within the SAN.

Thus according to embodiments as described herein great scalability of databases for multiple customers of a datacenter can be realized. These mechanisms can provide for automated programming of instances including providing for replication of database instances scaling database instances when the volume of data exceeds a threshold or so forth. Other actions can include memory scalability migrations from machines that are heavily utilized to machines with less utilization read slaves and so forth.

Embodiments may be implemented in code and may be stored on a storage medium having stored thereon instructions which can be used to program a system to perform the instructions. The storage medium may include but is not limited to any type of non transitory storage medium suitable for storing electronic instructions.

While the present invention has been described with respect to a limited number of embodiments those skilled in the art will appreciate numerous modifications and variations therefrom. It is intended that the appended claims cover all such modifications and variations as fall within the true spirit and scope of this present invention.

