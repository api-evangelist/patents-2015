---

title: Method and apparatus for enhancing a hibernate and resume process for a computing device having an external mechanical input component
abstract: Before hibernating a computing device (), system software components () are notified of an upcoming hibernation process. The notifications are conveyed through an application program interface (API) (). At least a portion of the system software components () can perform one or more pre-hibernation activities to place that system software component () in a ready-to-resume state. Each system software component indicates when it is ready for hibernation. Responsive to receiving the indication from each of the system software components (), the hibernation process can complete. The completed hibernation process creates a snapshot () in nonvolatile memory. The snapshot () saves state information () for each of the system software components (). The state information () is for the ready-to-resume state of the system software components (). The computing device () can be restored after hibernation using a resume process (), which reads the state () information from the snapshot ().
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09411608&OS=09411608&RS=09411608
owner: MOTOROLA SOLUTIONS, INC.
number: 09411608
owner_city: Schaumburg
owner_country: IL
publication_date: 20150122
---
The present application is a continuation application of U.S. patent application Ser. No. 13 435 991 filed in the United States Patent Office on Mar. 30 2012 the entire contents of which is incorporated herein by reference.

The present disclosure relates generally managing a power up process for communication devices and more particularly to enhancing a hibernate and resume process using user space synchronization.

Hibernate and resume processes for computing devices are being increasingly utilized to achieve fast boot times to minimize user wait. The hibernate process allows a state of a computing device to be saved and allows the computing device to be subsequently powered off. That is software processes executing within an operating system of the computing device can be frozen or stored in a snapshot where the snapshot is stored in a nonvolatile memory.

Any number of occurrences can cause a resume process to initiate a computing device in a state where one or more system parameters or values are improper. For example many devices include mechanical controls knobs dials and the like. These mechanical controls can be in one position when a hibernation process runs and in a different position when a resume process runs. Each mechanical control setting can have a corresponding value maintained in volatile memory by a data structure of an operating system. When one or more internal values are improper for a current state of the device any number of negative results can occur.

For example the device can detect the improper value and can adjust for it which lengthens a processing time of the resume process and or adds user experienced latency which diminishes a user experience with the computing device. In another example improper values established during a resume process can result in irregular device behavior i.e. improper volume when the mechanical control is for a volume improper state when the mechanical control is for a communication state etc. . In still another example improper values from a resume process can cause software crashes and other unexpected errors.

What is needed is an improvement to a hibernate and resume process which minimizes or prevents problems with parameter values being improper when resuming from a snapshot.

Skilled artisans will appreciate that elements in the figures are illustrated for simplicity and clarity and have not necessarily been drawn to scale. For example the dimensions of some of the elements in the figures may be exaggerated relative to other elements to help to improve understanding of embodiments of the present invention.

The apparatus and method components have been represented where appropriate by conventional symbols in the drawings showing only those specific details that are pertinent to understanding the embodiments of the present invention so as not to obscure the disclosure with details that will be readily apparent to those of ordinary skill in the art having the benefit of the description herein.

A method apparatus system and or computer program product for hibernate and resume processes for a computing device. In the disclosure before hibernating a computing device system software components can be notified of an upcoming hibernation process. In one embodiment the notifications are conveyed through an application program interface API . At least a portion of the system software components can perform one or more pre hibernation activities to place that system software component in a ready to resume state. Each system software component can indicate when it is ready for hibernation. Responsive to receiving an indication from each of the system software components indicating the each of the system software components is ready for hibernation the hibernation process can complete. The completed hibernation process creates a snapshot in nonvolatile memory. The snapshot saves state information for each of the system software components. The state information is for the ready to resume state of the system software components.

The disclosure leverages a fact that snapshots saved herein start system software components at a meaningful and deliberate point in execution i.e. in a ready to resume state . In other words prior art solutions for a snapshot used for hibernate resume processes attempt to record a system state at an arbitrary point which results in system software components not being afforded an opportunity to prepare for hibernation i.e. no pre hibernation activities for system software occur . In the disclosure placing the system software components in a ready to resume state ensures that processes for each of the system software components are started at a specific point in execution such as just at or near an execution point where initialization code of the system software component runs.

In many embodiments the ready to resume state of the software applications can be deliberately saved and re used at will. For example a set of one or more snapshot images can be created at a factory even before a machine is shipped and sold or when an operating system of the machine is loaded . Additionally a new baseline or reference snapshot can be created when system software components the operating system and or hardware of a machine is upgraded. Having a reliable snapshot can permit a machine to boot faster as the system software components do not have to start from a cold state but can be directly loaded from a non volatile memory to a volatile memory in a warm state e.g. the ready to resume one which reduces the overall power up time of the machine. In one embodiment power up time can be further improved by powering up a subset of the system software components that provide a core desired functionality to a computing device and then subsequently powering up the remaining system software components. That is the resume process can be optimized in contemplated embodiments to occur in a staged fashion where functionality is provided to end users at each stage. In one embodiment a machine can leverage the snapshot having ready to resume system software components for quick recovery from error conditions by simply cycling power and resuming from a snapshot image.

System software components can include applications processes and drivers that maintain state information within a volatile memory e.g. random access memory or RAM . This permits each system software component to prepare itself for hibernation by performing zero or more pre hibernation activities that places that system software in a ready to resume state. Not all system software components necessarily need to perform a pre hibernation activity for every operating state. After optionally performing pre hibernation activities each notified system software component can report that it is ready to hibernate. Once all notified components have reported that they are ready for hibernation a create snapshot operation can be triggered which creates snapshot . In one embodiment the pre hibernation actions can occur in the user space while a hibernate process is initiated from a kernel space and while the snapshot is created by a process executing in the kernel space .

A snapshot is created responsive to many different events in accordance with various contemplated embodiments of the disclosure. For example the hibernate action is initiated from a user action to hibernate. In another example the hibernate action is initiated from a time out period associated with hibernation. In yet another example the hibernate action is initiated from a system boot up time detection of a lack of an existing reference in this latter case power down actions often associated with a hibernation process need not occur . These examples are non limiting and others are contemplated.

In one embodiment notifications of the hibernate action are initiated from an application program interface API established for hibernate resume processes . A notification function such as get  can be used for this purpose. When the notifications are sent from an API messages from each of the system software components can be conveyed back to the API . For example a function such as the shown report ready function or an equivalent can be used for this purpose. Use of an API for communications to the system software components can be a useful standardized approach especially for hibernation resume processes implemented within a kernel space of the operating system and or for those implemented at a BIOS level of the computing device .

The resume process can be initiated by many different events and for different situations or purposes in accordance with various contemplated embodiments of the disclosure. For example the resume process occurs on system start up to enable a fast boot . In another example the resume process occurs from a hibernate sleep or other power saving state of a computing device . In still another example the resume process is triggered by a system error which triggers a power cycle then resume or which triggers a system reset restore then resume . Similarly the resume process can be triggered by any exception as part of a recovery process from an unknown state from erroneous behavior and the like i.e. the resume process from a known snapshot can occur as part of an exception handling process . In one embodiment different snapshots e.g. a reference snapshot a recovery snapshot and the like are able to be stored by the computing device and can be linked to different resume process situations.

Regardless once the resume process is initiated power on measures if needed are taken to restore power to system components. The snapshot which was stored in the non volatile memory is accessed and read which loads volatile memory with the previously stored state information. Unlike prior art implementations the saved state is one that the previously running software system components were able to prepare for by operationally executing a set of pre hibernation actions thereby placing the snapshot stored version of each of the system software components in a ready to resume state. Thus the system software components are less likely to experience synchronization problems upon resuming from hibernation compared with conventional hibernation processes. For example a ready to resume state for the system software components can be a state existing immediately before variables subject to change during a power off period of hibernation for example values linked to a mechanical control of device can be initiated from the ready to resume state are acquired. Similarly the ready to resume state can be positioned at an execution point where the operating system checks for changes to removable peripherals e.g. Universal Serial Bus or other plug and play devices before actions dependent on these devices are attempted.

In one embodiment timing sequences and dependencies among variables of the operating system and or the system software components can be taken into consideration. Thus variables values and other communications can occur between the system software components and the operating system during the resume process . For example different ones of the system software components can include a set of multiple processes and or even sub processes. For example one of the software components can include processes A B and C and sub processes A1 and B1 as shown. These processes and sub processes can be sequenced against one another or other running processes or sub processes of the operating system . State saved variables can require these timing sequences be properly sequenced and or synchronized to each other which is possible in the disclosure due to software components being able to take pre hibernation activities to place each in a ready to resume state or execution position before the snapshot is taken. The proper sequencing is simply ensuring a proper state is reached as specified in the snapshot . Further pre hibernation activities can include optimizations designed to rapidly restore a computing device to its previous state or to a default reference or baseline state upon execution of a resume process .

In hibernate process each of the system software components are in an arbitrary state when a message to prepare for hibernation is received. Pre hibernation activities transition each of the software components from this arbitrary state to a ready to resume state. In one instance a ready to resume state can be a state where software components are prepared to execute initialization operations upon resume e.g. resume process . For example a software component can be transitioned into a ready to resume state by moving the execution pointer to execute an initialization operation upon resume. It should be appreciated that the hibernate process can include one or more modes of operation including protected mode and supervisor mode where the different modes can have an effect on pre hibernation activities performed by the software components .

In general the hibernate process is one where the computing device is able to power down while retaining its state information e.g. state . In one embodiment the power down process is optional while the saving of state information to a snapshot is required. That is upon hibernation the computing device saves contents of its volatile memory e.g. random access memory or RAM into a non volatile memory as a snapshot . The computing device then can completely power down in one embodiment which conserves power. The resume process causes the computing device to be powered on and then retrieves the saved state information from the snapshot .

As used herein hibernate process can be distinguished from a sleep process in that a sleep process provides power to non volatile memory so that stored state information is retained thereby negating a need to save the state information to a snapshot i.e. in a non volatile memory . Techniques for notifying system software components can be applied to a sleep process as well as to a hibernate process as detailed herein. Additionally the hibernation process of the disclosure can be a hybrid hibernate sleep process where content of volatile memory are copied to a non volatile storage as a snapshot when the computing device enters a sleep mode thereby permitting state to be restored even if power is lost to the device . In one embodiment the hibernate and resume processes are designed to be substantially compliant with the Advanced Configuration and Power Interface ACPI specification. In other contemplated embodiments the ACPI specification itself can be expanded to include innovations detailed herein. Alternatively the hibernation and resume processes can be implemented in a proprietary manner that is incompatible with the ACPI specification. It should be noted that situations are contemplated such as fault recovery using a previously stored snapshot where a resume process does not require a hibernation process to occur but only requires that a suitable snapshot exist.

Operating system can refer to a set of executable code which can manage computer hardware resources and can provide common services. Operating system can include low level hardware device drivers.

In one embodiment operating system can be illustrated as a virtual memory representation of a physical memory e.g. RAM segregating the operating system into a kernel space and a user space . Kernel space can include virtual memory reserved for running the kernel kernel extensions e.g. modules device drivers and the like. For example kernel space can be utilized to execute kernel operations. Kernel can include but is not limited to a monolithic kernel a microkernel a hybrid kernel a modular kernel a nanokernel an exokernel and the like.

User space can include virtual memory utilized for executing system software component including but not limited to hibernate Application Programming Interface API system software components drivers utility software and the like. User space can include multiple processes e.g. process A process B and sub processes e.g. sub processes A1 and B1 associated with system services e.g. networking indexing etc. .

API represents a collection of functionality which can permit improved hibernate and resume processes described herein. API permits user space system software components to enter a ready to resume state before hibernation occurs. API can include but is not limited to a library a framework and the like. API can conform to traditional and or proprietary languages including but not limited to C C JAVA and the like.

System software components can each be components able to execute within user space . Each component manipulates and or consume hardware and or software resources of the computing device . System software components may include but are not limited to a process a thread a daemon and the like. That is system software components may include a set of one or more processes e.g. process A process B sub processes e.g. sub process A1 and B1 and the like. In one instance system software components share hardware and or software constructs with other system software components to perform execution during an execution state. For example a process A and process B associated with one or more software components can utilize a semaphore to communicate with each other. In one embodiment API provides functionality for detecting and handling process exception. In the embodiment API detects and responds appropriately to an unresponsive process e.g. zombie process a memory leak a suspended process and the like.

Snapshot can be a process image reflecting the ready to resume state of the system software components . In one instance state information of the snapshot includes an exact replica of a process control block associated with system software components approximately at a time the snapshot was taken. State information can include but is not limited to process states sub process states object information e.g. object state addressing information e.g. execution pointers data pointer process identifier e.g. PID number register contents flag state switch state address space information e.g. upper and lower memory bounds opened files process priority I O device status and the like.

In one embodiment snapshot is utilized to restore system software component state regardless of prior state. That is snapshot is employed to enable a reusable image which can be utilized to rapidly restore one or more of the software components to a specified state. In one instance a snapshot is created in a manufacturing factory and can be utilized at each resume to restore the device to a factory state. When changes are made to the hardware configuration of the computing device and or to the software components a factory or reference state of a snapshot is updated to reflect these changes.

Using a reference snapshot can greatly decrease the time necessary for the hibernate process . Further a reference hibernate state is able to be enhanced with variable values for an operating system of the system software components in one embodiment. These values may be explicitly determined and made available for the snapshot as part of preparing each of the system software components for hibernation.

Hibernate process begins when a system message or notification is sent to running software components informing these components that a hibernation process have been initiated. Responsive to receiving this notification or message each software component can perform a set of pre hibernate actions to place itself in a ready to resume state. For example and as shown by step a system component detects a hibernate event and or notification. This notification can occur in various manners. In one embodiment a TIF FREEZE flag can exist for initiating a hibernate preparation procedure.

In an alternate embodiment a non hibernate event can be substituted which triggers a creation of a snapshot but that doesn t necessarily result in a computing device entering a power off or power saving mode. For example if no baseline snapshot is detected for a computing device at load time in one embodiment of the disclosure a snapshot creation event may be automatically triggered.

In step a preparation or pre hibernation or pre snapshot creation activity associated with the hibernate event is initiated by the software content. The preparation action may include halting thread creation consolidating memory usage flushing a cache emptying a queue buffer and the like. In step a notification of the pending hibernation action is optionally conveyed to dependent processes. In step one or more processes sub processes of the software component may release one or more resources in use. For example a software component can release mutually exclusive resources prior to hibernate as part of a hibernate preparation procedure. In step if the software component is ready for hibernation e.g. all pre hibernation activities have been performed the method continues to step . Otherwise additional pre hibernation activities are performed for that software component as expressed by the method progressing from step to step .

In step the software component has reached a ready to resume state. This may be a special state in which the software component is no longer responsive to requests other than a resume request in one embodiment. In step the software component sends a notification that it is ready for hibernation. Steps through can be performed by each running software component.

The hibernation process may be delayed until all software components have reported that they are ready for hibernation as shown by the delay loop of decision block . Time out checks are imposed to ensure that a hibernation activity is aborted as unsuccessful after a previously established duration passes in one embodiment. In another embodiment after a time out period to respond a hibernation activity occurs even though not all software components have reported that they are ready for hibernation. Once all the system software components are ready for hibernation or a time out period has occurred hibernation is initiated where a snapshot is generated as shown by step .

Resume process begins in step where a resume notification from an operating system is received. In step an appropriate snapshot is selected based on the notification. In one instance the notification allows the system software to resume correctly when executing within an operating system supporting multiple modes or users where the appropriate snapshot is one specifically for a current mode or user. In another instance the snapshot selected can be a specific snapshot such as a reference baseline snapshot a boot snapshot a recovery snapshot and the like. In step the snapshot is utilized to resume software execution. The snapshot can be employed to return each system software component to its ready to resume state as shown by step .

The ready to resume state is one in which a software component is ready to resume where it checks for unknown conditions subject to change during hibernation. For example the ready to resume state of a software component is one where that software component initially reads a state of a mechanical control or switch and adjusts corresponding values based on this read position. The ready to resume state also checks an operating system mode and whether necessary computing components which may be disabled or disconnected reconnected to a computing device such as USB peripherals are in an expected state or not. If not values of that software component can be quickly adjusted in an appropriate manner as opposed to the software component attempting an operation dependent upon a resource that is not available which is a situation common for software components that have been frozen or hibernated at an arbitrary execution state as opposed to the novel ready to resume state .

It should be appreciated that different timing sequences may be established for hibernating and or resuming the different system software components. That is a multi staged hibernate resume process is contemplated in one embodiment where different ones of the system software components may have to wait until other ones of the system software components achieve an execution state before that component is frozen or thawed in accordance with a staged hibernate resume process. Thus one of the system software components can be re enabled very quickly from a snapshot relative to another of the system software components. In one embodiment software component specific THAW and or FREEZE or RESUME messages can be used to control timing and sequencing during the hibernate or resume processes.

Additionally in one contemplated embodiment a multi staged hibernate resume process ensures that each stage has grouped subsets of system software components necessary to provide end user functionality. This can permit core functionality of a computing device to be restored for end user use as soon as possible responsive to a resume process having been initiated. For example in a smart phone computing device one stage can provide core telephony functionality a later stage can provide basic user interface functionality and a final stage can provide functionality to access the Web via a browser and or non essential applications installed on the device. Further the multi stage resume process can be situationally tailored in one contemplated embodiment. For instance if a resume process is triggered based on a fatal error i.e. the resume process is used to recover from an error then functionality the user was utilizing at the time of the error if known can be restored in a prioritized manner before functionality that the user was not utilizing at the time of the error. Thus the end user is able to utilize the desired functionality as rapidly as possible which means the perceived or effective resume time is minimized through a multi stage resume technique.

To elaborate on chart a start message is sent from boot loader to kernel . At the kernel an initialize process a start driver process a mount file system process and a load init program process can execute. The init process can bring up Android or another operating system . As part of the init process a freeze daemon an audio system a push to talk PTT handler a dispatch audio handler a dispatch application and a DekTec Application Programming Interface DTAPI can be started as shown in chart by a series of start messages. The freeze daemon audio system push to talk PTT handler dispatch audio handler dispatch application and DekTec Application Programming Interface DTAPI are illustrative system software components which will vary in quantity and nature from computing device to computing device and others are contemplated.

Upon starting the freeze daemon waits for freeze messages from the other components . Each component optionally performs a set of pre hibernate or pre snapshot activities then sends a FREEZE ME message to the freeze daemon . By sending the FREEZE ME message each component is indicating that it has placed itself in a ready to resume state. While in this ready to resume state each component can wait for a THAW message as shown by wait processes and respectively.

The freeze daemon sends a FREEZE SYSTEM message to the kernel which subsequently executes a system freeze .

To elaborate on chart a start message is sent from boot loader to kernel . At the kernel an initialize process and a start drivers process can run. Then an image or snapshot can be detected by a process running in the kernel . The image can be loaded by process . A resume process can be initiated by process . Towards this end a wake message can be sent from the kernel to the freeze daemon. Thaw message can be sent to each of the system software components which before the thaw message s were in a wait state as shown. Freeze daemon can wait for a period e.g. 3 seconds after which a post thaw script is run .

As used herein hibernate can include persisting system software component state information resident in volatile memory to a non volatile memory specifically to a snapshot . Resume can include loading system software state information from a stored snapshot to a volatile memory . In one embodiment the snapshot is a digitally encoded data structure able to persist software component state information. In various embodiments of the disclosure each snapshot need not be created by a hibernate process i.e. some snapshots can be born ready and each resume process need not occur from a hibernation state i.e. the resume process can occur from a sleep state from a fault state and the like .

Computing device can be a hardware software entity permitting the execution of operating system . Device may include hardware software firmware and the like. In various embodiments computing device can be but is not limited to a mobile computing device a mobile phone a two way radio a laptop a desktop computer a tablet a personal digital assistant and the like.

The hardware can include but is not limited to a processor a bus a volatile memory a non volatile memory and the like. Additional hardware components not shown such as an input output peripherals network transceivers audio transducers and the like may also exist for the computing device .

The operating system OS can include but are not limited to kernel executable code and the like. The operating system may or may not include a graphics manager. In one embodiment the operating system can include but is not limited to GNU LINUX UNIX WINDOWS and other operating systems implementing a hibernate resume process.

Executable code represents one or more instruction sets for establishing user space initialization of hibernation and resume. Executable code can include but is not limited to process manager snapshot handler settings and the like. Code functionality can include but is not limited to power control of device state transition functionality and the like. For example code can be a user space service able to initiate hibernate preparation actions associated with system software .

Process manager can be a portion of executable code able to perform hibernate and resume functionality within a user space. Manager functionality can include but is not limited to process communication process registration process deregistration and the like. In one instance manager can be used to track process state. In the instance manager can poll software to determine hibernate readiness. In one embodiment manager can be configured to be responsive to software errors. In one configuration of the embodiment when software hangs manager can determine an appropriate historic snapshot and automatically terminate the process. In the configuration the historic snapshot can be utilized to restart the process upon resume. In another configuration of the embodiment when software hangs manager can convey a notification to a user interface. In one embodiment manager can utilize settings to control hibernation and or resume. The settings can present state data saved for software components responsive to a hibernate process.

Snapshot handler can be a software entity for managing snapshot . Handler functionality can include but is not limited to snapshot creation snapshot deletion snapshot manipulation snapshot retrieval and the like. Handler can utilize traditional and or proprietary mechanisms to create and or manage snapshot . In one instance handler can utilize a process identifier to uniquely identify a snapshot with a software. In one embodiment handler can employ traditional and or proprietary compression mechanisms to enable reduced snapshot size. In the embodiment handler can be utilized to compress and or optimize snapshot .

Settings can include one or more rulesets for establishing the behavior of device system executable code and or system software . Settings can include but is not limited to process manager snapshot handler and the like. Settings can be manually and or automatically determined. In one instance settings can be configured via a user interface .

The above disclosure permits executing software components processes applications drivers etc. to become aware of a pending hibernation process or any process that creates a snapshot so that the software components are able to enter a ready to resume state . This added awareness permits the software components to get into an appropriate point for re launch which is referred to as a ready to resume state. This awareness overcomes problems with applications being frozen in an arbitrary state. This awareness and per hibernation activities occurring in response permits the disclosure to overcomes problems with hardware and or mechanical control changes occurring for a device while it is in a hibernate state.

Applicants emphasize that in a typical hibernation process drivers are told to go into a quiescent state. The disclosure approaches hibernation from the opposite direction and allows system software components to tell the kernel that they are ready to be frozen after all pre freeze initialization actions pre hibernate activities have been performed. In one embodiment a snapshot can be automatically created at system power up or boot time assuming no snapshot exists for a computing device. In one embodiment a saved snapshot can be used to recover quickly from an error condition by cycling power and resuming from the saved snapshot.

Additionally in one embodiment features can be implemented that permit frozen system software components to be thawed in a defined order which can decrease perceived resume time from an end user perspective and can enable optimizations for parallel processing. Thus embodiments of the disclosure capture details as to the order that system software components are to be awakened in. Further a snapshot can be taken during regulation operations power down processes may but need not occur so that when a computing device is later resumed this order can be followed. This provides for a maximum amount of parallel operations to minimize wake up time. In one embodiment born ready snapshots can be created at a factory or thereafter for a specific device configuration. Born ready snapshots may be manually semi manually or automatically created to ensure they are highly optimized in various contemplated embodiments.

In the foregoing specification specific embodiments have been described. However one of ordinary skill in the art appreciates that various modifications and changes can be made without departing from the scope of the invention as set forth in the claims below. Accordingly the specification and figures are to be regarded in an illustrative rather than a restrictive sense and all such modifications are intended to be included within the scope of present teachings.

The benefits advantages solutions to problems and any element s that may cause any benefit advantage or solution to occur or become more pronounced are not to be construed as a critical required or essential features or elements of any or all the claims. The invention is defined solely by the appended claims including any amendments made during the pendency of this application and all equivalents of those claims as issued.

Moreover in this document relational terms such as first and second top and bottom and the like may be used solely to distinguish one entity or action from another entity or action without necessarily requiring or implying any actual such relationship or order between such entities or actions. The terms comprises comprising has having includes including contains containing or any other variation thereof are intended to cover a non exclusive inclusion such that a process method article or apparatus that comprises has includes contains a list of elements does not include only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. An element proceeded by comprises . . . a has . . . a includes . . . a contains . . . a does not without more constraints preclude the existence of additional identical elements in the process method article or apparatus that comprises has includes contains the element. The terms a and an are defined as one or more unless explicitly stated otherwise herein. The terms substantially essentially approximately about or any other version thereof are defined as being close to as understood by one of ordinary skill in the art and in one non limiting embodiment the term is defined to be within 10 in another embodiment within 5 in another embodiment within 1 and in another embodiment within 0.5 . The term coupled as used herein is defined as connected although not necessarily directly and not necessarily mechanically. A device or structure that is configured in a certain way is configured in at least that way but may also be configured in ways that are not listed.

It will be appreciated that some embodiments may be comprised of one or more generic or specialized processors or processing devices such as microprocessors digital signal processors customized processors and field programmable gate arrays FPGAs and unique stored program instructions including both software and firmware that control the one or more processors to implement in conjunction with certain non processor circuits some most or all of the functions of the method and or apparatus described herein. Alternatively some or all functions could be implemented by a state machine that has no stored program instructions or in one or more application specific integrated circuits ASICs in which each function or some combinations of certain of the functions are implemented as custom logic. Of course a combination of the two approaches could be used.

Moreover an embodiment can be implemented as a computer readable storage medium having computer readable code stored thereon for programming a computer e.g. comprising a processor to perform a method as described and claimed herein. Examples of such computer readable storage mediums include but are not limited to a hard disk a CD ROM an optical storage device a magnetic storage device a ROM Read Only Memory a PROM Programmable Read Only Memory an EPROM Erasable Programmable Read Only Memory an EEPROM Electrically Erasable Programmable Read Only Memory and a Flash memory. Further it is expected that one of ordinary skill notwithstanding possibly significant effort and many design choices motivated by for example available time current technology and economic considerations when guided by the concepts and principles disclosed herein will be readily capable of generating such software instructions and programs and ICs with minimal experimentation.

The Abstract of the Disclosure is provided to allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in various embodiments for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separately claimed subject matter.

