---

title: Apparatus and method for securely logging boot-tampering actions
abstract: The disclosed apparatus may include a storage device and a secure counter. The apparatus may also include a tamper-logging component that (1) detects an action that is associated with booting untrusted images from the storage device and, in response to detecting the action, (2) securely logs the action by incrementing the secure counter. Various other apparatuses, systems, and methods are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09563774&OS=09563774&RS=09563774
owner: Juniper Networks, Inc.
number: 09563774
owner_city: Sunnyvale
owner_country: US
publication_date: 20150928
---
This application is a continuation of U.S. application Ser. No. 14 221 253 filed 20 Mar. 2014 the disclosure of which is incorporated in its entirety by this reference.

In recent years enterprises and consumers have become increasingly aware of and concerned about the state of security of their computing devices and systems. These concerns have been magnified in view of reports of government agencies installing backdoor components that allow surreptitious access onto computing devices after the devices have left their manufacturers. In view of these and other concerns device manufacturers may wish to provide some form of guarantee or assurance to their customers that the computing devices they sell are secure. For example a manufacturer may attempt to secure its devices by limiting the same using e.g. various software and or hardware based security components to only booting images and or executing applications that have been digitally signed by the manufacturer.

However to ensure industry compatibility and or to reduce development costs manufacturers often incorporate various free or open source software components including operating systems such as LINUX and FREEBSD into their devices. Unfortunately free or open source software components are often governed by software licenses such as the GNU GENERAL PUBLIC LICENSE GPL that require that manufacturers allow end users to freely replace or otherwise modify the software components governed by these licenses. This requirement is often at odds with a manufacturer s desire to secure devices that run software governed by these types of licenses effectively precluding the manufacturer from limiting its devices to only booting images and or executing applications that have been digitally signed by the manufacturer. The present document therefore identifies and addresses a need for improved systems and methods for securing devices that must comply with the restrictions of free or open source software licenses.

As will be described in greater detail below the present disclosure describes various apparatuses and methods for securely logging and accurately reflecting the state of security of computing devices that must comply with the restrictions of free or open source software licenses. In one example an apparatus for accomplishing such a task may include a storage device and a secure counter. The apparatus may also include a tamper logging component that detects an action that is associated with booting untrusted images from the storage device and in response to detecting the action securely logs the action by incrementing the secure counter.

A corresponding method may include 1 detecting an action that is associated with booting untrusted images from a storage device of a computing device and in response to detecting the action 2 identifying a secure counter and 3 securely logging the action by incrementing the secure counter.

In one example the above described method may be encoded as computer readable instructions on a non transitory computer readable medium. For example a non transitory computer readable medium may include one or more computer executable instructions that when executed by at least one processor of a computing device cause the computing device to detect an action that is associated with booting untrusted images from a storage device of the computing device. In response to detecting the action the computer executable instructions may cause the computing device to identify a secure counter and securely log the action by incrementing the secure counter.

Features from any of the above mentioned examples may be used in combination with one another in accordance with the general principles described herein. These and other examples features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The present disclosure describes various apparatuses and methods for securely logging and accurately reflecting the state of security of computing devices that must comply with the restrictions of free or open source software licenses. For example by securely logging the occurrence of actions on a computing device that are associated with booting untrusted images including e.g. attempts to boot untrusted images and or disable secure boot processes that prevent booting untrusted images the apparatuses and methods described herein may securely record and thus accurately reflect the state of security of the computing device in question. This may in turn enable end users or other entities or components to verify the state of security of the computing device including whether the computing device has ever booted an untrusted image or performed any other action that might compromise the state of security of the computing device.

The following will provide with reference to examples of apparatuses that are capable of securely logging boot tampering actions. Detailed descriptions of corresponding computer implemented methods and processes will also be provided in connection with . Finally the discussion corresponding to will provide numerous examples of systems that may include and or incorporate the apparatuses illustrated in .

The term storage device as used herein generally refers to any type or form of medium capable of storing computer readable information and or instructions. Examples of storage devices include without limitation non volatile storage devices such as magnetic disk drives e.g. so called hard drives solid state drives magnetic tape drives flash memory drives optical disk drives etc. volatile storage devices such as random access memory RAM removable storage devices such as optical disks flash memory drives magnetic tape drives etc. and the like. In some examples storage device may be part of apparatus . In other examples however storage device may represent or form a portion of a separate device accessed through a storage interface.

In some examples storage device may be configured to store one or more images such as image in . The term image as used herein generally refers to any type or form of logical structure containing computer readable information and or instructions. In some examples the term image may refer to all or a part of an operating system image i.e. a logical structure that includes the instructions and or information necessary to boot an operating system such as a boot loader operating system kernel shared library configuration file etc. . In other examples however the term image may simply refer to a collection of computer executable instructions including application or system software.

As illustrated in apparatus may also include a tamper logging component . The term tamper logging component as used herein generally refers to any type or form of software and or hardware component or combination of software and or hardware components capable of detecting and or logging or otherwise recording or causing to be securely logged or recorded one or more computing actions. In one example tamper logging component may represent a portion of a firmware component. Specifically tamper logging component may represent a portion of or be implemented within a set of instructions for controlling basic input control operations such as a Basic Input Output System BIOS or Unified Extensible Firmware Interface UEFI stored in persistent memory such as a read only memory ROM device. In other examples however tamper logging component may represent or be implemented within a stand alone or special purpose module component or device.

In one example and as will be described in greater detail below tamper logging component may be configured to detect and or log actions that are associated with booting untrusted images from storage device . The term untrusted image as used herein generally refers to any image that fails to meet specific security or trustworthiness criteria such as having been digitally signed by a particular entity having been signed using a particular protocol or the like. Examples of untrusted images include without limitation unsigned images improperly signed images e.g. images that have been signed by an unexpected entity or signed using an unexpected protocol or the like.

In addition the terms booting or boot process as used herein generally refer to the initial set of operations that a computing device performs after electrical power is provided to the computing device s central processing unit CPU . For example a boot process may refer to a process that begins when a computing device is turned on or reset and ends when the computing device is ready to perform normal operations. In this example the boot process may begin when a firmware component on the computing device e.g. a ROM device containing a firmware interface such as BIOS or UEFI completes its initial diagnostic routine e.g. the power on self test POST and ends when a boot loader has loaded an operating system kernel from the computing device s storage device into memory.

Additionally the phrase action that is associated with booting untrusted images as used herein generally refers to any act or event that involves booting an untrusted image directly or indirectly results in booting an untrusted image and or that otherwise allows facilitates or enables the booting of an untrusted image. Examples of such actions include without limitation disabling either temporarily or permanently a secure boot process that prevents booting untrusted images booting an image untrusted or otherwise while a secure boot process is disabled loading an untrusted image onto a computing device s storage device failing a secure boot process due to booting an untrusted image e.g. an unsigned or improperly signed image tampering with or otherwise modifying various security components on a computing device that detect log and or prevent booting untrusted images such as resetting or otherwise attempting to change the counter value of a secure counter or the cryptographic key or state of a secure cryptoprocessor as discussed in greater detail below and or any other action that may involve enable facilitate and or be associated with booting untrusted images.

As detailed above in some examples apparatus may implement via e.g. a firmware component a secure boot process that prevents booting untrusted images. The term secure boot process as used herein generally refers to a boot process that attempts to verify the integrity authenticity and or legitimacy of one or more stages or parts of and or modules or components loaded during the boot process. In one example a secure boot process may refer to a boot process that requires that each stage or component of the boot process be properly signed. For example upon completing its initial diagnostic routine e.g. POST a firmware interface such as a BIOS or UEFI which may in this example be implicitly trusted may initiate a secure boot process by verifying that the next stage or component of the boot process in this case the boot loader has been properly signed before loading the same into memory. Once the firmware interface verifies the authenticity of the boot loader s digital signature and loads the same into memory the boot loader may in turn verify that the next stage or component of the boot process in this case the operating system kernel has been properly signed before loading the same into memory. After the boot loader has verified the authenticity of the kernel s digital signature and loaded the same into memory the kernel may in turn verify that one or more of the operating system s various components e.g. executables shared libraries configuration files etc. have been properly signed before loading the same into memory. By proceeding in this manner apparatus may ensure that only trusted i.e. properly signed images and or components are booted executed or loaded into memory.

As indicated above tamper logging component may be configured to detect and log actions that are associated with booting untrusted images in order to record and accurately reflect the state of security of apparatus . Tamper logging component may detect actions that are associated with booting untrusted images in a variety of ways. For example in embodiments where tamper logging component represents a portion of a firmware component e.g. a ROM device containing a firmware interface such as BIOS or UEFI tamper logging component may monitor and detect attempts to tamper with or otherwise modify the firmware component including attempts to disable a secure boot process utilized by the firmware component. Similarly tamper logging component may as part of this firmware component detect attempts to boot an image untrusted or otherwise while a secure boot process utilized by the firmware component is disabled and or detect that a secure boot process utilized by the firmware component has failed due to booting an untrusted image e.g. an unsigned or improperly signed image .

Tamper logging component may also monitor and detect attempts to tamper with or otherwise modify other components of apparatus including storage device and secure counter as discussed in greater detail below. For example tamper logging component may monitor for and detect attempts to 1 load an untrusted image onto storage device 2 tamper with or otherwise modify various security components that detect log and or prevent booting untrusted images such as secure counter and or security component as discussed in greater detail below and or 3 perform any other action that may involve enable facilitate and or be associated with booting untrusted images.

As detailed above tamper logging component may in response to detecting an action that is associated with booting an untrusted image securely log or cause to be securely logged the detected action. The phrase securely log as used herein generally refers to any act that tracks documents or otherwise records the occurrence of a computing event using techniques protocols and or procedures that attempt to protect safeguard and or preserve the integrity validity and or authenticity of the same.

Tamper logging component may securely log actions associated with booting untrusted images in a variety of ways. In one example tamper logging component may securely log such actions by incrementing a secure counter such as secure counter in . The phrase secure counter as used herein generally refers to any type or form of software and or hardware component that is capable of logging recording or otherwise tracking the occurrence of a computing action.

Secure counter may log or record the occurrence of actions such as actions associated with booting untrusted images in a variety of ways. In one example secure counter may log or record the occurrence of an action associated with booting untrusted images by incrementing an internal counter value e.g. counter value . In this example the counter value of secure counter may represent the number of times actions associated with booting untrusted images have occurred. Secure counter may also log or record the occurrence of actions using any other type or form of counting notation and or recording technique.

For example upon detecting an attempt to disable a secure boot process that prevents booting untrusted images or upon detecting any other action that is associated with booting untrusted images tamper logging component may increment or cause to be incremented the counter value of secure counter . In this example by querying secure counter for its present value i.e. counter value an end user or other entity or component may verify whether a computing device has ever booted an untrusted image or performed any other action that is associated with booting untrusted images . Specifically if the counter value of secure counter is anything but zero or anything greater than the initialized value of secure counter then the end user may know that the computing device in question has either previously booted an untrusted image or performed some other action that is associated with booting untrusted images.

In some examples secure counter may be included within and or be implemented by tamper logging component . In other examples however and as illustrated in secure counter may represent or be included within a standalone security component such as security component in . The term security component as used herein generally refers to any type or form of software and or hardware component or combination of software and or hardware components capable of protecting safeguarding and or authenticating the integrity validity and or legitimacy of a secure counter s value. Examples of security components include without limitation software or hardware based encryption schemes or mechanisms cryptoprocessors such as a Trusted Platform Module TPM and the like.

In one example security component in may represent a hardware based cryptoprocessor. In this example secure counter may represent a monotonic counter maintained or implemented by security component . The term monotonic counter as used herein generally refers to a counter whose value once incremented cannot be reverted to a previous one.

In some examples security component may in addition to incorporating various software and or hardware based security measures include various physical protection measures to provide evidence of any attempt to physically alter security component including e.g. attempts to remove replace and or otherwise physically modify security component . For example security component may include a tamper evident seal such as tamper evident seal in that provides physical evidence of any attempt to physically alter security component . Examples of tamper evident seals include without limitation any type or form of cover or enclosure that must be physically removed broken or otherwise physically modified in order to physically alter the sealed component. In some examples tamper evident seal may only seal and provide physical evidence of attempts to physically alter security component . In other examples and as illustrated in tamper evident seal may seal and provide physical evidence of attempts to physically alter other components of apparatus such as storage device and or tamper logging component .

Security component may protect safeguard and or authenticate the integrity validity and or legitimacy of the counter value of secure counter in a variety of ways. In one example security component may authenticate the counter value of secure counter by signing the same using a private cryptographic key such as private key . The terms private cryptographic key and private key as used herein generally refer to the non public half of an asymmetric key pair that may be used to digitally sign objects. In some examples a private key such as an Attestation Identity Key AIK or other private key utilized by a TPM may be used to digitally sign an object such as the counter value of secure counter and the digital signature may later be authenticated using a public key that corresponds to the private key. In these examples authentication of the digital signature may verify both that the object was signed by the private key and that the object has not been tampered with.

For example and as illustrated in security component may in response to receiving a request or query for the present value of secure counter from tamper logging component and or any other component digitally sign the counter value of secure counter using private key resulting in signed value . In this example upon receiving signed value from security component tamper logging component and or any other component may independently verify the authenticity of signed value using a public key that corresponds to private key . For example and as illustrated in tamper logging component may verify signed value by decrypting the same using public key resulting in counter value . In this example tamper logging component and or any other component may by successfully decrypting signed value verify both 1 that the private key utilized by security component i.e. private key is authentic since tamper logging component was able to successfully decrypt signed value using the corresponding public key and 2 that the counter value of secure counter has not been tampered with.

Since some security components such as TPMs offer reset procedures that allow end users or other components to reset these security components to an un owned state which may in turn erase one or more of the encryption keys utilized by the security components and or reset one or more of the secure counters maintained by the security components in some examples tamper logging component may verify the legitimacy of signed value by verifying that the private key used by security component e.g. private key to sign the counter value of secure counter has not been changed reset or otherwise tampered with since leaving manufacturing.

In one example tamper logging component may verify the integrity of private key by querying a backend device such as backend device in operated by a trusted third party such as a manufacturer of apparatus and or security component that maintains a database e.g. key database that contains the public keys for each device or apparatus supported by the trusted third party. In this example the trusted third party may upon manufacturing apparatus and or security component initialize security component which may in turn generate private key . The trusted third party may then record the public key that corresponds to private key e.g. public key along with information that uniquely identifies the apparatus or component to which the public key corresponds such as a serial number for apparatus and or security component in key database .

In this example tamper logging component may later verify that the private key used by security component of apparatus has not been changed or reset since leaving manufacturing by 1 querying backend device for the public key that is uniquely associated with apparatus and or security component by sending e.g. identifying information for apparatus and or security component such as a hash of a serial number and then 2 attempting to decrypt the signed value provided by security component using the public key provided by backend device . If tamper logging component is able to successfully decrypt the signed value provided by security component using the public key provided by backend device then tamper logging component may assume that the private key used by security component has not been changed or reset since leaving manufacturing and may in turn trust the signed value of secure counter .

If however tamper logging component is unable to successfully decrypt the signed value provided by security component using the public key provided by backend device then tamper logging component may assume that the private key used by security component has been changed or reset. As such tamper logging component may assume that the signed value provided by security component is untrustworthy and that apparatus has either previously booted an untrusted image or performed some other action that is associated with booting untrusted images such as clearing or resetting security component .

In another example tamper logging component or any other component may verify the integrity or legitimacy of any public keys in its possession by querying backend device . For example tamper logging component may wish to verify the integrity or legitimacy of a public key in its possession. In this example tamper logging component may send a query to backend device that contains 1 information that uniquely identifies apparatus and or security component such as a hash of a serial number for apparatus and or security component and 2 a copy of the public key that it possesses. Backend device may then return a response e.g. LEGITIMATE ILLEGITIMATE or TRUE FALSE that indicates whether public key matches the public key that was originally associated with apparatus and or security component during manufacturing and recorded in key database .

In some cases tamper logging component may allow a detected action to be performed regardless of whether tamper logging component is able to successfully log the same. In other examples however tamper logging component may only allow a detected action to be performed if tamper logging component is able successfully log the detected action by e.g. successfully incrementing secure counter . If for example tamper logging component is unable to securely log an attempt to boot an untrusted image due to e.g. a software or hardware failure or an attempt by a malicious component to block the same then tamper logging component may prevent the boot attempt. By doing so tamper logging component may ensure that the counter value of secure counter accurately reflects the number of times actions associated with booting untrusted images have occurred.

In some examples tamper logging component may provide an application programming interface API that enables other components or modules to securely obtain and or read the present of secure counter . For example tamper logging component may provide or otherwise implement an API that operating systems e.g. JUNIPER s JUNOS OS or COMMAND LINE INTERFACE application software platforms e.g. JUNIPER s JUNOS SPACE or other components or modules may use to obtain and or read the signed value of secure counter . This API may in turn enable these operating systems application software platforms and or other components or modules to independently verify whether their associated computing devices have ever performed any actions that are associated with booting untrusted images.

In some examples tamper logging component may in addition to securely logging the occurrence of an action that is associated with booting untrusted images generate and or securely store additional information that uniquely identifies the detected action and or the target of the detected action such as an untrusted image that was loaded or booted . In some examples tamper logging component may store this additional information in the form of a change certificate such as change certificate in . The term change certificate as used herein generally refers to any type or form of electronic object capable of uniquely and or securely identifying a computing action and or the target of a computing action.

Tamper logging component may create and or securely store change certificates in a variety of ways. For example and as illustrated in in response to detecting and logging an attempt to boot an untrusted image such as image in tamper logging component may create change certificate by 1 generating a hash of image resulting in image hash and then 2 digitally signing or instructing security component to digitally sign using e.g. private key the counter value of secure counter and or image hash resulting in change certificate . In this example change certificate may uniquely identify both 1 the untrusted image that was booted in this case image and 2 the counter value of secure counter after booting the untrusted image.

Change certificate may include a variety of information in both signed and unsigned formats. For example in one embodiment change certificate may include a digitally signed version of both image hash and counter value . In other embodiments however change certificate may include unsigned versions of image hash and or counter value . Change certificate may also be created and or signed by a variety of components including tamper logging component and or security component . In addition change certificate may be stored in a variety of formats and locations including within the boot partition of a boot device such as storage device .

In some examples tamper logging component may use change certificate to determine whether a detected action involves a previously logged action and or image. For example in some embodiments tamper logging component may prior to incrementing secure counter in response to detecting an attempt to boot an untrusted image determine whether the detected attempt represents another attempt to boot the same untrusted image that was previously detected securely logged and recorded in change certificate .

Specifically and as illustrated in tamper logging component may in response to detecting an attempt to boot an untrusted image determine and or instruct security component to determine whether the untrusted image has already been detected securely logged and recorded by decrypting change certificate using public key resulting in image hash and counter value . In this example if the hash of the untrusted image in question matches image hash then tamper logging component may assume that the untrusted image in question has already been detected securely logged and recorded and may refrain from incrementing or refrain from instructing security component to increment secure counter . In contrast if the hash of the untrusted image in question does not match image hash then tamper logging component may assume that the untrusted image in question represents a new untrusted image and may increment or instruct security component to increment secure counter . In these examples by refraining from incrementing secure counter during subsequent boots of the same untrusted image tamper logging component may ensure that the counter value of secure counter accurately reflects the number of times unique actions associated with booting untrusted images have occurred.

As illustrated in at step the systems described herein may detect an action that is associated with booting untrusted images from a storage device of a computing device. For example tamper logging component from may detect an attempt to boot an untrusted image e.g. image from storage device .

At step the systems described herein may identify a secure counter that is capable of securely logging the action detected in step . For example tamper logging component from may identify secure counter which may in some examples and as detailed above represent a portion of security component .

At step the systems described herein may securely log the action detected in step by incrementing the secure counter identified in step . For example tamper logging component from may securely log the detected attempt to boot the untrusted image by incrementing or instructing security component to increment the counter value of secure counter . Upon completion of step the process flow of exemplary method may terminate.

As detailed above the present disclosure describes various apparatuses and methods for securely logging and accurately reflecting the state of security of computing devices that must comply with the restrictions of free or open source software licenses. For example by securely logging the occurrence of actions on a computing device that are associated with booting untrusted images including e.g. attempts to boot untrusted images and or disable secure boot processes that prevent booting untrusted images the apparatuses and methods described herein may securely record and thus accurately reflect the state of security of the computing device in question. This may in turn enable end users or other entities or components to verify the state of security of the computing device including whether the computing device has ever booted an untrusted image or performed any other action that might compromise the state of security of the computing device.

Computing system broadly represents any type or form of electrical load including a single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems mobile devices network switches network routers e.g. backbone routers edge routers core routers mobile service routers broadband routers etc. network appliances e.g. network security appliances network control appliances network timing appliances SSL VPN Secure Sockets Layer Virtual Private Network appliances etc. network controllers gateways e.g. service gateways mobile packet gateways multi access gateways security gateways etc. and or any other type or form of computing system or device.

Computing system may be programmed configured and or otherwise designed to comply with one or more networking protocols. According to certain embodiments computing system may be designed to work with protocols of one or more layers of the Open Systems Interconnection OSI reference model such as a physical layer protocol a link layer protocol a network layer protocol a transport layer protocol a session layer protocol a presentation layer protocol and or an application layer protocol. For example computing system may include a network device configured according to a Universal Serial Bus USB protocol an Institute of Electrical and Electronics Engineers IEEE 1394 protocol an Ethernet protocol a T1 protocol a Synchronous Optical Networking SONET protocol a Synchronous Digital Hierarchy SDH protocol an Integrated Services Digital Network ISDN protocol an Asynchronous Transfer Mode ATM protocol a Point to Point Protocol PPP a Point to Point Protocol over Ethernet PPPoE a Point to Point Protocol over ATM PPPoA a Bluetooth protocol an IEEE 802.XX protocol a frame relay protocol a token ring protocol a spanning tree protocol and or any other suitable protocol.

Computing system may include various network and or computing components. For example computing system may include at least one processor and a system memory . Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. For example processor may represent an application specific integrated circuit ASIC a system on a chip e.g. a network processor a hardware accelerator a general purpose processor and or any other suitable processing element.

Processor may process data according to one or more of the networking protocols discussed above. For example processor may execute or implement a portion of a protocol stack may process packets may perform memory operations e.g. queuing packets for later processing may execute end user applications and or may perform any other processing tasks.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation RAM ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example storage device as described in detail above . System memory may be implemented as shared memory and or distributed memory in a network device. Furthermore system memory may store packets and or other information used in networking operations.

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an input output I O controller and a communication interface each of which may be interconnected via communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as a Serial ATA SATA an Industry Standard Architecture ISA a Peripheral Component Interconnect PCI a PCI Express PCIe and or any other suitable bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure . In some embodiments memory controller may include a Direct Memory Access DMA unit that may transfer data e.g. packets to or from a link adapter.

I O controller generally represents any type or form of device or module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory and communication interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a link adapter a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a wide area network a private network e.g. a virtual private network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters IEEE 1394 host adapters Advanced Technology Attachment ATA Parallel ATA PATA Serial ATA SATA and External SATA eSATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also enable computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from those shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable medium. The phrase computer readable medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. Compact Disks CDs and Digital Video Disks DVDs electronic storage media e.g. solid state drives and flash media and other distribution systems.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of apparatus in and or computing system in may represent portions of a cloud computing or network based environment. Cloud computing and network based environments may provide various services and applications via the Internet. These cloud computing and network based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may also provide network switching capabilities gateway access capabilities network security functions content caching and delivery services for a network network control services and or and other networking functionality.

The process parameters and sequence of the steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

In addition one or more of the modules and or components described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules and or components recited herein may receive information that indicates that an action associated with booting untrusted images has occurred transform that information into a secure log or record of the same securely store the transformed data and use the result of the transformation to verify the state of security of a computing device. Additionally or alternatively one or more of the modules and or components recited herein may transform a processor volatile memory non volatile memory and or any other portion of a physical computing device from one form to another by executing on the computing device storing data on the computing device and or otherwise interacting with the computing device.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms connected to and coupled to and their derivatives as used in the specification and claims are to be construed as permitting both direct and indirect i.e. via other elements or components connection. In addition the terms a or an as used in the specification and claims are to be construed as meaning at least one of. Finally for ease of use the terms including and having and their derivatives as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

