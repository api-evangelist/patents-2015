---

title: Interactive system and process
abstract: A method of delivering an instruction () to a mobile user device () connected to a network () is disclosed. The method comprising the steps of receiving an interactive workflow (), translating the interactive workflow into the instruction () in a form executable by the mobile user device (), and sending a message () including the instruction () to the mobile user device ().
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09635488&OS=09635488&RS=09635488
owner: 
number: 09635488
owner_city: 
owner_country: 
publication_date: 20151008
---
This application claims priority to U.S. patent application Ser. Nos. 12 445 452 and 14 195 683 each of which disclosures are incorporated herein in their entirety.

The present invention relates generally to a method of delivering an instruction to a mobile user device connected to a network.

Amongst the wide variety of portable electronic devices available today mobile phones have become particularly pervasive with more than double the penetration of the Internet. These devices have rapidly advanced in capability and can do far more than Voice and SMS. Using these capabilities to deliver and execute applications that provide customisable interactivity to mobile phones and other devices is highly desirable but continues to be a challenging endeavour due the varied types of largely incompatible devices and platforms on the market.

Most interactive applications for mobile phones involve either Short Message Service SMS or the development of dedicated applications that address specific business requirements. SMS interactivity suffers from poor usability the user has to be familiar with idiosyncratic commands and security issues SMS source addresses can be faked thus limiting their usage to simple non sensitive transactions. Furthermore an organisation wishing to use SMS to interact with its customers needs to come to some commercial arrangement with the telecommunications provider in order to establish billing procedures and so on. This can be inconvenient for the organisation and may also be quite expensive both to set up and also to operate on an on going basis.

The dedicated applications are an attempt to address these shortcomings by developing programming code that is executed by the mobile device to perform a specific task. This involves significant amounts of time at least because mobile phones from different manufacturers are not usually binary compatible and cannot execute the same executable applications. Additionally these applications are limited to the functionality required at the time of development and thus may not support additions or modifications to that functionality. As can be appreciated distributing changes to these applications is similarly quite a tedious process typically requiring the user to manually download and install an updated version of the application on their telephone.

According to one aspect of the invention there is provided a method of delivering an instruction to an application installed on a user device connected to a network the method comprising the steps of 

According to another aspect of the invention there is provided a method of delivering an instruction to a mobile user device connected to a network the method comprising the steps of 

According to yet another aspect of the invention there is provided computer software comprising executable directions for delivering an instruction to a mobile user device connected to a network the directions comprising the steps of 

Preferably the step of receiving the interactive workflow includes the step of receiving the interactive workflow coded in a high level programming or scripting language. More preferably the step of receiving the interactive workflow includes the step of receiving the interactive workflow from an external or third party.

Preferably the step of sending the message includes the step of sending a set of instructions for execution by an application installed on the mobile user device. More preferably the step of sending the set of instructions includes the step of sending the set of instructions for the device to interact with a user of the mobile user device.

Preferably the mobile user device is one of a plurality of mobile user devices and the method also comprises the step of receiving a specification of the mobile user device from a database comprising respective specifications for the plurality of user devices.

Preferably the step of translating the interactive workflow includes tailoring the instruction to the specification.

Preferably the step of translating the interactive workflow includes tailoring the instruction to a device operating system.

Preferably the step of sending the message includes the step of sending a unique message identifier. More preferably the step of sending the message includes one or more preliminary steps of compressing encoding and encrypting the instruction.

Preferably the step of sending the message includes the step of sending the message via a Short Message Service SMS of a cellular network. More preferably the step of sending the message via SMS includes the step of splitting the message into a plurality of messages to comply with one or more standards of the SMS. Alternatively the step of sending the message includes one or more of the steps of sending the message via a Cell Broadcast Service CBS of a cellular network sending the message as an IP TCP data packet over a GPRS or 3G network and sending the message as a data packet over a Bluetooth connection.

Preferably the method further comprises the step of the mobile user device receiving the set of instructions and the unique message identifier. More preferably the step of the mobile user device receiving the set of instructions and the unique message identifier includes the step of receiving the set of instructions for translation to mobile user device system codes by a workflow execution engine component of the application.

Preferably the method further comprises the step of receiving a response to the instruction from the mobile user device. More preferably the step of receiving a response includes the step of receiving a response identifier from the device. Even more preferably the method comprises the step of comparing the unique message identifier and the response identifier to confirm the authenticity of the received message.

Preferably the method includes the step of checking if the mobile user device is willing to receive the instruction derived from the interactive workflow from the external or third party. More preferably the method includes the step of sending a request to the user of the mobile user device to accept the instruction derived from the interactive workflow from the external or third party.

Preferably the step of receiving the interactive workflow includes the preliminary step of receiving a request for an Application Programming Interface from the external or third party. More preferably the step of receiving a request for an Application Programming Interface is received from the external or third party. Even more preferably the step of receiving the interactive workflow includes the preliminary step of opening an Application Programming Interface.

Preferably the method also comprises the step of issuing a command to the device to update or delete a sequence of instructions saved to a permanent data store on the mobile user device.

In accordance with the present invention there is also provided an interactive process executed by a computer system or device the process including 

Advantageously said information may include system information determined from said system or device and or user information determined from a user of said system or device.

Preferably said execution causes generation of an interactive user interface on a display of said system or device and the process includes receiving response data representing said information from a user of said system or device in response to said interactive display.

The present invention also provides an application component for a system or device the application component including 

Preferably the application component further includes a data management component for storing sets of instructions on non volatile storage means and for retrieving a selected one of the stored sets of instructions for execution.

Preferably said execution component is adapted to generate an interactive display for a user of said system or device and to receive response data representing said information from a user of said system or device in response to said interactive display.

The present invention also provides an interactive process for execution by a system or device including 

Preferably said header data includes index data representing an index for said plurality of encryption keys.

Advantageously said payload data may represent one or more instructions for execution on said system or device to determine information.

Advantageously said payload data may represent information in response to execution of one or more instructions on a remote system or device.

The present invention also provides an interactive process for execution by a system or device including 

Advantageously said payload data may represent one or more instructions for execution on said remote system or device to determine information.

Advantageously said payload data may represent information in response to execution of one or more instructions.

Preferably the process includes generating said plurality of encryption keys and sending said plurality of encryption keys to said remote system or device.

Preferably the process includes associating said plurality of encryption keys with an identifier of said remote system or device.

Preferably said interactive applications are sent to said user devices using short message service SMS .

The present invention also provides an interactive system for managing interaction with users of remote systems and or devices the interactive system being adapted to 

The present invention also provides a system having components for executing any one of the above processes.

The present invention also provides a computer readable storage medium having stored thereon program instructions for executing any one of the above processes.

As shown in an interactive system includes at least one client application and at least one application gateway . Each client application is a component of a corresponding user device that can communicate with the at least one application gateway via one or more of a variety of communications means supported by the device preferably including a combination of i an IP based communications network such as the Internet ii a wireless wide area communications network such as the global system for mobiles GSM telephone network iii a local wireless network or link between the device and the at least one application gateway such as an infra red link Wi Fi or Bluetooth network and or v a direct cable connection using a standard communications protocol such as RS 232 universal serial bus USB or FireWire IEEE 1394 . The interactive system allows an application developer using a standard computer system to rapidly develop and deploy an interactive workflow or application for execution on one or more user devices in order to interact with the users of those devices and to receive response data representing at least one response of each user to the interactive application.

The interactive workflow or application includes a set of instructions for presenting information to a user of each mobile device in an interactive display or user interface and for retrieving each user s response s to that information. Typically the information presented to a user will include one or more questions displayed on a display screen of the user s device and possibly also audio played on a sound transducer of the device and each of the user s responses is provided by the user interacting with one or more user interface UI components or input controls of the interactive display. Each response can be in the form of freeform text typed into a textbox or the result of the user interacting with another type of input control such as radio buttons cheek boxes sliders simple menus nested menus and so on. To some extent these possibilities are determined by the capabilities of the device . However because the workflow supported by the system also includes control flow features similar to those provided by high level programming languages the workflow instructions generated by the system are also considered to constitute an interactive software application that is executed on the user device .

In the described embodiment the user device is a mobile telephone but alternatively could be some other type of portable or handheld device such as a personal data assistant PDA and hence is also referred to hereinafter as the mobile device . However even though the device is described as being mobile or portable it will be appreciated by those skilled in the art that the systems and processes described herein could alternatively be used in conjunction with other types of devices and systems that need not even be portable. For example the client application could even be installed on a standard personal computer system rather than the portable device in order to rapidly develop and deliver interactive applications to a standard personal computer for example.

In the described embodiment the client application is a software application that is stored on the mobile device either as part of the device manufacturing or configuration prior to sale or subsequently deployed as required via GPRS Bluetooth Infrared or a phone specific channel e.g. a data cable allowing it to be installed on a wide variety of different types of device. However it will be apparent to those skilled in the art that the client application and its processes could alternatively be implemented either in part or in total by one or more dedicated hardware components such as application specific integrated circuits ASICs or field programmable gate arrays FPGAs for example.

Similarly the application gateway is a software application that is installed on and executed by a standard computer system such an Intel IA 32 computer server executing a Windows operating system. The computer system includes standard hardware components and software components . The hardware components include at least one processor a communications interface e.g. network interface card random access memory non volatile e.g. hard disk storage user input device e.g. keyboard mouse or other pointing device and a display adapter and device all interconnected by a system bus . The software components include the application gateway and a standard operating system such as Microsoft Windows. Additionally a third party application shown as being installed on the developer s computer may additionally or alternatively be installed on the same computer system on which the application gateway itself is located as shown. However although the application gateway is described as being a software application it will be apparent to those skilled in the art that the application gateway and its processes could alternatively be implemented either in part or in total by one or more dedicated hardware components such as application specific integrated circuits ASICs or field programmable gate arrays FPGAs for example.

At step the application gateway transforms the workflow described by the developer into a compressed encoded and encrypted format for transmission to the mobile device . The application gateway also inserts a unique identifier or ID into the message and stores data associating that ID with the destination e.g. phone number or network address to which the workflow is to be sent.

The application gateway transforms the message so that it can be transmitted via the appropriate communication means. For example if the message is to be transmitted via SMS the application gateway splits a large message into smaller messages to comply with the GSM standard. All this is hidden from the developer. At step the application gateway then transmits the message to the device specified by the developer.

At step the client application receives un compresses and decrypts the message s thereby verifying their integrity. If valid at step the client application interrupts the user and requests that they complete the workflow. With the user s cooperation the client application interprets each instruction and performs a corresponding operation e.g. display a message collect the user s age etc. that in most cases involves interacting with the user of the device .

At the end of the workflow the client application sends back to the application gateway all the collected response data via the response channel specified in the workflow instructions by the application gateway . For example if the response is to be returned via SMS a response SMS is sent back to a phone number provided in the initial message s . The client application also encrypts the response message s and includes the unique message ID to ensure authenticity of the response.

When the application gateway receives the response message at step it decrypts the message and determines whether the ID of the message is valid for the phone number it was received from using the destination and ID association stored previously. If the message is valid then it is processed as specified by the developer e.g. passes it on to a third party application emails the developer stores it in a file etc.

In addition to the above the interactive system also provides capabilities for i storing and subsequently updating a set of instructions as a permanent or semi permanent application stored on non volatile storage of the user device for execution at any time i.e. the application persists on the user s device ii the distribution of encryption keys and iii opt in mechanisms to ensure that the mobile device is not sent unsolicited applications e.g. if the application gateway is shared by multiple vendors.

The interactive system and the interactive process executed by the interactive system are described in detail below.

As shown in the mobile device is a standard mobile phone including hardware components and software components . The hardware components include a processor read only memory random access memory flash memory user interface components including user input components e.g. microphone keyboard and in some devices touch screen output components e.g. display screen speaker and one or more communications interfaces allowing the device to communicate with a mobile phone network and in some devices also Bluetooth and or Wi Fi local wireless networks or an infrared link . In the preferred case of the mobile device. being a telephone the device also includes a SIM card . The software components include an operating system such as the closed proprietary operating systems installed on mobile telephones sold under brands such as Nokia and Motorola Java platform Micro edition Java ME and the client application . However if the operating system is a more sophisticated operating system such as Symbian Linux Microsoft SmartPhone PocketPC Windows CE or Windows Mobile that provides sufficiently powerful application programming interfaces APIs then the J2ME component can be omitted. As shown in the client application includes a message sender component a message receiver component user interface UI widgets a workflow execution engine instant data storage and permanent data storage . The client application is a native application that is executed by the mobile device . The client application can be installed by any one of a number of means including WAP push IP data packets GPRS or 3G networks Bluetooth Infrared or a phone specific channel such as a data cable. The client application can be provided as a preinstalled application on the mobile phone when purchased.

The message sender sends response messages to the application gateway in a format understood by the application gateway . It encrypts the message and includes ID provided with the initial application to confirm its authenticity.

The message receiver decrypts and uncompresses instruction sets received from the application gateway . It implements message reception via a number of channels including Bluetooth Infrared IP networks GPRS or 3G and SMS. The message receiver also invokes the workflow execution engine to process the instruction set.

The UI Widgets are pre built user interface components that instructions sent by the application gateway can use to interact with the user.

The workflow execution engine is responsible for running and maintaining state for the instructions currently being processed. It associates instructions with UI widgets as well as storing input from the device and its user. It is also responsible for invoking the message sender once the workflow is completed to initiate sending the response to the application gateway . The workflow execution can also be invoked by a timer if an instruction asks to be run at a specific time.

The client application can simultaneously receive multiple workflow applications at any one time and the instant data store is effectively a first in first out queue that stores these applications and processes them one by one until the instant data store is empty.

The interactive system has the ability to make a sequence of instructions persistent on the mobile device as an application. These sequences are identified by a unique label and are stored in the permanent data store being in this embodiment the non volatile flash memory . The application gateway can issue commands to update or delete applications in the permanent data store .

Once invoked at step the instruction sequence is retrieved either reading data from the instant data store in the case of a Timer event or from the input channel in the case of a new data event. If the instruction data is retrieved from the input channel and is encrypted at step the client application decrypts and verifies it as described below. If the data is valid the workflow execution begins at step .

The workflow execution SOS processes the instructions step by step. This may or may not involve user interactions as some instructions described in the Appendix can be handled without user interaction . Upon execution of a timer instruction specifying that execution should be postponed to a later time further execution of instructions of the workflow application is suspended and the instruction set is stored placed in the instant data store pending resumption at the specified time.

Once the workflow execution is complete the workflow application is removed from the instant data store . If the application is marked as persistent the instruction set is saved to the permanent data store . The user can then invoke the instruction set at any time.

At step the information collected by the workflow execution is sent back to the application gateway as response data. The client application encrypts the response data in addition to including the unique message ID that verifies the authenticity of the response data.

As shown in the application gateway includes an instruction compiler a key manager a message receiver a message sender an opt in manager persistent storage and an application programming interface API .

The instruction compiler translates workflow descriptions received from the developer into a format that is optimized for delivery to and execution by the client application . The workflow description is written in a scripting language that is compiled by the instruction compiler . The developer can enter the workflow description directly into a text box and submit its contents to the compiler . This is typically used to rapidly prototype the look and feel of a workflow application. Alternatively the workflow description can be submitted by making an API call to the compiler from a high level programming language such as C Java or TCL thus providing end to end application integration.

The message sender encrypts the workflow instruction set. The encryption relies on requesting the key manager to provide a random index and an encryption key that is specific to a particular user device on which the instructions are to be executed. The index is sent in cleartext to the client application which uses the index to look up the appropriate encryption key to decipher the message. The message sender also generates a unique random identifier for the workflow application. The random identifier is a combination of a random identifier and an identifier of the party who sent the workflow description.

The message sender uses the transport adapter to deliver the actual message s containing the workflow application. The message sender first checks with the Opt in manager to ensure that the client application does not receive unsolicited applications which it has not opted into as described below.

The transport adapter abstracts the various methods of delivering an instruction set to the client application on the mobile device . It uses device capability information stored in the persistent storage to determine the capabilities of the device and hence the best communication channel to deliver the message s .

The transport adapter provides plug in support for new channel types dynamically by providing a set of messaging APIs and by allowing dynamic loading of compiled code that implements a new messaging interface. If required the transport adapter reformats the instruction payload so that it can be delivered via a particular channel. In particular art application delivered by SMS may have to be divided into two or more smaller messages due to SMS message size limitations.

The key manager is responsible for generating distributing and managing the encryption keys issued to the portable device as described below. It also provides encryption and decryption facilities for the message sender and the message receiver .

The opt in manager provides an opt in opt out process to allow client applications select the entities they are willing to receive instruction sets from. This is desirable because the application gateway may be shared by multiple parties and the client application will otherwise execute any received instruction set as long as it is valid. The opt in manager maintains in the persistent data store associations between parties and the phone numbers or in the case of devices other than telephones other form of address or identifier of the destination device they are allowed to send applications to. The process for creating these associations can be dynamic to allow users to selectively block or allow instructions from particular parties. For example shows the message flow for an opt in process.

At step a party uses the external application executing on the computer system to send a workflow description to the application gateway which at step compiles and formats the instructions in preparation for sending them to a client application that has not opted in. At step the message sender first checks whether the client application has opted in. If not at step it asks the opt in manager to determine the opt in status for this party and this user device. At step the opt in manager sends an opt in request message to the user asking whether they agree to receive applications from this party. If the response is yes at step the opt in manager stores this information in the persistent data store and then at step instructs the message sender to send the instruction set at step . Otherwise if the response is no then the message sender fails and notifies the party at step that the user has not opted in.

Alternatively the opt in process could be performed manually for example by using a form that enables the user to directly add entries to the persistent data store . Alternatively an analogous process could be used to opt out of receiving applications from a particular party.

The message receiver receives messages from the client application and communicates with the transport adapter to receive responses via any of the supported transport channels and protocols including GPRS IP network Bluetooth and SMS. For example the instruction set of the interactive system allows instructions to be received by one physical channel protocol e.g. SMS and a corresponding response to be delivered by another e.g. Bluetooth .

When a message is received the message receiver first logs the message for audit purposes. Then it checks the authenticity of the message by deciphering the message using the key manager and examining the unique message ID and the party ID to confirm that they match what was sent out.

Once the message authenticity is established the message receipt is logged for billing and auditing purposes. Finally the response message is processed as required by the party. This may include emailing the party logging it to a file for the party to collect and or making a request to a third party application to process the message. The actual method s used to process the response message can be specified when calling the API. If the API call does not specify a processing method then the response is processed using the default method configured for the corresponding developer determined when the developer establishes an account with the provider of the interactive system.

As described above each installed instance of the client application on a user device is identified by a unique client identifier also referred to herein as the client ID number that is associated with its phone number. When a client application is first installed on a mobile device a number of private encryption keys are generated and associated with the client ID.

As shown schematically in these encryption keys are then used by the client application to authenticate the payload data and to encrypt the response data. On each payload or response data packet or message the index of the appropriate encryption key is indicated in the header of the payload.

When sending a response message the client application uses the source address of the corresponding payload data by default. This effectively provides multiple client server communication channels in between the backend and the client application . For example shows an arrangement whereby two instances of the client application a first instance and a second instance are in communication with two instances of the application gateway via a wireless communications network . A message sent from the first backend system to the second client application includes an address of the first backend system in the header of the message so that when the client application sends the corresponding response it is addressed to the first backend system .

In contrast shows the same arrangement whereby a message also includes the address of the first backend system . However workflow instructions contained in the payload data can alter this default behaviour by redirecting the response to another backend server instead. This mechanism is activated by a DIVERT command in the payload data described further in the Appendix. Specifically in this message the payload includes a divert instruction with the address of the second backend system . Consequently after the second client application executes this instruction the response is addressed to the second backend system rather than the first backend system that originated the message containing the instructions. Because the second backend system does not have direct access to the client ID and message ID pair or the encryption keys for the client application the second backend system calls an API of the first backend system to check the integrity and authenticity of the response data. If the payload was encrypted then the first backend system decrypts the payload and sends it back to the second backend system over a secured communications channel using SSL for example . In an alternative embodiment the encryption keys are stored in a centralised component of the interactive system and all encryption and decryptions are performed in this manner.

The payload exchanged between the client application and the backend system is binary data a sequence of bytes. The communication channel for this payload can include SMS or Cell Broadcast Service CBS messages IP TCP data packets over GPRS 3G or other type of data networks and or Bluetooth data packets.

As shown in each data payload is prefixed with a header which indicates whether the payload is encrypted with an encryption key. The header data contains the index of the encryption key stored in the client application key storage thereby allowing the client application to decrypt the payload data.

As shown in plain payload data either unencrypted or after being decrypted contains a series of variable length data parts that instruct the dynamic workflow execution engine of the client application to construct the user UI workflow.

As shown in each data part includes type and length data fields followed by the actual instruction data . The type field is a single octet or byte that defines the type of workflow instruction that follows. The length indicates the number of octets or bytes of the instructor data .

As described above the interactive system is able to use one or more of a variety of different communication channels for sending and receiving messages and responses between the application gateway and the client application . For most of these different communication channels the communication itself is straightforward using the standard methods and libraries available and known to those skilled in the art. However the interactive system supports message and response delivery via the short message service or SMS. SMS is defined in the GSM 03.40 specification which defines an upper limit on the size of each SMS message. Specifically each SMS message is capable of containing up to 140 bytes of data equivalent to 160 ASCII characters when using 7 bit encoding as shown in . The interactive system sends SMS messages including 8 bit binary data and including a 7 byte user data header or UDH as described in the GSM 03.40 specification. The UDH consists of a length field or UDHL specifying the length of User Data Header in bytes as specified in GSM 03.40 and a 6 byte User Data Header field specifying the destination address of the payload data .

The UDH data specifying the destination of the binary message is interpreted by the mobile device to deliver the payload data to the client application . Excluding UDH data each SMS message is capable of carrying 133 bytes of payload data .

If the payload data exceeds this length the payload data is sent in two or more SMS messages each message containing up to 127 bytes of payload data as shown in . These SMS messages have a section of User Data Header indicating that they all belong to a concatenated message as described in the GMS 03.40 specification. A byte padding mechanism is used by the backend system and the client application when the payload is sent in multiple SMS messages. In this mechanism a padding or termination byte with value 0xFF is appended to the end of each payload data fragment when sent out from the backend system . The client application removes these padding bytes which appear as stuffed bytes in the concatenated payload data before passing the payload data to the workflow execution engine . The byte padding mechanism is used to eliminate problems found in a number of mobile phone models that strip out the last byte of every concatenated data fragment.

The instruction compiler creates the payload data from the compiler output to generate binary SMS messages. Construction of binary messages includes splitting the payload data into multiple SMS messages if the data length exceeds the single message capacity of 133 bytes. is a flow diagram showing the steps involved in this process.

As shown in when delivering a message or a response via SMS at step a check is performed to determine whether the size of the payload data exceeds 133 bytes. If not then at step a user data header is added and a single SMS message is composed and sent at step . Alternatively if the payload length does exceed the maximum size that can be sent in a single SMS message then at step a concatenated message identifier is generated and at step the number of concatenated messages that are required to accommodate the payload data is determined. Then a processing loop consisting of steps to composes the appropriate number of SMS messages as follows. At step the next payload portion is selected and copied to the payload of the current SMS message. At step a user data header is added including the identifier indicating that the SMS message is part of this SMS message set. At step a padding or termination byte is appended to the payload data as described above. Finally at step the resulting SMS message is sent. These steps to are repeated until the test at step determines that the last part of the payload data has been sent and the process then terminates.

Removal of stuffed bytes in the payload data is handled by the client application by searching for the specific stuffed byte octet value 0xFF in this embodiment and removing it from the payload data as shown in .

The client application presents to the user a number of user interface UI widgets as well as executing user invisible routines. This allows the client application to display information as well as capture device information and or user inputs.

However this list of UI widgets and their actual screen layouts can vary depending on the platform on each combination of device hardware and operating system software on which the client application is installed.

The client application implements a workflow execution process as shown in on each invocation to execute a workflow application. The workflow execution process begins after the client application is invoked at step and a test is performed at step to determine whether the invocation has resulted from the receipt of new payload data from the application gateway . If so then at step the new payload instructions are retrieved and then parsed at step . Otherwise if the invocation was not due to the receipt of new payload data then a test is performed at step to determine whether instructions are contained in the instant data storage . If so then the instructions are retrieved from the instant data storage at step and then parsed at step . Otherwise another test is performed at step to determine whether any sets of instructions have been saved as applications in the permanent data storage . If not then at step an information message is displayed to the user indicating that there are no applications instant or permanent in the queue. Once the user acknowledges this information message or when a corresponding timeout period has elapsed the client application is terminated. Alternatively if the permanent data storage contains one or more permanently stored sets of instructions i.e. applications then at step these are displayed to the user and the process pauses at step awaiting the user s selection of one of these or selection of a quit option. If at step it is determined that the user has selected the quit option then the client application terminates. Otherwise the user has selected a permanently stored set of instructions and these are retrieved at step and then parsed at step .

Following parsing of the workflow instructions at step the first or next workflow instruction is read at step and executed at step . If it is determined at step that the instruction is a UI instruction then the process waits to receive user input at step . Once the user s response has been received at step the UI widget displayed on the screen of the device is removed and any user input is stored at step . At step a test is performed to determine whether the instruction was the last in the workflow. If not then the process loops back to step . Otherwise once all of the instructions have been executed then a response message is composed at step and sent at step . If the workflow instructions executed are stored in the instant data storage then they are deleted at step . This terminates the workflow execution process .

The workflow execution engine of the client application interprets the payload data parts and generates the dynamic UI workflow accordingly.

The data parts from the payload data are indexed sequentially when read by the workflow execution engine and this is also the default order of workflow execution . As shown in the response data includes each response in the same order as the corresponding instructions were received and executed. When a workflow instruction is executed and response data is to be retrieved a parameter name is included in the instruction data and the user response or system response is associated with this parameter in the response. All the instruction responses are included in the response data when the workflow is completed as shown in .

The workflow execution engine provides a mechanism to allow branching and jumping in the sequence of instructions.

Because an instruction might be involved in different branches through out the workflow the workflow execution engine differentiates the instruction response data for different branches using branch domains. A branch domain specifies the address of a workflow instruction in the workflow tree. When setting the instruction response data the response parameter name is prefixed with the corresponding branch domain separated by a period character. For example an instruction to retrieve user input for a numeric valued parameter with the parameter name number could be called from two different branch menus one named First branch and the other named Second branch . In both of these cases the instruction returns the same parameter name number but with different values. The workflow execution engine associates a branch domain with the parameter name to differentiate the two response values. Thus in this example the first value is returned as First branch.number xxx and the second value as Second branch.number yyy where xxx and yyy represent the actual values entered by the user. shows a more complex example where menu selections are nested.

Additionally the branch domain is appended with a branch name on selection of a branch menu. For example in an application with two nested branch menus Service Request and Water Service as shown in when the user selects item Water in menu and then selects item Pipe Burst in the subsequent branch menu Water Service and then fills out with John Doe in the text input screen Your name the client application will internally send the response as Water.Pipe burst.name John Doe . When the BRANCH BACK command is executed the previous branch name is removed. The workflow execution engine uses a branch name stack to maintain the order of branch names as they are selected.

For usability reasons when working with a multiple branch menu it is important for the user to know whether or not a branch has already been visited by the user. To this end the workflow execution engine indicates visited branch menu items by displaying an image adjacent to those branches to indicate that they have already been visited by the user. For example as shown in .

When the user has visited user input screen to enter data an image icon is displayed adjacent to the first branch menu item is marked with distinct. This allows user to visually distinguish those parts of the workflow that have been visited from those parts that have not been visited. Alternatively the visited branches could be displayed in a different colour as used by web browsers to indicate that a hyperlink has been visited.

As shown in all of the user interface screens include a Back navigation button to allow the user to return to the previous screen within the workflow. The position of this back button can change depending on the specific mobile device platform executing the client application . As shown in the workflow execution engine maintains an ordered list or stack of instructions that cause a change in the screen or display and selection of the Back button causes the execution to return to the previous instruction.

As described above a developer can send a workflow description to the instruction compiler of the application gateway by submitting programming instructions written in the programming language supported by the instruction compiler using a hypertext transport protocol HTTP interface of the instruction compiler . For example is a screenshot of an HTML webpage generated by the application gateway . The webpage includes a scrollable text box into which the developer can directly enter commands in the scripting language and a compile button which when pressed submits the text in the scrollable text box to the instruction compiler for compilation.

The scripting language of the interactive systems is a high level language for describing the workflow of an interactive application. It is similar in vein to BASIC and can be learnt quickly by a programmer who has a basic knowledge in programming.

Alternatively a workflow description can be sent to the instruction compiler by invoking API calls to the application gateway API . For example shows a source code listing of a J2ME function SendWorkflowRequest that is used to generate and send workflow instructions to the mobile telephone . In this example the workflow instructions are to display booking details to the user and then retrieve the user s response indicating whether the user accepts or rejects the booking together with the user s name and telephone number. The workflow API is first initialised by creating at a new J2ME Command object named WorkflowCommand. A workflow header as described below is then added at . Workflow instructions are then added in the order of desired execution by calling APIs that are provided as methods of the WorkflowCommand object. Each type of workflow instruction is added by calling a corresponding API function with a set of parameters. For example the object method AddInfoMessage is used at to add an instruction that displays a screen of information to the user. The first argument to this method provides a title for the screen and the second argument provides the actual text information that is displayed. Similarly the method AddSingleMenu adds at an instruction that displays a single level menu i.e. radio buttons to the user allowing the user to select one item from a list of items provided as a parameter to the method. In this example the two items are displayed as Accept and Reject and the user s response indicates whether the user accepts or rejects the booking.

The method AddUserInputCmd at and displays a text string to the user together with a textbox prompting the user to enter an appropriate input value. The first parameter to this function finds the name of the parameter that will be associated with the returned input value. The second argument provides a string that is displayed to the user and a third argument allows the developer to restrict the type of input for example to a phone number email address and so on.

Finally the AddRedirectHeader method at defines a return address or phone number to which the response will be redirected as described above. The communication channel to be used e.g. whether by SMS IP network Bluetooth etc is also specified in the header.

Once the workflow instructions are added the workflow API is called again at to compile the instructions and build the payload data to be sent to the client application. The workflow API is called as many times as needed at to send multiple messages if required.

Commands are processed sequentially line by line. Three instructions are provided to create tree structures of the workflow BRANCH TO BRANCH BACK and GOTO. BRANCH TO and BRANCH BACK are used in combination to create a subroutine for the compiled program. GOTO is a jump instruction that allows program execution to jump to a specified line in the script. Comment and blank lines are ignored by the instruction compiler .

There is no block comment in the language. Comment lines are lines that start with two forward slash characters followed by a space character .

A label is a way to mark a line number so that it can be referred to in GOTO and BRANCH TO s ITEM commands. A label line starts with hash character followed by a space character. The label name is the next word from the character.

As described above a Back navigation button is attached to all displayed screens by default. This button allows backward navigation of the workflow executed on the user device . On most mobile phone platforms this Back button is mapped to the right action key. However this can change depending on the type of phone.

A combination of the BRANCH TO command labels and the BRANCH BACK command allows the workflow to support a tree like execution structure as shown in the source code listing of and the resulting display screens of . A detailed description is provided below. When a user is navigating thought workflow screens the state of each screen item selection and user inputs is not remembered.

The following is a source code listing that is used to generate an interactive application for execution on a user device such as the mobile telephone . The source code defines a workflow that allows the user of the mobile telephone to generate a service request for water electricity and or gas services. The listing is arranged in four groups of commands or paragraphs under respective labels. The first paragraph labeled START results in display of a main screen as shown in . The BRANCH TO command has two parameters. The first serv defines a branch name for this branch and the second parameter Service Request defines the title that is displayed at the top of the main screen . The subsequent three commands define items that can be selected by the user to invoke corresponding workflow branches. For example the first ITEM command has two parameters. The first parameter Water defines the text that is displayed on the main screen and that can be selected to invoke the corresponding workflow branch. The second parameter in this case WATER is a label of the corresponding workflow branch in this case referring to the second group or paragraph of commands grouped under that label. Thus if the user navigates the main screen to select the first item the workflow jumps to the SELECT ITEMS causing display of a water service selection screen . In this case the three items are simply menu selections rather than workflow branches and thus selection of any one of these items causes the appropriate parameter in this case named water to be assigned a value defined with the corresponding item. For example if the user selects the second item Leaking then the parameter water is assigned the value Leaking . Once this item has been selected the workflow proceeds to the following command which in this case is the BRANCH BACK command which returns control to the main screen .

In this manner the user can select the Electricity item to branch to the ELECTRICITY workflow resulting in display of a Electricity service screen . Similarly the user can select the Gas request item to cause a Gas service screen to be displayed. Once the user is satisfied with the service requests thus defined selection of the Next button or the OK button causes execution to continue to execute in this example the command GOTO CONTACTS which causes the workflow to jump to the command following the CONTACTS label being in this case an INPUT command displaying a name input screen and subsequently a Contact number screen . Once the OK button on the Contact numbers screen has been selected a MESSAGE command causes display of a Service Info screen providing informational feedback to the user in this case confirming that the service request will or has been sent to an appropriate party for processing the user s request.

The HEADER command is used to include a specified piece of text at the beginning of the response message when the workflow has been executed. This command is invisible to the user of the user device. This command is used as a context identifier for server client conversation.

There can be multiple header commands in the script. When using the HEADER command in conjunction with the BRANCH TO command different response message prefixes can be set based on the user s selection.

 is attached to the beginning of the response message. If there are multiple headers to be included in the response message the response headers are prepended based on their execution order in the workflow.

The DIVERT command is used to redirect a response message to a telephone number or address different from that of the source of the original instructions. Normally the response message is sent back to the source address of the payload but the response message can be sent back to another number instead by including a DIVERT command in the workflow. This command is invisible to the user. There can be multiple DIVERT commands in the script but the last one that is executed in the workflow takes effect. When combining this command with the BRANCH TO Command the workflow can send a response message to a source number selected by the user.

This command displays a GUI screen with a text input box to the user to retrieve user inputs as shown in . A parameter name is provided in the command to set the name of the user input data when included in the response message. A default input value can be provided as an input parameter. If desired the user input data can be restricted to a certain types such as numeric decimal or a phone number. However the implementation of user input restriction depends on the capability of the user device executing the client application .

User input data is included in a response message associated with a parameter name specified in the corresponding instruction. If the INPUT command is executed in a branch routine see BRANCH TO command then any domain path applicable will be prefixed to the parameter name.

This command results in the display of an interactive screen having a slider or gauss control to prompt the user to provide corresponding response data as shown in . The user is able to slide the slider control from a minimum value to a maximum value specified on the command line. The resulting data is included in the response message associated with the parameter name given.

If this command is executed in a branch routine see BRANCH TO command then any domain path applicable will be prefixed to the parameter name.

This command allows the workflow execution engine to jump to a specific workflow instruction rather than proceed to the next instruction in sequence. A parameter of this command is the label of the instruction for the workflow execution to be directed to. There is no user screen or response data associated with this instruction.

As shown in these commands display a screen with a list of items to select from. The SELECT command allows single item selection and the SELECT MULTI command allows multiple item selection screen. The user selection is included in the response message identified by the parameter name. In case of multiple selection list the selected values are separated by a delimiter character in the response value data.

Far multiple select command each of the items in the select list is displayed adjacent to an icon that indicates whether or not the item has been selected by the user. On most mobile devices a Mark button is displayed to allow user to mark the selection of the highlighted item. A Next button is also attached to this screen to allow the user to navigate to the next workflow instruction. On some mobile device platforms the Next button is mapped directly to one of the mobile phone buttons.

This command provides users a list of items to select and on selection of an item execution of the workflow is branched to the specified command. The behavior of this screen is similar to the SELECT screen described above. Once the workflow execution starts executing from the new target instruction it follows the default sequential order. When the BRANCH BACK command is executed the workflow execution engine returns to the previous BRANCH TO command to execute. However the BRANCH TO command does not require a BRANCH BACK command to operate. The workflow can consequently branch to the last command without returning to the branch menu.

To progress to the next screen from a BRANCH TO command a Next button is provided. On some phones this button is mapped to one of the phone keys on the mobile device. On most phones however this button is mapped to a soft key named Next when the user select Options on the BRANCH TO screen similar to SELECT MULTI command .

There is no specific user value attached to this screen in the response message. The selected branch item is however appended to the branch domain path. This domain path is then appended to the parameter name of any input screens being executed in the branch target.

This command is invisible to the user it provides the capability to navigate back from branching. A workflow could have multiple branches wired up and the result is a tree like structure. BRANCH BACK command allows navigation upwards in this tree structure. Combination of label and BRANCH BACK command allows combining a group of workflow commands in to a routine which can be referred to multiple times during the workflow execution.

This command instructs the workflow execution to store the whole payload data to persistent storage. A title is set in the parameter of this command allows the client application to display the stored payload data to the user. This command does not result in any user data in the response message.

This command clears all the persistent workflow payload data previously saved by STORE PERMANENT command. Execution of this command does not result in any data in the response message.

This command makes a request to the mobile device operating system to retrieve an URL address. The results could be making a phone call or launching the internet browser on the phone to the specified URL address. Behavior of this command might varies across different device models due to device capabilities.

If making a mobile phone call is required the mobile device will ask user if a mobile phone call can be made. If launching of the Internet browser is required the application will ask for the user s permission to open the Internet connection to the specified URL.

The response message is constructed from the user system data. A number of default delimiter characters are used to separate the data parts as well as name value separator. This command when included in the payload data can change the delimiter characters of the response message as well as specifying whether or not the name part is included in the response message.

This configuration command instructs the workflow execution to exclude parameter names from the response message.

This command instructs the workflow execution to read a system property and return the result in the response. The parameter name that is associated with the response data is the system property if parameter name is omitted.

The value of the system property is included in the response message as name value pair. All the rules applied to the name value pairs are applied. These include changing of delimiter parameters and whether or not to include the name part in the response message.

Where is a string parameter indicating the index of the key to be set on the client application . is a string parameter containing the actual key to be updated.

Many modifications will be apparent to those skilled in the art without departing from the scope of the present invention as hereinbefore described with reference to the accompanying drawings.

It will be apparent from the description above that the interactive system and process described herein allow a developer to dynamically send on demand customisable workflow instructions to one or more user devices such as mobile telephones. The generation secure delivery execution and secure return of response data to the developer are all handled transparently by the interactive system thus hiding all the details of these aspects from the developer greatly simplifying the provision of interactive applications and quasi real time interactions with one or more users. The provision of workflow instructions via SMS is particularly advantageous as it can be assumed to be supported by all mobile telephones available today. Moreover since the SMS communications are all managed by the interactive system any premium SMS services that may be required can be established by the operator of the interactive system thus freeing the developer from needing to establish their own independent premium SMS services. This greatly simplifies the provision of new interactive applications and also allows the operator of the interactive system to provide these services at a lower cost by leveraging the substantial volume of SMS traffic resulting from the aggregation of SMS traffic or all developers using the interactive system.

It will be appreciated by persons skilled in the art that numerous variations and or modifications may be made to the invention as shown in the specific embodiments without departing from the spirit or scope of the invention as broadly described. The present embodiments are therefore to be considered in all respects as illustrative and not restrictive.

