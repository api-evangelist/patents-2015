---

title: Synchronizing device association data among computing devices
abstract: Device association data for peripheral devices, which is data used to connect to the peripheral devices, is maintained and synchronized across multiple computing devices associated with a user account on a service. When a new peripheral device is associated with a computing device, device association data for the new peripheral device is added to the computing device. The device association data for the new peripheral device is also sent to the service, which provides the device association to the other computing devices from which the user logs into his or her account, and those other computing devices in turn automatically associate themselves with the peripheral device. Device use data describing how a user desires to use the peripheral device on one computing device, as well as changes to the device association data on one computing device, can similarly be synchronized across the multiple computing devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09311109&OS=09311109&RS=09311109
owner: Microsoft Technology Licensing, LLC
number: 09311109
owner_city: Redmond
owner_country: US
publication_date: 20150323
---
This application is a continuation of U.S. patent application Ser. No. 13 931 690 filed Jun. 28 2013 titled Synchronizing Device Association Data Among Computing Devices the entire disclosure of which is hereby incorporated by reference herein in its entirety. U.S. patent application Ser. No. 13 931 690 claims priority under 35 U.S.C. 119 e to U.S. Provisional Application No. 61 828 671 filed May 29 2013 titled Roaming Device Association Data Among Computing Devices the entire disclosure of which is hereby incorporated by reference herein in its entirety.

As computing technology has advanced the number of different computing devices available to people and that people use throughout the day has increased. When using these devices people oftentimes desire to access the same peripheral devices such as printers scanners headsets and so forth. Being able to use the same peripheral devices with multiple computing devices is helpful to users as they are able to use the peripheral devices they are familiar with on different computing devices. However using the same peripheral devices on multiple different computing devices is not without its problems. One such problem is that such peripheral devices need to be installed by the user on each of the multiple different computing devices which can be a time consuming process and lead to a poor user experience.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In accordance with one or more aspects device association data for a peripheral device describes how to connect to the peripheral device. Device association data for each of one or more peripheral devices associated with a user account is received. A determination is made as to which of the one or more peripheral devices can be automatically associated with the computing device and those of the one or more peripheral devices that can be automatically associated with the computing device are automatically associated with the computing device.

Synchronizing device association data among computing devices is discussed herein. Device association data for one or more peripheral devices is maintained and synchronized among multiple different computing devices associated with a user account of a local or remote service. The device association data for a peripheral device is the data used to connect to the peripheral device such as a network address of the peripheral device security information used to communicate with the peripheral device and so forth. The device association data is maintained by the computing devices from which the user accesses his or her user account as well as by the service associated with his or her user account.

When a new peripheral device is installed on or otherwise associated with a computing device device association data for the new peripheral device is added to the computing device as well as to the service. When a user logs into his or her user account from a computing device device association data for peripheral devices that is not already stored on the computing device is copied from the service to the computing device and ones of those peripheral devices that can be automatically installed on or otherwise associated with the computing device are automatically installed on or otherwise associated with the computing device. Thus when device association data for a peripheral device is added to a computing device or the service the device association data is synchronized with the other computing devices from which the user logs into his or her account the device association data being copied to those other computing devices and the peripheral devices being automatically installed on or otherwise associated with such other computing devices.

Each computing device can be a variety of different types of devices and the computing devices and can be the same or different types of devices. For example each computing device can be a desktop computer a server computer a laptop or netbook computer a tablet or notepad computer a mobile station an entertainment appliance a set top box communicatively coupled to a display device a television or other display device a cellular or other wireless phone a game console an automotive computer a wearable computer and so forth. Thus each computing device may range from a full resource device with substantial memory and processor resources e.g. personal computers game consoles to a low resource device with limited memory and or processing resources e.g. traditional set top boxes hand held game consoles .

Similar to the discussion of computing devices and the service can be implemented using one or more of a variety of different types of devices ranging from full resource devices with substantial memory and processor resources to low resource devices with limited memory and or processing resources. The service can be remote from the computing devices e.g. accessed via the Internet or local to the computing devices e.g. accessed via a LAN . Thus the service can be hosted by one or more devices local to the computing devices e.g. on premise such as in the same building or office or hosted by one or more devices remote from the computing devices e.g. off premise such as in another building city or country .

A user of the computing device has a user account associated with the service . The user can log into his or her account from the computing device in any of a variety of different manners such as by way of a user name and password digital certificate and so forth. While logged into his or her account the computing device synchronizes device association data with the service as discussed in more detail below.

A user of the computing device can connect to one or more peripheral devices also referred to as associating the computing device with the one or more peripheral devices . Associating the computing device with a peripheral device can include installing the peripheral device on the computing device . Installing a peripheral device includes installing resources e.g. drivers and setting appropriate properties for the computing device and or peripheral device to establish a communication connection between the computing device and the peripheral device e.g. pairing the peripheral device with the computing device . Thus installing a peripheral device includes making the peripheral device available for use by the computing device .

Associating the computing device with a peripheral device can also include adding to the computing device information indicating how to access the peripheral device e.g. establish a communication connection between the computing device and the peripheral device which device functions the peripheral device has how to use or access the device functions combinations thereof and so forth. Thus associating the computing device with a peripheral device can include making a peripheral device available for use by the computing device without installing the peripheral device on the computing device .

Peripheral devices refer to devices that can connect to a computing device providing functionality not provided by the computing device enhancing functionality provided by the computing device replacing functionality provided by the computing device and so forth. For example peripheral devices can be output devices e.g. printers speakers etc. input devices e.g. scanners microphones keyboards etc. data storage devices other computing devices e.g. smart phones print servers etc. and so forth. Peripheral devices can be local devices e.g. communicating with the computing device via a wired or wireless connection or remote devices e.g. communicating with the computing device via a network . Peripheral devices can also be other computing devices such as a smart phone.

In one or more embodiments peripheral devices are devices implemented in housings separate from the computing devices . The peripheral devices are physically separate from and external to the computing devices but can still communicate with the computing devices and optionally be physically connected to the computing devices . The peripheral devices are hardware devices and can include software and or firmware. For example a peripheral device e.g. a shared printer can be a logical unit including both a print server implemented in software and a physical printer.

The device association data is various data that can be used as part of the process of associating a computing device with a peripheral device. The device association data is thus also referred to as corresponding to a peripheral device. The device association data for a peripheral device is the data used to connect to a peripheral device such as a network or media access control MAC address a network address for a shared printer on a print server security or authentication data such as a certificate or personal identification number PIN and so forth. The device association data may also include additional data regarding the peripheral device and or the device association data such as a name or identifier of the peripheral device a type of the peripheral device an identifier of a driver associated with the peripheral device whether the peripheral device is already installed on the computing device and so forth. The device association data for a peripheral device thus describes how to connect to the peripheral device. The device association data is maintained by the computing device so that the computing device can subsequently access the peripheral device e.g. after being power down and restarted without re installing the peripheral device.

A peripheral device may also have associated device use data also referred to as user preference data that describes how a user desires or prefers to use the peripheral device. The device use data for a peripheral device can specify for example particular settings or values for the peripheral device that the user prefers e.g. a particular volume level for a speaker a particular print setting e.g. duplex mode economy mode to conserve ink or toner etc. for a printer a particular scan resolution for a scanner and so forth . The device use data can be included as part of the device association data and thus synchronized as part of the device association data as discussed in more detail below. Alternatively the device use data can be separate from the device association data but synchronized analogous to and optionally together with the device association data.

The device use data can be synchronized for peripheral devices that are associated with a computing device due to being automatically installed manually installed or connected to by a computing device without being installed. Thus when a peripheral device is newly associated with a computing device the device use data from other computing devices can be received and used on the computing device and the user has his or her desired settings for the peripheral device automatically set on the computing device. Similarly changes to the device use data made on one computing device are synchronized with the other computing devices analogous to the device association data.

A peripheral device can be manually associated with the computing device such as by installing the peripheral device on the computing device manually independent of the service e.g. not obtaining the device association data from the service . To associate a peripheral device with the computing device manually the peripheral device is discovered or identified using any of a variety of mechanisms such as a directory service multicast discovery over a network Universal Plug and Play UPnP networking protocols coupling to the peripheral device locally e.g. using a Universal Serial Bus USB or wireless USB protocol web services on devices other public and or proprietary protocols and so forth. The device association data can be obtained in various manners based on the mechanism used to discover or identify the peripheral device such as obtaining the device association data from the service used to discover or identify the peripheral device from the peripheral device itself and so forth.

While logged into his or her account the computing device synchronizes device association data with the service . The computing device synchronizing device association data refers to the computing device obtaining device association data from the service and providing device association from the computing device to the service . The service can include a data synchronization module and a device association data store . The data synchronization module manages synchronization of device association data with the computing devices storing received device association data in the device association data store . The device association data store of the service thus includes device association data that is provided to the service as a result of peripheral devices being associated with various ones of computing devices and is synchronized across the computing devices .

Alternatively the service may simply include the device association data store and the computing devices can retrieve data from the device association data store and determine any changes to the device association data as discussed in more detail below without using a synchronization module . The service can support push models e.g. where the service provides data from the service to one or more computing devices and or pull models e.g. where the computing devices poll the service or otherwise access the service to request or retrieve the data from the service .

When the user is logged into his or her account from a computing device or device association data for newly associated peripheral devices on the computing device is communicated to the service and stored in the device association data store . Similarly indications of de associated e.g. deleted or uninstalled peripheral devices can be communicated to the service and the indicated device association data deleted from the device association data store . De associating a peripheral device refers to uninstalling the device e.g. deleting or otherwise removing drivers or other resources clearing or resetting properties for the computing device and or peripheral device etc. or otherwise clearing or resetting values used by the computing device to communicate with the peripheral device . In one or more embodiments in order to manage conflicts between computing devices which may have different data each computing device and the service maintain timestamps e.g. dates and or times of when the data was last modified by or from the perspective of the computing device or service in order to resolve conflicts and determine which data is the data to be used e.g. the most recent timestamp for when the data was last modified .

Device association data received from one computing device is stored in the device association data store and provided to the other computing device . The data can be provided to or otherwise obtained by the other computing device at different times and or in response to different events such as when the user logs into his or her user account from the other computing device at regular or irregular intervals e.g. pushed to the other computing device by the service retrieved by the other computing device and so forth .

Thus when a new peripheral device is associated with the computing device device association data for the new peripheral device is communicated to the service and stored in the device association data store . When the user subsequently logs into his or her account from the computing device the device association data for the new peripheral device is communicated from the service to the computing device and the new peripheral device is automatically associated with the computing device illustrated by the dashed connection . It should be noted that the new peripheral device is automatically associated with the computing device if the new peripheral device can be automatically associated with the computing device . Situations can arise in which the new peripheral device cannot be automatically associated with the computing device in which case the peripheral device is not automatically associated with the computing device as discussed in more detail below. Similarly if an additional peripheral device were to be associated with the computing device device association data for that additional peripheral device is provided to the computing device and the additional peripheral device is automatically associated with the computing device assuming the additional peripheral device can be automatically associated with the computing device .

The user input module receives user inputs from a user of the computing device . User inputs can be provided in a variety of different manners such as by pressing one or more keys of a keypad or keyboard of the device pressing one or more keys of a controller e.g. remote control device mouse track pad etc. of the device pressing a particular portion of a touchpad or touchscreen of the device making a particular gesture on a touchpad or touchscreen of the device and or making a particular gesture on a controller e.g. remote control device mouse track pad etc. of the device . User inputs can also be provided via other physical feedback input to the device such as tapping any portion of the device an action that can be recognized by a motion detection or other component of the device such as shaking the device rotating the device bending or flexing the device etc. and so forth. User inputs can also be provided in other manners such as via voice or other audible inputs to a microphone via motions of hands or other body parts observed by an image capture device and so forth.

The output module generates manages and or outputs content for display playback and or other presentation. This content can be created by the output module or obtained from other modules of the computing device . This content can be for example a display or playback portion of a user interface UI prompts for input and so forth. The content can be displayed or otherwise played back by components of the computing device e.g. speakers interactive display devices etc. . Alternatively the output module can generate one or more signals that are output to other devices or components e.g. speakers display devices etc. that are separate from the computing device .

The communication module manages communication with a service such as the service of as well as peripheral devices such as peripheral devices of . The management of communication refers to sending data obtained from other modules of the computing device to a target device and providing data received from other devices to the appropriate modules of the computing device .

Device association data store maintains copies of device association data for devices manually associated with the computing device as well as device association data for devices received from the service . The device association data for devices received from the service can be automatically associated with the computing device or alternatively can be received and maintained in the device association data store without being associated with the computing device as discussed in more detail below.

The device association data synchronization module manages the sending of device association data to the service . When a new peripheral device is manually associated with the computing device while a user is logged into his or her account on the service the device association data for the peripheral device is maintained in the device association data store and the device association data synchronization module sends a copy of the device association data to the service . If a new peripheral device is manually associated with the computing device while a user is not logged into his or her account on the service the device association data synchronization module can send a copy of the device association data for the new peripheral device to the service when the user subsequently logs into his or her account from the computing device . Alternatively the device association data synchronization module may not send a copy of the device association data for a new peripheral device to the service if the new peripheral device is manually associated with the computing device while a user is not logged into his or her account on the service .

The device association data synchronization module also manages the receiving of device association data from the service . When a user logs into his or her account on the service from the computing device the service sends a copy of device association data for any new peripheral devices for which the service has a copy but the computing device does not have a copy e.g. for peripheral devices that were manually associated with another computing device . The service can also send a copy of other information about the device association data received from the service such as timestamp information user information and so forth. The device association data synchronization module maintains a copy of the device association data received from the service in the device association data store . The device association data synchronization module also retains the information about the device association data received from the service such as timestamp information user information and so forth to resolve conflicts and perform other functions. The device association data synchronization module also automatically associates the computing device with the peripheral device corresponding to that device association data assuming the peripheral device can be automatically associated with the computing device as discussed in more detail below.

Similarly other changes to device association data can be sent to the service and or received from the service analogous to the sending of device association data for a new peripheral device. For example if device association data for a peripheral device is changed e.g. the print server name changes security or authentication data changes etc. an indication of the change can be sent to the service which sends the indication to other computing devices when the user logs into his or her account from those other computing devices. Thus the change in device association data is automatically synchronized to those other computing devices. By way of another example if a peripheral device is deleted e.g. uninstalled or de associated on one computing device an indication of the deletion can be sent to the service which sends the indication to other computing devices when the user logs into his or her account from those other computing devices. Thus the peripheral device is automatically de associated from e.g. uninstalled from those other computing devices. Alternatively indications of deleted peripheral devices may not be sent to the service and instead the user manually de associates the peripheral devices on the computing devices he or she desires. It should be noted that even if a peripheral device is de associated from a computing device the corresponding device association data can remain on the computing device or alternatively can be deleted .

Determinations of what device association data changes e.g. new device association data indications of deletions or other changes have been made and thus what device association data changes need to be synchronized to other computing devices can be performed in various manners. The service and or the computing device can be relied on to perform the determination. For example the computing device can determine what device association data changes have been made and send an indication of the device association data changes that have been made. By way of another example the computing device can send a record of substantially all device association data in device association data store e.g. a snapshot of current device association data for the computing device to the service and the service can compare the record of substantially all device association data to a record of device association data associated maintained by the service to determine what device association data changes have been made.

By way of yet another example the computing device can send a record of substantially all device association data in device association data store e.g. a snapshot of current device association data for the computing device to the service and the service can maintain a copy of this record. The record can then be sent by the service to other computing devices when the user logs into his or her user account from those other computing devices and those other computing devices can compare the record of substantially all device association data to their records of device association data to determine what device association data changes have been made. The record can alternatively be sent by the service to other computing devices at other times or in response to other events such as the service pushing the record to the other computing devices at regular or irregular intervals the other computing devices requesting the record e.g. polling the service at regular or irregular intervals and so forth.

In process device association data and or device association data changes are sent to a service act which receives the device association data and or device association data changes act and maintains a copy of the device association data and or device association data changes act . The service maintains a copy of the device association data as associated with a user account which is the user account that the user is logged into when the device association data is sent to the service in act . For device association data changes the service can replace the previous device association data the device association data being changed with the newly received device association data.

The device association data and or device association data changes are sent by the service to a computing device act . The device association data and or device association data changes can be sent to and received by act a computing device that is different than the computing device that sent the device association data and or device association data changes in act . The device association data and or device association data changes can be sent in act in response to a request from the computing device for the device association data and or device association data changes or alternatively the service may push or otherwise provide the device association data and or device association data changes to the computing device in act independent of any request for the device association data and or device association data changes being received by the service. The computing device maintains a copy of the device association data and or device association data changes act . The computing device also automatically associates with the computing device those peripheral devices identified by the device association data that can be automatically associated with the computing device and or updates device association data in accordance with the device association data changes act .

Additionally or alternatively a request to receive device association data and or device association data changes can be sent act to the service by the same computing device as previously sent the device association data and or device association data changes in act . In response to the request sent in act the service sends the device association data and or device association data changes associated with the user account to the computing device act . The computing device receives the device association data and or device association data changes act and maintains a copy of the device association data and or device association data changes act . The computing device also automatically associates with the computing device those peripheral devices identified by the device association data that can be automatically associated with the computing device and or updates device association data in accordance with the device association data changes act . Alternatively rather than a request being sent in act the service may push or otherwise provide the device association data and or device association data changes associated with the user account to the computing device in act independent of any request for the device association data and or device association data changes being received by the service.

Thus device association data and or device association data changes can be synchronized to other computing devices and peripheral devices automatically associated with those other computing devices. Additionally or alternatively the device association data can be returned from the service to the computing device that sent the device association data to the service. Thus a computing device can back up its device association data information to the service and subsequently receive the device association data and have the peripheral devices automatically re associated with the computing device e.g. if the computing device has a new hard drive if an operating system is being reinstalled on the computing device etc. .

It should be noted that the device association data is associated with a user account on the service and thus that the sending and receiving of device association data is performed while the user is logged into his or her user account. The sending and receiving for different computing devices in process can thus be performed at different times. For example the device association data can be sent to the service in act when the user is logged into his or her user account from one computing device and then subsequently sent from the service to another computing device in act when the user is later logged into his or her user account from that other computing device. It should also be noted that simultaneous processes can be performed from different computing devices. For example one computing device may be sending device association data to the service concurrently with another computing device receiving the device association data from the service one computing device may be sending device association data to the service concurrently with another computing device sending device association data to the service and so forth.

In the example process the device association data is shown as being received by the service from a computing device. Alternatively the device association data can be received from other sources. For example in one or more embodiments a peripheral device can itself provide the device association data for the peripheral device to the service. E.g. a peripheral device may be a smart phone that is able to send its own device association data to the service. Thus a peripheral device is able to provide its device association data to the service which synchronizes the device association data to computing devices from which the user logs into his or her account and the peripheral device is automatically associated with those computing devices without the user ever having manually associated the peripheral device with a computing device. Similarly a peripheral device such as a smart phone peripheral device may also receive device association data from the service which may contain user preference data on how the specific user desires or prefers to use the peripheral device and the peripheral device can use that preference data e.g. by setting the appropriate configuration values or other device settings in accordance with the user preference data .

In process the user account is logged into act from the computing device implementing process . Device association data for each of one or more peripheral devices associated with the user account is received act . The device association data received can take different forms such as being substantially all of the device association data received device association data for new peripheral devices installed by other computing devices and so forth. The device association data can be received at different times such as shortly after the user account is logged onto some amount of time after the user account is logged onto e.g. after a threshold amount of time has elapsed after a threshold amount of other data or higher priority data has been received from the service etc. based on other events e.g. a change to the device association data stored in the service and so forth.

A copy of the received device association data is maintained on the computing device act . Additionally which of the one or more peripheral devices corresponding to the received device association data that are not already associated with the computing device but can be associated with the computing device are determined act . The one or more peripheral devices determined in act as being able to be associated with the computing device but not currently associated with the computing device are automatically associated with the computing device act . By automatically associating the peripheral devices with the computing device the peripheral devices can be subsequently accessed by the computing device as if they were manually associated with the computing device e.g. manually installed on the computing device although the user need not manually associate the peripheral devices with computing device e.g. need not manually install the peripheral devices .

The determination of which peripheral devices are already associated with the computing device can be determined in a variety of different manners such as by comparing an identifier of the peripheral device included in the device association data with identifiers of peripheral devices already associated with the computing device by assuming that all device association data received from the server is for peripheral devices not already associated with the computing device and thus none of the peripheral devices corresponding to the received device association data are already associated with the computing device and so forth.

The determination of which peripheral devices can be automatically associated with the computing device can also be determined in different manners. In one or more embodiments various rules or other criteria are applied to identify peripheral devices that cannot be automatically associated with the computing device. Such rules can reside in various locations such as on the computing device stored as part of the device association data that computing devices receive from the service and so forth. A peripheral device can thus be automatically associated with the computing device unless one or more rules indicate the peripheral device is not to be automatically associated with the device.

It should also be noted that if a peripheral device is not to be automatically associated with a computing device the device association data for the peripheral device can still be used to facilitate discovery of the peripheral device and or association of the peripheral device when manually associating the peripheral device with the computing device. For example a peripheral device may have a security code or other information that is persisted in the device association data and the user need not enter or otherwise provide that information again if he or she chooses to connect to the peripheral device by manually installing it. By way of another example the existence of the peripheral device may be displayed on a peripheral device selection or other configuration screen such as in a different form e.g. a different color shadowed or lighter etc. to indicate that the peripheral device exists but is not associated with the computing device.

The rules to identify peripheral devices that cannot be automatically associated with the computing device can include a peripheral device driver availability rule. The peripheral device driver refers to software and or firmware and data that is used by a computing device to communicate with the peripheral device. In one or more embodiments a computing device receiving device association data corresponding to a peripheral device may not be able to install peripheral device drivers or may not be able to install the driver for that peripheral device. In such embodiments the determination is made that the peripheral device cannot be associated with the computing device.

Additionally some peripheral device drivers are downloaded from a source e.g. another device or service such as via a network from magnetic or optical disk form a flash drive or other solid state drive from another location on the computing device itself and so forth. These peripheral device drivers may be digitally signed as being verified may be obtained from a verified source or may be otherwise verifiable. In one or more embodiments the determination is made that a peripheral device driver cannot be installed on the computing device if the peripheral device driver is not verified e.g. is not digitally signed by an authority trusted by the computing device is not from a verified source etc. . However the user can optionally be prompted to authorize installation of the peripheral device using the obtained peripheral device driver. Various user inputs can be received to authorize installation of the peripheral device such as selection of a yes or install option. If the user input indicates that installation of the peripheral device is authorized then the peripheral device is associated with the computing device as if being automatically associated with the computing device the user need not take additional actions to associate the peripheral device with the computing device as if he or she were manually associating the peripheral device with the computing device .

Additionally some peripheral device drivers are designed using different models e.g. formats or protocols used by the drivers that may be identified by version numbers. A peripheral device may have drivers using different ones of these models. In one or more embodiments the determination is made that a peripheral device driver cannot be installed on the computing device if the peripheral device driver is not a particular model is not at least a particular version of the driver model and so forth. However the user can optionally be prompted to authorize installation of the peripheral device using the obtained peripheral device driver despite the obtained driver not being the particular model at least the particular version of the driver model and so forth. Various user inputs can be received to authorize installation of the peripheral device such as selection of a yes or install option. If the user input indicates that installation of the peripheral device is authorized then the peripheral device is associated with the computing device as if being automatically associated with the computing device the user need not take additional actions to associate the peripheral device with the computing device as if he or she were manually associating the peripheral device with the computing device .

The rules to identify peripheral devices that cannot be automatically associated with the computing device can include a specified device rule. Some peripheral devices can be associated with a computing device in a manner specific to the individual computing device and the device association data includes that specific manner. For example a peripheral device e.g. a Bluetooth device may be installed on a computing device and have device association data that includes the MAC address of the computing device on which the peripheral device is installed. In one or more embodiments a check is made as to whether the device association data includes data specifying a particular computing device. If the computing device that receives the device association data is the computing device specified by the device association data then the peripheral device can be automatically associated with the computing device. However if the computing device that receives the device association data is not the computing device specified by the device association data then the peripheral device cannot be automatically associated with the computing device. Thus such a peripheral device could be automatically re associated with the computing device from which the device association data was originally sent e.g. backing up the device association data but not automatically associated with other computing devices.

The rules to identify peripheral devices that cannot be automatically associated with the computing device can include a domain or network rule. Different peripheral devices can be located on particular networks or domains that are only accessible to particular computing devices e.g. computing devices with access to the network computing devices that are part of the same domain and so forth . In one or more embodiments a check is made as to whether the device association data indicates that the peripheral device is part of a domain or located on a network that the computing device that received the device association data does not currently have access to. Whether the peripheral device is part of a domain or located on a network that the computing device does not currently have access to can be determined in various manners such as by comparing the domain or network that the peripheral device is on as identified in the device association data to a record e.g. maintained by an operating system of the computing device that the computing device is currently on to determine if they are the same by attempting to access the peripheral device and checking whether the attempt is successful and so forth. If the peripheral device is part of a domain or located on a network that the computing device does not currently have access to then the determination is made that the peripheral device cannot be automatically associated with the computing device.

Although the determination is made that the peripheral device cannot be automatically associated with the computing device this determination is made due to the peripheral device currently being inaccessible. Thus the peripheral device can be referred to as being capable of being associated with the computing device but cannot be automatically associated with the computing device. The peripheral device or device association data is marked or a record is made of such peripheral device or device association data to indicate to the computing device that it may subsequently have access to the domain or network on which the peripheral device is located and thus is to be associated with the computing device. For example the computing device may be a laptop computer that the user is running at home when process is performed and thus does not have access to his or her work domain or network but may later be taken to work and join the domain or network on which the peripheral device is located. In such situations the peripheral device may be automatically associated with the device at a later time e.g. when the user takes his or her device to work and the computing device detects that it has joined the domain or network on which the peripheral device is located or the user may be prompted at a later time to indicate whether re checking the ability to automatically associate the peripheral device with the computing device is desired. The device association data synchronization module of may check at regular or irregular intervals or in response to particular events such as the computing device joining a particular domain whether the peripheral device is part of a domain or located on a network that the computing device does currently have access to.

The rules to identify peripheral devices that cannot be automatically associated with the computing device can include an association reason rule. In some situations peripheral devices can be associated with computing devices for particular reasons such as an administrator action or group policy setting. In one or more embodiments when a peripheral device is associated with a computing device in response to a command from an administrator or due to a group policy setting a record is made in the device association data corresponding to that the peripheral device was associated with a computing device because of that command. A check is made by the computing device receiving the device association data as to whether the device association data indicates that the peripheral device was associated with a computing device because of such a command from an administrator or due to a group policy setting. If the peripheral device was associated with a computing device because of such a command from an administrator or due to a group policy setting then the determination is made that the peripheral device cannot be automatically associated with the computing device receiving the device association data.

The rules to identify peripheral devices that cannot be automatically associated with the computing device can include an authentication rule. In some situations certain authentication information PINs and so forth are not included in the device association data. Rather user input is received at each computing device with which the peripheral device corresponding to such device association data is being associated. In one or more embodiments a check is made by the computing device receiving the device association data as to whether certain data such as credentials PINs etc. used for associating the peripheral device is missing from the corresponding device association data. If certain data used for associating the peripheral device with a computing device is not included in the corresponding device association data then the determination is made that the peripheral device cannot be automatically associated with the computing device.

However the user can optionally be prompted to provide the certain data that is missing from the device association data. Various user inputs can be received to provide certain data such as entering a PIN or authentication code on a keyboard providing a digital certificate associated with the user and so forth. In response to the user input providing the missing data the peripheral device is associated with the computing device as if being automatically associated with the computing device the user need not take additional actions to associate the peripheral device with the computing device as if he or she were manually installing the peripheral device .

In the discussion of the rules to identify peripheral devices that cannot be automatically associated with the computing device reference is made to prompting the user for input e.g. authorization to install a driver a PIN or credentials and so forth . This prompting can be performed at different times such as at the time the determination is made that the peripheral device cannot be automatically associated with the device in response to user selection of the peripheral device on a peripheral device management or configuration screen and so forth.

Additionally it should be noted that if a peripheral device is not automatically associated with a computing device an indication can be displayed or otherwise presented to give the user feedback as to why the peripheral device was not automatically associated with the computing device e.g. a peripheral device driver cannot be installed on the computing device the computing device does not have the proper MAC address and so forth . This prompting can be performed at different times such as at the time the determination is made that the peripheral device cannot be automatically associated with the device in response to user selection of the peripheral device on a peripheral device management or configuration screen and so forth.

It should also be noted that in the illustrated example of process a copy of the received device association data is maintained on the computing device regardless of whether the peripheral device corresponding to the device association data is automatically associated with the computing device in act . Alternatively a copy of the device association data corresponding to a peripheral device may only be maintained on the computing device under certain circumstances such as the peripheral device corresponding to the device association data being associated with the computing device the device association data being marked as being capable of being associated with the computing device but cannot be automatically associated with the computing device and so forth.

Device association framework manages device association data for particular peripheral device protocols e.g. printers Bluetooth devices Web service providers etc. the device association data being maintained in device association data store which can be a device association data store of . The device association framework provides an import method that is an interface allowing the device association framework to receive device association data from device synchronization handler and an export method that is an interface allowing the device association framework to send device association data to device synchronization handler . Device association framework can include one or more modules to manage device association data for different peripheral device protocols.

In one or more embodiments in order to populate the service with a set of device association data for a user account the generic synchronization framework invokes the device synchronization handler and asks the handler to enumerate the data to synchronize. The synchronization handler calls to the device association framework and requests that the framework export the collection of device association data that it has. The device association framework reads from device association data store to obtain its device association data and provides the read device association data back to the device synchronization handler . The device synchronization handler places the received device association data into a container of synchronized data and returns that container to the generic synchronization framework . The generic synchronization framework provides the collection of synchronized data to the service .

In one or more embodiments in order to provide changes made to the device association data on a computing device to the service the device synchronization handler registers for change events directly against the device association data . Alternatively the device synchronization handler can indicate to receive changes in other manners such as by invoking an application programming interface API method exposed by the device association framework . In response to a change in the data store the device synchronization handler is notified and the device synchronization handler enumerates the current set of device association data from the device association framework . This enumeration allows the device synchronization handler to obtain the details about what changed in the data store without needing to understand the details of the underlying data store . The device association framework reads from the device association data store to obtain its device association data and returns its device association data e.g. as device association data objects to the device synchronization handler which produces a container of synchronized settings including the device association data it receives and passes the container to the generic synchronization framework . The generic synchronization framework provides the collection of synchronized data to the service .

In one or more embodiments in order to record changes made to the device association data received from the service the service notifies the generic synchronization framework about the change to the device association data and provides a new collection of substantially all synchronized settings to the generic synchronization framework . The generic synchronization framework parses this collection and then calls the device synchronization handler to handle the device association data that was received from the service . The device synchronization handler enumerates the existing set of device association data so that it can determine the difference between the current local device association data and the device association data that was received from the service . The device synchronization handler calls the device association framework with the differences between the current local device association data and the device association data that was received from the service . The device association framework retrieves the corresponding device association data from the device association data store . The set of device associations retrieved from the data store is passed back up to the device synchronization handler . The device synchronization handler determines if the set of data that changed affects the set of device association data that it manages in other words if the device association data remained the same but other synchronized data was changed then there is no change to the local state that the device synchronization handler manages. If a peripheral device was added then the device synchronization handler calls the device association framework with an import command to add the device association data and the device association framework to add the device association data to the data store . If a peripheral device was removed then the device synchronization handler calls the device association framework with an unassociate or remove command and the device association framework removes the device association data from the data store . As a result of the device association data being added to or removed from the device association data store the computing device associates or de associates from the peripheral device.

The techniques discussed herein provide various usage scenarios. For example a user can install peripheral devices that he or she likes to use on one of his or her computing devices and have those peripheral devices automatically installed on all of his or her other computing devices. By way of another example a user can purchase a new smart phone and have the smart phone communicate its device association data to the service. His or her new smart phone is then automatically installed on all of his or her computing devices without the user having to manually install the smart phone on any of those devices.

Various other modifications to the techniques discussed herein can be made. In one or more embodiments device association data for peripheral devices installed on a computing device is automatically synchronized to various other computing devices from which the user logs into his or her account as discussed above. Alternatively the user can be prompted e.g. as part of the installation process whether he or she desires to have a particular peripheral device synchronized to his or her other computing devices and the device association data for the particular peripheral device is sent to the service and other computing devices only in response to a user input indicating that the particular peripheral device is to be synchronized.

Although particular functionality is discussed herein with reference to particular modules it should be noted that the functionality of individual modules discussed herein can be separated into multiple modules and or at least some functionality of multiple modules can be combined into a single module. Various actions performed by various modules are discussed herein. A particular module discussed herein as performing an action includes that particular module itself performing the action or alternatively that particular module invoking or otherwise accessing another component or module that performs the action or performs the action in conjunction with that particular module . Thus a particular module performing an action includes that particular module itself performing the action and or another module invoked or otherwise accessed by that particular module performing the action.

The example computing device as illustrated includes a processing system one or more computer readable media and one or more I O Interfaces that are communicatively coupled one to another. Although not shown the computing device may further include a system bus or other data and command transfer system that couples the various components one to another. A system bus can include any one or combination of different bus structures such as a memory bus or memory controller a peripheral bus a universal serial bus and or a processor or local bus that utilizes any of a variety of bus architectures. A variety of other examples are also contemplated such as control and data lines.

The processing system is representative of functionality to perform one or more operations using hardware. Accordingly the processing system is illustrated as including hardware elements that may be configured as processors functional blocks and so forth. This may include implementation in hardware as an application specific integrated circuit or other logic device formed using one or more semiconductors. The hardware elements are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example processors may be comprised of semiconductor s and or transistors e.g. electronic integrated circuits ICs . In such a context processor executable instructions may be electronically executable instructions.

The computer readable media is illustrated as including memory storage . The memory storage represents memory storage capacity associated with one or more computer readable media. The memory storage may include volatile media such as random access memory RAM and or nonvolatile media such as read only memory ROM Flash memory optical disks magnetic disks and so forth . The memory storage may include fixed media e.g. RAM ROM a fixed hard drive and so on as well as removable media e.g. Flash memory a removable hard drive an optical disc and so forth . The computer readable media may be configured in a variety of other ways as further described below.

Input output interface s are representative of functionality to allow a user to enter commands and information to computing device and also allow information to be presented to the user and or other components or devices using various input output devices. Examples of input devices include a keyboard a cursor control device e.g. a mouse a microphone e.g. for voice inputs a scanner touch functionality e.g. capacitive or other sensors that are configured to detect physical touch a camera e.g. which may employ visible or non visible wavelengths such as infrared frequencies to detect movement that does not involve touch as gestures and so forth. Examples of output devices include a display device e.g. a monitor or projector speakers a printer a network card tactile response device and so forth. Thus the computing device may be configured in a variety of ways as further described below to support user interaction.

Computing device also includes a data synchronization system . Data synchronization system provides various functionality for synchronizing device association data as discussed above. Data synchronization system can implement for example data synchronization module of or device association data synchronization module of .

Various techniques may be described herein in the general context of software hardware elements or program modules. Generally such modules include routines programs objects elements components data structures and so forth that perform particular tasks or implement particular abstract data types. The terms module functionality and component as used herein generally represent software firmware hardware or a combination thereof. The features of the techniques described herein are platform independent meaning that the techniques may be implemented on a variety of computing platforms having a variety of processors.

An implementation of the described modules and techniques may be stored on or transmitted across some form of computer readable media. The computer readable media may include a variety of media that may be accessed by the computing device . By way of example and not limitation computer readable media may include computer readable storage media and computer readable signal media. 

 Computer readable storage media refers to media and or devices that enable persistent storage of information and or storage that is tangible in contrast to mere signal transmission carrier waves or signals per se. Thus computer readable storage media refers to non signal bearing media. The computer readable storage media includes hardware such as volatile and non volatile removable and non removable media and or storage devices implemented in a method or technology suitable for storage of information such as computer readable instructions data structures program modules logic elements circuits or other data. Examples of computer readable storage media may include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage hard disks magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other storage device tangible media or article of manufacture suitable to store the desired information and which may be accessed by a computer.

 Computer readable signal media refers to a signal bearing medium that is configured to transmit instructions to the hardware of the computing device such as via a network. Signal media typically may embody computer readable instructions data structures program modules or other data in a modulated data signal such as carrier waves data signals or other transport mechanism. Signal media also include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

As previously described hardware elements and computer readable media are representative of instructions modules programmable device logic and or fixed device logic implemented in a hardware form that may be employed in some embodiments to implement at least some aspects of the techniques described herein. Hardware elements may include components of an integrated circuit or on chip system an application specific integrated circuit ASIC a field programmable gate array FPGA a complex programmable logic device CPLD and other implementations in silicon or other hardware devices. In this context a hardware element may operate as a processing device that performs program tasks defined by instructions modules and or logic embodied by the hardware element as well as a hardware device utilized to store instructions for execution e.g. the computer readable storage media described previously.

Combinations of the foregoing may also be employed to implement various techniques and modules described herein. Accordingly software hardware or program modules and other program modules may be implemented as one or more instructions and or logic embodied on some form of computer readable storage media and or by one or more hardware elements . The computing device may be configured to implement particular instructions and or functions corresponding to the software and or hardware modules. Accordingly implementation of modules as a module that is executable by the computing device as software may be achieved at least partially in hardware e.g. through use of computer readable storage media and or hardware elements of the processing system. The instructions and or functions may be executable operable by one or more articles of manufacture for example one or more computing devices and or processing systems to implement techniques modules and examples described herein.

As further illustrated in the example system enables ubiquitous environments for a seamless user experience when running applications on a personal computer PC a television and or set top box device and or a mobile device. Services and applications run substantially similar in all three environments for a common user experience when transitioning from one device to the next while utilizing an application playing a video game watching a video and so on.

In the example system multiple devices are interconnected through a central computing device. The central computing device may be local to the multiple devices or may be located remotely from the multiple devices. In one or more embodiments the central computing device may be a cloud of one or more server computers that are connected to the multiple devices through a network the Internet or other data communication link.

In one or more embodiments this interconnection architecture enables functionality to be delivered across multiple devices to provide a common and seamless experience to a user of the multiple devices. Each of the multiple devices may have different physical requirements and capabilities and the central computing device uses a platform to enable the delivery of an experience to the device that is both tailored to the device and yet common to all devices. In one or more embodiments a class of target devices is created and experiences are tailored to the generic class of devices. A class of devices may be defined by physical features types of usage or other common characteristics of the devices.

In various implementations the computing device may assume a variety of different configurations such as for computer mobile and television uses. Each of these configurations includes devices that may have generally different constructs and capabilities and thus the computing device may be configured according to one or more of the different device classes. For instance the computing device may be implemented as the computer class of a device that includes a personal computer desktop computer a multi screen computer laptop computer netbook and so on.

The computing device may also be implemented as the mobile class of device that includes mobile devices such as a mobile phone portable music player portable gaming device a tablet computer a multi screen computer and so on. The computing device may also be implemented as the television class of device that includes devices having or connected to generally larger screens in casual viewing environments. These devices include televisions set top boxes gaming consoles and so on.

The techniques described herein may be supported by these various configurations of the computing device and are not limited to the specific examples of the techniques described herein. This functionality may also be implemented all or in part through use of a distributed system such as over a cloud via a platform as described below.

The cloud includes and or is representative of a platform for resources . The platform abstracts underlying functionality of hardware e.g. servers and software resources of the cloud . The resources may include applications and or data that can be utilized while computer processing is executed on servers that are remote from the computing device . Resources can also include services provided over the Internet and or through a subscriber network such as a cellular or Wi Fi network.

The platform may abstract resources and functions to connect the computing device with other computing devices. The platform may also serve to abstract scaling of resources to provide a corresponding level of scale to encountered demand for the resources that are implemented via the platform . Accordingly in an interconnected device embodiment implementation of functionality described herein may be distributed throughout the system . For example the functionality may be implemented in part on the computing device as well as via the platform that abstracts the functionality of the cloud .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

