---

title: Systems and methods for dynamic cloud-based malware behavior analysis
abstract: A cloud-based method, a behavioral analysis system, and a cloud-based security system can include a plurality of nodes communicatively coupled to one or more users, wherein the plurality of nodes each perform inline monitoring for one of the one or more users for security comprising malware detection and preclusion; and a behavioral analysis system communicatively coupled to the plurality of nodes, wherein the behavioral analysis system performs offline analysis for any suspicious content from the one or more users which is flagged by the plurality of nodes; wherein the plurality of nodes each comprise a set of known malware signatures for the inline monitoring that is periodically updated by the behavioral analysis system based on the offline analysis for the suspicious content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09609015&OS=09609015&RS=09609015
owner: Zscaler, Inc.
number: 09609015
owner_city: San Jose
owner_country: US
publication_date: 20150710
---
This application is a continuation in part of the foregoing U.S. patent applications patents the contents of each are incorporated in full by reference herein.

The present disclosure relates generally to computer networking systems and methods. More particularly the present disclosure relates to systems and methods for dynamic cloud based malware behavior analysis.

Malware short for malicious software is software used to disrupt computer operation gather sensitive information and or gain access to private computer systems. It can appear in the form of code scripts active content and other software. Malware is a general term used to refer to a variety of forms of hostile or intrusive software. Malware includes for example computer viruses ransomware worms Trojan horses rootkits key loggers dialers spyware adware malicious Browser Helper Objects BHOs rogue security software and other malicious programs the majority of active malware threats are usually worms or Trojans rather than viruses. As is widely known there is a need for security measures to protect against malware and the like. Specifically there is a need for zero day zero hour protection against a rapidly morphing threat landscape. Security processing is moving to the Cloud including malware detection. For example cloud based malware protection is described in commonly assigned U.S. patent application Ser. No. 12 185 484 filed Aug. 4 2008 and entitled CLOUD BASED MALWARE DETECTION the contents of which are incorporated by reference herein. With cloud based malware protection there needs to be a way to quickly detect malware and pass this detection on to provide zero day zero hour protection.

In an exemplary embodiment a cloud based method includes receiving known malware signatures at one or more nodes in a cloud based system monitoring one or more users inline through the one or more nodes in the cloud based system for regular traffic processing comprising malware detection and preclusion determining unknown content from a user of the one or more users is suspicious of being malware sending the unknown content to a behavioral analysis system for an offline analysis and receiving updated known malware signatures based on the offline analysis.

In another exemplary embodiment a behavioral analysis system for detecting malware from a cloud based system includes a network interface a data store a processor communicatively coupled to the network interface and the data store memory storing instructions that when executed cause the processor to receive new content from the cloud based system via the network interface for an offline analysis thereof store the new content and track activity on the new content in the data store perform the offline analysis comprising a static analysis and a dynamic analysis determine whether the new content is malware based on the offline analysis and update the cloud based system regarding the offline analysis and whether the new content is malware.

In yet another exemplary embodiment a cloud based security system includes a plurality of nodes communicatively coupled to one or more users wherein the plurality of nodes each perform inline monitoring for one of the one or more users for security comprising malware detection and preclusion and a behavioral analysis system communicatively coupled to the plurality of nodes wherein the behavioral analysis system performs offline analysis for any suspicious content from the one or more users which is flagged by the plurality of nodes wherein the plurality of nodes each comprise a set of known malware signatures for the inline monitoring that is periodically updated by the behavioral analysis system based on the offline analysis for the suspicious content.

In various exemplary embodiments systems and methods for dynamic cloud based malware behavior analysis BA are described which dynamically detect malware providing zero day zero hour protection. In an exemplary embodiment the systems and methods leverage a distributed cloud based security system to sandbox unknown content which can also be referred to as BA content in the cloud to install the unknown content for observation and analysis and to leverage the results in the cloud for near immediate protection from newly detected malware.

Referring to in an exemplary embodiment a block diagram illustrates a distributed security system . The system may for example be implemented as an overlay network in a wide area network WAN such as the Internet a local area network LAN or the like. The system includes content processing nodes PN which can also be referred to as enforcement nodes EN that proactively detect and preclude the distribution of security threats e.g. malware spyware viruses email spam etc. and other undesirable content sent from or requested by an external system. The processing nodes can also log activity and enforce policies. Example external systems may include an enterprise a computer device and a mobile device or other network and computing systems communicatively coupled to the system . In an exemplary embodiment each of the processing nodes may include a decision system e.g. data inspection engines that operate on a content item e.g. a web page a file an email message or some other data or data communication that is sent from or requested by one of the external systems. In an exemplary embodiment all data destined for or received from the Internet is processed through one of the processing nodes . In another exemplary embodiment specific data specified by each external system e.g. only email only executable files etc. is process through one of the processing node .

Each of the processing nodes may generate a decision vector D d d . . . dn for a content item of one or more parts C c c . . . cm . Each decision vector may identify a threat classification e.g. clean spyware malware undesirable content innocuous spam email unknown etc. For example the output of each element of the decision vector D may be based on the output of one or more data inspection engines. In an exemplary embodiment the threat classification may be reduced to a subset of categories e.g. violating non violating neutral unknown. Based on the subset classification the processing node may allow distribution of the content item preclude distribution of the content item allow distribution of the content item after a cleaning process or perform threat detection on the content item. In an exemplary embodiment the actions taken by one of the processing nodes may be determinative on the threat classification of the content item and on a security policy of the external system to which the content item is being sent from or from which the content item is being requested by. A content item is violating if for any part C c c . . . cm of the content item at any of the processing nodes any one of the data inspection engines generates an output that results in a classification of violating. 

Each of the processing nodes may be implemented by one or more of computer and communication devices e.g. server computers gateways switches etc. such as the server described in . In an exemplary embodiment the processing nodes may serve as an access layer . The access layer may for example provide external system access to the security system . In an exemplary embodiment each of the processing nodes may include Internet gateways and one or more servers and the processing nodes may be distributed through a geographic region e.g. throughout a country region campus etc. According to a service agreement between a provider of the system and an owner of an external system the system may thus provide security protection to the external system at any location throughout the geographic region.

Data communications may be monitored by the system in a variety of ways depending on the size and data requirements of the external system. For example an enterprise may have multiple routers switches etc. that are used to communicate over the Internet and the routers switches etc. may be configured to establish communications through the nearest in traffic communication time for example processing node . A mobile device may be configured to communicated to a nearest processing node through any available wireless access device such as an access point or a cellular gateway. A single computer device such as a consumer s personal computer may have its browser and email program configured to access the nearest processing node which in turn serves as a proxy for the computer device . Alternatively an Internet provider may have all of its customer traffic processed through the processing nodes .

In an exemplary embodiment the processing nodes may communicate with one or more authority nodes AN . The authority nodes may store policy data for each external system and may distribute the policy data to each of the processing nodes . The policy may for example define security policies for a protected system e.g. security policies for the enterprise . Example policy data may define access privileges for users web sites and or content that is disallowed restricted domains etc. The authority nodes may distribute the policy data to the processing nodes . In an exemplary embodiment the authority nodes may also distribute threat data that includes the classifications of content items according to threat classifications e.g. a list of known viruses a list of known malware sites spam email domains a list of known phishing sites etc. The distribution of threat data between the processing nodes and the authority nodes may implemented by push and pull distribution schemes described in more detail below. In an exemplary embodiment each of the authority nodes may be implemented by one or more computer and communication devices e.g. server computers gateways switches etc. such as the server described in . In some exemplary embodiments the authority nodes may serve as an application layer . The application layer may for example manage and provide policy data threat data and data inspection engines and dictionaries for the processing nodes . In an exemplary embodiment the application layer can continually update the processing nodes with newly detected malware as described herein for zero day zero hour protection.

Other application layer functions may also be provided in a data logging layer such as a user interface UI front end . The user interface front end may provide a user interface through which users of the external systems may provide and define security policies e.g. whether email traffic is to be monitored whether certain web sites are to be precluded etc. Another application capability that may be provided through the user interface front end is security analysis and log reporting. The underlying data on which the security analysis and log reporting functions operate are stored in logging nodes LN which serve as a data logging layer . Each of the logging nodes may store data related to security operations and network traffic processed by the processing nodes for each external system. In an exemplary embodiment the logging node data may be anonymized so that data identifying an enterprise is removed or obfuscated. For example identifying data may be removed to provide an overall system summary of security processing for all enterprises and users without revealing the identity of any one account. Alternatively identifying data may be obfuscated e.g. provide a random account number each time it is accessed so that an overall system summary of security processing for all enterprises and users may be broken out by accounts without revealing the identity of any one account. In another exemplary embodiment the identifying data and or logging node data may be further encrypted e.g. so that only the enterprise or user if a single user account may have access to the logging node data for its account. Other processes of anonymizing obfuscating or securing logging node data may also be used.

In an exemplary embodiment an access agent may be included in the external systems. For example the access agent is deployed in the enterprise . The access agent may for example facilitate security processing by providing a hash index of files on a client device to one of the processing nodes or may facilitate authentication functions with one of the processing nodes e.g. by assigning tokens for passwords and sending only the tokens to a processing node so that transmission of passwords beyond the network edge of the enterprise is minimized. Other functions and processes may also be facilitated by the access agent . In an exemplary embodiment the processing node may act as a forward proxy that receives user requests to external servers addressed directly to the processing node . In another exemplary embodiment the processing node may access user requests that are passed through the processing node in a transparent mode. A protected system e.g. enterprise may for example choose one or both of these modes. For example a browser may be configured either manually or through the access agent to access the processing node in a forward proxy mode. In the forward proxy mode all accesses are addressed to the processing node .

In an exemplary embodiment an enterprise gateway may be configured so that user requests are routed through the processing node by establishing a communication tunnel between enterprise gateway and the processing node . For establishing the tunnel existing protocols such as generic routing encapsulation GRE layer two tunneling protocol L2TP or other Internet Protocol IP security protocols may be used. In another exemplary embodiment the processing nodes may be deployed at Internet service provider ISP nodes. The ISP nodes may redirect subject traffic to the processing nodes in a transparent proxy mode. Protected systems such as the enterprise may use a multiprotocol label switching MPLS class of service for indicating the subject traffic that is to be redirected. For example at the within the enterprise the access agent may be configured to perform MPLS labeling. In another transparent proxy mode exemplary embodiment a protected system such as the enterprise may identify the processing node as a next hop router for communication with the external servers.

Generally the distributed security system may generally refer to an exemplary cloud based security system. Cloud computing systems and methods abstract away physical servers storage networking etc. and instead offer these as on demand and elastic resources. The National Institute of Standards and Technology NIST provides a concise and specific definition which states cloud computing is a model for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks servers storage applications and services that can be rapidly provisioned and released with minimal management effort or service provider interaction. Cloud computing differs from the classic client server model by providing applications from a server that are executed and managed by a client s web browser with no installed client version of an application required. Centralization gives cloud service providers complete control over the versions of the browser based applications provided to clients which removes the need for version upgrades or license management on individual client computing devices. The phrase software as a service SaaS is sometimes used to describe application programs offered through cloud computing. A common shorthand for a provided cloud computing service or even an aggregation of all existing cloud services is the cloud. The distributed security system is illustrated herein as one exemplary embodiment of a cloud based system and those of ordinary skill in the art will recognize the cloud based mobile device security and policy systems and methods contemplate operation on any cloud based system. In view of the foregoing the systems and methods described herein and for example the distributed security system can be viewed as security as a service allowing threat detection malware preclusion etc. without having native applications installed on each individual user device or user equipment.

Referring to in an exemplary embodiment a block diagram illustrates various components of the distributed security system in more detail. Although illustrates only one representative component processing node authority node and logging node those of ordinary skill in the art will appreciate there may be many of each of the component nodes and present in the system . A wide area network WAN such as the Internet or some other combination of wired and or wireless networks communicatively couples the processing node the authority node and the logging node therebetween. The external systems and likewise communicate over the WAN with each other or other data providers and publishers. Some or all of the data communication of each of the external systems and may be processed through the processing node .

In an exemplary embodiment a client access agent may be included on a client computer . The client access agent may for example facilitate security processing by providing a hash index of files on the user computer to a processing node for malware virus detection etc. Other security operations may also be facilitated by the access agent . In another exemplary embodiment a server access agent may facilitate authentication functions with the processing node e.g. by assigning tokens for passwords and sending only the tokens to the processing node so that transmission of passwords beyond the network edge of the enterprise is minimized. Other functions and processes may also be facilitated by the server access agent . The computer device and the mobile device may also store information warranting security measures such as personal bank records medical information and login information e.g. login information to the server of the enterprise or to some other secured data provider server. The computer device and the mobile device can also store information warranting security measures such as personal bank records medical information and login information e.g. login information to a server of the enterprise or to some other secured data provider server.

In an exemplary embodiment the processing nodes are external to network edges of the external systems and . Each of the processing nodes stores security policy data received from the authority node and monitors content items requested by or sent from the external systems and . In an exemplary embodiment each of the processing nodes may also store a detection process filter and or threat data to facilitate the decision of whether a content item should be processed for threat detection. A processing node manager may manage each content item in accordance with the security policy data and the detection process filter and or threat data if stored at the processing node so that security policies for a plurality of external systems in data communication with the processing node are implemented external to the network edges for each of the external systems and . For example depending on the classification resulting from the monitoring the content item may be allowed precluded or threat detected. In general content items that are already classified as clean or not posing a threat can be allowed while those classified as violating may be precluded. Those content items having an unknown status e.g. content items that have not been processed by the system may be threat detected to classify the content item according to threat classifications.

The processing node may include a state manager A. The state manager A may be used to maintain the authentication and the authorization states of users that submit requests to the processing node . Maintenance of the states through the state manager A may minimize the number of authentication and authorization transactions that are necessary to process a request. The processing node may also include an epoch processor B. The epoch processor B may be used to analyze authentication data that originated at the authority node . The epoch processor B may use an epoch ID to further validate the authenticity of authentication data. The processing node may further include a source processor C. The source processor C may be used to verify the source of authorization and authentication data. The source processor C may identify improperly obtained authorization and authentication data enhancing the security of the network. Collectively the state manager A the epoch processor B and the source processor C operate as data inspection engines.

Because the amount of data being processed by the processing nodes may be substantial the detection processing filter may be used as the first stage of an information lookup procedure. For example the detection processing filter may be used as a front end to a looking of the threat data . Content items may be mapped to index values of the detection processing filter by a hash function that operates on an information key derived from the information item. The information key is hashed to generate an index value i.e. a bit position . A value of zero in a bit position in the guard table can indicate for example absence of information while a one in that bit position can indicate presence of information. Alternatively a one could be used to represent absence and a zero to represent presence. Each content item may have an information key that is hashed. For example the processing node manager may identify the Uniform Resource Locator URL address of URL requests as the information key and hash the URL address or may identify the file name and the file size of an executable file information key and hash the file name and file size of the executable file. Hashing an information key to generate an index and checking a bit value at the index in the detection processing filter generally requires less processing time than actually searching threat data . The use of the detection processing filter may improve the failure query i.e. responding to a request for absent information performance of database queries and or any general information queries. Because data structures are generally optimized to access information that is present in the structures failure query performance has a greater effect on the time required to process information searches for very rarely occurring items e.g. the presence of file information in a virus scan log or a cache where many or most of the files transferred in a network have not been scanned or cached. Using the detection processing filter however the worst case additional cost is only on the order of one and thus its use for most failure queries saves on the order of m log m where m is the number of information records present in the threat data .

The detection processing filter thus improves performance of queries where the answer to a request for information is usually positive. Such instances may include for example whether a given file has been virus scanned whether content at a given URL has been scanned for inappropriate e.g. pornographic content whether a given fingerprint matches any of a set of stored documents and whether a checksum corresponds to any of a set of stored documents. Thus if the detection processing filter indicates that the content item has not been processed then a worst case null lookup operation into the threat data is avoided and a threat detection can be implemented immediately. The detection processing filter thus complements the threat data that capture positive information. In an exemplary embodiment the detection processing filter may be a Bloom filter implemented by a single hash function. The Bloom filter may be sparse table i.e. the tables include many zeros and few ones and the hash function is chosen to minimize or eliminate false negatives which are for example instances where an information key is hashed to a bit position and that bit position indicates that the requested information is absent when it is actually present.

In general the authority node includes a data store that stores master security policy data for each of the external systems and . An authority node manager may be used to manage the master security policy data e.g. receive input from users of each of the external systems defining different security policies and may distribute the master security policy data to each of the processing nodes . The processing nodes then store a local copy of the security policy data . The authority node may also store a master detection process filter . The detection processing filter may include data indicating whether content items have been processed by one or more of the data inspection engines in any of the processing nodes . The authority node manager may be used to manage the master detection processing filter e.g. receive updates from a processing nodes when the processing node has processed a content item and update the master detection processing filter . For example the master detection processing filter may be distributed to the processing nodes which then store a local copy of the detection processing filter .

In an exemplary embodiment the authority node may include an epoch manager . The epoch manager may be used to generate authentication data associated with an epoch ID. The epoch ID of the authentication data is a verifiable attribute of the authentication data that can be used to identify fraudulently created authentication data. In an exemplary embodiment the detection processing filter may be a guard table. The processing node may for example use the information in the local detection processing filter to quickly determine the presence and or absence of information e.g. whether a particular URL has been checked for malware whether a particular executable has been virus scanned etc. The authority node may also store master threat data . The master threat data may classify content items by threat classifications e.g. a list of known viruses a list of known malware sites spam email domains list of known or detected phishing sites etc. The authority node manager may be used to manage the master threat data e.g. receive updates from the processing nodes when one of the processing nodes has processed a content item and update the master threat data with any pertinent results. In some implementations the master threat data may be distributed to the processing nodes which then store a local copy of the threat data . In another exemplary embodiment the authority node may also monitor the health of each of the processing nodes e.g. the resource availability in each of the processing nodes detection of link failures etc. Based on the observed health of each of the processing nodes the authority node may redirect traffic among the processing nodes and or balance traffic among the processing nodes . Other remedial actions and processes may also be facilitated by the authority node .

The processing node and the authority node may be configured according to one or more push and pull processes to manage content items according to security policy data and or detection process filters and or and the threat data and or . In a threat data push implementation each of the processing nodes stores policy data and threat data . The processing node manager determines whether a content item requested by or transmitted from an external system is classified by the threat data . If the content item is determined to be classified by the threat data then the processing node manager may manage the content item according to the security classification of the content item and the security policy of the external system. If however the content item is determined to not be classified by the threat data then the processing node manager may cause one or more of the data inspection engines to perform the threat detection processes to classify the content item according to a threat classification. Once the content item is classified the processing node manager generates a threat data update that includes data indicating the threat classification for the content item from the threat detection process and transmits the threat data update to an authority node .

The authority node manager in response to receiving the threat data update updates the master threat data stored in the authority node data store according to the threat data update received from the processing node . In an exemplary embodiment the authority node manager may automatically transmit the updated threat data to the other processing nodes . Accordingly threat data for new threats as the new threats are encountered are automatically distributed to each processing node . Upon receiving the new threat data from the authority node each of processing node managers may store the updated threat data in the locally stored threat data .

In a threat data pull and push implementation each of the processing nodes stores policy data and threat data . The processing node manager determines whether a content item requested by or transmitted from an external system is classified by the threat data . If the content item is determined to be classified by the threat data then the processing node manager may manage the content item according to the security classification of the content item and the security policy of the external system. If however the content item is determined to not be classified by the threat data then the processing node manager may request responsive threat data for the content item from the authority node . Because processing a content item may consume valuable resource and time in some implementations the processing node may first check with the authority node for threat data before committing such processing resources.

The authority node manager may receive the responsive threat data request from the processing node and may determine if the responsive threat data is stored in the authority node data store. If responsive threat data is stored in the master threat data then the authority node manager provide a reply that includes the responsive threat data to the processing node so that the processing node manager may manage the content item in accordance with the security policy data and the classification of the content item. Conversely if the authority node manager determines that responsive threat data is not stored in the master threat data then the authority node manager may provide a reply that does not include the responsive threat data to the processing node . In response the processing node manager can cause one or more of the data inspection engines to perform the threat detection processes to classify the content item according to a threat classification. Once the content item is classified the processing node manager generates a threat data update that includes data indicating the threat classification for the content item from the threat detection process and transmits the threat data update to an authority node . The authority node manager can then update the master threat data . Thereafter any future requests related to responsive threat data for the content item from other processing nodes can be readily served with responsive threat data.

In a detection process filter and threat data push implementation each of the processing nodes stores a detection process filter policy data and threat data . The processing node manager accesses the detection process filter to determine whether the content item has been processed. If the processing node manager determines that the content item has been processed it may determine if the content item is classified by the threat data . Because the detection process filter has the potential for a false positive a lookup in the threat data may be implemented to ensure that a false positive has not occurred. The initial check of the detection process filter however may eliminate many null queries to the threat data which in turn conserves system resources and increases efficiency. If the content item is classified by the threat data then the processing node manager may manage the content item in accordance with the security policy data and the classification of the content item. Conversely if the processing node manager determines that the content item is not classified by the threat data or if the processing node manager initially determines through the detection process filter that the content item is not classified by the threat data then the processing node manager may cause one or more of the data inspection engines to perform the threat detection processes to classify the content item according to a threat classification. Once the content item is classified the processing node manager generates a threat data update that includes data indicating the threat classification for the content item from the threat detection process and transmits the threat data update to one of the authority nodes .

The authority node manager in turn may update the master threat data and the master detection process filter stored in the authority node data store according to the threat data update received from the processing node . In an exemplary embodiment the authority node manager may automatically transmit the updated threat data and detection processing filter to other processing nodes . Accordingly threat data and the detection processing filter for new threats as the new threats are encountered are automatically distributed to each processing node and each processing node may update its local copy of the detection processing filter and threat data .

In a detection process filter and threat data pull and push implementation each of the processing nodes stores a detection process filter policy data and threat data . The processing node manager accesses the detection process filter to determine whether the content item has been processed. If the processing node manager determines that the content item has been processed it may determine if the content item is classified by the threat data . Because the detection process filter has the potential for a false positive a lookup in the threat data can be implemented to ensure that a false positive has not occurred. The initial check of the detection process filter however may eliminate many null queries to the threat data which in turn conserves system resources and increases efficiency. If the processing node manager determines that the content item has not been processed it may request responsive threat data for the content item from the authority node . Because processing a content item may consume valuable resource and time in some implementations the processing node may first check with the authority node for threat data before committing such processing resources.

The authority node manager may receive the responsive threat data request from the processing node and may determine if the responsive threat data is stored in the authority node data store. If responsive threat data is stored in the master threat data then the authority node manager provides a reply that includes the responsive threat data to the processing node so that the processing node manager can manage the content item in accordance with the security policy data and the classification of the content item and further update the local detection processing filter . Conversely if the authority node manager determines that responsive threat data is not stored in the master threat data then the authority node manager may provide a reply that does not include the responsive threat data to the processing node . In response the processing node manager may cause one or more of the data inspection engines to perform the threat detection processes to classify the content item according to a threat classification. Once the content item is classified the processing node manager generates a threat data update that includes data indicating the threat classification for the content item from the threat detection process and transmits the threat data update to an authority node . The authority node manager may then update the master threat data . Thereafter any future requests for related to responsive threat data for the content item from other processing nodes can be readily served with responsive threat data.

The various push and pull data exchange processes provided above are exemplary processes for which the threat data and or detection process filters may be updated in the system of . Other update processes however are contemplated with the present invention. The data inspection engines processing node manager authority node manager user interface manager logging node manager and access agent may be realized by instructions that upon execution cause one or more processing devices to carry out the processes and functions described above. Such instructions can for example include interpreted instructions such as script instructions e.g. JavaScript or ECMAScript instructions or executable code or other instructions stored in a non transitory computer readable medium. Other processing architectures can also be used e.g. a combination of specially designed hardware and software for example.

Referring to in an exemplary embodiment a block diagram illustrates a server which may be used in the system in other systems or standalone. Any of the processing nodes the authority nodes and the logging nodes may be formed through one or more servers . Further the computer device the mobile device the servers etc. may include the server or a similar structure. The server may be a digital computer that in terms of hardware architecture generally includes a processor input output I O interfaces a network interface a data store and memory . It should be appreciated by those of ordinary skill in the art that depicts the server in an oversimplified manner and a practical embodiment may include additional components and suitably configured processing logic to support known or conventional operating features that are not described in detail herein. The components and are communicatively coupled via a local interface . The local interface may be for example but not limited to one or more buses or other wired or wireless connections as is known in the art. The local interface may have additional elements which are omitted for simplicity such as controllers buffers caches drivers repeaters and receivers among many others to enable communications. Further the local interface may include address control and or data connections to enable appropriate communications among the aforementioned components.

The processor is a hardware device for executing software instructions. The processor may be any custom made or commercially available processor a central processing unit CPU an auxiliary processor among several processors associated with the server a semiconductor based microprocessor in the form of a microchip or chip set or generally any device for executing software instructions. When the server is in operation the processor is configured to execute software stored within the memory to communicate data to and from the memory and to generally control operations of the server pursuant to the software instructions. The I O interfaces may be used to receive user input from and or for providing system output to one or more devices or components. User input may be provided via for example a keyboard touch pad and or a mouse. System output may be provided via a display device and a printer not shown . I O interfaces may include for example a serial port a parallel port a small computer system interface SCSI a serial ATA SATA a fibre channel Infiniband iSCSI a PCI Express interface PCI x an infrared IR interface a radio frequency RF interface and or a universal serial bus USB interface.

The network interface may be used to enable the server to communicate on a network such as the Internet the WAN the enterprise and the like etc. The network interface may include for example an Ethernet card or adapter e.g. 10BaseT Fast Ethernet Gigabit Ethernet 10 GbE or a wireless local area network WLAN card or adapter e.g. 802.11a b g n . The network interface may include address control and or data connections to enable appropriate communications on the network. A data store may be used to store data. The data store may include any of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM and the like nonvolatile memory elements e.g. ROM hard drive tape CDROM and the like and combinations thereof. Moreover the data store may incorporate electronic magnetic optical and or other types of storage media. In one example the data store may be located internal to the server such as for example an internal hard drive connected to the local interface in the server . Additionally in another embodiment the data store may be located external to the server such as for example an external hard drive connected to the I O interfaces e.g. SCSI or USB connection . In a further embodiment the data store may be connected to the server through a network such as for example a network attached file server.

The memory may include any of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM etc. nonvolatile memory elements e.g. ROM hard drive tape CDROM etc. and combinations thereof. Moreover the memory may incorporate electronic magnetic optical and or other types of storage media. Note that the memory may have a distributed architecture where various components are situated remotely from one another but can be accessed by the processor . The software in memory may include one or more software programs each of which includes an ordered listing of executable instructions for implementing logical functions. The software in the memory includes a suitable operating system O S and one or more programs . The operating system essentially controls the execution of other computer programs such as the one or more programs and provides scheduling input output control file and data management memory management and communication control and related services. The one or more programs may be configured to implement the various processes algorithms methods techniques etc. described herein.

Referring to in an exemplary embodiment a block diagram illustrates a mobile device which may be used in the system or the like. The mobile device can be a digital device that in terms of hardware architecture generally includes a processor input output I O interfaces a radio a data store and memory . It should be appreciated by those of ordinary skill in the art that depicts the mobile device in an oversimplified manner and a practical embodiment may include additional components and suitably configured processing logic to support known or conventional operating features that are not described in detail herein. The components and are communicatively coupled via a local interface . The local interface can be for example but not limited to one or more buses or other wired or wireless connections as is known in the art. The local interface can have additional elements which are omitted for simplicity such as controllers buffers caches drivers repeaters and receivers among many others to enable communications. Further the local interface may include address control and or data connections to enable appropriate communications among the aforementioned components.

The processor is a hardware device for executing software instructions. The processor can be any custom made or commercially available processor a central processing unit CPU an auxiliary processor among several processors associated with the mobile device a semiconductor based microprocessor in the form of a microchip or chip set or generally any device for executing software instructions. When the mobile device is in operation the processor is configured to execute software stored within the memory to communicate data to and from the memory and to generally control operations of the mobile device pursuant to the software instructions. In an exemplary embodiment the processor may include a mobile optimized processor such as optimized for power consumption and mobile applications. The I O interfaces can be used to receive user input from and or for providing system output. User input can be provided via for example a keypad a touch screen a scroll ball a scroll bar buttons bar code scanner and the like. System output can be provided via a display device such as a liquid crystal display LCD touch screen and the like. The I O interfaces can also include for example a serial port a parallel port a small computer system interface SCSI an infrared IR interface a radio frequency RF interface a universal serial bus USB interface and the like. The I O interfaces can include a graphical user interface GUI that enables a user to interact with the mobile device . Additionally the I O interfaces may further include an imaging device i.e. camera video camera etc.

The radio enables wireless communication to an external access device or network. Any number of suitable wireless data communication protocols techniques or methodologies can be supported by the radio including without limitation RF IrDA infrared Bluetooth ZigBee and other variants of the IEEE 802.15 protocol IEEE 802.11 any variation IEEE 802.16 WiMAX or any other variation Direct Sequence Spread Spectrum Frequency Hopping Spread Spectrum Long Term Evolution LTE cellular wireless cordless telecommunication protocols e.g. 3G 4G etc. wireless home network communication protocols paging network protocols magnetic induction satellite data communication protocols wireless hospital or health care facility network protocols such as those operating in the WMTS bands GPRS proprietary wireless data communication protocols such as variants of Wireless USB and any other protocols for wireless communication. The data store may be used to store data. The data store may include any of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM and the like nonvolatile memory elements e.g. ROM hard drive tape CDROM and the like and combinations thereof. Moreover the data store may incorporate electronic magnetic optical and or other types of storage media.

The memory may include any of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM etc. nonvolatile memory elements e.g. ROM hard drive etc. and combinations thereof. Moreover the memory may incorporate electronic magnetic optical and or other types of storage media. Note that the memory may have a distributed architecture where various components are situated remotely from one another but can be accessed by the processor . The software in memory can include one or more software programs each of which includes an ordered listing of executable instructions for implementing logical functions. In the example of the software in the memory includes a suitable operating system O S and programs . The operating system essentially controls the execution of other computer programs and provides scheduling input output control file and data management memory management and communication control and related services. The programs may include various applications add ons etc. configured to provide end user functionality with the mobile device . For example exemplary programs may include but not limited to a web browser social networking applications streaming media applications games mapping and location applications electronic mail applications financial applications and the like. In a typical example the end user typically uses one or more of the programs along with a network such as the system .

Referring to in an exemplary embodiment a cloud system is illustrated for the systems and methods for dynamic cloud based malware behavior analysis. The cloud system includes one or more cloud nodes CN communicatively coupled to the Internet . The cloud nodes may include the processing nodes the server enforcement nodes or the like. That is the cloud system may include the distributed security system or another implementation of a cloud based system. In the cloud system traffic from various locations and various devices located therein such as a regional office headquarters various employee s homes mobile laptop and mobile device is redirected to the cloud system through the cloud nodes . That is each of the locations is communicatively coupled to the Internet through the cloud nodes . The cloud system may be configured to perform various functions such as spam filtering uniform resource locator URL filtering antivirus protection bandwidth control data loss prevention zero day vulnerability protection web 2.0 features malware detection and blocking and the like. In an exemplary embodiment the cloud system and the distributed security system may be viewed as Security as a Service through the cloud.

In an exemplary embodiment the cloud system can be configured to provide mobile device security and policy systems and methods as well as fixed device security. The mobile device may be the mobile device and may include common devices such as smartphones tablets netbooks personal digital assistants MP3 players cell phones e book readers and the like. The cloud system is configured to provide security and policy enforcement for devices including the mobile devices in the cloud. Advantageously the cloud system avoids platform specific security apps on the mobile devices forwards web traffic through the cloud system enables network administrators to define policies in the cloud and enforces cleans traffic in the cloud prior to delivery to the mobile devices . Further through the cloud system network administrators may define user centric policies tied to users not devices with the policies being applied regardless of the device used by the user. The cloud system provides 24 7 security with no need for updates as the cloud system is always up to date with current threats and without requiring device signature updates. Also the cloud system enables multiple enforcement points centralized provisioning and logging automatic traffic routing to a nearest cloud node geographical distribution of the cloud nodes policy shadowing of users which is dynamically available at the cloud nodes etc.

It is expected that the cloud nodes the processing nodes and or some other cloud based device is continually monitoring user activity for security including detection and preclusion of malware on the user s device. Also the cloud system is monitoring a large number of users concurrently. In various exemplary embodiments a behavioral analysis BA system can be included in and or with the cloud system and or the distributed security system . The BA system in conjunction with the cloud system the distributed security system etc. is configured to act as a separate suspicious bucket for certain types of possible attacks for which there is not enough information to classify as either malicious or benign. The BA system provides mechanisms to offload the more intensive operations from an inline analysis in the cloud to an offline analysis thereby providing a much needed breathing space vis vis CPU and memory utilization on the processing nodes the cloud nodes etc. Additionally the BA system can leverage the number of users to quickly detect and preclude new malware.

Referring to in an exemplary embodiment a flowchart illustrates a cloud based method in the cloud. The behavioral analysis method can be implemented through the BA system with any cloud based system. The cloud based method includes receiving known malware signatures at one or more nodes in a cloud based system step . The cloud based method includes monitoring one or more users inline through the one or more nodes in the cloud based system for regular traffic processing comprising malware detection and preclusion step . Note the cloud based system can also monitor for other security aspects e.g. viruses spyware data leakage policy enforcement etc. . The cloud based method includes determining unknown content from a user of the one or more users is suspicious of being malware step . The cloud based method includes sending the unknown content to a behavioral analysis system for an offline analysis step . Finally the cloud based method includes receiving updated known malware signatures based on the offline analysis step .

The cloud based method can include performing one of blocking or allowing the unknown content to or from the user based on policy. The one or more users can include a plurality of users associated with a plurality of companies and the cloud based method can further include receiving a policy setting for each of the plurality of companies wherein the policy setting comprises whether or not to perform the offline analysis for the unknown content and performing the regular traffic processing for the unknown content for users associated with companies with the policy setting of not performing the offline analysis wherein the regular traffic processing comprises monitoring for malware based on the offline analysis of other users. The cloud based method can include determining unknown content is suspicious based on analysis in the one or more nodes based on smart filtering determining that the unknown content is an unknown active software file that performs some functionality on the user s device. The cloud based method can include storing the unknown content in the behavioral analysis system and maintaining an event log associated with the unknown content in the behavioral analysis system and performing the offline analysis on the unknown content comprising a static analysis and a dynamic analysis. The unknown content can be stored in an encrypted format and the cloud based method can include storing results data from various stages of the offline analysis of the unknown content wherein the results data comprises static analysis results JavaScript Object Notation JSON data from the dynamic analysis packet capture data screenshot images and files created deleted downloaded during the dynamic analysis.

The static analysis can evaluate various properties of the unknown content and the dynamic analysis runs the unknown content on a virtual machine operating an appropriate operating system for the unknown content. The cloud based method can include performing the offline analysis as a combination of a static analysis and a dynamic analysis by the behavioral analysis system. The static analysis can evaluate various properties of the unknown content using a set of tools based on a type of file of the unknown content wherein the set of tools comprise any of checking third party services to match the unknown content to known viruses detected by various anti virus engines using a Perl Compatible Regular Expressions PCRE engine to check the unknown content for known signatures identifying code signing certificates to form a whitelist of known benign content using Portable Executable PE Common Object File Format COFF specifications and evaluating destinations of any communications from the dynamic analysis. The dynamic analysis can run the unknown content on a virtual machine operating an appropriate operating system for the unknown content and evaluates any of JavaScript Object Notation JSON data generated temporary files generated system and registry files modified files added or deleted processor network memory and file system usages external communications security bypass data leakage and persistence.

Referring to in an exemplary embodiment a block diagram illustrates an exemplary implementation of a BA system for use with the distributed security system the cloud system or any other cloud based system. is presented as an exemplary implementation of the BA system and those of ordinary skill in the art will appreciate other implementations providing similar functionality are also contemplated. The BA system can be an exemplary implementation of the BA system for carrying out the behavioral analysis method . The BA system can include cloud components and Feed Central Cloud FCC components . The cloud components can include the processing nodes the cloud nodes etc. The cloud components are generally used to monitor users in the cloud to detect known malware to provide unknown files that could be malware to the FCC components and to receive updates to known malware from the FCC components . The FCC components are generally configured to receive unknown files and determine whether they are malicious malware or benign and provide this information to the cloud components . The FCC components can perform a static analysis and a dynamic analysis of the unknown files in an offline manner whereas the cloud components are configured to detect malware inline. As described herein the FCC components can also be referred to as BA infrastructure.

The cloud components can include a server or plurality of servers a data store and a user interface UI . The server can include the processing nodes the cloud nodes etc. and the server is generally the initiator and final consumer of results from the BA system i.e. the server inter alia detects and precludes malware as well as flagging unknown files for BA analysis by the BA system . The data store can be a storage mechanism for all transaction logs and reporting mechanism. The UI can provide the ability to configure BA policies as well as turning it on off at a company level. It is also the gateway to all reports and forensic analysis. The FCC components can include a server a BA controller a BAUI and a Virtual Machine VM server . The server provides a gateway to the BA infrastructure in the FCC components and acts a consolidated secure encrypted storage server for BA content. The BA controller provides sandboxing functionality for performing dynamic analysis of BA content. The BAUI provides a user interface to view the analysis results of BA content. Finally the VM server provides a VM infrastructure used by the BA controller for dynamic analysis of BA content. Note the cloud components and the FCC components as described herein can be a combination of hardware software and or firmware for performing the various functionality described herein. are flowcharts of exemplary operational methods performed by the server the server and the BA controller .

Variously the FCC components are configured to distribute known malware signatures to the cloud components e.g. the distributed cloud enforcement nodes. The cloud components monitor inline users such as using HTTP and non HTTP protocols to cover proxy and firewall DPI to detect and block preclude malware. In addition the cloud components perform intelligent collection of unknown malware from distributed cloud enforcement nodes. The enforcement nodes decide what is unknown malware smart filtering based on signatures and static dynamic analysis criteria that can be performed quickly inline and send it securely and efficiently to BA Analysis engine in the cloud i.e. the FCC components . The FCC components is a BA Analysis Engine which includes secure content storage with data destruct capabilities is a scalable and flexible platform for VM based execution sandboxes includes a smart scheduler to determine what needs to be analyzed and manage BA content from the cloud and includes threat reporting storage and UI infrastructure for malware result analysis and research. The FCC components can provide dynamic updates based on latest malware analysis thereby providing zero day zero hour protection.

The server can perform various aspects of inline traffic processing such as virus detection and prevention malware detection and prevention data leakage prevention policy enforcement etc. The focus here is on the malware detection and prevention but it is expected that the server also provides other security functions. As described herein malware includes code scripts active content and other software that is used to disrupt computer operation gather sensitive information and or gain access to private computer systems. That is malware is active software installed on a user s device for malicious purposes and can include executable files e.g. .EXE Dynamic Link Libraries DLL documents e.g. .DOCX .PDF etc. etc. The server in conjunction with the server can include a set of known malware that is detected and precluded. However as malware is constantly evolving there is a need to detect quickly zero day zero hour protection new malware files. This is the objective of the BA infrastructure to sandbox potential files for malware BA and to update the set of known malware based thereon.

The operational method starts and determines if a BA policy applies step . The BA policy determines whether or not processing for a particular user company set of users etc. utilizes the BA infrastructure. Note the BA policy does not mean whether or not the server scans for known malware rather the BA policy determines whether the server performs BA on unknown files that could possibly be malware to detect new malware and add to the list of known malware. If there is no BA policy step the operational method performs regular traffic processing step . The regular traffic processing can include the various techniques and processes described herein for security in the cloud and the operational method stops step . If there is a BA policy step the operational method checks if content is suspicious step . Content may be suspicious from a malware perspective if it is unknown active software that performs some functionality on the user s device. Determining the content is suspicious can be based on smart filtering that performs a quick analysis inline in the cloud. If the content is not suspicious step the operational method checks if the content is already classified by the BA or another system step and if so the operational method makes a log transaction for the content with a policy reason as BA step . If the content is not already classified step the operational method performs the regular traffic processing step .

If the content is suspicious step the operational method checks whether the policy is to block or not step . Note suspicious content may or may not be malware it is the purpose of the BA infrastructure e.g. the FCC components to determine this. However the operational method can allow or block the suspicious content while also sending the suspicious content to the BA infrastructure. If the policy is not to block step the operational method sends the content to the BA infrastructure e.g. the FCC components for performing the functionality in step . Next the operational method performs regular traffic processing step same as step the operational method logs the transaction as a policy reason BA allow step and the operational method ends step . If the policy is to block step the operational method blocks the content and shows the user a block page step . The block page notifies the user that the content was suspicious and blocked. The operational method sends the content to the BA infrastructure e.g. the FCC components for performing the functionality in step the operational method logs the transaction as a policy reason BA block step and the operational method ends step .

The UI provides the ability to configure policy at the company level or at some set or subset of users with features that are enabled disabled using a few checkboxes for example. The UI provides a high level view of the BA system for a company using specific BA reports and the UI provides the ability to view analysis details of any threat from transaction drilldowns. The data store is configured to store transaction logs from the server to provide counter infrastructure for all BA reports and to provide querying infrastructure for BA transactions. For example the data store can add a new BA record and handle it in live sync data paths perform query module handling for this new BA record also some new filters will be added for BA like MD5 perform BA counter handling and the like. For example the counter infrastructure can use the following dimensions 

The BA infrastructure generally uses two techniques to evaluate unknown content to detect malware Static Analysis and Dynamic Analysis and results of the two are scored to determine whether or not the unknown content is malware. Generally the Static Analysis looks at various properties of the unknown content whereas the Dynamic Analysis actually runs the unknown content. The SAE analyzes the unknown content for known signatures benign or malicious using a set of tools based on the type of the file. Some exemplary tools include 

The DASE schedules the Dynamic Analysis which is performed by the BA controller and the VM server . The Dynamic Analysis can be referred to as sandboxing where the unknown content is thrown into a sandbox i.e. the VM server and run to see what happens. The DASE is configured to schedule the unknown content within the limitations of the Sandboxing Infrastructure i.e. the BA controller and the VM server . The DASE can act as queuing manager and scheduler. After static analysis unknown content can be queued based on priority known viruses get lower priority availability and content type. For example if an unknown content is identified as a Windows executable DLL it needs to be sent to the BA Controller which uses a Windows XP guest Operating System OS if an unknown Content is identified an Android application package file APK it needs to be sent to the BA controller which uses an Android OS etc.

The Database Engine is used to maintain a view of data as stored in the SSE. Customer centric data which requires to be stored in an encrypted format may not be stored in the database. This is a temporary arrangement for quicker access of preformatted data for research purposes. The database tables can be designed in such a way so as to avoid row updates as much as possible during runtime. In case of any conflicts with the data in the SSE the SSE can be the authority and the view in database can be recreated at any point from the data in the SSE. The Scoring Engine is for analyzing the results using a configurable scoring sheet to arrive at a final score for the unknown content once all of the Behavioral Analysis is complete. For example the Scoring Sheet is a file serialized in JSON format that provides individual scores for various components in the analysis. The Reporting Engine provides a querying interface for the BAUI to display the required results of the Behavioral Analysis to the user. The results for the commands can be retrieved from one of the following sources Information available in memory cache score category etc. Information available in disk SSE packet captures screenshots etc. Information available in the database Protocol Information HTTP SMTP etc. and any combination thereof.

The server interfaces to the sever receiving BA content from the server and sending BA signatures to the server the BAUI sending BA results to the BAUI and receiving BA requests from the BAUI and the BA controller queuing a Dynamic Analysis by the BA controller and receiving Dynamic Analysis results from the BA controller . The operational method starts such as at startup of the server and waits for new BA content steps . The operational method stores new content in the SSE step and performs the Static Analysis SA step . The operational method stores the SA results in the SSE step and schedules the BA content for Dynamic Analysis DA with the BA controller step . The operational method waits for completion of the DA steps . The operational method receives results of the DA from the BA controller step .

Next the operational method can perform a static analysis for file system changes in the DA step . Here the operational method is looking to see what changes the BA content made when executed or opened in the DA. The operational method stores the DA results in the SSE step . The operational method calculates a final score for the BA content using all results SA and DA step . The final score can also be manually be modified if reviewed by operators of the BA system . The final score is stored in the SSE step the operational method stores the results view in the database step and the operational method ends step .

The operational method starts and waits for BA content steps . The operational method schedules received BA content for the Dynamic Analysis with a VM step . The operational method waits for completion of the DA steps . The operational method accumulates results of the DA e.g. packet capture PCAP screenshots files JSON etc. . The operational method sends the DA results to the server step and the operational method ends step .

The VM server provides a VM infrastructure for use by the BA Controller for Dynamic Analysis. The VM server can utilize conventional sandboxing functionality and can operate all Windows based systems Windows XP Windows 7 32 64 bit Windows 8 8.1 32 64 bit as well as Android iOS MacOS Linux etc. The BAUI is a web application deployed on a server in the FCC components . It can also be deployed on separate hardware. It primarily provides the following two functionality provides a user interface for the detailed analysis of a BA Content and provides a user interface for the Security Research team to manage the various threats.

Referring to in various exemplary embodiments screenshots are illustrated for an exemplary BA report from the BA system . These screenshots are presented to illustrate an exemplary operation of the BA system and some of the behavioral detailed determined thereby. are a screenshot of the exemplary BA report split into two Figures for size . The remaining are expanded views of the screenshot from . are screenshots of expanded views of Activity from the exemplary BA report. The Activity block shows a table with one row representing each event of a particular activity type. The columns and data format are unique to each activity type. Some columns may not be displayed in the compact view in order to fit the block width. Activity types are grouped into categories. A dropdown allows the user to select the category and activity type to display. This illustrates various activity from the DA including for example file activity section activity registry activity mutex activity process activity thread activity memory activity system activity timing activity Windows UI activity and process token activity.

It will be appreciated that some exemplary embodiments described herein may include one or more generic or specialized processors one or more processors such as microprocessors digital signal processors customized processors and field programmable gate arrays FPGAs and unique stored program instructions including both software and firmware that control the one or more processors to implement in conjunction with certain non processor circuits some most or all of the functions of the methods and or systems described herein. Alternatively some or all functions may be implemented by a state machine that has no stored program instructions or in one or more application specific integrated circuits ASICs in which each function or some combinations of certain of the functions are implemented as custom logic. Of course a combination of the aforementioned approaches may be used. Moreover some exemplary embodiments may be implemented as a non transitory computer readable storage medium having computer readable code stored thereon for programming a computer server appliance device etc. each of which may include a processor to perform methods as described and claimed herein. Examples of such computer readable storage mediums include but are not limited to a hard disk an optical storage device a magnetic storage device a ROM Read Only Memory a PROM Programmable Read Only Memory an EPROM Erasable Programmable Read Only Memory an EEPROM Electrically Erasable Programmable Read Only Memory Flash memory and the like. When stored in the non transitory computer readable medium software can include instructions executable by a processor that in response to such execution cause a processor or any other circuitry to perform a set of operations steps methods processes algorithms etc.

Although the present disclosure has been illustrated and described herein with reference to preferred embodiments and specific examples thereof it will be readily apparent to those of ordinary skill in the art that other embodiments and examples may perform similar functions and or achieve like results. All such equivalent embodiments and examples are within the spirit and scope of the present disclosure are contemplated thereby and are intended to be covered by the following claims.

