---

title: Secure payment card transactions
abstract: Identification cards at a processing server may be secured in certain embodiments by intercepting data associated with the identification card. The data may be prevented from being accessed by an application that is of a particular priority level. The data may be encrypted and provided to a server, which may provide replacement data that is formatted to be processed as a substitute for the data. This substitute data may then be provided to the application that was prevented from accessing the data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09495680&OS=09495680&RS=09495680
owner: Shift4 Corporation
number: 09495680
owner_city: Las Vegas
owner_country: US
publication_date: 20150611
---
The present application is a continuation of U.S. patent application Ser. No. 14 191 306 filed on Feb. 26 2014 and titled SECURE PAYMENT CARD TRANSACTIONS which is a continuation of U.S. patent application Ser. No. 13 612 651 filed on Sep. 12 2012 and titled SECURE PAYMENT CARD TRANSACTIONS which is a continuation of U.S. patent application Ser. No. 13 014 604 filed on Jan. 26 2011 and titled SECURE PAYMENT CARD TRANSACTIONS which is a continuation of U.S. patent application Ser. No. 11 750 181 now U.S. Pat. No. 7 891 563 filed on May 17 2007 and titled SECURE PAYMENT CARD TRANSACTIONS U.S. patent application Ser. No. 11 750 239 now U.S. Pat. No. 7 770 789 filed on May 17 2007 and titled SECURE PAYMENT CARD TRANSACTIONS and U.S. patent application Ser. No. 11 750 184 now U.S. Pat. No. 7 841 523 filed on May 17 2007 and titled SECURE PAYMENT CARD TRANSACTIONS. Each of the foregoing applications is incorporated in its entirety herein by reference.

The use of payment cards such as credit cards debit cards and gift cards has become ubiquitous in our current commercial transaction society. Virtually every merchant as well as other facilities where monetary transactions occur for the purchase of goods or services accept one or more types of payment cards for these transactions. Once a payment card is presented to a particular merchant at a point of sale to purchase goods or services the payment card is usually read using a card swipe reader. Alternatively payment data is entered manually through a pin pad or keyboard or through a combination of card swipe and manual entry.

The payment data is transmitted to an authorizing entity which may be a card processor card association issuing bank or other entity along with information relating to purchase price and identification information of the particular merchant. In some instances the information passes through one or more intermediaries before reaching the authorizing entity. The authorizing entity approves or disapproves the transaction. Once a decision is made at the authorizing entity a return message is sent to the merchant indicating the disposition of the transaction.

As payment card transactions become more ubiquitous so do thefts of payment data. Thefts can come from many sources including employees malicious software and hardware devices for intercepting payment data. Perpetrators obtain payment data including personal account numbers PANs personal identification numbers PINs expiration dates and the like for purposes of committing fraud. In some instances thieves use the payment data to obtain goods services and cash. In other instances perpetrators sell payment data to others who fraudulently use the cards. These thefts often occur at the point of sale.

Payment card transactions at a point of sale POS are secured in certain embodiments by intercepting with a POS security layer installed on a POS terminal payment data from the POS terminal transmitting the payment data from the POS security layer to a server security application installed on a POS server and providing false payment data from the POS security layer to a POS terminal application installed on the POS terminal. The false payment data in various embodiments is processed as if it were the payment data such that the POS terminal transmits an authorization request to the POS server using the false payment data. In addition the authorization request may be transmitted from the POS server to a payment gateway.

Neither this summary nor the following detailed description purports to define the inventions. The inventions are defined by the claims.

Specific embodiments of the inventions will now be described with reference to the drawings. These embodiments are intended to illustrate and not limit the present inventions. The scope of the inventions is defined by the claims.

The term payment card encompasses at least credit cards debit cards bank cards smart cards automatic teller machine ATM cards and gift cards. In addition other forms of payment may be interchangeable with the payment cards described herein including RFID enabled devices wireless devices and other electronic or magnetic devices that contain payment data. In addition although the term payment card is used throughout certain embodiments of the systems and methods may also be used to process identification cards such as drivers licenses security access cards check cashing cards and the like. For instance instead of obtaining authorization of a payment card various embodiments of the systems and methods described herein may be used to securely transmit and store identification card data.

To further illustrate the problems of currently available payment systems depicts a prior art payment system at a point of sale. The point of sale can be a payment point at a merchant s place of business to which a customer presents a payment card for purchase or rental of goods and services. The point of sale can also be considered more generally as the merchant s place of business. The point of sale may include for example a cash register a payment interface at a gas pump a restaurant cashier a front desk at a hotel a rental car desk or the like. In some locations such as hotels there may be multiple points of sale such as at the front desk at a restaurant and at a gift shop. Regardless of the location of the POS payment data is often not transmitted securely from one point to another and or stored without adequate protection.

The payment system includes a POS terminal . The POS terminal includes a card entry device and a host computer . The card entry device is a pin pad card swipe reader computer keyboard or the like and is used to capture or enter the payment data. The card entry device transmits the payment data to the host computer over link which is a cable or the like. The host computer may be a cash register workstation desktop computer or the like.

In many cases the link is not secure because encryption is not used on the link to protect the payment data. However even when encryption is used the card entry device will still not be secure between the point of receiving the payment data and the point of encryption. A software or hardware keylogger for example residing on the card entry device or even on the host computer could intercept the payment data prior to the encryption of that data. Thus both the card entry device and the link are vulnerable to payment data theft.

The host computer executes a POS terminal application . The POS terminal application is responsible for receiving the payment data from the card entry device . The POS terminal application sends the payment data along with an authorization request to determine whether the payment card has sufficient funds to a POS server over a network . Like the card entry device the POS terminal application on the host computer might be compromised by malware spyware keyloggers viruses or the like. In addition the network may transfer unencrypted payment data to the POS server creating vulnerabilities to packet sniffers which intercept and log network traffic.

The POS server is a computer typically located at the merchant s place of business or at a remote location owned and operated by the merchant. The POS server executes a POS server application which receives the payment data and authorization request from the POS terminal application . The POS server application transmits the payment data for authorization to a gateway which requests authorization from a card processor in communication with an authorizing entity.

The POS server application also stores transaction data and log data both of which include the payment data in a database . Transaction data is stored to enable the merchant to process incremental authorizations and settlements such as a restaurant tip authorizations and rental car returns see for additional details . Log data is stored among other reasons for a technician to be able to troubleshoot the POS terminal . A drawback to storing payment data at the POS terminal is that numerous payment card numbers are stored in unencrypted form in a single location providing relatively easy access for a thief to obtain this unprotected data.

Turning to an improved POS system is shown which reduces or eliminates at least some of the problems found in the art. Various components of the POS system protect payment data at the card entry device and during transit from a POS terminal to a POS server . In addition various components of the POS system reduce the amount of payment data stored at the merchant s place of business. Consequently certain embodiments of the POS system overcome some or all of the problems described above.

The POS terminal is a computer system for receiving payment data and requesting payment card authorizations. For example the POS terminal might be a computer terminal and card swipe device at a grocery checkout line. The POS terminal of certain embodiments includes a combination of software and hardware components.

A business might have multiple POS terminals each communicating with a single POS server . Some hotels for instance include POS terminals at the front desk in the hotel restaurant and in the hotel gift shop all of which are connected by a network to a common POS server . In another example a retail or grocery store might include POS terminals at each checkout line.

The POS terminal and POS server may be identical to the POS terminal and server of the prior art system of but augmented with a POS security layer PSL and server security application SSA . These two software components can be added to a preexisting payment system that is already deployed to effectively secure the system.

POS terminals may perform specialized functions in different settings. For example a restaurant POS terminal might process an initial authorization and a later incremental authorization for processing a tip. A POS terminal at a rental car establishment or hotel might preauthorize a car or room for a certain number of days and then later request additional authorization when the car is returned late or when a guest checks out of the room late. These specialized functions are described further in connection with below.

In certain embodiments the POS terminal includes a card entry device and a host computer . The card entry device is a pin pad card swipe reader computer keyboard touch screen or the like. Some implementations of the POS terminal do not include the card entry device but rather a software component that acts as a card entry device. For example a payment screen at an Internet storefront might act as a card entry device.

The card entry device of various embodiments receives payment data from any payment medium. The payment medium may be a payment card electronic chip radio frequency identification RFID device or the like. The payment data may be data encoded on a magnetic strip on the back of a card data stored in an electronic chip data stored in an RFID device or any other form of stored data. As discussed below with respect to the payment data may include track data stored on the back of a payment card.

The payment data may also include a personal account number PAN personal identification number PIN expiration date cardholder name and or a card security code e.g. a three digit code commonly found on the back of payment cards. In addition the payment data might include an electronic cardholder signature or biometric data such as a digital fingerprint. The payment data may also include a dynamic security code such as may be found in a radio frequency identification RFID device embedded in a payment card. Many other forms of payment data may also be provided.

The card entry device passes the payment data to the host computer . In one embodiment the card entry device is connected to the host computer through a link . The link is typically a cable serial e.g. RS232 or USB parallel Ethernet or other hardware interface. Alternatively the link is not provided and the card entry device is integral with the host computer . In another embodiment the link is a software interface such as a network socket or some combination of hardware and software.

The host computer may be implemented as a cash register or may be connected with a cash register. Typically the host computer is or comprises a general purpose computer e.g. a PC . The host computer receives payment data from the card entry device processes the data and transmits authorization requests to the POS server . When the POS server transmits authorization responses to the host computer the host computer displays the response to the cardholder and processes a payment transaction.

The host computer in one embodiment runs an operating system not shown such as Windows Linux Unix or the like. The host computer also includes the POS terminal application and the POS security layer PSL . In certain embodiments the POS terminal application and the PSL are software components which may be implemented as scripts executable programs interpreted bytecode or the like.

In one implementation the PSL is a low level application relative to the POS terminal application . For example the PSL preferably has priority over the POS terminal application to access operating system routines and data. In addition the PSL is preferably capable of intercepting data intended for transmission to the POS terminal application such as payment data. The PSL may run as an operating system process.

The PSL in one implementation is a script running at a sufficiently low level on the host computer to capture the payment data prior to the POS terminal application receiving the payment data. In one embodiment the PSL captures the payment data by monitoring and or accessing an input buffer in the card entry device or in the host computer . The PSL may also be at a sufficiently low level to prevent malicious programs such as keyloggers packet sniffers spyware and viruses from obtaining the payment data. In addition the PSL encrypts the payment data and transmits the encrypted payment data to the POS server .

The POS terminal communicates with the POS server through a network . The network may include cables routers switches and other network hardware. In addition the network may be a wireless network having wireless routers access points and the like. In one embodiment the network is the same or similar to the network used in the prior art system of . However in addition to the network the network is made secure by the addition of a secure channel . In one implementation the POS terminal application and the POS server application communicate over a non secure channel in the network and the PSL and a server security application SSA residing on the POS server communicate over the secure channel . The channel is secure in various implementations because encrypted data is transmitted between the PSL and the SSA over the channel .

The POS server is a computer system that receives authorization requests from one or more POS terminals and transmits the authorization requests to a remote server e.g. a gateway over the Internet a wide area network WAN a local area network LAN or a leased line. The POS server therefore acts as an interface between the POS terminal s and the gateway . The POS server may be located at a merchant s place of business. Alternatively the POS server is located at a remote data center which may be owned or leased by the merchant.

In addition to performing authorizations the POS server of certain embodiments also performs settlements. At the close of business or the next morning prior to opening the merchant using the POS server submits all of its authorized transactions to the remote server e.g. gateway . This group of transactions is typically referred to as a batch settlement. By issuing a settlement the POS server enables the merchant to receive payment or a credit for payment on the day s authorized credit card transactions including transactions with debit cards used as credit cards. In some embodiments where debit cards are processed as debit the merchant receives payment from the bank without using a batch settlement. When the payment cards are gift cards settlement is also often not used.

As shown in the depicted embodiment of the POS server includes a POS server application and the SSA . In certain embodiments the POS server application and the SSA are software components which may be implemented as scripts executable programs interpreted bytecode or the like.

In one implementation the POS server application is a high level application relative to the SSA . For example the SSA may have priority over the POS terminal application to access operating system routines and data. In another embodiment the SSA may be capable of intercepting data intended for transmission to the POS server application . In still other embodiments the SSA runs as an operating system process. Alternatively the SSA is not a lower level application than the POS server application .

The SSA of certain embodiments replaces a preexisting communications component or is a modification thereof. As a communications component the SSA in one implementation sends and receives authorization requests and settlements to a remote server such as a gateway. Because the SSA acts as the preexisting communications component the POS server application may communicate with the SSA as if the SSA were the preexisting communications component. The SSA of certain embodiments therefore advantageously enables the POS server application to send false payment data to the SSA without any modification to the POS server application .

The SSA and the PSL may monitor each other to validate product versions and to ensure that the system has not been tampered with. This monitoring arrangement inhibits a thief or malicious code from altering the SSA or PSL to divert for example payment data to third parties.

In one embodiment the PSL encrypts the intercepted payment data and sends the encrypted payment data to the SSA over the secure channel . The SSA decrypts the encrypted payment data and creates false payment data by replacing all or a portion of the payment data with false data. The SSA re encrypts the payment data and stores the encrypted payment data on the POS server . Thereafter the SSA transmits the false payment data to the PSL through the secure channel . The PSL then provides the false payment data to the POS terminal application in place of the actual payment data. The POS terminal application processes the false payment data as if it were real payment data providing the false payment data to the POS server application over the non secure channel as part of an authorization request. Alternatively the POS terminal application provides the false payment data to the POS server application over the secure channel . However even when the POS terminal application sends the false payment data over the non secure channel the system is still secure as no actual payment data is stored in a database .

In alternative embodiments the PSL rather than the SSA creates the false payment data. The PSL in such embodiments then sends the false payment data over the secure channel to the SSA .

The POS server application also processes the false payment data as if it were real payment data. Consequently the POS server application stores the false payment data in the database rather than the actual payment data. Likewise log data commonly maintained by the POS server application also includes false payment data rather than actual payment data. Thus in certain embodiments no actual payment data is stored at the point of sale or is stored only temporarily at certain points in the authorization process and deleted thereafter . Even if the false payment data includes a portion of the actual payment data see no complete actual payment data is stored at the point of sale.

The POS server application transmits the false payment data to the SSA . The SSA in an embodiment then combines the false payment data with the encrypted payment data and transmits the combined false and actual payment data over the Internet leased line or other network to the remote server e.g. gateway as part of an authorization request. The SSA in another embodiment sends only the actual payment data or only the false payment data to the gateway . Moreover the SSA may send the actual payment data and the false payment data to the gateway in separate transmissions. In one embodiment the SSA thereafter deletes all re encrypted payment data. Alternatively the SSA waits for a response from the gateway prior to deleting the re encrypted payment data.

The gateway in one embodiment includes one or more computer systems acting as servers or acting collectively as a server remote from the POS server . In various embodiments the gateway is maintained by an application service provider ASP which provides application services and data storage for merchants. The gateway may also be maintained by a card processor card association issuing bank or other entity. For instance the gateway may be used as a card processor server such that the POS server communicates directly or through one or more intermediaries with the card processor. In some implementations the gateway communicates with the POS server through a leased line or wide area network WAN and thereby acts as a demilitarized zone DMZ between the merchant network including the POS terminals and POS server and the outside world. The gateway in these implementations therefore adds an additional layer of security from outside attacks. The gateway may also communicate with an authorizing entity using a leased line.

A gateway security layer GSL residing on the gateway separates the combined false payment data and re encrypted payment data received from the POS server . The gateway security layer decrypts the re encrypted payment data and passes the payment data to a gateway application which in an embodiment e.g. when the gateway is not maintained by a card processor transmits the payment data to a card processor for authorization. Alternatively the gateway application transmits the re encrypted payment data or in another embodiment encrypts the payment data with a different encryption scheme. Upon receiving a response to the authorization request the GSL transmits the authorization response along with the false payment data to the POS server . By providing the false payment data to the POS server the GSL enables the POS server to identify the authorization response with the correct payment card as represented by the false data without providing the actual payment data.

Because the false payment data is identified with a specific payment card the false payment data may be used as a token for an additional transaction with the same payment card such as an incremental authorization or settlement as described in further detail below with respect to . When an additional transaction using a payment card is requested by the POS server the POS server can send the token corresponding to that payment card to the gateway to perform the additional transaction. The gateway matches the token with the actual payment data stored at the gateway in order to request authorization or settlement from an authorizing entity. Instead of returning the false payment data as a token however the GSL of some embodiments can also return a different set of false data as a token. This false data in some instances may be a portion or derivative of the false payment data.

The gateway also facilitates the performance of batch settlements in certain embodiments. In one instance the POS terminal sends end of day transaction information to the SSA requesting settlement. The SSA transmits the false data corresponding to the end of day transaction information to the gateway . The gateway uses components of the false data to update final transaction amounts to be settled.

Thus it can be seen that at various points of vulnerability in the POS system of the payment data is secured. For instance the PSL prevents the POS data from being sent in clear form to the POS terminal application . In addition the PSL transmits an encrypted version of the data over a secure channel to the SSA . The SSA secures transaction data and log data stored in the database by using false data and thus little or no cardholder data is stored on the database . Moreover the GSL secures transactions by storing actual payment data at a secure location and by transmitting false payment data or token data back to the POS server . Consequently opportunities to improperly obtain payment data are reduced or eliminated entirely.

Additionally the user action may include the use of a manual entry card which is a card used by an employee of the merchant and is configured to enable the customer to manually enter payment data through a pin pad keyboard or the like. The use of a manual key card is described in greater detail below in connection with .

In embodiments where the PSL is invoked indirectly by a payment data entry event the payment data entry event may include a card swipe or manual entry of payment data performed by a cardholder e.g. a customer or by an employee of the merchant. In an embodiment where the PSL is invoked programmatically the POS terminal may make a function call by for example using a dynamic linked library DLL which invokes the PSL .

In step the PSL displays a payment user interface display screen on the display of the card entry device . The payment user interface in one embodiment is displayed in place of a preexisting payment user interface associated with the POS server application . The payment user interface in one embodiment is a substitute payment screen which enables a user e.g. cardholder or employee of the merchant to provide payment data directly to the PSL . The substitute payment screen may also provide peace of mind to the user by displaying a message describing that the payment data is secure. In an alternative embodiment the substitute payment screen is hidden from the user and is therefore transparent to the user.

The payment user interface of some embodiments pops over or otherwise overlays or replaces the preexisting user interface. The payment user interface may have a similar look and feel to the preexisting user interface or the payment user interface may have a different look and feel. In other embodiments the payment user interface is the preexisting user interface rather than a substitute payment user interface.

The PSL also captures payment data provided by the cardholder. The PSL of certain embodiments intercepts the payment data and prevents other programs from accessing the data. By capturing the payment data prior to other programs capturing the data the PSL in various implementations acts as a keylogger.

In one embodiment the PSL is a hook based keylogger e.g. a keylogger that uses operating system routines e.g. the SetWindowsHookEx API application programming interface in Windows implementations to capture incoming data. Similarly the PSL may use other operating system routines e.g. the GetKeyboardState API in Windows implementations to obtain keystrokes prior to the keystrokes being received by any active window. Alternatively the PSL may be a kernel based keylogger receiving input output I O requests that are sent to the input device driver e.g. the card entry device . In one such embodiment the PSL employs a device level driver that sits above the keyboard driver e.g. between the input device driver and other operation system functions or applications and hence is able to intercept I O requests. Moreover the PSL may also be a handle injection keylogger by injecting characters into a window and thereby bypassing the input device. As a keylogger the PSL captures pin pad keystrokes keyboard keystrokes track data signature data biometric data and the like. Capturing this data allows the PSL to prevent malicious programs from accessing the data and also allows the PSL to prevent the data from reaching the POS terminal application . Thus the PSL of certain embodiments increases the security of the POS terminal .

Turning to step the PSL transmits the captured payment data to the SSA over a secure channel. In one embodiment the channel is secure due to an encryption scheme performed by the PSL on the payment data. The encryption scheme may include a mixed public private key asymmetric symmetric key a public key a private key or another encryption scheme. In one embodiment an IPSEC or PKI protocol is used in the encryption scheme. One example implementation of the encryption scheme includes a mixed public private key stored in real time in random access memory RAM . The encryption and decryption may be dynamic in nature in that the encryption scheme may create a new public private key pair each time the SSA is started. In addition the keys in the encryption scheme may be implemented using one or more encryption algorithms. For instance a blowfish algorithm twofish algorithm a 3DES Triple Data Encryption Standard or AES Advanced Encryption Standard algorithm or other algorithm may be used to encrypt the payment data at the PSL .

The SSA in one embodiment decrypts the encrypted payment data and returns false payment data to the PSL in step . Alternatively the SSA does not decrypt the payment data. The SSA generates false payment data such that the POS terminal and the POS server will be able to process the false payment data as if it were real payment data. In one embodiment the SSA generates the false payment data using a random number generator. In another embodiment the SSA generates the false payment data sequentially. For example a personal account number PAN from a first payment card may be replaced with numbers from a sequence of false data and a second PAN may be replaced with successive numbers in the sequence of false data. A more detailed example of false data is described below with respect to .

The SSA reencrypts the payment data or provides additional encryption to already encrypted payment data. The SSA stores the encrypted payment data on the POS server . In some implementations the SSA provides additional encryption even when the payment data is already encrypted because the SSA can be used without the PSL to process transactions from the POS server and or POS terminal . In such circumstances it may be desirable to encrypt any data transmitted from the SSA over a public network. Additionally other non public information that may already exist in the POS server may be encrypted and sent to a data center using the SSA . Depending on the merchant this information might include pre registered information such as Social Security numbers medical patient IDs addresses and the like.

In one embodiment the SSA provides two types of encrypted payment data including an undecryptable version and a decryptable version. The undecryptable version is decryptable at the gateway but not at the merchant location e.g. at the POS terminal or POS server and the decryptable version is decryptable at the merchant location. As described more fully below in connection with the undecryptable version may be used to process credit transactions and offline debit transactions and the decryptable version may be used to process online debit transactions. However in alternative embodiments such as when online debit transactions are not used by the merchant the SSA provides only an undecryptable version of the payment data. Moreover in still other embodiments the PSL rather than the SSA provides the undecryptable and decryptable versions of encrypted payment data when the PSL originally encrypts the payment data. In one such embodiment the SSA provides additional encryption to the already encrypted payment data. In addition the SSA may generate false payment data without knowing the contents of the actual payment data.

In step the PSL passes the false payment data to the POS terminal application . The POS terminal application receives the false payment data as if it were the real payment data. Because the POS terminal application has only false payment data malicious software and hardware in communication with the POS terminal cannot access the actual payment data.

In step the POS terminal application passes the false payment data to the POS server application on the POS server typically over a non secure channel as part of an authorization request. Because false data is used the payment data is made secure.

In step the POS server application records the transaction with the false payment data in the database . The transaction data may include the false payment data along with information regarding purchase price items purchased and the like. The transaction data is used in some applications for generating reports generating batch settlements and for processing incremental or authorizations see below . In addition the POS server application stores log data in the database . The log data may include a subset or all of the transaction data and may also include additional data. The log data may be used to provide access to a technician for troubleshooting the POS terminal or the POS server . Because false transaction and log data are stored in the database the payment data is secure.

In step the POS server application sends a payment or authorization request message to the SSA . Thereafter in step the SSA modifies the payment request message by combining the false payment data with the re encrypted payment data. The SSA then sends the combined payment data to the gateway security layer GSL in step .

At the gateway the GSL then decrypts the encrypted payment data in step to recover the actual payment data. The GSL in step then passes the actual payment data to the gateway application . Alternatively the GSL reencrypts the data prior to sending the data to the gateway application . In another embodiment the GSL does not decrypt the encrypted data received from the POS server but instead passes the encrypted data to the gateway application . In step the gateway application then transmits the payment data to a card processor which is an intermediary in eventually obtaining an authorization response from a central location such as an issuing bank.

The processor returns the payment data and a payment request response to the gateway application in step . The gateway application passes the payment data and payment request response to the GSL in step . Thereafter the GSL sends the false payment data rather than the actual payment data along with the payment request response to the SSA . By sending the false data the GSL enables the SSA to identify the payment request response with the correct payment card without sending the actual payment data to the SSA .

Turning to an alternative process flow for processing payment card transactions is depicted. will be described with respect to the steps outlined in Table 2 below. This alternative process flow might be used for example with legacy POS terminals that have a direct communications interface e.g. not via an SSA or the like to a particular gateway or processing platform e.g. a bank s proprietary front end . In the alternative process flow of a POS terminal is in communication with a gateway and a POS server . In addition a database is in communication with or maintained on the POS server . At step the PSL is invoked directly by a user action indirectly in response to payment data entry or programmatically e.g. in a similar manner as described with respect to above.

Thereafter in step the PSL displays a payment user interface and captures the payment information. In step the PSL sends the captured payment information to a gateway security application over a secure channel which may be the Internet a leased line or other network. In one embodiment the PSL encrypts the data prior to transmission thereby securing the channel.

In step the GSA returns false payment data to the PSL . Consequently no actual payment data is stored on the POS terminal or the POS server . However if an online debit transaction is used the GSA may also provide a decryptable version of the payment data to enable the POS terminal to process the online debit transaction. In the alternative the PSL uses a decryptable version of the payment data to process the online debit transaction. The PSL in step passes the false payment data to the POS terminal application . The POS termination application processes the false payment data as if it were actual payment data.

The POS terminal application then in step passes the false payment data to the POS server application . In step the POS server application records the transaction with the false payment data in the database . Because false payment data is stored in the database the payment data is less vulnerable to theft.

Thereafter the POS server application in step sends a payment request or authorization request message to the gateway using the false payment data. The gateway security application in step transmits the actual payment data and a payment request message to a processor. Thus except when the encrypted actual payment data is transmitted to the GSA only false payment data is used in the authorization transaction. Finally the gateway receives the payment data and the payment request response from the processor and forwards the response on to the POS server application .

Certain components described in the alternative process flow may be provided to a preexisting non secure POS system to secure the POS system. In one embodiment the PSL is provided to augment or retrofit a preexisting POS system. In addition the GSA may be provided to replace or to augment a preexisting gateway . However in the depicted embodiment no component is added to augment the preexisting POS server . Advantageously fewer components are therefore used to secure the POS system in the alternative process flow of .

Referring to at the method determines whether a user action has been detected. The user action may include for example a hotkey press or a manual key card swipe. If a user action has not been detected the method returns to . In one embodiment the method at therefore listens for the pressing of a hotkey which may be a key on a keyboard pin pad a button on a computer or touch screen or the like. The pressing of a hotkey may be for example the pressing of a payment type key on a pin pad of the card entry device.

If a user action was detected the method invokes the PSL at . In one embodiment the PSL is resident in memory prior to the key press listening for a user action payment data entry or program call described below with respect to . In one such embodiment the PSL is invoked by activating functions in the PSL that enable the capture of payment data. In an alternative embodiment the PSL is invoked by being loaded into memory.

At the method displays a substitute payment screen. In one embodiment the payment screen is a substitute payment screen displayed in place of an original payment screen supplied by a POS manufacturer. The substitute payment screen may have a similar look and feel to the original payment screen however payment data entered into the substitute payment screen is captured by the PSL. The substitute payment screen may also look different from the original payment screen or include fewer or more features than the original payment screen. The substitute payment screen enables entry of payment data directly into the PSL.

The method continues at by determining whether the user action included the entry of a manual key card. The manual key card in one implementation is a card used by an employee of the merchant to prepare the POS terminal for receiving manual entry data. Manual entry data includes payment data typed into a keyboard PIN pad or the like which may be entered if the card swipe reader is not working or is not available to the cardholder such as in online or telephone catalog transactions. If the user action included use of a manual key card the method proceeds to capture the manually entered data at . Otherwise if another user action was used the method proceeds to capture swiped data of the payment card at .

In another embodiment manual entry of payment data may be done without using a manual entry card. For example in one embodiment a cardholder invokes the PSL through a hotkey press and manually enters the payment data in the substitute payment screen.

Referring to the method determines whether payment data entry has been detected at . If payment data entry has not been detected the method returns to . In one embodiment the method at therefore listens for payment data entry which may include a card swipe manual entry of payment data or the like. The payment data entry may performed by a cardholder or employee of the merchant in various embodiments.

If payment data entry was detected the method invokes the PSL at which captures the payment data at . In one embodiment the PSL is resident in memory prior to the payment data entry listening for a user action see or payment data entry. In one such embodiment invoking the PSL means to activate the PSL to enable the PSL to capture the payment data. In an alternative embodiment the payment data entry invokes the PSL by causing the PSL to be loaded into memory.

In one embodiment a substitute payment screen is not used to capture the payment data because the payment data entry provided the payment data. In an alternative embodiment the substitute payment screen is also displayed in the method . In one such embodiment the substitute payment screen enables the cardholder to enter PIN data signature data biometric data or the like.

While not shown in the PSL may also be invoked by a program call. In one such implementation a software component on the POS terminal may make a function call by for example using a dynamic linked library DLL which invokes the PSL.

At the method encrypts payment data with an undecryptable cipher. In one embodiment the data is undecryptable at the point of sale e.g. at the POS terminal or POS server. However the data may be decrypted at a gateway or other remote server.

At the method encrypts the payment data with a decryptable cipher. In one embodiment the data is decryptable at the point of sale e.g. at the POS terminal or POS server. The method in one implementation encrypts the data with the decryptable cipher at the same time or substantially the same time as the method encrypts the data with the undecryptable cipher.

The method next determines whether an online debit transaction is taking place at . If the transaction is not online debit e.g. it is an off line debit credit or gift card transaction the method destroys the decryptable version at . If however the transaction is online debit the method proceeds to decrypt the decryptable version of the payment data at . The decryptable version is destroyed by the SSA although in alternative embodiments the PSL performs this function. Thereafter the method encrypts the PIN using the decrypted payment data to create an encrypted PIN block at . Once the encrypted PIN block is created the method destroys the decryptable version of the payment data at . As before the decryptable version is destroyed by the SSA but the PSL may also perform this function. In addition in an alternative embodiment the method may be applied to a credit card gift card or other card having a PIN rather than a debit card.

One example implementation of the method is as follows. An SSA encrypts payment data received from a PSL with an undecryptable cipher at and a decryptable cipher at . The SSA determines whether the transaction is online debit at . If the transaction is not online debit the SSA deletes the decryptable version of the data at . The SSA may delete the data upon detecting a non online debit transaction or the SSA may employ a time out period e.g. 30 seconds after which the decryptable version will be automatically destroyed. In addition the decryptable version may be stored in volatile memory memory that erases on power down such as in random access memory RAM . In one embodiment the time out period is adjusted to balance transactional reliability with security. Alternatively the SSA determines that the transaction is online debit and sends the decryptable version to the PSL which decrypts the decryptable version of the payment data at . The PSL then provides the decrypted payment data to the pin pad which at encrypts the PIN using some or all of the payment data e.g. the PAN or full track data . Once the PIN is encrypted or after a time out period the SSA destroys permanently deletes the only copy of the decryptable version of the payment data stored on the POS server at . In addition if a copy of the decryptable version is stored on the POS terminal the PSL also destroys this data.

Some businesses do not accept online debit transactions or any debit transactions. In these businesses the method may be configured to provide only an undecryptable version of the payment data. Thus there may be no need to store a decryptable version.

Turning to various formats of payment data are shown some or all of which are generated during the process flow described above under either of . illustrates actual data originally presented by the cardholder. This actual data is encrypted by a PSL and becomes encrypted data . Thereafter an SSA decrypts the encrypted data and replaces the actual data with false data . In addition the SSA re encrypts the actual data to generate re encrypted data . The SSA combines the false data and the re encrypted data to create combined data which the SSA transmits to a gateway.

The various formats of payment data shown are depicted as track data. The actual data is contained in a magnetic swipe on the payment card. This magnetic swipe includes one or more tracks of data. Many debit and credit cards have three tracks of data which are typically referred to as track 1 track 2 and track 3. Of these tracks track 2 is often used by vendors to obtain payment data from the payment card. An example of track 2 data is shown in as actual data .

The actual data includes a start sentinel represented by a character. The start sentinel is used for example by parsing software to indicate the start of track 2 data. Following the start sentinel a PAN is shown. The depicted PAN includes 16 digits. In alternative embodiments more or fewer digits are included in the PAN .

Following the PAN a field separator is shown denoted by the character. The field separator enables parsing software to distinguish between the PAN and data following the PAN . After the field separator ancillary data is shown. The ancillary data may include the expiration date of the card the PIN of the card and other discretionary data determined by the card issuer. In the depicted embodiment the first four digits of the ancillary data are reserved for the card expiration date using the format YYMM 0101 . An end sentinel follows the ancillary data to mark the end of the track.

In certain embodiments track 1 data not shown is used instead of or in addition to track 2 data. One possible format of track 1 data might be the following B PAN Cardholder Name Ancillary data . Like the track 2 data the track 1 data includes start and end sentinels and one or more field separators the PAN and ancillary data. The track 1 data also includes a format code B which may vary and the cardholder name. While the remainder of describes a specific example using track 2 data track 1 data may also be used interchangeably or with slight modifications. Likewise though not shown in some implementations track 3 data may also be used.

During the process flow described under above the actual data is encrypted by a PSL to generate encrypted data . The encrypted data includes a block of alphanumeric and or symbolic representations of the actual data .

The encrypted data is decrypted by the SSA and the SSA replaces the actual data with false data . In one embodiment the false data looks substantially similar to the actual data . Because the false data is similar to in the same format as the actual data a POS terminal and POS server can process the false data as if it were the actual data without being aware of processing false data . Thus in one embodiment the false data has a card swipe compatible format.

In the depicted embodiment the false data is a modified version of the actual data . The false data includes the same start and end sentinels and the same field separator . However a PAN of the false data differs from the PAN of the actual data . In addition ancillary data of the false data differs from the ancillary data of the actual data .

The PAN of the false data in one implementation retains the first four digits 1234 and the last four digits 3456 of the PAN of the actual data . Between the first four and last four digits the digits of the actual data are replaced with false digits e.g. 00000000 in the depicted example. In addition the ancillary data of the false data includes false data in the depicted embodiment. In the depicted embodiment this false data completely replaces the ancillary data of the actual data . Alternatively the ancillary data does not include false data.

The false data for a particular payment card is unique and distinct from other false payment data corresponding to other payment cards. In one embodiment this uniqueness is achieved by combining the false digits between the first and last four digits of the PAN . In addition the ancillary data may be generated to provide unique false data .

The false digits may be generated randomly. Alternatively the false digits are generated incrementally where each successive payment card presented at the POS is provided a successive number in a sequence. For example the false digits may be incremented from 11111111 to 22222222 and so on down to 99999999. In addition the false digits may be generated from an algorithm which uses the date time and or the origin of the transaction to derive a set of digits. In another implementation the false digits are generated according to another type of algorithm or a combination of the above described algorithms. Likewise the false ancillary data may be generated randomly sequentially or algorithmically.

In another embodiment the false data is generated such that the false data fails the Luhn Modulus 10 algorithm the Luhn test described in U.S. Pat. No. 2 950 048 titled Computer for Verifying Numbers which is hereby incorporated by reference in its entirety. The Luhn test detects a valid card number by performing a checksum of the digits of the card number. The false data may therefore be generated such that a checksum of the digits of the false data indicates that the false data is an invalid payment card number. Consequently the false data in this embodiment cannot be used fraudulently as a valid card number.

The false data may be generated to fail the Luhn test in a variety of ways. In one embodiment false data is first generated that passes the Luhn test. Then the false data is modified so that it no longer passes the Luhn test e.g. by changing a digit in the false data . For example if one of the digits in the false data is a 5 the algorithm could replace the 5 with any of the numbers 0 4 or 6 9 causing the false PAN to fail the Luhn test.

In addition or as an alternative to the Luhn test invalid ranges of card numbers may be used to generate the false data . For example different ranges of invalid card numbers may be designated by different card associations e.g. Visa American Express or the like a false data generation algorithm may then be used which ensures that all false card numbers generated for a particular card type e.g. Visa fall within the corresponding invalid range. In one embodiment at least a portion of the false data is thus derived or selected from a range of invalid card numbers created by one or more card associations. For example if a card association uses the range 4000000000000000 to 4999999999999999 for valid PAN numbers at least a portion of the false data could take on a number from 0000000000000000 to 3999999999999999 or from 5000000000000000 to 9999999999999999. Advantageously false data derived from these ranges in certain embodiments cannot be used for fraudulent authorizations. Moreover in one implementation the false data may be derived from an invalid range of card numbers and also be generated to fail the Luhn test.

False data generated to fail the Luhn test or generated from an invalid range of card numbers can be used beneficially as a token for additional transactions. In one embodiment the false data is used directly as a token or alternatively a token is derived from the false data . In one embodiment the token includes three parts. These parts may include some portion of the first four digits of the PAN followed by seven digits of false data followed by the last four digits of the PAN. Because the token is an invalid card number the token may be used in certain complex POS systems for additional or recurring transactions. In addition this implementation of a token may allow greater flexibility for subsequent transaction processing such that the token can be used to process subsequent transactions in a similar way to existing tokenization models.

Some POS terminals and or servers may be changed to disable the use of the Luhn test in order to facilitate using false data that fails the Luhn test. As some POS terminal and or server manufacturers have the Luhn test enabled on a payment type basis e.g. credit card payment type debit card payment type or the like this particular feature can be disabled for some or all payment types accepted by a particular merchant. Thus in various embodiments the false data has a card swipe compatible format that can be processed by the POS system but the false data is an invalid card number.

Because the first and last four digits of the PAN are retained in the false PAN in some variations the combination of random sequential or algorithmically defined digits and the first and last four digits of the PAN will likely be unique from false data generated for other payment cards. If a non unique number is generated in one embodiment the SSA re generates the false data until a unique number is found.

The false digits may also be tied to a particular transaction. Thus in one example a single payment card used in multiple transactions may be assigned a unique set of false data for each transaction. Alternatively successive transactions use the same false data .

While one example of the false data has been described the false data may be implemented in other ways. For instance fewer or more than the first and last four digits of the actual PAN may be retained or additional portions of the ancillary data may be retained. In addition the ancillary data may be falsified into false ancillary data randomly sequentially or algorithmically. Moreover in one embodiment one or more of the start and end sentinels or field separator are replaced with false data. In addition although numerals have been used to represent false data in one embodiment the false data includes false alphanumeric or symbolic characters.

The false data or portions thereof e.g. the false digits cannot be transformed into the actual data in some embodiments because it is generated by a random process sequence or algorithm that is not based on the actual data . Thus the false data of such embodiments bears little or no relation to the actual data . The false data of such embodiments is correlated with the actual data only by the SSA combining the false and re encrypted data together for transmission to the gateway. Thus when the SSA deletes the re encrypted data after transmission only the gateway knows the actual data and to which actual data the false data corresponds. Thus the false data of certain embodiments helps secure the POS system.

The SSA combines the false data and the re encrypted data into combined data . The SSA may use either the undecryptable or decryptable data block to create the combined data . Although the combined data is formed by concatenation in this example any method of combining the false and re encrypted data may be used provided that the method is known to the gateway. The SSA provides the combined data to the gateway which decrypts the re encrypted data stored in the combined data to recover the actual data . Though not shown the gateway may also re encrypt the actual data in a format that is decryptable by the authorizing entity e.g. issuing bank . The gateway may instead not decrypt the re encrypted data but rather pass the re encrypted data directly to the authorizing entity.

Turning to embodiments of a method for obtaining incremental authorizations or settlements are shown. Payment data is often used to perform incremental authorizations or settlements. For example in the restaurant environment the payment card is first authorized for the amount of the bill. However frequently the merchant adds incremental charges such as tips and tabs to the bill after the cardholder has left. In order to complete the incremental transaction the merchant retains the payment data.

Similarly in lodging and rental industries incremental authorizations are used. For example hotels and car rental businesses use payment card authorizations to make reservations. Storing payment data enables hotels and car rental businesses to charge multiple items to a single invoice. Hotel customers often want and expect the ability to charge items to their room from the gift shop restaurant spa and the like. In some cases it may not always be possible to ask the cardholder to present a card to cover the cost of incidentals. The cardholder may have already checked out for instance prior to the discovery of a depleted mini bar or they may have said they would return a car tank full of gas but in fact did not.

In addition mail order telephone order and online businesses often operate using a book and ship model. In this model the order is placed but the credit card is not charged until the order is actually shipped. In these cases payment data is retained until the order is shipped and the card is charged for the amount of the order. Moreover merchants who charge monthly memberships such as spas clubs and gyms also store the payment data in order to process these monthly charges.

Accordingly illustrates a method for obtaining incremental authorizations or settlements. At the method obtains payment data. The payment data may be obtained for example by the PSL. The method then stores false data in place of the payment data. In one embodiment the POS server application stores false data provided by the POS terminal application as if it were the real payment data. At the method obtains an initial authorization or settlement using the false data. This step may include the substeps of requesting an authorization or settlement using the POS terminal application and or SSA receiving the authorization or settlement with the gateway and receiving the authorization or settlement response from the gateway at the SSA.

Thereafter the method determines at whether an incremental authorization or a settlement is to be performed. In one embodiment this determination is made by the POS terminal application. If there is no such authorization or settlement the method ends. Otherwise the method uses the stored false data at to obtain an incremental authorization or delayed settlement by using for instance the SSA to request the authorization or settlement. Because the method uses false data to perform the additional authorizations or settlements sensitive payment data does not need to be stored at the merchant location to perform additional authorizations or settlements. As a result the method increases the security of payment card transactions.

In addition to the embodiments described above some or all of the various systems and methods described herein may be employed with an online store over the Internet. For example the point of sale may include a shopping cart program at the online store and the online store may process all or a portion of a transaction using false data. Moreover at least a portion of the systems and methods described herein may be implemented at a telephone call center. For instance an operator may take payment data from a purchaser over the telephone and enter the payment data into a secure POS terminal which performs all or a portion of the transaction using false data.

Moreover although the POS terminal and the POS server have been described as separate devices in certain embodiments the POS terminal and the POS server are a single physical device or the functions of the POS terminal and server are performed by a single device. As a result in one embodiment some or all of the functions of the POS terminal and server are implemented except that no network is used to communicate between the POS terminal and server. Additionally some or all of the functions of the POS terminal may be performed by the POS server and vice versa. Other implementations may also be employed as will be understood by those of skill in the art.

Those of skill will further appreciate that the various illustrative logical blocks modules components and process steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks components and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans can implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present inventions.

In addition while certain embodiments of the inventions have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the inventions. Indeed the novel methods and systems described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the inventions. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of the inventions.

