---

title: Assignment of proxies for virtual-machine secondary copy operations including streaming backup jobs
abstract: A comprehensive approach to streaming backups for virtual machines (“VMs”) in a storage management system comprises improvements to the assignment of data agent proxies for VM secondary copy operations. New considerations in performing a VM streaming backup job include without limitation: determining and enforcing a system-wide per-proxy limit of concurrent data streams; generating an ordered priority list of the VMs to be backed up as a basis for choosing which proxies will back up the respective VM, though the illustrative system may not strictly adhere to the priority list based on further considerations; identifying a next available proxy based on data stream utilization at the proxy; and dynamically re-generating the priority list and re-evaluating considerations if some VMs become “stranded” due to a failure to be backed up. Secondary copy operations are distributed to proxies in ways that improve the chances of successfully completing VM streaming backups.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09563514&OS=09563514&RS=09563514
owner: Commvault Systems, Inc.
number: 09563514
owner_city: Tinton Falls
owner_country: US
publication_date: 20150619
---
Any and all applications if any for which a foreign or domestic priority claim is identified in the Application Data Sheet of the present application are hereby incorporated by reference under 37 CFR 1.57.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document and or the patent disclosure as it appears in the United States Patent and Trademark Office patent file and or records but otherwise reserves all copyrights whatsoever.

Businesses worldwide recognize the commercial value of their data and seek reliable cost effective ways to protect the information stored on their computer networks. A company might back up critical computing systems such as databases file servers web servers and so on as part of a daily weekly or monthly maintenance schedule. The company may similarly protect virtual machine resources which are becoming increasingly popular platforms for a variety of business uses. One of the perennial challenges is to protect the company s data in a way that makes efficient use of resources while reducing the impact on productivity and network resources.

With the popularity of virtual machines VMs progressively increasing data that is generated and or used by virtual machines may become correspondingly more valuable. Thus backing up virtual machine data stores takes on added importance especially with a view to better utilization of resources such as data agents for virtual machines and network resources in which these virtual machines operate. Although prior attempts were made to load balance amongst data agents for virtual machines or virtual server data agents or virtual server agents the embodiments according to the present invention take a more nuanced multi dimensional approach that considers several dynamic factors in the course of planning and executing virtual machine secondary copy operations including streaming backup jobs. Some prior art approaches are described in U.S. Patent Application Publications 2014 0196038 A1 and 2014 0196056 A1 which were both filed on Jan. 6 2014 with the title Virtual Server Agent Load Balancing and which are both incorporated by reference in their entirety herein.

Traditional load balancing techniques used for assigning resources to secondary copy operations such as streaming backup jobs may be deficient in the way in which the backup resources are actually utilized in a storage management system. For example data agent proxies may become over utilized or under utilized when viewed at the system wide level across several concurrent backup jobs. In some cases virtual machines VMs that are targeted for a particular backup job are not backed up in a timely manner or at all because of over extended or failed proxies. In some cases a backup job may take a toll on the performance of primary storage devices that store virtual machine data due to backup attempts that over tax the primary storage devices. The need therefore exists for improved performance timeliness scalability and fault tolerance when backing up virtual machines.

The present inventor devised a more comprehensive approach to streaming backups for virtual machines in a storage management system. The comprehensive approach comprises improvements to the assignment of data agent proxies for conducting VM secondary copy operations. The improvements include a number of new considerations that are introduced in the course of performing a VM streaming backup job including without limitation 

Applying one or more of these considerations in any combination will tend to improve performance and fault tolerance in VM streaming backups by taking a more dynamic approach that is responsive to current conditions in the storage management system e.g. busy proxies busy data stores network bottlenecks out of service components etc. . The illustrative approach distributes secondary copy operations to proxies in ways that improve the chances of successfully completing VM streaming backups. Moreover the illustrative approach is tolerant of proxies that are out of service or have otherwise failed to perform a backup without necessarily needing to restart the backup job. These and other advantages are described in more detail below.

The passages above serve to summarize some of the considerations disclosed in the present patent document in order to ease the reader s understanding. Detailed descriptions and examples of systems and methods according to the present invention may be found in the section entitled IMPROVING THE ASSIGNMENT OF DATA AGENT PROXIES FOR EXECUTING VIRTUAL MACHINE SECONDARY COPY OPERATIONS INCLUDING STREAMING BACKUP JOBS as well as in the section entitled Example Embodiments and also in herein. Furthermore components and functionality for improving the assignment of data agent proxies for executing virtual machine secondary copy operations may be configured and or incorporated into information management systems such as those described herein in .

With the increasing importance of protecting and leveraging data organizations simply cannot afford to take the risk of losing critical data. Moreover runaway data growth and other modern realities make protecting and managing data an increasingly difficult task. There is therefore a need for efficient powerful and user friendly solutions for protecting and managing data.

Depending on the size of the organization there are typically many data production sources which are under the purview of tens hundreds or even thousands of employees or other individuals. In the past individual employees were sometimes responsible for managing and protecting their data. A patchwork of hardware and software point solutions has been applied in other cases. These solutions were often provided by different vendors and had limited or no interoperability.

Certain embodiments described herein provide systems and methods capable of addressing these and other shortcomings of prior approaches by implementing unified organization wide information management. shows one such information management system which generally includes combinations of hardware and software configured to protect and manage data and metadata which is generated and used by the various computing devices in information management system . The organization that employs the information management system may be a corporation or other business entity non profit organization educational institution household governmental agency or the like.

Generally the systems and associated components described herein may be compatible with and or provide some or all of the functionality of the systems and corresponding components described in one or more of the following U.S. patents and patent application publications assigned to Commvault Systems Inc. each of which is hereby incorporated in its entirety by reference herein 

The information management system can include a variety of different computing devices. For instance as will be described in greater detail herein the information management system can include one or more client computing devices and secondary storage computing devices .

Computing devices can include without limitation one or more workstations personal computers desktop computers or other types of generally fixed computing systems such as mainframe computers and minicomputers. Other computing devices can include mobile or portable computing devices such as one or more laptops tablet computers personal data assistants mobile phones such as smartphones and other mobile or portable computing devices such as embedded computers set top boxes vehicle mounted devices wearable computers etc. Computing devices can include servers such as mail servers file servers database servers and web servers.

In some cases a computing device includes virtualized and or cloud computing resources. For instance one or more virtual machines may be provided to the organization by a third party cloud service vendor. Or in some embodiments computing devices can include one or more virtual machine s running on a physical host computing device or host machine operated by the organization. As one example the organization may use one virtual machine as a database server and another virtual machine as a mail server both virtual machines operating on the same host machine.

A virtual machine includes an operating system and associated virtual resources and is hosted simultaneously with another operating system on a physical host computer or host machine . A hypervisor typically software and also known in the art as a virtual machine monitor or a virtual machine manager or VMM sits between the virtual machine and the hardware of the physical host machine. One example of hypervisor as virtualization software is ESX Server by VMware Inc. of Palo Alto Calif. USA other examples include Microsoft Virtual Server and Microsoft Windows Server Hyper V both by Microsoft Corporation of Redmond Wash. USA and Sun xVM by Oracle America Inc. of Santa Clara Calif. USA. In some embodiments the hypervisor may be firmware or hardware or a combination of software and or firmware and or hardware.

The hypervisor provides to each virtual operating system virtual resources such as a virtual processor virtual memory a virtual network device and a virtual disk. Each virtual machine has one or more virtual disks. The hypervisor typically stores the data of virtual disks in files on the file system of the physical host machine called virtual machine disk files in the case of VMware virtual servers or virtual hard disk image files in the case of Microsoft virtual servers . For example VMware s ESX Server provides the Virtual Machine File System VMFS for the storage of virtual machine disk files. A virtual machine reads data from and writes data to its virtual disk much the same way that an actual physical machine reads data from and writes data to an actual disk.

Examples of techniques for implementing information management techniques in a cloud computing environment are described in U.S. Pat. No. 8 285 681 which is incorporated by reference herein. Examples of techniques for implementing information management techniques in a virtualized computing environment are described in U.S. Pat. No. 8 307 177 also incorporated by reference herein.

The information management system can also include a variety of storage devices including primary storage devices and secondary storage devices for example. Storage devices can generally be of any suitable type including without limitation disk drives hard disk arrays semiconductor memory e.g. solid state storage devices network attached storage NAS devices tape libraries or other magnetic non tape storage devices optical media storage devices DNA RNA based memory technology combinations of the same and the like. In some embodiments storage devices can form part of a distributed file system. In some cases storage devices are provided in a cloud e.g. a private cloud or one operated by a third party vendor . A storage device in some cases comprises a disk array or portion thereof.

The illustrated information management system includes one or more client computing device having at least one application executing thereon and one or more primary storage devices storing primary data . The client computing device s and the primary storage devices may generally be referred to in some cases as a primary storage subsystem . A computing device in an information management system that has a data agent installed and operating on it is generally referred to as a client computing device or in the context of a component of the information management system simply as a client .

Depending on the context the term information management system can refer to generally all of the illustrated hardware and software components. Or in other instances the term may refer to only a subset of the illustrated components.

For instance in some cases the information management system generally refers to a combination of specialized components used to protect move manage manipulate analyze and or process data and metadata generated by the client computing devices . However the information management system in some cases does not include the underlying components that generate and or store the primary data such as the client computing devices themselves the applications and operating system operating on the client computing devices and the primary storage devices . As an example information management system may sometimes refer to one or more of the following components and corresponding data structures storage managers data agents and media agents. These components will be described in further detail below.

There are typically a variety of sources in an organization that produce data to be protected and managed. As just one illustrative example in a corporate environment such data sources can be employee workstations and company servers such as a mail server a web server a database server a transaction server or the like. In the information management system the data generation sources include the one or more client computing devices .

The client computing devices may include any of the types of computing devices described above without limitation and in some cases the client computing devices are associated with one or more users and or corresponding user accounts of employees or other individuals.

The information management system generally addresses and handles the data management and protection needs for the data generated by the client computing devices . However the use of this term does not imply that the client computing devices cannot be servers in other respects. For instance a particular client computing device may act as a server with respect to other devices such as other client computing devices . As just a few examples the client computing devices can include mail servers file servers database servers and web servers.

Each client computing device may have one or more applications e.g. software applications executing thereon which generate and manipulate the data that is to be protected from loss and managed. The applications generally facilitate the operations of an organization or multiple affiliated organizations and can include without limitation mail server applications e.g. Microsoft Exchange Server file server applications mail client applications e.g. Microsoft Exchange Client database applications e.g. SQL Oracle SAP Lotus Notes Database word processing applications e.g. Microsoft Word spreadsheet applications financial applications presentation applications graphics and or video applications browser applications mobile applications entertainment applications and so on.

The client computing devices can have at least one operating system e.g. Microsoft Windows Mac OS X iOS IBM z OS Linux other Unix based operating systems etc. installed thereon which may support or host one or more file systems and other applications .

The client computing devices and other components in information management system can be connected to one another via one or more communication pathways . For example a first communication pathway may connect or communicatively couple client computing device and secondary storage computing device a second communication pathway may connect storage manager and client computing device and a third communication pathway may connect storage manager and secondary storage computing device etc. see e.g. and . The communication pathways can include one or more networks or other connection types including one or more of the following without limitation the Internet a wide area network WAN a local area network LAN a Storage Area Network SAN a Fibre Channel connection a Small Computer System Interface SCSI connection a virtual private network VPN a token ring or TCP IP based network an intranet network a point to point link a cellular network a wireless data transmission system a two way cable system an interactive kiosk network a satellite network a broadband network a baseband network a neural network a mesh network an ad hoc network other appropriate wired wireless or partially wired wireless computer or telecommunications networks combinations of the same or the like. The communication pathways in some cases may also include application programming interfaces APIs including e.g. cloud service provider APIs virtual machine management APIs and hosted service provider APIs. The underlying infrastructure of communication paths may be wired and or wireless analog and or digital or any combination thereof and the facilities used may be private public third party provided or any combination thereof without limitation.

Primary data according to some embodiments is production data or other live data generated by the operating system and or applications operating on a client computing device . The primary data is generally stored on the primary storage device s and is organized via a file system supported by the client computing device . For instance the client computing device s and corresponding applications may create access modify write delete and otherwise use primary data . In some cases some or all of the primary data can be stored in cloud storage resources e.g. primary storage device may be a cloud based resource .

Primary data is generally in the native format of the source application . According to certain aspects primary data is an initial or first e.g. created before any other copies or before at least one other copy stored copy of data generated by the source application . Primary data in some cases is created substantially directly from data generated by the corresponding source applications .

The primary storage devices storing the primary data may be relatively fast and or expensive technology e.g. a disk drive a hard disk array solid state memory etc. . In addition primary data may be highly changeable and or may be intended for relatively short term retention e.g. hours days or weeks .

According to some embodiments the client computing device can access primary data from the primary storage device by making conventional file system calls via the operating system. Primary data may include structured data e.g. database files unstructured data e.g. documents and or semi structured data. Some specific examples are described below with respect to .

It can be useful in performing certain tasks to organize the primary data into units of different granularities. In general primary data can include files directories file system volumes data blocks extents or any other hierarchies or organizations of data objects. As used herein a data object can refer to both 1 any file that is currently addressable by a file system or that was previously addressable by the file system e.g. an archive file and 2 a subset of such a file e.g. a data block .

As will be described in further detail it can also be useful in performing certain functions of the information management system to access and modify metadata within the primary data . Metadata generally includes information about data objects or characteristics associated with the data objects. For simplicity herein it is to be understood that unless expressly stated otherwise any reference to primary data generally also includes its associated metadata but references to the metadata do not include the primary data.

Metadata can include without limitation one or more of the following the data owner e.g. the client or user that generates the data the last modified time e.g. the time of the most recent modification of the data object a data object name e.g. a file name a data object size e.g. a number of bytes of data information about the content e.g. an indication as to the existence of a particular search term user supplied tags to from information for email e.g. an email sender recipient etc. creation date file type e.g. format or application type last accessed time application type e.g. type of application that generated the data object location network e.g. a current past or future location of the data object and network pathways to from the data object geographic location e.g. GPS coordinates frequency of change e.g. a period in which the data object is modified business unit e.g. a group or department that generates manages or is otherwise associated with the data object aging information e.g. a schedule such as a time period in which the data object is migrated to secondary or long term storage boot sectors partition layouts file location within a file folder directory structure user permissions owners groups access control lists ACLs system metadata e.g. registry information combinations of the same or other similar information related to the data object.

In addition to metadata generated by or related to file systems and operating systems some of the applications and or other components of the information management system maintain indices of metadata for data objects e.g. metadata associated with individual email messages. Thus each data object may be associated with corresponding metadata. The use of metadata to perform classification and other functions is described in greater detail below.

Each of the client computing devices are generally associated with and or in communication with one or more of the primary storage devices storing corresponding primary data . A client computing device may be considered to be associated with or in communication with a primary storage device if it is capable of one or more of routing and or storing data e.g. primary data to the particular primary storage device coordinating the routing and or storing of data to the particular primary storage device retrieving data from the particular primary storage device coordinating the retrieval of data from the particular primary storage device and modifying and or deleting data retrieved from the particular primary storage device .

The primary storage devices can include any of the different types of storage devices described above or some other kind of suitable storage device. The primary storage devices may have relatively fast I O times and or are relatively expensive in comparison to the secondary storage devices . For example the information management system may generally regularly access data and metadata stored on primary storage devices whereas data and metadata stored on the secondary storage devices is accessed relatively less frequently.

Primary storage device may be dedicated or shared. In some cases each primary storage device is dedicated to an associated client computing device . For instance a primary storage device in one embodiment is a local disk drive of a corresponding client computing device . In other cases one or more primary storage devices can be shared by multiple client computing devices e.g. via a network such as in a cloud storage implementation. As one example a primary storage device can be a disk array shared by a group of client computing devices such as one of the following types of disk arrays EMC Clariion EMC Symmetrix EMC Celerra Dell EqualLogic IBM XIV NetApp FAS HP EVA and HP 3PAR.

The information management system may also include hosted services not shown which may be hosted in some cases by an entity other than the organization that employs the other components of the information management system . For instance the hosted services may be provided by various online service providers to the organization. Such service providers can provide services including social networking services hosted email services or hosted productivity applications or other hosted applications . Hosted services may include software as a service SaaS platform as a service PaaS application service providers ASPs cloud services or other mechanisms for delivering functionality via a network. As it provides services to users each hosted service may generate additional data and metadata under management of the information management system e.g. as primary data . In some cases the hosted services may be accessed using one of the applications . As an example a hosted mail service may be accessed via browser running on a client computing device . The hosted services may be implemented in a variety of computing environments. In some cases they are implemented in an environment having a similar arrangement to the information management system where various physical and logical components are distributed over a network.

The primary data stored on the primary storage devices may be compromised in some cases such as when an employee deliberately or accidentally deletes or overwrites primary data during their normal course of work. Or the primary storage devices can be damaged lost or otherwise corrupted. For recovery and or regulatory compliance purposes it is therefore useful to generate copies of the primary data . Accordingly the information management system includes one or more secondary storage computing devices and one or more secondary storage devices configured to create and store one or more secondary copies of the primary data and associated metadata. The secondary storage computing devices and the secondary storage devices may sometimes be referred to as a secondary storage subsystem .

Creation of secondary copies can help in search and analysis efforts and meet other information management goals such as restoring data and or metadata if an original version e.g. of primary data is lost e.g. by deletion corruption or disaster allowing point in time recovery complying with regulatory data retention and electronic discovery e discovery requirements reducing utilized storage capacity facilitating organization and search of data improving user access to data files across multiple computing devices and or hosted services and implementing data retention policies.

The client computing devices access or receive primary data and communicate the data e.g. over one or more communication pathways for storage in the secondary storage device s .

A secondary copy can comprise a separate stored copy of application data that is derived from one or more earlier created stored copies e.g. derived from primary data or another secondary copy . Secondary copies can include point in time data and may be intended for relatively long term retention e.g. weeks months or years before some or all of the data is moved to other storage or is discarded.

In some cases a secondary copy is a copy of application data created and stored subsequent to at least one other stored instance e.g. subsequent to corresponding primary data or to another secondary copy in a different storage device than at least one previous stored copy and or remotely from at least one previous stored copy. In some other cases secondary copies can be stored in the same storage device as primary data and or other previously stored copies. For example in one embodiment a disk array capable of performing hardware snapshots stores primary data and creates and stores hardware snapshots of the primary data as secondary copies . Secondary copies may be stored in relatively slow and or low cost storage e.g. magnetic tape . A secondary copy may be stored in a backup or archive format or in some other format different than the native source application format or other primary data format.

In some cases secondary copies are indexed so users can browse and restore at another point in time. After creation of a secondary copy representative of certain primary data a pointer or other location indicia e.g. a stub may be placed in primary data or be otherwise associated with primary data to indicate the current location on the secondary storage device s of secondary copy .

Since an instance of a data object or metadata in primary data may change over time as it is modified by an application or hosted service or the operating system the information management system may create and manage multiple secondary copies of a particular data object or metadata each representing the state of the data object in primary data at a particular point in time. Moreover since an instance of a data object in primary data may eventually be deleted from the primary storage device and the file system the information management system may continue to manage point in time representations of that data object even though the instance in primary data no longer exists.

For virtualized computing devices the operating system and other applications of the client computing device s may execute within or under the management of virtualization software e.g. a VMM and the primary storage device s may comprise a virtual disk created on a physical storage device. The information management system may create secondary copies of the files or other data objects in a virtual disk file and or secondary copies of the entire virtual disk file itself e.g. of an entire .vmdk file .

Secondary copies may be distinguished from corresponding primary data in a variety of ways some of which will now be described. First as discussed secondary copies can be stored in a different format e.g. backup archive or other non native format than primary data . For this or other reasons secondary copies may not be directly useable by the applications of the client computing device e.g. via standard system calls or otherwise without modification processing or other intervention by the information management system .

Secondary copies are also in some embodiments stored on a secondary storage device that is inaccessible to the applications running on the client computing devices and or hosted services . Some secondary copies may be offline copies in that they are not readily available e.g. not mounted to tape or disk . Offline copies can include copies of data that the information management system can access without human intervention e.g. tapes within an automated tape library but not yet mounted in a drive and copies that the information management system can access only with at least some human intervention e.g. tapes located at an offsite storage site .

Creating secondary copies can be a challenging task. For instance there can be hundreds or thousands of client computing devices continually generating large volumes of primary data to be protected. Also there can be significant overhead involved in the creation of secondary copies . Moreover secondary storage devices may be special purpose components and interacting with them can require specialized intelligence.

In some cases the client computing devices interact directly with the secondary storage device to create the secondary copies . However in view of the factors described above this approach can negatively impact the ability of the client computing devices to serve the applications and produce primary data . Further the client computing devices may not be optimized for interaction with the secondary storage devices .

Thus in some embodiments the information management system includes one or more software and or hardware components which generally act as intermediaries between the client computing devices and the secondary storage devices . In addition to off loading certain responsibilities from the client computing devices these intermediate components can provide other benefits. For instance as discussed further below with respect to distributing some of the work involved in creating secondary copies can enhance scalability.

The intermediate components can include one or more secondary storage computing devices as shown in and or one or more media agents which can be software modules operating on corresponding secondary storage computing devices or other appropriate computing devices . Media agents are discussed below e.g. with respect to .

The secondary storage computing device s can comprise any of the computing devices described above without limitation. In some cases the secondary storage computing device s include specialized hardware and or software componentry for interacting with the secondary storage devices .

To create a secondary copy involving the copying of data from the primary storage subsystem to the secondary storage subsystem the client computing device in some embodiments communicates the primary data to be copied or a processed version thereof to the designated secondary storage computing device via the communication pathway . The secondary storage computing device in turn conveys the received data or a processed version thereof to the secondary storage device . In some such configurations the communication pathway between the client computing device and the secondary storage computing device comprises a portion of a LAN WAN or SAN. In other cases at least some client computing devices communicate directly with the secondary storage devices e.g. via Fibre Channel or SCSI connections . In some other cases one or more secondary copies are created from existing secondary copies such as in the case of an auxiliary copy operation described in greater detail below.

Some or all primary data objects are associated with corresponding metadata e.g. Meta1 11 which may include file system metadata and or application specific metadata. Stored on the secondary storage device s are secondary copy data objects A C which may include copies of or otherwise represent corresponding primary data objects and metadata.

As shown the secondary copy data objects A C can individually represent more than one primary data object. For example secondary copy data object A represents three separate primary data objects C and C represented as C and C respectively and accompanied by the corresponding metadata Meta11 Meta3 and Meta8 respectively . Moreover as indicated by the prime mark a secondary copy object may store a representation of a primary data object and or metadata differently than the original format e.g. in a compressed encrypted deduplicated or other modified format. Likewise secondary data object B represents primary data objects B and A as B and A respectively and accompanied by corresponding metadata Meta2 Meta10 and Meta1 respectively. Also secondary data object C represents primary data objects A B and A as A B and A respectively accompanied by corresponding metadata Meta9 Meta5 and Meta6 respectively.

The information management system can incorporate a variety of different hardware and software components which can in turn be organized with respect to one another in many different configurations depending on the embodiment. There are critical design choices involved in specifying the functional responsibilities of the components and the role of each component in the information management system . For instance as will be discussed such design choices can impact performance as well as the adaptability of the information management system to data growth or other changing circumstances.

As noted the number of components in the information management system and the amount of data under management can be quite large. Managing the components and data is therefore a significant task and a task that can grow in an often unpredictable fashion as the quantity of components and data scale to meet the needs of the organization. For these and other reasons according to certain embodiments responsibility for controlling the information management system or at least a significant portion of that responsibility is allocated to the storage manager . By distributing control functionality in this manner the storage manager can be adapted independently according to changing circumstances. Moreover a computing device for hosting the storage manager can be selected to best suit the functions of the storage manager . These and other advantages are described in further detail below with respect to .

The storage manager may be a software module or other application which in some embodiments operates in conjunction with one or more associated data structures e.g. a dedicated database e.g. management database . In some embodiments storage manager is a computing device comprising circuitry for executing computer instructions and performs the functions described herein. The storage manager generally initiates performs coordinates and or controls storage and other information management operations performed by the information management system e.g. to protect and control the primary data and secondary copies of data and metadata. In general storage manager may be said to manage information management system which includes managing the constituent components e.g. data agents and media agents etc.

As shown by the dashed arrowed lines in the storage manager may communicate with and or control some or all elements of the information management system such as the data agents and media agents . Thus in certain embodiments control information originates from the storage manager and status reporting is transmitted to storage manager by the various managed components whereas payload data and payload metadata is generally communicated between the data agents and the media agents or otherwise between the client computing device s and the secondary storage computing device s e.g. at the direction of and under the management of the storage manager . Control information can generally include parameters and instructions for carrying out information management operations such as without limitation instructions to perform a task associated with an operation timing information specifying when to initiate a task associated with an operation data path information specifying what components to communicate with or access in carrying out an operation and the like. Payload data on the other hand can include the actual data involved in the storage operation such as content data written to a secondary storage device in a secondary copy operation. Payload metadata can include any of the types of metadata described herein and may be written to a storage device along with the payload content data e.g. in the form of a header .

In other embodiments some information management operations are controlled by other components in the information management system e.g. the media agent s or data agent s instead of or in combination with the storage manager .

According to certain embodiments the storage manager provides one or more of the following functions 

The storage manager may maintain a database or storage manager database or management database of management related data and information management policies . The database may include a management index or index or other data structure that stores logical associations between components of the system user preferences and or profiles e.g. preferences regarding encryption compression or deduplication of primary or secondary copy data preferences regarding the scheduling type or other aspects of primary or secondary copy or other operations mappings of particular information management users or user accounts to certain computing devices or other components etc. management tasks media containerization or other useful data. For example the storage manager may use the index to track logical associations between media agents and secondary storage devices and or movement of data from primary storage devices to secondary storage devices . For instance the index may store data associating a client computing device with a particular media agent and or secondary storage device as specified in an information management policy e.g. a storage policy which is defined in more detail below .

Administrators and other people may be able to configure and initiate certain information management operations on an individual basis. But while this may be acceptable for some recovery operations or other relatively less frequent tasks it is often not workable for implementing on going organization wide data protection and management. Thus the information management system may utilize information management policies for specifying and executing information management operations e.g. on an automated basis . Generally an information management policy can include a data structure or other information source that specifies a set of parameters e.g. criteria and rules associated with storage or other information management operations.

The storage manager database may maintain the information management policies and associated data although the information management policies can be stored in any appropriate location. For instance an information management policy such as a storage policy may be stored as metadata in a media agent database or in a secondary storage device e.g. as an archive copy for use in restore operations or other information management operations depending on the embodiment. Information management policies are described further below.

According to certain embodiments the storage manager database comprises a relational database e.g. an SQL database for tracking metadata such as metadata associated with secondary copy operations e.g. what client computing devices and corresponding data were protected . This and other metadata may additionally be stored in other locations such as at the secondary storage computing devices or on the secondary storage devices allowing data recovery without the use of the storage manager in some cases.

As shown the storage manager may include a jobs agent a user interface and a management agent all of which may be implemented as interconnected software modules or application programs.

The jobs agent in some embodiments initiates controls and or monitors the status of some or all storage or other information management operations previously performed currently being performed or scheduled to be performed by the information management system . For instance the jobs agent may access information management policies to determine when and how to initiate and control secondary copy and other information management operations as will be discussed further.

The user interface may include information processing and display software such as a graphical user interface GUI an application program interface API or other interactive interface s through which users and system processes can retrieve information about the status of information management operations e.g. storage operations or issue instructions to the information management system and its constituent components. Via the user interface users may optionally issue instructions to the components in the information management system regarding performance of storage and recovery operations. For example a user may modify a schedule concerning the number of pending secondary copy operations. As another example a user may employ the GUI to view the status of pending storage operations or to monitor the status of certain components in the information management system e.g. the amount of capacity left in a storage device .

An information management cell or storage operation cell or cell may generally include a logical and or physical grouping of a combination of hardware and software components associated with performing information management operations on electronic data typically one storage manager and at least one client computing device comprising data agent s and at least one media agent . For instance the components shown in may together form an information management cell. Multiple cells may be organized hierarchically. With this configuration cells may inherit properties from hierarchically superior cells or be controlled by other cells in the hierarchy automatically or otherwise . Alternatively in some embodiments cells may inherit or otherwise be associated with information management policies preferences information management metrics or other properties or characteristics according to their relative position in a hierarchy of cells. Cells may also be delineated and or organized hierarchically according to function geography architectural considerations or other factors useful or desirable in performing information management operations. A first cell may represent a geographic segment of an enterprise such as a Chicago office and a second cell may represent a different geographic segment such as a New York office. Other cells may represent departments within a particular office. Where delineated by function a first cell may perform one or more first types of information management operations e.g. one or more first types of secondary or other copies and a second cell may perform one or more second types of information management operations e.g. one or more second types of secondary or other copies .

The storage manager may also track information that permits it to select designate or otherwise identify content indices deduplication databases or similar databases or resources or data sets within its information management cell or another cell to be searched in response to certain queries. Such queries may be entered by the user via interaction with the user interface . In general the management agent allows multiple information management cells to communicate with one another. For example the information management system in some cases may be one information management cell of a network of multiple cells adjacent to one another or otherwise logically related in a WAN or LAN. With this arrangement the cells may be connected to one another through respective management agents .

For instance the management agent can provide the storage manager with the ability to communicate with other components within the information management system and or other cells within a larger information management system via network protocols and application programming interfaces APIs including e.g. HTTP HTTPS FTP REST virtualization software APIs cloud service provider APIs and hosted service provider APIs. Inter cell communication and hierarchy is described in greater detail in e.g. U.S. Pat. Nos. 7 747 579 and 7 343 453 which are incorporated by reference herein.

As discussed a variety of different types of applications can operate on a given client computing device including operating systems database applications e mail applications and virtual machines just to name a few. And as part of the process of creating and restoring secondary copies the client computing devices may be tasked with processing and preparing the primary data from these various different applications . Moreover the nature of the processing preparation can differ across clients and application types e.g. due to inherent structural and formatting differences among applications .

The one or more data agent s are therefore advantageously configured in some embodiments to assist in the performance of information management operations based on the type of data that is being protected at a client specific and or application specific level.

The data agent may be a software module or component that is generally responsible for managing initiating or otherwise assisting in the performance of information management operations in information management system generally as directed by storage manager . For instance the data agent may take part in performing data storage operations such as the copying archiving migrating and or replicating of primary data stored in the primary storage device s . The data agent may receive control information from the storage manager such as commands to transfer copies of data objects metadata and other payload data to the media agents .

In some embodiments a data agent may be distributed between the client computing device and storage manager and any other intermediate components or may be deployed from a remote location or its functions approximated by a remote process that performs some or all of the functions of data agent . In addition a data agent may perform some functions provided by a media agent or may perform other functions such as encryption and deduplication.

As indicated each data agent may be specialized for a particular application and the system can employ multiple application specific data agents each of which may perform information management operations e.g. perform backup migration and data recovery associated with a different application . For instance different individual data agents may be designed to handle Microsoft Exchange data Lotus Notes data Microsoft Windows file system data Microsoft Active Directory Objects data SQL Server data SharePoint data Oracle database data SAP database data virtual machines and or associated data and other types of data.

A file system data agent for example may handle data files and or other file system information. If a client computing device has two or more types of data a specialized data agent may be used for each data type to copy archive migrate and restore the client computing device data. For example to backup migrate and or restore all of the data on a Microsoft Exchange server the client computing device may use a Microsoft Exchange Mailbox data agent to back up the Exchange mailboxes a Microsoft Exchange Database data agent to back up the Exchange databases a Microsoft Exchange Public Folder data agent to back up the Exchange Public Folders and a Microsoft Windows File System data agent to back up the file system of the client computing device . In such embodiments these specialized data agents may be treated as four separate data agents even though they operate on the same client computing device .

Other embodiments may employ one or more generic data agents that can handle and process data from two or more different applications or that can handle and process multiple data types instead of or in addition to using specialized data agents . For example one generic data agent may be used to back up migrate and restore Microsoft Exchange Mailbox data and Microsoft Exchange Database data while another generic data agent may handle Microsoft Exchange Public Folder data and Microsoft Windows File System data.

Each data agent may be configured to access data and or metadata stored in the primary storage device s associated with the data agent and process the data as appropriate. For example during a secondary copy operation the data agent may arrange or assemble the data and metadata into one or more files having a certain format e.g. a particular backup or archive format before transferring the file s to a media agent or other component. The file s may include a list of files or other metadata. Each data agent can also assist in restoring data or metadata to primary storage devices from a secondary copy . For instance the data agent may operate in conjunction with the storage manager and one or more of the media agents to restore data from secondary storage device s .

As indicated above with respect to off loading certain responsibilities from the client computing devices to intermediate components such as the media agent s can provide a number of benefits including improved client computing device operation faster secondary copy operation performance and enhanced scalability. In one specific example which will be discussed below in further detail the media agent can act as a local cache of copied data and or metadata that it has stored to the secondary storage device s providing improved restore capabilities.

Generally speaking a media agent may be implemented as a software module that manages coordinates and facilitates the transmission of data as directed by the storage manager between a client computing device and one or more secondary storage devices . Whereas the storage manager controls the operation of the information management system the media agent generally provides a portal to secondary storage devices . For instance other components in the system interact with the media agents to gain access to data stored on the secondary storage devices whether it be for the purposes of reading writing modifying or deleting data. Moreover as will be described further media agents can generate and store information relating to characteristics of the stored data and or metadata or can generate and store other types of information that generally provides insight into the contents of the secondary storage devices .

Media agents can comprise separate nodes in the information management system e.g. nodes that are separate from the client computing devices storage manager and or secondary storage devices . In general a node within the information management system can be a logically and or physically separate component and in some cases is a component that is individually addressable or otherwise identifiable. In addition each media agent may operate on a dedicated secondary storage computing device in some cases while in other embodiments a plurality of media agents operate on the same secondary storage computing device .

A media agent and corresponding media agent database may be considered to be associated with a particular secondary storage device if that media agent is capable of one or more of routing and or storing data to the particular secondary storage device coordinating the routing and or storing of data to the particular secondary storage device retrieving data from the particular secondary storage device coordinating the retrieval of data from a particular secondary storage device and modifying and or deleting data retrieved from the particular secondary storage device .

While media agent s are generally associated with one or more secondary storage devices one or more media agents in certain embodiments are physically separate from the secondary storage devices . For instance the media agents may operate on secondary storage computing devices having different housings or packages than the secondary storage devices . In one example a media agent operates on a first server computer and is in communication with a secondary storage device s operating in a separate rack mounted RAID based system.

Where the information management system includes multiple media agents see e.g. a first media agent may provide failover functionality for a second failed media agent . In addition media agents can be dynamically selected for storage operations to provide load balancing. Failover and load balancing are described in greater detail below.

In operation a media agent associated with a particular secondary storage device may instruct the secondary storage device to perform an information management operation. For instance a media agent may instruct a tape library to use a robotic arm or other retrieval means to load or eject a certain storage media and to subsequently archive migrate or retrieve data to or from that media e.g. for the purpose of restoring the data to a client computing device . As another example a secondary storage device may include an array of hard disk drives or solid state drives organized in a RAID configuration and the media agent may forward a logical unit number LUN and other appropriate information to the array which uses the received information to execute the desired storage operation. The media agent may communicate with a secondary storage device via a suitable communications link such as a SCSI or Fiber Channel link.

As shown each media agent may maintain an associated media agent database . The media agent database may be stored in a disk or other storage device not shown that is local to the secondary storage computing device on which the media agent operates. In other cases the media agent database is stored remotely from the secondary storage computing device .

The media agent database can include among other things an index see e.g. which comprises information generated during secondary copy operations and other storage or information management operations. The index provides a media agent or other component with a fast and efficient mechanism for locating secondary copies or other data stored in the secondary storage devices . In some cases the index does not form a part of and is instead separate from the media agent database .

A media agent index or other data structure associated with the particular media agent may include information about the stored data. For instance for each secondary copy the index may include metadata such as a list of the data objects e.g. files subdirectories database objects mailbox objects etc. a path to the secondary copy on the corresponding secondary storage device location information indicating where the data objects are stored in the secondary storage device when the data objects were created or modified etc. Thus the index includes metadata associated with the secondary copies that is readily available for use without having to be first retrieved from the secondary storage device . In yet further embodiments some or all of the information in index may instead or additionally be stored along with the secondary copies of data in a secondary storage device . In some embodiments the secondary storage devices can include sufficient information to perform a bare metal restore where the operating system of a failed client computing device or other restore target is automatically rebuilt as part of a restore operation.

Because the index maintained in the media agent database may operate as a cache it can also be referred to as an index cache. In such cases information stored in the index cache typically comprises data that reflects certain particulars about storage operations that have occurred relatively recently. After some triggering event such as after a certain period of time elapses or the index cache reaches a particular size the index cache may be copied or migrated to a secondary storage device s . This information may need to be retrieved and uploaded back into the index cache or otherwise restored to a media agent to facilitate retrieval of data from the secondary storage device s . In some embodiments the cached information may include format or containerization information related to archives or other files stored on the storage device s . In this manner the index cache allows for accelerated restores.

In some alternative embodiments the media agent generally acts as a coordinator or facilitator of storage operations between client computing devices and corresponding secondary storage devices but does not actually write the data to the secondary storage device . For instance the storage manager or the media agent may instruct a client computing device and secondary storage device to communicate with one another directly. In such a case the client computing device transmits the data directly or via one or more intermediary components to the secondary storage device according to the received instructions and vice versa. In some such cases the media agent may still receive process and or maintain metadata related to the storage operations. Moreover in these embodiments the payload data can flow through the media agent for the purposes of populating the index cache maintained in the media agent database but not for writing to the secondary storage device .

The media agent and or other components such as the storage manager may in some cases incorporate additional functionality such as data classification content indexing deduplication encryption compression and the like. Further details regarding these and other functions are described below.

As described certain functions of the information management system can be distributed amongst various physical and or logical components in the system. For instance one or more of the storage manager data agents and media agents may operate on computing devices that are physically separate from one another. This architecture can provide a number of benefits.

For instance hardware and software design choices for each distributed component can be targeted to suit its particular function. The secondary computing devices on which the media agents operate can be tailored for interaction with associated secondary storage devices and provide fast index cache operation among other specific tasks. Similarly the client computing device s can be selected to effectively service the applications thereon in order to efficiently produce and store primary data .

Moreover in some cases one or more of the individual components in the information management system can be distributed to multiple separate computing devices. As one example for large file systems where the amount of data stored in the management database is relatively large the database may be migrated to or otherwise reside on a specialized database server e.g. an SQL server separate from a server that implements the other functions of the storage manager . This distributed configuration can provide added protection because the database can be protected with standard database utilities e.g. SQL log shipping or database replication independent from other functions of the storage manager . The database can be efficiently replicated to a remote site for use in the event of a disaster or other data loss at the primary site. Or the database can be replicated to another computing device within the same site such as to a higher performance machine in the event that a storage manager host device can no longer service the needs of a growing information management system .

The distributed architecture also provides both scalability and efficient component utilization. shows an embodiment of the information management system including a plurality of client computing devices and associated data agents as well as a plurality of secondary storage computing devices and associated media agents .

Additional components can be added or subtracted based on the evolving needs of the information management system . For instance depending on where bottlenecks are identified administrators can add additional client computing devices secondary storage computing devices and corresponding media agents and or secondary storage devices . Moreover where multiple fungible components are available load balancing can be implemented to dynamically address identified bottlenecks. As an example the storage manager may dynamically select which media agents and or secondary storage devices to use for storage operations based on a processing load analysis of the media agents and or secondary storage devices respectively.

Moreover each client computing device in some embodiments can communicate with among other components any of the media agents e.g. as directed by the storage manager . And each media agent may be able to communicate with among other components any of the secondary storage devices e.g. as directed by the storage manager . Thus operations can be routed to the secondary storage devices in a dynamic and highly flexible manner to provide load balancing failover and the like. Further examples of scalable systems capable of dynamic storage operations and of systems capable of performing load balancing and fail over are provided in U.S. Pat. No. 7 246 207 which is incorporated by reference herein.

In alternative configurations certain components are not distributed and may instead reside and execute on the same computing device. For example in some embodiments one or more data agents and the storage manager operate on the same client computing device . In another embodiment one or more data agents and one or more media agents operate on a single computing device.

In order to protect and leverage stored data the information management system can be configured to perform a variety of information management operations. As will be described these operations can generally include secondary copy and other data movement operations processing and data manipulation operations analysis reporting and management operations. The operations described herein may be performed on any type of computing device e.g. between two computers connected via a LAN to a mobile client telecommunications device connected to a server via a WLAN to any manner of client computing device coupled to a cloud storage target etc. without limitation.

Data movement operations according to certain embodiments are generally operations that involve the copying or migration of data e.g. payload data between different locations in the information management system in an original native and or one or more different formats. For example data movement operations can include operations in which stored data is copied migrated or otherwise transferred from one or more first storage devices to one or more second storage devices such as from primary storage device s to secondary storage device s from secondary storage device s to different secondary storage device s from secondary storage devices to primary storage devices or from primary storage device s to different primary storage device s .

Data movement operations can include by way of example backup operations archive operations information lifecycle management operations such as hierarchical storage management operations replication operations e.g. continuous data replication operations snapshot operations deduplication or single instancing operations auxiliary copy operations and the like. As will be discussed some of these operations involve the copying migration or other movement of data without actually creating multiple distinct copies. Nonetheless some or all of these operations are referred to as copy operations for simplicity.

A backup operation creates a copy of a version of data e.g. one or more files or other data units in primary data at a particular point in time. Each subsequent backup copy may be maintained independently of the first. Further a backup copy in some embodiments is generally stored in a form that is different than the native format e.g. a backup format. This can be in contrast to the version in primary data from which the backup copy is derived and which may instead be stored in a native format of the source application s . In various cases backup copies can be stored in a format in which the data is compressed encrypted deduplicated and or otherwise modified from the original application format. For example a backup copy may be stored in a backup format that facilitates compression and or efficient long term storage.

Backup copies can have relatively long retention periods as compared to primary data and may be stored on media with slower retrieval times than primary data and certain other types of secondary copies . On the other hand backups may have relatively shorter retention periods than some other types of secondary copies such as archive copies described below . Backups may sometimes be stored at an offsite location.

Backup operations can include full backups differential backups incremental backups synthetic full backups and or creating a reference copy. A full backup or standard full backup in some embodiments is generally a complete image of the data to be protected. However because full backup copies can consume a relatively large amount of storage it can be useful to use a full backup copy as a baseline and only store changes relative to the full backup copy for subsequent backup copies.

For instance a differential backup operation or cumulative incremental backup operation tracks and stores changes that have occurred since the last full backup. Differential backups can grow quickly in size but can provide relatively efficient restore times because a restore can be completed in some cases using only the full backup copy and the latest differential copy.

An incremental backup operation generally tracks and stores changes since the most recent backup copy of any type which can greatly reduce storage utilization. In some cases however restore times can be relatively long in comparison to full or differential backups because completing a restore operation may involve accessing a full backup in addition to multiple incremental backups.

Synthetic full backups generally consolidate data without directly backing up data from the client computing device. A synthetic full backup is created from the most recent full backup i.e. standard or synthetic and subsequent incremental and or differential backups. The resulting synthetic full backup is identical to what would have been created had the last backup for the subclient been a standard full backup. Unlike standard full incremental and differential backups a synthetic full backup does not actually transfer data from a client computer to the backup media because it operates as a backup consolidator. A synthetic full backup extracts the index data of each participating subclient. Using this index data and the previously backed up user data images it builds new full backup images one for each subclient. The new backup images consolidate the index and user data stored in the related incremental differential and previous full backups in some embodiments creating an archive file at the subclient level.

Any of the above types of backup operations can be at the volume level file level or block level. Volume level backup operations generally involve the copying of a data volume e.g. a logical disk or partition as a whole. In a file level backup the information management system may generally track changes to individual files and includes copies of files in the backup copy. In the case of a block level backup files are broken into constituent blocks and changes are tracked at the block level. Upon restore the information management system reassembles the blocks into files in a transparent fashion.

Far less data may actually be transferred and copied to the secondary storage devices during a file level copy than a volume level copy. Likewise a block level copy may involve the transfer of less data than a file level copy resulting in faster execution times. However restoring a relatively higher granularity copy can result in longer restore times. For instance when restoring a block level copy the process of locating constituent blocks can sometimes result in longer restore times as compared to file level backups. Similar to backup operations the other types of secondary copy operations described herein can also be implemented at either the volume level file level or block level.

For example in some embodiments a reference copy may comprise copy ies of selected objects from backed up data typically to help organize data by keeping contextual information from multiple sources together and or help retain specific data for a longer period of time such as for legal hold needs. A reference copy generally maintains data integrity and when the data is restored it may be viewed in the same format as the source data. In some embodiments a reference copy is based on a specialized client individual subclient and associated information management policies e.g. storage policy retention policy etc. that are administered within information management system .

Because backup operations generally involve maintaining a version of the copied data in primary data and also maintaining backup copies in secondary storage device s they can consume significant storage capacity. To help reduce storage consumption an archive operation according to certain embodiments creates a secondary copy by both copying and removing source data. Or seen another way archive operations can involve moving some or all of the source data to the archive destination. Thus data satisfying criteria for removal e.g. data of a threshold age or size may be removed from source storage. The source data may be primary data or a secondary copy depending on the situation. As with backup copies archive copies can be stored in a format in which the data is compressed encrypted deduplicated and or otherwise modified from the format of the original application or source copy. In addition archive copies may be retained for relatively long periods of time e.g. years and in some cases are never deleted. Archive copies are generally retained for longer periods of time than backup copies for example. In certain embodiments archive copies may be made and kept for extended periods in order to meet compliance regulations.

Moreover when primary data is archived in some cases the corresponding primary data or a portion thereof is deleted when creating the archive copy. Thus archiving can serve the purpose of freeing up space in the primary storage device s and easing the demand on computational resources on client computing device . Similarly when a secondary copy is archived the secondary copy may be deleted and an archive copy can therefore serve the purpose of freeing up space in secondary storage device s . In contrast source copies often remain intact when creating backup copies. Examples of compatible data archiving operations are provided in U.S. Pat. No. 7 107 298 which is incorporated by reference herein.

Snapshot operations can provide a relatively lightweight efficient mechanism for protecting data. From an end user viewpoint a snapshot may be thought of as an instant image of the primary data at a given point in time and may include state and or status information relative to an application that creates manages the primary data . In one embodiment a snapshot may generally capture the directory structure of an object in primary data such as a file or volume or other data set at a particular moment in time and may also preserve file attributes and contents. A snapshot in some cases is created relatively quickly e.g. substantially instantly using a minimum amount of file space but may still function as a conventional file system backup.

A hardware snapshot or hardware based snapshot operation can be a snapshot operation where a target storage device e.g. a primary storage device or a secondary storage device performs the snapshot operation in a self contained fashion substantially independently using hardware firmware and or software operating on the storage device itself. For instance the storage device may be capable of performing snapshot operations upon request generally without intervention or oversight from any of the other components in the information management system . In this manner hardware snapshots can off load other components of information management system from processing involved in snapshot creation and management.

A software snapshot or software based snapshot operation on the other hand can be a snapshot operation in which one or more other components in information management system e.g. client computing devices data agents etc. implement a software layer that manages the snapshot operation via interaction with the target storage device. For instance the component executing the snapshot management software layer may derive a set of pointers and or data that represents the snapshot. The snapshot management software layer may then transmit the same to the target storage device along with appropriate instructions for writing the snapshot.

Some types of snapshots do not actually create another physical copy of all the data as it existed at the particular point in time but may simply create pointers that are able to map files and directories to specific memory locations e.g. to specific disk blocks where the data resides as it existed at the particular point in time. For example a snapshot copy may include a set of pointers derived from the file system or from an application. In some other cases the snapshot may be created at the block level such that creation of the snapshot occurs without awareness of the file system. Each pointer points to a respective stored data block so that collectively the set of pointers reflect the storage location and state of the data object e.g. file s or volume s or data set s at a particular point in time when the snapshot copy was created.

An initial snapshot may use only a small amount of disk space needed to record a mapping or other data structure representing or otherwise tracking the blocks that correspond to the current state of the file system. Additional disk space is usually required only when files and directories are modified later on. Furthermore when files are modified typically only the pointers which map to blocks are copied not the blocks themselves. In some embodiments for example in the case of copy on write snapshots when a block changes in primary storage the block is copied to secondary storage or cached in primary storage before the block is overwritten in primary storage and the pointer to that block is changed to reflect the new location of that block. The snapshot mapping of file system data may also be updated to reflect the changed block s at that particular point in time. In some other cases a snapshot includes a full physical copy of all or substantially all of the data represented by the snapshot. Further examples of snapshot operations are provided in U.S. Pat. No. 7 529 782 which is incorporated by reference herein.

A snapshot copy in many cases can be made quickly and without significantly impacting primary computing resources because large amounts of data need not be copied or moved. In some embodiments a snapshot may exist as a virtual file system parallel to the actual file system. Users in some cases gain read only access to the record of files and directories of the snapshot. By electing to restore primary data from a snapshot taken at a given point in time users may also return the current file system to the state of the file system that existed when the snapshot was taken.

Another type of secondary copy operation is a replication operation. Some types of secondary copies are used to periodically capture images of primary data at particular points in time e.g. backups archives and snapshots . However it can also be useful for recovery purposes to protect primary data in a more continuous fashion by replicating the primary data substantially as changes occur. In some cases a replication copy can be a mirror copy for instance where changes made to primary data are mirrored or substantially immediately copied to another location e.g. to secondary storage device s . By copying each write operation to the replication copy two storage systems are kept synchronized or substantially synchronized so that they are virtually identical at approximately the same time. Where entire disk volumes are mirrored however mirroring can require significant amount of storage space and utilizes a large amount of processing resources.

According to some embodiments storage operations are performed on replicated data that represents a recoverable state or known good state of a particular application running on the source system. For instance in certain embodiments known good replication copies may be viewed as copies of primary data . This feature allows the system to directly access copy restore backup or otherwise manipulate the replication copies as if the data were the live primary data . This can reduce access time storage utilization and impact on source applications among other benefits. Based on known good state information the information management system can replicate sections of application data that represent a recoverable state rather than rote copying of blocks of data. Examples of compatible replication operations e.g. continuous data replication are provided in U.S. Pat. No. 7 617 262 which is incorporated by reference herein.

Another type of data movement operation is deduplication or single instance storage which is useful to reduce the amount of non primary data. For instance some or all of the above described secondary storage operations can involve deduplication in some fashion. New data is read broken down into portions e.g. sub file level blocks files etc. of a selected granularity compared with blocks that are already in secondary storage and only the new blocks are stored. Blocks that already exist are represented as pointers to the already stored data.

In order to streamline the comparison process the information management system may calculate and or store signatures e.g. hashes or cryptographically unique IDs corresponding to the individual data blocks in a database and compare the signatures instead of comparing entire data blocks. In some cases only a single instance of each element is stored and deduplication operations may therefore be referred to interchangeably as single instancing operations. Depending on the implementation however deduplication or single instancing operations can store more than one instance of certain data blocks but nonetheless significantly reduce data redundancy. Depending on the embodiment deduplication blocks can be of fixed or variable length. Using variable length blocks can provide enhanced deduplication by responding to changes in the data stream but can involve complex processing. In some cases the information management system utilizes a technique for dynamically aligning deduplication blocks e.g. fixed length blocks based on changing content in the data stream as described in U.S. Pat. No. 8 364 652 which is incorporated by reference herein.

The information management system can perform deduplication in a variety of manners at a variety of locations in the information management system . For instance in some embodiments the information management system implements target side deduplication by deduplicating data e.g. secondary copies stored in the secondary storage devices . In some such cases the media agents are generally configured to manage the deduplication process. For instance one or more of the media agents maintain a corresponding deduplication database that stores deduplication information e.g. datablock signatures . Examples of such a configuration are provided in U.S. Pat. Pub. No. 2012 0150826 which is incorporated by reference herein. Instead of or in combination with target side deduplication deduplication can also be performed on the source side or client side e.g. to reduce the amount of traffic between the media agents and the client computing device s and or reduce redundant data stored in the primary storage devices . According to various implementations one or more of the storage devices of the target side and or source side of an operation can be cloud based storage devices. Thus the target side and or source side deduplication can be cloud based deduplication. In particular as discussed previously the storage manager may communicate with other components within the information management system via network protocols and cloud service provider APIs to facilitate cloud based deduplication single instancing. Examples of such deduplication techniques are provided in U.S. Pat. Pub. No. 2012 0150818 which is incorporated by reference herein. Some other compatible deduplication single instancing techniques are described in U.S. Pat. Pub. Nos. 2006 0224846 and 2009 0319534 which are incorporated by reference herein.

In some embodiments files and other data over their lifetime move from more expensive quick access storage to less expensive slower access storage. Operations associated with moving data through various tiers of storage are sometimes referred to as information lifecycle management ILM operations.

One type of ILM operation is a hierarchical storage management HSM operation. A HSM operation is generally an operation for automatically moving data between classes of storage devices such as between high cost and low cost storage devices. For instance an HSM operation may involve movement of data from primary storage devices to secondary storage devices or between tiers of secondary storage devices . With each tier the storage devices may be progressively relatively cheaper have relatively slower access restore times etc. For example movement of data between tiers may occur as data becomes less important over time.

In some embodiments an HSM operation is similar to an archive operation in that creating an HSM copy may though not always involve deleting some of the source data e.g. according to one or more criteria related to the source data. For example an HSM copy may include data from primary data or a secondary copy that is larger than a given size threshold or older than a given age threshold and that is stored in a backup format.

Often and unlike some types of archive copies HSM data that is removed or aged from the source is replaced by a logical reference pointer or stub. The reference pointer or stub can be stored in the primary storage device or other source storage device such as a secondary storage device to replace the deleted source data and to point to or otherwise indicate the new location in a secondary storage device .

According to one example files are generally moved between higher and lower cost storage depending on how often the files are accessed. When a user requests access to the HSM data that has been removed or migrated the information management system uses the stub to locate the data and may make recovery of the data appear transparent even though the HSM data may be stored at a location different from other source data. In this manner the data appears to the user e.g. in file system browsing windows and the like as if it still resides in the source location e.g. in a primary storage device . The stub may also include some metadata associated with the corresponding data so that a file system and or application can provide some information about the data object and or a limited functionality version e.g. a preview of the data object.

An HSM copy may be stored in a format other than the native application format e.g. where the data is compressed encrypted deduplicated and or otherwise modified from the original native application format . In some cases copies which involve the removal of data from source storage and the maintenance of stub or other logical reference information on source storage may be referred to generally as on line archive copies . On the other hand copies which involve the removal of data from source storage without the maintenance of stub or other logical reference information on source storage may be referred to as off line archive copies . Examples of HSM and ILM techniques are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

An auxiliary copy is generally a copy operation in which a copy is created of an existing secondary copy . For instance an initial secondary copy may be generated using or otherwise be derived from primary data or other data residing in the secondary storage subsystem whereas an auxiliary copy is generated from the initial secondary copy . Auxiliary copies can be used to create additional standby copies of data and may reside on different secondary storage devices than the initial secondary copies . Thus auxiliary copies can be used for recovery purposes if initial secondary copies become unavailable. Exemplary compatible auxiliary copy techniques are described in further detail in U.S. Pat. No. 8 230 195 which is incorporated by reference herein.

The information management system may also perform disaster recovery operations that make or retain disaster recovery copies often as secondary high availability disk copies. The information management system may create secondary disk copies and store the copies at disaster recovery locations using auxiliary copy or replication operations such as continuous data replication technologies. Depending on the particular data protection goals disaster recovery locations can be remote from the client computing devices and primary storage devices remote from some or all of the secondary storage devices or both.

Data analysis reporting and management operations can be different than data movement operations in that they do not necessarily involve the copying migration or other transfer of data e.g. primary data or secondary copies between different locations in the system. For instance data analysis operations may involve processing e.g. offline processing or modification of already stored primary data and or secondary copies . However in some embodiments data analysis operations are performed in conjunction with data movement operations. Some data analysis operations include content indexing operations and classification operations which can be useful in leveraging the data under management to provide enhanced search and other features. Other data analysis operations such as compression and encryption can provide data reduction and security benefits respectively.

In some embodiments the information management system analyzes and indexes characteristics content and metadata associated with the primary data and or secondary copies . The content indexing can be used to identify files or other data objects having pre defined content e.g. user defined keywords or phrases other keywords phrases that are not defined by a user etc. and or metadata e.g. email metadata such as to from cc bcc attachment name received time etc. .

The information management system generally organizes and catalogues the results in a content index which may be stored within the media agent database for example. The content index can also include the storage locations of or pointer references to the indexed data in the primary data or secondary copies as appropriate. The results may also be stored in the form of a content index database or otherwise elsewhere in the information management system e.g. in the primary storage devices or in the secondary storage device . Such index data provides the storage manager or another component with an efficient mechanism for locating primary data and or secondary copies of data objects that match particular criteria.

For instance search criteria can be specified by a user through user interface of the storage manager . In some cases the information management system analyzes data and or metadata in secondary copies to create an off line content index without significantly impacting the performance of the client computing devices . Depending on the embodiment the system can also implement on line content indexing e.g. of primary data . Examples of compatible content indexing techniques are provided in U.S. Pat. No. 8 170 995 which is incorporated by reference herein.

One or more components can be configured to scan data and or associated metadata for classification purposes to populate a database or other data structure of information which can be referred to as a data classification database or a metabase . Depending on the embodiment the data classification database s can be organized in a variety of different ways including centralization logical sub divisions and or physical sub divisions. For instance one or more centralized data classification databases may be associated with different subsystems or tiers within the information management system . As an example there may be a first centralized metabase associated with the primary storage subsystem and a second centralized metabase associated with the secondary storage subsystem . In other cases there may be one or more metabases associated with individual components e.g. client computing devices and or media agents . In some embodiments a data classification database metabase may reside as one or more data structures within management database or may be otherwise associated with storage manager .

In some cases the metabase s may be included in separate database s and or on separate storage device s from primary data and or secondary copies such that operations related to the metabase do not significantly impact performance on other components in the information management system . In other cases the metabase s may be stored along with primary data and or secondary copies . Files or other data objects can be associated with identifiers e.g. tag entries etc. in the media agent or other indices to facilitate searches of stored data objects. Among a number of other benefits the metabase can also allow efficient automatic identification of files or other data objects to associate with secondary copy or other information management operations e.g. in lieu of scanning an entire file system . Examples of compatible metabases and data classification operations are provided in U.S. Pat. Nos. 8 229 954 and 7 747 579 which are incorporated by reference herein.

The information management system in some cases is configured to process data e.g. files or other data objects secondary copies etc. according to an appropriate encryption algorithm e.g. Blowfish Advanced Encryption Standard AES Triple Data Encryption Standard 3 DES etc. to limit access and provide data security in the information management system . The information management system in some cases encrypts the data at the client level such that the client computing devices e.g. the data agents encrypt the data prior to forwarding the data to other components e.g. before sending the data to media agents during a secondary copy operation. In such cases the client computing device may maintain or have access to an encryption key or passphrase for decrypting the data upon restore. Encryption can also occur when creating copies of secondary copies e.g. when creating auxiliary copies or archive copies. In yet further embodiments the secondary storage devices can implement built in high performance hardware encryption.

Certain embodiments leverage the integrated ubiquitous nature of the information management system to provide useful system wide management and reporting functions. Examples of some compatible management and reporting techniques are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

Operations management can generally include monitoring and managing the health and performance of information management system by without limitation performing error tracking generating granular storage performance metrics e.g. job success failure information deduplication efficiency etc. generating storage modeling and costing information and the like. As an example a storage manager or other component in the information management system may analyze traffic patterns and suggest and or automatically route data via a particular route to minimize congestion. In some embodiments the system can generate predictions relating to storage operations or storage operation information. Such predictions which may be based on a trending analysis may predict various network operations or resource usage such as network traffic levels storage media use use of bandwidth of communication links use of media agent components etc. Further examples of traffic analysis trend analysis prediction generation and the like are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

In some configurations a master storage manager may track the status of storage operation cells in a hierarchy such as the status of jobs system components system resources and other items by communicating with storage managers or other components in the respective storage operation cells. Moreover the master storage manager may track the status of its associated storage operation cells and information management operations by receiving periodic status updates from the storage managers or other components in the respective cells regarding jobs system components system resources and other items. In some embodiments a master storage manager may store status information and other information regarding its associated storage operation cells and other system information in its index or other location .

The master storage manager or other component may also determine whether certain storage related criteria or other criteria are satisfied and perform an action or trigger event e.g. data migration in response to the criteria being satisfied such as where a storage threshold is met for a particular volume or where inadequate protection exists for certain data. For instance in some embodiments data from one or more storage operation cells is used to dynamically and automatically mitigate recognized risks and or to advise users of risks or suggest actions to mitigate these risks. For example an information management policy may specify certain requirements e.g. that a storage device should maintain a certain amount of free space that secondary copies should occur at a particular interval that data should be aged and migrated to other storage after a particular period that data on a secondary volume should always have a certain level of availability and be restorable within a given time period that data on a secondary volume may be mirrored or otherwise migrated to a specified number of other volumes etc. . If a risk condition or other criterion is triggered the system may notify the user of these conditions and may suggest or automatically implement an action to mitigate or otherwise address the risk. For example the system may indicate that data from a primary copy should be migrated to a secondary storage device to free space on the primary storage device . Examples of the use of risk factors and other triggering criteria are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

In some embodiments the system may also determine whether a metric or other indication satisfies particular storage criteria and if so perform an action. For example as previously described a storage policy or other definition might indicate that a storage manager should initiate a particular action if a storage metric or other indication drops below or otherwise fails to satisfy specified criteria such as a threshold of data protection. Examples of such metrics are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

In some embodiments risk factors may be quantified into certain measurable service or risk levels for ease of comprehension. For example certain applications and associated data may be considered to be more important by an enterprise than other data and services. Financial compliance data for example may be of greater importance than marketing materials etc. Network administrators may assign priority values or weights to certain data and or applications corresponding to the relative importance. The level of compliance of storage operations specified for these applications may also be assigned a certain value. Thus the health impact and overall importance of a service may be determined such as by measuring the compliance value and calculating the product of the priority value and the compliance value to determine the service level and comparing it to certain operational thresholds to determine whether it is acceptable. Further examples of the service level determination are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

The system may additionally calculate data costing and data availability associated with information management operation cells according to an embodiment of the invention. For instance data received from the cell may be used in conjunction with hardware related information and other information about system elements to determine the cost of storage and or the availability of particular data in the system. Exemplary information generated could include how fast a particular department is using up available storage space how long data would take to recover over a particular system pathway from a particular secondary storage device costs over time etc. Moreover in some embodiments such information may be used to determine or predict the overall cost associated with the storage of certain information. The cost associated with hosting a certain application may be based at least in part on the type of media on which the data resides for example. Storage devices may be assigned to a particular cost categories for example. Further examples of costing techniques are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

Any of the above types of information e.g. information related to trending predictions job cell or component status risk service level costing etc. can generally be provided to users via the user interface in a single integrated view or console not shown . The console may support a reporting capability that allows for the generation of a variety of reports which may be tailored to a particular aspect of information management. Report types may include scheduling event management media management and data aging. Available reports may also include backup history data aging history auxiliary copy history job history library and drive media in library restore history and storage policy etc. without limitation. Such reports may be specified and created at a certain point in time as a system analysis forecasting or provisioning tool. Integrated reports may also be generated that illustrate storage and performance metrics risks and storage costing information. Moreover users may create their own reports based on specific needs.

The integrated user interface can include an option to show a virtual view of the system that graphically depicts the various components in the system using appropriate icons. As one example the user interface may provide a graphical depiction of one or more primary storage devices the secondary storage devices data agents and or media agents and their relationship to one another in the information management system . The operations management functionality can facilitate planning and decision making. For example in some embodiments a user may view the status of some or all jobs as well as the status of each component of the information management system . Users may then plan and make decisions based on this data. For instance a user may view high level information regarding storage operations for the information management system such as job status component status resource status e.g. communication pathways etc. and other information. The user may also drill down or use other means to obtain more detailed information regarding a particular component job or the like. Further examples of some reporting techniques and associated interfaces providing an integrated view of an information management system are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

The information management system can also be configured to perform system wide e discovery operations in some embodiments. In general e discovery operations provide a unified collection and search capability for data in the system such as data stored in the secondary storage devices e.g. backups archives or other secondary copies . For example the information management system may construct and maintain a virtual repository for data stored in the information management system that is integrated across source applications different storage device types etc. According to some embodiments e discovery utilizes other techniques described herein such as data classification and or content indexing.

As indicated previously an information management policy can include a data structure or other information source that specifies a set of parameters e.g. criteria and rules associated with secondary copy and or other information management operations.

One type of information management policy is a storage policy. According to certain embodiments a storage policy generally comprises a data structure or other information source that defines or includes information sufficient to determine a set of preferences or other criteria for performing information management operations. Storage policies can include one or more of the following items 1 what data will be associated with the storage policy 2 a destination to which the data will be stored 3 datapath information specifying how the data will be communicated to the destination 4 the type of storage operation to be performed and 5 retention information specifying how long the data will be retained at the destination see e.g. .

As an illustrative example data associated with a storage policy can be logically organized into groups. In some cases these logical groupings can be referred to as sub clients . A sub client may represent static or dynamic associations of portions of a data volume. Sub clients may represent mutually exclusive portions. Thus in certain embodiments a portion of data may be given a label and the association is stored as a static entity in an index database or other storage location. Sub clients may also be used as an effective administrative scheme of organizing data according to data type department within the enterprise storage preferences or the like. Depending on the configuration sub clients can correspond to files folders virtual machines databases etc. In one exemplary scenario an administrator may find it preferable to separate e mail data from financial data using two different sub clients.

A storage policy can define where data is stored by specifying a target or destination storage device or group of storage devices . For instance where the secondary storage device includes a group of disk libraries the storage policy may specify a particular disk library for storing the sub clients associated with the policy. As another example where the secondary storage devices include one or more tape libraries the storage policy may specify a particular tape library for storing the sub clients associated with the storage policy and may also specify a drive pool and a tape pool defining a group of tape drives and a group of tapes respectively for use in storing the sub client data. While information in the storage policy can be statically assigned in some cases some or all of the information in the storage policy can also be dynamically determined based on criteria which can be set forth in the storage policy. For instance based on such criteria a particular destination storage device s or other parameter of the storage policy may be determined based on characteristics associated with the data involved in a particular storage operation device availability e.g. availability of a secondary storage device or a media agent network status and conditions e.g. identified bottlenecks user credentials and the like .

Datapath information can also be included in the storage policy. For instance the storage policy may specify network pathways and components to utilize when moving the data to the destination storage device s . In some embodiments the storage policy specifies one or more media agents for conveying data associated with the storage policy between the source e.g. one or more host client computing devices and destination e.g. a particular target secondary storage device .

A storage policy can also specify the type s of operations associated with the storage policy such as a backup archive snapshot auxiliary copy or the like. Retention information can specify how long the data will be kept depending on organizational needs e.g. a number of days months years etc. 

Another type of information management policy is a scheduling policy which specifies when and how often to perform operations. Scheduling parameters may specify with what frequency e.g. hourly weekly daily event based etc. or under what triggering conditions secondary copy or other information management operations will take place. Scheduling policies in some cases are associated with particular components such as particular logical groupings of data associated with a storage policy e.g. a sub client client computing device and the like. In one configuration a separate scheduling policy is maintained for particular logical groupings of data on a client computing device . The scheduling policy specifies that those logical groupings are to be moved to secondary storage devices every hour according to storage policies associated with the respective sub clients.

When adding a new client computing device administrators can manually configure information management policies and or other settings e.g. via the user interface . However this can be an involved process resulting in delays and it may be desirable to begin data protection operations quickly without awaiting human intervention. Thus in some embodiments the information management system automatically applies a default configuration to client computing device . As one example when one or more data agent s are installed on one or more client computing devices the installation script may register the client computing device with the storage manager which in turn applies the default configuration to the new client computing device . In this manner data protection operations can begin substantially immediately. The default configuration can include a default storage policy for example and can specify any appropriate information sufficient to begin data protection operations. This can include a type of data protection operation scheduling information a target secondary storage device data path information e.g. a particular media agent and the like.

Other types of information management policies are possible including one or more audit or security policies. An audit policy is a set of preferences rules and or criteria that protect sensitive data in the information management system . For example an audit policy may define sensitive objects as files or objects that contain particular keywords e.g. confidential or privileged and or are associated with particular keywords e.g. in metadata or particular flags e.g. in metadata identifying a document or email as personal confidential etc. . An audit policy may further specify rules for handling sensitive objects. As an example an audit policy may require that a reviewer approve the transfer of any sensitive objects to a cloud storage site and that if approval is denied for a particular sensitive object the sensitive object should be transferred to a local primary storage device instead. To facilitate this approval the audit policy may further specify how a secondary storage computing device or other system component should notify a reviewer that a sensitive object is slated for transfer.

Another type of information management policy is a provisioning policy. A provisioning policy can include a set of preferences priorities rules and or criteria that specify how client computing devices or groups thereof may utilize system resources such as available storage on cloud storage and or network bandwidth. A provisioning policy specifies for example data quotas for particular client computing devices e.g. a number of gigabytes that can be stored monthly quarterly or annually . The storage manager or other components may enforce the provisioning policy. For instance the media agents may enforce the policy when transferring data to secondary storage devices . If a client computing device exceeds a quota a budget for the client computing device or associated department is adjusted accordingly or an alert may trigger.

While the above types of information management policies have been described as separate policies one or more of these can be generally combined into a single information management policy . For instance a storage policy may also include or otherwise be associated with one or more scheduling audit or provisioning policies or operational parameters thereof. Moreover while storage policies are typically associated with moving and storing data other policies may be associated with other types of information management operations. The following is a non exhaustive list of items the information management policies may specify 

Policies can additionally specify or depend on a variety of historical or current criteria that may be used to determine which rules to apply to a particular data object system component or information management operation such as 

As indicated by the dashed box the second media agent B and the tape library B are off site and may therefore be remotely located from the other components in the information management system e.g. in a different city office building etc. . Indeed off site may refer to a magnetic tape located in storage which must be manually retrieved and loaded into a tape drive to be read. In this manner information stored on the tape library B may provide protection in the event of a disaster or other failure.

The file system sub client and its associated primary data A in certain embodiments generally comprise information generated by the file system and or operating system of the client computing device and can include for example file system data e.g. regular files file tables mount points etc. operating system data e.g. registries event logs etc. and the like. The e mail sub client on the other hand and its associated primary data B include data generated by an e mail application operating on the client computing device and can include mailbox information folder information emails attachments associated database information and the like. As described above the sub clients can be logical containers and the data included in the corresponding primary data A B may or may not be stored contiguously.

The exemplary storage policy A includes backup copy preferences or rule set disaster recovery copy preferences rule set and compliance copy preferences or rule set . The backup copy rule set specifies that it is associated with a file system sub client and an email sub client . Each of these sub clients are associated with the particular client computing device . The backup copy rule set further specifies that the backup operation will be written to the disk library A and designates a particular media agent A to convey the data to the disk library A. Finally the backup copy rule set specifies that backup copies created according to the rule set are scheduled to be generated on an hourly basis and to be retained for 30 days. In some other embodiments scheduling information is not included in the storage policy A and is instead specified by a separate scheduling policy.

The disaster recovery copy rule set is associated with the same two sub clients . However the disaster recovery copy rule set is associated with the tape library B unlike the backup copy rule set . Moreover the disaster recovery copy rule set specifies that a different media agent namely B will be used to convey the data to the tape library B. As indicated disaster recovery copies created according to the rule set will be retained for 60 days and will be generated on a daily basis. Disaster recovery copies generated according to the disaster recovery copy rule set can provide protection in the event of a disaster or other catastrophic data loss that would affect the backup copy A maintained on the disk library A.

The compliance copy rule set is only associated with the email sub client and not the file system sub client . Compliance copies generated according to the compliance copy rule set will therefore not include primary data A from the file system sub client . For instance the organization may be under an obligation to store and maintain copies of email data for a particular period of time e.g. 10 years to comply with state or federal regulations while similar regulations do not apply to the file system data. The compliance copy rule set is associated with the same tape library B and media agent B as the disaster recovery copy rule set although a different storage device or media agent could be used in other embodiments. Finally the compliance copy rule set specifies that copies generated under the compliance copy rule set will be retained for 10 years and will be generated on a quarterly basis.

At step the storage manager initiates a backup operation according to the backup copy rule set . For instance a scheduling service running on the storage manager accesses scheduling information from the backup copy rule set or a separate scheduling policy associated with the client computing device and initiates a backup copy operation on an hourly basis. Thus at the scheduled time slot the storage manager sends instructions to the client computing device i.e. to both data agent A and data agent B to begin the backup operation.

At step the file system data agent A and the email data agent B operating on the client computing device respond to the instructions received from the storage manager by accessing and processing the primary data A B involved in the copy operation which can be found in primary storage device . Because the operation is a backup copy operation the data agent s A B may format the data into a backup format or otherwise process the data.

At step the client computing device communicates the retrieved processed data to the first media agent A as directed by the storage manager according to the backup copy rule set . In some other embodiments the information management system may implement a load balancing availability based or other appropriate algorithm to select from the available set of media agents A B. Regardless of the manner the media agent A is selected the storage manager may further keep a record in the storage manager database of the association between the selected media agent A and the client computing device and or between the selected media agent A and the backup copy A.

The target media agent A receives the data from the client computing device and at step conveys the data to the disk library A to create the backup copy A again at the direction of the storage manager and according to the backup copy rule set . The secondary storage device A can be selected in other ways. For instance the media agent A may have a dedicated association with a particular secondary storage device s or the storage manager or media agent A may select from a plurality of secondary storage devices e.g. according to availability using one of the techniques described in U.S. Pat. No. 7 246 207 which is incorporated by reference herein.

The media agent A can also update its index to include data and or metadata related to the backup copy A such as information indicating where the backup copy A resides on the disk library A data and metadata for cache retrieval etc. The storage manager may similarly update its index to include information relating to the storage operation such as information relating to the type of storage operation a physical location associated with one or more copies created by the storage operation the time the storage operation was performed status information relating to the storage operation the components involved in the storage operation and the like. In some cases the storage manager may update its index to include some or all of the information stored in the index of the media agent A. After the 30 day retention period expires the storage manager instructs the media agent A to delete the backup copy A from the disk library A. Indexes and or are updated accordingly.

At step the storage manager initiates the creation of a disaster recovery copy B according to the disaster recovery copy rule set .

At step illustratively based on the instructions received from the storage manager at step the specified media agent B retrieves the most recent backup copy A from the disk library A.

At step again at the direction of the storage manager and as specified in the disaster recovery copy rule set the media agent B uses the retrieved data to create a disaster recovery copy B on the tape library B. In some cases the disaster recovery copy B is a direct mirror copy of the backup copy A and remains in the backup format. In other embodiments the disaster recovery copy B may be generated in some other manner such as by using the primary data A B from the primary storage device as source data. The disaster recovery copy operation is initiated once a day and the disaster recovery copies B are deleted after 60 days indexes are updated accordingly when after each information management operation is executed completed.

At step the storage manager initiates the creation of a compliance copy C according to the compliance copy rule set . For instance the storage manager instructs the media agent B to create the compliance copy C on the tape library B at step as specified in the compliance copy rule set . In the example the compliance copy C is generated using the disaster recovery copy B. In other embodiments the compliance copy C is instead generated using either the primary data B corresponding to the email sub client or using the backup copy A from the disk library A as source data. As specified in the illustrated example compliance copies C are created quarterly and are deleted after ten years and indexes are kept up to date accordingly.

While not shown in at some later point in time a restore operation can be initiated involving one or more of the secondary copies A B C. As one example a user may manually initiate a restore of the backup copy A by interacting with the user interface of the storage manager . The storage manager then accesses data in its index and or the respective storage policy A associated with the selected backup copy A to identify the appropriate media agent A and or secondary storage device A.

In other cases a media agent may be selected for use in the restore operation based on a load balancing algorithm an availability based algorithm or other criteria. The selected media agent A retrieves the data from the disk library A. For instance the media agent A may access its index to identify a location of the backup copy A on the disk library A or may access location information residing on the disk A itself.

When the backup copy A was recently created or accessed the media agent A accesses a cached version of the backup copy A residing in the index without having to access the disk library A for some or all of the data. Once it has retrieved the backup copy A the media agent A communicates the data to the source client computing device . Upon receipt the file system data agent A and the email data agent B may unpackage e.g. restore from a backup format to the native application format the data in the backup copy A and restore the unpackaged data to the primary storage device .

The storage manager may permit a user to specify aspects of the storage policy A. For example the storage policy can be modified to include information governance policies to define how data should be managed in order to comply with a certain regulation or business objective. The various policies may be stored for example in the management database . An information governance policy may comprise a classification policy which is described herein. An information governance policy may align with one or more compliance tasks that are imposed by regulations or business requirements. Examples of information governance policies might include a Sarbanes Oxley policy a HIPAA policy an electronic discovery E Discovery policy and so on.

Information governance policies allow administrators to obtain different perspectives on all of an organization s online and offline data without the need for a dedicated data silo created solely for each different viewpoint. As described previously the data storage systems herein build a centralized index that reflects the contents of a distributed data set that spans numerous clients and storage devices including both primary and secondary copies and online and offline copies. An organization may apply multiple information governance policies in a top down manner over that unified data set and indexing schema in order to permit an organization to view and manipulate the single data set through different lenses each of which is adapted to a particular compliance or business goal. Thus for example by applying an E discovery policy and a Sarbanes Oxley policy two different groups of users in an organization can conduct two very different analyses of the same underlying physical set of data copies which may be distributed throughout the organization and information management system.

A classification policy defines a taxonomy of classification terms or tags relevant to a compliance task and or business objective. A classification policy may also associate a defined tag with a classification rule. A classification rule defines a particular combination of criteria such as users who have created accessed or modified a document or data object file or application types content or metadata keywords clients or storage locations dates of data creation and or access review status or other status within a workflow e.g. reviewed or un reviewed modification times or types of modifications and or any other data attributes in any combination without limitation. A classification rule may also be defined using other classification tags in the taxonomy. The various criteria used to define a classification rule may be combined in any suitable fashion for example via Boolean operators to define a complex classification rule. As an example an E discovery classification policy might define a classification tag privileged that is associated with documents or data objects that 1 were created or modified by legal department staff or 2 were sent to or received from outside counsel via email or 3 contain one of the following keywords privileged or attorney or counsel or other like terms.

One specific type of classification tag which may be added to an index at the time of indexing is an entity tag. An entity tag may be for example any content that matches a defined data mask format. Examples of entity tags might include e.g. social security numbers e.g. any numerical content matching the formatting mask XXX XX XXXX credit card numbers e.g. content having a 13 16 digit string of numbers SKU numbers product numbers etc.

A user may define a classification policy by indicating criteria parameters or descriptors of the policy via a graphical user interface such as a form or page with fields to be filled in pull down menus or entries allowing one or more of several options to be selected buttons sliders hypertext links or other known user interface tools for receiving user input etc. For example a user may define certain entity tags such as a particular product number or project ID code that is relevant in the organization. In some implementations the classification policy can be implemented using cloud based techniques. For example the storage devices may be cloud storage devices and the storage manager may execute cloud service provider API over a network to classify data stored on cloud storage devices.

The formatting and structure of secondary copies can vary depending on the embodiment. In some cases secondary copies are formatted as a series of logical data units or chunks e.g. 512 MB 1 GB 2 GB 4 GB or 8 GB chunks . This can facilitate efficient communication and writing to secondary storage devices e.g. according to resource availability. For example a single secondary copy may be written on a chunk by chunk basis to a single secondary storage device or across multiple secondary storage devices . In some cases users can select different chunk sizes e.g. to improve throughput to tape storage devices.

Generally each chunk can include a header and a payload. The payload can include files or other data units or subsets thereof included in the chunk whereas the chunk header generally includes metadata relating to the chunk some or all of which may be derived from the payload. For example during a secondary copy operation the media agent storage manager or other component may divide the associated files into chunks and generate headers for each chunk by processing the constituent files. The headers can include a variety of information such as file identifier s volume s offset s or other information associated with the payload data items a chunk sequence number etc. Importantly in addition to being stored with the secondary copy on the secondary storage device the chunk headers can also be stored to the index of the associated media agent s and or the index . This is useful in some cases for providing faster processing of secondary copies during restores or other operations. In some cases once a chunk is successfully transferred to a secondary storage device the secondary storage device returns an indication of receipt e.g. to the media agent and or storage manager which may update their respective indexes accordingly. During restore chunks may be processed e.g. by the media agent according to the information in the chunk header to reassemble the files.

Data can also be communicated within the information management system in data channels that connect the client computing devices to the secondary storage devices . These data channels can be referred to as data streams and multiple data streams can be employed to parallelize an information management operation improving data transfer rate among providing other advantages. Example data formatting techniques including techniques involving data streaming chunking and the use of other data structures in creating copies e.g. secondary copies are described in U.S. Pat. Nos. 7 315 923 and 8 156 086 and 8 578 120 each of which is incorporated by reference herein.

Referring to the data stream has the stream header and stream payload aligned into multiple data blocks. In this example the data blocks are of size 64 KB. The first two stream header and stream payload pairs comprise a first data block of size 64 KB. The first stream header indicates that the length of the succeeding stream payload is 63 KB and that it is the start of a data block. The next stream header indicates that the succeeding stream payload has a length of 1 KB and that it is not the start of a new data block. Immediately following stream payload is a pair comprising an identifier header and identifier data . The identifier header includes an indication that the succeeding identifier data includes the identifier for the immediately previous data block. The identifier data includes the identifier that the data agent generated for the data block. The data stream also includes other stream header and stream payload pairs which may be for SI data and or for non SI data.

As an example the data structures illustrated in may have been created as a result of two storage operations involving two client computing devices . For example a first storage operation on a first client computing device could result in the creation of the first chunk folder and a second storage operation on a second client computing device could result in the creation of the second chunk folder . The container files in the first chunk folder would contain the blocks of SI data of the first client computing device . If the two client computing devices have substantially similar data the second storage operation on the data of the second client computing device would result in the media agent storing primarily links to the data blocks of the first client computing device that are already stored in the container files . Accordingly while a first storage operation may result in storing nearly all of the data subject to the storage operation subsequent storage operations involving similar data may result in substantial data storage space savings because links to already stored data blocks can be stored instead of additional instances of data blocks.

If the operating system of the secondary storage computing device on which the media agent operates supports sparse files then when the media agent creates container files it can create them as sparse files. A sparse file is type of file that may include empty space e.g. a sparse file may have real data within it such as at the beginning of the file and or at the end of the file but may also have empty space in it that is not storing actual data such as a contiguous range of bytes all having a value of zero . Having the container files be sparse files allows the media agent to free up space in the container files when blocks of data in the container files no longer need to be stored on the storage devices. In some examples the media agent creates a new container file when a container file either includes 100 blocks of data or when the size of the container file exceeds 50 MB. In other examples the media agent creates a new container file when a container file satisfies other criteria e.g. it contains from approximately 100 to approximately 1000 blocks or when its size exceeds approximately 50 MB to 1 GB .

In some cases a file on which a storage operation is performed may comprise a large number of data blocks. For example a 100 MB file may comprise 400 data blocks of size 256 KB. If such a file is to be stored its data blocks may span more than one container file or even more than one chunk folder. As another example a database file of 20 GB may comprise over 40 000 data blocks of size 512 KB. If such a database file is to be stored its data blocks will likely span multiple container files multiple chunk folders and potentially multiple volume folders. Restoring such files may require accessing multiple container files chunk folders and or volume folders to obtain the requisite data blocks.

Improving the Assignment of Data Agent Proxies for Executing Virtual Machine Secondary Copy Operations Including Streaming Backup Jobs

Secondary storage subsystem is described in more detail elsewhere herein. According to the illustrative embodiment secondary subsystem in system may comprise secondary storage computing devices each of which executes at least one respective media agent and also may comprise secondary storage devices e.g. disk tape etc. . According to the illustrative embodiment the secondary storage devices are all accessible by every one of the secondary storage computing device though the invention is not so limited. Secondary storage devices store secondary copies not shown in the present figure of the VM data stores being backed up.

Virtual machine cluster comprises a number of VMs and is described in more detail in a subsequent figure.

Primary storage device is a data storage device analogous to storage device described in an earlier figure e.g. a disk a storage array etc. and additionally comprises the data store s e.g. primary data of one or more VMs operating in VM cluster . As a result primary storage device is a data source for secondary copy operations in system such as streaming backup jobs for one or more VMs whose data stores are stored in storage device .

The bold dotted unidirectional arrows and collectively depict a logical data flow for a secondary copy operation originating with a VM data store e.g. not shown in the present figure on primary storage device and terminating to a secondary storage device e.g. tape media which stores secondary copies of the source e.g. secondary copies not shown in the present figure . Secondary copy operations are discussed in more detail elsewhere herein. Illustratively data flow segment originates at the primary storage device and terminates at the data agent handling this part of the secondary copy operation e.g. at VSDA data flow segment originates at the data agent e.g. VSDA and terminates at the media agent which is handling this part of the secondary copy operation data flow segment originates at the media agent and terminates at the secondary storage device e.g. tape that stores the resulting secondary copy e.g. a full backup copy an incremental backup copy etc. .

Data flow segment may comprise more than one data stream. For example data flow segment may occur in the form of three concurrent data streams that transport data from the source data store to VSDA using network resources. As explained elsewhere using more than one data stream makes it possible to increase the effective bandwidth of the secondary copy operation and thus enables faster backups. The number of data streams that may be in use concurrently at a proxy such as host may be an important consideration in how a particular secondary copy operation occurs within a given backup job as explained in further detail in another figure.

Storage manager is analogous to storage manager described in more detail elsewhere herein and further comprises additional functionality for operating in system e.g. designating a certain data agent as coordinator in a backup job designating other data agents as controllers in the backup job tracking the coordinator controller roles of the respective data agents e.g. virtual server data agents tracking data streams relative to virtual machine backup jobs e.g. the maximum number of data streams allowed for the backup job tracking network topology connectivity information including information about mode of access from a given data agent to a VM data store tracking operational properties of proxies in system tracking operational properties of virtual machines in system etc. without limitation. The information tracked by storage manager may be stored in a management database e.g. management database not shown in the present figure which is part of and or associated with storage manager .

Virtual server data agent or VSDA e.g. is a data agent analogous to data agent that is specially designed and configured to operate vis vis one or more virtual machines. VSDA handles secondary copy operations for virtual machines e.g. extracting primary data from the VM s data store reading and interpreting metadata formatting the payload and metadata and transmitting to media agent and communicating with storage manager for instructions and status reporting etc. VSDA may be referred to herein as a virtual server agent although it should be noted that the subject virtual machine need not run on a designated server computing device. In other words a virtual server data agent is a data agent that is specialized for taking part in secondary copy operations relating to virtual machine s whether the targeted virtual machine executes on a dedicated VM server or on another computing device such as a client computing device that also performs other functions besides executing VMs. Depending on the implementation VSDA may be specialized for a particular manufacturer s VM server or may be designed to work with a variety of VM servers and or VM types. The present invention is not limited as to the type of VM that a VSDA may protect.

Host computing device or host is a computing device that is analogous to client computing device described elsewhere herein and also comprises additional functionality for operating in system e.g. executing VSDA communicating with a primary storage device that comprises VM data store s etc. Host may execute any number of data agents including one or more VSDAs . Host is considered a proxy for VM secondary copy operations as explained in more detail elsewhere herein e.g. executing certain operations in method .

System is not limited to the number interconnectivity types and or ratios of components shown in the present figure. For example system may further comprise other VM clusters any number of VMs additional host computing devices any number of primary storage devices and more or fewer secondary storage devices . Likewise the composition of an element such as VM cluster may vary from what is shown herein. Likewise the interconnectivity among components shown in the present figure and in other figures herein is illustrative so that a variety of access modes may be discussed in detail but not all depicted interconnectivity and access modes are required for every embodiment of the present invention. For example Fibre Channel Storage Area Network FC SAN access from VSDA to primary storage device see e.g. need not be implemented in every embodiment of the present invention conversely in some embodiments FC SAN may be the only access mode configured for accessing virtual machine data stores. More details are given in subsequent figures. Moreover although the depicted system depicts virtual machines as the only sources of primary data other sources of primary data may be configured in system and or in other embodiments such as client computing devices executing applications file systems and corresponding data agents as shown in other figures herein.

VM servers e.g. are computing devices that are illustratively dedicated servers that act as a platform for VMs such as providing VMs to any user of system . For example a VM server may execute a VMware vSphere suite from VMware Inc. of Palo Alto Calif. USA to provide a virtualization platform for any number of users in the corporate network though the present invention is not limited to the VMware platform or to any particular type of VM or VM server. Moreover VM server need not be dedicated as a VM resource and may also provide other data processing services. VM server is well known in the art and may provide any number of VMs within system .

Primary storage device which was described in more detail in a preceding figure is illustratively connected to VM R via FC SAN communication pathway and is likewise connected to host via FC SAN communication pathway . These Fibre Channel interconnections enable host e.g. executing VSDA to have direct access from host to VM R s data store in primary storage device . Accordingly in a secondary copy operation for VM R handled by VSDA VSDA may access VM R s data store on storage device directly via the storage area network comprising pathway without having to communicate to from VM server which hosts VM R. This mode of access via FC SAN is the preferred mode of access to a VM data store according to the illustrative embodiment because it does not tap any processing communications resources on the VM s host server e.g. and thus causes less impact to the production environment. Tiers of preference for access modes to VM data stores are discussed in more detail in a later figure see e.g. block in .

Primary storage device which is illustratively a component of VM server is analogous to primary storage device and additionally comprises the data store s e.g. primary data of one or more VMs executing on VM server such as VM A.

Primary storage devices and are illustrative components of VM cluster and each is interconnected to both VM server and VM server . Primary storage devices and are primary storage devices analogous to primary storage device and additionally comprise the respective data store s e.g. primary data of one or more VMs in cluster such as VM B VM N VM P etc.

In the context of the present disclosure a proxy is a platform that executes a data agent such as a virtual server data agent which may be involved in performing secondary copy operations for a virtual machine. The platform may itself be a virtual machine that is capable of executing a data agent for backing up other virtual machines. Proxy is such a proxy i.e. virtual machine VM N which executes on VM server and executes coordinator data agent for backing up other virtual machines such as VM A VM B VM P etc. Likewise proxy 3 is another virtual machine VM X which executes on VM server and which executes controller data agent for backing up other virtual machines such as VM A VM B and VM P etc. A virtual machine based proxy such as VM N and VM X may execute any number and or types of data agents not just virtual server data agents .

Alternatively the proxy may be a computing device that directly executes a data agent such as a virtual server data agent which may be involved in performing secondary copy operations for a virtual machine. Proxy is such a proxy i.e. host which executes virtual server data agent for backing up virtual machines such as VM A VM B VM Q VM R etc. A proxy such as host may execute any number and or types of data agents not just virtual server data agents . In sum a proxy may represent one of a a first virtual machine that executes on a first computing device wherein the first virtual machine executes a virtual server data agent for virtual machine backup and b a second computing device that executes a virtual server data agent for virtual machine backup.

Virtual server data agent VSDA illustratively acts in a coordinator role for a particular backup job based on receiving the coordinator designation from storage manager for example when the backup job begins. Therefore this data agent may be referred to herein as the coordinator data agent or coordinator. As shall be seen later the coordinator data agent comprises enhanced functionality that improves the way in which proxies are assigned for executing a VM backup job. More details on this enhanced functionality are given in subsequent figures. The coordinator data agent may or may not actually participate in a secondary copy operation during the backup job but the coordinator data agent comprises the functionality for doing so if need be. In other words the proxy that executes the coordinator data agent may also perform one or more secondary copy operations in the backup job.

Virtual server data agents VSDA and illustratively act in a controller role for a particular backup job based on receiving the controller designation from storage manager and or from coordinator data agent for example when the backup job begins after the coordinator role has been assigned to another data agent. Therefore this data agent may be referred to herein as the controller data agent or controller. As shall be seen later the controller data agent comprises enhanced functionality that improves the way in which proxies are assigned for executing a VM backup job. More details on this enhanced functionality are given in subsequent figures. The controller data agent may or may not actually participate in a secondary copy operation during the backup job but the controller data agent comprises the functionality for doing so if need be. In other words a proxy that executes the controller data agent may also perform one or more secondary copy operations in the backup job.

Priority list is generated maintained and used by the proxy that executes the coordinator data agent illustratively by proxy 1 which is embodied as VM N executing data agent . Priority list is a data structure that comprises a list of virtual machines awaiting backup in a given backup job and also lists one or more proxies associated with each VM which proxy ies have been determined to be eligible to back up the respective VM. The ordering of the VMs in the priority list is based on a number of considerations including the number of eligible proxies and the storage size of the VM s data store as described in more detail in regard to . Proxy eligibility is discussed in further detail in regard to . Table 1 below shows an illustrative representation of a first round priority list at the beginning of a backup job for VMs A B P Q and R 

Priority list is not limited to the illustrative form of Table 1 and a person having ordinary skill in the art may after reading the present disclosure devise additional formats and or organizational schemes for the information required by coordinator data agent to perform the improved techniques of the present invention. For example priority list may be embodied as several different lists e.g. relational tables may comprise additional information such as operational properties of each listed VM and or proxy etc. without limitation.

Inter process communications module is a functional component of proxy 1 and may be implemented as executable software and or firmware which executes on the underlying computing device that hosts proxy 1 e.g. VM server . When it executes according to the illustrative embodiment module is largely responsible for establishing and maintaining communications between coordinator data agent and any number of controller data agents in system such as and . Proxy and proxy 3 also may comprise a respective inter process communications module not shown here . Accordingly the coordinator data agent may use the inter process communications module to designate other data agents to act as controllers to distribute job information thereto to collect proxy and data agent information therefrom to allow assign data streams thereto etc. without limitation.

Inter process communications module is shown herein as a distinct component to ease understanding of the present disclosure however alternative embodiments are also possible within the scope of the present invention e.g. wherein module may be a functional component of the respective virtual server data agent .

Logical communication pathways depict inter process communications between the illustrative data agents e.g. between coordinator data agent and controller and also between the coordinator data agent and controller . Logical communication pathways are enabled at least in part by inter process communications module .

At block storage manager may choose a VSDA to designate as a coordinator data agent for the backup job. Accordingly storage manager may designate VSDA to act as coordinator data agent e.g. by communicating the designation to VSDA . Storage manager may further designate other VSDAs to act as controller data agents under the coordination of the coordinator data agent . Accordingly storage manager may designate VSDA and VSDA to act as controller data agents e.g. by communicating the respective designations thereto.

At block the initialization process takes place for the designated coordinator data agent . More detail is provided in a subsequent figure.

At block coordinator data agent may generate an ordered priority list of the set of VMs to be backed up e.g. priority list which is based on eligible proxies and VM storage size. As explained in more detail later the ordered priority list initially comprises the entire set of VMs to be backed up in the backup job in subsequent rounds i.e. after block a new revised ordered priority list will comprise VMs that were stranded after a backup attempt at block . Several rounds may be necessary to successfully back up the entire set of VMs. More detail is provided in a subsequent figure.

At block coordinator data agent attempts to back up the set of VMs using an allowed number of data streams for the backup job e.g. two data streams but the VMs are not necessarily backed up in the order of the priority list . More detail is provided in a subsequent figure.

At block which is a decision point coordinator data agent determines whether any of the VMs in the set of VMs to be backed up have remained stranded i.e. could not be backed up in the preceding attempt at block . If stranded VMs remain control passes to block . Otherwise after the entire set of VMs has been backed up the backup job is considered complete and may successfully end. Ending the backup job may include reporting job metadata and statistics to storage manager and may also include rescinding the coordinator and controller roles of the participating VSDAs until such time as a new job is begun.

At block which occurs when stranded VMs remain after an attempt coordinator data agent pends the backup job and restarts the backup job based only on the stranded VMs passing control back to block where a new priority list is to be generated for the stranded VMs. In this new priority list the set of eligible proxies for each stranded VM may vary from the eligible proxies in an earlier priority list because lower tiers of preference for access modes to the stranded VMs data stores may be allowed in subsequent rounds in order to reduce the chances of re stranding a VM. Several rounds may be necessary to successfully back up the entire set of VMs. More details are provided in a subsequent figure see e.g. block in .

At block coordinator data agent establishes inter process communications e.g. using inter process communications module with the coordinator data agents e.g. and . In some embodiments coordinator data agent may identify and designate the controllers e.g. at block . Block also may comprise coordinator data agent identifying the proxies in system that may be involved in the present backup job the proxies illustratively being the platforms that execute the respective coordinator and controller data agents e.g. proxy 1 proxy 2 and proxy 3.

At block coordinator data agent may collect job related information for the backup job. The job related information may be collected by querying storage manager and or management database . The job related information may comprise without limitation the identities of the VMs to be backed up in the present backup job the operational properties of each VM e.g. processing capacity storage units storage capacity of storage units the number and identities of the storage devices e.g. disks that house the VMs data stores to be backed up e.g. and or the number of data streams allowed for the backup job.

The number of data streams allowed for the backup job may be a parameter specified in the storage policy that governs the backup job. The number of data streams allowed for the backup job may be a function of the number of primary storage devices storing the data stores to be backed up in the sense that too many data streams directed to or tapping a primary storage device may be detrimental to the performance of that primary storage device in the production environment and hence the need to limit how many data streams may tap the device for a secondary copy operation. Thus the specifics of system s network topology and resources may determine how many data streams may be allowed for certain backup jobs.

At block coordinator data agent collects operational properties of the proxies that may be candidates for backing up the set of VMs to be backed up. The proxy properties may be collected by querying storage manager and or management database and or by querying the proxies themselves. The proxy properties may comprise without limitation the CPU count and or capacity of the proxy and or the amount of random access memory RAM of the proxy. As explained in more detail below the proxy properties affect a maximum limit of data streams that may be assigned to a given proxy at a system wide level across a plurality of active jobs that the proxy may be involved in at any given time.

At block coordinator data agent may use the proxy properties to determine a maximum limit of data streams that may be assigned to each respective proxy. Each proxy e.g. proxy 1 proxy 2 proxy 3 is given a system wide maximum limit of assignable data streams it may use concurrently across a plurality of active jobs that the proxy may be involved in at any given time including the present job. According to the illustrative embodiment the proxy s computing power as measured in CPU and RAM will affect how many data streams the proxy is allowed to process concurrently at any given time. For example the number of CPUs in a multiprocessor equipped proxy may affect the limit of assignable data streams.

Illustratively the maximum limit of assignable data streams for a given proxy MINIMUM of a 10 data streams for each CPU processor in the proxy and b 1 data stream for each 100 MB RAM in the proxy . For example a proxy with 8 CPUs and 200 MB RAM would receive a maximum limit of allowable data streams of MINIMUM of 10 8 CPUs 2 100 MB RAM 2 data streams maximum. A proxy having 2 CPUs and 2 GB RAM would receive a maximum limit of assignable data streams of MINIMUM of 10 2 CPUs 20 100 MB RAM 20 data streams maximum.

At block coordinator data agent may define a set of VMs that are to be backed up. Initially the set comprises all the VMs to be backed up in the present backup job e.g. according to a governing storage policy. In a later round that is needed after VMs were stranded without backup i.e. after block the present block will define the set of stranded VMs that still remain to be backed up in the present backup job.

At block coordinator data agent may identify the proxy or proxies that are eligible to back up each VM in the set. Eligibility is illustratively based on predefined modes of access that define how a proxy may access the VM s data store. Each distinct mode of access is given a tier of preference which may determine whether the proxy is considered to be eligible to back up the proxy in the present round. The illustrative embodiment contemplates that only the highest tier proxies will be eligible to back up a VM in the initial round but lower tier proxies may be eligible in subsequent rounds to address stranded VMs. More details are provided in .

At block coordinator data agent having identified which proxies are eligible to back up a given VM according to tiered access modes generates an association between the VM and its eligible proxies. See e.g. Table 1 which shows the highest tier proxy proxies associated with each subject VM in an initial round of generating the ordered priority list.

At block coordinator data agent orders the set of VMs in order of increasing number of associated eligible proxies. The rationale here is that VMs having fewer proxy choices should be backed up or at least considered for backup ahead of VMs with more choices since the latter would be less likely to be stranded with more choices of eligible proxies.

At block which is a decision block coordinator data agent may break a tie in the ordering of VMs. If block yields no ties control passes to block where the ordered priority list is deemed to be complete. However to break a tie in the ordering of two or more VMs at block control passes to block .

At block coordinator data agent calculates a storage size metric for each of the tied VMs illustratively based on i the number of allocated storage units for the VM e.g. disks and ii the respective amount of storage space on each unit. Illustratively the storage size metric may be the total amount of storage e.g. in MB allocated to the VM. See e.g. Table 1.

At block coordinator data agent may break the tie by ordering VMs with the same number of associated eligible proxies in decreasing order of the respective storage size metric e.g. decreasing total amount of storage. This is illustrated in Table 1. The rationale here is that larger data stores should be given preference because their backups may take longer and are therefore more likely to become stranded whereas backing up a smaller data store may more easily fit into the backup job.

At block coordinator data agent will begin an execution loop to traverse every VM in the set of VMs. The loop illustratively comprises blocks and .

At block coordinator data agent may analyze data in management database to determine which proxies in system are candidates to back up the present VM. Only platforms with a properly installed and or active virtual server data agent that is also suitable for the given VM may be a candidate. Accordingly coordinator data agent generates a set of candidate proxies for backing up the present VM.

At block coordinator data agent may further analyze data in management database and or other sources of system to determine an access mode that is available to each candidate proxy for accessing the VM s data store as the backup source. The access mode may also be referred to as a read mode or transport mode. The access mode depends on how a proxy may access the storage device that stores the VM s data store which means that the access mode is highly dependent on component and network configurations in system . Some of the network information may be obtained from network components such as routers VM servers hosts and or from the proxy itself.

At block coordinator data agent may classify each candidate proxy according to predefined access modes to the VM s data store s to be backed up. Tiers of preference are associated with the different access modes. Illustratively the access modes and tiers are defined as follows in decreasing order of preference 

Accordingly each candidate proxy that is identified relative to the present VM is classified at block according to the tiers of preference above. Notably the mode of access and the corresponding classification depends on the identity of the VM being backed up and where it stores its data store and the identity of the candidate proxy. Thus any given proxy may be differently classified relative to various VMs for which it is a candidate for backup. For example relative to VM R and its data store on proxy 2 would receive the highest tier of preference but relative to VM A and its data store on proxy 2 may receive the lowest tier of preference as there is no local access and no easy networked access at least as depicted in .

At block coordinator data agent may define the highest tier candidate proxies for the VM as the proxies that are eligible to back up the VM in the present round. As shown in Table 1 only the highest tier proxies initially become associated with a VM on the priority list. If VMs become stranded after a first traversal of the priority list as described in regard to blocks and in when method reaches block in the next round of processing the next lower tier of preference would also be allowed for making candidate proxies eligible in order to broaden the field of possibilities for successfully finding the resources to timely back up the VMs. Assuming that all the VMs were stranded after a first round an example of the new priority list generated at block might look like this using the highest and next highest tiers of preference to define eligible proxies 

After block completes control passes back to block for the next VM in the set of VMs. After all VMs in the set have been analyzed and eligible proxies found for them block may end.

At block which may be reached after blocks and or coordinator data agent must first determine whether any data streams are currently allowed to be started in the present backup job and if they are all in use and none is currently available coordinator data agent waits until a data stream is released and becomes available e.g. after a VM backup is completed. The number of allowed data streams for the backup job was obtained at block .

At block having determined that a new data stream is allowed coordinator data agent must determine which proxy is to be designated the next available proxy i.e. which proxy to use for the next VM backup in the present backup job. Referring to and Table 1 as an example coordinator data agent must determine whether proxy 1 2 or 3 should be the next available proxy. This determination is based on stream utilization at the proxies and more detail in this regard is given in a subsequent figure. In general the purpose of this block is to choose a less busy proxy as the best candidate for the next operation in the backup job. It should be noted that coordinator data agent may itself be the next available proxy and may perform any number of secondary storage operations in the backup job while also carrying out its role of coordinator. On the other hand the next available proxy may be a controller data agent. According to the illustrative embodiment method does not consider a data agent s coordinator or controller role when designating the next available proxy although it may do so in alternative embodiments e.g. favoring a controller over a coordinator all other factors being equal etc.

At block having identified a next available proxy coordinator data agent may begin traversing the current priority list starting with the highest priority VM at the top of the list see e.g. Table 1 to identify a first VM that is awaiting backup e.g. VM R.

At block which is a decision point coordinator data agent may determine whether the next available proxy identified at block is eligible to back up the VM from block . If yes e.g. proxy 2 in Table 1 control passes to block but if it not eligible then control passes to block for the next VM on the priority list .

At block coordinator data agent continues traversing priority list to the next preferred VM awaiting backup e.g. VM B in Table 1 according to block and . If coordinator data agent has traversed the entire priority list and found no VMs awaiting backup that the next available proxy is eligible to back up control passes back to block to identify another next available proxy.

At block which is a decision point coordinator data agent determines whether the data store of the VM that the next available proxy is eligible to back up has a suitable data store activity score illustratively whether the data store activity score is over a threshold. If the data store activity score is NOT over the threshold control passes to block . If the data store activity score is over the threshold control passes to block . The data activity score is illustratively defined as the number of active backup data streams currently in use at the storage device housing the VM s data store. Thus for example if storage device currently participates in a backup operation with one data stream its score would be determined to be 1.

The purpose of the present decision block is to favor VMs whose data stores are currently idle in favor of other VMs which may be higher in the priority list but which have active data stores whose performance may be impacted by starting the present backup operation. Thus illustratively the threshold for the present decision point may be 1. Thus for example if VM R s data store on storage device is already engaged in a backup operation its score would be 1 and VM R may get passed over for backup based on the present decision block.

At block which is reached when the data store activity score is over the threshold coordinator data agent may pass control back to block to find another VM on the priority list that is awaiting backup progressing through the priority list in decreasing order of VM priority. When block is reached again at a later time and coordinator data agent determines that all the VMs at this point exceed the data store activity threshold i.e. all the VMs for which the coordinator data agent is evaluating the next available proxy have busy data stores the coordinator data agent will increment the threshold value to a higher baseline figure and return control back to block to re traverse the priority list.

At block which is reached when the data store activity score is NOT over the threshold the process reaches a point where a VM backup operation is appropriate because the next available proxy identified at block is eligible to back up the VM identified at block and also the VM s data store is not too busy. Accordingly coordinator data agent may spawn a VM backup process at the next available proxy determined at block which will occur at block coordinator data agent will then ask for another data stream by passing control back to block .

At block the next available proxy identified at block performs the secondary copy operations of the backup job for the VM e.g. a streaming backup of the VM. The operations conducted by the proxy and the virtual server data agent at this point are well known in the art. For example VSDA may format the VM s data from the data store and transmit it to a media agent see e.g. logical data flows and . For example the media agent will further manipulate e.g. deduplicate and index the data for storage to a secondary storage device see e.g. logical data flow . This block may also include the proxy reporting statistics and index information to storage manager and also reporting the VM backup being completed to coordinator data agent as well as releasing any data streams used in performing the VM backup e.g. by notifying coordinator data agent to that effect.

At block following the successful completion of the VM s backup coordinator data agent may remove the backed up VM from priority list . Coordinator data agent will then ask for another data stream by passing control back to block .

At block coordinator data agent may define a set of candidate proxies that are suitable for a currently allowed data stream. The determination may be based on analyzing the current priority list polling storage manager consulting a local data structure generated in the course of generating priority list etc. and or any combination thereof.

At block coordinator data agent will begin an execution loop to evaluate all the candidate proxies. The loop illustratively comprises blocks and .

At block coordinator data agent may identify the number of data streams currently active at the proxy across any and all jobs that the proxy is currently participating in. Thus the number of currently active data streams at the proxy is a global figure that may reach across several jobs currently operating in system . The purpose of using this figure is to better balance the candidate proxies in a system wide context rather than merely analyzing the present backup job.

At block coordinator data agent may compute a stream utilization score for the proxy. The stream utilization score may be based on i the maximum data stream limit for the proxy e.g. from block and ii the number of currently active data streams at the proxy across all jobs. Illustratively the stream utilization score for the proxy is the percentage value of the ratio of element ii to element i i.e. utilization ii i . Control passes back to block so that coordinator data agent may evaluate the stream utilization of all candidate proxies.

At block having evaluated the current stream utilization at all candidate proxies coordinator data agent may choose the candidate proxy with the lowest stream utilization score. Accordingly coordinator data agent may designate the chosen proxy as the next available proxy and may then assign the currently available data stream in the backup job to the next available proxy for further processing. It should be remembered that the next available proxy identified at block becomes the basis for finding a VM on the priority list for which the proxy is eligible to back up as described in more detail in .

In regard to the components blocks operations and or sub operations described in reference to other embodiments are possible within the scope of the present invention such that the above recited components steps blocks operations and or messages requests queries instructions communications are differently arranged sequenced sub divided organized and or combined. In some embodiments a different component may initiate or execute a given operation. In some components the decisions may be based on different considerations and or scores. Also in some embodiments scores may be based on different parameters weights and or formulas without departing from the scope of the present invention.

According to an example embodiment of the present invention a computer implemented method for determining a per proxy limit of data streams allowed for backup operations in a storage management system the method comprising I designating by a storage manager component of the storage management system a first data agent to act as coordinator of a first backup job wherein the first backup job is configured to perform secondary copy operations for a first set of virtual machines in the storage management system wherein the coordinator data agent executes on a first virtual machine and wherein the first virtual machine is designated a first proxy and wherein the first virtual machine executes on a first computing device having one or more processors and non transitory computer readable memory II designating by the storage manager a second data agent to act as controller in the first backup job wherein the controller data agent executes on a second computing device having one or more processors and non transitory computer readable memory and wherein the second computing device is designated a second proxy III collecting by the coordinator data agent information about operational properties of the first proxy and the second proxy IV determining by the coordinator data agent a respective maximum limit of data streams assignable to each of the first proxy and the second proxy wherein the respective maximum limit of data streams is based on the operational properties of each respective proxy and V wherein each proxy may concurrently use no more than the respective maximum limit of data streams in the course of performing one or more backup jobs in the storage management system including while performing the first backup job.

The above recited method may further comprise assigning by the coordinator data agent a first data stream to the first proxy in the course of performing the first backup job wherein the first data stream originates at a first storage device comprising virtual machine data being backed up in the first backup job and terminates at the coordinator data agent that executes on the first proxy and wherein the first proxy concurrently uses no more than the maximum limit of data streams determined by the coordinator data agent for the first proxy based on the operational properties of the first proxy. The above recited method may further comprise assigning by the coordinator data agent a first data stream to the second proxy in the course of performing the first backup job wherein the first data stream originates at a first storage device comprising virtual machine data being backed up in the first backup job and terminates at the controller data agent that executes on the second proxy and wherein the second proxy concurrently uses no more than the maximum limit of data streams determined by the coordinator data agent for the second proxy based on the operational properties of the second proxy. The above recited method wherein the coordinator data agent is configured for backing up at least in part one or more virtual machines in the storage management system.

The above recited method wherein the controller data agent is configured for backing up at least in part one or more virtual machines in the storage management system. The above recited method wherein the coordinator data agent and the controller data agent are virtual server data agents which are configured for backup of virtual machines in the storage management system. The above recited method wherein the first set of virtual machines comprises a first subset of virtual machines that execute on a first host computing device and a second subset of virtual machines that execute on a second host computing device. The above recited method wherein the first proxy which hosts the coordinator data agent executes on the same computing device as the first subset of virtual machines such that the first computing device coincides with the first host computing device. The above recited method wherein the second host computing device which executes the second subset of virtual machines is distinct from the second proxy which executes the controller data agent. The above recited method may further comprise designating by the storage manager a third data agent to act as a second controller in the first backup job wherein the third data agent executes on a second virtual machine which is designated a third proxy and wherein the second virtual machine executes on a third computing device which is distinct from the first computing device that executes the first virtual machine establishing inter process communications between the coordinator data agent and the second controller data agent further collecting by the coordinator data agent information about operational properties of the third proxy determining by the coordinator data agent a respective maximum limit of data streams assignable to the third proxy based on the operational properties of the third proxy assigning by the coordinator data agent a first data stream to the third proxy in the course of performing the first backup job wherein the first data stream originates at a first storage device comprising virtual machine data being backed up in the first backup job and terminates at the second controller data agent that executes on the third proxy and wherein the second proxy concurrently uses in the course of performing one or more backup jobs including the first backup job no more than the respective maximum limit of data streams determined by the coordinator data agent for the third proxy based on the operational properties of the third proxy.

The above recited method may further comprise collecting by the coordinator data agent job related information for executing the first backup job and wherein the job related information for executing the first backup job comprises one or more of the identities of the first set of virtual machines to be backed up one or more operational properties of each virtual machine in the first set information about one or more storage devices storing virtual machine data to be backed up and a maximum number of data streams allowed to be used concurrently while performing the first backup job. The above recited method wherein the operational properties of each respective proxy for which information is collected by the coordinator data agent comprise at least one of a processing capacity of the respective proxy and an amount of random access memory of the respective proxy and wherein the maximum limit of data streams assignable to each respective proxy is based on the at least one of the processing capacity of the respective proxy and the amount of random access memory of the respective proxy. The above recited method wherein the maximum limit of data streams assignable to each respective proxy positively correlates to at least one of the processing capacity of the respective proxy and the amount of random access memory of the respective proxy. The above recited method may further comprise establishing inter process communications between the coordinator data agent and the controller data agent. The above recited method wherein the job related information for executing the first backup job is collected by the coordinator data agent from a storage policy stored by the storage manager.

According to another illustrative embodiment of the present invention a computer readable medium excluding transitory propagating signals storing instructions that when executed by at least one computing device may cause the computing device to perform a method for managing backup operations in a storage management system the method comprising I collecting by a designated coordinator for a first backup job in a storage management system information about operational properties of a first proxy and a second proxy wherein the coordinator operates as the first proxy wherein a designated controller operates as the second proxy and wherein the first backup job is associated with one or more secondary copy operations for a first set of virtual machines II determining by the coordinator a respective limit of data streams for each of the first proxy and the second proxy wherein the respective limit of data streams is based on the operational properties of each respective proxy and III wherein each proxy is constrained by the limit of data streams in the course of performing one or more backup jobs in the storage management system including while performing the first backup job. The above recited computer readable medium wherein the coordinator is a data agent that executes on a first computing device having one or more processors and non transitory computer readable memory and wherein the controller is a data agent that executes on a first virtual machine and wherein the first virtual machine executes on a second computing device having one or more processors and non transitory computer readable memory. The above recited computer readable medium wherein the limit of data streams for each of the first proxy and the second proxy is based on the at least one of the processing capacity of the respective proxy and the amount of random access memory of the respective proxy.

According to another example embodiment a computer implement method for generating an ordered priority list of a first set of virtual machines to be backed up in a storage management system the method to be executed by a computing device having one or more processors and non transitory computer readable memory the method may comprise I associating each virtual machine in the first set of virtual machines with one or more proxies from a set of candidate proxies in the storage management system wherein the associating includes determining which of candidate proxies are eligible to back up a respective virtual machine II ordering the first set of virtual machines into a priority list in order of increasing number of associated eligible proxies for the respective virtual machine and III in the course of executing the first backup job assigning to a first virtual machine in the first set being wherein the ordering into the priority list comprises breaking a tie among a plurality of virtual machines in the first set by ordering the virtual machines in the plurality in decreasing of the total amount of storage allocated to each respective virtual machine. The above recited method wherein the ordering into the priority list comprises breaking a tie among a plurality of virtual machines in the first set by ordering the virtual machines in the plurality in decreasing order of a storage size metric associated with the respective virtual machine. The above recited method wherein the storage size metric for a given virtual machine is based on at least one of a number of storage units allocated to the given virtual machine and a respective storage space for each of the number of storage units. The above recited method wherein the storage size metric for a given virtual machine is based on a total amount of storage allocated to the given virtual machine such that the breaking of the tie among the plurality of virtual machines results in ordering the plurality of virtual machines in decreasing order of the total amount of storage allocated to each respective virtual machine. The above recited method wherein each virtual machine in the ordered priority list is associated with at least one eligible proxy. The above recited method wherein a virtual machine in the ordered priority list is associated with a higher priority if that virtual machine is connected to a storage area network SAN or if that virtual machine has the largest amount of data to back up as compared to other virtual machines in the first set of virtual machines. The above recited method may further comprise designating by a storage manager component of the storage management system a first data agent to act as coordinator of the first backup job wherein the first backup job is configured to perform secondary copy operations for the first set of virtual machines in the storage management system and wherein the coordinator data agent executes on a first computing device having one or more processors and non transitory computer readable memory which is designated a first proxy designating by the storage manager a second data agent to act as controller in the first backup job wherein the controller data agent executes on a second computing device having one or more processors and non transitory computer readable memory which is designated a second proxy and wherein any given eligible proxy executes a data agent that is suitable for backing up data associated with the one or more virtual machines that the respective proxy is eligible to back up.

According to yet another illustrative embodiment a computer readable medium excluding transitory propagating signals storing instructions that when executed by at least one computing device each computing device having one or more processors and non transitory computer readable memory may cause the computing device to perform a method for generating an ordered priority list of a first set of virtual machines to be backed up in a storage management system the method comprising I associating each virtual machine in the first set of virtual machines with one or more proxies from a set of candidate proxies in the storage management system wherein the associating includes determining which of candidate proxies are eligible to back up a respective virtual machine II ordering the first set of virtual machines into a priority list in order of increasing number of associated eligible proxies for the respective virtual machine and III in the course of executing the first backup job assigning to a first virtual machine in the first set being backed up a first eligible proxy based on the ordered priority list. The above recited computer readable medium wherein the ordering into the priority list comprises breaking a tie among a plurality of virtual machines in the first set by ordering the virtual machines in the plurality in decreasing of the total amount of storage allocated to each respective virtual machine. The above recited computer readable medium wherein each virtual machine in the ordered priority list is associated with at least one eligible proxy. The above recited computer readable medium wherein a virtual machine in the ordered priority list is associated with a higher priority if that virtual machine is connected to a storage area network SAN or if that virtual machine has the largest amount of data to back up as compared to other virtual machines in the first set of virtual machines. The above recited computer readable medium wherein the method further comprises designating by a storage manager component of the storage management system a first data agent to act as coordinator of the first backup job wherein the first backup job is configured to perform secondary copy operations for the first set of virtual machines in the storage management system and wherein the coordinator data agent executes on a first computing device having one or more processors and non transitory computer readable memory which is designated a first proxy designating by the storage manager a second data agent to act as controller in the first backup job wherein the controller data agent executes on a second computing device having one or more processors and non transitory computer readable memory which is designated a second proxy and wherein any given eligible proxy executes a data agent that is suitable for backing up data associated with the one or more virtual machines that the respective proxy is eligible to back up.

According to another example embodiment of the present invention a computer readable medium excluding transitory propagating signals storing instructions that when executed by at least one computing device having one or more processors and non transitory computer readable memory cause the computing device to perform a method comprising I identifying one or more proxies in a storage management system that are eligible to back up a given virtual machine in a first set of virtual machines in the storage management system wherein any one proxy among the one or more proxies represents one of a a first virtual machine that executes on a first computing device wherein the first virtual machine executes a data agent for virtual machine backup and b a second computing device that executes a data agent for virtual machine backup II wherein the identifying comprises i determining A a set of candidate proxies that are candidates to back up the given virtual machine and B a mode of access available to each respective candidate proxy for accessing the given virtual machine s data as a source for backup wherein the mode of access has a predefined tier of preference ii classifying each candidate proxy in the set of candidate proxies based on the predefined tier of preference for the respective candidate proxy s mode of access to the given virtual machine s data as the source for backup and iii defining one or more candidate proxies that are classified as having the highest tier of preference as being eligible to back up the given virtual machine.

According to another embodiment a computer readable medium excluding transitory propagating signals storing instructions that when executed by at least one computing device having one or more processors and non transitory computer readable memory may cause the computing device to perform a method comprising I identifying a plurality of proxies for collectively backing up the set of virtual machines in a storage management system wherein any one proxy among the plurality of proxies represents one of a a first virtual machine that executes on a first computing device wherein the first virtual machine executes a first virtual server data agent for virtual machine backup and b a second computing device that executes the first virtual server data agent for virtual machine backup II identifying a first proxy among the plurality of proxies wherein the first proxy is available for backup using a first data stream which terminates at the first proxy III identifying a second virtual machine on a priority list that identifies a set of virtual machines awaiting backup wherein the priority list orders the set of virtual machines in increasing order of the number of proxies that are eligible to back up each respective virtual machine and IV if the first proxy is eligible to back up the second virtual machine and a score of the second virtual machine s data store is under a predefined threshold causing a backup process for the second virtual machine to be launched at the first proxy wherein the first proxy backs up at least in part the second virtual machine using the first data stream and wherein the first data stream originates at a first storage device comprising the second virtual machine s data store. The above recited computer readable medium wherein the set of virtual machines awaiting backup is associated with a backup job in the storage management system.

According to yet one more embodiment of the present invention a computer implemented method for identifying a next available proxy for virtual machine backup based on stream utilization at the proxy the method to be executed by one or more computing devices having one or more respective processors and respective computer readable memory the method comprising I defining by a coordinator data agent that operates as a component of the storage management system a set of candidate proxies for a virtual machine backup job in the storage management system wherein any one proxy in the set of candidate proxies represents one of a a first virtual machine that executes on a first computing device having one or more processors and non transitory computer readable memory wherein the first virtual machine executes a first virtual server data agent for virtual machine backup and b a second computing device having one or more processors and non transitory computer readable memory wherein the second computing device executes the first virtual server data agent II evaluating by the coordinator data agent the set of candidate proxies wherein the evaluating for a given candidate proxy in the set of candidate proxies comprises determining a maximum limit of data streams assignable to the given candidate proxy based on operational properties of the given candidate proxy identifying a number of data streams that are currently active at the given candidate proxy including any data streams in the virtual machine backup job and any data streams for other jobs in the storage management system computing a data stream utilization score for the given candidate proxy based on a ratio of i the number of data streams currently active at the given candidate proxy to ii the maximum limit of data streams assignable to the given candidate proxy wherein any data stream considered in the evaluating operation terminates at the given candidate proxy and III after evaluating the set of candidate proxies assigning a new data stream by the coordinator data agent to a first proxy in the set of candidate proxies that has the lowest data stream utilization score among the set of candidate proxies.

The above recited method wherein in the course of performing operations for one or more backup jobs in the storage management system including for the virtual machine backup job the first proxy may concurrently use no more than the respective maximum limit of data streams assignable to the first proxy. The above recited method wherein the operational properties of the first proxy comprise at least one of a processing capacity of the first proxy and an amount of random access memory of the first proxy and wherein the maximum limit of data streams assignable to the first proxy is based on the at least one of the processing capacity of the first proxy and the amount of random access memory of the first proxy. The above recited method wherein the maximum limit of data streams assignable to the first proxy positively correlates to at least one of the processing capacity of the first proxy and the amount of random access memory of the first proxy. The above recited method may further comprise identifying by the coordinator data agent a second virtual machine on a priority list that identifies a set of virtual machines awaiting backup in the virtual machine backup job and causing by the coordinator data agent a backup process for the second virtual machine to be launched at the first proxy using the new data stream.

In other embodiments a system or systems may operate according to one or more of the methods and or according to the computer readable media recited in the preceding paragraphs. In yet other embodiments a method or methods may operate according to one or more of the systems and or according to the computer readable media recited in the preceding paragraphs. In yet more embodiments a computer readable medium or media excluding transitory propagating signals may cause one or more computing devices having one or more processors and non transitory computer readable memory to operate according to one or more of the systems and or methods recited in the preceding paragraphs.

According to another embodiment a computer implemented method may perform as generally shown and described herein and equivalents thereof. Likewise a system as generally shown and described herein and equivalents thereof. Likewise a tangible non transitory computer readable medium storing instructions which when executed by at least one computing device cause the computing device to perform a method as generally shown and described herein and equivalents thereof.

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense that is to say in the sense of including but not limited to. As used herein the terms connected coupled or any variant thereof means any connection or coupling either direct or indirect between two or more elements the coupling or connection between the elements can be physical logical or a combination thereof. Additionally the words herein above below and words of similar import when used in this application refer to this application as a whole and not to any particular portions of this application. Where the context permits words in the above Detailed Description using the singular or plural number may also include the plural or singular number respectively. The word or in reference to a list of two or more items covers all of the following interpretations of the word any one of the items in the list all of the items in the list and any combination of the items in the list. Likewise the term and or in reference to a list of two or more items covers all of the following interpretations of the word any one of the items in the list all of the items in the list and any combination of the items in the list.

Depending on the embodiment certain operations acts events or functions of any of the algorithms described herein can be performed in a different sequence can be added merged or left out altogether e.g. not all are necessary for the practice of the algorithms . Moreover in certain embodiments operations acts functions or events can be performed concurrently e.g. through multi threaded processing interrupt processing or multiple processors or processor cores or on other parallel architectures rather than sequentially.

Systems and modules described herein may comprise software firmware hardware or any combination s of software firmware or hardware suitable for the purposes described herein. Software and other modules may reside and execute on servers workstations personal computers computerized tablets PDAs and other computing devices suitable for the purposes described herein. Software and other modules may be accessible via local memory via a network via a browser or via other means suitable for the purposes described herein. Data structures described herein may comprise computer files variables programming arrays programming structures or any electronic information storage schemes or methods or any combinations thereof suitable for the purposes described herein. User interface elements described herein may comprise elements from graphical user interfaces interactive voice response command line interfaces and other suitable interfaces.

Further the processing of the various components of the illustrated systems can be distributed across multiple machines networks and other computing resources. In addition two or more components of a system can be combined into fewer components. Various components of the illustrated systems can be implemented in one or more virtual machines rather than in dedicated computer hardware systems and or computing devices. Likewise the data repositories shown can represent physical and or logical data storage including for example storage area networks or other distributed storage systems. Moreover in some embodiments the connections between the components shown represent possible paths of data flow rather than actual connections between hardware. While some examples of possible connections are shown any of the subset of the components shown can communicate with any other subset of components in various implementations.

Embodiments are also described above with reference to flow chart illustrations and or block diagrams of methods apparatus systems and computer program products. Each block of the flow chart illustrations and or block diagrams and combinations of blocks in the flow chart illustrations and or block diagrams may be implemented by computer program instructions. Such instructions may be provided to a processor of a general purpose computer special purpose computer specially equipped computer e.g. comprising a high performance database server a graphics subsystem etc. or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor s of the computer or other programmable data processing apparatus create means for implementing the acts specified in the flow chart and or block diagram block or blocks.

These computer program instructions may also be stored in a non transitory computer readable memory that can direct a computer or other programmable data processing apparatus to operate in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the acts specified in the flow chart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computing device or other programmable data processing apparatus to cause a series of operations to be performed on the computing device or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the acts specified in the flow chart and or block diagram block or blocks.

Any patents and applications and other references noted above including any that may be listed in accompanying filing papers are incorporated herein by reference. Aspects of the invention can be modified if necessary to employ the systems functions and concepts of the various references described above to provide yet further implementations of the invention.

These and other changes can be made to the invention in light of the above Detailed Description. While the above description describes certain examples of the invention and describes the best mode contemplated no matter how detailed the above appears in text the invention can be practiced in many ways. Details of the system may vary considerably in its specific implementation while still being encompassed by the invention disclosed herein. As noted above particular terminology used when describing certain features or aspects of the invention should not be taken to imply that the terminology is being redefined herein to be restricted to any specific characteristics features or aspects of the invention with which that terminology is associated. In general the terms used in the following claims should not be construed to limit the invention to the specific examples disclosed in the specification unless the above Detailed Description section explicitly defines such terms. Accordingly the actual scope of the invention encompasses not only the disclosed examples but also all equivalent ways of practicing or implementing the invention under the claims.

To reduce the number of claims certain aspects of the invention are presented below in certain claim forms but the applicant contemplates the various aspects of the invention in any number of claim forms. For example while only one aspect of the invention is recited as a means plus function claim under 35 U.S.C sec. 112 f AIA other aspects may likewise be embodied as a means plus function claim or in other forms such as being embodied in a computer readable medium. Any claims intended to be treated under 35 U.S.C. 112 f will begin with the words means for but use of the term for in any other context is not intended to invoke treatment under 35 U.S.C. 112 f . Accordingly the applicant reserves the right to pursue additional claims after filing this application in either this application or in a continuing application.

