---

title: Executing commands within virtual machine instances
abstract: Technologies are disclosed herein for executing commands within virtual machine (“VM”) instances. A public web service application programming interface (“API”) is exposed within a service provider network that includes methods relating to the execution of commands within VM instances. For example, the API might include a method for obtaining a list of the commands that can be executed within a VM instance. The API might also include a method for requesting the execution of a command within a VM instance. The API might also include a method for requesting data describing the status of the execution of a command within a VM instance. The API might also expose other methods. A software agent executing on a VM instance may be utilized to provide a list of commands that can be executed in the VM, to execute requested commands, and to provide data describing the status of execution of a command.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09582298&OS=09582298&RS=09582298
owner: Amazon Technologies, Inc.
number: 09582298
owner_city: Seattle
owner_country: US
publication_date: 20150320
---
Network based service provider networks exist that allow customers to purchase and utilize various types of computing resources on a permanent or as needed basis. For example a service provider network may permit customers to purchase and utilize computing resources such as virtual machine VM instances data storage resources database resources networking resources network services and other types of computing resources. Customers may configure the computing resources provided by a service provider network to implement desired functionality such as to provide a network based application or another type of functionality.

Managing computing resources provided by a service provider network such as those described above can be complex and time consuming. For example and without limitation in order to execute commands within a VM instance it may be necessary for users to remotely login to the VM instance in order to perform the desired command. This process can be very time consuming especially where the command is to be executed in more than one VM instance.

The following detailed description is directed to technologies for executing commands within a VM instance. The disclosure presented herein also includes technologies for discovering the commands that can be executed within a VM instance and for obtaining information indicating the status of a command that is executing or that has completed execution within a VM instance. Through an implementation of these technologies users of an on demand computing service provided by a service provider network can quickly and easily execute commands within VM instances without having to remotely login to the VM instances.

As discussed briefly above the various technologies disclosed herein may be implemented in a service provider network. A service provider network may permit customers to purchase and utilize computing resources which may be referred to herein as resources such as VM instances data storage resources database resources networking resources network services and other types of computing resources. In order to support the functionality disclosed herein VM instances executing in the service provider network may be configured with a software agent such as a daemon or other type of background process that is configured to receive and respond to requests for data such as a list identifying the commands that can be executed in a particular instance to execute a command and to provide data indicating the status of the execution of a command. In order to perform these functions a configuration file might also be maintained that identifies the available commands for an instance and that specifies a script or other type of program code for performing each of the commands. The configuration file and the scripts or other types of programs might be stored at the VM instance or in another location.

A public web service application programming interface API might also be exposed within the service provider network in some configurations that provides methods relating to the execution of commands within a VM instance. For example in one configuration the API includes a method for requesting data identifying the commands that may be executed within a VM instance. In response to receiving a call to the method for requesting data identifying the commands that can be executed within the VM instance a request is transmitted to the software agent executing on the VM instance for the data identifying the commands that can be executed. An instance manager executing on the host computer executing the VM instance may receive the request and pass the request to the software agent in some configurations. In turn the software agent is configured to return data identifying the commands that can be executed on the VM instance. The data may be utilized to populate a user interface UI configured to display UI controls for executing the commands in response to user selection and or in other ways.

In some configurations calls may be made periodically to the method for requesting data identifying the commands that may be executed within a VM instance. The data identifying the commands may be received and stored in a cache. When calls are subsequently received to the method the data stored in the cache may be utilized rather than making a request to the software agent on the VM instance. In this way the data identifying the commands that can be executed in a VM instance can be obtained and returned in response to a request faster than if a call were to be made to the software agent executing in the VM instance.

The API also includes a method for executing commands within a VM instance. In response to a call to the method for executing a command within a VM instance a request is transmitted to the software agent executing on the VM instance to execute the requested command. In turn the software agent is configured to execute the identified command by performing the associated script or other type of program code. The software agent might also be configured to return a unique identifier ID associated with the command in response to the request. As will be described in greater detail below the ID may be utilized to obtain information describing the status of the execution of the command and or the output of the execution of the command. In some configurations various authentication and or authorization processes may be performed to ensure that a user associated with a request is authorized to perform a requested command on a particular VM instance. Other types of security checks might also be made prior to executing a command within a VM instance.

In some configurations the API also includes a method for obtaining data describing the status of the execution of a command within a VM instance. A call to this method may include the ID provided by the software agent at the time the request to execute the command was made. In response to receiving a call to this method a request is transmitted to the software agent executing on the VM instance upon which the command was executed. The request may include the ID associated with the command. In response thereto the software agent executing on the VM instance is configured to obtain and return data indicating the status of the execution of the command. For example and without limitation the data might indicate whether execution is in progress or has completed and if completed whether execution was successful or failed. The returned data might also include the output of the execution of the command in some configurations.

Using an implementation of the mechanisms described above various types of commands can be executed within a VM instance without requiring a user to login to the VM instance. For example and without limitation commands can be executed for restarting a process on a VM instance for flushing a cache for performing a backup operation for configuring the VM instance and or for performing a test on the VM instance. Other types of commands can also be executed. Additional details regarding the various components and processes described briefly above will be presented below with regard to .

It should be appreciated that the subject matter presented herein may be implemented as a computer process a computer controlled apparatus a computing system or an article of manufacture such as a computer readable storage medium. While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

Those skilled in the art will also appreciate that aspects of the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described herein including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants e readers mobile telephone devices tablet computing devices special purposed hardware devices network appliances and the like. As mentioned briefly above the configurations described herein may be practiced in distributed computing environments such as a service provider network where tasks may be performed by remote computing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific configurations or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures which may be referred to herein as a FIG. or FIGS. .

Each type or configuration of a computing resource may be available from the service provider network in different sizes. For example a service provider might offer physical hosts VM instances or other types of data processing resources that are available for purchase and use that have many different configurations of processor capabilities main memory disk storage and operating system. A service provider operating the service provider network might also offer other types of resources for purchase and use by customers. For example a service provider might offer virtual or hardware devices database resources and instances file or block data storage resources and or networking resources such as load balancing resources domain name service DNS resources virtual private cloud VPC resources virtual local area network VLAN resources and or other types of hardware and software computing resources or services on a permanent or as needed basis. The resources might also include but are not limited to VM instances and images security groups option groups gateways option sets network access control lists ACLs subnets storage buckets network interfaces snapshots spot market requests and storage volumes.

The service provider operating the service provider network might also charge a fee for utilization of the resources to a customer that creates and uses the resources. The fee charged for a particular computing resource might be based upon the type and or configuration of the computing resource. For example in the case of a data processing computing resource like a VM instance the fee for use of the computing resource might be charged based upon the amount of time the computing resource is utilized. In the case of a data storage computing resource the fee might be computed based upon the amount of data stored and or the amount of data transferred into or out of the computing resource. The fees for other types of resources might also be based upon other considerations. A service provider might also utilize various purchasing models to determine the amount to charge a customer for use of resources provided by the service provider network .

The resources described above may be provided in one particular implementation by one or more data centers operated by the service provider. As known to those skilled in the art data centers are facilities utilized to house and operate computer systems and associated components. Data centers also typically include redundant and backup power communications cooling and security systems. The data centers might be located in geographically disparate regions and might also be connected to various other facilities such as co location facilities and various wide area networks WANs such as the Internet.

The resources described briefly above might also be provisioned and de provisioned as needed in an automated fashion. For example the service provider network might be configured to instantiate a new instance of a computing resource such as a VM instance in response to an increase in demand for a network service or other condition. Other types of computing resources might also be provisioned and de provisioned in a similar manner. Services in the service provider network might also provide functionality for automatically scaling and or de scaling resources based upon demand for the resources and or other factors.

A customer or potential customer of the service provider network might utilize an appropriate computing system not shown in to communicate with the service provider network over an appropriate data communications network also not shown in . In this way a customer of the service provider network can configure various aspects of the operation of the computing resources provided by the service provider network or to otherwise control any computing resources being utilized by the customer. For example and without limitation a computing system utilized by a customer of the service provider network might be utilized to purchase computing resources in the service provider network to configure aspects of the operation of the computing resources through a management console or other type of interface to access and utilize functionality provided by the various services and systems described herein and or to perform other types of functionality with regard to the operation of the computing resources provided by the service provider network .

A customer computing system might be any type of computing device capable of connecting to the service provider network via a suitable data communications network such as but not limited to a laptop or desktop computer a tablet computing device a server computer or a mobile telephone. Administrative users employed by the operator of the service provider network such as administrators managing the operation of the service provider network might also connect with manage and utilize resources provided by the service provider network in a similar fashion.

As discussed briefly above the service provider network might also be configured to provide various types of network services for use internally and by customers. For example and without limitation the service provider network may provide an on demand computing service for providing VM instances on demand a data storage service for storing data a cryptography service a notification service an authentication service a policy management service a task service and potentially other types of network accessible services . These and other services and their associated resources may be utilized together to implement various types of network based applications in the service provider network . Additional details regarding one implementation of the service provider network and the various types of network services that might be provided by the service provider network will be discussed below with regard to .

As shown in and discussed briefly above an on demand computing service is utilized in some configurations to provide the VM instances . For instance in the example shown in the on demand computing service is providing two VM instances A and B that are executing on the same host computer A. In this regard it should be appreciated that the configuration shown in has been simplified for discussion purposes and that many other host computers may be utilized to provide many other VM instances in a similar fashion. For example and without limitation a host computer B might be utilized to provide additional VM instances . As discussed above the VM instances might also be provisioned and or de provisioned based upon demand and or other factors.

As also shown in the host computer A is configured with an instance manager in some configurations. The instance manager is a software component that executes external to the VM instances A and B. The instance manager provides functionality for enabling communication with the VM instances A and B on a particular host computer A. More particularly a software agent is executed within each VM instance in some configurations. For instance in the example shown in the VM instance A is executing the software agent A and the VM instance B is executing the software agent B. The software agent B might be implemented as a daemon or other type of background process that listens on an assigned port for communications from the instance manager . The software agent might be implemented as another type of software component in other configurations.

A configuration file and one or more command scripts are also provisioned to each VM instance in one configuration. For instance in the example shown in a configuration file A and command scripts A have been provisioned to the VM instance A and a configuration file B and command scripts B have been provisioned to the VM instance B. The configuration file provides a list of the commands that can be executed within each VM instance . The configuration file also identifies for each command a command script that is to be executed when a request to execute the associated command is received by the software agent . In this regard it should be appreciated that the commands might be implemented by other types of program code other than scripts. For example and without limitation the commands might be implemented by compiled program code interpreted program code and or other types of program code in other configurations. It should also be appreciated that the list of commands set forth in the configuration file A can be edited by an authorized user to provide a custom list of commands that can be performed on a particular VM instance .

It should also be appreciated that the configuration file and the command scripts or other types of program code might be stored in a location other than within a VM instance in other configurations. For example and without limitation the configuration file and the command scripts or other types of program code might be stored in a database or other type of network accessible location for use by the VM instances . Moreover in some configurations a VM instance may be configured to operate without the use of a configuration file . In these configurations the command scripts or other type of program code might be stored in a data store external to the VM instance . When a request to execute a command is received the software agent may retrieve the command script or other type of program code to be executed from the data store without consulting the configuration file . Other implementations might also be utilized.

In order to instantiate VM instances that include the software agent the configuration file and the command scripts or other type of program code VM images may be created in advance that include these components. The VM images may then be utilized to instantiate VM instances that are appropriately configured with the software components described above. The VM images might be created by an operator of the service provider network a customer of the service provider network a developer and or another entity.

As shown in a public web service application programming interface API might also be exposed within the service provider network in some configurations that provides methods relating to the execution of commands within a VM instance . For example in one configuration the API includes a method A for requesting data identifying the commands that may be executed within a particular VM instance . Various components operating within the service provider network may call the API . For example and without limitation a management console may be utilized that provides a user interface UI for managing the operation of the VM instances . The data identifying the commands that can be executed within a VM instance may be utilized to generate UI controls within the UI for executing the commands in response to user selection and or in other ways. As shown in the methods exposed by the API might be called by other components such as through a command line interface CLI operating within the service provider network .

In response to receiving a call to the method A for requesting data identifying the commands that can be executed within the VM instance a request is transmitted to the software agent executing on the VM instance for the data identifying the commands that can be executed. For example and without limitation in one configuration the API transmits a request to a service manager . In turn the service manager transmits a request for the available commands to the instance manager executing on the same host computer as the VM instance for which the list of commands is desired. The instance manager receives the request and passes the request to the software agent executing within the VM instance . In turn the software agent reads the available commands from the configuration file and returns data identifying the available commands to the instance manager . The instance manager returns the available commands to the service manager which in turn returns the commands to the API . The data identifying the available commands may then be returned in response to the call to the method A such as to the management console or the CLI .

In some configurations the service manager or another component may be configured to periodically call to request the list of available commands from the VM instances through the mechanism described above. The service manager may receive the data identifying the commands and store the data in a cache such as the command cache illustrated in . When calls are subsequently received to the method A the service manager may return the data identifying the available commands that was previously stored in the cache rather than making a request to the software agent on the VM instance . In this way the data identifying the commands that can be executed in a VM instance can be obtained and returned in response to a call to the method A faster than if a call were to be made to the software agent executing in the VM instance . Other configurations might also be utilized in other implementations. Additional details regarding the operation of the method A will be provided below with regard to .

The API also includes a method B for executing commands within a VM instance . In response to a call to the method B for executing a command within a VM instance the API transmits a request to the service manager to execute the specified command on the identified VM instance . In turn the service manager transmits a request to the instance manager executing on the host computer executing the VM instance in which the specified command is to be executed. In response thereto the service manager then transmits a request to the software agent executing within the VM instance in which the command is to be executed.

The software agent receives the request to execute the command from the instance manager . In one configuration the software agent then examines the configuration file to identify the command script or other type of program code that corresponds to the requested command. Once the command script associated with the requested command has been identified the software agent causes the command script A or other type of program code for implementing the command to be executed within the VM instance .

As discussed briefly above the software agent might also be configured to return a unique identifier ID associated with the executed command in response to the request. For example the software agent might return the process ID for the executed command script A or other type of program code. Other types of IDs might also be utilized in other configurations. The ID is returned to the instance manager which returns the ID to the service manager . The service manager may then return the ID to the API which in turn returns the ID in response to the call to the method B. As will be described in greater detail below the returned ID may be subsequently utilized to obtain information describing the status of the execution of the command and or the output of the execution of the command.

In some configurations various authentication and or authorization processes may be performed to ensure that a user associated with a request to perform a command is authorized to perform the requested command on a particular VM instance . For example and without limitation the API and or the service manager might call an authentication service and or an authorization service prior to executing a command to verify that a user requesting execution of a command is authorized to perform the command. Through this authentication mechanism users may be authorized to perform certain types of commands within a VM instance even though the user may not be authorized to remotely login to the VM instance . In this regard it should be appreciated that other types of security checks might also be made prior to executing a command within a VM instance . Additional details regarding the operation of the method B for executing a command within a VM instance will be provided below with regard to .

In some configurations the API also includes a method C for obtaining data describing the status of the execution of a command within a VM instance . As discussed above a call to the method C may include the ID provided by the software agent at the time the request to execute the command was made. In response to receiving a call to this method the API transmits a request to the service manager which in turn transmits a request to the appropriate instance manager . The instance manager transmits a request for the status of the command to the software agent executing on the VM instance within which the command was executed. In response thereto the software agent executing within the VM instance obtains and returns data indicating the status of the execution of the command. For example and without limitation the data might indicate whether execution is in progress or has completed and if completed whether execution was successful or failed. The returned data might also include the output of the execution of the command in some configurations. Additional details regarding the operation of the method C will be provided below with regard to .

As discussed briefly above using an implementation of the mechanisms described above various types of commands can be executed within a VM instance without requiring a user to login to the VM instance . For example and without limitation commands can be executed for restarting a process on a VM instance for flushing a cache for performing a backup operation for configuring a VM instance and or for performing a test on a VM instance . Other types of commands can also be executed.

It should be appreciated that the various methods described above as being exposed by the API are merely illustrative and that other types of methods might also or alternatively be provided in other configurations. It should also be appreciated that other services operating in the service provider network might also utilize the methods exposed by the API . Services other than those shown in that operate within the service provider network might also be utilized to implement the functionality provided by the API .

The implementation of the various components described herein is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the Figures and described herein. These operations may also be performed in parallel or in a different order than those described herein. Some or all of these operations might also be performed by components other than those specifically identified.

The routine begins at operation where the public web service API is exposed within the service provider network . As discussed above the API includes a method A for obtaining data such as a list that describes the commands that can be executed within a particular VM instance . From operation the routine proceeds to operation where a call is received to the method A for obtaining data describing the commands that can be executed within a VM instance . For example and without limitation the management console and the CLI might be utilized in various configurations to make such a call to the method A. Other components might be utilized to make such a call in other configurations.

From operation the routine proceeds to operation where the API causes a request to be transmitted to the instance manager on the host computer executing the VM instance for which the list of commands is to be obtained. As discussed above the service manager is called in some configurations which in turn calls the instance manager on the appropriate host computer for the list of commands. The instance manager transmits the request for the available commands to the software agent executing in the appropriate VM instance at operation .

At operation the software agent receives the request for the available commands from the instance manager and identifies the available commands based upon the contents of the configuration file in one configuration. The software agent then returns data identifying the commands available for execution to the instance manager . In turn the instance manager returns the available commands to the service manager which returns the list of commands to the API . In turn the list of commands is returned in response to the call to the method A at operation . The routine then proceeds from operation to operation where it ends. As discussed above other mechanisms such as caching might also be utilized to obtain and return the list of available commands more quickly in other configurations.

From operation the routine proceeds to operation where authentication and or authorization might be performed in order to verify that a user associated with the request to execute the command is permitted to perform the command. For example and without limitation the API might call the authentication service and or the authorization service to determine whether the user is permitted to execute the command. If the user is not permitted to execute the command the routine may proceed from operation to operation where an error may be returned. If however the user is permitted to execute the command the routine may proceed from operation to operation .

At operation the API may cause a request to execute the command to be transmitted to the instance manager executing on the host computer that is executing the VM instance in which the command is to be executed. In turn the instance manager transmits a request to execute the command to the appropriate software agent executing in the VM instance at operation . The software agent utilizes the configuration file to identify the command script or other program component corresponding to the requested command at operation . The software agent then executes the identified command script or other program component .

From operation the routine proceeds to operation where the software agent returns the ID associated with the execution of the command to the instance manager . The instance manager returns the ID to the service manager which in turn returns the ID to the API . The ID can then be returned in response to the call to the method B at operation . The routine then proceeds from operation to operation where it ends.

It should be appreciated that in some configurations the execution of commands and or the results of execution may be logged by the software agent the instance manager the API and or the service manager . In this way a record can be kept of the commands that were executed on each VM instance and potentially the results of execution. Other data regarding the calls to the API and or the execution of commands on the VM instances might also be captured and maintained in other configurations.

From operation the routine proceeds to operation where a request is transmitted via the service manager to the instance manager executing on the host computer containing the VM instance within which the command was executed. The routine then proceeds from operation to operation where the instance manger transmits a request for the status of the execution of the command to the software agent in the VM instance in which the command was executed. The routine then proceeds to operation where the software agent returns the status of the execution of the command to the instance manger . The status might indicate for example that execution of the command was successful or that execution failed. The status might also or alternately indicate other types of conditions. The status might also include a text output of the execution of the command. The output of the execution of the command might be presented in the UI the CLI and or in another manner.

From operation the instance manager returns the data indicating the status of the execution of the command to the service manager . The service manager in turn returns the data to the API which returns the data in response to the call to the method C. From operation the routine proceeds to operation where it ends.

Each type of computing resource provided by the service provider network may be general purpose or may be available in a number of specific configurations. For example data processing resources may be available as physical computers or VM instances in a number of different configurations. The VM instances may be configured to execute applications including web servers application servers media servers database servers some or all of the services described above and or other types of programs. Data storage resources may include file storage devices block storage devices and the like. The service provider network might also be configured to provide other types of computing resources not mentioned specifically herein.

The computing resources provided by the service provider network are enabled in one implementation by one or more data centers A N which may be referred herein singularly as a data center or in the plural as the data centers . The data centers are facilities utilized to house and operate computer systems and associated components. The data centers typically include redundant and backup power communications cooling and security systems. The data centers might also be located in geographically disparate locations. One illustrative configuration for a data center that might be utilized to implement the technologies disclosed herein will be described below with regard to .

The customers and other users of the service provider network may access the computing resources provided by the service provider network over a network which may be a wide area communication network WAN such as the Internet an intranet or an Internet service provider ISP network or a combination of such networks. For example and without limitation a computing device operated by a customer or other user of the service provider network might be utilized to access the service provider network by way of the network . It should be appreciated that a local area network LAN the Internet or any other networking topology known in the art that connects the data centers to remote customers and other users may be utilized. It should also be appreciated that combinations of such networks might also be utilized.

The server computers may be standard tower rack mount or blade server computers configured appropriately for providing the computing resources described herein illustrated in as the computing resources A E . As mentioned above the computing resources provided by the service provider network might be data processing resources such as VM instances or hardware computing systems data storage resources database resources networking resources and others. Some of the servers might also be configured to execute a resource manager capable of instantiating and or managing the computing resources. In the case of VM instances for example the resource manager might be a hypervisor or another type of program configured to enable the execution of multiple VM instances on a single server . Server computers in the data center might also be configured to provide network services and other types of services some of which are described in detail below with regard to .

The data center shown in also includes a server computer F that may execute some or all of the software components described above. For example and without limitation the server computer F might be configured to execute various components for providing the on demand computing service the management console and or the other software components described above. The server computer F might also be configured to execute other components and or to store data for providing some or all of the functionality described herein. In this regard it should be appreciated that the services illustrated in as executing on the server computer F might execute on many other physical or virtual servers in the data centers in various configurations.

In the example data center shown in an appropriate LAN is also utilized to interconnect the server computers A F. The LAN is also connected to the network illustrated in . It should be appreciated that the configuration and network topology described herein has been greatly simplified and that many more computing systems software components networks and networking devices may be utilized to interconnect the various computing systems disclosed herein and to provide the functionality described above. Appropriate load balancing devices or other types of network infrastructure components might also be utilized for balancing a load between each of the data centers A N between each of the server computers A F in each data center and potentially between computing resources in each of the data centers . It should be appreciated that the configuration of the data center described with reference to is merely illustrative and that other implementations might be utilized.

It should be appreciated that customers of the service provider network may include organizations or individuals that utilize some or all of the services provided by the service provider network . As described above a customer or other user may communicate with the service provider network through a network such as the network shown in . Communications from a customer computing device such as the computing device shown in to the service provider network may cause the services provided by the service provider network to operate in accordance with the described configurations or variations thereof.

It is noted that not all configurations described include the services described with reference to and that additional services may be provided in addition to or as an alternative to services explicitly described. Each of the services shown in might also expose web service interfaces that enable a caller to submit appropriately configured API calls to the various services through web service requests. In addition each of the services may include service interfaces that enable the services to access each other e.g. to enable a virtual computer system provided by the on demand computing service to store data in or retrieve data from the data storage service A . Additional details regarding some of the services shown in will now be provided.

As discussed above the on demand computing service may be a collection of computing resources configured to instantiate VM instances and to provide other types of computing resources on demand. For example a customer or other user of the service provider network may interact with the on demand computing service via appropriately configured and authenticated API calls to provision and operate VM instances that are instantiated on physical computing devices hosted and operated by the service provider network . The VM instances may be used for various purposes such as to operate as servers supporting a web site to operate business applications or generally to serve as computing resources for the customer. Other applications for the VM instances may be to support database applications electronic commerce applications business applications and or other applications. Although the on demand computing service is shown in any other computer system or computer system service may be utilized in the service provider network such as a computer system or computer system service that does not employ virtualization and instead provisions computing resources on dedicated or shared computers servers and or other physical devices.

The storage service A might include software and computing resources that collectively operate to store data using block or file level storage devices and or virtualizations thereof . The storage devices of the storage service A might for instance be operationally attached to virtual computer systems provided by the on demand computing service to serve as logical units e.g. virtual drives for the computer systems. A storage device might also enable the persistent storage of data used generated by a corresponding virtual computer system where the virtual computer system service might only provide ephemeral data storage.

The service provider network may also include a cryptography service C. The cryptography service C may utilize storage services of the service provider network such as the storage service A to store encryption keys in encrypted form whereby the keys may be usable to decrypt customer keys accessible only to particular devices of the cryptography service C. The cryptography service C might also provide other types of functionality not specifically mentioned herein.

As illustrated in the service provider network in various configurations also includes an authentication service and a policy management service E. The authentication service in one example is a computer system i.e. collection of computing resources configured to perform operations involved in authentication of users. For instance one of the services shown in may provide information from a user to the authentication service to receive information in return that indicates whether or not the requests submitted by the user are authentic.

The policy management service E in one example is a network service configured to manage policies on behalf of customers or internal users of the service provider network . The policy management service E may include an interface that enables customers to submit requests related to the management of policy. Such requests may for instance be requests to add delete change or otherwise modify policy for a customer service or system or for other administrative actions such as providing an inventory of existing policies and the like.

The service provider network in various configurations is also configured with a task service F. The task service F is configured to receive a task package and to enable executing tasks as dictated by the task package. The task service F may be configured to use any resource of the service provider network such as instantiated virtual machines or virtual hosts for executing the task. The task service F may configure the instantiated virtual machines or virtual hosts to operate using a selected operating system and or a selected execution application in accordance with specified requirements.

The service provider network may additionally maintain other services G based at least in part on the needs of its customers. For instance the service provider network may maintain a deployment service B for deploying program code and or a database service not shown in in some configurations. A database service may be a collection of computing resources that collectively operate to create maintain and allow queries to be performed on databases stored within the service provider network . For example a customer or other user of the service provider network may operate and manage a database from the database service by utilizing appropriately configured network API calls. This in turn may allow the customer to maintain and potentially scale the operations in the database. Other services include object level archival data storage services and services that manage monitor interact with or support other services. The service provider network might also be configured with other services not specifically mentioned herein in other configurations.

The computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative configuration one or more central processing units CPUs operate in conjunction with a chipset . The CPUs may be standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .

The CPUs perform operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units and the like.

The chipset provides an interface between the CPUs and the remainder of the components and devices on the baseboard . The chipset may provide an interface to a RAM used as the main memory in the computer . The chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that help to startup the computer and to transfer information between the various components and devices. The ROM or NVRAM may also store other software components necessary for the operation of the computer in accordance with the configurations described herein.

The computer may operate in a networked environment using logical connections to remote computing devices and computer systems through a network such as the network . The chipset may include functionality for providing network connectivity through a NIC such as a gigabit Ethernet adapter. The NIC is capable of connecting the computer to other computing devices over the network . It should be appreciated that multiple NICs may be present in the computer connecting the computer to other types of networks and remote computer systems.

The computer may be connected to a mass storage device that provides non volatile storage for the computer. The mass storage device may store an operating system programs and data which have been described in greater detail herein. The mass storage device may be connected to the computer through a storage controller connected to the chipset . The mass storage device may consist of one or more physical storage units. The storage controller may interface with the physical storage units through a serial attached SCSI SAS interface a serial advanced technology attachment SATA interface a fiber channel FC interface or other type of interface for physically connecting and transferring data between computers and physical storage units.

The computer may store data on the mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether the mass storage device is characterized as primary or secondary storage and the like.

For example the computer may store information to the mass storage device by issuing instructions through the storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to the mass storage device described above the computer may have access to other computer readable storage media to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable storage media is any available media that provides for the non transitory storage of data and that may be accessed by the computer .

By way of example and not limitation computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology. Computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information in a non transitory fashion.

As mentioned briefly above the mass storage device may store an operating system utilized to control the operation of the computer . According to one configuration the operating system comprises the LINUX operating system. According to another configuration the operating system comprises the WINDOWS SERVER operating system from MICROSOFT Corporation. According to further configurations the operating system may comprise the UNIX operating system or one of its variants. It should be appreciated that other operating systems may also be utilized. The mass storage device may store other system or application programs and data utilized by the computer .

In one configuration the mass storage device or other computer readable storage media is encoded with computer executable instructions which when loaded into the computer transform the computer from a general purpose computing system into a special purpose computer capable of implementing the configurations described herein. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one configuration the computer has access to computer readable storage media storing computer executable instructions which when executed by the computer perform the various processes described above with regard to . The computer might also include computer readable storage media for performing any of the other computer implemented operations described herein.

The computer may also include one or more input output controllers for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. Similarly an input output controller may provide output to a display such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for executing commands within VM instances have been presented herein. Moreover although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and media are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example configurations and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

