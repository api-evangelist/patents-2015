---

title: System and method for providing a climate data analytic services application programming interface distribution package
abstract: A system, method and computer-readable storage devices for providing a climate data analytic services application programming interface distribution package. The example system can provide various components. The system provides a climate data analytic services application programming interface library that enables software applications running on a client device to invoke the capabilities of a climate data analytic service. The system provides a command-line interface that provides a means of interacting with a climate data analytic service by issuing commands directly to the system's server interface. The system provides sample programs that call on the capabilities of the application programming interface library and can be used as templates for the construction of new client applications. The system can also provide test utilities, build utilities, service integration utilities, and documentation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09411569&OS=09411569&RS=09411569
owner: The United States of America as represented by the Administrator of the National Aeronautics and Space Administration
number: 09411569
owner_city: Washington
owner_country: US
publication_date: 20150512
---
The present disclosure relates to providing access to climate data and more specifically to providing a distribution package whereby end users gain access to a climate data analytic services API program samples build utilities and documentation.

Climate models generate data that are of great value to society. Climate model outputs include retrospective analyses that model the historical state of the climate estimates of current climate conditions and projections of future climate conditions. Offering climate data analytics as a service makes it easier to access climate model data and perform data analyses where the data are stored. The capabilities of a climate data analytics service can be made available to client devices through an application programming interface. Currently however the ability of end users applications climate researchers or members of the public to gain meaningful access to climate data analytic services is limited. The current technologies are deficient because there exists no effective means for gaining access to the libraries utilities and documentation that include an application programming interface. What is needed is an improved approach that makes it easier to access the capabilities of a climate data analytic services application programming interface.

A system method and computer readable storage devices are disclosed which deliver a climate data analytic services application programming interface to the end user. The climate data analytic services CDS application programming interface API distribution package provides an example embodiment of a system through which users can acquire the tools necessary to install and use the CDS API on a client device. Various modifications and changes may be made to this embodiment without departing from the broader spirit and scope of this disclosure.

The command line interpreter is a software application that enables users to interact directly with a climate data analytic system s interface. The CLI draws on the functionality of the CDS API programming library. In one embodiment the CDS API supports a climate data analytics system including a MERRA analytic service MAS and a persistence service PS . The distribution package provides sample programs that demonstrate how a client software application can make use of the API libraries to access these services. In addition the distribution package provides test utilities that evaluate the robustness of the API runtime environment and libraries. As new services become available the distribution package can be extended with sample programs and test routines for the new services. Build utilities enable the end user to install and configure the API environment.

One goal for the distribution package is to make it easy for end users to install the CDS API and build CDS API compliant software applications that use the capabilities afforded by systems that deliver climate data analytics as a service. An important complementary goal is to provide the tools necessary to integrate new services or legacy systems into the CDS API framework. To that end the distribution package also provides service integration utilities including templates for building CDS API compliant interfaces to these systems.

Making a new service or legacy system accessible through the CDS API can include building an adapter module that maps the functionalities of the new service or legacy system to utilities in the API s programming library. The service integration utilities provide the tools and templates to guide the construction of such modules. In addition a collection of pre built adapter modules for commonly used systems including the Earth System Grid Federation ESGF Open Source Project for a Network Data Access Protocol OpenDAP services and Open Geographic Consortium OGC Web Processing Service WPS services are provided in the distribution package.

Finally the CDS API distribution package can include all the documentation needed to install configure test and use the CDS API. The distribution package can be downloaded to a client device as an archive such as a .zip file or a .tar file.

Having disclosed some basic system components and concepts the disclosure now turns to the exemplary method embodiment shown in . For the sake of clarity the method is described in terms of an exemplary system as shown in configured to practice the method. The steps outlined herein are exemplary and can be implemented in any combination thereof including combinations that exclude add or modify certain steps.

A system configured according to this disclosure can provide a climate data analytic services application programming interface distribution package. The system can include a climate data analytic services application programming interface API library that enables software applications running on a client device to invoke the capabilities of a climate data analytic service .

The system can include a command line interface that provides a means of interacting with a climate data analytic service by issuing commands directly to the system s server interface . The system can include sample programs that call on the capabilities of the application programming interface library and can be used as templates for the construction of new client applications. The application programming interface library can be a set of Python programming language files containing the source code necessary to build and execute client side applications. The sample programs can include a Python programming language application that demonstrates the use of the climate data analytic services application programming interface to automate data gathering from a climate data analytics service using the basic utilities of the service a Python programming language application that demonstrates the use of the climate data analytic services application programming interface to automate data gathering from a climate data analytics service using the extended utilities of the service and a Python programming language application that demonstrates the use of the climate data analytic services application programming interface to store a data object in a persistence service then add metadata search and download the object using the basic utilities of the persistence service. The API can communicate with a climate data analytics system s Web service interface through International Organization for Standards ISO Open Archival Information System OATS Reference Model based uniform resource locators that include an ingest endpoint a general form a query endpoint of a general form an order endpoint of the general form a download endpoint of a general form an execute endpoint of a general form and a status endpoint of a general form.

The system can include test utilities that evaluate the robustness and performance of an installed client side application programming interface environment and build utilities that install the application programming interface library and create the client side run time environment required by the library. The build utilities can be tools such as Make Ant and Maven which are trademarks of their respective owners. The test utilities can include a MERRA Analytic Services robustness test that exercises the basic utility methods of the service over various combinations of MERRA collections and variables a persistence service robustness test that exercises the basic utility methods of the service with various combinations of operations and a comprehensive system robustness test that exercises all methods of all services supported by the climate data analytic services application programming interface.

The system can include service integration utilities that provide templates that can be used to build an application programming interface compliant service interface to a new service and a collection of pre built integration interfaces for commonly used services . The service integration utilities can include specific adaptor modules for ESGF OpenDAP services and WPS services. The service integration library can include an adapter module that maps the API s programming library utilities to the specific capabilities of a new service or legacy system and a REST module that communicatively links the adapter module to a new service or legacy system Web service interface. The adapter module can map climate data analytic service requests based on OAIS Reference Model data flow categories to various capabilities supported by the API s programming library. The capabilities of the adapter module can include ingest capabilities that input data objects to a service query capabilities that retrieve metadata relating to data objects in a service order capabilities that dynamically create data objects in a service download capabilities that retrieve data objects from a service execute capabilities that initiate service definable operations and status capabilities that check the progress of an order operation. The adapter and REST module templates can be made up of general software subroutine templates written in the Java Python and PHP programming languages. Java Python and PHP are trademarks of their respective owners.

The system can provide documentation describing the organization of the distribution package and how an end user installs and uses the climate data analytic services application programming interface . The documentation can include for example a readme file that contains detailed configuration deployment and testing instructions.

Various embodiments of the disclosure are described in detail below. While specific implementations are described it should be understood that this is done for illustration purposes only. Other components and configurations may be used without parting from the spirit and scope of the disclosure.

With reference to an exemplary system and or computing device includes a processing unit CPU or processor and a system bus that couples various system components including the system memory such as read only memory ROM and random access memory RAM to the processor . The system can include a cache of high speed memory connected directly with in close proximity to or integrated as part of the processor . The system copies data from the memory and or the storage device to the cache for quick access by the processor . In this way the cache provides a performance boost that avoids processor delays while waiting for data. These and other modules can control or be configured to control the processor to perform various operations or actions. Other system memory may be available for use as well. The memory can include multiple different types of memory with different performance characteristics. It can be appreciated that the disclosure may operate on a computing device with more than one processor or on a group or cluster of computing devices networked together to provide greater processing capability. The processor can include any general purpose processor and a hardware module or software module such as module module and module stored in storage device configured to control the processor as well as a special purpose processor where software instructions are incorporated into the processor. The processor may be a self contained computing system containing multiple cores or processors a bus memory controller cache etc. A multi core processor may be symmetric or asymmetric. The processor can include multiple processors such as a system having multiple physically separate processors in different sockets or a system having multiple processor cores on a single physical chip. Similarly the processor can include multiple distributed processors located in multiple separate computing devices but working together such as via a communications network. Multiple processors or processor cores can share resources such as memory or the cache or can operate using independent resources. The processor can include one or more of a state machine an application specific integrated circuit ASIC or a programmable gate array PGA including a field PGA.

The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. A basic input output BIOS stored in ROM or the like may provide the basic routine that helps to transfer information between elements within the computing device such as during start up. The computing device further includes storage devices or computer readable storage media such as a hard disk drive a magnetic disk drive an optical disk drive tape drive solid state drive RAM drive removable storage devices a redundant array of inexpensive disks RAID hybrid storage device or the like. The storage device can include software modules for controlling the processor . The system can include other hardware or software modules. The storage device is connected to the system bus by a drive interface. The drives and the associated computer readable storage devices provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computing device . In one aspect a hardware module that performs a particular function includes the software component stored in a tangible computer readable storage device in connection with the necessary hardware components such as the processor bus display and so forth to carry out a particular function. In another aspect the system can use a processor and computer readable storage device to store instructions which when executed by the processor cause the processor to perform operations a method or other specific actions. The basic components and appropriate variations can be modified depending on the type of device such as whether the device is a small handheld computing device a desktop computer or a computer server. When the processor executes instructions to perform operations the processor can perform the operations directly and or facilitate direct or cooperate with another device or component to perform the operations.

Although the exemplary embodiment s described herein employs the hard disk other types of computer readable storage devices which can store data that are accessible by a computer such as magnetic cassettes flash memory cards digital versatile disks DVDs cartridges random access memories RAMs read only memory ROM a cable containing a bit stream and the like may also be used in the exemplary operating environment. Tangible computer readable storage media computer readable storage devices or computer readable memory devices expressly exclude media such as transitory waves energy carrier signals electromagnetic waves and signals per se.

To enable user interaction with the computing device an input device represents any number of input mechanisms such as a microphone for speech a touch sensitive screen for gesture or graphical input keyboard mouse motion input speech and so forth. An output device can also be one or more of a number of output mechanisms known to those of skill in the art. In some instances multimodal systems enable a user to provide multiple types of input to communicate with the computing device . The communications interface generally governs and manages the user input and system output. There is no restriction on operating on any particular hardware arrangement and therefore the basic hardware depicted may easily be substituted for improved hardware or firmware arrangements as they are developed.

For clarity of explanation the illustrative system embodiment is presented as including individual functional blocks including functional blocks labeled as a processor or processor . The functions these blocks represent may be provided through the use of either shared or dedicated hardware including but not limited to hardware capable of executing software and hardware such as a processor that is purpose built to operate as an equivalent to software executing on a general purpose processor. For example the functions of one or more processors presented in may be provided by a single shared processor or multiple processors. Use of the term processor should not be construed to refer exclusively to hardware capable of executing software. Illustrative embodiments may include microprocessor and or digital signal processor DSP hardware read only memory ROM for storing software performing the operations described below and random access memory RAM for storing results. Very large scale integration VLSI hardware embodiments as well as custom VLSI circuitry in combination with a general purpose DSP circuit may also be provided.

The logical operations of the various embodiments are implemented as 1 a sequence of computer implemented steps operations or procedures running on a programmable circuit within a general use computer 2 a sequence of computer implemented steps operations or procedures running on a specific use programmable circuit and or interconnected machine modules or program engines within the programmable circuits. The system shown in can practice all or part of the recited methods can be a part of the recited systems and or can operate according to instructions in the recited tangible computer readable storage devices. Such logical operations can be implemented as modules configured to control the processor to perform particular functions according to the programming of the module. For example illustrates three modules Mod Mod and Mod which are modules configured to control the processor . These modules may be stored on the storage device and loaded into RAM or memory at runtime or may be stored in other computer readable memory locations.

One or more parts of the example computing device up to and including the entire computing device can be virtualized. For example a virtual processor can be a software object that executes according to a particular instruction set even when a physical processor of the same type as the virtual processor is unavailable. A virtualization layer or a virtual host can enable virtualized components of one or more different computing devices or device types by translating virtualized operations to actual operations. Ultimately however virtualized hardware of every type is implemented or executed by some underlying physical hardware. Thus a virtualization compute layer can operate on top of a physical compute layer. The virtualization compute layer can include one or more of a virtual machine an overlay network a hypervisor virtual switching and any other virtualization application.

The processor can include all types of processors disclosed herein including a virtual processor. However when referring to a virtual processor the processor includes the software components associated with executing the virtual processor in a virtualization layer and underlying hardware necessary to execute the virtualization layer. The system can include a physical or virtual processor that receive instructions stored in a computer readable storage device which cause the processor to perform certain operations. When referring to a virtual processor the system also includes the underlying physical hardware executing the virtual processor .

Embodiments within the scope of the present disclosure may also include tangible and or non transitory computer readable storage devices for carrying or having computer executable instructions or data structures stored thereon. Such tangible computer readable storage devices can be any available device that can be accessed by a general purpose or special purpose computer including the functional design of any special purpose processor as described above. By way of example and not limitation such tangible computer readable devices can include RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other device which can be used to carry or store desired program code in the form of computer executable instructions data structures or processor chip design. When information or instructions are provided via a network or another communications connection either hardwired wireless or combination thereof to a computer the computer properly views the connection as a computer readable medium. Thus any such connection is properly termed a computer readable medium. Combinations of the above should also be included within the scope of the computer readable storage devices.

Computer executable instructions include for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Computer executable instructions also include program modules that are executed by computers in stand alone or network environments. Generally program modules include routines programs components data structures objects and the functions inherent in the design of special purpose processors etc. that perform particular tasks or implement particular abstract data types. Computer executable instructions associated data structures and program modules represent examples of the program code means for executing steps of the methods disclosed herein. The particular sequence of such executable instructions or associated data structures represents examples of corresponding acts for implementing the functions described in such steps.

Other embodiments of the disclosure may be practiced in network computing environments with many types of computer system configurations including personal computers hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. Embodiments may also be practiced in distributed computing environments where tasks are performed by local and remote processing devices that are linked either by hardwired links wireless links or by a combination thereof through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

The various embodiments described above are provided by way of illustration only and should not be construed to limit the scope of the disclosure. For example the principles herein apply generally to climate data but can also be applied to other non climate data sets. Various modifications and changes may be made to the principles described herein without following the example embodiments and applications illustrated and described herein and without departing from the spirit and scope of the disclosure. Claim language reciting at least one of a set indicates that one member of the set or multiple members of the set satisfy the claim.

