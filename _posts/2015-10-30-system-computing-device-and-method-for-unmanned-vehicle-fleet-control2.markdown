---

title: System, computing device and method for unmanned vehicle fleet control
abstract: A system for controlling a fleet of unmanned vehicles includes a plurality of unmanned vehicles connected to a computing device. The computing device stores a dynamic attribute and a static attribute respective to each of the plurality of unmanned vehicles. The computing device is configured to: receive a task request including (i) an item identifier of an item, (ii) an action type defining an action to be performed respective to the item, and (iii) a location identifier of a location at which to perform the action; responsive to receiving the request, retrieve the stored dynamic attributes and static attributes; based on a comparison of the task request with the dynamic attributes and the static attributes, select one of the plurality of unmanned vehicles; and transmit, via the network, a command to the selected unmanned vehicle to perform the action respective to the item at the location.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09606544&OS=09606544&RS=09606544
owner: Clearpath Robotics, Inc.
number: 09606544
owner_city: Kitchener
owner_country: CA
publication_date: 20151030
---
This application claims priority from United States Provisional Patent Application No. 62 073 355 filed Oct. 31 2014 the entire contents of which is incorporated herein by reference.

The specification relates generally to control of unmanned vehicles and specifically to a system computing device and method for controlling a fleet of unmanned vehicles.

Unmanned vehicles also often referred to as robots can be deployed in a wide variety of applications including for example manufacturing or materials handling facilities. In such facilities a range of tasks may be required including lifting and transporting materials having widely differing weights and dimensions travelling various distances under various environmental conditions and the like. Performing such varying tasks with unmanned vehicles requires that the unmanned vehicles possess sufficient capabilities if not within each vehicle then within a set of vehicles to perform all the required tasks.

Ensuring that unmanned vehicles deployed in such facilities poses certain challenges. For example providing a set of unmanned vehicles that are all capable of performing all of the required tasks may be inefficient as certain capabilities may rarely be called on e.g. for less frequently performed tasks . On the other hand employing vehicles with different capabilities imposes a burden on operators at the facility to assign the correct vehicle to each task when the task is performed.

According to an aspect of the specification a system is provided including a plurality of unmanned vehicles and a computing device for connection to the plurality of unmanned vehicles via a network. The computing device stores in a memory a dynamic attribute and a static attribute respective to each of the plurality of unmanned vehicles. The computing device is configured to receive a task request the task request including i an item identifier of an item within the facility ii an action type defining an action to be performed respective to the item and iii a location identifier of a location within the facility at which to perform the action responsive to receiving the request retrieve the stored dynamic attributes and static attributes from the memory based on a comparison of the task request with the dynamic attributes and the static attributes select one of the plurality of unmanned vehicles and transmit via the network a command to the selected unmanned vehicle to perform the action respective to the item at the location.

System also includes a computing device for connection to unmanned vehicles via a network . Computing device can be connected to network via for example a wired link although wired link can be any suitable combination of wired and wireless links in other embodiments. Unmanned vehicles can be connected to network via respective wireless links and . Links can be any suitable combination of wired and wireless links in other examples although generally wireless links are preferable to permit movement of unmanned vehicles about the facility. Network can be any suitable one of or any suitable combination of wired and wireless networks including local area networks LAN or WLAN wide area networks WAN such as the Internet and mobile networks e.g. GSM LTE and the like .

Computing device as will be discussed in greater detail below controls unmanned vehicles and more specifically instructs unmanned vehicles to carry out tasks within the facility. The nature of the tasks performed by unmanned vehicles under the control of computing device is not particularly limited. In general the tasks assigned to unmanned vehicles require unmanned vehicles to perform various actions respective to various items at various locations within the facility. Data defining the actions items and locations are provided to unmanned vehicles by computing device . In some examples as will be discussed below tasks assigned to unmanned vehicles can omit data defining one or more of the above mentioned elements.

The actions items and locations mentioned above are not particularly limited. Actions performed by the unmanned vehicles can include any of a variety of physical interactions with items. For example actions can include picking up an item dropping an item off and any number of in process actions performed after picking an item up and before dropping the item off e.g. machining or cleaning an item at a specified location with the assistance of other equipment and the like. A wide variety of items and locations are also contemplated. Items generally include any physical object or combination of physical objects. Thus an item as discussed herein can be a box or other container whether empty or containing material a machine part a tool a collection of material such as sand or gravel and the like. Locations include any regions within the facility bounded by coordinates. Such regions can be three dimensional i.e. volumes two dimensional i.e. areas one dimensional i.e. lines or zero dimensional i.e. points .

In the present example an item is illustrated at a first location . Item can be for example a box or other container and location can be an area defined on a floor of the facility for storage of items. A second location is also illustrated. Second location can contain for example a work station where materials are to be removed from or placed in item or where item is to be labelled or otherwise modified. A wide variety of other work station activities will occur to those skilled in the art e.g. welding stations paint spray booths and so on . A third location is also illustrated in . In the present example third location contains a conveyor apparatus which may carry item to another part of the facility.

In light of the examples of items and locations given above examples of tasks to be performed by unmanned vehicles will occur to those skilled in the art. For example a task may include picking up item at location . Another task may include holding item at location . Yet another task may include dropping off item at location .

As will be seen below unmanned vehicles have various operational capabilities referred to herein as attributes . In addition to dynamic attributes that change over time such as the location of a vehicle within the facility the remaining charge or fuel load of a vehicle and the like vehicles have static attributes. Examples of static attributes include the maximum payload of a vehicle which tools or equipment the vehicle possesses and the like. Thus different ones of vehicles may be suited to different tasks. Indeed some vehicles may not be capable of completing some tasks e.g. because they do not have the necessary equipment on board . Therefore computing device is configured not only to maintain records of the dynamic and static attributes of each vehicle but also to automatically select a vehicle from the set of vehicles in the facility to perform each incoming task based on the task and the attributes of vehicles . Incoming task requests received at computing device therefore need not specify which vehicle must perform the task.

System can also include a facility controller connected to network in the form of a further computing device e.g. a server . Controller can for example control facility equipment other than unmanned vehicles such as the work station at location the conveyor at location and the like. Controller can also in some embodiments administer a warehouse management system WMS for the facility. Controller can also issue requests to computing device for tasks to be performed by unmanned vehicles . As mentioned above however such task requests need not specifically identify any of unmanned vehicles . Indeed controller need not be aware of the existence or capabilities of any of unmanned vehicles .

Before describing the above mentioned attributes and vehicle selection in greater detail an example vehicle and certain internal components of computing device will be described.

Referring now to an example unmanned vehicle is shown. In particular unmanned vehicle is depicted according to a non limiting embodiment. Unmanned vehicle is depicted as a terrestrial vehicle although it is contemplated that unmanned vehicles can also include aerial vehicles and watercraft. Unmanned vehicle includes a chassis containing or otherwise supporting various other components including one or more locomotive devices . Devices in the present example are wheels although in other embodiments any suitable locomotive device or combination thereof may be employed e.g. tracks propellers and the like .

Locomotive devices are powered by one or more motors not shown contained within chassis . The motors of unmanned vehicle can be electric motors internal combustion engines or any other suitable motor or combination of motors. In general the motors drive the locomotive devices by drawing power from an energy storage device not shown supported on or within chassis . The nature of the energy storage device can vary based on the nature of the motors. For example the energy storage can include batteries combustible fuel tanks or any suitable combination thereof.

Unmanned vehicle also includes a load bearing surface also referred to as a payload surface for carrying an item such as item thereon. In some examples payload surface can be replaced or supplemented with other payload bearing equipment such as a cradle a manipulator arm or the like.

Unmanned vehicle can also include a variety of sensors. In the present example such sensors include at least one load cell coupled to payload surface for measuring a force exerted on payload surface e.g. by an item being carried by unmanned vehicle . The sensors of unmanned vehicle can also include machine vision sensors such as any suitable one of or any suitable combination of barcode scanners laser based sensing devices e.g. a LIDAR sensor cameras and the like. Unmanned vehicle can also include a location sensor not shown such as a GPS sensor for detecting the location of unmanned vehicle with respect to a frame of reference. The frame of reference is not particularly limited and may be for example a global frame of reference e.g. GPS coordinates or a facility specific frame of reference. Other sensors that can be provided with unmanned vehicle include accelerometers fuel level or battery level sensors and the like.

Unmanned vehicle can also include a control panel as well as anchors for securing items or other equipment to chassis or for lifting chassis e.g. for maintenance . Unmanned vehicle can also include any of a variety of other features such as indicator lights .

In addition unmanned vehicle includes a central processing unit CPU also referred to as a processor interconnected with a non transitory memory and a network interface. Via the network interface link and network the processor can send and receive data to and from computing device . For example unmanned vehicle can send updated location data to computing device and receive task assignments from computing device .

Upon receipt of a task from computing device unmanned vehicle is configured to perform the task for example by moving to a location specified in the task and performing an action specified in the task once that location is reached. Unmanned vehicle can be configured to send status messages to computing device during the performance of the task.

As mentioned earlier unmanned vehicles may be a heterogeneous set of vehicles. For example in the embodiment illustrated in unmanned vehicle may be a larger version of unmanned vehicle having a higher carrying capacity while unmanned vehicle may carry specialized equipment e.g. a grasping device such as a manipulator arm instead of a payload surface .

Turning now to certain internal components of computing device are illustrated. Computing device can be any one of or any combination of a variety of computing devices. Such devices include desktop computers servers mobile computers such as laptops and tablet computers and the like. Computing device therefore includes at least one central processing unit CPU also referred to herein as a processor . Processor is interconnected with a non transitory computer readable medium such as a memory . Processor is also interconnected with a communications interface .

Processor and memory are generally comprised of one or more integrated circuits ICs and can have a variety of structures as will now occur to those skilled in the art for example more than one CPU can be provided . Memory can be any suitable combination of volatile e.g. Random Access Memory RAM and non volatile e.g. read only memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory magnetic computer storage device or optical disc memory.

Communications interface allows computing device to connect with other computing devices e.g. unmanned vehicles controller via network . Communications interface therefore includes any necessary hardware e.g. network interface controllers NICs radio units and the like to communicate with network over link . Computing device can also include input and output devices such as keyboards mice displays and the like not shown .

Memory stores a plurality of computer readable programming instructions executable by processor in the form of various applications. As will be understood by those skilled in the art processor can execute the instructions of one or more such applications in order to perform various actions defined within the instructions. In the description below processor and more generally computing device are said to be configured to perform certain functions. It will be understood that they are so configured via the execution of the instructions of the applications stored in memory .

Among the applications stored in memory is a fleet control application also referred to herein as application . Application is executable by processor to perform various actions described herein. Memory in the present example also stores data for retrieval processing and updating during the execution of application . In particular memory stores a vehicle database an item database and a location database . The three databases mentioned above can be combined or subdivided into a different number of databases in other embodiments the depiction of databases and as separate databases is provided for illustrative purposes only.

In general databases and contain data employed by processor in the selection of an appropriate one of unmanned vehicles to perform a requested task. Databases and thus contain at least one dynamic attribute and at least one static attribute respective to each unmanned vehicle . In addition databases and can contain location attributes for locations within the facility as well as item attributes for items within the facility. Further databases and can contain data describing tasks currently being performed by unmanned vehicles . Examples of databases and will be provided below in connection with a description of the fleet control functions performed by computing device .

As mentioned above computing device is configured to receive task requests and to assign those task requests to unmanned vehicles based on the nature of the tasks and the operational capabilities of unmanned vehicles as defined by the attributes stored in memory . Referring now to a method of unmanned vehicle fleet control will be described in conjunction with its performance in system . In particular the blocks of method are performed by computing device via the execution of application by processor and via the use of the contents of databases and .

At block computing device is configured to receive a task request. The task request received at computing device includes an item identifier of an item within the facility an action type identifier defining an action to be performed by one of the unmanned vehicles as noted earlier the request need not specify which unmanned vehicle is to perform the action respective to that item and a location identifier identifying the location within the facility at which to perform the action. It is contemplated that under some circumstances task requests may be received that do not include one or more of the above parameters. Those circumstances and the resulting task requests will be discussed later.

The task request can be received at processor through a variety of mechanisms. In some examples the task request can be received at processor in the form of input data from input devices such as a keyboard and mouse connected to computing device either directly or through another computing device not shown . Referring to a display is shown connected to computing device and presenting under the control of processor an interface for receiving input data defining a task request.

The interface shown on display includes an item identifier field a location identifier field and a plurality of selectable action elements each identifying a different action. Fields and can be text entry fields drop down fields or the like. In addition elements need not be radio buttons as illustrated in . In other embodiments elements can be replaced by a dropdown or text field. Fields and can be filled in via receipt of input data at computing device and one of elements can be selected via receipt of such input data. The task request represented by the data in fields and and the selected element can be submitted to computing device as a task request for example via selection of a submission element . Elements can represent any of a wide variety of actions and in general include an input action such as pick up to accept an item into the fleet of unmanned vehicles an output action such as drop off to discard an item from the fleet and any number of in process actions to be performed respective to items that have been picked up and not yet dropped off. The machine and clean elements shown in are examples of such in process actions.

In other examples the task request received at block can be received at computing device via communications interface . For example the task request can be received at processor from communications interface having arrived at communications interface via link and network from controller . Controller can be configured to generate task requests automatically in response to various events. For example controller may be configured to receive data indicating that item has been received at location and in response to generate a task request and send the task request to computing device .

Task requests generated by controller for transmission to computing device may be generated and sent via an application programming interface API established by computing device . Indeed in some embodiments the same API may be used to receive task requests from controller as is used by computing device to generate the interface shown in .

However the task request is received at block upon receipt of the task request computing device is configured to proceed to block of method . It will be assumed in the present example performance of method that at block computing device receives a task request containing the item identifier the action type pick up and the location identifier storage .

At block in response to receiving a task request computing device is configured to retrieve attributes from memory . In particular processor is configured to retrieve at least a dynamic attribute and a static attribute for each unmanned vehicle . In the present example performance of method the static and dynamic attributes are retrieved from vehicle capabilities database . An example of database is shown below in Table 1.

As seen in Table 1 database includes a record for each unmanned vehicle . Each record contains a plurality of attributes including both dynamic attributes and static attributes. The dynamic attributes of an unmanned vehicle are properties of the unmanned vehicle that vary over time during the operation of the vehicle independently of the physical structure of the vehicle. The static attributes of an unmanned vehicle are properties of the vehicle that do not vary during the operation of the vehicle. Static attributes are not necessarily absolutely unchanging however to change a static attribute a change in the structure of the vehicle is necessary such as the addition of a tool to the vehicle or an upgrade to the motor of the vehicle. The nature of dynamic and static attributes will be further clarified by the examples discussed below. The following dynamic attributes are shown in Table 1 

Location the location of each unmanned vehicle within the facility as will be seen below the location of each unmanned vehicle can be updated within database periodically.

Charge The remaining energy supply of each unmanned vehicle whether the energy supply exists as a battery charge level or a fuel e.g. gasoline level. Although shown as a remaining percentage of maximum energy supply in other examples this attribute may be shown as an actual charge measurement a fuel volume measurement an available runtime before no energy supply remains and the like.

Availability Whether the unmanned vehicle is available to perform a task is already assigned to a task or is inactive for example due to maintenance. Although shown as a yes or no indicator a wide variety of other availability attributes are also contemplated such as estimated times for which the unmanned vehicle will be busy on a current task an identifier of the task currently being performed by the unmanned vehicle that can be used to reference a list of stored task data for example .

Payload Identifier An attribute indicating whether each unmanned vehicle currently has a payload. This attribute may be a simple binary value indicating that the unmanned vehicle does or does not have a payload. Preferably however the payload identifier attribute is an identifier of the payload such as an identifier of item .

The static attributes shown in Table 1 include a maximum payload for each unmanned vehicle representing the maximum weight that the unmanned vehicle can safely bear as specified by designers of the unmanned vehicle for example . The static attributes of each record also include one or more equipment identifiers identifying equipment tools or functions possessed by the respective unmanned vehicles . For example the records corresponding to unmanned vehicles and include equipment identifiers indicating that unmanned vehicles and include a payload surface such as payload surface . The record corresponding to unmanned vehicle on the other hand indicates that unmanned vehicle includes a manipulator arm but not a payload surface. Equipment identifiers can also include data defining characteristics of the identified equipment such as the weight capacity of a manipulator arm or the dimensions of payload surface . Further equipment identifiers may identify broader capabilities of each unmanned vehicle such as whether the unmanned vehicle is terrestrial aquatic or aerial or a combination thereof .

A wide variety of other static attributes are also contemplated. Other static attributes that can be included in database and retrieved at block include the following 

A variety of other static and dynamic attributes will now also occur to those skilled in the art. In addition some attributes identified as static above may be implemented as dynamic attributes in other implementations of system . For example in some embodiments unmanned vehicles may include self monitoring sensors for indicating when their maximum payloads have decreased due to motor wear. Thus the maximum payload mentioned above may be considered a dynamic attribute in some implementations.

At block computing device is therefore configured to retrieve some or all of the static and dynamic attributes from database . Computing device can also be configured to retrieve other attributes at block . In the present example computing device is configured to retrieve location and item attributes from item database and location database . In other examples the retrieval of attributes from one or both of databases and can be omitted for example when the item and location identifiers in the task request are in a form computing device can use in the remainder of method . That is at block computing device can retrieve item and location attributes necessary for translating the item and location identifiers in the task request into formats suitable for comparison with the attributes of unmanned vehicle . An example of database is shown below in Table 2 

As seen above database contains a record for item including a variety of attributes for item . Other records may also be included with attributes for other items. The attributes of item are not particularly limited in general the item attributes are suitable for comparison with the dynamic and static attributes mentioned above to determine the suitability of each unmanned vehicle for performing the requested action respective to the requested item. As will now be apparent to those skilled in the art the item identifier received in the request at block e.g. the identifier may not be suitable for direct comparison with the dynamic and static attributes. In the present example the item attributes include an identifier of the item a weight of the item dimensions of the item and equipment requirements for performing actions on the item. The weight dimensions and equipment requirements can be presented in various other formats than those shown above. For example dimensions may include volumes areas dimensions of only certain components of an item and the like.

In addition to the item attributes location attributes are retrieved at block from location database . An example of location database is shown below in Table 3 

As seen in Table 3 database includes a record for each location within the facility. Each record includes a variety of attributes for the location including a location identifier location coordinates and one or more permitted actions for that location. The location coordinates can be presented in any of a variety of formats including global coordinates e.g. GPS or local coordinates e.g. based on a frame of reference specific to the facility . In general the location coordinates are provided in database in a form that the processors of unmanned vehicles are configured to use.

The permitted actions in each record of location database identify action types that are allowed at each location. In other embodiments actions that are not permitted may be stored in database instead. In some embodiments computing device can be configured to validate the task request received at block before proceeding with vehicle selection. For example having retrieved the location attributes at block computing device can be configured to compare the action type in the task request with the permitted actions associated with the location identified in the task request. If the requested action is not permitted at the requested location computing device can refuse the task request. Refusal of a task request can include transmission of an error message e.g. to controller or for presentation on display . In some examples computing device can also suggest alternative tasks that would be acceptable.

Other validations on task requests can include for example determining whether any unmanned vehicles are currently carrying the requested item when the action identifier in the request is drop off . If no unmanned vehicles have a dynamic payload attribute matching the requested item then no unmanned vehicle are able to drop the item off until a pick up task is assigned.

Having retrieved the dynamic and static attributes of unmanned vehicles and if necessary the item and location attributes computing device is then configured to proceed to block . At block computing device is configured to select one of the unmanned vehicles to perform the task defined in the task request received at block based on a comparison of the task request with the retrieved dynamic and static attributes.

The selection of an unmanned vehicle at block can be performed in a variety of ways. Referring now to a method of performing block is depicted. At block computing device is configured to apply at least one criterion to the attributes of each unmanned vehicle . The criteria applied at block are selected to eliminate from contention any unmanned vehicles that are not capable of performing the requested task. Examples of the criteria applied at block are provided below.

Vehicle not available the unmanned vehicle has an availability attribute indicating that the vehicle is not available or is not available for at least a configurable time period e.g. five minutes .

Vehicle carrying non matching payload the unmanned vehicle is not currently performing a task that is the vehicle is available but the unmanned vehicle has a payload identifier attribute that does not match the item identifier in the task. This indicates that although the unmanned vehicle is available for further tasks it is only available for further tasks that relate to its current payload.

Alternatively if the task request specifies a drop off action for a certain item any unmanned vehicle that does not have a matching payload identifier attribute can be eliminated from the set since a vehicle not currently carrying the requested item is not capable of dropping that item off.

Insufficient Charge the unmanned vehicle has a charge attribute below a threshold e.g. ten percent of maximum charge or fuel load .

Insufficient Capacity the unmanned vehicle has a maximum payload attribute that is below the weight attribute of the item identified in the task request.

Insufficient Equipment the unmanned vehicle does not have an equipment identifier attribute matching the required equipment attribute of the item identified in the task request.

Other examples of criteria for application at block will now occur to those skilled in the art. At block computing device is configured to determine whether each unmanned vehicle satisfies the criteria applied at block . When the determination at block is negative computing device discards that unmanned vehicle and applies the criteria to the next unmanned vehicle. When the determination at block is affirmative however computing device adds the unmanned vehicle evaluated at blocks and to a selection set at block .

Taking the current example performance of method in which the task request received at block was a request to pick up item at location applying the above mentioned criteria leads to a selection set consisting of unmanned vehicles and . Unmanned vehicle is eliminated from the selection set because it does not satisfy the capacity or equipment criteria item has a weight greater than the maximum payload of unmanned vehicle and unmanned vehicle lacks the payload surface requirement indicated by the attributes of item in database .

At block having generated a selection set of unmanned vehicles computing device is configured to optimize the selection set to identify the unmanned vehicle best suited to the requested task. The optimization of the selection set can be conducted according to a wide variety of conventional optimization algorithms and can place greater or smaller weightings on some attributes than others or can weight all attributes equally.

In the present example unmanned vehicles and are both capable of performing the requested task but the maximum payload of unmanned vehicle better matches the weight of item . Therefore at block in the present example computing device determines that unmanned vehicle is best suited to the requested task.

In other embodiments block can be varied for example to omit blocks and and simply optimize on a set comprising all the unmanned vehicles described in database .

Returning to following selection of an unmanned vehicle at block computing device is configured to transmit a command to the selected unmanned vehicle via network and the appropriate one of links . The command includes data identifying the item in the task request data identifying the location in the task request and data identifying the action in the task request. The data in the command however may be in a different form than the data in the task request. For example instead of the item identifier computing device can transmit the dimensions of item to unmanned vehicle . In addition instead of the location identifier storage computing device can transmit the coordinates of location to unmanned vehicle . In general computing device is configured to select for transmission in the command the item and location attributes that match the capabilities of the unmanned vehicle being commanded.

Following transmission of the command at block computing device is configured at block to receive a status message from the unmanned vehicle to which the command was sent. The nature of the status message is not particularly limited. Unmanned vehicles are configured to transmit various types of status messages to computing device via network . For example unmanned vehicles may transmit their locations to computing device at configurable intervals whether or not they are currently performing tasks. As a further example unmanned vehicles may be configured to transmit a confirmation message when the command sent at block is received. In other words in the present example performance of method the status message received at block can be a message from unmanned vehicle accepting the task defined in the command sent at block .

In response to receiving the message at block computing device is configured at block to determine whether the message indicates that the task assigned to the unmanned vehicle is complete. The determination at block can include inspecting the status message for a value indicating that the task is complete. In the present example performance of method the determination at block is negative because the status message received at block was merely a confirmation of the command sent at block . Thus performance of method proceeds to block .

At block computing device is configured to determine whether the message received at block constitutes an error message indicating that the task assignment has failed. Task failure may occur for a variety of reasons. For example an unmanned vehicle may arrive at the location specified and discover that no item matching the data in the command is present. In other examples an unmanned vehicle may become disabled during the performance of a task.

When the determination at block is affirmative computing device is configured at block to send a notification of the error message to the requester that is the originator of the task received at block . Computing device can also be configured to generate one or more error handling tasks. For example computing device can dispatch a different unmanned vehicle to complete the failed task computing device can also assign a new task to the unmanned vehicle that delivered the error message instructing that unmanned vehicle to proceed immediately to a maintenance area of the facility where human operators can safely access the unmanned vehicle . In addition to or instead of the generation of an error handling task computing device can prompt an operator for example via display to provide further instructions.

In the present example performance of method the message received at block was a confirmation of receipt from unmanned vehicle and the determination at block is therefore negative. Computing device is therefore configured to proceed to block at which a status update may be sent to the requester. Computing device can also update one or more attributes associated with the unmanned vehicle from which the status message was received. For example as in the present performance of method where the message is a confirmation of receipt of a command sent at block computing device may at block update the availability attribute of unmanned vehicle to replace the yes shown in Table 1 with the value no or any other value indicating that unmanned vehicle is currently performing a task. For example the yes may be replaced with an identifier of the task referring to another database in which the estimated time of completion for the task is stored.

Following the performance of block computing device can be configured to return to block and await a further status message. Further status messages may report the location of unmanned vehicle as it travels towards location and thus computing device may repeat blocks and as needed. Referring now to an updated version of system identified as system is illustrated in which unmanned vehicle has arrived at location and picked up item . In other words the task assigned to unmanned vehicle at block is complete. Thus unmanned vehicle transmits a further status message to computing device indicating the completion of the task.

Following a further performance of block to receive the completion status message computing device determines that the task is complete at block and proceeds to block . At block the attributes of unmanned vehicle can be updated. For example Table 1 may be updated as shown in Table 4 below.

As seen in Table 4 unmanned vehicle is shown as available because the task assigned to unmanned vehicle is complete and unmanned vehicle is thus available to perform further tasks. However Table 4 also indicates that unmanned vehicle now has a payload in the form of item . Other attributes may also be updated such as the location of unmanned vehicle which now matches the location of location and the charge of unmanned vehicle .

Following the performance of block computing device can receive further task requests and repeat the performance of method . It is contemplated that computing device can perform multiple instances of method simultaneously one instance being performed for each task request received. Thus assignments of tasks to vehicles at block can include optimizing the set of unmanned vehicles not only to the set of attributes defined by a single task request but to the set of attributes defined by all pending task requests received at various instances of block . To that end task requests can also include priority indicators identifying the relative importance of the task or the expected completion time of the task. Such priority indicators are not mandatory and can be omitted from some task requests or entirely in some embodiments. It will now be apparent that in some cases an unmanned vehicle can be assigned a second task before completing its current task for example when the time required to complete both tasks does not exceed any constraints expressed in the task requests such as priority indicators .

In subsequent performances of method further tasks can be received at block requesting further actions to be performed respective to item . For example a further task request to identify item location and the action type machine may be received at computing device . During the vehicle selection at block computing device selects unmanned vehicle as unmanned vehicle has a dynamic attribute indicating that its current payload includes item . In other words item itself has become a reference to unmanned vehicle in that task requests identifying item are routed to unmanned vehicle as long as unmanned vehicle bears item . Thus as shown in system updates to system in which unmanned vehicle carries item to location and waits for a further task.

As a further example computing device can receive another task request to drop off item at location . Again since unmanned vehicle still bears item and therefore still has the dynamic payload attribute item computing device selects unmanned vehicle to perform the task. Following performance of the drop off task system appears as system shown in in which unmanned vehicle has dropped off item at location . A further performance of block leads to the removal of the identifier for item from the dynamic payload attribute corresponding to unmanned vehicle in database thus disassociating item from unmanned vehicle .

The above mentioned task requests can be issued for example by controller in response to completion status messages from computing device . For example in response to the completion of the task illustrated in controller can be configured to issue the next task request and in response to the completion of the task illustrated in controller can be configured to issue the following task request.

In addition to tasks for which requests are received at computing device computing device can generate tasks. Some such self generated tasks for example tasks generated at block of method to instruct an unmanned vehicle to perform a task unsuccessfully attempted by another unmanned vehicle are processed by performing method as described above. Other self generated tasks can take a different form from the item location and action focused tasks mentioned above.

Turning to a method of generating maintenance tasks at computing device is illustrated. Method can be performed by computing device alongside method . Briefly via the performance of method computing device is configured to automatically instruct unmanned vehicles to perform various maintenance related tasks.

At block computing device is configured to retrieve vehicle attributes substantially as described in connection with block . At block however the retrieval of static attributes may be omitted. Computing device can be configured to perform block on a predetermined cycle for example every hour .

At block computing device is configured to determine from the retrieved vehicle attributes whether any of the unmanned vehicles require maintenance. The determination at block can be performed by comparing the vehicle attributes to maintenance requirements stored in memory . For example the determination at block may by affirmative if the charge of an unmanned vehicle is below a threshold of ten percent. In another example a dynamic vehicle attribute can indicate the time and date of the last maintenance check performed on the unmanned vehicle and the determination at block may be affirmative if the last maintenance check is older than a configurable period of time e.g. one week .

When the determination at block is negative performance of method returns to block to await the next scheduled retrieval of vehicle attributes. When the determination at block is affirmative however computing device generates a maintenance task at block . The maintenance task differs from the task requests discussed earlier in that the maintenance task does not identify an item and does identify a specific unmanned vehicle .

Once the maintenance task has been generated computing device performs an instance of method beginning at block . Maintenance tasks may act as overrides to task requests received at block for example by carrying an elevated priority flag. In other words if two tasks require assignment to unmanned vehicles and one of the tasks is a maintenance task computing device can be configured to assign the maintenance task to the identified unmanned vehicle even if that unmanned vehicle was also suitable for the regular task.

Turning now to an example architecture for application is depicted. The architecture shown in is provided solely for illustrative purposes application may be also implemented in a wide variety of other ways. In the present example application includes a control arbiter module that performs block receipt of task requests and can also perform block and the notifications at blocks and .

Task requests received by control arbiter are passed to a task allocation module that includes a task manager component that manages database and . Task manager can perform the retrieval of item and location attributes at block as well as any validation of incoming task requests.

Task allocation module also includes a capabilities monitor component that manages database . Capabilities monitor thus provides vehicle attributes to other components of application and updates database in response to messages received from other components. Among such other components is a job manager component that performs the retrieval of vehicle attributes at block and also receives item and location attributes from task manager . Job manager performs blocks and by extension method and as well as blocks and the attribute updates to capabilities monitor at blocks and . Job manager can also receive status messages via control arbiter at block and can instruct control arbiter to transmit the notifications sent at blocks and . Task allocation module also includes a maintenance supervisor for performing method .

Commands sent at block are provided by job manager to an execution planner module which is responsible for direct communication with unmanned vehicles including path planning and the like.

Variations to the embodiments described above are contemplated. For example in addition to detecting errors at block in response to messages received from unmanned vehicles computing device can detect errors in the absence of messages from unmanned vehicles for example by inspecting vehicle attributes such as charge and generating an error when a vehicle s charge falls below a threshold. Further computing device can generate an error at block when no messages have been received from an unmanned vehicle for a predetermined length of time.

In another variation the validation mentioned above at block can include comparing item attributes to location attributes. For example computing device can compare known dimensions of an item with dimensions of a location and generate an error when the item dimensions exceed the location dimensions. In generating the interface shown in computing device can also be configured to control display to ghost or grey out action elements that are not compatible with the currently selected item or location.

In a further variation multiple tasks can be received simultaneously at block . For example the interface shown in can include multiple copies of fields and and elements to allow the definition of several task requests for simultaneous submission to computing device. In further examples a task request can include more than one location identifier and more than one action type identifier for example the tasks shown in can be combined into a single task .

In still other variations the selection of an unmanned vehicle at block can be simplified in some circumstances. depicts a method of performing block . Method can be implemented by computing device in conjunction with method . Beginning at block computing device is configured to determine whether the action identified in the task request received at block is a drop off action or an in process action such as the machine and cleaning actions shown in . More generally computing device determines at block whether the requested action requires an unmanned vehicle already carrying the requested item.

When the determination at block is negative computing device can perform method as described earlier beginning at block . When the determination at block is affirmative however computing device proceeds to block . At block computing device rather than build a selection set of unmanned vehicles and optimize the set simply identifies any unmanned vehicles having a dynamic payload attribute matching the requested item identifier.

At block computing device determines whether multiple unmanned vehicles have a payload attribute matching the requested item that is whether multiple unmanned vehicles are currently carrying the requested item . When only one unmanned vehicle has a matching payload attribute in database computing device proceeds to block and selects that unmanned vehicle . When multiple matching unmanned vehicles are identified at block computing device instead proceeds to block to select an optimal vehicle among those carrying the requested payload. In this case the optimization at block can also be based on payload attribute age payload attributes in database can bear timestamps and the performance of block can therefore include payload age as a variable in the optimization process along with location charge and the like as described earlier . In other embodiments instead of performing an optimization as in block computing device can simply select the unmanned vehicle with the oldest payload attribute that is the vehicle that has been carrying the required item for the longest period of time .

In yet another variation system can accommodate physical changes to items as a result of the performance of tasks by unmanned vehicles . For example work station can be a machining station at which item is transformed into another item. In general computing device is configured at block once the task is complete to replace the dynamic payload attribute identifying item in association with unmanned vehicle with a different dynamic payload attribute identifying the item into which item was transformed. The update performed at block can be carried out in a variety of ways.

For example the task request received at block can include an initial item identifier and a final item identifier. The initial item identifier can identify item while the final item identifier can identify the item into which item will be transformed at work station . In other examples the task request received at block can identify only item and computing device can store in memory tasks in response to which item is known to transform. For example computing device can store a record stating that in response to a task requiring item to be machined at location item becomes a different item. Thus at block computing device can consult such records and replace the dynamic payload attribute of unmanned vehicle accordingly.

The above functionality can be extended to sets of multiple items. For example at block a set of task requests can be received having a location and an action type in common but relating to different items. A single final item identifier can be included with the set of task requests indicating that a plurality of items are to be brought to the same location e.g. work station where they will be combined into the single final item.

Persons skilled in the art will appreciate that there are yet more alternative implementations and modifications possible for implementing the embodiments and that the above implementations and examples are only illustrations of one or more embodiments. The scope therefore is only to be limited by the claims appended hereto.

