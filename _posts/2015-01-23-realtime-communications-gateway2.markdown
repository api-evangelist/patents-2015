---

title: Real-time communications gateway
abstract: A system performs Real-Time Communications (“RTC”). The system establishes a signaling channel between a browser application and a rich communications services (“RCS”) endpoint. The system then queries RCS capabilities of the RCS endpoint via the signaling channel, and initiates the RTC between the browser application and the RCS endpoint via the signaling channel.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09648052&OS=09648052&RS=09648052
owner: ORACLE INTERNATIONAL CORPORATION
number: 09648052
owner_city: Redwood Shores
owner_country: US
publication_date: 20150123
---
One embodiment is directed generally to a communications network and in particular to delivering real time media over a communications network.

Voice communications are increasingly shifting to web and Internet based applications that are outside of traditional telephony networks. Enterprise users desire to access their unified communications applications with their own Internet connected mobile devices and consumers increasingly prefer internet based communications channels to access contact centers.

Some communications service providers CSPs and enterprises have deployed real time communications RTC applications based on a technology known as WebRTC. WebRTC is an open internet standard for embedding real time multimedia communications capabilities e.g. voice calling video chat peer to peer P2P file sharing etc. into a web browser. For any device with a supported web browser WebRTC can use application programming interfaces APIs to equip the device with RTC capabilities without requiring users to download plug ins. By using WebRTC CSPs may create new web based communications services and extend existing services to web based clients.

While WebRTC protocols enable RTC between web browser applications many mobile devices perform RTC according to a different technology defined by a Rich Communications Services RCS program. RCS is a Global System for Mobile Communications GSM Association GSMA program for the creation of inter operator communications services based on IP Multimedia Subsystem IMS .

One embodiment is a system that performs Real Time Communications RTC . The system establishes a signaling channel between a browser application and a rich communications services RCS endpoint. The system then queries RCS capabilities of the RCS endpoint via the signaling channel and initiates the RTC between the browser application and the RCS endpoint via the signaling channel.

Embodiments provide a flexible gateway for Real Time Communications RTC between a browser operating according to WebRTC and a Rich Communications Services RCS endpoint. Embodiments implement a Message Session Relay Protocol MSRP over WebSocket that is generally hidden from application developers and can interact with an RCS client. Also enhancements to application programming interface API and signaling are provided to support RCS device capability discovery. Accordingly embodiments give the developers the possibility of implementing WebRTC and RCS applications quickly using a JavaScript SDK. Further by using a Groovy script in the signaling engine web applications can control the flexibility of a WebRTC session controller WSC gateway.

In one embodiment WebRTC application performs RTC with an RCS endpoint connected to an Internet Protocol IP Multimedia Subsystem IMS network . RCS is a Global System for Mobile Communications GSM Association GSMA program for the creation of inter operator communications services based on IMS. IMS is an architectural framework for delivering IP multimedia services. RCS defines a set of communications services which apart from voice and video communications include 1 1 and 1 Many chats file transfer etc. RCS clients are usually present in mobile devices. RCS endpoint may be any mobile phone equipped with RCS capability.

Network further includes a WSC that is a gateway that connects a web application with another communications network. A gateway translates a protocol to another protocol. In WSC connects WebRTC application to IMS network . WSC provides interoperability for web to web and web to network RTC. WSC includes a signaling engine and a media engine that bridge WebRTC application to existing networks such as IMS network . In signaling engine bridges WebRTC signaling to Session Initiation Protocol SIP signaling and media engine bridges WebRTC media to existing Voice over IP VoIP system media. SIP is a signaling communications protocol conventionally used for controlling multimedia communications sessions such as voice and video calls over IP networks.

System includes a bus or other communications mechanism for communicating information and a processor coupled to bus for processing information. Processor may be any type of general or specific purpose processor. System further includes a memory for storing information and instructions to be executed by processor . Memory can be comprised of any combination of random access memory RAM read only memory ROM static storage such as a magnetic or optical disk or any other type of computer readable media. System further includes a communications device such as a network interface card to provide access to a network. Therefore a user may interface with system directly or remotely through a network or any other method.

Computer readable media may be any available media that can be accessed by processor and includes both volatile and nonvolatile media removable and non removable media and communications media. Communications media may include computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.

Processor may further be coupled via bus to a display such as a Liquid Crystal Display LCD . A keyboard and a cursor control device such as a computer mouse may further be coupled to bus to enable a user to interface with system on an as needed basis.

In one embodiment memory stores software modules that provide functionality when executed by processor . The modules include an operating system that provides operating system functionality for system . The modules further include WSC module for providing RTC and all other functionality disclosed herein. System can be part of a larger system such as added functionality to the Oracle Communications WebRTC Session Controller from Oracle Corp. Therefore system can include one or more additional functional modules to include the additional functionality. A database is coupled to bus to provide centralized storage for modules and .

Referring again to with known systems WebRTC technology enables RTC in a Web browser as defined in IETF and W3C standards. However many users perform RTC according to the protocols defined by an RCS program. Since WebRTC merely enables real time media and data transfer there are technical challenges for a WebRTC application that needs to communicate with an RCS endpoint. Further in order to be RCS compliant an application needs to discover the capabilities of the endpoint it is communicating with. RCS capability discovery includes determining which device supports what services.

One known solution to provide RTC between a WebRTC application and an RCS compliant device is to support MSRP over web friendly protocols such as WebSocket and data channel. MSRP is a protocol for transmitting a series of related instant messages in the context of a communications session. An application instantiates the session with the Session Description Protocol SDP over SIP or other rendezvous methods. SDP is a format for describing streaming media initialization parameters. A rendezvous protocol is a computer network protocol that enables resources or peer to peer P2P network peers to find each other. A socket is a bidirectional communications endpoint for sending receiving data to from another socket. It is the fundamental technology for programming software to communicate on a TCP IP network. A WebSocket is a protocol providing full duplex communications channel over a single transmission control protocol TCP connection.

One disadvantage with this known approach is that it does not encapsulate an application developer from the complexities associated with interoperating with RCS endpoints and applications may need to work on low level protocol abstractions.

In contrast to the known solutions one embodiment of the present invention provides an MSRP over WebSocket implementation that is generally hidden from the application developers and can interact with an RCS client. Embodiments also provide API and signaling enhancements to support RCS device capability discovery.

Referring again to in one embodiment WebRTC application establishes a signaling channel with WSC signaling engine over a JavaScript Object Notation JSON protocol for RTC JsonRTC . JSON JavaScript Object Notation is a lightweight data interchange format. JsonRTC establishes the sessions i.e. persistent communications sessions and subsessions i.e. logical session activities within a session such as a call or a file transfer used to pass messages between WSC and its client applications inside WebSocket connections. WebRTC application uses this signaling channel for querying RCS endpoint for discovering its capabilities. Accordingly this capability discovery is an extension over the JsonRTC protocol which is translated by WSC signaling engine to SIP. In one embodiment WebRTC application uses a JavaScript software development kit SDK for capability discovery.

Once the capability discovery is complete WebRTC application utilizes the SDK again to use the signaling channel for initiating RTC with RCS endpoint . During RTC media engine in WSC creates a WebSocket listener for Message Session Relay Protocol MSRP communications by looking at the SDP that is transferred. MSRP is a protocol for transmitting a series of related instant messages in the context of a communications session. An application instantiates the session with the Session Description Protocol SDP over SIP or other similar methods. SDP is a format for describing streaming media initialization parameters. The complete uniform resource identifier URI of the created WebSocket listener includes an ephemeral port and a unique context root. A URI is a string of characters used to identify a name of a resource. An ephemeral port is a short lived transport protocol port for IP communications allocated automatically from a predefined range. A context root determines the uniform resource locator URL of a deployed application. A URL is a specific character string that constitutes a reference to a resource. The complete URI of the WebSocket listener i.e. including the ephemeral port and the unique context root is communicated to the JavaScript SDK in the client i.e. WebRTC application using the signaling channel.

The JavaScript SDK is then ready for performing RTC with RCS endpoint e.g. chat file transfer audio video communications etc. . In one embodiment WebRTC application uses APIs in the JavaScript SDK to send messages files or start an audio video communications that is compliant with RCS.

In one embodiment WSC supports APIs and call flows that match RCS requirements and call flows. Such APIs and call flows include capability exchange standalone messaging 1 1 chat group chat file transfer image video sharing etc. These APIs and call flows may not include any RCS specific feature tags or message payloads. Accordingly an RCS compliant user agent is readily implemented by extending using Groovy scripts and JavaScript APIs. Groovy is a dynamic language that can be used as a scripting language for the Java Platform is dynamically compiled to Java Virtual Machine NM bytecode and interoperates with other Java code and libraries. Further embodiments are aligned with Joyn device API functionality where possible. Joyn refers to the Rich Communications Services program that is a Global System for Mobile communications GSM Association GSMA program for creation of inter operator communications services based on IMS.

In one embodiment RCS capability exchange can be implemented by a capability discovery process through a message e.g. an OPTIONS message or by capability discovery via presence. illustrates an example call flow for device capability exchange via SIP OPTIONS message in accordance with one embodiment. User A initiates the capability discovery by sending SIP OPTIONS message intended for users B C or D not shown . User A implements phone logic and client logic . Phone logic specifies an options message mechanism to interpret the response received after sending SIP OPTIONS message and determine the RCS capabilities of a user. In the example of User B is REGISTERED user C is NOT REGISTERED and user D is NOT an RCS e user i.e. user D is not RCS enhanced . SIP OPTIONS message is transmitted over a mobile network operators MNO core network and through an MNO IMS core . MNO IMS core includes an RCS application server AS which in turn includes a presence server and an Extensible Markup Language XML document management server XDMS . RCS AS is a server that handles RCS server side requirements in a SIP network. Presence Server is a server in the network which manages the presence status e.g. online busy offline etc. of each user. XDMS is a server used by the network for keeping information such as buddy list i.e. friends list white list black list etc.

During RCS capability discovery client logic handles the transmission of SIP OPTIONS message and the reception of corresponding responses at user A . For user B that is REGISTERED client logic receives a SIP OK response including capabilities of user B. For user C that is NOT REGISTERED client logic receives an ERROR TEMPORARILY UNAVAILABLE REQUEST TIMEOUT message . For user D that is NOT an RCS e user client logic receives an ERROR NOT FOUND message . Accordingly based on the response received for SIP OPTIONS message RCS capabilities of a client may be determined.

In one embodiment a capability package is added to Json RTC protocol to send capability queries between WSC clients. Further an enquiry action is added that represents the message for querying capabilities. An action is an object used to separate functionality and state from a component. For example if there are two or more components that perform the same function an action object can be used to implement the function. Further an enquiry data general header is provided to send header information specific to enquiry. A header indicates what value types if any a method will return. Capability exchange may also happen within an existing subsession that is part of another package e.g. a call . In that case the action and general header are reused for the same purpose.

In one embodiment enquiry action uses control types request and response . The following functionality provides example JSON messages for capability enquiry request and response in accordance with one embodiment.

In one embodiment a JavaScript class CapabilityExchange is created using a constructor CapabilityPackage session packageType with a default packageType capability or with a call to a method createCapabilityExchange that creates a fresh CapabilityExchange instance. In object oriented programming OOP a class is an extensible program code template for creating objects providing initial values for state member variables and implementations of behavior member functions methods . A method is a subroutine associated with an object of a class that forms its interface through which the outside members of the class i.e. other objects can access its private members e.g. the encapsulated data . A constructor in a class is a subroutine called to create an object.

In one embodiment constructor CapabilityExchange subSession creates a CapabilityExchange with a subSession object instance as parameter. Table 1 shows the methods used for capability discovery and Table 2 provides properties for type Definition Query in accordance with one embodiment.

The following example functionality provides an example capability exchange in accordance with one embodiment.

In one embodiment Groovy scripts i.e. pseudo codes are added to handle capability discovery criteria based on the package e.g. capability or call action e.g. enquiry and SIP method e.g. OPTIONS . The following functionality provides an example Groovy script configured in a call package or a new capability package to support capability discovery on the server side in accordance with one embodiment.

One embodiment determines the package type for an incoming SIP OPTIONS in an initial request. For example in Script Library embodiments add logic in resolvePackageType method to resolve OPTIONS request according to certain headers. In the following example functionality the user checks for specific headers in accordance with one embodiment.

In one embodiment WSC uses Pager Mode to implement sending standalone messages while on the network side SIP MESSAGE request is used. A messaging package is defined and used on its own subsession and a send action is defined for sending messages using control type message. The following functionality provides an example JSON message for messaging package in accordance with one embodiment.

In one embodiment an API is used to send the standalone message. The content of the message is provided by the application and WSC does not modify or understand the message content. A JavaScript class messaging is created using constructor MessagingPackage session packageType for which the default packageType is messaging. Method createMessaging is also used to create a messaging instance. Table 3 provides methods of class messaging and Table 4 provides properties for Type Definition MessagingMessage in accordance with one embodiment.

In one embodiment Groovy scripts i.e. pseudo codes are added to handle messaging criteria based on the package messaging action e.g. send and SIP method e.g. MESSAGE . In order to support sending a standalone message on the server side the following example Groovy scripts may be configured for a new messaging package in accordance with one embodiment.

One embodiment provides chat functionality that represents a session mode messaging i.e. a conversational exchange of messages with a definite beginning and end . For browser to RCS client communications the SDK uses MSRP and SIP SDP to perform a negotiation with a target and setup a WebSocket connection with media engine . The SDK then chunks data according to the MSRP specification and passes them through the WebSocket to media engine . Accordingly chunking is performed within the client and media engine does not need to re chunk data. For group chat a participant list is added to the message by using corresponding APIs. Group chat is created by a server in the network by taking the participant list and creating a mixer. For browser to browser chat MSRP is not necessary and a Web application can use a CallPackage data channel function. The Web application can first use the capability exchange function to query target capability and then choose the appropriate way to implement a chat.

In order to provide MSRP over WebSocket in accordance with one embodiment constructor ChatPackage session packageType is used for which the default packageType is chat. Tables 5 and 6 show example methods used for providing MSRP over WebSocket and example methods used for chat respectively in accordance with one embodiment. Tables 7 and 8 show example properties for type Definition ChatConfig and type Definition ChatMessage respectively in accordance with one embodiment.

One embodiment provides functionality for image or file transfer as an MSRP file transfer. As described herein with reference to a session mode chat embodiments provide APIs for communications between a browser application and an RCS client. Browser to browser communications can use the data channel. A FileTransferPackage session packageType constructor is provided with a default packageType of fileTransfer. Tables 9 and 10 provide example methods for FileTransferPackage and FileTransfer respectively in accordance with one embodiment.

Tables 11 12 13 14 and 15 provide example properties for Type Definition FileConfig Type Definition FileProperty Type Definition FileData Type Definition FileDataRange and Type Definition FileProgressData respectively in accordance with one embodiment.

One embodiment uses a SDK for providing video transfer through RTP by adding another stream to an existing call.

One embodiment provides an interface between WSC media engine and a browser JavaScript delivered by signaling engine . The interface allows WebRTC browsers and RCS clients using MSRP to chat and transfer files. In this WebSocket connection model the WebRTC browser initiates the WebSocket connection. In one example embodiment media engine supports both WebSocket and WebSocket secure WSS connections from the browser but only MSRP WSS are used in WSC deployments.

In one embodiment WSC media engine does not have any static listening ports for MSRP and MSRP listeners are created during MSRP session setup. Media engine determines an appropriate local interface to use to reach the remote MSRP client and requests allocation of a media port for the MSRP connection from the media port pool of media engine . When media engine is the passive end of the connection WS WSS and inbound MSRP the listener is activated and transport information for this local listener is returned in the SDP that is modified by media engine . When media engine is the active end of the connection outbound MSRP media engine initiates the connection from the allocated media port and transport information is again returned in the SDP that is modified by media engine .

In one embodiment for authentication of the browser by media engine the WebRTC MSRP client creates a direct WSS connection between the browser and media engine . Creation of transport layer security TLS connection between browser and media engine involves the following functionality. Media engine is provisioned with a certificate issued by a browser preloaded trusted root certification authority CA . In cryptography a public key certificate also known as a digital certificate or an identity certificate is an electronic document used to prove ownership of a public key. A CA is an entity that issues digital certificates. A root CA certificate may be the base to issue multiple intermediate CA certificates with varying validation requirements. The media engine MSRP inLeg and outLeg configurations reference corresponding certificates. The media engine certificate common name CN must match the fully qualified domain name FQDN used by the browser to initiate the WSS connection. This also applies for MSRP and TLS. FDQN also called absolute domain name is a domain name that specifies an exact location in the tree hierarchy of the Domain Name System DNS . DNS is a hierarchical distributed naming system for computers services or resource in a network. WSC deployment provides the ability for browsers to DNS resolve the media engine FQDN even when media engine clusters are present and the DNS resolver may be independent of WSC.

In one embodiment once a TLS connection is established the browser can contact media engine using the path component of a WSS resource name supplied via a SDP attribute a ws resource path . This resource name path component is dynamically generated by media engine and is ephemeral and unique. Media engine allows an inbound WSS connection via this path component for a short interval after its creation. The interval is configurable on media engine . The combination of SDP integrity protection and the short lived unique WSS resource name allows media engine to determine that the browser is authentic.

In one embodiment and as described later herein with reference to support in SDP in order to provide the WSS resource name media engine adds a ws resource path attribute to the anchored SDP returned to signaling engine according to wss URI wss host port path query as in RFC6455 standard section 3. Host is the media engine FQDN as supplied in the certificate passed to the browser during TLS establishment path is the value supplied by the ws resource path SDP attribute and the query component is empty. The WebSocket connection remains open via WebSocket keepalives as in RFC6455 5.5.2 5.5.3.

One embodiment provides WebSocket subprotocols. The WebSockets client adds a Sec WebSocket Protocol header indicating msrp to the HTTP GET request initiating the WebSockets connection. The WebSockets server includes an identical header in the corresponding HTTP responses.

One embodiment provides MSRP over WebSockets on both call legs. A MSRP interworking call has one MSRP over WebSocket media connection when WebRTC datachannel is used for WebRTC calls. When media engine encounters a call with multiple MSRP over WebSocket media connections the media must remain anchored since the WebRTC endpoints have no WebSocket server capability.

One embodiment provides support in SDP for MSRP over WebSockets via two additions to SDP. A ws transport parameter appears in the URI in the SDP path attribute when MSRP is transported over WebSockets. A wss transport parameter appears in the URI when MSRP is transported over secure WebSockets. Media engine interprets all SDP MSRP m lines with path attributes containing a ws or wss transport as having originated from an endpoint that supports MSRP over WebSockets. Similarly media engine generates path attributes containing a ws or wss transport for all SDP MSRP m lines being forwarded to an endpoint supporting MSRP over WebSockets as indicated by the associated session config delivered to media engine . Media engine in msrp session leg and out msrp session leg configuration properties have leg transport set to WS WSS TCP or TLS as appropriate. Media engine inspects the received SDP offer m message path attribute and insures the MSRP URI transport parameter matches leg transport in the in msrp session leg configuration property. When forwarding the SDP offer SDP being anchored the path attribute MSRP URI transport parameter is set based on out msrp session leg configuration property. Similar functionality is used when processing the received SDP answer and forwarding the SDP answer SDP being anchored .

In one embodiment media engine supplies the WebSockets resource path via a SDP ws resource path attribute. The ws resource path is required for the WebSockets client to subsequently send a correct HTTP GET request to media engine . For an MSRP media stream when anchoring MSRP media engine modifies the following attributes 

One embodiment performs MSRP traffic forwarding. Media engine adjusts only To Path and From Path headers to indicate that it is anchoring the traffic. Other MSRP headers remain unchanged. MSRP message bodies carrying chunked traffic are forwarded exactly as received. Success and Failure reports are generated by the MSRP endpoints except if transport failure is encountered during media engine MSRP traffic forwarding.

One embodiment provides listener creation for MSRP over WebSockets. Media engine creates a WS WSS listener socket if session config for the leg indicates WS WSS transport. This WS WSS listener is active before media engine anchored SDP offer or answer containing the listener address and port is returned to signaling engine. The WS client should use the IP and port in the media engine anchored offer answer SDP i.e. the path attribute to initiate a WS connection to media engine . In addition to the WS WSS listener information the returned SDP includes a ws resource path attribute. This resource path is used by the WS client when issuing an HTTP GET to request the WS connection. The WS WSS listener is valid for the configured number of seconds and failure to create a connection in that time causes media engine to reclaim WS WSS listener resources.

One embodiment provides connection termination for MSRP over WebSockets. Media engine terminates a connection to the WebRTC browser if either the connection to the RCS client terminates or signaling engine sends a CallTerminate event to media engine .

The MSRP session manager provides a synchronous API for creation of sessions and session legs. Other session operations including connection control receiving traffic forwarding traffic updating session leg state and deleting session legs and sessions are asynchronous. This allows the session manager to queue multiple events on a particular MSRP session support multiple sessions on a connection and guarantee that the processing of those events is correctly serialized.

The MSRP mstream support runs as part of SDP processing. It activates when one or more m message media lines with MSRP indicated by protocol are seen in the received SDP. The following are example typical SDP offers for MSRP based instant messaging IM and file transfer in accordance with one embodiment.

One embodiment provides functionality for mstream integration as described in IETF RFC4975 Section 8 and RFC5547 regarding using MSRP with SIP and SDP. For IM and file transfer the media line proposing MSRP is accompanied by a mandatory path attribute. This attribute includes one or more URIs visited between the user agent and the WSC media engine . The leftmost URI is the element closest to the WSC media engine . The rightmost URI is the endpoint that initially generated the SDP offer or answer. The rightmost URI supplies the session id for this session. The media line proposing MSRP is accompanied by an accept types attribute which specifies media types acceptable to the endpoint which generated the SDP. Media types and subtypes may be wild carded specified via . Accept types may include Multipurpose Internet Mail Extensions MIME formats that include internal types.

The media line proposing MSRP may be accompanied by an accept wrapped types attribute which specifies media types that is wrapped inside a container type the container type being included in the accept types attribute . MSRP media lines include a protocol field of either TCP MSRP or TCP TLS MSRP. MSRP media lines include a port that matches the endpoint s MSRP URI in the path attribute. The exception is a media line port value of zero indicating a user agent that has declined the MSRP media line. The RFC allows multiple MSRP media lines to use a single port.

MSRP connections are made using transport information from the MSRP URI in the path attribute. Transport information from m lines and c lines are not used to create MSRP connections. Media lines proposing MSRP may be accompanied by connection oriented media attributes specified in IETF RFC4145 e.g. setup and connection however MSRP connection setup is simplified to default with the party sending the original being responsible for connecting to its peer except where MSRP WSS is on the MSRP session outleg. The media line proposing MSRP may be accompanied by max size max size label and max size value attributes and media format entries. Media flow direction attributes may be present specifically sendonly recvonly inactive and sendrecv. These attributes indicate permissible direction s for MSRP SEND requests.

In one embodiment as an MSRP B2B relaying MSRP session content WSC media engine is minimally involved in processing MSRP specific SDP attributes. The MSRP mstream support code in media engine for each MSRP media line provides the following functionality in accordance with one embodiment.

At WebRTC session controller module establishes a signaling channel between a browser application and an RCS endpoint. The browser application is a WebRTC application and the signaling channel supports MSRP communications over WebSockets. In one embodiment the WebRTC application establishes the signaling channel with a signaling engine within a WSC according to JsonRTC.

At WebRTC session controller module queries RCS capabilities of the RCS endpoint via the signaling channel. In one embodiment the querying of the RCS capabilities of the RCS endpoint is performed via an API in an SDK of the browser application. In one embodiment the querying of the RCS capabilities of the RCS endpoint is further implemented by Groovy scripts executed in a signaling engine within the WSC.

At WebRTC session controller module initiates the RTC between the browser application and the RCS endpoint via the signaling channel. The RTC is an RCS compliant RTC with the RCS endpoint via an API in a JavaScript SDK. The RCS compliant RTC may include standalone messaging 1 1 chat group chat file transfer image sharing or video sharing.

At WebRTC session controller module creates a WebSocket listener by a media engine of the WSC for the MSRP communications. The WebSocket listener is created based on a SDP communications received by the signaling engine over a SIP from the RCS endpoint. In one embodiment the WebSocket listener has a complete URI comprising an ephemeral port and a unique context root.

As disclosed embodiments implement a flexible WebRTC RCS gateway. This gives the developers the possibility of implementing WebRTC and RCS applications quickly using the JavaScript SDK. Further by using a Groovy script in the signaling engine web applications can control the flexibility of the WSC gateway. Embodiments further provide an MSRP over WebSocket implementation that is transparent to client applications.

Several embodiments are specifically illustrated and or described herein. However it will be appreciated that modifications and variations of the disclosed embodiments are covered by the above teachings and within the purview of the appended claims without departing from the spirit and intended scope of the invention.

