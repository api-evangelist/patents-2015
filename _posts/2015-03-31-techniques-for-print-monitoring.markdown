---

title: Techniques for print monitoring
abstract: Techniques for print monitoring are disclosed. In one embodiment, the techniques may be realized as a method including monitoring a spool directory associated with a printing system; identifying, for a print job file, a file management call that is made before the print job file is submitted to a printer driver to carry out a print job; blocking the file management call; analyzing the print job file for sensitive data; in response to determining that the print job file does not include sensitive data, re-initiating the file management call for the print job file; and submitting the print job file to a printer driver to carry out a print job.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09501251&OS=09501251&RS=09501251
owner: Symantec Corporation
number: 09501251
owner_city: Mountain View
owner_country: US
publication_date: 20150331
---
The present disclosure relates generally to data loss and more particularly to techniques for print monitoring.

Modern general purpose computing systems present a variety of challenges for data loss prevention. It can be difficult to limit the exposure of certain types of data when hundreds of different applications may be available for use on a particular system each one a potential vector for data loss.

Printing is one avenue by which sensitive data may be extracted from a system. A conventional method to prevent sensitive data printing is to monitor each application to determine if it initiates a printing process. However this potentially requires a hook into each application and can be thwarted if any single application is missed by the monitoring.

A loss prevention agent can avoid the problem of having to monitor hundreds of applications if instead it can monitor a print management system While such central monitoring methods are known for the WINDOWS operating system no such monitoring system has previously been developed for a Common UNIX Printing System CUPS used by MAC OS X and various Linux platforms.

In view of the foregoing it may be understood that significant problems and shortcomings associated with traditional print monitoring methods may be alleviated in some circumstances by a method for monitoring a CUPS printing system.

Techniques for print monitoring are disclosed. In one embodiment the techniques may be realized as a method including monitoring a spool directory associated with a printing system identifying for a print job file a file management call that is made before the print job file is submitted to a printer driver to carry out a print job blocking the file management call analyzing the print job file for sensitive data in response to determining that the print job file does not include sensitive data re initiating the file management call for the print job file and submitting the print job file to a printer driver to carry out a print job.

In accordance with other aspects of this embodiment the method may further include identifying for a second print job file a file management call that is made before the second print job file is submitted to a printer driver to carry out a second print job blocking the file management call for the second print job file analyzing the second print job file for sensitive data and in response to determining that the second print job file includes sensitive data deleting the second print job file such that the printer driver does not carry out the second print job.

In accordance with further aspects of this embodiment the method may further include displaying an alert notifying a user that the second print job has been blocked.

In accordance with further aspects of this embodiment the method may further include collecting data from the second print job file and at least one additional file in the spool directory regarding the second print job and recording the collected data in an event log.

In accordance with other aspects of this embodiment the printing system may be a CUPS printing system.

In accordance with another embodiment the techniques may be realized as an article of manufacture including at least one processor readable storage medium and instructions stored on the at least one medium. The instructions may be configured to be readable from the at least one medium by at least one processor and thereby cause the at least one processor to operate so as to carry out any and all of the steps in the above described method.

In accordance with another embodiment the techniques may be realized as a system comprising one or more processors communicatively coupled to a network wherein the one or more processors are configured to carry out any and all of the steps described with respect to any of the above embodiments.

The present disclosure will now be described in more detail with reference to particular embodiments thereof as shown in the accompanying drawings. While the present disclosure is described below with reference to particular embodiments it should be understood that the present disclosure is not limited thereto. Those of ordinary skill in the art having access to the teachings herein will recognize additional implementations modifications and embodiments as well as other fields of use which are within the scope of the present disclosure as described herein and with respect to which the present disclosure may be of significant utility.

A loss prevention agent monitors the content of the directory where print files are created and managed before being sent to the printer driver. The agent interrupts the print call and determines whether a print file includes sensitive data only allowing files without such data to be passed to the driver. Files in the directory related to the print file can be identified and analyzed to determine metadata associated with the print job.

With reference to computer system of modem network interface or some other method may be used to provide connectivity from one or more of client systems and to network . Client systems and may access information on server A or B using for example a web browser or other client software not shown . Such a client may allow client systems and to access data hosted by server A or B or one of storage devices A N B N and or N .

Networks and may be local area networks LANs wide area networks WANs the Internet cellular networks satellite networks or other networks that permit communication between clients servers and other devices communicatively coupled to networks and . Networks and may further include one or any number of the exemplary types of networks mentioned above operating as a stand alone network or in cooperation with each other. Networks and may utilize one or more protocols of one or more clients or servers to which they are communicatively coupled. Networks and may translate to or from other protocols to one or more protocols of network devices. Although networks and are each depicted as one network it should be appreciated that according to one or more embodiments networks and may each comprise a plurality of interconnected networks.

Storage devices A N B N and or N may be network accessible storage and may be local remote or a combination thereof to server A or B. Storage devices A N B N and or N may utilize a redundant array of inexpensive disks RAID magnetic tape disk a storage area network SAN an internet small computer systems interface iSCSI SAN a Fibre Channel SAN a common Internet File System CIFS network attached storage NAS a network file system NFS optical based storage or other computer accessible storage. Storage devices A N B N and or N may be used for backup or archival purposes. Further storage devices A N B N and or N may be implemented as part of a multi tier storage environment.

According to some embodiments clients and may be smartphones PDAs desktop computers laptop computers servers other computers or other devices coupled via a wireless or wired connection to network . Clients and may receive data from user input a database a file a web service and or an application programming interface. In some implementations clients and may specifically be network capable mobile devices such as smartphones or tablets.

Servers A and B may be application servers archival platforms backup servers network storage devices media servers email servers document management platforms enterprise search servers or other devices communicatively coupled to network . Servers A and B may utilize one of storage devices A N B N and or N for the storage of application data backup data or other data. Servers A and B may be hosts such as an application server which may process data traveling between clients and and a backup platform a backup process and or storage. According to some embodiments servers A and B may be platforms used for backing up and or archiving data. One or more portions of data may be backed up or archived based on a backup policy and or an archive applied attributes associated with the data source space available for backup space available at the data source or other factors.

According to some embodiments clients and may contain one or more portions of software for implementation of data loss prevention such as for example data loss prevention DLP agent . Further one or more portions of the DLP agent may reside at a network centric location. For example server A may be a server a firewall a gateway or other network element that may perform one or more actions to support management of system and network security elements. According to some embodiments network may be an external network e.g. the Internet and server A may be a gateway or firewall between one or more internal components and clients and the external network. According to some embodiments analysis and approval of resource references including DLP agent may be implemented as part of a cloud computing environment.

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM may be the main memory into which the operating system and application programs may be loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system may be stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a printer a removable disk unit e.g. Universal Serial Bus drive or other storage medium. According to some embodiments DLP agent may be resident in system memory .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . Code to implement the present disclosure may be stored in computer readable storage media such as one or more of system memory fixed disk or optical disk . Code to implement the present disclosure may also be received via one or more interfaces and stored in memory. The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 OS X UNIX Linux or another known operating system.

Power manager may monitor a power level of battery . Power manager may provide one or more APIs Application Programming Interfaces to allow determination of a power level of a time window remaining prior to shutdown of computer system a power consumption rate an indicator of whether computer system is on mains e.g. AC Power or battery power and other power related information. According to some embodiments APIs of power manager may be accessible remotely e.g. accessible to a remote backup management module via a network connection . According to some embodiments battery may be an Uninterruptable Power Supply UPS located either local to or remote from computer system . In such embodiments power manager may provide information about a power level of an UPS.

In one implementation the print server receives a print instruction and passes it to the print daemon which translates the request into an intermediate file that is temporarily stored in the spool directory . As shown in the intermediate file named 00059 is stored in the spool directory along with a cache file a control file and a set of print job files each of which represent previously completed print jobs in the history of the print server . After updating the cache and control files with information about the new job the intermediate file is renamed according to the naming scheme for the print job files and the renamed file is then passed to the printer driver for printing.

To avoid the printing of sensitive data the DLP agent includes the capability of identifying and intercepting sensitive data before it can be printed. A spool monitor module monitors the creation and modification of files in the spool directory . It detects when an intermediate file is created in the directory . The print daemon then generates a call to the underlying file management system to rename the intermediate file as a print job file and this call is intercepted by a call intercept module of the DLP agent . Rather than being renamed and sent to the print driver the file is instead submitted to a content analysis module .

The content analysis module may use any set of methods known in the art to detect sensitive data in the print job file. In some implementations the file may be a PDF or Post Script file. Text recognition algorithms may be used if necessary. In some implementations the format of the data may be used to identify it as sensitive data such as personnel or medical records . In some information particular content such as a list of key words associated with non public projects may be used to identify sensitive data. Any method for analyzing a file to determine the presence or absence of sensitive data may be used by the content analysis module as appropriate to the print file.

If the content analysis module determines that the file does not include sensitive data then the intercepted call is allowed to proceed as normal. The print job file is renamed and the print job data is sent to the printer driver for printing. If the content analysis module determines that the file does include sensitive data then the intercepted call is halted and the file is deleted rather than being renamed. Thus no print job data is sent to the printer driver and the sensitive information is not printed.

In some implementations the DLP agent may include an alert module that generates an alert whenever sensitive information is intercepted and printing is prevented. The alert module may using the job identification number from the name of the print job file collect both data and metadata regarding the prevented print job. In some implementations information may be collected from associated cache and or control files produced as part of the spooling process for the print job. The DLP agent may record any of the collected information in an event log and may provide some or all of this information in an alert which is displayed to the user when the print job is prevented.

Upon identifying a rename call for an intermediate file the DLP agent intercepts and blocks the rename call thus interrupting the print process . Blocking the call prevents the file from being renamed and submitted to the print driver and therefore prevents the print job from completing unless the agent later reinitiates the job.

While the print job is blocked from proceeding the agent analyzes the print file to identify sensitive data . Sensitive data may be identified by any method known in the art which may include identifying the formatting of any text included in the data and may also include matching the data against data known to be sensitive. The agent may also take other factors into account for example the identity of the user the computer system originating the print request the particular printer designated for carrying out the request and even time and date information may potentially impact whether the data associated with a particular print job is considered to be too sensitive to print or allowed to be printed.

If the agent determines that the print file does not include sensitive data no from then the print job is allowed to proceed as normal . In some embodiments the agent may have to supply one or more instructions to the system in order to reinitialize the interrupted print process including the rename call. In some implementations when the print job is allowed to proceed there may be no indication to the user that any monitoring or interception occurred by the DLP agent. The system informs the user of the print job being successfully queued and printed.

If the agent determines that the print file includes sensitive data that should not be printed yes from then the print job may not be allowed to proceed. Instead of reinitializing the print job in the system the agent may delete the intermediate print job file . In some implementations the system may also generate and display an alert to one or more users indicating that the print job was prevented .

In addition to the immediate alert the system may also record the print job prevention event . As noted above this may involve collecting data from the intermediate print job file as well as any cache or control file included in the spool directory or otherwise accessible within the print system. In some implementations the agent may take further steps if an event log shows multiple blocked printing jobs such as informing a system administrator of the multiple attempts to print system information or limiting system access for users with a history of blocked print jobs.

At this point it should be noted that techniques for print monitoring in accordance with the present disclosure as described above may involve the processing of input data and the generation of output data to some extent. This input data processing and output data generation may be implemented in hardware or software. For example specific electronic components may be employed in DLP agents or similar or related circuitry for implementing the functions associated with print monitoring in accordance with the present disclosure as described above. Alternatively one or more processors operating in accordance with instructions may implement the functions associated with print monitoring in accordance with the present disclosure as described above. If such is the case it is within the scope of the present disclosure that such instructions may be stored on one or more non transitory processor readable storage media e.g. a magnetic disk or other storage medium or transmitted to one or more processors via one or more signals embodied in one or more carrier waves.

The present disclosure is not to be limited in scope by the specific embodiments described herein. Indeed other various embodiments of and modifications to the present disclosure in addition to those described herein will be apparent to those of ordinary skill in the art from the foregoing description and accompanying drawings. Thus such other embodiments and modifications are intended to fall within the scope of the present disclosure. Further although the present disclosure has been described herein in the context of at least one particular implementation in at least one particular environment for at least one particular purpose those of ordinary skill in the art will recognize that its usefulness is not limited thereto and that the present disclosure may be beneficially implemented in any number of environments for any number of purposes. Accordingly the claims set forth below should be construed in view of the full breadth and spirit of the present disclosure as described herein.

