---

title: Generating runtime components
abstract: Embodiments of the invention provide systems and methods for generating runtime components in various hardware and software computer systems. More specifically, certain embodiments of the present invention describe a design-time interface by which applications may be designed, generated, and deployed in accordance within the underlying source systems of a computer system. Components may be selected, customized, and linked together to form a functional end-to-end application based on a multitude of underlying technologies within a system. Upon completion of the application design, application metadata and/or runtime components may be generated and deployed within the computer system. During execution, such the runtime components deployed within the system may collaborate to receive and process event streams from various event sources, analyze incoming data, and generate logical transaction objects, alerts, and other responses using various source systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09582254&OS=09582254&RS=09582254
owner: ORACLE INTERNATIONAL CORPORATION
number: 09582254
owner_city: Redwood Shores
owner_country: US
publication_date: 20150520
---
The present application claims priority under 35 U.S.C. 119 e to U.S. Provisional Patent Application No. 62 001 816 filed May 22 2014 entitled SYSTEMS AND METHODS TO GRAPHICALLY BUILD AND AUTO GENERATE A COMPLEX EVENT TRACKING APPLICATION FOR ENTERPRISE SYSTEMS the entire contents of which are incorporated herein by reference for all purposes.

Embodiments of the present invention relate generally to systems and methods for generating runtime components in various hardware and software based systems. More specifically certain embodiments of the present invention describe a design time interface by which applications may be designed generated and deployed in accordance with within underlying source systems of a hardware software system.

Operations of large and small businesses educational institutions and governmental entities are increasingly global outsourced and complex. Effectively coordinating and managing tasks across large and disparate systems is a daunting task. Such systems often include various hardware and networking devices having different manufacturers configured at different times and in different situations and operating under different conditions in different geographic locations. Many systems also combine legacy hardware and software systems with newly implemented systems causing potential issues for capability security and reliability. Moreover many such systems are required to support an enormously diverse set of functionality within their respective organizations. The hardware communications networks software and data infrastructure of many systems are responsible for housing and supporting different departments within the organization and providing services for different users both internal and external to the enterprise operating different user devices in different networks and having different roles and levels of access within the system. Designing building and deploying applications for such systems is often challenging.

Embodiments of the invention provide systems and methods for generating runtime components in various hardware and software based systems. More specifically certain embodiments of the present invention describe a design time interface by which simple or complex applications may be designed generated and deployed in accordance within the underlying source systems in a hardware software system. In certain embodiments a design time interface may be provided with graphical components corresponding to the source systems within a software system. Designs for applications may be received via the design time interface and sets of runtime components may be generated to implement the received designs. In some examples underlying source systems within the hardware and software system may be invoked e.g. using application programming interfaces APIs services etc. in order to generate and customize the runtime components in accordance with the graphical components defined during the design process. Additionally metadata files or other metadata objects may be generated corresponding to the application design said metadata defining application components such as event sources events component relationships conditions or patterns for generating alerts and or response routing information.

In some embodiments the relationships between different components in an application design may be defined by a user via the design time interface. For example the user may use graphical wires arrows or other linking objects to define the interactions between different components. In other cases a runtime component designer may automatically determine relationships between components without input from the user. For instance the runtime component designer may determine the relationships between components in the design based on a compatibility matrix or similar component compatibility data and or based on relative placement locations of the components the workspace of the design time interface. Additionally certain embodiments of design time interfaces for applications may be dynamically determined and or populated for specific designs users and systems. For instance after receiving a selection of first graphical component via the design time interface a set of customizable features or properties for the first graphical component and or a subset of related components compatible with the first graphical component may be selected and rendered on the design time interface.

In further embodiments after the runtime components for an application design have been generated and deployed within the hardware software system changes in the underlying hardware or software components of the system may require the runtime components to be regenerated and redeployed. For instance if an underlying source system such as a database network infrastructure or device computer server or software system is upgraded altered or replaced then any runtime components currently deployed or dependent on those source systems may need to be redesigned and or regenerated. In certain cases an updated set of runtime components may be automatically regenerated and redeployed within the system while in other cases design time interfaces may be generated and populated to allow users to redesign customize and regenerate a new set of runtime components based on the changes to the underlying source systems.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of various embodiments of the present invention. It will be apparent however to one skilled in the art that embodiments of the present invention may be practiced without some of these specific details. In other instances well known structures and devices are shown in block diagram form.

The ensuing description provides exemplary embodiments only and is not intended to limit the scope applicability or configuration of the disclosure. Rather the ensuing description of the exemplary embodiments will provide those skilled in the art with an enabling description for implementing an exemplary embodiment. It should be understood that various changes may be made in the function and arrangement of elements without departing from the spirit and scope of the invention as set forth in the appended claims.

Specific details are given in the following description to provide a thorough understanding of the embodiments. However it will be understood by one of ordinary skill in the art that the embodiments may be practiced without these specific details. For example circuits systems networks processes and other components may be shown as components in block diagram form in order not to obscure the embodiments in unnecessary detail. In other instances well known circuits processes algorithms structures and techniques may be shown without unnecessary detail in order to avoid obscuring the embodiments.

Also it is noted that individual embodiments may be described as a process which is depicted as a flowchart a flow diagram a data flow diagram a structure diagram or a block diagram. Although a flowchart may describe the operations as a sequential process many of the operations can be performed in parallel or concurrently. In addition the order of the operations may be re arranged. A process is terminated when its operations are completed but could have additional steps not included in a figure. A process may correspond to a method a function a procedure a subroutine a subprogram etc. When a process corresponds to a function its termination can correspond to a return of the function to the calling function or the main function.

The term machine readable medium includes but is not limited to portable or fixed storage devices optical storage devices and various other mediums capable of storing containing or carrying instruction s and or data. A code segment or machine executable instructions may represent a procedure a function a subprogram a program a routine a subroutine a module a software package a class or any combination of instructions data structures or program statements. A code segment may be coupled to another code segment or a hardware circuit by passing and or receiving information data arguments parameters or memory contents. Information arguments parameters data etc. may be passed forwarded or transmitted via any suitable means including memory sharing message passing token passing network transmission etc.

Furthermore embodiments may be implemented by hardware software firmware middleware microcode hardware description languages or any combination thereof. When implemented in software firmware middleware or microcode the program code or code segments to perform the necessary tasks may be stored in a machine readable medium. A processor s may perform the necessary tasks.

Embodiments of the invention provide systems and methods for generating runtime components in various hardware and software computing systems. More specifically certain embodiments of the present invention describe a design time interface by which simple or complex applications may be designed generated and deployed based on the underlying source systems in a computing system. As discussed in detail below such embodiments may provide an intuitive event focused application designer that may automatically wire a multitude of technologies seamlessly and may allow complex applications to be designed customized and built quickly and easily. In some embodiments a design time interface may be generated to allow selection customization and linking of graphical components corresponding to the underlying source systems of the computing system. Application designs may be translated into metadata objects and or may be used to generate and deploy runtime components within the computing system to implement the application functionality. Moreover multiple incoming streams of events from various different systems may be functionally linked into a Logical Transaction Object LTO thereby creating an overall context for each application design. Such LTOs may provide real time centralized views of the end to end application being implemented by separate runtime components.

Additionally in some embodiments design time interfaces may allow users to easily define exception cases and or patterns for an application so that real time notifications or alerts may be sent out when these cases or patterns are identified at runtime. Users may define and customize such alerts and may define the alert conditions based on complex time based or non time based event patterns including occurrence or non occurrence of events. These features may allow for the design generation and deployment of various different types of applications such as supply chain event management SCEM applications inventory management applications enterprise resource planning ERP applications document management applications eCommerce applications customer relationship management CRM applications and the like. For instance a supply chain event management SCEM application designed and implemented in accordance with the features described herein may monitor track and correlate all correlate all supply chain events against relevant expected milestones within system processes. Such an SCEM application may monitor activity in real time sense problems and respond with alerts and notifications to appropriate users and partners.

In use various embodiments may provide the ability to monitor various events of a logical end to end transaction in a multi tiered computer system including activities carried out by the third party systems e.g. customers suppliers vendors carriers etc. to detect an exception and potentially automatically trigger a remedial action. For example a certain implementation may monitor meaningful events of an end to end customer order drop shipment flow including manufacturing and or shipping events occurring at the vendor and may raise an exception if any event does not occur within an expected time. Additionally or alternatively certain embodiments may correlate various events in a multi tiered system and raise alerts for actions if delay or non occurrence of one event impacts future activities of the same or other multiple transactions. Other embodiments may additionally or alternatively provide an ability to subscribe to an external event streams such as traffic alerts sensors RSS feeds RFID feeds and the like. The incoming data from these event streams may be synthesized and correlated with the state of the application in the system to arrive at potential exception or an action. Various additional details of embodiments of the present invention will be described below with reference to the figures.

In various embodiments server may be adapted to run one or more services or software applications provided by one or more of the components of the system. In some embodiments these services may be offered as web based or cloud services or under a Software as a Service SaaS model to the users of client computing devices and or . Users operating client computing devices and or may in turn utilize one or more client applications to interact with server to utilize the services provided by these components.

In the configuration depicted in the figure the software components and of system are shown as being implemented on server . In other embodiments one or more of the components of system and or the services provided by these components may also be implemented by one or more of the client computing devices and or . Users operating the client computing devices may then utilize one or more client applications to use the services provided by these components. These components may be implemented in hardware firmware software or combinations thereof. It should be appreciated that various different system configurations are possible which may be different from distributed system . The embodiment shown in the figure is thus one example of a distributed system for implementing an embodiment system and is not intended to be limiting.

Client computing devices and or may be portable handheld devices e.g. an iPhone cellular telephone an iPad computing tablet a personal digital assistant PDA or wearable devices e.g. a Google Glass head mounted display running software such as Microsoft Windows Mobile and or a variety of mobile operating systems such as iOS Windows Phone Android BlackBerry 10 Palm OS and the like and being Internet e mail short message service SMS Blackberry or other communication protocol enabled. The client computing devices can be general purpose personal computers including by way of example personal computers and or laptop computers running various versions of Microsoft Windows Apple Macintosh and or Linux operating systems. The client computing devices can be workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems such as for example Google Chrome OS. Alternatively or in addition client computing devices and may be any other electronic device such as a thin client computer an Internet enabled gaming system e.g. a Microsoft Xbox gaming console with or without a Kinect gesture input device and or a personal messaging device capable of communicating over network s .

Although exemplary distributed system is shown with four client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with server .

Network s in distributed system may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP transmission control protocol Internet protocol SNA systems network architecture IPX Internet packet exchange AppleTalk and the like. Merely by way of example network s can be a local area network LAN such as one based on Ethernet. Token Ring and or the like. Network s can be a wide area network and the Internet. It can include a virtual network including without limitation a virtual private network VPN an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the Institute of Electrical and Electronics IEEE 802.11 suite of protocols Bluetooth and or any other wireless protocol and or any combination of these and or other networks.

Server may be composed of one or more general purpose computers specialized server computers including by way of example PC personal computer servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. In various embodiments server may be adapted to run one or more services or software applications described in the foregoing disclosure. For example server may correspond to a server for performing processing described above according to an embodiment of the present disclosure.

Server may run an operating system including any of those discussed above as well as any commercially available server operating system. Server may also run any of a variety of additional server applications and or mid tier applications including HTTP hypertext transport protocol servers FTP file transfer protocol servers CGI common gateway interface servers JAVA servers database servers and the like. Exemplary database servers include without limitation those commercially available from Oracle Microsoft Sybase IBM International Business Machines and the like.

In some implementations server may include one or more applications to analyze and consolidate data feeds and or event updates received from users of client computing devices and . As an example data feeds and or event updates may include but are not limited to Twitter feeds Facebook updates or real time updates received from one or more third party information sources and continuous data streams which may include real time events related to sensor data applications financial tickers network performance measuring tools e.g. network monitoring and traffic management applications clickstream analysis tools automobile traffic monitoring and the like. Server may also include one or more applications to display the data feeds and or real time events via one or more display devices of client computing devices and .

Distributed system may also include one or more databases and . Databases and may reside in a variety of locations. By way of example one or more of databases and may reside on a non transitory storage medium local to and or resident in server . Alternatively databases and may be remote from server and in communication with server via a network based or dedicated connection. In one set of embodiments databases and may reside in a storage area network SAN . Similarly any necessary files for performing the functions attributed to server may be stored locally on server and or remotely as appropriate. In one set of embodiments databases and may include relational databases such as databases provided by Oracle that are adapted to store update and retrieve data in response to SQL formatted commands.

It should be appreciated that cloud infrastructure system depicted in the figure may have other components than those depicted. Further the embodiment shown in the figure is only one example of a cloud infrastructure system that may incorporate an embodiment of the invention. In some other embodiments cloud infrastructure system may have more or fewer components than shown in the figure may combine two or more components or may have a different configuration or arrangement of components.

Although exemplary system environment is shown with three client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with cloud infrastructure system .

Network s may facilitate communications and exchange of data between clients and and cloud infrastructure system . Each network may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including those described above for network s .

Cloud infrastructure system may comprise one or more computers and or servers that may include those described above for server .

In certain embodiments services provided by the cloud infrastructure system may include a host of services that are made available to users of the cloud infrastructure system on demand such as online data storage and backup solutions Web based e mail services hosted office suites and document collaboration services database processing managed technical support services and the like. Services provided by the cloud infrastructure system can dynamically scale to meet the needs of its users. A specific instantiation of a service provided by cloud infrastructure system is referred to herein as a service instance. In general any service made available to a user via a communication network such as the Internet from a cloud service provider s system is referred to as a cloud service. Typically in a public cloud environment servers and systems that make up the cloud service provider s system are different from the customer s own on premises servers and systems. For example a cloud service provider s system may host an application and a user may via a communication network such as the Internet on demand order and use the application.

In some examples a service in a computer network cloud infrastructure may include protected computer network access to storage a hosted database a hosted web server a software application or other service provided by a cloud vendor to a user or as otherwise known in the art. For example a service can include password protected access to remote storage on the cloud through the Internet. As another example a service can include a web service based hosted relational database and a script language middleware engine for private use by a networked developer. As another example a service can include access to an email software application hosted on a cloud vendor s web site.

In certain embodiments cloud infrastructure system may include a suite of applications middleware and database service offerings that are delivered to a customer in a self service subscription based elastically scalable reliable highly available and secure manner. An example of such a cloud infrastructure system is the Oracle Public Cloud provided by the present assignee.

In various embodiments cloud infrastructure system may be adapted to automatically provision manage and track a customer s subscription to services offered by cloud infrastructure system . Cloud infrastructure system may provide the cloud services via different deployment models. For example services may be provided under a public cloud model in which cloud infrastructure system is owned by an organization selling cloud services e.g. owned by Oracle and the services are made available to the general public or different industry enterprises. As another example services may be provided under a private cloud model in which cloud infrastructure system is operated solely for a single organization and may provide services for one or more entities within the organization. The cloud services may also be provided under a community cloud model in which cloud infrastructure system and the services provided by cloud infrastructure system are shared by several organizations in a related community. The cloud services may also be provided under a hybrid cloud model which is a combination of two or more different models.

In some embodiments the services provided by cloud infrastructure system may include one or more services provided under Software as a Service SaaS category Platform as a Service PaaS category Infrastructure as a Service IaaS category or other categories of services including hybrid services. A customer via a subscription order may order one or more services provided by cloud infrastructure system . Cloud infrastructure system then performs processing to provide the services in the customer s subscription order.

In some embodiments the services provided by cloud infrastructure system may include without limitation application services platform services and infrastructure services. In some examples application services may be provided by the cloud infrastructure system via a SaaS platform. The SaaS platform may be configured to provide cloud services that fall under the SaaS category. For example the SaaS platform may provide capabilities to build and deliver a suite of on demand applications on an integrated development and deployment platform. The SaaS platform may manage and control the underlying software and infrastructure for providing the SaaS services. By utilizing the services provided by the SaaS platform customers can utilize applications executing on the cloud infrastructure system. Customers can acquire the application services without the need for customers to purchase separate licenses and support. Various different SaaS services may be provided. Examples include without limitation services that provide solutions for sales performance management enterprise integration and business flexibility for large organizations.

In some embodiments platform services may be provided by the cloud infrastructure system via a PaaS platform. The PaaS platform may be configured to provide cloud services that fall under the PaaS category. Examples of platform services may include without limitation services that enable organizations such as Oracle to consolidate existing applications on a shared common architecture as well as the ability to build new applications that leverage the shared services provided by the platform. The PaaS platform may manage and control the underlying software and infrastructure for providing the PaaS services. Customers can acquire the PaaS services provided by the cloud infrastructure system without the need for customers to purchase separate licenses and support. Examples of platform services include without limitation Oracle Java Cloud Service JCS Oracle Database Cloud Service DBCS and others.

By utilizing the services provided by the PaaS platform customers can employ programming languages and tools supported by the cloud infrastructure system and also control the deployed services. In some embodiments platform services provided by the cloud infrastructure system may include database cloud services middleware cloud services e.g. Oracle Fusion Middleware services and Java cloud services. In one embodiment database cloud services may support shared service deployment models that enable organizations to pool database resources and offer customers a Database as a Service in the form of a database cloud. Middleware cloud services may provide a platform for customers to develop and deploy various business applications and Java cloud services may provide a platform for customers to deploy Java applications in the cloud infrastructure system.

Various different infrastructure services may be provided by an IaaS platform in the cloud infrastructure system. The infrastructure services facilitate the management and control of the underlying computing resources such as storage networks and other fundamental computing resources for customers utilizing services provided by the SaaS platform and the PaaS platform.

In certain embodiments cloud infrastructure system may also include infrastructure resources for providing the resources used to provide various services to customers of the cloud infrastructure system. In one embodiment infrastructure resources may include pre integrated and optimized combinations of hardware such as servers storage and networking resources to execute the services provided by the PaaS platform and the SaaS platform.

In some embodiments resources in cloud infrastructure system may be shared by multiple users and dynamically re allocated per demand. Additionally resources may be allocated to users in different time zones. For example cloud infrastructure system may enable a first set of users in a first time zone to utilize resources of the cloud infrastructure system for a specified number of hours and then enable the re allocation of the same resources to another set of users located in a different time zone thereby maximizing the utilization of resources.

In certain embodiments a number of internal shared services may be provided that are shared by different components or modules of cloud infrastructure system and by the services provided by cloud infrastructure system . These internal shared services may include without limitation a security and identity service an integration service an enterprise repository service an enterprise manager service a virus scanning and white list service a high availability backup and recovery service service for enabling cloud support an email service a notification service a file transfer service and the like.

In certain embodiments cloud infrastructure system may provide comprehensive management of cloud services e.g. SaaS PaaS and IaaS services in the cloud infrastructure system. In one embodiment cloud management functionality may include capabilities for provisioning managing and tracking a customer s subscription received by cloud infrastructure system and the like.

In one embodiment as depicted in the figure cloud management functionality may be provided by one or more modules such as an order management module an order orchestration module an order provisioning module an order management and monitoring module and an identity management module . These modules may include or be provided using one or more computers and or servers which may be general purpose computers specialized server computers server farms server clusters or any other appropriate arrangement and or combination.

In exemplary operation a customer using a client device such as client device or may interact with cloud infrastructure system by requesting one or more services provided by cloud infrastructure system and placing an order for a subscription for one or more services offered by cloud infrastructure system . In certain embodiments the customer may access a cloud User Interface UI cloud UI cloud UI and or cloud UI and place a subscription order via these UIs. The order information received by cloud infrastructure system in response to the customer placing an order may include information identifying the customer and one or more services offered by the cloud infrastructure system that the customer intends to subscribe to.

After an order has been placed by the customer the order information is received via the cloud UIs and or .

At operation the order is stored in order database . Order database can be one of several databases operated by cloud infrastructure system and operated in conjunction with other system elements.

At operation the order information is forwarded to an order management module . In some instances order management module may be configured to perform billing and accounting functions related to the order such as verifying the order and upon verification booking the order.

At operation information regarding the order is communicated to an order orchestration module . Order orchestration module may utilize the order information to orchestrate the provisioning of services and resources for the order placed by the customer. In some instances order orchestration module may orchestrate the provisioning of resources to support the subscribed services using the services of order provisioning module .

In certain embodiments order orchestration module enables the management of business processes associated with each order and applies business logic to determine whether an order should proceed to provisioning. At operation upon receiving an order for a new subscription order orchestration module sends a request to order provisioning module to allocate resources and configure those resources needed to fulfill the subscription order. Order provisioning module enables the allocation of resources for the services ordered by the customer. Order provisioning module provides a level of abstraction between the cloud services provided by cloud infrastructure system and the physical implementation layer that is used to provision the resources for providing the requested services. Order orchestration module may thus be isolated from implementation details such as whether or not services and resources are actually provisioned on the fly or pre provisioned and only allocated assigned upon request.

At operation once the services and resources are provisioned a notification of the provided service may be sent to customers on client devices and or by order provisioning module of cloud infrastructure system .

At operation the customer s subscription order may be managed and tracked by an order management and monitoring module . In some instances order management and monitoring module may be configured to collect usage statistics for the services in the subscription order such as the amount of storage used the amount data transferred the number of users and the amount of system up time and system down time.

In certain embodiments cloud infrastructure system may include an identity management module . Identity management module may be configured to provide identity services such as access management and authorization services in cloud infrastructure system . In some embodiments identity management module may control information about customers who wish to utilize the services provided by cloud infrastructure system . Such information can include information that authenticates the identities of such customers and information that describes which actions those customers are authorized to perform relative to various system resources e.g. files directories applications communication ports memory segments etc. Identity management module may also include the management of descriptive information about each customer and about how and by whom that descriptive information can be accessed and modified.

Bus subsystem provides a mechanism for letting the various components and subsystems of computer system communicate with each other as intended. Although bus subsystem is shown schematically as a single bus alternative embodiments of the bus subsystem may utilize multiple buses. Bus subsystem may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. For example such architectures may include an Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus which can be implemented as a Mezzanine bus manufactured to the IEEE P1386.1 standard.

Processing unit which can be implemented as one or more integrated circuits e.g. a conventional microprocessor or microcontroller controls the operation of computer system . One or more processors may be included in processing unit . These processors may include single core or multicore processors. In certain embodiments processing unit may be implemented as one or more independent processing units and or with single or multicore processors included in each processing unit. In other embodiments processing unit may also be implemented as a quad core processing unit formed by integrating two dual core processors into a single chip.

In various embodiments processing unit can execute a variety of programs in response to program code and can maintain multiple concurrently executing programs or processes. At any given time some or all of the program code to be executed can be resident in processor s and or in storage subsystem . Through suitable programming processor s can provide various functionalities described above. Computer system may additionally include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

I O subsystem may include user interface input devices and user interface output devices. User interface input devices may include a keyboard pointing devices such as a mouse or trackball a touchpad or touch screen incorporated into a display a scroll wheel a click wheel a dial a button a switch a keypad audio input devices with voice command recognition systems microphones and other types of input devices. User interface input devices may include for example motion sensing and or gesture recognition devices such as the Microsoft Kinect motion sensor that enables users to control and interact with an input device such as the Microsoft Xbox 360 game controller through a natural user interface using gestures and spoken commands. User interface input devices may also include eye gesture recognition devices such as the Google Glass blink detector that detects eye activity e.g. blinking while taking pictures and or making a menu selection from users and transforms the eye gestures as input into an input device e.g. Google Glass . Additionally user interface input devices may include voice recognition sensing devices that enable users to interact with voice recognition systems e.g. Siri navigator through voice commands.

User interface input devices may also include without limitation three dimensional 3D mice joysticks or pointing sticks gamepads and graphic tablets and audio visual devices such as speakers digital cameras digital camcorders portable media players webcams image scanners fingerprint scanners barcode reader 3D scanners 3D printers laser rangefinders and eye gaze tracking devices. Additionally user interface input devices may include for example medical imaging input devices such as computed tomography magnetic resonance imaging position emission tomography medical ultrasonography devices. User interface input devices may also include for example audio input devices such as MIDI keyboards digital musical instruments and the like.

User interface output devices may include a display subsystem indicator lights or non visual displays such as audio output devices etc. The display subsystem may be a cathode ray tube CRT a flat panel device such as that using a liquid crystal display LCD or plasma display a projection device a touch screen and the like. In general use of the term output device is intended to include all possible types of devices and mechanisms for outputting information from computer system to a user or other computer. For example user interface output devices may include without limitation a variety of display devices that visually convey text graphics and audio video information such as monitors printers speakers headphones automotive navigation systems plotters voice output devices and modems.

Computer system may comprise a storage subsystem that comprises software elements shown as being currently located within a system memory . System memory may store program instructions that are loadable and executable on processing unit as well as data generated during the execution of these programs.

Depending on the configuration and type of computer system system memory may be volatile such as random access memory RAM and or non volatile such as read only memory ROM flash memory etc. The RAM typically contains data and or program modules that are immediately accessible to and or presently being operated and executed by processing unit . In some implementations system memory may include multiple different types of memory such as static random access memory SRAM or dynamic random access memory DRAM . In some implementations a basic input output system BIOS containing the basic routines that help to transfer information between elements within computer system such as during start up may typically be stored in the ROM. By way of example and not limitation system memory also illustrates application programs which may include client applications Web browsers mid tier applications relational database management systems RDBMS etc. program data and an operating system . By way of example operating system may include various versions of Microsoft Windows Apple Macintosh and or Linux operating systems a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems the Google Chrome OS and the like and or mobile operating systems such as iOS Windows6 Phone Android OS BlackBerry 10 OS and Palm OS operating systems.

Storage subsystem may also provide a tangible computer readable storage medium for storing the basic programming and data constructs that provide the functionality of some embodiments. Software programs code modules instructions that when executed by a processor provide the functionality described above may be stored in storage subsystem . These software modules or instructions may be executed by processing unit . Storage subsystem may also provide a repository for storing data used in accordance with the present invention.

Storage subsystem may also include a computer readable storage media reader that can further be connected to computer readable storage media . Together and optionally in combination with system memory computer readable storage media may comprehensively represent remote local fixed and or removable storage devices plus storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information.

Computer readable storage media containing code or portions of code can also include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information. This can include tangible computer readable storage media such as RAM ROM electronically erasable programmable ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other tangible computer readable media. This can also include nontangible computer readable media such as data signals data transmissions or any other medium which can be used to transmit the desired information and which can be accessed by computing system .

By way of example computer readable storage media may include a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM DVD and Blu Ray disk or other optical media. Computer readable storage media may include but is not limited to Zipi drives flash memory cards universal serial bus USB flash drives secure digital SD cards DVD disks digital video tape and the like. Computer readable storage media may also include solid state drives SSD based on non volatile memory such as flash memory based SSDs enterprise flash drives solid state ROM and the like SSDs based on volatile memory such as solid state RAM dynamic RAM static RAM DRAM based SSDs magnetoresistive RAM MRAM SSDs and hybrid SSDs that use a combination of DRAM and flash memory based SSDs. The disk drives and their associated computer readable media may provide non volatile storage of computer readable instructions data structures program modules and other data for computer system .

Communications subsystem provides an interface to other computer systems and networks. Communications subsystem serves as an interface for receiving data from and transmitting data to other systems from computer system . For example communications subsystem may enable computer system to connect to one or more devices via the Internet. In some embodiments communications subsystem can include radio frequency RF transceiver components for accessing wireless voice and or data networks e.g. using cellular telephone technology advanced data network technology such as 3G 4G or EDGE enhanced data rates for global evolution WiFi IEEE 802.11 family standards or other mobile communication technologies or any combination thereof global positioning system GPS receiver components and or other components. In some embodiments communications subsystem can provide wired network connectivity e.g. Ethernet in addition to or instead of a wireless interface.

In some embodiments communications subsystem may also receive input communication in the form of structured and or unstructured data feeds event streams event updates and the like on behalf of one or more users who may use computer system .

By way of example communications subsystem may be configured to receive data feeds in real time from users of social networks and or other communication services such as Twitter feeds Facebook updates web feeds such as Rich Site Summary RSS feeds and or real time updates from one or more third party information sources.

Additionally communications subsystem may also be configured to receive data in the form of continuous data streams which may include event streams of real time events and or event updates that may be continuous or unbounded in nature with no explicit end. Examples of applications that generate continuous data may include for example sensor data applications financial tickers network performance measuring tools e.g. network monitoring and traffic management applications clickstream analysis tools automobile traffic monitoring and the like.

Communications subsystem may also be configured to output the structured and or unstructured data feeds event streams event updates and the like to one or more databases that may be in communication with one or more streaming data source computers coupled to computer system .

Computer system can be one of various types including a handheld portable device e.g. an iPhone cellular phone an iPad computing tablet a PDA a wearable device e.g. a Google Glass head mounted display a PC a workstation a mainframe a kiosk a server rack or any other data processing system.

Due to the ever changing nature of computers and networks the description of computer system depicted in the figure is intended only as a specific example. Many other configurations having more or fewer components than the system depicted in the figure are possible. For example customized hardware might also be used and or particular elements might be implemented in hardware firmware software including applets or a combination. Further connection to other computing devices such as network input output devices may be employed. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

As introduced above embodiments of the invention provide systems and methods for generating runtime components in various hardware and software computing systems. More specifically certain embodiments of the present invention describe a design time interface by which simple or complex applications may be designed generated and deployed in accordance with the underlying source systems in a computing system. As discussed below such embodiments may provide an intuitive event focused application designer that may automatically wire a multitude of technologies seamlessly and may allow complex software applications to be designed customized and built quickly and easily. In some embodiments a design time interface may be generated to allow selection customization and linking of graphical components that corresponding to the underlying source systems of the computing system. Application designs may be translated into metadata objects and or may be used to generate and deploy runtime components within the computing system to implement the application functionality. Moreover multiple incoming streams of events from various different systems may be functionally linked into a Logical Transaction Object LTO thereby creating an overall context for each application design. Such LTOs may provide real time centralized views of the end to end application being implemented by separate runtime components.

In use various embodiments may provide an ability to monitor various events of a logical end to end transaction in a multi tiered system including activities carried out by the third party systems e.g. customers suppliers vendors carriers etc. to detect an exception and potentially automatically trigger a remedial action. For example a certain implementation may monitor meaningful events of an end to end customer order drop shipment flow including manufacturing and or shipping events occurring at the vendor and may raise an exception if any event does not occur within an expected time. Additionally or alternatively certain embodiments may correlate various events in a multi tiered system and raise alerts for actions if delay or non occurrence of one event impacts future activities of the same or other multiple transactions. Other embodiments may additionally or alternatively provide an ability to subscribe to an external event streams such as traffic alerts sensors RSS feeds RFID feeds and the like. The incoming data from these event streams may be synthesized and correlated with the state of the application in the system to arrive at potential exception or an action. Various additional details of embodiments of the present invention will be described below with reference to the figures.

In various embodiments computing system may range from a small and simple computing system to a large and highly complex system including hardware software and network components designed to integrate with other such systems to support the computing needs of organization users. Computing system may be component based complex scalable and or distributed. In some embodiments the hardware software storage and networking components of the computing system e.g. components may be deployed on various devices and platforms across private organization networks intranets and or the wide area public networks e.g. the Internet . Some or all of the underlying systems within the computing system may be designed to implement system wide security administration and maintenance policies. In some cases the software applications of the system may be designed by third party application service providers not shown and may be accessible via the system as on premise or hosted services such as SaaS and web based applications. Additionally computing system may correspond one or more cloud computing systems in which some or all of the underlying source systems and resources reside on a cloud and are accessible to the devices within the environment through a network e.g. the Internet as an on demand service. System may also correspond to a hybrid cloud in which certain source systems and resources may reside on a cloud while others reside on premises e.g. in an organization data center . Different computing systems may be designed having different computer architectures and functional logical designs in order to implement one or more context specific computing systems. For example the computing system may be implemented as a supply chain event management SCEM system enterprise resource planning ERP system document management system eCommerce system customer relationship management CRM system and the like. In various examples systems may include various development platforms for example Java system platforms designed to allow application developers to create large scale multi tiered scalable reliable and secure network applications for the system .

As discussed in more detail below the runtime component designer may interact with one or more user devices external event sources and or various hardware or software components within the computing system e.g. databases network devices computer servers and software components to design generate and customize runtime components. Such runtime components may correspond to various software applications designed for deployment within a specific system or elsewhere in a specific computing environment . For example runtime components designed and generated for deployment with computing system may include applications designed to interface or integrate with other applications in the system and may be designed for deployment across one or more networks associated with the computing environment and systems e.g. corporate networks intranets and or the Internet while satisfying system wide requirements for security and administration. The runtime components designed via a runtime component designer and deployed within one or more systems may range from relatively small and simple applications to large and complex applications. Such applications may be multi user multi developer and or multi device applications. In some cases runtime components may designed generated and deployed to sustain continuous and long lived operation within the computing environment and to support scalability and allow for maintenance monitoring and administration. Runtime components applications may execute in coordination with other runtime components applications using network distributed resources to analyze large amounts of system data and or perform environment wide and system wide parallel processing tasks. These runtime components applications may be deployed across multiple systems and multiple computing environments and may interoperate with many other associated applications.

The specific application types and functional examples of runtime components designed generated and deployed herein may depend on the computer architecture s and functional design s of the associated computing environments and systems . For instance within a SCEM system ERP system CRM system or the like various runtime components may be designed to function as payment systems payment processing systems automated billing systems tracking systems shipping systems email marketing systems client management systems call center systems organization search systems and or messaging and collaboration systems. These non limiting examples among other various types of runtime components may be implemented as web based applications cloud based applications small and medium enterprise SME mobile applications and the like. As discussed below the runtime component designer and other components described herein provide an intuitive event focused application designer that may automatically wire a multitude of technologies seamlessly and allowing complex designs and integration between any of these types of applications.

Runtime component designer may be implemented in hardware software or a combination of hardware and software. As discussed in more detail below the runtime component designer may interact with one or more user devices external event sources and or various computing system hardware or software components e.g. databases network devices computer servers and software components to design generate customize and deploy runtime components within the computing system . In some embodiments the runtime component designer may be implemented as part of the computing system or other middle tier software applications. For example the runtime component designer may be a software component executing on the same computer server as one or more software applications . In other embodiments the runtime component designer may be executed on dedicated hardware and or software for example on a separate computer server that monitors and communicates with user devices external systems and various source systems within the computing system . In some cases runtime component designer may be dedicated to a specific system whereas in other cases a single runtime component designer may interact with multiple different systems maintained by different organizations.

In the example computing environment shown in the runtime component designer may generate and populate a design time interface for runtime components based on data received from the source systems within the computing system external event sources and user devices . Users interacting with the runtime component designer via user devices may design and customize simple or complex applications that perform various functionality and invoke any number of underlying source systems within the computing system . Such applications may be designed and customized by the runtime component designer using a combination of input from user devices the computing system and transaction logic. The runtime component designer also may define the relationships between the components of an application either based on input from a user designing the application or automatically based on application configuration data. The runtime component designer may then generate a set of runtime components corresponding to the customized application designed by the user and may deploy the runtime components within the computing system .

In some embodiments the functionality and or interfaces supported by the runtime component designer may be determined dynamically based on the characteristics of the underlying source systems and other hardware software and network components of the computing environment . For example the runtime component designer may support the functionality to design runtime components for specific systems in which the designed applications are automatically configured to integrate or interface with other applications and systems in the computing environment . The runtime component designer also may ensure that applications are designed generated and deployed to be scalable and or executable as distributed applications within the computing environment and also that such applications may be deployed on any of the multiple host devices platforms and networks within the appropriate systems of the computing environment. Additionally the runtime component designer may implement the support within the newly designed applications or updated applications for any system wide security administration and maintenance policies within the system and or computing environment .

In some embodiments the graphical components of the design time interface may be customized and or populated on the fly by the runtime component designer based on the current characteristics of the computing system the user and user device accessing the interface and various other real time factors. For example the design time interface in may support drag and drop functionality to allow users select position and connect various components within the workspace . In some embodiments various aspect of the layout of the design time interface such as the size shape and orientation of the workspace the size size and positioning of the component toolbar may be determined on the fly by the runtime component designer based on user preferences and or user device capabilities. The functionality of the design time interface also may be customized based on user preferences and or user device capabilities. For instance a tablet computer user device may support touchscreen functionality to allow users to position graphical components on the workspace whereas a desktop computer user device may alternatively support click and drag functionality.

Additionally in some implementations the graphical components available in the design time interface may depend on the underlying source systems of a corresponding computing system preferences or permissions associated with users of the design time interface and other factors. For example if an computing system associated with the design time interface does not current include the underlying systems to support user alerts or only supports certain types of alerts then the design time interface might not include an alert processor graphical component or only certain types of alert processor components . Additionally different types of underlying source systems may be rendered as different graphical components on the design time interface such as a first event source graphical component and a second external event source graphical component within the component toolbar . Moreover if the user currently interacting with the design time interface does not have full access permissions to all of the underlying source systems in the computing system then the runtime component designer may limit the graphical components shown in the design time interface in accordance with the user s permissions. For example the runtime component designer may query the computing system to determine that a user does not have access to subscribe to certain events access certain event sources invoke certain alert or notification services and the like. In response the runtime component designer may populate the design time interface only with the graphical components for which the specific user is permitted access.

The example design shown in may correspond to any number of event based applications for tracking and responding to various conditions relevant to an organization such as a supply chain management application a report generation application a system maintenance application etc. For instance the software application design in may correspond to a supply chain event management SCEM application that is capable of subscribing to and listening for various events from multiple different event sources . The events in this example may be events that occur on business entities such as service requests tasks orders prices etc. from c business event sources. In other examples the events may correspond to physical states or occurrences e.g. current inventory states physical orders shipped or received etc. inside or outside of the computing system or events occurring to the hardware and software resources of the computing system such as events based on processing loads and availabilities of system servers memory usage numbers of network connections numbers of software objects created number of users accessing the software numbers of client connections occurrences of network congestion performance measurements of system hardware software or networks and the like.

In addition to the events and event sources the application design in may include an LTO processor to provide centralized view of the complete application. The LTO processor may collect and analyze data describing how each of the events are related to one another thus providing a real time centralized view of the entire end to end business transaction. The LTO processor may create a transaction object that may be used to track business transactions occurring across disparate and heterogeneous systems. Additionally alert processors may collect and analyze data based on pre set conditions and or patterns based upon which the application may provide alerts. The alert processors may generate one or more alert objects that contain attributes using which the application may send an alert to different stake holders via email SMS or to the dashboard etc. Alert object may include the alert recipients e.g. user device s specific system users or administrators event logs etc. the alert type e.g. email simple message service SMS message phone call page log file etc. the format and preferences for the alert and or the media and or communication network s to be used for transmitting the alert. Finally response objects may enable dedicated channels to the presentation layer which may be for example a business activity monitoring BAM data object standard service oriented architecture SOA notifications and the like.

In order to create the application design in the design time interface may allow users to select and place various components on the workspace . In some embodiments the design time interface may provide users the functionality to set the features or properties of each component in the design. For instance after selecting placing a new component on the workspace the design time interface may display an editable list of component features properties for the newly placed component allowing the user to input the properties to define and customize the component that will be added to the application design. For example if an event source object is selected and placed within the workspace an editable list of event source properties may be displayed within the design time interface to allow the user to define the specific name and or network location of the event source e.g. by selecting an event provider within the computing system or an external event source with events accessible to the system . Subsequently if an event object is selected and placed within the workspace a dropdown box or other interface may be provided within the design time interface containing a selectable list of all aggregated events provided by any of the previously selected event sources on the workspace. Similarly if an LTO processor component or alert processor component is placed on the workspace the design time interface may invoke an editable user interface to allow the user to define how each of the events are related to one another to define the conditions and or patterns for responding or not responding to the individual events and combinations of events and to define the conditions and or patterns for providing alerts in response to individual events and combinations of events.

In some embodiments the component features or properties that may be configured via the design time interface and or the limits or ranges of how such component features may be configured may be dynamically determined by the design time interface. For example a graphical component selected for an application design may relate to one or more hardware or software components within the computing system . In such examples a selectable list of the possible hardware or software components may be dynamically generated and provided to the user in real time to allow the user to select the appropriate source systems within the computing system . For instance an illustrative computing system may support only certain alert types and not others and or may provide include visualization layers but not others. In this case if a user selects and places an alert processor graphical component on the workspace then the runtime component designer may dynamically retrieve all of the available alert types and visualization layers from the underlying source systems of the computing system and may display those as user selectable options in a list on the design time interface.

Additionally in certain embodiments the limits of user configuration of the component features or properties in the design may be determined based on the access permissions of a user interacting with the design time interface. For instance if a user has access permissions to subscribe to certain events and or event sources but not to other events and or event sources then the user s level of access permissions may determine which events and event sources are displayed when the user selects an event component or event source component . Similarly users in an computing system may be assigned different levels of access to different databases alert systems visualization systems processing resources hardware and network resources etc. within the computing system . Accordingly the user s options for setting features or properties for components within the design time interface may be limited by the user s access permissions to the hardware software and network resources of the computing system . Moreover in some embodiments the limits of user configuration of the component features or properties in the design may be determined based on the current levels of hardware software or network resource availability for the relevant source systems within the computing system . For example if a user selects a graphical component that may relate to underlying database network device computer server or software component within the computing system then the user s options within the design time interface for setting features or properties for the selected component may be based on the different levels of availability of the underlying resources such as the current number of users or connections current response time metrics memory availability on different databases or servers processing availability on different servers bandwidth availability on different networks instances of network congestion etc.

The example application design shown in also includes wires depicted as unidirectional or bi directional arrows that connect each of the graphical components in workspace . The wires may be defined manually by users in some cases for instance by clicking and or dragging within the workspace to identify a start component and endpoint component for each wire. In certain embodiments the runtime component designer may automatically create the wiring on the workspace to define the relationships between the graphical components. For example the runtime component designer may determine the component relationships based on compatibility and or the location of the components placement within the workspace . If there are multiple possibilities for defining the component relationships the runtime component designer may initially create a set of wires within the workspace corresponding to the most likely or most popular set of component relationships and then may allow the user to add remove or edit the wires to define a different set of desired component relationships for the application design.

In step the runtime component designer may generate and populate a runtime component design time interface. In some cases an interface such as the illustrative design time interface shown in may be generated by the runtime component designer and provided to one or more user devices in response to user requests to create or modify runtime components within the computing system . For instance a user device may directly access a user interface e.g. a web based interface or standalone client application interface provided by the runtime component designer to allow the user device to design an application to be deployed within system . In other examples a software application executing on a user device may invoke an API web service or application service of the runtime component designer to programmatically generate and populate a design time interface. As discussed above in relation to different possible layouts and functionalities may be used for a design time interface in step based on the identity of the requesting user user preferences user device capabilities and the like. Additionally the population of the design time interface in step may be based on the source systems within the computing system as well as based on various external sources and the user permissions of the requesting user etc.

In step the runtime component designer may receive a design of a new or modified application via the design time interface. As discussed above in relation to the overall design of the application the underlying source systems upon the application may be built the various events and event sources and the various alerts and responses of the application design may be based on the specific implementation and current state of the computing system and its various components along with other factors such as the availability of external event sources and other external systems user permissions and the like.

In step if a user has not fully defined the relationships between components in the application design No then in step the runtime component designer may automatically determine and define the relationships in the application design. As discussed above one or more different configurations of relationships may be possible based on the components selected by the user and or the features or properties of those components selected by the user. In some embodiments the runtime component designer may determine the relationships between components in the design based on a compatibility matrix or other compatibility and incompatibility data for the different components and or based on the placement locations of the components within a design workspace. Alternatively if the relationships between each of the components in the design has been fully defined Yes for example by using unidirectional or bidirectional wires within the design time interface then the runtime component designer need not define the component relationships in step but may still confirm the validity of the user defined relationships in some embodiments.

In step the runtime component designer may generate and customize the runtime components corresponding to the application design. The runtime components generated in step may correspond to any type of hardware software data or network component supported by the computing system . Application designs may include various combinations of simple and complex components that may be generated and deployed within the computing system . Such technology components may include for example service oriented architecture SOA artifacts complex event processing CEP applications that may or may not use in memory caches e.g. e.g. Oracle Event Processor OEP applications using an Oracle Coherence cache various data objects and messaging services for business activity monitoring BAM software as various other event systems alert systems and or visualization systems within the computing system . The components may be generated using component templates stored within the computing system or in secure storage outside of the system e.g. within the memory of an external runtime component designer or may be generated using application programming interfaces API exposed by the underlying source systems within the computing system .

Each runtime component generated in step also may be customized during or after the generation of the component in accordance with the component s features or properties defined during the application design and in accordance with the component s relationships with other components in the design. As discussed above the runtime component designer may collect component property data via the design time interface for example data identifying the component s corresponding source system s within the computing system data identifying any related events and event sources data identifying the relationships of the component to other components data identifying any business rules or logic applicable to the component data identifying the alert conditions and or patterns associated with the component and or data identifying response routing information for alerts and other objects e.g. LTO objects . Thus in step each runtime component generated by the runtime component designer may be customized e.g. by API parameters modifying the runtime object template etc. in accordance with the component s features properties and the component s relationships with other components in the application.

In some embodiments the generation and customization of runtime components in step may include creating or accessing metadata objects that define the runtime components. In some cases metadata files e.g. XML files or other format may be used to generate the runtime components. For instance an XML file containing runtime object information features or properties and relationships may be used create and customize an object from a runtime template or may be provided as an input parameter to an API that generates or modifies runtime components. Referring briefly to three examples of illustrative XML metadata files are shown. These illustrative metadata files correspond to an example application related to supply chain event management SCEM . In these example a first metadata file contains the application design based on the data received via the design time interface a second metadata file contains the logical transaction data for the application and a third metadata file contains the alert configuration data for the application.

In step the runtime components generated in step may be deployed within the computing system . As discussed above such components may include various types of simple and complex components to be deployed throughout the computing system such as SOA artifacts CEP applications data objects and messaging services for BAM software and other components deployed within various source systems e.g. event systems alert systems and or visualization systems within the computing system . Thus functionality of the runtime component designer discussed herein may hide the complexity of the underlying technologies within the computing system while providing an abstraction which decreases the technological requirements and entry barriers for building and deploying software applications.

The example process illustrated in may be initiated based on a change in one or more source systems within an computing system . Such changes may include software and or hardware changes to the various components of the computing system . As discussed above computing systems may include various source systems such as databases network devices and components computer servers and software components . Each of these individual source systems may be implemented in hardware software or a combination of hardware and software components. Moreover certain systems may include various hardware and networking devices having different manufacturers configured at different times and in different situations and operating under different conditions in different geographic locations. Many systems also combine legacy hardware and software systems with newly implemented systems. Thus many different activities or occurrences within the computing system such as software and hardware upgrades infrastructure changes outages and system maintenance may cause in changes in the availability or functionality of the underlying source systems .

In step the runtime component designer may determine that a change has occurred in one or more of the source systems within the computing system . For example the hardware and or software of one of the underlying source systems may have been replaced or upgraded. In other examples a change to the underlying design or architecture of the system infrastructure may cause changes in the availability or functionality of various software hardware and or network components within the system . The runtime component designer may determine that a change has occurred in step based on data received from the system components . In some embodiments the runtime component designer may poll various system components to detect outages service restorations upgrades new systems online and other changes in the system hardware and software components of the system .

In step the runtime component designer may retrieve the design metadata for one or more applications in response to determining in step that one or more source systems has changed. As discussed above in reference to in some embodiments metadata objects e.g. XML metadata files containing application design information may be created and stored during the process of generating and customizing a set of runtime components for an application. The metadata for an application may identify each of the underlying source systems deployed on and or used by the application. Thus in step the runtime component designer may retrieve the metadata objects corresponding to all applications currently deployed and executing within the system .

In step the runtime component designer may use the metadata retrieved in step to identify one or more applications that may be affected by the changes to the source systems determined in step . For example if a set of software upgrades hardware replacements or the like occurring within the computing system may affect the availability and or functionality of any databases network devices servers or software objects then the runtime component designer may search the retrieved metadata to identify all applications deployed on or relying upon the affected components . If no applications will be affected by the changes to the underlying source systems No then the runtime component designer need not regenerate and or customize any of the runtime components currently deployed on the computing system .

If one or more applications may be affected by the changes to the underlying source systems Yes then in step the runtime component designer may regenerate and or customize the affected components. In some cases the runtime component designer may be able to automatically determine the changes needed for the application. For instance if an event source has been changed to support a different set of a events and or return different types or formats of data when an event fires then the runtime component designer may automatically update the application design e.g. by updating the metadata objects or files for the application design in accordance with the new events or new event data. As another example if an alert or visualization software system within the computing system is removed or replaced then the runtime component designer may automatically update the application design use new or alternative alert or visualization systems that are available in the updated system . Similarly if any of the underlying source systems undergoes a hardware or software change that affects its functionality or access interfaces e.g. API calls service interfaces etc. then the runtime component designer may automatically update the application design and regenerate the runtime components in step .

In some embodiments the runtime component designer may be unable to or may be configured not to automatically update the application design in step . In some alternatives the runtime component designer may transmit a notification to a user of the affected application e.g. the application designer or owner and then initiate a design time interface similar to the interface shown in to allow the notified user to redesign the application in accordance with the changes to the source systems of the computing system . For example if one or more of the previous components e.g. event sources events alert systems visualization systems response systems etc. have been change or are no longer available then the interface may highlight the affected components and require the user to update or remove the components. In these examples after the user has redesigned and saved the updated application design then the runtime component designer may regenerate the runtime components in step in a similar manner to the initial generation of the runtime components in step .

In step the runtime components regenerated in step may be deployed within the computing system . As discussed above such components may include various types of simple and complex components to be deployed throughout the computing system such as SOA artifacts CEP applications data objects and messaging services for BAM software and other components deployed within various source systems e.g. event systems alert systems and or visualization systems within the computing system . Thus functionality of the runtime component designer discussed herein may hide the complexity of the underlying technologies as well as easily adapt to changes within the underlying technologies and infrastructure of the computing system .

The runtime components corresponding to the CEP application may include one or more CEP processors designed to receive and process the events and alerts that were predesigned via the design time interface. These CEP processors may consume the events from messaging queues e.g. JMS queues and cache them into an in memory caching infrastructure such as for example Oracle Coherence. The CEP application may then create and publish Logical Transaction Objects LTOs based on the received events and alerts. The CEP application may detect any predefined conditions for alerts or other responses and then publish the corresponding alerts or responses.

The event routing application includes runtime components corresponding to generated SOA artifacts that may route the LTO published by the CEP application and any alerts via a messaging system e.g. the JMS API or other message oriented middleware API to one or more notification services and or one or more monitoring applications . Notification services may use predefined rules to transmit alerts via email SMS or other techniques to predefined users and groups. The monitoring applications may be for example a business activity monitoring BAM dashboard application capable of displaying alerts and or data corresponding to the LTOs published by the CEP application . In some embodiments the runtime component designer may be configured generate resources within the notification services and or monitoring applications such as message system queues e.g. JMS queues enterprise messaging sources EMSs and data objects DOs to support end to end processing. During deployment such resources may be created and wired together in accordance with the defined design for the application.

In the foregoing description for the purposes of illustration methods were described in a particular order. It should be appreciated that in alternate embodiments the methods may be performed in a different order than that described. It should also be appreciated that the methods described above may be performed by hardware components or may be embodied in sequences of machine executable instructions which may be used to cause a machine such as a general purpose or special purpose processor or logic circuits programmed with the instructions to perform the methods. These machine executable instructions may be stored on one or more machine readable mediums or memory devices such as CD ROMs or other type of optical disks floppy diskettes ROMs RAMs EPROMs EEPROMs magnetic or optical cards flash memory or other types of machine readable mediums or memory devices suitable for storing electronic instructions. Alternatively the methods may be performed by a combination of hardware and software.

While illustrative and presently preferred embodiments of the invention have been described in detail herein it is to be understood that the inventive concepts may be otherwise variously embodied and employed and that the appended claims are intended to be construed to include such variations except as limited by the prior art.

