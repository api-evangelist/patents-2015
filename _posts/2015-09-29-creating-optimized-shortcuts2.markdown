---

title: Creating optimized shortcuts
abstract: An embodiments of the invention may include a method, computer program product and computer system for optimizing computer programs. The embodiment may include a computing device that determines a program code of a computer program contains at least two consecutive method handles. The embodiment may determine that the at least two consecutive method handles can be optimized. The embodiment may optimize the at least two consecutive method handles. Optimizing the at least two consecutive method handles may include one or more of: replacing the at least two consecutive method handles with one or more different commands; and reordering the at least two consecutive method handles.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09569206&OS=09569206&RS=09569206
owner: International Business Machines Corporation
number: 09569206
owner_city: Armonk
owner_country: US
publication_date: 20150929
---
This disclosure relates generally to optimize Java 7 and more specifically to optimize the performance of method handles in Java 7.

In computer programming an application programming interface API is a set of routines protocols and tools for building software applications. An API expresses a software component in terms of its operations inputs outputs and underlying types. An API defines functionalities that are independent of their respective implementations which allows definitions and implementations to vary without compromising each other. A good API makes it easier to develop a program by providing all the building blocks. A programmer then puts the blocks together.

Method handles were introduced into the Java Java is a registered trademark of Oracle Corp. language API with Java 7.0. A method handle is a typed directly executable reference to an underlying method constructor field or similar low level operation with optional transformations of arguments or return values. These transformations are quite general and include such patterns as conversion insertion deletion and substitution. Such method handle commands allow developers to write a program that includes a call to a function that is not present when the program is initially compiled. The method handles look up the functions at run time based on the name of the called function.

Included in the method handle API is the guard with test command. Guard with test functions as an if statement. For example the command MethodHandles.guardwithtest MethodHandle test MethodHandle target MethodHandle fallback would execute method handle target if method handle test returned true and would execute method handle fallback if method handle test returned false.

An embodiments of the invention may include a method computer program product and computer system for optimizing computer programs. The embodiment may include a computing device that determines a program code of a computer program contains at least two consecutive method handles. The embodiment may determine that the at least two consecutive method handles can be optimized. The embodiment may optimize the at least two consecutive method handles. Optimizing the at least two consecutive method handles may include one or more of replacing the at least two consecutive method handles with one or more different commands and reordering the at least two consecutive method handles.

Although an illustrative implementation of one or more embodiments is provided below the disclosed systems and or methods may be implemented using any number of techniques. This disclosure should in no way be limited to the illustrative implementations drawings and techniques illustrated below including the exemplary designs and implementations illustrated and described herein but may be modified within the scope of the appended claims along with their full scope of equivalents.

As will be appreciated by one skilled in the art aspects of the present disclosure may be embodied as a system method or computer program product. Accordingly aspects of the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system . Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Aspects of the present disclosure are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions.

Program inefficiencies may be the result of unnecessary commands being called or used during operation. Such commands may not be routinely performed or may be performed in a manner that is computationally intensive so each check of such a command may decrease the performance. To combat this decrease in performance such commands may be reordered or replaced so that the most efficient path may be taken through a set of checks. By replacing or reordering a group of commands the optimized command or commands would lead to a decrease in the amount of underlying byte codes performed on the processor or stored in program memory.

With reference to a block diagram of a method handle optimization system in accordance with various embodiments of the disclosure is presented. In the example embodiment method handle optimization system includes computing device .

Computing device includes optimization program program code and optimized program code . Computing device may be a desktop computer a notebook a laptop computer a tablet computer a handheld device a smart phone a thin client or any other electronic device or computing system capable running and optimizing Java scripts. Although not shown optionally computing device can comprise a cluster of web servers executing the same software to collectively process the requests for the web pages as distributed by a front end server and a load balancer. Additionally while optimization program program code and optimized program code are shown as being co located on the same computing device each component may be located on separate computing devices in communication with each other. Computing device is described in more detail with reference to .

Optimization program is a software application or configuration in a software application capable of analyzing and optimizing a program code or an optimized program code both further described below. Optimization program is capable of determining which portions or method handles of the program code or an optimized program code are run most frequently and pointing out those portions as needing optimization. Additionally the optimization program may determine the portions of script that are capable of being optimized and then carry out the optimization by re ordering the method handles or by replacing a group of method handles with a more efficient command structure. The operations and functions of optimization program are described in further detail below with regard to .

Program code may be source code for a program written in the Java programming language. The program code may be a list of commands placed in a specific order which when executed perform a specific operation in a Java environment. In the example embodiment the program code may be Java 7.0 or later JRuby or any other programming language where method handles are implemented in the API. Program code may contain code for counters added to each of the method handles in order to begin optimization.

Optimized program code may be source code for a program written in the Java programming language where optimization of the method handle chains has been implemented into the code. Optimized program code may be a list of commands in order to perform a specific operation in a Java environment. In the example embodiment the optimized program code may be Java 7.0 or later JRuby or any other programming language where method handles are implemented in the API. Optimized program code may contain code for counters on each of the method handles that are capable of being optimized.

With reference to a process for creating an optimized Java program using the optimization system of is illustrated in accordance with one embodiment of the disclosure is presented.

With regards to step S optimization program records the usage of method handles contained in a Java script that is deployed in a live environment. The Java optimization system may implement a counter on each of the method handles that records the number of times a method handle test is run referred to as a test counter and determines how often the method handle test returns true e.g. the conditions present satisfy the conditions necessary in the test and execute the method handle target referred to as a match counter e.g. the method handle target to be called . The test counter may provide data on how often a method handle is executed e.g. whether it is hot while the match counter may be used to determine how often a match result is returned from the method handle test. When the Java optimization system is initiated the optimization program may scan counters within all the method handles in the program code . However after partial optimization resulting in optimized program code optimization program may remove the counters from the method handles if it is determined that optimization cannot occur or in instances where the method handle chain is replaced with an alternate command.

With regards to decision step S optimization program determines whether method handle chains should be optimized or re optimized based on either the test counter or match counter determined in step S. In the example embodiment the optimization program determines whether a method handle is a hot method handle by determining whether the test counter for a method handle or a chain of method handles exceeds a threshold value. If the test counter for a method handle exceeds the threshold value the method handle is considered hot . In the example embodiment the threshold value is 2. In other embodiments the threshold value may be a different value. If the method handle is determined to be hot Optimization program continues to step S and if the method handle is not hot Optimization program returns to S to continue recording method handle usage.

Additionally the optimization program may determine whether an optimized program code should be re optimized based on the match counters collected in step S. Such re optimizations could be performed when the match counter of each method handle increases above a threshold amount from the previous optimization. The threshold amount may correspond to an amount that would cause the ranking of method handles based on match counter to change. In some embodiments a buffer value may be included where re optimization would only occur when the match counter exceeds the threshold amount plus the buffer amount. For example a method handle chain may contain 3 method handles x y and z where the usage rate e.g. the percentage that the target of each handle is called of those handles during optimization was 50 15 and 35 respectively. This would create a method handle order of x z y. Following repeated usage the usage for x y and z may be 39 15 and 46 . In instances where the buffer value was less than 7 the method handles would be re optimized as z x y.

With regards to step S optimization program determines if a method handle chain may be optimized. Specifically optimization program scans the script for method handle chains e.g. more than 1 method handle in a sequence . In the example embodiment optimization program scans the method handle chains tagged as hot in step S in an attempt to reduce the computational complexity of the optimization. A method handle chain may be optimizable e.g. re ordered based on usage in instances where the resulting outcome of the computer code does not change e.g. order of the method handles does not matter . In an embodiment the order of the method handles does not matter when only one of the test methods will ever return true and cause its corresponding method handle target to be called. For example the optimization program may compare the content of the method handle test against a set of templates that are known to be capable of optimization and if the content of the method handle test matches a template set the method handle is optimizable. A template is a snippet of byte code representing a common operation.

For example a sequence of test methods for a method handle chain may contain a snippet of byte code such as 

In the example above depicting Java bytecode comparing two java.lang.Class objects indicates a java.lang.Class as the constant from the constant pool should be a java.lang.Class. During operation the bytecode snippet first gets an object s java.lang.Class and then pushes a constant from the constant pool onto the stack. Once on the stack the bytecode performs a comparison of the loaded object and the constant from the constant pool and returns a value true or false depending on the result. In this example it is only necessary to match the type java.lang.Class of the constant pool entry if the rest of the template matches. In this example the method handles may be re ordered as there is a single input object argument and the class is compared against a constant class as defined for each test method handle. Tests are independent of each other and thus only one of the test methods will ever return true and in turn only one of them will run the corresponding target method handle.

With regards to step S optimization program determines how a method handle chain may be optimized. The optimization program may determine if the method handle chain may be replaced with more efficient code. This may occur if the method handles match a known pattern such as instances where the test of a method handle is based on an attribute of an object e.g. exact value and there are multiple method handles in order that are each checking that attribute. In such instances the optimization program continues to step S. In other instances the optimization program continues to step S.

With regards to step S optimization program reorders the method handles in the method handle chain based on how often the method handle target is called i.e. highest match counter . Optimization program may determine an optimal order in which to execute method handles and thus the optimal way to re order the method chain. The optimal order may be determined based on the statistics gathered in step S placing the highest match percentage method handle first 2highest match percentage handle second etc. Following re ordering of the method handles optimization program may return to step S to record additional statistics on the usage of the method handles. As described above this may lead to situations where optimization program periodically re orders the method handles of an optimized program code based on additional data in instances where S calls for a re optimization of the method handles step. This may be done in order to maintain an optimized routine during changing operating dynamics.

With regards to step S optimization program replaces the method handle with optimized code. In an example embodiment the replacement may be made in instances where the test is based on an attribute of an object e.g. exact value and there are multiple method handles in order that are each checking that attribute. In such an embodiment optimization program may change the dispatch implementation by converting the chain of method handles into a look up function where the expected value of the attribute would be the key and the element is the handle for which the test was checking against that attribute.

With regards to step S optimization program removes counters from method handles that are not possible to optimize. In some embodiments such method handles may have been replaced with different code and thus are no longer method handles. In other embodiments the method handles were determined to be in method handle chains that could not be optimized. Step S may return back to S to continue to optimize remaining method handles based on usage.

Computing device include communications fabric which provides communications between computer processor s memory persistent storage communications unit and input output I O interface s . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are computer readable storage media. In this embodiment memory includes random access memory RAM and cache memory . In general memory can include any suitable volatile or non volatile computer readable storage media.

The programs optimization program program code and optimized program code in computing device are stored in persistent storage for execution by one or more of the respective computer processors via one or more memories of memory . In this embodiment persistent storage includes a magnetic hard disk drive. Alternatively or in addition to a magnetic hard disk drive persistent storage can include a solid state hard drive a semiconductor storage device read only memory ROM erasable programmable read only memory EPROM flash memory or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit includes one or more network interface cards. Communications unit may provide communications through the use of either or both physical and wireless communications links. The programs optimization program Program code and optimized program code in computing device may be downloaded to persistent storage through communications unit .

I O interface s allows for input and output of data with other devices that may be connected to computing device . For example I O interface may provide a connection to external devices such as a keyboard keypad a touch screen and or some other suitable input device. External devices can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data used to practice embodiments of the present invention e.g. optimization program program code and optimized program code in computing device can be stored on such portable computer readable storage media and can be loaded onto persistent storage via I O interface s . I O interface s can also connect to a display .

The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

While steps of the disclosed method and components of the disclosed systems and environments have been sequentially or serially identified using numbers and letters such numbering or lettering is not an indication that such steps must be performed in the order recited and is merely provided to facilitate clear referencing of the method s steps. Furthermore steps of the method may be performed in parallel to perform their described functionality.

