---

title: Graphical representation of roads and routes using hardware tessellation
abstract: A technical solution is provided for graphical representation of road segments by employing hardware tessellation, wherein cartographic data that describe at least one two-dimensional or three-dimensional road contour of the road segment are assigned to each road segment. One method aspect comprises the steps of piecewise partitioning the parametrization of the road segment into mutually independent curve segments, of providing at least one tessellation factor for each curve segment, the at least one tessellation factor specifying into how many subsegments each curve segment is to be subdivided in the direction of the road contour, of generating a tessellation pattern for each curve segment based on the at least one tessellation factor, and of generating primitives, capable of being represented on a screen, on the basis of the generated tessellation pattern and on the basis of the parametrized road contour.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09483872&OS=09483872&RS=09483872
owner: ELEKTROBIT AUTOMOTIVE GmbH
number: 09483872
owner_city: Erlangen
owner_country: DE
publication_date: 20150526
---
The present disclosure relates generally to the representation of cartographic data using hardware tessellation. In concrete terms a solution is specified for graphical representation of road segments on the basis of cartographic data that describe at least one two dimensional or three dimensional road contour of the road segments.

Digital map data include as a rule road edge data and road node data in order to reproduce a road network. A road edge represents within the road network a road segment between two successive intersections or junctions. A road node represents an intersection or a junction in the road network.

The graphical representation of a road network consists substantially in the concrete visual reproduction of the road contour of individual roads of the road network. A similar statement applies to the representation of a calculated route in the course of a route calculation function in which the road contour of the calculated route is represented wholly or piecewise . The road contour describes the curve contour of roads road segments or routes within a cartographic coordinate system.

For the purpose of describing the road contour so called shape points have been saved in the digital map data. Each road segment or each road edge has in this case been associated with a succession of shape points that describe the curve contour of the road segment. Each shape point represents a position with respect to a cartographic coordinate system e.g. geographical longitude and geographical latitude .

In current representation methods use is made of the shape points assigned to the road segments or routes for the purpose of graphical representation of road segments or routes. The road contour is represented in accordance with the positions of the shape points the road contour being linearly interpolated between respectively adjacent shape points.

An example of such a graphical representation of road segments by means of linear interpolation between adjacent shape points are shown in and . shows a detail of a road network consisting of the road segments which each terminate at the node . Since the road segments exhibit a strong curvature the curve contours linearly interpolated between the shape points and the nodal point result in transitions that are angular and not smooth. As is immediately evident from the right hand representation shown in striking transitions arise at points which reproduce the real curve contour in greatly distorted manner.

One possible way to make the curve contour appear smoother consists in providing further shape points in order to reduce further the spacings of adjacent shape points as has been represented schematically in the left hand drawing shown in . In this connection additional shape points represented by the small circles were inserted between the existing shape points . The curve contour can in fact be represented more smoothly and consequently more realistically as is immediately evident from the right hand representation in .

The disadvantage of a solution of such a type however is that the information to be provided in the map data increases further as a result of which still more memory space is needed. Furthermore with increasing number of shape points the processing time per frame to be represented increases since in the course of the graphical representation each shape point has to be processed separately. This happens at the expense of the speed of graphical representation. However a slow graphical representation is not desirable since for a liquid representation map data have to be graphically updated as a rule several times per second. For performance reasons therefore a smaller number of shape points is chosen and consequently an inferior quality of the graphical representation of map data is accepted.

The object underlying the present disclosure is therefore to provide an improved graphical representation method that in particular further improves the representation of roads and routes.

According to a first aspect of the present disclosure a computer implemented method is provided for graphical representation of road segments by employing hardware tessellation wherein cartographic data that describe at least one two dimensional or three dimensional road contour of the road segment are assigned to each road segment. The method comprises in this connection the steps of providing a parametrisation that describes the road contour of a road segment piecewise partitioning the parametrisation of the road segment into mutually independent curve segments providing at least one tessellation factor for each curve segment the at least one tessellation factor specifying into how many subsegments each curve segment is to be subdivided in the direction of the road contour generating a tessellation pattern for each curve segment based on the at least one tessellation factor and generating primitives capable of being represented on a screen on the basis of the generated tessellation pattern and on the basis of the parametrised road contour.

A road segment may describe a road section or a route section between two successive intersections or junctions of a road network. A road network or a route can consequently be represented graphically by graphical representation of the road segments pertaining to the road network or to the route.

The road contour may describe the curve contour e.g. the geometrical shape of a road segment or of a road with respect to a predetermined cartographic coordinate system. In other words the road contour may reproduce a curviness of a road segment. The curviness of a road segment describes in a variant the ratio formed from the angular changes of a road segment in relation to the length of the road segment. When the terrain is taken into account in the map data the road contour may also be three dimensional. A curve contour of each road segment can be described by shape points stored in the cartographic data. In concrete terms each road segment can be described as consisting of a series of shape points. Each shape point is described by its geographical position longitude latitude and where appropriate altitude within the cartographic coordinate system.

The graphical representation of road segments or roads may be effected on the basis of vector graphics. Each road segment can in this connection be represented graphically with the aid of primitives. In other words each road segment can be composed or constructed from primitives. By primitives one understands elementary graphical elements comprising points lines triangles rectangles and or polygons. For the purpose of graphical representation in particular triangles can be employed as primitives since any area surface to be represented is capable of being represented as consisting of triangles. Furthermore graphics processors graphical processing units or GPUs are frequently optimised for the representation of triangular primitives. It will be understood that instead of triangles other primitives such as rectangles for example may also be used for the graphical representation of road segments.

Each road segment can be composed and represented graphically from the primitives generated for the curve segments. The generation of primitives for the purpose of graphical representation of a road segment depends in this connection on the generated tessellation pattern. The tessellation pattern may specify into how many primitives a parametrised road segment curve segment is to be partitioned. Said pattern may also specify which primitives e.g. triangles are to be used for the partitioning. The tessellation pattern can consequently establish the degree of partitioning fine meshed partitioning with many primitives or coarse meshed partitioning with few primitives and the type of the partitioning rectangles triangles etc. .

The curve contour of each curve segment can consequently be linearly interpolated by the generated primitives. The quality of the interpolation may in this connection depend on the number of primitives generated in the direction of the curve contour. The number of primitives in the direction of the curve contour of the curve segment can be established in this case by the tessellation factor assigned to the road contour.

A tessellation factor assigned to the road contour can be calculated dynamically for each curve segment. In this connection said tessellation factor can be calculated individually at least based on the curve contour of each curve segment. Said tessellation factor can be calculated in such a manner that a larger tessellation factor is provided for curve segments with high curviness than for curve segments with low curviness. As a result it can be ensured that curve segments with high curviness are represented by many primitives in the direction of the road contour whereas curve segments with low curviness are represented graphically with the aid of few primitives. Through the use of a large tessellation factor and hence the use of a fine meshed tessellation for curve segments with high curviness it can be ensured that the graphical representation by means of primitives interpolates the real curve contour of the curve segment best possible and a smooth graphical representation of the curve is guaranteed. On the other hand curve segments with low curviness or almost linear contour need only few primitives in order to obtain a smooth graphical representation of the curve. Consequently by virtue of the curve segment dependent generation of the tessellation factor assigned to the curve contour it can be established with what accuracy of detail each curve segment can be represented graphically.

For the purpose of calculating the tessellation factor assigned to the road contour the curve contour of the curve segment projected onto a screen or onto some other optical output medium may be drawn upon. The projected curve contour may differ depending on the angle of view from a real curve contour of a road segment. For example a curve segment with high real curviness in a lateral viewing mode can be represented approximately linearly on the screen. For a segment of such a type a high accuracy of detail in the graphical representation is not needed and so a small tessellation factor along the road contour can be provided.

According to one implementation the tessellation factor assigned to the road contour can be calculated for a curve segment right arrow over F parametrised in a parameter interval t t in accordance with the equation u 2 log log where udenotes the tessellation factor specifies a preset accuracy value and where is calculated from a start point right arrow over S right arrow over F t an end point right arrow over S right arrow over F t and a point right arrow over S right arrow over F t t of the parametrisation right arrow over F by calculating a spacing of a straight line connecting the start point right arrow over S and end point right arrow over S from point right arrow over S . right arrow over S right arrow over S and right arrow over S may in this connection be values of the parameter curve projected onto screen coordinates. Furthermore the preset accuracy value may be specified in pixels. Said value may be set to a fraction of a pixel e.g. half a pixel . It will be understood that the preset accuracy value may also take another value for example one pixel .

Alternatively or in addition to the curve contour dependent calculation the tessellation factor assigned to the road contour may also be calculated based on a field of view for the curve segments to be represented. For example curve segments that are located further away seen from a viewer can be tessellated more coarsely and hence can be represented graphically with lower accuracy of detail than curve segments in an immediate vicinity of the viewer.

Since roads and routes are represented on the screen not merely as one dimensional lines but rather as two dimensional graphical objects with a certain variable road width a further tessellation factor for a direction perpendicular to the road contour that is to say along the road width can be provided. The tessellation factor assigned to the road width may in this connection assume a constant value. The tessellation factor may for example take the value 1. In this case no tessellation that is to say no further partitioning into primitives is effected in the direction of the road width. Of course according to an alternative variant the tessellation factor may also take another value in the direction of the road width. In both cases the tessellation factor in the direction of the road width does not depend on the curve contour of the curve segments.

The step of generating a tessellation pattern may include the following substep generation of scan points based on the at least one tessellation factor provided the generated scan points specifying the degree of subdivision of a curve segment along the road contour. The generating step may furthermore include generating scan points based on the tessellation factor assigned to the road width which specifies the degree of subdivision of the width of the curve segment. The generating step may furthermore include generating a two dimensional pattern on the basis of the scan points. The tessellation pattern may consist of triangles with the scan points forming the vertices of the triangular pattern.

The step of generating primitives that are capable of being represented may include the following substeps implementing a coordinate transformation that maps the parametrisation of the road contour onto coordinates of the screen space calculating vertices by the transformed parametrisation being evaluated at the scan points along the road contour and generating primitives capable of being represented graphically on the basis of the generated vertices.

The step of calculating vertices may furthermore include calculating vertices by evaluating the transformed parametrisation at the scan points along the road contour and by evaluating the vertices provided for the road width along a normal vector that lies in the screen plane and is perpendicular to the road contour.

The step of providing a parametrisation of a road contour for a road segment may include the step of calculating a parametrisation for the road segment on the basis of previously stored shape points marking the road contour. The parametrisation may in this case be calculated in such a manner that the parametrised curve interpolates the shape points. The parametrisation may be calculated on the fly that is to say during the graphical representation . But it is also conceivable that the parametrisation is generated in the course of the compilation of the map data and has been saved in the map data.

Alternatively to this a parametrisation of the road segments may also be provided by a supplier of maps. In this case providing the parametrisation includes reading out and uploading of the parametrisations into a working memory or into a graphics memory for further processing.

According to a variant the parametrisation can be effected with the aid of quadratic B splines that are described via non uniformly distributed nodal points and check points the so called de Boor points called quadratic NUBS in the following . The parametrisation of the road contour of a road segment by means of NUBS can be effected on the basis of the shape points provided for the road segment as already described above. Alternatively to this the curve parametrisation can also be carried out by means of B zier curves or cubic NUBS or otherwise.

The step of piecewise partitioning of the parametrisation of the road segment into mutually independent road segments may include partitioning the NUBS describing the road contour of the road segment into mutually independent quadratic polynomials. Each polynomial may in this connection form a smallest unit from which the NUBS describing the road segment is composed. Each polynomial is defined for example over a node interval I t t of successive adjacent nodes. Said polynomial may represent the local curve contour between two successive nodes. Each polynomial in the interval Imay in this connection be described completely and uniquely with the aid of a nodal vector right arrow over s t t t t which comprises merely four nodes and three de Boor points right arrow over d right arrow over d right arrow over d . The advantage of partitioning the NUBS into piecewise quadratic polynomials is that for each node interval Ia local representation of the B spline is possible and each partition can be tessellated independently of adjacent partition. The tessellation and in particular the degree of tessellation may in this connection be different for each segment in accordance with its curviness. In this connection an adaptation to the curviness of the polynomial may take place as already discussed above. In particular the piecewise partitioning of a B spline prevents the tessellation of long road segments or route segments from becoming insufficiently fine by reason of hardware conditioned upper limits for the tessellation.

On the other hand each road segment can be composed successively by means of the quadratic polynomials provided for the tessellation. The de Boor points right arrow over d right arrow over d right arrow over d and nodal vector right arrow over s t t t t capable of being assigned to each quadratic polynomial of a road segment may for this purpose be stored temporarily for further graphical processing i.e. tessellation and generation of primitives that are capable of being represented graphically in a working memory graphics memory or otherwise. The storage can be effected by means of a vertex attribute array and an index array. The vertex attribute array may comprise the nodal vectors and the de Boor points for all the quadratic polynomials of the road segment to be represented. The vertex attribute array may in this connection store the nodal vectors and the de Boor points in accordance with the arrangement V right arrow over d right arrow over d right arrow over d right arrow over s right arrow over d right arrow over s right arrow over d right arrow over s right arrow over d right arrow over s . . . right arrow over d right arrow over s where n is the number of nodes. Furthermore the index attribute array may comprise indices referencing the vertex attribute array entries according to the arrangement I 0 1 2 3 1 2 4 5 2 4 6 7 4 6 8 9 . . . 2n 6 2n 4 2n 2 2n 1 where n is the number of nodes. The present storage is advantageous since nodal vectors and de Boor points which for the purpose of describing adjacent polynomials partly repeat only have to be stored once as a result of which memory space is conserved.

According to a second aspect a computer program product is provided comprising program code for implementing the method when the computer program product is executed on a computer device. The computer program product may in this connection be stored on a computer readable recording medium.

According to a third aspect a graphics module is provided for graphical representation of road segments by employing hardware tessellation wherein cartographic data that describe at least one two dimensional or three dimensional road contour of each road segment are assigned to each road segment the graphics module comprising a unit that is configured to provide a parametrisation that describes the road contour of a road segment a unit that is configured to partition the parametrisation of the road segment into mutually independent curve segments a unit that is configured to provide at least one tessellation factor for each curve segment the at least one tessellation factor specifying into how many subsegments each curve segment is to be subdivided in the direction of the road contour a tessellation unit that is configured to generate a tessellation pattern for each curve segment based on the at least one tessellation factor and a unit that is configured to generate primitives capable of being represented on a screen on the basis of the generated tessellation pattern and on the basis of the parametrised road contour.

The graphics module may furthermore comprise a memory unit that is configured to store at least one index array and one vertex attribute array the vertex attribute array including vertex attributes for the parametrisation of a road segment.

According to a fourth aspect a navigation system is provided that comprises the aforementioned graphics module and also a screen that is configured to display the generated primitives.

The present disclosure will be elucidated with the assistance of schematic block diagrams and flow diagrams. The technical teaching underlying these diagrams may be implemented both in hardware and in software or in a combination of hardware and software. Such implementations also include digital signal processors DSPs application specific integrated circuits ASICs and other switching or computing components.

The present disclosure relating to the graphical representation of map data in particular of road segments will be described in greater detail in exemplary manner within the scope of the OpenGL standard created by the Khronos Group. OpenGL Open Graphics Library is a platform independent and programming language independent graphics programming interface application programming interface or API for short which has been provided for graphical representation of complex two dimensional and three dimensional objects with the aid of a graphics module for example a graphics card or graphics chip . It is consequently a question of a software graphics interface which lies as an abstraction layer between an application program and the graphics module and supports the linking of application programs to the graphics module.

For the purpose of elucidating the present disclosure therefore recourse will partly be had in the following to the terminology of OpenGL. It will be understood that the present invention does not depend on the particulars of the graphics interface being used. For example it is also conceivable that DirectX more precisely DirectDraw or Direct3D or Quartz come into operation by way of software graphics interface.

The apparatus includes a core functionality in the form of a central data processing unit central processing unit CPU and or in the form of a software module SW module a unit for generating a parametrisation a unit for partitioning the generated parametrisation a graphics processor unit hereinafter called GPU a graphics memory a screen a working memory and a data memory . Optionally in addition the apparatus may also include a sensor unit an input unit and a communications interface . The optional components of the apparatus have been indicated in by dashed lines.

The units and the GPU the graphics memory the working memory the data memory the sensor unit the input unit the communications interface and the core functionality are in communicating connection with one another in order to exchange data to be processed and processed data with one another.

The communications interface is configured to set up a hard wired and or a wireless e.g. via LTE or GPRS connection to external devices of a communications network. The apparatus may exchange data in both directions with an arbitrary external device via the communications interface . For example map data updated via the communications interface can be retrieved from a map data server for the purpose of updating map data material stored in the apparatus . But it is also conceivable that the map data received via the communications interface are processed further at once for the purpose of graphical representation.

The input device is configured to accept user inputs in the course of an interaction between a user and the apparatus . User inputs may be data inputs such as for example an input of a start point of a destination point or of an intermediate stop. But user inputs may also be selection operations e.g. selection of displayed icons menus or submenus and control commands which for example specify how cartographic data are to be represented on the screen e.g. zoom commands or commands with which the perspective for graphical representations is changed . The input may be effected in this connection by actuating input keys by touching the screen and or in speech based manner. Correspondingly the input unit may include a touch sensitive screen a keyboard a mouse a joystick and or a speech recognition unit which is able to understand speech inputs and convert them into corresponding control commands.

The sensor device may include a satellite based position sensor e.g. a sensor for receiving GPS signals Galileo signals and or Glonass signals in order to determine the respectively current geographical position of the apparatus . In addition or alternatively to this the sensor device may also include relative position sensors such as for example an odometer and a gyroscope in order to determine the position of the apparatus . In the case where use is made of relative position sensors the absolute position of the apparatus is determined by dead reckoning principles. The current position is needed for example in the course of a navigation.

The data memory is configured to store cartographic data in digitised form. The cartographic data provided digitally is in this connection organised and structured in a database in accordance with a predetermined format. For example the Navigation Data Standard map data format NDS map data format for short may be used by way of map data format. Alternatively to this use may also be made of another map data format. The present solution does not depend on the details of the map data format.

The stored cartographic data comprise at least road edge data and road node data. Road edge data represent real road segments of a road network between adjacent intersections or junctions. Road node data represent intersections or junctions as already mentioned in the introduction. Road edge data and road node data may be provided with a series of attributes which for example reproduce the number of lanes the width of the roads the topology of the intersection e.g. roundabout T junction underpass overpass etc. and the number of roads meeting at the intersection. Attribute information of such a type may be drawn upon in the course of the graphical representation of a road network or of individual roads or intersections in order to generate a realistic graphical representation.

Furthermore the cartographic data include shape points that have been assigned to the road edges. As already mentioned in the introduction the shape points have been provided for establishing the road contour e.g. the curve contour of road segments. For this purpose to each road edge representing a road segment a series of shape points has been assigned which specifies the curve contour that is to say the geometrical shape of the road segment with respect to a geographical coordinate system. In other words the road contour of each road segment is parametrised by the series of shape points that has been assigned to the road segment. Alternatively or in addition to the shape points the cartographic data may include concrete curve parametrisations that describe the curve contour of each road segment. In such a case instead of the shape points the parameter curves may be read out of the data memory processed and passed to the GPU for graphical representation on the screen .

The screen is configured to make cartographic data available to a user visually. In concrete terms the screen displays the cartographic data processed by the GPU . The screen may take the form of a touch sensitive screen. In addition to the screen or alternatively thereto a projector for outputting the image data made available by the GPU may be provided.

Unit is configured to generate a curve parametrisation for road segments or calculated routes on the basis of the stored road edge data and road node data . Unit can in this connection generate a two dimensional or three dimensional parameter curve. According to a variant unit is configured to generate a curve parametrisation for road segments on the basis of stored shape points capable of being assigned to the road segments. Each curve parametrisation in this connection reproduces the curve contour or the curviness of a road segment. The parametrisation method carried out in unit on the basis of shape points will be described in greater detail further below with the aid of .

According to one implementation the parametrisation of the road segments may also be dispensed with provided that the cartographic data already include suitable parametrisations for graphical representation of road segments. In this case the parametrisation of each road segment can be read out directly from the data memory and passed to the partitioning unit for further processing.

Unit is configured to partition the parametrisation generated by unit or the curve parametrisations saved in the cartographic data and read out into a plurality of mutually independent curve segments. The partitioning of parametrisations will be discussed in more detail further below on the basis of and . The partitioned curves are then passed to the GPU for graphical representation.

The units and may take the form of stand alone units. But they may also be part of the core functionality as indicated by the dashed line in . Furthermore the core functionality may be provided for image calculation of further graphical objects such as for example POIs three dimensional urban models etc. provided that objects of such a type are to be represented on the screen together with the road segments or routes and provided that the cartographic data include information of such a type . The core functionality calculates the vertices of the objects to be represented and passes them to the GPU for graphical representation. In computer graphics a point of an object to be represented is designated as a vertex. This point may be associated with a set of attributes which comprise for example position information with respect to a predetermined global coordinate system normal vector information texturing information etc.

The graphics memory is configured as a stand alone memory independent of the working memory . Said memory has been provided for buffering graphics data graphics frames to be displayed and or for buffering vertex data provided by the core functionality and or by unit . In an alternative configuration the graphics memory may also be a part of the working memory .

The GPU is configured to control the graphical output of cartographic data on the screen . In concrete terms the GPU is configured to calculate a screen output on the basis of the image data vertex data provided by the core functionality and or unit . For this purpose the GPU implements a plurality of graphics functions which are drawn upon for graphical representation of objects and which will be described in still more detail in connection with . Furthermore the GPU includes a tessellation unit that is configured to implement tessellation functions as specified by standard OpenGL 4.0 or higher versions or similar graphics APIs such as for example Direct3D 11.

The mode of operation of the GPU will now be elucidated in greater detail on the basis of and the graphics pipeline represented therein. By graphics pipeline frequently also designated as rendering pipeline in the field of computer graphics one understands a succession of graphics processing steps by which graphics functions implemented in the graphics processor are executed or processed in order to represent a graphical object graphically on a screen or on another visual output medium.

As is evident from the simplified graphics pipeline representation in the GPU implements several shaders and also a tessellation unit. A shader is a programmable hardware module or software module which implements certain functions or effects of the graphical representation rendering effects within the graphics pipeline. For example shaders can be programmed to generate 3D effects. Conformity and drive of the individual shaders are effected in this connection by a graphics programming interface graphics API such as OpenGL for example which represents an abstraction layer between GPU and application program.

In concrete terms the graphics pipeline comprises a vertex shader a clipping and rasterization stage an optionally provided geometry shader and also a fragment shader . Furthermore the GPU includes a tessellation unit provided for implementing a tessellation function a tessellation control shader and a tessellation evaluation shader .

The functions of the vertex shader e.g. coordinate transformation of individual vertices of the clipping and rasterization stage of the geometry shader and of the fragment shader correspond respectively to the functions of the corresponding shader in graphics pipelines of earlier OpenGL versions and are sufficiently well known to a person skilled in the art. They will therefore not be elucidated any further. With OpenGL 4.0 and higher versions the tessellation control shader the tessellation unit and the tessellation evaluation shader are newly introduced into the OpenGL graphics pipeline. Their functions will be described in greater detail in the following.

The programmable tessellation control shader is arranged in the graphics pipeline between vertex shader and tessellation unit . The tessellation control shader has been designed to provide a tessellation factor for a patch. A patch in this connection designates a new type of primitive which was introduced into the graphics pipeline in connection with the implementation of the tessellation functionality. A patch designates a collection provided by the vertex shader of vertices that represent a graphical element. The tessellation factor provided by shader specifies into how many subunits subsegments a patch is to be partitioned by the following tessellation unit .

Besides the tessellation factor in the tessellation control shader further tessellation parameters are made available which for example establish the type of the tessellation e.g. partitioning of the patches into triangular primitives or rectangular primitives and a two dimensional domain for the tessellation whereby the domain may be rectangular or triangular barycentric . Through the choice of a particular domain a coordinate system for the tessellation is established an external tessellation factor being provided for each coordinate. Furthermore internal tessellation factors can be provided for the domain which specify how the domain is tessellated in the inner region.

For the tessellation of curve segments in accordance with the present disclosure a rectangular domain is chosen and the inner tessellation factor is equated with the external tessellation factor in the following called only tessellation factor . The provision of a curve segment dependent tessellation factor will be described in more detail further below in connection with .

The non programmable tessellation unit is configured to generate a tessellation pattern on the basis of the tessellation factors and tessellation parameters established in the tessellation control shader . In concrete terms the tessellation unit generates scan points and establishes how the scan points are connected to one another in order to generate a tessellation pattern.

The programmable tessellation evaluation shader is configured to calculate vertex positions for the scan points on the basis of the tessellation pattern that is to say scan points and type of the connection of the scan points provided by the tessellation unit and on the basis of the attributes of the patch location coordinates normal vector etc. . In particular the tessellation evaluation shader is also configured to provide interpolated attributes for the vertex positions.

With the aid of an embodiment of a method for graphical representation of road segments by employing the hardware tessellation described above will now be elucidated in greater detail.

According to a first step S by means of unit a parametrisation is provided that describes the road contour of a road segment to be represented on the screen . The parametrised curve reproduces the real road contour that is to say the curve contour of the road segment. The providing comprises generating a suitable parametrisation of the road segment to be represented graphically on the basis of the shape points assigned to the road segment and on the basis of the road node data capable of being assigned to the road segment . The calculation of the parametrisation can be calculated for each road segment immediately so to speak on the fly after loading of the shape points into the working memory . A suitable and resource sparing parametrisation that can be executed during the graphical representation method will be described in more detailed manner in connection with .

Alternatively to this the parametrisation of the road contour may be provided in advance by a supplier of map data. In this case the providing comprises merely a read out and loading of the parametrisation or of the parameters describing the parametrisation into the working memory . The data stored temporarily in the working memory can then be supplied to the partitioning unit for further processing.

In a further step S by means of unit the parametrised road contour of the road segment is partitioned into mutually independent curve segments. The partitioning can be effected in this connection as a function of the parametrised curve contour along the road segment. In concrete terms the partitioning of the parametrised road contour of a road segment can be effected in such a manner that a local curve contour of the road segment within a predetermined parameter interval corresponds to each curve segment. The predetermined parameter interval may have been established respectively via two successive parameter nodes.

In a following third step S at least one tessellation factor is provided for each curve segment by means of the tessellation control shader . The at least one tessellation factor specifies into how many subsegments each curve segment is to be subdivided tessellated in the direction of the road contour. The providing of the tessellation factor comprises the calculation of a tessellation factor in the tessellation control shader as a function of the curviness of each curve segment. The providing of the tessellation factor consequently depends on the degree of curvature of each partitioned curve segment and may vary between adjacent curve segments within the road segment. If for example a curve segment exhibits a high degree of curvature high curviness then the tessellation factor provided is larger this being associated with a finer subdivision of the curve segment in the road contour direction. In other words by virtue of a larger tessellation factor a finer tessellation of the curve segment is obtained by virtue of which the curve contour can be represented graphically on the screen more finely that is to say with higher accuracy of detail . The dynamic calculation of the tessellation factor as a function of the curviness of each curve segment will be described in detail in connection with .

In the next step S a tessellation pattern is generated by means of the tessellation unit on the basis of the provided tessellation factor and further tessellation parameters as described above . For the purpose of parametrising the tessellation a rectangular unit domain is chosen which is partitioned into a plurality of triangles as a function of the tessellation factor. A partitioning into triangles is undertaken since the GPU has been optimised for the representation of triangles and an arbitrary area to be represented of a graphical object is capable of being represented best by triangles. It will be understood that instead of triangles a rectangular or other partitioning could also be undertaken.

In a following step S primitives that are capable of being represented on the screen are then generated on the basis of the generated tessellation pattern and on the basis of the parametrised road contour. If the tessellation pattern consists of a network of triangles vertices for triangular primitives are calculated on the basis of the parametrisation and on the basis of the pattern with the aid of which the curve segment to be represented is represented graphically on the screen . Each curve segment represented on the screen is consequently composed from a plurality of triangular primitives the number of triangles used determining the fineness of the reproduction of the curve and being determined by the tessellation factor.

In the following a parametrisation method for providing a parametrisation of the road contours of road segments will now be described in greater detail. The parametrisation is effected on the basis of shape points that have been provided in the cartographic data for each road segment. The parametrisation method can be carried out in connection with the method represented in .

For the parametrisation generation of a parameter curve of the road contour on the basis of shape points made available use will be made in exemplary manner of quadratic B splines with non uniformly distributed nodes t in the following called quadratic non uniform B splines or quadratic NUBS . The curve contour of a quadratic NUBS can in this connection be described with the aid of n check points right arrow over d with i 0 . . . n 1 the so called de Boor points and n 3 nodes which satisfy the condition t t. . . t. A quadratic NUBS is then a parameter curve right arrow over F defined in the one dimensional parameter space t t which maps a parameter value u from the one dimensional parameter space t t predetermined by the nodes into a two dimensional or three dimensional space R k establishes the spatial dimension in accordance with the rule of assignment . 1 where N u represent basis functions of the parametrisation which have been defined over node intervals in accordance with the following equations

In the following the calculation of NUBS from a series of shape points will now be described. In connection with the calculation of the quadratic NUBS from shape points it will be assumed that the parametrised curve interpolates the series of the shape points. Interpolation in this connection means that the parameter curve passes exactly through the shape points and does not merely approximate them. But it would also be conceivable to calculate the parameter curve in such a manner that it merely approximates the shape points.

For the purpose of calculating the de Boor points right arrow over d and the nodes tfrom the shape points use is made of a B spline interpolation technique with chordal parametrisation and with an averaged nodal vector. On the assumption that a road segment consists of n 2 shape points where right arrow over p where 0

From the parameter values uthe nodes tof the parametrisation are then calculated in accordance with the following equations 

The node sequence t . . . t is also designated as the nodal vector. The nodal vector calculated in accordance with the above equation is known in the literature as the averaged nodal vector.

As is immediately evident the linear equation system has n 2 equations and n unknown de Boor points right arrow over d . This means that the linear equation system is underdetermined and consequently does not have a unique solution.

The equation system can be determined in more detail by establishing one or more boundary conditions. By way of boundary condition it is established that the first derivative of the parametrisation at the start point and end point satisfies the equations

Since the basis functions right arrow over N u have each been locally defined and take the value zero for many parameter values u see Equation 2 many extra diagonal entries of the matrix are zero. Consequently A represents sparsely filled matrix which can be solved efficiently by standard methods. By solving the above equation system the de Boor points right arrow over d can be ascertained.

Overall the parametrisation method described herein constitutes a very efficient and resource sparing method which can be carried out during the operation of a navigation device that is to say after uploading of the shape points from the map database . It will be understood that the parametrisation method that has been presented is also suitable with the aid of NUBS to run during a compilation of map data. The parametrisations de Boor points and nodal vector can then be stored directly in the map database and can be retrieved within the scope of a later graphical representation.

With the aid of the piecewise partitioning into curve segments of the parameter curve provided for a road segment will be elucidated further.

The advantage of the parametrisation used herein with the aid of quadratic NUBS is that each quadratic NUBS can be partitioned piecewise into quadratic polynomials. In concrete terms the NUBS parametrisation of each road segment with n 2 shape points can be split up into n 2 B spline segments that is to say curve segments the curve segment in the interval t t being capable of being interpreted as a quadratic polynomial according to the representation 9 

The graph below the curve represented in shows the basis functions Nneeded respectively for the curve segments as a function of the nodal values t. Segment describes the curve contour over parameter interval t t marked by bar and is described by a quadratic polynomial that is completely described with the aid of the de Boor points right arrow over d right arrow over d right arrow over d and the four nodal values t t t t marked by bar . Equally curve segments and defined on parameter intervals t t and t t see bars in graph are described by the three de Boor points right arrow over d right arrow over d right arrow over d and right arrow over d right arrow over d right arrow over d respectively and the nodal values t t t t and t t t t respectively bars . From this representation it follows more generally that a curve parametrised on the basis of n 2 shape points can be partitioned into n 2 mutually independent quadratic polynomials which for the i th node interval t t can be completely represented by merely three de Boor points right arrow over d right arrow over d right arrow over d and also by a nodal vector with four entries right arrow over s t t t t . Here the advantage becomes evident of the quadratic parametrisation being used in comparison with other curve parametrisations such as for example cubic B splines or B zier curves which for segment wise description need a substantially larger parameter set and hence in the course of processing take up substantially more processor resources and memory resources.

A further advantage of the partitioning described herein of the parametrisation consists in the fact that the tessellation in particular the degree of tessellation can be adapted individually to the curviness of the individual curve segments.

For the purpose of individual tessellation and graphical representation of each curve segment the three de Boor points right arrow over d right arrow over d right arrow over d describing each curve segment and the nodal vector right arrow over s t t t t are assigned as vertex attributes to a patch. In other words a patch represents in each instance a partitioned curve segment. The vertex attributes of each patch are loaded into the graphics memory for the tessellation. As evident from the partitioning in the vertex attributes of the patches representing successive curve segments partly repeat. For example for graphical processing of the segments the nodal vectors right arrow over s right arrow over s right arrow over s and the de Boor points right arrow over d right arrow over d right arrow over d right arrow over d right arrow over d right arrow over d and right arrow over d right arrow over d right arrow over d have to be loaded into the GPU . Formulated more generally for graphical representation of a road segment that was partitioned into n 2 curve segments patches a vertex attribute array V of the form . . . 11 is stored in the GPU memory . It is to be noted that vectors right arrow over d and right arrow over s differ in their dimension. Whereas right arrow over s represents a four dimensional vector the de Boor points right arrow over d form merely two dimensional or three dimensional vectors in the case of 3D parametrisation . Since all the vertex attributes of a patch must have the same dimension the dimension of the de Boor points right arrow over d is adapted to the dimension of the nodal vectors right arrow over s by the two dimensional or three dimensional de Boor points right arrow over d being copied into the vertex attribute array V and by the missing entries being filled by zeroes.

As can be deduced from Equation 11 the de Boor points right arrow over d and nodal values in the vertex attribute array are partly repeated three times. In order to avoid an unnecessary demand on and waste of the graphics memory each NUBS is represented with the aid of the following vertex attribute array V and index array I.

In the vertex attribute array V the de Boor points right arrow over d and the nodal vectors right arrow over s of the curve segments of a road segment are nested together in accordance with the representation 12 the assignment of the attributes within the vertex attribute array complying with the following recursive rule of assignment 0 1 2 3 221 where 21 13 

It is to be noted that in the vertex attribute array obtained in this way each attribute is stored once only as a result of which GPU memory resources can be significantly conserved.

In order on the other hand to obtain vertex attributes of an individual curve segment from the vertex attribute array V the correct entries in the vertex attribute array V have to be accessed. The access is established via the index array I. According to the above vertex attribute array representation V array entries V 0 V 1 V 2 and V 3 define the first curve segment of a NUBS entries V 1 V 2 V 4 and V 5 define the following second curve segment and entries V 2 i 1 V 2i V 2 i 1 and V 2 i 1 1 with 2 i

The series of indices that is acquired in this way is stored in the index array 0 1 2 3 1 2 4 5 2 4 6 7 4 6 8 9 . . . 26 24 22 21 14 wherein the brackets are used merely for the purpose of distinguishing the individual patches or curve segments . From this the indices for indexing the vertex attribute array V can be acquired whereby beginning with the first patch it holds that 0 0 1 1 2 2 3 3 for the first patch 14 4 1 5 2 6 4 7 5 for the second patch and 42 1 41 2 42 2 1 43 2 2 with 2

In connection with the graphical representation of NUBS with the aid of the tessellation function implemented in the GPU will now be described in greater detail.

The tessellation function is implemented on the basis of the programmable tessellation control shader represented in and briefly discussed above in connection with the tessellation unit and the tessellation evaluation shader .

The main task of the programmable tessellation control shader is the provision of at least one tessellation factor for the tessellation unit . Furthermore in shader the type of the tessellation and the domain for the tessellation are established. A rectangular unit domain is established which is described with the aid of u v coordinates and which has edges that extend along the u coordinate and along the v coordinate respectively from 0 to 1. The u coordinate in this connection points in the direction of a road contour of the parametrised curve segments whereas the v coordinate perpendicular to the u coordinate points in the direction of the road width in conformity with OpenGL the coordinates are denoted by u and v it will be understood that the coordinates could also be denoted otherwise . For the coordinates u v a tessellation factor is respectively provided.

In the following the provision of a tessellation factor for the coordinates u and v will now be described in greater detail. In this connection let it be mentioned once again that the graphical representation of a road or route as a two dimensional object with a road contour and with a road width is primarily determined by the road contour that is to say by the given curve contour . The width of the road can be assumed by approximation to be constant along the road contour. Correspondingly a constant value is assigned to the tessellation factor associated with the width the tessellation factor in the v direction . Preferentially the value 1 is fixed as tessellation factor in the v direction by virtue of which the tessellation unit generates merely two scan points in the v direction. Consequently a constant tessellation is undertaken in the v direction.

In the direction of the road contour that is to say in the u direction the provision of the tessellation factor is effected as a function of the curviness of each curve segment. In other words the provision includes an individual calculation of the tessellation factor for each patch. As represented in see arrow each patch which respectively represents a smallest possible independent extract of the NUBS parametrisation and is capable of being represented uniquely by the three de Boor points right arrow over d right arrow over d right arrow over d and also the nodal vector right arrow over s t t t t is passed to shader .

The calculation of the tessellation factor will be elucidated with the aid of the schematic drawing in . shows in exemplary manner the i th patch of a parametrisation of a road segment the i th patch representing the curve contour over parameter interval t t . Furthermore shows the points right arrow over S right arrow over S and right arrow over S drawn upon for the calculation of the tessellation factor which are obtained by evaluating the parametrisation Fat parameter values t t t and t.

It is to be noted that the points right arrow over S right arrow over S and right arrow over S represented in and used for the calculation of the tessellation factor are present in screen space coordinates. For the purpose of calculating the points right arrow over S right arrow over S and right arrow over S the parameter curve Fis firstly transformed into eye space coordinates and subsequently evaluated at the curve start t at half interval distance that is to say at t t and at the curve end tin accordance with the following equations 15 

The points right arrow over e right arrow over e and right arrow over e lying on the parameter curve are then projected onto two dimensional screen space coordinates right arrow over S right arrow over S and right arrow over S . If a three dimensional parametrisation obtains the projection is carried out in accordance with the equations

With the aid of the calculated points right arrow over S right arrow over S right arrow over S a perpendicular spacing of a straight line gconnecting the start point right arrow over S and the end point right arrow over S from a midpoint right arrow over S is calculated see . The ascertained spacing is measured in pixels. In this connection is a measure of an error if the curve segment parametrised by right arrow over F were to be approximated by the straight line g passing through the start point right arrow over S and end point right arrow over S .

It can be shown that by suitable further subdivisions of the curve segment Fwithin parameter interval t t applying known NUBS subdivision algorithms the error continuously decreases whereby after m subdivisions an error value for the deviation of the tessellated curve can be estimated in accordance with the equation 17 

The curve segment right arrow over F in this case is to be subdivided until such time as a predetermined error is fallen short of i.e. until the inequality 

After m subdivisions for a patch a total of 2 1 scan points in the direction of the road contour that is to say for the u coordinate are generated. Furthermore 2 19 subdivisions in the direction of the curve contour are generated. In this connection uis designated as tessellation factor and specifies the number of subdivisions for the curve segment right arrow over F under consideration in the direction of the curve contour.

By substituting m in Equation 18 with the aid of Equation 20 an estimation for the tessellation factor uin accordance with the equation

Overall by means of Equation 21 a tessellation factor for each curve segment can be estimated individually from the two parameters and where represents a permanently predetermined value and where is calculated from the three evaluated and transformed points right arrow over S right arrow over S and right arrow over S . With the estimation given in Equation 21 the tessellation factor for each curve segment can be determined dynamically without a resource consuming iterative calculation method for each patch having to be carried out individually for this purpose.

Back to Once the tessellation factors for both coordinates u v of the unit domain have been established by the tessellation control shader these factors are supplied to the tessellation unit . As represented in two scan points in the v direction corresponding to the tessellation factor v 1 are provided for the unit domain provided whereas in the u direction 2 1 scan points corresponding to the tessellation factor u 2are generated.

In the tessellation pattern shown in the scan points have been represented as nodes along the two coordinates u v . On the condition that the unit domain is tessellated into triangular areas this can be established by the tessellation parameters with the aid of the nodes a tessellation pattern can be generated that represents the unit domain as a network with 2 1 triangles. For the exemplary case shown in the tessellation factor is u 6 the rectangular unit domain having been subdivided into 6 subsegments in the u direction and being constructed from a total of 12 triangles.

Lastly the programmable tessellation evaluation shader is configured to generate for each patch on the basis of the provided tessellation pattern that is to say on the basis of the calculated scan points and on the basis of the type of the connection of the scan points and on the basis of the vertex attributes contained in the patch i.e. the de Boor points nodal vector primitives that are capable of being represented graphically with the aid of which the curve contour of each patch can be represented on the screen .

For the purpose of generating the primitives in the present case triangles that are capable of being represented graphically the vertex positions of the primitives have to be calculated. For the patch which defines the curve contour of a road segment with the aid of the transformed parameter function Fin the parameter domain t t for the purpose of generating the vertex positions of the triangular primitives along the direction of the curve contour the parametrisation F u with the parameter values 1 22 is evaluated wherein ucan assume the scan points in the interval 0 1 that have been provided in the tessellation pattern. Consequently in the interval t t the parametrisation right arrow over F u with the subdivision unit predetermined in the tessellation pattern is evaluated. This means that for a high tessellation factor with many scan points umany vertices right arrow over F u in the interval t t are calculated. Since the vertices right arrow over F u represent the vertices of the triangular primitives to be generated and since the edges of the triangles have been represented by straight lines connecting linear adjacent vertices linear interpolation between adjacent vertices it becomes clear that a curve segment with great curviness can be represented sufficiently well with the aid of triangular primitives only when the vertices provided along the direction of the curve contour in the interval t t follow one another as closely as possible. This is obtained by a high tessellation factor.

Since furthermore roads are represented on the screen as two dimensional graphical objects and not only as one dimensional curves for each parameter value u a vertex is also generated that has been displaced with respect to the vertex right arrow over F u along the normal unit vector right arrow over b b which is perpendicular to right arrow over F u in accordance with the representation

In this connection vtakes the values 0 or 1. is a dynamically adaptable parameter with the aid of which the thickness to be represented of the road or route can be scaled. The normal vector b is calculated in known manner in accordance with the gradient

The vertices to be output by the tessellation evaluation shader in the direction of the road contour and perpendicular to the road contour consequently result in accordance with Equation 23. From the vertices the triangular primitives that are capable of being represented graphically can then be constructed for the patch as represented in .

Consequently each curve segment can be represented graphically on the screen by a set of triangles. Or in other words each curve segment can be partitioned into a set of triangular primitives that are capable of being represented. In particular the partitioning of each curve segment can be set individually and can be adapted for each curve segment in accordance with the curviness and or of the viewing angle . Curve segments that are to be represented on the screen with strong curvatures are tessellated more intensely and are consequently partitioned into a finer network of triangular primitives whereas for curve segments with low curvature a coarser tessellation can be provided. In this way it is ensured that each curve segment appears on the screen as a curve that is as smooth as possible irrespective of its curviness as a result of which the representation of road segments road networks and routes on the screen is substantially improved. In particular through the dynamic adaptation of the tessellation it is ensured that a graphical representation is obtained that is as optimal and efficient as possible. In particular a realistic representation of road segments can be obtained without having to evaluate a large number of shape points for this purpose.

Furthermore by virtue of the parametrisation partitioning of the road contours and the organisation of the data in the graphics memory all described herein it is ensured that computing resources and memory resources are taken up as efficiently and sparingly as possible. In particular with the parametrisation described herein a parametrisation of road segments on the basis of shape points is possible at the time of the graphical representation on the fly .

