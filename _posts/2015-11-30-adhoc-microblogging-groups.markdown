---

title: Ad-hoc micro-blogging groups
abstract: Systems and methods are disclosed for distributing micro-blog posts to ad-hoc micro-blogging groups. In one embodiment, a micro-blog post of a user is obtained. A crowd in which the user is located is determined, where the crowd is a group of spatially proximate users. The micro-blog post of the user is tagged with a crowd identifier of the crowd in which the user is located such that the micro-blog post includes a crowd identifier tag. Publication of the micro-blog post including the crowd identifier tag is then effected.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09407598&OS=09407598&RS=09407598
owner: Waldeck Technology, LLC
number: 09407598
owner_city: Wilmington
owner_country: US
publication_date: 20151130
---
This application is a continuation of U.S. patent application Ser. No. 13 037 546 which was filed Mar. 1 2011 which claims the benefit of provisional patent application Ser. No. 61 309 903 filed Mar. 3 2010 the disclosures of which are hereby incorporated herein by reference in their entirety.

The present disclosure relates to micro blog posts and more specifically relates to tagging micro blog posts with crowd identifiers of crowds of users in which originators of the micro blog posts are located.

Publish subscribe micro blogging services such as the Twitter micro blogging and social networking service have become extremely popular. However current publish subscribe micro blogging services do not support many to many ad hoc micro blogging groups. As such there is a need for a system and method of providing many to many ad hoc micro blogging groups.

Systems and methods are disclosed for distributing micro blog posts to ad hoc micro blogging groups. In one embodiment a micro blog post of a user is obtained. A crowd in which the user is located is determined where the crowd is a group of spatially proximate users. The micro blog post of the user is tagged with a crowd identifier of the crowd in which the user is located such that the micro blog post includes a crowd identifier tag. Publication of the micro blog post including the crowd identifier tag is then effected.

Those skilled in the art will appreciate the scope of the present disclosure and realize additional aspects thereof after reading the following detailed description of the preferred embodiments in association with the accompanying drawing figures.

The embodiments set forth below represent the necessary information to enable those skilled in the art to practice the embodiments and illustrate the best mode of practicing the embodiments. Upon reading the following description in light of the accompanying drawing figures those skilled in the art will understand the concepts of the disclosure and will recognize applications of these concepts not particularly addressed herein. It should be understood that these concepts and applications fall within the scope of the disclosure and the accompanying claims.

As discussed below in detail the MAP server operates to obtain current locations including location updates and user profiles of the users of the mobile devices . The current locations of the users can be expressed as positional geographic coordinates such as latitude longitude pairs and a height vector if applicable or any other similar information capable of identifying a given physical point in space in a two dimensional or three dimensional coordinate system. Using the current locations and user profiles of the users the MAP server is enabled to provide a number of features such as but not limited to forming crowds of users using current locations and or user profiles of the users generating aggregate profiles for crowds of users and tracking crowds. Note that while the MAP server is illustrated as a single server for simplicity and ease of discussion it should be appreciated that the MAP server may be implemented as a single physical server or multiple physical servers operating in a collaborative manner for purposes of redundancy and or load sharing.

In general the one or more profile servers operate to store user profiles for a number of persons including the users of the mobile devices . For example the one or more profile servers may be servers providing social network services such as the Facebook social networking service the MySpace social networking service the LinkedIN social networking service or the like. As discussed below using the one or more profile servers the MAP server is enabled to directly or indirectly obtain the user profiles of the users of the mobile devices . The location server generally operates to receive location updates from the mobile devices and make the location updates available to entities such as for instance the MAP server . In one exemplary embodiment the location server is a server operating to provide Yahoo s Fire Eagle service.

The mobile devices may be mobile smart phones portable media player devices mobile gaming devices or the like. Some exemplary mobile devices that may be programmed or otherwise configured to operate as the mobile devices are the Apple iPhone the Palm Pre the Samsung Rogue the Blackberry Storm the Motorola Droid or similar phone running Google s Android Operating System an Apple iPad and the Apple iPod Touch device. However this list of exemplary mobile devices is not exhaustive and is not intended to limit the scope of the present disclosure.

The mobile devices through N include MAP clients through N generally referred to herein collectively as MAP clients or individually as MAP client MAP applications through N generally referred to herein collectively as MAP applications or individually as MAP application third party applications through N generally referred to herein collectively as third party applications or individually as third party application and location functions through N generally referred to herein collectively as location functions or individually as location function respectively. The MAP client is preferably implemented in software. In general in the preferred embodiment the MAP client is a middleware layer operating to interface an application layer i.e. the MAP application and the third party applications to the MAP server . More specifically the MAP client enables the MAP application and the third party applications to request and receive data from the MAP server . In addition the MAP client enables applications such as the MAP application and the third party applications to access data from the MAP server .

The MAP application is also preferably implemented in software. The MAP application generally provides a user interface component between the user and the MAP server . More specifically among other things the MAP application enables the user to initiate requests for crowd data from the MAP server and present corresponding crowd data returned by the MAP server to the user as well as enable the user to follow micro blog posts sent by users in desired crowds. The MAP application also enables the user to configure various settings. For example the MAP application may enable the user to select a desired social networking service e.g. Facebook MySpace LinkedIN etc. from which to obtain the user profile of the user and provide any necessary credentials e.g. username and password needed to access the user profile from the social networking service.

The third party applications are preferably implemented in software. The third party applications operate to access the MAP server via the MAP client . The third party applications may utilize data obtained from the MAP server in any desired manner. As an example one of the third party applications may be a gaming application that utilizes crowd data to notify the user of Points of Interest POIs or Areas of Interest AOIs where crowds of interest are currently located. It should be noted that while the MAP client is illustrated as being separate from the MAP application and the third party applications the present disclosure is not limited thereto. The functionality of the MAP client may alternatively be incorporated into the MAP application and the third party applications .

The location function may be implemented in hardware software or a combination thereof. In general the location function operates to determine or otherwise obtain the location of the mobile device . For example the location function may be or include a Global Positioning System GPS receiver. In addition or alternatively the location function may include hardware and or software that enables improved location tracking in indoor environments such as for example shopping malls. For example the location function may be part of or compatible with the InvisiTrack Location System provided by InvisiTrack and described in U.S. Pat. No. 7 423 580 entitled Method and System of Three Dimensional Positional Finding which issued on Sep. 9 2008 U.S. Pat. No. 7 787 886 entitled System and Method for Locating a Target using RFID which issued on Aug. 31 2010 and U.S. Patent Application Publication No. 2007 0075898 entitled Method and System for Positional Finding Using RF Continuous and or Combined Movement which published on Apr. 5 2007 all of which are hereby incorporated herein by reference for their teachings regarding location tracking.

The subscriber device is a physical device such as a personal computer a mobile computer e.g. a notebook computer a netbook computer a tablet computer etc. a mobile smart phone or the like. The subscriber associated with the subscriber device is a person or entity. In general the subscriber device enables the subscriber to access the MAP server via a web browser to obtain various types of data preferably for a fee. For example the subscriber may pay a fee to have access to crowd data such as aggregate profiles for crowds located at one or more POIs and or located in one or more AOIs pay a fee to track crowds or the like. Note that the web browser is exemplary. In another embodiment the subscriber device is enabled to access the MAP server via a custom application.

Lastly the micro blogging service is a service that enables the users to send and receive micro blog posts. As used herein a micro blog post is a message posted by a user for publication via a micro blogging service. A micro blog post may include text audio video an image or any combination thereof. As an example a micro blog post may be a tweet posted by a user of the Twitter micro blogging and social networking service or a post made by a user of the Facebook social networking service. As discussed below in detail requestors e.g. the users or the subscriber are enabled to obtain micro blog posts from the users in desired crowds of users.

Before proceeding it should be noted that while the system of illustrates an embodiment where the one or more profile servers the location server and the micro blogging service are separate from the MAP server the present disclosure is not limited thereto. In an alternative embodiment the functionality of the one or more profile servers the location server and or the micro blogging service may be implemented within the MAP server . Further while the profile servers the location server and the micro blogging service are separate in the embodiment of in another embodiment the functionality of the profile servers the location server and or the micro blogging service may be implemented in a single service.

The business logic layer includes a profile manager a location manager a crowd analyzer an aggregation engine and a micro blog function each of which is preferably implemented in software. The profile manager generally operates to obtain the user profiles of the users directly or indirectly from the one or more profile servers and store the user profiles in the persistence layer . The location manager operates to obtain the current locations of the users including location updates. As discussed below the current locations of the users may be obtained directly from the mobile devices and or obtained from the location server .

The crowd analyzer operates to form crowds of users. In one embodiment the crowd analyzer utilizes a spatial crowd formation algorithm. However the present disclosure is not limited thereto. In addition the crowd analyzer may further characterize crowds to reflect degree of fragmentation best case and worst case degree of separation DOS and or degree of bi directionality. Still further the crowd analyzer may also operate to track crowds. The aggregation engine generally operates to provide aggregate profile data. The aggregate profile data may be aggregate profile data for crowd s of users. As discussed below in detail the micro blog function enables requestors such as but not limited to the users and the subscriber to obtain micro blog posts from users in desired crowds of users by tagging micro blog posts made by the users with crowd identifiers IDs of the crowds in which the corresponding users are located. For additional information regarding the operation of the profile manager the location manager the crowd analyzer and the aggregation engine the interested reader is directed to U.S. Patent Application Publication No. 2010 0198828 entitled FORMING CROWDS AND PROVIDING ACCESS TO CROWD DATA IN A MOBILE ENVIRONMENT which published on Aug. 5 2010 U.S. Patent Application Publication No. 2010 0197318 entitled ANONYMOUS CROWD TRACKING which published on Aug. 5 2010 U.S. Patent Application Publication No. 2010 0198826 entitled MAINTAINING A HISTORICAL RECORD OF ANONYMIZED USER PROFILE DATA BY LOCATION FOR USERS IN A MOBILE ENVIRONMENT which published on Aug. 5 2010 U.S. Patent Application Publication No. 2010 0198917 entitled CROWD FORMATION FOR MOBILE DEVICE USERS which published on Aug. 5 2010 U.S. Patent Application Publication No. 2010 0198870 entitled SERVING A REQUEST FOR DATA FROM A HISTORICAL RECORD OF ANONYMIZED USER PROFILE DATA IN A MOBILE ENVIRONMENT which published on Aug. 5 2010 U.S. Patent Application Publication No. 2010 0198862 entitled HANDLING CROWD REQUESTS FOR LARGE GEOGRAPHIC AREAS which published on Aug. 5 2010 and U.S. Patent Application Publication No. 2010 0197319 entitled MODIFYING A USER S CONTRIBUTION TO AN AGGREGATE PROFILE BASED ON TIME BETWEEN LOCATION UPDATES AND EXTERNAL EVENTS which published on Aug. 5 2010 all of which are hereby incorporated herein by reference in their entireties.

The persistence layer includes an object mapping layer and a datastore . The object mapping layer is preferably implemented in software. The datastore is preferably a relational database which is implemented in a combination of hardware i.e. physical data storage hardware and software i.e. relational database software . In this embodiment the business logic layer is implemented in an object oriented programming language such as for example Java. As such the object mapping layer operates to map objects used in the business logic layer to relational database entities stored in the datastore . Note that in one embodiment data is stored in the datastore in a Resource Description Framework RDF compatible format.

In an alternative embodiment rather than being a relational database the datastore may be implemented as an RDF datastore. More specifically the RDF datastore may be compatible with RDF technology adopted by Semantic Web activities. Namely the RDF datastore may use the Friend Of A Friend FOAF vocabulary for describing people their social networks and their interests. In this embodiment the MAP server may be designed to accept raw FOAF files describing persons their friends and their interests. These FOAF files are currently output by some social networking services such as LiveJournal and Facebook . The MAP server may then persist RDF descriptions of the users as a proprietary extension of the FOAF vocabulary that includes additional properties desired for the system .

At some point after authentication is complete a user profile process is performed such that a user profile of the user is obtained from the profile server and delivered to the MAP server step . In this embodiment the MAP client of the mobile device sends a profile request to the profile server step A . In response the profile server returns the user profile of the user to the mobile device step B . The MAP client of the mobile device then sends the user profile of the user to the MAP server step C . Note that while in this embodiment the MAP client sends the complete user profile of the user to the MAP server in an alternative embodiment the MAP client may filter the user profile of the user according to criteria specified by the user . For example the user profile of the user may include demographic information general interests music interests and movie interests and the user may specify that the demographic information or some subset thereof is to be filtered or removed before sending the user profile to the MAP server .

Upon receiving the user profile of the user from the MAP client of the mobile device the profile manager of the MAP server processes the user profile step D . More specifically in the preferred embodiment the profile manager includes social network handlers for the social network services supported by the MAP server that operate to map the user profiles of the users obtained from the social network services to a common format utilized by the MAP server . This common format includes a number of user profile categories or user profile slices such as for example a demographic profile category a social interaction profile category a general interests category a music interests profile category and a movie interests profile category. For example if the MAP server supports user profiles from Facebook MySpace and LinkedIN the profile manager may include a Facebook handler a MySpace handler and a LinkedIN handler. The social network handlers process user profiles from the corresponding social network services to generate user profiles for the users in the common format used by the MAP server . For this example assume that the user profile of the user is from Facebook . The profile manager uses a Facebook handler to process the user profile of the user to map the user profile of the user from Facebook to a user profile for the user for the MAP server that includes lists of keywords for a number of predefined profile categories or profile slices such as for example a demographic profile category a social interaction profile category a general interests profile category a music interests profile category and a movie interests profile category. As such the user profile of the user from Facebook may be processed by the Facebook handler of the profile manager to create a list of keywords such as for example liberal High School Graduate 35 44 College Graduate etc. for the demographic profile category a list of keywords such as Seeking Friendship for the social interaction profile category a list of keywords such as politics technology photography books etc. for the general interests profile category a list of keywords including music genres artist names album names or the like for the music interests profile category and a list of keywords including movie titles actor or actress names director names movie genres or the like for the movie interests profile category. In one embodiment the profile manager may use natural language processing or semantic analysis. For example if the Facebook user profile of the user states that the user is 20 years old semantic analysis may result in the keyword of 18 24 years old being stored in the user profile of the user for the MAP server .

After processing the user profile of the user the profile manager of the MAP server stores the resulting user profile for the user step E . More specifically in one embodiment the MAP server stores user records for the users in the datastore . The user profile of the user is stored in the user record of the user . The user record of the user includes a unique identifier of the user the user profile of the user and as discussed below a current location of the user . Note that the user profile of the user may be updated as desired. For example in one embodiment the user profile of the user is updated by repeating step each time the user activates the MAP application .

Note that while the discussion herein focuses on an embodiment where the user profiles of the users are obtained from the one or more profile servers the user profiles of the users may be obtained in any desired manner. For example in one alternative embodiment the user may identify one or more favorite websites. The profile manager of the MAP server may then crawl the one or more favorite websites of the user to obtain keywords appearing in the one or more favorite websites of the user . These keywords may then be stored as the user profile of the user .

At some point a process is performed such that a current location of the mobile device and thus a current location of the user is obtained by the MAP server step . In this embodiment the MAP application of the mobile device obtains the current location of the mobile device from the location function of the mobile device . The MAP application then provides the current location of the mobile device to the MAP client and the MAP client then provides the current location of the mobile device to the MAP server step A . Note that step A may be repeated periodically or in response to a change in the current location of the mobile device in order for the MAP application to provide location updates for the user to the MAP server .

In response to receiving the current location of the mobile device the location manager of the MAP server stores the current location of the mobile device as the current location of the user step B . More specifically in one embodiment the current location of the user is stored in the user record of the user maintained in the datastore of the MAP server . Note that in the preferred embodiment only the current location of the user is stored in the user record of the user . In this manner the MAP server maintains privacy for the user since the MAP server does not maintain a historical record of the location of the user . Any historical data maintained by the MAP server is preferably anonymized in order to maintain the privacy of the users .

In addition to storing the current location of the user the location manager sends the current location of the user to the location server step C . In this embodiment by providing location updates to the location server the MAP server in return receives location updates for the user from the location server . This is particularly beneficial when the mobile device does not permit background processes. If the mobile device does not permit background processes the MAP application will not be able to provide location updates for the user to the MAP server unless the MAP application is active. Therefore when the MAP application is not active other applications running on the mobile device or some other device of the user may directly or indirectly provide location updates to the location server for the user . This is illustrated in step where the location server receives a location update for the user directly or indirectly from another application running on the mobile device or an application running on another device of the user step A . The location server then provides the location update for the user to the MAP server step B . In response the location manager updates and stores the current location of the user in the user record of the user step C . In this manner the MAP server is enabled to obtain location updates for the user even when the MAP application is not active at the mobile device .

At some point after authentication is complete a user profile process is performed such that a user profile of the user is obtained from the profile server and delivered to the MAP server step . In this embodiment the profile manager of the MAP server sends a profile request to the profile server step A . In response the profile server returns the user profile of the user to the profile manager of the MAP server step B . Note that while in this embodiment the profile server returns the complete user profile of the user to the MAP server in an alternative embodiment the profile server may return a filtered version of the user profile of the user to the MAP server . The profile server may filter the user profile of the user according to criteria specified by the user . For example the user profile of the user may include demographic information general interests music interests and movie interests and the user may specify that the demographic information or some subset thereof is to be filtered or removed before sending the user profile to the MAP server .

Upon receiving the user profile of the user the profile manager of the MAP server processes the user profile step C . More specifically as discussed above in the preferred embodiment the profile manager includes social network handlers for the social network services supported by the MAP server . The social network handlers process user profiles to generate user profiles for the MAP server that include lists of keywords for each of a number of profile categories or profile slices.

After processing the user profile of the user the profile manager of the MAP server stores the resulting user profile for the user step D . More specifically in one embodiment the MAP server stores user records for the users in the datastore . The user profile of the user is stored in the user record of the user . The user record of the user includes a unique identifier of the user the user profile of the user and as discussed below a current location of the user . Note that the user profile of the user may be updated as desired. For example in one embodiment the user profile of the user is updated by repeating step each time the user activates the MAP application .

Note that while the discussion herein focuses on an embodiment where the user profiles of the users are obtained from the one or more profile servers the user profiles of the users may be obtained in any desired manner. For example in one alternative embodiment the user may identify one or more favorite websites. The profile manager of the MAP server may then crawl the one or more favorite websites of the user to obtain keywords appearing in the one or more favorite websites of the user . These keywords may then be stored as the user profile of the user .

At some point a process is performed such that a current location of the mobile device and thus a current location of the user is obtained by the MAP server step . In this embodiment the MAP application of the mobile device obtains the current location of the mobile device from the location function of the mobile device . The MAP application then provides the current location of the user of the mobile device to the location server step A . Note that step A may be repeated periodically or in response to changes in the location of the mobile device in order to provide location updates for the user to the MAP server . The location server then provides the current location of the user to the MAP server step B . The location server may provide the current location of the user to the MAP server automatically in response to receiving the current location of the user from the mobile device or in response to a request from the MAP server .

In response to receiving the current location of the mobile device the location manager of the MAP server stores the current location of the mobile device as the current location of the user step C . More specifically in one embodiment the current location of the user is stored in the user record of the user maintained in the datastore of the MAP server . Note that in the preferred embodiment only the current location of the user is stored in the user record of the user . In this manner the MAP server maintains privacy for the user since the MAP server does not maintain a historical record of the location of the user . As discussed below in detail historical data maintained by the MAP server is preferably anonymized in order to maintain the privacy of the users .

As discussed above the use of the location server is particularly beneficial when the mobile device does not permit background processes. As such if the mobile device does not permit background processes the MAP application will not provide location updates for the user to the location server unless the MAP application is active. However other applications running on the mobile device or some other device of the user may provide location updates to the location server for the user when the MAP application is not active. This is illustrated in step where the location server receives a location update for the user from another application running on the mobile device or an application running on another device of the user step A . The location server then provides the location update for the user to the MAP server step B . In response the location manager updates and stores the current location of the user in the user record of the user step C . In this manner the MAP server is enabled to obtain location updates for the user even when the MAP application is not active at the mobile device .

Next the crowd analyzer determines whether the new and old bounding boxes overlap step . If so the crowd analyzer creates a bounding box encompassing the new and old bounding boxes step . For example if the new and old bounding boxes are 40 40 meter regions and a 1 1 meter square at the northeast corner of the new bounding box overlaps a 1 1 meter square at the southwest corner of the old bounding box the crowd analyzer may create a 79 79 meter square bounding box encompassing both the new and old bounding boxes.

The crowd analyzer then determines the individual users and crowds relevant to the bounding box created in step step . The crowds relevant to the bounding box are crowds that are within or overlap the bounding box e.g. have at least one user located within the bounding box . The individual users relevant to the bounding box are users that are currently located within the bounding box and not already part of a crowd. Next the crowd analyzer computes an optimal inclusion distance for individual users based on user density within the bounding box step . More specifically in one embodiment the optimal inclusion distance for individuals which is also referred to herein as an initial optimal inclusion distance is set according to the following equation 

The crowd analyzer then creates a crowd for each individual user within the bounding box that is not already included in a crowd and sets the optimal inclusion distance for the crowds to the initial optimal inclusion distance step . At this point the process proceeds to where the crowd analyzer analyzes the crowds relevant to the bounding box to determine whether any of the crowd members i.e. users in the crowds violate the optimal inclusion distance of their crowds step . Any crowd member that violates the optimal inclusion distance of his or her crowd is then removed from that crowd step . The crowd analyzer then creates a crowd of one user for each of the users removed from their crowds in step and sets the optimal inclusion distance for the newly created crowds to the initial optimal inclusion distance step .

Next the crowd analyzer determines the two closest crowds for the bounding box step and a distance between the two closest crowds step . The distance between the two closest crowds is the distance between the crowd centers of the two closest crowds. The crowd analyzer then determines whether the distance between the two closest crowds is less than the optimal inclusion distance of a larger of the two closest crowds step . If the two closest crowds are of the same size i.e. have the same number of users then the optimal inclusion distance of either of the two closest crowds may be used. Alternatively if the two closest crowds are of the same size the optimal inclusion distances of both of the two closest crowds may be used such that the crowd analyzer determines whether the distance between the two closest crowds is less than the optimal inclusion distances of both of the two closest crowds. As another alternative if the two closest crowds are of the same size the crowd analyzer may compare the distance between the two closest crowds to an average of the optimal inclusion distances of the two closest crowds.

If the distance between the two closest crowds is not less than the optimal inclusion distance then the process proceeds to step . Otherwise the two closest crowds are combined or merged step and a new crowd center for the resulting crowd is computed step . A center of mass algorithm may be used to compute the crowd center of a crowd. In addition a new optimal inclusion distance for the resulting crowd is computed step . In one embodiment the new optimal inclusion distance for the resulting crowd is computed as 

At this point the crowd analyzer determines whether a maximum number of iterations have been performed step . The maximum number of iterations is a predefined number that ensures that the crowd formation process does not indefinitely loop over steps through or loop over steps through more than a desired maximum number of times. If the maximum number of iterations has not been reached the process returns to step and is repeated until either the distance between the two closest crowds is not less than the optimal inclusion distance of the larger crowd or the maximum number of iterations has been reached. At that point the crowd analyzer discards crowds with less than three users or members step and the process ends.

Returning to step in if the new and old bounding boxes do not overlap the process proceeds to and the bounding box to be processed is set to the old bounding box step . In general the crowd analyzer then processes the old bounding box in much the same manner as described above with respect to steps through . More specifically the crowd analyzer determines the individual users and crowds relevant to the bounding box step . The crowds relevant to the bounding box are crowds that are within or overlap the bounding box e.g. have at least one user located within the bounding box . The individual users relevant to the bounding box are users that are currently located within the bounding box and not already part of a crowd. Next the crowd analyzer computes an optimal inclusion distance for individual users based on user density within the bounding box step . More specifically in one embodiment the optimal inclusion distance for individuals which is also referred to herein as an initial optimal inclusion distance is set according to the following equation 

The crowd analyzer then creates a crowd of one user for each individual user within the bounding box that is not already included in a crowd and sets the optimal inclusion distance for the crowds to the initial optimal inclusion distance step . At this point the crowd analyzer analyzes the crowds for the bounding box to determine whether any crowd members i.e. users in the crowds violate the optimal inclusion distance of their crowds step . Any crowd member that violates the optimal inclusion distance of his or her crowd is then removed from that crowd step . The crowd analyzer then creates a crowd of one user for each of the users removed from their crowds in step and sets the optimal inclusion distance for the newly created crowds to the initial optimal inclusion distance step .

Next the crowd analyzer determines the two closest crowds in the bounding box step and a distance between the two closest crowds step . The distance between the two closest crowds is the distance between the crowd centers of the two closest crowds. The crowd analyzer then determines whether the distance between the two closest crowds is less than the optimal inclusion distance of a larger of the two closest crowds step . If the two closest crowds are of the same size i.e. have the same number of users then the optimal inclusion distance of either of the two closest crowds may be used. Alternatively if the two closest crowds are of the same size the optimal inclusion distances of both of the two closest crowds may be used such that the crowd analyzer determines whether the distance between the two closest crowds is less than the optimal inclusion distances of both of the two closest crowds. As another alternative if the two closest crowds are of the same size the crowd analyzer may compare the distance between the two closest crowds to an average of the optimal inclusion distances of the two closest crowds.

If the distance between the two closest crowds is not less than the optimal inclusion distance the process proceeds to step . Otherwise the two closest crowds are combined or merged step and a new crowd center for the resulting crowd is computed step . Again a center of mass algorithm may be used to compute the crowd center of a crowd. In addition a new optimal inclusion distance for the resulting crowd is computed step . As discussed above in one embodiment the new optimal inclusion distance for the resulting crowd is computed as 

At this point the crowd analyzer determines whether a maximum number of iterations have been performed step . If the maximum number of iterations has not been reached the process returns to step and is repeated until either the distance between the two closest crowds is not less than the optimal inclusion distance of the larger crowd or the maximum number of iterations has been reached. At that point the crowd analyzer discards crowds with less than three users or members step . The crowd analyzer then determines whether the crowd formation process for the new and old bounding boxes is done step . In other words the crowd analyzer determines whether both the new and old bounding boxes have been processed. If not the bounding box is set to the new bounding box step and the process returns to step and is repeated for the new bounding box. Once both the new and old bounding boxes have been processed the crowd formation process ends.

The crowd analyzer then identifies the two closest crowds and in the new bounding box and determines a distance between the two closest crowds and . In this example the distance between the two closest crowds and is less than the optimal inclusion distance. As such the two closest crowds and are merged and a new crowd center and new optimal inclusion distance are computed as illustrated in . The crowd analyzer then repeats the process such that the two closest crowds and in the new bounding box are again merged as illustrated in . At this point the distance between the two closest crowds and is greater than the appropriate optimal inclusion distance. As such the crowd formation process is complete.

Since the old bounding box and the new bounding box overlap the crowd analyzer creates a bounding box that encompasses both the old bounding box and the new bounding box as illustrated in . In addition the crowd analyzer creates crowds through for individual users currently located within the bounding box . The optimal inclusion distances of the crowds through are set to the initial optimal inclusion distance computed by the crowd analyzer based on the density of users in the bounding box .

Next the crowd analyzer analyzes the crowds and through to determine whether any members of the crowds and through violate the optimal inclusion distances of the crowds and through . In this example as a result of the user leaving the crowd and moving to his new location both of the remaining members of the crowd violate the optimal inclusion distance of the crowd . As such the crowd analyzer removes the remaining users from the crowd and creates crowds and of one user each for those users as illustrated in .

The crowd analyzer then identifies the two closest crowds in the bounding box which in this example are the crowds and . Next the crowd analyzer computes a distance between the two crowds and . In this example the distance between the two crowds and is less than the initial optimal inclusion distance and as such the two crowds and are combined. In this example crowds are combined by merging the smaller crowd into the larger crowd. Since the two crowds and are of the same size the crowd analyzer merges the crowd into the crowd as illustrated in . A new crowd center and new optimal inclusion distance are then computed for the crowd .

At this point the crowd analyzer repeats the process and determines that the crowds and are now the two closest crowds. In this example the distance between the two crowds and is less than the optimal inclusion distance of the larger of the two crowds and which is the crowd . As such the crowd is merged into the crowd and a new crowd center and optimal inclusion distance are computed for the crowd as illustrated in . At this point there are no two crowds closer than the optimal inclusion distance of the larger of the two crowds. As such the crowd analyzer discards any crowds having less than three members as illustrated in . In this example the crowds and have less than three members and are therefore removed. The crowd has three or more members and as such is not removed. At this point the crowd formation process is complete.

More specifically as illustrated in as a result of the movement of the user from the old location to the new location the remaining users in the crowd no longer satisfy the optimal inclusion distance for the crowd . As such the remaining users in the crowd are removed from the crowd and crowds and of one user each are created for the removed users as shown in . In this example no two crowds in the old bounding box are close enough to be combined. As such crowds having less than three users are removed as shown in and processing of the old bounding box is complete and the crowd analyzer proceeds to process the new bounding box .

As illustrated in processing of the new bounding box begins by the crowd analyzer creating a crowd of one user for the user. The crowd analyzer then identifies the crowds and as the two closest crowds in the new bounding box and determines a distance between the two crowds and . In this example the distance between the two crowds and is less than the optimal inclusion distance of the larger crowd which is the crowd . As such the crowd analyzer combines the crowds and by merging the crowd into the crowd as illustrated in . A new crowd center and new optimal inclusion distance are then computed for the crowd . At this point the crowd formation process is complete. Note that the crowd formation processes described above with respect to through E are exemplary. The present disclosure is not limited thereto. Any type of crowd formation process may be used.

Note that while the embodiment of the crowd ID tag primarily discussed herein is one where the crowd ID tag is the actual crowd ID of the crowd the crowd ID tag is not limited thereto. In another embodiment the crowd ID tag may not be the crowd ID itself but may be a unique string generated from the crowd ID or a string that uniquely maps to the crowd ID. This may be desirable in embodiments where the crowd ID tag has to be inserted within the message body of the micro blog post. This would have multiple benefits including reducing the number of characters occupied by the tag avoiding generating unsightly strings of characters meaningless to users and meeting character length restrictions imposed by the micro blogging service for instance Twitter enforces a 140 character limit on all blog posts . As an example a crowd ID may be a 32 bit or even a 64 bit numeric value or variable length strings which may result in a very long string when converted to text. Furthermore this string would be relevant to the MAP application the MAP server and the micro blogging service but would have no relevance to a user. Hence to reduce the number of characters required by the tag a shorter alphanumeric string may be generated associated with the crowd ID and then used to tag the micro blog post. In one embodiment the shorter string is generated from the crowd ID itself using a method that can be easily reversed to obtain the original crowd ID. One possible method may be to apply a hash function to the crowd ID to generate a string to be used as the crowd ID tag. Another method may be to generate a random string using a random number generator and associating that string with the crowd ID at the MAP application the MAP server and the micro blogging service or any combination of these such that the crowd ID can be obtained given the generated string. As an additional precaution previous randomly generated strings may be persisted in a database and newly generated strings may be checked against these to ensure that a string does not get re used. Yet another method may be to convert a numeric crowd ID value from base 2 binary format to base N assign a unique alphanumeric character to each of the N base N digits and represent the crowd ID tag as the resulting string of alphanumeric characters where N is greater than 2. The alphanumeric characters may utilize any of a number of possible character encoding schemes such as ASCII or Unicode. As an example a base 64 encoding could be adopted where the 64 unique characters include in order the 10 digits 0 through 9 26 lower case letters a through z 26 upper case letters A through Z a hyphen and an underscore   . Hence a 32 bit numeric crowd ID having decimal value 606355638 and binary representation 00100100001001000100000010110110 would translate to a text string A942S which is shorter than either binary or decimal representation. This method can be trivially reversed to obtain the original crowd ID from the resulting string. Note that this is a simplified example and more sophisticated methods may be used. Furthermore methods resulting in strings that resemble real words may be used such that the resulting tag appears relatively less nonsensical to users. Note that the tag may be specifically formatted to identify it as being generated by the MAP application or the MAP server and to differentiate it from other tags that may be added for instance by the user. As an example all MAP generated hash tags may begin with the string CL e.g. CLA942S. Thus as used herein a crowd ID tag is to be understood as being either the actual crowd ID of the corresponding crowd or a unique string that is either derived from or maps to the actual crowd ID of the crowd.

Upon receiving the micro blog post the micro blog function of the MAP server determines a crowd in which the user is located step . More specifically the micro blog function determines the crowd in which the user is located at the current time which is substantially the same as the time at which the user made the micro blog post. In one embodiment the MAP server forms crowds using the process of . In this case the micro blog function determines the crowd of the user by querying the datastore of the MAP server for the crowd ID of the crowd in which the user is located. The micro blog function then tags the micro blog post with the crowd ID of the crowd step . As discussed above the micro blog post may be tagged with the crowd ID by appending the crowd ID to or otherwise inserting the crowd ID into the body of the micro blog post e.g. a hash tag for a Twitter tweet or including the crowd ID in metadata of the micro blog post.

Next the micro blog function sends the micro blog post including the crowd ID tag to the micro blogging service step . In this embodiment the micro blog function of the MAP server is registered with the micro blogging service such that the micro blog function is enabled to make micro blog posts. Thus in step the micro blog function sends the micro blog post including the crowd ID tag to the micro blogging service as a post of the micro blog function of the MAP server . For example in one embodiment the micro blogging service is the Twitter micro blogging and social networking service and the micro blog function of the MAP server has a Twitter account. Then in step the micro blog post is sent to the Twitter service as a tweet from the micro blog function of the MAP server . In this manner the micro blog post including the crowd ID tag is anonymized in that the micro blog post sent in step does not identify the user as the originator of the micro blog post. Upon receiving the micro blog post in step the micro blogging service publishes the micro blog post including the crowd ID tag step . Notably steps through are repeated for additional micro blog posts made by the user as well as micro blog posts made by other users .

In response the MAP applications through N of the mobile devices through N filter the micro blog post based on the crowd ID tag steps through N . More specifically in one embodiment the MAP applications through N filter micro blog posts made by the MAP server such that only micro blog posts tagged with the crowd IDs of desired crowds are presented to the users through N. Using the MAP application as an example in the preferred embodiment the MAP application filters micro blog posts made by the MAP server such that only the micro blog posts tagged with the crowd ID of the crowd in which the user is located pass through the filter to be presented to the user . In this manner the users in a crowd form an ad hoc micro blogging group where micro blog posts made by the users in the ad hoc micro blogging group are published to the other users in the ad hoc micro blogging group. However in an alternative embodiment the MAP application filters micro blog posts made by the MAP server such that only the micro blog posts tagged with the crowd ID s of a desired crowd s selected by the user pass through the filter to be presented to the user . Lastly the MAP applications through N present the micro blog post to the users through N if the micro blog post passes through the corresponding filters applied by the MAP applications through N steps through N . Notably steps through are repeated for additional micro blog posts sent to the micro blogging service from the MAP server .

In response to the search request the micro blogging service performs a search for micro blog posts tagged with the desired crowd ID step . More specifically in this embodiment the micro blogging service stores a repository of micro blog posts. The micro blogging service searches the repository for micro blog posts tagged with the desired crowd ID. Note that if any additional search criteria are defined in the search request the additional search criteria are also used when performing the search. The micro blogging service then returns the micro blog posts resulting from the search i.e. the micro blog posts tagged with the desired crowd ID and that satisfy any additional search criteria included in the search request to the mobile device step . The MAP application of the mobile device then presents the micro blog posts to the user step . Notably using the process of the user is enabled to obtain micro blog posts made by the users in the desired crowd without necessarily being registered with the micro blogging service as a follower of the users in the desired crowd. Note that since crowd IDs may be incorporated as text or hash tags in the micro blog message body itself the micro blogging service only needs to provide basic text indexing and searching services or search services adapted for indexing and searching of hash tags to be able to perform step . As such ad hoc micro blogging groups may be successfully established even if the micro blogging service is not aware of the existence of crowd IDs or configured to provide search capabilities specific to crowd IDs.

Upon receiving the micro blog post the micro blog function of the MAP server determines a crowd in which the user is located step . More specifically the micro blog function determines the crowd in which the user is located at the current time which in this embodiment is substantially the same as the time at which the user sent the micro blog post. In one embodiment the MAP server forms crowds using the process of . In this case the micro blog function determines the crowd of the user by querying the datastore of the MAP server for the crowd ID of the crowd in which the user is located. The micro blog function then tags the micro blog post with the crowd ID of the crowd step . As discussed above the micro blog post may be tagged with the crowd ID by appending the crowd ID to or otherwise inserting the crowd ID into the body of the micro blog post e.g. a hash tag for a Twitter tweet or including the crowd ID in metadata of the micro blog post. Lastly the micro blog function publishes the micro blog post including the crowd ID tag step . The manner in which the micro blog post is published may vary depending on the particular embodiment as described below. Notably steps through are repeated for additional micro blog posts made by the user as well as micro blog posts made by other users .

The MAP applications of the mobile devices filter the micro blog posts to pass only the micro blog posts of desired crowds for presentation to the users steps through N . More specifically for each mobile device the MAP application of the mobile device filters the micro blog posts to pass only those micro blog posts tagged with a desired crowd ID. The desired crowd ID is the crowd ID of a desired crowd. In the preferred embodiment the desired crowd is the crowd in which the user of the mobile device is located. In this manner the users in a crowd form an ad hoc micro blogging group where micro blog posts by the users in the ad hoc micro blogging group are published to the other users in the ad hoc micro blogging group. In an alternative embodiment the desired crowd is a crowd selected by the user of the mobile device . Lastly the MAP applications of the mobile devices present the filtered micro blog posts to the users steps through N .

In response to the search request the micro blog function of the MAP server performs a search for micro blog posts tagged with the desired crowd ID step . More specifically in this embodiment the MAP server stores a repository of micro blog posts received from the micro blogging service and tagged with corresponding crowd IDs. The micro blog function searches the repository for micro blog posts tagged with the desired crowd ID. Note that if any additional search criteria are defined in the search request the additional search criteria are also used when performing the search. The micro blog function then returns the micro blog posts resulting from the search i.e. the micro blog posts tagged with the desired crowd ID and that satisfy any additional search criteria included in the search request to the mobile device step . The MAP application of the mobile device then presents the micro blog posts to the user step .

Next the micro blog function of the MAP server sends the micro blog post including the crowd ID tag to the micro blogging service step . In the preferred embodiment the micro blog post is sent as a micro blog post of the MAP server . In this manner the micro blog post is anonymized such that the user is not identified as the sender or originator of the micro blog post. However in an alternative embodiment the micro blog function sends the micro blog post to the micro blogging service on behalf of the user . In this manner the micro blog post is not anonymous and may be published to followers of the user . Upon receiving the micro blog post the micro blogging service publishes the micro blog post including the crowd ID tag step . The manner in which the micro blog post is published may vary depending on the particular implementation. In one embodiment the micro blogging service publishes the micro blog post using the process of . In another embodiment the micro blogging service publishes the micro blog post using the process of . Notably the processes of are exemplary publication processes and neither the embodiment of nor the embodiment of is limited thereto.

Next the MAP application tags the micro blog post with the crowd ID of the crowd in which the user is located step and sends the micro blog post including the crowd ID tag to the micro blogging service step . The micro blogging service then publishes the micro blog post including the crowd ID tag step . In this embodiment the micro blog post is published as a micro blog post of the user . However in an alternative embodiment the MAP application may send the post as a micro blog post of the MAP server such that the MAP server rather than the user is identified as the sender of the micro blog post i.e. the micro blog post is anonymized . Also for this embodiment the micro blogging service preferably publishes the micro blog post using the process of where the MAP applications of the other users search for micro blog posts tagged with the desired crowd IDs. Notably the process of is an exemplary publication process and the embodiment of is not limited thereto.

Next the MAP application tags the micro blog post with the crowd ID of the crowd in which the user is located step and sends the micro blog post including the crowd ID tag to the MAP server step . The MAP application may send the micro blog post to the MAP server via a direct communication channel between the MAP application and the MAP server or a direct messaging scheme provided by the micro blogging service . The micro blog function of the MAP server then sends the micro blog post including the crowd ID tag to the micro blogging service step . Preferably the micro blog function sends the micro blog post as a micro blog post of the MAP server such that the user is anonymized i.e. the MAP server rather than the user is identified as the sender of the micro blog post . The micro blogging service then publishes the micro blog post including the crowd ID tag step . The manner in which the micro blog post is published may vary depending on the particular implementation. In one embodiment the micro blogging service publishes the micro blog post using the process of . In another embodiment the micro blogging service publishes the micro blog post using the process of . Notably the process of are exemplary publication processes and the embodiment of is not limited thereto.

The systems and methods described herein have substantial opportunity for variation without departing from the spirit and scope of the present disclosure. For example describe several exemplary embodiments for tagging and publishing micro blog posts. However one of ordinary skill in the art will appreciate that the system and processes described in may vary depending on the particular implementation. For example while tagging is performed by either the MAP server or the MAP applications of the mobile devices in the embodiments described above the present disclosure is not limited thereto. In another embodiment tagging may be performed by the micro blogging service . For example upon receiving a micro blog post from one of the users the micro blogging service may query the MAP server for the crowd ID of the crowd in which the user is located and then tag the micro blog post with the crowd ID prior to publication. The MAP applications of other users in the crowd may then submit search requests to the micro blogging service for micro blog posts tagged with the crowd ID of the crowd to thereby obtain micro blog posts made by the users in the crowd without registering the users in the crowd as followers of one another. As another example while the discussion herein focuses on micro blog posts the systems and methods described herein may additionally or alternatively be used to tag other types of communications e.g. RSS feeds with crowd IDs of the crowds in which the originators of the communications are located. As a final example as an alternative to or in addition to tagging micro blog posts with crowd IDs Uniform Resource Locators URLs may be inserted into the micro blog posts. The URL inserted into a micro blog post may link to a website for the MAP server link to a web application provided by the MAP server or link to a download of the MAP application . In this manner the URLs may be used to virally introduce the MAP application . Furthermore the URLs may include the crowd IDs of the crowds in which the corresponding users are located as a parameter e.g. an HTTP GET parameter so that the MAP application or a MAP web client can process the URL to display relevant information.

The following use cases illustrate some but not necessarily all of the aspects discussed above with respect to tagging micro blog posts with crowd IDs. Note that these use cases are exemplary and are not intended to limit the scope of the concepts described herein.

Those skilled in the art will recognize improvements and modifications to the preferred embodiments of the present disclosure. All such improvements and modifications are considered within the scope of the concepts disclosed herein and the claims that follow.

