---

title: Segment routing label switch paths in network functions virtualization communications networks
abstract: A method is provided in one example embodiment and includes receiving a request to create a path through a network, wherein the path originates on a first network device and terminates on the second network device; identifying a first controller associated with the first network device, wherein the first controller proxies control plane functions for the first network device; identifying a second controller associated with the second network device, wherein the second controller proxies control plane functions for the second network device; and computing the path using the first controller as a source and the second controller as a destination. The first controller installs the computed path on the first network device and the second controller installs the computed path on the second network device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09503363&OS=09503363&RS=09503363
owner: CISCO TECHNOLOGY, INC.
number: 09503363
owner_city: San Jose
owner_country: US
publication_date: 20150316
---
This disclosure relates in general to the field of communications networks and more particularly to techniques for supporting segment routed label switched switch paths LSPs in a network functions virtualization NFV communications network.

In certain communications network environments a control plane engine such as an XR controller node controls a set of forwarding engines such as Virtual Provider Edge Forwarders VPEF nodes running on compute servers. The forwarding engines are connected to themselves as well as to other networks using Layer 2 Internet Protocol L2 IP or Multi Protocol Label Switching MPLS fabric. Segment routing provides the ability to set up MPLS Label Switched Paths LSPs without the need to deploy RSVP TE or LDP signaling protocols and hence leads to simpler network operation and better scalability and agility in setting up large numbers of LSPs. It is anticipated that Segment Routed Label Switched Paths SR LSPs will become a preferred data transport method in NFV network architectures.

Additionally service providers SPs have been deploying RSVP signaled traffic engineering LSPs for many years to carry services such as L3VPN with quality of service QoS guarantees and reliability using mechanisms like Fast ReRoute FRR and path protection. Network operators offering cloud web server farm and other services are also considering MPLS TE solutions for transferring data among data centers DCs .

A method is provided in one example embodiment and includes receiving a request to create a path through a network wherein the path originates on a first network device and terminates on the second network device identifying a first controller associated with the first network device wherein the first controller proxies control plane functions for the first network device identifying a second controller associated with the second network device wherein the second controller proxies control plane functions for the second network device and computing the path using the first controller as a source and the second controller as a destination. The first controller installs the computed path on the first network device and the second controller installs the computed path on the second network device. In certain embodiments the computed path is a Segment Routed Label Switched Path SR LSP and the first controller installs the computed path on the first network device and any other network device for which it proxies control plane functions by programming thereon Multi Protocol Label Switching MPLS label forwarding entries for each known Internet Protocol IP prefix learned via Interior Gateway Protocol IGP . In certain embodiments the computed path is a Traffic Engineering Segment Routed Label Switched Path SR TE LSP and the first controller installs the computed path on the first network device by programming thereon a Multi Protocol Label Switching MPLS label forwarding entry for the computed path. The MPLS label forwarding entry may include a stack of labels and the first controller may program the MPLS label forwarding entry on all network devices for which the first controller proxies control plane functions and through which data may be forwarded on the SR TE LSP. The request may comprise a Path Computation Element Protocol PCEP request.

In certain embodiments a network node connected to the first network device receives a resource reservation packet addressed to the first network device in which case the method may further include identifying that the first controller is associated with the first network device updating the received resource reservation packet to change an IP address included in the resource reservation packet from an IP address of the first network device to an IP address of the first controller and forwarding the updated resource reservation packet to the first controller for processing. In other embodiments the method further includes maintaining a tunnel between the first network device and the first controller receiving by the first network device a resource reservation packet addressed to the first network device and forwarding the received resource reservation packet from the first network device to the first controller for processing.

Embodiments described herein cover systems and methods for establishing SR LSPs with or without traffic engineering that originate and or terminate on a forwarding engine for implementing a data plane and for which control plane functions are proxied by an associated control plane engine. As will become apparent the embodiments described herein cover both centralized e.g. via SDN controller or distributed path e.g. head end based computation for SR LSPs. It will be noted that while SR LSPs established as described herein may both originate and terminate on a forwarding engine for which control plane functions are proxied by a control plane engine that need not necessarily be the case. In particular such SR LSPs may originate on a forwarding engine for which control plane functions are proxied and terminate on a network device for which control plane functions are not proxied.

In accordance with features of embodiments described herein one or more control plane engines comprising controllers A B are provided for proxying control plane functions for one or more of the forwarding engines A D. Controllers A B provide the necessary control plane functions to support virtual forwarders e.g. forwarding engines A D that do not have full control plane functions. In certain embodiments controllers A B may be implemented as XR controllers.

For example as shown in XR controller A proxies control plane functions for i.e. handles is responsible for and or is associated with VPEFs A and B. Similarly XR controller B proxies control plane functions for i.e. handles is responsible for and or is associated with VPEFs C and D. It will be assumed for the sake of embodiments described herein that the ability to advertise Segment IDs SIDs for VPEFs via IGP exists in the environment . Embodiments described herein implement systems and methods for establishing SR LSPs with or without TE that originate and or terminate on forwarding engines such as VPEFs for which control plane functions are proxied by one or more control plane engines such as XR controllers. The embodiments described herein cover both centralized e.g. via SDN controller and distributed path head end based path computation for SR LSP.

Referring again to for TE path computation purposes virtual TE links A D may be created and advertised via link state IGP and BGP. In the network environment the required TE links between each of the VPEFs A D and the core of the SR network originate terminate on the XR controller responsible for the respective VPEF. For example the controller A is responsible and terminates TE links A B for VPEFs A B while the controller B is responsible and terminates TE links C D for VPEFs C D. In other words a VPEF does not originate or terminate a TE link. As a result the links A D are referred to as virtual TE links . Virtual TE links are control plane entities. It will be noted that an SR LSP can follow the IGP chosen path. When an SR LSP uses a Traffic Engineering path which may or may not be the same as the IGP chosen path the LSP is referred to herein as SE TE LSP .

Referring now to the same reference numerals are used to refer to the same similar elements shown therein. As shown in using distributed path computation the XR controllers A B again function as the source and or destination for SR LSPs originating and or terminating on the VPEF s for which they are responsible. For example in the embodiment shown in XR controller A functions as the source destination for SR LSPs originating terminating on VPEFs A and B XR controller B functions as the source destination for SR LSPs originating terminating on VPEFs C and D. In the embodiment shown in the FIGURES presented herein including it is assumed that VPEFs A D implement the necessary control plane supports for programming forwarding state and supporting MPLS forwarding operations such as label push pop etc. but do not run heavy control protocols such as IGP. This approach is followed for both IGP Shortest Path First SPF for SR LSPs as well as Constrained SPF CSPF for SR TE LSPs . In other words each XR controller acts as the source destination for SR LSP in the control plane while the SR LSP can originate or terminate on the VPEF in the data plane.

Referring again to illustrated therein is an IGP computed SR LSP represented by a dashed line designated by a reference numeral that originates at VPEF A and terminates at VPEF C. A SR TE LSP represented by a dashed line designated by a reference numeral corresponding to IGP SR LSP may follow a different path though the SR network . In accordance with embodiments described herein and as previously noted XR controller A serves as the source for both LSPs in the control plane while XR controller B serves as the destination for both LSPs in the control plane.

It will be understood that SDN applications can request from a stateful Path Computation Element PCE which in the illustrated embodiments executes on SDN controller and is designated by a reference numeral an SR LSP the source or destination of which may be a VPEF. In accordance with features of embodiments described herein PCE may identify the SR controller controlling a given VPEF for CSPF purposes so that the XR controller is used as the source or destination of the path originating or terminating on a VPEF. It will be assumed for the sake of embodiments described herein that VPEF does not support PCE Protocol PCEP or any other protocol used for communicating with PCE. It will be noted that the request for an SR LSP may be directed to one of the controllers A B which then in turn directs the request to the PCE and or a Wide Area Network WAN controller.

In general PCE simplifies path computation by separating network topology determination from path creation. Historically both of these tasks have been performed by the provider edge router that receives the customer path request i.e. the head end router . The head end router must support an Interior Gateway Protocol IGP such as Open Shortest Path First OSPF or Intermediate System to Intermediate System IS IS to determine topology within its routing domain and must also support the Border Gateway Protocol BGP if paths cross Autonomous System AS boundaries. Adding complex path computation can overwhelm the router CPU. In a PCE based network head end routers continue to support IGP and possibly BGP however path determination is moved to one or more PCEs. Each PCE is a software component dedicated to computing paths which may execute in a dedicated server in a network management server in a cloud or in a head end router with sufficient processing resources. PCE depends on a Traffic Engineering Database TED for the information required to create a new path. The TED receives network topology information from routers via standard routing protocols and may also exchange information with other TEDs. A TED may be located in a server along with the PCE component in a server separate from the PCE or possibly in a head end router. In some domains a single PCE may compute all of the paths for the domain in other domains multiple PCEs may interact to compute paths for the domain. Path creation begins when a customer edge router issues a request to a provider edge head end router which then passes the request to a PCE. PCE Protocol PCEP is used for the interchange between PCEs ore between PCE and Path Computation Client PCC which can be the provider edge router. PCE can be used for computing path in different ways. For example a PCC e.g. router can request a path from PCE. Once the PCC receives the path from PCE it can signal the path e.g. with RSVP TE if necessary. This model is referred to as PCC Initiated LSP . Note that SR TE does not require signaling. Alternatively a PCE may receive a request from a higher application to setup a path. In this case PCE computes the path and send it to PCC. The path is signaled for RSVP TE LSPs. This model is referred to as PCE initiated LSPs . In the embodiments shown and described herein PCC is an XR controller.

Referring now to PCE executing in the SDN controller computes a path between VPEF A and VPEF D as illustrated therein and described herein below. In response to a path computation request in which VPEF A is the source and VPEF D is the destination in step PCE identifies the XR controllers for VPEFs A and D respectively. As a result of this step XR controller A is identified as the source and XR controller B is identified as the destination . In step PCE computes a path which in the embodiment illustrated in corresponds to SR LSP between the source and destination XR controllers i.e. XR controllers A and B . Finally in step PCE sends the corresponding label stack to the source XR controller i.e. XR controller A e.g. via PCEP as represented in by a dashed line designed by a reference numeral . As noted with reference to the SR TE LSP may follow a different path through the SR network .

For non TE LSP SR calculation each XR controller installs on all of the VPEFs that it controls MPLS label forwarding entries for each known IP prefix learned via IGP. illustrates this scenario. For example as shown in XR controller A programs the MPLS label entry for a particular SID e.g. SID on VPEFs A and B as represented in by arrows designated by a reference numeral .

For SR TE LSPs each XR controller identifies the source of the SR LSP either from PCE for PCE initiated SR LSP or the operator for non PCE initiated SR LSP . The XR controller then installs an MPLS label forwarding entry on the particular VPEF. For example as shown in XR controller A installs an MPLS label forwarding entry for the SR TE LSP on the VPEF A which serves as the origination of the SR LSP in the data plane as represented in by an arrow designated by a reference numeral . The egress label set for the path as illustrated is top .

It is possible that multiple VPEFs can forward data through the same SR TE LSP. In this case the XR controller programs the same forwarding entry on all of the VPEFs that it controls that will be forwarding data through the SR TE LSP. For PCE initiated TE LSP if the PCE indicates the address of the XR controller as the source of the SR TE LSP then it is assumed that all of the VPEFs associated with the XR controller can forward the data packets through the SR TE LSP. This means that the same forwarding entry will be installed on all VPEFs associated with the XR controller. For example referring to XR controller A programs the same forwarding entry on VPEFs A B that will be forwarding data packets A B via non IGP SR LSP .

If the source is an XR controller it is assumed that the corresponding SR LSP is to be used by all VPEFs managed by the XR controller to transmit data therefore MPLS forwarding entries will be installed on all such VPEFs. In the case of SR TE LSP label forwarding entries may contain more than one outgoing labels i.e. a stack of labels . This concept is illustrated in . In the case of SR TE LSP each XR controller may create tunnel interfaces in the control plane. All such interfaces are associated only with the XR controller and are not bound to any VPEF s managed by the controller one or many VPEFs can use the tunnel in the data plane if they have traffic destined for the tunnel destination. If entropy label is supported the XR controller indicates it to be an appropriate source VPEF which computes the value of the entropy label and inserts it into the data.

It will be noted that one of the primary challenges of handling RSVP messages in an NFV network resides on the nodes of the IP MPLS SR network which nodes may be referred to herein as P nodes connecting the forwarding engines or VPEFs. In particular because the VPEFs do not support control plane functions to process RSVP messages the messages must be forwarded to the control plane engine or XR controller providing control plane functions to the VPEF when RSPV TE signaled LSPs originate or terminate on the VPEF.

Turning now to illustrated therein is an NFV network environment comprising a number of forwarding engines or VPEFs A D interconnected via an SR network comprising a plurality of P nodes A F. As with the forwarding engines A D each of forwarding engines A D implements only forwarding i.e. data plane functions control plane functions for each of the engines are proxied by a respective XR controller A B. An SDN controller is provided for learning the topology of the SR network e.g. via Border Gateway Protocol Link State Distribution or other means and then providing a path through the network from a source host to a destination host in response to a request from an SDN application as described above with reference to SDN controller .

As previously noted because VPEFs do not support control plane functions required for processing RSVP messages RSVP messages destined for a VPEF must be forwarded to the XR controller responsible for the VPEF. Referring to it will be assumed for the sake of an example that an RSVP TE LSP is established between VPEF B source and VPEF D destination . As shown in while data packets may travel directly from VPEF B to VPEF D corresponding RSVP packets must originate from the XR controller responsible for VPEF B i.e. XR controller A and terminate on the XR controller responsible for VPEF D i.e. XR controller B . This may be accomplished using one of at least two arrangements.

A first arrangement for addressing the challenges of handling RSVP messages in NFV networks requires that the P node connected to a VPEF must be able to identify the XR controller handling the VPEF to which RSVP signaling messages are destined e.g. PATH message to the tail end VPEF RESV message to the head end VPEF . In this arrangement the XR controller is responsible for advertising the address es of the VPEF s that it handles. The network node or P node connecting the VPEF typically forwards all packets data and control destined for the VPEF directly to the VPEF itself as opposed to the XR controller that handles the VPEF. It will be recognized however that RSVP signaling messages which are control plane messages must be sent to the XR controller for processing. In this arrangement therefore the P node identifies RSVP signaling messages for a particular VPEF and instead of forwarding them to the VPEF forwards them to the XR controller that handles the VPEF. As previously noted this arrangement requires each P node to be aware of the address of the XR controller that advertised the source destination address of each VPEF. This arrangement further requires each P node to change the original IP address of RSVP messages received at the P node from that of a VPEF to that of the XR controller that advertised the IP address of the VPEF. Upon receiving an RSVP packet from the P node an XR controller can receive the actual source destination IP address from RSVP objects within the packet and process the packet accordingly.

In a second arrangement for addressing the challenge of challenges of handling RSVP messages in NFV networks a P node that receives an RSVP packet for a particular VPEF forwards the packet to the VPEF itself. In this second arrangement each VPEF maintains a Generic Routing Encapsulation GRE tunnel to an XR controller that handles i.e. is responsible for control plane functions for the VPEF. Upon receiving an RSVP packet from a P node the VPEF forwards the packet to the XR controller responsible for the VPEF. Upon receipt of an RSVP packet from a VPEF the XR controller processes the packet and performs the necessary LSP end point functions. The second arrangement does not require any change in the way RSVP packets are processed on the P nodes however the trade off is that a GRE tunnel must be maintained between each VPEF and its responsible XR controller which can be costly.

In summary the first arrangement described with reference to requires the P node to be able to identify RSVP packets destined for a VPEF and to forward those packets to the appropriate XR controller. The second arrangement described with reference to requires that a GRE tunnel be maintained between each VPEF and the XR controller that handles control plane functions for that VPEF. In both arrangements the XR controller processes the RSVP packet performs RSVP end point functions on behalf of the VPEF to which the RSVP packet was originally destined. Additionally both arrangements enable network operators to establish TE LSPs having end points the control plane functions of which are virtualized.

Turning to illustrated therein is a simplified block diagram of an example machine or apparatus which in certain embodiments may comprise a controller including but not limited to controllers A B or a network node including but not limited to VPEFs A D nodes A F that may be implemented in embodiments illustrated in and described with reference to the FIGURES provided herein. The example machine corresponds to network elements and computing devices that may be deployed in environments . In particular illustrates a block diagram representation of an example form of a machine within which software and hardware cause machine to perform any one or more of the activities or operations discussed herein. As shown in machine may include a processor a main memory secondary storage a wireless network interface a wired network interface A a virtual network interface B a user interface and a removable media drive including a computer readable medium . A bus such as a system bus and a memory bus may provide electronic communication between processor and the memory drives interfaces and other components of machine . Machine may be a physical or a virtual appliance for example a virtual router running on a hypervisor or running within a container.

Processor which may also be referred to as a central processing unit CPU can include any general or special purpose processor capable of executing machine readable instructions and performing operations on data as instructed by the machine readable instructions. Main memory may be directly accessible to processor for accessing machine instructions and may be in the form of random access memory RAM or any type of dynamic storage e.g. dynamic random access memory DRAM . Secondary storage can be any non volatile memory such as a hard disk which is capable of storing electronic data including executable software files. Externally stored electronic data may be provided to computer through one or more removable media drives which may be configured to receive any type of external media such as compact discs CDs digital video discs DVDs flash drives external hard drives etc.

Wireless wired and virtual network interfaces A and B can be provided to enable electronic communication between machine and other machines or nodes via networks e.g. networks . In one example wireless network interface could include a wireless network controller WNIC with suitable transmitting and receiving components such as transceivers for wirelessly communicating within a network. Wired network interface A can enable machine to physically connect to a network by a wire line such as an Ethernet cable. Both wireless and wired network interfaces and A may be configured to facilitate communications using suitable communication protocols such as for example Internet Protocol Suite TCP IP . Machine is shown with both wireless and wired network interfaces and A for illustrative purposes only. While one or more wireless and hardwire interfaces may be provided in machine or externally connected to machine only one connection option is needed to enable connection of machine to a network.

A user interface may be provided in some machines to allow a user to interact with the machine . User interface could include a display device such as a graphical display device e.g. plasma display panel PDP a liquid crystal display LCD a cathode ray tube CRT etc. . In addition any appropriate input mechanism may also be included such as a keyboard a touch screen a mouse a trackball voice recognition touch pad and an application programming interface API etc.

Removable media drive represents a drive configured to receive any type of external computer readable media e.g. computer readable medium . Instructions embodying the activities or functions described herein may be stored on one or more external computer readable media. Additionally such instructions may also or alternatively reside at least partially within a memory element e.g. in main memory or cache memory of processor of machine during execution or within a non volatile memory element e.g. secondary storage of machine . Accordingly other memory elements of machine also constitute computer readable media. Thus computer readable medium is meant to include any medium that is capable of storing instructions for execution by machine that cause the machine to perform any one or more of the activities disclosed herein.

Not shown in is additional hardware that may be suitably coupled to processor and other components in the form of memory management units MMU additional symmetric multiprocessing SMP elements physical memory peripheral component interconnect PCI bus and corresponding bridges small computer system interface SCSI integrated drive electronics IDE elements etc. Machine may include any additional suitable hardware software components modules interfaces or objects that facilitate the operations thereof. This may be inclusive of appropriate algorithms and communication protocols that allow for the effective protection and communication of data. Furthermore any suitable operating system may also be configured in machine to appropriately manage the operation of the hardware components therein.

The elements shown and or described with reference to machine are intended for illustrative purposes and are not meant to imply architectural limitations of machines such as those utilized in accordance with the present disclosure. In addition each machine may include more or fewer components where appropriate and based on particular needs and may run as virtual machines or virtual appliances. As used herein in this Specification the term machine is meant to encompass any computing device or network element such as servers virtual servers logical containers routers personal computers client computers network appliances switches bridges gateways processors load balancers wireless LAN controllers firewalls or any other suitable device component element or object operable to affect or process electronic information in a network environment.

In example implementations at least some portions of the activities outlined herein may be implemented in software in for example forwarding engines A D controllers A B and nodes A D and corresponding devices illustrated in . In some embodiments this software could be received or downloaded from a web server provided on computer readable media or configured by a manufacturer of a particular element in order to provide this system for implementing autonomic LISP for enabling a secure hybrid cloud extension in accordance with features of embodiments described herein. In some embodiments one or more of these features may be implemented in hardware provided external to these elements or consolidated in any appropriate manner to achieve the intended functionality.

In one example implementation forwarding engines A D controllers A B and nodes A D and corresponding devices illustrated in are network elements or computing devices which may be implemented as physical and or virtual devices and may include any suitable hardware software components modules or objects that facilitate the operations thereof as well as suitable interfaces for receiving transmitting and or otherwise communicating data or information in a network environment. This may be inclusive of appropriate algorithms and communication protocols that allow for the effective exchange of data or information.

Furthermore in the embodiments described and shown herein some of the processors and memory elements associated with the various network elements may be removed or otherwise consolidated such that a single processor and a single memory location are responsible for certain activities. Alternatively certain processing functions could be separated and separate processors and or physical machines could implement various functionalities. In a general sense the arrangements depicted in the FIGURES may be more logical in their representations whereas a physical architecture may include various permutations combinations and or hybrids of these elements. It is imperative to note that countless possible design configurations can be used to achieve the operational objectives outlined here. Accordingly the associated infrastructure has a myriad of substitute arrangements design choices device possibilities hardware configurations software implementations equipment options etc.

In some of the example embodiments one or more memory elements e.g. main memory secondary storage computer readable medium can store data used for the automatic configuration and registration operations described herein. This includes at least some of the memory elements being able to store instructions e.g. software logic code etc. that are executed to carry out the activities described in this Specification. A processor can execute any type of instructions associated with the data to achieve the operations detailed herein in this Specification. In one example one or more processors e.g. processor could transform an element or an article e.g. data from one state or thing to another state or thing. In another example the activities outlined herein may be implemented with fixed logic or programmable logic e.g. software computer instructions executed by a processor and the elements identified herein could be some type of a programmable processor programmable digital logic e.g. a field programmable gate array FPGA an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM an ASIC that includes digital logic software code electronic instructions flash memory optical disks CD ROMs DVD ROMs magnetic or optical cards other types of machine readable mediums suitable for storing electronic instructions or any suitable combination thereof.

Components of network environment may keep information in any suitable type of memory e.g. random access memory RAM read only memory ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM etc. software hardware or in any other suitable component device element or object where appropriate and based on particular needs. Any of the memory items discussed herein should be construed as being encompassed within the broad term memory element. The information being read used tracked sent transmitted communicated or received by network environment could be provided in any database register queue table cache control list or other storage structure all of which can be referenced at any suitable timeframe. Any such storage options may be included within the broad term memory element as used herein. Similarly any of the potential processing elements and modules described in this Specification should be construed as being encompassed within the broad term processor. 

Note that with the numerous examples provided herein interaction may be described in terms of two three four or more network elements. However this has been done for purposes of clarity and example only. It should be appreciated that the system can be consolidated in any suitable manner. Along similar design alternatives any of the illustrated computers modules components and elements of the FIGURES may be combined in various possible configurations all of which are clearly within the broad scope of this Specification. In certain cases it may be easier to describe one or more of the functionalities of a given set of flows by only referencing a limited number of network elements. It should be appreciated that embodiments described herein as shown in the FIGURES and teachings thereof are readily scalable and can accommodate a large number of components as well as more complicated sophisticated arrangements and configurations. Accordingly the examples provided should not limit the scope or inhibit the broad teachings of the system as potentially applied to a myriad of other architectures.

It is also important to note that the operations and steps described with reference to the preceding FIGURES illustrate only some of the possible scenarios that may be executed by or within the system. Some of these operations may be deleted or removed where appropriate or these steps may be modified or changed considerably without departing from the scope of the discussed concepts. In addition the timing of these operations may be altered considerably and still achieve the results taught in this disclosure. The preceding operational flows have been offered for purposes of example and discussion. Substantial flexibility is provided by the system in that any suitable arrangements chronologies configurations and timing mechanisms may be provided without departing from the teachings of the discussed concepts.

In the foregoing description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the disclosed embodiments. It will be apparent to one skilled in the art however that the disclosed embodiments may be practiced without these specific details. In other instances structure and devices are shown in block diagram form in order to avoid obscuring the disclosed embodiments. In addition references in the Specification to one embodiment example embodiment an embodiment another embodiment some embodiments various embodiments other embodiments alternative embodiment etc. are intended to mean that any features e.g. elements structures modules components steps operations characteristics etc. associated with such embodiments are included in one or more embodiments of the present disclosure.

Numerous other changes substitutions variations alterations and modifications may be ascertained to one skilled in the art and it is intended that the present disclosure encompass all such changes substitutions variations alterations and modifications as falling within the scope of the appended claims. In order to assist the United States Patent and Trademark Office USPTO and additionally any readers of any patent issued on this application in interpreting the claims appended hereto Applicant wishes to note that the Applicant a does not intend any of the appended claims to invoke paragraph six 6 of 35 U.S.C. section 112 as it exists on the date of the filing hereof unless the words means for or step for are specifically used in the particular claims and b does not intend by any statement in the specification to limit this disclosure in any way that is not otherwise reflected in the appended claims.

