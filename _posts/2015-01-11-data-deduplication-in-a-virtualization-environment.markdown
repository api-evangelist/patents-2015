---

title: Data deduplication in a virtualization environment
abstract: Techniques are described herein that are capable of optimizing (i.e., deduplicating) data in a virtualization environment. For example, optimization designations (a.k.a. deduplication designations) may be assigned to respective regions of a virtualized storage file. A virtualized storage file is a file that is configured to be mounted as a disk or a volume to provide a file system interface for accessing hosted files. In accordance with this example, each optimization designation indicates an extent to which the respective region is to be optimized (i.e., deduplicated). In another example, a virtualized storage file is mounted to provide a virtual disk that includes hosted files. In accordance with this example, optimization designations are assigned to the respective hosted files. In further accordance with this example, each optimization designation indicates an extent to which the respective hosted file is to be optimized.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09342244&OS=09342244&RS=09342244
owner: Microsoft Technology Licensing, LLC
number: 09342244
owner_city: Redmond
owner_country: US
publication_date: 20150111
---
This application is a continuation of U.S. patent application Ser. No. 12 967 984 filed Dec. 14 2010 the entirety of which is incorporated by reference herein.

Data deduplication also known as data optimization is the act of reducing the physical amount of bytes of data which need to be stored on disk or transmitted across a network without compromising the fidelity or integrity of the original data. Data deduplication reduces the storage capacity needed to store data and may therefore lead to savings in terms of storage hardware costs and data management costs. Data deduplication provides a solution for handling the rapid growth of digitally stored data.

Data deduplication may be performed according to one or more techniques to eliminate redundancy within and between persistently stored files. For instance according to one technique unique regions of data that appear multiple times in one or more files may be identified and a single copy of those identified unique regions of data may be physically stored. References to those identified unique regions of data also referred to as data chunks may be stored to indicate the files and the locations in the files that include them. This technique is commonly referred to as single instancing. Compression of data may be performed in addition to single instancing. Other data reduction techniques may also be implemented as part of a data deduplication solution.

Optimized data in this specification refers to data that has been optimized or deduplicated by one or more data deduplication techniques such as single instancing of chunks and compression. Optimized streams refer to streams that were deduplicated or in other words their data was optimized using data deduplication techniques.

Once data is optimized the data may be accessed by reversing the effects of the optimization i.e. de optimizing the optimized data for example by performing an inverse dedup operation and or a decompression operation with respect to the optimized data. However de optimization causes a delay with respect to accessing the data. A greater amount of data results in a longer latency. Moreover such latency may occur each time the data is accessed unless a de optimized version of the data is stored for access on a storage device. Furthermore de optimization often consumes substantial resources e.g. memory central processing unit CPU disk I O etc. of a device which may negatively affect a main workload that is running on the device. Accordingly frequent de optimization may result in relatively inefficient utilization of the device s resources.

Storage virtualization is the act of abstracting logical storage from physical storage such that data that is stored with respect to the physical storage may be accessed via the logical storage without regard to the structure of the physical storage. For example a host device may execute one or more virtual machine instances. In accordance with this example the host device may emulate disks to the virtual machine instance s . The emulated disks are stored as files on the physical storage of the host device. In another example a host device may execute a driver that presents a virtual disk to the operating system of the host device. In accordance with this example the virtual disk is presented by mounting a file that is stored on the physical storage of the host device. Files that are mounted to emulate disks i.e. to present virtual disks are referred to as virtualized storage files.

Systems that utilize data optimization may be characterized by relatively low hardware e.g. storage costs and or relatively low data management e.g. backup costs. However when data optimization is performed in a virtualized environment issues commonly arise. For example if the data in a virtualized storage file is fully optimized the latency that is associated with accessing the data may unduly degrade the performance of a host device especially if regions of the virtualized storage file are frequently accessed. In another example it may not be desirable to optimize some files that are stored in a virtual disk due to sensitivity of the files and or the type of data that they include. In a non virtualized environment this issue may be resolved by applying a policy based on the files. However in a virtualized environment the files are located in a virtualized storage file and are therefore not visible to the host device. A host device typically has no way to know whether regions of a virtualized storage file are not optimizable.

Various approaches are described herein for among other things optimizing i.e. deduplicating data in a virtualization environment. For example optimization designations a.k.a. deduplication designations may be assigned to respective regions of a virtualized storage file or to respective hosted files that are included in a virtual disk that is provided as a result of mounting the virtualized storage file. A virtualized storage file is a file that is configured to be mounted as a disk or a volume to provide a file system interface for accessing hosted files. In accordance with this example each optimization designation indicates an extent to which the respective region or the respective hosted file is to be optimized i.e. deduplicated .

An example method is described in which a virtualized storage file is mounted to provide a virtual disk that includes multiple hosted files. Each hosted file is mapped to one or more regions of the virtualized storage file. An optimization designation is assigned to each region based on at least one property of the hosted file that is mapped to that region. Each optimization designation indicates an extent to which the respective region is to be optimized. Each region is optimized to the extent that is indicated by the respective optimization designation that is assigned to that region.

Another example method is described in which a virtualized storage file is mounted to provide a virtual disk that includes hosted files. Optimization designations are assigned to the respective hosted files. Each optimization designation is assigned to the respective hosted file based on at least one property of that hosted file. Each optimization designation indicates an extent to which a respective hosted file is to be optimized.

Yet another example method is described in which optimization designations are assigned to respective regions of a virtualized storage file. The regions correspond to respective file offsets a.k.a. virtualized storage file offsets in the virtualized storage file. Each optimization designation is assigned to the respective region based on at least one property of a hosted file that is mapped to the respective file offset that corresponds to that region. Each optimization designation indicates an extent to which the respective region is to be optimized. Each region is optimized to the extent that is indicated by the respective optimization designation that is assigned to that region.

An example system is described that includes a mounting module a mapping module an assignment module and an optimization module. The mounting module is configured to mount a virtualized storage file to provide a virtual disk that includes multiple hosted files. The mapping module is configured to map each hosted file to one or more regions of the virtualized storage file. The assignment module is configured to assign an optimization designation to each region based on at least one property of the hosted file that is mapped to that region. Each optimization designation indicates an extent to which the respective region is to be optimized. The optimization module is configured to optimize each region to the extent that is indicated by the respective optimization designation that is assigned to that region.

Another example system is described that includes a mounting module and an assignment module. The mounting module is configured to mount a virtualized storage file to provide a virtual disk that includes hosted files. The assignment module is configured to assign optimization designations to the respective hosted files. Each optimization designation is assigned to the respective hosted file based on at least one property of that hosted file. Each optimization designation indicates an extent to which a respective hosted file is to be optimized.

Yet another example system is described that includes an assignment module and an optimization module. The assignment module is configured to assign optimization designations to respective regions of a virtualized storage file. The regions correspond to respective file offsets in the virtualized storage file. Each optimization designation is assigned to the respective region based on at least one property of a hosted file that is mapped to the respective file offset that corresponds to that region. Each optimization designation indicates an extent to which the respective region is to be optimized. The optimization module is configured to optimize each region to the extent that is indicated by the respective optimization designation that is assigned to that region.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Moreover it is noted that the invention is not limited to the specific embodiments described in the Detailed Description and or other sections of this document. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The features and advantages of the disclosed technologies will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit s in the corresponding reference number.

The following detailed description refers to the accompanying drawings that illustrate exemplary embodiments of the present invention. However the scope of the present invention is not limited to these embodiments but is instead defined by the appended claims. Thus embodiments beyond those shown in the accompanying drawings such as modified versions of the illustrated embodiments may nevertheless be encompassed by the present invention.

References in the specification to one embodiment an embodiment an example embodiment or the like indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Furthermore when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the relevant art s to implement such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Example embodiments described herein are capable of optimizing i.e. deduplicating data in a virtualization environment. In some example embodiments optimization designations a.k.a. deduplication designations are assigned to respective regions of a virtualized storage file. A virtualized storage file is a file that is configured to be mounted as a disk or a volume to provide a file system interface for accessing hosted files. In accordance with these example embodiments each optimization designation indicates an extent to which the respective region is to be optimized i.e. deduplicated . Each region may be optimized to the extent that is indicated by the respective optimization designation that is assigned to that region.

In other example embodiments a virtualized storage file is mounted to provide a virtual disk that includes hosted files. For instance mounting the virtualized storage file may enable an operating system that is executing on a host device to recognize logical volumes hosted files and or file systems that are associated with the virtual disk. Hosted files are files that are stored on a virtual disk based on a virtualized storage file. In accordance with these example embodiments optimization designations are assigned to the respective hosted files to indicate extents to which the respective hosted files are to be optimized.

Optimization designations may be defined in any suitable manner. For instance a first optimization designation may indicate that a first region of a virtualized storage file or a first hosted file is to be compressed but not deduplicated. A second optimization designation may indicate that a second region or a second hosted file is to be deduplicated but not compressed. A third optimization designation may indicate that a third region or a third hosted file is to be compressed and deduplicated. A fourth optimization designation may indicate that a fourth region or a fourth hosted file is to be neither compressed nor deduplicated. Fifth and sixth optimization designations may indicate that fifth and sixth regions or fifth and sixth hosted files are to be compressed using respective first and second compression techniques. Seventh and eighth optimization designations may indicate that seventh and eighth regions or seventh and eighth hosted files are to be deduplicated using respective first and second deduplication techniques and so on.

In an example embodiment each optimization designation indicates a respective optimization policy i.e. deduplication policy or a respective optimization level i.e. deduplication level within a global policy. An optimization policy is a set of rules that defines a manner in which hosted files or regions of a virtualized storage file are to be optimized based on designated criteria. The optimization policy may define multiple optimization levels. Each optimization level indicates one or more data optimization i.e. data deduplication techniques that are to be performed with respect to the hosted files or regions that satisfy a respective subset of the designated criteria. For example a first optimization level may indicate that no optimization is to be performed with respect to hosted files or regions that are associated with the first optimization level. The extent to which a hosted file or a region is optimized may increase as the optimization level that is associated with the hosted file or the region increases. In accordance with this example increasing an optimization level that is associated with a hosted file or a region may increase storage savings but may consume more computational resources and or add latency to data access operations that are performed with respect to the hosted file or the region. It will be recognized that an optimization designation that indicates an optimization policy may further indicate an optimization level that is defined by that optimization policy.

Example techniques described herein have a variety of benefits as compared to conventional techniques for optimizing data in a virtualized environment. For instance some example techniques may optimize the various regions of a virtualized storage file or various hosted files to different degrees. Some example techniques may partially optimize a virtualized storage file meaning that one or more regions of the virtualized storage file are not optimized. An extent to which the regions of a virtualized storage file are optimized may be based on any of a variety of factors including but not limited to access patterns regarding the regions or regarding hosted files that correspond to the regions latencies that are associated with accessing the regions or the hosted files that correspond to the regions the type s of data that are stored in hosted files that correspond to the regions classification s of the hosted files the intended uses of the hosted files other characteristics that are associated with the hosted files etc. Some example techniques may consume less time and or fewer resources of a host device than conventional techniques. For instance example techniques that utilize incremental optimization may reduce the time and or the amount of resources that are used for subsequent optimizations regarding a region once the region is initially optimized.

Host device includes storage and an optimizer . Storage stores a virtualized storage file . Virtualized storage file includes multiple regions . Regions may be defined based on access patterns that are associated with the regions offsets a.k.a. virtualized storage file offsets in virtualized storage file that correspond to hosted files that are stored on a virtual disk e.g. virtual disk and or any other suitable factor s . For instance an access pattern may include a time at which a region was most recently accessed a number of times that the region is accessed a frequency with which the region is accessed a time at which the region was most recently modified a number of times that the region is modified a frequency with which the region is modified etc. The number of bits in each region may be based on any of a variety of factors including but not limited to an average number of bits included in hosted files that correspond to the regions an amount of memory that is available for tracking the regions etc. The number of bits in each region may be the same or different. The number of bits in each region may be fixed or variable.

Regions are shown to be arranged as a vector of N regions labeled as R1 R2 . . . RN for illustrative purposes and are not intended to be limiting. It will be recognized that virtualized storage file may include any suitable number and or configuration of regions.

Optimizer is configured to optimize i.e. deduplicate regions of virtualized storage file or hosted files that correspond to the regions based on optimization designations a.k.a. deduplication designations that are assigned to the regions or the hosted files respectively. The optimization designations may be based on properties of the hosted files and or any other suitable factor s . Example properties of a hosted file include but are not limited to an access pattern of the hosted file a latency that is associated with accessing the hosted file heuristics regarding the hosted file a classification of the hosted file a format of the hosted file a type of the hosted file an intended use of the hosted file e.g. whether the hosted file is to be used to execute virtual machine and or during a system boot operation with regard to host device and or another virtual machine etc. Example formats of a hosted file include but are not limited to an Adobe PDF format a Microsoft Office e.g. Word Excel Visio etc. format a WordPerfect format an extensible markup language XML format etc.

In some example embodiments optimizer is capable of mounting virtualized storage file to provide virtual disk as indicated by arrow . Virtual disk is shown in to be mounted on a virtual machine which is configured to execute on host device . It will be recognized however that virtual disk may be mounted on host device rather than on virtual machine . For example host device need not necessarily include virtual machine . Mounting virtualized storage file on host machine or virtual disk may enable optimizer to recognize virtual disk as storage rather than as a file. For instance mounting virtualized storage file may enable optimizer to determine logical volume s and or file system s that are associated with virtual disk for purposes of optimizing regions or hosted files that are included in virtual disk . Techniques for optimizing regions e.g. regions and or hosted files are described in detail below with reference to .

As shown in the method of flowchart begins at step . In step a virtualized storage file is mounted to provide a virtual disk that includes multiple hosted files. In an example implementation mounting module mounts the virtualized storage file to provide the virtual disk.

At step each hosted file is mapped to one or more regions of the virtualized storage file. In an example implementation mapping module maps each hosted file to one or more regions of the virtualized storage file.

At step an optimization designation is assigned to each region based on at least one property of the hosted file that is mapped to that region. Each optimization designation indicates an extent to which the respective region is to be optimized i.e. deduplicated . For instance each optimization designation may indicate a respective optimization policy i.e. deduplication policy and or optimization level i.e. deduplication level in an optimization policy. The optimization designation may be assigned to each region in accordance with a heuristic technique though the scope of the example embodiments is not limited in this respect. In an example implementation assignment module assigns the optimization designations to the respective regions.

In an example embodiment an optimization designation is assigned to each region based on a number of times that the hosted file that is mapped to that region is accessed a frequency with which the hosted file that is mapped to that region is accessed a time at which the hosted file that is mapped to that region is most recently accessed a number of times that the hosted file that is mapped to that region is modified a frequency with which the hosted file that is mapped to that region is modified a time at which the hosted file that is mapped to that region is most recently modified a latency that is associated with accessing the hosted file that is mapped to that region and or any combination thereof. Each frequency time number of times and or latency may be determined with respect to any suitable period of time e.g. since creation of the hosted file or in a designated time interval .

In another example embodiment an optimization designation is assigned to each region based on a classification of the hosted file that is mapped to that region. For example one or more of the hosted files may be classified as being on hold meaning that those hosted file s are not to be optimized due to compliance regulations. In another example the classification of each hosted file may reflect a priority that is associated with that hosted file. In accordance with this example a relatively greater priority may correspond to a relatively lesser extent of optimization and a relatively lesser priority may correspond to a relatively greater extent of optimization. In one aspect the priority of a hosted file may be based on a title or rank of the creator of the hosted file. In accordance with this aspect a hosted file that is created by a vice president of a company may be associated with a greater priority than a hosted file that is created by an entry level worker of the company.

In yet another example embodiment an optimization designation is assigned to each region based on a format of the hosted file that is mapped to that region. Example formats of a hosted file include but are not limited to an Adobe PDF format a Microsoft Office e.g. Word Excel Visio etc. format a WordPerfect format an extensible markup language XML format etc.

In another example embodiment an optimization designation is assigned to each region based on an intended use of the hosted file that is mapped to that region. For example an optimization designation may be assigned to each region based on whether the hosted file that is mapped to that region is configured to be used in a system boot operation with respect to a host device e.g. host device and or a virtual machine e.g. virtual machine . In another example an optimization designation may be assigned to each region based on whether the hosted file that is mapped to that region is configured to be used to execute a virtual machine.

In still another example embodiment an optimization designation is assigned to each region based on whether the hosted file that is mapped to that region is a temporary file. A temporary file is a file that is created to temporarily store information in order to free memory for other purposes and or in order to mitigate or prevent loss of data when a software program performs a specified operation.

At step each region is optimized i.e. deduplicated to the extent that is indicated by the respective optimization designation that is assigned to that region. In an example implementation optimization module optimizes each region.

In some example embodiments one or more steps and or of flowchart may not be performed. Moreover steps in addition to or in lieu of steps and or may be performed.

It will be recognized that optimizer may not include one or more of assignment module optimization module mounting module mapping module indicator module determination module and or generation module . Furthermore optimizer may include modules in addition to or in lieu of assignment module optimization module mounting module mapping module indicator module determination module and or generation module . Indicator module is described below with reference to flowchart of . Determination module and generation module are described below with reference to flowchart of .

As shown in the method of flowchart begins at step . In step a snapshot of the virtualized storage file is mounted to provide a volume that is arranged in accordance with a file system that indicates disk offsets that correspond to the respective hosted files. A snapshot of a virtualized storage file is configured to appear as a copy of the virtualized storage file with respect to an instance of time though the snapshot need not necessarily be an actual copy of the virtualized storage file. In an example implementation snapshot mounter mounts the snapshot of the virtualized storage file to provide the volume.

In an example embodiment the snapshot is mounted on a host device. For example the snapshot may be mounted on the host device and the virtualized storage file may be mounted on a virtual machine that is executing on the host device. In another example the snapshot and the virtualized storage file may be mounted on the host device.

At step the volume is analyzed to determine the disk offsets. In an example implementation volume analyzer analyzes the volume to determine the disk offsets.

At step the disk offsets are mapped to respective file offsets in the virtualized storage file. The file offsets correspond to respective regions of the virtualized storage file. In an example implementation offset mapper maps the disk offsets to the respective file offsets in the virtualized storage file.

As shown in the method of flowchart includes step . In step an on disk format of a file system that is associated with the virtual disk is reviewed to obtain e.g. locate and or retrieve metadata that indicates that each hosted file corresponds to one or more file offsets in the virtualized storage file. The file offsets correspond to respective regions of the virtualized storage file. In an example implementation review module reviews the on disk format of the file system that is associated with the virtual disk to obtain the metadata.

In an example embodiment the file system is a New Technology File System NTFS and the on disk format is associated with a master file table MFT that is included in the NTFS. An MFT is a file that includes at least one entry for each hosted file that is included in a volume of the NTFS. Information about each hosted file including but not limited to the size time and date stamps permissions data content and or aforementioned metadata of the hosted file is stored in one or more MFT entries or in a space outside the MFT that is described by one or more MFT entries. Accordingly the metadata may be obtained from the MFT or from a space that is described by the MFT.

It will be recognized that mapping module may not include one or more of snapshot mounter volume analyzer offset mapper and or review module . Furthermore mapping module may include modules in addition to or in lieu of snapshot mounter volume analyzer offset mapper and or review module .

In some example embodiments each region of a virtualized storage file is incrementally optimized to the extent that is indicated by the respective optimization designation that is assigned to that region. For example an optimizer e.g. optimizer may monitor the regions to determine changes with respect to the regions since the most recent optimization of the regions. In accordance with this example the optimizer may create a differential file a.k.a. difference file that includes the changes. For instance the optimizer may optimize the regions on a periodic basis e.g. in accordance with a designated schedule . The optimizer may optimize a separate differential file for each successive period to include the changes that occurred during that period.

For instance depicts a flowchart of an example method for optimizing i.e. deduplicating data using one or more difference files in accordance with an embodiment. Flowchart may be performed by optimizer of host device shown in for example. For illustrative purposes flowchart is described with respect to optimizer shown in . Further structural and operational embodiments will be apparent to persons skilled in the relevant art s based on the discussion regarding flowchart .

As shown in the method of flowchart begins at step . In step a region of a virtualized storage file is optimized to an extent that is indicated by an optimization designation that is assigned to the region to provide an optimized representation of the region. In an example implementation optimization module optimizes the region of the virtualized storage file.

At step one or more changes are determined that occur with respect to the region since optimizing the region. In an example implementation determination module determines the one or more changes.

At step a first difference file is generated that specifies the one or more changes. For instance optimizing the region to provide the optimized representation of the region may trigger generation of the first difference file. In an example implementation generation module generates the first difference file.

At step the first difference file is optimized to the extent that is indicated by the optimization designation without optimizing the optimized representation of the region to the extent that is indicated by the optimization designation. In an example implementation optimization module optimizes the first difference file.

At step at least one change is determined that occurs with respect to the region since optimizing the first difference file. In an example implementation determination module determines the at least one change.

At step a second difference file is generated that specifies the at least one change. For instance optimizing the first difference file may trigger generation of the second difference file. In an example implementation generation module generates the second difference file.

At step the second difference file is optimized to the extent that is indicated by the optimization designation without optimizing the optimized representation of the region to the extent that is indicated by the optimization designation and without re optimizing the first difference file to the extent that is indicated by the optimization designation. In an example implementation optimization module optimizes the second difference file.

In some example embodiments one or more steps and or of flowchart may not be performed. Moreover steps in addition to or in lieu of steps and or may be performed. For example upon completion of step the method of flowchart may continue with generating and optimizing successive difference files that specify respective changes that occur with respect to the region. For instance change s since the most recent optimization may be determined another difference file may be generated that specifies the change s and that difference file may be optimized to the extent that is indicated by the optimization designation without optimizing any of the previously generated difference files and without optimizing the optimized representation of the region to the extent that is indicated by the optimization designation. These steps may be performed for successive difference files until the method of flowchart is discontinued. The optimized representation of the region and the corresponding difference files may be combined to provide an updated optimized representation of the region that incorporates the changes that are specified by the difference files.

As shown in the method of flowchart begins at step . In step a virtualized storage file is mounted on a virtual machine that has access to a host device to provide a virtual disk that includes multiple hosted files. For instance the virtual machine may be executing on the host device. In an example implementation mounting module mounts the virtualized storage file on the virtual machine that is executing on the host device. In accordance with this example implementation mounting module is implemented in the host device e.g. host device .

At step each hosted file is mapped to one or more regions of the virtualized storage file by the virtual machine using a file system application programming interface and a volume application programming interface. An application programming interface API is an interface that is implemented by a software module to enable the software module to interact with other software module s . A file system API is an API through which an operating system may interface with a file system. A volume API is an API through which an operating system may interface with a volume that is associated with a physical or virtual disk. In an example implementation mapping module maps each hosted file to one or more regions of the virtualized storage file. In accordance with this example implementation mapping module is implemented in the virtual machine e.g. virtual machine .

At step an optimization designation is assigned to each region based on at least one property of the hosted file that is mapped to that region. Each optimization designation indicates an extent to which the respective region is to be optimized i.e. deduplicated . In an example implementation assignment module assigns the optimization designations to the respective regions. In accordance with this example implementation assignment module is implemented in the virtual machine.

At step an optimization indicator a.k.a. a deduplication indicator is provided from the virtual machine to the host device. The optimization indicator specifies the optimization designations i.e. deduplication designations and includes information regarding the mapping of each hosted file to the respective one or more regions. In an example implementation indicator module provides the optimization indicator from the virtual machine to the host device. In accordance with this example implementation indicator module is implemented in the virtual machine.

In an example embodiment the optimization indicator does not include information regarding the mapping of each hosted file to the respective one or more regions. For example step may not be performed. In accordance with this example information regarding the mapping of each hosted file to the respective one or more regions may not exist or may not be accessible.

At step each region is optimized i.e. deduplicated by the host device to the extent that is indicated by the respective optimization designation that is assigned to that region based on the optimization indicator. In an example implementation optimization module optimizes each region based on the optimization indicator. In accordance with this example implementation optimization module is implemented in the host device.

In some example embodiments one or more steps and or of flowchart may not be performed. Moreover steps in addition to or in lieu of steps and or may be performed.

As shown in the method of flowchart begins at step . In step a virtualized storage file is mounted to provide a virtual disk that includes hosted files. In an example implementation mounting module mounts the virtualized storage file.

At step optimization designations a.k.a. deduplication designations are assigned to the respective hosted files. Each optimization designation is assigned to the respective hosted file based on at least one property of that hosted file. Each optimization designation indicates an extent to which a respective hosted file is to be optimized i.e. deduplicated . The optimization designations may be assigned to the respective regions in accordance with a heuristic technique though the scope of the example embodiments is not limited in this respect. In an example implementation assignment module assigns the optimization designations to the respective hosted files.

In an example embodiment an optimization designation is assigned to each hosted file based on a number of times that the hosted file is accessed a frequency with which the hosted file is accessed a time at which the hosted file is most recently accessed a number of times that the hosted file is modified a frequency with which the hosted file is modified a time at which the hosted file is most recently modified a latency that is associated with accessing the hosted file a classification of the hosted file a format of the hosted file whether the hosted file is configured to be used in a system boot operation with respect to a host device e.g. host device and or a virtual machine e.g. virtual machine whether the hosted file is configured to be used to execute a virtual machine whether the hosted file is a temporary file and or any combination thereof.

At step each hosted file is optimized i.e. deduplicated to the extent that is indicated by the respective optimization designation that is assigned to that hosted file. In an example implementation optimization module optimizes each hosted file.

In some example embodiments one or more steps and or of flowchart may not be performed. Moreover steps in addition to or in lieu of steps and or may be performed.

As shown in the method of flowchart begins at step . In step a determination is made that disk offsets that are associated with respective segments of a hosted file are changed to respective revised disk offsets in accordance with a defragmentation operation. The disk offsets correspond to respective virtualized storage file offsets that are associated with respective regions of a virtualized storage file. For example the defragmentation operation may change file system metadata to reflect that the disk offsets are changed to the respective revised disk offsets. In an example implementation mapping module determines that the disk offsets are changed to respective revised disk offsets. For instance mapping module may monitor movement of the segments of the hosted file to determine that the disk offsets are changed to the respective revised disk offsets.

At step a mapping of the virtualized storage file offsets is changed from the respective disk offsets to the respective revised disk offsets. In an example implementation mapping module changes the mapping of the virtualized storage file from the respective disk offsets to the respective revised disk offsets.

At step metadata that indicates an association of the regions of the virtualized storage file with references to optimized representations of the respective regions is modified in lieu of re optimizing the regions of the virtualized storage file to account for the revised disk offsets. For example deduplication of the virtualized storage file may involve chunking the virtualized storage file to provide the references to the optimized representations of the respective regions of the virtualized storage file. Such references may be referred to as chunks . In accordance with this example the deduplication may create metadata that links the regions of the virtualized storage file to their respective chunks. Defragmentation changes the locations of the regions in the virtualized storage file. The virtualized storage file offsets change accordingly. In accordance with this example the metadata may therefore be modified as set forth in step . It will be apparent to persons skilled in the relevant art s that in some embodiments re optimization of the regions to account for the revised disk offsets may be avoided by modifying the metadata that indicates the association of the regions with the references. In an example implementation optimization module modifies the metadata that indicates the association of the regions with the references.

Assignment module optimization module mounting module mapping module indicator module determination module generation module snapshot mounter volume analyzer offset mapper and review module may be implemented in hardware software firmware or any combination thereof. For example assignment module optimization module mounting module mapping module indicator module determination module generation module snapshot mounter volume analyzer offset mapper and or review module may be implemented as computer program code configured to be executed in one or more processors. In another example assignment module optimization module mounting module mapping module indicator module determination module generation module snapshot mounter volume analyzer offset mapper and or review module may be implemented as hardware logic electrical circuitry.

As shown in computer includes a processing unit a system memory and a bus that couples various system components including system memory to processing unit . Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. System memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS is stored in ROM .

Computer also has one or more of the following drives a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM DVD ROM or other optical media. Hard disk drive magnetic disk drive and optical disk drive are connected to bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable storage media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computer. Although a hard disk a removable magnetic disk and a removable optical disk are described other types of computer readable storage media can be used to store data such as flash memory cards digital video disks random access memories RAMs read only memories ROM and the like.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM. These programs include an operating system one or more application programs other program modules and program data . Application programs or program modules may include for example computer program logic for implementing assignment module optimization module mounting module mapping module indicator module determination module generation module snapshot mounter volume analyzer offset mapper review module flowchart including any step of flowchart flowchart including any step of flowchart flowchart including any step of flowchart flowchart including any step of flowchart flowchart including any step of flowchart flowchart including any step of flowchart and or flowchart including any step of flowchart as described herein.

A user may enter commands and information into the computer through input devices such as keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB .

A display device e.g. a monitor is also connected to bus via an interface such as a video adapter . In addition to display device computer may include other peripheral output devices not shown such as speakers and printers.

Computer is connected to a network e.g. the Internet through a network interface or adapter a modem or other means for establishing communications over the network. Modem which may be internal or external is connected to bus via serial port interface .

As used herein the terms computer program medium and computer readable medium are used to generally refer to media such as the hard disk associated with hard disk drive removable magnetic disk removable optical disk as well as other media such as flash memory cards digital video disks random access memories RAMs read only memories ROMs and the like. Such computer readable storage media are distinguished from and non overlapping with communication media. Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wireless media such as acoustic RF infrared and other wireless media. Example embodiments are also directed to such communication media.

As noted above computer programs and modules including application programs and other program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM. Such computer programs may also be received via network interface or serial port interface . Such computer programs when executed or loaded by an application enable computer to implement features of embodiments discussed herein. Accordingly such computer programs represent controllers of the computer .

Example embodiments are also directed to computer program products comprising software e.g. computer readable instructions stored on any computer useable medium. Such software when executed in one or more data processing devices causes a data processing device s to operate as described herein. Embodiments may employ any computer useable or computer readable medium known now or in the future. Examples of computer readable mediums include but are not limited to storage devices such as RAM hard drives floppy disks CD ROMs DVD ROMs zip disks tapes magnetic storage devices optical storage devices MEMS based storage devices nanotechnology based storage devices and the like.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. It will be apparent to persons skilled in the relevant art s that various changes in form and details can be made therein without departing from the spirit and scope of the invention. Thus the breadth and scope of the present invention should not be limited by any of the above described example embodiments but should be defined only in accordance with the following claims and their equivalents.

