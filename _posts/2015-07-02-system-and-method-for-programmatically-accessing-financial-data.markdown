---

title: System and method for programmatically accessing financial data
abstract: Systems and methods for programmatic access of external financial service systems. An application proxy instance is created that simulates an application of an external financial service system. A normalized account request is received for financial data of the external financial service system for a specified account. The normalized account request is provided by an external financial application system by using a financial data API of the financial platform system. Responsive to the normalized account request, communication is negotiated with the external financial service system by using the application proxy instance to access the requested financial data from the external financial service system by using a proprietary Application Programming Interface (API) of the external financial service system. The financial data is provided to the external financial application system as a response to the normalized account request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09449346&OS=09449346&RS=09449346
owner: PLAID TECHNOLOGIES, INC.
number: 09449346
owner_city: San Francisco
owner_country: US
publication_date: 20150702
---
This application is a continuation of co pending U.S. patent application Ser. No. 14 719 110 filed 21 May 2015 which claims the benefit of U.S. Provisional Application Ser. No. 62 001 452 filed on 21 May 2014 which is incorporated in its entirety by this reference.

This invention relates generally to the financial API field and more specifically to a new and useful system and method for programmatically accessing financial data in the financial API field.

Banks and other financial institutions hold considerable information relating to a user s current financial status and financial history. Such data is often presented through a bank s website or sometimes applications e.g. mobile applications . However such tools only provide information about the single institution and do not combine multiple institutions. Furthermore such institutions commonly do not expose a public version of an API providing a large barrier to other parties to solve such a problem. Some online products offer capabilities to merge information from different institutions. One such commonly used approach is to simulate user access of a bank website to access information. There are numerous problems with such solutions. Web crawling solutions such as these are slow to the end user because full pages have to be rendered and sometimes depend on executing javascript and other user interface simulations. Related to this such methods are more costly to the financial institutions because numerous web resources are consumed for a given piece of information. Additionally such a web crawling approach is highly dependent on the visual representation of the information. A change in the layout or visual representation can break such web crawling. Thus there is a need in the financial API field to create a new and useful system and method for programmatically accessing financial data. This invention provides such improved new and useful system and method.

The following description of preferred embodiments of the invention is not intended to limit the invention to these preferred embodiments but rather to enable any person skilled in the art to make and use this invention.

As shown in a system for programmatically accessing financial data of a preferred embodiment can include an application programming interface API service an application proxy system and at least one institution interface module e.g. the modules of . The system functions to provide programmatic access to an external service e.g. the services of that lacks exposed programmatic access. The external services are preferably proprietary and external financial services. The external services can include banks credit card providers investment services loan providers and other suitable financial institutions. Such institutions may have first party applications that enable users to access account information from a mobile or desktop application. Such first party applications will commonly use a proprietary or customized application programming interface API e.g. the APIs of . The API is commonly not public and not exposed. For example a developer is commonly prevented from registering an account and using an open API authentication approach to arbitrarily access the API resources. Additionally the API e.g. the APIs of of the institution is a non trivial customized interface protocol that isn t shared with other institutions each institution conforms to its own interface. The method can additionally function to provide a normalized interface e.g. the API service of to a plurality of external services e.g. the services of . The system enables access to an account within an institution by leveraging the application proxy system . A virtualized image or digital simulation of an application instance is maintained in the application proxy system and used to access the unexposed API e.g. of the institution. While the system is preferably applied to financial institutions the system may additionally or alternatively be applied to providing API access to other external entities with closed or limited API access.

The API service no which functions to provide a normalized customer user facing interface. The API interface is preferably normalized in the sense that the underlying API to the external institution e.g. that acts as the source of the information is abstracted away and the interface to different institution information is substantially similar. In some variations various aspects of the API no may be limited when interfacing with particular institutions. For example one institution may not support a feature such as digital check deposit while a second institution does. In this case the API no may define the API such that the API feature for check deposit is prevented for the first institution. The system and more specifically the API service is preferably used to provide an accessible API service to outside developers. As such the system is preferably a multi tenant system that allows numerous accounts to share use of the system . The system and more particularly the API may alternatively be a single tenant system. For example the system may be used as an internal system to a website providing an online financial management product.

The API service is preferably a RESTful API but may alternatively be any suitable API such as SOAP or custom protocol. The RESTful API works according to an HTTP request and response model. HTTP requests or any suitable request communication to the system preferably observe the principles of a RESTful design. RESTful is understood in this document to describe a Representational State Transfer architecture as is known in the art. The RESTful HTTP requests are preferably stateless thus each message communicated contains all necessary information for processing the request and generating a response. The API service no can include various resources which act as endpoints which act as a mechanism for specifying requested information or requesting particular actions. The resources can be expressed as URI s or resource paths. The RESTful API resources can additionally be responsive to different types of HTTP methods such as GET PUT POST and or DELETE.

The API service can provide an interface into a variety of information and action resources. Information relating to an account is preferably accessible through querying particular API resources. For example a list of transactions and information about each individual transaction may be accessible through different API calls. Information can additionally relate to account summary information account details such as address and contact information information about other parties such as the entities involved in a transaction and or any suitable information. The API may additionally be used to trigger or facilitate performing some action. For example an API call may be used in transferring money updating account information setting up alerts or performing any suitable action. Those skilled in the art will appreciate that such exemplary API features that any suitable API feature possibilities and semantic architecture may be used.

In one exemplary implementation an API call can support adding a user completing authentication accessing transaction information and other actions. For example an application may POST to a connect REST API resource to authenticate a user if the institution includes multi factor authentication then a connect step resource can be submitted to complete multi factor authentication credentials and then performing a GET on the connect resource can access transactional data. The API may additionally include informational resources to access information about entities involved in transactions. For example the API may allow a particular business resource to be accessed to obtain contextual information about the business such as name location and classification.

The application proxy system functions to manage the simulation of application access to an institution. The application proxy system operates in cooperation with an institution interface module e.g. one of the modules of to establish a data model or some data image that acts as a virtualized application instance an application proxy instance e.g. preferably serves as such a virtualized instance. From the perspective of the institution the proxy instance e.g. appears as an application e.g. the Bank application of installed on a physical user device e.g. user devices and of that is being used. In other words the requests received from the proxy instance are treated like requests from a mobile app desktop app or web based application of a user. The application proxy system preferably stores and maintains a plurality of application proxy instances e.g. proxy instances . The proxy instances are preferably configuration settings and properties that when used according to a defined institution interface e.g. an institution interface of an institution interface module will appear as requests from first party applications e.g. the application of the institution e.g. . A different proxy instance is preferably created and maintained for each account institution pair. A given user may have multiple accounts with different institutions. A proxy instance preferably includes a set of properties that can be used to authenticate the proxy instance with the institution system e.g. . The API service preferably provides a method to programmatically create a proxy instance for a user. The user preferably provides some account credentials that can be used in an initial registration of the proxy instance with the API of the institution. The proxy instance may be characterized as a set of properties that can be stored and maintained. Some of those properties may be automatically generated may be provided from the institution during negotiating registration may be properties of the application that is being simulated or include any suitable identifying and authenticating information. The properties may include a unique user identifier code an authentication token a MAC address e.g. a MAC address of a user device or any suitable information. When a request is made to a bank on behalf of a user the properties of the proxy instance are preferably invoked to gain access to the institution on behalf of the associated user.

An institution interface module e.g. one of the modules of functions to model the internal interface e.g. of at least one application e.g. the application with an external institution e.g. . An institution interface module is preferably established for each institution with which the system can interface. For example an institution interface module may exist for each bank and or credit card company that is available in the system. The institution interface module is preferably a set of rules and processes of a particular institution. The institution interface module preferably includes a proxy sub module that defines how the institution recognizes and or authenticates a particular application. Some banks may depend on the MAC address of a device e.g. a MAC address of user devices and some depend on asymmetric cryptography tokens while others may generate encrypted tokens. The proxy sub module is preferably used in establishing the proxy instance information. The institution interface module can additionally include institution protocol sub module which defines a mapping between provided API no functionality and the form and mode of communication with the external institution e.g. . The institution protocol sub module can define the headers body and other properties of messages sent to the associated institution. The protocol sub module may additionally define how data should be processed to form that message. In some cases the data may be encrypted in a standard or proprietary format which the protocol sub module can define. Additionally the protocol sub module can define the communication flow to fulfill a request. In some cases multiple requests may need to be made to complete a request objective. Other aspects of dealing with an interface e.g. of an external institution e.g. may additionally be built into the institution interface module such as multi factor authentication rules. An institution interface module is preferably constructed based on use of an actual application e.g. the application . The communication and or the source code can be parsed and analyzed to establish some or all of an institution interface module. In some implementations source code of a first party application e.g. the application of an external financial service is parsed and analyzed to establish some or all of an institution interface module for the external financial institution. In some implementations communication between an external financial service and a first party application e.g. the application of the external financial service is parsed and analyzed to establish some or all of an institution interface module for the external financial institution.

As shown in a method for programmatically accessing financial data of a preferred embodiment can include creating an application proxy instance S receiving a normalized account request S negotiating communication with an external interface through a proxy instance S returning results S. The method functions to provide programmatic access to an external service that lacks exposed programmatic access. The external services are preferably proprietary and external financial services. The external services can include banks credit card providers investment services loan providers and other suitable financial institutions. Such institutions may have first party applications e.g. the application of that enable users to access account information from a mobile or desktop application. Such first party applications will commonly use a proprietary or customized application programming interface API e.g. of . The API is commonly not public and not exposed. For example a developer is commonly prevented from registering an account and using an open API authentication approach to arbitrarily access the API resources. Additionally the API is a non trivial customized interface protocol that isn t shared with other institutions each institution conforms to its own interface. The method can additionally function to provide a normalized interface to a plurality of external services e.g. of . The method enables a programmatic interface into an account within an institution by leveraging an application proxy approach. A virtualized image or digital simulation of an application instance is maintained in the application proxy system and used to access the unexposed API e.g. of the institution. While the system is preferably applied to financial institutions the system may additionally or alternatively be applied to providing API access to other external entities with closed or limited API access. The method is preferably implemented through a system as described above e.g the system of but may alternatively be implemented by any suitable system.

Block S which includes creating an application proxy instance e.g. an application proxy instance of functions to establish a digital image of an application instance e.g. the application instance of for a selected institution e.g. the Bank of . Creating an application proxy instances is preferably initiated in response to receiving an initial request. The initial request is initiated by a user or entity e.g. User A or User B of interacting with a system of a developer account e.g. a system of the application instances of the user devices and of and the system of the developer account e.g. the system of the application instances will then send the initial request to the system . The user e.g. User A and User B of will preferably have an institution account in a system of the external institution e.g. an online bank account . An application proxy instance e.g. of can be created during the initial registration or at a later time which will provide access to account information of the external institution e.g. . Once created the application proxy instance of that user can be persisted and used at a later time for that given user institution combination e.g. User A Bank User A Bank User B Bank . However a new proxy instance may be created when the proxy instance becomes invalid e.g. as a result of institution API changes password login changes made within the institution or other reasonable changes to invalidate a proxy instance . The initial request is preferably received through a normalized API e.g. of as a connection request. The connection request is preferably accompanied by parameters that specify a selected institution if there are multiple institution options and user credentials for the institution. The user credentials may include a username password pin code and or any suitable credentials. The API request may additionally include authentication credentials such as a client identifier and secret token that is associated with the account in the system.

Creating a proxy instance preferably includes negotiating registration of the proxy instance with the institution which functions to establish the proxy instance with the selected external institution. An institution interface module e.g. one of the modules of preferably facilitates navigating the communication handshaking during the initial login. Different institutions may have different processes to register or enroll a new application which in the method is a proxy instance such as multi factor authentication. During the negotiation various elements may be extracted and stored as part of the proxy instance. Similarly some properties may be generated based on communication with the institution. For example a MAC address or a unique device identifier may be used in connecting to the services of the external institution. Such properties are preferably stored as part of the proxy instance.

As mentioned above multifactor authentication MFA may be part of negotiating with an external institution. Frequently an external institution will respond with indication of a MFA credential requirement. Such MFA requirements are preferably fulfilled by relaying the MFA challenge task up to a user. In one implementation the system will receive a message indicating that a security question should be asked to complete the negotiation. The security question is passed back to the associated application e.g. the applications and of which may be operated by a developer account of the system then that application e.g. the application of will present the security question in some manner to obtain the user response. The MFA can include security questions additional pin codes such as those supplied by a one time password generator or a code transmitted to a secondary device or any suitable form of MFA.

Block S receiving a normalized account request functions to receive an API request in the format of the system . As mentioned above the syntax and mode of communicating an API request is normalized such that the form is independent of the institution e.g. one of the institutions of . The requests can include a variety of types of requests which may include Obtaining a list of transactions requesting details on a particular transaction performing some financial transfer moving money from savings to checking setting up transfer to another account making scheduled payments digital deposit of a check and the like updating account information e.g. updating contact information changing password manage alerts and the like and or requesting services e.g. new cards reporting fraud and the like . A normalized account request is preferably mapped to an institution interface module e.g. one of the institution interface modules of or other suitable component that defines communication to fulfill the API request.

Block S which includes negotiating communication with an external interface e.g. one of APIs through a proxy instance e.g. one of the proxy instances functions to execute and manage communication between the system and an external institution system e.g. a when fulfilling an account request. The proxy instance e.g. one of the proxy instances preferably provides a mechanism through which access will be granted. The communication is preferably executed while an authenticated session is active. Communication sessions may be expired by the system or the external institution e.g. a for various reasons such as remaining inactive for a set amount of time. A communication session may be active subsequent to enrolling a proxy instance or may require setting up a session through the proxy instance as described below.

Negotiating communication preferably includes creating requests that conform to expected messages of the external institution e.g. a . This can include setting headers body contents and other message properties. An institution is preferably expecting particular headers. For example the headers may include a host or path a data content type cookies MAC address a user identifier auth properties or other suitable headers. Creating requests can additionally include transforming request properties into expected form which may primarily include applying a set encryption pattern to a request. In one variation transforming the request involves encrypting content according to a public key wherein the public key may be stored as part of the proxy instance. The institutions may take varying approaches to how information is communicated. In an alternative institution the contents of a message may be unencrypted in which case the contents are submitted in a plaintext unencrypted form. In addition to creating requests that conform to expected messages of the external institution the method can include following a request response pattern. That pattern can involve a single request and response but may alternatively include a sequence of different request and responses to obtain desired information.

In some variations information or actions may not be available through the first proxy instance and so the method may include automatically switching to a second proxy instance with supported functionality. For example full bank statements may not be available in a mobile application and the institution API e.g. one of of may not include such functionality. Accordingly when that functionality is required to fulfill an API request then a second proxy interface may be used. In some variations an API request may be require multiple institutions to be queried. Such an API request may be particularly useful for summarizing financial statements across multiple accounts. The method can include negotiating communication for multiple institutions and combining results into a combined form.

Block S which includes returning results functions to deliver the results as a response to the request. Returning the results preferably includes transforming the data obtained from the external institution into a normalized form. The information is preferably formatted into a standardized format that is substantially similar in representation between different institutions served by the system . Transforming the data can additionally include processing supplementing and or otherwise enhancing information. Some information provided by an institution may be poorly formed. For example store information for a particular transaction may be poorly labeled and may be represented different from other institutions. Such contextual information about external entities can preferably cleaned and supplemented with additional information. For example an entity may be supplemented with categorical labels tags geo location information and or other suitable information. The returned results can be represented data format such as JSON XML or any suitable format.

The method can additionally include setting up a session through the proxy instance S functions to facilitate accessing information after negotiating a proxy instance for an account and institution. The proxy instance e.g. of will preferably store and maintain information required for subsequent access. The institutions will commonly restrict access to set sessions which may expire after some amount of time or may require reconfirming user credentials. So when an API request for an account occurs after a communication session has expired then the method preferably automatically sets up a new session using the previous user credentials and proxy instance credentials. In some variations MFA challenges such as security questions may be automatically completed.

The method can additionally include re capturing updated credentials which functions to update user credentials for an institution. Updated credentials are preferably updated when a user changes them within the institution or when the proxy instance is otherwise locked out of the account. An error will preferably occur indicating that a communication session was not successful and then an API request can be submitted to update a proxy instance with new credentials.

As shown in a multi tenant financial platform system of an embodiment includes an application programming interface API service an application proxy system and at least one institution interface module e.g. the modules of . The API service application proxy system and institution interface modules of are similar to the API service application proxy system and institution interface modules of .

As shown in the financial service system includes a public Web browser interface for accessing the financial service system via a Web Browser or any suitable Web client e.g. the web browser of the user device . As described below for the methods of provide access to the financial service system via a private proprietary API e.g. as opposed to access via the public Web browser interface . In some implementations the Web browser interface is a web server that hosts a web site for access of the financial system via a Web browser over the Internet.

As shown in the application proxy system includes application proxy instances e.g. proxy instances for user accounts e.g. user accounts and of developer accounts e.g. Dev Account B and Dev Account A at the financial platform system . The application proxy system includes an application proxy instance management module that is constructed to generate application proxy instances configure application proxy instances and remove application proxy instances.

In some implementations each application proxy instance e.g. proxy instances specifies the developer account the user account of the developer account the associated financial service system e.g. Institution and credentials of the user account for the financial service system as shown in . In some implementations each application proxy instance specifies properties of the application proxy instance. In some implementations properties include one or more of a unique user identifier code an authentication token a MAC address e.g. a MAC address of a user device or any suitable information.

As shown in a method for accessing financial data includes creating at least one application proxy instance e.g. a proxy instance of that simulates an application e.g. application of of an external financial service system e.g. an external financial service system of process S receiving a normalized API account request for financial data of at least one external financial service system for a specified account the normalized API account request being provided by an external financial application system e.g. a financial application system of the application of by using a normalized financial data API e.g. API of of the financial platform system process S . Responsive to the normalized API account request of the process S communication is negotiated with each external financial service system of the normalized account request by using the respective application proxy instance to access the requested financial data from the external financial service system by using a proprietary Application Programming Interface API e.g. one of the proprietary APIs of of the external financial service system process S and the financial data is provided to the external financial application system as a response to the normalized account request process S .

In the example embodiment of the method is implemented by the financial platform system . In the example embodiment the financial platform system is constructed to programmatically access financial data as described herein for the method .

Process S which includes creating an application proxy instance that simulates an application of an external financial service system functions to control the application proxy instance management module of to create an application proxy instance. In some implementations the application proxy instance management module creates the application proxy instance as described above for the process S of .

In some implementations the application proxy instance management module creates the application proxy instance responsive to a request to create an application proxy instance. In some implementations the request to create an application proxy instance specifies information identifying an external financial service system and a user account of an external application system e.g. a user account of an external application system of the application of . In some implementations the request to create an application proxy instance specifies user credentials for the financial service system. In some implementations the request to create an application proxy instance specifies information identifying an account of the financial platform system associated with the external application system. In some implementations the request to create an application proxy instance specifies properties for the application proxy instance. In some implementations properties for the application proxy instance include at least one of a unique user identifier code an authentication token a MAC address e.g. a MAC address of a user device financial accounts of the corresponding financial service system and any other suitable information.

In some implementations the application proxy instance management module stores the created application proxy instance in association with a user account e.g. User A of of an external application system e.g. a user account of an external application system of the application of . In some implementations the application proxy instance management module stores the created application proxy instance in association with an account e.g. Dev Account B of of the financial platform system associated with an external application system e.g. an external application system of the application of . In some implementations the application proxy instance management module stores the created application proxy instance e.g. Proxy Instance User A Bank of in association with an account e.g. Dev Account B of the financial platform system associated with an external application system and a user account e.g. User A of the application system. In some implementations the application proxy instance management module stores the created application proxy instance in association with an account of the financial platform system associated with an external application system a user account of the application system and information identifying the financial service system e.g. Bank of of the application proxy instance. In some implementations the application proxy instance management module stores the created application proxy instance in association with an account of the financial platform system associated with an external application system a user account of the application system information identifying the financial service system of the application proxy instance and information identifying financial accounts of the application proxy instance.

In some implementations creating the application proxy instance includes controlling the application proxy instance management module to construct the application proxy instance to simulate communication of an application e.g. application of of the external financial service system of the application proxy instance with the financial service system on behalf of the user account e.g. User A User B of the application system.

In some implementations creating the application proxy instance includes controlling the application proxy instance management module to register the created application proxy instance with the external financial service system.

In some implementations creating the application proxy instance includes controlling the application proxy instance management module to negotiate registration of the application proxy instance with the financial service system e.g. institution as described above for the process S of .

In some implementations the request to create an application proxy instance is provided by an external application system e.g. an external application system of the application of . In some implementations the request to create an application proxy instance is provided by an external application system e.g. an external application system of the application of responsive to user input received at a user device e.g. executing machine readable instructions of an application e.g. of of the application system.

Process S which includes receiving a normalized API account request for financial data functions to control the financial platform system to receive the normalized API account request by using the normalized API of the financial platform system . In the example embodiment the application proxy system includes application proxy instances for each financial service system corresponding to the normalized API account request for financial data. Each application proxy instance is an application proxy instance that is created as described above for the process S.

In an implementation receiving a normalized API account request for financial data includes determining whether the application proxy system includes application proxy instances for each financial service system corresponding to the normalized API account request for financial data and responsive to a determination that the application proxy system does not include an application proxy instance for a financial service system of the normalized API account request for financial data the financial platform system provides a normalized API account response to the application system that has provided the normalized API account request for financial data. The normalized API account response prompts the application system e.g. the system of the application to provide a normalized API create request to create an application proxy instance for a financial service system identified in the normalized API account response. In some implementations the application system provides the normalized API create request to create the application proxy instance as described above for the process S.

In some implementations the normalized API account request is a request in accordance with the normalized financial data API e.g. of the financial platform system and the normalized financial data API is constructed to provide a normalized interface for accessing financial data from external financial service systems e.g. having different proprietary APIs e.g. .

In some implementations the normalized API account request for financial data specifies a user account e.g. User A User B of an external application system e.g. a user account of an external application system of the application of . In some implementations the normalized API account request for financial data specifies information identifying an account e.g. Dev Account A Dev Account B of the financial platform system associated with the external application system e.g. an external application system of the application of . In some implementations the normalized API account request for financial data specifies information identifying an external financial service system e.g. Bank Bank . In some implementations the normalized API account request for financial data specifies information identifying an account of an external financial system. In some implementations the normalized API account request for financial data specifies information identifying a transaction of an account of a financial data system. In some implementations the normalized API account request for financial data specifies parameters. In some implementations the financial platform system accesses financial data from at least one external financial system by using the parameters. In some implementations the financial platform system processes financial data accessed from at least one external financial system by using the parameters.

In some implementations the normalized API account request for financial data is a request for financial data of financial accounts of all financial service systems corresponding to application proxy instances for a user account e.g. User A User B of specified in the request. For example is a user of the user account has financial accounts at multiple financial service systems such a request would access financial data for all the financial accounts of the user.

In some implementations the normalized API account request for financial data is a request for financial data of financial accounts of a financial service system e.g. Bank Bank of specified in the request.

In some implementations the normalized API account request for financial data is a request for financial data of an account of a financial service system and information identifying the account e.g. an account number and the financial service system e.g. Bank Bank of is specified in the request.

In some implementations the normalized API account request for financial data is a request for detailed financial data of an account transaction of an account of a financial service system and information identifying the transaction e.g. a credit card purchase a transfer a check entry and the like the account and the financial service system is specified in the request.

Process S which includes negotiating communication with each external financial service system functions to control the application proxy system to use a respective application proxy instance to access the requested financial data from an external financial service system by using a proprietary API.

In some implementations in the case of a normalized API account request for financial data of financial accounts of all financial service systems corresponding to application proxy instances for a user account e.g. User A User B specified in the request the application proxy system uses application proxy instances stored by the application proxy system in association with the specified user account e.g. User A User B as shown in .

In some implementations in the case of a normalized API account request for financial data of financial accounts of a financial service system specified in the request the application proxy system uses application proxy instances stored by the application proxy system in association with the specified user account e.g. User A and the specified financial service system e.g. Bank .

In some implementations in the case of a normalized API account request for financial data of an account of a financial service system the application proxy system uses application proxy instances stored by the application proxy system in association with the specified user account and the specified financial service system.

In some implementations in the case of a normalized API account request for detailed financial data of an account transaction of an account of a financial service system the application proxy system uses application proxy instances stored by the application proxy system in association with the specified user account and the specified financial service system.

In some implementations negotiating communication with a financial service system includes forming a proprietary API request in accordance with the proprietary API e.g. of based on information specified by the normalized API account request e.g. account information transaction information parameters and the like .

As described above the financial platform system includes an institution interface module e.g. an institution interface module of for each external financial service system e.g. and the institution interface module models the proprietary API e.g. of the external financial service system. In the example embodiment each application proxy instance e.g. uses the institution interface module e.g. of corresponding to the financial service system e.g. of the application proxy instance e.g. to access the requested financial data from the external financial service system in accordance with the proprietary API e.g. of the external financial service system.

In some implementations the financial platform system generates each institution interface module e.g. by at least one of parsing source code of the application e.g. the application of of the external financial service system and parsing communication between the application e.g. and the external financial service system e.g. . In some implementations each institution interface module defines headers of messages sent to the corresponding external financial service system.

Process S which includes providing financial data to the external financial application system as a response to the normalized API account request functions to control the application proxy system to provide the financial data received by negotiating communication with each external financial service system associated with the normalized API account request.

In some implementations providing the financial data includes transforming the received financial data into a normalized form. In some implementations providing the financial data includes transforming the received financial data based on parameters of the normalized API account request. In some implementations transforming the received financial data includes at least one of processing the financial data cleaning the financial data supplementing the financial data with additional information and enhancing the financial data. In some implementations additional information includes at least one of categorical labels tags and geo location information.

In some embodiments the method includes setting up a session through at least one application proxy instance e.g. one of the proxy instances of associated with the normalized request.

In some implementations the process S is similar to the process S of . In some implementations the process S is similar to the process S of . In some implementations the process S is similar to the process S of . In some implementations the process S is similar to the process S of .

As shown in a method for programmatic access of at least one financial service system e.g. of external to a financial platform system e.g. of includes responsive to a normalized API financial service request provided by an external application system e.g. a system of the application of associated with an account of the financial platform system e.g. for each external financial service system corresponding to the normalized API financial service request using an application proxy instance e.g. of associated with the account of the financial platform system to provide a proprietary API request to the financial service system in accordance with a proprietary API e.g. of the financial service system process S and providing a normalized API financial service response to the external application system based on at least one proprietary API response received from an external financial service system process S . In the example embodiment of using an application proxy instance includes using an application proxy instance that is constructed to provide a proprietary API request e.g. by using the API to the respective external financial service system e.g. on behalf of a user account e.g. User B of the external application system by simulating an application e.g. of of the external financial service system e.g. .

In some implementations each application proxy instance is an application proxy instance that is created as described above for the process S of the method .

In some implementations proprietary API requests of a proprietary API e.g. of of a financial service system include at least one of a request for a list of transactions for at least one account of the financial service system a request for details of a transaction associated with an account of the financial service system a financial transfer request a payment scheduling request an electronic check deposit request an account update request a fraud reporting request and a services request.

In some implementations normalized API requests of the normalized API of the financial platform system include at least one of a request for a list of transactions for a user account of an external application system e.g. a user account of an external application system of the application of a request for details of a transaction associated with the user account a financial transfer request a payment scheduling request an electronic check deposit request an account update request a fraud reporting request and a services request.

In some implementations a primary application proxy instance and at least one secondary application proxy instance are associated with a financial service system corresponding to the normalized API financial service request and responsive to a determination that the normalized API financial service request cannot be processed by using the primary application proxy instance the financial platform system uses the secondary application proxy instance to process the normalized API financial service request. In some implementations the primary proxy instance corresponds to a mobile application of a respective financial service system and the secondary proxy instance corresponds to at least one of a web based application and a desktop application of the respective financial service system.

In some implementations providing a normalized API financial service response to the external application system based on at least one proprietary API response received from an external financial service system the process S includes transforming financial data of the proprietary API response into a normalized form. In some implementations transforming the received financial data includes at least one of processing the financial data cleaning the financial data supplementing the financial data with additional information and enhancing the financial data and additional information includes at least one of categorical labels tags and geo location information. In some implementations the received financial data is transformed as described above for S of .

In the example embodiment of the method is implemented by the financial platform system . In the example embodiment the financial platform system is a multi tenant financial platform system that is constructed to programmatically access at least one financial service system external to the financial platform system as described above for the method .

In some implementations the normalized API financial service request is provided by an external application system in a manner similar to the process of providing a normalized API account request described above for process S of .

In some implementations the normalized API financial service request is a normalized API account request for financial data as described above for the method of .

In some implementations the normalized API financial service request is a financial transfer request to transfer funds between accounts of a financial service system and the accounts are associated with user credentials of the user account e.g. User A User B of of an external application system e.g. a user account of an external application system of the application of . For example a user associated with the user account can request a transfer between accounts of the user at a same financial service system by using a financial application e.g. that uses the financial platform system .

In some implementations the financial transfer request to transfer funds between accounts of a financial service system specifies the user account e.g. User A User B of of the application system the financial service system e.g. Bank Bank information identifying the source account information identifying the destination account and an amount of funds to be transferred. In some implementations the financial transfer request to transfer funds between accounts of a financial service system specifies parameters. In some implementations the financial transfer request to transfer funds between accounts of a financial service system specifies an account e.g. a developer account e.g. Dev Account A Dev Account B of the financial platform system associated with the external application system e.g. an external application system of the application of .

The application proxy system uses an application proxy instance stored in association with the specified user account and the specified financial service system to perform the transfer. The application proxy system uses the application proxy instance to perform the transfer by using an institution interface module e.g. of the specified financial service system to provide the financial service system with a proprietary API transfer request in accordance with the proprietary API e.g. of the financial service system.

In some implementations the normalized API financial service request is a financial transfer request to transfer funds from a source account of a source financial service system to a destination account of a destination financial service system and the source and destination accounts are associated with respective user credentials of the user account e.g. User A User B of the external application system. For example a user associated with the user account can request a transfer between accounts of the user at different financial service systems by using a financial application e.g. that uses the financial platform system .

In some implementations the financial transfer request to transfer funds from a source account of a source financial service system to a destination account of a destination financial service system specifies the user account e.g. User A User B of the application system the source financial service system information identifying the source account the destination financial serviced system information identifying the destination account and an amount of funds to be transferred. In some implementations the financial transfer request specifies parameters. In some implementations the financial transfer request specifies an account e.g. a developer account e.g. Dev Account A Dev Account B of the financial platform system associated with the external application system e.g. an external application system of the application of .

The application proxy system uses at least one of an application proxy instance stored in association with the specified user account and the specified source financial service system and an application proxy instance stored in association with the specified user account and the specified destination financial service system to perform the transfer.

In some implementations the application proxy system selects one of the application proxy instance of the specified source financial service system and the application proxy instance of the specified destination financial service system and uses the selected application proxy instance to perform the transfer by using an institution interface module e.g. of the associated financial service system to provide the financial service system with a proprietary API transfer request in accordance with the proprietary API e.g. of the financial service system.

In some implementations the application proxy system selects one of the application proxy instance of the specified source financial service system and the application proxy instance of the specified destination financial service system based on capabilities of the respective financial service systems.

In some implementations the application proxy system selects one of the application proxy instance of the specified source financial service system and the application proxy instance of the specified destination financial service system based on properties of the application proxy instances.

In some implementations the application proxy system selects one of the application proxy instance of the specified source financial service system and the application proxy instance of the specified destination financial service system based on transaction fees of the corresponding financial service systems.

In some implementations the normalized financial service request is a financial transfer request to transfer funds from a source account of a source financial service system to a destination account of a destination financial service system the source account is associated with user credentials of the user account e.g. User A of of the external application system and user credentials of the destination account are not associated with the user account of the external application system. For example a user associated with the user account e.g. User A of can initiate the transfer to a destination account of a different user from the source financial service system.

In some implementations the normalized API financial transfer request specifies the user account e.g. User A of of the application system the source financial service system e.g. Bank information identifying the source account information identifying the destination account and an amount of funds to be transferred. In some implementations the normalized API financial transfer request specifies parameters. In some implementations the normalized API financial transfer request specifies an account e.g. a developer account of the financial platform system associated with the external application system e.g. an external application system of the application of .

The application proxy system uses an application proxy instance stored in association with the specified user account and the specified source financial service system to perform the transfer. The application proxy system uses the application proxy instance to perform the transfer by using an institution interface module e.g. of the specified source financial service system to provide the source financial service system with a proprietary API transfer request in accordance with the proprietary API e.g. of the source financial service system.

In some implementations the normalized API financial service request is a financial transfer request to transfer funds from a source account of a source financial service system to a destination account of a destination financial service system the destination account is associated with user credentials of the user account of the external application system and user credentials of the source account are not associated with the user account of the external application system. For example a user associated with the user account e.g. User A of can initiate the transfer from a source account of a different user from the destination financial service system.

In some implementations the normalized API financial transfer request specifies the user account of the application system the destination financial service system information identifying the destination account information identifying the source account and an amount of funds to be transferred. In some implementations the normalized API financial transfer request specifies parameters. In some implementations the normalized API financial transfer request specifies an account e.g. a developer account of the financial platform system associated with the external application system e.g. an external application system of the application of .

The application proxy system uses an application proxy instance stored in association with the specified user account and the specified destination financial service system to perform the transfer. The application proxy system uses the application proxy instance to perform the transfer by using an institution interface module e.g. of the destination source financial service system to provide the destination financial service system with a proprietary API transfer request in accordance with the proprietary API e.g. of the destination financial service system.

In some implementations the normalized API financial service request is a request to schedule payment from a source account of a source financial service system to a destination account of a destination financial service system the source account is associated with user credentials of the user account of the external application system. For example a user associated with the user account can schedule payment to a destination account of a different user from the source financial service system.

In some implementations the normalized API schedule payment request specifies the user account of the application system the source financial service system information identifying the source account information identifying the destination account and an amount of funds to be transferred. In some implementations the normalized API schedule payment request specifies parameters. In some implementations the normalized API schedule payment request specifies an account e.g. a developer account of the financial platform system associated with the external application system e.g. an external application system of the application of .

The application proxy system uses an application proxy instance stored in association with the specified user account and the specified source financial service system to schedule the payment. The application proxy system uses the application proxy instance to schedule the payment by using an institution interface module e.g. of the specified source financial service system to provide the source financial service system with a proprietary API schedule payment request in accordance with the proprietary API e.g. of the source financial service system.

In some implementations the normalized API financial service request is a request for electronic deposit of a check in a destination account of a destination financial service system and the destination account is associated with user credentials of the user account of the external application system. For example a user associated with the user account can electronically deposit a check to a destination account of the user by capturing a digital image of the check.

In some implementations the normalized API electronic deposit request specifies the user account of the application system the destination financial service system information identifying the destination account and a digital image of the check. In some implementations the normalized API electronic deposit request specifies an amount of funds indicated by the digital image of the check. In some implementations the normalized API electronic deposit request specifies parameters. In some implementations the normalized API electronic deposit request specifies an account e.g. a developer account of the financial platform system associated with the external application system e.g. an external application system of the application of .

The application proxy system uses an application proxy instance stored in association with the specified user account and the specified destination financial service system to perform the electronic deposit. The application proxy system uses the application proxy instance to perform the electronic deposit by using an institution interface module e.g. of the destination financial service system to provide the destination financial service system with a proprietary API electronic deposit request in accordance with the proprietary API e.g. of the destination financial service system.

In some implementations the normalized API financial service request is a request to update account information of a specified financial service system.

In some implementations the normalized API update account information request specifies the user account of the application system the financial service system and account update information. In some implementations the normalized API update account information request specifies information indicating an account of the specified financial service system. In some implementations the normalized API update account information request specifies parameters. In some implementations the normalized API update account information request specifies an account e.g. a developer account of the financial platform system associated with the external application system e.g. an external application system of the application of .

In some implementations the normalized API request to update account information includes a request to update contact information and the account update information includes updated contact information.

In some implementations the normalized API request to update account information includes a request to change a password and the account update information includes a new password.

In some implementations the normalized API request to update account information includes a request to update account alert settings and the account update information includes updated account alert settings.

The application proxy system uses an application proxy instance stored in association with the specified user account and the specified financial service system to perform the account information update. The application proxy system uses the application proxy instance to perform the account information update by using an institution interface module e.g. of the financial service system to provide the financial service system with a proprietary API update account information request in accordance with the proprietary API e.g. of the financial service system. In some embodiments the proprietary API update account information request in accordance with the proprietary API includes at least one of an update contact information request a change password request and an update account alert settings request.

In some implementations the normalized API financial service request is a request for services of a specified financial service system.

In some implementations the normalized API services request specifies the user account of the application system the financial service system and service request information. In some implementations the normalized API services request specifies parameters. In some implementations the normalized API services request specifies an account e.g. a developer account of the financial platform system associated with the external application system e.g. an external application system of the application of .

In some implementations the normalized API services request includes a request for at least one of a new bank card and a request for new checks.

In some implementations the normalized API services request includes a request to report fraud and the service request information includes fraud report information.

The application proxy system uses an application proxy instance stored in association with the specified user account and the specified financial service system to perform the service request. The application proxy system uses the application proxy instance to perform the service request by using an institution interface module e.g. of the financial service system to provide the financial service system with a proprietary API service request in accordance with the proprietary API e.g. of the financial service system. In some embodiments the proprietary API service request in accordance with the proprietary API includes at least one of a new bank card request check request and a fraud report request.

The bus interfaces with the processors A N the main memory e.g. a random access memory RAM a read only memory ROM a processor readable storage medium a display device a user input device and a network device .

In some implementations the system e.g. includes at least one of a central processing unit processor and a multi processor unit MPU .

The processors A N and the main memory form a processing unit . In some embodiments the processing unit includes one or more processors communicatively coupled to one or more of a RAM ROM and machine readable storage medium the one or more processors of the processing unit receive instructions stored by the one or more of a RAM ROM and machine readable storage medium via a bus and the one or more processors execute the received instructions. In some embodiments the processing unit is an ASIC Application Specific Integrated Circuit . In some embodiments the processing unit is a SoC System on Chip . In some embodiments the processing unit includes one or more of an API Service an Application Proxy System and one or more Instance Interface Modules.

The network adapter device provides one or more wired or wireless interfaces for exchanging data and commands between the system e.g. and other devices such as financial service systems e.g. user devices e.g. . Such wired and wireless interfaces include for example a universal serial bus USB interface Bluetooth interface Wi Fi interface Ethernet interface near field communication NFC interface and the like.

Machine executable instructions in software programs such as an operating system application programs and device drivers are loaded into the memory of the processing unit from the processor readable storage medium the ROM or any other storage location. During execution of these software programs the respective machine executable instructions are accessed by at least one of processors A N of the processing unit via the bus and then executed by at least one of processors A N. Data used by the software programs are also stored in the memory and such data is accessed by at least one of processors A N during execution of the machine executable instructions of the software programs. The processor readable storage medium is one of or a combination of two or more of a hard drive a flash drive a DVD a CD an optical disk a floppy disk a flash storage a solid state drive a ROM an EEPROM an electronic circuit a semiconductor memory device and the like. The processor readable storage medium includes an operating system software programs device drivers the API Service the Application Proxy System and the Institution Interface Modules .

The system and method of the preferred embodiment and variations thereof can be embodied and or implemented at least in part as a machine configured to receive a computer readable medium storing computer readable instructions. The instructions are preferably executed by computer executable components preferably integrated with the financial data API system. The computer readable medium can be stored on any suitable computer readable media such as RAMs ROMs flash memory EEPROMs optical devices CD or DVD hard drives floppy drives or any suitable device. The computer executable component is preferably a general or application specific processor but any suitable dedicated hardware or hardware firmware combination device can alternatively or additionally execute the instructions.

As a person skilled in the art will recognize from the previous detailed description and from the figures and claims modifications and changes can be made to the preferred embodiments of the invention without departing from the scope of this invention defined in the following claims.

