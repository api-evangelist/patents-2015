---

title: System and method for processing transactions
abstract: Embodiments of the invention include methods, systems, and computer-readable media for processing transactions involving sensitive information, such as a credit card number. Embodiments include a first server authenticating a second server based on a security token and determining whether the security token is expired. Based on the results, the first server may request a transaction token associated with sensitive information. The first server may encrypt the transaction token using a public key of the second server. The first server may send the encrypted transaction token as a parameter to a URL, wherein the URL is configured to cause a browser on a client to send, to the second server, a request for the page and the encrypted transaction token.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09577991&OS=09577991&RS=09577991
owner: Canon U.S.A., Inc.
number: 09577991
owner_city: Melville
owner_country: US
publication_date: 20150831
---
This application is a Continuation of U.S. patent application Ser. No. 13 902 588 filed May 24 2013 which claims the benefit of U.S. Provisional Application No. 61 652 107 filed May 25 2012 both of which are hereby incorporated by reference herein in their entirety.

The present invention relates generally to processing transactions and more particularly to a system and method for processing transactions in a network environment.

When a user and an entity are carrying out a transaction such as with electronic commerce the entity often processes and or stores sensitive information. For example a merchant may collect process and store a credit card number when a user accesses a commerce application such as a web site to purchase a good or service sold by the merchant. Collecting processing or storing such data may subject the entity to costly security audits and regulations. Moreover an entity may utilize multiple unique deployments of commerce applications for electronic commerce thereby introducing multiple systems that collect process or store sensitive information such as credit card or debit card numbers for payment processing. Having multiple systems that collect process or store sensitive information may subject the entity to additional regulatory burdens which may be repetitive across the multiple systems.

Some embodiments of the invention include receiving at a first server from a browser on a client a security token and sensitive information the security token having been generated by a second server. At the first server operations are performed on the security token for authenticating the second server and determining whether the security token is expired. In response to authenticating the second server and determining that the security token is not expired the first server sends to a service provider the sensitive information and a request for a transaction token. The first server receives the transaction token from the service provider the transaction token comprising a string of characters associated with the sensitive information. The first server may use a public key of the second server to encrypt the transaction token. The first server sends to the client a uniform resource locator URL specifying a page hosted by the second server the URL including the encrypted transaction token as a parameter wherein the URL is configured to cause the browser on the client to send to the second server a request for the page and the encrypted transaction token.

Further features of the present invention will become apparent from the following description of exemplary embodiments with reference to the attached drawings in which like reference characters designate the same or similar parts throughout the figures thereof.

Embodiments of the present invention are described with reference to the drawings. illustrates an example network environment . A client a server a server and a service provider are connected to a network . A browser executing on the client may be used to access a resource such as an application web page or other resource of the server . For example a user at the client may utilize the browser to navigate to resources of the server for the purpose of carrying out a transaction between the user and a merchant associated with the server . To complete the transaction one or more resources of the server and the service provider may be utilized.

The client includes hardware software or both for providing the functionality of the client . In some embodiments the client is unitary. In some embodiments the client is distributed. The client may span multiple locations. The client may span multiple machines. The browser may execute on the client .

The browser may be a web browser such as MICROSOFT INTERNET EXPLORER or MOZILLA FIREFOX and may be used to access a resource such as a web page. The browser may enable a user to display and interact with text images form elements or other information typically located on a web page served by a web server on the World Wide Web or a local area network. The browser may support various types of downloadable executable software modules such as applets or plug ins. For example the browser may incorporate a virtual machine configured to execute a program such as a JAVA applet embedded in a web page accessed by the browser . The client may have various add ons plug ins or other extensions for use in or with the browser . In some embodiments the browser executes a web page having executable code such as JAVASCRIPT embedded in the web page which generates an inline frame iframe .

The server includes hardware software or both for providing the functionality of the server . In some embodiments the server is unitary. In some embodiments the server is distributed. The server may span multiple locations. The server may span multiple machines. By way of example the server may be a web server or an application server providing access to one or more resources. In some embodiments the server hosts a web site.

The server may receive hypertext transfer protocol HTTP requests and provide HTTP responses. For example the server may serve content in the form of a web page in response to a request from a web browser. The web page may be static or dynamic and may comprise Hyper Text Markup Language HTML files or other suitable files executable code such as JAVASCRIPT form elements images or other content. One or more elements of the web page content may be stored at the server . For example the server has an authorization request page component a proxy page component and an authorization result page component which include various web page elements and executable instructions for providing web pages described herein. Additionally the server has a security token generation module and a security token decryption module for performing operations on data as described herein with reference to .

The server may host a web page that requests sensitive information. For example a merchant may use the server to host a web site for selling goods or services and sensitive information such as a credit card number or debit card number may be required to complete a transaction. Other examples of sensitive information that an entity could request include identification information such as a social security number account information a credential health information or financial information. The server may use the authorization request page component to request the sensitive information required to complete a transaction or grant access to some resource. The server and the service provider may also perform operations with respect to the sensitive information.

The server includes hardware software or both for providing the functionality of the server . In some embodiments the server is unitary. In some embodiments the server is distributed. The server may span multiple locations. The server may span multiple machines. By way of example the server may be an application server providing access to one or more resources.

The server may include one or more interfaces for receiving and transmitting information. For example the server may include an HTML form interface able to receive information from and send information to the browser running on the client . The server may include a Simple Object Access Protocol SOAP interface and a representation state transfer REST interface or other interface to support various messaging and data protocols over HTTP.

The server may perform operations with respect to the sensitive information. For example the server includes a transaction token acquisition module which may receive via the HTML form interface the sensitive information and perform operations to acquire a transaction token using the sensitive information as described herein with reference to . Additionally the server has a security token verification module and a transaction token encryption module for performing operations on data as described herein with reference to .

The service provider includes hardware software or both for providing the functionality of the service provider . In some embodiments the service provider is unitary. In some embodiments the service provider is distributed. The service provider may span multiple locations. The service provider may span multiple machines. By way of example the service provider may be an application server providing access to one or more resources.

The service provider may provide various resources to facilitate a transaction. For example the service provider may include a tokenization service a database and an authorization service for performing operations on data as described herein with reference to . In some embodiments the service provider provides services only for entities pre registered with the service provider . For example the server and or the server may be required to register with the service provider by providing identification information such as an application identification number or an Internet Protocol IP address before the service provider provides a service for the server or the server .

The network couples one or more servers and one or more clients to each other. The network may be any suitable network. For example one or more portions of the network may include an ad hoc network an intranet an extranet a virtual private network VPN a local area network LAN a wireless LAN WLAN a wide area network WAN a wireless WAN WWAN a metropolitan area network MAN a portion of the Internet a portion of the Public Switched Telephone Network PSTN a cellular telephone network or a combination of two or more of these. The network may include one or more networks.

In step S the client receives a user input operation via the browser . For example the user may input a uniform resource identifier URI or may click a hypertext link within a browser window. The URI or the hypertext link may identify an authorization request page. The authorization request page is a web page for obtaining sensitive information such as a credit card number to complete a transaction. By way of example a merchant may use the server to host a web site for selling goods or services. The web site may be part of a commerce application running on the server . A user at the client may provide the user input operation via the browser in order to carry out a transaction between the user and the merchant. To complete the transaction the user may be required to provide sensitive information such as a credit card number or debit card number.

In step S based on the user input the browser sends a request to access the web page identified by the URI or the hypertext link. That is the browser sends to the server a request to access the authorization request page. In step S the server receives from the browser on the client the request to access the authorization request page.

In step S in response to receiving the request the authorization request page component is invoked at the server . The server utilizes the security token generation module to generate a security token. In some embodiments the security token comprises data indicating an expiration time of the security token the data being encrypted and the message being digitally signed. For example the security token generation module generates data based on a creation time of the security token and a duration that the security token should be valid. The duration of the validity of the security token may vary and may be set by an administrator of the application running on the server for example. Accordingly the generated data indicates the time that the security token will expire. The generated data which indicates the expiration time is then encrypted. The server encrypts the generated data using the server s public key for example with a public key encryption algorithm such as RSA. Other encryption techniques based on public key cryptography may be used in some implementations. Once encrypted the encrypted data can be decrypted only using the server s private key according to embodiments. After encrypting the generated data the server signs the message using a digital signature. For example the digital signature may be a digest of the message for example a hash of the message encoded using the server s private key which can then be appended to the outgoing message. Later to verify the digital signature of the message the server may use the same technique as the server for example using the same standard hash algorithm to obtain a digest of the message that the server has received. For example the server may use the server s public key to decode the digital signature in order to obtain what should be a matching digest for the received message. Accordingly by verifying a digital signature in this way authentication of the server and message integrity can be maintained.

Still referring to step S in response to the request received in step S the server prepares the authorization request page to send to the client . The authorization request page may be a dynamic web page. The generated security token is embedded in the authorization request page. Additionally application identification information corresponding to an application running on the server may be embedded in the authorization request page. For example a commerce application running on the server may provide the authorization request page to the client and the application identification information may be an application identification number application ID of the commerce application. In step S the authorization request page is sent from the server to the client .

In step S the client receives the authorization request page sent in step S. The browser interprets and processes the authorization request page. Once the authorization request page is loaded information is displayed via the browser . For example form elements such as a submit button and a field for receiving an input such as sensitive information may be displayed via the browser .

In step S the client receives a user input operation via the browser while the authorization request page is displayed. In some embodiments the authorization request page is the web page illustrated at . illustrates the authorization request page including executable code such as JAVASCRIPT form elements and other content. illustrates the application ID and the security token which were embedded in the authorization request page in step S as hidden inputs among the form data included in the authorization request page. That is the application ID and the security token are not displayed when the authorization request page is displayed in the browser . In step S the client receives sensitive information by the user input operation via the browser . The sensitive information may be a credit card number for carrying out a transaction between the user and a merchant. The user may provide other information in addition to the sensitive information. Once the sensitive information is provided the user submits form information and a request by selecting the submit button.

In step S the client performs validation processing. For example the client may perform a validation process on the sensitive information to ensure the sensitive information includes the correct number of digits the correct type of characters or other check. If the validation processing is unsuccessful the user is notified via the browser . If the validation processing is successful the process continues to step S.

In step S the request function illustrated at is invoked at the client . The request function includes executable code for triggering functionality to be executed within the authorization request page. For example the invoke profile creation function illustrated at may be executed thus triggering the profile creation function. The profile creation function is executable code within the authorization request page which when executed on the client is operable to generate a dynamic hidden iframe at the client . The dynamic hidden iframe is illustrated at . illustrates the authorization request page as illustrated in except the dynamic hidden iframe has been generated. The hidden iframe includes a content document such as a dynamic page. The dynamic page includes a dynamic form including form elements. The profile creation function generates the dynamic page and sets form data within the dynamic page. For example the profile creation function obtains the application ID the security token and the sensitive information described above and sets these values as inputs in the dynamic page. The dynamic iframe is not visible when the browser displays the authorization request page. Accordingly the application ID the security token and the sensitive information are hidden inputs not displayed to the user via the browser in the dynamic page.

In some embodiments the server provides the server with the executable code comprising the profile creation function. The server may receive the executable code comprising the profile creation function from the server and then embed the profile creation function within the authorization request page component . Accordingly the hidden iframe can be hosted by the server as part of the authorization request page the hidden iframe being generated at run time on the client side. The hidden iframe may be configured to communicate directly with the server once it is generated. Moreover the server and the server may be running applications on different domains. Accordingly the iframe may enable cross domain messaging in the manner described herein.

In step S the form information set in step S is sent from the client to the server . For example the sensitive information provided by the user at step S may be submitted via the hidden iframe to the server . The hidden iframe may communicate with the server using HTTP. Additionally the iframe may cause a secure connection to be established between the iframe and the server using the secure socket layer SSL protocol. For example a private encryption key may be used to encrypt data that is transferred over an SSL connection. By embedding the iframe directly within the authorization request page the sensitive information is able to be submitted to the server for purposes of completing the transaction with the merchant associated with the server without requiring the server to collect or process the sensitive information.

In step S the form information sent in step S is received at the server via the HTML form interface . For example the server receives the application ID the security token and the sensitive information.

In step S in response to receiving the information in step S the transaction token acquisition module is invoked at the server . The server utilizes the security token verification module to verify the security token received in step S and which was generated in step S. To verify the security token the security token verification module verifies the digital signature decrypts the security token checks the time stamp and verifies the security token has not been used previously. To verify the digital signature of the message the server may use the server s public key to decode the digital signature in order to obtain what should be a matching digest for the received message. Then the server decrypts the message using the server s private key. Once the security token is decrypted the server checks the time stamp and verifies the security token has not been used previously. If the time stamp specifies a time that is prior to a predetermined expiration time and if the security token has not previously been used then the process continues to step S. If the security token is not verified for example if the digital signature is not verified decryption of the message fails the time stamp is expired or the security token has been used previously then the server notifies the client via the iframe. By virtue of the verification process in step S the server may be authenticated and the integrity of a one time message may be maintained.

In step S the server sends the sensitive information and a request to the service provider . The server may communicate with the service provider over an SSL connection. In step S the server may request that the service provider provide to the server a transaction token. The transaction token may be an identifier comprising a string of characters that may be utilized to refer to the sensitive information sent with the request in step S. The identifier may comprise a numeric or alpha numeric sequence of characters of an arbitrary length. By way of example a credit card number could be referenced by a transaction token made up of a sequence of characters that is different from the credit card number. The transaction token may only have meaning to the service provider for transactions processed by the service provider . In some embodiments the transaction token may only be valid for a single transaction.

In step S the service provider receives the sensitive information and the request sent in step S. In step S in response to receiving the sensitive information and the request the tokenization service is invoked at the service provider . The service provider generates the requested transaction token. Moreover the service provider may associate the sensitive information and the transaction token with each other and store the sensitive information and the transaction token in the database . In step S the service provider sends the transaction token to the server .

In step S the server receives the transaction token sent in step S. In step S in response to receiving the transaction token the transaction token acquisition module is invoked at the server . The server utilizes the transaction token encryption module to encrypt the transaction token received in step S. The server encrypts the transaction token using the server s public key for example with a public key encryption algorithm such as RSA. The same encryption technique used in step S is used in step S in some implementations. Once encrypted the encrypted transaction token can be decrypted only using the server s private key according to embodiments. After encrypting the generated data the server signs the message using a digital signature. For example the digital signature may be a digest of the message for example a hash of the message encoded using the server s private key which can then be appended to the outgoing message. Later to verify the digital signature of the message the server may use the same technique as the server for example using the same standard hash algorithm to obtain a digest of the message that the server has received. For example the server may use the server s public key to decode the digital signature in order to obtain what should be a matching digest for the received message. Accordingly by verifying a digital signature in this way authentication of the server and message integrity can be maintained.

In step S after the transaction token encryption module has executed the above described encryption process on the transaction token the server outputs the encrypted transaction token via the HTML form interface . In step S the server may send a call back URL to the iframe the call back URL specifying a web page hosted by the server and including the transaction token as a parameter. In step S the call back URL is received at the client from the server . In some embodiments the call back URL specifies a proxy page hosted at the server . In step S a request to access the web page identified by the call back URL is sent from the client to the server . In some embodiments the request sent in step S is a request for the proxy page illustrated at .

At step S the server receives the request sent in step S. At step S in response to receiving the request the proxy page component is invoked at the server . The server prepares the proxy page to send to the client . The server then sends the proxy page and the encrypted transaction token to the client .

In step S the client receives the proxy page and the encrypted transaction token sent in step S. The proxy page may be a page in the hidden iframe. In some embodiments the proxy page is the proxy page illustrated in . illustrates the authorization request page as illustrated in except the dynamic page in the hidden iframe has been replaced by the proxy page received in step S. Additionally in relative to the encrypted transaction token is set as an input and the sensitive information is removed as an input in the form data of the authorization request page as described with respect to step S.

In step S the response function illustrated at is invoked at the client . The response function includes executable code within the authorization request page which when executed on the client is operable to perform operations with respect to the form data of the authorization request page. For example the response function may clear the sensitive information received in step S and set the encrypted transaction token received in step S as an entry in the form data of the authorization request page. The encrypted transaction token may be a hidden input not displayed to the user via the browser in the authorization request page. In step S the encrypted transaction token is sent from the client to the server .

In step S the server receives the encrypted transaction token sent in step S. In step S in response to receiving the encrypted transaction token the transaction token decryption module is invoked at the server . In step S the server verifies the digital signature applied by the server in step S. Additionally the server decrypts the transaction token that was encrypted by the server in step S. To verify the digital signature of the message the server may use the server s public key to decode the digital signature in order to obtain what should be a matching digest for the received message. Then the server decrypts the message using the server s private key. If the transaction token is not verified for example if the digital signature is not verified or the decryption of the message fails then the server notifies the client . If the transaction token is verified the process continues to step S. In step S the server sends the transaction token and a request to the service provider . The request may be a request to authorize a transaction based on the transaction token. In connection with the transaction token and the request the server may provide additional information such as information related to the transaction to the service provider .

In step S the service provider receives the transaction token and the request sent in step S. In step S in response to receiving the transaction token and the request the authorization service is invoked at the service provider . The service provider may refer to information stored in the database in order to provide the requested authorization services. In step S the service provider sends to the server a response to the request received at step S. The service provider may respond indicating success or failure regarding the transaction for example.

In step S the server receives the authorization response sent in step S. In step S in response to receiving the authorization response the authorization result page component is invoked at the server . The server prepares the authorization result page to send to the client . The server then sends the authorization result page to the client . Depending upon the response from the service provider the authorization result page will be a corresponding indication of authorization success or authorization failure.

In step S the client receives the authorization result page sent in step S. The browser interprets and processes the authorization result page. Once the authorization request page is loaded information is displayed via the browser . For example depending upon the response from the service provider a corresponding authorization success page or authorization failure page may be displayed via the browser . illustrates the authorization result page.

In some embodiments various steps described above are performed over a period of time without requiring a user input operation for the duration of the period. For example referring to in some embodiments steps S to S are performed by one or more of the client the server the server and the service provider over a period of time without requiring a user input operation for the duration of the period. Further by way of example in some embodiments steps S to S are performed by one or more of the client the server the server and the service provider over a period of time without requiring a user input operation for the duration of the period.

In the realm of electronic commerce for example such a system may be particularly advantageous. By centralizing and aggregating payment processing in a manner that maintains the unique shopping experience of each electronic commerce system the disclosed system reduces the number of entities that must adhere to audit compliance implementation guidelines. This reduction of scope may reduce the overall cost of audits and maintenance of adhering to the compliance implementation guidelines while not impacting the usability user experience or function of each unique electronic commerce system.

The term computing system as used herein includes but is not limited to one or more software modules one or more hardware modules one or more firmware modules or combinations thereof that work together to perform operations on electronic data. The physical layout of the modules may vary. A computing system may include multiple computing devices coupled via a network. A computing system may include a single computing device where internal modules such as a memory and processor work together to perform operations on electronic data. Also the term resource as used herein includes but is not limited to an object that can be processed at a computing system. A resource can be a portion of executable instructions or data.

In some embodiments the computing system performs one or more steps of one or more methods described or illustrated herein. In some embodiments the computing system provides functionality described or illustrated herein. In some embodiments software running on the computing system performs one or more steps of one or more methods described or illustrated herein or provides functionality described or illustrated herein. Some embodiments include one or more portions of the computing system .

The computing system includes one or more processor s memory storage an input output I O interface a communication interface and a bus . The computing system may take any suitable physical form. For example and not by way of limitation the computing system may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server a tablet computer system or a combination of two or more of these.

The processor s include hardware for executing instructions such as those making up a computer program. The processor s may retrieve the instructions from the memory the storage an internal register or an internal cache. The processor s then decode and execute the instructions. Then the processor s write one or more results to the memory the storage the internal register or the internal cache. The processor s may provide the processing capability to execute the operating system programs user and application interfaces and any other functions of the computing system .

The processor s may include a central processing unit CPU one or more general purpose microprocessor s application specific microprocessor s and or special purpose microprocessor s or some combination of such processing components. The processor s may include one or more graphics processors video processors audio processors and or related chip sets.

In some embodiments the memory includes main memory for storing instructions for the processor s to execute or data for the processor s to operate on. By way of example the computing system may load instructions from the storage or another source to the memory . During or after execution of the instructions the processor s may write one or more results which may be intermediate or final results to the memory . One or more memory buses which may each include an address bus and a data bus may couple the processor s to the memory . One or more memory management units MMUs may reside between the processor s and the memory and facilitate accesses to the memory requested by the processor s . The memory may include one or more memories. The memory may be random access memory RAM .

The storage stores data and or instructions. As an example and not by way of limitation the storage may include a hard disk drive a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. In some embodiments the storage is a removable medium. In some embodiments the storage is a fixed medium. In some embodiments the storage is internal to the computing system . In some embodiments the storage is external to the computing system . In some embodiments the storage is non volatile solid state memory. In some embodiments the storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. The storage may include one or more memory devices. One or more program modules stored in the storage may be configured to cause various operations and processes described herein to be executed.

The I O interface includes hardware software or both providing one or more interfaces for communication between the computing system and one or more I O devices. The computing system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and the computing system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse speaker still camera stylus tablet touch screen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. In some embodiments the I O interface includes one or more device or software drivers enabling the processor s to drive one or more of these I O devices. The I O interface may include one or more I O interfaces.

The communication interface includes hardware software or both providing one or more interfaces for communication such as for example packet based communication between the computing system and one or more other computing systems or one or more networks. As an example and not by way of limitation the communication interface may include a network interface card NIC or a network controller for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. As an example and not by way of limitation the computing system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example the computing system may communicate with a wireless PAN WPAN such as for example a Bluetooth WPAN or an ultra wideband UWB network a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. The computing system may include any suitable communication interface for any of these networks where appropriate. The communication interface may include one or more communication interfaces .

The bus interconnects various components of the computing system thereby enabling the transmission of data and execution of various processes. The bus may include one or more types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures.

Various above described operations performed by the client the server the server and the service provider may be executed and or controlled by one or more applications running on the client the server the server and the service provider respectively. The above description serves to explain principles of the invention but the invention should not be limited to the examples described above. For example the order and or timing of some of the various operations may vary from the examples given above without departing from the scope of the invention. Further by way of example the type of network and or computing systems may vary from the examples given above without departing from the scope of the invention. Other variations from the above recited examples may also exist without departing from the scope of the invention.

The scope of the present invention includes a computer readable storage medium storing instructions which when executed by one or more processors cause the one or more processors to perform one or more embodiments of the invention described herein. The scope of the present invention includes a computer readable storage medium storing instructions which when executed by one or more processors cause the one or more processors to perform one or more embodiments of the invention described herein.

Examples of a computer readable storage medium include a floppy disk a hard disk a magneto optical disk MO a compact disk read only memory CD ROM a compact disk recordable CD R a CD Rewritable CD RW a digital versatile disk ROM DVD ROM a DVD RAM a DVD RW a DVD RW magnetic tape a nonvolatile memory card and a ROM. Computer executable instructions can also be supplied to the computer readable storage medium by being downloaded via a network.

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments.

