---

title: Multi-sized data types for managed code
abstract: Embodiments are directed towards generating applications that include multi-sized types running in managed code. During the compilation of an intermediate language version of an application, if a multi-size type is encountered, a runtime engine may perform actions to process the multi-size types. Accordingly, architecture information associated with the target computer may be determined. Data types corresponding to the architecture of the target computer and the multi-sized types may be determined based on the architecture information. Native code calls associated with an intermediate language code calls may be determined such that the parameters of the native code calls match the architecture dependent data types. And, a machine code version of the intermediate language code call may be generated. The generated machine code version of the intermediate language code may be executed with the data types specific to the target computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09459847&OS=09459847&RS=09459847
owner: Xamarin Inc.
number: 09459847
owner_city: San Francisco
owner_country: US
publication_date: 20151109
---
This Utility patent application is a Continuation of U.S. patent application Ser. No. 14 537 298 filed on Nov. 10 2014 now U.S. Pat. No. 9 183 020 issued on Nov. 10 2015 entitled MULTI SIZED DATA TYPES FOR MANAGED CODE the benefit of which is claimed under 35 U.S.C. 120 and which is further incorporated by reference in its entirety.

This invention relates generally to software application development and more particularly but not exclusively to generating applications for hardware platforms that have different architectures.

A highly competitive application marketplace puts tremendous pressure on application developers to deliver high quality user experiences for both consumers and employees across a wide variety of computing platforms. Accordingly it may be advantageous to employ modern cross platform software development tools to enable application developers to develop applications for a variety of target platforms. Thus in some cases application developers may write the source code for their applications in one computer programming language and deploy compiled applications to multiple platforms. However some computing platforms may include unique and or distinctive native interfaces that may reduce and or limit the ability for writing platform agnostic programs. In particular some native application programming interfaces may obscure architectural details that may be important to improve cross platform development. Thus it is with respect to these and other considerations that these innovations are made.

The present innovations now will be described more fully hereinafter with reference to the accompanying drawings which form a part hereof and which show by way of illustration specific embodiments by which the innovations may be practiced. These innovations may however be embodied in many different forms and should not be construed as limited to the embodiments set forth herein rather these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the various embodiments to at least those skilled in the art. Among other things the present innovations may be embodied as methods computers or devices. Accordingly the embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment combining software and hardware aspects. The following detailed description is therefore not to be taken in a limiting sense.

Throughout the specification and claims the following terms take the meanings explicitly associated herein unless the context clearly dictates otherwise. The phrase In one of the embodiments or in at least one of the various embodiments as used herein does not necessarily refer to the same embodiment though it may. Furthermore the phrase in another embodiment or in some embodiments as used herein does not necessarily refer to a different embodiment although it may. Thus as described below various embodiments may be readily combined without departing from the scope or spirit of the innovations disclosed herein.

In addition as used herein the term or is an inclusive or operator and is equivalent to the term and or unless the context clearly dictates otherwise. The term based on is not exclusive and allows for being based on additional factors not described unless the context clearly dictates otherwise. In addition throughout the specification the meaning of a an and the include plural references. The meaning of in includes in and on. 

The term application as used herein refers to a computing software application designed to operate on a computer. While the term application is used throughout this description one of ordinary skill in art the will appreciate that various types of applications may benefit from these innovations and are well within the scope and spirit of the disclosed innovations including but not limited to mobile applications web applications web pages desktop applications or the like.

The term application developer as used herein refers to users that design and develop applications. Application developers may create and deploy applications.

The term computer as used herein refers to networked computers and may include tablet computers handheld computers wearable computers desktop computers or the like. Mobile computers may also include notebook computers desktop computers microprocessor based or programmable consumer electronics network appliances mobile telephones smart telephones pagers radio frequency RF devices infrared IR devices Personal Digital Assistants PDAs televisions integrated devices combining at least one of the preceding computers or the like.

The terms target platform target computer as used herein refer to computers such as mobile computers client computers smart televisions game consoles set top cable boxes for televisions smart home appliances or the like upon which applications are intended to be deployed. In at least one of the various embodiments source code for an application may be compiled into machine code that is compatible for execution on one or more target computers. Different types of target computers may require compilers to generate machine code that is particular to the machine architecture of the particular target computers.

The terms machine code machine code instructions and native code as used herein refers to symbols representing instructions that have been generated by compiling source code. Machine code comprises instructions designed for execution by a CPU complex of a target computer. Further machine code may be instructions that may be executed directly on a target computer without alteration. Also the data employed by an application may be included with the machine code. In some cases a compiler and or other application development program may supply or generate machine code that is not directly compiled from the source code. In some cases the machine code may include call to application programmer interfaces provided by the target computer. These APIs may be provided at an operating system and or user interface framework level rather than being limited to low level CPU instructions. For example machine code may include system calls generally considered to be performing high level operations such as managing UI elements objects networking UI message handling file I O math functions memory management or the like.

The terms intermediate language code intermediate language as used herein refer to the code symbols and information that may be generated by compiling source code using a compiler. For cross platform development system intermediate language code may be platform independent. Intermediate language is further compiled into machine code for execution on a target computer by an ahead of time compiler or a runtime engine performing just in time compiling on the target computer.

The term parameter as used herein refers to a variable and or variable name that is included either explicitly or implicitly in the definition of a function. The precise syntax of parameters will vary depending on the particular programming language that is being employed. In at least one of the various embodiments the parameters defined for a function may be employed by a compiler to generate an identifier and or signature for the particular function. Accordingly in some programming languages function having the same name may be distinguishable because they are defined using different parameters.

The term return value as used herein refers to a variable that is passed out of function e.g. returned after it runs to completion. Note depending on the programming language return values for functions may be optional.

The term parameter type as used herein refers to the type of data type represented by a defined parameter. In at least one of the various embodiments parameters are often defined to represent a specific particular data type. Accordingly a compiler may be arranged to confirm in source code whether arguments having the correct specified argument types are passed as arguments to functions. In generic programming one or more parameter types may be passed to as arguments to generic functions. During runtime and or compilation of the application source code the parameter type arguments may be determined enabling the runtime environment and or the compiler to generate a type specific machine code version of the generic function.

The terms multi size data type and multi size type as used herein refer to data types used in source code and intermediate language code that may represent data type of indeterminate size. The actual size of the data type may be determined during just in time compiling by a runtime engine and or AOT compiling by a compiler. Multi size types are described in detail below.

The following briefly describes the embodiments of the invention in order to provide a basic understanding of some aspects of the invention. This brief description is not intended as an extensive overview. It is not intended to identify key or critical elements or to delineate or otherwise narrow the scope. Its purpose is merely to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

Briefly stated various embodiments are directed towards cross platform development tools that enable application developers to target more than one target platform using that same source code when developing applications. Further some cross platform development environments enable application developers to use the familiar programming language and development environment to development applications for different target platforms and or target computers.

In at least one of the various embodiments compiling the intermediate language version of the application into a machine code version of the application may include generating the machine code version using a runtime engine that executing on the target computer such that the runtime engine may enable just in time compilation of the machine code version of the application.

In some cases the differences between two or more target platforms may be obscured by the target platforms and or the target platform programming interfaces. For example if two target computers have different word sizes e.g. 32 bit versus 64 bit they may be similar in many ways except for the sizes of data types used to access the native code. Also for some target platforms if machine code generated by the cross platform development environment includes mismatch native code calls the application may crash or otherwise produce an error during execution or code generation of the application. In some cases the potential for mismatch may not be discovered until runtime. Thus if there is possibility of an architectural mismatch occurring developers may generate an application for each possible target computer architecture. However this may be disadvantageous because it may produce multiple application versions to manage and distribute as well as the administration effort required to deploy the correct version for a given target computer.

Accordingly in at least one of the various embodiments source code used by a cross platform development environment may be innovatively arranged to include multi size data types. The multi sized data type may be employed in the source code for cross platform development and then during runtime a runtime engine may determine the correct data types to employ based on the architecture of the target computer. For example source code used for a cross platform development system may be arranged to have multi sized types referred to as native types. Here they are called native types because during runtime they may take the form of a data type corresponding to the architecture of the target computer. Thus if where there is a possibility of architectural mismatch e.g. word size differences occurring on target computer the application programmer may employ the multi size native types in the source code. Accordingly during the execution of the application the runtime engine may replace the multi size native types with the actual data types that support the architecture of the target computer.

Furthermore briefly stated various embodiments are directed towards embodiments are directed to generating applications that include multi sized types that may be running in managed code. In at least one of the various embodiments during the compilation of an intermediate language version of an application into a machine code version of the application if a multi size type is encountered or used in an intermediate language code a runtime engine and or an AOT compiler may perform various actions to process the multi size types. In at least one of the various embodiments the multi size type may be a field embedded in a data structure. Further in at least one of the various embodiments the multi size type may corresponds to one of a an integer an unsigned integer or a floating value.

In at least one of the various embodiments architecture information associated with the target computer may be determined such that the architecture information includes at least a word size of the target computer. In at least one of the various embodiments determining the word size of may include determining the word size to be at least one of 16 bits 32 bits 64 bits or the like.

In at least one of the various embodiments one or more data types corresponding to the architecture of the target computer and the multi sized types may be determined based on the architecture information of the target computer.

In at least one of the various embodiments one or more native code calls associated with the intermediate language code call may be determined such that the parameters of the one or more native code calls match the architecture dependent data type. In at least one of the various embodiments determining the one or more native code call associated with the intermediate language code call may be based on a pattern match that includes the data types and the name of the native code call.

In at least one of the various embodiments a machine code version of the intermediate language code call may be generated that corresponds to the architecture information of the target computer. In at least one of the various embodiments the generated machine code version of the intermediate language code call may include a portion of machine code that corresponds to a calling convention supported by the target computer.

In at least one of the various embodiments when the target computer enables just in time compiling the generated machine code version of the intermediate language code may be executed with at least one value of the multi size types and the one or more data types specific to the target computer.

In at least one of the various embodiments when the target computer disables just in time compiling the generated machine code version of the intermediate language code may be inserted in the machine code version of the application with at least one value of the multi size types and the one or more data types as determined for the target computer.

In at least one of the various embodiments the intermediate language code may be generated from at least one source code file such that the intermediate language code is deployable to a plurality of target platforms having different architectures.

At least one embodiment of client computers is described in more detail below in conjunction with . In one embodiment at least some of client computers may operate over one or more wired and or wireless networks such as networks and or . Generally client computers may include virtually any computer capable of communicating over a network to send and receive information perform various online activities offline actions or the like. In one embodiment one or more of client computers may be configured to operate within a business or other entity to perform a variety of services for the business or other entity. For example client computers may be configured to operate as a web server firewall client application media player mobile telephone game console desktop computer or the like. However client computers are not constrained to these services and may also be employed for example as for end user computing in other embodiments. It should be recognized that more or less client computers as shown in may be included within a system such as described herein and embodiments are therefore not constrained by the number or type of client computers employed.

Computers that may operate as client computer may include computers that typically connect using a wired or wireless communications medium such as personal computers multiprocessor systems microprocessor based or programmable electronic devices network PCs or the like. In some embodiments client computers may include virtually any portable computer capable of connecting to another computer and receiving information such as laptop computer mobile computer tablet computers or the like. However portable computers are not so limited and may also include other portable computers such as cellular telephones display pagers radio frequency RF devices infrared IR devices Personal Digital Assistants PDAs handheld computers wearable computers integrated devices combining one or more of the preceding computers or the like. As such client computers typically range widely in terms of capabilities and features. Moreover client computers may access various computing applications including a browser or other web based application.

A web enabled client computer may include a browser application that is configured to receive and to send web pages web based messages and the like. The browser application may be configured to receive and display graphics text multimedia and the like employing virtually any web based language including a wireless application protocol messages WAP and the like. In one embodiment the browser application is enabled to employ Handheld Device Markup Language HDML Wireless Markup Language WML WMLScript JavaScript Standard Generalized Markup Language SGML HyperText Markup Language HTML eXtensible Markup Language XML JavaScript Object Notation JSON or the like to display and send a message. In one embodiment a user of the client computer may employ the browser application to perform various activities over a network online . However another application may also be used to perform various online activities.

Client computers also may include at least one other client application that is configured to receive and or send content between another computer. The client application may include a capability to send and or receive content or the like. The client application may further provide information that identifies itself including a type capability name and the like. In one embodiment client computers may uniquely identify themselves through any of a variety of mechanisms including an Internet Protocol IP address a phone number Mobile Identification Number MIN an electronic serial number ESN or other device identifier. Such information may be provided in a network packet or the like sent between other client computers Development Computer or other computers.

Client computers may further be configured to include a client application that enables an end user to log into an end user account that may be managed by another computer such as Development Computer or the like. Such an end user account in one non limiting example may be configured to enable the end user to manage one or more online activities including in one non limiting example project management software development system administration configuration management search activities social networking activities browse various websites communicate with other users or the like.

Wireless network is configured to couple client computers and its components with network . Wireless network may include any of a variety of wireless sub networks that may further overlay stand alone ad hoc networks and the like to provide an infrastructure oriented connection for client computers . Such sub networks may include mesh networks Wireless LAN WLAN networks cellular networks and the like. In one embodiment the system may include more than one wireless network.

Wireless network may further include an autonomous system of terminals gateways routers and the like connected by wireless radio links and the like. These connectors may be configured to move freely and randomly and organize themselves arbitrarily such that the topology of wireless network may change rapidly.

Wireless network may further employ a plurality of access technologies including 2nd 2G 3rd 3G 4th 4G 5th 5G generation radio access for cellular systems WLAN Wireless Router WR mesh and the like. Access technologies such as 2G 3G 4G 5G and future access networks may enable wide area coverage for mobile computers such as client computers with various degrees of mobility. In one non limiting example wireless network may enable a radio connection through a radio network access such as Global System for Mobil communication GSM General Packet Radio Services GPRS Enhanced Data GSM Environment EDGE code division multiple access CDMA time division multiple access TDMA Wideband Code Division Multiple Access WCDMA High Speed Downlink Packet Access HSDPA Long Term Evolution LTE and the like. In essence wireless network may include virtually any wireless communication mechanism by which information may travel between client computers and another computer network a cloud based network a cloud instance or the like.

Network is configured to couple network computers with other computers including Development Computer client computers through wireless network or the like. Network is enabled to employ any form of computer readable media for communicating information from one electronic device to another. Also network can include the Internet in addition to local area networks LANs wide area networks WANs direct connections such as through a universal serial bus USB port other forms of computer readable media or any combination thereof. On an interconnected set of LANs including those based on differing architectures and protocols a router acts as a link between LANs enabling messages to be sent from one to another. In addition communication links within LANs typically include twisted wire pair or coaxial cable while communication links between networks may utilize analog telephone lines full or fractional dedicated digital lines including T1 T2 T3 and T4 and or other carrier mechanisms including for example E carriers Integrated Services Digital Networks ISDNs Digital Subscriber Lines DSLs wireless links including satellite links or other communications links known to those skilled in the art. Moreover communication links may further employ any of a variety of digital signaling technologies including without limit for example DS 0 DS 1 DS 2 DS 3 DS 4 OC 3 OC 12 OC 48 or the like. Furthermore remote computers and other related electronic devices could be remotely connected to either LANs or WANs via a modem and temporary telephone link. In one embodiment network may be configured to transport information of an Internet Protocol IP .

Additionally communication media typically embodies computer readable instructions data structures program modules or other transport mechanism and includes any information delivery media. By way of example communication media includes wired media such as twisted pair coaxial cable fiber optics wave guides and other wired media and wireless media such as acoustic RF infrared and other wireless media.

One embodiment of Development Computer is described in more detail below in conjunction with . Briefly however Development Computer includes virtually any network computer capable of performing actions for generating applications for a client computer.

Although illustrates Development Computer as a single computer the innovations and or embodiments are not so limited. For example one or more functions of Development Computer may be distributed across one or more distinct network computers. Moreover Development Computer is not limited to a particular configuration such as the one shown in . Thus in one embodiment Development Computer may be implemented using a plurality of network computers and or client computer. In other embodiments development computer may operate as a plurality of network computers within a cluster architecture a peer to peer architecture or the like. Further in at least one of the various embodiments Development Computer may be implemented using one or more cloud instances in one or more cloud networks.

As shown in the figure client computer includes a processor in communication with a mass memory via a bus . In some embodiments processor may include one or more central processing units CPU . Client computer also includes a power supply one or more network interfaces an audio interface a display a keypad an illuminator a video interface an input output interface a haptic interface and a global positioning system GPS receiver .

Power supply provides power to client computer . A rechargeable or non rechargeable battery may be used to provide power. The power may also be provided by an external power source such as an alternating current AC adapter or a powered docking cradle that supplements and or recharges a battery.

Client computer may optionally communicate with a base station not shown or directly with another computer. Network interface includes circuitry for coupling client computer to one or more networks and is constructed for use with one or more communication protocols and technologies including but not limited to GSM CDMA TDMA GPRS EDGE WCDMA HSDPA LTE user datagram protocol UDP transmission control protocol Internet protocol TCP IP short message service SMS WAP ultra wide band UWB IEEE 802.16 Worldwide Interoperability for Microwave Access WiMax session initiated protocol real time transport protocol SIP RTP or any of a variety of other wireless communication protocols. Network interface is sometimes known as a transceiver transceiving device or network interface card NIC .

Audio interface is arranged to produce and receive audio signals such as the sound of a human voice. For example audio interface may be coupled to a speaker and microphone not shown to enable telecommunication with others and or generate an audio acknowledgement for some action.

Display may be a liquid crystal display LCD gas plasma light emitting diode LED organic LED or any other type of display used with a computer. Display may also include a touch sensitive screen arranged to receive input from an object such as a stylus or a digit from a human hand.

Keypad may comprise any input device arranged to receive input from a user. For example keypad may include a push button numeric dial or a keyboard. Keypad may also include command buttons that are associated with selecting and sending images.

Illuminator may provide a status indication and or provide light. Illuminator may remain active for specific periods of time or in response to events. For example when illuminator is active it may backlight the buttons on keypad and stay on while the client computer is powered. Also illuminator may backlight these buttons in various patterns when particular actions are performed such as dialing another client computer. Illuminator may also cause light sources positioned within a transparent or translucent case of the client computer to illuminate in response to actions.

Video interface is arranged to capture video images such as a still photo a video segment an infrared video or the like. For example video interface may be coupled to a digital video camera a web camera or the like. Video interface may comprise a lens an image sensor and other electronics. Image sensors may include a complementary metal oxide semiconductor CMOS integrated circuit charge coupled device CCD or any other integrated circuit for sensing light.

Client computer also comprises input output interface for communicating with external devices such as a headset or other input or output devices not shown in . Input output interface can utilize one or more communication technologies such as USB infrared Bluetooth or the like.

Haptic interface is arranged to provide tactile feedback to a user of the client computer. For example the haptic interface may be employed to vibrate client computer in a particular way when another user of a computer is calling. In some embodiments haptic interface may be optional.

Client computer may also include GPS transceiver to determine the physical coordinates of client computer on the surface of the Earth. GPS transceiver in some embodiments may be optional. GPS transceiver typically outputs a location as latitude and longitude values. However GPS transceiver can also employ other geo positioning mechanisms including but not limited to triangulation assisted GPS AGPS Enhanced Observed Time Difference E OTD Cell Identifier CI Service Area Identifier SAI Enhanced Timing Advance ETA Base Station Subsystem BSS or the like to further determine the physical location of client computer on the surface of the Earth. It is understood that under different conditions GPS transceiver can determine a physical location within millimeters for client computer and in other cases the determined physical location may be less precise such as within a meter or significantly greater distances. In one embodiment however client computer may through other components provide other information that may be employed to determine a physical location of the computer including for example a Media Access Control MAC address IP address or the like.

Mass memory includes a Random Access Memory RAM a Read only Memory ROM and other storage means. Mass memory illustrates an example of computer readable storage media devices for storage of information such as computer readable instructions data structures program modules or other data. Mass memory stores a basic input output system BIOS or the like for controlling low level operation of client computer . The mass memory also stores an operating system for controlling the operation of client computer . It will be appreciated that this component may include a general purpose operating system such as a version of UNIX or LINUX or a specialized client communication operating system such as Microsoft Corporation s Windows Mobile Apple Corporation s iOS Google Corporation s Android or the like. The operating system may include or interface with a Java virtual machine module that enables control of hardware components and or operating system operations via Java application programs.

Mass memory further includes one or more data storage which can be utilized by client computer to store among other things applications and or other data. For example data storage may also be employed to store information that describes various capabilities of client computer . The information may then be provided to another computer based on any of a variety of events including being sent as part of a header during a communication sent upon request or the like. Data storage may also be employed to store social networking information including address books buddy lists aliases user profile information user credentials or the like. Further data storage may also store messages web page content or any of a variety of user generated content.

At least a portion of the information stored in data storage may also be stored on another component of client computer including but not limited to processor readable storage media a disk drive or other computer readable storage devices not shown within client computer .

Processor readable storage media may include volatile non transitive non transitory nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer or processor readable instructions data structures program modules or other data. Examples of computer readable storage media include RAM ROM Electrically Erasable Programmable Read only Memory EEPROM flash memory or other memory technology Compact Disc Read only Memory CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other physical medium which can be used to store the desired information and which can be accessed by a computer. Processor readable storage media may also be referred to herein as computer readable storage media and or computer readable storage device.

Applications may include computer executable instructions which when executed by client computer transmit receive and or otherwise process network data. Network data may include but is not limited to messages e.g. SMS Multimedia Message Service MMS instant message IM email and or other messages audio video and enable telecommunication with another user of another client computer. Applications may include for example a browser and other applications . Further applications may include one or more target applications generated by a development computer. Further in embodiments enables to runtime compile intermediate language code runtime may be included for processing intermediate language code into native operations on client computer .

Browser may include virtually any application configured to receive and display graphics text multimedia messages and the like employing virtually any web based language. In one embodiment the browser application is enabled to employ HDML WML WMLScript JavaScript SGML HTML XML and the like to display and send a message. However any of a variety of other web based programming languages may be employed. In one embodiment browser may enable a user of client computer to communicate with another network computer such as Development Computer as shown in .

Other applications may include but are not limited to calendars search programs email clients IM applications SMS applications voice over Internet Protocol VOIP applications contact managers task managers transcoders database programs word processing programs software development tools security applications spreadsheet programs games search programs and so forth.

Network computer includes processor processor readable storage media network interface unit an input output interface hard disk drive video display adapter and memory all in communication with each other via bus . In some embodiments processor may include one or more central processing units.

As illustrated in network computer also can communicate with the Internet or other communication networks via network interface unit which is constructed for use with various communication protocols including the TCP IP protocol. Network interface unit is sometimes known as a transceiver transceiving device or network interface card NIC .

Network computer also comprises input output interface for communicating with external devices such as a keyboard or other input or output devices not shown in . Input output interface can utilize one or more communication technologies such as USB infrared NFC Bluetooth or the like.

Memory generally includes RAM ROM and one or more permanent mass storage devices such as hard disk drive tape drive optical drive and or floppy disk drive. Memory stores operating system for controlling the operation of network computer . Any general purpose operating system may be employed. Basic input output system BIOS is also provided for controlling the low level operation of network computer .

Although illustrated separately memory may include processor readable storage media . Processor readable storage media may be referred to and or include computer readable media computer readable storage media and or processor readable storage device. Processor readable storage media may include volatile nonvolatile non transitory non transitive removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Examples of processor readable storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other media which can be used to store the desired information and which can be accessed by a computer.

Memory further includes one or more data storage which can be utilized by network computer to store among other things applications and or other data. For example data storage may also be employed to store information that describes various capabilities of network computer . The information may then be provided to another computer based on any of a variety of events including being sent as part of a header during a communication sent upon request or the like. Data storage may also be employed to store messages web page content or the like. At least a portion of the information may also be stored on another component of network computer including but not limited to processor readable storage media hard disk drive or other computer readable storage medias not shown within network computer .

Data storage may include a database text spreadsheet folder file or the like that may be configured to maintain and store user account identifiers user profiles email addresses IM addresses and or other network addresses or the like. Data storage may further include program code data algorithms and the like for use by a processor such as processor to execute and perform actions. In one embodiment at least some of data store might also be stored on another component of network computer including but not limited to processor readable storage media hard disk drive or the like.

Data storage may include application source code . In at least one of the various embodiments application source code may include information such as one or more files resources projects or the like used for generating intermediate language code and or executable applications. Also in at least one of the various embodiments data storage may include one or more of application development kits representing information and or tools for generating intermediate language code and or executable applications targeted for one or more target platforms.

Applications may include computer executable instructions which may be loaded into mass memory and run on operating system . Examples of application programs may include transcoders schedulers calendars database programs word processing programs Hypertext Transfer Protocol HTTP programs customizable user interface programs IPSec applications encryption programs security programs SMS message servers IM message servers email servers account managers and so forth. Applications may also include application compiler for performing actions for generating executable applications for one or more target platforms.

Website server may represent any of a variety of information and services that are configured to provide content including messages over a network to another computer. Thus website server can include for example a web server a File Transfer Protocol FTP server a database server a content server email server or the like. Website server may provide the content including messages over the network using any of a variety of formats including but not limited to WAP HDML WML SGML HTML XML Compact HTML cHTML Extensible HTML xHTML or the like.

In at least one of the various embodiments system comprises components and stages for developing software applications targeted to one or more computers such as mobile computers client computers game consoles set top television boxes smart televisions media broadcasting appliances or the like. In at least one of the various embodiments the logical components of system may be provided by development computers such as network computer it may be a network computer or a client computer that is arranged to include tools and facilities that enable software programmers application developers to create and generate applications for one or more target computers devices.

In at least one of the various embodiments compiler may represent one or more applications used for generating intermediate language code from provided source code such as source code . In at least one of the various embodiments compiler may comprise application compiler application developer tools cross platform development tools or the like or combination thereof.

In at least one of the various embodiments intermediate language code may represent source code that is compiled into a platform independent instructions that may be executed by a runtime engine such as runtime engine . In at least one of the various embodiments intermediate language code represents a collection of instructions and data for an application that may be installed on a target computer and executed by a runtime engine. In at least one of the various embodiments the instructions included in intermediate language code may include architecture machine independent instructions for implementing executing the instructions described in source code .

In at least one of the various embodiments runtime engine may be arranged to take intermediate language code and perform Just In Time compiling into machine code for execution on a target platform. Runtime engine may be arranged to include platform specific characteristics that enable runtime engine to execute instructions on a target platform. Runtime engines may be arranged to support target computers that may have different machine processor architectures. One of ordinary skill in the art will be familiar with the general process of compiling source code into intermediate language code for execution by a runtime engine for a target computer.

In at least one of the various embodiments some target platforms may restrict JIT compiling of machine code. Accordingly intermediate language code may be pre compiled e.g. Ahead of Time compiling into executable machine code that may be deployed directly to the target computer.

In at least one of the various embodiments machine code may represent instructions that may be executed on a target computer. In at least one of the various embodiments machine code represents a collection of instructions and data for an application that may be installed and or executed by a target computer. For target computer that enables JIT compiling the machine code may be generated as needed or on the fly by a runtime engine. In contrast for target computers that require AOT compiling machine code may be generated and installed directly on that target computer. In these cases intermediate language code and runtime engine are not installed on the target computer.

In at least one of the various embodiments the instructions included in machine code may include architecture machine specific instructions for implementing executing the instructions described in source code . Machine code targeted for target computers that have different machine processor architectures may each represent the same source code instructions differently since they are based on instruction sets that may vary depending on the target computer s architecture. One of ordinary skill in the art will be familiar with the general process of compiling source code into machine code where the same source code may produce different machine code depending on the architecture of the target computers.

In at least one of the various embodiments function may be considered to be a platform independent representation of an operation that an application want the application to perform. Accordingly a compiler and or runtime engine must be able to generate target computer specific machine code for the function. In some embodiments function may be implemented various computer programming languages such as C C C Java or the like. Here function is represented as more or less in a C style that may be compatible with many programming languages. Note one of ordinary skill in the art will appreciate that for many programming languages the source code representation of a function may vary depending on the specification of the programming. However the innovations described herein are not limited to a particular programming language. The innovations may apply to any programming language that may represent target independent functions that may be compiled into target specific machine code either JIT compiled or AOT compiled.

Returning to this example function is a function for summing two integers a and b and returning the result. In this example values provided as parameters to function have an explicit type requirement defined here as nint indicating that the parameters passed to function must be integers. However in some target computer architectures one or more native data types may vary depending on characteristics of the target platform. For example in some targets an integer may be represented by 32 bit while in others it may be represented by 64 bits. Accordingly depending on the target computer a single type definition in the source file may correspond to different native target types depending on the characteristics of the target computer. Typically the differences may be seen on using when the machine word width size of the target computer may be different.

For example Apple Computer platforms may employ parameters having types such as NSInteger NSUInteger CGFloat or the like almost exclusively in their APIs. Accordingly machine code generated by a runtime engine using such native APIs must also be generated to use these types otherwise there may be a type mismatch error during compiling and or code generation. However the underlying low level data type value for these types may vary depending on if the target machine is 32 bit or 64 bit. For example the integral types are typedefs of the long C type which is 32 bits or 64 bits in size. Likewise CGFloat is a C float on 32 bit and a C double on 64 bit machines.

In at least one of the various embodiments to avoid mismatches caused by different types sizes for different target computers a set of types may be defined for use in the source code that may be used instead of architecture dependent types. In at least one of the various embodiments since these types are employed to replace one or more native types they may be referred to as native types and or multi size types. For example in at least one of the various embodiments multi size types may include nint for signed integers nuint for unsigned integers nfloat for representing floating point values and so on. One of ordinary skill are will appreciate that the scope of these innovations include more or fewer kinds of data and are not limited to integers unsigned integers and floating point values. Accordingly more or fewer data types may have correspondent multi size types. Also as discussed below multi size type analogs for various data structures and or objects that include fields that are architecture dependent may be provided as well.

Accordingly in at least one of the various embodiments anywhere an architecture dependent type may be used in a target computer s native code API an appropriate native type such as nint nuint or nfloat may be used.

In at least one of the various embodiments function may be compiled from source code into intermediate language represented by intermediate language code function . Code generating computing environments may produce intermediate language code that is specific the particular code generating computing environment. For example Java source code may be compiled into an intermediate language known as Java byte code for execution by a Java Virtual Machine. Likewise cross platform development systems and or code generation computing environments that support the C language may often be arranged to compile source code into intermediate language code compatible with Common Intermediate Language CIL . Generally a compiler compiler will be provided source code and produce intermediate language code. The specifics of the intermediate language are not shown in function . Though it may be assumed that it will be compatible with the runtime engine and or AOT compiler used in the computing environment.

However in at least one of the various embodiments intermediate language code function will include the native type as defined in the source code. This enables a program that is compiled into intermediate language code to avoid having target computer specific information included in the intermediate language code. As described above the runtime engine that executes the intermediate language version of the program will be arranged to accommodate the particular architecture of the target computer at runtime.

In at least one of the various embodiments if the intermediate language code includes native types for representing types that may be architecture dependent the runtime engine may be arranged to replace the indefinite native type with a particular type for the particular architecture. Accordingly the platform architecture independent intermediate language code function function may be processed by a runtime engine to produce platform architecture machine code that conforms to the type restrictions and calling conventions of the target computer.

For example if the runtime engine is on a machine with a 32 bit architecture it may produce a function such as function where the native type nints in this example are replaced with the appropriate target computer type. Accordingly in this example for function the nints are replaced with ints assuming that the int type represents 32 bit signed integers for the target platform . Also in this example machine code function is generated executed for a target platform with 64 bit architectures where 64 bit signed integers are represented by the long data type.

In at least one of the various embodiments during execution of an application a runtime engine may make calls to native functions and procedures of the target computer. These native functions may include various built in services provided by the underlying target platform. Accordingly the runtime engine may be required to map operations from intermediate language code into native operations. In this document native operations may be referred to as machine code indicating that code may be generated for accessing native services provided by the target computer. Accordingly machine code may include high level and or low level system service calls that may be provided by the target system. These service system calls may often require particular data types to be provided by the runtime engine for passing parameters.

Accordingly type mappings as shown in table may be arranged. Table illustrates one example of a mapping for at least one of the various embodiments. This example is illustrated as being compatible with code generating environment that uses an object oriented programming language such as C . Native type column shows platform independent types that may support multiple sizes column shows size specific data types for 32 bit architectures and column shows size specific data types for 64 bit architectures. Likewise row shows types for signed integers row holds types for unsigned integers and row shows types for representing floating point numbers.

In at least one of the various embodiments a native type shown in column may be considered multi sized because it may represent a 32 bit sized value or a 64 bit sized depending on the target computer an application is executed on. As discussed above at execution time the runtime engine may be arranged to replace a multi sized native type with the specific sized type that is required for the target computer. At least one advantage of using multi sized data types is that source code may be compiled into intermediate language code that may be executed an target platforms having different architectures e.g. 32 bit versus 64 bit 

In at least one of the various embodiments if the target computer does not support runtime code generation e.g. some smart phones game consoles cable set top boxes or the like the source code and its corresponding intermediate language code may be pre compiled into an executable application before it is deployed to the target computer. If this is the case the process of converting multi size types nints nuints nfloats to target specific types may occur during the pre compiling operation.

In at least one of the various embodiments one or more frameworks and or code libraries provided for use in source code may be arranged to use multi size types. In some embodiments each API call provided that would otherwise use a target computer dependent data type may be modified to employ correspondent multi size data type. For example API functions that include parameters having data types that vary in size depending on if the target computer uses a 32 bit architecture or a 64 bit architecture may be replaced with versions that use the multi size types. Accordingly in at least one of the various embodiments if the runtime encounters these types during execution it may call underlying target computer function calls native code call using the correct size type.

At block in at least one of the various embodiments the compiler may generate intermediate language code based on the provided source code. In at least one of the various embodiments the compiler may compile the source code into intermediate language code that is compatible with a particular runtime engine. In at least one of the various embodiments compilers may be arranged to compiles various computer programming languages into intermediate language code for a runtime engine.

Accordingly compilers may compile source code written in different languages for the same runtime engine. For example source code may be written in various languages such as C Java C C F Visual Basic or the like. A corresponding compiler may be designed to produce intermediate language code compatible with the same runtime engine for each language.

Likewise in at least one of the various embodiments intermediate language code may be arranged to be platform independent such that compiler generated intermediate language code may be compatible with runtime engines for different target computers.

At decision block in at least one of the various embodiments if the target platform requires ahead of time compiling control may flow to block otherwise control may flow to block . As discussed above some target computers may be restricted from employing JIT code generation. Accordingly target computers that support JIT code generation may be handled differently that target computers that are restricted from using JIT code generation.

At block in at least one of the various embodiments the intermediate language code may be provided to the target platform. After the intermediate language code is generated it may be provided to a target computer. For many code generation environments the intermediate language code may be packaged and or bundled for delivery not unlike normal executable application may be provided to a target computer.

At block in at least one of the various embodiments the intermediate language code may be executed on the target platform using a runtime engine. A runtime engine that is arranged to generate and execute machine code for the target computer may be employed to generate and execute machine code correspondent to the provided intermediate language code. In practice in at least one of the various embodiments the target computer may be arranged configured to automatically transparently provide the intermediate language code to the runtime engine when a user or system process indicates that the intermediate language code should be executed. E.g. the provided intermediate language code may look like an executable application. And if activated the runtime engine may be launched and provided the intermediate language code for execution. Next control may be returned to a calling process.

At block in at least one of the various embodiments since the target computer may be restricted from performing onboard code generation the intermediate language code for the application must be pre compiled into machine code using an AOT compiler. In at least one of the various embodiments the AOT compiler may be substantially similar to a runtime engine except that it may be arranged to compile the intermediate language code to executable machine code that may run as a standalone application on the target computer.

At block in at least one of the various embodiments the executable machine code comprising the application may be provided to the target computer. This may be accomplished by an installation procedure or the like similar to installing other executable applications on the target computer.

At block in at least one of the various embodiments the executable machine code application may be executed on the target computer. The executable machine code may be executed on the target computer just as other applications that may be located on the target computer e.g. no runtime engine required . Next control may be returned to a calling process.

At decision block in at least one of the various embodiments if a multi size type is encountered by the runtime engine control may flow to block for further processing otherwise control may flow to decision block .

In at least one of the various embodiments the runtime engine may be executing the application on the target computer by generating machine code in real time JIT compiling code generation . During this process the runtime engine may determine that a pending intermediate language code operation includes one or more multi sized data types. For example the runtime engine may employ a type map such as shown in for determining if a multi size type is encountered. In some embodiments the multi size types may be indicated in the intermediate language code using abbreviated indicators such as flags tags or the like. Accordingly if a multi size type is identified the runtime engine may take further action to disambiguate the type sizes.

In at least one of the various embodiments the multi size type may be included embedded in a function call that maps to native function call for the target platform. In at least one of the various embodiments the multi size type may be a field in a higher level data structure such as a rectangle coordinate point or the like. Accordingly the intermediate language code that includes such higher level data structures may have multi size types embedded in those data structures.

At block in at least one of the various embodiments the runtime engine may determine the appropriate type based on the target computer. In at least one of the various embodiments since the runtime engine arranged to operate on the target computer it will have access to target computer specific architecture information of the target computer for determining the word size memory size or the like appropriate for the multi size types. Alternatively the runtime engine may be an application that is specifically targeted to the target computer so it may be configured with the architecture information embedded in the runtime engine. For example the runtime engine may be arranged to determine if it is running on 32 bit 64 bit 128 bit or the like architecture target computer.

Further in at least one of the various embodiments the architecture information may be employed for determining addition information that may be used for generating the machine code calls such as calling conventions byte word order e.g. big endian little endian return value conventions or the like.

At block in at least one of the various embodiments the native call that may be mapped to the intermediate language call may be determined. In at least one of the various embodiments the runtime engine may determine the native call that is correspondent to the intermediate language code that is pending.

For example if the intermediate language code corresponds to a function such as Add nint a nint b the runtime may choose between native code functions Add int a int b for 32 bit machines and Add long a long b for 64 bit machines. Accordingly it may make the determination of the function to execute based on the size information determined in block .

In at least one of the various embodiments the determination of the appropriate function may be critical because some target computers may crash or otherwise generate an error if the parameters types are incorrect. For example if the runtime engine generated code for calling Add int a int b when the target computer expects Add long a long b it may cause an error during runtime.

In at least one of the various embodiments the runtime engine and or the AOT compiler may determine the appropriate native code function e.g. native code calls by using a pattern matching engine that determines matches based on the name of the function and the architecture specific data types used for the particular architecture of the target computer.

At block in at least one of the various embodiments the machine code for the native call may be generated by the runtime engine. In this context the machine code for the native call may be native function call provided by the target computer for performing the operations corresponding the intermediate language code. In at least one of the various embodiments there may be a relatively close one to one mapping of source code functions to target computer functions. In other cases for some embodiments the runtime engine may generate multiple native function calls to implement to the operations corresponding to the source code intermediate language code.

At block in at least one of the various embodiments the machine code for the native call may be executed using values provided using the multi sized type parameters. In at least one of the various embodiments the multi size data type may be associated with data values. Thus if the native call appropriate for the machine architecture of the target computer has been determined the call may be executed by the runtime engine with values for the sized parameters passed into the native function call.

In at least one of the various embodiments the multi size types may include a value property that hold a value for an instance of the multi size type. For example if nint a has a value of 1000 and nint b has a value of 200 for a runtime engine may execute the native function Add 1000 200 using Add int a int b for a 32 bit machine or Add long a long b for a 64 bit machine.

Likewise in at least one of the various embodiments if the multi size types are fields in a data structure such as a rectangle or coordinate point the data structures may be replaced with a similar data structure that has the appropriate architecture specific data type. For example a structure such as Rect for rectangle may be defined using multi size types as such Rect nint x nint y nint height nint width accordingly for a 32 bit architecture Rect int x int y int height int width would be used while for a 64 bit architecture Rect long x long y long height long width and so on.

Further in at least one of the various embodiments different architectures for target computers may require different calling conventions for passing arguments and received return values. Accordingly the runtime engine may arrange the machine code to employ the specific calling conventions for the target platform.

At decision block in at least one of the various embodiments if the application is still running control may loop back to block otherwise control may be returned a calling process. In at least one of the various embodiments process may be an ongoing operation whether it is performing just in time compiling code generation or ahead of time compilation.

It will be understood that each block of the flowchart illustration and combinations of blocks in the flowchart illustration can be implemented by computer program instructions. These program instructions may be provided to a processor to produce a machine such that the instructions which execute on the processor create means for implementing the actions specified in the flowchart block or blocks. The computer program instructions may be executed by a processor to cause a series of operational steps to be performed by the processor to produce a computer implemented process such that the instructions which execute on the processor to provide steps for implementing the actions specified in the flowchart block or blocks. The computer program instructions may also cause at least some of the operational steps shown in the blocks of the flowchart to be performed in parallel. These program instructions may be stored on some type of machine readable storage media such as processor readable non transitive storage media or the like. Moreover some of the steps may also be performed across more than one processor such as might arise in a multi processor computer system. In addition one or more blocks or combinations of blocks in the flowchart illustration may also be performed concurrently with other blocks or combinations of blocks or even in a different sequence than illustrated without departing from the scope or spirit of the invention.

Accordingly blocks of the flowchart illustration support combinations of means for performing the specified actions combinations of steps for performing the specified actions and program instruction means for performing the specified actions. It will also be understood that each block of the flowchart illustration and combinations of blocks in the flowchart illustration can be implemented by special purpose hardware based systems which perform the specified actions or steps or combinations of special purpose hardware and computer instructions. The foregoing example should not be construed as limiting and or exhaustive but rather an illustrative use case to show an implementation of at least one of the various embodiments of the invention.

