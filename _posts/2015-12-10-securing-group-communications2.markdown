---

title: Securing group communications
abstract: The secure messaging app described herein allows a user to create a secure social feed in order to share content with just a few friends or thousands of recipients. The user encrypts their content and then publishes the encrypted content to the secure social feed. Accordingly, only authorized recipients can decrypt and view the content. Furthermore, the user may administer the secure social feed to manage the addition and/or removal of users from the secure social feed. Further, the user periodically updates the parameters of the secure social feed to manage users' access to the feed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09654288&OS=09654288&RS=09654288
owner: Wickr Inc.
number: 09654288
owner_city: San Francisco
owner_country: US
publication_date: 20151210
---
This application claims priority to U.S. Provisional Patent Application No. 62 090 754 entitled SECURING GROUP COMMUNICATIONS filed Dec. 11 2014 which is incorporated herein by reference for all purposes.

Users of electronic devices increasingly desire to communicate privately and securely with one another. Unfortunately existing approaches to securing communications can be difficult and or cumbersome to use. As one example some approaches to data security make use of digital certificates or keys or pre shared passwords which can be tedious to manage. Further existing approaches are often susceptible to interception e.g. eavesdropping and man in the middle attacks forensic analysis and impersonation. Improvements to digital communication techniques are therefore desirable.

The invention can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer program product embodied on a computer readable storage medium and or a processor such as a processor configured to execute instructions stored on and or provided by a memory coupled to the processor. In this specification these implementations or any other form that the invention may take may be referred to as techniques. In general the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein the term processor refers to one or more devices circuits and or processing cores configured to process data such as computer program instructions.

A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.

Users of client devices such as client devices communicate securely with one another using techniques described herein. As shown in client devices include personal computers laptop computers tablets and mobile telephony devices . Some client devices e.g. tablet device make use of techniques described herein via a messaging application also referred to as an app obtained from a software distribution server . Examples of software distribution servers which can comprise a single server or multiple servers working in cooperation include app stores e.g. provided by Apple Google Blackberry Microsoft Amazon and or other entities and other webservers offering app and or other software downloads. Client devices can also make use of a web interface e.g. provided by platform instead of or in addition to a dedicated messaging application installed on the device. Other types of devices not depicted in can also be used in conjunction with the techniques described herein such as game consoles camera video recorders video players e.g. incorporating DVD Blu ray Red Laser Optical and or streaming technologies and other network connected appliances as applicable.

Communications are exchanged via one or more networks depicted collectively in as network cloud . Such networks can include wired wireless cellular and satellite networks. And such networks can be closed private networks as well open networks e.g. the Internet . Further as used herein communications and messages can take a variety of forms including text messages documents audiovisual files SMSes and voice and video calls. Further in addition to personal business or other types of conversations the content can pertain to electronic transactions such as credit card security password protection directories and storage drive protection video on demand security online gaming gambling electronic distribution of music videos documents online learning systems databases cloud storage and cloud environments bank transactions voting processes military communications security of medical records communication between medically implanted devices and doctors etc. As will be described in more detail below the exchange of communications is facilitated by security platform or embodiments thereof as applicable .

As will be described in more detail below platform can be used to facilitate the secure exchange of social networking messages. For example platform can be used to facilitate the posting of messages e.g. created by users of platform to social network services e.g. Facebook and or e.g. Twitter . Other users of platform that are authorized by the posting author can securely view the messages either inline or as a link redirecting the users to a viewer or other appropriate way to securely view the message content. As applicable participants of services that do not use platform or are not authorized viewers of the messages even if users of platform can be shown decoy text images within services such as a picture of a kitten or default random text. In various embodiments users of platform and services can continue to post messages e.g. public messages or messages otherwise not secured by platform to services in the existing manner services make information available and can also optionally interleave secure messages. Thus a user of both service and platform could continue to make ten typical posts to service using existing tools for service then post a single or multiple secure posts with the assistance of platform and then post additional typical messages to service without using platform s security services . As will be described in more detail below message expiration can be enforced by platform of such social messages whether as a fixed default applicable to all users e.g. 24 hours or a customizable time.

Integration of platform with services and can be done in a variety of ways including by platform using APIs made available by services and whether by passing messages from an application associated with platform to applications maintained by the operators of services and or by platform or another appropriate entity making available a custom application that allows users of the application to post to services and or e.g. without requiring the use of or cooperation with any applications made available by services . In some embodiments instead of or in addition to integrating with services such as service secure social networking messaging is handled entirely by platform e.g. with platform providing a standalone social network .

Also as will be described in more detail below a variety of entities can operate embodiments of platform . Further multiple embodiments of platform can exist simultaneously in an environment with those multiple embodiments operated by a single entity or different entities with the techniques described herein adapted as applicable. For example platform can be operated by a non profit organization or an individual a company or any other appropriate type of entity or set of entities for use by the general public e.g. with arbitrary members of the public able to use platform to exchange communications . As another example an enterprise organization can operate an embodiment of platform exclusively for use by the employees of the enterprise and as applicable other individuals such as vendors . As yet another example a company or other entity or entities can operate one or multiple instances of platform on behalf of multiple organizations such as small business or companies schools charitable organizations etc.

Suppose a user of client device hereinafter referred to as Alice would like to send a secure message to her friend Bob a user of client device in accordance with techniques described herein. In some embodiments in order to send a message to Bob Alice first obtains a copy of a messaging application suitable for her device. For example if Alice s tablet device runs iOS she could obtain an app for her tablet from the Apple App Store an example of software distribution server . Bob similarly obtains an appropriate application suitable for his client device e.g. an Android based smartphone from an appropriate location e.g. the Google Play store or Amazon Appstore . In some embodiments client devices make use of a web based application e.g. made available by platform through interface instead of or in addition to a dedicated installed application.

In embodiments where platform is operated on behalf of specific groups of individuals e.g. on behalf of employees of a company students teachers at a school company stockholders members of a club premium customers etc. the app can be obtained from a publicly accessible software distribution server as Alice and Bob do above e.g. from the Google Play store can be obtained from a privately operated software distribution server e.g. made available only to company issued devices or devices otherwise authorized to communicate with the private server can be provisioned by support personnel associated with the group e.g. by being directly installed by the support personnel or included in a device image etc. as applicable. For example suppose an embodiment of platform is operated by ACME University on behalf of its students and faculty staff. As mentioned above the university can itself operate an embodiment of platform or can contract with a third party to make available the embodiment of platform for university users. Freshmen and other new students employees as applicable at ACME University can be provided with instructions for downloading and installing an ACME University specific embodiment of the secure messaging application from a university server in conjunction with their new student orientation. As another example new employees of Beta Corporation can be issued company phones and or other devices such as laptops with an embodiment of the secure messaging application pre installed and pre configured by support personnel for Beta Corporation e.g. where Beta Corporation operates an embodiment of platform on behalf of its employees and business partners . As yet another example business partners of Beta Corporation e.g. vendors can be provided with instructions for provisioning a Beta Corporation specific embodiment of the secure messaging application via email or via a website. And the Beta Corporation specific embodiment of the secure messaging application can be made available via email a website or any other appropriate mechanism.

Returning to the example of Alice a member of the public using an embodiment of platform made available to the public once Alice s tablet has obtained a copy of the secure messaging app the app is installed and Alice is able to register for an account. An instance of a messaging app usable in conjunction with the techniques described herein is depicted in as app installed on device . Examples of events that can occur during an installation initialization registration process are illustrated in and will now be described. While the events will be described in one order events can also be performed in other orders and or in parallel instead of in sequence in other embodiments. Further various events can be added or omitted in some embodiments as applicable. For example where an embodiment of platform is made available by an enterprise for use by its employees or a school on behalf of its student staff faculty etc. account creation and initialization may at least partially be performed by support personnel and or may be performed at least partially in an automated manner based on a new employee member workflow instead of being performed by an end user. As a further example administrators e.g. in the school or enterprise scenarios can pre configure privacy list information described in more detail below on behalf of users.

In some embodiments process is performed on a client device such as Alice s client device . The process begins at when a pool of public private keypairs for the application is generated on client device e.g. using RSA ECDH or any other appropriate asymmetric encryption algorithms . As one example the keypairs can be generated using Eliptic Curve Algorithm with Diffie Helman Key Exchange ECDH . Other cryptographic standards can also be used such as RSA. In some embodiments the keypairs are randomly seeded. As will be described in more detail below each message Alice sends whether to Bob or anyone else can be encrypted with a unique random key that is used only once then destroyed forensically by Alice the sender s device. The forensic destruction ensures that the deleted keys cannot be recovered from Alice s device even via digital forensics methods.

At a pool of keys i.e. a number of keypairs equal to the size initialized at is generated on client device . As mentioned above the keypairs can be generated using Eliptic Curve Algorithm with Diffie Helman Key Exchange ECDH . Other cryptographic standards can also be used such as RSA.

At a reference value is assigned for each of the respective keypairs. As one example suppose fifty keypairs are generated at portion of process . At fifty respective reference values are assigned to each of the respective keypairs. The reference values will be used to distinguish the various keys in the pool of keys from one another and can be assigned to the keypairs in a variety of ways. As one example a six digit random number can be generated by device as the first reference value for the first keypair and each subsequent reference value can be selected as an increment of the first reference value. As another example every reference value can be randomly selected. Other schemes for selecting assigning reference values can be employed at as applicable.

At the private keys and reference values are stored e.g. in a secure database residing on device . As will be described in more detail below the corresponding public keys will be transmitted to platform along with the associated reference values and platform will designate one of the public keys in the pool as a reserve key.

Returning to at a random server seed is generated and at a random local seed is generated. The seeds are used in conjunction with cryptographic key generation and in some embodiments the seeds are determined based on captured hardware information described in more detail below .

At a device identifier deviceID is created from captured hardware information. Examples of captured hardware information include hard drive identifiers motherboard identifiers CPU identifiers and MAC addresses for wireless LAN Bluetooth and optical cards. Combinations of information pertaining to device characteristics such as RAM CACHE controller cards etc. can also be used to uniquely identify the device. Some or all of the captured hardware information is run through a cryptographic hash algorithm such as SHA 256 to create a unique deviceID for the device. The captured hardware information can also be used for other purposes such as to seed cryptographic functions.

At Alice is asked via an interface provided by app to supply a desired username. Alice enters Alice into the interface. A determination is made as to whether the username is available. As one example app can supply a cryptographic hash of Alice to platform for checking. If platform does not already have a record for that hash the username Alice is available for Alice to use. If platform already has a record of that hash Alice is instructed by the interface to pick an alternate username. Once Alice has selected an available username she is asked to supply a password. As mentioned above in some embodiments portions of process may be omitted or performed by other entities as applicable . For example where a university student at ACME University is getting set up to use an ACME University specific embodiment of platform the user s name may be preselected or otherwise issued by the University rather than being selected by the user.

At an application identifier appID is created. The appID is a unique identifier for the particular installation of the messaging app. If Alice installs the messaging app on multiple devices each of her devices will have its own unique appID. And each of her devices will also have its own unique deviceID. In some embodiments the appID is created by hashing Alice s selected password and other information such as device information.

Finally at Alice s public keys and reference values deviceID and appID are sent to platform in a secure manner. As one example in some embodiments app is configured to communicate with platform via TLS.

As mentioned above alternate versions of processes and or can be used in accordance with the techniques described herein. As one example username password selection can be performed prior to other portions of process and can be performed by an entity other than the end user of the messaging application e.g. where an employer determines a username for an employee . As another example the random server seed generation and random local seed generation can be performed prior to the keypair generation e.g. with the local seed being used in conjunction with the generating of the keypairs. As yet another example portions of processes and or can be combined and or omitted as applicable. For example instead of generating a pool of fifty key pairs assigning reference values to the pool as a batch operation and storing the keys values as a batch operation fifty iterations of a process that generates a key pair assigns a reference value and stores the information can be performed.

As mentioned above security platform is configured to facilitate the exchange of communications e.g. among any all of client devices . Also as mentioned above platform can be operated by a variety of entities on behalf of a variety of end users. For example one embodiment of platform can be made available to members of the public whether as a public service or for a fee. As another example another embodiment of platform can be made available by a business by a school by a charitable organization etc. and its use limited to its employees students members etc. as applicable. Additional detail regarding various aspects of embodiments of platform will now be provided.

Security platform includes one or more interface s for communicating with client devices such as client devices . As one example platform provides an application programming interface API configured to communicate with apps installed on client devices such as app and app . Platform can also provide other types of interfaces such as a web interface or stand alone software programs for desktops and laptops running on various Operating Systems OSes . The web interface can allow users of client devices such as client devices and to exchange messages securely whether with one another or other users without the need for a separately installed messaging application. The stand alone software program allows users to exchange secure messages via software that is downloaded by each user. As will be discussed in more detail below e.g. in Section G in various embodiments platform makes available e.g. via one or more interface s a master clock time. The master clock time can be used in various embodiments to enforce secure time to live TTL values of messages. The TTL values can be used to enforce e.g. on behalf of a message sender time constraints on message access e.g. by a recipient .

Security platform also includes a database . Included in database is a record for each user of platform . Each record has associated with it information such as the user s public key pool and associated reference values deviceID s appID s privacy mode and privacy list entries and messages. As shown in database is relational and stores information in a variety of tables including a table of hashed usernames a table of public keys and reference values a table of deviceIDs a table of appIDs and a table of messages . Other techniques can also be used to store the information used by platform . For example messages can be stored in a separate storage instead of being stored within database .

Finally security platform includes a processing engine which performs a variety of tasks including interacting with database on behalf of interface s . As will be described in more detail below one task performed by platform e.g. by processing engine is to designate one of the keys in the pool of public keys e.g. received from Alice at the conclusion of portion of process as a reserve key. Another task performed by platform e.g. processing engine is to facilitate the addition of new keys to a user s key pool as the keys are used. Yet another task performed by platform e.g. processing engine is to dynamically adjust the size of a user s key pool as needed. Yet another task performed by platform in various embodiments is confirming whether mutual privacy settings permit a given user to communicate with another user described in more detail in Section H and providing keys for communications only where privacy settings permit.

The embodiment of platform depicted in comprises standard commercially available server hardware e.g. having a multi core processor s 8G of RAM gigabit network interface adaptor s and hard drive s running a typical server class operating system e.g. Linux . In various embodiments platform is implemented across a scalable infrastructure comprising multiple such servers solid state drives and or other applicable high performance hardware.

Whenever platform is described as performing a task either a single component or a subset of components or all components of platform may cooperate to perform the task. Similarly whenever a component of platform is described as performing a task a subcomponent may perform the task and or the component may perform the task in conjunction with other components.

Returning back to Alice s desire to send a message to Bob at the conclusion of Section A above Alice has successfully registered her username Alice with security platform . And Bob is also a user of platform . Suppose Alice would like to send a message to Bob. She starts app and is presented with an interface that includes a compose option. Alice selects the compose option and is presented with a message composition interface.

An example message composition interface is shown in . In particular depicts interface as rendered on an example tablet device connected to the Internet via an appropriate connection such as 3G 4G or higher cellular connection WiFi satellite wireless or wired LANs Bluetooth etc. Tablet device includes a touchscreen. An on screen keyboard is provided for Alice in region . Alice can enter the usernames of one or more recipients in region . As will be described in more detail below e.g. in Section H in some embodiments any names that Alice enters into region are checked against Alice s privacy list and the privacy lists of the recipients to confirm that privacy settings allow Alice to message the recipient s . She can enter message text in region . Alice can optionally add attachments by interacting with buttons shown in region . Examples of attachments include but are not limited to documents pictures and audiovisual clips. By selecting button Alice can specify various message control options such as the lifetime expiration of the message the enforcement of which is described in more detail below in Section G on which device s it can be unencrypted read and sharing saving forwarding recalling and deleting options.

If Alice is satisfied with her message she can send it to Bob by clicking the send button . If she wishes to cancel out of composing the message she can click the cancel button . Suppose Alice clicks send button after composing the message shown in interface . An example of the events that occur in some embodiments in conjunction with Alice sending a message is illustrated as process in and will now be described.

At a random symmetric encryption key is generated e.g. by app on device . As one example the symmetric key is an AES 256 bit key. At the symmetric encryption key is used to encrypt the message body any attachments and any message control options. In some embodiments Alice s own information e.g. public key s and associated reference value s deviceID s and appID s are included in the DSB as well. Finally at the symmetric key is encrypted with the particular public key of each recipient obtained from the pool of public keys . A DSB encapsulation is then generated and contains the aforementioned components and reference values of the public keys used to encrypt the symmetric key. Examples of the DSB format are provided in Section D below.

In some cases a user may own multiple devices. For example Bob may be the owner of device and both of which are configured with secure messaging apps. Each of Bob s installations will have its own deviceID and appID. When the DSB is created each of Bob s devices will be considered a separate device under the same username account.

The generated DSB is securely transmitted to platform e.g. by being encrypted with a symmetric key shared by the app and platform and also encapsulated by TLS as an additional security layer . Irrespective of how many recipients Alice designates for her message and e.g. how many recipients there are or how many devices Bob has only one DSB will be created and transmitted to platform . Upon receipt of the DSB processing engine opens the DSB and determines the recipients of the message. Specifically the processing engine performs a match against the deviceIDs in a cryptographic hash and camouflaged representation included in the DSB and the deviceIDs stored in database as well as the username in a cryptographic hash and camouflaged representation in the DSB and the ones stored in the database . A cryptographic hash and camouflaged representation means that the hash algorithm i.e. SHA256 that is used for the deviceID username and appID values is further camouflaged in some embodiments by taking multiple hashes of the result values i.e. multiple rounds of SHA256 of the previous SHA256 value i.e. SHA SHA SHA SHA . . . . Processing engine also creates an entry for the received DSB in message table and notifies the recipient s that a new message is available. In various embodiments other actions are also performed by platform with respect to the DSB. As one example platform can be configured to remove the DSB as soon as the recipient successfully downloads it. As another example platform can enforce an expiration time e.g. seven days by which if the DSB has not been accessed by the recipient the DSB is deleted. Where multiple recipients are included in a DSB platform can be configured to keep track of which recipients have downloaded a copy of the DSB and remove it once all recipients have successfully downloaded it or an expiration event has occurred .

DSB also includes for each message recipient 1 n the key Ekencrypted by each of the recipient s respective particular public keys as shown in region . Further DSB includes a combination of each recipient s respective deviceID hashed username appID and the reference value associated with the particular public key collectively denoted HWk in region . These constituent parts are also referred to herein as parameters. Additional detail regarding the parameters is shown in namely a plurality of parameters such as hashed username deviceID and appID are encrypted using SK which is a symmetric key generated by the client and shared with platform .

In some embodiments e.g. as is shown in a spreading function is used to spread the encrypted symmetric keys inside the DSB as shown in region by spreading the bits of the encrypted key in a spreading function generated pattern with the default function being a sequential block or data. The spreading function also contains the cryptographic hashed representation of the recipient usernames that are used by the server to identify the recipients of the message and to set the message waiting flag for each of them. Finally the DSB is itself encrypted using key Ek encrypted portion which is a symmetric key shared between app and platform . Additional detail regarding portions and are shown in where SK in is Ek1 2 in and represents the symmetric encryption key shared by the app and platform and where UserPubkey in is Ekin and represents the recipient s particular public key e.g. selected from the pool of public keys generated at .

As mentioned above Bob is also a user of platform . When Bob loads his copy of the messaging app on his smartphone i.e. app on device the app communicates with platform e.g. via interface to determine whether Bob has any new messages. As will be described in more detail below platform will also determine how many additional keypairs Bob s device should generate to replenish his pool and facilitate the generation of those keypairs. Since Alice has sent a message to Bob since he last used app a flag is set in database indicating to app that one or messages are available for download.

At i.e. assuming the decryption was successful hardware binding parameters are checked. As one example a determination is made as to whether device information i.e. collected from device can be used to construct an identical hash to the one included in the received DSB. If the hardware binding parameters fail the check i.e. an attempt is being made to access Alice s message using Bob s keys on a device that is not Bob s contents of the DSB will be inaccessible preventing the decryption of Alice s message. If the hardware binding parameter check is successful the device is authorized to decrypt the symmetric key i.e. using Bob s private key generated at which can in turn be used to decrypt Alice s message . As will be described in more detail below e.g. in Section G additional controls can be applied e.g. by Bob s app to Bob s ability to access Alice s message.

The following are examples of processes that can be performed by various entities present in environment such as platform and devices and in various embodiments whether as alternate versions of or additional processes to those described above . The processes can also be performed outside of environment e.g. by other types of platforms and or devices.

At a number of keypairs is generated. In this example a number of asymmetric keypairs equal to the initialization value received at e.g. fifty is generated. In some embodiments the keypairs are randomly seeded.

At reference values e.g. usable to uniquely identify each of the key pairs and described in more detail above are assigned for each of the keypairs generated at .

At the private key portion of the key pairs i.e. the fifty private keys and associated reference values are securely stored locally e.g. on device . As one example the private keys are inserted into a database resident on device and secured using an AES key derived from the password selected by Alice at portion in process .

Finally at the public key portion of the key pairs i.e. the fifty public keys and associated reference values are securely transmitted to platform . As mentioned above platform will designate one of the fifty keys as a reserve key e.g. by setting a flag associated with that particular key .

At a public key is received e.g. by device from platform along with the reference value associated with the key.

At the received public key is used to encrypt information such as a message or other information e.g. a symmetric key which in turn is used to encrypt the message . The key reference value associated with the received public key is included in the message metadata or otherwise incorporated into the message payload.

Finally at device sends the message e.g. to platform for retrieval by Alice . Note that using techniques described Alice s device s need not be online e.g. connected to platform at the time Bob composes and or sends messages to her.

For each retrieved message at read the respective key reference value e.g. included in the respective message as metadata retrieve the appropriate private key i.e. having the key reference value from local storage on device and decrypt the message s .

At device generates additional keypairs i.e. to replenish public keys used from the pool on platform by Bob . The number of keys to be generated can be determined in a variety of ways. As one example device can generate a number of new keypairs equal to the number of messages she received at . As another example device can be instructed whether by platform or local instructions to generate the lesser of A the number of messages downloaded at V where V is a variable impacting the desired expansion rate of the server cache size e.g. . or B the initialization value e.g. 50 keys as discussed at in process .

At similar to reference values e.g. usable to uniquely identify each of the key pairs and described in more detail above are assigned for each of the keypairs generated at .

At similar to the private key portion of the key pairs i.e. the new private keys and associated reference values are securely stored locally e.g. on device . As one example the private keys are inserted into a database resident on device and secured using the password selected by Alice at in process .

Finally at similar to the public key portion of the key pairs i.e. the new public keys and associated reference values are securely transmitted to platform . In this example suppose Alice s reserve key was not depleted. The key originally designated as her reserve key remains present on platform and remains designated as the reserve key. Now suppose Alice s reserve key was depleted e.g. because Bob and or other users of platform sent Alice more than fifty messages prior to her connecting to platform . The first 49 messages addressed to Alice would make use of those public keys in her pool not designated as the reserve key. Any additional messages sent to Alice before she can replenish her pool will all make use of her reserve public key i.e. messages and whether from Bob or others will all make use of the same public key for Alice her reserve key . As will be explained below when Alice s pool has been deleted i.e. her reserve key is being used a flag will be set on platform indicating that in conjunction with her next execution of process or portions thereof as applicable a new key should be designated as the reserve key and the existing reserve key be destroyed. Additional actions can also be taken e.g. by platform in response to Alice depleting her key pool such as by increasing the size of her pool.

At the device receives the current server key cache count i.e. the number of keys presently in the platform s pool for the user . At the device generates an appropriate number of keypairs and reference values and stores transmits them in accordance with the techniques described above. Further in the event the server key cache count is zero i.e. the reserve key is being used by platform due to key pool depletion one of the newly generated keys will be designated by the server as a replacement reserve key and the old reserve key will be destroyed.

As mentioned above one example of a message control a sender can specify for a message is a limit on the time period also referred to herein as a time to live or TTL during which a recipient is able to access the message e.g. to view listen to or otherwise interact with the message and any attachments . In scenarios such as where the sender is using an embodiment of platform operated by an enterprise on behalf of its employees the TTL may be selected by an entity other than the sender e.g. based on a default corporate policy or based on administrator configurable rules implemented by an enterprise specific version of the secure messaging application . For example messages sent by employees to one another e.g. as specified on a privacy list can have a first default TTL and messages sent by employees to vendors also using the enterprise specific application can have a second default TTL. As another example messages sent by certain employees e.g. within a particular department such as the legal department or having certain titles or positions and e.g. as specified on a privacy list can be given different default TTLs. In various embodiments the default TTL can be overridden if permitted by an administrator configuration.

The TTL is encrypted and sent together with the secure message. When the recipient opens the message e.g. taps or clicks on the message in an app the message is decrypted and displayed on the recipient s device. The corresponding TTL is decrypted and in some embodiments converted into a message expiry time by adding the TTL e.g. expressed in seconds to the current time. In various embodiments the TTL is stored in the recipient s device s secure database and encrypted to prevent tampering with the secure TTL by the device s user. As will be described in more detail below the current time can also be secured e.g. against attempts by the recipient to thwart the TTL by adjusting a clock on the recipient s device . Once the TTL has expired the message is no longer accessible to the recipient e.g. is removed from the recipient s viewing interface and deleted from the recipient s device s secure database along with any associated decryption keys .

The sender or sender s application as applicable e.g. where configured by an enterprise administrator can specify time limits in a variety of ways. As one example the sender can set a maximum duration e.g. a one day limit with the time limit countdown commencing when the recipient first opens the message. The time limit countdown can also be commenced when the sender sends the message. As another example the sender can specify a fixed start time e.g. for embargo purposes before which the recipient is unable to access the message even if the recipient is already in possession of the message. Once the embargo period ends as with above a TTL value can control how long the recipient is able to view the message once opened. This allows for example a company to release company news to multiple shareholders in a secure time controlled manner with each shareholder having the same opportunity to open the message at the same start time. This also allows an enterprise to implement rules e.g. via an enterprise specific version of the secure messaging application platform that only allow employees to open messages during certain periods of the day. E.g. hourly workers can only read messages during business hours salaried workers have no such prohibition. As yet another example the sender can specify a fixed end time after which the recipient is unable to access the message irrespective of whether the message was also given an upon opening TTL e.g. of ten minutes . Further in various embodiments a sender of the message can shorten a limit on an already sent message. For example if Bob sends Alice a message with a one day limit and Alice opens that message Bob can subsequently revoke Alice s ability to continue to read the message even though the day has not passed by interacting with his app e.g. by long pressing on the sent message as it appears to Bob and selecting an expire now immediately expiring the message or expire faster expiring the message at a new time picked by Bob option as applicable .

At the message expiration time Expire Time is set as the Current Time determined at with the TTL e.g. 3600 seconds added. Thus for example when Alice opens message e.g. at 1 26 pm a Current Time is obtained from platform or another appropriate external time source and a TTL of is added to the Current Time resulting in an Expire Time of 2 26 pm.

At a determination is made as to whether the Current Time is greater than the Expire Time. If not 1910 Alice is able to view the message and after a period of time e.g. one second elapsing another check of the Current Time vs. the Expire Time is performed . In various embodiments the Current Time continues to be obtained from an external source e.g. device contacts platform every second . In other embodiments app is responsible for maintaining the Current Time at least a portion of the time after performing an initial check with platform of the Current Time upon message open. In some embodiments if a Current Time cannot be obtained from an external source e.g. platform or another server during the ongoing checking of portion the message will cease being available to Alice. So for example if Alice temporarily loses connectivity during the one hour window of time Bob has allowed her to read message Alice will be unable to read message during that portion of the hour. In some embodiments the TTL countdown continues irrespective of whether Alice is offline meaning that Alice will not be given additional time to view the message to compensate for the period her device lacked connectivity. Eventually e.g. after one hour has elapsed the Current Time will exceed the Expire Time at which point the message is deleted .

Traditional messaging systems typically allow all users of the system to generate and send a message to an arbitrary recipient. If the recipient does not want to receive messages the recipient must either rely on spam filters or delete the messages after they arrive as applicable. The sender in a traditional system is not prevented from sending messages to a recipient that does not wish to receive messages thus wasting money creating congestion on the network s wasting bandwidth wasting processing power and annoying the recipient etc.

In contrast using techniques described herein users of embodiments of platform or their representatives as applicable are able to edit privacy lists which allow would be recipients to control from whom they receive messages. In various embodiments the user s privacy list is stored in database e.g. in encrypted form with username entries stored as hashes and is globally applied across all of the user s devices where the user has multiple devices configured to use platform . As will be described in more detail below in some embodiments the privacy settings are mutual meaning that if a first user chooses not to receive messages from a second user the first user will symmetrically be unable to send messages to the second user. In various embodiments users are able to select from and switch between one of two privacy modes a block mode and a whitelist mode. Based on which mode the user is in the user s privacy list will have different effects. In some embodiments instead of having a single list treated differently based on which mode the user is in the user has a respective list for a respective mode. As one example where platform is operated on behalf of an entity such as a school certain user accounts e.g. announcements or campus policy can be included in a universal whitelist applicable to all users irrespective of individual user settings. In such a scenario students or other users of the school specific platform are otherwise able to operate in allow or block mode and make individual choices about which usernames to include in their individual privacy list. In various embodiments the user can only be in one privacy mode at a time e.g. preventing the user from inadvertently misconfiguring the user s settings to prevent all users of the system from messaging the user .

Suppose Alice has been receiving unwanted messages from a user of platform Charlie. Alice would like to prevent Charlie from sending any more messages to her. Alice can use the block mode to provide a list of specific users such as Charlie who should be blocked from sending her messages. Charlie once blocked by Alice will be unable to send messages to Alice because platform will not provide Charlie with Alice s public key. In Alice has selected to be in block mode by clicking on region as indicated by the checkmark . Charlie is the first user Alice has decided to block and she enters his username in region . Alice can later un block Charlie if desired by clicking on region . Alice can add additional users to be blocked by clicking region and providing their usernames if desired. When a user e.g. Alice is in block mode the user will be able to receive messages from any users not appearing on the list also referred to herein as a privacy list such as the list of just Charlie shown in . The privacy setting is mutual meaning that Alice will also be unable to message Charlie if she adds him to her privacy list while in block mode i.e. Alice will symmetrically be unable to obtain Charlie s public key from platform while she has blocked Charlie .

An alternate way for Alice to prevent Charlie from sending her messages is for Alice to enter whitelist mode. In whitelist mode also referred to herein as allow mode only those users whose usernames Alice has added to her privacy list will be able to obtain her public key and thus send her messages. And in some embodiments symmetrically Alice will only be able to send messages to i.e. obtain the public keys of those users appearing in her privacy list while in whitelist mode. In Alice has selected to be in whitelist mode by clicking on region as indicated by the checkmark . Alice likes communicating with Bob and so has entered his name in region indicating that Bob is allowed to send her messages i.e. obtain her public key . Alice can remove Bob from her privacy list by clicking on region and can add additional users to her privacy list by clicking on region .

In various embodiments an entity other than the end user of platform or embodiments of platform has control over that end user s privacy list or as applicable can configure a supplemental privacy list for the user . As one example suppose an embodiment of platform is made available to families as a service. Parents of children using the service are able to customize e.g. through a password protected interface on their child s app whether their child s app should operate in block mode or whitelist mode. Those parents can further configure which usernames should appear on their child s privacy list e.g. resulting in a messaging app that allows the child to communicate with family members and known friends only . As another example where platform is operated on behalf of a University the University specific embodiment of the secure messaging app can be configured to support a predefined whitelist e.g. such that all University specific secure messaging apps will always allow communications from certain University accounts such as campus police to be sent and permit students to optionally configure their own individual block lists e.g. of other students they do not want to receive messages from if desired.

At a determination is made as to whether the sender is allowed to send the message to the recipient based on a privacy list. As one example at platform determines whether Bob is in block mode or in whitelist mode. Platform also determines whether Bob s privacy list contains an entry for Alice. In various embodiments platform also determines whether Alice is in block mode or whitelist mode and further determines whether Alice s privacy list contains an entry for Bob. Specific examples of how the determination at can be performed are described in more detail in conjunction with .

Finally at the sender receives a response to the send request based on the determination made at . For example where a determination is made at that the sender is allowed to send a message to the recipient at platform sends a public key of the recipient to the sender. Where a determination is made at that the sender is not allowed to send a message to the recipient at platform does not send the public key of the recipient to the sender. In various embodiments an applicable rejection message e.g. as shown in interface is shown to the sender.

At a determination is made as to whether the sender is in block mode. As one example at platform examines database for information about which privacy mode the sender is in. In various embodiments a user defaults to being in the block mode with an empty privacy list. As mentioned above a user can change which mode the user is in and add or remove other users from a privacy list by interacting with interfaces such as are shown in . Manipulations of a user of interfaces and are transmitted to platform which updates database and its encrypted entries accordingly.

If the sender is in block mode a determination is made at as to whether the recipient is in the sender s privacy list. This indicates that the sender is attempting to send a message to a recipient that the sender has prevented from sending messages to the sender. Accordingly in some embodiments due to the mutual symmetric nature of privacy controls the sender will be prevented from sending the message to the recipient i.e. the sender will not be sent the recipient s public key at .

If the sender is not in block mode the sender is instead in allow mode and a determination is made at as to whether the recipient is in the sender s privacy list. If the recipient is not in the sender s privacy list this indicates that the sender has not whitelisted the recipient as someone who can message the sender. Accordingly in some embodiments due to the mutual symmetric nature of privacy controls the sender will be prevented from sending the message to the recipient i.e. the sender will not be sent the recipient s public key at .

In the event the sender is in block mode and the recipient is not blocked by the sender i.e. the recipient is not on the sender s privacy list or in the event the sender is in allow mode and the recipient is in the sender s privacy list i.e. the recipient is explicitly allowed by the sender s list process next examines the recipient s privacy settings. In particular at a determination is made as to whether the recipient is in block mode. If so at a determination is made as to whether the sender is in the recipient s privacy list. If not the sender will be provided with the recipient s public key at and can send a message to the recipient . If so the sender will not receive the recipient s public key at and cannot send a message to the recipient .

In the event the recipient is not in block mode at a determination is made as to whether the sender is in the recipient s privacy list. If so at the sender will be provided with the recipient s public key and can send a message to the recipient . If not at the sender will not receive the recipient s public key and cannot send a message to the recipient .

As explained above in the event the sender is unable to obtain the recipient s public key due to privacy settings the sender can be presented with an appropriate message in the secure messaging application such as message or message as applicable.

Social networks allow users to share content such as pictures videos text audio etc. with other users on their friend list via social media posts. However the posted content may permeate to other users feeds not associated with the original poster when the original poster s friends respond or otherwise interact with the shared content.

One solution for limiting who can view the content would be for users to send the content to individuals or groups of users via a secure messaging platform such as security platform . Accordingly a user such as Alice may use the secure messaging app described above to send content to multiple recipients in accordance with one or more of the multiparty messaging scenarios previously discussed.

Alternatively Alice may use the secure messaging app to create a secure social feed in order to share her content with upwards of thousands of recipients. illustrates a method for creating a secure social feed.

In block Alice may define the secure social feed parameters. The feed parameters may include a static ID and a dynamic ID. The static ID is similar to the user ID described above. That is the static ID does not change after being defined. Conversely the dynamic ID is similar to the application ID described above and may change from time to time. For example a new dynamic ID may be generated whenever a user leaves the secure social feed. Alternatively the dynamic ID may be updated each time any feed parameter is updated as discussed in greater detail below.

In block Alice s app may generate a cache of key pairs to associate with the feed. The cache of key pairs are used to effectuate an Elliptic Curve Diffie Hellman ECDH key exchange between the secure social feed and recipients of the feed. Each key pair is used only once which ensures perfect forward secrecy for the communications between Alice and members of the secure social feed. In preferred embodiments the key pairs are Elliptic Curve Cryptography ECC key pairs. However one of ordinary skill in the art would recognize that comparable asymmetric key generation techniques may be used.

After generating the cache of key pairs Alice s app generates a member list for the feed in block . In this regard Alice may select which users she wishes to share her secure social feed with via one of the interfaces discussed below. After receiving Alice s selection her app may assign aliases to each user name in order to mask recipients true identities from the security platform and other recipients. The aliases will be compiled into a file to create the member list. In some embodiments aliases may be random 64 character alpha numeric strings that are uniquely assigned to recipients across the group.

Next Alice s app builds the feed file in block . The feed file defines the criteria for the secure social feed. In particular the feed file may include information to enable recipients to access Alice s secure social feed. Further the feed file may also include information related to the group. For instance the feed file may define that the secure social feed is broadcast only meaning only Alice or the creator of the feed is allowed to post content to the secure social feed. Alternatively the feed file may define which members of the secure social feed may send messages. Similarly the feed file may permit all members of the feed to communicate with other members of the feed.

Alice s app creates the feed file using the static ID for the feed the dynamic ID for the feed a cache of the ECC private keys the member list and any additional parameters set forth by the feed creator. For instance the feed file may include a feed definition. The feed definition may include the group static ID as well as past and current dynamic IDs for the feed. In this regard the dynamic ID may change as members are added and removed to guard against unauthorized users accessing the secure social feed.

In block Alice s app may generate a feed key to encrypt the feed file. The feed key may be a pseudorandom 256 bit key. According to some embodiments Alice s app may refresh the feed key periodically. In preferred embodiments Alice s app generates a new feed key every 24 hours. However one of ordinary skill in the art would recognize that a new feed key may be generated periodically according to user or system preferences. In block the feed key is used to encrypt the feed file. In preferred embodiments the feed file is encrypted using AES256 and the feed key. One of ordinary skill in the art would recognize that any suitable encryption algorithm may be used in lieu of AES.

In block the encrypted feed file may be stored locally on Alice s device. Preferably the encrypted feed file is saved in Alice s user level back up. As used herein a user level back up is an encrypted data store that may also be stored with the security platform with a trusted third party or on a server. According to some embodiments the user level back up is encrypted with a key that is derived from the password Alice uses to log in to her secure messaging app. In this regard the user level back up ensures that users retain their data including their feed files aliases and feed keys in the event of a catastrophic loss of data on their device. Thus Alice may be able to restore her secure messaging app from her encrypted user level back up and resume normal behavior.

Finally in block Alice s app provides the encrypted feed file to users on the member list. In preferred embodiments Alice s app provides the encrypted feed file to security platform . In this regard recipients included on the member list will be able to retrieve the encrypted feed file decrypt it and use the information contained therein to view Alice s secure social feed as discussed in greater detail below. Alternatively Alice s app may provide the encrypted file to each user included in the member list via a standard DSB.

After creating the secure social feed Alice s app may send invitations to users on the member list. illustrates a process for responding to a secure social feed invitation.

In block users may receive an invitation to a feed. The invitation may be a standard DSB sent from Alice s app to each user on the member list in a peer to peer manner. Alternatively Alice s app may send the invitation in a one to many manner as a group message to the member list. According to some embodiments the keys may always be exchanged in either a peer to peer manner or from the security platform irrespective of group size. The invitation may include the feed definition including the static ID and dynamic IDs the member list and the feed key.

In block the user may respond to the feed invite. To respond to the invite the user may accept reject or ignore it and not respond. The user s selection may be conveyed to Alice s app and or security platform which will update the user s status in a master member list. That is the member list included in the feed file may include a status field to indicate whether the user has accepted rejected did not respond or have been removed by the administrator of the group. Accordingly users may be provided an updated encrypted feed file based upon the responses Alice receives from other users. As discussed above providing the updated encrypted feed file may include providing it to the security platform for users retrieval or transmitting the updated encrypted feed file to each user on the updated member list.

If the user accepts process proceeds to block where the user s app decrypts the feed invite to obtain the feed key. In some embodiments the feed invite may also include alias assignments. In this regard users would receive the member list in the feed invite instead of the feed file.

In block the user s app may obtain the encrypted feed file. In embodiments where the encrypted feed file is located on security platform users apps may use the received static ID and dynamic ID to obtain the encrypted feed file. That is the user s app will request the feed file from the security platform. The security platform uses the static ID and dynamic ID to retrieve the appropriate feed file and send it to the user s app.

In embodiments where Alice s app provides the encrypted feed file users apps may receive the encrypted feed file via a standard DSB that is different from the invite DSB. Accordingly each user s app may decrypt the standard DSB to retrieve the encrypted feed file.

After receiving the feed file the user s app will decrypt it using the feed key in block . In block the user s app may review the decrypted feed file and store the decrypted feed file on the invitee s device in order to view Alice s secure social feed. In particular the invitee s app may extract the cache of private keys and store them locally on their device in order to perform the ECDH key exchange necessary to access the encrypted content as discussed in greater detail below. Additionally the invitee s app may store the feed file in their user level back up. In the event of a catastrophic loss of data on their device the invitee would be able to restore their secure messaging app and resume accessing their secure social feeds.

If the user declines the invite or does not reply to the invite after a predetermined time period process proceeds to block where Alice s app is notified that the user has declined the feed invite. This may include the invitee s device notifying Alice that the feed invite has been declined. In situations where the invitee has not responded after a certain period of time Alice s app may treat the lack of response as the user declining the invitation to the feed.

In response to receiving notification that the invitee has declined the feed invite Alice will recreate the feed file so that the invitee does not have access to the feed key. Accordingly Alice will update the feed file by generating a new dynamic ID updating the member list and generating a new feed key. Additionally the feed definition may be updated to record the previous dynamic ID. The updated feed file will be encrypted with the new feed key and provided to users via the techniques described above. The new feed key will be sent to users on the member list who have accepted the feed invite and those who have not yet responded. Updating the feed file and feed key may be repeated each time Alice receives notification that an invitee has declined her invitation to the secure social feed.

Alice may select users to share the secure social feed by selecting a check box located next to each user s name. For example illustrates check box and check box selected thereby sharing the secure social feed with Karabeta99 and Laurenbeta99. As noted above Alice s app will assign each of these names an alias and include the alias in the member list that is included in the feed file.

After creating the encrypted feed file and sending feed invites Alice or other users that Alice has permitted to post content may begin sharing content via the secure social feed. shows a process for posting content to a secure social feed.

In block Alice may obtain content to post to her secure social feed. The content may be obtained from the photo album on Alice s device. Alternatively obtaining content may include capturing a picture or video. As will be shown in greater detail below Alice s app may allow her to modify her content prior to posting it. Next Alice s app may generate a content key in block . As with previous keys the content key is a random 256 bit key generated by Alice s app.

In block Alice s app may encrypt the content using the content key. In preferred embodiments the content is encrypted using the content key and AES however one of ordinary skill in the art would recognize that any suitable encryption algorithm could be used to protect Alice s content from being viewed by unauthorized users.

Alice s app may publish her encrypted content to the secure social feed. Publishing her content to the secure social feed begins in block where Alice s app prepares a content DSB. In particular the content key and the encrypted content may be encrypted via AES with a random 256 bit message key.

In block the random message key may be encrypted with one of the public keys from the cache of key pairs that Alice s app generated in process . Alice s app may then encapsulate the encrypted content and content key the encrypted random message key and a reference value for the public key in a DSB. In block Alice s app transmits the content DSB to security platform .

While the process of posting content to a secure social feed has been described from the perspective of the feed creator one of ordinary skill in the art would recognize that other users on the member list may post content to the secure social feed using process .

Turning to an interface for posting content to a secure social feed after it is created is shown. In particular interface includes addition button which allows a user such as Alice to access content to post to his or her secure social feed. In this regard addition button may prompt the user to select an existing photo or video from their photo album or capture a new photo or video using their device s built in camera.

Turning to an example of modifying content prior to it being posted to the user s secure social feed is shown. That is interface provides a user the ability to modify the content. In particular interface includes toolkit that includes an undo button a spray can brush a thick line a thin line a circle and a square. In this regard a user may select one of the options in the toolkit to modify the content. For example if a user were to select the circle from the toolkit the user would be able to draw circles on the content.

Additionally interface may include a brush selection option and a color palette option . The brush selection option may allow the user to draw freehand on the content. Alternatively the brush selection option may select the brush thickness for the option selected in the toolkit . The color palette option may allow the user to select the color for their alterations.

However if the user selects yes the encrypted content may be posted to the user s social media account. In particular the secure messaging app may connect to the user s social media account through various APIs to share the encrypted content. In this regard a decoy image may be posted to the user s social media account. Users that have the secure messaging app installed either on their device or in their social media account may be able to decrypt the content and view the content while users that do not have the secure messaging app will only be able to see the decoy image. Alternatively a decoy image that includes a URL or a similar link may be posted to the user s social media account. The URL may connect users to the secure messaging app for them to view the posted content. Accordingly users with the secure messaging app that are included in the member list will be able to view the user s content via the secure message app.

In block the invitee s app may download the content DSB from the security platform . The invitee s app may parse the content DSB to obtain the reference value for the ECC public key used to encrypt the Random Message Key. In block the invitee s app may retrieve the corresponding private key from the cache of private keys received in the feed file based on the reference value obtained from the content DSB.

In block the invitee s app decrypts the encrypted message key using the retrieved private key. The message key is then used to decrypt the encrypted content key in block . In block the content key decrypts the content. Finally in block the decrypted content is presented to the invitee as part of the secure social feed.

In preferred embodiments the decrypted content is available to invitees for a predetermined amount of time. Typically the predetermined amount of time is 24 hours from when the user posts the content regardless of when the invitee first accessed the content. According to some embodiments the predetermined amount of time may be adjusted by the content poster. After the predetermined amount of time has elapsed the invitee s app may delete the content from the invitee s device.

If the invitee cannot access the content the invitee may ping the security platform and or the administrator to determine whether the invitee has the most up to date feed file. If it is determined that the invitee does not have the most recent feed file the security platform or administrator may provide the invitee with the most up to date feed file as long as the invitee has not either rejected the administrator s invitation or been removed by the administrator.

If the invitee has the most up to date feed file then the invitee may request help. For example the invitee may not be able to decrypt the feed file or access the content. In preferred embodiments requesting help may include setting a status flag to help. The help status may be conveyed to the administrator and or the security platform. The help status may be stored in the member list as described above. If the invitee s status in the member list indicates that they were removed by administrator then the administrator and or security platform ignore the invitee s request. However if the invitee has not been removed by the administrator or otherwise declined the invitation the administrator and or security platform may provide the invitee with updated information including the most recent feed key the encrypted feed file or any combination of the information contained therein.

Turning to an example of interface is shown for displaying content in a secure social feed. In this regard the content may be displayed along with the user s name or username and a description of the content. According to some embodiments interface may include a number of rating buttons that allow members of the secure social feed to provide feedback on the posted content. In the embodiment shown in interface includes three rating buttons Love It button Rock It button and Poop It button . By merely tapping one of the rating buttons feedback may be provided to the content poster.

For example illustrates an embodiment of feedback received for the posted content. In particular a notification icon such as icon may appear on the associated rating button to indicate other users feedback on the posted content. For example illustrates that one user has rated the content as Rock It. Accordingly notification icon appears on the Rock It button to show how many members of the secure social feed have selected the rating button. In some embodiments the notification icons may be updated in real time or near real time.

According to some embodiments the secure social feed creator or administrator may invite additional users to view their feed after posting content to the feed. illustrates a process for adding members to an existing secure social feed. In block the administrator may update the member list of the feed file to include the new members. The dynamic ID of the feed file may not be updated when inviting new members to the secure social feed. In this regard the dynamic ID and the feed key may only be updated when users have access to the feed key by either receiving and declining a feed invite or after leaving the secure social feed.

In block the administrator s app may send an invitation to the new members of the group. As previously discussed the invitation may be a standard DSB sent from the administrator s app or security platform to each user on the member list. The invitation may include the feed definition including the static ID and dynamic IDs the member list and the feed key.

In block the new invitee may respond to the feed invite. If the user rejects the invite e.g. decline invite or no reply the administrator is notified in block . Accordingly the administrator will recreate the feed file so that the invitee does not have access to the feed key.

However if the new invitee accepts the feed invite the new invitee decrypts the feed key in block . In block the new invitee s app uses the received static ID and dynamic ID received in the feed invite to obtain the encrypted feed file from the security platform.

In block the new invitee s app may decrypt the received feed file using the feed key from the invite. In block the new invitee s app may store the decrypted feed file on the invitee s device. In particular the new invitee stores the cache of private keys received in the feed file. In this regard the cache of private keys may include all unused keys and used keys that are less than 24 hours old in order for the new invitee to access previously posted content. In block the new invitee uses information from the feed file to view previously posted content that has not expired. Accordingly the security platform may provide the content DSB to the new invitee. Using the information contained in the feed file the new invitee s app decrypts the content DSB to view previously posted content.

Additionally the administrator may have to remove users from their feed. illustrates a process for removing users from the secure social feed.

In block the administrator may receive notification that a member has been removed from an existing secure social feed. The notification may be due to the administrator removing the member from the secure social feed. Alternatively the member may opt to leave the secure social feed. In this regard the member s app may provide notification to the administrator that the member is opting to leave the secure social feed.

Based on the notification that a user has left the secure social feed the administrator s app may recreate the feed file in block . Recreating the feed file may include generating a new dynamic ID and updating the member list. Additionally the administrator s app may update the feed definition to include the previous dynamic ID. The new dynamic ID may prevent users that have left the secure social feed from viewing the secure social feed since they no longer have the correct dynamic ID to access the secure social feed. Further the security platform may use the feed definition to block users who try to access a secure social feed using an older dynamic ID.

Next the administrator s app may generate a new feed key in block . The new feed key ensures that removed members may not access the feed file to view newly posted content if the removed members are able to discover the dynamic ID. In this regard the old feed file and feed key ensure that removed members may only view previously posted content and not newly posted content.

In block the administrator s app may encrypt the new feed file with the new feed key. Similar to the discussion above the feed file may be encrypted via AES256.

After encrypting the new feed file it may be stored locally on the administrator s device in block . In block the administrator s app may be provided to the users included on the member list. For example the encrypted new feed file may be provided to the security platform so that members of the secure social feed can access the new feed file. Alternatively the administrator may send the new feed file to users on the member list via a standard message.

Finally in block the new feed key is transmitted to users included in the member list. As noted above the new feed key may be transmitted from the administrator s device via a standard DSB when the member list is below a certain number of users e.g. 150 . When the number of users on the member list exceeds the certain number the security platform may perform the ECDH key exchange with each user to compose and send the DSB with the new feed key to each user on the member list.

Finally the administrator may be required to periodically update the cache of key pairs. illustrates process for updating the cache of key pairs. Process begins in block where the administrator s app generates an additional cache of key pairs in response to receiving notification that the secure social feed s cache of key pairs is below a certain level. According to some embodiments notification may be provided by the security platform .

After generating the additional cache of key pairs the administrator s app may recreate the feed file to include the private keys set forth in the additional cache. Additionally the administrator s app may also update the feed definition with respect to the updated cache of private keys.

In block the updated feed file is encrypted with the feed key using a suitable encryption algorithm. In preferred embodiments the updated feed file may be encrypted with AES256.

Finally in block the encrypted updated feed file is stored locally on the administrator s device. Further the administrator s app will also provide a copy of the encrypted updated feed file to the users on the member list either directly or via security platform .

In summary a user such as Alice may use the secure messaging app to create a secure social feed in order to share her content with just a few friends or thousands of recipients. For example Alice may wish to share content with her friends Bob Brandon Charles Lucy and Joe. Using the secure messaging app described herein Alice may create a secure social feed.

To create the secure social feed Alice acting as administrator of the feed may define the secure social feed by creating a feed file. The feed file includes a static ID a dynamic ID a group definition a cache of Elliptic Curve Cryptography ECC key pairs and a member list which includes an alias assigned to each recipient in order to protect each recipient s user identity.

After creating the feed file Alice s app will encrypt the feed file using a feed key which is a random 256 bit key. Accordingly Alice s app will store a copy of the encrypted feed file locally and transmit a copy to the security platform. Upon uploading the encrypted feed file to the security platform Alice s app may begin sending invitations to recipients to view her secure social feed. According to this example Alice initially forgets to invite Brandon to view her feed and only sends invitations to Bob Charles Lucy and Joe.

The invitations comprise a group definition that includes the static and dynamic IDs a member list and the feed key. The invitation may be sent from Alice s app to all the recipients via a standard Digital Security Bubble as described above.

The recipients may respond to the invitation by accepting declining or not replying. Each recipient s response to the invitation may be recorded in the member list located in the feed filed stored locally on Alice s device. When recipients accept the invitation they obtain the feed key from the invitation DSB. The recipients will then request the encrypted feed file from the security platform and use the received feed key to decrypt the feed file provided by the security platform.

When Alice s app receives negative responses or no replies Alice s app will rebuild the feed file updating the dynamic ID the member list and the feed key encrypt the feed file using the updated feed key and transmit the rebuilt feed file to the security platform. Alice s app will then provide the updated feed key to the recipients included in the updated member list. Recipients then retrieve the updated feed file from the security platform and decrypt it using the updated feed key.

In order to post content to her secure social feed Alice s app will encrypt the content using a 256 bit randomly generated content key. Alice s app then transmits the content key and the encrypted content to the recipients apps in the payload of a DSB. Accordingly Alice s app creates a random 256 bit key to encrypt the payload of the DSB. The payload of the DSB is encrypted with the random 256 bit key. The random 256 bit key is then encrypted using one of the ECC public keys defined in the feed file. The encrypted payload a reference value for the ECC public key and information identifying Alice s secure social feed such as the static and dynamic IDs are encapsulated in the DSB. The DSB is then transmitted to the security platform which reviews the identifying information to determine which secure social feed to associate the content with. Accordingly the security platform will notify recipients included in the member list that the secure social feed includes new content.

The security platform may provide notification to the recipients apps for example through a push notification that Alice s secure social feed has a new post. Alternatively the recipients apps may periodically poll the security platform to determine whether the secure social feed includes any new posts.

When the secure social feed includes new posts the recipients apps will contact the security platform and download the DSB associated with the new post. Each recipient app will use the reference value in the DSB to obtain the corresponding ECC private key to decrypt the random 256 bit key. The recipient app will then use the obtained ECC private key to decrypt the random 256 bit key. The recipient app decrypts the content key using the decrypted random 256 bit AES key. The content key is then used by the recipients apps to decrypt and view Alice s content.

After posting content Alice may invite additional recipients to view her secure social feed. Accordingly Alice may remember to invite Brandon. In this regard Brandon will receive the feed key from Alice via an invitation DSB obtain the encrypted feed file from the security platform and be provided with the content and the content key via the techniques described above. In this regard new invitees may view previously posted content using the received content key.

Further recipients may leave the secure social feed either via their own volition or by being removed by the administrator Alice . In order to prevent removed recipients from viewing posted content Alice will update the feed file. Specifically Alice s app creates a new dynamic ID updates the member list and generates a new feed key. The updated feed file is transmitted to the security platform. Further Alice s app will provide the new feed key to the recipients on the member list. The recipients will obtain the updated feed file from the security platform in order to view newly posted content. In this regard removed recipients may not view the secure social feed because they do not have the updated dynamic ID. However if removed recipients are able to discover the secure social feed they will only be able to view previously posted but they will not be able to access the newly posted content since they do not have the new feed file.

Depending on how much content Alice posts she may need to periodically update the cache of ECC key pairs. In this regard Alice will derive another cache of ECC key pairs and build an updated feed file. The updated feed file is encrypted with the feed key and stored on the security platform.

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.

