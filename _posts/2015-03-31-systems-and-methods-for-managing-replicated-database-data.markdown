---

title: Systems and methods for managing replicated database data
abstract: Systems and methods for replicating database data and generating read-only copies of the replicated data in a clean shutdown state. For example, systems can include a tracking module (e.g., a filter driver) that monitors transactions from a database application to a source storage device to generate log entries having at least one marker indicating a known good state of the application. The systems further include a computer coupled to a target storage device comprising a database and log files. The computer processes the transactions, based on the log entries, to replicate data to the target storage device; performs a first snapshot on data stored in the database and log files; replays into the database data stored in the log files; performs another snapshot on the database; and reverts the database back to a state in which the database existed at the time of the first snapshot.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09396244&OS=09396244&RS=09396244
owner: Commvault Systems, Inc.
number: 09396244
owner_city: Tinton Falls
owner_country: US
publication_date: 20150331
---
Any and all applications for which a foreign or domestic priority claim is identified in the Application Data Sheet or any correction thereto are hereby incorporated by reference into this application under 37 CFR 1.57.

The present disclosure relates to systems and methods for replicating data of one or more database applications.

Electronic information has become an integral part of business operations such that many banks insurance companies brokerage firms financial service providers and a variety of other businesses rely on computer networks to store manipulate and display information that is constantly subject to change. Oftentimes the success or failure of an important transaction may turn on the availability of electronic information that is both accurate and current. Accordingly businesses seek reliable cost effective ways to protect and later access the information stored on their computer networks.

Many approaches to protecting data involve creating a copy of the data such as backing up and or replicating a database to one or more storage devices. Data shadowing and mirroring or duplexing provide for copying but can require lengthy amounts of time consume valuable processing power and or occupy large amounts of storage space for large databases. Moreover such storage management systems can have a significant impact on the source or primary system.

To address these drawbacks certain storage systems utilize snapshot techniques to preserve a read only copy of database data. In general a snapshot records the state of a storage device database file system or volume at a certain point in time. That is the snapshot may be used to provide a point in time image of a live storage volume. Additional operations can then be performed using the snapshot copy without affecting the performance of the live volume.

In certain circumstances however a snapshot of a database does not necessarily provide easily accessible data. For instance snapshots of data from a MICROSOFT EXCHANGE database generated while EXCHANGE is online results in a copy of the data that is in a dirty shutdown state which prevents the data from being read or otherwise accessed by standard application programming interfaces APIs . Although one option is to shut down EXCHANGE each time a snapshot is to be performed on the database such an option is not practical as the shutdowns can be time consuming and costly.

In view of the foregoing a need exists for improved systems and methods for database replication. For instance there is a need for systems and methods for generating copies of database data in a clean shutdown state without taking the native database application offline. Moreover a need exists for systems and methods that provide snapshots of database data in a useful condition without requiring the native application or its accompanying APIs for access to the database data.

In certain embodiments of the invention systems and methods are disclosed for performing substantially continuous replication of a database such as a MICROSOFT EXCHANGE database and for providing usable read only copies of the replicated database. For instance snapshot systems and methods are disclosed that provide a snapshot of a replicated MICROSOFT EXCHANGE database that reflects data in a recoverable and clean shutdown state and that can be accessed or otherwise read using standard APIs without the need for the MICROSOFT EXCHANGE application program.

Such systems and methods allow known good replication copies to be viewed as copies of production volume data. For example this technology in certain embodiments further allows a management component in the computing system to directly access copy restore backup or otherwise manipulate the replication copies of production data as if the data was the production data of the source system thereby improving various system performance characteristics such as access time reducing memory requirements and reducing impact on source or client applications.

In certain embodiments a method is disclosed for managing replicated data in a database system. The method comprises monitoring data transactions associated with a database application the data transactions operative to write data to at least one source storage device. The method further includes copying the data to a target storage device based at least in part on the data transactions wherein the target storage device comprises a target database and target transaction log files and wherein said monitoring and copying is performed without shutting down the database application. The method also includes i generating a first snapshot of at least a portion of the data stored in the target database and transaction log files ii replaying into the target database data stored in the target transaction log files as one or more transaction logs iii generating a second snapshot of at least a portion of the target database that is indicative of stored data from the database application in a recoverable state and then iv reverting the target database back to a state in which the target database existed at the time of the first snapshot.

In certain embodiments a system is disclosed for performing data management operations in a computer network environment. The system includes a database application configured to execute on a source computer and a first storage device coupled to the source computer to receive data transactions from the database application. The system also includes a module such as a filter driver configured to monitor the data transactions and to generate log entries based on the data transactions at least one of the log entries having a marker indicative of a time of a known good state of the database application. The system further includes a second storage device comprising a target database and target transaction log files and a target computer coupled to the second storage device. The target computer is configured to i process based on the log entries the data transactions to replicate data to the second storage device ii perform a first snapshot operation on data stored in both the target database and the target transaction log files iii replay into the target database data stored in the target transaction log files iv perform a second snapshot operation on at least a portion of the target database and v revert the target database back to a state in which the target database existed at the time of the first snapshot.

In certain embodiments a method is disclosed for copying data generated on a source database system in a computer network. The method comprises processing replication data indicative of data transactions generated by a database application executing on a source system the database transactions being directed to operations on a source database of a source storage device replaying the replication data on a target storage device to copy the data transactions to the target storage device the target storage device comprising a target database and target transaction log files creating a first read only copy of at least a portion of data stored in the target database and the target transaction log files committing to the target database transaction logs stored in the target transaction log files said committing following said creating the first read only copy creating following said committing a second read only copy of at least a portion of the target database the second read only copy being indicative of database data from the database application in a recoverable state and reverting the target database to a state in which the target database existed at the time of said creating the first read only copy.

In certain embodiments a system is disclosed for performing data management operations in a computer network environment. The system includes means for processing replication data indicative of database operations generated by a database application executing on a source computer the database operations being directed to data on a source storage device means for replaying the replication data on a target storage device to copy data to the target storage device the target storage device comprising a target database and transaction log files means for performing a first snapshot operation on data stored in both the target database and the target transaction log files means for replaying into the target database data stored in the transaction log files said means for performing being further configured to perform a second snapshot operation on at least a portion of the target database following replaying of the data stored in the transaction log files the second snapshot being indicative of database data from the database application in a clean shutdown state and means for reverting the target database back to a state in which the target database existed at the time of performing the first snapshot wherein at least one of said means is executed on one or more computing devices.

For purposes of summarizing the disclosure certain aspects advantages and novel features of the inventions have been described herein. It is to be understood that not necessarily all such advantages may be achieved in accordance with any particular embodiment of the invention. Thus the invention may be embodied or carried out in a manner that achieves or optimizes one advantage or group of advantages as taught herein without necessarily achieving other advantages as may be taught or suggested herein.

Systems and methods disclosed herein provide for the offline access of a replicated database without needing to run the native database application. Moreover disclosed systems and methods provide for the replication of database data without shutting down the native database application to put the replicated data in a clean shutdown state.

In certain embodiments of the invention systems and methods are disclosed for performing substantially continuous replication of a database such as a MICROSOFT EXCHANGE database. For instance certain embodiments provide for the generation of one or more snapshots of a replicated MICROSOFT EXCHANGE database wherein the snapshot data allows for offline access to the replicated database. For instance in certain embodiments the replicated database can be read using JET or like APIs in place of slower APIs e.g. MAPI associated with MICROSOFT EXCHANGE. As a result the direct reading of the database allows for much faster access to the replicated data.

In general replication of database data can pose particular drawbacks. For example standard replication of data from certain database applications can result in data that is in a recoverable state wherein committed transactions in the database can be recovered in case of a crash. In such a state particular computing operations of the application are complete to a point such that further operation recovery and or rolling back of the application can occur based on the committed transaction data This point of referential integrity is generally referred to herein as a known good state of the application data.

However without shutting down the database application the data resulting therefrom is not in a clean shutdown state i.e. transaction logs exist that are not committed to the database . Moreover with MICROSOFT EXCHANGE databases for instance data in a dirty shutdown state is evidenced by a particular bit value and prevents standard APIs from accessing the data.

The features of the systems and methods will now be described with reference to the drawings summarized above. Throughout the drawings reference numbers are re used to indicate correspondence between referenced elements. The drawings associated descriptions and specific implementation are provided to illustrate embodiments of the invention and not to limit the scope of the disclosure.

In addition methods and processes described herein are not limited to any particular sequence and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example described blocks or states may be performed in an order other than that specifically disclosed or multiple blocks or states may be combined in a single block or state.

Moreover certain embodiments of the invention described herein can utilize one or more intelligent data replication processes and or components that replicate application specific data from a source system to a destination system. Certain examples of such processes and components are described in U.S. patent application Ser. No. 11 640 826 filed Dec. 18 2006 published as U.S. Patent Application Publication No. 2007 0185938 A1 and issued as U.S. Pat. No. 7 651 593 which is hereby incorporated herein by reference in its entirety to be considered part of this specification.

In certain embodiments the source system comprises one or more computing devices capable of processing data and can include for example a server computer a workstation a personal computer a cell phone a portable computing device a handheld computing device a personal digital assistant PDA or the like.

The illustrated network advantageously comprises any means for communicating data between two or more systems or components. It certain embodiments the network comprises a computer network. For example the network may comprise a public network such as the Internet virtual private network VPN token ring or TCP IP based network wide area network WAN local area network LAN an intranet network point to point link a wireless network cellular network wireless data transmission system two way cable system interactive kiosk network satellite network broadband network baseband network combinations of the same or the like. In embodiments wherein the source system and target system are part of the same computing device the network may represent a communications socket or other suitable internal data transfer path or mechanism.

As shown the source system comprises one or more applications residing on and or being executed by a computing device. For instance the applications may comprise software applications that interact with a user to process data and may include for example database applications e.g. SQL applications word processors spreadsheets financial applications management applications e commerce applications browsers combinations of the same or the like.

The source system further comprises one or more processes such as filter drivers that interact with data e.g. production data associated with the applications . For instance the filter driver can comprise a file system filter driver an operating system driver a filtering program a data trapping program an application a module of the application s an API or other like software module or process that among other things monitors and or intercepts particular application requests targeted at a database a file system another file system filter driver a network attached storage NAS a storage area network SAN mass storage and or other memory or raw data. In some embodiments the filter driver may reside in the I O stack of the application and may intercept analyze and or copy certain data traveling from the application to storage.

In certain embodiments the filter driver can intercept data modification operations that include changes updates and new information e.g. data writes with respect to the application s of interest. For example the filter driver may locate monitor and or process one or more of the following with respect to a particular application application type or group of applications data management operations e.g. data write operations file attribute modifications logs or journals e.g. NTFS change journal configuration files file settings control files other files used by the application combinations of the same or the like. In certain embodiments such data may also be gathered from files across multiple storage systems within the source system . Furthermore the filter driver may be configured to monitor changes to particular files such as files identified as being associated with data of the applications .

In certain embodiments multiple filter drivers may be deployed on the source system each filter driver being dedicated to data of a particular application . In such embodiments not all information associated with the source system may be captured by the filter drivers and thus the impact on system performance may be reduced. In other embodiments the filter driver may be suitable for use with multiple application types and or may be adaptable or configurable for use with multiple applications .

The illustrated source system further comprises one or more source storage devices . In certain embodiments the source storage device s are configured to store production data associated with one or more of the applications . The source storage device may include any type of media capable of storing data. For example the source storage device may comprise magnetic storage such as a disk or a tape drive or other type of mass storage. In certain embodiments the source storage device may be internal and or external to e.g. remote to the computing device s having the applications and the filter drivers .

As illustrated in the source storage devices further comprise at least one database and transaction log files . In particular the transaction log files can comprise a set of changes such as for example insertions deletions and updates received from the application s that are to be applied to the data in the database .

In certain embodiments the transaction log files are stored on at least one dedicated disk so that the logs are not affected by any disk failures that can potentially corrupt the database . For instance the transaction log files can be stored on a high performance disk while the database is stored on one or more slower disks. In other embodiments the transaction log files and the database can be maintained on the same storage medium.

As further illustrated in the target system comprises a replication module that communicates with one or more target storage devices . In certain embodiments the target system comprises any computing device capable of processing data and includes for example a server computer a workstation a personal computer or the like.

In certain embodiments the replication module is configured to monitor and or manage the copying of data from the source system to the target system such as data obtained by the filter drivers . For example the replication module can receive one or more log files or entries data transactions or other like replication data indicative of the data transactions or operations being generated by the application to modify data stored on the source storage device s . In yet other embodiments the replication module is a dumb server or terminal that receives and executes instructions from the source system .

The target storage device s may include any type of media capable of storing data such as replication data sent from the source system . For example the target storage device may comprise magnetic storage such as a disk or a tape drive or other type of mass storage. In certain embodiments the target storage device may be internal and or external to the computing device s having the replication module .

In certain embodiments the source storage device and or the target storage device may be implemented as one or more storage volumes that include physical storage disks defining an overall logical arrangement of storage space. For instance disks within a particular volume may be organized as one or more groups of redundant array of independent or inexpensive disks RAID . In certain embodiments either or both of the storage devices can include multiple storage devices of the same or different media.

As shown in the target storage device s at least comprise a database and transaction log files . In particular the target database is generally synchronized with the source database . Likewise the target transaction log files can comprise a replication of those log files present in the transaction log files of the source storage device . As discussed above in certain embodiments the database and the transaction log files are advantageously maintained on separate media such that the transaction log files can be stored on a relatively high performance storage medium. In yet other embodiments the database and transaction log files are stored in different volumes of the same disk.

As further shown the replication system is structured to generate read only copies of the replicated data stored in the target storage device s . For instance such copies can be generated according to one or more schedules storage policies e.g. user or system defined or the like. In certain embodiments the replication module coordinates the generation of the copies . For example the replication module can comprise a data agent module executing on the replication system that manages read only copies e.g. snapshots of the replicated data. In yet other embodiments a storage manager a stand alone application or the like manages the generation of the read only copies .

In certain embodiments the read only copies advantageously comprise a plurality of snapshots. For instance the snapshots can reflect point in time copies of the database data. In certain embodiments the snapshots allow for access to and or manipulation of database data without affecting the production data on the source storage device s . Moreover in certain embodiments the snapshots record database data in a clean shutdown mode and allow for offline access of the data without the need for the native database application .

In certain embodiments the source system communicates with the associated target system to verify that the two systems are synchronized. For instance the source system may receive from the target system an identification e.g. unique serial number of a transaction log last committed by the target system . The source system may then compare the received identification with state of the data in the source storage device s .

As shown the replication system comprises a source system that communicates with a target system via a network . In particular the target system is structured to replicate database data originating from and or stored by the source system .

The illustrated source system comprises a database application that interacts with one or more users or programs to generate production data. For instance the database application can comprise one or more applications that require transactions to be played or committed in order for the data of the application to be at consistent point or state.

For exemplary purposes the database application will often be described hereinafter with reference to a MICROSOFT EXCHANGE environment. In yet other embodiments other types of database applications and or collaboration applications can be used such as for example ACTIVE DIRECTORY ORACLE other JET based applications or the like.

With continued reference to the source system a filter driver tracks file changes being generated by the application . For example the filter driver can be configured to populate data relating to transactions of the database application in source logs to be replicated to the target system .

In certain embodiments the filter driver may be deployed in the stack as an I O buffer and or process in the data path between the database application and a memory . In such embodiments the filter driver may intercept snoop supervise trap process or otherwise be cognizant of some or all operations e.g. data modification operations file modification operations read operations and the like from the database application to its associated location s on the source storage device s .

In embodiments of the invention having multiple database applications multiple filter drivers can be used such that each filter driver corresponds to a single database application . In such embodiments data relating to each database application of interest can be written to a particular log file established for that application. In yet other embodiments a single filter driver can communicate with multiple database applications .

In certain embodiments the transactions from the database application are preferably stored in the memory after or while being logged by the filter driver . A database engine then commits the transactions stored in the memory to disk source storage device s .

The source storage device s comprise one or more media for storing production data relating to the database application . As shown the source storage device includes a database or information store for storing the committed transaction data from the database application . The source storage device s further include transaction log files that represent a sequence of files to keep a secure copy on disk of the data e.g. uncommitted transaction logs in the memory .

As described above with reference to the replication system is configured to replicate data such as through a continuous data replication process to target storage device s of the target system . To facilitate and or coordinate such replication the target system includes a replication module .

In certain embodiments the replication module comprises and or communicates with one or more replay threads processes or routines that populate data to the target storage device s during the replication process. For instance the replication module can replay data from log files that are received from the source system . In certain embodiments the target storage device s comprise one or more databases and transaction log files that store a copy of the data residing in respectively the source database s and the transaction log files .

The target system is further configured to generate one or more snapshots of data stored in the target storage device s . In certain embodiments the snapshot comprises a read only copy of the data stored in the database and the transaction log files as discussed in more detail above.

In certain embodiments the replication system can optionally include one or more additional components for further coordinating and or facilitating replication between the source system and the target system . For instance further illustrates the source system comprising an optional data agent .

In certain embodiments the data agent comprises a module responsible for performing data and or storage tasks related to the source system . For example the data agent may manage and or coordinate the compilation of and or transferring of replication data from the source system . In other embodiments the data agent may provide archiving migrating and or recovery of system data.

In certain embodiments the source system comprises a plurality of data agents each of which performs data management operations related to data associated with each database application . In such embodiments the data agent may be aware of the various logs files folders registry files and or system resources that are impacted by a particular database application .

In certain embodiments the data agent is configured to perform data management operations in accordance with one or more storage policies or other preferences. In certain embodiments a storage policy includes a data structure or other information having a set of preferences and or other storage criteria for performing a storage operation. The preferences and storage criteria may include but are not limited to information regarding storage locations and or timing relationships between system components network pathways retention policies data characteristics compression or encryption requirements preferred system components combinations of the same or the like.

In certain further embodiments the replication system can optionally include a storage manager that communicates with the source system and the target system . In certain embodiments the storage manager directs the performance of one or more storage operations and in particular the replication of data from the source system to the target system . In further embodiments the storage manager may perform one or more of the operations or functions described above with respect to the data agent and or the replication module . For instance the storage manager may direct and or coordinate the performance of one or more storage operations on the replicated data e.g. snapshots of the replicated data of the target storage device s .

In certain embodiments the storage manager maintains an index not shown such as a cache for storing information relating to logical relationships and associations between components of the replication system user preferences management tasks and or other useful data. For example the storage manager may use its index to track the location and timestamps of one or more snapshots of the replicated data.

The storage manager may also use its index to track the status of data management operations to be performed storage patterns associated with the system components such as media use storage growth network bandwidth Service Level Agreement SLA compliance levels data protection levels storage policy information storage criteria associated with user preferences retention criteria storage operation preferences and or other storage related information. The index may typically reside on the storage manager s hard disk and or other database.

In certain embodiments the storage manager further communicates with a database not shown for storing system management information relating to the replication of data. For instance the storage manager database may be configured to store storage and or restore policies user preferences the status or location of system components or data combinations of the same and the like. In yet other embodiments the storage manager database may be configured to store information described above with respect to the storage manager index. In yet other embodiments at least a portion of the storage manager index may be stored on the storage manager database.

In other embodiments the storage manager may alert the user or system when a particular resource of the replication system is unavailable or congested or when components are unavailable due to hardware failure software problems or other reasons. In certain embodiments the storage manager may utilize replication system data to suggest solutions to such problems when they occur or even before they occur. For example the storage manager might alert the user that a storage device in the target system is full or otherwise congested and then suggest based on job and data storage information contained in its index cache an alternate storage device. In yet further embodiments the storage manager or other system component may take action to remedy the problem at issue. For example the storage manager may perform load balancing error correction or the like based on information received regarding the target system .

In certain embodiments the storage manager may include other components and or modules. For example the storage manager may include a jobs agent module not shown that monitors the status of storage operations that have been performed that are being performed or that are scheduled to be performed in the replication system .

Moreover the storage manager may include an interface agent module not shown . In certain embodiments the interface agent module may provide presentation logic such as a graphical user interface GUI an API or other interface by which users and system processes may be able to retrieve information about the status of storage operations and issue instructions to the replication system regarding the performance of storage operations. For example a user may modify the schedule of a number of pending snapshot copies or other types of copies. As another example a user may use the GUI to view the status of all storage operations currently pending in the replication system or the status of particular components in the replication system .

Additional details of storage manager modules useful with embodiments of the replication systems described herein are disclosed in U.S. patent application Ser. No. 09 354 063 filed Jul. 15 1999 now U.S. Pat. No. 7 389 311 which is hereby incorporated herein by reference in its entirety.

The replication process begins at Block wherein the database application is quiesced. For example in certain embodiments the Volume Shadow Copy Service VSS offered by MICROSOFT can be used to temporarily quiesce write requests from the database application such as MICROSOFT EXCHANGE to the source storage device . For instance in such embodiments the data agent can insert a marker in the application data e.g. transaction logs that indicates the data is in a recoverable e.g. crash consistent stable state.

At Block the replication module suspends the replay threads on the target system that are replicating the data to the target storage device . In certain embodiments such suspension occurs based on the threads detection of the markers inserted by the VSS service. At this point the target storage device s and the source storage device s are preferably synchronized and or include data that is in a crash recoverable state although the data is not in a clean shutdown state.

With the replay threads suspended the replication module initiates a first snapshot of the target volume including the database and the transaction log files Block . In certain embodiments the first snapshot includes a read only copy of the database application data in a recoverable state. However as discussed above this data is generally not in a clean shutdown state and does not allow for access of the data without the use of the native application e.g. MICROSOFT EXCHANGE to interpret the data.

At Block the copy of the uncommitted transaction logs stored in the target transaction log files is replayed into the target database . In certain embodiments such replaying is performed through the execution of one or more JET APIs. After this point the copy of the database application data in the target database is advantageously in a clean shutdown state since the pending transaction logs have been committed. That is the copy of the data in the database is in a state that can be read offline without the use of the native database application .

At Block the replication module initiates a second snapshot of the target volume. Because the target transaction logs have been replayed into the target database the second snapshot advantageously comprises a read only copy of application data in both a recoverable and clean shutdown state.

However with the replaying of the copy of the transaction logs at Block the data on the target storage device s becomes out of sync with the production data stored on the source storage device s . Thus prior to resuming replication between the source storage device s and the target storage device s the replication process reverts the target volume back to the state of the first snapshot Block . In certain embodiments this revert process is performed by taking a difference e.g. file changes that have been cached of the first and second snapshots as is discussed in more detail with respect to .

Following Block the replication module thaws the replay threads and allows the replication between the source and target storage devices to resume Block .

Although the database replication process has been described with reference to a particular arrangement other embodiments of the invention can include more fewer or different blocks or states. For instance in other embodiments instead of snapshots other types of read only copies can be performed on the data in the target storage device s .

In yet other embodiments at Block the data agent and or the filter driver can be advantageously configured to pause or quiesce the database application during data replication. For instance the data agent may cause the application to temporarily suspend data management operations to the source storage device once the application reaches a known good stable or recoverable state.

In certain embodiments the data agent instructs the quiescing of the application through an application programming interface API . When the application has placed itself in a known good state the application may send an acknowledgment to the data agent .

In certain embodiments once the data management operations are suspended the filter driver and or data agent then inserts a logical marker or tag in the source log file denoting that a consistency point or consistency recovery point has been reached. In some embodiments the consistency point indicates the time at which the application is at a known good state.

Moreover in certain embodiments the target system is further capable of performing one or more data management operations such as for example storage operations e.g. backup search operations data classification combinations of the same or the like on the replicated data at certain consistency points. Performing data management operations on the replicated data allows for the processing of copies of application data without significantly impacting the resources of the source system. Furthermore when copying the replicated data at consistency points the copied data presumably represents a known good state of the application.

In certain embodiments of the invention at Block the application is periodically quiesced based on particular criteria. For instance the quiescing of the application may be based on one or more system or user defined preferences e.g. every five minutes . The periodic quiescing of the application may be based on the desired frequency of performing replication backup or other data modification operations on the subject data. For instance applications dealing with data sensitive information may necessitate more frequent quiescing and creation of consistency points than other types of applications.

In yet other embodiments quiescing of the application may be performed based on an automatic reporting procedure. For instance a module of the replication system may be configured to gather receive and or analyze information associated with a failure rate and or health of applicable servers. Additional details of such status monitoring are provided in U.S. patent application Ser. No. 11 120 619 filed May 2 2005 now published as U.S. Patent Application Publication No. 2006 0053261 A1 and issued as U.S. Pat. No. 7 343 453 which is hereby incorporated herein by reference in its entirety.

At Block the process performs a first snapshot of the target volume including the target database and the target transaction log files . Following the first snapshot the transaction logs are replayed into the target database to put the copy of the data in a clean shutdown state. During the replay of the transaction logs e.g. by a JET API the overwritten bits in the target database can be moved to a first cache location Block .

The process then performs a second snapshot of the target volume wherein the target volume represents the application data in a clean shutdown state Block . Following the second snapshot the process reverts the target volume back to the state in which it existed at the time of the first snapshot. To do so at Block the new bits added between the first and second snapshots i.e. during the replaying of the transaction logs are moved to a second cache location Block . The overwritten bits stored in the first cache location are then moved back to the target volume Block .

At Block the second snapshot is preserved as a consistent recovery point in a clean shutdown state. In certain embodiments a customized driver is used to preserve the snapshot e.g. the snapshot is not deleted .

In certain embodiments the first and second cache locations can be on different storage devices or volumes. In yet other embodiments the first and second cache locations can be located on the same storage device.

As shown at State A the source database includes File A and File B and the source log files include a transaction relating to the creation of File C and the modification of File B i.e. File B . With reference to the target system the target database and the target log files are synchronized with the source system.

At State B a first snapshot i.e. Snapshot A is taken of the target system. As discussed above with reference to Block of the replication process the application data from the target database is in a dirty shutdown state.

At State C an additional transaction log for the creation of a File D has been added to the source log files. Moreover the target transaction logs Files B and C have been replayed from the target log files to the target database see e.g. Block . Thus the target database includes File A File B and File C. At this point the data in the target database is in a clean shutdown state and no outstanding transaction logs are left in the target log files. As further illustrated the system then takes a second snapshot Snapshot B of at least the data in the target database to create a consistent recoverable copy of the database application data that can be accessed and utilized without the native database application which created the data see e.g. Block .

At State D the target database is reverted back to the state in which it existed at the time Snapshot A was taken see e.g. Block and the target log files are repopulated with transactions relating to Files B and C. Moreover at State E a transaction log relating to File D is replicated from the source system to the target system.

At State F the transaction logs in both the source and target log files relating to File B and File C are replayed respectively into the source and target databases. Moreover an additional transaction log relating to File E is added to the source log files and replicated to the target system such that the source and target systems are re synchronized.

In certain embodiments of the invention data replication systems and methods disclosed herein may be used in a modular storage management system embodiments of which are described in more detail in U.S. Pat. No. 7 035 880 issued Apr. 5 2006 which is hereby incorporated herein by reference in its entirety. For example the data replication system may be part of a storage operation cell that includes combinations of hardware and or software components directed to performing storage operations on electronic data. Exemplary storage operation cells usable with embodiments of the invention include CommCells as embodied in the QNet storage management system and the QiNetix storage management system by CommVault Systems Inc. Oceanport N.J. and as further described in U.S. patent application Ser. No. 10 877 831 filed Jun. 25 2004 now published as U.S. Patent Application Publication No. 2005 0033800 A1 issued as U.S. Pat. No. 7 454 569 which is hereby incorporated herein by reference in its entirety.

Systems and modules described herein may comprise software firmware hardware or any combination s of software firmware or hardware suitable for the purposes described herein. Software and other modules may reside on servers workstations personal computers computerized tablets PDAs and other devices suitable for the purposes described herein. Software and other modules may be accessible via local memory via a network via a browser or via other means suitable for the purposes described herein. Data structures described herein may comprise computer files variables programming arrays programming structures or any electronic information storage schemes or methods or any combinations thereof suitable for the purposes described herein. User interface elements described herein may comprise elements from graphical user interfaces command line interfaces and other interfaces suitable for the purposes described herein.

Embodiments of the invention are also described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams may be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to operate in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the acts specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operations to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the acts specified in the flowchart and or block diagram block or blocks.

While certain embodiments of the inventions have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the disclosure. Indeed the novel methods and systems described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the disclosure. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of the disclosure.

