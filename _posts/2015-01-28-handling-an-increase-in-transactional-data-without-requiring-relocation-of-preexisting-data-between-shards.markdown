---

title: Handling an increase in transactional data without requiring relocation of preexisting data between shards
abstract: A method, system and computer program product for handling an increase in transactional data load without requiring the relocation of preexisting data. A range of attribute values and identifications of associated shards are stored in a data structure. In response to adding a new shard, the data structure is updated by associating a range of attribute values to the added shard while maintaining the same range of attribute values being associated with one of the pre-existing shards. As a result, the new data assigned within this range of attribute values will be stored in the newly added shard while the older data assigned within this range of attribute values will continue to be stored in one of the preexisting shards. In this manner, an increase in transactional data load can be handled by adding a new shard without requiring the relocation of preexisting data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09449036&OS=09449036&RS=09449036
owner: International Business Machines Corporation
number: 09449036
owner_city: Armonk
owner_country: US
publication_date: 20150128
---
The present invention relates generally to data partitioning and more particularly to handling an increase in transactional data without requiring relocation of preexisting data between shards.

Data may be partitioned between multiple data sources such as a shard. In such an architecture the data to be stored in the shards is assigned an identifier such as a customer s e mail address or store number. A range of identifier values is then mapped to a specific shard. When data is created it is placed in a corresponding shard based on its assigned identifier value. For example data for the first 100 stores of a customer is to be stored in one shard data for the second 100 stores of the customer is to be stored in another shard and so forth.

As the volume of data to be stored increases though there will be a need to add additional shards. However by adding additional shards this presents a problem of how to relocate existing data from existing shards to the new ones. For instance referring to the above example instead of having data for stores 1 100 being stored in a single shard e.g. shard data for stores 1 50 may be stored in shard whereas data for stores 51 100 may be stored in a new shard e.g. shard . As a result existing data needs to be moved from one shard into another shard such as moving data for stores 51 100 stored in shard into shard . Although database replication software exists to move data from one shard into another shard it requires significant computational resources to move the data such as moving hundreds of millions of orders in an online transaction processing environment. Furthermore the sharded data and the applications which access such sharded data may contain the old shard s database information which now has to be updated for every single record that is moved.

In one embodiment of the present invention a method for handling an increase in transactional data load without requiring relocation of preexisting data comprises storing one or more ranges of attributes values and one or more identifications of shards in a data structure where each of the one or more shards is associated with a range of attribute values. Furthermore each of the one or more shards stores data with an attribute value within its associated range of attribute values. The method further comprises adding a new shard to one or more preexisting shards to handle additional data to be stored. Additionally the method comprises updating by a processor the data structure by associating a first range of attribute values to the new shard while maintaining the first range of attribute values being associated to one of the one or more preexisting shards.

Other forms of the embodiment of the method described above are in a system and in a computer program product.

The foregoing has outlined rather generally the features and technical advantages of one or more embodiments of the present invention in order that the detailed description of the present invention that follows may be better understood. Additional features and advantages of the present invention will be described hereinafter which may form the subject of the claims of the present invention.

The present invention comprises a method system and computer program product for handling an increase in transactional data load without requiring the relocation of preexisting data. In one embodiment of the present invention a range of attribute values and identifications of associated shards are stored in a data structure. An attribute value as used herein refers to a value assigned to data that is stored in a particular shard. Each shard is associated with a range of attribute values and stores data assigned with an attribute value within this range of attribute values. A new shard is added to handle additional data to be stored i.e. handle the increase in transactional data load . In response to adding a shard the data structure is updated by associating a range of attribute values to the added shard while maintaining the same range of attribute values being associated with one of the pre existing shards referring to those shards that existed prior to adding the new shard . As a result the new data assigned within this range of attribute values will be stored in the newly added shard while the older data referring to the data previously stored prior to adding the new shard assigned within this range of attribute values will continue to be stored in one of the preexisting shards. In this manner an increase in transactional data load can be handled by adding a new shard without requiring the relocation of preexisting data.

While the following discusses the present invention in connection with adding a new shard in a database system without requiring the relocation of preexisting data the principles of the present invention may be applied to any system e.g. file system storing data where the data is stored among multiple shards. A person of ordinary skill in the art would be capable of applying the principles of the present invention to such implementations. Further embodiments applying the principles of the present invention to such implementations would fall within the scope of the present invention.

In the following description numerous specific details are set forth to provide a thorough understanding of the present invention. However it will be apparent to those skilled in the art that the present invention may be practiced without such specific details. In other instances well known circuits have been shown in block diagram form in order not to obscure the present invention in unnecessary detail. For the most part details considering timing considerations and the like have been omitted inasmuch as such details are not necessary to obtain a complete understanding of the present invention and are within the skills of persons of ordinary skill in the relevant art.

Referring now to the Figures in detail illustrates a network system configured in accordance with an embodiment of the present invention. Network system includes client devices A C identified as Client Device A Client Device B and Client Device C respectively in connected to a middle tier system via a network . Client devices A C may collectively or individually be referred to as client devices or client device respectively. Client device may be any type of computing device e.g. portable computing unit personal digital assistant PDA smartphone laptop computer mobile phone navigation device game console desktop computer system workstation Internet appliance and the like configured with the capability of connecting to network and consequently communicating with database system as discussed below.

Network may be for example a local area network a wide area network a wireless wide area network a circuit switched telephone network a Global System for Mobile Communications GSM network Wireless Application Protocol WAP network a WiFi network an IEEE 802.11 standards network various combinations thereof etc. Other networks whose descriptions are omitted here for brevity may also be used in conjunction with system of without departing from the scope of the present invention.

Network system further includes a database system connected to middle tier system . While middle tier system is shown to be directly connected to database system middle tier system may be connected to database system via a network not shown similar to network . Database system contains one or more shards A C identified as Shard Shard and Shard respectively in . Shards A C may collectively or individually be referred to as shards or shard respectively. In one embodiment shard is a partition in the database and may reside on a separate database server not shown or physical location within database system . While illustrates database system containing three shards database system may contain any number of shards .

Users of client devices generate requests for service to middle tier system at least some of these requests requiring access to information in shards of database system . Middle tier system acts as a server to client device it may provide various services to client devices not all of which necessarily involve database access but in particular it functions as an intermediary between client devices and database system in handling client requests to access information in shard . Where necessary to provide a requested service middle tier system uses the client request for information in a general form to generate one or more requests to database system in a specific form required by shard to be accessed. Database system generates responses to those requests e.g. copies of selective information results of queries acknowledgments of changes made to the information etc. which are transmitted to middle tier system and used by middle tier system to provide a response to client devices . Middle tier system which handles all direct interaction with client devices appears to client devices as database system . From the perspective of database system middle tier system functions as a representative of multiple client devices to transmit and receive information from client devices . A description of an embodiment of a hardware configuration of middle tier system is provided below in connection with .

Referring now to illustrates a hardware configuration of middle tier system which is representative of a hardware environment for practicing the present invention. Referring to middle tier system has a processor coupled to various other components by system bus . An operating system runs on processor and provides control and coordinates the functions of the various components of . An application in accordance with the principles of the present invention runs in conjunction with operating system and provides calls to operating system where the calls implement the various functions or services to be performed by application . Application may include for example a program for handling an increase in transactional data load without requiring the relocation of preexisting data as discussed further below in association with .

Referring again to read only memory ROM is coupled to system bus and includes a basic input output system BIOS that controls certain basic functions of middle tier system . Random access memory RAM and disk adapter are also coupled to system bus . It should be noted that software components including operating system and application may be loaded into RAM which may be middle tier system s main memory for execution. Disk adapter may be an integrated drive electronics IDE adapter that communicates with a disk unit e.g. disk drive. It is noted that the program for handling an increase in transactional data load without requiring the relocation of preexisting data as discussed further below in association with may reside in disk unit or in application .

Middle tier system may further include a communications adapter coupled to bus . Communications adapter interconnects bus with an outside network e.g. network of thereby enabling middle tier system to communicate with client devices and database system .

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

As stated in the Background section data may be partitioned between multiple data sources such as a shard. In such an architecture the data to be stored in the shards is assigned an identifier such as a customer s e mail address or store number. A range of identifier values is then mapped to a specific shard. When data is created it is placed in a corresponding shard based on its assigned identifier value. For example data for the first 100 stores of a customer is to be stored in one shard data for the second 100 stores of the customer is to be stored in another shard and so forth. As the volume of data to be stored increases though there will be a need to add additional shards. However by adding additional shards this presents a problem of how to relocate existing data from existing shards to the new ones. For instance referring to the above example instead of having data for stores 1 100 being stored in a single shard e.g. shard data for stores 1 50 may be stored in shard whereas data for stores 51 100 may be stored in a new shard e.g. shard . As a result existing data needs to be moved from one shard into another shard such as moving data for stores 51 100 stored in shard into shard . Although database replication software exists to move data from one shard into another shard it requires significant computational resources to move the data such as moving hundreds of millions of orders in an online transaction processing environment. Furthermore the sharded data and the applications which access such sharded data may contain the old shard s database information which now has to be updated for every single record that is moved.

The principles of the present invention provide a means for handling an increase in transactional data load such as by adding a new shard without requiring the relocation of preexisting data as discussed further below in connection with . is a flowchart of a method for handling an increase in transactional data load such as by adding a new shard without requiring the relocation of preexisting data. illustrates a data structure configured to store ranges of attributes values and associated identifications of shards prior to adding a new shard. illustrates a new shard being added to the database system. illustrates the data structure being updated to associate a range of attribute values to the newly added shard while maintaining the association of the same range of attribute values to a preexisting shard. is a flowchart of a method for accessing data stored in multiple shards using the data structure of the present invention.

As stated above is a flowchart of a method for handling an increase in transactional data load such as by adding a new shard without requiring the relocation of preexisting data in accordance with an embodiment of the present invention.

Referring to in conjunction with in step middle tier system stores ranges of attribute values and identifications of associated shards of database system in a data structure as illustrated in . illustrates a data structure configured to store ranges of attributes values and associated identifications of shards prior to adding a new shard in accordance with an embodiment of the present invention.

As illustrated in data structure includes a listing of ranges of attribute values and the associated identifications of shards shard numbers . An attribute value as used herein refers to a value assigned to data that is stored in a particular shard . For example the range of attribute values X Z is associated with the identification of shard e.g. shard A of the range of attribute values X Z is associated with the identification of shard e.g. shard B of and the range of attribute values X Z is associated with the identification of shard e.g. shard C of . Hence as illustrated in each shard is associated with a range of attribute values. Furthermore each shard stores data with an attribute value within its associated range of attribute values. For example data with an attribute value within the range of attribute values X Z would be stored in shard associated with the identification of shard e.g. shard A . In one embodiment data structure resides in memory e.g. ROM or in a storage medium e.g. disk unit .

Returning to in conjunction with in step middle tier system adds a new shard to handle additional data to be stored i.e. handle the increase in transactional data load as illustrate in . illustrates a new shard D being added to database system in accordance with an embodiment of the present invention.

Referring to shard D identified as New Shard is added to database system containing preexisting shards A C to handle the additional transactional data load. New shard D and preexisting shards A C may collectively or individually be referred to as shards or shard respectively. In one embodiment shard D is added to store new data assigned to a range of attribute values while the older data assigned to the same range of attribute values is to be maintained in the preexisting shard s as discussed further below.

Returning to in conjunction with in step middle tier system in response to having a shard e.g. shard D added to database system updates data structure by associating a range of attribute values to the added shard D while maintaining the same range of attribute values being associated with one of the pre existing shards referring to those shards such as shards A C that existed prior to adding the new shard such as D as illustrated in . illustrates data structure being updated to associate a range of attribute values to the newly added shard D while maintaining the association of the same range of attribute values to a preexisting shard e.g. shard C in accordance with an embodiment of the present invention.

Referring to in conjunction with data structure has been updated to reflect that new data assigned within the range of attribute values Y Z will be stored in shard associated with the identification of shard e.g. shard D . Furthermore data structure has been updated to reflect that the older data referring to the data previously stored prior to the new shard such as shard D being added to database system assigned within the range of attribute values Y Z will be stored in shard associated with the identification of shard e.g. shard C . In one embodiment the mapping of the range of attribute values assigned to the older data such as Y Z to one of the preexisting shards such as shard C is maintained by metadata.

An example of utilizing the principles of the present invention to handle an increase in transactional data load such as by adding a new shard without requiring the relocation of preexisting data is as follows. Suppose that a website starts with 200 electronic stores split across two shards with 100 stores in each shard e.g. data from stores 1 100 stored in shard A and data from stores 101 200 stored in shard B . All orders for the first 100 stores are stored in shard A while the orders for stores 101 200 are stored in shard B. As business grew and volumes of data to be stored increased there was a need to add a new shard such as shard D to store the new data. For instance the data to be stored from the first 100 stores stores 1 100 may be split into two shards which each storing data from 50 of the first 100 stores. The new data from stores 1 50 may now be stored in the newly added shard D. However there is still a need to retrieve the orders that had previously transpired. As a result some of the orders will reside in preexisting shard A while some will reside in newly added shard D. In order to retrieve these orders a metadata engine which may reside in application is configured to maintain a mapping of historically assigned shards such as in this case shard A. All new orders will be created in the newly added shard however the older orders can still be retrieved from shard A. In this manner an increase in transactional data load can be handled by adding a new shard e.g. shard D without requiring the relocation of preexisting data.

As will be discussed in further detail below middle tier system will retrieve data from multiple shards e.g. shards C and D in situations when the requested data is assigned an attribute value that is within a range of attribute values associated with multiple shards . By having the old and new data being assigned a range of attribute values associated with multiple shards a new shard D and a preexisting shard such as shard C relocation of preexisting data is no longer required.

Data can be accessed from multiple shards such as a new shard e.g. shard D and a preexisting shard such as shard C as discussed below in connection with .

Referring to in conjunction with in step middle tier system receives a request from client device e.g. client device A to read data from database system where the request includes an attribute value assigned to the data to be read. In one embodiment a services layer of middle tier system receives the request from client device . In one embodiment such a services layer is one of the layers in the service oriented architecture. In one embodiment the services layer is a collection of application programming interfaces.

In step middle tier system performs a look up in data structure to identify two or more shards associated with a range of attribute values that include the attribute value of the request.

In step middle tier system identifies two or more shards associated with a range of attribute values that includes the attribute value of the request. For example referring to if the request received in step was associated with an attribute value of Y then middle tier system would identify shard e.g. shard D storing the new data and shard e.g. shard C storing the older data assigned to an attribute value of Y.

In step middle tier system reads the requested data from the identified two or more shards e.g. shards C D . In one embodiment the data read is aggregated into a single response to be sent to the requesting client device . In one embodiment the read data is aggregated at the application level as opposed to the database level.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

