---

title: Computer system to support failover in an event stream processing system
abstract: In a computing device supporting a failover in an event stream processing (ESP) system, an event block object is received. A first status of the computing device as active or standby is determined. When the first status is active, a second status of the computing device as newly active or not newly active is determined. Newly active is determined when the computing device is switched from a standby to an active status. When the second status is newly active, a last published event block object identifier that uniquely identifies a last published event block object is determined. A next event block object is selected from a non-transitory computer-readable medium accessible by the computing device. The next event block object has an event block object identifier that is greater than the determined last published event block object identifier. The selected next event block object is published to an out-messaging network device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09122651&OS=09122651&RS=09122651
owner: SAS Institute Inc.
number: 09122651
owner_city: Cary
owner_country: US
publication_date: 20150319
---
The present application claims the benefit of 35 U.S.C. 119 e to U.S. Provisional Patent Application No. 62 008 725 filed Jun. 6 2014 and to U.S. Provisional Patent Application No. 62 134 852 filed Mar. 18 2015 the entire contents of which are hereby incorporated by reference.

An increasing number of distributed applications process continuously flowing data from distributed sources by applying queries to the data before distributing the data to geographically distributed recipients. An event stream processing engine ESPE continuously applies the queries to the data as it is received and determines which entities receive the processed data.

In an example embodiment a system is provided to support a failover when event stream processing ESP event blocks. The system includes but is not limited to an out messaging network device and a computing device. The computing device includes but is not limited to a processor and a computer readable medium operably coupled to the processor. The processor is configured to execute an ESP engine ESPE . The computer readable medium has instructions stored thereon that when executed by the processor cause the computing device to support the failover. An event block object is received from the ESPE that includes a unique identifier. A first status of the computing device as active or standby is determined. When the first status is active a second status of the computing device as newly active or not newly active is determined. Newly active is determined when the computing device is switched from a standby status to an active status. When the second status is newly active a last published event block object identifier that uniquely identifies a last published event block object is determined. A next event block object is selected from a non transitory computer readable medium accessible by the computing device. The next event block object has an event block object identifier that is greater than the determined last published event block object identifier. The selected next event block object is published to an out messaging network device. When the second status of the computing device is not newly active the received event block object is published to the out messaging network device. When the first status of the computing device is standby the received event block object is stored in the non transitory computer readable medium.

In another example embodiment a computer readable medium is provided having stored thereon computer readable instructions that when executed by a computing device cause the computing device to support a failover when event stream processing ESP event blocks.

In yet another example embodiment a method of supporting failover in an event stream processing system is provided. An event block object is received from an ESP engine that includes a unique identifier. A first status of a computing device as active or standby is determined. When the first status is active a second status of the computing device as newly active or not newly active is determined. Newly active is determined when the computing device is switched from a standby status to an active status. When the second status is newly active a last published event block object identifier that uniquely identifies a last published event block object is determined. A next event block object is selected from a non transitory computer readable medium accessible by the computing device. The next event block object has an event block object identifier that is greater than the determined last published event block object identifier. The selected next event block object is published to an out messaging network device.

Other principal features of the disclosed subject matter will become apparent to those skilled in the art upon review of the following drawings the detailed description and the appended claims.

Referring to a block diagram of an event stream processing ESP system is shown in accordance with an illustrative embodiment. In an illustrative embodiment ESP system may include an ESP device event publishing systems event subscribing systems and a network . The event publishing systems publish data to ESP device which receives the published data. ESP device processes the published data. The event subscribing systems subscribe to and receive the published data after processing by ESP device .

As used herein the data may include any type of content represented in any computer readable format such as binary alphanumeric numeric string markup language etc. The content may include textual information graphical information image information audio information numeric information etc. that further may be encoded using various encoding techniques as understood by a person of skill in the art.

The components of ESP system may be included in a single computing device may be located in a single room or adjacent rooms in a single facility and or may be distributed geographically from one another. Each of ESP device the event publishing systems and the event subscribing systems may be composed of one or more discrete devices.

Network may include one or more networks of the same or different types. Network can be any type of wired and or wireless public or private network including a cellular network a local area network a wide area network such as the Internet etc. Network further may comprise sub networks and consist of any number of devices.

ESP device can include any type of computing device. The computing device sends and receives signals through network to from event publishing systems and to from event subscribing systems . ESP device may communicate using various transmission media that may be wired and or wireless as understood by those skilled in the art.

The event publishing systems can include any number and type of computing devices that may be organized into subnets. The computing devices of the event publishing systems send and receive signals through network to from another of the one or more computing devices of the event publishing systems to from ESP device and or to from the event subscribing systems . The one or more computing devices of the event publishing systems may include computers of any form factor such as a laptop a desktop a smart phone a personal digital assistant an integrated messaging device a tablet computer etc. The one or more computing devices of the event publishing systems may communicate using various transmission media that may be wired and or wireless as understood by those skilled in the art.

The event subscribing systems can include any number and type of computing devices that may be organized into subnets. The computing devices of the event subscribing systems send and receive signals through network to from another of the one or more computing devices of the event subscribing systems to from ESP device and or to from the event publishing systems . The one or more computing devices of the event subscribing systems may include computers of any form factor such as a laptop a desktop a smart phone an integrated messaging device a personal digital assistant a tablet computer etc. The one or more computing devices of the event subscribing systems may communicate using various transmission media that may be wired and or wireless as understood by those skilled in the art.

Referring to a block diagram of a publishing device of the event publishing systems is shown in accordance with an illustrative embodiment. Publishing device is an example computing device of the event publishing systems . Publishing device may include an input interface an output interface a communication interface a computer readable medium a processor a keyboard a mouse a display a speaker a printer and an event publishing application . Fewer different or additional components may be incorporated into publishing device .

Input interface provides an interface for receiving information from the user for entry into publishing device as understood by those skilled in the art. Input interface may interface with various input technologies including but not limited to keyboard mouse display a track ball a keypad one or more buttons etc. to allow the user to enter information into publishing device or to make selections presented in a user interface displayed on display . The same interface may support both input interface and output interface . For example a display comprising a touch screen both allows user input and presents output to the user. Publishing device may have one or more input interfaces that use the same or a different input interface technology. The input interface technology further may be accessible by publishing device through communication interface .

Output interface provides an interface for outputting information for review by a user of publishing device . For example output interface may interface with various output technologies including but not limited to display speaker printer etc. Publishing device may have one or more output interfaces that use the same or a different interface technology. The output interface technology further may be accessible by publishing device through communication interface .

Communication interface provides an interface for receiving and transmitting data between devices using various protocols transmission technologies and media as understood by those skilled in the art. Communication interface may support communication using various transmission media that may be wired and or wireless. Publishing device may have one or more communication interfaces that use the same or a different communication interface technology. For example publishing device may support communication using an Ethernet port a Bluetooth antenna a telephone jack a USB port wireless compatible devices etc. Data and messages may be transferred between publishing device and ESP device and or the event subscribing systems using communication interface .

Computer readable medium is an electronic holding place or storage for information so the information can be accessed by processor as understood by those skilled in the art. Computer readable medium can include but is not limited to any type of random access memory RAM any type of read only memory ROM any type of flash memory etc. such as magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disc CD digital versatile disc DVD . . . smart cards flash memory devices etc. Publishing device may have one or more computer readable media that use the same or a different memory media technology. Publishing device also may have one or more drives that support the loading of a memory media such as a CD or DVD an external hard drive etc. One or more external hard drives further may be connected to publishing device using communication interface .

Processor executes instructions as understood by those skilled in the art. The instructions may be carried out by a special purpose computer logic circuits or hardware circuits. Processor may be implemented in hardware and or firmware. Processor executes an instruction meaning it performs controls the operations called for by that instruction. The term execution can refer to the process of running an application or the carrying out of the operation called for by an instruction. The instructions may be written using one or more programming language scripting language assembly language etc. Processor operably couples with input interface with output interface with communication interface and with computer readable medium to receive to send and to process information. Processor may retrieve a set of instructions from a permanent memory device and copy the instructions in an executable form to a temporary memory device that may be some form of RAM for example. Publishing device may include a plurality of processors that use the same or a different processing technology.

Event publishing application performs operations associated with creating and publishing data. For illustration event publishing application may publish data generated by a sensor data generated or captured in response to occurrence of an event or a transaction data generated by a device such as in response to an interaction by a user with the device etc. Some or all of the operations described herein may be embodied in event publishing application . The operations may be implemented using hardware firmware software or any combination of these methods. Referring to the example embodiment of event publishing application is implemented in software comprised of computer readable and or computer executable instructions stored in computer readable medium and accessible by processor for execution of the instructions that embody the operations of event publishing application . Event publishing application may be written using one or more programming languages assembly languages scripting languages etc.

Event publishing application may be implemented as a Web application. For example event publishing application may be configured to receive hypertext transport protocol HTTP responses and to send HTTP requests. The HTTP responses may include web pages such as hypertext markup language HTML documents and linked objects generated in response to the HTTP requests. Each web page may be identified by a uniform resource locator URL that includes the location or address of the computing device that contains the resource to be accessed in addition to the location of the resource on that computing device. The type of file or resource depends on the Internet application protocol such as the file transfer protocol HTTP H.323 etc. The file accessed may be a simple text file an image file an audio file a video file an executable a common gateway interface application a Java applet an extensible markup language XML file or any other type of file supported by HTTP.

Referring to a block diagram of a subscribing device of the event subscribing systems is shown in accordance with an example embodiment. Subscribing device is an example computing device of the event subscribing systems . Subscribing device may include a second input interface a second output interface a second communication interface a second computer readable medium a second processor and an event subscription application . Fewer different or additional components may be incorporated into subscribing device .

Second input interface provides the same or similar functionality as that described with reference to input interface of publishing device though referring to subscribing device . Second output interface provides the same or similar functionality as that described with reference to output interface of publishing device though referring to subscribing device . Second communication interface provides the same or similar functionality as that described with reference to communication interface of publishing device though referring to subscribing device . Data and messages may be transferred between subscribing device and ESP device and or the event publishing systems using second communication interface . Second computer readable medium provides the same or similar functionality as that described with reference to computer readable medium of publishing device though referring to subscribing device . Second processor provides the same or similar functionality as that described with reference to processor of publishing device though referring to subscribing device .

Event subscription application performs operations associated with receiving the data published by the one or more computing devices of the event publishing systems and processed by ESP device . Some or all of the operations described herein may be embodied in event subscription application . The operations may be implemented using hardware firmware software or any combination of these methods. Referring to the example embodiment of event subscription application is implemented in software comprised of computer readable and or computer executable instructions stored in second computer readable medium and accessible by second processor for execution of the instructions that embody the operations of event subscription application . Event subscription application may be written using one or more programming languages assembly languages scripting languages etc. Event subscription application may be implemented as a Web application.

Referring to a block diagram of ESP device is shown in accordance with an illustrative embodiment. ESP device may include one or more computers of any form factor. ESP device may include a third input interface a third output interface a third communication interface a third computer readable medium a third processor a database and an ESP application . Fewer different or additional components may be incorporated into ESP device .

Third input interface provides the same or similar functionality as that described with reference to input interface of publishing device though referring to ESP device . Third output interface provides the same or similar functionality as that described with reference to output interface of publishing device though referring to ESP device . Third communication interface provides the same or similar functionality as that described with reference to communication interface of publishing device though referring to ESP device . Data and messages may be transferred between ESP device and the event subscribing systems and or the event publishing systems using third communication interface . Third computer readable medium provides the same or similar functionality as that described with reference to computer readable medium of publishing device though referring to ESP device . Third processor provides the same or similar functionality as that described with reference to processor of publishing device though referring to ESP device .

ESP device includes or can access database either through a direct connection or through network using third communication interface . Third computer readable medium may provide the electronic storage medium for database . Database is a data repository for ESP system . The data stored in database may include any type of content represented in any computer readable format such as binary alphanumeric numeric string markup language etc. The content may include textual information graphical information image information audio information numeric information etc. that further may be encoded using various encoding techniques as understood by a person of skill in the art.

Database may be implemented using various formats as known to those skilled in the art including a file system a relational database a system of tables a structured query language database etc. For example database may be stored in a cube distributed across a grid of computers as understood by a person of skill in the art. As another example database may be stored in a multi node Hadoop cluster as understood by a person of skill in the art. Apache Hadoop for example is an open source software framework for distributed computing supported by the Apache Software Foundation. As another example database may be stored in a cloud of computers and accessed using cloud computing technologies as understood by a person of skill in the art. The SAS LASR Analytic Server for example developed and provided by SAS Institute Inc. of Cary N.C. USA may be used as an analytic platform to enable multiple users to concurrently access data stored in database . Other servers and systems may be used.

ESP application performs operations associated with processing data created by the one or more computing devices of the event publishing systems and sending the processed data to the one or more computing devices of the event subscribing systems based on the subscription request of each computing device of the event subscribing systems . ESP application may embed an ESP engine ESPE with its own dedicated thread pool or pools into its application space where the main application thread can do application specific work and the ESPE processes event streams at least by creating an instance of a model into processing objects. Some or all of the operations described herein may be embodied in ESP application . The operations may be implemented using hardware firmware software or any combination of these methods. Referring to the example embodiment of ESP application is implemented in software comprised of computer readable and or computer executable instructions stored in third computer readable medium and accessible by third processor for execution of the instructions that embody the operations of ESP application . ESP application may be written using one or more programming languages assembly languages scripting languages etc. ESP application may be implemented as a Web application for example.

Event subscription application event publishing application and ESP application may save or store data to database and access or retrieve data from database . Event subscription application event publishing application and ESP application may be the same or different applications or part of an integrated distributed application supporting some or all of the same or additional types of functionality as described herein. As an example the functionality provided by ESP application may be provided as part of the DataFlux ESP Engine developed and provided by SAS Institute Inc. of Cary N.C. USA and or ESP applications offered by other software vendors. Various levels of integration between the components of ESP system may be implemented without limitation as understood by a person of skill in the art. For example all of the functionality described for ESP system may be implemented in a single computing device.

Referring to example operations associated with ESP application are described. ESP application defines how input event streams from publishers are transformed into meaningful output event streams consumed by subscribers. Additional fewer or different operations may be performed depending on the embodiment. The order of presentation of the operations of is not intended to be limiting. A user can interact with one or more user interface windows presented to the user in a display such as display under control of ESP application independently or through a browser application in an order selectable by the user. Although some of the operational flows are presented in sequence the various operations may be performed in various repetitions concurrently and or in other orders than those that are illustrated. For example a user may execute ESP application which causes presentation of a first user interface window which may include a plurality of menus and selectors such as drop down menus buttons text boxes hyperlinks etc. associated with ESP application as understood by a person of skill in the art. As further understood by a person of skill in the art various operations may be performed in parallel for example using a plurality of threads.

In an operation ESP application defines and starts an ESP engine ESPE thereby instantiating an ESPE at ESP device . For example referring to the components of an ESPE executing at ESP device are shown in accordance with an illustrative embodiment. ESPE may include one or more projects . A project may be described as a second level container in an engine model managed by ESPE where a thread pool size for the project may be defined by a user. A value of 1 for the thread pool size indicates that writes are single threaded. Each project of the one or more projects may include one or more continuous queries that contain data flows which are data transformations of incoming event streams. The one or more continuous queries may include one or more source windows and one or more derived windows .

The engine container is the top level container in a model that manages the resources of the one or more projects . In an illustrative embodiment for example there can be only one ESPE for each instance of ESP application and ESPE has a unique engine name. Additionally the one or more projects may each have unique project names and each query may have a unique continuous query name and begin with a uniquely named source window of the one or more source windows . ESPE may or may not be persistent.

Continuous query modeling involves defining directed graphs of windows for event stream manipulation and transformation. A window in the context of event stream manipulation and transformation is a processing node in an event stream processing model. A window in a continuous query can perform aggregations computations pattern matching and other operations on data flowing through the window. A continuous query may be described as a directed graph of source relational pattern matching and procedural windows. The one or more source windows and the one or more derived windows represent continuously executing queries that generate updates to a query result set as new event blocks stream through ESPE . A directed graph for example is a set of nodes connected by edges where the edges have a direction associated with them.

An event object may be described as a packet of data accessible as a collection of fields with at least one of the fields defined as a key or unique identifier ID . The event object may be created using a variety of formats including binary alphanumeric XML etc. Each event object may include one or more fields designated as a primary identifier ID for the event so ESPE can support operation codes opcodes for events including insert update upsert and delete. Upsert opcodes update the event if the key field already exists otherwise the event is inserted. For illustration an event object may be a packed binary representation of a set of field values and include both metadata and field data associated with an event. The metadata may include an opcode indicating if the event represents an insert update delete or upsert a set of flags indicating if the event is a normal partial update or a retention generated event from retention policy management and a set of microsecond timestamps that can be used for latency measurements.

An event block object may be described as a grouping or package of event objects. An event stream may be described as a flow of event block objects. A continuous query of the one or more continuous queries transforms a source event stream made up of streaming event block objects published into ESPE into one or more output event streams using the one or more source windows and the one or more derived windows . A continuous query can also be thought of as data flow modeling.

The one or more source windows are at the top of the directed graph and have no windows feeding into them. Event streams are published into the one or more source windows and from there the event streams are directed to the next set of connected windows as defined by the directed graph. The one or more derived windows are all instantiated windows that are not source windows and that have other windows streaming events into them. The one or more derived windows perform computations or transformations on the incoming event streams. The one or more derived windows transform event streams based on the window type that is operators such as join filter compute aggregate copy pattern match procedural union etc. and window settings. As event streams are published into ESPE they are continuously queried and the resulting sets of derived windows in these queries are continuously updated.

ESP application may be developed for example using a modeling application programming interface API that provides a set of classes with member functions. As an example the SAS ESP Engine developed and provided by SAS Institute Inc. of Cary N.C. USA provides a modeling API that provides a set of classes with member functions. These functions enable ESP application to embed ESPE possibly with dedicated thread pools into its own process space. Alternatively ESPE can be embedded into the process space of an existing or a new application. In that case a main application thread is focused on its own chores and interacts with the embedded ESPE as needed.

Referring to in an operation the engine container is created. For illustration ESPE may be instantiated using a function call that specifies the engine container as a manager for the model. The function call may include the engine name for ESPE that is provided by a user or a developer and may be unique to ESPE .

In an operation the one or more continuous queries are instantiated by ESPE as a model. The one or more continuous queries may be instantiated with a dedicated thread pool or pools that generate updates as new events stream through ESPE . For illustration the one or more continuous queries may be created to model business processing logic within ESPE to predict events within ESPE to model a physical system within ESPE to predict the physical system state within ESPE etc. For example ESPE may be used to support sensor data monitoring and management e.g. sensing may include force torque load strain position temperature air pressure fluid flow chemical properties resistance electromagnetic fields radiation irradiance proximity acoustics moisture distance speed vibrations acceleration electrical potential or electrical current etc. capital markets trading systems fraud detection and prevention personalized marketing operational systems monitoring and management cyber security analytics etc.

To create a continuous query input event structures that are schemas with keys that flow into the one or more source windows may be identified. Output event structures that are also schemas with keys generated by the one or more source windows and or the one or more derived windows may also be identified. For example the block of code below illustrates creation of a compute window that normalizes a City field that is created for events in that window 

ESPE may analyze and process events in motion or event streams. Instead of storing data and running queries against the stored data ESPE may store queries and stream data through them to allow continuous analysis of data as it is received. The one or more source windows and the one or more derived windows may be created based on the relational pattern matching and procedural algorithms that transform the input event streams into the output event streams to model simulate score test predict etc. based on the continuous query model defined and application to the streamed data.

In an operation a publish subscribe pub sub capability is initialized for ESPE . In an illustrative embodiment a pub sub capability is initialized for each project of the one or more projects . To initialize and enable pub sub capability for ESPE a port number is provided. Pub sub clients can use a host name of ESP device and the port number to establish pub sub connections to ESPE . For example a server listener socket is opened for the port number to enable of event publishing systems and event subscribing systems to connect to ESPE for publish subscribe services. The host name of ESP device and the port number to establish pub sub connections to ESPE may be referred to as the host port designation of ESPE executing at ESP device .

Referring to a first ESP system may include ESP device publishing device an event subscribing device A an event subscribing device B and an event subscribing device C . Input event streams are output to ESP device by publishing device . In alternative embodiments the input event streams may be created by a plurality of publishing devices of event publishing systems . The plurality of publishing devices of event publishing systems further may publish event streams to another ESP device . The one or more continuous queries instantiated by ESPE analyze and process the input event streams to form output event streams output to event subscribing device A event subscribing device B and event subscribing device C . First ESP system may include a greater or a fewer number of event subscribing devices of event subscribing systems .

Publish subscribe is a message oriented interaction paradigm based on indirect addressing. Processed data recipients specify their interest in receiving information from ESPE by subscribing to specific classes of events while information sources publish events to ESPE without directly addressing the receiving parties. ESPE coordinates the interactions and processes the data. In some cases the data source receives confirmation that the published information has been received by a data recipient.

A publish subscribe API may be described as a library that enables an event publisher such as publishing device to publish event streams into ESPE or an event subscriber such as event subscribing device A event subscribing device B and event subscribing device C to subscribe to event streams from ESPE . For illustration one or more publish subscribe APIs may be defined. As an example a version of the SAS ESP Engine offered by SAS Institute Inc. can provide a C publish subscribe API and a Java publish subscribe API. Using the publish subscribe API event publishing application may publish event streams into a running event stream processor project source window of ESPE and event subscription application may subscribe to an event stream processor project source window of ESPE .

The publish subscribe API provides cross platform connectivity and endianness compatibility between ESP application and other networked applications such as event publishing application instantiated at publishing device and event subscription application instantiated at one or more of event subscribing device A event subscribing device B and event subscribing device C

Referring to operation initializes the publish subscribe capability of ESPE . In an operation the one or more projects are started. The one or more started projects may run in the background on ESP device .

In an operation an event block object is received from one or more computing device of the event publishing systems for example from publishing device . For illustration referring to an ESP subsystem is shown interfacing between publishing device and event subscribing device A event subscribing device B and event subscribing device C in accordance with an illustrative embodiment. ESP subsystem may or may not be persistent. In the illustrative embodiment ESP subsystem includes a publishing client ESPE a subscribing client A a subscribing client B and a subscribing client C . Publishing client is started by event publishing application executing at publishing device using the publish subscribe API. Subscribing client A is started by an event subscription application A executing at event subscribing device A using the publish subscribe API. Subscribing client B is started by an event subscription application B executing at event subscribing device B using the publish subscribe API. Subscribing client C is started by an event subscription application C executing at event subscribing device C using the publish subscribe API.

An event block object containing one or more event objects is injected into a source window of the one or more source windows from an instance of event publishing application . The event block object is generated for example by event publishing application and is received by publishing client . A unique ID is maintained as the event block object is passed between the one or more source windows and or the one or more derived windows of ESPE and to subscribing client A subscribing client B and subscribing client C and to event subscription application A event subscription application B and event subscription application C . Publishing client may further generate and include a unique embedded transaction ID in the event block object as the event block object is processed by a continuous query as well as the unique ID that publishing device assigned to the event block object.

In an operation the event block object is processed through the one or more continuous queries . In an operation the processed event block object is output to one or more computing devices of the event subscribing systems . For example subscribing client A subscribing client B and subscribing client C send the received event block object to event subscription application A event subscription application B and event subscription application C respectively.

ESPE maintains the event block containership aspect of the received event blocks from when the event block is published into a source window and works its way through the directed graph defined by the one or more continuous queries with the various event translations before being output to subscribers. Subscribers can correlate a group of subscribed events back to a group of published events by comparing the unique ID of the event block object that a publisher such as publishing device attached to the event block object with the event block ID received by the subscriber.

In an operation a determination is made concerning whether or not processing is stopped. If processing is not stopped processing continues in operation to continue receiving the one or more event streams containing event block objects from the one or more computing devices of the event publishing systems . If processing is stopped processing continues in an operation . In operation the started projects are stopped. In operation ESPE is shutdown.

Referring to example operations associated with event publishing application are described. Additional fewer or different operations may be performed depending on the embodiment. The order of presentation of the operations of is not intended to be limiting.

In an operation ESPE is queried for example to discover projects continuous queries windows window schema and window edges currently running in ESPE . The engine name and host port to ESPE may be provided as an input to the query and a list of strings may be returned with the names to the projects to the continuous queries to the windows to the window schema and or to the window edges of currently running projects on ESPE . The host is associated with a host name or Internet Protocol IP address of ESP device . The port is the port number provided when the pub sub capability is initialized by ESPE . The engine name is the name of ESPE . The engine name of ESPE and host port to ESP device may be read from a storage location on computer readable medium may be provided on a command line or otherwise input to or defined by event publishing application as understood by a person of skill in the art.

In an operation publishing services are initialized. In an operation the initialized publishing services are started which may create a publishing client such as publishing client for the instantiated event publishing application . The publishing client such as publishing client performs the various pub sub activities for the instantiated event publishing application . For example a string representation of a URL to ESPE is passed to a Start function. For example the URL may include the host port designation of ESPE executing at ESP device a project of the projects a continuous query of the continuous queries and a window of the source windows . The Start function may validate and retain the connection parameters for a specific publishing client connection and return a pointer to the publishing client. For illustration the URL may be formatted as dfESP . If event publishing application is publishing to more than one source window of ESPE the initialized publishing services may be started to each source window using the associated names project name continuous query name window name .

In an operation a connection is made between event publishing application and ESPE for each source window to which data is published. To make the connection the pointer to the created publishing client may be passed to a Connect function and a mostly non busy wait loop created to wait for receipt of event block objects from event publishing application . If event publishing application is publishing to more than one source window of ESPE a connection may be made to each started window using the pointer returned for the respective Start function call.

In an operation an event block object is created by event publishing application . In an operation the created event block is published to ESPE using the pointer returned for the respective Start function call to the appropriate source window. Event publishing application passes the created event block to publishing client where the unique ID field in the event block object has been set by event publishing application possibly after being requested from publishing client . In an illustrative embodiment event publishing application may wait to begin publishing until a Ready callback has been received from publishing client . The event block object is injected into the source window continuous query and project associated with the started publishing client.

In an operation a determination is made concerning whether or not processing is stopped. If processing is not stopped processing continues in operation to continue creating and publishing event block objects. If processing is stopped processing continues in an operation . In operation the connection made between event publishing application and ESPE through the publishing client is disconnected and each started publishing client is stopped.

Referring to example operations associated with event subscription application are described. Additional fewer or different operations may be performed depending on the embodiment. The order of presentation of the operations of is not intended to be limiting.

Similar to operation in an operation ESPE is queried for example to discover names of projects of continuous queries of windows of window schema and of window edges currently running in ESPE . The host name of ESP device the engine name of ESPE and the port number opened by ESPE are provided as an input to the query and a list of strings may be returned with the names to the projects continuous queries windows window schema and or window edges.

In an operation subscription services are initialized. In an operation the initialized subscription services are started which may create a subscribing client such as subscribing client A on behalf of event subscription application at subscribing device . The subscribing client such as subscribing client A performs the various pub sub activities for event subscription application . For example a URL to ESPE may be passed to a Start function. The Start function may validate and retain the connection parameters for a specific subscribing client connection and return a pointer to the subscribing client. For illustration the URL may be formatted as dfESP .

In an operation a connection is made between event subscription application and ESPE through the created subscribing client. To make the connection the pointer to the created subscribing client may be passed to a Connect function and a mostly non busy wait loop created to wait for receipt of event block objects.

In an operation a determination is made concerning whether or not processing is stopped. If processing is not stopped processing continues in operation to continue receiving event block objects. If processing is stopped processing continues in an operation . In operation the connection made between event subscription application and ESPE through the subscribing client is disconnected and the subscribing client is stopped.

Referring to a second ESP system is shown in accordance with an illustrative embodiment. Second ESP system may include ESP device event publishing systems event subscribing systems an in messaging network device and an out messaging network device . For illustration event publishing systems may include a publishing device A a publishing device B . . . and a publishing device N . Event publishing systems publish data to ESP device through in messaging network device . In messaging network device receives events published by event publishing systems and injects the received events into the appropriate source window of ESPE .

For illustration event subscribing systems may include event subscribing device A event subscribing device B . . . and an event subscribing device N . The event subscribing systems subscribe to and receive the published data through out messaging network device after processing by ESPE . Out messaging network device receives events from ESPE and publishes the events to event subscribing systems . In messaging network device and out messaging network device may be implemented in the same or different devices as understood by a person of skill in the art. Though not shown network may be used to support communication between one or more components of second ESP system .

In messaging network device and out messaging network device provide a message network. For example the message network may be implemented as a data fabric configured to support a large volume of possibly time sensitive and dynamic message flows. Example products and vendors of in messaging network device and out messaging network device may include the Tervela Message Switch TMX the Tervela Provisioning and Management TPM system and the Tervela Persistence Engine TPE offered by Tervela Inc. of New York N.Y. USA Solace Message Routers offered by Solace Systems of Ottawa Ontario Calif. and RabbitMQ offered by Pivotal Software Inc. of London UK.

In messaging network device routes messages from event publishing application executing at event publishing systems to ESPE executing at ESP device . Out messaging network device routes messages from ESPE executing at ESP device to event subscription application executing at event subscribing systems . In messaging network device and out messaging network device further may store information and message traffic within the respective message network.

Referring to ESP device further may include an in messaging network connector and an out messaging network connector in accordance with an illustrative embodiment. In messaging network connector performs operations associated with connecting to in messaging network device receiving an event block object from in messaging network device and publishing the received event block object to a source window of the source windows of ESPE . The operations may be implemented using hardware firmware software or any combination of these methods. Referring to the example embodiment of in messaging network connector is implemented in software involving computer readable and or computer executable instructions stored in third computer readable medium and accessible by third processor for execution of the instructions that embody the operations of in messaging network connector .

ESP application and in messaging network connector may be integrated in various manners as understood by a person of skill in the art. In messaging network connector may be written using one or more programming languages assembly languages scripting languages etc. For illustration in messaging network connector may be implemented as a plug in that is an in process class of ESP application .

Out messaging network connector performs operations associated with connecting to out messaging network device receiving an event block object from ESPE after processing by ESPE and publishing the received event block object to out messaging network device . The operations may be implemented using hardware firmware software or any combination of these methods. Referring to the example embodiment of out messaging network connector is implemented in software involving computer readable and or computer executable instructions stored in third computer readable medium and accessible by third processor for execution of the instructions that embody the operations of out messaging network connector .

ESP application and out messaging network connector may be integrated in various manners as understood by a person of skill in the art. Out messaging network connector may be written using one or more programming languages assembly languages scripting languages etc. For illustration out messaging network connector may be implemented as a plug in that is an in process class of ESP application .

ESP application may be modified to execute as part of second ESP system . Referring to further example operations associated with ESP application are described. Additional fewer or different operations may be performed depending on the embodiment. The order of presentation of the operations of is not intended to be limiting.

Similar to operation in an operation ESP application defines and starts ESPE at ESP device . Similar to operation in an operation the engine container is created. Similar to operation in an operation the one or more continuous queries are instantiated by ESPE as a model.

In an operation in messaging network connector is started at ESP device . In an illustrative embodiment in messaging network connector may be started as part of operation . If connector orchestration is configured in messaging network connector may not start until another connector has started or finished. A different in messaging network connector may be started for each source window of the source windows to handle publications to each source window from in messaging network device . In an illustrative embodiment in messaging network device may base it s publish subscribe capability on topics. To support topics a topic name may be mapped to a source window of the source windows of ESPE by in messaging network connector . To isolate publish flows from subscribe flows to the same source window and ensure that the event block objects flow in one direction the topic name may be appended with an in designator such as I in etc.

Each started in messaging network connector may operate as a client of in messaging network device . Connection information for connecting to in messaging network device may be input to in messaging network connector by ESP application as part of the start of in messaging network connector may be stored in database and accessed by in messaging network connector or may otherwise be input to or defined by in messaging network device as understood by a person of skill in the art. Additional information input to in messaging network connector may include the engine name of ESPE the host name of ESP device and the port number opened by ESPE .

For illustration when in messaging network device includes the message network offered by Tervela Inc. the connection information may include an appliance name a client user name a client password and a host name or IP address of in messaging network device . The appliance name may define a client name associated with a Tervela guaranteed delivery context and may be unique among the started in messaging network connectors . The client user name may define a user name defined in the Tervela TPM. The client password may define a password associated with the client user name. The host name or IP address may define the host name or IP address of a primary Tervela TMX. The host name or IP address of in messaging network device the client user name and the client password may be used to connect each started in messaging network connector to in messaging network device .

Each started in messaging network connector may connect to the message network offered by Tervela Inc. by publishing a message to a topic defined using the appliance name. As an example the topic may be defined as SAS.META.appliance name . The message may include the engine name of ESPE the host port designation of ESPE executing at ESP device a project name of the projects a continuous query name of the continuous queries a source window name of the source windows and a source window schema associated with in messaging network connector . The host port field may be substituted by the engine name in topic strings used on the message network. For illustration the topic name may be formatted as SAS.ENGINES.engine name.project name.continuous query name.window name.IN using the message network offered by Tervela Inc where engine name is the engine name of ESPE .

For further illustration when in messaging network device includes the message network offered by Solace Systems the host port of in messaging network device a client user name a client password and a virtual private network VPN name may be included in the connection information. The topic name may be formatted as host port project name continuous query name window name I where host port is the host port designation of ESPE executing at ESP device . The host port of in messaging network device the client user name and the client password may be used to connect each started in messaging network connector to in messaging network device .

Each started in messaging network connector connects to in messaging network device with the topic name associated with the respective source window of the source windows . Event publishing application executing at event publishing systems may continue to use the ESP URL format that includes the host port information as discussed with reference to . No publish subscribe server may exist so host port may not be interpreted literally. Instead it may be overloaded to identify ESPE executing at ESP device . The engine name of ESPE may be mapped to the host port designation of ESPE executing at ESP device in a message sent by in messaging network connector . The topic name used in communications with in messaging network device may be based on the string representation of the URL to ESPE . A event publishing systems and event subscribing systems know the host port information from the URL and substitute host port information with the engine name in the topic name used in communications with in messaging network device .

Messaging performed by the message network offered by Tervela Inc. may use the Tervela guaranteed delivery mode. Messages may be persisted to a Tervela TPE appliance. When each started in messaging network connector connects to in messaging network device the connector may receive messages already published to the associated topic name over a predefined time period to enable the started in messaging network connector to catch up with messages sent during the predefined time period. In messaging network connector may define the time period. An example time period may be 8 hours though any time period may be defined.

For further illustration when in messaging network device includes the message network offered by Solace Systems each started in messaging network connector may subscribe to the topic host port M where host port is the host port designation of ESPE executing at ESP device which enables the started in messaging network connector to receive query requests to ESPE associated with that host port combination.

Run time libraries associated with in messaging network device may be installed on ESP device to support connectivity between in messaging network connector and in messaging network device .

Similar to operation in an operation out messaging network connector is started at ESP device . In an illustrative embodiment out messaging network connector may be started as part of operation . If connector orchestration is configured out messaging network connector may not start until another connector has started or finished. A different out messaging network connector may be started for each source window of the source windows to handle subscription to each source window by out messaging network device . Similar to in messaging network device in an illustrative embodiment out messaging network device may base it s publish subscribe capability on topics. To support topics a topic name may be mapped to a source window of the source windows of ESPE by out messaging network connector . To isolate publish flows from subscribe flows to the same source window and ensure that the event block objects flow in one direction the topic name may be appended with an out designator such as O out etc.

Each started out messaging network connector may operate as a client of out messaging network device . Connection information for connecting to out messaging network device may be input to out messaging network connector by ESP application as part of the start of out messaging network connector may be stored in database and accessed by out messaging network connector or may be otherwise input to or defined by out messaging network device as understood by a person of skill in the art. Additional information input to out messaging network connector may include the engine name of ESPE the host name of ESP device and the port number opened by ESPE .

For illustration when out messaging network device includes the message network offered by Tervela Inc. the connection information may include an appliance name a client user name a client password and a host name or IP address of out messaging network device . The appliance name may define a client name associated with a Tervela guaranteed delivery context and may be unique among the started out messaging appliance connectors . The client user name may define a user name defined in the Tervela TPM. The client password may define a password associated with the client user name. The host name or IP address may define the host name or IP address of a primary Tervela TMX. The host name or IP address of out messaging network device the client user name and the client password may be used to connect each started out messaging network connector to out messaging network device .

Each started out messaging network connector may connect to the message network offered by Tervela Inc. by publishing a message to a topic defined using the appliance name. As an example the topic may be defined as SAS.META.appliancename . The message may include the engine name of ESPE the host port designation of ESPE executing at ESP device a project name of the projects a continuous query name of the continuous queries a source window name of the source windows and a source window schema associated with the connector. The host port field may be substituted by the engine name in topic strings used on the message network. For illustration the topic name may be formatted as SAS.ENGINES.engine name.project name.continuous query name.window name.OUT using the message network offered by Tervela Inc.

For further illustration when out messaging network device includes the message network offered by Solace Systems the host port of out messaging network device a client user name a client password and a virtual private network VPN name may be included in the connection information. The topic name may be formatted as host port project name continuous query name window name O where host port is the host port designation of ESPE executing at ESP device . The host port of out messaging network device is used to connect each started out messaging network connector to out messaging network device .

Each started out messaging network connector connects to out messaging network device with the topic name associated with the source window of the source windows . Event subscription application executing at event subscribing systems may continue to use the ESP URL format that includes the host port information as discussed with reference to . No publish subscribe server may exist so host port may not be interpreted literally. Instead it may be overloaded to identify ESPE . The engine name of ESPE may be mapped to the host port designation of ESPE executing at ESP device by out messaging network connector . The topic name used in communications with out messaging network device may be based on the string representation of the URL to ESPE .

For further illustration when out messaging network device includes the message network offered by Solace Systems each started out messaging network connector may subscribe to the topic host port M where host port is the host port designation of ESPE executing at ESP device which enables the started out messaging network connector to receive query requests to ESPE associated with that host port combination.

Run time libraries associated with out messaging network device may be installed on ESP device to support connectivity between out messaging network connector and out messaging network device .

An event block object containing one or more event objects is injected into a source window of the one or more source windows by an instance of event publishing application . The injected event block object is received by in messaging network device . In messaging network device encapsulates the received event block object in a wrapper for transmission through in messaging network device to the started in messaging network connector without modification.

Similar to operation in an operation the event block object received by the started in messaging network connector is received by ESPE . The transmission of the event block object is coordinated using the topic name created based on the host port project name continuous query name window name.

Similar to operation in an operation the event block object is processed through the one or more continuous queries . Similar to operation in an operation the event block object is output to the started out messaging network connector . Out messaging network connector sends the event block object to out messaging network device that receives the event block object and wraps the received event block object for transmission through out messaging network device to the one or more computing devices of the event subscribing systems .

Again ESPE maintains the event block containership aspect of the received event blocks from when the event block is published into a source window and works its way through the directed graph with the various event translations before being output to subscribers. Subscribers can correlate a group of subscribed events back to a group of published events by comparing the unique ID of the event block object that a publisher such as publishing device attached to the event block object with the event block ID received by the subscriber.

Similar to operation in an operation a determination is made concerning whether or not processing is stopped. If processing is not stopped processing continues in operation to continue receiving event block objects from the one or more computing devices of the event publishing systems through in messaging network device to the associated source window of source windows . If processing is stopped processing continues in an operation . In operation the started projects in messaging network connector and out messaging network connector are stopped. Similar to operation in an operation ESPE is shutdown.

Referring to example operations associated with event publishing application are described. Event publishing application may be defined to execute in second ESP system . Additional fewer or different operations may be performed depending on the embodiment. The order of presentation of the operations of is not intended to be limiting.

In an operation a connection is made to in messaging network device with predefined connection information. The predefined connection information may be consistent with that used by in messaging network connector . For illustration the predefined connection information may be stored in computer readable medium . As an example a function call may indicate a type of message network of in messaging network device and a configuration file may be stored in computer readable medium that includes the predefined connection information.

For illustration when in messaging network device includes the message network offered by Tervela Inc. the connection information may include the appliance name the client user name the client password and the host name or IP address of in messaging network device . The host name or IP address of in messaging network device the client user name and the client password may be used to connect to in messaging network device . For further illustration when in messaging network device includes the message network offered by Solace Systems the host port of in messaging network device the client user name the client password and the VPN name may be included in the connection information. The host port of in messaging network device is used to connect to in messaging network device .

Similar to operation in an operation ESPE is queried for example to discover projects continuous queries windows window schema and window edges currently running in ESPE . The engine name of ESPE and the host port designation for ESPE executing at ESP device are provided as an input to the query and a list of strings may be returned with the names to the projects continuous queries windows window schema and window edges.

In an operation publishing services are initialized as needed. For example publishing services may not be used by in messaging network device .

In an operation the initialized publishing services are started. The publishing client such as publishing client performs the various pub sub activities for the instantiated event publishing application . For example a string representation of the URL to ESPE is passed to a Start function. For example the URL may include the host port designation for ESPE executing at ESP device a project of the projects a continuous query of the continuous queries and a window of the source windows . The Start function may validate and retain the connection parameters for a specific publishing client connection and return a dedicated socket connection to the publishing client. For illustration the URL may be formatted as dfESP . If event publishing application is publishing to more than one source window of ESPE the initialized publishing services may be started to each source window using the associated names project name continuous query name window name .

Similar to operation in an operation an event block object is created by event publishing application . Similar to operation in an operation the created event block is published to ESPE through in messaging network device using the pointer returned for the respective Start function call to the appropriate source window.

Similar to operation in an operation a determination is made concerning whether or not processing is stopped. If processing is not stopped processing continues in operation to continue creating and publishing event block objects. If processing is stopped processing continues in an operation . Similar to operation in operation the connection made between event publishing application and in messaging network device is disconnected and each started publishing client is stopped.

Referring to example operations associated with event subscription application are described. Event subscription application may be defined to execute in second ESP system . Additional fewer or different operations may be performed depending on the embodiment. The order of presentation of the operations of is not intended to be limiting.

In an operation a connection is made to out messaging network device with predefined connection information. The predefined connection information may be consistent with that used by out messaging network connector . For illustration the predefined connection information may be stored in second computer readable medium . As an example a function call may indicate a type of message network of out messaging network device and a configuration file may be stored in second computer readable medium that includes the predefined connection information.

For illustration when out messaging network device includes the message network offered by Tervela Inc. the connection information may include the appliance name the client user name the client password and the host name or IP address of out messaging network device . The host name or IP address of out messaging network device the client user name and the client password may be used to connect to out messaging network device . For further illustration when out messaging network device includes the message network offered by Solace Systems the host port of out messaging network device the client user name the client password and the VPN name may be included in the connection information. The host port of out messaging network device is used to connect to out messaging network device .

Similar to operation in an operation ESPE is queried for example to discover projects continuous queries windows window schema and window edges currently running in ESPE . The engine name of ESPE and the host port designation for ESPE executing at ESP device are provided as an input to the query and a list of strings may be returned with the names to the projects continuous queries windows window schema and window edges.

In an operation subscription services are initialized as needed. For example subscription services may not be used by out messaging network device .

In an operation the initialized subscription services are started which creates a subscribing client such as subscribing client A on behalf of event subscription application at subscribing device . The subscribing client such as subscribing client A performs the various pub sub activities for event subscription application . For example a URL to ESPE may be passed to a Start function. The Start function may validate and retain the connection parameters for a specific subscribing client connection and return a pointer to the subscribing client. For illustration the URL may be formatted as dfESP .

Similar to operation in an operation an event block object is received by event subscription application .

Similar to operation in an operation a determination is made concerning whether or not processing is stopped. If processing is not stopped processing continues in operation to continue receiving event block objects. If processing is stopped processing continues in an operation . In operation the connection made between event subscription application and out messaging network device is disconnected and the subscribing client is stopped.

Referring to a third ESP system is shown in accordance with an illustrative embodiment. Third ESP system may include a plurality of ESP devices event publishing systems event subscribing systems in messaging network device and out messaging network device . The plurality of ESP devices create a failover ESP system by providing at least one additional ESP device as a backup if a currently active ESP fails as described further below. Having a backup insures that third ESP system continues to operate even when the currently active ESP fails. For illustration the plurality of ESP devices may include an ESP A an ESP B ESP C . . . and an ESP N

Though not shown network may be used to support communication between one or more components of third ESP system . For example the plurality of ESP devices may be located in a single room or adjacent rooms in a single facility and or may be distributed geographically from one another. ESP device is an example device of the plurality of ESP devices .

Each of the plurality of ESP devices may perform the operations described with reference to except that only one of the plurality of ESP devices is an active ESP device that is publishing received event block objects to out messaging network device . Each of the plurality of ESP devices may receive published event block objects from in messaging network device .

In the illustrative embodiment of ESP device B is indicated using a solid line as the active ESP device that is publishing to out messaging network device . Though the remaining ESP devices of the plurality of ESP devices are connected to out messaging network device using their own out messaging network connector they are not publishing to out messaging network device . The remaining ESP devices of the plurality of ESP devices may be called a failover group. The determination of which of the plurality of ESP devices is the active ESP device is determined upon initial connection by the associated out messaging network connector to out messaging network device and is maintained until the active ESP device fails. Out messaging network connector running at each ESP device of the plurality of ESP devices coordinates with out messaging network device to determine the active ESP device.

Referring to example operations associated with in messaging network connector are described. In messaging network connectors may be defined to execute in third ESP system for each source window of ESPE and for each ESP device of the plurality of ESP devices that is executing ESPE . Additional fewer or different operations may be performed depending on the embodiment. The order of presentation of the operations of is not intended to be limiting.

In an operation a connection is made to in messaging network device by each in messaging network connector of each of the plurality of ESP devices with the predefined connection information as described with reference to operation of . For example the predefined connection information may be stored in third computer readable medium or passed to in messaging network connector when in messaging network connector is started by ESPE . The engine name of ESPE running at each of the plurality of ESP devices may be identical. Each in messaging network connector of each of the plurality of ESP devices may be active based on the same set of topics and may be configured with the same in messaging network device connection information. To synchronize each in messaging network connector of each of the plurality of ESP devices may initiate message flow at the same time with in messaging network device purged of messages on related topics and with the same initial event block object ID.

In an operation a query is received from in messaging network device . In an operation a response to the query is sent to in messaging network device . For illustration when out messaging network device includes the message network offered by Solace Systems each in messaging network connector listens for metadata requests on the topic named host port M where host port is the host port designation of ESPE executing at ESP device . In messaging network device may send formatted messages on this topic in request reply fashion. The request messages may be sent using deliver to one to ensure that only one of the plurality of ESP devices responds to the message.

For further illustration when in messaging network device includes the message network offered by Tervela Inc. each in messaging network connector may create a single cluster wide inbox named engine name meta which includes the engine name of ESPE and may publish metadata information about special topic SAS.META.host port which includes the host port designation of ESPE executing at ESP device . In messaging network device may subscribe to this topic and save the received metadata and engine mapping information. To process a subsequent query from publishing device in messaging network device responds to the query with the requested information from the saved metadata. In messaging network device may derive the inbox name using the received host port designation of ESPE executing at ESP device mapped to the engine name of ESPE and send formatted messages to the inbox in request reply fashion.

In an operation the event block object is received by the started in messaging network connector from in messaging network device . In an operation the received event block object is published to ESPE based on the topic name that corresponds to a source window name of ESPE . In an operation a determination is made concerning whether or not processing is stopped. If processing is not stopped processing continues in operation to continue receiving the event block objects from in messaging network device . If processing is stopped processing continues in an operation . In operation the connection to in messaging network device is disconnected and in messaging network connector is stopped.

Referring to example operations associated with out messaging network connector are described. Out messaging network connectors may be defined to execute in third ESP system for each source window and for each ESP device of the plurality of ESP devices . Additional fewer or different operations may be performed depending on the embodiment. The order of presentation of the operations of is not intended to be limiting. Out messaging network connectors executing at each ESP device of the plurality of ESP devices in third ESP system achieve a rapid and seamless failover of any ESPE running at the plurality of ESP devices without service interruption or data loss.

In an operation a connection is made to out messaging network device by each out messaging network connector of each of the plurality of ESP devices with the predefined connection information described with reference to operation . For example the predefined connection information may be stored in third computer readable medium or passed to out messaging network connector when out messaging network connector is started by ESPE .

Similar to operations and in an operation a query is received from out messaging network device and a response to the query is sent to out messaging network device .

In an operation the event block object is received by the started out messaging network connector from ESPE . In an operation a determination is made concerning whether or not the out messaging network connector received a notification indicating that the out messaging network connector is associated with the active ESP device. For example whether out messaging network connector is associated with the active ESP device or a standby ESP device is communicated to out messaging network connector . The notification may be determined initially when each out messaging network connector of the plurality of ESP devices connect to out messaging network device and when a status of one or more of the out messaging network connectors changes due to a failed ESP device or a new ESP device joining the plurality of ESP devices . When out messaging network connector is associated with a standby ESP device the notification may indicate that out messaging network connector is a standby or inactive connector.

For illustration when out messaging network device includes the message network offered by Solace Systems an exclusive messaging queue may be shared among each out messaging network connector of each of the plurality of ESP devices . The exclusive messaging queue is used to signal whether or not the ESP device of the plurality of ESP devices is the active ESP device. No data may be published to the exclusive messaging queue.

When out messaging network device includes the message network offered by Solace Systems ESP device active standby status is coordinated among the plurality of ESP devices using the following mechanism. When each out messaging network connector starts the out messaging network connector tries as a consumer of the exclusive messaging queue to bind to the exclusive messaging queue created for the plurality of ESP devices . When out messaging network connector is the first to bind to the exclusive messaging queue it receives an active indicator from out messaging network device indicating that it is associated with the active ESP device. As other out messaging network connectors bind to the exclusive messaging queue they receive an inactive indicator from out messaging network device indicating that they are associated with an inactive ESP device of the plurality of ESP devices . If the active ESP device fails or disconnects from out messaging network device a next out messaging network connector receives the active indicator from out messaging network device indicating that it is now associated with the active ESP device. For example the second out messaging network connector to connect to out messaging network device may be selected to receive the active indicator when the active ESP device fails.

For further illustration when out messaging network device includes the message network offered by Tervela Inc. ESP device active standby status may be coordinated among the plurality of ESP devices using the following mechanism. When each out messaging network connector starts each out messaging network connector attempts to create an inbox using the engine name of ESPE for the inbox name making the inbox specific to the plurality of ESP devices . If successful out messaging network connector receives an active indicator from out messaging network device indicating that it is associated with the active ESP device and the out messaging network connector takes ownership of a system wide guaranteed delivery context. If the inbox already exists the active ESP device has already been selected and the remaining out messaging appliance connectors receive an inactive indicator from out messaging network device indicating that they are associated with an inactive ESP device of the plurality of ESP devices . The remaining out messaging appliance connectors connect to the inbox and send an empty message to the inbox. The active out messaging network connector receives the empty messages from the standby out messaging appliance connectors . A first responder of the remaining out messaging appliance connectors may be selected by the active out messaging network connector as an active standby connector by responding to the empty message of that out messaging network connector . The active out messaging network connector may maintain a map of the other out messaging appliance connectors and their status. If the active out messaging network connector receives notification of an inbox disconnect by the active standby connector the active out messaging network connector notifies another standby connector to become the active standby connector by responding to the empty message received from that out messaging network connector . When the active ESP device fails the inbox also fails and out messaging network device sends a message to the inactive out messaging appliance connectors . When the active standby connector receives the message the active standby connector becomes the active out messaging network connector associated with the active ESP device and creates a new inbox as described above to which the remaining inactive out messaging appliance connectors connect. When the remaining standby connectors receive the message they retain their standby status and send an empty message to the created new inbox.

If the notification is active in operation processing continues in an operation . If the notification is not received in operation processing continues in an operation .

In operation the received event block object is stored to third computer readable medium and processing continue in an operation . For example the received event block object may be stored in a buffer that holds a predefined number of received event block objects as understood by a person of skill in the art. When the buffer contains the predefined number of received event block objects the oldest event block object in the buffer is removed from the buffer before storing the received event block object.

In an operation a determination is made concerning whether or not the active out messaging network connector is associated with a newly active ESP device. A newly active ESP device is determined when the ESP device is switched from a standby status to the active status. On a subsequent iteration of operation the ESP device is not newly active because that status continues to be the active status. If the active out messaging network connector is associated with a newly active ESP device processing continues in an operation . If the active out messaging network connector is not associated with a newly active ESP device processing continues in an operation .

In operation an identifier of a last published event block object is determined. For illustration when out messaging network device includes the message network offered by Solace Systems the active out messaging network connector determines the last published event block object from a last value queue maintained by out messaging network device . The last value queue may have a depth of one message and contain the last message published by the previously active ESP device on the topic to which the last value queue subscribed. The out messaging network connector associated with the newly active ESP device binds to the last value queue as a browser retrieves the last successfully published event block object published from the last value queue saves its event block object ID and disconnects from the last value queue.

For further illustration when in messaging network device includes the message network offered by Tervela Inc. the active connector queries the system wide guaranteed delivery context that it owns for the event block object ID of the last successfully published event block object.

In an operation one or more event block objects received after the last published event block object are selected from the buffer by identifying any event block objects with an associated event block object ID that is greater than the event block object ID of the last successfully published event block object. In an operation the selected one or more event block objects and the event block object received in operation are published to out messaging network device and processing continues in operation .

In operation the received event block object is published to out messaging network device . In operation a determination is made concerning whether or not processing is stopped. If processing is not stopped processing continues in operation to continue receiving the event block objects from ESPE . If processing is stopped processing continues in an operation . In operation the connection to out messaging network device is disconnected and out messaging network connector is stopped.

To guarantee that ESPE executing on a rebooted ESP device can be fully synchronized with the remaining plurality of ESP devices a persist restore feature in guaranteed mode can be used. For example a state of ESPE may be periodically persisted by ESPE of the plurality of ESP devices . The persist of the state of ESPE can be triggered by ESPE though this may generate redundant persist data. As another example the active out messaging network connector can trigger a persist by ESPE executing at the active ESP device.

A location of the persist data may be the same for each ESPE executing at the plurality of ESP devices so that when a failed ESP device is rebooted and reconnected the persist data can be used to get ESPE executing at the failed ESP device back to a state close to a current state of ESPE executing at the remaining plurality of ESP devices . ESPE executing at the failed ESP device can work with out messaging network device to receive event block objects after the persist data to fully catch up to the current state. Once caught up ESPE executing at the failed ESP device can register with out messaging network device as a standby dependent on the type of out messaging network device as discussed above.

Aspects of the current disclosure provide technical solutions to technical problems such as computing problems that arise when an ESP device fails which results in a complete service interruption and potentially significant data loss. The data loss can be catastrophic when the streamed data is supporting mission critical operations such as those in support of an ongoing manufacturing or drilling operation. Third ESP system achieves a rapid and seamless failover of ESPE running at the plurality of ESP devices without service interruption or data loss thus significantly improving the reliability of an operational system that relies on the live or real time processing of the data streams. The event publishing systems the event subscribing systems and each ESPE not executing at a failed ESP device is not aware of or effected by the failed ESP device. Third ESP system may include thousands of event publishing systems and event subscribing systems . Some previous failover systems required the event publishing systems and the event subscribing systems to reattach to a new ESP resulting in system downtime and a loss of data. Third ESP system keeps the failover logic and awareness within the boundaries of out messaging network connector and out messaging network device .

In an illustrative embodiment third ESP system may be configured to operate with RabbitMQ provided by Pivotal Software Inc. of London United Kingdom. RabbitMQ is open source message broker software that implements the advanced message queuing protocol. For example in messaging network device and or out messaging network device may be implemented using RabbitMQ .

The word illustrative is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as illustrative is not necessarily to be construed as preferred or advantageous over other aspects or designs. Further for the purposes of this disclosure and unless otherwise specified a or an means one or more . Still further using and or or in the detailed description is intended to include and or unless specifically indicated otherwise. The illustrative embodiments may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed embodiments.

The foregoing description of illustrative embodiments of the disclosed subject matter has been presented for purposes of illustration and of description. It is not intended to be exhaustive or to limit the disclosed subject matter to the precise form disclosed and modifications and variations are possible in light of the above teachings or may be acquired from practice of the disclosed subject matter. The embodiments were chosen and described in order to explain the principles of the disclosed subject matter and as practical applications of the disclosed subject matter to enable one skilled in the art to utilize the disclosed subject matter in various embodiments and with various modifications as suited to the particular use contemplated.

