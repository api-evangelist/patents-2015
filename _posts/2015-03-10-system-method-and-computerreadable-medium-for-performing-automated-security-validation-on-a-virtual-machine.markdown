---

title: System, method, and computer-readable medium for performing automated security validation on a virtual machine
abstract: An automated build server communicates with an automated build client to build virtual clients hosted by a virtual server. The automated build client communicates with the automated build server to obtain a configuration of the virtual client. The configuration specifies a previously approved security baseline for configuring the resources of the virtual client. The virtual client then obtains a security validation tool that audits the security baseline of the newly built virtual client. Based on the results of the security audit, the virtual client is placed in an operational mode or in a restricted operating mode. The restricted operating has limitations on resources when compared with the operational mode. An administrator is then notified of the security audit failure, who can then update the configuration stored by the automated build server to conform it with the security baseline used by the security validation tool in its security audit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09516063&OS=09516063&RS=09516063
owner: Raytheon Company
number: 09516063
owner_city: Waltham
owner_country: US
publication_date: 20150310
---
This invention was made with government support under Contract No. 08 C 3104. The government has certain rights in the invention.

Embodiments of the present disclosure relate generally to security validation and more particularly but not by way of limitation to automatically deploying one or more virtual clients and conducting an automated security validation on the deployed one or more virtual clients.

A hypervisor is a virtual machine manager that facilitates access to a host machine s hardware among one or more virtual clients e.g. a virtual computer executing a virtual operating system that may be instantiated on the host machine. In a secure environment the virtual client may be configured with a security policy. The security policy may have been approved by a government official or other third party. In some instances the processing for approving the security policy may take a significant amount of time such as weeks or months. Thus when a virtual client is instantiated with the security policy the virtual client must be audited to confirm that the virtual client conforms to the approved security policy. This process can also take an inordinate amount of time which delays the deployment of the virtual client.

Further still if the virtual client is instantiated with an application that has changed since the approval of the security policy there is the potential that the virtual client will fail the audit. In instances where the security audit is performed manually there is a non trivial chance that the auditor will miss the change in the virtual client leading to the operation of a virtual client that does not conform to the previously approved security policy. Security policies may also change which introduces another non trivial possibility that the auditor may approve a virtual client for operation.

The headings provided herein are merely for convenience and do not necessarily affect the scope or meaning of the terms used.

The description that follows includes systems methods techniques instruction sequences and computing machine program products that embody illustrative embodiments of the disclosure. In the following description for the purposes of explanation numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident however to those skilled in the art that embodiments of the inventive subject matter may be practiced without these specific details. In general well known instruction instances protocols structures and techniques are not necessarily shown in detail.

In various example embodiments an automated build client is established on a virtual server configured to host one or more virtual clients. The virtual server is configured to execute a hypervisor for the one or more virtual clients such as KVM which is integrated into the Linux kernel or Xen which is available from Citrix Systems Inc. or Hyper V which is available from Microsoft Corp. The automated build server is in communication with the automated build client and configured to communicate build instructions to the automated build client. One example of an automated building environment which includes an automated build server and an automated build client is Chef which is available from Chef Software Inc. The automated build server further retains e.g. stores resource configurations used by the automated build client in instantiating a virtual client. The automated build server further has access to one or more security policies which are deployed to the virtual client such as at a predetermined point during or after the build phase. The security policies are typically previously approved by an accrediting authority or other third party.

A security validation tool e.g. a Portable Hardening Toolkit PHT is configured to recognize the known security policies. Examples of a Portable Hardening Toolkit include HoneyPoint Wasp available from MicroSolved Inc. Nessus available from Tenable Network Security and GFI LanGuard available from GFI Software. When a virtual client is created by the automated build client the final step of the build process is to audit the security baseline of the newly created virtual client. In one embodiment the auditing is performed by the virtual client obtaining the PHT e.g. from an application server and locally executing the PHT. In other words the virtual client uses the PHT to audit the installed security policy and validate it against the previously approved security policies.

Depending on the result of the auditing the virtual client may or may not go into operation or alternatively be placed in a restricted mode with limited access and use of its resources. For example if the PHT successfully validates the configuration of the virtual client e.g. the resources configured on the virtual client align with the approved security policy obtained by the PHT the PHT sends the build process a successful return code and the virtual client is allowed to go into operations.

However if the PHT determines that the virtual client is not properly configured relative to the security policy loaded into the PHT the PHT sends an unsuccessful return code to the build process. The automated build client then executes an alternate set of build procedures that places the virtual client in a restricted or non operational mode e.g. a second operating mode . In alternative embodiments depending on the audit failure the PHT may return more or different return codes such that corresponding build procedures are executed depending on the returned build code. For example rather than having a binary determination e.g. a pass fail security auditing procedure the PHT may include a conditional determination such that different return codes are returned depending on which conditions are satisfied e.g. a first defined set of improperly configured resources causes the PHT to return a first return code whereas a second defined set of improperly configured resources causes the PHT to return a second return code .

In one embodiment alternate build procedure places the virtual client in a restricted operating mode by restricting at least two resources. First the automated build client configures pluggable authentication method rules to only allow administrative personnel to log into e.g. access the virtual client. Then the automated build client configures a host based packet filter such as IPTables which is available from Netfilter.Org to only allow specific types of network traffic e.g. administrative network traffic to reach the virtual client. These restrictions allow administrators to access into the virtual client and address the issues that caused the build process to fail the security audit while preventing the virtual client from being used in an operational state. The administrators can then go fix the build process and build a new virtual client.

In summary the technical problem addressed by the disclosed systems and methods is increasing the efficiency of resources used in building and auditing a virtual client such that the time to build audit and resolve an audit failure is reduced by several orders of magnitude. Whereas previous build and auditing procedures may have lasted weeks the disclosed systems and methods reduce that time to mere minutes. Thus the disclosed systems and methods markedly increase the efficiency by which the build audit and resolve phases are conducted when a new virtual client is requested having a previously approved security policy.

The client device may comprise but are not limited to a mobile phone desktop computer laptop portable digital assistants PDAs smart phones tablets ultra books netbooks laptops multi processor systems microprocessor based or programmable consumer electronics or any other communication device that a user may utilize to access the automated build environment . In some embodiments the client device may comprise a display module not shown to display information e.g. in the form of user interfaces . In further embodiments the client device may comprise one or more of a touch screens accelerometers gyroscopes cameras microphones global positioning system GPS devices and so forth. The client device may provide instructions or otherwise interact with the automated build server via a network .

The automated build server is configured to interact and communicate with various other devices and or machines in the automated build environment . In one embodiment the automated build server communicates with an application server a virtual server and a datastore of local security policies . As discussed below with reference to the automated build server stores configurations for instantiating a virtual client on the virtual server . A configuration for a particular resource or a group of resources is known as a recipe and a collection of such recipes is known as a cookbook. Thus different configurations of different virtual clients e.g. virtual clients are possible depending on which cookbook is requested by the client device . Further still the automated build server is configured to retrieve one or more of the local security policies from the local security policies datastore . The datastore may include a hierarchical database a relational database one or more flat files or any of the combinations of the foregoing.

The local security policies include one or more security policies that were previously approved by a third party accreditation service such as the Defense Information Systems Agency Field Security Operations DISA FSO . A security policy defines the authorized configuration for a given virtual client such as whether the virtual client has Internet access open and or closed ports e.g. a software construct serving as a communications endpoint in a computer s host operating system and associated with an IP address and a protocol type of the communication the services that are executed by the virtual client which applications are authorized to be run by the virtual client and or any restrictions on such applications the types of users that may access the virtual client and other such policies. As discussed below the automated build client implements the security policy on a given virtual client at a predetermined point in the building of the virtual client such as at a time when a given recipe is implemented or shortly after a cookbook is implemented but before the virtual client has been audited.

The automated build server includes a configuration management module such as Chef to facilitate the building of a virtual client on the virtual server . As discussed below with reference to when the client device access the automated build server the automated build server provides a list of available nodes via the automated build client where a virtual client may be instantiated e.g. the virtual server . As discussed below with reference to the virtual server includes components found in a computing environment e.g. one or more processors memory hardware and software interfaces etc. and includes a hypervisor e.g. a Type and or Type hypervisor for instantiating the virtual clients . A Type hypervisor typically has direct access e.g. native access to the hardware components of the host computing environment and examples of Type hypervisors include KVM Xen or XenServer Hyper V and vSphere available from VMWare Inc. . A Type hypervisor is typically managed by an operating system and access the hardware of the computing environment through an abstraction layer provided by the operating system. Examples of Type hypervisors include VMWare Fusion available from VMWare Inc. VMWare Workstation also available from VMWare Inc. VirtualBox available from Oracle Corp and other such Type hypervisors.

The configuration management module then receives an instruction from the client device to instantiate a new virtual client e.g. virtual client on a selected node via the installed hypervisor. The configuration management module then communicates with the automated build client to build the virtual client on the selected node.

During the building of the virtual client the automated build client accesses the automated build server for instructions e.g. one or more recipes and or one or more cookbooks on how the virtual client should be configured. In one embodiment the automated build server obtains the previously approved security policies via the local security policies datastore and configures the recipes and or cookbooks to provide to the automated build client . In one embodiment the local security policies are written in a computing programming and or scripting language such as Ruby and the recipes stored by the automated build server also written in the computing programming and or scripting language are amended accordingly. For example the automated build server may include a default or generic set of recipes e.g. a generic cookbook and each of the recipes may be amended or modified according to a selected security policy to create a cookbook specific to the selected security policy. In an alternative embodiment the automated build server creates cookbooks at periodic time intervals e.g. monthly weekly etc. or upon request according to the local security policies stored in the local security policy datastore . By pre generating pre configuring the cookbooks available to the automated build client the automated build server reduces the time needed to construct a given virtual client.

During the build phase the automated build client may obtain one or more applications e.g. resources to include in a given virtual client from an application server . In one embodiment the application server is remote to the automated build client and includes one or more applications for instantiating e.g. installing on a given virtual node. The application server executes an operating system such as RedHat Linux Microsoft Windows or other such operating system and provides the applications to the automated build client via a network such as network .

As discussed below in one embodiment the application server further provides the PHT for auditing the security policy instantiated on a given virtual client. One or more remote security policies via a datastore may be accessible to the application server and or PHT . In one embodiment when the PHT audits the security configuration of a given virtual client the PHT leverages one or more of the remote security policies rather than the local security policy used by the automated build server . In this embodiment the remote security policies may be updated and or approved more frequently than the local security policies such that the remote security policies represent the most up to date version of a given security policy. In an alternative embodiment the PHT may leverage a local security policy from the datastore in auditing the security configuration of a given virtual client. Using a selected local security policy is still beneficial because in some instances an application residing on the application server may be updated such that the updates to the application violate the local security policy implemented by the automated build client .

In one embodiment the automated build environment is implemented under a distributed computing model such that the various machines e.g. automated build server virtual server and application server communicate through one or more networks . One or more portions of the networks may be an ad hoc network an intranet an extranet a virtual private network VPN a local area network LAN a wireless LAN WLAN a wide area network WAN a wireless WAN WWAN a metropolitan area network MAN a portion of the Internet a portion of the Public Switched Telephone Network PSTN a cellular telephone network a wireless network a WiFi network a WiMax network another type of network or a combination of two or more such networks.

Further while the automated build environment employs a client server architecture the present inventive subject matter is of course not limited to such an architecture and could equally well find application in a distributed or peer to peer architecture system for example. Further still one or more of the machines may be implemented on the same physical machine with the same physical hardware. Thus the automated build server the application server and the virtual server may share one or more of the same resources e.g. processors volatile and non volatile memory physical user interfaces etc. . The various automated build server application server and virtual server could also be implemented as standalone software programs which do not necessarily have networking capabilities.

The processors may be a special purpose processor such as a Field Programmable Gate Array FPGA or an Application Specific Integrated Circuit ASIC . The processors may also include programmable logic or circuitry that is temporarily configured by software to perform certain operations. For example the processors may be configured by software such that the processors become specific machines or specific components of a machine uniquely tailored to perform the configured functions and are no longer general purpose processors. The processors may also be implemented as hardware modules as that term is used herein.

The network interface includes one or more communication interfaces for sending and or receiving data from one or more of the machines in the automated build environment . The network interface may include wired interfaces e.g. an Ethernet interface a wireless interface e.g. an 802.11 g n interface or Bluetooth interface or any combination of wired and wireless interfaces.

The memory is configured to store modules and data temporarily or permanently and may include but is not be limited to random access memory RAM read only memory ROM buffer memory flash memory optical media magnetic media cache memory other types of storage e.g. Erasable Programmable Read Only Memory EEPROM and or any suitable combination thereof. In one embodiment modules are represented by computer executable instructions that are executable by the processors . The term memory should be taken to include a single machine readable medium or multiple media e.g. a centralized or distributed database or associated caches and servers able to store the instructions. The term machine readable medium shall be taken to include any medium or combination of multiple media that is capable of storing instructions such that when the instructions are by one or more processors the automated build server performs any one or more of the methodologies described herein. Accordingly a machine readable medium refers to a single storage apparatus or device as well as cloud based storage systems or storage networks that include multiple storage apparatus or devices. The term machine readable medium excludes signals per se.

The modules include a user interface module a configuration management module and a validation report analyzer module . The data includes data used by the processors to support the functionalities of the modules and includes such data as one or more cookbooks one or more security policies and a validation report received from the PHT .

The user interface module is configured to receive instructions from and display results to the client device . As discussed previously the automated build server is configured to receive a build instruction from the client device to build a virtual client on a selected node e.g. virtual server in communication with the automated build server . Further still the automated build server may provide a selection of configurations e.g. cookbooks and or security policies for a user of the client device to select in building the virtual client. In one embodiment the configuration management module communicates the available nodes on which to build the virtual client and the configuration to use in building the virtual client. In one embodiment the configuration management module modifies an existing set of recipes e.g. a default or generic cookbook given a selected security policy to transform the default cookbook into a specific cookbook e.g. a cookbook having recipes that conform to the selected security policy . In another embodiment the automated build server obtains the pre approved security policies e.g. stored as security policies and for each security policy creates a cookbook and or recipe that conforms to a corresponding security policy.

The output produced by the user interface includes status updates regarding the build of the selected virtual client and whether the auditing performed by the PHT was successful or not. In one embodiment the user interface communicates a validation report produced by the PHT that informs the user of the client device of the audits performed by the PHT and whether such audits were successful. Where an audit is unsuccessful the validation report may include an identification of the resource that did not pass the security audit and potential measures that the user could take to remedy the failed audit. For example where a resource is a service and the security policy indicates that the service can only provide access via port but the service is configured service on both port and the validation report would indicate that the user may remedy the failed audit by closing port to the service. While the foregoing example uses a service as an example resource other resources may include applications a network packet filter user accounts and other such resources.

In addition to the validation report the user interface may provide the status of building the virtual client e.g. the time or percentage until the build has completed whether the installation and configuration of a given resource was a success or failure the remaining number or percentage of resources to instantiate on the virtual client etc. and the operating mode of the virtual client once the build process has completed and the virtual client has been audited.

As discussed above the virtual client may be placed in an operating mode selected from a plurality of operating modes depending on the results of the security audit performed by the PHT . In one embodiment the PHT communicates with the automated build server and communicates a message that includes the validation report . For example the PHT may communicate a security audit completion message to the configuration management module which may then invoke the validation report analyzer module . The configuration management module may also communicate a message to the automated build client to pause the build process until the analysis of the validation report is complete.

The validation report analyzer then analyzes the validation report to determine whether the audit was successful. Where the security audit is successful the virtual client may be placed in a live operating mode where the virtual client may be used as intended e.g. according to the security policy . Where the security audit is unsuccessful the virtual client may be placed in a restricted operating mode where the virtual client is restricted from being used as intended. In an alternative embodiment there may be different levels of restricted operating modes e.g. from least restrictive to most restrictive depending on which resources or the number of resources that failed the security audit.

To place the virtual client in a restricted mode or a mode different than an operational mode the automated build server maintains one or more cookbooks e.g. cookbook that correspond to an applicable operating mode of the virtual client. The configuration management then instructs the automated build client to use the cookbook associated with the corresponding operating mode determined by the validation report analyzer . In this manner the automated build client retrieves the recipes e.g. recipes corresponding to the operating mode determined by the validation report analyzer and instantiates and or configures the resources of the virtual client according to the retrieved recipes. As discussed previously the restrictions on the virtual client may include allowing only administrative personnel to log into e.g. access the virtual client or only allowing specific types of network traffic e.g. administrative network traffic to reach the virtual client. These restrictions allow administrators to access the virtual client and address the issues that caused the build process to fail the security audit while preventing the virtual client from being used in an operational state.

In an alternative embodiment the PHT communicates directly with the automated build client and informs the automated build client whether the security audit of the virtual client was a success or failure. In parallel the PHT may also communicate the validation report to the automated build server for communicating to the client device . In this embodiment the automated build server maintains a cookbook corresponding to a failed security audit which includes recipes for configuring the resources of the virtual client to operate in a restricted mode that the automated build client retrieves after it receives the audit completion message from the PHT .

After the security audit is completed the operating mode of the virtual client may be communicated to the user of the client device via the user interface .

The processors may be a special purpose processor such as a Field Programmable Gate Array FPGA or an Application Specific Integrated Circuit ASIC . The processors may also include programmable logic or circuitry that is temporarily configured by software to perform certain operations. For example the processors may be configured by software such that the processors become specific machines or specific components of a machine uniquely tailored to perform the configured functions and are no longer general purpose processors. The processors may also be implemented as hardware modules as that term is used herein.

The network interface includes one or more communication interfaces for sending and or receiving data from one or more of the machines in the automated build environment . The network interface may include wired interfaces e.g. an Ethernet interface a wireless interface e.g. an 802.11 g n interface or Bluetooth interface or any combination of wired and wireless interfaces.

The memory is configured to store modules and data temporarily or permanently and may include but is not be limited to random access memory RAM read only memory ROM buffer memory flash memory optical media magnetic media cache memory other types of storage e.g. Erasable Programmable Read Only Memory EEPROM and or any suitable combination thereof. In one embodiment modules are represented by computer executable instructions that are executable by the processors . The term memory should be taken to include a single machine readable medium or multiple media e.g. a centralized or distributed database or associated caches and servers able to store the instructions. The term machine readable medium shall be taken to include any medium or combination of multiple media that is capable of storing instructions such that when the instructions are by one or more processors the virtual server performs any one or more of the methodologies described herein. Accordingly a machine readable medium refers to a single storage apparatus or device as well as cloud based storage systems or storage networks that include multiple storage apparatus or devices. The term machine readable medium excludes signals per se.

The modules include the automated build client a hypervisor and a virtual client configuration module . The data includes data used by the processors to support the functionalities of the modules and includes such data as a virtual client which may operate within the hypervisor . In addition the virtual client includes its own operating system e.g. a guest operating system which is configured to locally execute the PHT .

The automated build client is configured to build the virtual client via the virtual client configuration module . With reference to the automated build client may further include a communication module not shown for communicating with the configuration management module of the automated build server . When instructed by the configuration management module the automated build client obtains one or more recipes for obtaining and configuring resources of the virtual client which may be instantiated and or configured by the virtual client configuration module within the hypervisor . As discussed previously the automated build client may obtain the resources for instantiating on the virtual client from an application server in communication with the virtual server . In one alternative embodiment the resources may be stored or accessible via the automated build server . In another alternative embodiment the resources are locally accessible to the virtual server e.g. in communication with the virtual server via a Universal Serial Bus interface of an external storage device .

When the build process of the virtual client has reached a predetermined point e.g. after the instantiation and or configuration of a particular resource the virtual client configuration module then instructs the virtual client e.g. virtual client to obtain the PHT for performing a security policy audit on the virtual client. In one embodiment the virtual client obtains the PHT from the application server . Alternatively the virtual client may obtain the PHT from another machine such as the automated build server or further still the PHT may be locally stored by the virtual server e.g. outside of the hypervisor environment .

As discussed previously the PHT is locally executed by the virtual client to conduct a security audit of the resources configured on the virtual client . With reference to and in one embodiment the PHT generates a report e.g. validation report which is communicated to the automated build server for analysis e.g. by the validation report analyzer module . The results of the analysis determine whether the virtual client is to be placed in an operating mode or in a mode having restrictions on or more resources. In an alternative embodiment the PHT communicates the results of the security audit to the virtual client configuration module e.g. an audit success message an audit failure message an operating mode etc. which retrieves a cookbook and or recipe corresponding to the results provided by the PHT . After the audit the virtual client configuration module continues the build process for the virtual client and then sends a message to the configuration management module when the build process is completed. The virtual client configuration module may further send an operating mode of the virtual client along with any restrictions on any of the resources should the operating mode be a restricted operating mode e.g. as a result of failing the security audit . As discussed previously the results of the security audit and the operating mode of the virtual client may then be communicated to the client device that requested the build of the virtual client .

The virtual client configuration module then obtains one or more cookbooks and or recipes from the automated build server to build the new virtual client Operation . As discussed previously and in one embodiment the cookbooks and or recipes may conform with one or more of the previously approved security baselines. Alternatively one or more of the previously approved security baselines may be implemented on the virtual client during and or after a predetermined point in the build process.

The virtual client configuration module then instructs the virtual client to obtain a security validation module e.g. the PHT for conducting a security audit on the newly built virtual client Operation . A remotely stored security baseline may be transferred to the PHT for comparing the remotely stored security baseline with the configured resources of the virtual client Operation . Alternatively the PHT may obtain one or more of the security baselines local to the automated build server and or the automated build client . The PHT then performs the security audit on the newly built virtual client Operation .

If the validation is successful Yes branch of Operation the PHT generates an output e.g. a report and or return code that indicates that the audit was a success Operation . If the validation is not successful No branch of Operation the PHT generates an output that indicates that the audit was a failure Operation . Additionally or alternatively the output may also indicate which of the resources of the virtual client failed the security audit. The PHT then communicates the output to the automated build server Operation . Additionally or alternatively the PHT may communicate the output to the virtual client configuration module .

Referring to the automated build server receives the output e.g. the report and or return code from the PHT Operation . The automated build server then analyzes via the validation report analyzer the received output Operation . Where the validation report analyzer determines that the audit performed by the PHT was a failure the automated build server instructs the automated build client to place the virtual client in a restricted operating mode e.g. by executing one or more corresponding cookbooks and or recipes retrievable from the automated build server Operation . The client device requesting the new virtual client may then be informed of the security audit failure and of the restricted operating mode of the virtual client Operation . Alternatively where the audit performed by the PHT is determined to be a success the automated build server instructs the automated build client to place the virtual client in an operational mode Operation . The client device requesting the new virtual client may then be informed of the security audit success and of the operational mode of the virtual client Operation . In an alternative embodiment the PHT communicates the security audit success or failure to the automated build client which then executes the one or more corresponding cookbooks and or recipes accordingly.

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain physical manner. In various example embodiments one or more computer systems e.g. a standalone computer system a client computer system or a server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In some embodiments a hardware module may be implemented mechanically electronically or any suitable combination thereof. For example a hardware module may include dedicated circuitry or logic that is permanently configured to perform certain operations. For example a hardware module may be a special purpose processor such as a Field Programmable Gate Array FPGA or an Application Specific Integrated Circuit ASIC . A hardware module may also include programmable logic or circuitry that is temporarily configured by software to perform certain operations. For example a hardware module may include software executed by a general purpose processor or other programmable processor. Once configured by such software hardware modules become specific machines or specific components of a machine uniquely tailored to perform the configured functions and are no longer general purpose processors. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the phrase hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner or to perform certain operations described herein. As used herein hardware implemented module refers to a hardware module. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where a hardware module comprises a general purpose processor configured by software to become a special purpose processor the general purpose processor may be configured as respectively different special purpose processors e.g. comprising different hardware modules at different times. Software accordingly configures a particular processor or processors for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Hardware modules can provide information to and receive information from other hardware modules. Accordingly the described hardware modules may be regarded as being communicatively coupled. Where multiple hardware modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses between or among two or more of the hardware modules. In embodiments in which multiple hardware modules are configured or instantiated at different times communications between such hardware modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware modules have access. For example one hardware module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware module may then at a later time access the memory device to retrieve and process the stored output. Hardware modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions described herein. As used herein processor implemented module refers to a hardware module implemented using one or more processors.

Similarly the methods described herein may be at least partially processor implemented with a particular processor or processors being an example of hardware. For example at least some of the operations of a method may be performed by one or more processors or processor implemented modules. Moreover the one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors with these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. an Application Program Interface API .

The performance of certain of the operations may be distributed among the processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processors or processor implemented modules may be located in a single geographic location e.g. within a home environment an office environment or a server farm . In other example embodiments the processors or processor implemented modules may be distributed across a number of geographic locations.

The machine may include processors memory and I O components which may be configured to communicate with each other such as via a bus . In an example embodiment the processors e.g. a Central Processing Unit CPU a Reduced Instruction Set Computing RISC processor a Complex Instruction Set Computing CISC processor a Graphics Processing Unit GPU a Digital Signal Processor DSP an Application Specific Integrated Circuit ASIC a Radio Frequency Integrated Circuit RFIC another processor or any suitable combination thereof may include for example processor and processor that may execute instructions . The term processor is intended to include multi core processor that may comprise two or more independent processors sometimes referred to as cores that may execute instructions contemporaneously. Although shows multiple processors the machine may include a single processor with a single core a single processor with multiple cores e.g. a multi core process multiple processors with a single core multiple processors with multiples cores or any combination thereof.

The memory storage may include a memory such as a main memory or other memory storage and a storage unit both accessible to the processors such as via the bus . The storage unit and memory store the instructions embodying any one or more of the methodologies or functions described herein. The instructions may also reside completely or partially within the memory within the storage unit within at least one of the processors e.g. within the processor s cache memory or any suitable combination thereof during execution thereof by the machine . Accordingly the memory the storage unit and the memory of processors are examples of machine readable media.

As used herein machine readable medium means a device able to store instructions and data temporarily or permanently and may include but is not be limited to random access memory RAM read only memory ROM buffer memory flash memory optical media magnetic media cache memory other types of storage e.g. Erasable Programmable Read Only Memory EEPROM and or any suitable combination thereof. The term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database or associated caches and servers able to store instructions . The term machine readable medium shall also be taken to include any medium or combination of multiple media that is capable of storing instructions e.g. instructions for execution by a machine e.g. machine such that the instructions when executed by one or more processors of the machine e.g. processors cause the machine to perform any one or more of the methodologies described herein. Accordingly a machine readable medium refers to a single storage apparatus or device as well as cloud based storage systems or storage networks that include multiple storage apparatus or devices. The term machine readable medium excludes signals per se.

The I O components may include a wide variety of components to receive input provide output produce output transmit information exchange information capture measurements and so on. The specific I O components that are included in a particular machine will depend on the type of machine. For example portable machines such as mobile phones will likely include a touch input device or other such input mechanisms while a headless server machine will likely not include such a touch input device. It will be appreciated that the I O components may include many other components that are not shown in . The I O components are grouped according to functionality merely for simplifying the following discussion and the grouping is in no way limiting. In various example embodiments the I O components may include output components and input components . The output components may include visual components e.g. a display such as a plasma display panel PDP a light emitting diode LED display a liquid crystal display LCD a projector or a cathode ray tube CRT acoustic components e.g. speakers haptic components e.g. a vibratory motor resistance mechanisms other signal generators and so forth. The input components may include alphanumeric input components e.g. a keyboard a touch screen configured to receive alphanumeric input a photo optical keyboard or other alphanumeric input components point based input components e.g. a mouse a touchpad a trackball a joystick a motion sensor or other pointing instrument tactile input components e.g. a physical button a touch screen that provides location and or force of touches or touch gestures or other tactile input components audio input components e.g. a microphone and the like.

In further example embodiments the I O components may include biometric components motion components environmental components or position components among a wide array of other components. For example the biometric components may include components to detect expressions e.g. hand expressions facial expressions vocal expressions body gestures or eye tracking measure biosignals e.g. blood pressure heart rate body temperature perspiration or brain waves identify a person e.g. voice identification retinal identification facial identification fingerprint identification or electroencephalogram based identification and the like. The motion components may include acceleration sensor components e.g. accelerometer gravitation sensor components rotation sensor components e.g. gyroscope and so forth. The environmental components may include for example illumination sensor components e.g. photometer temperature sensor components e.g. one or more thermometer that detect ambient temperature humidity sensor components pressure sensor components e.g. barometer acoustic sensor components e.g. one or more microphones that detect background noise proximity sensor components e.g. infrared sensors that detect nearby objects gas sensors e.g. gas detection sensors to detection concentrations of hazardous gases for safety or to measure pollutants in the atmosphere or other components that may provide indications measurements or signals corresponding to a surrounding physical environment. The position components may include location sensor components e.g. a Global Position System GPS receiver component altitude sensor components e.g. altimeters or barometers that detect air pressure from which altitude may be derived orientation sensor components e.g. magnetometers and the like.

Communication may be implemented using a wide variety of technologies. The I O components may include communication components operable to couple the machine to a network or devices via coupling and coupling respectively. For example the communication components may include a network interface component or other suitable device to interface with the network . In further examples communication components may include wired communication components wireless communication components cellular communication components Near Field Communication NFC components Bluetooth components e.g. Bluetooth Low Energy Wi Fi components and other communication components to provide communication via other modalities. The devices may be another machine or any of a wide variety of peripheral devices e.g. a peripheral device coupled via a Universal Serial Bus USB .

Moreover the communication components may detect identifiers or include components operable to detect identifiers. For example the communication components may include Radio Frequency Identification RFID tag reader components NFC smart tag detection components optical reader components e.g. an optical sensor to detect one dimensional bar codes such as Universal Product Code UPC bar code multi dimensional bar codes such as Quick Response QR code Aztec code Data Matrix Dataglyph MaxiCode PDF417 Ultra Code UCC RSS 2D bar code and other optical codes or acoustic detection components e.g. microphones to identify tagged audio signals . In addition a variety of information may be derived via the communication components such as location via Internet Protocol IP geo location location via Wi Fi signal triangulation location via detecting a NFC beacon signal that may indicate a particular location and so forth.

In various example embodiments one or more portions of the network may be an ad hoc network an intranet an extranet a virtual private network VPN a local area network LAN a wireless LAN WLAN a wide area network WAN a wireless WAN WWAN a metropolitan area network MAN the Internet a portion of the Internet a portion of the Public Switched Telephone Network PSTN a plain old telephone service POTS network a cellular telephone network a wireless network a Wi Fi network another type of network or a combination of two or more such networks. For example the network or a portion of the network may include a wireless or cellular network and the coupling may be a Code Division Multiple Access CDMA connection a Global System for Mobile communications GSM connection or other type of cellular or wireless coupling. In this example the coupling may implement any of a variety of types of data transfer technology such as Single Carrier Radio Transmission Technology 1 RTT Evolution Data Optimized EVDO technology General Packet Radio Service GPRS technology Enhanced Data rates for GSM Evolution EDGE technology third Generation Partnership Project 3GPP including 3G fourth generation wireless 4G networks Universal Mobile Telecommunications System UMTS High Speed Packet Access HSPA Worldwide Interoperability for Microwave Access WiMAX Long Term Evolution LTE standard others defined by various standard setting organizations other long range protocols or other data transfer technology.

The instructions may be transmitted or received over the network using a transmission medium via a network interface device e.g. a network interface component included in the communication components and utilizing any one of a number of well known transfer protocols e.g. hypertext transfer protocol HTTP . Similarly the instructions may be transmitted or received using a transmission medium via the coupling e.g. a peer to peer coupling to devices . The term transmission medium shall be taken to include any intangible medium that is capable of storing encoding or carrying instructions for execution by the machine and includes digital or analog communications signals or other intangible medium to facilitate communication of such software.

Throughout this specification plural instances may implement components operations or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the subject matter herein.

Although an overview of the inventive subject matter has been described with reference to specific example embodiments various modifications and changes may be made to these embodiments without departing from the broader scope of embodiments of the present disclosure. Such embodiments of the inventive subject matter may be referred to herein individually or collectively by the term invention merely for convenience and without intending to voluntarily limit the scope of this application to any single disclosure or inventive concept if more than one is in fact disclosed.

The embodiments illustrated herein are described in sufficient detail to enable those skilled in the art to practice the teachings disclosed. Other embodiments may be used and derived therefrom such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. The Detailed Description therefore is not to be taken in a limiting sense and the scope of various embodiments is defined only by the appended claims along with the full range of equivalents to which such claims are entitled.

As used herein the term or may be construed in either an inclusive or exclusive sense. Moreover plural instances may be provided for resources operations or structures described herein as a single instance. Additionally boundaries between various resources operations modules engines and data stores are somewhat arbitrary and particular operations are illustrated in a context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within a scope of various embodiments of the present disclosure. In general structures and functionality presented as separate resources in the example configurations may be implemented as a combined structure or resource. Similarly structures and functionality presented as a single resource may be implemented as separate resources. These and other variations modifications additions and improvements fall within a scope of embodiments of the present disclosure as represented by the appended claims. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

