---

title: Virtual machine migration tool
abstract: Tools and techniques for migrating applications to compute clouds are described herein. A tool may be used to migrate any arbitrary application to a specific implementation of a compute cloud. The tool may use a library of migration rules, apply the rules to a selected application, and in the process generate migration output. The migration output may be advisory information, revised code, patches, or the like. There may be different sets of rules for different cloud compute platforms, allowing the application to be migrated to different clouds. The rules may describe a wide range of application features and corresponding corrective actions for migrating the application. Rules may specify semantic behavior of the application, code or calls, storage, database instances, interactions with databases, operating systems hosting the application, and others.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09569259&OS=09569259&RS=09569259
owner: Microsoft Technology Licensing, LLC
number: 09569259
owner_city: Redmond
owner_country: US
publication_date: 20151016
---
This application is a continuation application of prior application Ser. No. 13 171 446 filed Jun. 29 2011 entitled Virtual Machine Migration Tool now allowed. The aforementioned application is incorporated herein by reference.

Recently there has been an increase in the use and availability of compute clouds sometimes referred to as Platform as a Service PaaS . Examples of compute clouds are WINDOWS AZURE AMAZON EC2 BUNGEE CONNECT GOOGLE APP ENGINE and others. These compute clouds typically host many tenants each running their own isolated web applications or web services that are typically accessed by client browsers. The tenant s applications often run in virtual machines VMs . The compute cloud provides an execution environment that may handle changing conditions and demands in ways that are intended to be transparent to the applications. For example balancing the load of incoming requests provisioning network bandwidth processing resources storage scaling applications e.g. adjusting the number of instances relocating virtual machines and application instances etc. Shared computing clouds are managed by an operator entity allowing tenants to be concerned primarily with their applications.

However a computing cloud as an execution environment may have traits including both benefits and limitations that are inconsistent with applications not originally designed to run on the computing cloud. For example consider a three tier web application originally designed to run on particular operating systems using specific non cloud resources e.g. relational databases and perhaps various software and hardware facilities. The application may have a web front end with built in logic for handling fluctuations in load. The front end may interface with a middle tier that implements business logic and interacts with local file storage and back end storage such as a database. This application may have semantics for self scaling that are not necessary in a cloud. The application may have its own database layer and accompanying management software that is not needed in the cloud. The application may have operating system configuration settings that conflict with control by the cloud some clouds may not even require an operating system . Aspects of the application might need to be altered removed or added to allow the application to efficiently execute in a computing cloud.

Techniques discussed below relate to tools for migrating applications and virtual machines to computing clouds.

The following summary is included only to introduce some concepts discussed in the Detailed Description below. This summary is not comprehensive and is not intended to delineate the scope of the claimed subject matter which is set forth by the claims presented at the end.

Tools and techniques for migrating applications to compute clouds are described herein. A tool may be used to migrate any arbitrary application to a specific implementation of a compute cloud. The tool may use a library of migration rules apply the rules to a selected application and in the process generate migration output. The migration output may be advisory information revised code patches or the like. There may be different sets of rules for different cloud compute platforms allowing the application to be migrated to different clouds. The rules may describe a wide range of application features and corresponding corrective actions for migrating the application. Rules may specify semantic behavior of the application code or calls storage database instances interactions with databases operating systems hosting the application and others.

Many of the attendant features will be explained below with reference to the following detailed description considered in connection with the accompanying drawings.

Embodiments discussed below relate to migrating tools for migrating applications to computing clouds. Discussion will begin with explanation of computing clouds followed by several examples. An example application will be discussed. Tools and techniques for migrating will be described next including migration tools migration rules and processes for migration.

The applications are uploaded and configured by the tenants . The applications run as managed by the computing cloud and clients access instances of the applications using browsers or other types of client software. Note that from the application perspective the application is running on a platform and activity of the computing cloud is mostly transparent. The applications are accessed via communications protocols without any concern for the underlying hardware data network or the cloud layer between the application and the client.

Cloud architecture is a version of the GOOGLE APP ENGINE cloud. Various development tools are used to build and deploy an application. The App Engine itself is fully documented elsewhere. A key feature is that once an application is deployed the GOOGLE APP ENGINE automatically handles scaling resources and or instances are added and removed as needed. Various support services may be accessed by applications. Account services data table services and others are used by the applications and these resources are also scaled and managed by the cloud.

To summarize in PaaS type computing clouds the cloud computing platform itself handles most administrative functions. The platform may automatically and transparently to tenants handle things such as applying operating system patches installing new versions of system or database software onlining computers and VMs migrating VMs allocating network bandwidth and so on. This transparent management which might intersect with some semantic behavior of applications discussed in the next section nonetheless can eliminate application unavailability due to patching hardware failures overload and other reasons. Moreover the cloud which is in control of the physical and virtual machines handles application scaling the cloud assures that appropriate levels of resources are available at any given time. Computing cloud platforms may have other features. For example browser based development tools seamless deployment to a hosted runtime environment in the cloud i.e. the ability to deploy and start an application from a client accessing the cloud web based management and monitoring tools for tenants pay as you go billing and others.

As suggested above an application not originally built to run in a computing cloud can have design traits semantics code properties and configuration features that may be affected by a computing cloud s architecture and services. An application may have functionality such as load balancing and scaling that is redundant in a cloud environment. An application might also have features that in a cloud environment can lead to errors data loss or other failures. When migrating an application to a cloud environment there are often modifications that can or should be made for compatibility reliability efficiency minimizing cost proper installation and so on.

The lower part of shows migrated application . The migrated version may be modified in numerous ways discussed later. For example a load balancing mechanism might be provided by the computing cloud without visibility to the migrated application . The migrated application web servers might have HTTP servers removed and rely on the computing cloud to handle HTTP requests. Or the web servers might be instantiated and managed by the cloud. The cloud might also provide load balancing and scaling for migrated application servers . The data tier of the migrated application still uses SQL statements and logic perhaps modified but the application data is now stored and served from a cloud managed database instance . The tenant that installs the migrated application into the cloud may still configure the database and specify its requirements but the database is provided by a database service that provides and isolates databases for other tenants in the cloud generally according to user provided schema or the like. A migration tool and details of other possible modifications to the application thereby will be described next.

The code rules might include rules of the form . A condition may specify a code statement s syntax a specific library that should be included or excluded a specific storage type or location a path and so forth. Common code patterns might also be specified. Actions can vary. Some actions may modify code or insert a pre defined comment. Other actions may add output to a migration report log. The code rules might recognize a set of specific calls or methods and convert them to a cloud specific application programming interface API . A rule might recognize a call to a specific license server or license library. A rule might also recognize code that is directed to a network service e.g. Active Directory that is not available in the target computing cloud. Corresponding corrective actions reports and or revisions may be include.

A set of operating system configuration rules may be provided for environments where the target application is built for a specific operating system after migration in the form of a VM guest in the cloud . In some cases the operating system rules might relate to application code that interfaces with the operating system. In cases where the computing cloud allows the tenant to specify or install a particular operating system the rules might directly inspect the operating system. For example if the relevant computing cloud automatically handles guest operating system updates guest operating systems should be configured to disable automatic updates. Permissions or special user accounts may be modified or added. Some clouds may support only specific operating system versions release versions 32 versus 64 bit versions etc. so the rules might identify an operating system need and actions might involve changing the operating system upgrading the operating system or flagging a need to do so. In some clouds it might be advisable for consistency to set operating system time zone settings to a particular time zone setting for instance Coordinated Universal Time UTC because application instances or VMs might be running across multiple geographic time zones. Again corresponding corrections or patches may be included with the rules.

Semantic rules may specify architectural or design aspects of the target application. For example as noted above some application features may become obsolete in a computing cloud. Semantic rules might specify clues to recognize load balancers scaling logic data backup or mirroring and others. Clues can come from a build manifest keyword recognition or known telltales of off the shelf or open source components. Clues can also come from automated code analysis which may involve compiling code and analyzing or profiling traits of the code. Semantic properties to recognize might include restart logic to be handled by the cloud resource usage and failover logic. In some clouds because VMs may be moved stopped and restarted at will by the cloud the rules may recognize parts of an application that rely on local storage recommending the use of a cloud based persistent storage in order to reliably maintain state of the application. In one embodiment a rule may recognize that state stored by one instance of an application component must be recognized by new instances started automatically by the cloud. Other semantic rules might add or suggest adding hooks to recognize when a host operating system has entered a sleep or paused state or restarted in order to allow an instance of the application to confirm for instance upon resumption of its host VM that it has state that is consistent with its state prior to the interruption.

Storage or database rules may involve rules related to shifting from an ordinary database server to a cloud based database server which might be an instance of a database service that is part of the computing cloud. These rules might also involve shifting from a particular database to another form of storage such as blob storage in the cloud key value storage in the cloud simple data tables from a table service etc. In general as mentioned above there may be rules that attempt to shift storage strategy of the application from storage on the VM hosting the application to cloud based storage. Other database rules may look for particular SQL calls database mirroring logic. A connection rule may be included to cause more frequent connection checking during database transactions. For example some cloud based database services may frequently spin up new instances and shut down old instances of an application s database the original application may assume that a connection remains available through a span of code whereas connection checking is helpful when migrated to the cloud. In another embodiment cloud based databases might not guarantee transactions across multiple tables a rule might flag SQL transactions that involve multiple tables. Unsupported or unneeded SQL calls might also be recognized.

Installer rules might inspect an install package format of the target application and apply rules related to installing on the target cloud. For instance if the computing cloud exercises control over VMs hosting the application various install components might need to be relocated components for instance assemblies or libraries that the original application assumes to be present might in fact need to be included in the migrated application s installation process. Settings of some application components might need to be altered when being installed in a cloud based environment. In one embodiment an entire install package might be flagged as incompatible with the cloud. In another embodiment an install rule might convert an install package of the application from one format to a format compatible with the target cloud. A rule may also add credentials needed access the cloud in order to install the application. Again corresponding actions corrective and or advisory may be included with the rules.

Other types of rules may also be included. In one embodiment the migration library may include cost information about the relevant clouds. Such information might describe how costs accrue in the cloud and the costs for various units of cloud resources. The rules in turn may access the cost information to perform analysis about potential costs of the application in the target cloud. Such analysis might involve. In one embodiment the cost information may include information about licensing rights or opportunities in the target cloud. These rules when applied might add to a migration report a recommendation to seek new licensing arrangements for components for instance guest operating systems database instances etc. of the application or license offers from the cloud s operator or other vendors that would cover license requirements and therefore avoid need to separately pay for a license.

The numerous rules mentioned above are not limiting other specific rules and other categories of rules may be used. Moreover a rule is simply a convenient form of representing information about needs and preferences in a computing cloud. The term rule as used herein is defined to include any information that describes an original condition of an arbitrary application is applicable to arbitrary applications or its environment and a corresponding aspect of a specific computing cloud that is relevant if the application is to be executed in the computing cloud. As used herein a rule also is defined to include any action that might be taken when a condition specified by the rule is determined to be present in the target application including actual modifications generation of patches or reports or other information that can be used. Therefore in practice rules may take many forms including statements in a declarative or logic language ordinary procedural code including scripting language compiled code and so forth. The types and nature of rules may vary from one rule set to the next depending on the specific computing clouds that correspond to the rule sets. In one embodiment there is only one rule set the migration library is for only one implementation of a computing cloud. In yet another embodiment the rules are implemented as part of the executable tool.

Embodiments and features discussed above can be realized in the form of information stored in volatile or non volatile computer or device readable media. This is deemed to include at least media such as optical storage e.g. compact disk read only memory CD ROM magnetic media flash read only memory ROM or any apparatus for storing digital information. The stored information can be in the form of machine executable instructions e.g. compiled executable binary code source code bytecode or any other information that can be used to enable or configure computing devices to perform the various embodiments discussed above. This is also deemed to include at least volatile memory such as random access memory RAM and or virtual memory storing information such as central processing unit CPU instructions during execution of a program carrying out an embodiment as well as non volatile media storing information that allows a program or executable to be loaded and executed. The embodiments and features can be performed on any type of computing device including portable devices workstations servers mobile wireless devices and so on.

