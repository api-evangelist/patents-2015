---

title: Joint crosstalk-avoidance and error-correction coding for parallel data busses
abstract: System, methods, and apparatus are described that facilitate transmission/reception of data over a multi-line parallel bus. In an example, the apparatus transmits data bits over a parallel bus includes determining from a prior bus state, a plurality of free wires in the bus for a current bus state, where each free wire satisfies a crosstalk-avoidance constraint in the current bus state for all values of a bit transmitted on the free wire. The apparatus may encode a plurality of data bits using a crosstalk avoidance encoder to obtain a CAC-encoded word, compute an error detection or correction code for the CAC-encoded word, assign bits of the error detection or correction code to the plurality of free wires for transmission during the current bus state, and assign the CAC-encoded word to unassigned wires of the bus for transmission during the current bus state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09654251&OS=09654251&RS=09654251
owner: QUALCOMM INCORPORATED
number: 09654251
owner_city: San Diego
owner_country: US
publication_date: 20151203
---
The present disclosure relates generally to high speed data communications and more particularly to encoding and decoding data over a multi line parallel bus.

High speed interfaces are frequently used between circuits and components of mobile wireless devices and other complex apparatus. For example certain devices may include processing communications storage and or display devices that interact with one another through communications links. Some of these devices including synchronous dynamic random access memory SDRAM may be capable of providing or consuming data and control information at processor clock rates. Other devices such as display controllers may require variable amounts of data at relatively low video refresh rates.

In a system on chip SoC various components are integrated on a single die. For example a typical SoC in present mobile phones contains hundreds of components such as central and graphical processing units memories power management circuits cellular and other wireless radios etc. This integration of a large number of components onto a single silicon substrate results in smaller and lower power processing units compared to traditional systems. All of these components communicate with each other via metal wires known as interconnects or busses.

Components may intercommunicate using interconnects or busses in systems other than SoC systems. For example a central processing unit CPU or other processor may communicate with a memory device via an interconnect located on a printed circuit board PCB .

Problems associated with these interconnects are transmission energy and delay. For a given technology the width of the wire and the distance to the substrate remains fixed and hence the capacitive coupling depends strongly on the distance between the wires. As the inter wire spacing decreases the coupling capacitance between adjacent wires increases leading to increased crosstalk. This crosstalk between adjacent wires degrades the signal integrity and increases transmission energy and delay. Hence the interconnects pose a challenge to keep up with the demand for increasing data transfer rates. What is needed is an improved crosstalk avoidance scheme that improves signal integrity while decreasing transmission energy and delay.

Embodiments disclosed herein provide systems methods and apparatus for transmitting receiving data bits over a multi line parallel bus with improved signal integrity. Encoders and decoders are disclosed that provide joint crosstalk avoidance and error correction and or detection.

In an aspect of the disclosure a method of transmitting data bits over a parallel bus includes determining from a prior bus state a plurality of free wires in the bus for a current bus state where each free wire satisfies a crosstalk avoidance constraint in the current bus state for all values of a bit transmitted on the free wire. The method may also include encoding a plurality of data bits using a crosstalk avoidance encoder to obtain a crosstalk avoidance coding CAC encoded word computing an error detection or correction code for the CAC encoded word assigning bits of the error detection or correction code to the plurality of free wires for transmission during the current bus state and assigning the CAC encoded word to two wires of the bus that are not used for carrying bits of the error detection or correction code.

In an aspect of the disclosure an apparatus includes a storage device configured to maintain an indication of a past state of a multi wire parallel bus and a crosstalk avoidance encoder adapted to determine a plurality of free wires in the bus for a current state of the multi wire parallel bus based on the past state of the multi wire parallel bus where each free wire satisfies a crosstalk avoidance constraint in the current state of the multi wire parallel bus for all values of a bit transmitted on the free wire. The apparatus may provide a crosstalk avoidance encoded word by encoding a plurality of data bits. The apparatus may include an error correction coding encoder configured to compute an error detection or correction code for the crosstalk avoidance encoded word and a selector circuit configured to assign bits of the error detection or correction code to the plurality of free wires for transmission as part of the current state of the multi wire parallel bus and assign the crosstalk avoidance encoded word to wires of the bus that are not used for carrying bits of the error detection or correction code.

In an aspect of the disclosure an apparatus includes means for determining from a prior bus state a plurality of free wires in the bus for a current bus state where each free wire satisfies a crosstalk avoidance constraint in the current bus state for all values of a bit transmitted on the free wire. The apparatus may also include means for encoding a plurality of data bits using a crosstalk avoidance encoder to obtain a CAC encoded word means for computing an error detection or correction code for the CAC encoded word means for assigning bits of the error detection or correction code to the plurality of free wires for transmission during the current bus state and means for assigning the CAC encoded word to two wires of the bus that are not used for carrying bits of the error detection or correction code.

In an aspect of the disclosure a processor readable storage medium may have code stored thereon. The code may include instructions for determining from a prior bus state a plurality of free wires in the bus for a current bus state where each free wire satisfies a crosstalk avoidance constraint in the current bus state for all values of a bit transmitted on the free wire. The code may include instructions for encoding a plurality of data bits using a crosstalk avoidance encoder to obtain a CAC encoded word computing an error detection or correction code for the CAC encoded word assigning bits of the error detection or correction code to the plurality of free wires for transmission during the current bus state and assigning the CAC encoded word to two wires of the bus that are not used for carrying bits of the error detection or correction code.

In an aspect of the disclosure a method of receiving data bits from a parallel bus includes determining from a prior bus state a plurality of free wires in the bus for a current bus state where each free wire satisfies a crosstalk avoidance constraint in the current bus state for all values of a bit transmitted on the free wire. The method may also include receiving an error detection or correction code from the plurality of free wires jointly operating a crosstalk avoidance decoder and an error detection or correction decoder to decode the current bus state and providing a plurality of data bits decoded from the current bus state.

In an aspect of the disclosure an apparatus includes a processing circuit a storage device configured to maintain a past bus state of a multi wire parallel bus and a crosstalk avoidance decoder that jointly operated with an error detection or correction decoder. The processing circuit and or crosstalk avoidance decoder may be configured to determine from the prior bus state a plurality of free wires in the bus for a current bus state where each free wire satisfies a crosstalk avoidance constraint in the current bus state for all values of a bit transmitted on the free wire. An error detection or correction code provided by the error detection or correction decoder may be used to correctly decode the current bus state.

In an aspect of the disclosure an apparatus includes means for determining from a prior bus state a plurality of free wires in the bus for a current bus state where each free wire satisfies a crosstalk avoidance constraint in the current bus state for all values of a bit transmitted on the free wire. The apparatus may also include means for receiving an error detection or correction code from the plurality of free wires means for jointly operating a crosstalk avoidance decoder and an error detection or correction decoder to decode the current bus state and means for providing a plurality of data bits decoded from the current bus state.

In an aspect of the disclosure a processor readable storage medium may have code stored thereon. The code may include instructions for determining from a prior bus state a plurality of free wires in the bus for a current bus state where each free wire satisfies a crosstalk avoidance constraint in the current bus state for all values of a bit transmitted on the free wire. The method may also include receiving an error detection or correction code from the plurality of free wires jointly operating a crosstalk avoidance decoder and an error detection or correction decoder to decode the current bus state and providing a plurality of data bits decoded from the current bus state.

Various aspects are now described with reference to the drawings. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of one or more aspects. It may be evident however that such aspect s may be practiced without these specific details.

Certain disclosed examples relate to systems and apparatus for transmitting receiving data bits over a number of conductors in a parallel bus. The conductors may include three or more conductors and each conductor may be referred to as a wire a connector and or interconnect. The conductors may include conductive traces disposed on a circuit board or within a conductive layer of a semiconductor integrated circuit IC device. The connectors may be configured or arranged to provide one or more busses. In one example the conductors may be divided into a plurality of transmission groups each group encoding a portion of a block of data to be transmitted.

Certain aspects of the disclosure may be applicable to communications links deployed between electronic components which may include subcomponents of devices such as telephones mobile computing devices appliances automobile electronics avionics systems etc. Referring to for example an apparatus employing one or more busses for intercommunication between constituent devices may include a processing circuit that is configured to control operation of the apparatus . The processing circuit may access and execute software applications and control logic circuits and other devices within the apparatus . In one example the apparatus may include a wireless communication device that communicates through a radio frequency RF communications transceiver with a radio access network RAN a core access network the Internet and or another network. The communications transceiver may be operably coupled to a processing circuit . The processing circuit may include one or more IC devices which may include an application specific integrated circuit ASIC . The ASIC may include one or more processing devices logic circuits and so on. The processing circuit may include and or be coupled to processor readable storage that may maintain instructions and data that may be executed by the processing circuit . The processing circuit may be controlled by one or more of an operating system and an application programming interface API layer that supports and enables execution of software modules residing in the storage of the wireless device. The storage may include read only memory ROM or random access memory RAM electrically erasable programmable read only memory EEPROM a flash memory device or any memory device that can be used in processing systems and computing platforms. The processing circuit may include and or access a local database that can maintain operational parameters and other information used to configure and operate the apparatus . The local database may be implemented using one or more of a database module or server flash memory magnetic media EEPROM optical media tape soft or hard disk or the like. The processing circuit may also be operably coupled to external devices such as an antenna a display operator controls such as a button and a keypad among other components.

The communications link may include multiple channels and . One or more communications channel may be bidirectional and may operate in half duplex mode and or full duplex mode. One or more channels may be unidirectional. The communications link may be asymmetrical providing higher bandwidth in one direction. In one example described herein a forward communications channel may be referred to as a forward link while a reverse communications channel may be referred to as a reverse link. The first device may be designated as a host master and or transmitter while the second device may be designated as a client slave and or receiver even if both devices and are configured to transmit and receive on the communications link . In one example the forward channel may operate at a higher data rate when communicating data from a first device to a second device while the reverse channel may operate at a lower data rate when communicating data from the second device to the first device .

The devices and may each include a processing circuit or other computing circuit processor and or device. In one example the first device may perform core functions of the apparatus including maintaining wireless communications through a wireless transceiver and an antenna while the second device may support a user interface that manages or operates a display controller and may control operations of a camera or video input device using a camera controller . Other features supported by one or more of the devices and may include a keyboard a voice recognition component and other input or output devices. The display controller may include circuits and software drivers that support a display such as a liquid crystal display LCD panel a touch screen display an indicator and so on. The storage media and may include transitory and or non transitory storage devices adapted to maintain instructions and data used by the respective processing circuits and and or other components of the devices and . Communication between each processing circuit and its corresponding storage media and and other modules and circuits may be facilitated by one or more busses and respectively.

The reverse channel may be operated in the same manner as the forward channel . The forward channel and the reverse channel may be capable of transmitting at comparable speeds or at different speeds where speed may be expressed as a data transfer rate and or a clocking rate. The forward and reverse data rates may be substantially the same or may differ by orders of magnitude depending on the application. In some applications a bidirectional communications channel may support communications between the first device and the second device . The forward channel and or the reverse channel may be configurable to operate in a bidirectional mode when for example the forward and reverse channel and share the same physical connections and operate in a half duplex manner.

In certain examples the reverse channel derives a clocking signal from the forward channel for synchronization purposes for control purposes to facilitate power management and or for simplicity of design. The clocking signal may have a frequency that is obtained by dividing the frequency of a symbol clock used to transmit signals on the forward channel . The symbol clock may be superimposed or otherwise encoded in symbols transmitted on the forward channel . The use of a clocking signal that is a derivative of the symbol clock allows fast synchronization of transmitters and receivers transceivers and enables fast start and stop of data signals without the need for framing to enable training and synchronization.

In certain examples a bidirectional channel may support communications between the first device and the second device . In some instances the first device and the second device provide encoding and decoding of data address and control signals transmitted between a processing device and memory devices such as dynamic random access memory DRAM devices.

In one example the processing circuit and the memory device may be components of the apparatus depicted in . The processing circuit and the memory device may be coupled using a bus that includes a number of connectors wires electrically conductive traces on a circuit board or chip carrier package substrate silicon or alternative material interposer electrically conductive traces in a metallization layer of an IC and or other electrical connectors and devices. The bus may include some combination of unidirectional and bidirectional connectors.

The bus may be configured to carry one or more differential signals in corresponding pairs of connectors. For example data may be transmitted over single ended channels while certain control signals may be transmitted using differential channels. Some memory devices may employ a write clock WCK while other memory devices may use a data strobe signal DQS signal to determine when data is valid and or can be reliably captured from data signals DQ signals on the bus .

Due to decreasing transistor sizes interconnect wires which may be organized as a bus for example are emerging as a performance bottleneck in SoCs and for chip to chip communications. With reference to bus transmission energy and delay may be affected by capacitive coupling illustrated as capacitances between neighboring wires which may be referred to as lanes of a bus . Transmission energy and delay are adversely affected by increases in bus interline capacitive coupling driven by technology scaling. If the ratio of the bus interline capacitance to the bulk capacitance sum of parasitic driver and load capacitances to ground is then worst case transmission energy and delay for an N wire bus is proportional to 1 4 . Decreased inter wire spacing and increased clock frequencies used in SoCs ASICs and other IC devices can produce increased crosstalk between adjacent wires can degrade signal integrity and increase transmission energy and delay resulting in increased transmission errors.

Transitions at a boundary between signaling states corresponding to consecutively transmitted words are illustrated in the timing diagram of . Words may be transmitted in transmission intervals defined by a transmit clock or receive clock. The bus state during a transmission interval may be the combination of the signaling states of each lane . Transitions in signaling state may occur on one or more of the lanes at the boundary between transmission intervals . In the illustrated example positive transitions occur on a first lane and a second lane a negative transition occurs on a third lane while no transition occurs on a fourth lane . In this example signals transition between two signaling states although the principles disclosed herein may be applied to signals that transition between three or more signaling states.

Various solutions for improving communication reliability have been implemented. Some of these solutions such as crosstalk avoidance coding CAC schemes attempt to prevent or minimize transmission errors on a parallel bus subject to capacitive coupling of adjacent connectors. Crosstalk levels affecting one of the lanes may depend on the types of transition that occur on adjacent or neighboring lanes at or near the boundary between transmission intervals and may correspond to the types of transitions that occur on the various lanes . For example maximum crosstalk may be observed when opposite bit i.e. opposite direction transitions occur on a first pair of adjacent lanes . Decreased crosstalk may be observed when the same type of transition occurs on a second pair of adjacent lanes . In the case of a third pair of adjacent lanes intermediate levels of crosstalk may occur when the signaling state of one lane does not change.

CAC may be used to encode data to be transmitted on a parallel bus subject to capacitive coupling between adjacent lanes such that opposing bit transitions on adjacent lanes may be avoided. CAC involves encoding data in words for transmission on the parallel bus where certain transition patterns are avoided. CAC can reduce energy consumption and propagation delay by avoiding the occurrence of opposing bit transitions on adjacent wires of the bus . CAC may reduce worst case transmission energy and delay by encoding data in a manner that prevents certain transitions on adjacent wires. CAC may use interface circuits to encode data for transmission by encoding data such that occurrences of opposing bit transitions on adjacent lanes for example are avoided. According to certain aspects disclosed herein data transmitted on the bus may be encoded based on data previously transmitted over the bus hereinafter referred to as past bus state to obtain a current bus state while avoiding certain transitions. In the past bus state may correspond to the combination of the signaling states of each lane during a first transmission interval and the current bus state may correspond to the combination of the signaling states of each lane during a second subsequent transmission interval .

Other solutions for improving communication reliability provide techniques for detecting transmission errors on a bus and in some instances enable a receiver to reverse the effects of one or more transmission errors. Error correction coding ECC schemes provide encoding redundancy through the addition of parity bits in order to detect and correct errors that may occur during transmission. ECC schemes increase the number of wires needed in the bus . In the example of the double data rate fourth generation DDR4 SDRAM standard an 8 bit cyclic redundancy code CRC is used to provide error correction for 72 bits of data in a total of 80 lanes. ECC is a technique for encoding data that provides redundancy through the addition of parity bits. This redundancy can be used to detect and correct errors occurring during transmission.

It may be desirable to use some combination of CAC and ECC in certain applications. Issues may arise when CAC and ECC are combined. In one example when a combination of an ECC inner code followed by a CAC outer code is used the CAC outer code cannot be reliably decoded in the presence of errors. In another example when a combination of a CAC inner code followed by an ECC outer code is used the ECC outer code can counteract the crosstalk avoidance provided by the CAC.

Previous approaches to combining CAC and ECC have involved tradeoffs between reliability and efficiency of the bus. These previous approaches encode information using a CAC and use ECC to generate parity bits from the output of the CAC encoder. Each parity bit is then transmitted using two wires to avoid crosstalk. The approach is inefficient because of this use of two wires per parity bit. In the example of DDR4 DRAM if the 72 bits are already CAC encoded then the ECC would generate an additional 16 bits resulting in a total of 88 lanes.

According to certain aspects of the invention information may be reliably and efficiently transmitted over a parallel bus using the joint CAC and ECC encoding techniques disclosed herein. In one example interface circuits see may be adapted to perform joint CAC and ECC encoding for a 72 bit DDR4 DRAM bus using 10 bit lanes to transmit ECC bits in a manner that satisfies crosstalk avoidance constraints. Joint encoding for CAC and ECC according to certain aspects uses fewer bus lanes than state of the art solutions and can provide better protection against transmission errors.

Crosstalk avoidance constraints may be defined and used to prevent patterns of transitions in bus state that produce high levels of crosstalk. In one example a CAC encoder may be constrained from producing a bus state in which opposite direction transitions occur on two adjacent lanes see . The crosstalk avoidance constraint may be applied in three dimensions where the adjacent lanes are defined in both horizontal and vertical planes. In some instances a crosstalk avoidance constraint in the horizontal dimension may specify a first number of lanes required to separate opposite direction transitions in the horizontal plane and a second number of lanes required to separate opposite direction transitions in the vertical plane. The first and second numbers of separating lanes may be different or the same crosstalk avoidance constraint can be tailored for busses that use signaling schemes in which three or more voltage or current states are defined.

According to certain aspects ECC bits calculated for CAC encoded information may be transmitted on free wires. A free wire may be defined as one of the lanes that can satisfy crosstalk avoidance constraints regardless of any possible transition that may occur at the next change in bus state.

In the general case where the bus has N lanes and the past bus state is denoted as a a a . . . a . An encoder maybe adapted or configured to determine a next bus state denoted as b b b . . . b . According to certain aspects the free bus wires for the past bus state are identified. Each wire in the past bus state that is the middle wire of three wires that have the same signaling state for the past bus state can be set to 0 or 1 without violating crosstalk constraints. That is for an nth wire where a a ain the past bus state have the same value the encoder can set the next value b to any desired signaling state without violating the crosstalk constraints and without affecting the values of b bthat can be sent over adjacent wires.

In the factor graph triangles and located between the past bus state and the next bus state represent the crosstalk constraints imposed by the past bus state . In one example a first triangle is provided because a 0 a 1 requires that b b 1 0 since otherwise an opposing transition would occur on the on these two adjacent wires. In another example a second triangle is provided because a 1 a 0 requires that b b 0 1 since otherwise an opposing transition would occur on the on these two adjacent wires.

Free wires are identified when their values for the next bus state are not connected to any constraint. For example the wires b b bdo not have any associated constraints and are indicated by the white circles . The wires b b bare free wires that can be set to any value in the next bus state without affecting wires adjacent to them and without violating any crosstalk constraints. These free wires may be used to carry ECC bits that are calculated concurrently with or after CAC encoding in a joint CAC ECC encoder.

A variety of encoding techniques may be adapted to support joint CAC and ECC encoding. For example illustrates two encoders that can be configured to use free wires to carry ECC bits.

In one example an encoder may adapt a convolution error correction code to provide joint CAC and ECC encoding. A sequential CAC encoder may consider past bus state when encoding information bits to produce an encoded word . The encoder may include storage that maintains the past bus state . The storage may be provided using registers or other types of memory device and the storage may maintain a history of prior bus states. A convolutional ECC encoder generates parity bits for the encoded word received from the CAC encoder . The convolutional ECC encoder may periodically generate new parity bits that are buffered in a bounded queue . A selector circuit receives queued parity bits and determines which bit should be sent over the bus . The selector circuit may assign parity bits obtained from the queue to wires of the bus . In one example the selector circuit fills the bus sequentially starting from a first wire e.g. a wire corresponding to the first lane . While sequentially filling the bus the selector circuit may encounter a first free wire based on the past bus state . A first parity bit in the queue which may be an oldest parity bit waiting in the queue may be assigned to the first free wire. If no parity bit is available in the queue the selector circuit may request a new bit from the CAC encoder for assignment to the current wire. In the example illustrated in the lanes of the bus may be sequentially assigned CAC encoded bits or ECC bits from the leftmost lane to the rightmost lane or from the rightmost lane to the leftmost lane . In other configurations a sequence of lanes may include lanes that are ordered such that each lane in the sequence is physically adjacent to predecessor and successor lanes in the sequence.

In some instances the queue may be empty or full. When the queue is empty the selector circuit may continue to poll the queue while assigning bits received from the CAC encoder until the queue is no longer empty even when the selector circuit encounters a free wire. When the queue is full the selector circuit may force one or more non free wires to carry parity bits. In one example the selector circuit may respect crosstalk avoidance constraints by using the next two consecutive wires to carry one parity bit. For example the selector circuit may resend the same bit transmitted in the past bus state on the first of two consecutive lanes and send a parity bit on the second of two consecutive lanes. Crosstalk constraints are met because the first of the two consecutive lanes has no transition between the past bus state and the current bus state.

In another example an encoder may use block error correction coding to provide joint CAC and ECC encoding. In this example the CAC encoder may consider past bus state when encoding information bits to produce an encoded word which may be assigned by the selector circuit to non free wires of the bus . The encoder may include storage that maintains the past bus state . The storage may be provided using registers or other types of memory device and the storage may maintain a history of prior bus states. The ECC encoder may then compute parity bits for the data encoded word assigned to the non free wires. The parity bits may then be assigned by the selector circuit to the free wires of the bus .

In some instances the number of free wires may exceed the number of parity bits and the selector circuit may use some free wires to carry the encoded word provided by the CAC encoder . In some instances the number of free wires may be less than the number of parity bits and the selector circuit may force one or more non free wires to carry certain of the parity bits . In one example the selector circuit may respect crosstalk avoidance constraints by using two adjacent wires to carry one parity bit. For example the selector circuit may resend the same bit transmitted in the past bus state on the first of two adjacent wires and send a parity bit on the second of two adjacent wires. Crosstalk constraints are met because the first of the two adjacent wires has no transition between the past bus state and the current bus state.

In operation an encoder may use the storage to maintain an indication of a past bus state . The storage may include one or more registers that are clocked using a transmit clock associated with the bus such that the transmitted state is captured for use in encoding data in a succeeding bus state. The CAC encoder may be adapted to receive the past bus state and determine a plurality of free wires for a current or next bus state. Each free wire may satisfy a crosstalk avoidance constraint in the current state of the bus for all potential values of a bit transmitted on the free wire. The CAC encoder may provide a crosstalk avoidance encoded word by encoding data received by the CAC encoder as a plurality of information bits . The ECC encoder may be configured to compute an error detection or correction code for the crosstalk avoidance encoded word . The selector circuit may be configured to assign bits of the error detection or correction code to the plurality of free wires for transmission as part of the current bus state and assign the crosstalk avoidance encoded word to wires of the bus that are not used for carrying bits of the error detection or correction code .

In some examples a free wire satisfies a crosstalk avoidance constraint in the current bus state when the free wire and each directly adjacent wire are in a same signaling state in the past state of the multi wire parallel bus. In some instances parallel wires may be aligned in any plane in three dimensional space. For example a first wire may be adjacent to and aligned with a second wire in a horizontal plane and the first wire may be adjacent to and aligned with a third wire in a vertical plane. The crosstalk avoidance encoder is configured to avoid producing opposite direction transitions on pairs of neighboring wires.

In some instances the ECC encoder operates as a block error correction encoder. In other instances the ECC encoder operates as a convolutional encoder. In one example the ECC encoder produces a cyclic redundancy code. When operating as a convolutional encoder the ECC encoder may receive bits of the ECC code sequentially from the queue . The queue may be implemented as a ring buffer a first in first out FIFO register or using some other suitable queuing device or structure. When the ECC encoder operates as a convolutional encoder the selector circuit may be configured to assign each bit obtained from the queue to a free wire encountered in a sequence of wires when a bit of the error detection or correction code is available in the queue while assigning a bit of the crosstalk avoidance encoded word to the free wire when no bits of the error detection or correction code are available in the queue . The selector circuit may assign a bit obtained from the queue to a pair of adjacent wires in the sequence of wires when the queue is full.

The past bus state in the example shows the signaling state for each of the lanes as having a 0 or 1 value which may represent different voltage levels or direction and or magnitude of a current flow. In the past bus state two sets of lanes and have adjacent lanes in the same signaling state. In the first set of lanes three adjacent lanes and are in the 1 signaling state. In the second set of lanes three adjacent lanes and are in the 0 signaling state. In each of these sets of lanes and the center lane and can be set to either signaling state in the current bus state without causing opposite direction transitions within the corresponding set of lanes and . For example if the second lane and the third lane of the bus transition when entering the current bus state the transitions are in the same direction and if only one of the lanes and transition when entering the current bus state the third lane cannot be one of a pair of adjacent lanes or that causes an opposite direction transition. In this example the third lane may be identified as a free wire in the current bus state .

One set of lanes includes two adjacent lanes that are adjacent lanes in the same signaling state the 0 signaling state during the past bus state . In some instances the tenth lane may be identified as a free wire in the current bus state if the two adjacent lanes are physically located at the end of the bus and or next to a wire or conductor that is not expected to transition when the current bus state is entered. In one example the two adjacent lanes may be disposed next to a ground or power rail. In another example the two adjacent lanes may be disposed next to a shielding trace wire or connector. In another example the two adjacent lanes may be disposed next to a trace wire or connector that carries a signal that does not transition at the same time as the signals carried by the two adjacent lanes . In this example different rules may be employed for identifying free wires in different parts of the bus .

While determining the free wires in the current bus state certain pairs of the lanes may be identified as potential sources of violations of a crosstalk avoidance constraint. In the diagram four such locations are identified. Each location and involves a pair of lanes and that are in opposite signaling states in the past bus state and can cause a violation of a crosstalk avoidance constraint when entering the current bus state . For example it is possible that the first lane may transition from signaling state 0 to signaling state 1 as the second lane transitions from signaling state 1 to signaling state 0. These potential violations of crosstalk avoidance constraints are dealt with by the CAC encoder which may take into account the location of the free wires .

In the joint CAC ECC encoder k information bits are encoded for transmission over an n lane bus . The bus may have a sufficient number of lanes to transport p ECC bits without violating crosstalk avoidance constraints. In some instances the number of free wires may exceed the number of ECC bits . The first selector and the CAC encoder may use some of the free wires to carry CAC encoded information bits.

Should the number of free wires be less than the number of parity bits then parity bits may be transmitted on non free wires and may be shielded by for example using two wires to carry one parity bit. illustrates a configuration of a joint CAC ECC encoder that may transmit shielded ECC bits. In one example the CAC ECC encoder of may be reconfigured to shield ECC bits when the number of free wires for a current bus state is less than the number of ECC bits produced by the ECC encoder from an encoded word provided by the CAC encoder . The CAC encoder encodes k information bits to satisfy crosstalk avoidance constraints. The CAC encoder may output an n bit encoded word where n corresponds to the width of the bus . A shielding circuit may duplicate or otherwise spread the p ECC bits over an m bit word that can be inserted into the n bit encoded word produced by the CAC encoder where the n bit encoded word may be merged into and transmitted over m designated or assigned wires of the bus .

A receiver may be adapted to decode bus state that was encoded using joint CAC and ECC encoding in accordance with certain aspects disclosed herein. is a factor graph applicable to joint ECC and CAC decoding. The operation of the receiver is described with the assumption that the past state is known correctly. From the past state the receiver may determine the position and number of free wires . For ease of description an example is used in which the number of free wires is exactly equal to the number of parity bits although the principles and techniques also apply to examples in which the number of free wires is different from the number of parity bits .

In one example a receiver may include a decoder that detects the occurrence of one or more errors and requests retransmissions when an error is detected. In another example a receiver may include a decoder that detects the occurrence of errors and can correct one or more errors without retransmission. The type and or complexity of the decoder used in a receiver may be selected based on application needs requirements and or other specifications.

In one example a receiver used in a latency limited application may verify whether the data bits corresponding to the current bus state satisfy both CAC constraints and ECC checks simultaneously. In this example the receiver computes a syndrome to check if an error has occurred. The syndrome may be computed as the output of all the parity constraints for the current bus state . Concurrently the receiver checks whether each local crosstalk constraint is satisfied for the received CAC encoded portion of the current bus state . An error may be detected when a local crosstalk constraint is violated. If an error is detected the receiver may request a retransmission.

In another example the receiver may attempt to correct transmission errors without having the data retransmitted. In this example the receiver may employ a decoder that performs joint CAC decoding and ECC decoding to reliably recover the information bits. In some instances a modified belief propagation decoder may be used. A modified belief propagation decoder may pass messages along the factor graph including along the relationship lines between the portion of the current bus state that includes CAC encoded data and the parity bits . The belief propagation decoder can be modified to take the nonlinear CAC constraints into account. In other instances a modified Viterbi decoder can be used to enable error detection. Joint decoding of the CAC and ECC may advantageously provide increased error protection over conventional approaches that rely of ECC encoding for error correction.

The decoder may include a CAC decoder an ECC decoder and a bus state memory . The bus state memory may include one or more registers. The bus state memory may be implemented in a memory device and or any suitable storage medium. The bus state memory may maintain a history of prior bus states and may provide access or copies of the last decoded bus state as a bus state history that may be provided to a processing circuit . In one example the bus state memory provides a control signal to indicate the last decoded bus state to the CAC decoder and ECC decoder . The control signal may include a copy of the last decoded bus state and may include other information related to the operation of the CAC decoder and the ECC decoder . For example the control signal may indicate one or more free wires. The CAC decoder and the ECC decoder may determine the positions of the free wires using the last decoded bus state indicated in the control signal .

The CAC decoder and the ECC decoder may receive the current bus state from line receivers or other interface circuits. The CAC decoder and the ECC decoder may be configured to jointly decode the current bus state and to detect errors. In some examples the CAC decoder and the ECC decoder may be configured to correct certain types of error when errors are detected. A processing circuit or other controller may determine a mode of operation for the decoder and may select error detection and or correction configurations. In one example the processing circuit may perform or control certain functions associated with a modified Viterbi decoder or a belief propagation decoder adapted in accordance with certain aspects disclosed herein. In another example the CAC decoder may receive information from the ECC decoder that enables the CAC decoder to decode an error corrected version of the current bus state .

In the illustrated example the processing circuit may be implemented with a bus architecture represented generally by the bus . The bus may include any number of interconnecting buses and bridges depending on the specific application of the processing circuit and the overall design constraints. The bus links together various circuits including the one or more processors and storage . Storage may include memory devices and mass storage devices and may be referred to herein as computer readable media and or processor readable media. The bus may also link various other circuits such as timing sources timers peripherals voltage regulators and power management circuits. A bus interface may provide an interface between the bus and one or more line interface circuits . A line interface circuit may be provided for each networking technology supported by the processing circuit. In some instances multiple networking technologies may share some or all of the circuitry or processing modules found in a line interface circuit . Each line interface circuit provides a means for communicating with various other apparatus over a transmission medium. Depending upon the nature of the apparatus a user interface e.g. keypad display speaker microphone joystick may also be provided and may be communicatively coupled to the bus directly or through the bus interface .

A processor may be responsible for managing the bus and for general processing that may include the execution of software stored in a computer readable medium that may include the storage . In this respect the processing circuit including the processor may be used to implement any of the methods functions and techniques disclosed herein. The storage may be used for storing data that is manipulated by the processor when executing software and the software may be configured to implement any one of the methods disclosed herein.

One or more processors in the processing circuit may execute software. Software shall be construed broadly to mean instructions instruction sets code code segments program code programs subprograms software modules applications software applications software packages routines subroutines objects executables threads of execution procedures functions algorithms etc. whether referred to as software firmware middleware microcode hardware description language or otherwise. The software may reside in computer readable form in the storage or in an external computer readable medium. The external computer readable medium and or storage may include a non transitory computer readable medium. A non transitory computer readable medium includes by way of example a magnetic storage device e.g. hard disk floppy disk magnetic strip an optical disk e.g. a compact disc CD or a digital versatile disc DVD a smart card a flash memory device e.g. a flash drive a card a stick or a key drive a random access memory RAM a read only memory ROM a programmable ROM PROM an erasable PROM EPROM an electrically erasable PROM EEPROM a register a removable disk and any other suitable medium for storing software and or instructions that may be accessed and read by a computer. The computer readable medium and or storage may also include by way of example a carrier wave a transmission line and any other suitable medium for transmitting software and or instructions that may be accessed and read by a computer. Computer readable medium and or the storage may reside in the processing circuit in the processor external to the processing circuit or be distributed across multiple entities including the processing circuit . The computer readable medium and or storage may be embodied in a computer program product. By way of example a computer program product may include a computer readable medium in packaging materials. Those skilled in the art will recognize how best to implement the described functionality presented throughout this disclosure depending on the particular application and the overall design constraints imposed on the overall system.

The storage may maintain software maintained and or organized in loadable code segments modules applications programs etc. which may be referred to herein as software modules . Each of the software modules may include instructions and data that when installed or loaded on the processing circuit and executed by the one or more processors contribute to a run time image that controls the operation of the one or more processors . When executed certain instructions may cause the processing circuit to perform functions in accordance with certain methods algorithms and processes described herein.

Some of the software modules may be loaded during initialization of the processing circuit and these software modules may configure the processing circuit to enable performance of the various functions disclosed herein. For example some software modules may configure internal devices and or logic circuits of the processor and may manage access to external devices such as the line interface circuit the bus interface the user interface timers mathematical coprocessors and so on. The software modules may include a control program and or an operating system that interacts with interrupt handlers and device drivers and that controls access to various resources provided by the processing circuit . The resources may include memory processing time access to the line interface circuit the user interface and so on.

One or more processors of the processing circuit may be multifunctional whereby some of the software modules are loaded and configured to perform different functions or different instances of the same function. The one or more processors may additionally be adapted to manage background tasks initiated in response to inputs from the user interface the line interface circuit and device drivers for example. To support the performance of multiple functions the one or more processors may be configured to provide a multitasking environment whereby each of a plurality of functions is implemented as a set of tasks serviced by the one or more processors as needed or desired. In one example the multitasking environment may be implemented using a timesharing program that passes control of a processor between different tasks whereby each task returns control of the one or more processors to the timesharing program upon completion of any outstanding operations and or in response to an input such as an interrupt. When a task has control of the one or more processors the processing circuit is effectively specialized for the purposes addressed by the function associated with the controlling task. The timesharing program may include an operating system a main loop that transfers control on a round robin basis a function that allocates control of the one or more processors in accordance with a prioritization of the functions and or an interrupt driven main loop that responds to external events by providing control of the one or more processors to a handling function.

At block the device may determine from a prior bus state a plurality of free wires in the bus for a current bus state. Each free wire may satisfy a crosstalk avoidance constraint in the current bus state for all values of a bit transmitted on the free wire. A free wire may satisfy a crosstalk avoidance constraint in the current bus state when it is in the same signaling state as each directly adjacent wire in the prior bus state.

At block the device may encode a plurality of data bits using a crosstalk avoidance encoder to obtain a CAC encoded word. The crosstalk avoidance encoder may be configured to avoid producing opposite direction transitions on pairs of neighboring wires.

At block the device may assign bits of the error detection or correction code to the plurality of free wires for transmission during the current bus state.

At block the device may assign the CAC encoded word to wires that are not used for carrying bits of the error detection or correction code. At least a portion of the CAC encoded word may be assigned to wires that are not free wires. In some instances one or more bits of the CAC encoded word may be assigned to wires that are free wires during the current bus state.

In one example computing an error detection or correction code includes generating a block error correction code from the CAC encoded word. In another example computing an error detection or correction code may include generating a cyclic redundancy code from the CAC encoded word. In some instances the cyclic redundancy code may have 8 bits. In another example computing an error detection or correction code includes generating the error detection or correction code using a convolutional encoder. In some instances the plurality of data bits is sequentially encoded. Assigning bits of the error detection or correction code may include queuing bits of the error detection or correction code received from the convolutional encoder in a queue assigning a bit obtained from the queue to a free wire encountered in a sequence of wires when a bit of the error detection or correction code is available in the queue and assigning a bit of the CAC encoded word to the free wire when no bits of the error detection or correction code are available in the queue. In one example the sequence of wires may include wires of the bus ordered such that each wire in the sequence is physically adjacent to predecessor and successor wires in the sequence of wires.

In some instances assigning bits of the error detection or correction code may include queuing bits of the error detection or correction code received from the convolutional encoder in a queue and using a pair of adjacent wires in the sequence of wires to carry one parity bit when the queue is full.

The processor is responsible for general processing including the execution of software stored on the computer readable storage medium . The software when executed by the processor causes the processing circuit to perform the various functions described supra for any particular apparatus. The computer readable storage medium may also be used for storing data that is manipulated by the processor when executing software including data decoded from symbols transmitted over the multi wire communication link which may be configured as data lanes and clock lanes. The processing circuit further includes at least one of the modules and . The modules and may be software modules running in the processor resident stored in the computer readable storage medium one or more hardware modules coupled to the processor or some combination thereof. The and or may include microcontroller instructions state machine configuration parameters or some combination thereof.

In one configuration the apparatus for data communication includes modules and or circuits configured to determine free wires of the multi wire communication link for a past bus state. The apparatus may include modules and or circuits configured to encode information bits in a CAC encoded word and modules and or circuits configured to calculate an ECC for the CAC encoded word. The apparatus may include modules and or circuits configured to assign ECC bits to free wires and bits of the CAC encoded word to non free wires.

At block the device may determine from a prior bus state a plurality of free wires in the bus for a current bus state. Each free wire may satisfy a crosstalk avoidance constraint in the current bus state for all values of a bit transmitted on the free wire.

At block the device may receive an error detection or correction code from the plurality of free wires.

At block the device may jointly operate a crosstalk avoidance decoder and an error detection or correction decoder to decode the current bus state.

In some examples the error detection or correction decoder is configured to detect the occurrence of one or more errors. In some instances the device may request retransmission of data encoded in the current bus state when an error is detected. In other instances the device may correct one or more errors in the current bus state when an error is detected.

In some examples the device may operate the crosstalk avoidance decoder and the error detection or correction decoder jointly by concurrently verifying whether data bits corresponding to the current bus state satisfy crosstalk avoidance constraints and checking the error detection or correction code to determine whether a transmission error affecting the current bus state has occurred. In other examples the device may operate the crosstalk avoidance decoder and the error detection or correction decoder jointly by verifying whether data bits corresponding to the current bus state satisfy crosstalk avoidance constraints and correcting a transmission error using the error detection or correction code.

In some examples the device may use a modified belief propagation decoder to ensure reliability of the plurality of data bits decoded from the current bus state. In other examples the device may use a Viterbi decoder to ensure reliability of the plurality of data bits decoded from the current bus state.

The processor is responsible for general processing including the execution of software stored on the computer readable storage medium . The software when executed by the processor causes the processing circuit to perform the various functions described supra for any particular apparatus. The computer readable storage medium may also be used for storing data that is manipulated by the processor when executing software including data decoded from symbols transmitted over the multi wire communication link which may be configured as data lanes and clock lanes. The processing circuit further includes at least one of the modules and . The modules and may be software modules running in the processor resident stored in the computer readable storage medium one or more hardware modules coupled to the processor or some combination thereof. The and or may include microcontroller instructions state machine configuration parameters or some combination thereof.

In one configuration the apparatus for data communication includes modules and or circuits configured to determine from a prior bus state a plurality of free wires in the bus for a current bus state modules and or circuits configured to receive an error detection or correction code from the plurality of free wires and modules and or circuits configured to decode the current bus state. The apparatus may jointly operate a crosstalk avoidance decoder and an error detection or correction decoder to provide a plurality of data bits decoded from the current bus state.

It is understood that the specific order or hierarchy of steps in the processes disclosed is an illustration of exemplary approaches. The specific order or hierarchy of steps in the processes may be rearranged based upon design preferences. The accompanying method claims present elements of the various steps in a sample order and are not meant to be limited to the specific order or hierarchy presented.

As used in this application the terms component module system and the like are intended to include a computer related entity such as but not limited to hardware firmware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a computing device and the computing device can be a component. One or more components can reside within a process and or thread of execution and a component may be localized on one computing device and or distributed between two or more computing devices. In addition these components can execute from various computer readable media having various data structures stored thereon. The components may communicate by way of local and or remote processes such as in accordance with a signal having one or more data packets such as data from one component interacting with another component in a local system distributed system and or across a network such as the Internet with other systems by way of the signal.

Moreover the term or is intended to mean an inclusive or rather than an exclusive or. That is unless specified otherwise or clear from the context the phrase X employs A or B is intended to mean any of the natural inclusive permutations. That is the phrase X employs A or B is satisfied by any of the following instances X employs A X employs B or X employs both A and B. In addition the articles a and an as used in this application and the appended claims should generally be construed to mean one or more unless specified otherwise or clear from the context to be directed to a singular form.

The previous description is provided to enable any person skilled in the art to practice the various aspects described herein. Various modifications to these aspects will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other aspects. Thus the claims are not intended to be limited to the aspects shown herein but is to be accorded the full scope consistent with the language claims wherein reference to an element in the singular is not intended to mean one and only one unless specifically so stated but rather one or more. Unless specifically stated otherwise the term some refers to one or more. All structural and functional equivalents to the elements of the various aspects described throughout this disclosure that are known or later come to be known to those of ordinary skill in the art are expressly incorporated herein by reference and are intended to be encompassed by the claims. Moreover nothing disclosed herein is intended to be dedicated to the public regardless of whether such disclosure is explicitly recited in the claims. No claim element is to be construed as a means plus function unless the element is expressly recited using the phrase means for. 

