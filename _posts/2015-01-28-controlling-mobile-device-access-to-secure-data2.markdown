---

title: Controlling mobile device access to secure data
abstract: Various aspects of the disclosure relate to providing secure containers or data vaults for data of one or more managed applications. In some embodiments, each managed application may be assigned its own private data vault and/or may be assigned a shared data vault that is accessible to at least one other managed application. As the managed application executes, calls for access to the data may be intercepted and redirected to the secure containers. Data stored in a secure container may be encrypted according to a policy. Other aspects relate to deleting data from a secure container, such as via a selective wipe of data associated with a managed application. Further aspects relate to configuring and creating the secure containers, retrieving key information required to encrypt/decrypt the data stored in the secure containers, and publishing the managed applications, policy information and key information for download to a mobile device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09602474&OS=09602474&RS=09602474
owner: Citrix Systems, Inc.
number: 09602474
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20150128
---
This application is a continuation of and claims priority to U.S. Non Provisional application Ser. No. 14 041 911 filed Sep. 30 2013 and entitled CONTROLLING MOBILE DEVICE ACCESS TO SECURE DATA which claims priority to U.S. Non Provisional patent application Ser. No. 14 039 632 filed Sep. 27 2013 and entitled CONTROLLING MOBILE DEVICE ACCESS TO SECURE DATA and the following provisional applications U.S. Provisional Patent Application Ser. No. 61 861 910 filed Aug. 2 2013 and entitled CONTROLLING MOBILE DEVICE ACCESS TO SECURE DATA U.S. Provisional Patent Application Ser. No. 61 714 293 filed Oct. 16 2012 and entitled MANAGING ENCRYPTED DATA VAULTS FOR MANAGED APPLICATIONS ON UNMANAGED MOBILE DEVICE and U.S. Provisional Patent Application Ser. No. 61 806 577 filed Mar. 29 2013 and entitled SYSTEMS AND METHODS FOR ENTERPRISE MOBILITY MANAGEMENT. 

Aspects of the disclosure relate to computer hardware and software. In particular one or more aspects of the disclosure generally relate to computer hardware and software for providing an enterprise application store.

Increasingly corporations and other organizations are providing and or otherwise enabling their employees and other associates with mobile devices such as smart phones tablet computers and other mobile computing devices. As these devices continue to grow in popularity and provide an increasing number of functions many organizations may wish to place certain controls on how these devices can be used what resources these devices can access and how the applications running on these devices can interact with other resources.

Aspects of the disclosure provide more efficient effective functional and convenient ways of controlling how mobile devices can be used what resources mobile devices can access and how the applications running on these devices can interact with other resources. In particular in one or more embodiments discussed in greater detail below an enterprise application store may be implemented that can provide these and features.

Various aspects of the disclosure relate to providing secure containers or data vaults for data of one or more managed applications. In some embodiments each managed application may be assigned its own private data vault and or may be assigned a shared data vault that is accessible to at least one other managed application. As the managed application executes calls for access to the data may be intercepted and redirected to the secure containers. Data stored in a secure container may be encrypted according to a policy.

Other aspects relate to deleting data from a secure container such as via a selective wipe of data associated with a managed application. For example some aspects relate to a mobile device intercepting a read or write operation from a managed application executing on the mobile device accessing based on the read or write operation a secure container that is a logical interface into which read or write operations are redirected and in which data is in an encrypted form determining to perform a selective wipe of data associated with the managed application and deleting encrypted data from the secure container.

Additional aspects relate to creating or otherwise configuring a secure container. For example some aspects relate to a mobile device obtaining policy information via an access gateway through which a resource required by a managed application is accessible wherein the policy information defines a secure container to be used when the managed application is executing obtaining key information via the access gateway wherein the key information includes one or more keys for encrypting or decrypting data of the secure container configuring the secure container based on the policy information wherein the secure container is a logical interface into which read or write operations are redirected and in which data is in an encrypted form intercepting a read or write operation from the managed application while the managed application is executing on the mobile device and accessing based on the read or write operation the secure container.

Further aspects relate to receiving key information required to encrypt decrypt the data stored in the secure containers. For example some aspects relate to a mobile device transmitting a message to an access gateway through which a resource required by a managed application is accessible wherein the message is in connection with an authorization process for accessing said resource receiving key information via the access gateway wherein the key information includes one or more keys for encrypting or decrypting data of a secure container that is a logical interface into which read or write operations are redirected and in which data is in an encrypted form intercepting a read or write operation from the managed application while the managed application is executing on the mobile device and accessing based on the read or write operation and the one or more keys the secure container.

Yet further aspects relate to publishing the managed applications policy information and key information for download to a mobile device. For example some aspects relate to one or more computing devices determining for a managed application that is to be made accessible for installing on one or more mobile devices policy information that defines one or more secure containers to be used when the managed application is executing determining key information that includes one or more keys for encrypting or decrypting data of the one or more secure containers publishing the managed application policy information and key information such that all are accessible for installing on the one or more mobile devices and transmitting the managed application policy information and key information to a mobile device.

In the following description of the various embodiments reference is made to the accompanying drawings identified above and which form a part hereof and in which is shown by way of illustration various embodiments in which aspects described herein may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope described herein. Various aspects are capable of other embodiments and of being practiced or being carried out in various different ways.

As a general introduction to the subject matter described in more detail below various aspects of the disclosure relate to providing secure containers or data vaults for data of one or more managed applications. In some embodiments each managed application may be assigned its own private data vault and or may be assigned a shared data vault that is accessible to at least one other managed application. As the managed application executes calls for access to the data may be intercepted and redirected to the secure containers. Data stored in a secure container may be encrypted according to a policy that may be set by an enterprise. Accordingly data retrieved from the secure containers may need to be decrypted prior to forwarding to the application. Other aspects relate to deleting data from a secure container such as via a selective wipe of data associated with a managed application e.g. when the managed application is uninstalled or when mobile device is operated in violation the enterprise s policy . Further aspects relate to configuring and creating the secure containers retrieving key information required to encrypt decrypt the data stored in the secure containers and publishing the managed applications policy information and key information for download to a mobile device e.g. in an application store .

It is to be understood that the phraseology and terminology used herein are for the purpose of description and should not be regarded as limiting. Rather the phrases and terms used herein are to be given their broadest interpretation and meaning. The use of including and comprising and variations thereof is meant to encompass the items listed thereafter and equivalents thereof as well as additional items and equivalents thereof. The use of the terms mounted connected coupled positioned engaged and similar terms is meant to include both direct and indirect mounting connecting coupling positioning and engaging.

Computer software hardware and networks may be utilized in a variety of different system environments including standalone networked remote access aka remote desktop virtualized and or cloud based environments among others. illustrates one example of a system architecture and data processing device that may be used to implement one or more illustrative aspects described herein in a standalone and or networked environment. Various network nodes and may be interconnected via a wide area network WAN such as the Internet. Other networks may also or alternatively be used including private intranets corporate networks LANs metropolitan area networks MAN wireless networks personal networks PAN and the like. Network is for illustration purposes and may be replaced with fewer or additional computer networks. A local area network LAN may have one or more of any known LAN topology and may use one or more of a variety of different protocols such as Ethernet. Devices and other devices not shown may be connected to one or more of the networks via twisted pair wires coaxial cable fiber optics radio waves or other communication media.

The term network as used herein and depicted in the drawings refers not only to systems in which remote storage devices are coupled together via one or more communication paths but also to stand alone devices that may be coupled from time to time to such systems that have storage capability. Consequently the term network includes not only a physical network but also a content network which is comprised of the data attributable to a single entity which resides across all physical networks.

The components may include data server web server and client computers . Data server provides overall access control and administration of databases and control software for performing one or more illustrative aspects describe herein. Data server may be connected to web server through which users interact with and obtain data as requested. Alternatively data server may act as a web server itself and be directly connected to the Internet. Data server may be connected to web server through the network e.g. the Internet via direct or indirect connection or via some other network. Users may interact with the data server using remote computers e.g. using a web browser to connect to the data server via one or more externally exposed web sites hosted by web server . Client computers may be used in concert with data server to access data stored therein or may be used for other purposes. For example from client device a user may access web server using an Internet browser as is known in the art or by executing a software application that communicates with web server and or data server over a computer network such as the Internet .

Servers and applications may be combined on the same physical machines and retain separate virtual or logical addresses or may reside on separate physical machines. illustrates just one example of a network architecture that may be used and those of skill in the art will appreciate that the specific network architecture and data processing devices used may vary and are secondary to the functionality that they provide as further described herein. For example services provided by web server and data server may be combined on a single server.

Each component may be any type of known computer server or data processing device. Data server e.g. may include a processor controlling overall operation of the rate server . Data server may further include RAM ROM network interface input output interfaces e.g. keyboard mouse display printer etc. and memory . I O may include a variety of interface units and drives for reading writing displaying and or printing data or files. Memory may further store operating system software for controlling overall operation of the data processing device control logic for instructing data server to perform aspects described herein and other application software providing secondary support and or other functionality which may or might not be used in conjunction with aspects described herein. The control logic may also be referred to herein as the data server software . Functionality of the data server software may refer to operations or decisions made automatically based on rules coded into the control logic made manually by a user providing input into the system and or a combination of automatic processing based on user input e.g. queries data updates etc. .

Memory may also store data used in performance of one or more aspects described herein including a first database and a second database . In some embodiments the first database may include the second database e.g. as a separate table report etc. . That is the information can be stored in a single database or separated into different logical virtual or physical databases depending on system design. Devices may have similar or different architecture as described with respect to device . Those of skill in the art will appreciate that the functionality of data processing device or device as described herein may be spread across multiple data processing devices for example to distribute processing load across multiple computers to segregate transactions based on geographic location user access level quality of service QoS etc.

One or more aspects may be embodied in computer usable or readable data and or computer executable instructions such as in one or more program modules executed by one or more computers or other devices as described herein. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types when executed by a processor in a computer or other device. The modules may be written in a source code programming language that is subsequently compiled for execution or may be written in a scripting language such as but not limited to HTML or XML. The computer executable instructions may be stored on a computer readable medium such as a nonvolatile storage device. Any suitable computer readable storage media may be utilized including hard disks CD ROMs optical storage devices magnetic storage devices and or any combination thereof. In addition various transmission non storage media representing data or events as described herein may be transferred between a source and a destination in the form of electromagnetic waves traveling through signal conducting media such as metal wires optical fibers and or wireless transmission media e.g. air and or space . Various aspects described herein may be embodied as a method a data processing system or a computer program product. Therefore various functionalities may be embodied in whole or in part in software firmware and or hardware or hardware equivalents such as integrated circuits field programmable gate arrays FPGA and the like. Particular data structures may be used to more effectively implement one or more aspects described herein and such data structures are contemplated within the scope of computer executable instructions and computer usable data described herein.

With further reference to one or more aspects described herein may be implemented in a remote access environment. depicts an example system architecture including a generic computing device in an illustrative computing environment that may be used according to one or more illustrative aspects described herein. Generic computing device may be used as a server in a single server or multi server desktop virtualization system e.g. a remote access or cloud system configured to provide virtual machines for client access devices. The generic computing device may have a processor for controlling overall operation of the server and its associated components including random access memory RAM read only memory ROM input output I O module and memory .

I O module may include a mouse keypad touch screen scanner optical reader and or stylus or other input device s through which a user of generic computing device may provide input and may also include one or more of a speaker for providing audio output and a video display device for providing textual audiovisual and or graphical output. Software may be stored within memory and or other storage to provide instructions to processor for configuring generic computing device into a special purpose computing device in order to perform various functions as described herein. For example memory may store software used by the computing device such as an operating system application programs and an associated database .

Computing device may operate in a networked environment supporting connections to one or more remote computers such as terminals also referred to as client devices . The terminals may be personal computers mobile devices laptop computers tablets or servers that include many or all of the elements described above with respect to the generic computing device or . The network connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. When used in a LAN networking environment computing device may be connected to the LAN through a network interface or adapter . When used in a WAN networking environment computing device may include a modem or other wide area network interface for establishing communications over the WAN such as computer network e.g. the Internet . It will be appreciated that the network connections shown are illustrative and other means of establishing a communications link between the computers may be used. Computing device and or terminals may also be mobile terminals e.g. mobile phones smartphones PDAs notebooks etc. including various other components such as a battery speaker and antennas not shown .

Aspects described herein may also be operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of other computing systems environments and or configurations that may be suitable for use with aspects described herein include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

As shown in one or more client devices may be in communication with one or more servers generally referred to herein as server s . In one embodiment the computing environment may include a network appliance installed between the server s and client machine s . The network appliance may manage client server connections and in some cases can load balance client connections amongst a plurality of backend servers .

The client machine s may in some embodiments be referred to as a single client machine or a single group of client machines while server s may be referred to as a single server or a single group of servers . In one embodiment a single client machine communicates with more than one server while in another embodiment a single server communicates with more than one client machine . In yet another embodiment a single client machine communicates with a single server .

A client machine can in some embodiments be referenced by any one of the following non exhaustive terms client machine s client s client computer s client device s client computing device s local machine remote machine client node s endpoint s or endpoint node s . The server in some embodiments may be referenced by any one of the following non exhaustive terms server s local machine remote machine server farm s or host computing device s .

In one embodiment the client machine may be a virtual machine. The virtual machine may be any virtual machine while in some embodiments the virtual machine may be any virtual machine managed by a Type 1 or Type 2 hypervisor for example a hypervisor developed by Citrix Systems IBM VMware or any other hypervisor. In some aspects the virtual machine may be managed by a hypervisor while in aspects the virtual machine may be managed by a hypervisor executing on a server or a hypervisor executing on a client .

Some embodiments include a client device that displays application output generated by an application remotely executing on a server or other remotely located machine. In these embodiments the client device may execute a virtual machine receiver program or application to display the output in an application window a browser or other output window. In one example the application is a desktop while in other examples the application is an application that generates or presents a desktop. A desktop may include a graphical shell providing a user interface for an instance of an operating system in which local and or remote applications can be integrated. Applications as used herein are programs that execute after an instance of an operating system and optionally also the desktop has been loaded.

The server in some embodiments uses a remote presentation protocol or other program to send data to a thin client or remote display application executing on the client to present display output generated by an application executing on the server . The thin client or remote display protocol can be any one of the following non exhaustive list of protocols the Independent Computing Architecture ICA protocol developed by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash.

A remote computing environment may include more than one server such that the servers are logically grouped together into a server farm for example in a cloud computing environment. The server farm may include servers that are geographically dispersed while and logically grouped together or servers that are located proximate to each other while logically grouped together. Geographically dispersed servers within a server farm can in some embodiments communicate using a WAN wide MAN metropolitan or LAN local where different geographic regions can be characterized as different continents different regions of a continent different countries different states different cities different campuses different rooms or any combination of the preceding geographical locations. In some embodiments the server farm may be administered as a single entity while in other embodiments the server farm can include multiple server farms.

In some embodiments a server farm may include servers that execute a substantially similar type of operating system platform e.g. WINDOWS UNIX LINUX iOS ANDROID SYMBIAN etc. In other embodiments server farm may include a first group of one or more servers that execute a first type of operating system platform and a second group of one or more servers that execute a second type of operating system platform.

Server may be configured as any type of server as needed e.g. a file server an application server a web server a proxy server an appliance a network appliance a gateway an application gateway a gateway server a virtualization server a deployment server a SSL VPN server a firewall a web server an application server or as a master application server a server executing an active directory or a server executing an application acceleration program that provides firewall functionality application functionality or load balancing functionality. Other server types may also be used.

Some embodiments include a first server that receives requests from a client machine forwards the request to a second server and responds to the request generated by the client machine with a response from the second server . First server may acquire an enumeration of applications available to the client machine and well as address information associated with an application server hosting an application identified within the enumeration of applications. First server can then present a response to the client s request using a web interface and communicate directly with the client to provide the client with access to an identified application. One or more clients and or one or more servers may transmit data over network e.g. network .

With further reference to a computer device may be configured as a virtualization server in a virtualization environment for example a single server multi server or cloud computing environment. Virtualization server illustrated in can be deployed as and or implemented by one or more embodiments of the server illustrated in or by other known computing devices. Included in virtualization server is a hardware layer that can include one or more physical disks one or more physical devices one or more physical processors and one or more physical memories . In some embodiments firmware can be stored within a memory element in the physical memory and can be executed by one or more of the physical processors . Virtualization server may further include an operating system that may be stored in a memory element in the physical memory and executed by one or more of the physical processors . Still further a hypervisor may be stored in a memory element in the physical memory and can be executed by one or more of the physical processors .

Executing on one or more of the physical processors may be one or more virtual machines A C generally . Each virtual machine may have a virtual disk A C and a virtual processor A C. In some embodiments a first virtual machine A may execute using a virtual processor A a control program that includes a tools stack . Control program may be referred to as a control virtual machine Dom Domain or other virtual machine used for system administration and or control. In some embodiments one or more virtual machines B C can execute using a virtual processor B C a guest operating system A B.

Virtualization server may include a hardware layer with one or more pieces of hardware that communicate with the virtualization server . In some embodiments the hardware layer can include one or more physical disks one or more physical devices one or more physical processors and one or more memory . Physical components and may include for example any of the components described above. Physical devices may include for example a network interface card a video card a keyboard a mouse an input device a monitor a display device speakers an optical drive a storage device a universal serial bus connection a printer a scanner a network element e.g. router firewall network address translator load balancer virtual private network VPN gateway Dynamic Host Configuration Protocol DHCP router etc. or any device connected to or communicating with virtualization server . Physical memory in the hardware layer may include any type of memory. Physical memory may store data and in some embodiments may store one or more programs or set of executable instructions. illustrates an embodiment where firmware is stored within the physical memory of virtualization server . Programs or executable instructions stored in the physical memory can be executed by the one or more processors of virtualization server .

Virtualization server may also include a hypervisor . In some embodiments hypervisor may be a program executed by processors on virtualization server to create and manage any number of virtual machines . Hypervisor may be referred to as a virtual machine monitor or platform virtualization software. In some embodiments hypervisor can be any combination of executable instructions and hardware that monitors virtual machines executing on a computing machine. Hypervisor may be Type 2 hypervisor where the hypervisor that executes within an operating system executing on the virtualization server . Virtual machines then execute at a level above the hypervisor. In some embodiments the Type 2 hypervisor executes within the context of a user s operating system such that the Type 2 hypervisor interacts with the user s operating system. In other embodiments one or more virtualization servers in a virtualization environment may instead include a Type 1 hypervisor not shown . A Type 1 hypervisor may execute on the virtualization server by directly accessing the hardware and resources within the hardware layer . That is while a Type 2 hypervisor accesses system resources through a host operating system as shown a Type 1 hypervisor may directly access all system resources without the host operating system . A Type 1 hypervisor may execute directly on one or more physical processors of virtualization server and may include program data stored in the physical memory .

Hypervisor in some embodiments can provide virtual resources to operating systems or control programs executing on virtual machines in any manner that simulates the operating systems or control programs having direct access to system resources. System resources can include but are not limited to physical devices physical disks physical processors physical memory and any other component included in virtualization server hardware layer . Hypervisor may be used to emulate virtual hardware partition physical hardware virtualize physical hardware and or execute virtual machines that provide access to computing environments. In still other embodiments hypervisor controls processor scheduling and memory partitioning for a virtual machine executing on virtualization server . Hypervisor may include those manufactured by VMWare Inc. of Palo Alto Calif. the XEN hypervisor an open source product whose development is overseen by the open source Xen.org community HyperV VirtualServer or virtual PC hypervisors provided by Microsoft or others. In some embodiments virtualization server executes a hypervisor that creates a virtual machine platform on which guest operating systems may execute. In these embodiments the virtualization server may be referred to as a host server. An example of such a virtualization server is the XEN SERVER provided by Citrix Systems Inc. of Fort Lauderdale Fla.

Hypervisor may create one or more virtual machines B C generally in which guest operating systems execute. In some embodiments hypervisor may load a virtual machine image to create a virtual machine . In other embodiments the hypervisor may executes a guest operating system within virtual machine . In still other embodiments virtual machine may execute guest operating system .

In addition to creating virtual machines hypervisor may control the execution of at least one virtual machine . In other embodiments hypervisor may presents at least one virtual machine with an abstraction of at least one hardware resource provided by the virtualization server e.g. any hardware resource available within the hardware layer . In other embodiments hypervisor may control the manner in which virtual machines access physical processors available in virtualization server . Controlling access to physical processors may include determining whether a virtual machine should have access to a processor and how physical processor capabilities are presented to the virtual machine .

As shown in virtualization server may host or execute one or more virtual machines . A virtual machine is a set of executable instructions that when executed by a processor imitate the operation of a physical computer such that the virtual machine can execute programs and processes much like a physical computing device. While illustrates an embodiment where a virtualization server hosts three virtual machines in other embodiments virtualization server can host any number of virtual machines . Hypervisor in some embodiments provides each virtual machine with a unique virtual view of the physical hardware memory processor and other system resources available to that virtual machine . In some embodiments the unique virtual view can be based on one or more of virtual machine permissions application of a policy engine to one or more virtual machine identifiers a user accessing a virtual machine the applications executing on a virtual machine networks accessed by a virtual machine or any other desired criteria. For instance hypervisor may create one or more unsecure virtual machines and one or more secure virtual machines . Unsecure virtual machines may be prevented from accessing resources hardware memory locations and programs that secure virtual machines may be permitted to access. In other embodiments hypervisor may provide each virtual machine with a substantially similar virtual view of the physical hardware memory processor and other system resources available to the virtual machines .

Each virtual machine may include a virtual disk A C generally and a virtual processor A C generally . The virtual disk in some embodiments is a virtualized view of one or more physical disks of the virtualization server or a portion of one or more physical disks of the virtualization server . The virtualized view of the physical disks can be generated provided and managed by the hypervisor . In some embodiments hypervisor provides each virtual machine with a unique view of the physical disks . Thus in these embodiments the particular virtual disk included in each virtual machine can be unique when compared with the other virtual disks .

A virtual processor can be a virtualized view of one or more physical processors of the virtualization server . In some embodiments the virtualized view of the physical processors can be generated provided and managed by hypervisor . In some embodiments virtual processor has substantially all of the same characteristics of at least one physical processor . In other embodiments virtual processor provides a modified view of physical processors such that at least some of the characteristics of the virtual processor are different than the characteristics of the corresponding physical processor .

With further reference to some aspects described herein may be implemented in a cloud based environment. illustrates an example of a cloud computing environment or cloud system . As seen in client computers may communicate with a cloud management server to access the computing resources e.g. host servers storage resources and network resources of the cloud system.

Management server may be implemented on one or more physical servers. The management server may run for example CLOUDSTACK by Citrix Systems Inc. of Ft. Lauderdale Fla. or OPENSTACK among others. Management server may manage various computing resources including cloud hardware and software resources for example host computers data storage devices and networking devices . The cloud hardware and software resources may include private and or public components. For example a cloud may be configured as a private cloud to be used by one or more particular customers or client computers and or over a private network. In other embodiments public clouds or hybrid public private clouds may be used by other customers over an open or hybrid networks.

Management server may be configured to provide user interfaces through which cloud operators and cloud customers may interact with the cloud system. For example the management server may provide a set of APIs and or one or more cloud operator console applications e.g. web based on standalone applications with user interfaces to allow cloud operators to manage the cloud resources configure the virtualization layer manage customer accounts and perform other cloud administration tasks. The management server also may include a set of APIs and or one or more customer console applications with user interfaces configured to receive cloud computing requests from end users via client computers for example requests to create modify or destroy virtual machines within the cloud. Client computers may connect to management server via the Internet or other communication network and may request access to one or more of the computing resources managed by management server . In response to client requests the management server may include a resource manager configured to select and provision physical resources in the hardware layer of the cloud system based on the client requests. For example the management server and additional components of the cloud system may be configured to provision create and manage virtual machines and their operating environments e.g. hypervisors storage resources services offered by the network elements etc. for customers at client computers over a network e.g. the Internet providing customers with computational resources data storage services networking capabilities and computer platform and application support. Cloud systems also may be configured to provide various specific services including security systems development environments user interfaces and the like.

Certain clients may be related for example different client computers creating virtual machines on behalf of the same end user or different users affiliated with the same company or organization. In other examples certain clients may be unrelated such as users affiliated with different companies or organizations. For unrelated clients information on the virtual machines or storage of any one user may be hidden from other users.

Referring now to the physical hardware layer of a cloud computing environment availability zones or zones may refer to a collocated set of physical computing resources. Zones may be geographically separated from other zones in the overall cloud of computing resources. For example zone may be a first cloud datacenter located in California and zone may be a second cloud datacenter located in Florida. Management sever may be located at one of the availability zones or at a separate location. Each zone may include an internal network that interfaces with devices that are outside of the zone such as the management server through a gateway. End users of the cloud e.g. clients might or might not be aware of the distinctions between zones. For example an end user may request the creation of a virtual machine having a specified amount of memory processing power and network capabilities. The management server may respond to the user s request and may allocate the resources to create the virtual machine without the user knowing whether the virtual machine was created using resources from zone or zone . In other examples the cloud system may allow end users to request that virtual machines or other cloud resources are allocated in a specific zone or on specific resources within a zone.

In this example each zone may include an arrangement of various physical hardware components or computing resources for example physical hosting resources or processing resources physical network resources physical storage resources switches and additional hardware resources that may be used to provide cloud computing services to customers. The physical hosting resources in a cloud zone may include one or more computer servers such as the virtualization servers described above which may be configured to create and host virtual machine instances. The physical network resources in a cloud zone or may include one or more network elements e.g. network service providers comprising hardware and or software configured to provide a network service to cloud customers such as firewalls network address translators load balancers virtual private network VPN gateways Dynamic Host Configuration Protocol DHCP routers and the like. The storage resources in the cloud zone may include storage disks e.g. solid state drives SSDs magnetic hard disks etc. and other storage devices.

The example cloud computing environment shown in also may include a virtualization layer e.g. as shown in with additional hardware and or software resources configured to create and manage virtual machines and provide other services to customers using the physical resources in the cloud. The virtualization layer may include hypervisors as described above in along with other components to provide network virtualizations storage virtualizations etc. The virtualization layer may be as a separate layer from the physical resource layer or may share some or all of the same hardware and or software resources with the physical resource layer. For example the virtualization layer may include a hypervisor installed in each of the virtualization servers with the physical computing resources. Known cloud systems may alternatively be used e.g. WINDOWS AZURE Microsoft Corporation of Redmond Wash. AMAZON EC2 Amazon.com Inc. of Seattle Wash. IBM BLUE CLOUD IBM Corporation of Armonk N.Y. or others.

The operating system of the mobile device may be separated into a managed partition and an unmanaged partition . The managed partition may have policies applied to it to secure the applications running on and data stored in the managed partition. The applications running on the managed partition may be secure applications. In other embodiments all applications may execute in accordance with a set of one or more policy files received separate from the application and which define one or more security parameters features resource restrictions and or other access controls that are enforced by the mobile device management system when that application is executing on the device. By operating in accordance with their respective policy file s each application may be allowed or restricted from communications with one or more other applications and or resources thereby creating a virtual partition. Thus as used herein a partition may refer to a physically partitioned portion of memory physical partition a logically partitioned portion of memory logical partition and or a virtual partition created as a result of enforcement of one or more policies and or policy files across multiple apps as described herein virtual partition . Stated differently by enforcing policies on managed apps those apps may be restricted to only be able to communicate with other managed apps and trusted enterprise resources thereby creating a virtual partition that is impenetrable by unmanaged apps and devices.

The secure applications may be email applications web browsing applications software as a service SaaS access applications Windows Application access applications and the like. The secure applications may be secure native applications secure remote applications executed by a secure application launcher virtualization applications executed by a secure application launcher and the like. The secure native applications may be wrapped by a secure application wrapper . The secure application wrapper may include integrated policies that are executed on the mobile device when the secure native application is executed on the device. The secure application wrapper may include meta data that points the secure native application running on the mobile device to the resources hosted at the enterprise that the secure native application may require to complete the task requested upon execution of the secure native application . The secure remote applications executed by a secure application launcher may be executed within the secure application launcher application . The virtualization applications executed by a secure application launcher may utilize resources on the mobile device at the enterprise resources and the like. The resources used on the mobile device by the virtualization applications executed by a secure application launcher may include user interaction resources processing resources and the like. The user interaction resources may be used to collect and transmit keyboard input mouse input camera input tactile input audio input visual input gesture input and the like. The processing resources may be used to present a user interface process data received from the enterprise resources and the like. The resources used at the enterprise resources by the virtualization applications executed by a secure application launcher may include user interface generation resources processing resources and the like. The user interface generation resources may be used to assemble a user interface modify a user interface refresh a user interface and the like. The processing resources may be used to create information read information update information delete information and the like. For example the virtualization application may record user interactions associated with a GUI and communicate them to a server application where the server application will use the user interaction data as an input to the application operating on the server. In this arrangement an enterprise may elect to maintain the application on the server side as well as data files etc. associated with the application. While an enterprise may elect to mobilize some applications in accordance with the principles herein by securing them for deployment on the mobile device this arrangement may also be elected for certain applications. For example while some applications may be secured for use on the mobile device others might not be prepared or appropriate for deployment on the mobile device so the enterprise may elect to provide the mobile user access to the unprepared applications through virtualization techniques. As another example the enterprise may have large complex applications with large and complex data sets e.g. material resource planning applications where it would be very difficult or otherwise undesirable to customize the application for the mobile device so the enterprise may elect to provide access to the application through virtualization techniques. As yet another example the enterprise may have an application that maintains highly secured data e.g. human resources data customer data engineering data that may be deemed by the enterprise as too sensitive for even the secured mobile environment so the enterprise may elect to use virtualization techniques to permit mobile access to such applications and data. An enterprise may elect to provide both fully secured and fully functional applications on the mobile device as well as a virtualization application to allow access to applications that are deemed more properly operated on the server side. In an embodiment the virtualization application may store some data files etc. on the mobile phone in one of the secure storage locations. An enterprise for example may elect to allow certain information to be stored on the phone while not permitting other information.

In connection with the virtualization application as described herein the mobile device may have a virtualization application that is designed to present GUI s and then record user interactions with the GUI. The application may communicate the user interactions to the server side to be used by the server side application as user interactions with the application. In response the application on the server side may transmit back to the mobile device a new GUI. For example the new GUI may be a static page a dynamic page an animation or the like thereby providing access to remotely located resources.

The applications running on the managed partition may be stabilized applications. The stabilized applications may be managed by a device manager . The device manager may monitor the stabilized applications and utilize techniques for detecting and remedying problems that would result in a destabilized application if such techniques were not utilized to detect and remedy the problems.

The secure applications may access data stored in a secure data container in the managed partition of the mobile device. The data secured in the secure data container may be accessed by the secure wrapped applications applications executed by a secure application launcher virtualization applications executed by a secure application launcher and the like. The data stored in the secure data container may include files databases and the like. The data stored in the secure data container may include data restricted to a specific secure application shared among secure applications and the like. Data restricted to a secure application may include secure general data and highly secure data . Secure general data may use a strong form of encryption such as AES 128 bit encryption or the like while highly secure data may use a very strong form of encryption such as AES 256 bit encryption. Data stored in the secure data container may be deleted from the device upon receipt of a command from the device manager . The secure applications may have a dual mode option . The dual mode option may present the user with an option to operate the secured application in an unsecured or unmanaged mode. In an unsecured or unmanaged mode the secure applications may access data stored in an unsecured data container on the unmanaged partition of the mobile device . The data stored in an unsecured data container may be personal data . The data stored in an unsecured data container may also be accessed by unsecured applications that are running on the unmanaged partition of the mobile device . The data stored in an unsecured data container may remain on the mobile device when the data stored in the secure data container is deleted from the mobile device . An enterprise may want to delete from the mobile device selected or all data files and or applications owned licensed or controlled by the enterprise enterprise data while leaving or otherwise preserving personal data files and or applications owned licensed or controlled by the user personal data . This operation may be referred to as a selective wipe. With the enterprise and personal data arranged in accordance to the aspects described herein an enterprise may perform a selective wipe.

The mobile device may connect to enterprise resources and enterprise services at an enterprise to the public Internet and the like. The mobile device may connect to enterprise resources and enterprise services through virtual private network connections such as for example a microVPN or application specific VPN. The virtual private network connections may be specific to particular applications particular devices particular secured areas on the mobile device and the like . For example each of the wrapped applications in the secured area of the phone may access enterprise resources through an application specific VPN such that access to the VPN would be granted based on attributes associated with the application possibly in conjunction with user or device attribute information. The virtual private network connections may carry Microsoft Exchange traffic Microsoft Active Directory traffic HTTP traffic HTTPS traffic application management traffic and the like. The virtual private network connections may support and enable single sign on authentication processes . The single sign on processes may allow a user to provide a single set of authentication credentials which are then verified by an authentication service . The authentication service may then grant to the user access to multiple enterprise resources without requiring the user to provide authentication credentials to each individual enterprise resource .

The virtual private network connections may be established and managed by an access gateway . The access gateway may include performance enhancement features that manage accelerate and improve the delivery of enterprise resources to the mobile device . The access gateway may also re route traffic from the mobile device to the public Internet enabling the mobile device to access publicly available and unsecured applications that run on the public Internet . The mobile device may connect to the access gateway via a transport network . The transport network may be a wired network wireless network cloud network local area network metropolitan area network wide area network public network private network and the like.

The enterprise resources may include email servers file sharing servers SaaS applications Web application servers Windows application servers and the like. Email servers may include Exchange servers Lotus Notes servers and the like. File sharing servers may include ShareFile servers and the like. SaaS applications may include Salesforce and the like. Windows application servers may include any application server that is built to provide applications that are intended to run on a local Windows operating system and the like. The enterprise resources may be premise based resources cloud based resources and the like. The enterprise resources may be accessed by the mobile device directly or through the access gateway . The enterprise resources may be accessed by the mobile device via a transport network . The transport network may be a wired network wireless network cloud network local area network metropolitan area network wide area network public network private network and the like.

The enterprise services may include authentication services threat detection services device manager services file sharing services policy manager services social integration services application controller services and the like. Authentication services may include user authentication services device authentication services application authentication services data authentication services and the like. Authentication services may use certificates. The certificates may be stored on the mobile device by the enterprise resources and the like. The certificates stored on the mobile device may be stored in an encrypted location on the mobile device the certificate may be temporarily stored on the mobile device for use at the time of authentication and the like. Threat detection services may include intrusion detection services unauthorized access attempt detection services and the like. Unauthorized access attempt detection services may include unauthorized attempts to access devices applications data and the like. Device management services may include configuration provisioning security support monitoring reporting and decommissioning services. File sharing services may include file management services file storage services file collaboration services and the like. Policy manager services may include device policy manager services application policy manager services data policy manager services and the like. Social integration services may include contact integration services collaboration services integration with social networks such as Facebook Twitter and LinkedIn and the like. Application controller services may include management services provisioning services deployment services assignment services revocation services wrapping services and the like.

The enterprise mobility technical architecture may include an application store . The application store may include unwrapped applications pre wrapped applications and the like. Applications may be populated in the application store from the application controller . The application store may be accessed by the mobile device through the access gateway through the public Internet or the like. The application store may be provided with an intuitive and easy to use User Interface.

A software development kit may provide a user the capability to secure applications selected by the user by wrapping the application as described previously in this description. An application that has been wrapped using the software development kit may then be made available to the mobile device by populating it in the application store using the application controller .

The enterprise mobility technical architecture may include a management and analytics capability . The management and analytics capability may provide information related to how resources are used how often resources are used and the like. Resources may include devices applications data and the like. How resources are used may include which devices download which applications which applications access which data and the like. How often resources are used may include how often an application has been downloaded how many times a specific set of data has been accessed by an application and the like.

In this case the left hand side represents an enrolled mobile device with a client agent which interacts with gateway server which includes access gateway and application controller functionality to access various enterprise resources and services such as Exchange Sharepoint PKI Resources Kerberos Resources Certificate Issuance service as shown on the right hand side above. Although not specifically shown the mobile device may also interact with an enterprise application store StoreFront for the selection and downloading of applications.

The client agent acts as the UI user interface intermediary for Windows apps desktops hosted in an Enterprise data center which are accessed using the HDX ICA display remoting protocol. The client agent also supports the installation and management of native applications on the mobile device such as native iOS or Android applications. For example the managed applications mail browser wrapped application secure container to which a VPN such as an application specific policy controlled VPN can connect to shown in the figure above are all native applications that execute locally on the device. Client agent and application management framework of this architecture act to provide policy driven management capabilities and features such as connectivity and SSO single sign on to enterprise resources services . The client agent handles primary user authentication to the enterprise normally to access gateway AG with SSO to other gateway server components. The client agent obtains policies from gateway server to control the behavior of the managed applications on the mobile device .

The Secure IPC links between the native applications and client agent represent a management channel which allows client agent to supply policies to be enforced by the application management framework wrapping each application. The IPC channel also allows client agent to supply credential and authentication information that enables connectivity and SSO to enterprise resources . Finally the IPC channel allows the application management framework to invoke user interface functions implemented by client agent such as online and offline authentication.

Communications between the client agent and gateway server are essentially an extension of the management channel from the application management framework wrapping each native managed application . The application management framework requests policy information from client agent which in turn requests it from gateway server . The application management framework requests authentication and client agent logs into the gateway services part of gateway server e.g. NetScaler access gateway . Client agent may also call supporting services on gateway server which may produce input material to derive encryption keys for the local data vaults or provide client certificates which may enable direct authentication to PKI protected resources as more fully explained below.

In more detail the application management framework wraps each managed application . This may be incorporated via an explicit build step or via a post build processing step. The application management framework may pair with client agent on first launch of an application to initialize the Secure IPC channel and obtain the policy for that application. The application management framework may enforce relevant portions of the policy that apply locally such as the client agent login dependencies and some of the containment policies that restrict how local OS services may be used or how they may interact with the application .

The application management framework may use services provided by client agent over the Secure IPC channel to facilitate authentication and internal network access. Key management for the private and shared data vaults containers may be also managed by appropriate interactions between the managed applications and client agent . Vaults may be available only after online authentication or may be made available after offline authentication if allowed by policy. First use of vaults may require online authentication and offline access may be limited to at most the policy refresh period before online authentication is again required.

Network access to internal resources may occur directly from individual managed applications through access gateway . The application management framework is responsible for orchestrating the network access on behalf of each application . Client agent may facilitate these network connections by providing suitable time limited secondary credentials obtained following online authentication. Multiple modes of network connection may be used such as reverse web proxy connections and end to end VPN style tunnels .

The Mail and Browser managed applications have special status and may make use of facilities that might not be generally available to arbitrary wrapped applications. For example the Mail application may use a special background network access mechanism that allows it to access Exchange over an extended period of time without requiring a full AG logon. The Browser application may use multiple private data vaults to segregate different kinds of data.

This architecture supports the incorporation of various other security features. For example gateway server including its gateway services in some cases will not need to validate AD passwords. It can be left to the discretion of an enterprise whether an AD password is used as an authentication factor for some users in some situations. Different authentication methods may be used if a user is online or offline i.e. connected or not connected to a network .

Step up authentication is a feature wherein gateway server may identify managed native applications that are allowed to have access to highly classified data requiring strong authentication and ensure that access to these applications is only permitted after performing appropriate authentication even if this means a re authentication is required by the user after a prior weaker level of login.

Another security feature of this solution is the encryption of the data vaults containers on the mobile device . The vaults may be encrypted so that all on device data including files databases and configurations are protected. For on line vaults the keys may be stored on the server gateway server and for off line vaults a local copy of the keys may be protected by a user password or biometric validation. When data is stored locally on the device in the secure container it is preferred that a minimum of AES 256 encryption algorithm be utilized.

Other secure container features may also be implemented. For example a logging feature may be included wherein all security events happening inside an application are logged and reported to the backend. Data wiping may be supported such as if the application detects tampering associated encryption keys may be written over with random data leaving no hint on the file system that user data was destroyed. Screenshot protection is another feature where an application may prevent any data from being stored in screenshots. For example the key window s hidden property may be set to YES. This may cause whatever content is currently displayed on the screen to be hidden resulting in a blank screenshot where any content would normally reside.

Local data transfer may be prevented such as by preventing any data from being locally transferred outside the application container e.g. by copying it or sending it to an external application. A keyboard cache feature may operate to disable the autocorrect functionality for sensitive text fields. SSL certificate validation may be operable so the application specifically validates the server SSL certificate instead of it being stored in the keychain. An encryption key generation feature may be used such that the key used to encrypt data on the device is generated using a passphrase supplied by the user if offline access is required . It may be XORed with another key randomly generated and stored on the server side if offline access is not required. Key Derivation functions may operate such that keys generated from the user password or biometric factors use KDFs key derivation functions notably PBKDF2 rather than creating a cryptographic hash of it. The latter makes a key susceptible to brute force or dictionary attacks.

Further one or more initialization vectors may be used in encryption methods. An initialization vector will cause multiple copies of the same encrypted data to yield different cipher text output preventing both replay and cryptanalytic attacks. This will also prevent an attacker from decrypting any data even with a stolen encryption key if the specific initialization vector used to encrypt the data is not known. Further authentication then decryption may be used wherein application data is decrypted only after the user has authenticated within the application. Another feature may relate to sensitive data in memory which may be kept in memory and not in disk only when it s needed. For example login credentials may be wiped from memory after login and encryption keys and other data inside objective C instance variables are not stored as they may be easily referenced. Instead memory may be manually allocated for these.

An inactivity timeout may be implemented wherein after a policy defined period of inactivity a user session is terminated.

Data leakage from the application management framework may be prevented in other ways. For example when an application is put in the background the memory may be cleared after a predetermined configurable time period. When backgrounded a snapshot may be taken of the last displayed screen of the application to fasten the foregrounding process. The screenshot may contain confidential data and hence should be cleared.

Another security feature relates to the use of an OTP one time password without the use of an AD active directory password for access to one or more applications. In some cases some users do not know or are not permitted to know their AD password so these users may authenticate using an OTP such as by using a hardware OTP system like SecurID OTPs may be provided by different vendors also such as Entrust or Gemalto . In some cases after a user authenticates with a user ID a text is sent to the user with an OTP . In some cases this may be implemented only for online use with a prompt being a single field.

An offline password may be implemented for offline authentication for those applications for which offline use is permitted via enterprise policy. For example an enterprise may want an enterprise application to be accessed in this manner. In this case the client agent may require the user to set a custom offline password and the AD password is not used. Gateway server may provide policies to control and enforce password standards with respect to the minimum length character class composition and age of passwords such as described by the standard Windows Server password complexity requirements although these requirements may be modified.

Another feature relates to the enablement of a client side certificate for certain applications as secondary credentials for the purpose of accessing PKI protected web resources via the application management framework micro VPN feature . For example an application may utilize such a certificate. In this case certificate based authentication using ActiveSync protocol may be supported wherein a certificate from the client agent may be retrieved by gateway server and used in a keychain. Each managed application may have one associated client certificate identified by a label that is defined in gateway server .

Gateway server may interact with an Enterprise special purpose web service to support the issuance of client certificates to allow relevant managed applications to authenticate to internal PKI protected resources.

The client agent and the application management framework may be enhanced to support obtaining and using client certificates for authentication to internal PKI protected network resources. More than one certificate may be supported such as to match various levels of security and or separation requirements. The certificates may be used by the Mail and Browser managed applications and ultimately by arbitrary wrapped applications provided those applications use web service style communication patterns where it is reasonable for the application management framework to mediate https requests .

Application management client certificate support on iOS may rely on importing a PKCS 12 BLOB Binary Large Object into the iOS keychain in each managed application for each period of use. Application management framework client certificate support may use a HTTPS implementation with private in memory key storage. The client certificate will never be present in the iOS keychain and will not be persisted except potentially in online only data value that is strongly protected.

Mutual SSL may also be implemented to provide additional security by requiring that a mobile device is authenticated to the enterprise and vice versa. Virtual smart cards for authentication to gateway server may also be implemented.

Both limited and full Kerberos support may be additional features. The full support feature relates to an ability to do full Kerberos login to Active Directory AD using an AD password or trusted client certificate and obtain Kerberos service tickets to respond to HTTP Negotiate authentication challenges. The limited support feature relates to constrained delegation in AFEE where AFEE supports invoking Kerberos protocol transition so it can obtain and use Kerberos service tickets subject to constrained delegation in response to HTTP Negotiate authentication challenges. This mechanism works in reverse web proxy aka CVPN mode and when http but not https connections are proxied in VPN and MicroVPN mode.

Another feature relates to application container locking and wiping which may automatically occur upon jail break or rooting detections and occur as a pushed command from administration console and may include a remote wipe functionality even when an application is not running.

A multi site architecture or configuration of an enterprise application and application controller may be supported that allows users to be service from one of several different locations in case of failure.

In some cases managed applications may be allowed to access a certificate and private key via an API example OpenSSL . Trusted managed applications of an enterprise may be allowed to perform specific Public Key operations with an application s client certificate and private key. Various use cases may be identified and treated accordingly such as when an application behaves like a browser and no certificate access is required when an application reads a certificate for who am I when an application uses the certificate to build a secure session token and when an application uses private keys for digital signing of important data e.g. transaction log or for temporary data encryption.

Many mobile resource management MRM solutions also referred to herein as EMM MDM and MAM each of which may include MRM may face the challenge of managing applications on an otherwise unmanaged mobile devices and ensuring that information used by the managed application cannot escape from the set of trusted enterprise applications that IT administrators make available to their enterprise users. Information can escape in any number of ways and a robust EMM system will provide policies and enforcement mechanisms to prevent such information leakage where IT administrators deem it proper and to provide policy overrides where appropriate. However even with a robust set of information containment policies there are other threats to the security of the information managed by applications on mobile devices.

One such threat is that applications may store some information persistently on the mobile device by writing files or other data into the flash memory or other persistent storage on the device. Most mobile platforms will segregate persistent data recorded by applications into private application sandboxes. However this sandboxing can be defeated with common tools capable of rooting or jail breaking the device. Rooting and jail breaking are techniques that seek to replace parts of the mobile device operating system platform often with goal of defeating app sandboxing application integrity checks and other OS provided security mechanisms. Rootkits and jail breaking software for most popular mobile platforms are readily available on the public Internet and easy to use. Since rooting and jail breaking are so easy to accomplish most enterprises do not wish to rely on mobile device OS enforced sandbox as the only means of protecting data that an application may need to persist.

Some mobile device platforms additionally allow information to be encrypted in its persistent form and some applications do take advantage of these features. Invariably such encryption mechanisms rely on the encryption keys being held on the device itself with the keys themselves protected by a user supplied PIN or passcode. The fact that the keys are held on the device and protected by weak cryptographic factors means that the data is not particularly well protected from hacking particularly if a device is stolen and hacker has ample time to try to unlock the keys. Also since the keys are in possession of the device holder an enterprise is powerless to remove them or revoke access for a terminated employee unless they can recover the device.

Another issue with app sandboxing that occurs on mobile platforms is that it is problematic to have a single repository of documents that are available to all managed applications on the mobile device and potentially synced offline to cloud based storage. Mobile applications work around the sandbox limits in various ways all of which have drawbacks. Often they will exchange files of certain fixed types with other applications that have registered to accept certain those same types. The drawback here is that one ends up with multiple copies of a particular file in each app s sandbox. If one or more apps wish to edit the file content keeping track of which app has latest versions is problematic for users.

One can overcome the issue highlighted above if users are trained to always send their modified documents back to a common sync agent application which might also be charged with syncing documents to from cloud based storage. The Citrix Sharefile mobile application is an example of an application that permits this sort of data exchange with cloud based sync. The drawback here is that these extra steps are easy to forget. Also they are not required when using equivalent desktop applications that operate on the notion of shared documents folders for all applications. These two facts can lead to data file consistency issues and poor user experience if users are not properly trained.

Another approach to this problem is to save the files that one wishes to share into shared storage on those mobile platforms that support this concept. This has the downside that shared storage is world readable and therefore shared with all applications. Once information is placed into shared storage containment of the information is lost since any application on mobile device can read it. Also the data can trivially be accessed by anyone who gains physical access to the device using standard file viewers and development tools.

The challenges of information containment and sharing of documents between trusted applications that are highlighted above are overcome by introducing the concept of an encrypted data vault. As illustrated in various embodiments described herein provide an encrypted data vault also referred variously herein as a secure container container data vault vault or private data vault for use with for example one or more managed applications of a mobile device. An encrypted data vault can be considered a logical interface into which any or all persistent data read written by a mobile application which would otherwise end up in a writeable file in the app sandbox will be redirected. The contents of the vault may themselves be written into file s held inside an app sandbox. The contents of all files and the file metadata itself name size access times etc. may be all encrypted.

Referring back to various components described below can also be found in the diagram of which shows an illustrative environment in which embodiments hereof can be practiced a mobile device such as a smartphone tablet PDA and the like has installed upon it various applications. The applications include a set of managed applications which are managed by enterprise mobility management system such as an enterprise application. Mobile device may also include one or more unmanaged applications e.g. applications stored in unmanaged partition of or applications running in an unmanaged mode of operation such as a personal application which is not managed by the enterprise. In some examples client agent software is also installed on the mobile device . The client agent software also referred to herein as a client agent or enterprise mobility management EMM client is configured to connect e.g. via a network such as the Internet with an a gateway server or access gateway which typically provides access to enterprise resources e.g. cloud resources or servers which may include an authentication server an application store and a key server.

The illustrated mobile device may include a shared data vault. The shared data vault may include encrypted files and or data objects accessible to each of the managed applications .

In some examples each managed application may also be associated with a respective private data vault. Encryption keys for the private application vaults as well as an encryption key for the shared vault may be obtained via the access gateway such as from a key server or the access gateway itself and can be held temporarily within the mobile device.

Strong encryption algorithms e.g. FIPS 140 2 certified may be used to protect information placed into the vault with keys that are managed by the enterprise rather than the users themselves. Keys may be assigned based on a tuple of user device and application or app group. That implies that distinct key sets are used each unique combination of user device and application app group. The keys may be maintained off device in an enterprise key management server. The keys may be downloaded temporarily to the mobile device to enable data access but only after authenticating the user device and application in question. If this is the first access to the protected files in a long time the user may be forced to authenticate by logging on to an access gateway. Periodically these keys will need to be refreshed as dictated by the time to live policy setting for the keys. When refreshing as long as user has maintains an active logon with the access gateway this refreshing of keys can occur without user interaction. If user logs off or their logon session expires then the refreshing of keys will need to be strongly authenticated again. These aspects and others will be discussed in connection with .

To support random access to any range of bytes within encrypted data a scheme that uses encrypted blocks is may be used. The keys used to encrypt decrypt each of the blocks may be derived mathematically from base keys and the file block offset. Similarly different files may use initialization vectors for the cryptography as well.

For efficiency the system may read ahead or delay writing of data to a data vault as necessary to optimize application performance. Delayed write of encrypted data should in most instances be flushed prior to closing files or exiting the application.

An application may be written in such a way that it is aware of the presence of the vaults. Applications written with this awareness can utilize any number of data vaults which they can identify explicitly with vault name identifiers or resource names. However applications will not always be written with such awareness. Correspondingly the policies can be used to configure a default data vault for each application. The default data vault of an application is used for the transparent redirection of all application file I O that would otherwise end up in a writable portion of the application sandbox or shared storage.

Each managed application may be associated with a respective policy e.g. provided by the enterprise via the gateway server or access gateway . In some examples the policies may be provided in the form of files such as XML or JSON files in which the respective policy is expressed as a set of key value pairs. A policy may designate an encrypted data vault for data being processed in connection with the respective application such as for example data specified by read and write operations from the application. Accordingly read and write operations to from the application may be processed in accordance with the respective policy.

Depending on settings or definitions specified by the policies managed applications can be constrained to exchange files and or data only with other applications within the set of managed application . For example API calls from the application specifying file reads or writes can be intercepted by injected code of the application or the wrapping of the application. The policy for that application may be read and the read or write operation specified is diverted to an encrypted vault e.g. the private vault or the shared vault depending on the settings in the policy or the absence of settings in the policy .

In various embodiments code injected into the application or code wrapping the application may intercept API calls made by an application. Based on the intercepted API call the policy for the application may be consulted and the API call may be blocked allowed redirected further based on the policy. Such a process can be applied for selecting an application that can be used to open a file or data element identified by a link or icon e.g. using Open In . In another example the above process can be applied for copying data or data objects from one application and pasting the data or data objects in another application e.g. via a hidden encrypted paste buffer . In yet another example the above process can be applied for moving files into and or out of a protected data vault as described herein. Essentially any operation used to move data into and or out of an application can make use of the above technique.

In some examples managed applications can be assigned to different groups. In such cases policies may include records of groups and group members. The flow of files and or data between applications can thus be further restricted to members of particular groups. For example each group may be provided with its own shared vault. Providing different groups of mobile applications within the set of managed applications can help to segregate applications handling highly sensitive data from those that handle less sensitive data.

Applications may be assigned to a default vault as dictated by policy. In some variations applications that share the same group may inherit the same default data vault. In this manner applications not only gain the security of the encrypted container for their data but apps configured with the same default data vault will see a single consistent view of their data shared with other similarly configured file applications.

In some instances if policy does not dictate that an application is configured into a shared group or dictate a default vault for the application then all data may be redirected to the application s corresponding private vault private vaults as illustrated in . However if an application were configured into a shared group data may be redirected to the shared vault. Even when some data is redirected to the shared vault Particular data types such as data designated for special private directories like tmp would continue to flow to the application s private vault.

In embodiments with for example a shared data vault a common agent may manage the shared data on behalf of all applications. Without such an agent it may be more difficult to share data among the applications transparently. While some embodiments may implement such an agent as a network attached service that does not exist on the mobile device itself such embodiments may preclude offline access to the encrypted data vault. Other embodiments may implement the agent as another application installed on the mobile device a client agent . There are certainly other possible designs for implementing shared vaults. For example one can use shared storage coupled with inter process synchronization mechanisms to coordinate access.

Enterprises may create or adapt their native mobile applications using tools and SDKs associated with the enterprise mobility management solution they have chosen to deploy. In preparing their app for deployment they certainly have the freedom to re write specific application logic to utilize encrypted data vault services exposed by the SDK as needed for their application.

However in some embodiments an application may be used with standard file system APIs of the platform for which the applications were originally developed. As such the application s file access services may be redirected to one or more data vaults dictated by policy rather than rewriting their application. This approach also allows an administrator to reconfigure targeted vaults without directly modifying and recompiling the application. Such embodiments will be discussed further in connection with .

When taking the policy driven approach the application developer need not worry about the specifics of how to interface with the private vault services. Instead by integrating the header files libraries and run time support of the framework code with the application all file system APIs called by the application may be intercepted by a policy aware interception layer that in some embodiments forms a part of the managed application. For example the policy aware interception layer may be formed by framework or wrapper code that is included in the application. Logically the policy aware interception layer may be located between the application and the operating system services. After the policy aware interception layer performs the interception the intercepted API call may in some variations be redirected to the client agent or perform processing on the API call at the interception layer e.g. encrypt decrypt the API call etc. .

Assuming the data vault feature is configured then based on the policies in force for the current user device and application a set of default vaults will be selected and the file system API interception layer will be configured to target them. Using a policy driven approach may permit multiple applications to be bound to the same default vaults and may further permit secure sharing of data between properly configured managed applications. Some of these aspects among others will be discussed below in connection with .

After preparing the application the managed application may be uploaded to a server for the purpose of publishing the application for the enterprise users to consume such as via an application store. As part of this application publishing workflow an IT administrator will choose policies and settings that apply to the application and associated user roles. Once uploaded and configured the applications may be made available to organization s employees to peruse and install based on their role within the organization. Alternatively such applications can be pushed directly to mobile devices for employees who have enrolled their device with a corporate MDM server. Some of these aspects among others will be discussed below in connection with .

When a user executes a managed application on the mobile device the user is typically challenged to authenticate their corporate identity along with passwords and other factors as dictated by corporate policy. After having strongly authenticated the user device and application the access manager components of the system may verify that the user is entitled to the application and download the configured policies and or encryption and decryption keys for this specific application and user. Some of these aspects among others will be discussed below in connection with .

Based on those policies the application management framework that is delivered with the managed application may configure itself e.g. with the client agent s assistance . For example one or more default vaults may be selected for use and the policy aware interception layer may be configured to target the selected vaults. If a configured data vault does not already exist a new empty vault is initialized. This ensures that a change in data vault policies that would select a not previously used vault will appear to the application as if it had been recently installed e.g. empty writable directories . Some of these aspects among others will be discussed below in connection with .

As the application begins to utilize the file system APIs the policy aware interception layer looks for file accesses that intersect the writable portions of the app sandbox or shared storage. Such files are flagged and tracked by the interception layer such that all subsequent file I O is passed through encryption decryption before being placed into the real file container that holds the data.

When the data vault is private to the application the data vault services layer may directly use the mobile platform s file I O functions to read and write encrypted version of the data. Also all file directory access functions may be similarly intercepted such that the real file names and sizes can be obscured.

When the data vault is to be shared with another application the same processes described above may be used and may occur in a common file system repository. For example when the interception layer is operating on a shared data vault the data vault services may operate not by directly reading writing encrypted data but rather by redirected these services via a remote procedure call mechanism to the client agent. Within the client agent the same local data vault services used for private vault files may be used for the shared vault content.

In the case of write operations the policy aware interception layer may inspect the type of data to be written and consult the policy . If the policy specifies that the identified type of data is to be stored in the private data vault the policy aware interception layer may encrypt the data and store the data in the private data vault . However if the policy specifies that the identified type of data is to be stored in the shared data vault the policy aware interception layer may encrypt the data and store the data in the shared data vault .

Different keys may be used for encrypting decrypting data to from the private data vault and the shared data vault .

The data vault may also each comprise a file system provides for the logical storage of the data in the data vault. As illustrated in private data vault has a file system and shared data vault has file system . A data vault or container can comprise an access manager that governs access to the file system by applications and other components of the mobile device. As illustrated in private data vault has access manager and shared data vault has access manager .

One or more policies can limit access to a container s file system based on various settings or definitions such as for example 1 which application or other component of the mobile device is requesting access 2 the data being accessed processed 3 time or date 4 geographical position of the mobile device 5 whether the requesting application or other component provides a correct certificate or credentials 6 whether the user of the mobile device provides correct credentials 8 other conditions or any combination thereof. A user s credentials can comprise for example a password one or more answers to security questions e.g. What is the mascot of your high school biometric information e.g. fingerprint scan eye scan etc. and the like. Hence by using the access manager the container can be configured to be accessed only by applications that are authorized to access the container. As one example the access manager can enable managed applications installed on the mobile device to access data stored in the container and to prevent unmanaged applications from accessing the data stored in the container.

Temporal and geographic restrictions on data access may be useful in some variations. For example an enterprise administrator may deploy a policy that restricts the availability of the data stored within the container to a specified time window and or a geographic zone e.g. as determined by a GPS chip of the mobile device within which the mobile device must be currently located in order to access the data. Further the policy can instruct deletion of data from the container or otherwise make them unavailable when the specified time period expires or if the mobile device is taken outside of the defined geographic zone. One example of deleting data from a container will be discussed below in connection with .

Additionally policies may forbid data from being saved within a container. In such embodiments the document can be available for viewing on the mobile device only when the user is logged in to the enterprise system.

An access manager can also be configured to enforce certain modes of connectivity between remote devices e.g. an enterprise resource or other enterprise server and the container. For example the access manager can require that data received from a remote device and or sent from the container to the remote device be transmitted through tunnels for example as described above in connection with MicroVPN. Such application tunnels can use the tunneling mediator of the enterprise system. The access manager can require that all data transmitted to and from the container be encrypted. The client agent access manager or other component can be configured to encrypt documents sent from the container and decrypt data sent to the container. Data in the container can also be stored in an encrypted form.

The container can be configured to prevent data from being used by unauthorized applications or components of the mobile device or other devices. For instance an application having authorization to access documents from the container can be programmed to prevent a user from copying data and pasting it into another file or application interface or locally saving the data as a new file outside of the container. Similarly the container can be associated with a document viewer and or editor that does not permit such copy paste and local save operations. Moreover the access manager can be configured to prevent such copy paste and local save operations. Further the container and applications authorized to access data from the container can be configured to prevent users from attaching such documents to emails or other forms of communication.

An application can be programmed to write enterprise related data only into the container. For instance the application s source code can be provided with the resource name of the container e.g. via the client agent and as specified by policy . Similarly an enterprise resource can be configured to send data only to one or more containers. Storing data to the container can occur automatically for example under control of the application the client agent or the like. An example of storing data to a container will be discussed below in connection with .

In some variations a managed application may include a container that stores for example data used generated by a remoted or virtualized application. In such variations for example a secure connection e.g. a microVPN may connect the container included in the managed application to one or more data sources e.g. the source where the application is being remoted or virtualized including sources located behind an access gateway.

In further variations the managed application may be a virtualized application and the policy may specify a container that will store the data used generated by the virtualized application. Accordingly as the virtualized application generates data the data is stored to the container.

In some embodiments a secure container can be located remotely from the mobile device. In such embodiments the policy may specify the location of the remote container. Data that is meant to be stored in the secure container or read write operations that are being redirected to the secure container may be transferred to the remote container via a secure container such as a microVPN tunnel or other type of application specific VPN tunnel.

In some embodiments a container may be configured based on an industry specific policy such as a policy for a healthcare industry or a finance industry. When configured by such policies the data generated by an application that is for example also assigned to the policy for the healthcare industry can be saved to the container specified by the policy for the healthcare industry.

In some variations the policy may specify multiple containers that can be used by the application when needing to store data. For example a managed application may store to a first container when at a particular geographic location or other first criteria but to a second container when at a different geographic location or other second but different criteria . As a particular example a doctor may use a managed application to input patient data but the doctor may perform work at different hospitals. When at one hospital the policy may be configured so that the managed application used by the doctor stores to a first container but when at a second hospital the policy may be configured so that the managed application used by the doctor stores to a second container. In this manner if the doctor stops practicing at the first hospital a selective wipe of the first container may be performed without deleting or otherwise affecting the data stored by the second container. Further details as to performing a selective wipe will be performed below in connection with .

Such private and shared data vaults can help prevent the spread of enterprise information to different applications and components of the mobile device as well as to other devices. illustrates an example method for storing data within a data vault or container in connection with a managed application. illustrates a method that is performed by the processing circuitry of the mobile device when operating in accordance with various software constructs stored in the memory of the mobile device. In some arrangements the example method of may be performed by the client agent of the mobile device.

At step the mobile device may receive data for storage. For example access gateway or other enterprise computing device can transmit documents or other data to the mobile device which upon receipt is to be stored at the mobile device. As used in this context the data received at step can comprise any form of data such as a computer readable file or document text audio video and or other types of information or media. The data can comprise any single one or combination of these media types.

At step the mobile device may determine whether the data is to be stored in a container. This may include accessing a policy stored by the mobile device analyzing the policy to determine whether the policy specifies a particular container or not and proceeding accordingly. The policy may also further specify default action or different destinations for the data based on the source that transmitted the data e.g. data received from the access gateway is always stored in a secure container data received from the authentication server is stored in a container dedicated to authentication and or based on the type of data received e.g. data that includes audio or video is to be stored in a secure container for media data that includes a document is to be stored in a secure container for documents data that includes a policy is to be stored in a secure container for policies .

For example if the mobile device determines that the policy specifies a particular container the mobile device may determine that the data is to be stored in a container and accordingly may proceed to step . Otherwise the policy may not specify a container or a default storage action for this data and the mobile device may determine that the data is not to be stored in a container and accordingly may proceed to step . At step the data may be stored in a location as specified by the client agent. In some instances the mobile device or the client agent may store the data in a download folder commonly provided by a mobile device s operating system or within an unmanaged partition of the mobile as discussed in connection with . In others the mobile device or client agent may store the data in a default secure container e.g. the private data vault of the application which may require first encrypting the data in a manner similar to step .

At step the mobile device may encrypt the data. In some arrangements the encryption method and key may be specified by a policy. Further the key may have been received via the access gateway. Encrypting the data may include accessing one or more other secure containers on the mobile device. For example the keys may be stored in a secure container for encryption decryption keys and the key may be obtained by accessing such a container.

At step the mobile device may store the data which is now encrypted within a container e.g. the container specified by the policy as determined in step such as those illustrated in any of e.g. container of the app private data vaults or shared data vaults of and vaults of .

The container in connection with the above described steps and as described further above in connection with may assist in preventing unauthorized applications and other components of the mobile device from accessing information within the container. For enterprises that allow users to use their mobile device for accessing storing and using enterprise data providing containers helps to secure the enterprise data. For instance a container can centralize enterprise data in one location on each device and can facilitate selective or complete deletion of enterprise data from the device.

At step a mobile device may monitor operating conditions of the mobile device. Embodiments described herein may be able to selectively and remotely wipe a user s mobile device of enterprise application s and corporate data when for example the user discontinues employment or violates a corporate policy such as if they jailbreak their device or otherwise use it in a disallowed configuration . Accordingly the mobile device may need to monitor for such conditions that violate corporate policy or otherwise would cause a selective wipe to be performed.

At step the mobile device may determine to perform a selective wipe of data associated with one or more managed applications based on the monitored conditions. Such a determination may be performed in various ways. For example if attempts are made to enter a valid passcode is failed a threshold number of consecutive times e.g. or the mobile device may determine to perform a selective wipe. If the application that is associated with the private data vault is uninstalled the mobile device may determine to perform a selective wipe. In some embodiments the enterprise s IT department can cause the mobile device to make such a determination by remotely issuing a wipe command to the device e.g. via the access gateway . As another condition when an application is switched from a managed application to an unmanaged application e.g. the application switches from a managed mode of operation to an unmanaged mode of operation or is switched from being stored in a managed partition of the mobile device to an unmanaged partition the mobile device may determine to perform a selective wipe. Other conditions include determining to perform a selective wipe based on a user s attempt to jailbreak their device or otherwise use it in a disallowed configuration or attempting to access enterprise data in a manner that violates temporal or geographic restrictions placed on such access.

Another condition is related to a secure container serving as a temporary repository for documents and other data sent to the mobile device. Enterprise resources may be configured to send data to a container e.g. via application tunnels on a onetime or periodic basis. For example a sales related enterprise resource may be programmed to send sales related documents e.g. most recent price sheets every morning to a particular secured container of mobile devices registered for a team of users having sales related roles e.g. sales persons in the enterprise. The sales related documents can have document access policies such that the documents will self destruct e.g. cause to be deleted or otherwise selectively wiped from the container at a certain time or at the expiration of a time period beginning at a defined event e.g. the user s opening of a document .

Enterprise resources that send documents to one or more secure containers may be integrated with other repositories for the purpose of sending documents from such repositories to the containers such as by integrating with other enterprise systems e.g. enterprise document repositories such as a Microsoft Sharepoint repository or a third party cloud computing system e.g. a Box.net repository . A selective wipe may be performed based on such repositories sending documents to a secure container. Alternatively a selective wipe may be performed based on lifetime criteria associated with documents received from such repositories e.g. a received document may be stored in the container for 2 days after which a selective wipe will be performed .

A backup service may be configured for a secure container. For example a secure container may periodically send its contents to a secure backup location e.g. via a microVPN to the access gateway and or another location that is behind the access gateway . After the backup process has been completed the secure container may be selectively wiped.

Any of the above or other determinations to perform a selective wipe may be based on the policies stored by the mobile device. For example when forming the determination to perform a selective wipe the mobile device may compare the monitored conditions to one or more policies and if the conditions match a condition specified in the policy that commands a selective wipe the mobile device may determine to perform a selective wipe.

At step the mobile device may determine one or more secure containers for the selective wipe. For example the mobile device may determine which secure containers contain the data of the one or more managed applications. This determination may be based on information specified by policy or based on information known by the client agent or as specified by a command received by the mobile device from the enterprise network.

At step the mobile device may delete or otherwise make inaccessible the data of the one or more secure containers. For example a container may be configured to allow the client agent or mobile device to read from write to and or delete information from the container s file system. Deleting data from the container can include deleting actual data stored in the container deleting pointers to data stored in the container deleting encryption keys used to decrypt data stored in the container and the like. The container can enable some or all of the enterprise data stored in its file system to be deleted without modifying other data stored on the mobile device outside of the container.

At step the mobile device may transmit a selective wipe acknowledgement to the enterprise. Such an acknowledgement may provide an indication to the enterprise that the selective wipe was successful. The acknowledgement may include a listing of applications and or listing of secure containers that were affected deleted by the selective wipe. Upon receipt the enterprise e.g. access gateway may update its stored records accordingly.

As discussed above the application management framework that is delivered with the managed application may configure itself e.g. with the client agent s assistance . When being configured however the user may have legacy data that does not satisfy the requirements of the application management framework disclosed herein. For example the mobile device may have previously used a different corporate e mail application that did not encrypt the data of the inbox and the like and the user would prefer to have access to the inbox data. Accordingly such application data will have to be processed when the application is configured. illustrates an example process in which a managed application is configured. Further illustrates a method that can be performed by the processing circuitry of the mobile device when operating in accordance with various software constructs stored in the memory of the mobile device. In some arrangements the example method of may be performed by the client agent of the mobile device.

At step the mobile device may initiate a configuration process for a managed application. In some instances the configuration may not occur until the application first attempts to access an access resource or access gateway. In others the configuration may occur when the managed application is installed on the mobile device. Configuration of the application may in some embodiments may include wrapping the application e.g. via secure application wrapper of . Additional details of the configuration process will be discussed in connection with the remaining steps of .

At step the mobile device may obtain policy information for the managed application. In some arrangements. The mobile device may already have policy information for the managed application stored on the mobile device. If the policy information does not exist the mobile device may transmit a request to the access gateway for the policy information. Alternatively if the policy information does exist the mobile device the mobile device may check for updated policy information by transmitting a request to the access gateway for an update to the policy information. Subsequently the policy information may be received responsive to a request of the mobile device for the policy information or for an update to policy information. Alternatively the policy information may be received responsive to an authentication of the user application or mobile device.

At step the mobile device may obtain key information for the managed application. The key information may be for use with reading writing or otherwise accessing secure containers on the mobile device when the managed application is running. The key information may include one or more encryption and or decryption keys for the secure containers. The policies included in the policy information that was obtained at step may define what secure containers are to be used as well as their resource names or identifiers.

In some instances obtaining the key information may be simply accessing the key information stored on the mobile device. However in some instances e.g. when the key information is not stored on the mobile device or the key information is to be updated the mobile device may transmit a request to the access gateway for the key information. The request may include information to identify which encryption and decryption keys are needed for the application. For example keys may be assigned based on a tuple of user device and application or application group and the request for the key information may include information identifying the tuple. In some embodiments the request may include a user credential such as a certificate or single sign on SSO credential. In some variations the user credential may be the tuple or be included as part of the above discussed tuple. Some information like application group may be specified by a policy that was obtained at step .

In some arrangements the key information may be transmitted as part of the policy information thus steps and may be combined one or more of such arrangements. Additionally the policy and key information may in some variations be received via a VPN tunnel such as a MicroVPN discussed above .

At step the mobile device may configure one or more secure containers. For example one or more secure containers may be defined by the policy for the managed application. In some instances the policy may include a definition of a private container e.g. an app private data vault as illustrated in and or a shared container e.g. a shared data vault as illustrated in . Based on the policy the mobile device may determine whether the containers have been properly created and configured on the mobile device. If a container does not already exist a new empty vault is initialized including the file system for the container e.g. empty directory tree . The access manager for the container may also be configured.

The policy aware interception layer may also be configured to be aware of the secure containers. For example the policy aware interception layer may be configured with information linking the identifiers or resource identifiers for the secure containers to one or more API calls that will be issued by the application during execution and may be configured with the locations of the keys that will be used when encrypting decrypting data to from the application. In such a way the policy aware interception layer may intercept such calls and redirect the calls to the appropriate secure container in accordance with the policy and without the application being aware of the interception see e.g. .

At step the mobile device may determine whether legacy data for the managed application is to be configured for the application. In some instances this determination may be based on the policy for the application. For example legacy data may be stored on the mobile device e.g. inbox data for an e mail client that the managed application is replacing may be stored on the mobile device . Accordingly an IT administrator may configure the policy so that for example a location of the legacy data is defined within the policy and or an indication that the mobile device is to transfer legacy data for the managed application when configuring the application. The policy may specify locations for the legacy data such as external data storage locations folders located on the mobile device or secure containers located on the mobile device. The policy may also define an amount of legacy data to move to the secure containers e.g. a maximum amount of raw data a number of days of e mails all data etc. .

In some variations determining to configure legacy data may be based on information in addition to policy based criteria. For example the client agent may be configured to perform a search e.g. a recursive search of the application sandbox for any legacy data associated with the managed application and based on the search convert the legacy data as required. Additionally the client agent may be configured with an exclusion list e.g. a list of folders that should not be searched accessed for legacy data .

In some arrangements the legacy data may be stored remotely such as by an enterprise resource. The policy may indicate the location of the enterprise resource that stores the legacy data.

If the mobile device determines that legacy data for the managed application is to be configured for the application the method may proceed to step . Otherwise the method may end resulting in the managed application being configured for execution on the mobile device along with the policy information key information and secure containers used when executing the application.

At step the mobile device may encrypt the legacy data. In some variations the encryption may be performed in accordance with the policy. For example the mobile device may retrieve from the location where the legacy data is stored an amount of data in accordance with the policy. The mobile device may then encrypt the data in accordance with the policy e.g. using the protocols specified by the policy and using the keys specified by the policies . Some data may be encrypted using different keys based on which of the one or more secure containers they will be stored into.

At step the mobile device may store the legacy data which is now encrypted in one or more secure containers. Such storing may also be in accordance with the policy. For example some data may be specified as being stored in one container e.g. a private container while other data may be specified as being stored in a different container e.g. a shared container . Accordingly the data may be stored into the appropriate containers in their encrypted form. Such storage may be performed by updating or creating references to the location of the encrypted data in the secure container s file system.

In some instances after steps and have been successfully performed any legacy data that remains on the mobile device in its unencrypted form may be deleted from the mobile device.

While the above method describes configuring data vaults when initially configuring an application for execution on the mobile device similar methods may be utilized when policy information changes for the mobile device. Indeed the mobile device or the client agent may analyze updated policy information for changes to the encryption decryption policies and or the secure containers that are used when executing the managed application. Based on the changes the mobile device may take various steps to ensure the policy is correctly enforced such as for example by changing the configuration of a secure container create a new container delete an unused container re encrypt data decrypt data delete data and or move data to different storage locations.

As discussed above when a user executes a managed application on the mobile device the user is typically challenged to authenticate their corporate identity along with passwords and other factors as dictated by corporate policy. After having strongly authenticated the user device and application the access manager components of the system may verify that the user is entitled to the application and download the configured policies for this specific application and user. Keys and other data that are needed to access provide secure containers may also be downloaded to the mobile device. illustrates various aspects for providing authentication in connection with accessing secure containers. In particular illustrates an example method for providing encryption and decryption keys for secure containers. Additionally illustrates a method that is performed by the processing circuitry of the mobile device when operating in accordance with various software constructs stored in the memory of the mobile device. In some arrangements the example method of may be performed by the client agent of the mobile device.

At step the mobile device may transmit a message in connection with authenticating a user application or mobile device with an access gateway. For example the message may be in connection with an initial authentication process that authenticates a user prior to allowing a managed application which is executing on a mobile device access to enterprise resources e.g. a message transmitted to cause the mobile device or user to log into the enterprise to access the enterprise resources . In others the message may be in connection with authenticating the user or mobile device prior to allowing a managed application to be downloaded.

In some variations the message may be transmitted as part of a periodic update of key information for secure containers. For example periodically the keys for the secure containers may need to be refreshed e.g. as dictated by the time to live policy setting for the keys . When refreshing as long as the user has maintained an active logon with the access gateway the refreshing of keys can occur without user interaction. If user logs off or their logon session expires then the refreshing of keys will need to be fully authenticated again e.g. request the user to supply the authentication credentials such as username and password or certificate again . In such variations the message may include a request for key information and may include an identification of the user application or mobile device so that the access gateway can confirm authorization to the updated key information e.g. based on the active logon session .

At step the mobile device may receive key information for use with reading writing or otherwise accessing secure containers on the mobile device. For example keys may be assigned based on a tuple of user device and application or application group. An enterprise key management server or the access gateway may have knowledge of the keys and the associations of the keys to the specific users devices applications or application groups. Accordingly the key management server or access gateway may determine the key information that is to be sent to the mobile device and may transmit the key information to the mobile device.

Accordingly the key information received by the mobile device may include the encryption keys and or decryption keys required to read write or otherwise access secure containers including both shared vaults and private vaults see e.g. and . The key information may include information that identifies which users devices applications application groups and or secure containers each key is to be used for. In some variations the key information may take the form of a listing of secure container identifiers with each identifier being associated with a respective encryption key and a decryption key for use with that secure container.

In some arrangements the key information may be transmitted as part of an update to the policies stored by the mobile device. Additionally the key information may in some variations be received via a VPN tunnel such as a MicroVPN discussed above .

Upon receipt of the key information the mobile device may store the key information at step so that for example the key information can be used by the secure containers and or client agent. In some arrangements the key information may be stored in a secure container or for example in the managed partition of the mobile device. Additionally in some instances the secure containers and client agents may need further configuring based on the key information. Such configuring may be performed at step . For example if the key information specifies keys for secure containers that are not yet created by the mobile device the mobile device may determine to create one or more secure containers based on the key information e.g. based on one of the secure container identifiers on the listing of secure container identifiers not having a matching container created on the mobile device and accordingly create the one or more secure containers including the file system and access manager for the secure container and configure the client agent to facilitate accessing the secure container.

As discussed above after preparing the application the managed application may be uploaded to a server for the purpose of publishing the application for the enterprise users to consume such as via an application store. As part of this application publishing workflow an IT administrator or other user may choose policies that apply to the application and associated user roles. Once uploaded and configured the applications may be made available to organization s employees to peruse and install based on their role within the organization. Alternatively such applications can be pushed directly to mobile devices for employees who have enrolled their device with a corporate MDM server. illustrates an example method for publishing a managed application such that for example a user is able to download the application and any linked policy information and key information. Various steps may be performed by one or more computing devices of an enterprise network such as an access gateway or application store server e.g. app store of .

At step policy information may be determined and linked to an application to be published. The policy information may include one or more policies for the application and each policy may be specific to a different user role associated with the enterprise e.g. one policy for a sales employee a different policy for a designer etc. or application group. As discussed throughout this disclosure the policies can include various constraints to be enforced by the mobile device in connection with the application which may be meant to be executed as a managed application on the mobile device. The policy information may include one or more secure container identifiers that will be used in connection with reading writing or otherwise processing data when the application is executed by the mobile device. The secure containers may be for example an identifier for a private data vault and or a shared data vault. In some arrangements an IT administrator or other user may select or otherwise configure the content of the policy information e.g. via a graphical interface the IT administrator or other user may provide input that causes the policy information to be configured accordingly .

At step key information may be determined and linked to the application to be published. The key information may include one or more encryption and or decryption keys for reading writing or otherwise accessing the one or more secure containers identified in the policy information. In some arrangements an IT administrator or other user of the enterprise may select or otherwise configure the content of the key information e.g. via a graphical interface the IT administrator or other user may provide input that causes the key information to be configured accordingly .

At step the application policy information and key information may be published or otherwise made accessible for download to a mobile device. For example the application policy information and key information may be published to an application store.

At step the application policy information and key information may be transmitted to a mobile device. Such transmission may in some embodiments be performed responsive to a request to download the application. In others it may be performed responsive to a push command that automatically causes the application policy information and key information to the mobile device e.g. based on a registration in such a push service .

Additionally at step an update to the policy information key information and or application may be transmitted to the mobile device. For example the mobile device may be registered in an update service with the application store. Accordingly if the policy information or key information that is published to the application store is updated the updated policy or key information may be transmitted to the mobile device e.g. based on the registration in the update service . In some variations transmission of an update to the policy information and or key information may be performed without updating the application. Further the user of the mobile device may be unaware of the update to the policy and or key information.

The transmissions of steps and may in some variations be performed using one or more VPN tunnels such as a MicroVPN discussed above .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in any claim is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are described as some example implementations of the following claims.

