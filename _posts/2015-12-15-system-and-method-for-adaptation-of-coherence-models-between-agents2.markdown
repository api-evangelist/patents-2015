---

title: System and method for adaptation of coherence models between agents
abstract: A system and method are disclosed for multiple coherent caches supporting agents that use different, incompatible coherence models. Compatibility is implemented by translators that accept coherency requests and snoop responses from an agent and accept snoop requests and coherency responses from a coherence controller. The translators issue corresponding coherency requests and snoop responses to the coherence controller and issue corresponding coherency responses and snoop requests to the agent. Interaction between translators and the coherence controller accord with a generic coherence model, which may be a subset, superset, or partially inclusive of features of any native coherence model. A generic coherence protocol may include binary values for each of characteristics: valid or invalid, owned or non-owned, unique or shared, and clean or dirty.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09542316&OS=09542316&RS=09542316
owner: ARTERIS, INC.
number: 09542316
owner_city: Campbell
owner_country: US
publication_date: 20151215
---
This application is related to and a continuation in part of US Non Provisional Utility patent application Ser. No. 14 806 786 titled DISTRIBUTED IMPLEMENTATION FOR CACHE COHERENCE filed on Jul. 23 2015 by FORREST Craig Stephen et al. the entire disclosure of which is incorporated herein by reference.

The invention is in the field of system on chip SoC and more specifically heterogeneous processing units including processor cores graphics processing units and other components that manipulate or move data.

Modern systems on chip SoCs are often designed with heterogeneous processing units that are selected for their different system characteristics. Typically a processing unit or agent implements a cache for storing a local copy of data and that agent assumes a particular coherence model which defines a set of cache states and a set of coherent transactions that effect transitions between cache states. A coherence model enforces data coherence among agents that share the same coherence model.

However different processing units delivered as intellectual property blocks from different vendors may implement different and incompatible coherence models making integration of those processing units in a SoC difficult if not impossible. As a result a SoC designer is faced with either higher design costs and longer development cycles or selection of compatible but less optimal processing units.

The invention described herein directly addresses integrating incompatible coherence models implemented by heterogeneous agents. According to an aspect of the invention a translator is used to adapt between different coherence models. A translator intermediates the exchange of coherency requests and responses between an agent and a coherence controller. In some embodiments the same or a different translator intermediates the exchange of snoop requests and responses between a coherence controller and an agent. In some embodiments the same or a different translator intermediates the exchange of snoop requests and responses between a coherence controller the snooped agent and the initiating agent. In some embodiments the coherence controller has a coherence model that includes a cache state model with a state that is not supported by the coherence model of the agent. In some embodiments the agent has a coherence model that includes a cache state model with a state that is not supported by the coherence model of the coherence controller.

In some embodiments the coherence controller has a coherence model that supports a type of snoop request that is not supported by the coherence model of the agent. In some embodiments the agent has a coherence model that includes a type of snoop request that is not supported by the coherence model of the coherence controller.

According to an aspect of the invention the translator is configured with awareness of the allowable states and behaviors of the coherence model on each of its interfaces. The translator issues one or more requests and responses within the scope of the states and behaviors or the destination that provide for the functionality required by the allowed states and behaviors of the source. According to an aspect of the invention the translator makes the coherence model of agents and coherence controllers transparent to each other so that each only need be designed according to its coherence protocol and a correctly functioning system may be implemented.

All publications and patents cited in this specification are herein incorporated by reference as if each individual publication or patent were specifically and individually indicated to be incorporated by reference and are incorporated herein by reference to disclose and describe the methods and or system in connection with which the publications are cited. The citation of any publication is for its disclosure prior to the filing date and should not be construed as an admission that the invention is not entitled to antedate such publication by virtue of prior invention. Further the dates of publication provided may be different from the actual publication dates which may need to be independently confirmed.

A processing unit may implement caches and a coherence model within which the processing unit is known as an agent. According to the various aspects of the invention a coherence model describes the following 

A coherence model may permit agents to implement a subset of the cache states defined by the cache state model and this subset is known as an agent cache state model. Different agent cache state models within a given coherence model are compatible by definition.

Finally a coherence model may also define additional characteristics and behaviors not described above.

Cache coherence is maintained by hardware across multiple agents with caches in accordance with the coherence model implemented by those agents these agents are known as cache coherent agents. In addition a coherence model may define agents that initiate coherent transactions but that implement caches that do not need to be kept coherent with other agents caches these agents are known as IO coherent agents. Furthermore a coherence model may enable such caches to be kept coherent by software.

According to an aspect of the invention a coherence model applies to both cache coherent agents and IO coherent agents and is relevant whether an individual cache is kept coherent by hardware or software. Both types of agents are collectively called coherent agents.

In a system of multiple coherent caching agents the hardware block that enforces coherence is the coherence controller. The coherence controller is coupled to each coherent agent. The coupling can be direct or indirect such as through a network on chip or any other means of interconnect. In some embodiments the coherence controller is distributed and partitioned by cache line address. In such a system an initiating agent issues coherency requests to the coherence controller which in turn might issue resulting snoop requests to snooped agents. The snooped agents must in turn issue snoop responses the results of which are typically aggregated by the coherence controller which in turn returns a coherency response to the initiating agent. In some embodiments the coherence controller implements a snoop filter to track the cache states of a cache line in each agent and based on the state of the snoop filter the coherence controller may issue snoop requests to a subset of agents.

As described above each agent uses a particular coherence model and assumes that all other coherent agents use the same model. In accordance with some aspects and some embodiments of the invention multiple coherent agents use the same coherence model. In heterogeneous systems of agents with different coherence models the coherence controller must accept coherency requests and issue coherency responses to an initiating agent according to its coherence model and issue snoop requests and accept snoop responses each according to the coherence model of the particular snooped agent. To do so translation must be performed between coherence models.

In accordance with the aspects of the invention translation can be performed in a distinct and or dedicated translator unit as a function of the coherence controller and or in an interface unit connected to an agent. The functionality of a translator unit can be divided into sub units such as a request sub unit and a response sub unit or such as a coherency sub unit that translates coherency requests and responses and a snoop sub unit that translates snoop requests and responses. For clarity embodiments disclosed indicate a distinct dedicated translator though this should not be construed as limiting the scope of the disclosed invention.

In accordance with the various aspects of the invention coherent systems include fully coherent FC agents and or IO coherent IO agents. An agent communicates using its own native protocol or the generic protocol. Furthermore a cache coherent system includes at least one FC agent if all agents are IO then that is similar to all agents being non coherent. Additionally agents can act as either a requesting agent or a snooped agent an FC agent can act as both but an IO agent can only act as a requesting agent.

Simultaneously and in response to coherency requests initiated by other agents the connected coherence controller may issue snoop requests to the translator through generic interface signals . The translator will react by issuing one or more corresponding snoop requests to the connected agent on native interface signals . In response to each snoop request the connected agent will issue a snoop response on native interface signals . Snoop responses may or may not carry data depending on the type of snoop request and the state of the requested line in the agent cache. Upon receiving a snoop response from the agent the translator issues a corresponding snoop response to the coherence controller on generic interface signals . When multiple snoop requests are issued on the native snoop interface the translator gathers and assembles the multiple native snoop responses into a single generic snoop response.

In some embodiments native coherency response signals and native snoop response signals may be split into a state response group and a data response group depending on the requirements of the native coherence model. In addition in some embodiments generic coherency response signals and generic snoop response signals may be split into a state response group and a data response group depending on the requirements of the generic coherence model.

According to one aspect of the invention a coherence controller only issues to any particular agent snoop requests that put a cache line into a state that is legal according to the snooped agent s coherence model and that is consistent with the state requested by the initiating agent. For example if the coherence model for the initiating agent does not allow shared cache lines in other agents a coherence controller will never issue a snoop request to a snooped agent that leaves a shared copy of data in the snooped agent even if the coherence model for the snooped agent supports such an outcome.

According to some aspects and embodiments of the invention the state of a cache line in any agent is generically represented within the coherence controller by four binary cache line characteristics 

Common cache state models include MSI MESI and MOESI among others where each of the letters represents a cache state Modified M Owned O Exclusive E Shared S and Invalid I . An example of a cache state model that is widely used is the cache state model specified by the Advanced Microcontroller Bus Architecture AMBA AXI Coherency Extensions ACE which defines a five state cache state model that is effectively equivalent to the MOESI cache state model. Some other cache state models may additionally define a Forward F state.

According to one such embodiment only IXXX VNSC VOUC VOUD VOSD and VOSC states are legally recognized by the generic cache state model of the coherence controller. The four binary states are encoded in a representation that uses only three bits to identify the six legal states.

According to different aspects and embodiments a generic coherence model may be a superset subset or partially inclusive of the cache state models the transaction processing models and the coherence granules defined by the native coherence models of the agents in the system.

According to some aspects and embodiments a single request according to one coherence model causes a translator to issue multiple requests according to a second coherence model. When the translator issues multiple requests into the second coherence model in response to a request from the first the translator also gathers and assembles the multiple responses from the second coherence model into a single response to the first. This is true for a single request according to one native protocol translated into multiple requests in the generic protocol or for a single request according to a generic protocol translated into multiple requests in a second native protocol.

According to some aspects and embodiments a generic coherence model represents fewer than all possible valid states within an agent s native coherence model.

A coherence controller may be coupled to a system directory. In some aspects and embodiments a system directory is an integral part of the coherence controller. In any case according to some aspects and embodiments of the invention it is not necessary for the system directory to be aware of or even support the coherence model of agents.

According to some aspects and embodiments a system includes a proxy cache for a non coherent agent. shows in accordance with various aspects of the invention one embodiment of a system with a proxy cache according to the invention. Caching agent issues coherency requests to translator according to its native coherence model. Those cause translator to issue coherency requests to coherence controller according to a generic protocol. To control the cache in another agent coherence controller issues snoop requests to proxy cache according to the generic coherence model. Proxy cache acts as proxy cache for cacheless agent . However proxy cache need not issue any request to agent . Proxy cache autonomously issues appropriate snoop responses to coherence controller according to the generic protocol. No snoop translation is necessary.

According to cacheless agent issues non coherent coherency requests to proxy cache . Proxy cache in turn issues corresponding coherent coherency requests to coherence controller . Coherence controller issues snoop requests to caching agent through translator . Caching agent issues appropriate snoop responses to coherence controller through translator . The coherence controller in turn issues snoop responses to proxy cache which returns a non coherent response to cacheless agent .

Some coherence models require self snoops for purposes such as disambiguating coherency request ordering. Other coherence models do not require self snoops. According to some aspects and an embodiment of the invention a system comprises an agent that accords with a self snooping coherence model and an agent that accords with a model that does not support self snooping. When the self snooping agent issues a coherency request to a coherence controller the coherence controller issues a snoop to the initiating agent. When the non self snooping agent issues a coherency request to the coherence controller the coherence controller snoops other agents but does not snoop the initiating agent.

According to some coherence models an initiating agent is required to serialize outstanding writeback coherency requests with respect to inbound snoop requests to the same cache line. In such a coherence model the initiating agent blocks such snoop requests until the agent receives the corresponding coherency response for the writeback coherency request and then issues the snoop response for the snoop request. Furthermore in this coherence model the coherence controller must guarantee that writeback coherency requests make forward progress so that snoop requests can make forward progress.

According to some coherence models the coherence controller is required to serialize outstanding snoop requests with respect to inbound writeback coherency requests to the same cache line. In such a coherence model the coherence controller blocks such writeback coherency requests until the snoop responses for the snoop requests have been received.

Consequently the native to generic translators must select a writeback coherency request with semantics in the generic coherence model appropriate to the corresponding native coherence models and the coherence controller must either block the writeback coherency request or allow the writeback coherency request to proceed as needed.

According to some coherence models agents respond with data in the S state or SharedClean in ACE or VNSC in a generic coherence model . In one embodiment a coherence controller that operates according to a generic coherence model in reaction to coherency requests issues snoops to multiple agents and if multiple agents return data from the line in the S state the coherence controller discards all but the first data response which it issues in the coherency response to the initiating agent.

Referring now to two coherence models are depicted. Coherence model A defines a single agent cache state model that consists of four cache states MESI. Coherence model B defines multiple agent cache state models including one that consists of four cache states MESI and one that consists of five cache states MOESI. Both coherence models define a basic ReadShared coherency request that fetches a copy of a cache line for the initiating agent to satisfy an internal load operation and allows snooped agents to retain a valid shared copy of the cache line.

In each of the two coherence models however the ReadShared coherency request and the corresponding ReadShared snoop request have different meanings. According to coherence model A an initiating MESI agent i.e. an agent that implements the MESI agent cache state model issues a ReadShared coherency request to install a cache line in the M E or S state based on the coherency response. In response to a ReadShared snoop request a snooped MESI agent in coherence model A may retain a valid copy transitioning to the S state or may invalidate its copy transitioning to the I state. If a snooped MESI agent had a copy in the M state initially and then retained a copy in the S state in response to a ReadShared snoop request an initiating MESI agent installs the copy in the S state and memory must be updated with the dirty data transferred from the snooped agent.

On the other hand according to coherence model B an initiating MOESI agent i.e. an agent that implements the MOESI agent cache state model issues a ReadShared coherency request to install a cache line in the M O E or S state based on the coherency response. Because the coherency response to a ReadShared coherency request may return shared dirty data to the initiating agent causing that agent to install a cache line in the O state a MESI agent in coherence model B must not issue a ReadShared coherency request. Instead coherence model B may define a ReadClean coherency request and snoop request. In this case an initiating MESI agent issues a ReadClean coherency request to install a cache line in the E or S state based on the coherency response.

According to coherence model B and in response to a ReadShared snoop request or a ReadClean snoop request a snooped MOESI agent in coherence model B may retain a copy in the O or S state or may transition to the I state. In response to a ReadShared snoop request or a ReadClean snoop request a snooped MESI agent in coherence model B may retain a copy in the S state or may transition to the I state. If a snooped MOESI agent had a copy in the M or O state initially or if a snooped MESI agent had a copy in the M state initially and then retained a copy in the S state in response to a ReadClean snoop request an initiating MESI agent installs the copy in the S state and memory must be updated with the dirty data transferred from the snooped agent. In coherence model B a ReadShared coherency request does not require an update to memory since only MOESI agents issue such a request and those agents can install a cache line in all valid states including O.

According to various aspects and an embodiment of the invention as shown in what distinguishes a MESI agent in coherence model B from a MESI agent in coherence model A is that the former issues a specific coherency request to interoperate with a MOESI agent while the latter is unaware that a MOESI agent may be present in the system.

A generic coherence model coherence model G defines an agent cache state model with six cache states MOESIF. Coherence model G also defines a MemRdShd coherency request and a SnpRdShd snoop request with behaviors compatible with the ReadShared requests defined by coherence model B and defines a MemRdCln coherency request and a SnpRdCln snoop request with behaviors compatible with the ReadShared requests defined by coherence model A and the ReadClean requests defined by coherence model B.

In accordance with various aspects of the invention and an embodiment of a system with the coherence models described above the translators in the system perform at least two functions adapting requests and responses between agents in different coherence models and transmitting requests and responses between agents in the same coherence model. In other embodiments the translators in the system also adapt requests and responses between agents in the same coherence model.

Examples of coherency request and snoop request translation between coherence model A and coherence model B are described below. To clarify the examples each coherency request or snoop request is designated with its corresponding coherence model e.g. a ReadShared from coherence model A is written as ReadShared A and a SnpRdCln from coherence model G is written as SnpRdCln G.

Consider an embodiment based on the various aspects of the invention of the invention with three agents. The first agent uses coherence model A with a MESI agent cache state model. The second agent uses coherence model B with a MOESI agent cache state model. The third agent uses coherence model B with a MESI agent cache state model.

In accordance with various aspects of the invention snoop responses and coherency responses communicate cache state and data. Responses may contain a state portion only or may contain both a state portion and a data portion. In some aspects and embodiments responses may be divided into state responses consisting of a state portion only and data responses consisting of a data portion only that travel independently through the system. In such an embodiment a data response has an associated state response and a state response may or may not have an associated data response. In some aspects and embodiments the state portion may be divided into a state response that communicates a subset of the state information and a data response that communicates the remaining subset of the state information along with the data other divisions are also possible.

The state portion of a response typically indicates the cache state of one or more agents after the snoop requests have been processed. In some aspects and embodiments the coherence controller aggregates the state portions from multiple snoop responses and issues a coherency response with a state portion that summarizes the state portions from the snoop responses. In other aspects and embodiments a translator typically the translator associated with the initiating agent may be responsible for performing the aggregation of snoop responses and issuing the summary of the state portions in a coherency response. In yet other aspects and embodiments the initiating agent may be responsible for performing the aggregation of snoop responses if this function is defined by the coherence model and each snoop response effectively becomes a coherency response. In these latter two examples the translator or the initiating agent via the translator provides a summary to the coherence controller if necessary.

In some other aspects and embodiments multiple snoop responses with data portions may result from issuing snoop requests. In these embodiments data aggregation may occur at the coherence controller at the translator associated with the initiating agent or at the initiating agent itself in a manner similar to one of those described above for aggregating state responses.

The state portion typically includes an indication of whether an accompanying or associated data portion is clean or dirty with respect to memory. A translator uses this indication in conjunction with the type of snoop request or coherency request to determine whether memory must be updated. In some embodiments the translator associated with a snooped agent or the translator associated with the initiating agent may update memory and in others a translator may direct the coherence controller to update memory. If memory is updated the state portion of the response is modified to indicate that the data are clean with respect to memory.

Examples of snoop response and coherency response translation between coherence model A and coherence model B are described below. In each coherence model it is assumed that the state portion of a response has an indication of whether an agent has a shared or invalid copy and if a data portion is associated with the state portion an indication of whether the data are clean or dirty with respect to memory. These result in six response combinations invalid state Inv invalid state with clean data InvCln invalid state with dirty data InvDty shared state Shd shared state with clean data ShdCln and shared state with dirty data ShdDty . Not all response combinations are allowed in all coherence models e.g. a ShdDty coherency response is not legal in coherence model A since a MESI agent in coherence model A does not support an O state.

In some aspects and embodiments the second agent translator recognizes that the generic snoop request SnpRdCln G represents a query for clean data and in reaction to the ShdDty B native snoop response updates memory and translates the ShdDty B native snoop response into a ShdCln G generic snoop response. In some embodiments instead of updating memory and translating the snoop response the second agent translator provides additional indication to the coherence controller to update memory and translate the dirty generic snoop response into a clean generic coherency response. In some aspects and embodiments data bypasses the coherence controller and the coherence controller only aggregates the state portions of the snoop responses. In such embodiments either the second agent translator or the first agent translator updates memory.

In some aspects and embodiments translator issues a native coherency response after the generic coherency state response and the first generic data response have been received and the first agent translator ignores the second and third generic data response. In some aspects and embodiments the generic coherency state response is guaranteed to arrive before the generic data responses. In some aspects and embodiments the generic coherency state response and the generic data responses may arrive in any order.

Machines claimed herein can be embodied in physical machines such as semiconductor chips in hardware description language representations of the logical or functional behavior of machines according to the invention as disclosed and in one or more non transitory computer readable media arranged to store such hardware description language representations. Methods claimed herein can be embodied in the behavior of either one or a combination of humans and machines in instructions that if executed by one or more computers would cause the one or more computers to perform methods according to the invention as disclosed and in one or more non transitory computer readable media arranged to store such instructions. Inventions claimed herein the practice of which require more than one non transitory computer readable medium should be construed as embodied by each of the more than one non transitory computer readable medium.

Unless defined otherwise all technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art to which this invention belongs. The verb couple its gerundial forms and other variants should be understood to refer to either direct connections or operative manners of interaction between elements of the invention through one or more intermediating elements whether or not any such intermediating element is recited.

Any methods and materials similar or equivalent to those described herein are not considered abstract ideas and are considered to be significant improvements in the art when used in the practice of the invention. Representative illustrative methods and materials are also described. Additionally it is intended that equivalents include both currently known equivalents and equivalents developed in the future i.e. any elements developed that perform the same function regardless of structure. The scope of the invention therefore is not intended to be limited to the exemplary aspects and embodiments shown and described herein.

In accordance with the various aspects of the invention a computer and a computing device are articles of manufacture. Other examples of an article of manufacture include an electronic component residing on a mother board a server a mainframe computer or other special purpose computer each having one or more processors e.g. a Central Processing Unit a Graphical Processing Unit or a microprocessor that is configured to execute a computer readable program code e.g. an algorithm hardware firmware and or software to receive data transmit data store data or perform methods.

The article of manufacture e.g. computer or computing device includes a non transitory computer readable medium or storage memory that may include a series of instructions such as computer readable program steps or code encoded therein. In certain aspects of the invention the non transitory computer readable medium includes one or more data repositories. Thus in certain embodiments that are in accordance with any aspect of the invention computer readable program code or code is encoded in a non transitory computer readable medium of the computer or computing device. The processor or a module in turn executes the computer readable program code to create or amend an existing computer aided design using a tool. The term module as used herein may refer to one or more circuits components registers processors software subroutines or any combination thereof. In other aspects of the embodiments the creation or amendment of the computer aided design is implemented as a web based software application in which portions of the data related to the computer aided design or the tool or the computer readable program code are received or transmitted to a computing device of a host.

An article of manufacture or system in accordance with various aspects of the invention is implemented in a variety of ways with one or more distinct processors or microprocessors volatile and or non volatile memory and peripherals or peripheral controllers with an integrated microcontroller which has a processor local volatile and non volatile memory peripherals and input output pins discrete logic which implements a fixed version of the article of manufacture or system and programmable logic which implements a version of the article of manufacture or system which can be reprogrammed either through a local or remote interface. Such logic could implement a control system either in logic or via a set of commands executed by a processor.

Accordingly the preceding merely illustrates the various aspects and principles as incorporated in various embodiments of the invention. It will be appreciated that those of ordinary skill in the art will be able to devise various arrangements which although not explicitly described or shown herein embody the principles of the invention and are included within its spirit and scope. Furthermore all examples and conditional language recited herein are principally intended to aid the reader in understanding the principles of the invention and the concepts contributed by the inventors to furthering the art and are to be construed as being without limitation to such specifically recited examples and conditions. Moreover all statements herein reciting principles aspects and embodiments of the invention as well as specific examples thereof are intended to encompass both structural and functional equivalents thereof. Additionally it is intended that such equivalents include both currently known equivalents and equivalents developed in the future i.e. any elements developed that perform the same function regardless of structure.

Therefore the scope of the invention is not intended to be limited to the various aspects and embodiments discussed and described herein. Rather the scope and spirit of invention is embodied by the appended claims.

