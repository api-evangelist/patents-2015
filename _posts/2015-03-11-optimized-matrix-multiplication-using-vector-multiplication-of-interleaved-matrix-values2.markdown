---

title: Optimized matrix multiplication using vector multiplication of interleaved matrix values
abstract: The present disclosure relates to optimized matrix multiplication using vector multiplication of interleaved matrix values. Two matrices to be multiplied are organized into specially ordered vectors, which are multiplied together to produce a portion of a product matrix.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09645974&OS=09645974&RS=09645974
owner: Google Inc.
number: 09645974
owner_city: Mountain View
owner_country: US
publication_date: 20150311
---
In computing devices a processor e.g. a central processing unit CPU may process instructions included in software applications. A processor may include instructions for performing mathematical operations on numerical values. One such operation is matrix multiplication which involves producing a product matrix from two argument matrices consisting of rows and columns of numerical values. Matrix multiplication generally involves multiplying values from a row of the first matrix with values at the same index of the columns of the second matrix adding the multiplied values together and inserting the result into a position in the product matrix corresponding to the intersection of the row and column. The process then repeats for each row in the first matrix.

The present disclosure relates to optimized matrix multiplication using vector multiplication of interleaved matrix values.

In general one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of identifying a first matrix and a second matrix to be multiplied to produce a result matrix wherein the first matrix is defined by rows each row including a plurality of row values at corresponding row indices and the second matrix is defined by columns each column including a plurality of column values at correspond column indices creating a first intermediate matrix including the row values from the first matrix ordered such that row values at the index in adjacent pairs of rows from the first matrix are included at concurrent indices within a same row of the first intermediate matrix the first intermediate matrix including at least two rows creating a second intermediate matrix including the column values from the second matrix ordered such that column values at the same index in adjacent pairs of columns from the second matrix are included at concurrent indices within a same column of the second intermediate matrix the second intermediate matrix including at least two columns for each adjacent pair of rows in the first intermediate matrix selecting adjacent pairs of columns in the second intermediate matrix and for each selected adjacent pair of columns and each pair of column values at the same index in the selected adjacent pair of columns initialize a column vector with a repeating pattern of the pair of column values at the same index in the adjacent pair of columns multiply the column vector by row vectors from the adjacent pair of rows containing row values at the same index as the pair of column values and increment numeric values in a row of the result matrix corresponding to the adjacent pair of rows by a product of multiplying the column vector by the row vectors.

Other embodiments of this aspect include corresponding systems apparatus and computer programs configured to perform the actions of the methods encoded on computer storage devices.

Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. By executing multiple vector multiplication instructions on vectors from a specially arranged matrices matrix multiplication operations may in some cases be performed in fewer instruction cycles than was possible utilizing previous techniques. Further a processor including a matrix multiplication instruction to perform matrix multiplication in this way may lead to increased performance in applications executing large numbers of matrix multiplication operations. Optimizing the performance of matrix multiplication may also enable increased efficiency and performance in real time user facing applications.

The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

Matrix multiplication is at the core of many data processing tasks such as for example speech recognition image classification graphics rendering and other tasks that involve rapidly processing large amounts of numerical data. Because of the high frequency with which matrix multiplication is performed in such applications even incremental speed improvements in matrix multiplication algorithms can lead to significant performance gains. Accordingly many processors include instructions to perform matrix multiplication which generally involve multiplying each numerical value in a particular row of a first matrix by a corresponding value in a column of a second matrix corresponding to the particular row. For example the first value in the first row of the first matrix is multiplied by the first value in the first column of the second matrix the second value by the second value and so on. These products are then summed and inserted into a result matrix at a position corresponding to the intersection of the row from the first matrix and the column of the second matrix. Some processors also include optimized operations for multiplying vectors of numerical values. Such operations may take two vectors of numerical values as input multiply values at corresponding offsets in each vector to produce a set of products and add adjacent pairs of products to produce a result vector. In some cases these vector multiplication instructions are very efficient and require few instruction cycles to complete.

Accordingly the present disclosure describes techniques to perform matrix multiplication using these optimized vector multiplication instructions by reordering the matrices to be multiplied. One example method includes given a column major and row major matrix to be multiplied creating a first intermediate matrix including the row values from the row major matrix ordered such that row values at the index in adjacent pairs of rows from the row major matrix are included at concurrent indices within a same row of the first intermediate matrix. A second intermediate matrix is created including the column values from the column major matrix ordered such that column values at the same index in adjacent pairs of columns from the column major matrix are included at concurrent indices within a same column of the second intermediate matrix. Then for each adjacent pair of rows in the first intermediate matrix adjacent pairs of columns are selected from the second intermediate matrix. For each selected adjacent pair of columns and each pair of column values at the same index in the selected adjacent pair of columns a column vector is initialized with a repeating pattern of the pair of column values at the same index in the adjacent pair of columns. The column vector is then multiple by row vectors from the adjacent pair of rows containing row values at the same index as the pair of column values. Numeric values in a row of a result matrix corresponding to the adjacent pair of rows are then incremented by a product of multiplying the column vector by the row vectors. In some implementations the order of the matrices to be multiplied may be reversed such that the column major matrix is the first argument and the row major matrix is the second argument.

The environment includes the matrix multiplication kernel . In some implementations the matrix multiplication kernel may be a software component accessible by programs running on a computing device containing the processor . The matrix multiplication kernel may present an Application Programming Interface API to the programs including a mechanism to specify a pair of matrices to be multiplied such as a function or procedure. In some cases the matrix multiplication kernel may be kernel module within an operating system such as LINUX Berkeley Software Distribution BSD UNIX or other operating systems. The matrix multiplication kernel may also be a hardware component connected to the processor and accessible by the programs.

The matrix multiplication kernel may interact with the processor to execute instructions for performing a matrix multiplication operation. In some cases the matrix multiplication kernel may issue assembly or machine language instructions to the processor to execute instructions. The matrix multiplication kernel may also execute instructions on the processor using an API associated with the processor such as a software module provided by the manufacturer of the processor .

In operation the matrix multiplication kernel uses instructions on the processor to create the intermediate matrices from the argument matrices . For example the matrix multiplication kernel may instruct the processor to allocate memory for the intermediate matrices and to populate the intermediate matrices with interleaved values from the argument matrices as described herein. This interleaving may be performed for example by using unpack instructions of the processor operable to read values from one location in memory e.g. the argument matrices and write the values to another location e.g. the intermediate matrices .

The environment includes the processor . Although illustrated as a single processor in two or more processors may be included in particular implementations of environment . The processor may be a central processing unit CPU a blade an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. The processor may also be a single processor core of a larger processor including multiple integrated processor cores.

In some implementations the processor may include a distributed system including multiple processors connected by a communications network and operable to perform multiple instructions in parallel. For example the distributed system may be operable to execute multiple vector multiplication instructions in parallel on different portions of the intermediate matrices . The matrix multiplication kernel may communicate with a management component of this distribute system in order to execute instructions. The memory described below may be a distributed storage system accessible by the multiple processors or including storage resources associated with each processor.

The processor includes a matrix multiplication instruction . In some implementations the matrix multiplication instruction may perform matrix multiplication using a technique different than the vector multiplication technique described herein. The matrix multiplication kernel may avoid using the matrix multiplication instruction in such a case. In some cases the matrix more application instruction may be implemented to perform matrix multiplication according to the optimized techniques described herein. In such a case the matrix multiplication kernel may use the matrix multiplication instruction to multiply the argument matrices .

The processor includes vector multiplication instruction . In operation vector multiplication instruction takes a pair of vectors as arguments. Elements at the same index in the pair of vectors are multiplied and adjacent products are added together to produce a result matrix. For example given the vectors 1 2 3 4 and 5 6 7 8 the vector multiplication instruction may first multiply elements at the same index in the vectors yielding intermediate vector of 5 12 21 32 . The vector multiplication instruction may then add adjacent values to produce a result vector including the values 17 i.e. 5 12 and 53 i.e. 21 32 . The use of the vector multiplication instruction is described in greater detail below.

Environment includes a memory . In some implementations the memory may be a storage device or set of storage devices integrated within the computing device including the processor such as for example a hard drive Random Access Memory RAM flash memory or other storage devices or combinations of storage devices. The memory may also be an external storage device accessed by the processor over a communications network such as for example Fibre Channel Ethernet USB IEEE 1394 or other networks.

The memory includes argument matrices . In some implementations the argument matrices may include numeric values stored in rows and columns in a contiguous block of the memory . The argument matrices may also be stored non continuously such as in a paging system or block based storage system. In some cases each of the argument matrices may be associated with a memory address used by the matrix multiplication kernel and the processor to refer to the matrix when interacting with the memory . Individual elements within the argument matrices may be accessed by specifying offsets from the memory address.

In some implementations the argument matrices may store different types of numeric values including but not limited to bits characters bytes integers of various sizes e.g. 16 bit 32 bit 64 bit floating point numbers double precision floating point numbers memory addresses or other types of numeric values.

The memory includes intermediate matrices . In some implementations the matrix multiplication kernel creates the intermediate matrices from the argument matrices to organize values from the argument matrices for use with the vector multiplication instruction . In some cases the matrix multiplication kernel may rearrange values in the argument matrices in place such that the intermediate matrices need not be created. The intermediate matrices may also be created by the processor in cases where the matrix multiplication instruction implements the vector multiplication techniques described herein. In some implementations the intermediate matrices may be deallocated or freed in the memory when the associated matrix multiplication completes.

The memory includes the product matrix . In some cases the product matrix stores the results of the matrix multiplication operation performed by the matrix multiplication kernel . The product matrix may be allocated before the matrix multiplication operation begins or it may be allocated when the first result values from the matrix multiplication operation are to be placed in it.

In some cases the various structures in the memory may be loaded into caches or registers associated with the processor during the matrix multiplication operation. For example when the matrix multiplication kernel executes a series of vector multiplication instructions on a portion of the intermediate matrices the values from the intermediate matrices may be stored in a cache or in registers of the processor to increase the speed of the operation. The processor may store these values automatically or the matrix multiplication kernel may explicitly indicate to the processor which value to store.

At a first intermediate matrix is created including the row values from the first matrix ordered such that row values at the index in adjacent pairs of rows from the first matrix are included at concurrent indices within the same row of the intermediate matrix. In some implementations the first intermediate matrix may be the first matrix with the values reordered such that storage space for a new matrix need not be allocated.

At a second intermediate matrix is created including the column values from the second matrix ordered such that column values at the same index in adjacent pairs of columns from the second matrix are included at concurrent indices within a same column of the second intermediate matrix. In some implementations the second intermediate matrix may be the second matrix with the values reordered such that storage space for a new matrix need not be allocated.

The remaining steps of the process are repeated for each adjacent pair of rows in the first intermediate matrix. At adjacent pairs of columns are selected in the second intermediate matrix. The remaining steps of the process repeated for each selected adjacent pair of columns and each pair of column values at the same index.

At a column vector is initialized with a repeating pattern of the pair of column values at the same index in the adjacent pair of columns. At the column vector is multiplied by row vectors containing row values from the adjacent pair of rows at the same index as the pair of column values. At numeric values in a row of the result matrix corresponding to the adjacent pair of rows are incremented by a product of multiplying the column vector by the row vectors.

Computing device includes a processor memory a storage device a high speed interface connecting to memory and high speed expansion ports and a low speed interface connecting to low speed bus and storage device . Each of the components and are interconnected using various busses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as display coupled to high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units. The memory may also be another form of computer readable medium such as a magnetic or optical disk.

The storage device is capable of providing mass storage for the computing device . In one implementation the storage device may be or contain a computer readable medium such as a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory the storage device or memory on processor .

The high speed interface manages bandwidth intensive operations for the computing device while the low speed interface manages lower bandwidth intensive operations. Such allocation of functions is exemplary only. In one implementation the high speed interface is coupled to memory display e.g. through a graphics processor or accelerator and to high speed expansion ports which may accept various expansion cards not shown . In the implementation low speed interface is coupled to storage device and low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a standard server or multiple times in a group of such servers. It may also be implemented as part of a rack server system . In addition it may be implemented in a personal computer such as a laptop computer . Alternatively components from computing device may be combined with other components in a mobile device not shown such as device . Each of such devices may contain one or more of computing device and an entire system may be made up of multiple computing devices communicating with each other.

Computing device includes a processor memory an input output device such as a display a communication interface and a transceiver among other components. The device may also be provided with a storage device such as a microdrive or other device to provide additional storage. Each of the components and are interconnected using various buses and several of the components may be mounted on a common motherboard or in other manners as appropriate.

The processor can execute instructions within the computing device including instructions stored in the memory . The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. Additionally the processor may be implemented using any of a number of architectures. For example the processor may be a CISC Complex Instruction Set Computers processor a RISC Reduced Instruction Set Computer processor or an MISC Minimal Instruction Set Computer processor. The processor may provide for example for coordination of the other components of the device such as control of user interfaces applications run by device and wireless communication by device .

Processor may communicate with a user through control interface and display interface coupled to a display . The display may be for example a TFT Thin Film Transistor Liquid Crystal Display display or an OLED Organic Light Emitting Diode display or other appropriate display technology. The display interface may comprise appropriate circuitry for driving the display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the processor . In addition an external interface may be provided in communication with processor so as to enable near area communication of device with other devices. External interface may provide for example for wired communication in some implementations or for wireless communication in other implementations and multiple interfaces may also be used.

The memory stores information within the computing device . The memory can be implemented as one or more of a computer readable medium or media a volatile memory unit or units or a non volatile memory unit or units. Expansion memory may also be provided and connected to device through expansion interface which may include for example a SIMM Single In Line Memory Module card interface. Such expansion memory may provide extra storage space for device or may also store applications or other information for device . Specifically expansion memory may include instructions to carry out or supplement the processes described above and may include secure information also. Thus for example expansion memory may be provided as a security module for device and may be programmed with instructions that permit secure use of device . In addition secure applications may be provided via the SIMM cards along with additional information such as placing identifying information on the SIMM card in a non hackable manner.

The memory may include for example flash memory and or NVRAM memory as discussed below. In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory expansion memory or memory on processor that may be received for example over transceiver or external interface .

Device may communicate wirelessly through communication interface which may include digital signal processing circuitry where necessary. Communication interface may provide for communications under various modes or protocols such as GSM voice calls SMS EMS or MMS messaging CDMA TDMA PDC WCDMA CDMA2000 or GPRS among others. Such communication may occur for example through radio frequency transceiver . In addition short range communication may occur such as using a Bluetooth WiFi or other such transceiver not shown . In addition GPS Global Positioning System receiver module may provide additional navigation and location related wireless data to device which may be used as appropriate by applications running on device .

Device may also communicate audibly using audio codec which may receive spoken information from a user and convert it to usable digital information. Audio codec may likewise generate audible sound for a user such as through a speaker e.g. in a handset of device . Such sound may include sound from voice telephone calls may include recorded sound e.g. voice messages music files etc. and may also include sound generated by applications operating on device .

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a cellular telephone . It may also be implemented as part of a smartphone personal digital assistant or other similar mobile device.

In various implementations operations that are performed in response to or as a consequence of another operation e.g. a determination or an identification are not performed if the prior operation is unsuccessful e.g. if the determination was not performed . Operations that are performed automatically are operations that are performed without user intervention e.g. intervening user input . Features in this document that are described with conditional language may describe implementations that are optional. In some examples transmitting from a first device to a second device includes the first device placing data into a network for receipt by the second device but may not include the second device receiving the data. Conversely receiving from a first device may include receiving the data from a network but may not include the first device transmitting the data.

 Determining by a computing system can include the computing system requesting that another device perform the determination and supply the results to the computing system. Moreover displaying or presenting by a computing system can include the computing system sending data for causing another device to display or present the referenced information.

Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on computer storage medium for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be or be included in a computer readable storage device a computer readable storage substrate a random or serial access memory array or device or a combination of one or more of them. Moreover while a computer storage medium is not a propagated signal a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be or be included in one or more separate physical components or media e.g. multiple CDs disks or other storage devices .

The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer readable storage devices or received from other sources.

The term data processing apparatus encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer a system on a chip or multiple ones or combinations of the foregoing The apparatus can include special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit . The apparatus can also include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system a cross platform runtime environment a virtual machine or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures such as web services distributed computing and grid computing infrastructures.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine object or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a filesystem. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few. Devices suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s user device in response to requests received from the web browser.

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a user computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN an inter network e.g. the Internet and peer to peer networks e.g. ad hoc peer to peer networks .

The computing system can include users and servers. A user and server are generally remote from each other and typically interact through a communication network. The relationship of user and server arises by virtue of computer programs running on the respective computers and having a user server relationship to each other. In some embodiments a server transmits data e.g. an HTML page to a user device e.g. for purposes of displaying data to and receiving user input from a user interacting with the user device . Data generated at the user device e.g. a result of the user interaction can be received from the user device at the server.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any inventions or of what may be claimed but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Thus particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous.

