---

title: Real time lockdown
abstract: A system and method that trusts software executables existent on a machine prior to activation for different types of accesses e.g. execution, network, and registry. The system detects new executables added to the machine as well as previously existent executables that have been modified, moved, renamed or deleted. In certain embodiments, the system will tag the file with a flag as modified or newly added. Once tagged, the system intercepts particular types of file accesses for execution, network or registry. The system determines if the file performing the access is flagged and may apply one or more policies based on the requested access. In certain embodiments, the system intercepts I/O operations by file systems or file system volumes and flags metadata associated with the file. For example, the NT File System and its extended attributes and alternate streams may be utilized to implement the system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09230098&OS=09230098&RS=09230098
owner: Websense, Inc.
number: 09230098
owner_city: San Diego
owner_country: US
publication_date: 20150213
---
This application is a continuation of U.S. patent application Ser. No. 13 900 954 filed May 23 2013 now U.S. Pat. No. 8 959 642 and entitled REAL TIME LOCKDOWN which is a continuation application of U.S. patent application Ser. No. 11 319 678 filed Dec. 28 2005 now U.S. Pat. No. 8 453 243 and entitled REAL TIME LOCKDOWN. Both of these prior applications are assigned to the assignee of the present application. The disclosures of these prior applications are also considered part of this application and are hereby incorporated herein by reference in their entirety.

The invention relates to security in computers and more particularly to a method for protecting executable software programs against infection by computer software virus programs.

Computer software virus programs on personal computers and or servers especially those received through the Internet are becoming more and more common and increasingly more dangerous. Virus programs are adapted to corrupt other executable computer software programs such as by replicating themselves over an existing program or by adding code to the beginning or end of the program. Since their appearance the number performance and intelligence of virus programs have greatly increased. The persons who write computer viruses continue to find means for making their viruses increasingly transparent and difficult to detect by a computer user.

However the methods used by various virus programs for infecting computer programs are substantially similar. Most computer viruses replicate themselves by infecting executable programs. Executable programs typically comprise a series of instructions that are executed by a central processing unit CPU of a computer containing the program when the program is invoked. The objective of computer viruses is to obtain control of a desired executable program before normal processing of the program begins. Therefore the virus program must have its instructions executed by the CPU before the CPU begins processing the instructions of the executable program.

Since the virus often writes its code into the program at several different locations restoring the program is a time consuming process. Further as the virus code is in the program at different locations it is substantially difficult to be absolutely sure that the virus code is completely removed from the program when the program is restored without damaging the program itself.

There are systems in the prior art for protecting executable programs from infections by virus programs. One such system performs a lockdown of the computer by inventorying all the files on the machine. In such a system an information technology professional initiates lockdown in response to an identified network or computer threat. The lockdown process creates a list of executable program files which are deemed as trusted. A signature is then created for the trusted executable program files. The trusted signature for an executable program file is compared to a newly created signature for that same program each time the program is executed. If the newly created signature does not match the trusted signature the information technology professional is notified. Operation of the prior art lockdown system is time consuming when collecting the trusted file information and creating signatures for the trusted files. The inefficiency in performing a lockdown is further exacerbated when the lockdown computer is a larger or shared server or computer.

It is desirable to not only efficiently monitor and protect computers from malicious executable program files but to also efficiently monitor the executable program file s behavior. These behaviors may include executions registry access and network access.

The systems and methods of the invention have several features no single one of which is solely responsible for its desirable attributes. Without limiting the scope of the invention as expressed by the claims which follow its more prominent features will now be discussed briefly. After considering this discussion and particularly after reading the section entitled Detailed Description of the Invention one will understand how the features of the system and methods provide several advantages over traditional virus protection systems.

One aspect is a method of preventing the execution of file data on a workstation. The method comprises identifying a file having modified file data flagging meta data associated with the modified file data and preventing the modified file data from executing based at least in part on the flagged meta data associated with the modified file data.

Another aspect is a method of creating a signature and flag for an executable software program on a workstation. The method comprises creating a new file on a workstation identifying the new file with a flag wherein the flag is a code added to meta data associated with the new file creating a hash for the new file wherein the hash is created at least in part on the meta data associated with the new file and storing the hash and the flag in a memory.

Still another aspect is a method of monitoring and tracking changes to a signature for a modified file. The method comprises modifying an executable file creating a signature for the modified file wherein the signature is based at least in part on meta data associated with the modified file and determining if the signature is already stored. The method further comprises that if the signature is already stored then determining if the signature is associated with a flag if the signature is not stored then adding a flag to meta data associated with the modified file if the signature associated with the modified file is not stored then associating a flag with the modified file and storing the flag and the signature associated with the modified file.

Another aspect is a method of protecting a workstation from a virus threat. The method comprises modifying meta data associated with a first file wherein the first file is a trusted file identifying a virus threat and initiating a lock down mode in response to the identified virus threat wherein files created or modified after the lock down is initiated are not allowed to execute. The method further comprises flagging a second file created after initiation of the lock down mode wherein the second file relates to the first file denying execution of the second file and terminating the lock down mode after denying execution of the second file.

Yet another aspect is a system for preventing the execution of software code. The system comprises a software module configured to modify a data file having meta data associated with the data file a storage medium configured to store the data file and a filter configured to flag the meta data associated with the modified file data during a lock down mode and prevent the modified file data from executing based at least in part on the flagged meta data associated with the modified file data.

Still another aspect is a system for preventing the execution of file data on a workstation. The system comprises means for modifying file data having meta data associated with the file data means for flagging the meta data associated with the modified file data and means for preventing the modified file data from executing based at least in part on the flagged meta data associated with the modified file data.

Another aspect is a program storage device storing instructions that when executed by a computer perform the method of identifying a file having modified file data flagging meta data associated with the modified file data and preventing the modified file data from executing based at least in part on the flagged meta data associated with the modified file data.

Still another aspect is a program storage device storing instructions that when executed by a computer perform the method of creating a new file on a workstation identifying the new file with a flag wherein the flag is a code added to meta data associated with the new file creating a hash for the new file wherein the hash is created at least in part on the meta data associated with the new file and storing the hash and the flag in a memory.

Yet another aspect is a program storage device storing instructions that when executed by a computer perform the method of modifying a executable file creating a signature for the modified file wherein the signature is based at least in part on meta data associated with the modified file and determining if the signature is already stored. The method further comprises that if the signature is in the signature table then determining if the signature is associated with a flag if the signature is not in the signature table then adding a flag to meta data associated with the modified file if the signature associated with the modified file is not stored then associating a flag with the modified file and storing the flag and the signature associated with the modified file.

Yet still another aspect is a program storage device storing instructions that when executed by a computer perform the method of modifying meta data associated with a first file wherein the first file is a trusted file identifying a virus threat and initiating a lock down mode in response to the identified virus threat wherein files created or modified after the lock down is initiated are not allowed to execute. The method further comprises flagging a second file created after initiation of the lock down mode wherein the second file relates to the first file denying execution of the second file and terminating the lock down mode after denying execution of the second file.

The following detailed description is directed to certain specific embodiments of the invention. However the invention can be embodied in a multitude of different systems and methods. In this description reference is made to the drawings wherein like parts are designated with like numerals throughout.

In connection with the following description many of the components of the various systems which may be included in the entire system some of which are referred to as modules can be implemented as software firmware or a hardware component such as a field programmable gate array FPGA or application specific integrated circuit ASIC which performs certain tasks. Such components or modules may be advantageously configured to reside on the addressable storage medium and configured to execute on one or more processors. Thus a module may include by way of example components such as software components object oriented software components class components and task components processes functions attributes procedures subroutines segments of program code drivers firmware microcode circuitry data databases data structures tables arrays and variables. The functionality provided for in the components and modules may be combined into fewer components and modules or further separated into additional components and modules. Additionally the components and modules may advantageously be implemented to execute on one or more workstations.

A system and method is described that monitors executable files existent on a workstation prior to the executable performing various functions including executing accessing a network and accessing a registry. The system detects new executable files added to the workstation as well as previously existing executable files that have been modified moved renamed or deleted. In certain embodiments the system flags the executable file as modified or newly added. Once flagged the system intercepts particular types of file functions and determines if the file performing the function is flagged. If flagged the system and methods applies one or more policies based on the requested function and the security status of the system. In certain embodiments the system intercepts I O operations by file systems or file system volumes and flags metadata associated with the file. For example the NT File System and its extended attributes and alternate streams may be utilized to implement the system.

Shown is a schematic representation of the workstation for implementation of the method described herein. The workstation typically comprises a central processing unit CPU for processing data an input means such as a keyboard for data processing and an output means such as a display or video monitor so that a user can view data being processed by the CPU . The workstation is further provided with a known storage medium or memory for storing data using for example magnetic optical or the like technology. In certain embodiments the memory is a hard disk drive. In certain embodiments the file application program or software resides on the hard disk in the memory . In certain other embodiments the file application program or software is stored separate from the memory .

For data processing the user typically calls an executable computer program or file stored on a hard disk in the memory such as a well known random access memory RAM . In certain embodiments the memory may include a Dynamic Random Access Memory DRAM Static Random Access Memory SRAM Erasable Programmable Read Only Memory EPROM or Electrically Erasable Programmable Read Only Memory EEPROM .

The user then utilizes the program to process data. After processing the program is closed and stored in the memory . Any data that is processed using the program may also be stored in the memory or the data may be stored on for example a USB key not shown .

The user may interface with an operating system when calling the executable computer program or file . The operating system provides a software platform on top of which the software file or application program can run. The operating system permits one or more file system filters to be inserted between an I O manager that receives user I O requests and the file system driver.

For example a file is written to run on top of a particular operating system . For personal computers the most popular operating systems are DOS OS 2 and Windows. Many times for simplicity of understanding we use terms that are most commonly used within Microsoft Windows environment which is the most common operating system for personal computers so it should be kept in mind that in other operating systems such as for example Linux or Macintosh some of these might have different names somewhat different implementations etc. although the principles are similar.

In certain embodiments the user interacts with the operating system through a set of commands. For example the DOS operating system contains commands such as COPY and RENAME for copying files and changing the names of files respectively. The commands are accepted and executed by a part of the operating system called the command processor or command line interpreter.

For NTFS the core operating system code runs in a privileged processor mode. This mode is also known as protected mode when referring to the CPU or kernel mode when referring to a process or thread . Protected mode provides direct access to system memory and other hardware.

Executable files run in a nonprivileged processor mode known as user mode and have no direct hardware access. Executable files use the Application Programming Interface API in the operating system to perform tasks such as reading or writing to memory or to the screen.

The display allows the user to enter commands by pointing and clicking at objects that appear on the display .

The objective of a virus program is to obtain control of the file or executable program before normal processing of the file begins. Infection of the file may occur when the virus program adds its executable instructions or code to the file. The virus then causes the file to be invoked with the virus instructions instead of the files native instructions corrupting and possibly destroying the file. Therefore the virus program tries to have its instructions executed by the CPU before the CPU begins processing the file s code. For the virus to be executed before the file the virus may either modify the file s first instruction or entry point of the file so that the code of the virus will be processed prior to the file being processed.

The virus program may attempt to infect the file by attaching its code to an end of the file. The virus may also modify an entry point indicator of the file by overwriting the beginning of the file and thus the entry point indicator with its own entry point indicator. Therefore the virus code becomes the first instructions of the file.

Exemplary operating system files include Windows registry and initialization files. The Windows registry is a database consisting of two files used to store settings and options for Windows and contains information and settings for all the hardware software users and preferences of the workstation . The Windows registry has a hierarchical structure with main branches containing sub branches called keys which store values containing the actual information stored in the registry.

A transport driver interface interfaces with the network to allow communication between the network which may be a LAN and the workstation . The LAN can have an Ethernet 10 base T topology or be based on any networking protocol including wireless networks token ring network and the like. The transport driver interface provides software programmers with a protocol independent network API for network services to exchange information and data with the other devices on the network . Programmers need only to program against the transport driver interface to support all available network protocols.

For example the workstation may communicate with other networks for example a WAN wide area network . In certain embodiments the network is a LAN in communication with a WAN. An exemplary WAN is the Internet. In embodiments having access to the Internet the transport driver interface communicates with the WAN via connection devices such as routers or other data packet switching technology for translating Internet TCP IP protocols into the proper protocols for communicating with the Internet. The connection devices used to implement a given system can vary as well as its location within the network . For example the connection devices could be located at the workstation s or connected peripherally to the Internet. An exemplary connection device includes a firewall module not shown coupled to a router module not shown .

The workstation may also be capable of communicating with other devices via a Public Switched Telephone Network PSTN using the transport driver interface . An internal bus may allow communication between each of the components connected thereto.

The file system refers to how the operating system stores and locates files. Exemplary file systems include Windows NT File system NTFS File Allocation Table FAT Compact Disk File System CDFS and Common Internet File System CIFS . The files may be stored on the memory .

The file system filter is configured to monitor the file system . In this manner the file system filter can for example scan file data for viruses enforce disk usage quotas encrypt data and perform other similar functions. Exemplary file system filters include encryption filters and anti virus filters. In certain embodiments the file system filter identifies new or modified executable programs from the file system . The file system filter flags the meta data associated with modified or newly added files. The file system filter also identifies flags in the meta data associated with a new or modified executable program.

In certain embodiments the file system filter is a kernel mode driver configured to enhance the underlying file system . The file system filter performs various file related computing tasks requested by a user of the workstation . These tasks may include for example passing file system I O requests and data through anti virus software file system quota providers file replicators and encryption compression products. Preferably the file system filter watches I O to and from executable files for example exe suffix files looking for flags. In certain embodiments the file system prevents new files and files that have been modified from executing. The file system filters can be stacked or otherwise arranged linearly e.g. chained and perform their operations in the order in which they are stacked. For example in the Windows 2000 operating system file system filter drivers are stacked into a driver stack where they are able to intercept file system directed requests and responses to and from the file system .

Hooks are third party subroutines and are the same as native system application programming interfaces API . System API hooks are installed by changing the system service descriptor table. Typically hooks are installed to monitor application software s interaction with the system. Exemplary hooks include CreateProcess and RegCreateKey. In the embodiment illustrated in the hook software program hooks into the operating system APIs and filters access to execution or access to registry. For example the hook initiates the file system filter to prevent the operating system from executing a file corrupted by a virus.

In certain embodiments the file system filter identifies or flags new files and modified files. Preferably these flags are added to the meta data associated with the user data file. In this way the user data file is not modified by the file system filter . The file system filter subsequently relies upon the flags in the meta data to monitor input and output I O operations from the file system . For example when an executable file is requested by the operating system the file system filter checks the meta data that is associated with the requested executable file for one or more flags. The file system filter may allow deny or limit the requested executable file from executing at least partially based upon whether the meta data includes one or more flags. In certain embodiments the file system filter comprises a kernel which monitors file system activity. The kernel is an essential part of the file system filter that performs basic I O functions.

The methods and systems may be embodied as computer executable code or software stored in memory or stored elsewhere and accessible by the workstation . The computer executable code may be stored and executed at a remote site that is in communication with workstation for protecting software programs against infection by computer software virus programs. An intrusion detection system determines whether to allow the operating system to execute one or more files from the file system . In certain embodiments the intrusion detection system is the hook . The intrusion detection system further identifies or flags newly created and modified files. The intrusion detection system or hook is configured to determine what access if any is allowed to the flagged files.

In certain embodiments when an executable file is launched the hook detects the launch and directs the software to analyze meta data related to the requested file. As part of its analysis the software can modify the existing meta data related to the requested file. Modification of the existing meta data may be performed when the requested file is new or modified. In certain embodiments a modification to the meta data for a new file is different than a modification to the meta data for a modified file.

In one embodiment the software checks to see if the meta data matches any meta data signatures for trusted executable files. If a match between the requested file and meta data is found the software need not modify the meta data as the requested file has previously been identified as a trusted file.

If the software does not find a matching meta data signature the software then determines how to proceed with the requested file. For example running of the application could be allowed when a lock down is not in force. Alternatively the software can stop execution of the requested file when a lock down is in force.

In certain embodiments the software flags the meta data by adding a flag hash or other code to the meta data. In certain embodiments the hash is generated from properties of the requested file. Examples of such properties include the name publisher suite hash file size version and additional information or properties which are associated with the requested file.

Once the executable file that is being requested to run on the workstation is identified a policy which corresponds to the meta data for that file is also identified. The file system filter identifies a policy to associate with the requested file based at least in part on the meta data to determine what access privilege should be applied to the request to run the file. These policies or rules can include for example allowing the execution of the program denying execution of the program alerting the user that the request to run the application will be logged and allowing the user a specific amount of time in which to run the application. In certain embodiments the policies are only implemented when a lock down is in force. For example when a lock down is in force the file system filter disallows execution of new files and modified files.

Returning to decision state if a flag is not associated with the hash for the modified file a flag is added to the meta data associated with the requested file at state . The process then continues to end state .

Returning to decision state if the hash identifying the modified file is not in the hash table the process moves to a state where a flag is added to the modified file. Next at a state the flag and hash associated with the modified file are stored in a hash flag table. The process then moves to end state .

Returning to decision state if a flag is associated with the requested file the process moves to a decision state where the software determines whether the flag is restricted. If the flag is not restricted the process proceeds to state as described above.

Returning to decision state if the flag associated with the requested file is restricted the software determines whether the modified file is a trusted file. A trusted file may have a valid digital signature. If the file is a trusted file or has a valid digital signature the process proceeds to state as described above.

Returning to decision state if the modified file is not a trusted file and does not have a valid digital signature the software applies the policy for a restricted file. The policy may disallow the requested file to execute on the workstation .

Returning to start state if an attempt is made to access the registry the process moves to a state . Next at a state the software determines which executable file attempted to access the registry. Next at a state the software creates a hash for the identified file. The process then continues to decision state as described above.

Returning to start state if an attempt is made to access the network the process moves to a state . Next at a state the software determines which executable file attempted to access the network. Next at a state the software creates a hash for the identified file. The process then continues to decision state as described above.

The process begins at a start state . Next at a state lock down mode is in force. The lock down mode may be initiated due to a virus threat. In certain embodiments the workstation is continually in lock down mode. In certain embodiments the workstation is continually in lock down mode even when there is no virus threat. In embodiments where lock down is initiated due to a virus threat the source of the virus threat may be within the local network or external to the local network.

The process continues to a state where the software flags all files as they are created or modified after lock down mode is initiated. Files are flagged in addition to the files previously flagged before lock down mode was initiated. In this way the software is able to operate almost seamlessly since the software has already created hashes signatures and flags for the files that were created or modified before lock down mode was initiated. By using the file system meta data to tag the file creation and changes the system does not calculate signatures hashes for the files when lock down is initiated. Hence enforcement of lockdown is more efficient. Advantageously employing lock down is quick in response to a new virus threat.

The process moves to a state where the software denies operation of the flagged files. The process then moves to a state where the lock down mode is terminated. Termination of lock down mode may occur in response to updating and enabling a file system filter for example an anti virus filter to identify the computer software virus program. In certain embodiments the workstation is continually in lock down mode.

While the above detailed description has shown described and pointed out novel features of the invention as applied to various embodiments it will be understood that various omissions substitutions and changes in the form and details of the device or process illustrated may be made by those skilled in the art without departing from the spirit of the invention. The scope of the invention is indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

