---

title: Mobile application, identity interface
abstract: Techniques for managing identities are provided. In some examples, identity management, authentication, authorization, and token exchange frameworks may be provided for use with mobile devices, mobile applications, cloud applications, and/or other web-based applications. For example a mobile client may request to perform one or more identity management operations associated with an account of a service provider. Based at least in part on the requested operation and/or the particular service provider, an application programming interface (API) may be utilized to generate and/or perform one or more instructions and/or method calls for managing identity information of the service provider.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600652&OS=09600652&RS=09600652
owner: Oracle International Corporation
number: 09600652
owner_city: Redwood Shores
owner_country: US
publication_date: 20150706
---
The present application is a continuation of U.S. patent application Ser. No. 13 485 509 filed on May 31 2012 now U.S. Patent Application Publication No. US 2013 0086639 A1 now allowed which is a non provisional application of and claims the benefit and priority under 35 U.S.C. 119 e of U.S. Provisional Application No. 61 541 034 filed Sep. 29 2011 entitled MOBILE SECURITY AND SINGLE SIGN ON the entire contents of each being incorporated herein by reference for all purposes.

This application is also related to application Ser. No. 13 485 283 filed on May 31 2012 now U.S. Patent Application Publication No. US 2013 0086669 A1 entitled MOBILE APPLICATION SINGLE SIGN ON MANAGEMENT application Ser. No. 13 485 420 filed on May 31 2012 now U.S. Patent Application Publication No. US 2013 0086210 A1 entitled MOBILE APPLICATION IDENTITY RELATIONSHIP MANAGEMENT and application Ser. No. 13 485 569 filed on May 31 2012 now U.S. Patent Application Publication No. US 2013 0086211 A1 entitled MOBILE APPLICATION RESOURCE MANAGEMENT ADVICE the entire contents of each are hereby incorporated by reference as if fully set forth herein under 35 U.S.C. 120.

Modern enterprise computing solutions often deploy one or more different access management and or identity services for allowing authentication authorization token exchanges identity management etc. Additionally different access management and or identity services are accessible via different methods and or utilizing different application programming interfaces APIs . However such APIs may not be configured for interaction with external entities such as mobile devices or cloud applications over the Internet. Additionally such external entities may not be natively capable of interacting with enterprise computing solutions and or their deployed access management and or identity management systems. As such finding improved ways to manage identities continues to be a priority.

Techniques for managing identities are provided. In some examples identity management authentication authorization and token exchange frameworks may be provided for use with mobile devices mobile applications cloud applications and or other web based applications. For example a mobile client may request to perform one or more identity management operations associated with an account of a service provider. Based at least in part on the requested operation and or the particular service provider an application programming interface API may be utilized to generate and or perform one or more instructions and or method calls for managing identity information of the service provider.

According to at least one example a system may receive a request to perform a function associated with a service provider. The request may be received from a client application and may be formatted as a representational state transfer REST call. Additionally the system may also determine an access management service call corresponding to the service provider for which performance of the function is being requested. Further the system may perform the access management service call.

In one example the client application from which the request is received may be implemented as a mobile application of a mobile device a software as a service SaaS application and or a Rich Internet Application RIA .

Additionally in some examples the request to perform the function associated with the service provider may include an authorization request. The authentication request may include a user identifier ID of a user of the client application. The authentication request may also include a password of the user and or a client token used to indicate that the client application has been authenticated. The user ID and the password may in some cases be used to authenticate the user with the access management service.

In one example the access management service call performed by the system may include a method call to implement a token exchange.

Additionally in some examples the request to perform the function associated with the service provider may include an access request. The access request may in some cases include a client token indicating that the client is authenticated a user token indicating that the user is authenticated and or an indication of the service provider for which access is being requested. In some cases the system may receive an indication that the user and or the client application have been granted access to the service provider by the access management service. In this case the system may then provide an access token to the client application.

In one example service calls for a first access management service may be different from service calls for a second access management service. Further in some cases the access management service to be utilized may be specified by the service provider but not indicated to the client application. In this way the client application can make REST calls independent of the API or other configuration of the service provider.

According to at least one example a system may receive an instruction to manage an identity. The system may also be configured to model an identity relationship associated with the identity that is to be managed as a uniform resource identifier URI . The system may also map the URI to a schema associated with a service provider and or transmit the schema to the service provider for managing the identity as requested.

In some examples the received instruction to manage an identity may be received by a mobile client application an RIA or a SaaS application. The received instruction may also be formatted as a REST call. Additionally in some aspects the modeled identity relationship may include the identity to be managed and or an association between the identity and another entity. Further the identity relationship may be modeled as a URI based at least in part on a string of characters including the identity and the association.

Techniques for managing single sign on are also provided. In some examples single sign on functionality may be provided for use on mobile devices by utilizing mobile applications cloud applications and or other web based applications. For example a mobile application or mobile web browser may request to authenticate with or access one or more service providers. Authentication credentials may be requested from a user of the mobile device to facilitate such authentication and or access. Based at least in part on a successful log in access to server resources from other applications on the same mobile device may be provided without successive or repetitive credential requests to the user.

According to at least one example a computer readable memory may store instructions that when executed by one or more processors cause the one or more processors to receive one or more requests to access a service provider. In some examples the requests may be received from a first application of the mobile device. Additionally the instructions may also cause the one or more processors to log in a user associated with the first application. The instructions may further cause the one or more processors to provide a token for accessing the service provider to the first application. A second token may then be provided to a second application.

In some examples the first application may be configured as an application agent for providing single sign on functionality for the second application. Additionally in some examples the second application may be configured as a web browser application or a native application.

In one example the first application may be configured as a browser application associated with a web service while the second application may be configured as a native application associated with an application service provider. The browser application and the native application may be executed or otherwise hosted by a mobile device.

In some examples the first application may be configured as a native application of a mobile device. The native application may be associated with an application service provider. Additionally the second application may be configured as a browser application associated with a web application. The browser application may be executed or otherwise hosted by a mobile device. Further in some examples the second application may be configured as a second native application associated with a second application service. The second native application may also be executed or otherwise hosted by the mobile device.

In one example a log in of the user may include an authentication of the user with an authentication service that utilizes a representational state transfer REST call. In another example a second token provided to a second application may enable the second application to log in to an application service provider associated with the second application without the user providing log in credentials to the application service provider associated with the second application.

Techniques for a resource management advice service are also provided. In some examples resource management advice and or instructions may be provided for use with mobile devices mobile applications cloud applications and or other web based applications. For example a mobile client may request to perform one or more resource management operations associated with a service provider. Based at least in part on the requested operation and or the particular service provider advice and or instructions for managing the resource may be provided.

According to at least one example a computer readable memory may store instructions that when executed by one or more processors cause the one or more processors to receive a request to manage a secure resource of a service provider. The request may be received from a client application and may be formatted as a representational state transfer REST call. Additionally the instructions may also cause the one or more processors to determine an acquisition path for performing the management of the secure resource. The instructions may further cause the one or more processors to generate an instruction set for following the acquisition path. The instruction set may include at least one instruction. Further the instructions may cause the one or more processors to transmit the instruction set to the client application.

In one example the client application from which the request is received may be implemented as a mobile application of a mobile device a software as a service SaaS application and or a Rich Internet Application RIA . Additionally in some examples the request to manage the secure resource may include a request to access the secure resource a request to update the secure resource or a request to delete the secure resource. The secure resource may include profile information associated with a user of the client application payroll information associated with a user of the client application or social information associated with a user of the client application. The generated instruction may in some cases be protected by a security filter. In some aspects the acquisition path may be determined dynamically based at least in part on the secure resource and or a change associated with the secure resource.

In one example the instructions may cause the one or more processors to receive based at least in part on the transmitted instruction set an authentication request from the client application. The instructions may also cause the one or more processors to provide based at least in part on the authentication request an authentication token to the client application.

Additionally in some examples the instructions may cause the one or more processors to determine a second acquisition path for performing the management of the secure resource generate a second instruction set and transmit the second instruction set to the client.

The foregoing together with other features and embodiments will become more apparent upon referring to the following specification claims and accompanying drawings.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Embodiments of the present disclosure are directed to among other things providing identity management services to one or more entities e.g. external computing entities and or enterprise computing entities via a computing resource and or identity interface service computing system. As used herein an identity interface service may include one or more computing systems for providing a pluggable interface layer between client applications and other service providers. For example an identity interface service may receive identity management instructions from client applications e.g. mobile applications of mobile devices SaaS applications RIAs combinations of the foregoing or the like and provide appropriately translated instructions to one or more service providers identity providers and or access management providers.

In some aspects the identity interface service may provide the ability for mobile applications to perform authentication authorization auditing token services user profile management password management and or ID management. Additionally these services may be exposed or otherwise provided to the mobile applications or other external client applications that may not natively be able to interact with such services e.g. services deployed by or within an enterprise solution . In one example the identity interface service may provide a REST interface to the client applications to allow their communication of identity management requests to an identity service. In this way the client applications may utilize their native Internet based operations such as those utilizing but not limited to the hypertext transfer protocol HTTP and or hypertext markup language HTML . Further the identity interface service may allow plug in capabilities for the service providers including but not limited to enterprise solutions identity services access management services and or other identity related solutions. For example an identity service of an enterprise solution may plug in to the identity interface service to allow for secure interaction with a client application from which it would not ordinarily be able to receive instructions and or requests. RESTful APIs may be provided for such service providers and in some examples security models may be provided for securing the RESTful APIs.

In one non limiting example the identity interface service may receive one more identity propagation and or token exchange requests from a client application attempting to access a service provider. The request may be received in REST format i.e. as a REST call and may indicate that the client application has been authenticated. The identity interface service may based at least in part on the service provider e.g. an access management service of an enterprise solution determine an appropriate identity propagation and or token exchange instruction to be performed. The identity interface service may then perform the instruction in order to provide appropriate access tokens to the client application. Alternatively or in addition the identity interface service may format the instruction based at least in part on an API of the service provider in such a way that the service provider may be able to perform the instruction. The identity interface service may then transmit the formatted instruction or instructions to the service provider. The service provider may then perform the instructions and in some cases provide the appropriate access token to the identity interface service. In this way the client application may be provided with appropriate access tokens for accessing the service provider e.g. assuming the client application and the user are granted access without directly communicating with the service provider and without knowledge of particular and or proprietary APIs of the service provider. While this example describes identity propagation i.e. replicating authenticated identities through multiple systems and or token exchange i.e. providing access tokens based on prior authentication the identity interface service may be configured as described above for implementing other services as well including but not limited to authentication authorization auditing profile management password management ID management etc.

For example the identity interface service may also be configured to receive and or process requests from client applications to manage identity relationships. As used herein an identity relationship may include a logical assertion between people e.g. employees partners customers contractors etc. based at least in part on a set of one or more criteria. For example a lightweight directory access protocol LDAP group may establish relationships between members of a group. Additionally an Org chart may describe how relationships between individuals get established based at least in part on criteria such as but not limited to peer reports to etc. Similarly these identity relationship management requests may also be received as REST calls. That is mobile applications and or other external client applications may be configured to follow one or more RESTful APIs provided by the identity interface service to make identity management requests. The identity interface service may then determine based at least in part on the request and the service provider that manages the identity information for which the request is being made an appropriate instruction or set of instructions to be sent to the service provider. In this way service providers may plug in to the identity interface service independent of which client applications will be calling. Additionally client applications may make identity relationship management requests to the identity interface service independent of which type and or particular service provider actually manages the identity information.

This brief introduction including section titles and corresponding summaries is provided for the reader s convenience and is not intended to limit the scope of the claims nor the preceding sections. Furthermore the techniques described above and below may be implemented in a number of ways and in a number of contexts. Several example implementations and contexts are provided with reference to the following figures as described below in more detail. However the following implementations and contexts are but a few of many.

The one or more service provider computers and or enterprise solution computers may also deploy or otherwise utilize one or more proprietary or third party identity services access management services or other services via the identity service access management computers shown in . In some examples the identity service access management computers may be part of or otherwise integrated with the enterprise solutions computers to form an intranet system . In this way the identity service access management computers may not be externally facing to the Internet without the assistance of some sort of additional interface such as but not limited to an identity interface service hosted by one or more identity interface service computers . As such in some cases the user devices the service provider computers and or enterprise solution computers which in some examples are the same system the identity service access management computers and or the identity interface service computers may each be accessible by one another via the one or more networks .

In some examples the networks may include any one or a combination of multiple different types of networks such as cable networks the Internet wireless networks cellular networks intranet systems and or other private and or public networks. While the illustrated example represents the users accessing the web service application over the networks the described techniques may equally apply in instances where the users interact with a service provider computer via the one or more user devices over a landline phone via a kiosk or in any other manner. It is also noted that the described techniques may apply in other client server arrangements e.g. set top boxes etc. as well as in non client server arrangements e.g. locally stored applications etc. .

The web service application may allow the users to interact with the service provider computers such as to store access and or manage data develop and or deploy computer applications and or host web content. The one or more service provider computers perhaps arranged in a cluster of servers or as a server farm may host the web service application . Other server architectures may also be used to host the web service application . The web service application may be capable of handling requests from many users and serving in response various user interfaces that can be rendered at the user devices . The web service application can be any type of website that supports user interaction including social networking sites online retailers informational sites blog sites search engine sites news and entertainment sites and so forth. Additionally the described techniques can similarly be implemented outside of the web service application .

As noted above the architecture may include one or more user devices. The user devices may be any type of computing device such as but not limited to a mobile phone a smart phone a personal digital assistant PDA a laptop computer a desktop computer a thin client device a tablet PC etc. In some examples the user devices may be in communication with the service provider computers via the networks or via other network connections. Further the user devices may also be configured to implement one or more mobile application RIAs or SaaS applications. In some examples however these client applications may not be able to communicate with the service provider computers and or enterprise solution computers e.g. when trying to access one or more identity services and or access management services that are not externally facing . However in some cases the client applications may be able to communicate or otherwise interact with the identity service access management computers by sending requests to the identity interface service computers . In this way the identity interface service computers may act as an interface layer between the client application of the user devices e.g. mobile devices and the identity service access management computers of the enterprise solutions and or service providers.

In one illustrative configuration the user devices may include at least one memory and one or more processing units or processor s . The processor s may be implemented as appropriate in hardware computer executable instructions firmware or combinations thereof. Computer executable instruction or firmware implementations of the processor s may include computer executable or machine executable instructions written in any suitable programming language to perform the various functions described.

The memory may store program instructions that are loadable and executable on the processor s as well as data generated during the execution of these programs. Depending on the configuration and type of user device the memory may be volatile such as random access memory RAM and or non volatile such as read only memory ROM flash memory etc. . The user device may also include additional removable storage and or non removable storage including but not limited to magnetic storage optical disks and or tape storage. The disk drives and their associated computer readable media may provide non volatile storage of computer readable instructions data structures program modules and other data for the computing devices. In some implementations the memory may include multiple different types of memory such as static random access memory SRAM dynamic random access memory DRAM or ROM.

Turning to the contents of the memory in more detail the memory may include an operating system and one or more application programs or services for implementing the features disclosed herein including at least an identity console such as a Web browser or dedicated application e.g. a smart phone application a tablet application etc. and or the web service application . The identity console may be configured to receive store and or display a website or other interface for interacting with the identity interface service computers . Additionally the memory may store access credentials and or other user information such as but not limited to user IDs passwords other user information and or service requests to be sent to the service provider computers and or identity interface service computers . In some examples the other client information may include information for authenticating an account access request such as but not limited to a device ID a cookie an IP address a location or the like. In addition the other client information may include a user provided response to a security question or a geographic location obtained by the user device . Further the service requests may include requests to update and or manage identities requests to access one or more service providers requests to authenticate or authorize the user etc.

Additionally in some aspects the identity console may allow a user to interact directly with the identity interface service computers . For example the user devices may make access service and or identity management requests to the identity interface service computers via the identity console . In some examples the requests sent to the identity interface service computers may be formatted as REST calls that were predefined and or exposed by the identity interface service computers . Also utilizing the identity console in some examples a user may make requests for accessing the service provider computers and or enterprise solution computers . Further the identity console may also be utilized for making identity relationship management requests to the service provider computers and or enterprise solution computers . In some cases each of these requests may be received by the identity interface service computers as REST calls and translated or otherwise utilized to generate one or more requests and or instructions for the service provider computers and or enterprise solution computers .

In some aspects the identity interface service computers may also be any type of computing devices such as but not limited to mobile desktop thin client and or cloud computing devices such as servers. In some examples the identity interface service computers may be in communication with the user devices via the networks or via other network connections. The identity interface service computers may include one or more servers perhaps arranged in a cluster as a server farm or as individual servers not associated with one another. These servers may be configured to host features described herein including but not limited to the identity interface service. Additionally in some aspects the identity interface service computers may be configured as part of an integrated distributed computing environment.

In one illustrative configuration the identity interface service computers may include at least one memory and one or more processing units or processor s . The processor s may be implemented as appropriate in hardware computer executable instructions firmware or combinations thereof. Computer executable instruction or firmware implementations of the processor s may include computer executable or machine executable instructions written in any suitable programming language to perform the various functions described.

The memory may store program instructions that are loadable and executable on the processor s as well as data generated during the execution of these programs. Depending on the configuration and type of identity interface service computers the memory may be volatile such as random access memory RAM and or non volatile such as read only memory ROM flash memory etc. . The identity interface service computers or servers may also include additional storage which may include removable storage and or non removable storage. The additional storage may include but is not limited to magnetic storage optical disks and or tape storage. The disk drives and their associated computer readable media may provide non volatile storage of computer readable instructions data structures program modules and other data for the computing devices. In some implementations the memory may include multiple different types of memory such as static random access memory SRAM dynamic random access memory DRAM or ROM.

The memory the additional storage both removable and non removable are all examples of computer readable storage media. For example computer readable storage media may include volatile or non volatile removable or non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. The memory and the additional storage are all examples of computer storage media.

The identity interface service computers may also contain communications connection s that allow the service provider computers to communicate with a stored database another computing device or server user terminals and or other devices on the networks . The identity interface service computers may also include input output I O device s such as a keyboard a mouse a pen a voice input device a touch input device a display speakers a printer etc.

Turning to the contents of the memory in more detail the memory may include an operating system and one or more application programs or services for implementing the features disclosed herein including a user application module an REST interface module and or a replying party module . The user application module may be configured to generate host or otherwise provide the identity console and or a website for accessing the identity console .

In some examples the REST interface module may be configured to provide a REST API receive REST API calls determine appropriate identity service and or access management service method calls i.e. API calls provide the method calls and or perform instructions associated with the method calls. Similarly the relying party module may be configured to receive or determine the method calls provide the method calls and or perform instructions associated with the method calls. In other words the REST interface module may be utilized for interacting with the client applications and or user devices while the relying party module may be utilized for interacting with the service provider computers and or the identity service access management computers .

By way of example and without limitation a client application of a user device may transmit a REST API call for performing a particular identity management operation. The REST interface module may receive the API call and determine in some cases based at least in part on a particular service provider corresponding to the request an appropriate method call for either the service provider computers and or the identity service access management computers . In some examples the REST interface module may provide the pluggability of the identity interface service computers by transmitting the method call to the identity service access management computers which in turn may either respond to the identity interface service computers via the relying party module or communicate a response and or instruction to the REST interface module the service provider computers and or the enterprise solution computers . However in other examples the REST interface module may instead transmit the REST API and or the determined method call to the relying party module . The relying party module may then provide the appropriate method call to the service provider computers and or the identity service access management computers . Further the relying party module may also be configured to allow pluggability of the identity interface service computers such that any number or type of service providers and or identity service access management computers may plug in to the identity interface computers and rely on the identity interface computers to interpret the REST calls of client applications on their behalf. A few examples of the operations of the identity interface service computers are described in greater detail below with reference to at least .

Additional types of computer storage media which may also be non transitory that may be present in the identity interface service computers may include but are not limited to programmable random access memory PRAM SRAM DRAM RAM ROM electrically erasable programmable read only memory EEPROM flash memory or other memory technology compact disc read only memory CD ROM digital versatile discs DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the service provider computers . Combinations of any of the above should also be included within the scope of computer readable media.

Alternatively computer readable communication media may include computer readable instructions program modules or other data transmitted within a data signal such as a carrier wave or other transmission. However as used herein computer readable storage media does not include computer readable communication media.

As noted in at least one example one or more aspects of the environment or architecture may incorporate and or be incorporated into a distributed program execution service such as that hosted by the identity interface service computers . depicts a simplified architecture illustrating additional aspects and or features of the identity interface service computers of . For examples illustrates an identity interface service such as that implemented by the identity interface service computers of receiving information requests and or instructions from one or more client applications such as but not limited to SaaS applications mobile applications and or RIAs . As noted above these requests may formatted by the client applications as REST calls and may be based at least in part on a REST API provided by the identity interface service . Additionally the identity interface service may in communication with one or more service providers data repositories and or a data tier via a pluggable layer . As noted above by providing a pluggable layer the one or more service providers data repositories may be added and or removed to the service on the fly and or independent of the type of client application with which it may interact. In this way the service may maintain flexibility.

In some examples the service providers data repositories may include one or more security policy services access management services directory services databases and or identity stores e.g. LDAP servers . Additionally according to some aspects the service providers data repositories may be in communication with one or more pluggable services such as but not limited to an access software development kit SDK a trust service and or an identity library . In some examples the access SDK the trust service and or the identity library may collectively make up the interface layer for plugging the service providers data repositories into the identity interface service via the pluggable layer . For example the access SDK may be responsible for plugging the access management service into the service .

The identity interface service may also include an administration module for controlling managing or otherwise communicating with one or more runtime data stores audit data stores and or configuration data stores of the data tier . The data tier may be in communication with the service via an infrastructure platform which may be configured to attach the data tier as well as perform internal file management logging monitoring and or other administrative tasks. In some cases the administration module and the data tier may be responsible for controlling configuring managing and or otherwise administering the services and or data associated with the identity interface service . Additionally the identity interface service may also include a security filter a request response handler one or more REST service engines and or a service provider interface SPI framework .

In some aspects the security filter may be configured to maintain the security of the REST API that is provided by the identity interface service . In this way only authorized and or authenticated client applications may be provided with the REST APIs and or only API calls from authorized and or authenticated client applications may be processed. The request response handler may be configured to receive requests from and provide responses to the client applications etc. In some examples the REST service engines may be configured to govern policies of the identity interface service such as but not limited to enforcing compliance with rules enhancing infrastructure security and or streamlining service operations of the identity interface service .

Further the SPI framework may translate map or otherwise determine appropriate method calls and or instructions for the service providers data repositories . These method calls and or instructions may be based at least in part on the REST API call received and or the service provider with which the request is associated. For example and without limitation the request response handler may receive a request to update an identity relationship. The response may be formatted as a REST call from one of the client applications . The request response handler may forward the request to the SPI framework where one or more different instructions or sets of instructions may be determined. For example the instructions may be different depending on the service provider data repository for which the request was intended. That is if the request was for a database the SPI framework may determine a different instruction or set of instructions for updating the identity relationship than if the request was for an LDAP identity store .

In some aspects implementation of the SPI framework may include utilizing one or more SPIs such as but not limited to an authentication SPI and authorization SPI a profile SPI and or other ID SPIs . Additionally the authentication SPI may be configured to provide interaction with one or more access management providers and or one or more trust service providers . The authorization SPI may be configured to provide interaction with the one or more access management providers . The profile SPI may be configured to provide interaction with one or more identity service providers and or directory service providers . Further the other ID SPI may be configured to provide interaction with one or more other service providers such as but not limited to password management services policy management services token exchange services and or user provisioning services. In this way one or more individual SPIs may be responsible for communicating with the service providers data repositories via the pluggable layer . That is the SPI framework may act a proxy between the client applications and the one or more service providers .

In some examples via the pluggable layer the identity interface service may transmit the determined method calls and or instructions to a provider platform . By way of example only the provider platform may include the access management SDK the trust service the identity library and or any APIs of the service providers described with reference to . As shown in depending on the service provider with which the requested command is associated the identity interface service may provide a different implementation. For example the provider implementation may determine one set of method calls for an access management provider and a different set of method calls for a web application toolkit provider . As such from the single REST command received at one more different method calls or sets of method calls may be provided to one or more different service providers. While method calls are shown being determined and provided to an access management provider and a web application toolkit provider it should be understood that other examples are possible without departing from the overall meaning of . For example appropriate method calls may be provided to a security policy service provider an identity propagation service provider or any other identity service that may be deployed or otherwise operated on behalf of a service provider or enterprise solution.

According to some aspects the client authentication token exchange may include attempting to acquire a client token indicating that the REST client has been authenticated. At the user agent may transmit client credentials including but not limited to a client ID and a client password to the REST service . As discussed above at least with reference to the REST service may determine appropriate method calls for communicating with the one or more service providers. In this case the REST service is communicating with an AuthN service provider . As such the REST service may transmit the authentication request to the AuthN provider at . In response the AuthN provider may provide an appropriate client token at to the REST service . At the REST service may provide the client token to the user agent . Now that the client application i.e. the user agent has been authenticated the user agent may attempt to authenticate the user of the client application.

According to some aspects the user authentication token exchange may include attempting to acquire a user token indicating that the user of the REST client has been authenticated. At the user agent may transmit the client token previously received from the AuthN provider and client credentials including but not limited to a client user ID and a client password. The REST service may provide the user credentials and client token to the AuthN provider according to the appropriately corresponding method calls at . In response the AuthN provider may provide a client token to the REST service at . At the REST service may provide the client token to the user agent .

The first and second application token exchanges may be similar to one another however in the first an access request is being made for App while in the second an access request is being made for App . As such the context i.e. for which Application access is being requested for each token exchange is different. At the user agent may transmit a GetToken request to App with App indicated as the context. In this way in some examples App may indicate to the AuthN provider the appropriate access token to be presented upon authentication. The user agent may then transmit an access request to the REST service at . The access request may include the client token and the user token both previously received from the AuthN provider and the appropriate context here App . At the REST service may provide the access request with the client token user token and context to the AuthN provider . Upon authentication by the AuthN provider the AuthN provider may provide an access token to the REST service at . The REST service may then provide the access token to the user agent at and the user agent may then gain access to App by providing the received access token at . In this way the REST service may act as a translator proxy or other interface for communication between the user agent via REST calls and the AuthN provider e.g. an enterprise solution that may not natively support calls from mobile applications .

The second application token exchange may not differ much from the first application token exchange . However the context will be different based at least in part on the fact that App is different from App . Additionally in some aspects based at least in part on the different context the method calls used by the REST service may be different if a different AuthN provider is used. That is each Application may deploy or otherwise utilize a different AuthN provider . In any event in some examples the user agent may transmit a GetToken request at to App with App indicated as the context. In this way in some examples App may indicate to the AuthN provider the appropriate access token to be presented upon authentication. The user agent may then transmit an access request to the REST service at . The access request may include the client token and the user token both previously received from the AuthN provider and the appropriate context here App . At the REST service may provide the access request with the client token user token and context to the AuthN provider . Upon authentication by the AuthN provider the AuthN provider may provide an access token to the REST service at . The REST service may then provide the access token to the user agent at and the user agent may then gain access to App by providing the received access token at .

In one non limiting example two different client applications client App and client App may each transmit identity relationship management requests via one or more networks to an identity interface service . The identity interface service may be any identity interface however in some examples it may be implemented by the identity interface service computers of . In some aspects the identity interface service may include a RESTful API interface and HTTP implementation module and or an SPI for identity relationships module . Additionally in some examples the HTTP implementation module may include a security filter model module and or an API for web services module . The RESTful API interface may in some cases be the layer with which client applications users and or other external applications interact. As noted above the identity relationships may be expressed as URIs and the interaction model may be through standard HTTP REST methods such as but not limited to GET POST PUT and or DELETE. In some cases HTTP GET may be used to perform read and search operations on people and their relationship data while POST PUT and DELETE may be utilized to manipulate and or manage relationships. As such the HTTP implementation module may be configured to translate or otherwise interpret the received HTTP calls.

For example an orgchart may be expressed as URIs similar to . . . people alice reports and . . . people alice manager. These two URIs may represent two sets of relationships one from alice to her reports the other from alice to her manager. Additionally among relationships from alice to her reports a particular instance of relationship may be pinpointed with a URI as . . . people alice reports bob. This URI may represent the relationship between alice and bob of the reports criteria. Further the people entity data and people relationship data may be accessed through a consistent interface which may be based on HTTP or other protocols. In this way the interface may stay the same regardless of the types of backend identity repository technology stacks used e.g. different types of LDAP servers and their LDAP schemas and or RDBMS schemas as the service providers may map these people and their relationships.

Additionally in some examples the identity interface service may also include an SPI module for allowing data sources to plug in. In some examples the SPI module may include logic that coordinates interactions between the HTTP layer and the provider layers. For example different provider implementations e.g. service provider A and or service provider B may have their own custom logic to interact with different data stores e.g. various types of LDAP servers a virtual LDAP directory or an RDBMS database . In some cases each of these data stores may have its own schema and its own attributes. For example custom logic within a service provider may deal with differences in network protocols and or differences in schema definitions. Further these kinds of custom logic implementations may be responsible for providing a relatively consistent behavior across different service providers for the HTTP layer to invoke.

As noted the HTTP implementation module may include the security filter model module and or the API for web services module . In some cases the security filter model module may be configured to centralize the validation and logic of one or more types of HTTP headers. For example client application and or user authorization headers may be included with the received URIs to indicate that a particular HTTP request may carry the authorization privilege permissions of a particular user or client application. Once header values are validated by the security filter model module a security context SC may be constructed based at least in part on the verified user identity and or client application identity. The security filter logic in some examples may consult some authorization policy which may be coarse grain or fine grain to check whether the verified user identity and or client application identity have enough permission and privilege to continue the operation targeted by the particular HTTP request. Additionally in some examples this authorization decision may be offloaded and or delegated to another authorization service. The security context SC may then be propagated further to various components on the server side including different service provider implementations e.g. service providers A and or B that retrieve and or manage identity relationship data. While two client Apps and two service providers are shown in other configurations including those with more or less client applications and or service providers are possible as well.

Further the example architectures tools and computing devices shown in are provided by way of example only. Numerous other operating environments system architectures and device configurations are possible. Accordingly embodiments of the present disclosure should not be construed as being limited to any particular operating environment system architecture or device configuration.

Additionally some any or all of the processes may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. As noted above the code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

In some aspects the process of may be performed by the one or more identity interface service computers shown in . The process may begin by receiving a request to perform a function associated with a service provider at . As noted above the service provider may include but is not limited to an identity service an access management service a token exchange service an enterprise solution combinations of the foregoing or the like. Additionally the function to be performed may be any function of the one or more service providers such as but not limited to an access request an identity relationship management request an authentication request an authorization request etc. At the process may determine an access management service call for the service provider. That is a particular method call or custom logic for an access management service provider may be determined. The method call for the access management service i.e. the access management service call may be for performing and or communicating instructions for performing the requested function. The process may then perform the determined method call e.g. by passing the appropriate parameters to the service provider at . The process may then end at by providing an access token to the client application upon receiving an indication that access has been or should be given to the client application.

Client computing devices may be general purpose personal computers including by way of example personal computers and or laptop computers running various versions of Microsoft Windows and or Apple Macintosh operating systems cell phones or PDAs running software such as Microsoft Windows Mobile and being Internet e mail SMS Blackberry or other communication protocol enabled and or workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems . Alternatively client computing devices and may be any other electronic device such as a thin client computer Internet enabled gaming system and or personal messaging device capable of communicating over a network e.g. network described below . Although exemplary system environment is shown with four client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with server .

System environment may include a network . Network may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP SNA IPX AppleTalk and the like. Merely by way of example network can be a local area network LAN such as an Ethernet network a Token Ring network and or the like a wide area network a virtual network including without limitation a virtual private network VPN the Internet an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the IEEE 802.11 suite of protocols the Bluetooth protocol known in the art and or any other wireless protocol and or any combination of these and or other networks.

System environment also includes one or more server computers which may be general purpose computers specialized server computers including by way of example PC servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. In various embodiments server may be adapted to run one or more services or software applications described in the foregoing disclosure. For example server may correspond to a server for performing processing described above according to an embodiment of the present invention.

Server may run an operating system including any of those discussed above as well as any commercially available server operating system. Server may also run any of a variety of additional server applications and or mid tier applications including HTTP servers FTP servers CGI servers Java servers database servers and the like. Exemplary database servers include without limitation those commercially available from Oracle Microsoft Sybase IBM and the like.

System environment may also include one or more databases . Databases may reside in a variety of locations. By way of example one or more of databases may reside on a non transitory storage medium local to and or resident in server . Alternatively databases may be remote from server and in communication with server via a network based or dedicated connection. In one set of embodiments databases may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to server may be stored locally on server and or remotely as appropriate. In one set of embodiments databases may include relational databases such as databases provided by Oracle that are adapted to store update and retrieve data in response to SQL formatted commands.

Computer system may additionally include a computer readable storage media reader a communications subsystem e.g. a modem a network card wireless or wired an infra red communication device etc. and working memory which may include RAM and ROM devices as described above. In some embodiments computer system may also include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

Computer readable storage media reader can further be connected to a computer readable storage medium together and optionally in combination with storage device s comprehensively representing remote local fixed and or removable storage devices plus storage media for temporarily and or more permanently containing computer readable information. Communications system may permit data to be exchanged with network and or any other computer described above with respect to system environment .

Computer system may also comprise software elements shown as being currently located within working memory including an operating system and or other code such as an application program which may be a client application Web browser mid tier application RDBMS etc. . In an exemplary embodiment working memory may include executable code and associated data structures used for relying party and open authorization related processing as described above. It should be appreciated that alternative embodiments of computer system may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile non transitory removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices data signals data transmissions or any other medium which can be used to store or transmit the desired information and which can be accessed by a computer.

Although specific embodiments of the invention have been described various modifications alterations alternative constructions and equivalents are also encompassed within the scope of the invention. Embodiments of the present invention are not restricted to operation within certain specific data processing environments but are free to operate within a plurality of data processing environments. Additionally although embodiments of the present invention have been described using a particular series of transactions and steps it should be apparent to those skilled in the art that the scope of the present invention is not limited to the described series of transactions and steps.

Further while embodiments of the present invention have been described using a particular combination of hardware and software it should be recognized that other combinations of hardware and software are also within the scope of the present invention. Embodiments of the present invention may be implemented only in hardware or only in software or using combinations thereof.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that additions subtractions deletions and other modifications and changes may be made thereunto without departing from the broader spirit and scope.

Illustrative methods and systems for providing statistically triggered data placement are described above. Some or all of these systems and methods may but need not be implemented at least partially by architectures such as those shown in above.

Although embodiments have been described in language specific to structural features and or methodological acts it is to be understood that the disclosure is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as illustrative forms of implementing the embodiments. Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments could include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

