---

title: Secure proxy
abstract: Methods and systems are provided herein to enable secure proxying of network traffic between trusted and untrusted environments. In particular, a secure proxy may be provided that includes a set of policies. The policies may be applicable to various network protocol layers (e.g., an application layer), network traffic types, and/or endpoint resolution. The set of policies may be used to inspect, restrict and/or modify traffic between the trusted and untrusted environment to ensure data and network security. A proxy device may use the set of policies, for example, to obtain current service-related information (such as the list of IP addresses) currently associated with a computing resource requested by an application. Such endpoint information may be used, in turn, to update a white list.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09660998&OS=09660998&RS=09660998
owner: Amazon Technologies, Inc.
number: 09660998
owner_city: Reno
owner_country: US
publication_date: 20151002
---
This application is a continuation of U.S. patent application Ser. No. 13 619 317 filed on Sep. 14 2012 entitled SECURE PROXY and issued to U.S. Pat. No. 9 154 479 on Oct. 6 2015 the content of which is hereby incorporated by reference in its entirety.

Computing resource services such as web services are typically exposed to customers at known service endpoints. A service endpoint may be associated with a set of Internet protocol IP addresses that point to physical components properties of a service like a particular region datacenter load balancer or server. Given a service endpoint customers and their applications may be directed to the IP addresses associated with the endpoint using Domain Name System DNS services and network layer routing mechanisms. Over time the set of IP addresses associated with an endpoint may change due to service expansion component outages load balancing and other reasons.

Traditionally enterprise and government backend environments have used transport layer firewalls to restrict network traffic to only a known set of IP addresses. Such firewalls are useful in protecting backend assets located in such environment such as critical data handling applications but may be insufficient for integrating such backend environments with web based services described above. First it is often challenging to manually update the firewalls to allow a potentially large number of dynamically changing IP addresses associated with service endpoints. Second transport layer firewall rules may be insufficient to detect application level anomalies such as data leaks.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein include a secure proxy that provides secure communication between entities in trusted environment and untrusted environment. The secure proxy may include a secure endpoint resolver and one or more security layers. The security layers may include one or more policies applicable to different network protocol layers e.g. network transport application etc. . Each policy may be associated with a set of criteria and a set of actions that may be taken upon the matching of the criteria. The policies may be provided to ensure data security and to prevent data leaks i.e. that intended data is sent to intended places. Some or all network traffic to and or from the trusted environment may be subject to validation by the security layers which may involve allowing block or modifying the network traffic according to the policies. In some embodiments the security layers may be provided and or updated by a service provider a customer a third party and the like.

In some embodiments the secure proxy may receive an application located in a trusted environment to access a computing resource service service that is located in an untrusted environment. The request may specify an identifier of the service or service endpoint such as a Uniform Resource Identifier URI . In response to the request the secure proxy in particular the secure endpoint resolver may determine the requested endpoint information such as currently valid network addresses associated with the service or service endpoint. To this end the secure endpoint resolver may query and receive responses from one or more endpoint services provided by a service provider of requested service and or one or more Domain Name System DNS services that may include Domain Name System Security Extensions DNSSEC services. Such queries and responses may be subject to validation by the security layers. In some embodiments the security layers may be updated to reflect the endpoint information that is resolved by the secure endpoint resolver. For example a list validated network addresses associated with a service may be added to a whitelist to allow connection to and or from the service.

In some embodiments an endpoint service may provide endpoint and or service related information. Such endpoint and or service related information such as a list of current Internet protocol IP addresses associated with a service may change over time. Since the endpoint service may be provided by a service provider of the requested service the information that the endpoint service provides may be considered relatively authoritative and or authentic. In some embodiments a service provider may provide and or update functionalities associated with the security layers and or secure endpoint resolver. For example a service provider may provide or update service specific application level security layers. For another example a service provider may provide endpoint service specific information to the secure endpoint resolver.

 Untrusted environment on the other hand refers to a computing environment where computing components are afforded less protection from outside intrusions. Examples of untrusted environment may include a public network the Internet a wireless network and the like. Typically access to data and computing resources such as servers is more restricted in a trusted environment and less restricted in an untrusted environment. It should be noted that the terms trusted and untrusted are used herein in a relative rather than in absolute sense to refer to the overall security of an environment. For example environment A may be a trusted environment compared to environment B but untrusted compared with environment C.

As illustrated in an application running in a trusted environment may communicate with components such as one or more computing resource services services provided by a computer resource provider service provider located in an untrusted environment . Examples of an application may include enterprise application for a business or a government backend data processing applications banking and payment applications and the like. Each service may provide typically over a network access to one or more hardware or software physical or virtual computing resources not shown . Services may include access to computer applications such as related to email applications e business communications media and entertainment and the like computing platforms including operating systems web servers databases programming language execution environment and the like computing infrastructures such as physical or virtual machines data storage load balancers virtual local area networks VLANs data centers and the like or any other kind of computing services deliverable over a network. In various embodiments a network may include public or private computer networks a local area network LAN wireless local network WLAN a wide area network WAN a cellular data network and or other communication network.

In various embodiments a secure proxy may be provided for example at the peripherals of a trusted environment to inspect validate and or modify some or all network traffic flowing to and or from an untrusted environment to reduce the risk of security breaches to the trusted environment including data leaks eavesdropping computer viruses denial of service DoS attacks and the like. Additionally secure proxy may provide fail safe or fail secure protection for systems components and the like in the trusted environment . In various embodiments some or all of components of secure proxy may be implemented by computer software or hardware or both. In some embodiments some or all components of a secure proxy may be implemented as part of one or more applications . In other embodiments components of secure proxy may be implemented independently of the applications .

Secure proxy may include one or more security layers for inspecting or otherwise restricting network traffic at different layers of suitable network protocols such those specified by Open System Interconnection OSI protocols Internet protocol suite including Transmission Control Protocol TCP and Internet Protocol IP AppleTalk Bluetooth IEEE 802.11 and the like. For example security layers may include a network layer firewall that inspects and or restricts network layer packets based on information included in the packets such as source and destination IP addresses protocol information and the like. As another example security layers may include a transport layer firewall that monitors transport layer traffic such as Transmission Control Protocol TCP data stream User Datagram Protocol UDP communications and the like. As yet another example security layer may include an application layer firewall or filter that validate application layer traffic such based on Hypertext Transfer Protocol HTTP Web Distributed Authoring and Versioning WebDAV Telnet File Transfer Protocol FTP Simple Mail Transfer Protocol SMTP Secure Shell SSH Lightweight Directory Access Protocol LDAP Domain Name System DNS protocols and the like. In various embodiments security layers may be implemented for various physical or logical entities with various granularities. For example security layers may be implemented for specific service application port server host clusters of servers the entire site and the like or any combination thereof. In some embodiments security layers may be implemented by augmenting traditional firewalls known to those skilled in the art with techniques described herein.

In some embodiments each of security layers may be associated with a set of policies or rules governing network traffic flowing into the trusted environment inbound traffic and or out of the trusted environment outbound traffic . Each policy or rule may be associated with a set of criteria or conditions that if matched by applicable network traffic triggers one or more actions. In various embodiments a policy may be configured for inbound traffic outbound traffic or both. The set of criteria associated with a policy may specify the computer user program or application service port protocol type of connection and the like or any combination thereof that the policy applies to. In various embodiments determining whether a set of criteria is met includes inspecting relevant values from attributes or data fields that are specific to a particular network protocol layers. For example a policy applicable to a network layer may include criteria that match against fields contained in network layer packets such as source and destination IP addresses protocol identifier time to live TTL payload data and the like. For another example a transport layer specific security layer may include criteria that match against connection state information derived from accumulated network packets e.g. in memory such as sequence numbers of packets and the like. As yet another example an application layer specific security layer may inspect content of application data to check for data format consistencies detect data leaks virus and the like.

In some embodiments each policy may be associated with one or more actions to be performed when the associated set of criteria is matched. Such actions may include allowing blocking or otherwise restricting network connections modifying data included in the network traffic providing error or warning messages e.g. in a log a user interface updating security layer policies and the like. For example in an embodiment a policy may specify that only network connections to and or from certain network addresses are allowed. The set of criteria for the policy may include a list of allowed network address such as IP addresses as well as the application s computer s and user s that the policy applies to. In another embodiment a policy may specify a list of network addresses to and or from which connections are blocked. In general a policy may be associated with access control lists that may include a whitelist allowed list a blacklist blocked list or a combination thereof. Such a policy may apply to a particular application or program computer user service port protocol type of protocol and the like or any combination thereof. In various embodiments policies criteria actions may be added removed changed or otherwise updated by a process an administrator a customer a service provider and the like. As used herein a customer refers to the system s of a customer entity such as an individual company or other organization that utilizes secure proxy functionalities described herein. Such systems may include datacenters mainframes individual computing devices distributed computing environments and customer accessible instances thereof or any other system.

In some embodiments a service provider may provide policies including criteria and or actions for some of the security layers . For example a service provider may provide policies governing application level network traffic to ensure for example that inbound and or outbound data conforms to a schema associated with a service. Such a schema may specify the methods allowed for a service the input output data types the protocol used for the service and the like. In some embodiments inbound and or outbound data may be type checked and or modified to ensure that such a schema is followed. In some embodiments policies may be based on components or properties of the service provider the customer or customer applications or a combination thereof. For example policies may be specific to an endpoint service or service provider and or specific to a customer or customer application. For example such policies may be based at least in part on a service level agreement between the service provider and the customer. In some embodiments a service provider may provide a default set of policies to a customer in the trusted environment and or periodic policy updates to the customer. In various embodiments such service provider provided policies may be modified customized and or combined with existing customer firewall rules in any suitable order or priority as may be determined a service provider a customer a third party and the like.

In various embodiments a computing resource service service may be exposed to customers using a service endpoint. A service endpoint may include a network address or identifier that indicates where a computing resource service is located in a network. The network identifier may include for example a Uniform Resource Identifier URI . The URI may include a scheme name e.g. http https a server name e.g. www ftp a network address specified in a human memorable form such as Domain Name System DNS name e.g. serviceprovider.com or numeric form such as IP address e.g. 123.45.678.9 a port number e.g. 80 a path to the computing resource and the like. For example an example URI may be http www.serviceprovider.com 80 path servicename. In various embodiments a numeric based network address may conform to any suitable IP protocols such as Internet protocol version 6 IPv6 Internet protocol version 4 IPv4 and the like. Where a human memorable character based network address e.g. a DNS names is provided it may need to be resolved to a machine recognizable numeric based network address e.g. an IP address before the network address can be used in locating a computing resource located at the network address. It should be noted that DNS names and IP addresses are used merely as examples of human memorable and machine recognizable network addressees respectively. Other embodiments of human memorable and machine recognizable network addresses or service identifiers are also covered by this disclosure.

In various embodiments a service endpoint may be associated with one or more IP addresses each pointing to a service component associated with the service. As used herein a service component may refer to a physical or virtual component of the service such as a server a component of a computer a computer system and the like or any combination thereof. Examples of a service component may include a server data center load balancer and the like. In various embodiments multiple IP addresses may be associated with a service endpoint to improve availability capacity reliability and other performance characteristics of the service. For example a service endpoint may be associated with multiple several servers or data centers located at different geographical regions each serving a particular group of requests such as from a particular region. Over time the set of IP addresses associated a service endpoint may change for various reasons. For example service components may become available to provide new functionalities increase capacity load balancing and the like. Similarly existing service components may become unavailable temporarily or permanently due to hardware or software failure outages maintenance load balancing and the like.

In some embodiments a service provider may provide one or more endpoint services to enable a customer or a customer application to look up endpoint information regarding a particular service including the IP addresses that are currently associated with the service. Such an endpoint service may include graphical user interfaces GUIs Web based interfaces such as a web service programmatic interfaces such as application programming interfaces APIs and or sets of remote procedure calls RPCs corresponding to interface elements messaging interfaces in which the interface elements correspond to messages of a communication protocol and or suitable combinations thereof. In various embodiments information provided by such endpoint service is considered authoritative and or authentic or at least given the same level of trustworthiness as the service provider of the endpoint service. In an embodiment such an endpoint service may take as input a human memorable network address of a service such as a DNS name and returns a list of machine recognizable network addresses associated with the service such as IP addresses associated with the service. In other embodiments the endpoint service may also provide other endpoint information such service descriptor e.g. a Web Services Description Language file service status capacity load usage statistics and the like. In some embodiments an endpoint service may communicate with one or more services for example to receive the most up to date endpoint information and or to provide endpoint related information. In some embodiments an endpoint service may also communicate with one or more DNS servers not shown operated by the service provider or other entities to obtain DNS resource records. In various embodiments endpoint service may be operated by the same or different service provider that provides the services .

In an embodiment an application in a trusted environment may initiate a connection via a network to a computing resource service . In some embodiments the application s request specifies an endpoint identifier such as a network address associated with the service. In some embodiments such endpoint identifier may include human memorable network addresses that need to be resolved to machine recognizable network addresses. For example such human memorable network addresses may include a DNS name that needs to be resolved to an IP address. Such endpoint resolution may be performed by a secure endpoint resolver which may or may not be part of the secure proxy .

In various embodiment a secure endpoint resolver may resolve endpoint and or service related information associated with a service. Such endpoint information may include for example a list of network e.g. IP addresses that are currently associated with a service. Endpoint information resolution may be performed in a secure fashion as described herein. In some embodiments the secure endpoint resolver may receive a request from an application to connect to a service the request specifying an identifier or a service or service endpoint. The secure endpoint resolver may send a query request to an endpoint service provided that the query request is first validated by the security layers . More than one query requests to more than one endpoint services may be sent. In response to a query request an endpoint service may determine current endpoint information associated with the service or service endpoint including a set of active network addresses e.g. IP addresses schema protocol availability software hardware characteristics and the like. The endpoint service may provide such endpoint information to the secure endpoint resolver in one or more responses. Coming into the trusted environment the response from an endpoint service may be subject to validation of the same or different security layers or may not be subject to any validation before being received by the secure endpoint resolver . In some embodiments the secure endpoint resolver may determine the endpoint information based on the received endpoint information and provide such information to the requesting application . Such determination may be based on security layer policies priority or order provided by the endpoint service or a customer or any suitable algorithms. In some embodiments in addition to or instead of querying endpoint services the secure endpoint resolver may query DNS servers some of which may support Name System Security Extensions DNSSEC . In an embodiment the secure endpoint resolver is configured to authenticate information received from DNSSEC servers. For example the secure endpoint resolver may be configured to perform cryptographic functions necessary to verify digital signatures provided by DNSSEC servers using predetermined algorithms as well as intermediate DNSSEC queries to form an authentication chain. In some embodiments a secure endpoint resolver may determine trusted network addresses based at least in part on results from both endpoint services and DNSSEC servers. For example in an embodiment the secure endpoint resolver may obtain or derive a first set of network addresses from one or more endpoint services and a second set of authenticated network addresses from DNSSEC servers and determine trusted network addresses based on the two sets. For example the secure endpoint resolver may take the intersection or the union of the two sets or take some network addresses from either or both sets e.g. giving preference to one of the sets .

In some embodiments policies associated with security layers may be updated based at least in part on endpoint information received by the secure end resolver . In some embodiments policies may be updated to allow connections to at least some of the network addresses determined to be trusted by the secure endpoint resolver . For example in an embodiment some or all of the trusted network addresses may be added to a whitelist and or removed from a blacklist associated with the requesting application. For another example network addresses not determined to be trusted may be removed from a whitelist and or added to a blacklist. In some other embodiments policies may be updated based on other endpoint information. For example if endpoint information includes new or updated service schema information application level policies may be changed to ensure conformity with such a schema.

In some embodiments once the secure endpoint resolver provides a resolved endpoint information such as network addresses associated with a service to an application a connection may be established between the application and the service . Such a connection may include a secure connection based on a cryptographic protocol such as Transport Layer Security TLS Secure Sockets Layer SSL Internet Protocol Security IPsec and the like. In various embodiments subsequent data communication between the application and the service is proxied through the secure proxy as illustrated by the thicker line in . For example such proxying may include decrypt and or encrypt network traffic between the application and the service and applying relevant polies associated with the security layers as described herein.

In various embodiments endpoint information for a particular service may include a list of network addresses currently associated with a service. Furthermore endpoint information may include other service related information such as a schema or descriptor of the service e.g. a Web Services Description Language or WSDL file hardware and or software characteristics associated with the service and or service components such as availability capacity protocols usage and or performance statistics and the like. In some embodiments endpoint information provided by an endpoint service may be sorted ranked or otherwise organized in any suitable manner before being provided. For example a response provided by an endpoint service may include a list of IP addresses ranked in descending order by server load capacity associated with the servers at the IP addresses.

In some embodiments an endpoint service may provide endpoint information based at least in part on information gathered from various sources. Any of these sources may be provided by the same or different entity or entities for the endpoint service and or for the services . For example the endpoint service may communicate with one or more directory services including DNS services Active Directory and the like. Specifically the endpoint service may obtain domain software hardware information of a server from a domain controller or resolve a DNS name from a DNS server for example.

In some embodiments an endpoint service may attempt to communicate with one or more servers located at certain IP address for example to determine whether the servers are running and or to retrieve current server related information. The endpoint service may also communicate with one or more load balancers for example to determine a set of suitable servers associated with a service. The endpoint service may also communicate with a remote or local data store that may contain information such as service configuration customer information policy information metering and accounting information usage information and the like. The endpoint service may also communication with a cache to store and retrieve service related information. In some embodiments an endpoint service may also communicate with the services through service provided interfaces to obtain current service specific information. In some embodiments an endpoint service may communicate with entities other than those described above to obtain current service related information.

In various embodiments an endpoint service may combine information thus gathered in any suitable manner and provides such information to a requesting entity for example. In some embodiments an endpoint service may provide endpoint information based at least in part on information included in the request to the endpoint service such as client IP address client identity and other information. For example if a client IP address indicates that the request comes from Africa then the endpoint service may only provide a list of servers located in Africa or provide those servers at the top of the list. For another example the endpoint service may select the servers based on access rights associated with a client. In some embodiments the request may specify a maximum number of network addresses that the client needs or one or more criteria that the returned set of servers must meet including bandwidth capacity geographic region security availability and the like. In other embodiments an endpoint service may provide endpoint information based on other factors such as the time of the day or year industry or regulatory requirement and the like and or according to any suitable algorithm such random selection statistical analysis and the like. In some embodiments responses from an endpoint service may include DNS resource records or information derived from DNS resource records.

In some embodiments an endpoint service may be configured to perform one or more cryptographic operations such as encryption providing a digital signature or digest and the like. Such operations may render the responses tamper resistant and or inaccessible to unintended entities.

In an illustrative embodiment the secure endpoint resolver may also be connected to one or more data stores . A data store may be used to store endpoint information received by the secure endpoint resolvers such as responses from endpoint service resource records from one or more DNS services or DNSSEC services . In some embodiments such information may be associated with the requesting application process or the like. In some embodiments a data store may contain information that may facilitate the authentication of endpoint information such as relevant parameters cryptographic keys security certificates credentials authentication or encryption decryption algorithms and the like. In particular data store may include authentication credentials and or cryptographic keys necessary to communicate with endpoint service . For another example data store may include cryptographic keys to authenticate resource records from a DNSSEC service . In some embodiments the secure endpoint resolver may also be connected to a cache that stores received endpoint information to expedite the response time for subsequent endpoint queries. In some embodiments data stored in cache may be valid only for a limited period of time to prevent the use of stale data. For example data stored in cache may be associated with a Time to Live TTL value such as 30 seconds beyond which the data is no longer valid.

In some embodiments the secure endpoint resolver may be configured to connect to predetermined endpoint resolution entities such as endpoint services and or a DNSSEC service based on configurable information e.g. stored in data store . In some embodiments such configurable information may include a configuration file provided and or updated by a service provider a system administrator or a third party provider. Such configurable information may include network address such as an IP address or a URI for endpoint resolution entities cryptographic keys and other parameters.

In some embodiments the secure endpoint resolver may be configured to communicate with various sources such as one or more endpoint services traditional DNS services and or DNSSEC services . In some cases secure endpoint resolver may decrypt authenticate validate combine or otherwise process responses received from any of these sources to determine current endpoint information which may include the current set of IP addresses associated with a service. In some embodiments such responses may be validated by security layers before and or after the responses are processed by the secure endpoint resolver . In some embodiments the secure endpoint resolver may change or cause changes to security layers based on the endpoint information. For example the security layers may be updated to allow network traffic to and or from a set of IP addresses determined to be currently associated with a service. In some embodiments some or all of the endpoint information associated with a service may be provided to an application to enable it to establish a connection with the service based on the endpoint information.

In some embodiments one or more service providers may provide default implementation of secure proxy . Such default implementation may include default implementations for security layers and or secure endpoint resolver . The default implementation may be provided for example in the form of installer files configuration files or any other format stored in one or more computer readable media. In various embodiments the default implementation of secure proxy may be installed on one or more computer systems operated by a customer of the service provider by the customer the service provider or a third party. Such default implementation may be provided to replace or augment any existing software hardware installed on the customer s computer systems such as a firewall a DNS resolver application or the like. In some embodiments the functionalities provided in the default implementation of the secure proxy may be customized for a particular service customer application networking or computing environment or configuration and the like or any combination thereof.

In some embodiments the default implementation of a secure endpoint resolver may enable the secure endpoint resolver to perform some or all of the endpoint lookup functionalities described herein. For example the default implementation of the secure endpoint resolver may allow the secure endpoint resolver to query certain default endpoint services for endpoint information related to services provided by the service provider . For example the default implementation may include a map that associates services with endpoint services that provides information related to the services. In another embodiment the default implementation may provide functionalities related to the querying of DNS including DNSSEC services. For example the default implementation may include cryptographic keys encryption algorithms and the like for example as may be required to handle DNSSEC related transactions.

In some embodiments the default implementation of security layers may provide validation functionalities specific to one or more network protocol layers as described in connection with . For example in some embodiments the default implementation may provide an application layer security layer that includes policies and associated actions that are specific to services provided by a service provider. For example such policies may be used to validate that application data going to a particular service conforms to schema definitions protocols and the like proscribed by the service. For example a policy may specify protocols e.g. HTTP content type e.g. XML port number e.g. 80 allowed methods request and response format input output data types and the like associated with a service. For another example a policy may validate the network address and or port number of outbound data to ensure that data is not transmitted to unauthorized destinations. For yet another example a policy may validate the types of data fields in outbound data to prevent leak of sensitive data e.g. customer credit card numbers being passed as telephone numbers . In other embodiments the default implementation of security layers may include functionalities targeted for non application layer network protocol layers such as transport layers network layers. In various embodiments policies and actions may include configuration files in various formats such as Extensible Markup Language XML JavaScript Object Notation JSON and the like.

The default implementation of security layers may provide secure proxy functionalities for inbound data outbound data or both. In some embodiments security layers may provide functionalities such as encryption decryption authentication and the like to enable proxying of a secure connection between a service and an application. Information necessary to perform such functionalities e.g. credentials cryptographic keys may be provided by a customer a service provider or a third party. In various embodiments the default implementation of security layers may be provided to a customer as separate installations or to augment existing software and or hardware firewalls that the customer may have.

In some embodiments the default implementation of a secure proxy may be provided and or installed at least in part by a customer . In other embodiments default implementation provided by a service provider may be further configured or customized by a customer . For example a customer may add remove or modify policies e.g. whitelist blacklist and actions associated with some of the default security layers for a particular application computer computer systems and the like. As another example the functionalities of a secure endpoint resolver may be configurable by a customer. For example a customer may add remove or modify endpoint service information required by a secure endpoint resolver . In some embodiments a customer may have the administrative control over various aspects such as the timing location and content of the installation configuration and or updates of components of a secure proxy .

In some embodiments a service provider may provide one or more updates to a default implementation of secure proxy . Such updates may be provided in the form of executable installer files software or hardware patches configuration files or any suitable format. In various embodiments such updates may be pushed to a customer or pulled by a customer on a periodic basis or up on a triggering event. For example such updates may be triggered by changes to interfaces and or functionalities of services provided by the service provider changes to computing environment of service provider and or a customer changes to a service level agreement and so on.

As illustrated a secure proxy may have security layers and that correspond with various network protocol layers e.g. application layer transport layer etc. . In various embodiments service provider may provide updates to any of the security layers. For example service provider may provide updates to add remove or change policies and or actions associated with one or more security layers and . For example service provider may add additional application level policies associated with a service due to a heightened security risk or requirement associated with the service or replace existing policies according to a new service schema. In some embodiments a service provider may also provide updates to the secure endpoint resolver . Such updates may be provided in a similar fashion as updates to the security layers described above. For example updates to the secure endpoint resolver may be triggered due to changes associated with one or more endpoint services such as changes to service interface protocols parameters and the like.

In some embodiments one component of the secure proxy may cause update or modification of another component of the secure proxy . For example in an illustrative embodiment a secure endpoint resolver may cause update of a whitelist or blacklist of IP addresses associated with a security layer such as a transport layer security layer based at least in part on the resolution of an endpoint query to allow or disallow network traffic to and or from the certain IP addresses that are determined to be valid by the secure endpoint resolver . In some embodiments the secure endpoint resolver may receive other endpoint related information such as current endpoint schema protocol and the like that may be used to update functionalities of the security layers. In some embodiments updates to security layers may be provided as part of a response to the secure endpoint resolver .

In some embodiments customer may provide updates to components of secure proxy . For example a customer process automated or manual may cause changes to configurations associated with any of the security layers and based at least in part on computing resource configuration security requirement business requirement known or predicted network security risks or the like. For example a customer may add and or remove IP addresses allowed by the secure proxy to particular applications. For another example a customer may add remove or modify application specific policies to provide better protection of data or network resources in a trusted environment. In some embodiments customers may also update secure endpoint resolver . For example a customer may modifies configuration files parameters and other settings of secure endpoint resolver to enable support for additional or different endpoint services DNS services and other similar services. In various embodiments a customer may initiate updates to components to secure proxy on a periodic basis or upon a triggering event. As described above in some embodiments a customer may have the administrative control over various aspects such as the timing location and content of the installation configuration and or updates of components of a secure proxy .

In some embodiments a system implementing process may receive a request from an application to access a service. As described in connection with the application may include a backend data processing application such as a payment processing application running in a trusted environment. The service may provide access to various computing resources such as applications servers datacenters and the like.

In some embodiments the request may specify a service endpoint. As described above a service endpoint may include an identifier of the service such as a URI DNS name or any global or local unique identifiers e.g. ServiceProviderName.ServiceName service0284 . In some embodiments such a service endpoint needs to be resolved to obtain service specific endpoint information before the service may be utilized. Such endpoint information may include one or more logical or physical machine recognizable network addresses such as an IP addresses port numbers and the like where the service may be located. As discussed in connection with endpoint information may also include other service specific information such as a schema e.g. a WSDL file protocol hardware and or software characteristics associated with the service and or service components.

The system implementing process may determine whether the service endpoint information is available. In some cases some or all of the endpoint information may already be readily available. For example the request may include the IP address of the service endpoint that may be used directly to locate the service. In some other cases some or all of the endpoint information may exist in other sources such as a cache. In the case of a cache the system may look up the cache to determine if the endpoint information associated with the particular service already exists. As discussed above endpoint information stored in the cache may be valid only for a limited period of time e.g. 20 seconds to prevent the use of stale data. If it is determined that the service endpoint information is already available the system implementing process may simply obtain such endpoint information e.g. from a cache configuration file database or the like . Otherwise the system may need to determine the current endpoint information from scratch.

In various embodiments the system implementing process may be configured to communicate with various sources such as one or more endpoint services DNS services including DNSSEC services or other directory services to determine the current endpoint information associated with a service. In some cases the system may decrypt authenticate validate combine or otherwise process responses received from any of these sources to determine current endpoint information which may include the current set of IP addresses associated with a service. In some embodiments such endpoint information may be validated by using policies such as those associated with security layers as described in connection with . For example requests for endpoint information may be first validated against the policies to prevent data leaks and or unauthorized access. Furthermore responses received from various sources may be validated against the policies to ensure that they are received from valid sources or otherwise free of security risks. Endpoint information may be modified e.g. removing blacklisted network addresses based at least in part on existing policies to ensure consistency. Finally endpoint information thus determined may be stored e.g. in a file memory cache or the like and or provided to other components such as the requesting application process and the like.

In some embodiments the system implementing process may determine whether policies need to be updated based on service endpoint information. For example in an embodiment where endpoint information includes a set of network addresses e.g. IP addresses currently associated with a service the set of network addresses may be compared with an access control list e.g. a whitelist or blacklist for an application computer collection of computers to determine whether the access control list should be updated to allow network traffic to from such network addresses. Such determination may be made based at least in part on the whether the endpoint information is authenticated or otherwise trustworthy. For example if network address information is received from a DNSSEC server and has been verified it may be determined to be valid.

In some embodiments the system implementing process may update policies based on endpoint information. For example as discussed above whitelist blacklist may be updated to allow additional authenticated IP addresses. For another example policies may need to be updated based on other endpoint information such as changes to service interface protocols and the like. For example if endpoint information includes changes to a service s input data types then application level policies for network traffic to that particular service may need to be updated accordingly.

In some embodiments the system implementing process may enable connection between an application and a service based on the endpoint information. In some embodiments the connection may be a secure connection based on a cryptographic protocol such as TLS SSL IPsec and the like. The connection may be established between the application and a network address that is determined to be valid based at least in part on the endpoint information.

In various embodiments the system implementing process may proxy the network traffic between the service and the application. Specifically the system may store and or intercept inbound outbound traffic decrypt decode at least a portion of the traffic validate the traffic at various network protocol layers using policies associated with these layers and encode encrypt the traffic before blocking or allowing the traffic which may be modified by as part of the validation . In some embodiments validation includes matching a set of criteria associated with a policy and taking actions associated with the policy if the criteria are matched. Actions associated with a policy may include allowing the traffic through unmodified modifying or rewriting at least a portion of the traffic and or blocking the traffic. In some embodiments the system may also provide logging or messages related to the validation. In various embodiments policies may evolve over time as service providers customers or third parties update the policies and or as part of machine learning algorithm. For example a service provider may provide updated service specific policy updates and a customer may provide updates applicable to a particular application computer entire site or the like. For another example the system implementing process may automatically update the policies based on analysis of access patterns security risks changes to network environment and the like.

In some embodiments the system implementing process may determine whether endpoint information is already available. The system may look up a local or remote data store such as a cache where endpoint information may be stored. If the endpoint information is determined to be available the system implementing process may simply retrieve such endpoint information and provides it . Otherwise if such endpoint information is determined not to be available e.g. expired or nonexistent the system implementing process may obtain such information from scratch as described below.

In some embodiments the system implementing process may query a first set of services to determine a first set of endpoint information that is associated with the service or service endpoint. The first set of services may include one or more endpoint services provided by a service provider as described in connection with . Querying such endpoint services may include sending one or more requests that include the service or service endpoint identifier according to the APIs provided by endpoint services. In some embodiments the system implementing process may be configured to perform such queries based on configurable information such as the API network address credentials cryptographic keys and the like associated with an endpoint service. Such information may be provided and or updated by an endpoint service provider. In some embodiments the system implementing process may perform further queries based on responses from the endpoint services.

In various embodiments the system implementing process may receive one or more responses from the endpoint services that contain endpoint information associated with the service or service endpoint. Such information may include a set of network addresses e.g. IP addresses hardware and or software characteristics availability capacity protocols usage and other information that is currently associated with the service or service endpoint. Based on the responses the system implementing process may determine the first set of endpoint information associated with the service or service endpoint. Such determination may be based on existing policies priority or trust levels associated with the responses and the like. As described in connection with the queries and or responses may be inspected filtered or otherwise validated against a set of policies to ensure network and data security.

In some embodiments the system implementing process may query a second set of services to determine a second set of endpoint information that is associated with the service or service endpoint. The second set of services may include one or more DNS services provided by a service provider a third party or the like. Some of such DNS services may support an authentication protocol such as DNSSEC. Querying such services may include sending one or more DNS lookup queries for the resource records associated with a service endpoint. In some embodiments the system implementing process may be configured to perform such queries and process the corresponding responses based on information such as DNS server network address cryptographic keys DNS responses e.g. DNS or DNSSEC resource records and the like. In various embodiments an endpoint service provider DNS service provider and the like may provide and or update such information as described above.

Based on the responses such as DNS or DNS resource records the system implementing process may determine the second set of endpoint information associated with the service or service endpoint. Such endpoint information may include IP addresses associated with DNS names. The determination may be based on existing policies priority or trust levels associated with the responses and the like. For example DNSSEC resource records that can be authenticated may be deemed more trustworthy than regular DNS resource records. In some embodiments the system implementing process may perform further queries for example to other DNS or DNSSEC servers. As described in connection with the queries and or responses may be inspected filtered or otherwise validated against a set of policies to ensure network and data security.

In some embodiments the system implementing process may determine the endpoint information currently associated with a service or service endpoint based at least in part on the first and second sets of endpoint information. In various embodiments the system implementing process may query only a first set of services only a second set of services both sets of services or other services and the final determination may be based on an arbitrary subset of endpoint information received as responses for such queries. In an embodiment the system implementing process may simply take the union or intersection of any two or more sets of endpoint information. In other embodiments the determination may be based on policies recency and or trustworthiness of the endpoint information and the like.

In some embodiments the system implementing process may provide the endpoint information associated with a service for example to an application to access to the service. In some embodiments the endpoint information may be stored for example in a cache to expedite subsequent lookup.

In some embodiments the system implementing process may optionally update one or more policies based on the endpoint information such as described in connection with . For example a whitelist blacklist may be updated to allow or block network traffic to from certain IP addresses based on the endpoint information. As another example application level policies may be updated to validate traffic associated with a service or an application according to the updated endpoint information. In various embodiments some or all of the steps described in process may be performed to obtain endpoint information or other service related information associated with one or more services.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. As used herein the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed or clustered environment. The application server can include any appropriate hardware and software for integrating with the data store as needed to execute aspects of one or more applications for the client device handling a majority of the data access and business logic for an application. The application server provides access control services in cooperation with the data store and is able to generate content such as text graphics audio and or video to be transferred to the user which may be served to the user by the Web server in the form of HTML XML or another appropriate structured language in this example. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the Web server. It should be understood that the Web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein.

The data store can include several separate data tables databases or other data storage mechanisms and media for storing data relating to a particular aspect. For example the data store illustrated includes mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as for page image information and to access right information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. In one example a user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a Web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop or laptop computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network.

Most embodiments utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as TCP IP OSI FTP UPnP NFS CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network and any combination thereof.

In embodiments utilizing a Web server the Web server can run any of a variety of server or mid tier applications including HTTP servers FTP servers CGI servers data servers Java servers and business application servers. The server s also may be capable of executing programs or scripts in response requests from user devices such as by executing one or more Web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM .

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or Web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the a system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. All methods described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Preferred embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for the invention to be practiced otherwise than as specifically described herein. Accordingly this invention includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the invention unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

