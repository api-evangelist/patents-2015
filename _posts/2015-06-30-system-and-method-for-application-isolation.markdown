---

title: System and method for application isolation
abstract: A system, method, and computer readable medium for providing application isolation to one or more applications. The system may include an isolated environment including application files and executables, and an interception layer intercepting access to system resources and interfaces. The system may further include an interception database maintaining mapping between the system resources inside the isolated environment and outside, and a host operating system, wherein the isolated environments are saved on at least one of a local and remote storage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09270757&OS=09270757&RS=09270757
owner: Open Invention Network, LLC
number: 09270757
owner_city: Durham
owner_country: US
publication_date: 20150630
---
This application is a continuation of U.S. patent application Ser. No. 14 326 179 filed Jul. 8 2014 titled SYSTEM AND METHOD FOR APPLICATION ISOLATION now issued U.S. Pat. No. 9 075 646 issued on Jul. 7 2015 which is a continuation of U.S. patent application Ser. No. 12 421 694 filed Apr. 10 2009 titled SYSTEM AND METHOD FOR APPLICATION ISOLATION now issued U.S. Pat. No. 8 782 670 issued on Jul. 15 2014. The present application is related to U.S. patent application Ser. No. 12 334 654 filed Dec. 15 2008 titled METHOD AND SYSTEM FOR PROVIDING STORAGE CHECKPOINTING TO A GROUP OF INDEPENDENT COMPUTER APPLICATIONS now issued U.S. Pat. No. 8 880 473 issued on Nov. 4 2014 and U.S. patent application Ser. No. 12 334 660 filed Dec. 15 2008 titled METHOD AND SYSTEM FOR PROVIDING CHECKPOINTING TO WINDOWS APPLICATION GROUPS the disclosure of each of which is hereby incorporated by reference herein in their entirety.

A portion of the material in this patent document is subject to copyright protection under the copyright laws of the United States and of other countries. The owner of the copyright rights has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the United States Patent and Trademark Office publicly available file or records but otherwise reserves all copyright rights whatsoever. The copyright owner does not hereby waive any of its rights to have this patent document maintained in secrecy including without limitation its rights pursuant to 37 C.F.R. 1.14.

This invention pertains generally to enterprise computer systems computer networks embedded computer systems wireless devices such as cell phones computer systems and more particularly to methods systems and procedures i.e. programming for providing application isolation for multiple applications running on a host operating system.

In many environments one of the most important features is to ensure that one running application doesn t affect other running applications and that the crash of one application doesn t compromise other running applications. In many environments applications share system resources libraries and hardware which exposes subtle interconnects between seemingly unrelated applications.

Several approaches have been developed addressing this fundamental problem. The first level of application isolation is provided by the operating system. Modern operating systems such as Linux UNIX Windows2000 NT XP and Vista provide some level of application isolation through the use of processes and the underlying hardware memory management unit. The use of processes generally ensure that one running application process cannot address memory owned and used by other processes. This first level of isolation does not address the use of shared resources such as files file systems shared memory and libraries so other approaches have been developed

In U.S. Pat. No. 6 496 847 Bugnion et al. teach the use of a virtual machine monitor VMM with a protected host operating system HOS . This invention partially solves the isolation problem by placing every application into its own VMM. The solution requires the use of a VMM subsystem and in some cases a customized operating system. U.S. Pat. No. 6 496 847 does not provide isolation at the level of individual applications but for entire operating systems with all the applications within it. It does not address the problem of application isolation with multiple natively running applications on one host computer.

In U.S. Pat. No. 6 601 081 Provino et al. teach the use of a virtual machine for a plurality of application programs. As with U.S. Pat. No. 6 496 847 the use of a VM subsystem simply moves the problem to a different layer and does not address the fundamental issue of application isolation with several natively running applications on one host computer.

In U.S. Pat. No. 7 028 305 Schaefer teaches a system for creating an application protection layer to separate an application from the host operating system. Shaefer primarily teaches how to intercept the Windows registry to capture configuration information for Windows application and how to create a virtual operating environment for the application. Access to files is provided via a virtual file system access to registry information via the virtual registry etc. For Unix and MacOS few specific teachings are presented.

The present invention provides a system method and computer readable medium to create an application isolation environment where applications can run unmodified on un modified operating systems without requiring any virtual environments virtual machines or virtual machine monitors. The present invention also disclosed how to manage and handle applications that share libraries and resources and how to handle complex multi process applications. In one embodiment an implementation in the Linux environment is described in another embodiment an implementation on Windows is described.

A method system apparatus and or computer program are described for achieving application isolation for single and multi process applications and their associated resources. The application isolation is provided without requiring any changes to the host operating system kernel or requiring any changes to the applications. The application isolation is fully transparent to both operating system and application and automatically adjusts for resources such as memory storage and CPUs being allocated and released. The application isolation is provided in an interception layer interposed between the individual applications and the operating system and an interception database. Preferably any functional changes to system calls are done exclusively within the interception layer and interception database and only in the context of the calling application.

Another aspect of the present invention relates to a method and a computer readable medium comprising instructions for application and application group isolation. The instructions are for installing the applications into the isolated environment running the application in the isolated environment un installing applications from the isolated environment configuring the isolated environments and deploying the isolated environments.

Yet another aspect of the invention relates to a system for providing application isolation to one or more applications the system comprising an isolated environment including application files and executables an interception layer intercepting access to system resources and interfaces an interception database maintaining mapping between the system resources inside the isolated environment and outside and a host operating system wherein the isolated environments are saved on at least one of a local and remote storage.

The terms Windows and Microsoft Windows are utilized herein interchangeably to designate any and all versions of the Microsoft Windows operating systems. By example and not limitation this includes Windows XP Windows Server 2003 Windows NT Windows Vista Windows Server 2008 Windows Mobile and Windows Embedded.

The terms Linux and UNIX are utilized herein to designate any and all variants of Linux and UNIX. By example and not limitation this includes RedHat Linux Suse Linux Ubuntu Linux HPUX HP Unix and Solaris Sun Unix .

The term node and host are utilized herein to designate one or more processors running a single instance of an operating system. A virtual machine such as VMWare or XEN VM instance is also considered a node . Using VM technology it is possible to have multiple nodes on one physical server.

The terms application is utilized to designate a grouping of one or more processes where each process can consist of one or more threads. Operating systems generally launch an application by creating the application s initial process and letting that initial process run execute. In the following teachings we often identify the application at launch time with that initial process.

In the following we use commonly known terms including but not limited to process process ID PID thread thread ID TID thread local storage TLS instruction pointer stack kernel kernel module loadable kernel module heap stack files disk CPU CPU registers storage memory segments address space semaphore loader system loader system path and signal . These terms are well known in the art and thus will not be described in detail herein.

The term transport is utilized to designate the connection mechanism and or protocols used for communicating across the distributed application. Examples of transport include TCP IP Message Passing Interface MPI Myrinet Fibre Channel ATM shared memory DMA RDMA system buses and custom backplanes. In the following the term transport driver is utilized to designate the implementation of the transport. By way of example the transport driver for TCP IP would be the local TCP IP stack running on the host.

The term interception is used to designate the mechanism by which an application re directs a system call or library call to a new implementation. On Linux and other UNIX variants interception is generally achieved by a combination of LD PRELOAD wrapper functions identically named functions resolved earlier in the load process and changes to the kernel sys call table. On Windows interception can be achieved by modifying a process Import Address Table and creating Trampoline functions as documented by Detours Binary Interception of Win32 Functions by Galen Hunt and Doug Brubacher Microsoft Research July 1999 . Throughout the rest of this document we use the term to designate the functionality across all operating systems.

The term file context or context is used in relation with file operations to designate all relevant file information. By way of example and not limitation this includes file name directory read write append execute attributes buffers and other relevant data as required by the operating system.

The term transparent is used herein to designate that no modification to the application is required. In other words the present invention works directly on the application binary without needing any application customization source code modifications recompilation re linking special installation custom agents or other extensions.

The terms private and isolated environment and isolated environment are used herein interchangeably to designate the private area set aside for application isolation as described in further detail below.

The present invention provides application isolation at several levels 1 during installation all installation and registration information is intercepted and installation is re directed to a private and isolated environment 2 during launch of an application the installation information is retrieved and provided to the application again via interception and 3 during access to external resources interception of all access is re directed as necessary. The combination of all levels of isolation provides for fully transparent application isolation. Thus at all times access to resources configuration and run time information is intercepted and redirected.

By way of example and not limitation for embodiments within Windows operating systems access to the Windows Registry is intercepted and included in the application isolation.

Further aspects of the invention will be brought out in the following portions of the specification wherein the detailed description is for the purpose of fully disclosing preferred embodiments of the invention without placing limitations thereon.

Referring more specifically to the drawings for illustrative purposes the present invention will be described in relation to through . It will be appreciated that the system and apparatus of the invention may vary as to configuration and as to details of the constituent components and that the method may vary as to the specific steps and sequence without departing from the basic concepts as disclosed herein.

The context in which this invention is described is one or more applications being installed running and accessing local and remote resources. Without affecting the general case of multiple applications the following scenarios often depict and describe one or two applications as applicable. Multiple applications are handled in a similar manner.

At times it may be desirable to store some user data outside the isolated environment such as on a central file server. In a preferred embodiment this is supported by specifying which resource locations should remain fixed and public in the global exceptions . Such public resources are not translated into the isolated environment.

The Interception Database IDB is a system wide database containing mappings between the resources as the application requests them and their private values inside the isolated environment. illustrates by way of example embodiment the Interception Database IDB and its various components. The IBD contains two main components a rules engine and the core resource mappings . The rules engine contains the main high level configuration information as provided by an administrator . The rules engine and its configuration information includes but is not limited to information designating the base directory for installing the isolated environment specific exceptions to the resource mappings and the general mechanism used to create the mappings. The administrator defines exceptions as needed. The global exceptions contain all resources that should not be remapped to the isolated environments. Examples include but are not limited to shared storage shared devices network resources and system wide resources.

The resource mapping maintains mapping between public resources and the corresponding private and isolated resources . The resource mapping also consults the global exceptions prior to translating any public to private or private to public resource requests.

Resources take many forms including but not limited to files fonts shared libraries shared devices and storage. On Microsoft Windows the Registry is an important component and contains system wide configuration information used by most applications. Some resources such as data files tend to be local to the individual applications while e.g. fonts tend to be shared between multiple applications.

Access to files are handled by the IL intercepting all file operations between the application and the system libraries and operating systems. Examples include but are not limited to open fopen write read close seek remove and the Windows equivalents. Generally these functions either contain a public file name as part of the arguments or a file handle to an already established file. The files names are remapped as described above to an isolated environment and any further reference to the handle is automatically re directed to the isolated environment. File operations that return information are translate back to the public values. By way of example and not limitation if the applications ask for current directory the public name as the application expects is returned and not the private name within the isolated environment. By way of further example if the current directory is located on shared storage included the global exceptions the directory is returned un translated as it s subject to the exception handling.

File paths and other resource names can be specified both as absolute values or relative values. By way of example and not limitation an absolute path for a document file may be C MyDocuments myfile.doc while a relative reference may be . . . docs myfile.doc . Absolute references are resolved as previously described by consulting the public resources private resources and global exceptions . Relative addresses are resolved in a multi step process First relative names are converted to absolute names and then the absolute name is converted as previously described. This mechanism ensures fully transparent support of both absolute and relative naming of all resources.

Fonts pose particular problems as fonts reside both in application specific directories and global system directories such as C Windows Fonts on Windows and usr X11R6 lib X11 fonts and usr share fonts on Linux. An application may install font both into one or more global font directories as well as application specific directories. All shared fonts directories are included in the Global Exceptions as they should be accessed directly. If during installation additional fonts are installed they are installed according to the policy chosen by the administrator . Prior to installation the administrator chooses if application installed fonts are allowed to be placed in the global fonts directory or if they should be placed in the isolated environment. The rules engine consults this administrative choice and upon receiving a request to enumerate the font directory will include isolated environment fonts if so configured. If the application installs its fonts into its own file structure the fonts are treated as normal files and are not subject to the automatic enumeration as the application knows where to look for its application specific fonts.

Modern operating systems share components across multiple applications. Such shared libraries also pose a special case. On Windows Dynamic Link Libraries DLLs and on Linux UNIX shared objects .so files are examples of such shared components. On Window shared libraries primarily reside in C Windows and C Windows System32 but can sit anywhere. On Linux Unix the primary locations are usr lib usr X11 lib and the entire usr lib directory structure. The loader of the operating system traverses the system PATH to find any requested shared library but this can be manually or programmatically changed as part of the load process. The PATH is set using environment variables both on Windows and Linux. In order to intercept loading of shares libraries the present invention loads the application in stead of using the system loader directly. This enables interception of library loading done by the loader. If during installation additional shared libraries are installed they are installed according to the policy chosen by the administrator . Prior to installation the administrator chooses if application installed libraries are allowed to be placed in a global directory or if they should be placed in the private and isolated environment. If the libraries are placed into the private and isolated environment the load PATH is adjusted to search the private location.

As with files libraries can be loaded with both absolute and relative addresses. The load process handles the resource mapping as described above. In all cases the loading must follow the same path and address resolution as the system loader provides.

If the application installs its shared libraries into its own file structure the libraries are treated as normal files and are not subject to an adjusted PATH or load order as the application knows where to look for its application specific libraries. In the preferred embodiment if the application installs new shared libraries they are installed into the isolated environment

One of the most significant sources of application incompatibilities and one of the motivators for the present invention is shared library conflict. By way of example and not limitation if a shared library is loaded on the system and a new application installs an older version of the library the older version may overwrite the newer version and render other applications non functional based on having their shared library replaced by an incompatible older version. This is a common problem on both the Windows and Linux platforms. Using the preferred embodiment described above the application would install the older library into its isolated environment and therefore not affect other applications. The application would load and use the older library without ever being aware that it was provided from the isolated environment and other applications running on the system would be unaffected by the installation of the older library.

Microsoft Windows uses a special configuration system generally referred to as the Registry . The registry contains configuration installation and un installation information for applications on the system. When an application installs on a Windows system it uses the registry to store values such as home directory recent files etc. The preferred embodiment on Windows systems additionally include interception of all registry information and ensures that installation and runtime information that would normally go into the registry in stead is stored and maintained in the IDB. During installation of a Windows application all registry information is thus stored in the IDB and not the registry. When an application requests registry information the information is provided from the IDB and not the registry. This ensures complete application isolation from the registry.

The isolated environment contains all application files and shared resources and their respective mappings. These are all preserved persistently on local or remote storage and can be archived copied and restored as any other set of files. Specifically the isolated environment directory structure can be copied to a different node and used directly to start the application on that node.

So far the Interception database has been described as a database . Based on the teachings above it s readily apparent to anyone skilled in the art that the only requirement is that updates to the resource tables and be atomic at the record level. This functionality can be readily implemented in a variety of ways including using Java s ConcurrentHashMap the Windows .NET equivalents or by custom programming the data structures and locking. Furthermore preferably concurrent access to the Interception Database translations is provided. In an alternate implementation such a custom interception database is used in stead of a full database.

By way of example and not limitation consider an environment with the present invention active. An application calls a write operation. As described in above the write is intercepted by the interception layer . Parameters to the write call are translated by the Interception Database and the rules for the isolated environment and the file context and parameters of the calling write are adjusted to point to the isolated environment. The write call is then forwarded to the system libraries and operating system as were the case with the present invention inactive. The return value from the write is returned to the IL which using the IDB maps the result back into the original context and returns the value to the caller . The application issuing the write operating is thus unaware that the write is being intercepted and re directed to the isolated environment. All translation and isolation is performed outside the application and before the write operation ever reaches the system libraries or operating system .

A specific example using ANSI C further illustrates the mechanics of the IL and IDB translations. Consider an example where a file is opened for writing a small text is written and the file is closed using the following code

The call to fopen returns a file pointer which the fwrite operation uses to write data to the file. The call to fopen includes the file name home user newfile.txt as the first parameter. The Interception Layer intercepts the call to fopen and changes the actual filename to the corresponding location in the isolated environment before passing the call on to the system library implementation 258. The following fwrite operation is unaware that the file pointer points to the isolated environment and simply writes the data. Finally fclose is called to close the file. The file pointer still points to the isolated environment and the close proceeds as a close would without the present invention active.

At times multiple applications share data libraries and work in combination. By way of example and not limitation Microsoft Word may include a Microsoft Excel spreadsheet. In general any number of applications may need to collaborate and share data. So far the approach has been to isolate applications so that to continue the example if Word and Excel were installed separately they would both be isolated and not able to work together. To enable sharing between pre designated applications the applications need to be grouped together in an application group and installed inside the same isolated environment. illustrates by way of example embodiment an application group operating within the present invention. The administrator pre defines the application group and the individual applications within the group App App and App n . The administrator commits the application group to the IDB . The IDB uses the same mechanisms as described above for individual applications and structures the isolated environment so that the individual applications share resources and file system. By installing the applications together they automatically use the same isolated environment and sharing is fully automatic without requiring any additional information. The interception layer intercepts as previously described and requires no special configuration all application group information is contained within the IDB and the settings for the isolated environment .

The administrator commits all administrative settings to the IDB which is reflected in the database tables for the isolated environment .

At times it may be desirable to run multiple instances of the same application or application group but in separate isolated environments. Referring again to for illustrative purposes. The administrator defines each instance of the application group using separate application group names. Even though Application Group A Application Group B and Application Group C are identical they have been pre defined with their own environment and thus run in separate isolated environments without any further intervention or configuration.

One of the major problems with application deployment is the actual installation and the associated risks as described previously. Using the present invention a pre created isolated environment can be used in place of performing an actual installation. The isolated environment contains all application files shared libraries and installation data and can be moved copied and run from anywhere the present invention is present.

In an alternate embodiment the environment is stored on shared storage and is accessed directly from the shared storage. In this embodiment the isolated environment is loaded directly from shared storage and only local data such as temporary files are kept locally.

In another embodiment the environment is saved to storage and shipped to a remote site. The remote site loads the environment and runs the applications directly from within the environment without any installations. In this embodiment the present invention may be used for disaster recovery.

The administrator provides general configuration information applicable to all isolated environments and applications unless explicitly changed for a particular isolated environment . Examples of administrator provided global configuration information includes but is not limited to

Each setting can be changed i.e. replaced on an application by application basis and on an application group by application basis. As determined by the administrator examples of administrator provided application level configuration information include but is not limited to

The combination of the global configuration information with the rules engine FIG. makes the configuration and deployment on new isolated environment fully automatic after the initial global configuration has been provided. As described it may be desirable to change one or more of an application s isolated environment settings. By way of example and not limitation if a particular application needs to locally access certain resources only available on a particular server that one application s isolated environment would be located on that particular server while all other environments were centrally stored. The ability to mix and match environments and deployments ensure full flexibility and ability to deploy multiple applications in a heterogeneous environment with all the benefits of the present invention.

In another embodiment the administrative functions is done programmatically using an Application Programming Interface API .

In the embodiments described herein an example programming environment was described for which an embodiment of programming according to the invention was taught. It should be appreciated that the present invention can be implemented by one of ordinary skill in the art using different program organizations and structures different data structures and of course any desired naming conventions without departing from the teachings herein. In addition the invention can be ported or otherwise configured for use across a wide range of operating system environments.

Although the description above contains many details these should not be construed as limiting the scope of the invention but as merely providing illustrations of some of the exemplary embodiments of this invention. Therefore it will be appreciated that the scope of the present invention fully encompasses other embodiments which may become obvious to those skilled in the art and that the scope of the present invention is accordingly to be limited by nothing other than the appended claims in which reference to an element in the singular is not intended to mean one and only one unless explicitly so stated but rather one or more. All structural and functional equivalents to the elements of the above described preferred embodiment that are known to those of ordinary skill in the art are expressly incorporated herein by reference and are intended to be encompassed by the present claims. Moreover it is not necessary for a device or method to address each and every problem sought to be solved by the present invention for it to be encompassed by the present claims. Furthermore no element component or method step in the present disclosure is intended to be dedicated to the public regardless of whether the element component or method step is explicitly recited in the claims. No claim element herein is to be construed under the provisions of 35 U.S.C. 112 sixth paragraph unless the element is expressly recited using the phrase means for. 

