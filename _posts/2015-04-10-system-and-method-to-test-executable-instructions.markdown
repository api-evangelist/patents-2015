---

title: System and method to test executable instructions
abstract: This document discusses, among other things, a method of testing an Application Programming Interface (API) call that includes receiving data identifying a schema associated with web services together with an API call. Various example embodiments may relate to accessing a data repository associated with the schema to identify an API response corresponding to the API call. In some example embodiments, a message is returned that is based on a determination of whether the API call is valid. The example message may simulate an API response from web services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09477584&OS=09477584&RS=09477584
owner: PAYPAL, INC.
number: 09477584
owner_city: San Jose
owner_country: US
publication_date: 20150410
---
This application is a continuation of U.S. patent application Ser. No. 13 126 719 filed on Jun. 20 2011 which is a 371 of international PCT Application No. PCT CN2008 001827 filed on Oct. 31 2008 the benefit of priority of each of which is claimed hereby and each are incorporated herein by reference in their entirety.

This patent document pertains generally to software testing and more particularly but not by way of limitation to systems and methods for testing executable instructions.

Software developers often test code in a testing environment in order to identify potential flaws and to determine whether the code is likely to be operational in a production environment.

Various example embodiments include a response simulator to test executable instructions such as an Application Programming Interface API call. The example response simulator may receive data identifying a schema that is associated with web services together with an API call. To determine whether the API call is valid the response simulator may access a data repository that is associated with the schema to identify an API response corresponding to the API call. Further criteria for determining validity may be employed in some example embodiments. Responsive to the API call and based on determining whether the API call is valid the response simulator may return a particular message e.g. an API response . Such a response may simulate a substantially similar API response as would be generated by web services had web services received and processed the API call. It may be noted that API calls may be submitted via a software user interface such as a desktop program or a web browser. In some example embodiments the response simulator and web services may simultaneously facilitate testing of API calls via the example user interface described herein.

For various example embodiments loads on networked server and or database resources may be significantly reduced for a set of API call tests in comparison to loads sustained by network resources for the same set of API call tests in the absence of the response simulator. Use of an example response simulator for testing rather than a dedicated network resources may result in the use of fewer hardware and or software components and thus use of the response simulator may aid in avoiding testing down time.

This overview is intended to provide an overview of the subject matter of the present patent application is not intended to provide an exclusive or exhaustive explanation of what is claimed. The detailed description is included to provide further information about the subject matter of the present patent application.

The following detailed description includes references to the accompanying drawings which form a part of the detailed description. The drawings show illustrations in accordance with example embodiments. These embodiments which are also referred to herein as examples are described in enough detail to enable those skilled in the art to practice the claimed subject matter. The embodiments may be combined other embodiments may be utilized or structural logical and electrical changes may be made without departing from the scope what is claimed. The following detailed description is therefore not to be taken in a limiting sense and the scope is defined by the appended claims and their equivalents.

In this document the terms a or an are used as is common in patent documents to include one or more than one. In this document the term or is used to refer to a nonexclusive or such that A or B includes A but not B B but not A and A and B unless otherwise indicated. Furthermore all publications patents and patent documents referred to in this document are incorporated by reference herein in their entirety as though individually incorporated by reference. In the event of inconsistent usages between this document and those documents so incorporated by reference the usage in the incorporated reference s should be considered supplementary to that of this document for irreconcilable inconsistencies the usage in this document controls.

The machine may include any machine that uses a processor to execute instructions. In an example embodiment the machine includes a virtual machine not shown to execute one or more sets of instructions. In a virtual environment e.g. including a virtual machine virtual interface or other virtual device a single physical device may appear to other hardware and software as multiple logical devices e.g. multiple virtual devices . The machine is further shown to include a user interface and a response simulator .

Although not shown the example machine may include one or more hardware user interfaces e.g. a keyboard mouse other input device to allow a user to input information to be processed by the machine . In some example embodiments the one or more hardware user interfaces e.g. a display speakers or other output device may present information to a user e.g. by displaying output information such as user directions user options or any other information that may be presented to a user . In various example embodiments the one or more hardware user interfaces display a software user interface such as a desktop program interface to allow the input of information associated with testing a set of instructions e g. an API call and to provide the display of information associated with testing the set of executable instructions. Executable instructions relate to operations of a processor inside a machine. Example executable instructions executable instructions may be included within source code machine language APIs commands messages or other instructions that may be executed by an application program and or processor.

Some example embodiments may include displaying a software user interface including a browser program interface to allow the functionality described above with respect to the desktop user interface. An example desktop user interface and an example browser program interface to receive and display testing information are to be discussed in more detail below.

The example response simulator is to test the validity of executable instructions. In various example embodiments the response simulator may test an API call and generate a message or response to be transferred to the submitter of the API call. The example message may simulate an API response that would be generated by web services based on the API call. Web services may include a software system designed to support interoperable machine to machine interaction over a network. Example web services may include a web API accessible over a network and executed on a remote system hosting the requested services.

The example communication interface is to receive information e.g. identifying a particular schema and or API call from the user interface and to transfer the information to the access module . A schema may include a set of rules to which a document conforms in order to be considered valid according to that schema. An example schema includes an extensible markup language XML schema under which a document is constrained in structure and content. The example communication interface may further receive information e.g. information indicating success error or partial success of an API call from the response module and transmit the information to the user interface of .

The access module is to access the data repository of to reference data as part of an instruction validation process. The example data repository may be located within the machine of or outside of the machine without departing from the claimed subject matter. The data that is referenced in the data repository may include a schema. In various example embodiments the schema may define specific API calls and corresponding API responses. For some example schemas the data repository may include tables arranged to associate an API call and its particular input field s to a corresponding API response and its particular output fields. The data repository may further include sample data e.g. dummy data to include within the output field s of a simulated response to an API call that may be generated by the response simulator of e.g. by the response module during testing of the API call.

The validation module is to determine whether a set of instructions are valid based on the data referenced within the data repository . In an example embodiment the validation module determines whether a received API call is valid based on whether the access module recognizes the syntax of the API call and that the particular data fields and or data values e.g. data types operands or arguments or other input to the API call are valid and or based on any other criteria of validity. Depending on the validation module s determination of validity of the API call the response module may return an acknowledgement message that indicates the success failure or partial failure of the API call.

The functionality of each of the communication interface validation module access module and response module may be implemented with software hardware or a combination of software and hardware. In some example embodiments the modules and are software instructions stored on a machine readable medium not shown and executed with one or more processor not shown associated with the machine .

The input field table may include a list of input fields defined for all the API calls in the schema. Each input field may be associated with one or more input sub fields the names of which may be entered in to the input field table . Some example input fields and or input sub fields may be valid with particular data values such as certain strings Boolean operators numbers or other data input values.

The API response table may contain a record for each API response corresponding to each API call defined by the schema. In an example embodiment the API response table may include valid output fields for each API response as well as a name of an API call corresponding to each API response.

The output field table may include a list of output fields defined for all the API responses in the schema. Each output field may be associated with one or more output sub fields the names of which may be entered in to the output field table . Some example output fields and or output sub fields may be valid with particular data values such as certain strings Boolean operators numbers is other data output.

It may be noted that the mock interface may be presented to a user as part of a desktop program or a web browser or other user interface. In an example embodiment the response simulator a is integrated into the user interface of e.g. a desktop program through the installation of a plug in to the desktop program. For some example embodiments the communication interface of is to receive an API response from the user interface and the response module is to return a message or an API response to the user interface .

The example frame is to allow a user to enter an API type e.g. the XML API type and an API command e.g. the GET ITEM request . The example frame is to allow a user to enter credentials such as a username and a password that the user may submit by selecting the submit button to receive a token displayed by the frame . It may be noted that different forms of credentials may be requested and accompany API calls directed to remote API servers e.g. to enforce authentication while such credentials may not be requested or accompany API calls directed to the response simulator of that is on the machine of .

The example frame may include a label prompting a user to select a response simulator or API server to submit an API call. The example frame is checked indicating that the trading API response simulator is selected to test the API call while the frames for API  and API  servers are shown to not be selected. Although one frame to select a response simulator is shown the user interface may allow for the testing of API calls associated with different schemas. For example a trading API and a shopping API may each be selected when API when for example calls from each type of API are to be submitted for testing in succession. For some example embodiments the response simulator and web services may simultaneously facilitate testing of API calls by checking the frame that includes the response simulator box and checking one or more of the boxes within the frame .

The example frame may include text prompting a user to select a particular test case from a list. A test case may include saved API calls written in any of various programming languages that a user wishes to return to in the future. The example user interface of may facilitate the saving of test cases in the example frame .

The example frame may include a tab under which an API call to be tested is entered. Text is an example API call entered into a field under the request text tab of frame . The request text tab of frame may further include a submit button that when selected initiates the testing of the API call by directing the request to an appropriate response simulator or API server. The example frame is to show include an XML view of the API call e.g. to be used when the request text envelopes the XML or other protocol in a further programming language or protocol and the example frame may include a list of input values that may be appropriate for the particular API call being submitted.

The frame may include a tab under which a response to the API call may be displayed. Text shows an example response to the API call. The frame is to display the XML code corresponding to code presented in the frame labeled as response text. The frame may include a tab to display the output values included within the response and or all the possible output values defined for the particular API response.

At block the example method may include receiving an API call to access one or more web services. For some example embodiments the API call indicates a schema associated with one or more web services. In an example embodiment the universal resource name UKN of the schema is submitted with the API call e.g. by clicking on the submit button of described below via the user interface of . shows an example API call and the example schema encoded within an XML expression . The schema information and API call may be transmitted to the response simulator of where the data are to be received by the communication module of . In various example embodiments the API call may include one or more input fields that are populated with input values e.g. to be processed to produce an output value .

At block the method may include validating the API call based on the schema. As described above the access module of may receive the schema information within the API call and access the data repository of to match an API entry in the data repository to the received API For various example embodiments accessing the data repository may include the access module determining or identifying based on the schema a data repository that is associated with the schema and determining or identifying one or more databases within the data repository. The one or more databases may include a table or tables that are further associated with the schema.

In an example embodiment the data repository includes the API call table of that is associated with the schema and includes data related to each API call entered in the table. The access module may access the API call table after determining whether the example API call table includes an API response corresponding to the received API call the access module may notify the validation module of the outcome.

In the validation module may determine validity of the API call based on different criteria. For an example embodiment the validation module may determine that the API call is valid based on the syntax of the API call and receiving from the access module an indication that the API call corresponds to an API response stored in the table or the table of . Further criteria that the validation module may validate an API call may include determining that the input field of the API call is populated with one or more value and that the input field of the API call is associated with a valid extensible markup language XML schema data type. Invalidity of an API call may be determined based on the API call not being consistent with the syntax of the schema.

In an example embodiment the input field table may include a list of the valid XML schema data types. Referring to text shows an example input field and an input field value for the example API call text . The input field value and shown to be itemID while he input field value is shown to be the numbers 4036159998.

In an example embodiment the API call may correspond to instructions that are executable by web services to perform a function. In some example embodiments the performance of the function includes generating values for one or more output fields of the API response based on the values in one or more input fields of the API call.

At block the example method may include providing a simulated API response that simulates an API response from web services. Alternatively or additionally the example response module of may generate a message that indicates success of the API call failure of the API call or partial success of the API call. Based on a successful API call the message may additionally include one or more output fields that are populated with a value. Such a message may simulate a message that web services may have generated had Web services received API call. In the text shows an output field in an output field value. The output field in the text is shown to be correlation ID while the output field value is shown to be a string of zeros and the hyphens. The output field correlation ID as well as other output fields may be stored in the output field table of . The example API response text may be substantially similar to an API response typically generated by web services.

It may be noted that in an environment involving communication between applications using an API the claimed subject matter may be used to mock the behavior of an application by returning an API response to an application that sends an API call. The example response simulator may record XML responses corresponding to test API calls making the XML responses readily available to be used for future testing without a need to recalculate XML responses for every test API call. In some example embodiments responses to frequently used API calls may be organized so as to be accessed efficiently when an API response is to be returned. A user or developer may access the recorded XML responses to incorporate tested API calls e.g. API calls known to be functional into a testing sequence which may reduce an overall time period spent composing a sequence of API calls for testing 

Through practice of example embodiments described above an API testing process may be conducted by a tester s example machine and may avoid the use of networked server and or database resources. Alternatively or additionally testing of some API calls is performed by network resources that are included within a network commerce system and communicatively coupled to a tester s machine while other API calls may be tested by a response simulator of on the tester s machine e.g. the machine of . For various example embodiments loads on networked server and or database resources may be significantly reduced for a set of API call tests in comparison to loads sustained by network resources for the same set of API call tests in the absence of the response simulator.

Use of an example response simulator for testing rather than a dedicated application on a server may aid in avoiding testing downtime. For example a response simulator may include instructions of relatively lower complexity than those of applications servers which may result in the latter being more likely to become inaccessible due to its complexity and or any of a variety of other reasons e.g. developmental testing taking network resources offline network outages software corruption hardware failure etc. .

An Application Program Interface API server and a web server are communicatively coupled to and provide programmatic and web interfaces respectively to one or more application servers . The application servers host one or more marketplace applications and payment applications . The application servers are in turn shown to be coupled to one or more databases servers that facilitate access to one or more databases .

The marketplace applications and the payment applications may exist in a production environment where the applications and provide functions and services associated with actual commercial activity relating to subject matter of value and real users or entities. Alternatively or additionally the marketplace applications and the payment applications may exist in a testing environment e.g. testing of API calls associated with fictitious commercial activity relating to fictitious subject matter and fictitious users or entities.

The marketplace applications may provide a number of marketplace functions and services to users that access the networked system . The payment applications may likewise provide a number of payment services and functions to users. The payment applications may allow users to accumulate value e.g. in a commercial currency such as the U.S. dollar or a proprietary currency such as points in accounts and then later to redeem the accumulated value for products e.g. goods or services that are made available via the marketplace applications . White the marketplace and payment applications and are shown in to both form part of the networked system it will be appreciated that in alternative embodiments the payment applications may form part of a payment service that is separate and distinct from the networked system .

Further while the system shown in employs client server architecture the present subject matter is of course not limited to such an architecture and could equally well find application in a distributed or peer to peer architecture system for example. The various marketplace and payment applications and could also be implemented as standalone software programs which do not necessarily have networking capabilities.

The programmatic client accesses the various services and functions provided by the marketplace and payment applications and via the programmatic interface provided by the API server . The programmatic client may for example be a seller application e.g. the TurboLister application developed by eBay Inc. of San Jose Calif. to enable sellers to author and manage listings on the networked system in an off line manner and to perform batch mode communications between the programmatic client and the networked system . The programmatic client is shown to include a user interface stored API schema information and a response simulator which may be substantially similar to the user interface response simulator and the data repository described with respect to .

The web client may access the various marketplace and payment applications and via the web interface supported by the web server . As described above the example web client e.g. a web browser may be used an interface to submit API calls and related information for the purpose of testing an API call.

In example embodiments to test API calls the programmatic client of may simulate API responses that are generated by one or more of the applications and when API calls are received and processed by the applications and . The simulation of API responses may be allowed independent of the applications and via the user interface the API schemas and the response simulator of .

The networked system may provide a number of publishing listing and price setting mechanisms whereby a seller may list or publish information concerning goods or services for sale a buyer can express interest in or indicate a desire to purchase such goods or services and a price can be set for a transaction pertaining to the goods or services. To this end the marketplace applications are shown to include at least one publication application and one or more auction applications which support auction format listing and price setting mechanisms e.g. English Dutch Vickrey Chinese Double Reverse auctions etc. . The various auction applications may also provide a number of features in support of such auction format listings such as a reserve price feature whereby a seller may specify a reserve price in connection with a listing and a proxy bidding feature whereby a bidder may invoke automated proxy bidding.

A number of fixed price applications support fixed price listing formats e.g. the traditional classified advertisement type listing or a catalogue listing and buyout type listings. Specifically buyout type listings e.g. including the Buy It Now BIN technology developed by eBay Inc. of San Jose Calif. may be offered in conjunction with auction format listings and allow a buyer to purchase goods or services which are also being offered for sale via an auction for a fixed price that is typically higher than the starting price of the auction.

Store applications allow a seller to group listings within a virtual store which may be branded and otherwise personalized by and for the seller. Such a virtual store may also offer promotions incentives and features that are specific and personalized to a relevant seller.

Reputation applications allow users that transact utilizing the networked system of to establish build and maintain reputations which may be made available and published to potential trading partners. Consider that where for example the networked system supports person to person trading users may otherwise have no history or other reference information whereby the trustworthiness and credibility of potential trading partners may be assessed. The reputation applications allow a user for example through feedback provided by other transaction partners to establish a reputation within the networked system over time. Other potential trading partners may then reference such a reputation for the purposes of assessing credibility and trustworthiness.

Personalization applications allow users of the networked system to personalize various aspects of their interactions with the networked system . For example a user may utilizing an appropriate personalization application create a personalized reference page at which information regarding transactions to which the user is or has been a party may be viewed. Further a personalization application may enable a user to personalize listings and other aspects of their interactions with the networked system and other parties.

The networked system may support a number of marketplaces that are customized for example for specific geographic regions. A version of the networked system may be customized for the United Kingdom whereas another version of the networked system may be customized for the United States. Each of these versions may operate as an independent marketplace or may be customized or internationalized presentations of a common underlying marketplace. The networked system may accordingly include a number of internationalization applications that customize information and or the presentation of information by the networked system according to predetermined criteria e.g. geographic demographic or marketplace criteria . For example the internationalization applications may be used to support the customization of information for a number of regional websites that are operated by the networked system and that are accessible via respective web servers of .

Navigation of the networked system may be facilitated by one or more navigation applications . For example a search application as an example of a navigation application may enable key word searches of listings published via the networked system . A browse application may allow users to browse various category catalogue or inventory data structures according to which listings may be classified within the networked system . Various other navigation applications may be provided to supplement the search and browsing applications.

In order to make listings available via the networked system as visually informing and attractive as possible the marketplace applications may include one or more imaging applications utilizing which users may upload images for inclusion within listings. An imaging application also operates to incorporate images within viewed listings. The imaging applications may also support one or more promotional features such as image galleries that are presented to potential buyers. For example sellers may pay an additional fee to have an image included within a gallery of images for promoted items.

Listing creation applications allow sellers conveniently to author listings pertaining to goods or services that they wish to transact via the networked system and listing management applications allow sellers to manage such listings. Specifically where a particular seller has authored and or published a large number of listings the management of such listings may present a challenge. The listing management applications provide a number of features e.g. auto relisting inventory level monitors etc. to assist the seller in managing such listings. One or more post listing management applications may also assist sellers with a number of activities that typically occur post listing. For example upon completion of an auction facilitated by one or more auction applications a seller may wish to leave feedback regarding a particular buyer. To this end a post listing management application may provide an interface to one or more reputation applications so as to allow the seller conveniently to provide feedback regarding multiple buyers to the reputation applications .

Dispute resolution applications provide mechanisms whereby disputes arising between transacting parties may be resolved. For example the dispute resolution applications may provide guided procedures whereby the parties are guided through a number of steps in an attempt to settle a dispute In the event that the dispute cannot be settled via the guided procedures the dispute may be escalated to a third party mediator or arbitrator.

A number of fraud prevention applications implement fraud detection and prevention mechanisms to reduce the occurrence of fraud within the networked system .

Messaging applications are responsible for the generation and delivery of messages to users of the networked system such messages for example advising users regarding the status of listings at the networked system e.g. providing outbid notices to bidders during an auction process or to provide promotional and merchandising information to users . Respective messaging applications may utilize any one have a number of message delivery networks and platforms to deliver messages to users. For example messaging applications may deliver electronic mail e mail instant message IM Short Message Service SMS text facsimile or voice e.g. Voice over IP VoIP messages via the wired e.g. the Internet Plain Old Telephone Service POTS or wireless e.g. mobile Wi Fi WiMAX networks.

Merchandising applications support various merchandising functions that are made available to sellers to enable sellers to increase sales via the networked system . The merchandising applications also operate the various merchandising features that may be invoked by sellers and may monitor and track the success of merchandising strategies employed by sellers.

The networked system itself or one or more parties that transact via the networked system may operate loyalty programs that are supported by one or more loyalty promotions applications . For example a buyer may earn loyalty or promotions points for each transaction established and or concluded with a particular seller and be offered a reward for which accumulated loyalty points can be redeemed.

Response simulator application s in some example embodiments may be included in the applications and or to mock or simulate responses from one or more of the other applications described above. In such example embodiments an API call maybe submitted via a client machine and or of to the response simulator to test API calls typically received and processed by other of the applications using application servers database servers and databases of . Employing the response simulator applications rather than multiple other applications may result in a conservation of resources because fewer application servers database servers and databases maybe used to simulate the API responses.

The tables also include an items table in which are maintained item records for goods and services that are available to be or have been transacted via the networked system . Each item record within the items table may furthermore be linked to one or more user records within the user table so as to associate a setter and one or more actual or potential buyers with each item record.

A transaction table contains a record for each transaction e.g. a purchase or sale transaction pertaining to items for which records exist within the items table .

An order table is populated with order records each order record being associated with an order. Each order in turn may be with respect to one or more transactions for which records exist within the transaction table .

Bid records within a bids table each relate to a bid received at the networked system in connection with an auction format supported by an auction application of . A feedback table is utilized by one or more reputation applications of in one example embodiment to construct and maintain reputation information concerning users. A history table maintains a history of transactions to which a user has been a party. One or more attributes tables record attribute information pertaining to items for which records exist within the items table . Considering only a single example of such an attribute the attributes tables may indicate a currency attribute associated with a particular item the currency attribute identifying the currency of a price for the relevant item as specified in by a seller.

Response simulator tables may include API call tables input field tables API response tables and output field tables as described with respect to . The response simulator tables may further include sample data to be entered in to output fields of simulated API responses.

The example computer system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse a disk drive unit a signal generation device e g. a speaker and a network interface device .

The disk drive unit includes a machine readable medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable media.

The instructions may further be transmitted or received over a network via the network interface device .

While the machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present subject matter. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media and carrier wave signals.

Thus a method and system to test executable instructions have been described. The above description is intended to be illustrative and not restrictive. For example the above described embodiments or one or more aspects thereof may be used in combination with each other. Other embodiments will be apparent to those of skill in the art upon reviewing the above description. The scope of the claims should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled. In the appended claims the terms including and in which are used as the plain English equivalents of the respective terms comprising and wherein. Also in the following claims the terms including and comprising are open ended that is a system device article or process that includes elements in addition to those listed after such a term in a claim are still deemed to fall within the scope of that claim. Moreover in the following claims the terms first second and third etc. are used merely as labels and are not intended to impose numerical requirements on their objects.

The Abstract is provided to comply with 37 C.F.R. 1.72 b which requires that it allow the reader to quickly ascertain the nature of the technical disclosure it is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. Also in the above Detailed Description various features may be grouped together to streamline the disclosure. This should not be interpreted as intending that an unclaimed disclosed feature is essential to any claim. Rather inventive subject matter may lie in less than all features of a particular disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment.

