---

title: Methods and systems for decrypting an encrypted portion of a uniform resource identifier
abstract: A computer-implemented method for decrypting, by a browser application, an encrypted portion of a fragment identifier within a uniform resource identifier includes receiving, by a browser application executing on a computing device, from a user, a uniform resource identifier including a delimiter and a fragment identifier, the fragment identifier comprising an encrypted portion. The method includes requesting, by the browser application, from an access control manager, decryption information associated with the fragment identifier. The method includes receiving, by the browser application, from the access control manager, the requested decryption information. The method includes decrypting, by the browser application, the encrypted portion of the fragment identifier with the requested decryption information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09577989&OS=09577989&RS=09577989
owner: 
number: 09577989
owner_city: 
owner_country: 
publication_date: 20150312
---
This application claims priority from U.S. Provisional Patent Application No. 61 953 756 filed on Mar. 15 2014 entitled Methods and Systems for Decrypting an Encrypted Portion of a Uniform Resource Identifier which is hereby incorporated by reference.

The disclosure relates to distributing encrypted data. More particularly the methods and systems described herein relate to distributing encrypted data contained in a uniform resource identifier.

Conventional systems for digital rights management are typically proprietary systems that provide functionality for securing e.g. via one or more of encrypting controlling access and authenticating shared data objects stored within the system and accessed by users of the system. However such systems do not typically extend to securing data objects once the data objects are shared with individuals external to the system or for securing data objects created outside the system. Although individuals may implement cryptographic functions without the use of a digital rights management system such functions typically require a level of technical sophistication unavailable to the average individual. Further even for sophisticated users there are a number of well known drawbacks to standard cryptographic techniques. For example symmetric key cryptography e.g. the Advanced Encryption Standard AES in the United States allows for password protection of data objects but does not prevent authorized users from sharing the password with unauthorized users and is reliant upon the strength of the password.

Compounding the difficulty of secure message transmission there are many protocols and applications that do not natively provide for encryption of messages or provide an application programming interface to permit encryption or decryption functionality to be included. As a result users must often resort to installing cumbersome specialized systems before they can send or receive encrypted messages sometimes with no guarantee that the systems will operate smoothly with their preferred applications.

In one aspect a computer implemented method for decrypting by a browser application an encrypted portion of a fragment identifier within a uniform resource identifier includes receiving by a browser application executing on a computing device from a user a uniform resource identifier URI including a delimiter and a fragment identifier the fragment identifier comprising an encrypted portion. The method includes requesting by the browser application from an access control manager decryption information associated with the fragment identifier. The method includes receiving by the browser application from the access control manager the requested decryption information. The method includes decrypting by the browser application the encrypted portion of the fragment identifier with the requested decryption information.

In another aspect a non transitory computer readable medium having instructions stored thereon wherein the instructions are executable by at least one computer processor to perform a method the method including receiving by a browser application executing on a computing device from a user a uniform resource identifier URI including a delimiter and a fragment identifier the fragment identifier comprising an encrypted portion requesting by the browser application from an access control manager decryption information associated with the fragment identifier receiving by the browser application from the access control manager the requested decryption information and decrypting by the browser application the encrypted portion of the fragment identifier with the requested decryption information.

In still another aspect in a system for decrypting and displaying by a browser application an encrypted portion of a fragment identifier within a uniform resource identifier the system comprises a computing device and a browser application i executing on the computing device ii receiving from a user a uniform resource identifier URI including a delimiter and a fragment identifier the fragment identifier comprising an encrypted portion iii requesting from an access control manager decryption information associated with the fragment identifier iv receiving from the access control manager the requested decryption information and v decrypting the encrypted portion of the fragment identifier with the requested decryption information.

In some embodiments the methods and systems described herein relate to decrypting an encrypted portion of a uniform resource identifier URI . Before describing such methods and systems in detail however a description is provided of a network in which such methods and systems may be implemented.

Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s client s client node s client machine s client computer s client device s computing device s endpoint s or endpoint node s in communication with one or more remote machines also generally referred to as server s or computing device s via one or more networks .

Although shows a network between the clients and the remote machines the clients and the remote machines may be on the same network . The network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In some embodiments there are multiple networks between the clients and the remote machines . In one of these embodiments a network not shown may be a private network and a network may be a public network. In another of these embodiments a network may be a private network and a network a public network. In still another embodiment networks and may both be private networks.

The network may be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network an SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network may be a bus star or ring network topology. The network may be of any such network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein. The network may comprise mobile telephone networks utilizing any protocol or protocols used to communicate among mobile devices including AMPS TDMA CDMA GSM GPRS or UMTS. In some embodiments different types of data may be transmitted via different protocols. In other embodiments the same types of data may be transmitted via different protocols.

A client and a remote machine referred to generally as computing devices can be any workstation desktop computer laptop or notebook computer server portable computer mobile telephone or other portable telecommunication device media playing device a gaming system mobile computing device or any other type and or form of computing telecommunications or media device that is capable of communicating on any type and form of network and that has sufficient processor power and memory capacity to perform the operations described herein. A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions including without limitation any type and or form of web browser web based client client server application an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client .

In one embodiment a computing device provides functionality of a web server. In some embodiments a web server comprises an open source web server such as the APACHE servers maintained by the Apache Software Foundation of Delaware. In other embodiments the web server executes proprietary software such as the Internet Information Services products provided by Microsoft Corporation of Redmond Wash. the Oracle iPlanet web server products provided by Oracle Corporation of Redwood Shores Calif. or the BEA WEBLOGIC products provided by BEA Systems of Santa Clara Calif.

In some embodiments the system may include multiple logically grouped remote machines . In one of these embodiments the logical group of remote machines may be referred to as a server farm . In another of these embodiments the server farm may be administered as a single entity.

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor . The main memory may be based on any available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . also depicts an embodiment in which the main processor communicates directly with cache memory via a secondary bus sometimes referred to as a backside bus. In other embodiments the main processor communicates with cache memory using the system bus .

In the embodiment shown in the processor communicates with various I O devices via a local system bus . Various buses may be used to connect the central processing unit to any of the I O devices including a VESA VL bus an ISA bus an EISA bus a MicroChannel Architecture MCA bus a PCI bus a PCI X bus a PCI Express bus or a NuBus. For embodiments in which the I O device is a video display the processor may use an Advanced Graphics Port AGP to communicate with the display . depicts an embodiment of a computer in which the main processor also communicates directly with an I O device via for example HYPERTRANSPORT RAPIDIO or INFINIBAND communications technology.

A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones scanners cameras and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . Furthermore an I O device may also provide storage and or an installation medium for the computing device . In some embodiments the computing device may provide USB connections not shown to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

Referring still to the computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch disks 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other software.

Furthermore the computing device may include a network interface to interface to the network through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56kb X.25 SNA DECNET broadband connections e.g. ISDN Frame Relay ATM Gigabit Ethernet Ethernet over SONET wireless connections or some combination of any or all of the above. Connections can be established using a variety of communication protocols e.g. TCP IP IPX SPX NetBIOS Ethernet ARCNET SONET SDH Fiber Distributed Data Interface FDDI RS232 IEEE 802.11 IEEE 802.11a IEEE 802.11b IEEE 802.11g IEEE 802.11n CDMA GSM WiMax and direct asynchronous connections . In one embodiment the computing device communicates with other computing devices via any type and or form of gateway or tunneling protocol such as Secure Socket Layer SSL or Transport Layer Security TLS . The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein.

In some embodiments the computing device may comprise or be connected to multiple display devices each of which may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCl LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operates under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the MICROSOFT WINDOWS operating systems the different releases of the Unix and Linux operating systems any version of the MAC OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include but are not limited to WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE WINDOWS XP WINDOWS 7 and WINDOWS VISTA all of which are manufactured by Microsoft Corporation of Redmond Wash. MAC OS manufactured by Apple Inc. of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

The computing device can be any workstation desktop computer laptop or notebook computer server portable computer mobile telephone or other portable telecommunication device media playing device a gaming system mobile computing device or any other type and or form of computing telecommunications or media device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein. In some embodiments the computing device may have different processors operating systems and input devices consistent with the device. In other embodiments the computing device is a mobile device such as a JAVA enabled cellular telephone or personal digital assistant PDA . The computing device may be a mobile device such as those manufactured by way of example and without limitation by Motorola Corp. of Schaumburg Ill. USA Kyocera of Kyoto Japan Samsung Electronics Co. Ltd. of Seoul Korea Nokia of Finland Hewlett Packard Development Company L.P. and or Palm Inc. of Sunnyvale Calif. USA Sony Ericsson Mobile Communications AB of Lund Sweden or Research In Motion Limited of Waterloo Ontario Canada. In yet other embodiments the computing device is a smart phone Pocket PC Pocket PC Phone or other portable mobile device supporting Microsoft Windows Mobile Software.

In some embodiments the computing device is a digital audio player. In one of these embodiments the computing device is a digital audio player such as the Apple IPOD IPOD Touch IPOD NANO and IPOD SHUFFLE lines of devices manufactured by Apple Inc. of Cupertino Calif. In another of these embodiments the digital audio player may function as both a portable media player and as a mass storage device. In other embodiments the computing device is a digital audio player such as those manufactured by for example and without limitation Samsung Electronics America of Ridgefield Park N.J. Motorola Inc. of Schaumburg Ill. or Creative Technologies Ltd. of Singapore. In yet other embodiments the computing device is a portable media player or digital audio player supporting file formats including but not limited to MP3 WAV M4A AAC WMA Protected AAC AEFF Audible audiobook Apple Lossless audio file formats and .mov .m4v and .mp4 MPEG 4 H.264 MPEG 4 AVC video file formats.

In some embodiments the computing device comprises a combination of devices such as a mobile phone combined with a digital audio player or portable media player. In one of these embodiments the computing device is a device in the Motorola line of combination digital audio players and mobile phones. In another of these embodiments the computing device is a device in the iPhone smartphone line of devices manufactured by Apple Inc. of Cupertino Calif. In still another of these embodiments the computing device is a device executing the Android open source mobile phone platform distributed by the Open Handset Alliance for example the device may be a device such as those provided by Samsung Electronics of Seoul Korea or HTC Headquarters of Taiwan R.O.C. In other embodiments the computing device is a tablet device such as for example and without limitation the iPad line of devices manufactured by Apple Inc. the PlayBook manufactured by Research In Motion the Cruz line of devices manufactured by Velocity Micro Inc. of Richmond Va. the Folio and Thrive line of devices manufactured by Toshiba America Information Systems Inc. of Irvine Calif. the Galaxy line of devices manufactured by Samsung the HP Slate line of devices manufactured by Hewlett Packard and the Streak line of devices manufactured by Dell Inc. of Round Rock Tex.

Embodiments of the disclosed system and method permit users to send encrypted messages within uniform resource identifiers URIs . In some embodiments a user may send an electronic message such as an electronic mail email message containing a URI. In one of these embodiments the text of the URI contains an encrypted message. In another of these embodiments the text of the URI contains text that directs a recipient user s browser to communicate with an access control manager that can enable the browser to decrypt the message. Thus the recipient user can view the message simply by executing the link. In some embodiments when the recipient user clicks on or otherwise activates the URI the recipient user s browser automatically executes a process of authenticating the recipient user to the access control manager and receiving information with which to automatically decrypt the encrypted message. In some embodiments by encoding an encrypted message this way applications that don t support the encrypted format but support embedding of URI links e.g. HTTP may still be sent protected messages and when using an HTTP link may quickly allow the user to view the protected message without installing new software. In some embodiments moreover the URI may direct the access control manager to aid in the decryption of the encrypted message without sending the portion of the URI containing the encrypted message to the access control manager thus the only entity apart from the sender s computing device who possesses both the ability to decrypt and view the encrypted message is the recipient user s computing device.

Referring now to a block diagram depicts one embodiment of a system for decrypting an encrypted portion of a uniform resource identifier. In brief overview the system includes a computing device . The computing device may be a computing device as described above in reference to . The computing device may also be a computing device as described above in reference to . The system also includes a browser application executing on the computing device .

Some embodiments of the disclosed system and method involve the use of cryptographic systems. A cryptographic system is a set of protocols or algorithms whereby a data set known as plaintext which is coherent in a particular format readable for a person or machine is converted to a related data set known as cyphertext which is typically not coherent for any person or machine unless first converted back into plaintext. The plaintext may be any set of data that may be stored or interpreted by computing devices as described above in reference to . The plaintext may be a character array such as a string of human readable symbols. The plaintext may be an image file such as a Joint Photographic Experts Group JPEG file. The plaintext may be an audio file such as a Moving Pictures Experts Group Audio Layer III MP3 file. The plaintext may be a video file such as a Moving Pictures Experts Group MPEG file. The cryptographic system may translate the plaintext into cyphertext by performing one or more mathematical operations on the plaintext. The process of converting plaintext into cyphertext is known as encryption. The cyphertext may be referred to as encrypted. The cryptographic system may use another dataset called an encryption key to encrypt the plaintext. In one embodiment an encryption key is any data that enables a cryptographic system to encrypt plaintext into cyphertext. In some embodiments the cryptographic system also includes a protocol for converting cyphertext back into plaintext. The process of converting the cyphertext back into plaintext may be called decryption. A decryption key is any data that enables a cryptographic system to decrypt cyphertext producing its corresponding plaintext.

In some cryptographic systems known as symmetric cryptographic systems the decryption key is sufficiently similar to the encryption key that possession of either the decryption or encryption key trivially enables a computing device to determine the encryption or decryption key respectively. The encryption and decryption keys in symmetric cryptographic systems may be kept secret and shared only with persons or entities that the user of the cryptographic system wishes to be able to decrypt the cyphertext. One example of a symmetric cryptographic system is AES which arranges plaintext into matrices and then modifies the matrices through repeated permutations and arithmetic operations with an encryption key. In embodiments of cryptographic systems that are asymmetric neither the encryption key nor the decryption key can be readily deduced without additional secret knowledge even given the possession of the corresponding decryption or encryption key respectively a common example is a public key cryptographic system in which possession of the encryption key does not make it practically feasible to deduce the decryption key so that the encryption key may safely be made available to the public. An example of a public key cryptographic system is RSA in which the encryption key involves the use of numbers that are products of very large prime numbers but the decryption key involves the use of those very large prime numbers such that deducing the decryption key from the encryption key requires the practically infeasible task of computing the prime factors of a number that is the product of two very large prime numbers.

Embodiments of the disclosed system manipulate uniform resource identifiers. In one embodiment a uniform resource identifier URI is a string of characters that within a particular system manipulating such strings unambiguously identifies a resource for instance as used in the protocols associated with the World Wide Web a URI may name a particular resource or it may identify a particular network address where a given resource may be found. In some embodiments a URI is a Uniform Resource Name URN that uniquely identifies a particular resource for instance the international standard book number ISBN of a book is a URN that uniquely identifies the particular edition of a particular book. In other embodiments a URI is a uniform resource locator URL which indicates the location of a particular copy of a resource thus in the Hypertext Transfer Protocol HTTP used in the Word Wide Web a URL identifies the location of a particular file at a particular network address. Some embodiments of URI parsing schemes define special characters that dictate how the URI is parsed.

Referring now to block diagrams depict two embodiments of URIs as used in some embodiments of the methods and systems described herein. illustrates a general form of a URI as used in some embodiments of the methods and systems described herein. The character in this form of URI instructs a parser of the URI that the characters to the left of it denote a scheme name . In one embodiment a scheme name indicates the particular protocol to be used in reading the remainder of the URI. For instance in the URL embodiment illustrated by the scheme name http indicates that the URL is read according to the hypertext transfer protocol HTTP . In one embodiment the portion of the URI that follows after the colon is the hierarchy which describes the resource pertaining to the URI in terms of a hierarchical classification system. For instance where the URI is a URL as in the hierarchy describes the network address of a particular resource working from the network address of the remote machine on which the resource is located to the location of a particular file in a particular folder. In some embodiments the hierarchy identifies an access control manager for instance the URI may identify the network address of a remote machine on which the access control manager is executing. The terms URI URL and link may be used interchangeably herein.

Some embodiments of the disclosed system and method involve the use of a fragment identifier . In some embodiments a fragment identifier is a string of characters within the URI that is not conveyed to the remote machine hosting the resource but is used exclusively by the client machine . In one embodiment the fragment identifier is a string of characters that directs the computing device to a subset of the data returned from a remote device that is located by the portion of the URI that is not a fragment identifier. A fragment identifier may be identified by at least one delimiter which may be a special character that identifies the fragment identifier . For instance when a client computing device uses the URL shown in to retrieve information it may send the URL portion http www.vrtru.com to a remote device located at the network address that maps to www.vrtru.com and may then use the fragment identifier to search within the data that is returned is the delimiter in this instance. Skilled practitioners in the art will be aware that any character or string may be designated a delimiter in a given protocol and that delimiters may identify the end as well as the beginning of the string they delimit.

Some embodiments of the disclosed system use a fragment identifier to store cyphertext in a URI . In some embodiments a portion of the fragment identifier is encrypted. In some embodiments the cyphertext is the entire fragment identifier . In other embodiments the fragment identifier contains other text that is not encrypted. The cyphertext may be identified within the fragment identifier by additional delimiters not shown . The non encrypted text may be identified within the fragment identifier by additional delimiters not shown . Practitioners skilled in the art will understand that a URI may contain additional sections that permit additional information to be encoded in a URI for instance a URL may optionally have an additional query section identified by an additional delimiter containing information to be transmitted to a remote device at the network address identified in the URL.

Referring back to and in some embodiments the browser application is a software program. The browser application may be a hardware module. In some embodiments the browser application is an application included with the operating system of the computing device . In other embodiments the browser application is an application that a user of the computing device installed. In one embodiment the browser application is an application that processes a URI as directed by the contents of the URI in accordance with a protocol for interpretation of the URI . The browser application may be a web browser such as INTERNET EXPLORER which is manufactured by Microsoft Corporation of Redmond Wash. CHROME which is manufactured by Google Inc. of Mountain View Calif. or FIREFOX which is manufactured by the Mozilla Corporation of Mountain View Calif. In some embodiments the browser application is configured to receive a URI including a delimiter and a fragment identifier from a user where the fragment identifier includes an encrypted portion to request decryption information associated with the fragment identifier from an access control manager to receive the requested decryption information from the access control manager responsive to authentication of the user and to decrypt the encrypted portion of the fragment identifier with the requested decryption information.

In some embodiments the browser application stores data in local storage . In one embodiment local storage is a facility whereby data is stored locally within the browser application . In some embodiments data stored in local storage is persistent for instance the locally stored data remains stored and accessible even if the browser application reloads ends a session or loads a new set of data. In some embodiments data stored in local storage is not transmitted to any other machine or application besides the browser application . Local storage may be stored according to any data storage protocol used by computing devices as described above in reference to . The local storage data may be stored in a key value table. The local storage data may be stored in a relational database. One example of local storage is the local storage facility provided in browsers that are compliant with hypertext markup language version 5 HTML 5 .

Some embodiments of the browser application execute client side programs. A client side program may be a program conveyed to the browser application as part of a message which may be executed by the browser application . For instance the client side program may be a part of an email message. The client side program may be part of a webmail message. The client side program may be downloaded by the browser application as part of a web page. Loading the message may trigger execution of a client side program. Execution may be triggered by a user input for instance execution of the program may be triggered when the user selects a link in the message body. The client side program may be written in a scripting language such as JavaScript. The client side program may be provided as previously compiled code such as a client side applet.

In some embodiments the browser application communicates with the access control management system . The access control manager may execute on a remote device . The access control manager may be a software program. The access control manager may be a hardware module. In one embodiment the access control manager is a system that prevents entities from using resources in ways not authorized by the security of the access control manager . The access control manager may enforce protocols regarding the cryptographic system. In some embodiments the access control manager provides decryption information to the browser application . The decryption information may be any information that enables the browser application to decrypt the encrypted portion. Decryption information may be a decryption key of the cryptographic system used to encrypt the encrypted portion.

Some embodiments of the system include an identity provider . The identity provider may execute on the same remote machine as the access control manager . The identity provider may be integrated into the access control manager . In some embodiments the identity provider executes on a different remote machine . The identity provider may be a software program. The identity provider may be a hardware module. In some embodiments the identity provider authenticates a user attempting to request decryption of the encrypted portion as set forth in more detail below. The identity provider may be a service such as an email service with which the user has an account. Upon authentication of the user the identity provider may provide data indicating that the user has been authenticated for instance the identity provider may provide an access token such as a Security Assertion Markup Language SAML token.

In some embodiments the access control manager supports Role Based Access Control RBAC . RBAC is an existing access control framework in which access to files is controlled by virtue of the roles a user has been assigned rather than the user s personal identity. In some embodiments the URI includes identified properties or roles and the access control manager determines whether to send decryption information based on whether a user has an authorized property or role.

In some embodiments the access control manager includes a transaction log in which it stores an identification of at least one of transactions users groups roles the URI associated with each user policies and business rules. By tracking access requests both valid and invalid usage statistics can be gathered about who is accessing data and for how long as well as from where unauthorized access attempts are being made. This capability can enable data owners or stewards to understand what data objects are useful as well as who they may want to add or remove from their access control lists.

Referring now to a flow diagram depicts one embodiment of a method for decrypting an encrypted portion of a uniform resource identifier. In brief overview the method includes receiving by a browser application executing on a computing device from a user a uniform resource identifier URI including a delimiter and a fragment identifier the fragment identifier comprising an encrypted portion . The method includes requesting by the browser application from an access control manager decryption information associated with the fragment identifier . The method includes receiving by the browser application from the access control manager the requested decryption information . The method includes decrypting by the browser application the encrypted portion of the fragment identifier with the requested decryption information .

In one embodiment a URI is generated on an additional computing device not shown embedded in an email addressed to a recipient user and transmitted over at least one network to a computing device used by the recipient user and executing the browser application . A transmitting user operating the additional computing device may select a message to include in the encrypted portion of the fragment identifier. The transmitting user may provide the message by entering it as text. The transmitting user may copy and paste the message. In some embodiments the transmitting user selects the access control manager to deliver the encryption for the message. In one embodiment the access control manager encrypts the message. In another embodiment the access control manager provides an encryption key to the computing device used by the transmitting user which encrypts the message. In another embodiment a third party encrypts the message.

In some embodiments the URI containing the encrypted message after a delimiter is generated by the transmitting user s computing device . In one embodiment a browser application executing on the transmitting user s computing device executes a script plug in extension or other software program to encrypt plaintext generated by the transmitting user and to generate the URI containing the encrypted plaintext after the delimiter.

Referring still to in greater detail and in connection with the browser application receives from a user a URI including a delimiter and a fragment identifier the fragment identifier comprising an encrypted portion . The URI may also contain a portion identifying the access control manager . The URI may include additional information within the fragment identifier . In some embodiments the URI includes an additional delimited section such as a query containing further information. For instance the URI may contain information identifying an identity provider . The URI may contain information identifying an authorized recipient. The URI may contain information identifying an authorized computing device on which the decryption may occur.

In some embodiments the receiving user enters the URI into the browser application by entering it into a text entry field provided by the browser application for example if the browser application has a URL bar field for the entry of a URL the user may enter the URI there. The receiving user may type in the URI . The receiving user may copy and paste the URI e.g. copying the link from an email and pasting it into a user interface element displayed by the browser application . The receiving user may dictate the URI into a speech to text program that enters the URI in the text field. In other embodiments the receiving user selects the URI by selecting a visual representation of the URI . The receiving user may select the URI with a pointing device as described above in reference to . As an example the URI may be displayed on the computing device as a link such that the selection of the link provides the URI to the browser application . The visual representation may be displayed in a file stored on the computing device . As an example the URI may be displayed as a link in a word processing file the selection of which by system defaults within the computing device causes the browser application to launch and to receive the URI corresponding to the link. The visual representation may be displayed in the body of a message received from an additional computing device not shown for instance the visual representation e.g. a graphical icon or descriptive text may be displayed in the body of an email message. The browser application may receive the URI from the user via a webmail interface wherein the email message displays within the browser application itself. The visual representation may be displayed in the body of a message conveyed according to a text messaging protocol such as a Short Message Service SMS message.

The method includes requesting by the browser application from an access control manager decryption information associated with the fragment identifier . In some embodiments the browser application sends an identifier of the message to be decrypted to the access control manager . The message identifier may be included in the URI for instance the message identifier may be stored in the fragment identifier in unencrypted form. A delimiter may separate the message identifier from the encrypted portion of the fragment identifier. The browser application may parse the fragment identifier for the delimiter extract the message identifier and send it to the access control manager . In other embodiments the message identifier is a portion of the URI that is not in the fragment identifier for instance where the URI is a URL the message identifier may be a part of the path specified in the URL that is sent to the access control manager . The access control manager may provide a destination file matching each message identifier. In other embodiments the access control manager does not have a destination file for each message identifier but has a protocol whereby the portion of the URI corresponding to the message identifier may be identified and extracted. The message identifier may be included in a query embedded in the URI . In some embodiments the access control manager uses the message identifier to determine the appropriate decryption information. For instance each message identifier may be mapped via a table in the memory of the access control manager to the decryption key to decrypt the corresponding message. In other embodiments the access control manager uses the identification of the receiving user to determine the decryption information to send. For instance a particular receiving user at a particular time may be associated with a particular instance of the cryptographic system being used by the access control manager and thus with the specific decryption information necessary to decrypt the message. The access control manager may determine the appropriate decryption information for the message using any other data the access control manager possesses concerning access rights to the message as described above in reference to .

In one embodiment the browser application need not send the fragment identifier itself to the access control manager in order to receive the decryption information and the remote device need not store a copy of the encrypted content.

In some embodiments prior to receiving the requested decryption information the method includes authenticating the user with an identity provider . In some embodiments the browser application requests authentication directly from the identity provider . Requesting authentication of the user may also involve identifying by the browser application the identity provider based on information in the URI . For instance the fragment identifier may contain an unencrypted portion that identifies the identity provider. The unencrypted portion may be identified by a delimiter which the browser application parses to determine the identity provider. The URI may contain data identifying the user in a query. In other embodiments the browser application conveys an identifier of the user to the access control manager and the access control manager requests authentication from the identity provider . In some embodiments the access control manager automatically selects the identity provider with which to authenticate the user of the first client device from a plurality of identity providers not shown based on the received user identifier. In other embodiments the access control manager automatically accesses information provided by the transmitting user to determine which identity provider to access with a request for authentication of the user of the first client device .

In embodiments in which the method includes user authentication the identity provider may supply an indication of the authentication of the user. In some embodiments the browser application requests authentication directly from an identity provider and the identity provider provides the indication of the authentication to the browser application . The browser application may provide the received indication to the access control manager . In other embodiments the identity provider may provide the indication to the access control manager . For instance the browser application may identify the access control manager to the identity provider when the browser application requests authentication. Likewise if the access control manager requested authentication the identity provider may provide the indication to the access control manager . In some embodiments the indication is an authorization token as discussed above in reference to . In some embodiments the user is not required to have an account or a previous relationship of any kind with the access control manager the relationship the user has with an identity provider suffices to authenticate the user. In some embodiments the access control manager has a policy indicating that the user is authorized to view the message in the encrypted portion of the fragment identifier. The access control manager may receive the policy from the transmitting user as discussed above in reference to . The access control manager may receive the policy from an entity affiliated with the transmitting user for instance the transmitting user s employer may have a policy authorizing the user that provided the URI to the browser application to view any messages from the transmitting user. The policy may authorize the receiving user to view any messages from the employer of the transmitting user. The policy may permit any user affiliated with an entity affiliated with the receiving user to view the message. The policy may implement RBAC as described above in reference to .

In embodiments including a policy the policy may provide the access control manager with the identity of at least one user authorized to view the message. The policy may provide the access control manager with the identity of at least one computing device the user of which is authorized to view the message. For example the policy may specify that the user may decrypt the message only at a specific machine for example prohibiting the user from decrypting the message from a mobile device or public kiosk alternatively the policy may specify that any user of a particular machine may decrypt the message for example allowing all members of a department including a secured machine to decrypt the message . In another of these embodiments the policy identifies an authorized machine that complies with the Trusted Platform Module Specification promulgated by the Trusted Computing Group of Beaverton Oreg. In still another of these embodiments when authorizing a machine compliant with the Trusted Platform Module Specification as a recipient of the message the policy may indicate that the access control manager need not authenticate users of the authorized machine because the machine itself has certain properties that allows the user to trust that the machine has been secured.

The policy may provide the access control manager with the identity of an authorized user group instead of or in addition to authorizing a specific user for example the policy may specify a particular department company entity or other plurality of users authorized to decrypt the message. In another embodiment the policy indicates to the access control manager that an authorized user may delegate access for example the policy may specify that a receiving user such as a doctor may delegate access to other users such as a nurse hospital administrator resident or other colleague and the policy may specify characteristics of authorized individuals to which the authorized user may delegate access e.g. anyone with an email address ending in HypotheticalHospital.org .

In some embodiments the policy also instructs the access control manager to impose a time based restriction for example the policy may specify that the user may decrypt the message within certain time periods e.g. during a presentation a consultation a joint venture and an arbitrary time frame .

The method includes receiving by the browser application from the access control manager the requested decryption information . In one embodiment the access control manager establishes a secure connection to the computing device . In some embodiments the browser application includes a public key associated with the access control manager with which the browser application may establish a secure connection to the access control manager . In other embodiments the access control manager establishes a secure communication channel with the computing device through the use of well established key exchange protocols. In further embodiments the access control manager transmits to the browser application the requested decryption information e.g. a decryption key .

The method includes decrypting by the browser application the encrypted portion of the fragment identifier with the requested decryption information . In one embodiment the browser application decrypts the encrypted portion of the fragment identifier with a decryption key received from the access control manager . In some embodiments the decryption key is not accessed by the user of the first client device but delivered to trusted services and applications in the memory of the first client device . In some embodiments the encryption information is delivered in a persistent ticket much like a web cookie .

In some embodiments the browser application stores the fragment identifier in a data structure stored by the computing device e.g. in local storage . The data structure may be a table such as a key value table. The data structure may be a database table. The data structure may be a stack in which fragment identifiers are accessed on a last in first out basis. The data structure may be a queue in which fragment identifiers are accessed on a first in first out basis. In one embodiment the data structure is stored in local storage as described above in reference to . In some embodiments the browser application stores the entire fragment identifier in the data structure. In other embodiments the browser application stores the encrypted portion of the fragment identifier in the data structure. The browser application may retrieve the stored portion of the fragment identifier from the data structure upon receiving decryption information from the access control manager .

The browser application may display to the user the decryption of the encrypted portion of the fragment identifier. In some embodiments the decryption is displayed as text. The decryption may be arranged in a particular file format for display. In one embodiment the file format for display is specified in the URI . In another embodiment the access control manager specifies the file format for display for instance the access control manager may receive an instruction from a transmitting user specifying the format for display of the decryption. The browser application may use that information to display the decryption correctly as an example if the message that was transmitted in the encrypted portion of the fragment identifier was an image the browser may use the information specifying the file format to attempt to display the decryption as an image. In some embodiments the computing device used by the transmitting user not shown determines the format of a file the transmitting user wishes to send and creates information describing the file format the information may be inserted in the URI . The information may be transmitted to the access control manager . The information may be transmitted to the browser application .

Embodiments of the above described system and method permit a receiving user to receive decrypt and use an encrypted message without having to download specialized security software. In some embodiments a receiving user who has not received a message in this form before may decrypt and display the secure message by clicking on a link such as a link displayed in webmail. Single sign on protocols such as federated identity and trusted machines enable authentication of the receiving user to take place pursuant to the same user input without any additional effort on the user s part. Use of uniform or platform independent protocols to implement the method may eliminate compatibility concerns that arise when implementing other decryption products.

It should be understood that the systems described above may provide multiple ones of any or each of the described components and these components may be provided on either a standalone machine or in some embodiments on multiple machines in a distributed system. The phrases in one embodiment in another embodiment and the like generally mean the particular feature structure step or characteristic following the phrase is included in at least one embodiment of the present disclosure and may be included in more than one embodiment of the present disclosure. Such phrases may but do not necessarily refer to the same embodiment.

The systems and methods described above may be implemented as a method apparatus or article of manufacture using programming and or engineering techniques to produce software firmware hardware or any combination thereof. The techniques described above may be implemented in one or more computer programs executing on a programmable computer including a processor a storage medium readable by the processor including for example volatile and non volatile memory and or storage elements at least one input device and at least one output device. Program code may be applied to input entered using the input device to perform the functions described and to generate output. The output may be provided to one or more output devices.

Each computer program within the scope of the claims below may be implemented in any programming language such as assembly language machine language a high level procedural programming language or an object oriented programming language. The programming language may for example be LISP PROLOG PERL C C C JAVA or any compiled or interpreted programming language.

Each such computer program may be implemented in a computer program product tangibly embodied in a machine readable storage device for execution by a computer processor. Method steps described herein may be performed by a computer processor executing a program e.g. one or more instructions tangibly embodied on a non transitory computer readable medium to perform functions of the method by operating on input and generating output. Suitable processors include by way of example both general and special purpose microprocessors. Generally the processor receives instructions and data from a read only memory and or a random access memory. Storage devices suitable for tangibly embodying computer program instructions include for example all forms of computer readable devices firmware programmable logic hardware e.g. integrated circuit chip electronic devices a computer readable non volatile storage unit non volatile memory such as semiconductor memory devices including EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROMs. Any of the foregoing may be supplemented by or incorporated in specially designed ASICs application specific integrated circuits or FPGAs Field Programmable Gate Arrays . A computer can generally also receive programs and data from a storage medium such as an internal disk not shown or a removable disk. These elements will also be found in a conventional desktop or workstation computer as well as other computers suitable for executing computer programs implementing the methods described herein which may be used in conjunction with any digital print engine or marking engine display monitor or other raster output device capable of producing color or gray scale pixels on paper film display screen or other output medium. A computer may also receive programs and data from a second computer providing access to the programs via a network transmission line wireless transmission media signals propagating through space radio waves infrared signals etc.

Having described certain embodiments of methods and systems for decrypting an encrypted portion of a uniform resource identifier it will now become apparent to one of skill in the art that other embodiments incorporating the concepts of the disclosure may be used. Therefore the disclosure should not be limited to certain embodiments but rather should be limited only by the spirit and scope of the following claims.

