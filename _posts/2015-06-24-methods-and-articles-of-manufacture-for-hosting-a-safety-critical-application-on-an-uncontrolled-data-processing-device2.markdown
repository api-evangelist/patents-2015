---

title: Methods and articles of manufacture for hosting a safety critical application on an uncontrolled data processing device
abstract: Methods and articles of manufacture for hosting a safety critical application on an uncontrolled data processing device are provided. Various combinations of installation, functional, host integrity, coexistence, interoperability, power management, and environment checks are performed at various times to determine if the safety critical application operates properly on the device. The operation of the SCA on the UDPD may be controlled accordingly.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09619013&OS=09619013&RS=09619013
owner: Abbott Diabetes Care Inc.
number: 09619013
owner_city: Alameda
owner_country: US
publication_date: 20150624
---
This application is a continuation of U.S. patent application Ser. No. 14 739 976 filed on Jun. 15 2015 which application is a continuation of U.S. patent application Ser. No. 14 088 844 filed on Nov. 25 2013 now U.S. Pat. No. 9 058 431 which application is a continuation of U.S. patent application Ser. No. 12 876 840 filed on Sep. 7 2010 now U.S. Pat. No. 8 601 465 which applications claim priority to U.S. provisional patent application No. 61 359 265 filed Jun. 28 2010 entitled METHODS AND ARTICLES OF MANUFACTURE FOR HOSTING A SAFETY CRITICAL APPLICATION ON AN UNCONTROLLED DATA PROCESSING DEVICE and 61 240 578 filed Sep. 8 2009 entitled MEDICAL AND MODIFIABLE PORTABLE CONSUMER ELECTRONIC DEVICE AND SYSTEM FOR MEDICAL DATA REPORTING AND ANALYSIS which are hereby incorporated by reference.

Safety critical systems are systems whose failures or malfunctions may result in significantly detrimental consequences such as death or injury to persons severe damage or loss to equipment or to environment. Because safety critical systems have potentially dangerous consequences the entire system undergoes a verification and validation processes to provide a certain level of confidence that the entire system operates properly and will continue to operate properly for all approved for use conditions.

Medical systems are an example of safety critical systems that require a certain level of confidence that the system will operate and continue to operate properly. Medical systems may detrimentally affect a user s health and well being if not operating properly or not known to be operating properly. This is especially true for medical systems that provide user s with health related diagnostic or therapeutic information. For example analyte monitoring devices such as glucose meters provide users with diagnostic information about their blood sugar levels. Inaccuracies or significant delays in reporting such diagnostic information may potentially lead to injury or death of a user. Furthermore as another example medical systems may provide users with therapeutic information such as recommended medication dosages. For instance glucose meters may provide users with recommended insulin dosages in response to a glucose measurement in order to remedy the current or anticipated blood sugar levels. Inaccuracies or significant delays in reporting such therapeutic information may potentially lead to injury or death of the user.

Once the entire safety critical system have been verified and validated the entire system is released and is not expected to undergo software and or hardware changes. This provides for a very controlled system environment. New software and or hardware changes are not introduced into the market unless and until the new hardware and or software have undergone a new validation process. Such a controlled system environment provides a certain level of confidence that the system will not be altered or changed and potentially affects the proper operation of the system.

However when a safety critical application SCA is installed on an uncontrolled data processing device UDPD that permits hardware and or software changes by the user any changes to the UDPD may detrimentally affect the proper operation of the SCA on the UDPD. UDPDs generally permit the user to make software and or hardware changes to the device e.g. installing removing software programs installing removing drivers adding removing hardware components etc. Example UDPDs may include personal computers e.g. desktop notebook etc. mobile phones e.g. iPhones Blackberry etc. personal digital assistants PDAs etc. Thus the uncontrolled nature of the data processing devices compromises any assurance that the SCA will operate or continue to operate properly on the UDPD.

Methods and articles of manufacture for hosting safety critical applications on uncontrolled data processing devices are provided. Various combinations of checks e.g. installation check functional check host integrity check coexistence check interoperability check power management check environment check etc. are executed at various times to determine if the SCA may operate properly on the device. The operation of the SCA on the UDPD may be controlled accordingly.

These and other objects advantages and features of the invention will become apparent to those persons skilled in the art upon reading the details of the invention as more fully described below.

Before the present inventions are described it is to be understood that this invention is not limited to particular aspects described as such may of course vary. It is also to be understood that the terminology used herein is for the purpose of describing particular aspects only and is not intended to be limiting since the scope of the present invention will be limited only by the appended claims.

Where a range of values is provided it is understood that each intervening value to the tenth of the unit of the lower limit unless the context clearly dictates otherwise between the upper and lower limits of that range is also specifically disclosed. Each smaller range between any stated value or intervening value in a stated range and any other stated or intervening value in that stated range is encompassed within the invention. The upper and lower limits of these smaller ranges may independently be included or excluded in the range and each range where either neither or both limits are included in the smaller ranges is also encompassed within the invention subject to any specifically excluded limit in the stated range. Where the stated range includes one or both of the limits ranges excluding either or both of those included limits are also included in the invention.

Unless defined otherwise all technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art to which this invention belongs. Although any methods and materials similar or equivalent to those described herein can be used in the practice or testing of the present invention some potential and preferred methods and materials are now described. All publications mentioned herein are incorporated herein by reference to disclose and describe the methods and or materials in connection with which the publications are cited. It is understood that the present disclosure supersedes any disclosure of an incorporated publication to the extent there is a contradiction.

It must be noted that as used herein and in the appended claims the singular forms a an and the include plural referents unless the context clearly dictates otherwise. Thus for example reference to a firmware update includes a plurality of such firmware updates and reference to the firmware update includes reference to one or more firmware updates and equivalents thereof known to those skilled in the art and so forth.

The publications discussed herein are provided solely for their disclosure prior to the filing date of the present application. Nothing herein is to be construed as an admission that the present invention is not entitled to antedate such publication by virtue of prior invention. Further the dates of publication provided may be different from the actual publication dates which may need to be independently confirmed.

More and more people today however have access to one or more UDPDs. UDPDs have become an integral part of many people s lives and provide people with continual and convenient access to various applications to be used on these devices. For example many people today have a desktop or laptop computer as well as mobile phone that they can download various applications to and use on the specific device. The more accessible the devices are to the user the more convenient they become. While SCAs may be verified and validated before distribution to users when loaded onto a UDPD any assurance that the SCA will operate properly is compromised because of the uncontrolled nature of the UDPD.

Memory is coupled to processor via system bus and stores instruction sets to be executed by processor . Processor in turn comprises processing elements and or logic circuitry to execute the instructions sets. System bus interconnects these various components together and also interconnects components and to a display controller and display device and to peripheral devices such as input output I O devices such as numeric keypads keyboards modems network interfaces printers scanners video cameras and other devices which are well known in the art. In some instances the I O devices are coupled to the system bus through input output controllers . System bus may include one or more buses connected to each other through various bridges controllers and or adapters not shown as is well known in the art. In some instances the I O controller includes a USB Universal Serial Bus adapter for controlling USB peripherals and or an IEEE 1394 bus adapter for controlling IEEE 1394 peripherals.

While shows that non volatile memory is a local device coupled directly to the rest of the components in the UDPD it will be appreciated that in some instances the non volatile memory may be remote from the system such as a network storage device coupled to UDPD through a wired and or wireless network via a network interface or other suitable remote storage device. Furthermore it will be appreciated that the various embodiments described herein may be implemented with UDPDs which have more or fewer components than UDPD .

UDPDs such as the one described above may have stored therein an operating system and other software programs e.g. in Flash memory hard drive etc. . The programs may be initially provided in a variety of ways to the UDPD e.g. in manufacturing through a remote connection e.g. via a network interface to a remote location over a network by a removable storage device e.g. memory card CD ROM etc. etc. The programs and applications described herein comprise a set of instructions that are executed by the processor.

Programs are provided to the UDPD and are generally stored in non volatile memory such as Flash memory hard drive etc. . In some instances when the programs are to be run on the UDPD the programs are loaded into volatile memory e.g. RAM and accessed by the processor to be executed.

In some aspects the UDPD may include a processor which implements an application programming interface API for running instruction sets or software program. The API may include the ability for an instruction set to interrupt other instruction sets and to control the presentation of data from another device e.g. a medical device such as an analyte monitoring device and or drug administration device on various outputs e.g. audio visual and tactile outputs on the UDPD.

When a SCA is installed on a UDPD there are no assurances that the SCA will operate properly on the UDPD because there has been no verification or validation process performed after the SCA is installed on the UDPD. The environment of the UDPD is dynamic and can change in a way that effects the proper operation of the SCA on the UDPD. For example various software programs and drivers may be installed and removed from the UDPD and not only change the processing environment of the UDPD but also may consume processing bandwidth making the UDPD process other applications more slowly. Various software configurations may be changed as well which may affect the processing environment of the UDPD. Furthermore changes to hardware components e.g. wireless cards modems etc. or configurations thereof may affect the proper operation of the SCA on the UDPD e.g. prevent communication to an external device . Still further activities of the user may lead to the system obtaining viruses or spyware that can change the environment of the UDPD or consume processing bandwidth and prevent the SCA from operating properly. Moreover changes to the system may impact power consumption of the system which may compromise the SCA. Thus the uncontrolled nature of the data processing devices compromises any assurance that the SCA will operate or continue to operate properly on the UDPD.

In some aspects of the present disclosure methods and article of manufactures for hosting a safety critical application on an uncontrolled data processing device are provided. Various combinations of checks e.g. installation check functional check host integrity check coexistence check interoperability check power management check environment check etc. may be executed at various times to determine if the SCA may operate properly on the device and the operation of the SCA on the UDPD may be controlled accordingly.

In some aspects of the present disclosure a test harness module also referred to herein as test harness is provided that comprises one or more checks used to determine whether the SCA operates properly on the UDPD and to control the operation of the SCA on the UDPD accordingly. Example checks that the test harness may include but not limited to are an installation check functional check host integrity check coexistence check interoperability check power management check environment check. The methods and functions related to each are described in further detail throughout the present disclosure.

In some instances SCA and test harness may be verified and validated together at the same time as shown. In some instances SCA and test harness may be separately verified and validated and further may be verified and validated at different times e.g. when a new version of either is implemented etc. . It should be appreciated that while the test harness is described herein as a single test harness it is contemplated that one or more of the checks may be provided by one or more test harnesses on the same or different computer readable media. Further each test harness may be verified and validated at different times in some instances.

It should also be appreciated that SCA described herein may be associated with a wide range of safety critical applications. In some aspects of the present disclosure SCA is a medically related application. For example SCA may provide a user with health related tools features e.g. information computations communications etc. associated with diagnosis therapy and treatment drug administration and dosage data management e.g. logs records history graphs charts reports etc. etc.

In some aspects of the present disclosure SCA is an application associated with analyte monitoring and or determination. Example features of SCA may include for example one or more of the following determining analyte amounts or concentrations from a sample e.g. saliva blood other bodily fluid etc. receiving measurement data managing and or processing measurement data e.g. logging measurements providing warnings based on measurement values providing alternative representations of data in the form of reports graphs charts etc. calculating drug dosage amounts e.g. insulin bolus calculations based on measurement data exercise data food intake etc. communicating with a remote device external to UDPD e.g. communicating drug dosage and or administration data to a medication delivery device such as an insulin pump receiving measurement data from a continuous in vivo monitoring device such as an implanted sensor communicating with an analyte meter etc. other analyte monitoring feature described herein etc. It should be appreciated that the above features listed are exemplary and that other features associated with analyte monitoring and or determining may be implemented. In some aspects of the present disclosure SCA may be associated with glucose monitoring and or determination. In some aspects of the present disclosure SCA may be associated with ketone monitoring and or determination. Additional example applications related to analyte monitoring are provided in international patent application no. PCT US2010 23076 entitled Multi Function Analyte Test Device and Methods Therefor the entirety of which is incorporated herein by reference for all purposes.

After the initial verification and validation SCA and test harness are installed on a UDPD as represented by reference circle number two. For example the user may download SCA and test harness via the internet removable storage device e.g. FLASH memory card CD ROM etc. or any other suitable machine readable media connection or method. In some aspects of the present disclosure an article of manufacture is provided that comprises machine readable medium that has various checks stored thereon as machine executable instructions. For instance the machine readable medium may have test harness stored therein and in some instances SCA as well.

As mentioned before example UDPDs may include personal computers e.g. desktop notebook etc. mobile phones e.g. iPhones Blackberry etc. personal digital assistants PDAs digital music player e.g. iPod etc. Additional information and details for some example uncontrolled data processing devices e.g iPhone are described in US Patent Application Publication No. US2008 0122796 published May 29 2008 titled Touch Screen Device Method and Graphical User Interface for Determining Commands by Applying Heuristics the entirety of which is incorporated herein by reference for all purposes. In some aspects of the present disclosure a UDPD is provided that includes a processor and memory operably coupled to the processor wherein the memory has instructions stored therein to host the SCA on the UDPD. The memory may include instructions for one or more of the various checks described herein. For instance the memory may have test harness stored therein to perform the various checks on the SCA.

In some aspects of the present disclosure an analyte monitoring system is provided that includes a UDPD having a processor and memory operably coupled to the processor wherein the memory has instructions stored therein to host the SCA on the UDPD. The memory may include instructions for one or more of the various checks described herein. For instances the memory may have test harness stored therein to perform the various checks on the SCA.

In some aspects of the present disclosure the analyte monitoring system may include in addition to the UDPD an element having a sensor for providing measurement data from an analyte sample. The element is in communication with the UDPD and provides the measurement data to the UDPD. It should be appreciated that the element may communicate with the UDPD via a wireless or wired connection using any variety of wired or wireless technology. In some instances the element may be an implanted or on body analyte sensor. In some instances the element may include a strip port for receiving an analyte sample e.g. via a test strip or other in vitro application. In some instances the element may be an adapter that removably couples to the UDPD.

SCA and test harness may be installed on UDPDs communicating with elements e.g. adapters and or modules that provide additional functionality to a UDPD running a SCA. Examples and additional information of adapters used with UDPDs are described in U.S. provisional application No. 61 325 021 titled Mobile Phone Display for Continuous Analyte Monitoring the entirety of which is incorporated herein by reference for all purposes. Also examples of analyte monitoring modules used with UDPDs are described in U.S. Pat. No. 7 041 468 issued on May 9 2006 titled Blood Glucose Tracking Apparatus and Method and in US Patent Application Publication No. US2004 0245534 published Dec. 16 2004 titled Glucose Measuring Module and Insulin Pump Combination the entireties of which are incorporated herein by reference for all purposes.

SCA and test harness may also be installed on a modular analyte monitoring devices when one or more modules are unprotected. Modular analyte monitoring devices includes a base module and at least one other module that removably couples to the base module to form a single integrated analyte monitoring device. In this way various modules with different features may be coupled to the base module and provide the base module with those corresponding features. If for example the base module is a UDPD that allows the user to download and or remove software programs test harness may be installed on the base module to provide some level of assurance that the SCA installed on the base module may operate properly on the base module. Examples and additional information on modular meters are described in U.S. provisional patent application No. 61 325 155 titled Modular Analyte Monitoring Device the entirety of which is incorporated herein by reference for all purposes.

Adapter is shown comprising two pieces and that engage to form the adapter and permit the adapter to be securely coupled to and removed from UDPD . UDPD is shown in this exemplary example as a mobile phone. It should be understood that UDPD may be any variety of uncontrolled data processing devices e.g. a PDA mobile phone e.g. cellular phone etc. Such devices include for example BlackBerry iPhone iPod iPod Touch devices etc.

Adapter is configured to communicate with UDPD . In some instances adapter may include a wireless communication module and communicate with UDPD via wireless communication e.g. via Bluetooth infrared or other wireless technology. In some instances adapter may include a communication connector that communicates with UDPD via a wired connection e.g. via a micro USB port or other communication connection on UDPD .

Adapter includes strip port and associated circuitry for receiving a sample for an analyte measurement. UDPD has SCA stored within memory for execution by UDPD . SCA is an analyte monitoring application which provides UDPD with analyte monitoring capabilities. Depending on the specific application implemented one or more analytes such as glucose ketone etc. may be monitored.

SCA and UDPD is in communication with adapter and uses the test strip port to receive a test strip and perform a measurement on the sample provided. For example as shown in test strip is inserted into strip port provided by adapter . SCA processes data from the test strip and obtains a measurement reading using the processor of UDPD . SCA then conveys the measurement reading to the user via a display on UDPD . It should be appreciated that additional monitoring capabilities may also be performed by SCA running on UDPD such as those described herein e.g. audibly outputting the measurement reading logging the measurement data providing alarms calculating medication dosages communicating with medication delivery devices etc.

UDPD also has test harness and any other additional checks implemented that are not necessarily part of test harness stored in memory and as described herein executes various checks to achieve a certain level of confidence that the SCA may operate properly on UDPD . Also as described herein the various checks may be initiated in various combinations and at different times as desired.

In some embodiments adapter may be configured to perform the analyte measurement e.g. via an on board processor and communicates the measurement reading to UDPD via the wired or wireless connection with UDPD . UDPD runs SCA and communicates with adapter to receive the measurement readings and provides additional monitoring capabilities such as those described herein e.g. displaying and or outputting audibly the measurement reading logging the measurement data providing alarms calculating medication dosages communicating with medication delivery devices etc.

Adapter is shown comprising two pieces and that engage to form the adapter and permit the adapter to be securely coupled to and removed from UDPD . UDPD is shown in this exemplary embodiment as a mobile phone. It should be understood that UDPD may be any variety of uncontrolled data processing devices e.g. a PDA mobile phone e.g. cellular phone etc. Such devices include for example BlackBerry iPhone iPod iTouch devices etc.

Adapter is configured to communicate with UDPD . In some instances adapter may include a wireless communication module and communicate with UDPD via wireless communication e.g. via Bluetooth infrared or other wireless technology. In some instances adapter may include a communication connector that communicates with UDPD via a wired connection e.g. via a micro USB port or other communication connection on UDPD . Adapter also communicates with remote sensor device via a wireless communication module as shown in . Remote sensor device is shown as an on body analyte sensor e.g. an implanted or partially implanted analyte sensor on user . Remote sensor device may be for example an implanted or partially implanted glucose sensor for continuous glucose measurement CGM or glucose on demand God applications.

UDPD has SCA stored within memory for execution by UDPD . SCA is an analyte monitoring application which provides UDPD with analyte monitoring capabilities. Depending on the specific application implemented one or more analytes such as glucose ketone etc. may be monitored. SCA and UDPD are in communication with adapter and uses adapter to communicate with remote sensor device . Remote sensor device obtains analyte measurement data taken from user and communicates the data to SCA and UDPD via adapter . SCA receives the measurement data and provides additional monitoring capabilities such as those described herein e.g. displaying and or audibly outputting the measurement reading logging the measurement data providing alarms calculating medication dosages communicating with drug administration devices etc.

Turning back to after installation on UDPD test harness is executed to determine whether SCA operates properly on UDPD as represented by reference circle number three. In some instances test harness and SCA are configured such that test harness is initiated before SCA is freely operational.

The terms freely operational and operating freely are used herein to refer to the SCA operating such that the user is able to use the SCA as intended and free of any restrictions implemented by the test harness. It should be appreciated that one or more safety critical features of the SCA may be intended to be locked or disabled e.g. by the manufacturer physician etc. from the user and the running of the SCA with the intentionally locked features is considered to be operating freely.

However if the test harness restricts the use of the SCA then the SCA is said to be prevented from operating freely. For example in some instances this may include disabling the SCA and preventing the SCA from being run on the UDPD. In some instances this may include locking or disabling of one or more safety critical features of the SCA. In some instances this may include permitting the SCA to run on the UDPD so that the user may still use non safety critical features of the SCA but unable to use all safety critical features of the SCA. One or more checks on test harness may be performed before SCA is freely operational to provide a certain level of assurance that SCA may operate properly on UDPD before the user uses the safety critical features. Further in some instances one or more checks on test harness may be performed during and or after SCA is freely operational to provide a certain level of assurance that that SCA continues to operate properly on UDPD .

It should be appreciated that the term permitting is used broadly herein and may include allowing enabling unlocking etc. in some instances. Further it should be appreciated that the term preventing is used broadly herein and may include restricting disabling locking etc. in some instances.

In some aspects of the present disclosure test harness comprises one or more of the following checks an installation check to determine if SCA was installed properly on UDPD a functional check to determine if SCA functions properly on UDPD a host integrity check to determine if the integrity of SCA has been compromised a coexistence check to determine if SCA is incompatible with other programs on UDPD an interoperability check to determine if SCA interoperates properly on UDPD with related programs a power management check to determine if the power capabilities of UDPD are sufficient to run SCA safely with a certain level of assurance that the UDPD will not abruptly shutdown and an environment check to determine a current environment of UDPD at various times e.g. when checks are initiated and or determine if a change in environment has occurred since a previous determination of a current environment e.g. at a time associated with the last time the SCA was determined to operate properly on the UDPD . Furthermore test harness may execute one or more of these checks at various times e.g. before SCA is run while SCA is being run at predetermined intervals etc. and in different combinations as desired.

In some aspects of the present disclosure executing test harness results in one or more checks being executed to determine whether SCA is operating properly on UDPD and control the operation of SCA on UDPD accordingly. For example SCA and test harness may be configured such that SCA is prevented from operating freely on UDPD when determined that SCA is not operating properly on UDPD .

In some instances test harness may be run in the background of UDPD . SCA and or other software programs may in some instances be run in the foreground while test harness is run in the background on UDPD . Furthermore it should be appreciated that in some instances the running of the test harness in the background may be transparent to the user.

In some instances test harness and SCA are part of larger program module also referred to herein as program as represented by dotted lines. For example the entire program is initially verified and validated and subsequently installed on UDPD . Program may be configured to initiate test harness before allowing SCA to operate freely. In this way test harness is initiated in order to determine if SCA may operate properly e.g. installed and functioning properly on UDPD and thus control the operation of SCA on UDPD accordingly e.g. permit or prevent SCA from operating freely on UDPD .

In some instances SCA and test harness are separate programs which may be initially verified and validated separately and further may be installed on UDPD at the same or different times. In such cases SCA is configured to execute test harness at the appropriate times. For example SCA may include commands to initiate test harness prior to SCA being able to operate freely. In some instances if SCA is installed on UDPD and test harness is not then SCA is configured to prevent SCA from operating freely.

In some instances test harness may be included within SCA . A new SCA may be written to include a test harness or an existing SCA may be modified to include test harness . In such case SCA may be configured to initiate the test harness at the appropriate times. For example SCA may include commands to execute test harness before SCA is freely operational e.g. before safety critical features are accessible to the user . In this way a determination can be made as to the proper operation of SCA on UDPD before the user ever uses the safety critical features of SCA . Test harness may also be implemented within SCA such that it may be called upon one or more times or at various times as desired. It should be appreciated that SCA and test harness are shown separate in some figures herein for illustrative purposes and that embodiments with test harness included within SCA are applicable as well.

UDPD is shown in to include as previously described a system bus which is coupled to processor memory display controller and display device and peripheral devices such as I O devices . Memory is shown to include SCA and test harness . Again SCA and test harness may be part of a larger program . It should be appreciated that memory refers generally to any volatile and or non volatile memory available to processor and may include one or more memory components. Furthermore either SCA or test harness or both may be stored in one or more memory components and further may be stored together or separate from one another in removable or non removable memory. It should also be appreciated that in some instances SCA and test harness may be stored in non volatile memory and loaded into volatile memory such as RAM for execution by processor .

In some aspects of the present disclosure test harness may comprise one or more hardware and or software modules for performing the checks and processes described herein. The checks and processes described herein may for example be executed by processor of UDPD . It should be understood that the operations described for the checks including test routines and subroutines and processes described herein are accordingly performed by the host UDPD. As shown in the exemplary embodiment of test harness includes modules for an installation check functional check environment check host integrity check coexistence check interoperability check and power management check . These checks are initiated to determine whether SCA may operate properly on UDPD .

Test harness may be configured to run one or more of checks at various times as desired to perform the functions associated with each check an installation check to determine if SCA was installed properly on UDPD a functional check to determine if SCA functions properly on UDPD a host integrity check to determine if the integrity of SCA has been compromised a coexistence check to determine if SCA is incompatible with other programs on UDPD an interoperability check to determine if SCA interoperates properly on UDPD with related programs a power management check to determine if the power capabilities of UDPD are sufficient to run SCA safely with a certain level of assurance that the UDPD will not abruptly shutdown and an environment check to determine a current environment of UDPD at various times e.g. when checks are initiated and or determine if a change in environment has occurred since a previous determination of a current environment e.g. at a time associated with the last time the SCA was determined to operate properly on the UDPD .

A determination that SCA operates properly on UDPD may require specific outcomes for each check that is implemented. For example in some instances a determination that SCA is operating properly on UDPD requires an installation check to indicate that SCA is installed properly and also requires a functional check to indicate that SCA is functioning properly on UDPD . In some instances a determination that SCA is operating properly on UDPD requires only functional check to indicate that SCA is functioning properly on UDPD e.g. if a proper installation has already been determined . A determination that SCA is not operating properly on UDPD may result for example from either a determination that SCA is not installed properly or a determination that SCA is not functioning properly. It should be appreciated that additional checks e.g. host integrity check coexistence check interoperability check power management check and or other checks not necessarily discussed herein may also be implemented with their specific outcomes also required for a determination that SCA operates properly on UDPD.

The environment of the UDPD refers generally to various software and or hardware components or their configurations thereof which are present on UDPD. For example the environment check may identify various software programs applications drivers hardware components etc. that are currently on the UDPD that have been installed and or removed and or modified etc. In some embodiments only the software environment may be taken into consideration. In some embodiments the hardware environment may also be taken into consideration.

In some instances the environment check is implemented to check to see if the environment of UDPD has changed which may be a possible indicator that SCA no longer operates properly on UDPD. In such cases one or more additional checks e.g. functional check host integrity check coexistence check interoperability check power management check etc. may be executed to confirm that SCA is operating properly on UDPD in the new environment.

In some instances as shown in test harness also includes reference data . Reference data includes data used by test harness to determine whether SCA is performing within predetermined parameters and requirements that are associated with a certain level of confidence that SCA is operating properly on UDPD . For example reference data may include various test data to be used in the checks e.g. predetermined input data or requests as well as any data results timing values etc. that are acceptable or expected to result from various checks to indicate proper operation of the UDPD. It should be understood that some parameters and requirements may encompass ranges and or include tolerances which allow for some level of deviation.

In some aspects of the present disclosure an installation check may be executed to determine whether SCA is installed properly on UDPD . Because an improperly installed SCA compromises any assurance that the SCA is going to operate properly on UDPD a successful installation of SCA may be required in order to determine that SCA operates properly on the UDPD. Thus in some instances if SCA failed to install properly on UDPD then it may be determined that SCA does not operate properly on UDPD and SCA may be prevented from operating freely on UDPD . If installation check indicates that SCA installed properly on UDPD however SCA may still not necessarily operate properly on UDPD and additional checks may be required before determining that the SCA operates properly on the UDPD.

In some instances images of installed components of SCA also referred to herein as installed SCA components may be used to determine whether SCA is installed properly on UDPD . For example an installation package for SCA may include a plurality of files that are loaded onto UDPD in addition to a primary executable file. Installation check may view each of these files as an installed SCA component and compare images of each installed SCA component against reference data corresponding to data that is expected for a proper installation also referred to herein as reference installation data to distinguish it from other data that may be within reference data . For instance in some instances an image of an installed SCA component may include data about the installed SCA component such as filename version number error detection and or error correction data e.g. cyclic redundancy check CRC value error correcting code ECC checksum etc. etc. Installation check compares the data for each installed SCA component against expected data associated with a proper installation e.g. as defined by the reference installation data to determine whether a proper installation has occurred. For example a filename CRC value and or version number associated with the installed SCA component may be compared with corresponding expected filename CRC value and or version number in the reference installation data.

If for example the image of one or more installed SCA components does not match the reference installation data then installation check indicates that SCA failed to install properly on UDPD which indicates that SCA does not operate properly on UDPD . SCA may then be prevented from operating freely on UDPD . In some instances a failure to install properly may be reported e.g. logged and or communicated to the user of UDPD . In some instances a report of the failure may be sent to a remote device e.g. via the internet.

If for example the image of each installed SCA component matches the reference installation data then the installation check indicates that SCA installed properly on UDPD and one or more other checks e.g. functional check host integrity check coexistence check interoperability check power management check etc. may be executed if required. The term match is used broadly herein to indicate falling within predetermined parameters and requirements e.g. as defined by the reference data . A resulting match for the installation check thus represents a certain level of confidence that SCA installed properly on UDPD . In some instances the predetermined parameters and requirements require an exact match. However it should be appreciated that in some instances parameters and requirements may encompass ranges and or tolerances which allow for some deviation from an exact match requirement. Accordingly the term non match is used broadly herein to indicate not falling within the predetermined parameters and requirements e.g. as defined by reference data . A resulting non match for the installation check thus represents a certain level of confidence that SCA did not install properly on UDPD .

In some aspects of the present disclosure a functional check may be executed to determine whether SCA functions properly on UDPD . For example functional check may check whether SCA performs computations e.g. calculations measurements etc. accurately on UDPD whether SCA displays data properly on a display of UDPD and or whether SCA communicates properly via UDPD with an external device and or whether SCA performs these and or other safety critical activities in a proper amount of time.

A delay in performing an activity may have detrimental consequences and may indicate improper operating of SCA on UDPD . For example a significant delay in providing a computation for a glucose measurement may be sufficient to determine that SCA is not operating properly on UDPD . Further it should be appreciated that in some instances performing an activity such as a computation too quickly may be indicative of improper functioning as well. Functional check may also for example check whether data for SCA is displayed properly on a display of UDPD and or whether SCA may communicate properly between UDPD and an external device.

If for example it is determined that SCA does not function properly then functional check indicates that SCA does not operate properly on UDPD . SCA may then be prevented from operating freely on UDPD . If for example it is determined that SCA functions properly then other checks may also be initiated as required or if no other checks are required to be executed then SCA may be permitted to operate freely .

In some aspects of the present disclosure an environment check may be executed to determine a current environment of UDPD . Further in some instances environment check may be executed to determine whether the current environment has changed since the last determination that SCA is operating properly on UDPD . Changes to the environment of the UDPD may affect the proper operation of SCA on UDPD . Thus in some instances the environment check may include identifying the current environment and comparing it to a previously stored current environment that was associated with the last determination that SCA is operating properly on UDPD .

For example test harness may initiate environment check to obtain a current environment of UDPD when it is determined that SCA is operating properly and permitted to operate freely on UDPD . In this way test harness may later initiate environment check to determine if the current environment of UDPD has changed since this determination that SCA is operating properly. It should be appreciated that the current environment may be identified and recorded at various times associated with the performing of the checks e.g. before the check is initiated while the check is initiated or after the check has provided an outcome.

If it is determined that the environment of UDPD changes then SCA may potentially operate improperly on UDPD . Test harness may then for example initiate a functional check or any additional checks if implemented as well to be executed. In some instances SCA may be permitted to continue to operate freely while the functional check is being performed. In some instances SCA may be prevented from operating freely while the functional check is being performed.

If it is determined that environment of UDPD does not change then a certain level of confidence is achieved that SCA is still operating properly on UDPD . SCA may for example be permitted to continue operating freely if the environment of UDPD does not change. It should be appreciated that one or more checks may be initiated if desired despite the determination that the environment has not changed.

Environment check may be initiated at various times as desired e.g. at predetermined times and or time intervals while SCA is running and or not running upon occurrences of certain events e.g. when SCA is run when SCA is closed when the UDPD is powered etc. . In some instances additional checks such as functional check may be initiated independent of the environment check and may also be initiated at various times e.g. at predetermined times and or upon occurrences of certain events .

In some aspects of the present disclosure a host integrity check may be executed to determine if the integrity of SCA has been corrupted. A corrupted SCA compromises any assurance that SCA operates properly on UDPD . In some instances when a host integrity check is implemented a determination that SCA operates properly on UDPD requires at least a determination that SCA is not corrupted. If SCA is corrupted it may be determined that SCA does not operate properly on UDPD and SCA may be prevented from operating freely on UDPD . If SCA is determined to be uncorrupted then it may be determined that SCA operates properly and permitted to operate freely as long as any other required checks performed or to be performed are successfully passed as well.

UDPD typically hosts additional programs loaded on the device in addition to SCA . Furthermore programs may typically be added to and or deleted from UDPD at different times. Some of the programs on UDPD may not work together with SCA but may share resources with SCA referred to herein as nonrelated programs. SCA and one or more non related programs may for example access one or more persistent area of data. For instance both may track data time read and or write data to the same memory device etc. Moreover both SCA and the non related program s may access the same components e.g. wireless chip display audio components etc.

For some of the nonrelated programs SCA may not be affected or affected in ways that do not threaten the safety critical nature of SCA when coexisting on UDPD with SCA . However some programs may not be able to coexist on UDPD with SCA without compromising a safety critical aspect of SCA or operation thereof on UDPD . For example a nonrelated program that is running may prevent or significantly delay SCA from access to a safety critical function such as displaying a test result sounding an alarm accessing wireless communication etc. If these functions are safety critical features the coexistence of the two programs on UDPD may pose safety critical issues that potentially prevent SCA from operating properly on UDPD and SCA may be prevented from operating freely.

In some instances the SCA may have priority access to resources in certain circumstances. For example if an expected time for receipt of data from another device e.g. a medical device such as an analyte monitoring device drug administration device etc. is exceeded by a predetermined amount of time SCA may be give priority access to information outputs for the UDPD to activate an alarm for example. As part of this priority access an automatic save state may be initiated for example for other modules operating on the UDPD . Additionally SCA may be give priority access to communication ports on the UDPD e.g. to communicate the alarm to a third party such as parent friend physician etc. The SCA may for example have priority access to wireless communication devices memory processors and or any other shared resource that may be prioritized.

In some aspects of the present disclosure a coexistence check may be executed to determine if SCA is incompatible with non related programs on UDPD . The term incompatible is used broadly herein to mean that SCA and other program s cannot coexist on UDPD without compromising the safety critical aspects of SCA or operation thereof on UDPD .

In some instances when a coexistence check is implemented a determination that SCA operates properly on UDPD requires at least a determination that SCA is not incompatible with any non related program. If SCA is incompatible with one or more nonrelated programs then SCA may be prevented from operating freely on UDPD . If SCA is not incompatible with any nonrelated programs then it may be determined that SCA operates properly and thus permitted to operate freely on UDPD as long as any other required checks performed or to be performed are successfully passed as well.

One or more programs may interoperate with SCA to provide functionality and capabilities to SCA referred to herein as related programs. In some aspects of the present disclosure an interoperability check may be executed to determine if SCA interoperates properly on UDPD with related programs. Interoperability problems may compromise any assurance that SCA is going to operate properly on UDPD . In some instances a determination that SCA operates properly on the UDPD requires at least a determination that SCA interoperates properly with related programs. If SCA does not interoperate properly with related programs then it may be determined that SCA does not operate properly and SCA may be prevented from operating freely on UDPD . If SCA is determined to interoperate properly then it may be determined that SCA operates properly on the UDPD and thus permitted to operate freely as long as any other required checks performed or to be performed are successfully passed as well.

Some UDPDs may be battery powered and not necessarily plugged into an AC power outlet. Thus the life of UDPD is volatile in the sense that UDPD could run out of power and shut down during operation of SCA . Battery power may be dependent upon a number of factors e.g. type and size of battery used the type and amount of activity performed by UDPD etc. Unexpected or early power loss could compromise the safety critical nature of a SCA .

In some aspects of the present disclosure a power management check may be executed to determine if the power capabilities of UDPD are sufficient to run SCA safely with a certain level of assurance that the UDPD will not abruptly shutdown. For instances the power capabilities may be determined and compared to a minimum threshold amount required to operate SCA safely with minimal risk of an abrupt shutdown. In some instances a determination that SCA operates properly requires at least that the UDPD have sufficient power capabilities to operate safely with minimal risk of shutdown. If UDPD has sufficient power capability then SCA may be determined to operate properly on UDPD and permitted to operate freely on UDPD as long as any other required checks performed or required to be performed are successfully passed as well. If UDPD does not have sufficient power capability then SCA may be prevented from operating freely.

In some embodiments a check may include one or more test routines to be initiated. illustrates a block diagram of a functional check comprising one or more test routines according to some aspects of the present disclosure. As shown functional check includes computational test routines timing test routines display test routines and communication test routines .

Computational test routines determine whether SCA is performing computations accurately on UDPD e.g. within predetermined parameters and requirements that represent a certain level of confidence that SCA is computing accurately on UDPD . The predetermined parameters and requirements may be defined for example by reference data also referred to herein as reference computational data to distinguish it from other data that may be within reference data .

Specific computations may vary depending on the specific safety critical features implemented within SCA . Computations may include for example various calculations measurements extrapolations etc. for a wide variety of applications such as medical applications and other SCAs. For example computations for analyte monitoring applications may include but are not limited to computing analyte e.g. glucose measurements calculating medicine dosages and or administration times e.g. insulin dosages from received glucose measurements executing various other therapy related algorithms e.g. trending calculations various alert determinations etc. and or other safety critical computations that are applicable to analyte monitoring.

In some instances execution of computational test routines may initiate specific computations to be performed by SCA using predetermined input data e.g. as defined by reference data referred to herein as reference computational input to distinguish it from other data that may be within reference data . Accordingly reference computational data include the expected or acceptable results for these computations using the reference computational input. The actual result of the computation and the reference computational data may be compared to determine if the computations are performed accurately on UDPD .

Reference computational input may simulate for example safety critical input data provided to SCA and UDPD while SCA is operating freely. For example when operating freely SCA and UDPD may be configured to receive data from one or more external devices e.g. analyte measurements such as glucose measurements from external analyte monitoring devices such as a glucose monitoring devices and then perform various computations on the received data. Computational test routines initiate such computations by SCA and UDPD using reference computational input which simulates such received data e.g. analyte measurements from an external device . The results of the computations may then be compared against the corresponding reference computational data to determine if SCA is computing accurately on UDPD .

If for example it is determined that SCA does not perform the computations accurately e.g. results of the computation do not match the reference computational data then computation test routines indicates that SCA is not functioning properly on UDPD which further indicates that SCA is not operating properly on UDPD . SCA may then be prevented from operating freely on UDPD .

In some instances a determination that SCA functions properly on UDPD requires at least a determination that SCA performs computations accurately e.g. a match between the result of the computation and the reference computational data . It should be appreciated that although a condition is required for SCA to function properly that does not necessary mean that SCA functions properly if that condition is met other conditions may also be required to be met. For example in some instances in order for SCA to function properly it may be required that SCA performs computations accurately e.g. results of the computation match the reference computational data as well as be required that SCA performs computations in a timely manner. Thus the occurrence of one condition alone does not necessarily mean SCA functions properly. If for example it is determined that SCA performs computations accurately e.g. results of the computation match the reference computational data then other checks and or test routines may be initiated or if no other checks and or test routines are required to be executed then SCA may be permitted to operate freely .

Timing test routines determine whether SCA performs activities e.g. computations communications etc. on UDPD in a timely manner e.g. within times falling within predetermined parameters and requirements that represent a certain level of confidence that SCA is performing the activities in a timely manner on UDPD . The predetermined parameters and requirements may be defined for example by reference data also referred to herein as reference timing data to distinguish it from other data that may be within reference data Activities may include any variety of activities implemented by SCA e.g. safety critical computations such as described above displaying of various results on a display of UDPD communications to external devices executing of checks and test routines any combination thereof etc.

For example timing test routines may determine the time it takes for SCA to perform computations initiated by computational test routines . In some instances for example time stamps or logs of particular events or duration of events may be recorded. For example various times associated with the execution of computational test routines may be logged or recorded e.g. the time when reference computational input is provided to SCA and the time when corresponding results are provided by SCA the difference of the two times representing the time it took SCA to perform the computation on UDPD . In some instances the additional time it takes to display the information is taken into account. It should be appreciated that a timer may also be implemented or any other suitable method of tracking time.

The timing results may then be compared against corresponding reference timing data to determine whether SCA is performing activities e.g. computations communications etc. on UDPD in a timely manner. Again it should also be appreciated that in some instances the performance of an activity in too short of a time period may be indicative of SCA not performing in a timely manner on the UDPD.

If for example it is determined that SCA does not perform activities in a timely manner e.g. the time to perform the activity does not match the reference timing data on UDPD then timing test routines indicates that SCA is not functioning properly on UDPD which further indicates that SCA is not operating properly on UDPD . SCA may then be prevented from operating freely on UDPD .

In some instances a determination that SCA functions properly on UDPD requires at least that SCA perform activities in a timely manner e.g. a match between the time to perform activities and the reference timing data . For example if it is determined that SCA performs activities in a timely manner e.g. the time to perform the activity matches the reference timing data on UDPD then other checks and or test routines may be initiated or if no other checks and or test routines are required to be performed then SCA may be permitted to operate freely .

Display test routines determine whether data for SCA is properly displayed on UDPD e.g. within predetermined parameters and requirements that represent a certain level of confidence that SCA is displaying data properly on UDPD . The predetermined parameters and requirements may be defined for example by reference data also referred to herein as reference display data to distinguish it from other data that may be within reference data . In some instances reference display data corresponds to an expected result of a computational test routine that is to be displayed on the display of UDPD .

Display test routines may for example initiate specific predetermined images defined by reference data referred to herein as reference display inputs to distinguish it from other data that may be within reference data to be displayed on a display of UDPD . Accordingly reference display data may include the expected output image corresponding to the reference display inputs. The actual image displayed and the reference display data may then be compared to determine if data is being displayed properly on UDPD e.g. to determine if the actual image displayed matches the reference display data .

It should be understood that the term images is used broadly herein to include any form of data to be displayed on the display e.g. pixel patterns image files e.g. JPEG TIFF GIF BMP etc. text numerals etc. In some instances a display pattern may be used. Furthermore in some instances display patterns may also be used to test various display diagnostics such as timing scan rates smear brightness contrast etc.

The actual image displayed on UDPD may be determined in any of a variety of ways. In some instances a screen capture may be taken. For example display test routines may include a print screen function call to initiate a screen capture for the image displayed on the display of UDPD . The actual image displayed on UDPD may then be compared to the reference display data to determine if data is being properly displayed on UDPD . It should be appreciated that the print screen function does not require the UDPD to be connected to a printer but rather illustrates that the display test routines may read the display which is normally a write only device.

It should also be appreciated that various comparison algorithms may be implemented to compare the actual image displayed on UDPD with the reference display data. For example in some instances comparison algorithm may convert the actual image displayed to a representative value or expression. In such case for example the reference display data may be an expected representative value or expression of the reference display inputs. Thus the two values or expression may be compared to determine if a match or non match occurs. In some instances the comparison algorithm may compare the images themselves in which case the reference display data would be equivalent to the reference display inputs. It should be appreciated that any variety of methods of comparing may be implemented.

In some instances the actual image displayed on UDPD may be determined by receiving user input that identifies the actual image displayed on the display of UDPD . The user may be prompted for example to confirm the accuracy of the display e.g. to enter the numeral text symbol or phrase that is displayed or to provide any other form of confirmation response to information displayed on the display etc. . In such instances for example user confirmation may function as the actual image displayed and thus compared to reference display data that indicates what is expected to be displayed. In this way it may be determined whether images are displayed on the UDPD properly.

For example a request for user verification may be initiated to determine whether data is accurately displayed on UDPD . For instance a verification inquiry may be conveyed visually audibly etc. to the user prompting the user to input what is displayed on the display of the UDPD e.g. an alphanumeric code numeric code symbols text phrases etc. . The actual image displayed on the display may be determined by initiating an image e.g. the code to be displayed on the display of UDPD and receiving user input identifying what is displayed. The actual image displayed identified by the user input may then be compared with reference display data to determine if the correct image is displayed.

Furthermore the level of assurance that the user input accurately identifies the actual image displayed may vary based on the type of verification inquiry implemented. For example a basic level of assurance can be achieved by having the user provide yes or no feedback. For example the verification inquiry may ask if the user sees a specific image e.g. Do you see a car on the display . It should be appreciate that the image may be any variety of pictures symbols words phrases numbers etc. The user may then respond to the inquiry by inputting the appropriate answer on the UDPD e.g. typing yes or no touching the yes or no button on the touch screen etc. . The user input identifying if the image is a car or not is received and compared with reference display data e.g. a response of yes indicating that the image is properly displayed on the display a response of no indicating that the image is not properly displayed on the display .

Another level of assurance can be achieved by using a verification inquiry that has the user respond to a multiple choice question. The greater the number of answer choices available reduces the chance of the user guessing and providing a false positive. For example the verification inquiry may ask Do you see a car tree or the number on the display The user may then respond to the verification inquiry by selecting or entering the appropriate answer. The user input identifying the actual image displayed on the display is then compared with reference display data that identifies what was expected to be displayed on the display.

Another level of assurance can be achieved by using a verification inquiry that has the user respond to an open question or command. For example verification inquiry may ask What do you see Enter the text code symbol etc. that you see on the display etc. The user may then respond to the verification inquiry by entering the appropriate answer e.g. by typing in what they see entering the code symbol etc. displayed etc. . The user input identifying the actual image displayed on the display is then compared with reference display data that identifies what was expected to be displayed on the display.

If for example it is determined that UDPD does not display reference display inputs properly e.g. the actual image displayed does not match the reference display data then display test routines indicates that SCA is not functioning properly on UDPD which further indicates that SCA is not operating properly on UDPD . SCA may then be prevented from operating freely on UDPD .

In some instances a determination that SCA functions properly on UDPD requires at least that UDPD displays reference display inputs properly. For example if it is determined that UDPD does display reference display inputs properly e.g. the actual image displayed matches the reference display data then other checks and or test routines may be executed as desired or if no other checks and or test routines are required to be executed then SCA may be permitted to operate freely .

In some embodiments SCA and UDPD may be configured to communicate with an external device via a communication link e.g. a wired or wireless communication link . Communication test routines may be initiated to determine whether SCA communicates properly on UDPD with the external device. For instance communication test routines may determine whether SCA may properly establish a communication link between UDPD and the external device whether SCA may communicate e.g. send and or receive data accurately etc. The communications may also be required to be performed in a timely manner over the communication link for SCA to be communicating properly with an external device via a communication link with UDPD. The communication test routines may apply to unidirectional and or bidirectional testing.

SCA may communicate with external devices for various purposes depending on the specific SCA implemented. Looking ahead to illustrates a block diagram of a UDPD communicating with various external devices via communication links according to some aspects of the present disclosure.

As shown in system comprises UDPD communicating with an analyte monitoring device via communication link data processing device via communication link and medication delivery device via communication link . UDPD includes communication module which forms communication links with communication modules of external devices respectively. Communication module and communication modules may include for example appropriate transmitters receivers and or transceivers. It should be appreciated that communication links may be implemented with wired e.g. USB Ethernet or any other suitable wired technology or wireless technologies e.g. Bluetooth infrared radio frequency identification RFID or any other suitable wireless technology . While communication module is represented by one block it should be appreciated that communication module may comprise one or more communication modules of one or more communication technologies. For example communication module may include a Bluetooth module to communicate with one external device over Bluetooth and another infrared module to communicate with another external device over infrared. It should also be appreciated that UDPD may be configured to communicate with one or more of the devices shown or with another external device not shown.

UDPD further includes processor which executes various sets of instructions for SCA and test harness and further controls the operation of communication module . In some embodiments UDPD is a mobile phone such as an iPhone or Blackberry with SCA and test harness installed thereon. While a mobile phone is used to describe this particular embodiment it should be appreciated that any UDPD may apply.

Analyte monitoring device may be for example a glucose monitoring device such as a glucose meter. In some instances analyte monitoring device may be a continuous glucose monitoring CGM device and or glucose on demand GoD device. For example a CGM device and or GoD device may comprise an implanted sensor that allows glucose measurement data to be taken from a patient and then transmitted to UDPD via a wireless communication such as Bluetooth for use by SCA . Additional information for implanted sensors may be found in U.S. patent application Ser. No.12 807 278 entitled Compact On Body Physiological Monitoring Devices And Methods Thereof which is assigned to the assignee of the present application Abbott Diabetes Care Inc. and the entirety of which is incorporated herein by reference for all purposes.

Medication delivery device may be for example an insulin pump used to deliver insulin dosages based on received dosage calculation from SCA on UDPD . UDPD may receive glucose measurements from device for example and calculate the recommended insulin dosages based on the glucose measurements and then transmit the recommended dosages to medication delivery device .

Data processing device may be for example any type of computer device such as personal computers e.g. desktop notebook etc. mobile phones e.g. iPhone Blackberry etc. personal digital assistants PDAs etc. UDPD may communicate with data processing device for various purposes e.g. transmitting and or receiving test results logging data using network capabilities of data processing device etc.

If for example it is determined that SCA does not communicate properly on UDPD with the external device then communication test routines indicate that SCA does not function properly on UDPD which further indicates that SCA does not operate properly on UDPD . SCA may then be prevented from operating freely on UDPD .

In some instances a determination that SCA functions properly on UDPD requires that SCA communicates properly on UDPD with the external device. For example if it is determined that SCA communicates properly on UDPD with the external device then other checks and or test routines may be initiated as required or if no other checks are required to be executed then SCA may be permitted to operate freely .

In some embodiments test routines may include one or more subroutines to be initiated. The terms subroutines and test routines are used herein to simply distinguish hierarchy between the two in order to facilitate understanding of the concepts presented herein. illustrates a block diagram of a communication test routine comprising one or more subroutines according to some aspects of the present disclosure. As shown communication test routines include communication setup subroutines and communication verification subroutines .

Setup subroutines are initiated to determine whether SCA may properly establish a communication link between UDPD and an external device. Execution of setup subroutines may initiate SCA to establish a communication link between UDPD and an external device. For example SCA may attempt to establish a communication link between UDPD and an analyte monitoring device and or medication delivery device. For example the SCA on the UDPD may communicate with an insulin pump to provide dosage data for example. It should be appreciated that any variety of methods may be implemented to determine if the communication link is established properly e.g. using a handshake process by detecting a beacon signal from the external device etc. .

If for example it is determined that SCA may not properly establish a communication link between UDPD and an external device then communication setup subroutines indicates that SCA does not communicate properly between UDPD and the external device which indicates that SCA does not function properly on UDPD which further indicates that SCA does not operate properly on UDPD . SCA may then be prevented from operating freely on UDPD .

In some instances a determination that SCA communicates properly on UDPD requires a determination that SCA may properly establish a communication link between UDPD and the external device. For example if it is determined that SCA may properly establish a communication link between UDPD and an external device then other checks and or test routines and or subroutines may be initiated as required or if no other checks and or test routines and or subroutines are required to be executed then SCA may be permitted to operate freely .

Verification subroutines are executed to determine whether SCA communicates e.g. send and or receive data accurately over the communication link between UDPD and the external device e.g. within predetermined parameters and requirements that represent a certain level of confidence that SCA is communicating accurately between UDPD and the external device. The predetermined parameters and requirements may be defined by reference data also referred to herein as reference communication data to distinguish it from other data that may be within reference data .

In some instances execution of verification subroutines may initiate specific communications to be performed between UDPD and the external device using reference data provided by the verification subroutines referred to herein as reference communication inputs to distinguish it from other data that may be within reference data . Reference communication inputs may be any variety of data e.g. a test signal a request for data etc. In some instances execution of verification subroutines may initiate SCA to send out data to the external device to be echoed back. The echoed data received may then be compared to the data sent out to determine if the data was sent and returned without any data compromised or corrupted. For example if SCA is a glucose monitoring application that is designed to wireless communicate with an insulin pump execution of the verifications subroutines may initiate data to be sent to the insulin pump to be echoed back. The received echoed data may then be compared to the data transmitted. As another example in some instances execution of verification subroutines may initiate SCA to request data from the external device. For example if SCA is a glucose monitoring application that is designed to communicate via Bluetooth with a continuous glucose monitoring device then execution of the verification subroutines may initiate SCA to request data from the continuous glucose monitoring device over the Bluetooth link.

Accordingly reference communication data may include expected or acceptable results for the communications initiated using the reference communication inputs e.g. test signal request for data etc. . The reference communication data may include for example the expected test signal e.g. expected echoed signal expected confirmation signals in response to transmitted test signals expected data in response to requests for data expected values expected type of data e.g. text numerals picture movie file etc. expected communication protocol used any combination thereof etc.

The actual results of the communications e.g. the test signal received the response to the test signal the confirmation signal received the data received in response to a request for data the expected value the type of data received the communication protocol used any combination thereof etc. is compared with the reference communication data to determine if they match or do not match. Verification subroutines may then determine whether SCA communicates accurately over the communication link between UDPD and the external device

If for example it is determined that SCA does not communicate accurately over the communication link between UDPD and the external device then verification subroutines indicates that SCA does not communicate properly between UDPD and the external device which indicates that SCA does not function properly on UDPD which further indicates that SCA does not operate properly on UDPD . SCA may then be prevented from operating freely on UDPD .

In some instances a determination that SCA communicates properly on UDPD requires a determination that SCA communicates accurately over the communication link between UDPD and the external device. For example if it is determined that SCA does communicate accurately over the communication link between UDPD and the external device then other checks and or test routines and or subroutines may be initiated as required or if no other checks and or test routines and or subroutines are required to be executed then SCA may be permitted to operate freely .

Timing test routines may be executed to determine whether SCA performs communications on UDPD with an external device in a timely manner e.g. within times falling within reference timing data that represent a certain level of confidence that SCA is communicating in a timely manner on UDPD with an external device.

For example timing test routines may determine the time it takes for SCA to properly establish a communication link between UDPD and an external device initiated by setup subroutines and or to perform communications initiated by verification subroutines . Again various times associated with the communication test routines may be logged or recorded to determine whether SCA is performing communications in a timely manner. In some instances timing information may be included with the reference communication inputs e.g. with the test signal data request etc. sent to the external device and or timing information provided in the data sent by the external device. In this way the timing of each one way communication may be determined. Furthermore it should be appreciated that communication test routines may include a timing subroutine that fulfills the same functions as the timing test routines with respect to communication times.

If for example it is determined that SCA does not perform the communication and or does not establish a communication link in a timely manner e.g. the time does not match the reference timing data on UDPD then timing test routines indicates that SCA does not communicate properly on UDPD which indicates that SCA does not function properly on UDPD which further indicates that SCA is not operating properly on UDPD . SCA may then be prevented from operating freely on UDPD .

In some instances a determination that SCA communicates properly on UDPD requires that SCA performs the communication and or establishes a communication link in a timely manner e.g. the times match the reference timing data . For example if it is determined that SCA performs the communication and or establishes a communication link in a timely manner on UDPD then other checks and or test routines may be initiated if required or if no other checks and or test routines are required to be executed then SCA may be permitted to operate freely .

In some aspects of the present disclosure a loopback hardware module may be implemented to perform various loopback tests on the UDPD. The loopback testing may determine for example if other components such as communication ports on the UDPD are operating properly. For instance the loopback module may be a physical hardware device that couples to a communication port on the UDPD and receives a test communication from the UDPD and returns the test signal. It should be appreciated communication port is used broadly herein to encompass any type of communication receptacle or plug using any type of communication technology e.g. any of the USB family including Mini USB and Micro USB Firewire Ethernet etc.

For example test harness may comprise a test routine that may be executed to send a test signal to a communication port of the UDPD that has the loopback module attached. The loopback module receives the test signal and echoes it back via the same communication port. In some instances the loopback module may be coupled to more than one communication port and receives the test signal in a first communication port and sends it back via one or more other ports. The loopback module may include for example switches to route the test signal accordingly. The echoed signal received may then be compared against the original test signal to determine if the communication hardware is operating properly on the UDPD. In some instances the timing of the test signal may also be tested to see if the test signal is transmitted and returned in the expected time frame. It should be appreciated that in some instances the test routine for such loopback testing may be implemented as part of the communication and or timing test routine. It should also be appreciated that in some instances the loopback back module may comprise hardware and or software implemented within the UDPD.

At block the image of the installed SCA component is compared to reference installation data corresponding to data that is expected for a proper installation. For example a filename CRC value and or version number associated with the installed SCA component may be compared with corresponding expected filename CRC value and or version number in the reference installation data.

Based on the results of the comparison a determination is made as to whether the installed SCA component was installed properly or not as represented by block . For example a determination may be made as to whether the image of each installed SCA component matches or does not match the reference installation data.

If for example the image of the installed SCA component does not match the reference installation data then it is determined that SCA failed to install properly on UDPD as represented by block . SCA may then be prevented from operating freely on UDPD . Again in some instances this may comprise disabling the SCA so that it is unable to be run on the UDPD. In some instances this may comprise permitting the SCA to operate so that the user may still use non safety critical features of the SCA but unable to use the safety critical features. In some instances the failure to install properly is reported e.g. logged and or communicated to the user of the UDPD etc. . In some instances a report of the failure may be sent to a remote device e.g. via the internet.

If for example the image of the installed SCA component matches the reference installation data then it is determined that the installed SCA component installed properly on UDPD and a determination is made as to whether there are any additional images of installed SCA components that require checking as represented by block .

If there are additional images of installed SCA components that require checking the next installed SCA component is identified and the process repeated for the next installed SCA component as represented by the arrow returning to block . This process is repeated until all installed SCA components that are required to be checked have been identified and determined if installed properly.

When no additional installed SCA components are remaining and all installed SCA components are determined to be installed properly the installation checks indicates that SCA was installed properly on UDPD as represented by block . In some instances the proper installation of SCA is reported e.g. logged and or communicated to the user of UDPD etc. . In some instances a report of the proper installation may be sent to a remote device e.g. via the internet.

Again specific computations may vary depending on the specific safety critical features implemented within SCA . Computations may include for example various calculations measurements extrapolations etc. for a wide variety of applications such as medical applications and other SCAs. For example computations for analyte monitoring applications may include but are not limited to computing analyte e.g. glucose measurements calculating medicine dosages and or administration times e.g. insulin dosages from received glucose measurements executing various other therapy related algorithms e.g. trending calculations various alert determinations etc. and or other safety critical computations that are applicable to the specific SCA implemented.

At block a determination is made as to whether the results of the computations match or do not match the reference computational data. If the results do not fall within the reference computational data then it is determined that SCA does not perform the computations accurately. This indicates that SCA is not functioning properly on UDPD and thus not operating properly on UDPD . SCA may then be prevented from operating freely on UDPD as represented by block . If the results do fall within the reference computational data then SCA performs the computations accurately on UDPD and one or more timing test routines are run as represented by block .

At block the times it takes to perform various activities e.g. computations of block on UDPD are determined and compared with reference timing data. For example timing test routines may determine the time it takes for SCA to perform computations initiated by computational test routines . In some instances for example time stamps or logs of particular events or duration of events may be recorded. For example various times associated with the execution of computational test routines may be logged or recorded e.g. the time when reference computational input is provided to SCA and the time when corresponding results are provided by SCA the difference of the two times representing the time it took SCA to perform the computation on UDPD . In some instances new activities are performed and the beginning and ending times are recorded such that the duration of the activity is determined. It should be appreciated that a timer may also be implemented or any other suitable method of tracking time.

At block a determination is made as to whether the times to perform the activities e.g. computations of block fall within the reference timing data. If for example the times do not fall within the reference timing data then SCA does not perform the computations in a timely manner on UDPD indicating that SCA is not functioning properly on UDPD and thus not operating properly on UDPD . SCA may then be prevented from operating freely on UDPD as represented by block . If for example the times to perform the activities e.g. computations of block do fall within the reference timing data then SCA performs the computations in a timely manner on UDPD and one or more display test routines may be run as represented by block .

At block specific predetermined images defined by reference display inputs are initiated to be displayed on the display of UDPD . The actual image displayed is identified as represented by block . For example a screen capture may be initiated to identify the actual image displayed. Any form of data may be displayed on the display as desired e.g. pixel patterns image files jpeg etc. text numerals etc. . In some instances the reference display inputs corresponds to an expected result of a computation performed at block that is to be displayed on the display. In some instances a display pattern may be used. The actual image displayed is then compared to reference display data to determine if the actual images displayed on UDPD matches or does not match the reference display data as represented by block .

At optional block user verification or interaction is also required. The user may be prompted for example to confirm that UDPD displays data properly. For example the user may be prompted to enter the numeral text or phrase that is displayed or to provide any other form of confirmation response to the image shown on the display etc. Based on whether a valid user confirmation is received it is determined if the reference display inputs is properly displayed on UDPD .

At block a determination is made as to whether the actual image displayed on UDPD is displayed properly e.g. within the predetermined parameters and requirements defined by the reference display data . For example the reference display data may include data representing the expected or correct image of the screen capture. The actual image displayed is compared to the reference display data to determine whether the actual image displayed matches or does not match the reference display data. Furthermore the reference display data may include the expected or valid user confirmation that is to be received for user confirmation that the UDPD displays data properly.

If for example the actual image displayed e.g. determined either from the screenshot or from user confirmation does not match the reference display data then SCA is not functioning properly on UDPD which indicates that SCA is not operating properly on UDPD . The SCA is then prevented from operating freely on the UDPD as represented by block . If for example the actual image displayed and user confirmation matches the reference display data then SCA is functioning properly on UDPD as represented by block .

At block of functional check one or more computational test routines are executed. Reference computational inputs are provided to SCA and specific safety critical computations are initiated by SCA on UDPD using the reference computational input. The results of the computations are compared with reference computational data to determine if the results fall within predetermined parameters and requirements defined by reference computational data.

At block a determination is made as to whether the results of the computations match or do not match the reference computational data. If for example the results do not fall within the reference computational data then it is determined that SCA does not perform the computations accurately indicating that SCA is not functioning properly on UDPD and thus not operating properly on UDPD . SCA may then be prevented from operating freely on UDPD as represented by block . If for example the results do fall within the reference computational data then SCA performs the computations accurately on UDPD and one or more timing test routines are run as represented by block .

At block the times it takes to perform various activities e.g. computations of block on UDPD are determined and compared with reference timing data. In some instances the times to perform the computations of block are determined. For example the beginning and ending times of the computations may have been recorded e.g. when the reference computational input was provided and when a result was determined. In some instances new activities are performed and the beginning and ending times are recorded such that the duration of the activity is determined.

At block a determination is made as to whether the times to perform the activities e.g. computations of block fall within the reference timing data. If for example the times do not fall within the reference timing data then SCA does not perform the computations in a timely manner on UDPD indicating that SCA is not functioning properly on UDPD and thus not operating properly on UDPD . SCA may then be prevented from operating freely on UDPD as represented by block . If for example the times to perform the activities e.g. computations of block do fall within the reference timing data then SCA performs the computations in a timely manner on UDPD and one or more communication test routines may be run as represented by block .

At block communication test routines are initiated to determine whether SCA communicates properly between UDPD and an external device. At block setup subroutines are initiated to determine whether SCA may properly establish a communication link between UDPD and an external device. Setup subroutines initiate SCA to establish a communication link between UDPD and an external device.

At block a determination is made as to whether SCA properly established a communication link between UDPD and an external device. If for example it is determined that SCA may not properly establish a communication link between UDPD and an external device then communication setup subroutines indicate that SCA does not communicate properly between UDPD and the external device which further indicates that SCA does not function properly on UDPD which further indicates that SCA does not operate properly on UDPD . SCA may then be prevented from operating freely on UDPD as represented by block .

If for example it is determined that SCA may properly establish a communication link between UDPD and an external device then verification subroutines are run as represented by block . Verification subroutines determine whether SCA communicates e.g. send and or receive data accurately over the communication link between UDPD and the external device e.g. within predetermined parameters and requirements defined by reference communication data.

Specific SCA communications are initiated between UDPD and the external device using reference communication inputs e.g. test signal echo signal request for data etc. . The actual results of the communications e.g. echo signal received response to a test signal the confirmation signal received the data received in response to a request for data the expected value the type of data received the communication protocol used any combination thereof etc. is compared with the reference communication data. In some instances the reference communication data may be the same as the reference communication inputs e.g. when an echo signal is implemented.

A determination is made as to whether the actual results of the communication match or do not match the reference communication data as represented by block . If for example it is determined that the actual results of the communication do not match the reference communication data then SCA does not communicate accurately over the communication link between UDPD and the external device which indicates that SCA does not communicate properly between UDPD and the external device which further indicates that SCA does not function properly on UDPD which further indicates that SCA does not operate properly on UDPD . SCA may then be prevented from operating freely on UDPD as represented by block .

At block optional timing test routines may also be run to determine whether SCA performs communications on UDPD with an external device in a timely manner e.g. within times falling within reference timing data that represent a certain level of confidence that SCA is communicating in a timely manner on UDPD with an external device. For example the time it takes for SCA to properly establish a communication link between UDPD and an external device in block may be determined and or the time it takes to perform the communications initiated in block may be determined.

At block a determination is made as to whether SCA performs the communication in a timely manner e.g. whether the time it takes to perform the communications initiated in block matches the reference timing data . If for example it is determined that SCA does not perform the communication in a timely manner e.g. the time does not match the reference timing data on UDPD then a determination is made that the SCA does not communicate properly on UDPD which indicates that SCA does not function properly on UDPD which further indicates that SCA is not operating properly on UDPD . SCA may then be prevented from operating freely on UDPD as represented by block .

If for example it is determined that the actual results of the communication matches the reference communication data then SCA communicates accurately over the communication link between UDPD and the external device. Further if the time to perform the communication matches the reference timing data then it is determined that SCA performs the communication in a timely manner on UDPD .

At block display test routines are run. Upon execution of display test routines specific predetermined images defined by reference display inputs are initiated to be displayed on the display of UDPD . The actual image displayed is identified as represented by block . For example a screen capture may be initiated to identify the actual image displayed. In some instances the reference display inputs corresponds to an expected result of a computation performed at block that is to be displayed on the display. The actual image displayed is then compared to reference display data to determine if the actual images displayed on UDPD matches or does not match the reference display data as represented by block .

At optional block user verification or interaction is also required. The user may be prompted for example to confirm that UDPD displays data properly. For example the user may be prompted to enter the numeral text or phrase that is displayed or to provide any other form of confirmation response to the image shown on the display etc. Based on whether a valid user confirmation is received it is determined if the reference display inputs is properly displayed on UDPD . In some instances the display testing may involve the remote device. For example the user could be asked to confirm the existence of or reenter displayed information on the remote display to confirm the overall functionality. A code may be displayed on the display of the remote device for example and the user prompted to reenter the code on the remote device.

At block a determination is made as to whether the actual image displayed on UDPD is within the predetermined parameters and requirements defined by the reference display data. If for example the actual image displayed and or user confirmation does not match the reference display data then SCA is not functioning properly on UDPD which indicates that SCA is not operating properly on UDPD . The SCA is then prevented from operating freely on the UDPD as represented by block . If for example the actual image displayed and user confirmation matches the reference display data then SCA is determined to be functioning properly on UDPD as represented by block .

It should be appreciated that in some embodiments the above checks may be executed at various times and in various combinations to achieve different levels of confidence that the SCA is operating properly on the UDPD. illustrate example flow diagrams for hosting a SCA on a UDPD according to some aspects of the present disclosure. The discussion above for the various checks test routines and subroutines are also applicable to .

At block an installation check is initiated. For example in some the installation test identifies and compares images of installed SCA components with reference installation data. It should be appreciated that in some instances the installation check also determines whether the test harness was also installed properly on UDPD .

Based on the results of the installation test performed e.g. whether images of installed SCA components matches or does not match reference installation data a determination is made as to whether SCA installed properly as represented by block . If for example it is determined that SCA did not install properly on UDPD e.g. whether images of installed SCA components matches or does not match reference installation data the failure to install properly is reported and the SCA prevented from operating freely e.g. disabling SCA so that it is unable to run on UDPD as represented by block . For example the installation failure may be logged and or reported to the user. In some instances test harness may send a report of the failure to a remote device e.g. via the internet. Again in other instances SCA may be permitted to operate so that the user may still use functions of SCA that are not safety critical.

If for example it is determined at block that SCA installed properly on UDPD a functional test is run to determine whether SCA is functioning properly on UDPD as represented by block . As described earlier functional test may include one or more test routines which may be executed e.g. the computational test routines timing test routines display test routines and or communication test routines.

At block a determination is made as to whether SCA functions properly on UDPD . For example functioning properly may require a determination that SCA is computing accurately on UDPD that SCA is performing activities e.g. computations in a timely manner on UDPD that data for SCA is displayed properly on UDPD and or that SCA may communicate properly e.g. may establish a function communication link and send receive test data in a timely manner with an external device via a communication link between the external device and UDPD .

If for example it is determined that SCA does not function properly on UDPD then it is determined that SCA is not operating properly on UDPD and SCA may then be prevented from operating freely on UDPD as represented by block .

If for example SCA functions properly then it is determined that SCA is operating properly on UDPD and an environment check is executed to determine and save the current environment of UDPD that is associated with the determination that SCA is operating properly as represented by block . SCA may then be allowed to operate freely on UDPD . Furthermore it should be appreciated that the checks may be initiated in different orders in other implementations.

At block of process an environment check is initiated to determine if the current environment of UDPD has changed since the last determination that SCA is operating properly and permitted to operate freely on UDPD . Environment check may be initiated at various times e.g. at predetermined times intervals e.g. predetermined time intervals after SCA is permitted to operate freely on the UDPD and or upon occurrences of certain events such as when SCA is run after SCA is closed etc.

Environment check identifies the current environment e.g. any currently installed software programs applications drivers hardware components etc. At block the current environment is then compared to a previously stored current environment that was associated with the last determination that SCA is operating properly on UDPD . For example the comparison may determine if the current environment matches or does not match the previously stored current environment. It should be appreciated that not only newly installed programs may be accounted for but also removed programs and or modifications to programs e.g. new revision updates software fixes firmware updates etc. . In some embodiments only the software environment may be taken into consideration. In other embodiments the hardware environment may also be taken into consideration.

Based on the comparison in block a determination is made as to whether the environment of UDPD has been changed since the last determination that SCA is operating properly on UDPD and permitted to operate freely on UDPD as represented by block .

If for example it is determined that the environment of UDPD has not changed then a certain level of confidence is achieved that SCA is still operating properly on UDPD . SCA may for example be permitted to continue operating freely as represented by block . It is contemplated that in some instances if the environment has not changed functional checks may still be initiated in full or an abbreviated set to provide greater assurance that SCA is operating properly.

If for example it is determined that the environment of UDPD has changed then SCA may potentially operate improperly on UDPD and a functional check is initiated as represented by block . For example computational test routines timing test routines display test routines and or communication test routines may be run to determine if SCA is functioning properly on UDPD . In some instances SCA is permitted to continue to operate freely while the functional check is performed. In some instances SCA is prevented from operating freely while the functional check is performed. In other implementations an installation check may also be initiated if the environment has changed.

At block a determination is made as to whether SCA functions properly on UDPD . For example functioning properly may require a determination that SCA is computing accurately on UDPD that SCA is performing activities e.g. computations in a timely manner on UDPD that data for SCA is displayed properly on UDPD and or that SCA may communicate properly e.g. may establish a function communication link and communicate data accurately and in a timely manner with an external device via a communication link between the external device and UDPD .

If for example it is determined that SCA does not function properly on UDPD then it is determined that SCA is not operating properly on UDPD and SCA may then be prevented from operating freely on UDPD as represented by block . If for example it is determined that SCA functions properly then the current environment of UDPD is saved as represented by block . SCA is determined that SCA is operating properly on UDPD and SCA is permitted to operate freely on UDPD as represented by block . The process may be repeated again at another time and or occurrence of an event.

In some aspects of the present disclosure UDPD may include a host integrity check that is executed to determine if the integrity of SCA has been corrupted because a corrupted SCA compromises any assurance that SCA operates properly on UDPD . In some instances a determination that SCA operates properly on UDPD requires a determination that SCA is not corrupted. If SCA is corrupted it may be determined that SCA does not operate properly on UDPD and SCA may be prevented from operating freely on UDPD . If SCA is determined to be uncorrupted it may be determined that SCA operates properly and permitted to operate freely as long as any other required checks performed or to be performed are successfully passed as well.

In some instances the host integrity check is provided and may determine whether the codetext of SCA is intact and uncorrupted. illustrates a flow diagram for a host integrity check according to some aspects of the present disclosure. At block of check a checksum for SCA codetext is calculated. In addition to SCA codetext the host integrity check may also check the integrity of other nonvolatile and critical data associated with SCA e.g. data that SCA require or uses such as reference data for various checks. The calculated checksum is then compared against a reference checksum as represented by block . The reference checksum is a checksum for SCA codetext and or additional data associated with SCA in an uncorrupted state e.g. a checksum calculated previously during manufacturing and testing and stored as a reference checksum for later integrity checks . In some instances the reference checksum may be stored as part of reference data . At block it is determined based on the comparison whether SCA codetext is corrupted. For example if the calculated checksum matches the reference checksum then it is determined that SCA is uncorrupted. On the other hand if the calculated checksum does not match the reference checksum then it is determined that SCA is corrupted. If the calculated checksum does not match the reference checksum then SCA is determined to be corrupted and SCA is prevented from operating freely as represented by block . If SCA is determined to be uncorrupted then SCA is permitted to operate freely as long as any other required checks performed or to be performed are successfully passed.

In some embodiments the host integrity check may be implemented as a test module that resides on UDPD in non volatile memory. The host integrity test may be stored on UDPD through any variety of methods. For example the host integrity check may be provided to UDPD via the internet from CD ROM memory stick other external memory device etc. In some instances the host integrity check may be provided on an installation device e.g. installation CD ROM that includes the test harness and or SCA . In some instances the host integrity check may be included as part of the test harness and stored on UDPD when the test harness is loaded on UDPD .

The host integrity test may be programmed to initiate at various times. In some instances the host integrity test may be initiated at non runtimes. For example the host integrity check may be programmed to initiate every time before SCA is run periodically after a predetermined amount of time whenever the software environment has changed etc.

In some embodiments the host integrity check may be initiated as part of an installation process. For example in in some instances the host integrity check may be initiated before after or simultaneously with functional check in process . Therefore in addition to expected results for the installation check and functional checks block would also require expected results for the host integrity check e.g. that SCA codetext is uncorrupted . If the host integrity check results in unexpected results e.g. SCA codetext is corrupted then SCA is prevented from operating freely. Thus process would determine if SCA installed correctly if the integrity of SCA maintained and if SCA functions properly. It should be understood that additional checks may also be included e.g. the coexistence check interoperability test power management test etc.

In some embodiments the host integrity check may be programmed to initiate when the software environment has changed. For example in in some instances the host integrity check may be initiated before after or simultaneously with functional check in process . Therefore in addition to expected results for the functional check block would also require expected results for the host integrity check e.g. that SCA codetext is uncorrupted . If the host integrity check results in unexpected results e.g. SCA codetext is corrupted then SCA is prevented from operating freely. Thus process would determine if the environment changed if the integrity of SCA is still maintained and if SCA still functions properly. It should be understood that additional checks may also be included e.g. the coexistence check interoperability test power management test etc.

In some aspects of the present disclosure a coexistence check may be initiated to determine if SCA is incompatible with other programs on UDPD as relates to the safety critical nature of SCA . In some instances a determination that SCA operates properly on UDPD requires at least a determination that SCA is not incompatible with non related programs. If SCA is incompatible with one or more nonrelated programs then SCA may be prevented from operating freely on UDPD . If SCA is not incompatible with any nonrelated programs then it may be determined that SCA operates properly and thus permitted to operate freely on UDPD as long as any other required checks performed or to be performed are successfully passed as well.

It should also be noted that various programs may be in different states on UDPD e.g. not running in a passive state in an active state etc. To run a program for example UDPD may load the program into volatile memory e.g. RAM and then execute the program. In some instances when a program is invoked the program is run on UDPD in an active state. In other instances a program may be brought up partially but not actively running. The program may remain in this passive state and wait for an invocation to bring the program into an active state. For example some programs need to be alive even though they are not actively running e.g. to update time periodically monitor devices to monitor for communications etc. Safety critical incompatibilities may exist between SCA and non related programs when either or both of the programs are in either an active or passive state.

The coexistence check identifies whether any safety critical incompatibilities exist between SCA and another application in their active and or passive states. If an incompatibility exists the appropriate action may be taken e.g. SCA may be prevented from operating freely on UDPD . In some instances the user may be alerted to the incompatibility and requested not to use the incompatible program or to disable or uninstall the incompatible program.

In some instances the SCA may share resources with other programs without creating a conflict. For instance the SCA may have priority access to resources in certain circumstances and thus take priority over other programs using the same resources. For example SCA may be given priority access to communication ports on the UDPD e.g. to communicate an alarm to another device via the communication port. SCA may for example have priority access to a wireless communication device to memory access to processor access and or access to any other shared resource that may be prioritized. It should be appreciated that priority access for the SCA may also comprise priority access for communications to or for the SCA . For example a medical device e.g. analyte monitoring device drug administration device etc. may send a query from the medical device to the UDPD or vice versa which when operating properly interrupts processes currently running on the UDPD in order to in order to create a transmission between the two devices e.g. verifying readiness to receive data waiting for a response communicating the data if the response is received and activating an alarm if the response is not received . The coexistence check may initiate various conflict scenarios to test the sharing of resources and determine if the SCA is properly accessing the resources with priority over other programs trying to access the same resource.

It should be understood that the each program may be brought up to different states e.g. passive or active to determine if any safety critical issues are posed in any of the various combinations of states. Further it should be understood that in some instances a conflict scenario may include more than one nonrelated program and SCA accessing the same shared resource.

At block it is determined if SCA and any nonrelated programs are incompatible. For example if a nonrelated program is made to access the shared resource while SCA is already accessing the resource then it may be determined if the attempted access by the nonrelated program sufficiently disrupts the access by SCA to compromise the safety critical nature of SCA . Or for example if SCA is made to access the shared resource while the nonrelated program is already accessing the resource then it may be determined if SCA can access the resource and whether it can do so sufficiently so as to not compromise the safety critical nature of SCA . If SCA cannot share resources with the nonrelated program without compromising the safety critical aspects of SCA then SCA and nonrelated program are determined to be incompatible and SCA prevented from operating freely as represented by block . For example if the conflict scenario prevents SCA from performing any safety critical function or significantly delays SCA from performing the safety critical function then the nonrelated application and SCA may be determined to be incompatible. It should be appreciated that in some instances reference data to test incompatibility may be used for such determinations.

SCA may be prevented from operating freely as described earlier for previous checks e.g. SCA disabled and prevented from running on UDPD SCA permitted to operate but without the use of the safety critical features or capabilities etc. . In addition in some instances SCA may be permitted to operate without the use of the resource and or feature that is in conflict with the nonrelated program. For example if the shared resource in conflict is the Bluetooth receiver then SCA may be permitted to operate without the function of Bluetooth communication and or features requiring the Bluetooth communication. In some instances the user may be informed of the issue and or prompted to address the issue e.g. informed not to run the incompatible program prompted to uninstall or disable the incompatible nonrelated program before being permitted to use SCA etc.

If SCA can share resources with nonrelated programs without compromising the safety critical aspects of SCA then it is determined that SCA is not incompatible with nonrelated programs as represented by block . SCA may then be determined to operate properly on UDPD and permitted to operate freely on UDPD as long as any other required checks performed or to be performed are successfully passed as well.

The coexistence test may be programmed to initiate at various times e.g. runtimes and or non runtimes. For example the coexistence check may be programmed to initiate every time before SCA is run periodically after a predetermined amount of time whenever the software environment has changed etc.

In some embodiments the coexistence check may be initiated as part of an installation process. For example in a coexistence check may be initiated before after or simultaneously with functional check in process . Therefore in addition to expected results for the installation check and functional check block would also require expected results for the coexistence check e.g. that SCA is not incompatible with any nonrelated programs . If the coexistence check results in unexpected results e.g. SCA is incompatible with one or more nonrelated programs then SCA may be prevented from operating freely. Thus process would determine if SCA installed correctly if SCA is compatible with the nonrelated programs on UDPD and if SCA functions properly. It should be understood that additional checks may also be included e.g. the host integrity check interoperability test power management test etc.

In some embodiments the coexistence check may be programmed to initiate when the software environment has changed. For example in the coexistence check may be initiated before after or simultaneously with functional check in process . Therefore in addition to expected results for the functional check block would also require expected results for the coexistence check e.g. that SCA is not incompatible with other nonrelated programs . If the coexistence check results in unexpected results e.g. SCA is incompatible with a nonrelated program then SCA may be prevented from operating freely. Thus process would determine if the environment changed if SCA is compatible with the nonrelated programs on UDPD and if SCA still functions properly. It should be understood that additional checks may also be included e.g. the host integrity check interoperability test power management test etc.

In some embodiments a determination that SCA operates properly on the UDPD requires a determination that SCA interoperates properly with related programs. If SCA does not interoperate properly with other related programs then it may be determined that SCA does not operate properly and SCA may be prevented from operating freely on UDPD . If SCA is determined to interoperate properly then it may be determined that SCA operates properly on the UDPD and thus permitted to operate freely as long as any other required checks performed or to be performed are successfully passed as well.

For example one or more related programs and SCA are brought up and tested for proper interoperations. The testing may include for example verifying that SCA and programs communicate using the proper communication protocols that data is being communicated back and forth accurately and in a timely manner that SCA can properly access any features or capabilities associated with the related program etc.

For example SCA may be an application related to analyte monitoring and provide some data measurement and data management capabilities while an additional program may provide additional or more in depth data management capabilities. SCA may provide for the logging of measurements in memory on UDPD and work in conjunction with an application that displays the logged measurements in different graphical formats e.g. graphs charts etc. for instance. The interoperability test may cross check for example values and times in the log with the corresponding values in the graphical displays to determine if the data transfers accurately.

As another example SCA may be an application related to analyte monitoring and interoperate with software programs for a remote sensor device analyte meter pump provider e.g. insulin pump device etc. The testing may include for example verifying that SCA and related program communicate using the proper communication protocols that data is being communicated back and forth accurately and in a timely manner that SCA can properly access any features or capabilities associated with the related program etc. Reference data may be used for example as inputs to simulate specific runtime events and to verify results of the simulated events e.g. with specific reference data associated with the simulated event .

While the interoperability check has been described separate from the functional check e.g. communication test routine it is nonetheless contemplated that the interoperability check may work with or be implemented as part of the functionality test e.g. communication test routine in some instances to provide some assurance that SCA interoperates properly with external devices.

At block it is determined if SCA and related program interoperates properly. If it is determined that SCA and related program do not interoperate properly then SCA is prevented from operating freely as represented by block . SCA may be prevented from operating freely as described earlier e.g. SCA disabled and prevented from running on UDPD SCA permitted to operate but without the use of the safety critical features or capabilities etc. . In addition in some instances SCA may be permitted to operate without the use of the related program or its functionality e.g. if the related program is not critical or required for SCA to operate . For example if the related program is a program providing additional data management capabilities as described in the example above then SCA is permitted to operate but without the use of the related program or its functionality. In some instances the user may be informed of the issue and or prompted to address the issue e.g. informed not to use the related program or its functionality prompted to uninstall or disable the related program before being permitted to use SCA etc.

If it is determined that SCA and the related programs interoperate properly as represented by block then SCA is determined to operate properly on the UDPD and permitted to operate freely as long as any other required checks performed or required to be performed are successfully passed as well.

It should be understood that the each program may be brought up to different states e.g. passive or active to determine if any interoperability issues are posed in any of the various combinations of states. Further it should be understood that in some instances more than one related program may be tested with SCA during the interoperability test.

The interoperability check may be programmed to initiate at various times e.g. runtimes and or non runtimes. For example the interoperability check may be programmed to initiate every time before SCA is run periodically after a predetermined amount of time whenever the software environment has changed etc.

In some embodiments the interoperability check may be initiated as part of the installation process. For example in the interoperability check may be initiated before after or simultaneously with functional check in process . Therefore in addition to expected results for the installation check and functional check block would also require expected results for the interoperability check e.g. that SCA interoperates properly with related programs . If the interoperability check results in unexpected results e.g. SCA does not interoperate properly with related programs then SCA is prevented from operating freely. Thus process would determine if SCA installed correctly if SCA interoperates properly with related programs on UDPD and if SCA functions properly. It should be understood that additional checks may also be included e.g. the host integrity check coexistence check power management check etc.

In some embodiments the interoperability check may be programmed to initiate when the software environment has changed. For example in the interoperability check may be initiated before after or simultaneously with functional check in process . Therefore in addition to a expected results for the functional check block would also require expected results for the interoperability check e.g. that SCA interoperates properly with related programs . If the interoperability check results in unexpected results e.g. SCA does not interoperate properly with a related program then SCA is prevented from operating freely. Thus process would determine if the environment changed if SCA interoperates properly with related programs on UDPD and if SCA still functions properly. It should be understood that additional checks may also be included e.g. the host integrity check coexistence check power management check etc.

In some embodiments a power management check may be initiated to determine if the power capabilities of UDPD are sufficient to run SCA safely with a certain level of assurance that the UDPD will not abruptly shutdown. For instances the power capabilities may be determined from the remaining charge left on the battery the current real time power consumption rate e.g. taking into account any applications running features and capabilities activated etc. the time remaining until shutdown or hibernation etc. The remaining power life of UDPD may be determined in days hours minutes etc. until needing to be recharged. Moreover if a power hungry feature of SCA is used e.g. wireless capabilities etc. the remaining power life of UDPD may be reduced accordingly. The power capabilities may then be compared to a minimum threshold amount required to operate SCA safely with minimal risk of an abrupt shutdown.

In some instances the minimum threshold amount required to operate SCA safely with minimal risk of abrupt shutdown may depend on a predetermined amount of time e.g. determined during manufacturing and testing and stored as reference data. For example testing may determine that SCA requires a minimum threshold of time to operate and safely perform safety critical functions. Or as another example testing may determine that SCA requires a certain amount of current per day per hour etc. when actively running. It is also contemplated that the different thresholds may exist for different features or functions e.g. using the insulin calculator communicating wirelessly with an insulin pump etc. .

In some instances the minimum threshold amount required to operate SCA safely with minimal risk of abrupt shutdown may depend on historical usage of SCA . A user s previous history of usage may be used to determine an estimated minimum threshold requirement. For example a user s previous usage may be tracked and used to determine an average usage and amount of power consumed in a period of time e.g. days hours minutes etc. .

In some instances the threshold power consumption required by SCA application may be estimated by tracking the usage history of the user. The usage history may account for specific events and the amount of power required for those events. For example usage history may account for what features are accessed how many times each feature is accessed duration of use etc. Example events for a SCA associated with analyte monitoring such as glucose monitoring may include but are not limited to strip measurements insulin delivery measurements insulin delivery continuous glucose measurement readings calibrations etc. For instance it may be determined that a user s average usage includes taking ten daily strip measurements calculating and administering insulin five times a day five Bluetooth communications per day etc. A corresponding power consumption may then be determined. For example it may be determined that SCA requires a certain amount of milliamps per day per hour per week etc. when SCA is actively running. This power consumption determination may then be compared against the power capabilities determined for UDPD to determine if UDPD can meet the power threshold required for SCA . For example if SCA is used to receive CGM measurement readings derived from a sensor that is inserted every 5 days then it can be determined if UDPD has the necessary power capabilities to keep the CGM feature activated for the duration of time.

It is contemplated that in some instances various activities may be tracked individually to determine how much power is consumed per activity. In this way a user s average usage can be tallied up per activity to come to an average power consumption amount. In some instances a programmed therapy program can be implemented e.g. by a physician and a minimum power consumption threshold tallied up based on the customized program. It has been further contemplated that multiple user profiles may be created and used e.g. a profile for average daily usage requirements profiles for custom therapy programs a profile specific to periods of continuous glucose monitoring etc. It should also be understood that in some instances the power consumption per activity may be determined in manufacturing and testing e.g. for different types of UDPDs and stored as reference data.

At block a determination whether UDPD has sufficient power capabilities to run SCA safely with minimal risk of abrupt shutdown is made based on the comparison of the power capabilities of UDPD to any minimum threshold amounts required. If the required thresholds are not met then SCA is prevented from operating freely represented by block . Again this may include for example SCA being disabled and prevented from running on UDPD SCA permitted to operate but without the use of the safety critical features or capabilities etc. This may also include in some instances permitting SCA to operate without the functions for which the thresholds are not met.

In some embodiments a determination that SCA operates properly requires at least that the UDPD have sufficient power capabilities to operate safely with minimal risk of shutdown. If UDPD has at least the minimum threshold of power capability then at block UDPD is determined to have sufficient power capability. SCA is determined to operate properly on UDPD and permitted to operate freely on UDPD as long as any other required checks performed or required to be performed are successfully passed as well.

It is also contemplated that in some instances the power management check may be initiated to determine if the power capabilities of UDPD are as expected. For example average consumption rates for different types of UDPDs running SCA may be determined during manufacturing and testing and stored as reference data. Thereafter during use by the user the power management check may monitor the power consumption rates of UDPD while running SCA . If the results vary from the reference data more than a predetermined threshold deviation then the power management check indicates that SCA is not operating properly on UDPD and thus SCA is prevented from operating freely. For example it may be determined during manufacturing and testing that the iPhone can operate SCA for 8 hours without recharge. If the power management check is run after installed on a user s UDPD and results in an estimated 2 hours without recharge this may be indicative of issues on the device that may compromise the safety critical features of the device. For instance major deviations in expected consumption rates may be indicative of software bugs or viruses. In such case for example SCA may be prevented from operating freely and the user informed of or prompted to address the problem e.g. prompted to run a virus scan of the device .

The power management check may be programmed to initiate at various times e.g. runtimes and or non runtimes. For example the power management check may be programmed to initiate every time before SCA is run periodically after a predetermined amount of time whenever the software environment has changed etc.

In some embodiments the power management check may be initiated as part of the installation process. For example in the power management check may be initiated before after or simultaneously with functional check in process . Therefore in addition to expected results for the installation check and functional check block would also require expected results for the power management check e.g. that the UDPD has sufficient power capability to run the SCA safely . If the power management check results in unexpected results e.g. the UDPD does not have sufficient power capability to run the SCA safely then SCA is prevented from operating freely. Thus process would determine if SCA installed correctly if UDPD has sufficient power capability to run SCA safely and if SCA functions properly. It should be understood that additional checks may also be included e.g. the host integrity check coexistence check interoperability check etc.

In some embodiments the power management check may be programmed to initiate when the software environment has changed. For example in the power management check may be initiated before after or simultaneously with functional check in process . Therefore in addition to a expected results for the functional check block would also require expected results for the power management check e.g. that the UDPD has sufficient power capability to run the SCA safely . If the power management check results in unexpected results e.g. the UDPD does not have sufficient power capability to run SCA safely then SCA is prevented from operating freely. Thus process would determine if the environment changed if the UDPD has sufficient power capability to run SCA safely and if SCA still functions properly. It should be understood that additional checks may also be included e.g. the host integrity check coexistence check interoperability check etc.

Throughout the foregoing description for the purposes of explanation numerous specific details were set forth in order to provide a thorough understanding of the invention. It will be apparent however to one skilled in the art that the invention may be practiced without some of these specific details. In addition embodiments of the invention may include various operations as set forth above or fewer operations or more operations or operations in an order which is different from the order described herein. Accordingly the scope and spirit of the invention should be judged in terms of the claims which follow as well as the legal equivalents thereof.

It should be understood that techniques introduced in the preceding can be implemented by programmable circuitry programmed or configured by software and or firmware or they can be implemented entirely by special purpose hardwired circuitry or in a combination of such forms. Such special purpose circuitry if any can be in the form of for example one or more application specific integrated circuits ASICS programmable logic devices PLDs field programmable gate arrays FPGAs etc.

Software or firmware implementing the techniques introduced herein may be stored on a machine readable storage medium and may be executed by one or more general purpose or special purpose programmable microprocessors. A machine readable medium as the term is used herein includes any mechanism that can store information in a form accessible by a machine a machine may be for example a computer network device cellular phone personal digital assistant PDA manufacturing took any device with one or more processors etc. . For example a machine readable medium can be used to store software instructions which when executed by a processor causes the processor to perform the various methods of this description. A machine readable medium includes recordable non recordable media e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. or any type of media suitable for storing machine readable instructions. The term logic as used herein can include for example special purpose hardwired circuitry software and or firmware in conjunction with programmable circuitry or a combination thereof.

The preceding merely illustrates the principles of the invention. It will be appreciated that those skilled in the art will be able to devise various arrangements which although not explicitly described or shown herein embody the principles of the invention and are included within its spirit and scope. Furthermore all examples and conditional language recited herein are principally intended to aid the reader in understanding the principles of the invention and the concepts contributed by the inventors to furthering the art and are to be construed as being without limitation to such specifically recited examples and conditions. Moreover all statements herein reciting principles aspects and aspects of the invention as well as specific examples thereof are intended to encompass both structural and functional equivalents thereof. Additionally it is intended that such equivalents include both currently known equivalents and equivalents developed in the future i.e. any elements developed that perform the same function regardless of structure. The scope of the present invention therefore is not intended to be limited to the exemplary aspects shown and described herein. Rather the scope and spirit of present invention is embodied by the appended claims.

