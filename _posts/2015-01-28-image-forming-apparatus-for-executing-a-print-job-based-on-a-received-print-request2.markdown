---

title: Image forming apparatus for executing a print job based on a received print request
abstract: The print request of a print job issued from an information processing apparatus via a wide area network is received. Print job information issued from the information processing apparatus via a local area network is received. The storage destinations of the print request of the print job and the print job information are controlled in the issuing order of the print request of the print job and the print job information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09606760&OS=09606760&RS=09606760
owner: Canon Kabushiki Kaisha
number: 09606760
owner_city: Tokyo
owner_country: JP
publication_date: 20150128
---
The present invention relates to an image forming apparatus that manages a job a control method a storage medium storing a program and an image forming system.

In recent years a peripheral apparatus control system constituted by connecting peripheral apparatuses to an information processing apparatus by utilizing various interfaces such as USB Ethernet and a wireless LAN is effectively used at various sites such as home and an office. Examples of peripheral apparatuses are a printer a copying machine a facsimile apparatus a scanner a digital camera and a multi function peripheral of them. An information processing apparatus connected by a local network can implement a vendor specific network printing system for a low cost printer having no large capacity storage medium and a network printing system using a WSD Web Service on Devices print service. Even when performing printing using different network printing systems it is known that a printer manages respective print jobs in a single print queue and can print them in an order in which the printer has accepted the print jobs from an information processing apparatus Japanese Patent Laid Open No. 2011 134303 .

Recently Google Inc. provides a cloud print service called Google Cloud Print to be abbreviated as GCP hereinafter for such a printer. When using the cloud print service the user first activates from a personal computer PC or a mobile terminal a document creation application Web application or the like using a Web browser installed in the PC or the mobile terminal. Then the user can print a document by the printer or the multi function peripheral via the Internet. Print jobs in cloud printing are managed by the print queue of an application that provides the cloud print service.

Conventionally a print job from an information processing apparatus connected by a local network is managed in the print queue of the printer. A print job in cloud printing is registered in the print queue of an application that provides the cloud print service. When a printer accepts cloud printing from an information processing apparatus via a WAN Wide Area Network the cloud printing is not managed in the print queue of the printer but is directly executed. Even if the printer accepts cloud printing after accepting a print job from an information processing apparatus connected by a local network the print job of cloud printing may interrupt and be printed first.

An aspect of the present invention is to eliminate the above mentioned problems with the conventional technology. The present invention provides an image forming apparatus that manages in a single queue print jobs issued via a wide area network and print jobs issued via a local area network and prints them in the acceptance order a control method a storage medium storing a program and an image forming system.

The present invention in one aspect provides an image forming apparatus that is communicable via one of a wide area network and a local area network with an information processing apparatus configured to issue a print job comprising a first reception unit configured to receive a print request of a print job issued from the information processing apparatus via the wide area network a second reception unit configured to receive print job information issued from the information processing apparatus via the local area network and a control unit configured to control to store the print request of the print job received by the first reception unit and the print job information received by the second reception unit in a first storage unit in an issuing order of the print request of the print job received by the first reception unit and the print job information received by the second reception unit wherein the control unit stores one of the print request of the print job received by the first reception unit and the print job information received by the second reception unit in accordance with a free capacity of the first storage unit in a second storage unit of an apparatus connected to the image forming apparatus via a network.

According to the present invention print jobs issued via a wide area network and print jobs issued via a local area network can be managed in a single queue and printed in the acceptance order.

Further features of the present invention will become apparent from the following description of exemplary embodiments with reference to the attached drawings.

Preferred embodiments of the present invention will now be described hereinafter in detail with reference to the accompanying drawings. It is to be understood that the following embodiments are not intended to limit the claims of the present invention and that not all of the combinations of the aspects that are described according to the following embodiments are necessarily required with respect to the means to solve the problems according to the present invention. Note that the same reference numerals denote the same parts and a repetitive description thereof will be omitted.

Of pieces of information of Windows7 Operating System cited below those not to be described in detail are ones laid open to the public on the Microsoft Developer Network MSDN site. In the following description WSD stands for Web Service on Devices and is information laid open to the public on the Windows Hardware Developer Central site. Print Service Definition Version 1.0 of WSD is Print Service defined by Microsoft Corporation USA which is laid open to the public on the Windows Hardware Developer Central site. A description of these pieces of information will not be given.

In the following description a Web service API sometimes uses an HTTPS POST method an example of a communication method encrypted by SSL communication. As the POST method a known one is usable. In the following description the Web service API sometimes uses an HTTP GET method an example of a communication method . As the GET method a known one is usable. Also in the following description the Web service API sometimes uses an HTTPS GET method an example of a communication method encrypted by SSL communication. As the GET method a known one is usable. HTTP stands for Hyper Text Transfer Protocol and is a known unencrypted communication protocol.

HTTPS stands for Hyper Text Transfer Protocol over Secure Socket Layer and is a known encrypted communication protocol. SSL stands for Secure Socket Layer and is a known method of encrypting data on the Internet and transmitting receiving the data. Google Cloud Print GCP is a known function at a site on the Internet.

Each of the MFP and an MFP is an example of a peripheral apparatus and is for example an image forming apparatus having a print function a scanner function a facsimile function and the like. In this embodiment each MFP includes a color inkjet printer a color facsimile apparatus a color scanner and an external storage for a flash memory. Assume that each of the MFPs and is an MFP with a model name Kmmn available from ABC Company. Note that peripheral apparatuses are not limited to them and may be a printer a copying machine a facsimile apparatus a scanner a digital camera and an apparatus having these multiple functions.

The MFP is connected to a network constituted by Ethernet and is also connected to the Internet . The MFP is connected to a network constituted by Ethernet and further connected to the Internet via the network . The MFPs and include hardware shown in details of which will be described later.

A router is for example a broadband router Wi Fi BB Router including a Wi Fi wireless LAN and is connected to the Internet . A mobile terminal Mobile Device is for example a mobile phone or a mobile information terminal. The mobile terminal includes hardware shown in details of which will be described later. The mobile terminal is connected to the router and connected to the Internet via the router . In the mobile terminal according to this embodiment the fourth OS for example an OS equivalent to an Android OS available from Google Inc. is installed. The following description assumes that the mobile terminal is for example a mobile phone.

The PC functions as a server and includes applications and . The application is a document creation application using a Web service and will be called the document creation APP . The application is an application that provides a cloud print service using a Web service and will be called the cloud print APP . The application is an image document reading application using a Web service and will be called the reading APP .

The PC functions as a server and includes an application. An application provides a cloud print proxy service that makes the MFPs and cope with a cloud print service provided by the cloud print APP . The application will be called the proxy APP . The proxy APP installed in the PC can manage for example 5 000 MFPs at once and can make the respective MFPs cope with a cloud print service provided by the cloud print APP . The proxy APP includes a print queue shown in details of which will be described later.

The PC functions as a server and includes an application . The application provides an image conversion service that converts a PDF file into a JPEG file and will be called the image conversion APP .

The PCs and the mobile terminal and the MFPs and are connected so that they can communicate with each other via the Internet . A Web browser is installed in the PC and a Web browser is installed in the mobile terminal . Web browsers and are installed in the MFPs and respectively. The Web browsers and are identical but the Web browsers and are different from each other. That is the Web browsers and are different from each other. HTTP user agents passed to the document creation APP in the User Agent headers of HTTP requests by the Web browsers and are different from each other and are defined as follows 

AAAA CCCC and DDDD represent pieces of information required to identify respective terminals. By using these pieces of information the document creation APP can identify the type of terminal for example a mobile terminal a PC or an MFP and switch a window to be displayed by the application and internal processing.

As described above the cloud print APP provides a cloud print service using a Web service and has a function equivalent to for example the GCP provided by Google Inc. By utilizing this cloud print service the document creation APP can be executed from the Web browser of the PC or the Web browser of the mobile terminal to open a desired document and print it by the MFP or .

For example when the user wants to print an opened document and selects a print menu on a window displayed by the document creation APP as shown in the cloud print APP displays a print window shown in details of which will be described later. When the user selects a printer on the print window and then presses a print button to input a print execution instruction the document creation APP generates a print image as a PDF file.

The cloud print APP generates a print job print data from this print image PDF file and print setting values selected on the print window and stores the print job in a print queue for the selected printer in the cloud print service. Also the cloud print APP transmits a print job notification to the MFP. In this embodiment the proxy APP transmits a print job notification to the printer.

When the MFP has a function of rendering a PDF file it can execute printing of a print job stored in the print queue. However some low end inkjet printers and MFPs do not have the function of rendering a PDF file. When such a printer or the like executes printing of a print job stored in the print queue it is necessary to convert pre process the print image of a PDF file into an image format for example a JPEG format of a type that can be rendered by the low end printer or the like.

To use a cloud print service provided by the cloud print APP login using a user account and a password is necessary. A user who wants to use the cloud print service is prompted to register a user account and a password. When registering an MFP usable for printing in the cloud print service the cloud print APP first acquires an access token for utilizing the cloud print service by using the user account and the password. The cloud print APP registers the MFP in association with the user account by using the acquired access token.

When registering a printer or an MFP the cloud print APP issues a device ID represented by a unique value assigns it to each printer or MFP and notifies the registration target printer or MFP of the device ID. As for registration processing of a printer or MFP a known method is usable.

The PC includes a random access memory unit RAM a hard disk drive unit HDD a keyboard unit KBD a CPU a display LCD and a network board NB . Also the PC includes a bus that connects the above mentioned building components to each other.

The CPU is an example of a control unit and functions as the central processing unit of the PC . Note that the HDD is an example of a storage unit. The storage unit may be a portable CD ROM an internally mounted ROM a flash memory an SSD or the like. The KBD is an example of an input unit. The LCD is an example of a display unit. The NB is an example of a communication control unit.

The programs of the proxy APP respective modules software shown in and the like are stored in the HDD and if necessary read out to the RAM and executed by the CPU . Accordingly the function of the proxy APP those of the respective modules software shown in and the like are implemented. Various databases DBs are allocated in the HDD and the CPU reads out information of each database to the RAM as needed.

Each of the MFPs and includes hardware shown in . In the hardware will be explained by exemplifying the MFP .

The MFP includes a CPU a ROM a RAM a communication unit a printing unit an operation unit a display unit a reading unit a facsimile control unit and an external storage control unit . The MFP includes a bus that connects the above mentioned building components to each other.

The CPU is constituted by a microprocessor and the like. The CPU serves as the central processing unit of the MFP and controls the RAM the communication unit the printing unit the operation unit the display unit the reading unit the facsimile control unit and the external storage control unit in accordance with programs stored in the ROM .

The ROM stores programs for executing print processing processing of notifying a PC of the state of a print operation and the like by the MFP under the control of a printer driver not shown . Also the ROM stores programs for executing facsimile transmission processing or reception processing and processing of notifying the PC of the state of a facsimile operation transmission or reception by the MFP under the control of a FAX driver not shown . The RAM temporarily stores print data. The print data is mainly sent from the PC and printed by the printing unit based on the print data. The RAM also temporarily stores image data read by the reading unit facsimile transmission data sent from the PC facsimile reception data received by the facsimile control unit and the like.

The communication unit includes a connection port for the network and a connection port for an analog telephone line and controls Ethernet and facsimile analog communication. The printing unit includes a printing unit constituted by for example an inkjet printhead respective color inks a carriage a printing paper conveyance mechanism and an electrical circuit constituted by for example an ASIC for generating print pulses in the printhead based on print data. Note that the printing method of the printing unit is not limited to this and a known one is usable.

For example the display contents image data of a file opened in an application by a print operation on an application capable of printing or a facsimile transmission operation are temporarily stored as an EMF spool file in the HDD of the PC . Then the spool file is converted into print data or facsimile transmission data including control commands for the MFP via a printer driver or a FAX driver. The converted data is then sent to the MFP via the Internet.

The print data received by the MFP is converted into print pulses by the printing unit and is printed on printing paper printing medium to be printed . The facsimile transmission data received by the MFP is converted into a facsimile communication protocol by the facsimile control unit and transmitted to a partner facsimile apparatus via an analog telephone line.

The operation unit is constituted by various buttons such as a power button and a reset button and accepts an operation to the MFP . The display unit is constituted by a touch panel type liquid crystal display can display the state of the MFP and can display and input various kinds of setting information and a telephone number. The reading unit includes an electrical circuit constituted by a color image sensor an image processing ASIC and the like and controls the scanner function.

The facsimile control unit is constituted by a facsimile modem an analog communication circuit and the like and controls facsimile transmission and reception according to a facsimile communication protocol. The external storage control unit is constituted by a slot for mounting a flash memory an interface circuit for a storage and the like and controls a mounted flash memory.

The I F is an I F control stack that controls an I F such as Ethernet . The IP Network is an IP Network control stack that controls IP Network.

The IIS represents an IIS control unit that controls the IIS and the proxy APP provides a Web service by using the Web server function of the IIS control unit. The JAVA VM is software that converts Java byte codes into native codes of a platform and executes the converted codes. The proxy APP runs on the JAVA VM .

The Applications is an application group and is constituted by the proxy APP an application and the like. Note that the application indicates one known application and a detailed description thereof will not be given here.

In the software arrangement will be explained by exemplifying the PC functioning as a client. The PC includes Applications an interface Device Drivers and stacks and .

The stack is an Ethernet control stack that controls Ethernet . The stack is an IP Network control stack that controls IP Network. The stack is a WSD control stack that controls WSD. The stack is an IHV native protocol control stack that controls an IHV specific protocol. The stack is an N PnP control stack that controls a Network Plug and Play to be referred to as N PnP hereinafter . Note that a Plug and Play Extensions PnP X function normally installed in the Windows7 OS exists as a Plug and Play extended function. This embodiment will exemplify the use of N PnP as a function equivalent to this function. The WSD control stack includes WSDAPIs that control the WSD to be described later . The IHV native protocol control stack includes APIs that control an IHV specific protocol.

The Device Drivers is a device driver group and is constituted by a standard driver group normally packed in an OS and an IHV driver group provided by the IHV.

The Applications the interface the Device Drivers the stacks and the standard driver group and the stacks and are standard modules packed in an OS. The IHV driver group and the Device Drivers are IHV modules.

The interface is an application DDI interface and is constituted by Application Programming Interface API and Device Driver Interface DDI . The Applications is an application group and includes an application . The application is an application capable of printing to be described later .

The UI module provides and controls the user interface of the printer driver. The language monitor serves as a data communication I F and controls transmission reception of data. The status monitor displays the remaining amount of ink in the MFP a warning and a state such as an error. A port monitor performs processing of transmitting to a proper port data sent from the language monitor or receiving via a class driver data sent from the MFP . In particular a port monitor that controls a USB is called USBMon and a port monitor that controls WSD Print Service is called WSDMon. The class driver is a low level module closest to the port. In this embodiment the class driver is equivalent to a driver of the printer class of a WSD or IHV specific protocol and controls a port a USB or network port in this embodiment .

In if it is detected that the user has started printing from the application step S the OS calls the StartPrintJob function of the spooler . In this function step S first the spooler calls the LM StartDocPort function of the language monitor step S . In this function step S the language monitor initializes lmMultipleJobs by substituting FALSE into it step S .

lmMultipleJobs is a flag used in the language monitor . When the MFP has a function of accepting a plurality of print jobs and sequentially processing them TRUE is set in this flag otherwise FALSE is set. The language monitor initializes lmRetry by substituting 0 into it step S . lmRetry is a variable used in the language monitor and indicates the retry count of a print job request issued from the PC to the MFP . The language monitor initializes lmReceivedId by substituting None into it step S . A print reservation ID issued upon accepting the reservation of a print job request by the MFP is substituted into lmReceivedId in steps S and S of to be described later .

After that the language monitor calls the PM StartDocPort function of the port monitor step S . In this function step S the port monitor performs appropriate processing as needed step S substitutes the result of the processing into a return value pmRet and ends this function. Then the control returns to the call source step S . In general when the processing has been normally done TRUE is substituted into pmRet otherwise FALSE is substituted into pmRet.

The language monitor substitutes the return value of the PM StartDocPort function into the return value lmRet step S and ends the LM StartDocPort function. The control then returns to the call source step S . The spooler substitutes the return value of the LM StartDocPort function into spRet step S . If spRet is not TRUE is FALSE step S the process returns to step S and the spooler calls the LM StartDocPort function of the language monitor . If spRet is TRUE in step S the process advances to step S of . Print job request issuing reservation processing will be described later with reference to .

Finally the spooler calls the LM EndDocPort function of the language monitor step S . In this function step S the language monitor initializes lmMultipleJobs by substituting FALSE into it step S . The language monitor initializes lmRetry by substituting 0 into it step S . The language monitor initializes lmReceivedId by substituting None into it step S . After that the language monitor calls the PM EndDocPort function of the port monitor step S .

In this function step S the port monitor executes appropriate processing as needed step S substitutes the result of the processing into the return value pmRet and ends this function. Then the control returns to the call source step S . In general when the processing has been normally done TRUE is substituted into pmRet otherwise FALSE is substituted into pmRet. The language monitor substitutes the return value of the PM EndDocPort function into lmRet step S and ends the LM EndDocPort function. Then the control returns to the call source step S . The spooler substitutes the return value of the LM EndDocPort function into spRet step S and ends the StartPrintJob function. Then the control returns to the call source step S .

In step S the language monitor sets ans ABCCommand in an argument and calls the GetPrinterElements function of the WSDAPIs that control the WSD. In this function the PC issues GetPrinterElementsRequest of WSD Print Service to the MFP . In response to GetPrinterElementsRequest the MFP sends back GetPrinterElementsResponse to the PC step S . If the PC receives GetPrinterElementsResponse TRUE is substituted into the return value of the GetPrinterElements function and the control returns to the call source step S . If the PC has not received GetPrinterElementsResponse within a predetermined time after it issued GetPrinterElementsRequest to the MFP FALSE is substituted into the return value of the GetPrinterElements function and the control returns to the call source step S .

In step S the language monitor substitutes the return value of the GetPrinterElements function into lmRet. Note that a description of an error case in which FALSE is sent back as the return value of the GetPrinterElements function will not be given here. GetPrinterElementsRequest issued from the PC in step S and GetPrinterElementsResponse sent back by the MFP in response to GetPrinterElementsRequest will be described in detail later with reference to .

The language monitor substitutes into lmReceivedId a value set in an element or in GetPrinterElementsResponse passed as an argument of the GetPrinterElements function in step S step S . The language monitor confirms the lmReceivedId value and if the value is None step S initializes the print job request retry count by substituting 0 into lmRetry step S . If the lmReceivedId value is not None step S the language monitor updates the print job request retry count by substituting into lmRetry a value obtained by adding 1 to lmRetry step S .

In step S the language monitor calls the PM WritePort function of the port monitor . In this function step S the port monitor calls the CreatePrintJob function of the WSDAPIs that control the WSD step S . In this function the PC issues CreatePrintJobRequest of WSD Print Service to the MFP . CreatePrintJobRequest includes detailed information about this print job. In response to CreatePrintJobRequest the MFP sends back CreatePrintJobResponse or Fault ServerErrorNotAcceptingJobs to the PC step S .

For example when the MFP is ready to accept and execute a print job and actually accepts the print job it sends back CreatePrintJobResponse to the PC . To the contrary when the MFP is ready to accept a print job but is not ready to execute the print job and actually accepts the print job it sends back Fault ServerErrorNotAcceptingJobs to the PC . Even when the MFP cannot accept a print job it sends back Fault ServerErrorNotAcceptingJobs to the PC . If the PC receives CreatePrintJobResponse TRUE is substituted into the return value of the CreatePrintJob function and the control returns to the call source step S . If the PC receives Fault ServerErrorNotAcceptingJobs FALSE is substituted into the return value of the CreatePrintJob function and the control returns to the call source step S .

The port monitor substitutes the return value of the CreatePrintJob function into the return value pmRet step S and ends the PM WritePort function. Then the control returns to the call source step S . The language monitor substitutes the return value of the PM WritePort function into the return value lmRet step S . The language monitor confirms the lmRet value step S . If the lmRet value is TRUE the process advances to step S. If the lmRet value is not TRUE is FALSE the language monitor confirms the lmRet value step S . If lmRet is 0 in step S the language monitor sets wprt PrinterDescription in an argument and calls the GetPrinterElements function of the WSDAPIs that control the WSD step S .

In this function the PC issues GetPrinterElementsRequest of WSD Print Service to the MFP . GetPrinterElementsRequest includes a wprt PrinterDescription element to be described later with reference to necessary to acquire an element to be described later with reference to representing whether the MFP can accept a plurality of print jobs. In response to GetPrinterElementsRequest the MFP sends back GetPrinterElementsResponse to the PC step S . If the PC receives GetPrinterElementsResponse TRUE is substituted into the return value of the GetPrinterElements function and the control returns to the call source step S . If the PC has not received GetPrinterElementsResponse within a predetermined time after it issued GetPrinterElementsRequest to the MFP FALSE is substituted into the return value of the GetPrinterElements function and the control returns to the call source step S .

In step S the language monitor substitutes the return value of the GetPrinterElements function into lmRet. Note that a description of an error case in which FALSE is sent back as the return value of the GetPrinterElements function will not be given here. The language monitor confirms the value set in the element in GetPrinterElementsResponse passed as an argument of the GetPrinterElements function step S . If true is set in the element in step S TRUE is substituted into lmMultipleJobs step S . If lmRetry is not 0 in step S mRetry is an integer larger than 0 in practice because a value substituted into lmRetry in steps S and S is an integer of 0 or larger the process advances to step S.

If lmMultipleJobs is TRUE in step S the language monitor sets ans ABCCommand in an argument and calls the GetPrinterElements function of the WSDAPIs that control the WSD step S .

In this function the PC issues GetPrinterElementsRequest of WSD Print Service to the MFP . In response to GetPrinterElementsRequest the MFP sends back GetPrinterElementsResponse to the PC step S . If the PC receives GetPrinterElementsResponse TRUE is substituted into the return value of the GetPrinterElements function and the control returns to the call source step S . If the PC has not received GetPrinterElementsResponse within a predetermined time after it issued GetPrinterElementsRequest to the MFP FALSE is substituted into the return value of the GetPrinterElements function and the control returns to the call source step S .

In step S the language monitor substitutes the return value of the GetPrinterElements function into lmRet. Note that a description of an error case in which FALSE is sent back as the return value of the GetPrinterElements function will not be given here. GetPrinterElementsRequest issued from the PC in step S and GetPrinterElementsResponse sent back by the MFP in response to GetPrinterElementsRequest will be described in detail later with reference to .

The language monitor substitutes into lmReceivedId a value set in the element or in GetPrinterElementsResponse passed as an argument of the GetPrinterElements function in step S that is a print reservation ID step S .

The language monitor confirms the lmReceivedId value and if the value is None step S initializes the print job request retry count by substituting 0 into lmRetry step S . If the lmReceivedId value is not None step S the language monitor updates the print job request retry count by substituting into lmRetry a value obtained by adding 1 to lmRetry step S .

If lmMultipleJobs is not TRUE is FALSE in step S the process advances to step S. In step S the language monitor ends the LM WritePort function and the control returns to the call source. At this time the lmRet value is sent back as the return value of the LM WritePort function. The spooler substitutes the return value of the LM WritePort function into spRet step S . If spRet is not TRUE is FALSE step S the process returns to step S and the spooler calls the LM WritePort function of the language monitor . If spRet is TRUE in step S the spooler performs print data transmission processing shown in subsequently.

In this function the PC issues SendDocumentRequest of WSD Print Service to the MFP uses MTOM Message Transmission Optimization Mechanism message encoding and transmits to the MFP print data constituted by print control commands as unprocessed bytes using a SOAP message. In response to SendDocumentRequest the MFP sends back SendDocumentResponse to the PC step S . If the PC receives SendDocumentResponse and ends the transmission of all print data to the MFP TRUE is substituted into the return value of the SendDocument function and the control returns to the call source step S .

If an error has occurred at the time of issuing SendDocumentRequest or receiving SendDocumentResponse by the PC FALSE is substituted into the return value of the SendDocument function and the control returns to the call source step S . The port monitor substitutes the return value of the SendDocument function into the return value pmRet step S and ends the PM WritePort function. Then the control returns to the call source step S .

The language monitor substitutes the return value of the PM WritePort function into the return value lmRet step S and ends the LM WritePort function. Then the control returns to the call source step S . The spooler substitutes the return value of the LM WritePort function into spRet step S . If spRet is not TRUE is FALSE step S the process returns to step S and the spooler calls the LM WritePort function of the language monitor . If spRet is TRUE in step S the process advances to step S in .

In step S the language monitor sets ans ABCCommand in an argument and calls the GetPrinterElements function of the WSDAPIs that control the WSD. In this function the PC issues GetPrinterElementsRequest of WSD Print Service to the MFP step S . In response to GetPrinterElementsRequest the MFP sends back GetPrinterElementsResponse to the PC step S of and step S of .

If the PC receives GetPrinterElementsResponse TRUE is substituted into the return value of the GetPrinterElements function and the control returns to the language monitor serving as the call source step S . If the PC has not received GetPrinterElementsResponse within a predetermined time after it issued GetPrinterElementsRequest to the MFP FALSE is substituted into the return value of the GetPrinterElements function and the control returns to the language monitor serving as the call source step S . The language monitor substitutes the return value of the GetPrinterElements function into lmRet step S . Note that a description of an error case in which FALSE is sent back as the return value of the GetPrinterElements function will not be given here. GetPrinterElementsRequest issued from the PC in step S and GetPrinterElementsResponse sent back by the MFP in response to GetPrinterElementsRequest will be described in detail later with reference to .

The language monitor substitutes into lmReceivedId a value set in the element or in GetPrinterElementsResponse passed as an argument of the GetPrinterElements function in step S step S . The language monitor confirms the lmReceivedId value step S . If the value is None the process advances to step S. If the value is not None the process advances to step S.

In step S the language monitor initializes the print job request retry count by substituting 0 into lmRetry and the process advances to step S. In step S the language monitor updates the print job request retry count by substituting into lmRetry a value obtained by adding 1 to lmRetry. Then the process advances to step S.

In step S the language monitor calls the PM WritePort function of the port monitor . Processing by the port monitor in this function will be described later with reference to . The language monitor substitutes the return value of the PM WritePort function into the return value lmRet step S . The language monitor confirms the lmRet value step S . If lmRet is TRUE the process advances to step S. If lmRet is not TRUE is FALSE the process advances to step S. In step S the language monitor confirms the lmRetry value. If lmRetry is 0 the process advances to step S. If lmRetry is not 0 the process advances to step S. The case in which lmRetry is not 0 is a case in which lmRetry is an integer larger than 0 in practice because a value substituted into lmRetry in steps S and S is an integer of 0 or larger .

In step S the language monitor sets wprt PrinterDescription in an argument and calls the GetPrinterElements function of the WSDAPIs that control the WSD. In this function the PC issues GetPrinterElementsRequest of WSD Print Service to the MFP step S . GetPrinterElementsRequest includes the wprt PrinterDescription element to be described later with reference to necessary to acquire the element to be described later with reference to representing whether the MFP can accept a plurality of print jobs. In response to GetPrinterElementsRequest the MFP sends back GetPrinterElementsResponse to the PC step S of and step S of .

If the PC receives GetPrinterElementsResponse TRUE is substituted into the return value of the GetPrinterElements function and the control returns to the language monitor serving as the call source step S . If the PC has not received GetPrinterElementsResponse within a predetermined time after it issued GetPrinterElementsRequest to the MFP FALSE is substituted into the return value of the GetPrinterElements function and the control returns to the language monitor serving as the call source step S . The language monitor substitutes the return value of the GetPrinterElements function into lmRet step S . Note that a description of an error case in which FALSE is sent back as the return value of the GetPrinterElements function will not be given here. The language monitor confirms the value set in the element in GetPrinterElementsResponse passed as an argument of the GetPrinterElements function step S .

If true is set in the element in step S the process advances to step S otherwise the process advances to step S. In step S the language monitor substitutes TRUE into lmMultipleJobs and the process advances to step S. In step S the language monitor confirms the lmMultipleJobs value. If the lmMultipleJobs value is TRUE the process advances to step S. If the lmMultipleJobs value is not TRUE is FALSE the process advances to step S.

In step S the language monitor sets ans ABCCommand in an argument and calls the GetPrinterElements function of the WSDAPIs that control the WSD. In this function the PC issues GetPrinterElementsRequest of WSD Print Service to the MFP . In response to GetPrinterElementsRequest the MFP sends back GetPrinterElementsResponse to the PC step S of and step S of . If the PC receives GetPrinterElementsResponse TRUE is substituted into the return value of the GetPrinterElements function and the control returns to the language monitor serving as the call source step S . If the PC has not received GetPrinterElementsResponse within a predetermined time after it issued GetPrinterElementsRequest to the MFP FALSE is substituted into the return value of the GetPrinterElements function and the control returns to the language monitor serving as the call source step S . The language monitor substitutes the return value of the GetPrinterElements function into lmRet step S . Note that a description of an error case in which FALSE is sent back as the return value of the GetPrinterElements function will not be given here. GetPrinterElementsRequest issued from the PC in step S and GetPrinterElementsResponse sent back by the MFP in response to GetPrinterElementsRequest will be described in detail later with reference to .

The language monitor substitutes into lmReceivedId a value set in the element or in GetPrinterElementsResponse passed as an argument of the GetPrinterElements function in step S that is a print reservation ID step S . Then the process advances to step S. The language monitor confirms the lmReceivedId value step S . If the value is None the process advances to step S. If the value is not None the process advances to step S. In step S the language monitor initializes the print job request retry count by substituting 0 into lmRetry and the process advances to step S. In step S the language monitor updates the print job request retry count by substituting into lmRetry a value obtained by adding 1 to lmRetry. In step S the language monitor sends back to the spooler lmRet as the return value of the LM WritePort function and ends the processing of the LM WritePort function. Then the control returns to the spooler serving as the call source step S .

In step S the port monitor calls the CreatePrintJob function of the WSDAPIs that control the WSD. In this function the PC issues CreatePrintJobRequest of WSD Print Service to the MFP step S . CreatePrintJobRequest includes detailed information about this print job. In response to CreatePrintJobRequest the MFP sends back a CreatePrintJobResponse or Fault ServerErrorNotAcceptingJobs to the PC step S of . For example when the MFP is ready to accept and execute a print job and actually accepts the print job it sends back CreatePrintJobResponse to the PC step S of . In contrast when the MFP is ready to accept a print job but is not ready to execute the print job and actually accepts the print job it sends back Fault ServerErrorNotAcceptingJobs to the PC step S of . Also when the MFP cannot accept a print job it sends back Fault ServerErrorNotAcceptingJobs to the PC step S of .

If the PC receives CreatePrintJobResponse TRUE is substituted into the return value of the CreatePrintJob function and the control returns to the port monitor serving as the call source step S . If the PC receives Fault ServerErrorNotAcceptingJobs FALSE is substituted into the return value of the CreatePrintJob function and the control returns to the port monitor serving as the call source step S . The port monitor substitutes the return value of the CreatePrintJob function into the return value pmRet step S . The port monitor returns to the language monitor pmRet as the return value of the PM WritePort function step S and ends the processing of the PM WritePort function. Then the control returns to the language monitor serving as the call source step S .

If the language monitor calls the PM WritePort function of the port monitor in step S of the port monitor starts processing of the PM WritePort function in step S . The port monitor confirms the SendDocument status step S . If the port monitor has issued SendDocumentRequest and has already received SendDocumentResponse as a response to SendDocumentRequest step S the process advances to step S otherwise the process advances to step S.

In step S the port monitor substitutes TRUE into the return value pmRet. In step S the port monitor calls the SendDocument function of the WSDAPIs that control the WSD step S of . In this function the PC issues SendDocumentRequest of WSD Print Service to the MFP uses MTOM Message Transmission Optimization Mechanism message encoding and transmits to the MFP print data constituted by print control commands as unprocessed bytes using a SOAP message step S . In response to SendDocumentRequest the MFP sends back SendDocumentResponse to the PC step S of .

If an error has occurred at the time of issuing SendDocumentRequest or receiving SendDocumentResponse by the PC FALSE is substituted into the return value of the SendDocument function and the control returns to the call source step S . The port monitor substitutes the return value of the SendDocument function into the return value pmRet step S . If the PC receives SendDocumentResponse and ends the transmission of all print data to the MFP TRUE is substituted into the return value of the SendDocument function and the control returns to the port monitor serving as the call source step S . The port monitor substitutes the return value of the SendDocument function into the return value pmRet step S . The port monitor returns to the language monitor pmRet as the return value of the PM WritePort function step S and ends the processing of the PM WritePort function. Then the control returns to the language monitor serving as the call source step S .

A description is a element and is public information that includes information about for example functions mounted in the MFP . A description is a element and is pubic information in which data character string defined by Device ID of IEEE 1284 2000 is set. This indicates Device ID of the MFP . This example represents a state in which Device ID MFG ABC CMD ABCCommand MDL Kmmn CLS PRINTER DES ABC Kmmn VER 1.00 INFO 000 is set. The description is an element and is private information representing whether the MFP is a printer having a multiple print job control function. The multiple print job control function is a function capable of accepting a plurality of print jobs by the printer and processing one of these print jobs to execute printing. true is set in this element when the printer has this function and false is set when the printer does not have this function. This example represents a state in which true is set.

All the elements and are pieces of private information and the language monitor sets appropriate values in these elements in GetPrinterElementsRequest. The language monitor sets in the element a value job ID set in a third argument JobId passed when the spooler calls the LM StartDocPort function in step S of . This job ID passed from the spooler to the language monitor was issued from an OS in the PC . Thus the value set in the element is completely different from a job ID that is issued from the MFP and set in the element . This example represents a state in which a value 5 is set. The specification of the LM StartDocPort function is as follows 

The specification of the PM WritePort function serving as the interface of the language monitor and port monitor is as follows 

The port monitor calls CreatePrintJob of the WSDAPIs that control the WSD in step S of step S of . Values set in the element the element and the element shown in which can be referred to as arguments of this function are not passed as arguments of the PM WritePort function. Therefore the language monitor can neither refer to values set in the elements and nor change these values. For the same reason the language monitor cannot add the elements and serving as pieces of private information to CreatePrintJobRequest by using a CreatePrintJob operation issued from the port monitor .

A print reservation ID issued when the MFP accepted a reservation for a print job request is set in the element . This example represents a state in which a value None is set because a print reservation ID has not been issued yet from the MFP . The language monitor sets None in the element as an initial value used when the language monitor tries to transmit to the MFP for the first time the start data of print data constituted by print control commands which serves as a trigger for issuing a print job request from the PC to the MFP . In other cases the language monitor saves in lmReceived a value set in the element of GetPrinterElementsResponse finally sent from the MFP to the PC and sets this value in the element .

In the element the retry count of a print job request issued from the PC to the MFP is set. This example represents a state in which a value 0 is set to indicate a case in which the PC transmits a print job request to the MFP for the first time. Every time the language monitor tries to transmit the start data of print data constituted by print control commands which serves as a trigger for issuing a print job request from the PC to the MFP the language monitor updates the retry count one by one and sets the value in the element . In the element the version of the OS of the PC is set. The language monitor calls the GetVersionEx function serving as the API of the OS and sets in the element version information of the OS sent back by the argument. This example represents a state in which a value 6.1 indicating the Windows7 OS is set.

The MFP confirms a value set in the element and can switch control in accordance with the OS of the PC for example between the Windows7 OS of the PC and other OSs . For example when the OS is changed from the Windows7 OS to a new Windows OS and the timings and control of the WSD protocol and the like are changed the MFP switches the timings and control of the WSD protocol and the like in accordance with the change. As a result stable control optimized for each OS installed in the PC can be performed and a malfunction and the like can be prevented.

In the element the date time when GetPrinterElementsRequest is issued is set. The language monitor calls the API of the OS acquires the date and time and sets the date time in the element by using the date and time. This example represents a state in which a value 2009 01 01T00 08 00 is set. The MFP does not always receive in the issuing order GetPrinterElementsRequest requests sequentially issued from a plurality of PCs PC PC and other PCs not shown to the MFP in accordance with the statuses of PCs printers and various devices connected in the network . Thus the MFP decides based on the element the order in which the GetPrinterElementsRequest requests are processed. In accordance with this order the MFP sends back GetPrinterElementsResponse responses to be described later with reference to to the issuing source PCs as responses to the GetPrinterElementsRequest requests.

The MFP sets an appropriate value in the element which will be described later with reference to . This example represents a state in which a value 00000202 is set. The MFP confirms a value set in the element and when 0 is set determines that GetPrinterElementsRequest targets a newly issued print job. When a value other than 0 is set the MFP determines that GetPrinterElementsRequest targets a restart request for a print job a reservation of which has been accepted by the MFP . The MFP sets in the element without any change a value set in the element . This example represents a state in which a value 0 is set to indicate a case in which the language monitor tries to transmit to the MFP for the first time the start data of print data constituted by print control commands which serves as a trigger for issuing a print job request from the PC to the MFP .

The element represents version information of the OS of the PC PC . The MFP sets in the element without any change a value set in the element . This example represents a state in which a value 6.1 representing the Windows7 OS is set. In the element the date time when GetPrinterElementsResponse is issued is set. The MFP acquires the date and time from an incorporated real time clock and sets the date time in the element by using the date and time. This example represents a state in which a value 2009 01 01700 08 01 is set.

The PC can acquire from the time difference between the element and the element the time until GetPrinterElementsResponse is received after GetPrinterElementsRequest is issued. The PC can calculate and predict the communication speed and traffic of the network by using the acquired time and can optimize control of the communication and timing of the WSD protocol based on this time. The PC can call the internal timer of the OS by using the API and compare the time calculated based on this timer until a reply of GetPrinterElementsResponse is received after GetPrinterElementsRequest is issued with a time calculated from the time difference between the element and the element . Based on this comparison result the PC can correct the date and time of the real time clock of the MFP and correct the date and time in the PC .

As described in the description of in step S of or step S of step S of the port monitor calls CreatePrintJob of the WSDAPIs that control the WSD. However values set in the element element and element shown in which can be referred to as arguments of the function are not passed as arguments of the PM WritePort function. Thus the language monitor can neither refer to values set in the elements and nor change these values. For the same reason the language monitor cannot refer to the elements and serving as pieces of private information from CreatePrintJobResponse by using a CreatePrintJob operation issued from the port monitor .

A description is a element and is public information in which ans ABCCommand is set as its value. ans ABCCommand is private information. A description is an element and is private information that includes an element an element an element an element and an element . All the elements and are pieces of private information and the language monitor sets appropriate values in these elements in GetPrinterElementsRequest. The language monitor sets in the element a value set in the third argument JobId passed when the spooler called the LM StartDocPort function in step S of . This example represents a state in which a value 5 is set.

In the element a print reservation ID issued when the MFP accepted a reservation for a print job request is set. This example represents a state in which the MFP has already accepted the reservation for the print job request and a value 00000202 issued at the time of acceptance is set. In the element the retry count of a print job request issued from the PC to the MFP is set. This example represents a state in which a value 0 is set to indicate a case in which the PC transmits a print job request to the MFP as the first retry.

Every time the language monitor tries to transmit print data constituted by the first print control command which serves as a trigger for issuing a print job request from the PC to the MFP the language monitor updates the retry count one by one and sets the value in the element . In the element the version of the OS of the PC is set. This example represents a state in which a value 6.1 indicating the Windows7 OS is set. In the element the date time when GetPrinterElementsRequest is issued is set. This example represents a state in which a value 2009 01 01700 08 04 is set.

A description is a element and is public information in which private information ans ABCCommand is set as a Name attribute. This represents that GetPrinterElementsResponse includes ans ABCCommand designated by the element . A description is an element and is private information that includes an element the element an element an element and an element . All the elements and are pieces of private information. The MFP sets in the element without any change a value set in the element . This example represents a state in which a value 5 is set. The MFP sets an appropriate value in the element which will be described later with reference to . This example represents a state in which a value 00000202 is set. The MFP sets in the element without any change a value set in the element . This example represents a state in which a value 1 is set.

The MFP sets in the element without any change a value set in the element . This example represents a state in which a value 6.1 is set. The MFP acquires the date and time from the incorporated real time clock and sets the date time in the element by using the date and time. This example represents a state in which a value 2009 01 01700 08 05 is set.

In Null represents that there is a free area where no data exists and represents that data is undefined unusable .

In a No. field represents the turn of a print job during execution or a reserved print job request. That is in No. indicates the priority of a print job scheduled to execute printing. No. 1 indicates a print job printing of which is currently executed. No. 2 indicates a top priority print job scheduled to execute printing next. Nos. 3 and 5 to 8 indicate reservations for print jobs. Of Nos. 5 to 8 No. 5 indicates a reservation for a print job of high priority next to No. 4 and No. 8 indicates a reservation for a lowest priority print job scheduled to execute printing finally.

In a No. field represents the turn of a reserved print job request. That is in No. indicates the priority of a print job request that is registered in the print queue database of when a print job becomes newly registrable in the print queue database of . In a Protocol field represents a communication protocol used in network communication between the PC and the MFP . In this embodiment either WSD or HTTP is set.

In a Computer Name field represents the name of a computer that issued a print job request. A wprt JobName field represents a print job name set in the element for example the description . A wprt JobOriginatingUserName field represents a user name set in the element for example the description . A wprt JobId field represents a job ID that has been issued from the MFP and is set in the element for example the description . That is the job ID is an ID issued from the MFP upon completion of accepting a job in the MFP . For example a job ID 60 is set in the wprt JobId field on line No. 1 in . This indicates that the MFP is executing printing of this print job and has already issued a job ID. Nos. 2 and 4 represent print jobs before execution of printing though the MFP has already issued job IDs that is print jobs waiting for printing upon completion of acceptance.

 Null is set in the wprt JobId field on line No. 5 of and lines Nos. 1 and 2 of . This indicates that the MFP has only accepted reservations for these print job requests and has neither executed printing nor issued job IDs. Note that is set in the wprt JobId field on lines Nos. 3 6 7 and 8 of and line No. 3 of . This indicates that a element does not exist in a cloud print job and is undefined unusable .

An ans SplJobId field in represents a job ID that has been issued from the spooler and is set in the element for example the description or . For example a case is conceivable in which a given user successively prints the same document from one PC over and over. When the spooler can process these print jobs in parallel by using a plurality of threads or the like print job names set in elements for example the descriptions in a plurality of CreatePrintJobRequest requests and user names set in elements for example the descriptions become the same print job name and user name between the respective print job requests and these print job requests cannot be discriminated from each other. This problem can be solved by setting job IDs issued from the spooler in information held in the print queue database so that these print jobs can be identified. An ans ReceivedId field in represents a print reservation ID set in the element for example the description or . A Time field in and B represents a time count value representing the time when the MFP accepted a print job request issued from the PC or a reservation confirmation request for the print job request.

In this embodiment for example print jobs that have been issued from the respective PCs and on the network and use the WSD protocol and print jobs in cloud printing that have been issued from the PC on the network coexist. Even in such an environment where print jobs issued through different paths in other words print jobs of a plurality of protocols coexist the printing apparatus MFP in this case can use the print queue database as shown in to correctly print in the issuing order of the print jobs issued from respective PCs.

The MFP acquires a print job name set in the element and a user name set in the element from the received CreatePrintJobRequest step S . Also the MFP acquires the computer name of a computer that has issued CreatePrintJobRequest step S . In this case the computer name of the PC is acquired. In this embodiment an IP address is acquired from a TCP reception socket in HTTP POST addressed to WSD Print Service and a computer name is acquired based on the IP address. In this embodiment in order to simplify the description a computer name is acquired from an IP address and a PC is specified using this computer name to perform each processing. However a PC may be directly specified from an IP address to perform each processing. The MFP temporarily saves the acquired print job name user name and computer name step S .

Based on the print job name the user name and the computer name the MFP determines whether a reservation for the print job request of the print job the start of which has been requested by CreatePrintJobRequest already received in step S already exists in the print queue database shown in FIG. A step S . For example the print queue database is searched based on one of the three elements such as the print job name and when for example the same print job name is found it may be determined that such a reservation is likely to exist. In this case if the same print job name is not found it is determined that such a reservation is not likely to exist.

If the MFP determines that a reservation for the print job request is likely to already exist in the print queue database shown in the process advances to step S. If the MFP determines that a reservation for the print job request is not likely to exist the process advances to step S step S . In step S the MFP determines that the print queue database shown in includes a reservation for the request of another print job higher in priority than the print job the start of which has been requested by CreatePrintJobRequest received in step S. If the MFP determines that such a reservation exists the process advances to step S. If the MFP determines that such a reservation does not exist the process advances to step S.

In step S the MFP determines whether the print queue database in the MFP has a free area and the print job request of the print job the start of which has been requested by CreatePrintJobRequest received in step S can be registered. If the MFP determines that the print job request can be registered the process advances to step S. If the MFP determines that the print job request cannot be registered the process advances to step S. In step S the MFP registers in the print queue database of the MFP shown in the print job request of the print job the start of which has been requested by CreatePrintJobRequest received in step S. The MFP sends back CreatePrintJobResponse for example to the PC as a response representing that the print job of the print job request CreatePrintJobRequest received in step S is accepted and executed step S . After that the MFP ends the CreatePrintJob Processing step S .

In step S the MFP transmits a print job request to the proxy APP . In this case the print job request of the print job the start of which has been requested by CreatePrintJobRequest is registered in the print queue database of the proxy APP which will be described later with reference to . After the processing in step S the process advances to step S.

If the MFP determines in step S that the reservation for the print job request is likely to already exist in the print queue database shown in the process advances to step S. In step S the MFP refers to the value of the new job flag and determines whether 1 has been set. If the MFP determines that 1 has been set the process advances to step S. If the MFP determines that 1 has not been set for example 0 has been set the process advances to step S.

In step S the MFP subtracts a count value Time saved in step S of from the count value Time saved in step S. That is the MFP obtains the elapsed time until CreatePrintJobRequest was received in step S after GetPrinterElementsRequest was received in step S of . In step S the MFP determines whether the elapsed time has exceeded 5 sec. If the MFP determines that the elapsed time has exceeded 5 sec the process advances to step S. If the MFP determines that the elapsed time has not exceeded 5 sec the process advances to step S.

In step S the MFP searches the print queue database shown in based on the print job name user name and computer name stored in step S for a reservation of a print job request having the same pieces of information as these pieces of information. The MFP acquires from the print queue database a print reservation ID set in the ans ReceivedId field and a job ID that has been issued from the spooler and is set in the ans SplJobId and temporarily saves them.

The MFP acquires from information included in the element for example the description or saved in step S of a print reservation ID for example the description set in the element and a job ID for example the description that has been issued from the spooler and is set in the element step S . The MFP compares the print reservation ID and the job ID issued from the spooler which have been acquired in step S with the print reservation ID and the job ID issued from the spooler which have been temporarily saved in step S. Based on the print reservation ID temporarily saved in step S the MFP compares the print job name user name and computer name that have been acquired from the print queue database with the print job name user name and computer name that have been temporarily saved in step S step S .

As a result of comparing all pieces of information of comparison targets the MFP determines whether the respective pieces of information to be compared coincide with each other step S . If the MFP determines that the respective pieces of information coincide with each other the process advances to step S. If the MFP determines that one or more pieces of information are not coincident the process advances to step S.

In step S the MFP confirms the print queue database shown in and determines whether the print queue database includes a reservation for the request of another print job higher in priority than the print job the start of which has been requested by CreatePrintJobRequest received in step S step S . If the MFP determines that such a reservation exists the process advances to step S. If the MFP determines that such a reservation does not exist the process returns to step S.

In step S the MFP sets 1 in the new job flag. In step S the MFP sends back to the PC Fault ServerErrorNotAcceptingJobs representing that this print job cannot be accepted in response to the print job request CreatePrintJobRequest received in step S. In step S the MFP ends the CreatePrintJob processing.

In step S the MFP sets true in the element and the process advances to step S. In step S the MFP confirms all values set in the elements temporarily saved in step S. If ans ABCCommand is detected the process advances to step S. If ans ABCCommand is not detected the process advances to step S. In step S the MFP acquires a count value capable of calculating the time or elapsed time from the timer incorporated in the MFP and saves it in Time. The unit of the count value is sec .

In step S the MFP acquires and saves all pieces of information included in the element for example or in GetPrinterElementsRequest. The MFP confirms the value of the new job flag. If 1 has been set the process advances to step S. If a value other than 1 has been set 0 has been set the process advances to step S step S . In step S the MFP subtracts Time saved in step S of from Time thereby measuring the elapsed time until the MFP received GetPrinterElementsRequest in step S after the MFP received CreatePrintJobRequest in step S of . If the elapsed time has exceeded 5 sec the process advances to step S. If the elapsed time has not exceeded 5 sec the process advances to step S.

In step S the MFP confirms a value set in the element for example or . If this value is 0 the process advances to step S. If the value is not 0 is an integer larger than 0 in practice the process advances to step S. In step S the MFP executes print reservation ID issuing processing shown in . The MFP confirms a value set in the element for example or in . If the value is None the process advances to step S. If the value is not None the process advances to step S step S . In step S the MFP registers pieces of information as a reservation for a new print job request in the print queue database shown in based on a print reservation ID ans ReceivedId newly issued in step S of thereby updating the print queue database. At this time the MFP updates the time count value set in the Time field by the value saved in Time.

In step S the MFP initializes the new job flag by setting 0 . The MFP sets pieces of information in GetPrinterElementsResponse by using the information set in step S the information set in step S of the information set in the print queue database shown in and the like. The MFP sends back GetPrinterElementsResponse to the PC PC as a response to GetPrinterElementsRequest received in step S step S . Then the MFP ends the GetPrinterElements processing step S .

In step S the MFP accepts a print reservation ID for example set in the element. The MFP determines whether this print reservation ID exists in ans ReceivedId within the print queue database shown in step S . If the MFP has found in the print queue database shown in a print reservation ID representing a reservation for this print job request the process advances to step S. If the MFP has not found the print reservation ID the process advances to step S step S .

In step S the MFP acquires from the print queue database shown in a time count value set in the Time field for the reservation for the print job reserved with this print reservation ID. The MFP subtracts this time count value from Time saved in step S thereby measuring the elapsed time after this print job reservation was updated the last time. If the elapsed time has exceeded a predetermined time 20 sec is set here the MFP advances to step S. If the elapsed time has not exceeded the predetermined time the MFP advances to step S step S . In step S the MFP temporarily deletes the print reservation ID ans ReceivedId of the print job request from the print queue database shown in and moves this print job request to the bottom of the print queue database to change this reservation into a reservation for a lowest priority print job request. Thereafter the process advances to step S.

The 5 sec fixed timeout value is set as the value for determining the lapse of a predetermined time in step S of and step S of but the value is not limited to these examples. For example a fixed timeout value such as 3 sec 8 sec or 10 sec may be set in accordance with the use environment of the MFP or the environment of a network used by the user. It may also be configured to set an arbitrary appropriate value corresponding to the use environment by using the touch panel of the display unit of the MFP or by a button operation to the operation unit . The MFP may also be configured to monitor PCs on the network grasp the congestion of the network in accordance with the number of PCs and set an optimal timeout value based on the congestion. Further the timeout value in step S of and the timeout value in step S of may be not the same value but different values. In this case for example it is also possible to set the timeout value in step S of to be 5 sec and the timeout value in step S of to be 3 sec.

In step S the MFP newly issues a print reservation ID ans ReceivedId sets the print reservation ID in the element for example or and ends the print reservation ID issuing processing step S . The process then advances to step S of . The print reservation ID issued in step S is managed in the MFP and is a value uniquely decided in the MFP . In step S the MFP sets None in the element for example or and ends the print reservation ID issuing processing step S . The process then advances to step S of .

When the print window is displayed on the Web browser of the MFP the document creation APP transmits to the MFP information for displaying the device choice alone so as to inhibit the user from selecting other devices. When the print window is displayed on the Web browser of the mobile terminal or the Web browser of the PC the document creation APP transmits to the mobile terminal or the PC information for displaying the device choices and . The mobile terminal or the PC receives this information and displays it on the Web browser or . When the user operates the Web browser of the mobile terminal or the Web browser of the PC the document creation APP controls to allow the user to select all devices.

At a paper size selection portion a size of paper used for printing by the MFP is selected from choices A5 A4 B5 and Letter in accordance with a user operation. shows a state in which Letter is selected. At a type selection portion a type of paper used for printing by the MFP is selected from choices Plain Paper Photo Paper and Postcard in accordance with a user operation. shows a state in which Plain Paper is selected. At a print quality selection portion a print quality used for printing by the MFP is selected from choices High Standard and Fast in accordance with a user operation. shows a state in which Standard is selected. At a color density selection portion a color and density used for printing by the MFP are selected from choices Auto and Manual in accordance with a user operation. shows a state in which Auto is selected.

A print button accepts a print start instruction. When the print button is pressed by a user operation the document creation APP generates a print job for the MFP that is associated with the device choice and issues the print job to the cloud print APP . A close button accepts an instruction to close the print window . When the close button is pressed by a user operation the document creation APP closes the print window .

In vertical lines represent processing execution sources and correspond from the left to the PC Web browser the cloud print APP the proxy APP the document creation APP or the reading APP and the MFP Web browser . In vertical lines represent processing execution sources and correspond from the left to the document creation APP the proxy APP and the image conversion APP . In drawings in which there is no processing for a certain execution source this execution source is not illustrated in some cases. In vertical lines represent processing execution sources and correspond from the left to the MFP and the proxy APP . In drawings in which there is no processing for a certain execution source this execution source is not illustrated in some cases.

A communication control method in a case a series of processes regarding document printing in which the user prints a document by the MFP using the PC or the MFP will be explained.

If it is detected that the user has operated the Web browser and starts selection of a print target content document by using the sub menu in the file menu the Web browser requests the document creation APP to transmit the content document selection window step S . The document creation APP transmits information of the content document selection window to the PC step S and the Web browser of the PC displays this window step S . If it is detected that the user has pressed the print menu shown in while selecting a content document the Web browser requests the document creation APP to transmit the print window shown in step S . The document creation APP transmits information of the print window to the PC step S and the Web browser of the PC displays this window step S .

If it is detected that the user has pressed the print button while selecting the device choice selecting the MFP the Web browser issues a print request to the document creation APP step S . At this time this print request includes information host PC indicating that the host which has issued this print request is the PC and information notification yes indicating that this print request requires a job notification to the MFP .

If the document creation APP accepts the print request it issues a print job to the cloud print APP step S . At this time this print request includes the information host PC indicating that the host which has issued the print request of the print job is the PC and the information notification yes indicating that this print job requires a job notification to the MFP .

The cloud print APP inputs the print job to the print queue of the proxy APP step S . At this time the cloud print APP adds to the print job the information host PC indicating that the host which has issued the print request of the print job is the PC the information notification yes indicating that this print request requires a job notification to the MFP and the issuing year month day time issuing time of the print job. The proxy APP executes job stack processing shown in sends back a job ID print job ID to the cloud print APP step S and then waits for a print job acquisition request from the MFP step S .

In step S the cloud print APP sends back the job ID print job ID sent back from the proxy APP to the document creation APP . If the Web browser of the PC receives a response to the print request issued to the document creation APP it requests a home window of the document creation APP step S . The document creation APP transmits information of the home window to the PC step S . The PC displays the window on the Web browser step S and waits for an input operation by the user step S .

As will be described later with reference to FIG. the proxy APP transmits a job print job notification to the MFP in step S of . If the MFP receives the job print job notification step S it registers the print job request in the print queue database which will be described later with reference to step S . Then the MFP changes to an online standby state step S .

At the start of printing the display unit displays a message representing that print related processing is in progress such as in print preparation or print in progress thereby notifying the user that the MFP has shifted to the print mode. The MFP displays this message without the mediacy of the Web browser . The MFP issues a job print job acquisition request to the proxy APP step S . The proxy APP executes job information reply processing shown in and as a result sends back the following print job information to the MFP step S .

The MFP acquires from the print job information the storage destination of a print setting file indicating print settings and the storage destination of a print image file ticketUri and dataUri . The MFP accesses paths URIs designated by ticketUri and dataUri and acquires print jobs print setting file and print image file . The MFP executes printing in accordance with the contents of the print setting file and print image file and notifies the APP of the end of printing when printing is completed or ended step S . In step S the proxy APP executes job deletion processing shown in and ends a series of processes regarding the job step S . After printing is completed or ended the MFP changes to the online standby state step S .

When job stack processing is executed in step S of the proxy APP starts the job stack processing in step S . The proxy APP stacks a job in the job queue shown in and saves each piece of information in a table capable of storing job information shown in step S . The proxy APP generates a job ID step S and sends back the job ID print job ID or read job ID to the call source of this processing. Then the control returns to the call source of this processing step S .

An example of the job queue is one shown in . If the proxy APP determines that a job exists in the job queue the process advances to step S. If the proxy APP determines that no job exists the process advances to step S step S .

In step S the proxy APP acquires job information of a job ID stacked in the job queue and the process advances to step S. In step S the proxy APP sends back the job information acquired in step S to the device and the control returns to the call source of this processing step S .

Since a job having the job ID does not exist in the job queue of the target device in step S the proxy APP sends back to the device a message that there is no job information. Then the control returns to the call source of this processing step S .

If the MFP is specified as a target device and job notification processing is executed the proxy APP starts processing shown in step S . The proxy APP confirms the state of the device MFP step S . If the proxy APP determines that the device is in the online state the process advances to step S. If the proxy APP determines that the device is not in the online state the process advances to step S step S .

In step S the proxy APP refers to the job queue shown in and confirms the presence absence of a print job for the MFP . If the proxy APP determines that there is a print job the process advances to step S. If the proxy APP determines that there is no print job the process advances to step S.

In step S the proxy APP requests image conversion of the image conversion APP . In accordance with the image conversion request from the proxy APP the image conversion APP converts a print target image into a JPEG file serving as a file format printable by the MFP step S . The print target image is a print target content or a PDF file generated for printing which is temporarily saved in the HDD by the document creation APP .

Upon completion of the image conversion processing by the image conversion APP the proxy APP confirms the necessity nonnecessity of a job notification print job notification by referring to detailed information of the print job shown in using the job ID of the print job during processing as a key. If the proxy APP determines that the job notification is necessary notification yes the process advances to step S. If the proxy APP determines that the job notification is unnecessary notification no the process advances to step S step S . In step S the proxy APP saves the determination result as information representing the necessity nonnecessity of a job notification in the table that stores job information shown in . In step S the proxy APP transmits the job notification print job notification to the MFP and ends this processing step S .

Pieces of print job information stored in the table shown in are for example the issuing year month day time host owner name device ID job ticket path URI print image data path URL status the necessity nonnecessity of a job notification and the priority of a job.

The proxy APP issues a print target image deletion request to the document creation APP step S . The document creation APP deletes a print target image that is a print target content or a PDF file generated for printing which is temporarily saved in the HDD step S . The proxy APP issues a job ticket deletion request step S . The document creation APP deletes the print setting file job ticket step S . The proxy APP deletes job information and deletes this job from the job queue shown in step S . Then the control returns to the call source of this processing step S .

When print job request registration processing is executed in step S of the MFP starts processing of registering a print job request in the print queue database step S . In step S the MFP confirms the print queue database shown in . If the MFP determines in step S that the print queue database has a free area and a print job request can be registered in step S the process advances to step S. If the print queue database does not have a free area and no print job request can be registered the process advances to step S.

In step S the MFP registers the print job request of a cloud print job with a Protocol name HTTP in the print queue database shown in and ends this processing step S .

In step S the MFP transmits the print job request to the proxy APP and ends this processing step S . The proxy APP receives the print job request step S registers it in the print queue database shown in step S and ends this processing step S .

When the MFP registers a print job request in the print queue database shown in in a state in which the print job request is reserved in the print queue database shown in in the proxy APP or when a top priority print job request is updated processing shown in is executed step S . In step S the MFP confirms the Protocol field of a top priority print job request reserved in the print queue database shown in and determines whether the print job request indicates cloud printing. If HTTP is registered the MFP determines that the print job request indicates cloud printing and the process advances to step S. If WSD is registered the MFP determines that the print job request does not indicate cloud printing and the process advances to step S.

In step S the MFP performs cloud print processing in steps S to S of and ends the printing step S . On the other hand in step S the MFP receives a print job from a PC as shown in starts printing and ends it step S .

After the end of printing the MFP deletes the print job request printing of which has ended has been executed from the print queue database step S . The MFP issues a print job request acquisition request to the proxy APP step S .

The proxy APP receives the print job request acquisition request from the MFP step S and transmits to the MFP a top priority print job request among print job requests reserved in the print queue database of in the proxy APP . The proxy APP deletes the transmitted print job request from the print queue database step S . The MFP registers the print job request received from the proxy APP step S in the print queue database of the MFP step S updates the print queue database in step S and ends the processing step S .

An interrupt is generated every 180 sec based on a timer incorporated in the MFP and processing shown in is executed. When the interrupt processing is generated based on the timer incorporated in the MFP step S of starts. The MFP confirms the contents of a top priority print job request among print job requests reserved in the print queue database shown in step S and determines whether the print job request indicates cloud printing step S . If HTTP is registered in the Protocol field of the print job request confirmed in step S the MFP determines that the print job request indicates cloud printing and the process advances to step S. If WSD is registered the MFP determines that the print job request does not indicate cloud printing and the process advances to step S.

In step S the MFP saves as Time in the RAM or the like a count value capable of measuring the time or elapsed time from the built in timer step S . The unit of the count value is for example sec . The MFP subtracts a time count value set in the Time field of the print queue database from Time. If the MFP determines that the subtraction result has exceeded a predetermined time 60 sec the process advances to step S. If the subtraction result has not exceeded the predetermined time 60 sec the process advances to step S step S .

In step S the MFP deletes a reservation for the print job request confirmed in step S from the print queue database shown in . The process then advances to step S. At this time the MFP deletes even the print reservation ID ans ReceivedId of the print job request.

In step S the MFP determines whether the subtraction result obtained in step S has exceeded a predetermined time 20 sec step S . If the MFP determines that the subtraction result has exceeded the predetermined time 20 sec the process advances to step S. If the MFP determines that the subtraction result has not exceeded the predetermined time 20 sec the process advances to step S. In this embodiment the predetermined time 20 sec is the same value as the time of 20 sec set in step S of . In step S the MFP temporarily deletes the print reservation ID ans ReceivedId of the print job request targeted in step S. The MFP moves this print job request to the bottom of the print queue database to change this reservation into a reservation for a lowest priority print job request. Thereafter the process advances to step S.

If the MFP has completed the confirmation of reservations for all print job requests in step S the process advances to step S. If the MFP has not completed the confirmation the process advances to step S. In step S the MFP advances to confirmation of a next priority print job request in the print queue database shown in . Then the process returns to step S.

If the MFP determines in step S that the print queue database shown in in the MFP has a free area and a print job request can be registered the process advances to step S. If the print queue database does not have a free area and no print job request can be registered the print queue database update interrupt processing ends step S .

In step S the MFP issues a print job request acquisition request to the proxy APP . In step S the proxy APP receives the print job request acquisition request issued from the MFP in step S. In step S the proxy APP transmits to the MFP a top priority print job request among print job requests reserved in the print queue database shown in and deletes the transmitted print job request from the print queue database. In step S the MFP registers the print job request transmitted from the proxy APP in the print queue database shown in and ends the print queue database update interrupt processing step S .

This processing is performed when the print queue database shown in is stored in a volatile memory such as the RAM . When the print queue database shown in is stored in a nonvolatile memory not shown this processing need not be performed.

When the MFP is turned on the processing shown in starts step S . In step S the MFP issues a print job request acquisition request to the proxy APP . The proxy APP receives the print job request acquisition request from the MFP step S and transmits print job requests to the MFP by the number by which print job requests can be registered in the print queue database of the MFP out of print job requests reserved in the print queue database shown in in the proxy APP . The proxy APP deletes the transmitted print job requests from the print queue database step S and ends this processing step S .

The MFP receives the print job request transmitted from the proxy APP step S registers the received print job request in the print queue database step S and ends the print queue database update processing step S .

In this embodiment print jobs of different protocols are managed in a single print queue database and thus printing can be performed in the issuing order. More specifically for example WSD printing from an information processing apparatus connected by a local network and cloud printing from an information processing apparatus connected via a wide area network are managed using a single print queue database and WSD printing and cloud printing can be performed in the issuing order.

In this embodiment an apparatus MFP in this case that executes printing includes a print queue database print queue management table . In addition an external apparatus PC in this case connected via a wide area network to the MFP that executes printing also includes a print queue database for the MFP . Even the print queue database of the proxy APP of the PC can centralize management of print job requests of different protocols. When the print request of a print job is transmitted to the MFP and the transmitted print job request cannot be registered in the print queue database of the MFP the print job is transferred to the PC and registered in the print queue database of the PC . Accordingly a larger number of print job reservation requests can be managed. That is even when the capacity of the print queue database of the MFP is small and no reservation request can be registered in the print queue database of the MFP printing can be reserved.

The first embodiment has explained an example in which the document creation APP is executed from the Web browser of the PC to perform printing as shown in . In this example before the proxy APP issues a print job notification to the MFP image conversion processing in steps S and S of is performed. When the processing in step S of starts the MFP can quickly acquire the converted image data and print.

However when the processing in step S of does not start image data converted in step S of remains present in the PC and occupies the disk capacity of the PC during the presence. It is therefore preferable to delete image data from the PC in terms of the disk capacity and security when the image data is not printed for a specific time or longer.

However when image data is deleted from the PC a specific time or longer after image conversion in step S of if the print job acquisition request in step S of starts upon the lapse of the specific time or longer after deleting the image data printing may fail. The second embodiment will explain an example of a peripheral apparatus control system for solving this problem. A description of the contents already described in the first embodiment will not be given.

In this embodiment the image conversion request in step S of and image conversion processing in step S are performed after issuing acquisition of a print job request from an MFP to a proxy APP in step S of . Hence after the MFP becomes able to start printing the image conversion request in step S and image conversion processing in step S are performed. The MFP can quickly print a converted image.

The present invention is not limited to the above described embodiments. For example in the above described embodiments an application server that provides cloud printing includes a print queue database other than the print queue database of an apparatus MFP that executes printing. However the present invention is not limited to this. That is an external apparatus connectable via a network to the apparatus that executes printing suffices to include a print queue database for the apparatus that executes printing. Also a plurality of external apparatuses may include print queue databases for the apparatus that executes printing. Accordingly a larger number of print jobs can be registered.

The above described embodiments have exemplified WSD printing as the first job issued via a local area network. However the present invention is not limited to this and is applicable to even printing of another protocol. In this case the print queue database of the MFP suffices to accept WSD printing and printing of another protocol accepted via a local area network and cloud printing accepted via a wide area network and manage print jobs print job requests in accordance with the order of issuing from information processing apparatuses.

In the above described embodiments the proxy APP performs print job deletion processing. However the present invention is not limited to this and the MFP may perform print job deletion processing.

The above described embodiments employ Ethernet as the interface of a network used by the PCs and and the MFPs and . However the interface is not limited to this and an arbitrary interface such as a wireless LAN IEEE1394 Bluetooth or USB may be used. Also some or all of functions in various applications firmware and processes regarding the above mentioned flowcharts may be constituted using dedicated hardware.

The above described embodiments have assumed a personal computer as an information processing apparatus. However the present invention is not limited to this and is applicable to an arbitrary information processing apparatus terminal that enables a similar use method such as a DVD player a game machine a set top box or an Internet home appliance. The present invention is thus effective.

The above described embodiments have exemplified an MFP as a peripheral apparatus. However the peripheral apparatus may be any of a copying machine a facsimile apparatus a scanner a digital camera and an apparatus having these multiple functions. As an example of the OS the above described embodiments have exemplified an OS equivalent to Windows. However the present invention is not limited to this OS and an arbitrary OS is usable. The above described embodiments use Ethernet as an example of the configuration of the network . However the present invention is not limited to this example and an arbitrary network configuration is possible.

The above described embodiments have explained an example of utilizing a printing system that uses the WSD protocol from the PC . However the present invention is similarly applicable to a printing system that uses a vendor specific protocol from the PC an arbitrary printing system such as another local or network printing system provided by an OS or a case in which an arbitrary protocol is used. The above described embodiments have explained an example of utilizing a printing system that uses GCP from the PC . However the present invention is similarly applicable to a printing system using an arbitrary print service such as Internet Printing Protocol or Universal Plug and Play.

The present invention is also implemented by executing the following processing. More specifically software program for implementing the functions of the above described embodiments is supplied to a system or apparatus via a network or various kinds of storage media and the computer or CPU or MPU of the system or apparatus reads out and executes the program. The program may be executed by a single computer or a plurality of computers in cooperation. Not all of the above processes need be implemented by software and some or all of the processes may be implemented by hardware such as an ASIC. Also it is not necessary to perform all the processes by one CPU and a plurality of CPUs may perform the processes in cooperation as needed.

Embodiment s of the present invention can also be realized by a computer of a system or apparatus that reads out and executes computer executable instructions e.g. one or more programs recorded on a storage medium which may also be referred to more fully as a non transitory computer readable storage medium to perform the functions of one or more of the above described embodiment s and or that includes one or more circuits e.g. application specific integrated circuit ASIC for performing the functions of one or more of the above described embodiment s and by a method performed by the computer of the system or apparatus by for example reading out and executing the computer executable instructions from the storage medium to perform the functions of one or more of the above described embodiment s and or controlling the one or more circuits to perform the functions of one or more of the above described embodiment s . The computer may comprise one or more processors e.g. central processing unit CPU micro processing unit MPU and may include a network of separate computers or separate processors to read out and execute the computer executable instructions. The computer executable instructions may be provided to the computer for example from a network or the storage medium. The storage medium may include for example one or more of a hard disk a random access memory RAM a read only memory ROM a storage of distributed computing systems an optical disk such as a compact disc CD digital versatile disc DVD or Blu ray Disc BD a flash memory device a memory card and the like.

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures and functions.

This application claims the benefit of Japanese Patent Application No. 2014 023768 filed Feb. 10 2014 which is hereby incorporated by reference herein in its entirety.

