---

title: Similarity engine for facilitating re-creation of an application collection of a source computing device on a destination computing device
abstract: Techniques are disclosed for facilitating re-creation of an application collection of a source computing device at a destination computing device. The techniques include receiving a source application identifier indicative of a source application edition, the edition of the application being programmed for a source operating system. The techniques also include receiving an indicator of a destination operating system. The techniques further include determining a source canonical application corresponding to the source application edition based on the source application identifier, the source canonical application being a representative of one or more application editions including the source application edition. The techniques also include determining a set of destination application editions that are likely similar to the source application edition based on the source canonical application, the set of destination application editions indicating one or more destination application editions programmed for the destination operating system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09330186&OS=09330186&RS=09330186
owner: Quixey, Inc.
number: 09330186
owner_city: Mountain View
owner_country: US
publication_date: 20150330
---
This U.S. patent application is a continuation of and claims priority under 35 U.S.C. 120 from U.S. patent application Ser. No. 14 037 155 filed on Sep. 25 2013 which is a continuation in part of U.S. patent application Ser. No. 13 839 068 filed on Mar. 15 2013. The disclosures of these prior applications are considered part of the disclosure of this application and are hereby incorporated by reference in their entireties.

This disclosure relates to a similarity engine for facilitating re creation of an application collection of a source computing device on a destination computing device.

Mobile computing devices such as smartphones and tablets are rapidly gaining in popularity. A main reason for the rise in popularity is the widespread availability of mobile applications commonly referred to as apps or mobile apps . These mobile applications are directed to numerous different functionalities and purposes including but not limited to gaming banking organization shopping education leisure sports news book readers social networking and messaging.

Like many applications the software which makes up the mobile applications is typically programmed for the operating system on which the application is to execute. For example a third party application developer may develop and provide an application intended to perform a specific function. In order to have a wide reach the application developer may offer a first application edition of the application for the IOS operating system by Apple Inc. a second application edition of the application for the ANDROID operating system by Google Inc. and a third application edition for WINDOWS PHONE operating system by Microsoft Corp. A user can purchase or download a mobile application by visiting an application store which may be serviced by the operating system providers or third parties.

When users of computing devices e.g. mobile computing devices and stationary computing devices decide to purchase a new computing device the users may be discouraged from switching operating systems e.g. IOS to ANDROID or WINDOWS to IOS . One concern of users is losing the application collection of their old computing device. A similarity engine is disclosed that can help users re create an application collection on a new device and or allow a user to assess whether such re creation is plausible or acceptable. The similarity engine can determine a set of applications that are programmed for a destination computing device that are similar to one or more applications that are installed on a source computing device.

As used herein application can refer to any software that can be executed to provide a functionality or set of functionalities by a computing device. An application collection of a computing device can refer to a set of applications that are installed on or readily accessible by the computing device. An application edition can reference a specific version of an application. For example a group of one or more application editions refers to a group of applications that are identical or similar to one another. Put another way application editions are applications that have similar programming and or functionality. Examples of application editions are different release versions of an application e.g. beta version v. 1.0 or v. 2.0 different language versions of an application e.g. English version Russian version or Chinese version different operating system versions of an application e.g. IOS version or ANDROID version different functional versions e.g. a light version an advanced user version or a free version different aesthetic versions e.g. a holiday themed version or a season themed version and different resolution versions of an application e.g. standard definition or high definition .

As used herein canonical application can refer to a representative of a group of similar application editions. In some implementations a canonical application is an umbrella under which the one or more application editions are categorized. For example a canonical application of a particular game e.g. ANGRY BIRDS by Rovio Entertainment Ltd. can represent different application editions of the game e.g. ANGRY BIRDS FREE for ANDROID ANGRY BIRDS HD for IOS ANGRY BIRDS for IOS and or ANGRY BIRDS for ANDROID . Thus a canonical application is not necessarily an actual application but rather an indicator of one or more related applications. It is noted that applications that are related but not similar e.g. sequels in a series of games or a different release of serial software are typically not classified under the same canonical application. For example ANGRY BIRDS may be a separate canonical application from ANGRY BIRDS STAR WARS and ANGRY BIRDS SEASONS . Although the applications may have a same underlying concept i.e. smashing pigs with enraged birds the three canonical applications reference distinct games and therefore different groups of application editions. Conversely ANGRY BIRDS LITE for IOS ANGRY BIRDS HD for ANDROID ANGRY BIRDS for ANDROID and ANGRY BIRDS for IOS may all be classified as application editions under the canonical application ANGRY BIRDS. 

The source computing device is a computing device that has a current application collection installed thereon. The source computing device executes an operating system. The operating system of the source computing device may be referred to as a source operating system .

The destination computing device also executes an operating system. The operating system of the destination computing device may be referred to as a destination operating system . The destination computing device can be a computing device on which re creation of the current application collection is sought. For example if a user currently uses the source computing device and is contemplating purchasing or has purchased the destination computing device the user may want to determine how much of the source application collection can be re created on the destination operating system .

While depicted as mobile computing devices in the source computing device and the destination computing device can be any suitable user computing device. Examples of user computing devices include but are not limited to smartphones tablet computers laptop computers stationary computers PCs gaming systems personal gaming devices refrigerators televisions set top boxes and vehicle infotainment systems. It is further noted that re creation of the application collection is not limited to scenarios where the source computing device and the destination computing device are the same type of device e.g. mobile devices . For instance re creation of an application collection can be sought from a stationary computer to a smartphone from a smartphone to a vehicle infotainment system or from a television to a vehicle infotainment system.

In some implementations the similarity engine receives a request for a set of destination applications. The request can include an indicator of the destination operating system of the destination computing device and one or more application identifiers. Each application identifier indicates a source application edition in the source application collection. The similarity engine can receive the requests from for example the source computing device or another computing device associated with the source computing device e.g. another computing device of the user or a computing device of a retailer . As used herein application identifier can refer to an indicator that identifies an application edition from other application editions. Application identifiers can be numeric alphanumeric and or character based strings. In some implementations the application identifier is the identifier that is used by an application retailer to reference a particular application edition in an application store.

For each application identifier in the request the similarity engine determines a set of destination applications based on the application identifier and the destination operating system . In some implementations the set of destination applications includes application identifiers of one or more canonical applications that have applications editions classified thereunder that are programmed for the destination operating system and are likely similar to the source application edition indicated in the request . In this scenario the destination application identifiers identify a canonical application. Additionally or alternatively the set of destination applications includes application identifiers of one or more destination application editions that are programmed for the destination operating system and are likely similar to the source application edition indicated in the request . The application identifiers that are included in the set of destination applications may be referred to as destination application identifiers. Two application editions may be considered similar if the application editions are different versions of the same application and or if the two application editions provide comparable functionality but are classified under different canonical applications. For example two music player application editions may be similar even though the music player application editions are developed by two separate developers and are distinct applications. In another example two applications may be similar when both applications are classified under the same canonical application.

The set of destination applications may be communicated to the destination computing device the source computing device or any other suitable device not shown . In some implementations the receiving device i.e. the source computing device the destination computing device or otherwise can display titles icons and or descriptions of the destination application editions indicated by the set of destination applications such that the user can select one or more of the application editions for installation on the destination computing device and or can read the descriptions of one or more of the destination applications. In some implementations the set of destination applications may be used to facilitate the downloading of one or more destination application editions indicated by the set of destination applications to the destination computing device .

In some implementations the source computing device may execute an application detector . The application detector is an application that analyzes a computing device e.g. the source computing device and determines the application collection thereof i.e. the application editions that are installed on the computing device . The application detector can search the directory files of the source computing device to identify application editions that are installed on the source computing device . In some implementations the application detector determines the application identifiers of the identified application editions and generates the request for a set of destination applications. It is noted that the application detector can be executed by any other suitable device. For instance the application detector may be executed by a personal computing device PC and a user could connect the source computing device to the PC. Additionally or alternatively the application detector may be executed by a remote web server that the source computing device could access via a network.

A user of the source computing device may also provide user input via a user interface of the source computing device . The user input can include an indicator of the destination operating system . In response to receiving the user input the application detector or a similar component may include the indicator of the destination operating system in the request .

The similarity engine may be used in other manners. For instance a user wishing to find an application similar to another application for a particular operating system may provide a request to the similarity engine from any suitable computing device. In response to the request the similarity engine may return a set of destination applications indicating one or more application editions that are similar to the application indicated in the request .

The partner device may receive a list of source application editions from the source computing device and may generate the request for the set of destination applications. In some implementations the partner device can execute the application detector . In these implementations a user can connect the source computing device to the partner device or can access the partner device via a network. The application detector can identify the application editions installed on the source computing device . The partner device can include an identifier of the destination operating system and the source application identifiers of the source application editions in the request . The partner device may determine the destination operating system based on input provided by the user. The partner device transmits the request to the similarity engine .

In some implementations the request can include additional parameters such as a value for a list threshold a value for a gaminess tolerance and or a value for an importance tolerance. The list threshold is an upper limit on how many destination applications canonical applications and or application editions can be recommended for each particular source application edition. For example if the upper limit is three the similarity engine does not include more than three destination application identifiers in a set of destination applications corresponding to a source application edition.

Gaminess corresponds to a quantitative measure that indicates how likely it is that an application edition is a game. For example gaminess may be scored on a scale of zero to one such that one indicates that an application edition has strong characteristics of a game and a zero indicates that the application edition has little to no characteristics of a game. The gaminess value of an application edition can be calculated in any suitable manner. For example the gaminess value of an application edition can be calculated in the manner described in U.S. Application 61 790 215 the contents of which are herein incorporated by reference. The gaminess tolerance can indicate a tolerance e.g. 0.05 such that the gaminess value of a destination application edition must fall within the gaminess tolerance of the gaminess value of the source application edition.

An importance value corresponds to a quantitative measure of the significance of an application edition. In some implementations an importance value can be calculated as a function of the total number of downloads of an application edition and an average rating value of the application edition. For example only an importance value of an application edition can be calculated by normalizing a number of downloads of the application edition based on the operating system for which it was programmed and weighting each of the number of download values and the average rating of the application edition. The weighted values may be combined to obtain the importance value. The importance tolerance can indicate a tolerance e.g. 0.10 such that the importance value of the destination application edition must fall within the importance tolerance of the importance value of the source application edition. In another example the parameters may include an importance value threshold such that the importance value threshold defines a minimum acceptable importance value. In still another example an importance value can fall within a predefined range of values i.e. between an upper and lower threshold . It is noted that the partner device may include any other additional or alternative parameters in the request .

In response to the request the partner device can receive a reply from the similarity engine indicating a set of destination applications for each source application indicated in the request . The partner device can display information and or icons corresponding to each set of destination applications or may communicate the set of destination applications to the destination computing device or the source computing device .

A requesting device e.g. the source computing device or the partner device can generate the request according to an application programming interface API . The API can define the structure of the request which parameters may be included in the request and the format of responses from the similarity engine . The API ensures that the requests are generated in the appropriate format and that the receiving device e.g. partner device source computing device or destination computing device can display the set of destination applications to a user.

The examples of are provided for example only. The similarity engine can be configured to receive requests in any other suitable manner. For example a user may access the similarity engine via a web browser executing on a computing device that is not the source computing device the destination computing device or a partner device .

The processing device can include one or more processors and memory e.g. read only memory or random access memory . The memory stores computer readable instructions that are executed by the one or more processors. In implementations where the processing device includes more than one processor the processors can execute in an individual or distributed manner. In some implementations the processing device can execute a request handler an ID matcher a title matcher and a similarity matcher all of which are embodied as computer readable instructions.

The storage device is a non transitory non volatile computer readable medium. While one storage device is depicted the storage device can include one or more computer readable mediums. Examples of storage devices include but are not limited to hard disk drives solid state drives optical disk drives and flash drives. In some implementations the storage device stores an application database and a similarity matrix .

The network interface device performs communication with other devices via a network. The network interface device can perform wired or wireless e.g. WiFi or cellular communication. Examples of the network interface device include but are not limited to a transceiver configured to perform communications using the IEEE 802.11 wireless standard an Ethernet port a wireless transmitter and a universal serial bus USB port. While one network interface device is illustrated the term network interface device can include one or more devices.

In some implementations the request handler receives a request from a requesting device and provides a reply indicating one or more sets of destination applications to the requesting device and or another device. The request can include one or more source application identifiers that identify respective source application editions. The request handler can determine a set of destination applications for each source application edition identified in the request . Each set of destination applications can correspond to a different one of the source application identifiers in the request . For example if the request includes four different source application identifiers the request handler may include four sets of destination applications in the reply . In operation the request handler for each source application identifier in the request identifies a canonical application corresponding to the source application identifier. For each canonical application the request handler identifies a set of destination applications based on the canonical application . The set of destination applications is indicative of one or more application editions that are programmed for the destination operating system . The set of destination applications can indicate the one or more application editions either directly e.g. destination application identifiers that reference actual application editions or indirectly e.g. destination application identifiers that reference canonical applications that have pertinent application editions programmed for the destination operating system classified thereunder . Put another way the set of destination applications can identify specific application editions that are similar to the source application edition and programmed for the destination application and or can identify canonical applications that are known to have application editions organized under the umbrella of each canonical application that are similar to the source application edition and programmed for the destination operating system. In either scenario the set of destination applications is indicative of one or more destination application editions that are programmed for the destination operating system .

In some implementations the request handler determines a canonical application corresponding to the source application identifier by querying the application database using the application identifier. The application database stores a plurality of records each record corresponding to and referencing a different canonical application . Each record further includes references to and data describing one or more corresponding application editions and the application identifiers thereof. Furthermore each record may include attributes of the canonical application and or attributes of the application editions . Examples of attributes include a title of the application canonical or edition a developer of the application canonical or edition a description of the application canonical or edition a quality rating of the application canonical or edition a total number of downloads of the application a gaminess value of the application and an importance value of the application. The title of a canonical application and or an application edition as well as some other attributes may be tokenized such that the title is represented by one or more numerical values symbols alpha numeric string and the like. Tokenizing words in the application database can facilitate more efficient searching. The importance value and the gaminess value may be attributed to the canonical application and or each application edition. Furthermore in some implementations the attributes of an application edition can indicate an operating system for which the application edition is programmed and or an application store or stores from which the application edition may be purchased or otherwise obtained. In these implementations the operating system and or the application stores may be keys such that the canonical applications and or application editions may be searched by operating system and or application store.

In response to receiving a specific application identifier of a specific application edition the application database returns the canonical application corresponding to the specific application edition . It is noted that a canonical application corresponding to an application identifier of the specific application edition in the source application collection can be referred to as a source canonical application . Additionally or alternatively the application database may return the record containing a canonical application in response to a query containing the specific application identifier.

In some embodiments the request handler provides parameters corresponding to the source canonical application and the destination operating system to one or more of the ID matcher the title matcher and the similarity matcher . The ID matcher the title matcher and or the similarity matcher return destination application identifiers corresponding to the source canonical application . The request handler may limit the number of destination application identifiers that can be included in a set of destination applications such that the number of destination application identifiers cannot exceed the list threshold. Furthermore in some implementations the request handler accesses the ID matcher before the title matcher and accesses the title matcher before the similarity matcher . In these implementations the request handler stops searching for additional destination applications when the number of returned destination application identifiers equals the list threshold. By accessing the ID matcher prior to the title matcher and the similarity matcher the request handler attempts to identify application editions that are more likely to be similar to the source application edition .

In various implementations the ID matcher identifies any application editions programmed for the destination operating system that are organized under the source canonical application . If the ID matcher identifies any such application editions the ID matcher returns the application identifiers of the application editions to the request handler . For example if the source canonical application is ANGRY BIRDS and the destination operating system is ANDROID the ID matcher can return destination application identifiers of ANGRY BIRDS FREE for ANDROID ANGRY BIRDS HD for ANDROID and ANGRY BIRDS for ANDROID. Additionally or alternatively the ID matcher can return to the request handler a parameter e.g. a flag that indicates that the source canonical application includes one or more application editions that are programmed for the destination operating system .

The title matcher identifies any application editions that have exactly matching titles and or application editions having weakly matching titles with the canonical application such that the identified application editions are programmed for the destination operating system . Two titles are said to be exactly matching if the titles contain identical sets of words in the same order. Two titles are said to be weakly matching if the titles contain the same set of non stop words in the same order. In addition to commonly used words e.g. the and or and of stop words can include words that are common in application titles. For example stop words can include terms such as free lite HD and full. A list of stop words can be manually curated or can be learned over time. Non stop words are words that are not considered stop words. In an example ANGRY BIRDS HD and ANGRY BIRDS LITE are weakly matching titles because HD and LITE are stop words and thus the titles include the same set of non stop words in order i.e. ANGRY and BIRDS . The application editions that are identified by the title matcher are classified under a canonical application other than the source canonical application . If the title matcher identifies any application editions having exactly matching or weakly matching titles the title matcher returns the application identifiers of the application editions corresponding to the destination operating system to the request handler . Additionally or alternatively the title matcher can return the application identifiers of the canonical applications having application editions whose titles exactly match or weakly match the title of the source application edition and are programmed for the destination operating system . While the foregoing examples are provided for English the underlying principles apply to other languages e.g. French Japanese German and Chinese .

The similarity matcher identifies application editions that are similar to the source canonical application and are programmed for the destination operating system . The similarity matcher references the similarity matrix to determine M applications most similar to the canonical application . M is an integer that is greater than or equal to 0 and less than or equal to the list threshold. In some implementations M is equal to the difference between the list threshold and the amount of destination application editions identified by the ID matcher and the title matcher . The similarity matcher can return M destination application identifiers to the request handler .

The similarity matrix stores a similarity score for each ordered pair of canonical applications in the application database . Thus if there are N canonical applications in the application database the similarity matrix may be an N N matrix having the following structure 

In operation the similarity matcher can identify the row in the similarity matrix corresponding to the canonical application and can rank the similarity scores contained therein. Based on the ranked similarity scores the similarity matcher can then determine the M highest scored canonical applications that include application editions that are programmed for the destination operating system . The similarity matcher can then select an application edition from each one of the M highest scored canonical applications to include in the set of destination applications. The similarity matcher can select the application edition to recommend based on any suitable criteria. For example when more than one application editions corresponding to a canonical application are programmed for the destination operating system the similarity matcher can select the most popular application edition e.g. most downloaded the highest rated application edition the most expensive application edition the cheapest application edition etc. The similarity matcher can return the application identifiers of the selected application editions to the request handler . Additionally or alternatively the similarity matcher returns the application identifiers of the M highest scored canonical applications that include application editions that are programmed for the destination operating system .

In cooperation with the ID matcher the title matcher and or the similarity matcher the request handler identifies a set of destination applications for each source canonical application indicated in the request and generates a reply to the request based on the sets of destination applications. The request handler generates the reply by including the sets of destination applications in the reply along with any additional information. For instance the reply can further include the name of each destination application canonical application and or destination application edition an icon or graphic of each destination application a description of each destination application and or links to download each of the destination applications in the reply .

At operation the request handler receives a source application identifier and an indicator of a destination operating system . The source identifier and the indicator of the destination operating system may be received in a request for a set of destination applications. As previously discussed the source application identifier can uniquely identify an application edition installed on a source computing device . The source application identifier and the destination operating system can be received in the request . The request may also include additional parameters such as a list threshold a gaminess tolerance and or an importance tolerance.

At operation the request handler queries the application database with the source application identifier. At operation the request handler determines whether the application database includes a record that includes the source application identifier. If so the application database can return the record . The record includes the canonical application corresponding to the referenced application edition i.e. the source canonical application and references to any other application editions that have been organized under the canonical application . Thus if the application database returns a record containing the source application identifier the request handler identifies a source canonical application corresponding to the source application identifier and the method continues to execute. If no such record is returned by the application database the request handler determines that the application database does not recognize the source application identifier and the request handler may return an empty set of destination applications for the source application identifier.

At operation the ID matcher identifies application editions that are organized under the canonical application and programmed for the destination operating system . The ID matcher can select application editions in the record returned by the application database based on the destination operating system . In this way the ID matcher obtains application editions programmed for the destination operating system and organized under the same canonical application as the source application edition . The ID matcher returns application identifiers of the selected application editions to the request handler . The request handler can include the received application identifiers in the set of destination applications. In some implementations the ID matcher limits the number of application editions to a predetermined limit based on one or more predetermined rules. Additionally or alternatively the ID matcher can return to the request handler a parameter e.g. a flag that indicates that the source canonical application includes one or more application editions that are programmed for the destination operating system .

In an example the source application edition is ANGRY BIRDS HD for IOS i.e. IOS is the source operating system and the destination operating system is ANDROID. In this example the ID matcher determines the canonical application corresponding to the application edition ANGRY BIRDS HD for IOS e.g. ANGRY BIRDS . Next the ID matcher identifies other application editions classified under the ANGRY BIRDS canonical application that are configured for the ANDROID operating system e.g. ANGRY BIRDS FREE for ANDROID ANGRY BIRDS for ANDROID and or ANGRY BIRDS HD for ANDROID . The ID matcher can obtain the application identifier of these application editions from the record of ANGRY BIRDS and can return the application identifiers to the request handler . Additionally or alternatively the ID matcher can obtain the application identifier of the ANGRY BIRDS canonical application and can return the application identifier to the request handler .

At operation the request handler determines whether the number of destination application identifiers in the set of destination applications is greater than or equal to the list threshold. If so the request handler returns the set of destination applications as shown at operation . Otherwise the request handler continues to identify destination application editions to include in the set of destination applications.

At operation the title matcher searches the application database for applications having titles that exactly match the title of the source application edition . The title matcher can search the application database for application editions classified under canonical applications other than the source canonical application that have titles that exactly match the title of the source application edition . Two titles are said to exactly match if the respective titles of the application editions include the same set of words arranged in the same sequence. In some implementations the titles of the application editions are tokenized. In these implementations the title matcher queries the application database with a token or tokens representing the title of the source application edition . In other implementations the application database is searched for exact matches of text strings. The application database can return records of application editions whose tokenized titles contain the exact same set of tokens.

In some implementations the title matcher can verify the identified application editions . Verification of an application edition can refer to a technique by which the title matcher determines whether an application edition is likely to be an adequate substitute for the source application edition . Examples of verification techniques can include verification based on gaminess values and verification based on importance values. In some implementations the title matcher verifies a potential destination application edition by comparing the gaminess value of the potential destination application edition with the gaminess value of the source application edition or canonical . The title matcher can verify the potential destination application edition if its gaminess value and the gaminess value of the source application edition are within the gaminess tolerance. For example the title matcher can verify a potential destination application edition if where Gis the gaminess value of the potential destination application edition Gis the gaminess value of the source application edition and Tis the gaminess tolerance.

In some implementations the title matcher verifies a potential destination application edition by comparing the importance value of the potential destination application edition with the importance value of the source application edition . The title matcher can verify the potential destination application edition if its importance value and the importance value of the source application edition are within the importance tolerance. For example the title matcher can verify the potential destination application edition if where Iis the importance value of the potential destination application edition Iis the importance value of the source application edition and Tis the importance tolerance.

In some implementations the title matcher verifies a potential destination application edition if it is able to verify the application edition based on both gaminess values and importance values. If the title matcher verifies a potential destination application edition the title matcher can return the application identifier of the verified application edition to the request handler . Additionally or alternatively for each identified application edition the title matcher can return an application identifier of the canonical application that includes the verified application edition to the request handler .

At operation the request handler determines whether the number of destination application identifiers in the set of destination applications is greater than or equal to the list threshold. If so the request handler returns the set of destination applications as shown at operation . Otherwise the request handler continues to identify destination application editions to include in the set of destination applications.

If the number of destination application identifiers in the set of destination applications is less than the list threshold the title matcher can search for application editions having titles that weakly match the title of the source application edition and are configured for the destination operating system as shown at operation . The title matcher can search the application database for application editions having titles that include the same set of non stop words in the same order as the title of the source application edition. For example if a first title is CHESS PRO FREE and a second title is CHESS PRO HD then the two titles are weakly matched because the two titles include the words CHESS PRO but are not exact matches. If however the first title is CHESS PRO LITE and the second title is CHESS PLAYER LITE then the two titles are not weakly matched because the titles do not share the same set of non stop words. In this example both titles contain the word CHESS but one title contains the word PLAYER and the other title contains the word PRO. Thus the titles are not considered weakly matched.

In some implementations the title matcher identifies application editions having titles that weakly match the title of the source application edition by removing the stop words from the title of the source application edition and searching the application database with the remaining words of the title. In some of these implementations the title matcher can remove the stop words from the title of each application edition and can tokenize the remaining word or words in the title. The tokenized title of each application edition may be stored in its corresponding record . The title matcher can identify canonical applications having titles that are weakly matched with the title of the source canonical application by querying the application database with the tokens representing the non stop words of the title of the source application edition . The application database returns records of application editions having titles that contain the same set of tokens. The title matcher can then select application editions programmed for the destination operating system from the returned records so as to obtain destination application editions that have a title that weakly matches the title of the source application edition . In some implementations the title matcher can verify each of these application editions in the manner described above. For example the title matcher can verify an application edition based on its gaminess value and or based on its importance value. The title matcher can return the application identifiers of the verified application editions to the request handler . Additionally or alternatively for each identified application edition the title matcher can return an application identifier of the canonical application that includes the verified application edition to the request handler .

At operation the request handler determines whether the number of destination application editions identified in the set of destination applications is greater than or equal to the list threshold. If so the request handler returns the set of destination applications as shown at operation . Otherwise the request handler continues to seek out destination application editions to include in the set of destination applications.

At operation the similarity matcher identifies applications that are similar to the source canonical application . In some implementations the similarity matcher references the similarity matrix and in particular a row of the similarity matrix corresponding to the source canonical application . As previously described each row of the similarity matrix corresponds to a different canonical application and each element within the row i.e. each successive column represents a similarity score between the canonical application and another canonical application stored in the application database . In this way the similarity scores for each combination of canonical application pairs are represented in the similarity matrix . The similarity matcher can sort or rank the similarity scores contained in the row of the identified canonical application . Based on the sorted similarity scores the similarity matcher can ascertain the canonical applications that are most similar to the source canonical application . The similarity matcher can select up to M canonical applications that are most similar to the source canonical application such that the selected canonical applications include application editions that are programmed for the destination operating system . M is an integer value corresponding to the difference between the list threshold and the number of destination application identifiers in the set of destination applications. In some implementations the similarity matcher can identify these canonical applications by identifying records having the highest similarity scores which include at least one reference to an application edition that is programmed for the destination operating system . The similarity matcher can return up to M application identifiers of the M canonical applications to the request handler .

Additionally or alternatively the similarity matcher can return up to M application identifiers of M application editions whereby each of the M application editions corresponds to a different one of the M canonical application . The similarity matcher can select an application edition from the respective record of each identified canonical application . The similarity matcher can select the application edition based on the operating system for which it was programmed i.e. application editions programmed for the destination operating system and other considerations such as popularity rating or price. As a result the similarity matcher determines the application editions that are most similar to the source canonical application and programmed for the destination operating system . The similarity matcher can return the application identifiers of these application editions to the request handler which can include the application identifiers in the set of destination applications.

In some implementations the similarity matcher analyzes the similarity matrix to identify all of the similarity scores in the row of the source canonical application that are above a score threshold e.g. 0.90 . The similarity matcher can obtain the records of the canonical applications corresponding to these scores and can select the canonical applications having applications editions that are programmed for the destination operating system . In this way the similarity matcher determines all of the canonical applications that have similarity scores that are greater than the score threshold and that have application editions that are programmed for the destination operating system . The similarity matcher can sort and or rank these application editions based on their respective similarity scores. The similarity matcher can then select up to M canonical applications and or M application editions having the highest similarity scores for inclusion in the set of destination applications. The similarity matcher can return the application identifiers of the M selected canonical applications and or application editions to the request handler .

At operation the request handler generates a reply based on the returned application identifiers. The request handler can include the application identifiers in the set of destination applications. The request handler can generate the reply according to the API and can include each destination application identifier of the set of destination applications in the reply . The request handler can obtain the additional information corresponding to each of the destination applications e.g. name of the destination application and icon of the destination application and can include the additional information in the reply . It is noted that the reply may also include sets of destination applications corresponding to other source application identifiers received in the request . The request handler can provide the reply to the requesting device or any other suitable device such that information relating to the identified destination applications e.g. name icon and or screen shot of the destination application can be displayed to the user.

The method described with respect to is provided for example only and not intended to be limiting. Variations of the method are contemplated and are within the scope of the disclosure.

It is noted that in some scenarios the source operating system and destination operating system may be different operating systems. In other scenarios however the source operating system and destination operating system may be the same operating system but re creation of the application collection may still be desired on a destination device due to factors that are not operating system related. For example the source operating system of the source computing device and the destination operating system of the destination computing device may be the same but the destination operating system may be configured to access a different application store. It is noted that the techniques disclosed herein are applicable to such a situation.

At operation the request handler receives a source application identifier an indicator of a destination operating system and an indicator of a destination application store. The foregoing parameters may be included in the request for a set of destination applications. The indicator of the destination operating system can identify the operating system of the destination computing device . It is noted that the destination operating system can be different or the same as the source operating system of the source computing device . The indicator of the destination application store can identify an application store that the destination operating system is configured to access. The request may include additional parameters.

At operation the request handler queries the application database with the source application identifier. At operation the request handler determines whether the application database includes a record that includes the source application identifier. If the application database returns a record containing the source application identifier the request handler identifies a source canonical application corresponding to the source application identifier and the method continues to execute. If no such record is returned by the application database the request handler determines that the application database does not recognize the source application identifier and the request handler can return an empty set of destination applications for the source application identifier.

At operation the ID matcher identifies any application editions that are organized under the canonical application programmed for the destination operating system and available on the destination application store. The ID matcher returns one or more application identifiers of the selected application editions to the request handler . The ID matcher can select the application editions to include in the set of destination applications based on the destination operating system the destination application store and or one or more parameters such as popularity rating or price. Additionally or alternatively the ID matcher can return to the request handler a parameter e.g. a flag that indicates that the source canonical application includes one or more application editions that are programmed for the destination operating system .

At operation the request handler determines whether the number of destination application identifiers in the set of destination applications is greater than or equal to the list threshold. If so the request handler returns the set of destination applications as shown at operation . Otherwise the request handler continues to identify destination application editions to include in the set of destination applications.

At operation the title matcher searches the application database for application editions having titles that exactly match the title of the source application edition and are programmed for the destination operating system and available at the destination retailer store. In some implementations the title matcher searches the application database for other application editions that have a title that exactly matches the title of the source application edition in the manner described above. To the extent the title matcher identifies multiple application editions that have titles that exactly match the title of the source application edition the title matcher can select one or more of the application editions based on the destination operating system the destination application store and or one or more parameters such as popularity rating or price. In some implementations the title matcher verifies the application editions as was described above. The title matcher can return application identifiers of the identified application editions to the request handler . Additionally or alternatively for each identified application edition the title matcher can return an application identifier of the canonical application that includes the identified application edition to the request handler .

At operation the request handler determines whether the number of destination application identifiers in the set of destination applications is greater than or equal to the list threshold. If so the request handler returns the set of destination applications as shown at operation . Otherwise the request handler continues to identify destination application editions to include in the set of destination applications.

At operation the title matcher searches for canonical applications having titles that weakly match the title of the source canonical application and that are programmed for the destination operating system and available at the destination retailer store. In some implementations the title matcher searches the application database for application editions having titles that share the same set of non stop words with the title of the source canonical application . The title matcher can perform the searches in any suitable manner including the manner described above. To the extent that the title matcher identifies multiple application editions which have titles that weakly match the title of the source application edition the title matcher can select the application editions based on the destination operating system the destination application store and or one or more parameters such as popularity rating or price. In some implementations the title matcher verifies the application editions as was described above. The title matcher can return application identifiers of the identified application editions to the request handler . Additionally or alternatively for each identified application edition the title matcher can return an application identifier of the canonical application that includes the identified application edition to the request handler .

At operation the request handler determines whether the number of destination application editions identified in the set of destination applications is greater than or equal to the list threshold. If so the request handler returns the set of destination applications as shown at operation . Otherwise the request handler continues to seek out destination application editions to include in the set of destination applications.

At operation the similarity matcher identifies applications that are similar to the source canonical application . In some implementations the similarity matcher references the similarity matrix and in particular a row of the similarity matrix corresponding to the source canonical application to identify similar canonical applications . From the records of the similar canonical applications the similarity matcher can identify application editions that are similar to the source application edition programmed for the destination operating system and available at the destination retailer store. The similarity matcher can identify similar applications in any suitable manner including the manner described above. The similarity matcher can return application identifiers of the most similar canonical applications and or application identifiers of application editions classified under the most similar canonical applications that are programmed for the destination operating system .

At operation the request handler generates a reply based on the set of destination applications. The request handler can generate the reply according to the API and can include each destination application identifier of the set of destination applications in the reply . The request handler can include additional information corresponding to each of the destination applications e.g. a name of the destination application and an icon of the destination application and in the reply . It is noted that the reply may include more than one set of destination applications such that each set of destination applications corresponds to a respective source application identifier that was in the request for destination applications. The request handler can communicate the reply to the requesting device or any other suitable device.

The method described with respect to is provided for example only and not intended to be limiting. Variations of the method are contemplated and are within the scope of the disclosure.

Various implementations of the systems and techniques described within the specification can be realized in digital electronic and or optical circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include computer instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms computer readable medium and computer readable medium refer to any computer program product non transitory computer readable medium apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide computer instructions and or data to a programmable processor including a computer readable medium that receives computer instructions as a computer readable signal. The term computer readable signal refers to any signal used to provide computer instructions and or data to a programmable processor.

Implementations of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Moreover subject matter described in this specification can be implemented as one or more computer program products i.e. one or more modules of computer program instructions encoded on a computer readable medium for execution by or to control the operation of data processing apparatus . The computer readable medium can be a computer readable storage device a computer readable storage substrate a memory device a composition of matter effecting a computer readable propagated signal or a combination of one or more of them. The terms data processing apparatus computing device and computing processor encompass all apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them . A propagated signal is an artificially generated signal e.g. a computer generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus.

A computer program also known as an application program software software application script or code can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks . However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio player a Global Positioning System GPS receiver to name just a few . Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user one or more aspects of the disclosure can be implemented on a computer having a display device e.g. a CRT cathode ray tube LCD liquid crystal display monitor or touch screen for displaying information to the user and optionally a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

One or more aspects of the disclosure can be implemented in a computing system that includes a backend component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a frontend component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such backend middleware or frontend components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN and a wide area network WAN an inter network e.g. the Internet and peer to peer networks e.g. ad hoc peer to peer networks .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In some implementations a server transmits data e.g. an HTML page to a client device e.g. for purposes of displaying data to and receiving user input from a user interacting with the client device . Data generated at the client device e.g. a result of the user interaction can be received from the client device at the server.

While this specification contains many specifics these should not be construed as limitations on the scope of the disclosure or of what may be claimed but rather as descriptions of features specific to particular implementations of the disclosure. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable sub combination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a sub combination or variation of a sub combination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multi tasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

A number of implementations have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly other implementations are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results.

