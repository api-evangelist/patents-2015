---

title: System and method for accessing dimensional databases
abstract: In one embodiment, a method includes defining a slice of a dimensional database. The slice includes at least one dimension and at least one measurement and is expressable as a table. The method further includes building, in a structured query language (SQL) dialect, a single query that queries the slice and one or more non-dimensional databases. The SQL dialect represents the at least one dimension, the at least one measurement, and data attributes of the one or more non-dimensional databases. In addition, the method includes parsing the single query. The parsing includes generating a dimensional query for the dimensional database and a non-dimensional query for each of the one or more non-dimensional databases. Furthermore, the method includes executing the dimensional query on the dimensional database. Moreover, the method includes, for each non-dimensional database of the one or more non-dimensional databases, executing the non-dimensional query on the non-dimensional database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09495437&OS=09495437&RS=09495437
owner: Dell Software Inc.
number: 09495437
owner_city: Alison Viejo
owner_country: US
publication_date: 20150929
---
This patent application is a continuation of U.S. patent application Ser. No. 14 073 822 filed Nov. 6 2013 which application is hereby incorporated by reference.

The present invention relates generally to databases and more particularly but not by way of limitation to systems and methods for accessing dimensional databases.

Utilization of dimensional databases has become increasingly common. One type of dimensional database is a cube database such as an OLAP Online Analytical Processing cube. The cube database can include measurements and dimensions. A measurement in a cube database can be a data point or aggregation such as a numeric fact. These measurements can be categorized by the dimensions. Examples of dimensions include time geographic location customers and products.

One of the purposes of an OLAP cube is to provide aggregated data views to allow users analysts to drill down into these aggregations to discover trends and anomalies. The native query language for cube databases is usually a language other than SQL such as MultiDimensional eXpressions MDX . The syntax of MDX for example is different from the syntax of SQL. In addition in order to accommodate functional nuances of dimensional databases such as those described above MDX includes many features that are not natively included in SQL. As a consequence many users find it difficult to query and realize the benefits of dimensional databases.

Moreover as the value and use of information continues to increase individuals and businesses seek additional ways to process and store information. One option available to users is information handling systems. An information handling system generally processes compiles stores and or communicates information or data for business personal or other purposes thereby allowing users to take advantage of the value of the information. Because technology and information handling needs and requirements vary between different users or applications information handling systems may also vary regarding what information is handled how the information is handled how much information is processed stored or communicated and how quickly and efficiently the information may be processed stored or communicated. The variations in information handling systems allow for information handling systems to be general or configured for a specific user or specific use such as financial transaction processing airline reservations enterprise data storage or global communications. In addition information handling systems may include a variety of hardware and software components that may be configured to process store and communicate information and may include one or more computer systems data storage systems and networking systems.

In one embodiment a method includes on a computer system comprising at least one server computer defining responsive to user input a slice of a dimensional database. The slice includes at least one dimension and at least one measurement of the dimensional database. The slice is expressable as a table. The method further includes the computer system building in a structured query language SQL dialect a single query that queries the slice and one or more non dimensional databases. The SQL dialect represents using SQL constructs the at least one dimension the at least one measurement and data attributes of the one or more non dimensional databases. In addition the method includes the computer system parsing the single query. The parsing includes generating a dimensional query for the dimensional database and a non dimensional query for each of the one or more non dimensional databases. Furthermore the method includes the computer system executing the dimensional query on the dimensional database. Moreover the method includes for each non dimensional database of the one or more non dimensional databases the computer system executing the non dimensional query on the non dimensional database.

In one embodiment an information handling system includes at least one processing unit. The at least one processing unit is operable to implement a method. The method includes defining responsive to user input a slice of a dimensional database. The slice includes at least one dimension and at least one measurement of the dimensional database. The slice is expressable as a table. The method further includes building in a structured query language SQL dialect a single query that queries the slice and one or more non dimensional databases. The SQL dialect represents using SQL constructs the at least one dimension the at least one measurement and data attributes of the one or more non dimensional databases. In addition the method includes parsing the single query. The parsing includes generating a dimensional query for the dimensional database and a non dimensional query for each of the one or more non dimensional databases. Furthermore the method includes executing the dimensional query on the dimensional database. Moreover the method includes for each non dimensional database of the one or more non dimensional databases executing the non dimensional query on the non dimensional database.

In one embodiment a computer program product includes a non transitory computer usable medium having computer readable program code embodied therein. The computer readable program code is adapted to be executed to implement a method. The method includes defining responsive to user input a slice of a dimensional database. The slice includes at least one dimension and at least one measurement of the dimensional database. The slice is expressable as a table. The method further includes building in a structured query language SQL dialect a single query that queries the slice and one or more non dimensional databases. The SQL dialect represents using SQL constructs the at least one dimension the at least one measurement and data attributes of the one or more non dimensional databases. In addition the method includes parsing the single query. The parsing includes generating a dimensional query for the dimensional database and a non dimensional query for each of the one or more non dimensional databases. Furthermore the method includes executing the dimensional query on the dimensional database. Moreover the method includes for each non dimensional database of the one or more non dimensional databases executing the non dimensional query on the non dimensional database.

A common trait among many dimensional data stores is lack of SQL based access. Specialized programming can therefore be required to access the data in these databases and to combine that data with data from other databases. This can be problematic for those without a programming background. This disclosure describes systems and methods for accessing dimensional and non dimensional data stores using a SQL dialect. In a typical embodiment the SQL dialect permits both dimensional and non dimensional data stores to be queried via a single query without sacrificing various characteristic behaviors and functionalities of dimensional databases. For purposes of this patent application a SQL dialect refers to an extension of SQL to accommodate features not natively supported. More particularly various embodiments described herein relate to a SQL dialect for querying dimensional and non dimensional data stores.

An example of a SQL dialect that can be used to query and combine data from dimensional and non dimensional data stores will now be described. In one aspect in certain embodiments the SQL dialect permits dimensions and measurements of dimensional databases to be included in a SELECT statement. For example Table 1 below is a two dimensional representation of raw data that could be included in an exemplary dimensional database called Sales. According to the example of Table 1 the columns labeled Date Product and SalesPerson correspond to dimensions while the columns labeled Gross and Commission correspond to measurements.

A two dimensional view of dimensional data such as is illustrated by Table 1 may be periodically referenced herein as a slice of the dimensional database. In a typical embodiment the slice of the dimensional database can be represented via the SQL dialect using for example the query below which would generally include all data from Table 1.

By way of further example with respect to Table 1 if it were desired to see measurements over only the product dimension the query below could be fashioned using the SQL dialect which would generally yield the data shown in Table 2.

In addition the SQL dialect can permit for example dimensions or measurements to be specified in a WHERE clause. For instance the query below could be used to obtain the data shown in Table 3.

In another aspect the SQL dialect can permit one or more dimensional and one or more non dimensional data stores e.g. relational data stores to be queried in a single query. In a typical embodiment the SQL dialect enables utilization of a table identifier prefix to specify each table that is queried. For example in the query below the table identifier prefix a is used to represent a particular slice of the dimensional database discussed above. The particular slice is defined by a query specified in the SQL dialect which is then included in a subselect statement i.e. a SELECT statement that is nested e.g. within a FROM clause . The table identifier prefix b is used to represent a table called Sales from a relational database called RelationalHR. Exemplary data for the table called Sales is shown in Table 4. According to this example the query below would yield the data shown in Table 5.

In one embodiment the client accesses the database access system over a network such as a LAN or a WAN e.g. the Internet . The client can be implemented in one or more physical computing machines. For example the client can be a desktop laptop tablet wireless handheld device such as a smartphone or PDA or the like. The client can include software for enabling a user to interact with the database access system . As shown the client communicates with the database access system .

The database access system can generate one or more user interfaces that enable the user to access the database system using the SQL dialect. For illustrative purposes the database access system is shown to include a table builder a query builder and a report builder . The table builder generally includes functionality to enable definition of a slice of a dimensional data store. In certain embodiments the definition can be defined responsive to input from the user. As described above the slice can be characterized by a query established using the SQL dialect. In various embodiments the slice can be graphically selected by the user be directly specified by the user as a SQL dialect query etc.

In a typical embodiment the query builder serves as a tool to build using the SQL dialect a query that queries one or more slices of dimensional databases e.g. slices defined as described with respect to the table builder and any non dimensional data stores e.g. relational data stores . The report builder typically allows the user to define and view reports in terms of queries built by the query builder . It should be appreciated that the functionality of the table builder the query builder and the report builder can be combined into a single component redistributed among the same fewer or additional components and or the like.

The execution engine is operable to receive from the database access system a query in the SQL dialect. In a typical embodiment the execution engine translates the query from the SQL dialect to SQL and passes the translated query to the database system . In one embodiment the database system includes one or more servers which may be geographically co located or geographically dispersed e.g. in different data centers . The database system can also be implemented using one or more virtual machines. The database system and or the database access system can also be implemented in a shared resources environment such as a cloud computing environment or the like. For example the database system can be implemented as a machine instance or virtual machine running on a cloud computing platform such as the Amazon Elastic Computer Cloud EC2 provided by Amazon Web Services . Exemplary operation of the database system is described in detail in U.S. patent application Ser. No. 13 098 298 which application is hereby incorporated by reference.

In certain embodiments the database system includes features for mapping non relational data stores such as for example dimensional data stores to a relational schema. Once a data store has been mapped the database system can translate SQL statements received from the execution engine into a format for accessing the data store . As shown the database system includes a proxy layer a SQL engine and a storage engine including several plug ins . In the depicted embodiment the execution engine can access the database system through the proxy layer . In certain embodiments the proxy layer pre processes SQL statements received from the execution engine . For example the proxy layer may split or divide a SQL statement that accesses multiple back end data sources into separate queries tailored for each specific source. The proxy layer can also analyze each query in order to determine query optimizations that may improve performance. The proxy layer can also perform certain dynamic on the fly processing functions.

In certain embodiments the proxy layer provides pre processed SQL statements to a SQL engine . The SQL engine can be a module that generates a query execution plan for each SQL statement. The query execution plan can include information on what algorithm to use to execute the SQL statement which indices to access and so forth. From this execution plan the SQL engine generates a set of execution plan instructions. The SQL engine can provide these execution plan instructions to the storage engine via a storage engine interface.

The storage engine can be a module that communicates with one or more back end data stores such as dimensional and non dimensional data stores. A storage engine interface of the storage engine can include an API that allows the SQL engine to communicate the execution plan instructions to the data stores . The storage engine also includes a storage engine client that provides access to configuration data about the data stores . Configuration data stored by the storage engine client can include connectivity information regarding how to connect to a data store . This connectivity information can include for example network connectivity information such as IP address URL port and so forth web service interface information such as SOAP XML and or WSDL interfaces and the like. Further the configuration data can reflect the data store s that each plug in communicates with. When a plug in is initially added to the database system the storage engine can provide functionality for the plug in to register with the storage engine client to establish this configuration data.

In one embodiment the storage engine client receives the execution plan instructions from the storage engine interface and selects one or more plug ins to send the instructions to based on the configuration data. The plug in can then translate the instructions into one or more API calls other remote procedure calls web service calls REST calls or the like to one or more data stores

Several plug ins are shown in . Each plug in can be designed to communicate with one or more different data stores . Some example non relational data stores are shown including Apache Hadoop HBase Amazon SimpleDB and Azure Table Services . Other examples of non relational data stores that may be included in certain implementations can include among others HyperTable MongoDB CouchDB MemcacheDB Megastore GAE Cassandra Voldemort Tokyo Cabinet Dynamo Dynamite BigTable Scalaris Persevere and Redis. The non relational data store can also include business intelligence data sources file systems flat file databases or other data repositories.

Certain plug ins can also communicate with relational databases. For example a plug in is shown for communicating with Oracle. An ODBC plug in can also be provided for communicating with other relational databases via the Open Database Connectivity ODBC API. By providing functionality for communicating with relational databases as well as non relational data stores the plug ins can facilitate merging joining exporting or combining data from both relational and non relational data sources. As shown additional or fewer plug ins to other data stores can also be provided.

In one embodiment the database system includes some or all the features of the MySQL RDBMS. The plug ins can therefore be table handlers and or storage engines that interface with the MySQL engine. However the database system is not limited to MySQL implementations and can be used in conjunction with other database management systems such as PostgreSQL also known as Postgres or as a stand alone database system independent of any currently available commercial or non commercial database platforms.

The example database system architecture shown can also be varied considerably in other implementations. For example the database system could map one or more non relational and or relational data stores to one or more relational tables without employing a plug in or storage engine architecture. The proxy layer may also likewise be optional in some embodiments.

At block the table builder defines a slice of a dimensional database utilizing a SQL dialect such as for example the exemplary SQL dialect described above. The slice typically includes at least one measurement and at least one dimension from the dimensional database. In a various embodiments the table builder allows a user to graphically define the slice for example by permitting the user to choose a dimensional database and graphically select the at least one measurement and the at least one dimension from a list. In still other embodiments the table builder can permit the user to directly specify a SQL dialect query that constitutes the slice. It should be appreciated that that the block can be repeated for any number of slices that the user desires to specify. In addition in certain embodiments the table builder can allow the user to save the slice as a view of the dimensional database. Therefore in these embodiments the block can be omitted in cases where the slice has already been specified and saved.

At block the query builder builds in the SQL dialect a single query that queries one or more data sources. In various embodiments the single query can be built responsive to user input. The single query can query for example the slice defined at the block as well as one or more non dimensional data stores e.g. one or more relational databases . In some embodiments the user can also be permitted to directly specify the single query in the SQL dialect. As described above the single query represents using SQL constructs each dimension and each measurement of each slice included therein. In addition the single query includes data attributes of each of the one or more non dimensional databases.

At block the single query is parsed to generate a separate query for each data store that is queried. For example a dimensional query e.g. in MDX could be specified for each dimensional database that is queried. In certain embodiments the block can include the execution engine translating the single query to SQL and the database system parsing the translated single query to generate each separate query. At block the database system executes each separate query on the respective data source. At block the database system combines query results and returns to the execution engine resultant data responsive the single query. At block the resultant data is formatted and presented to the user. For example the block can encompass the query builder presenting the resultant data to the user the report builder generating a report for further action or distribution and or the like.

The one or more dimensions the one or more measurements and the one or more virtual columns are expressable for example as columns in a table. In general the one or more dimensions and the one or more measurements correspond to dimensions and measurements respectively as those dimensions and measurements already exist in the dimensional database. In contrast the one or more virtual columns are each a new column of data that do not have a direct counterpart in the dimensional database e.g. as a dimension or measurement but that can be derived in a rule based fashion. For example the one or more virtual columns can provide a customized or manipulated form of a dimension or measurement of the dimensional database. In this manner the one or more virtual columns can provide greater user control and customization of queries. In some embodiments the one or more virtual columns are pre specified for the dimensional database and are available for selection by the user. In other embodiments the user is permitted to specify rules that constitute all or part of the one or more virtual columns .

An example of the slice will now be described with respect to Tables 6 7. Table 6 illustrates in a two dimensional format raw data that could be included in the dimensional database such that the columns labeled Date Product and SalesPerson represent dimensions and the columns labeled Gross and Commission represent measurements. According to this example a user may desire to view and analyze sales by quarter. Therefore the one or more virtual columns could include a Date Quarter virtual column that derives an appropriate quarter for example from the Date dimension of the dimensional database. The Date Quarter virtual column would establish a grouping of the Date dimension into four three month time periods per year. For example the query below could define a slice such that when the query is executed by the execution engine the query would yield the data shown in Table 7.

At block the table builder receives a selection of a dimensional data source from a user. At block the table builder provides a listing of measurements dimensions and virtual columns associated with the selected dimensional data source. In some embodiments the table builder also allows the user to define and select a new virtual column. At block the table builder receives a selection of at least one dimension at least one measurement and any desired virtual columns. At block the table builder builds a query in a SQL dialect such as for example the exemplary SQL dialect described above. At block the table builder provides the user a live view of the slice of the dimensional database. In a typical embodiment the user is permitted to continue to manipulating the slice for example by repeating all or part of the process and subsequently viewing changes to the live view.

At block the query builder receives a selection of one or more data sources from a user. At block the query builder provides the user data attributes of each of the one or more data sources that are available for inclusion in a query. In the case of dimensional data sources the query builder provides the user the columns including any virtual columns of previously specified slices thereof. At block the query builder permits the user to graphically build a single query by selecting data attributes of each of the one or more data sources. At block the query builder receives the user s selected data attributes. At block the query builder constructs the single query in the SQL dialect.

For purposes of this disclosure an information handling system may include any instrumentality or aggregate of instrumentalities operable to compute calculate determine classify process transmit receive retrieve originate switch store display communicate manifest detect record reproduce handle or utilize any form of information intelligence or data for business scientific control or other purposes. For example an information handling system may be a personal computer e.g. desktop or laptop tablet computer mobile device e.g. personal digital assistant PDA or smart phone server e.g. blade server or rack server a network storage device or any other suitable device and may vary in size shape performance functionality and price. The information handling system may include random access memory RAM one or more processing resources such as a central processing unit CPU or hardware or software control logic ROM and or other types of nonvolatile memory. Additional components of the information handling system may include one or more disk drives one or more network ports for communicating with external devices as well as various input and output I O devices such as a keyboard a mouse touchscreen and or a video display. The information handling system may also include one or more buses operable to transmit communications between the various hardware components.

Although various embodiments of the method and apparatus of the present invention have been illustrated in the accompanying Drawings and described in the foregoing Detailed Description it will be understood that the invention is not limited to the embodiments disclosed but is capable of numerous rearrangements modifications and substitutions without departing from the spirit of the invention as set forth herein.

