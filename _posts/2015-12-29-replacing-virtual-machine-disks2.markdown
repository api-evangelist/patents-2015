---

title: Replacing virtual machine disks
abstract: At least one target virtual disk descriptor that describes at least one virtual disk associated with an existing target virtual machine in a target virtualized environment is merged with at least one source virtual disk descriptor that describes at least one virtual disk associated with a source. The merging is carried out to obtain at least one merged virtual disk descriptor compatible with the target virtualized environment. The at least one virtual disk associated with the existing target virtual machine in the target virtualized environment is replaced with the at least one virtual disk associated with the source, in accordance with the at least one merged virtual disk descriptor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09632814&OS=09632814&RS=09632814
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09632814
owner_city: Armonk
owner_country: US
publication_date: 20151229
---
This application is a continuation of U.S. patent application Ser. No. 13 688 692 filed Nov. 29 2012 the complete disclosure of which is expressly incorporated herein by reference in its entirety for all purposes.

The present invention relates to the electrical electronic and computer arts and more particularly to cloud computing and the like.

A virtual machine VM is a software implementation of a computer that executes programs like a physical machine. Virtual machines may have one or more virtual disks associated therewith.

In one aspect an exemplary method includes the step of merging at least one target virtual disk descriptor that describes at least one virtual disk associated with an existing target virtual machine in a target virtualized environment with at least one source virtual disk descriptor that describes at least one virtual disk associated with a source. The merging is carried out to obtain at least one merged virtual disk descriptor compatible with the target virtualized environment. A further step includes replacing the at least one virtual disk associated with the existing target virtual machine in the target virtualized environment with the at least one virtual disk associated with the source in accordance with the at least one merged virtual disk descriptor.

As used herein facilitating an action includes performing the action making the action easier helping to carry the action out or causing the action to be performed. Thus by way of example and not limitation instructions executing on one processor might facilitate an action carried out by instructions executing on a remote processor by sending appropriate data or commands to cause or aid the action to be performed. For the avoidance of doubt where an actor facilitates an action by other than performing the action the action is nevertheless performed by some entity or combination of entities.

One or more embodiments of the invention or elements thereof can be implemented in the form of a computer program product including a computer readable storage medium with computer usable program code for performing the method steps indicated. Furthermore one or more embodiments of the invention or elements thereof can be implemented in the form of a system or apparatus including a memory and at least one processor that is coupled to the memory and operative to perform exemplary method steps. Yet further in another aspect one or more embodiments of the invention or elements thereof can be implemented in the form of means for carrying out one or more of the method steps described herein the means can include i software module s stored in a computer readable storage medium or multiple such media and implemented on a hardware processor or ii a combination of software modules and some hardware modules any of i ii implement the specific techniques set forth herein.

Techniques of the present invention can provide substantial beneficial technical effects. For example one or more embodiments may provide one or more of the following advantages 

These and other features and advantages of the present invention will become apparent from the following detailed description of illustrative embodiments thereof which is to be read in connection with the accompanying drawings.

Cloud computing is a model of service delivery for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks network bandwidth servers processing memory storage applications virtual machines and services that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics at least three service models and at least four deployment models.

On demand self service a cloud consumer can unilaterally provision computing capabilities such as server time and network storage as needed automatically without requiring human interaction with the service s provider.

Broad network access capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms e.g. mobile phones laptops and PDAs .

Resource pooling the provider s computing resources are pooled to serve multiple consumers using a multi tenant model with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction e.g. country state or datacenter .

Rapid elasticity capabilities can be rapidly and elastically provisioned in some cases automatically to quickly scale out and rapidly released to quickly scale in. To the consumer the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.

Measured service cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service e.g. storage processing bandwidth and active user accounts . Resource usage can be monitored controlled and reported providing transparency for both the provider and consumer of the utilized service.

Software as a Service SaaS the capability provided to the consumer is to use the provider s applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser e.g. web based email . The consumer does not manage or control the underlying cloud infrastructure including network servers operating systems storage or even individual application capabilities with the possible exception of limited user specific application configuration settings.

Platform as a Service PaaS the capability provided to the consumer is to deploy onto the cloud infrastructure consumer created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks servers operating systems or storage but has control over the deployed applications and possibly application hosting environment configurations.

Infrastructure as a Service IaaS the capability provided to the consumer is to provision processing storage networks and other fundamental computing resources where the consumer is able to deploy and run arbitrary software which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems storage deployed applications and possibly limited control of select networking components e.g. host firewalls .

Private cloud the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on premises or off premises.

Community cloud the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns e.g. mission security requirements policy and compliance considerations . It may be managed by the organizations or a third party and may exist on premises or off premises.

Public cloud the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.

Hybrid cloud the cloud infrastructure is a composition of two or more clouds private community or public that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability e.g. cloud bursting for load balancing between clouds .

A cloud computing environment is service oriented with a focus on statelessness low coupling modularity and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes.

Referring now to a schematic of an example of a cloud computing node is shown. Cloud computing node is only one example of a suitable cloud computing node and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention described herein. Regardless cloud computing node is capable of being implemented and or performing any of the functionality set forth herein.

In cloud computing node there is a computer system server which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with computer system server include but are not limited to personal computer systems server computer systems thin clients thick clients handheld or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like.

Computer system server may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. Computer system server may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

As shown in computer system server in cloud computing node is shown in the form of a general purpose computing device. The components of computer system server may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to processor .

Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnects PCI bus.

Computer system server typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system server and it includes both volatile and non volatile media removable and non removable media.

System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . Computer system server may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces. As will be further depicted and described below memory may include at least one program product having a set e.g. at least one of program modules that are configured to carry out the functions of embodiments of the invention.

Program utility having a set at least one of program modules may be stored in memory by way of example and not limitation as well as an operating system one or more application programs other program modules and program data. Each of the operating system one or more application programs other program modules and program data or some combination thereof may include an implementation of a networking environment. Program modules generally carry out the functions and or methodologies of embodiments of the invention as described herein.

Computer system server may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with computer system server and or any devices e.g. network card modem etc. that enable computer system server to communicate with one or more other computing devices. Such communication can occur via Input Output I O interfaces . Still yet computer system server can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system server via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

Referring now to illustrative cloud computing environment is depicted. As shown cloud computing environment comprises one or more cloud computing nodes with which local computing devices used by cloud consumers such as for example personal digital assistant PDA or cellular telephone A desktop computer B laptop computer C and or automobile computer system N may communicate. Nodes may communicate with one another. They may be grouped not shown physically or virtually in one or more networks such as Private Community Public or Hybrid clouds as described hereinabove or a combination thereof. This allows cloud computing environment to offer infrastructure platforms and or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices A N shown in are intended to be illustrative only and that computing nodes and cloud computing environment can communicate with any type of computerized device over any type of network and or network addressable connection e.g. using a web browser .

Referring now to a set of functional abstraction layers provided by cloud computing environment is shown. It should be understood in advance that the components layers and functions shown in are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted the following layers and corresponding functions are provided 

Hardware and software layer includes hardware and software components. Examples of hardware components include mainframes in one example IBM zSeries systems RISC Reduced Instruction Set Computer architecture based servers in one example IBM pSeries systems IBM xSeries systems IBM BladeCenter systems storage devices networks and networking components. Examples of software components include network application server software in one example IBM Web Sphere application server software and database software in one example IBM DB2 database software. IBM zSeries pSeries xSeries BladeCenter WebSphere and DB2 are trade marks of International Business Machines Corporation registered in many jurisdictions worldwide .

Virtualization layer provides an abstraction layer from which the following examples of virtual entities may be provided virtual servers virtual storage virtual networks including virtual private networks virtual applications and operating systems and virtual clients.

In one example management layer may provide the functions described below. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing provide cost tracking as resources are utilized within the cloud computing environment and billing or invoicing for consumption of these resources. In one example these resources may comprise application software licenses. Security provides identity verification for cloud consumers and tasks as well as protection for data and other resources. User portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement SLA planning and fulfillment provide pre arrangement for and procurement of cloud computing resources for which a future requirement is anticipated in accordance with an SLA.

Workloads layer provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation software development and lifecycle management virtual classroom education delivery data analytics processing transaction processing and mobile desktop.

A Hardware Infrastructure as a Service HIaaS cloud provides bare bones virtual machines as a service. It may also provide an operating system OS and even software but no support is typically provided for the OS or software. A Managed Infrastructure as a Service MIaaS cloud provides full service virtual machines. The service may e.g. include OS patching and support for security and compliance of the OS. One significant aspect of MIaaS is simpler management via standardization to a certain set of catalog images from which instances are generated automatic linkage of these instances to management tools during deployment and or not giving customers administration privileges on the OS level so that the operating systems on the instances remain as the cloud administrators configure them.

An MIaaS cloud may not naturally come with import or registration features for foreign instances inasmuch as a significant aspect of MIaaS is simpler management via standardization to a certain set of catalog images from which instances are generated automatic linkage of these instances to management tools during deployment and typically not giving customers administration privileges on the operating system OS level so that the operating systems on the instances remain as the cloud administrators configure them. Thus in migrating to an MIaaS cloud it is typically not feasible to simply use P2V physical to virtual conversion on source instances or to directly copy already virtualized instances and then expect them to be run on cloud hypervisors. This is so because they would not fulfill the aforementioned criteria through which simpler management is achieved in the MIaaS cloud and thus they would not be acceptable to the management of the MIaaS cloud.

Furthermore with regard to MIaaS clouds the standard registration i.e. making a new instance known to the general IaaS cloud management systems as well as the specific management systems of an MIaaS cloud is typically inbuilt into the provisioning from catalog images. Advantageously one or more embodiments provide a new registration procedure wherein foreign instances can be accommodated within migration to an MIaaS cloud. Indeed one or more embodiments advantageously provide a system and method for rapid migration into MIaaS and more generally IaaS clouds. The method includes transfer of the instance to the cloud in image form adjustments of the instance running or in image form to cloud standards and registration of the instance into cloud OSS and BSS systems Operation and Business Support Systems . Optional additional steps address prior analysis testing and handling failures and or starting and ending change windows and actual downtimes in order to minimize risk and outages.

One or more embodiments advantageously provide a systematic and even automated method of rapidly migrating customer instances into MIaaS clouds that does not involve a reinstall procedure. One or more embodiments are useful with MIaaS cloud migration and are capable of physical to virtual style instance importation.

One or more embodiments enhance the ability to standardize both infrastructure per se and the management of such infrastructure. It is believed that such standardization will in turn allow reduction in IT operational costs and permit further automation. One or more embodiments provide techniques for migration into an MIaaS cloud which are significantly less expensive than techniques that require reinstall.

As noted above one or more embodiments provide a migration technique with one or more of the following advantages 

With attention now to begin with an instance in an existing customer environment seen in which it is desired to migrate. In step transfer the instance to the cloud in image form. If this is not successful retain the original customer version and re plan the migration for example retain it in its original environment or perform a classical migration into a service provider environment where it can remain a physical instance or make significant changes on the instance so that it becomes virtualizable. On the other hand if step is successful in step carry out adjustments of the instance in running and or in image form to ensure that it complies with cloud standards. If this is not successful retain the original customer version and re plan the migration for example virtualize it in the customer environment or a service provider environment without cloud standards or an HIaaS cloud or perform a more complex reinstall migration wherein individual software components are newly installed and customer data are transferred individually rather than within the entire image. On the other hand if step is successful in step carry out registration of the instance into the cloud OSS and BSS systems. If step is not successful retain the original customer version and re plan the migration for example by the same approaches as when steps or failed. On the other hand if step is successful the result is successful migration to the MIaaS cloud .

Note that initial sub steps for the cloud registration may take place before the adjustments or may be interleaved with the adjustments. However from a logical stand point the final registration i.e. final acceptance of the imported instance as a cloud managed instance should be after the end of the adjustments.

Turning now to a non limiting exemplary method is depicted therein with greater detail. A customer environment is connected to an MIaaS cloud environment via a wide area network WAN or the like. Initially a discovery process is carried out to determine both the physical and virtual instances and their configurations in the customer environment . Analysis and planning is then carried out in step . If the results are unfavorable other methods such as physical to physical P2P migration application reinstallation retention of the legacy systems and the like are pursued as shown at . Also if either of steps indicate that remediation i.e. small changes to the instances to make them compatible with the cloud is required the same is carried out at and then process flow returns to step . On the other hand if step indicates that migration using one or more techniques disclosed herein is feasible flow proceeds to baseline test and backup in step . In step as shown at a set of test cases are run to prove that the source system fulfills criteria that are desired to be maintained in the target environment e.g. that it still tests correct under all of its functional test cases or performance claims. This is done to ensure that any errors already present are fixed before the migration process. Furthermore a back up process is carried out as shown at to permit recovery in case of any issues encountered in the migration process. Preferably before finalizing the backup applications on the physical or virtual instance or are stopped so that no further changes take place in the customer environment under conditions such that they would not be copied to the MIaaS cloud environment. Processing then proceeds to step wherein the instances to be migrated are captured. One or more illustrative embodiments focus on specific aspects of migrating to an MIaaS cloud which are largely per instance. As to the overall migration it is typically done in waves of multiple instances each e.g. per weekend attempting to keep workloads or interacting instances within one wave. Such aspects have been disclosed e.g. in Athey at al. System and method for object migration using waves United States Patent Application Publication 20110213883 Sep. 1 2011 and Devarakonda et al. Total cost based migration waves planning United States Patent Application Publication 20120109844 May 3 2012 both of which are expressly incorporated herein by reference in their entireties for all purposes.

As seen at this instance capture step can include for example both physical to virtual P2V and virtual to virtual V2V techniques with one or more suitable tools. One non limiting example of a suitable tool is PlateSpin Migrate a physical virtual conversion tool for fast and efficient P2V more broadly anywhere to anywhere migrations it is available from NetIQ Corporation Houston Tex. USA another is VMware vCenter Converter available from VMware Inc. Palo Alto Calif. USA. In one or more non limiting exemplary embodiments the end result of step is a Virtual Machine Disk Format VMDK file.

It is to be emphasized that many product names are mentioned herein these are intended as examples for the skilled artisan and to convey the applicants understanding of the best mode. They are not intended to limit the claims unless expressly recited therein but rather are to be considered exemplary of corresponding generic software products e.g. PlateSpin Migrate is broadly representative of physical virtual conversion tools.

As seen in step the captured instances are then transported into the cloud location via network . Data outside the boot disk may be transported separately from the aforementioned vmdk file seen at in particular if it is large and the data transport might start earlier. As noted at the instances and data are transported through network using appropriate tools to control the transfer. Non limiting examples of such tools include the aforementioned PLATESPIN tool as well as the Softek Transparent Data Migration Facility TDMF tool for data registered mark of International Business Machines Corporation Armonk N.Y. USA . Data is typically not affected by special aspects of MIaaS cloud i.e. it can be migrated and linked back with the vmdk in usual ways. Thus further details about the data are omitted from the figure to avoid clutter.

In step functional testing is carried out on the transported instance s that was restarted from the image on a cloud hypervisor. As seen at this can include for example playing a set or subset of test cases this can be repeated several times between adjustments. Also it should be noted that upon initial arrival in cloud environment the transported instances reside within MIaaS cloud landing zone . If functional testing is successful at this time processing flow proceeds to instance adjustment and adoption . This is a significant step to modify the instance so that it can run in the standard MIaaS environment. After all adjustments and possibly between certain adjustment steps functional testing is repeated as shown by the backwards error from Step to . After each successful functional test instances can be backed up i.e. a snapshot of the instance can be taken as shown at step e.g. as vmdk files in an efficient instance repository for later reference as a most recent correct seeming state of the instance. If functional testing is successful after all adjustments the transported instance s are instantiated on cloud hypervisor within MIaaS cloud production zone . On the other hand if functional testing is not successful in one of its repetitions processing flow proceeds to remediation step . The remediation process can proceed via a number of avenues. Typically error messages will be analyzed and related to the latest changes. These latest changes are the virtualization and new hypervisor in the first execution of the functional testing . In subsequent executions they are the changes by the adjustments since the previous execution of the functional. For this it may be useful to refer to a snapshot of the instance before these last changes. If remediation of these errors is not successful which might be determined by a rerun of the functional test flow returns to step i.e. the migration of this instance is stopped at least for the moment and the backup is used to restore the source instance or in the customer environment . When remediation is successful the processing proceeds as if that functional test had succeeded at once i.e. with the first or next adjustment or if all adjustments are done with instantiating the instance on cloud hypervisor within MIaaS cloud production zone .

Within the instance adjustment and adoption step the instances on hypervisor are adjusted to cloud delivery standards and adopted into the cloud BSS and OSS as seen at . As seen at this process employs provisioning flows extended by adjustment subflows. For example the standard provisioning flow of the MIaaS i.e. for instances chosen from the cloud catalog rather than migrated may register a new instance in an asset management system a monitoring system and start billing and ac counting for it. This functionality can be reused from the standard provisioning flow. On the other hand the standard provisioning flow may not install a certain monitoring agent that the MIaaS cloud requires on the normal instances because they would be preinstalled in the cloud catalog images. Hence installing this agent would be part of the special adjustment flows. Similarly an update of the security patches to the level that the cloud catalog images have may be an extra step in the adjustment flows. When the functional testing after all adjustment steps finally has successfully completed as noted instantiation occurs on cloud hypervisor within production zone .

In one or more embodiments the landing zone is a special zone added for migration to an MIaaS cloud because when the instances are first started on a hypervisor the MIaaS cloud environment see item in order to test and adjust they do not yet fulfill cloud standards and thus the normal cloud management cannot handle them. They may also not fulfill the security standards that the OS management in the cloud provides and assumes. For this reason one may physically separate the landing zone and the production zone at least by using different servers to host the hypervisors and separate them by firewalls that only let the controlled information through as indicated by the two arrows between the zones. Also the storage systems may be separate. Another advantage of physical separation is that the cloud management systems such as capacity and performance management then don t have to deal with hypervisor s that are partially filled with normal managed cloud instances and partially with as yet unmanageable imported instances. However it is also conceivable to use logical separation i.e. trust the cloud hypervisors to not let the potentially insecure imported images impact the others and to extend the cloud management systems to deal with partitioned hypervisors.

Once the pertinent migrated instances are instantiated on cloud hypervisor in production zone user acceptance testing may be conducted for example to verify that performance is equivalent to the baseline. If not so remediation is carried out at to correct the instances on hypervisor . This remediation process can make use of instance repository or alternate techniques as appropriate if this happens the instance should be removed from the production zone again until it is remediated. The test cases in the user acceptance test should preferably be identical to those in the baseline test . They often cover multiple instances together if the user relevant function is performed by multiple instances e.g. a web server an application server and a database. In contrast the functional test may be per instance only. When testing is successful cut over is carried out in step taking into account any customer domain name server DNS changes or the like as seen at . Upon completion of cut over as seen at the migrated instances operate in the MIaaS cloud production zone in a business as usual BAU manner.

In it will be appreciated that in one or more exemplary embodiments steps and are in the scope of the customer while steps and are in the scope of the cloud services provider. Steps and are of a mixed nature between both parties.

After transport as seen at physical and virtual instances are now both virtualized on cloud provider hardware and hypervisor in the landing zone as seen at respectively and there the adjustments and testing take place. Migrated data is stored in shared storage . Preferably the source instances have been shut down before the transfer as explained above with respect to the backup . One extreme case is that they are not running at all physical server switched off for instance removed from hypervisor for but typically one would only stop the services on them so that no changes are made that would be lost when business as usual resumes in the cloud production zone . If read only services can be distinguished e.g. browsing on informational web pages those can keep running. Furthermore one would typically retain the instances and still in the customer management tools in case migration fails so that operation in the customer environment could resume quickly.

After cut over during the cloud BAU business as usual state as seen at physical virtual and storage resources in the customer environment are shut down and storage used by them is released. Meanwhile any required adjustments and remediation have been completed as described with regard to physical and virtual instances are now both virtualized on cloud provider hardware and hypervisor in the cloud production zone as seen at respectively. Migrated data is still stored in shared storage in this embodiment of partial physical separation of landing zone and production zone. With full physical separation there would be two different storage systems one in the landing zone and one in the production zone and the data would reside on the former in phase and on the latter in phase . BAU cloud processing occurs under control of cloud OSS and BSS systems Operation and Business Support Systems seen at . The customer management tools may be provided with an interface to production zone . However this typically only concerns those specific tools that manage on the application layer while tools that perform OS level functions such as OS performance management have been replaced by the cloud OSS in . For example the instance initially or then or finally or may contain a database and the customer may have a database management tool as part of . An MIaaS cloud in contrast to a PaaS cloud typically does not perform database management. So the customer database management tool gets a link to this database on instance or . This approach uses the normal way in which customers of the cloud link to their instances of the cloud e.g. a VPN it is not in conflict with any zoning or administration constraints of the MIaaS cloud. It should be noted that shows an exemplary time of one hour to two days to move from initial state to after transport state and an exemplary time of two hours to one day to move from after transport state to after cutover cloud BAU state . These values are intended to provide helpful example for the skilled artisan but are not intended to be limiting.

One or more embodiments thus provide a method for migrating an instance into a cloud including transferring the instance to the cloud in image form adjusting of the instance to cloud standards and registration of the instance into cloud management systems. In some cases registration is done by a variant of the cloud provisioning method in which picking up a catalog image is replaced by picking up a transferred instance. In some embodiments cloud management systems include an operational support system and a business support system. In some embodiments cloud standards include one or more of security standards infrastructure standards patch management standards and infrastructure management tool standards.

Furthermore in one or more embodiments adjustment is done by a workflow defined in a workflow engine. In some cases one or more adjustments are done in the workflow by special tools such as a patch management tool.

In some embodiments before the transfer step analysis is carried out on the instance to determine whether it is suitable for the cloud and the given migration method and only suitable instances are considered further. Furthermore in some embodiments tests are carried out at one or more of the times before the transport after the transport between different adjustments after adjustments and after migration and remediation and or back out occur if one or more of the tests fail. In some cases multiple instances are treated as a whole in one or more of the decisions to migrate i.e. whether suitable for cloud as mentioned earlier in this paragraph and or in the tests and back out decisions.

Furthermore one or more embodiments include discovery actual handling of failures starting and ending change windows and actual downtimes detailed interleaving of adjustment and registration and or the cut over step.

IaaS clouds Infrastructure as a Service is a common term for clouds that primarily offer their users virtual machines VMs rather than also software on the VMs referred to as PaaS platform as a service or even software without access to the VMs referred to as Software as a Service or business processes BPaaS .

HIaaS cloud A Hardware Infrastructure as a Service cloud provides bare bone virtual machines as a service. It may also provide an operating system OS and even software but typically no support is provided for the OS or software e.g. Amazon Elastic Compute Cloud Amazon EC2 available from Amazon Web Services LLC Seattle Wash. USA .

MIaaS Clouds A Managed Infrastructure as a Service cloud provides full service virtual machines. The service may e.g. include OS patching and support for security and compliance of the OS e.g. IBM SmartCloud Enterprise also known as IBM SCE cloud environment available from International Business Machines Corporation Armonk N.Y. USA 

Instance An operating system instance together with all software running on this operating system. It may be physical i.e. directly running on a server or virtual i.e. already running on a hypervisor .

Catalog image Image in a cloud catalog to be used if new instances are created in the cloud from scratch rather than by rapid migration.

Provisioning This is the standard mechanism of ordering VM instances in an IaaS the user orders a VM from the catalog and the corresponding actual image is instantiated into a running instance.

Reinstall migration From the point of view of an MIaaS cloud the standard way of moving an application into same is to first provision a catalog image and then to reinstall necessary software components source code configurations and data into it. However this is typically a very time consuming and costly process.

Image based migration Image based migration uses customer instances for migration of the application to the cloud. In classic virtualization image based migration is a standard P2V and can be very fast. However because the image generated directly from the source instance does not enable the management part of the MIaaS cloud heretofore image based migration has not been feasible with MIaaS clouds.

Rapid migration to MIaaS cloud An extension of image based migration in accordance with one or more embodiments which can handle the challenges of image based migration in an MIaaS cloud.

Referring now to with regard to rapid migration the skilled artisan will appreciate that there are typically many things on a server for example middleware or other off the shelf software MW Infrastructure software Infra such as monitoring and provisioning agents custom code and or scripts e.g. for backup scheduled cleanup tasks data transfers and the like. Of course the server includes hardware and an operating system OS typically with registry and users not separately numbered to avoid clutter . As seen at the current server may be a simple physical server with an OS data and software or may already be virtualized via a suitable hypervisor. Middleware such as typically has configurations data e.g. databases code e.g. SQL scripts and is often associated with other scripts such as database administrator scripts . Most of these do not need to be in standard locations. We have found that it is typically quite difficult to automatically find everything that is related to the running instances even of very common standard software such as web servers and databases.

In one or more embodiments rapid migration in accordance with aspects of the invention is believed to be particularly suitable for an infrastructure only migration and for unchanged major OS version i.e. when the goal is to get to an MIaaS cloud but not to make other major changes. As seen at when the same server is moved into the cloud it now runs on cloud hardware and hypervisor is employed. Other than that there are limited changes 

One or more embodiments make use of the insight that it is advantageous to update the few things that change rather than individually pick up all those that don t change with a risk of forgetting something. Referring now to the OS MW including its configurations infrastructure code scripts code and data are kept together moved into the cloud and then small changes are made to OS and infra . Advantageously in this approach if anything does not work in a change it is most likely only the cloud service provider side infrastructure management as that gets newly added not the application which remains essentially untouched . Of course this assumes in the first place that the application can in fact be virtualized. The skilled artisan will of course appreciate given the description herein that extra care should be taken e.g. that the new resources of the server additionally support the cloud management agents.

Consider now core options of interleaving adjustments and registration in rapid migration i.e. in the new technique described along i.e. Steps and in or elements in . Purely by way of example and not limitation consider in particular several core options to add a registration flow for imported instances to an MIaaS cloud 

First option Run the provisioning flow for the closest related catalog image which the analysis and plan phase decided that the instance will be adjusted to simulate . Then swap the instance generated from the catalog image for the imported instance on which most adjustments have been already done e.g. additional patching security compliance adaptions . This may be done on the image file level for suspended images. Some adjustments on the imported instance may be needed after the provisioning e.g. if the provisioned instance had some identity such as an IP address that now needs to be transferred to the imported instance because the MIaaS management requires it but cannot tell it in advance. Note that such swapping and post swap adjustment cannot be done by a user of an unmodified MIaaS cloud it needs special authorization and in order to be reasonably efficient and secure automation tooling to be added to the MIaaS management system.

Second option see Modify the provisioning flow so that it still performs most of the registration work but at some point picks up the image of the imported instance instead of the catalog image. If the provisioning flow performs real time actions on the images e.g. agent installs those can also be reused rather than being done in adjustments before the registration flow . If possible retain the common parts of the provisioning flow and the new registration flow as actual common components common sub programs sub workflows or the like 

Referring now to depicted therein is an exemplary provisioning flow in an MIaaS cloud environment IBM SCE is one non limiting example . In step a customer accesses customer portal and service catalog which are part of the BSS of the MIaaS. In one or more embodiments Adoption or import is a new service type in the catalog compared with the MIaaS cloud as designed without the new rapid migration mechanism and is available for certain roles. In some cases this aspect can be implemented by a relatively small change in an existing user interface UI of the MIaaS cloud. Appropriate parameters may be passed through to a provisioning process described below. The service request may involve as shown a service catalog receipt of a request fulfillment of the request and updates to virtual machine provisioning status. In some cases server resource usage status is shown during use.

In step provisioning is carried out with provisioning engine . MIaaS Provisioning can include receiving the request from the portal using the image to create an instance the creation of a virtual server including provision of resource requirements such as CPU memory disk hostname IP address and or sub nets installation of agents for management configuration of agents connection to virtual local area networks VLANs and or server validation. One or more embodiments with regard to registration of imported images as modification to such a provisioning flow pick up the imported instance instead of a catalog image in the sub step Use image to create instance of step . Hence this sub step becomes the creation of an instance in the production zone from the imported instance in relation to . If the landing zone is physically separated from the production zone this involves actually copying the adjusted instance from the landing zone to the production zone. If the landing zone is virtual that instance may even be kept in place but an address name pointer of it is now given to the provisioning flow.

In one or more embodiments of the rapid migration method during creation of the virtual server the exact CPU memory and disk are created as in the imported instance or a plan from Step because the cloud may not have images with the exact resource sizes as the imported image the next larger sufficient size will typically be chosen . Some embodiments employ dual homed instances which have a cloud services provider internal IP address for cloud management system of the MIaaS to access the instance and a customer facing customer address this is typically different from the old IP address of the imported instance and thus the address on that instance must be changed to the customer facing address that the cloud management system provided.

It should be noted that words such as must or shall discuss items that are mandatory in an exemplary embodiment but may be optional in other embodiments. No limitation to the claims is intended unless recited therein.

In some cases with regard to the installation and or configuration of agents a new flow is provided for handling prior agents such as for example a performance monitoring agent or a backup agent if the MIaaS cloud uses different agents or tools for the same purpose. Concrete non limiting examples include Altiris products available from Symantec Corporation Sunnyvale Calif. USA and products available from NetIQ Corporation Houston Tex. USA. The handling of such agents might include for example un install or an authorization reduction from administrator rights to user rights or a policy change in the tool. Alternatively however this flow can be done as adjustments in the landing zone before even starting the provisioning flow.

In step the virtual server is created. In the non limiting example of this can be carried out using the virtualization manager for INTEL technology e.g. making use of VMware ESX VMs VMware Inc. Palo Alto Calif. USA as shown at and or the virtualization manager for POWER technology e.g. making use of IBM PowerVM logical partitions LPARs as shown at International Business Machines Corporation Armonk N.Y. USA . In either case suitable storage such as storage area network SAN storage can be employed. Other types of technologies can be employed in other embodiments. This step can include taking the request from the provisioning engine allocating appropriate computing resources such as CPU RAM disk space and so on copying the image over placing same on the physical server booting the operating system and middleware and or applying IP and hostname. In some embodiments of the adoption of such a flow for registration in rapid migration a further step includes preparing custom access for tests. In MIaaS provisioning without migration such a test is not needed because this is a standard catalog instance but here an imported adjusted instance is being dealt with and it will be appropriate to carry out the user acceptance test .

In step server validation is carried out with the aid of provisioning engine . This can involve for example checking for correct installation and configuration of management agents a security sweep as to ports password policies and the like checking validity of user IDs running a health check documenting server information into a master database and or reporting to a suitable management tool such as the IBM Service Delivery Manager SDM available from International Business Machines Corporation Armonk N.Y. USA.

One or more embodiments advantageously employ automation for typical modifications in the adjustment workflow so that these tests e.g. security sweeps typically do not fail in fact these validation steps of the MIaaS cloud can be seen as the primary specification of what adjustments must be made in migration into this MIaaS cloud.

Step includes a final validation more on the BSS layer in contrast to the OSS layer validation in Step . This can include for example the SDM checking the validation report confirming requests approving release of the VM i.e. instance to the customer the cloud services provider adding customer users to the servers if not already there and or providing server access to the customer. In some embodiments in migration the access will be provided earlier for testing as described for step

Exemplary non limiting details will now be provided regarding a number of steps that may be carried out in one or more embodiments.

In some embodiments with regard to a first run before first transformation planning standard tools such as IBM Tivoli Application Dependency Discovery Manager TADDM available from International Business Machines Corporation Armonk N.Y. USA the IBM Galapagos tool and the like can be run well in advance of the actual migration on the production systems. With regard to the IBM Galapagos tool see e.g. Galapagos model driven discovery of end to end application storage relationships in distributed systems IBM Journal of Research and Development archive Volume 52 Issue 4 July 2008 Pages 367 377 and Nikolai Joukov Birgit Pfitzmann HariGovind V. Ramasamy Murthy V. Devarakonda Application Storage Discovery SYSTOR 2010 Haifa May 2010. In some cases these tools can be preinstalled on an appliance a small physical server for easy installation into the customer environment . This approach unifies these tools customer inputs and loading from certain available customer repositories. In at least some cases the cloud services provider can ask about additional access to complete file system copies of instances in particular virtual instances already but nothing in the process relies on that .

In some embodiments with regard to a second run the same is carried out in a per wave fashion. That is to say there is discovery again later per wave preceding migration by for example a couple of weeks. The same tools can be used often with additional options and plug ins to obtain more details. After this second run of discovery in one or more non limiting examples a change freeze is implemented for code and configurations so that the subsequent steps can rely that the information from discovery is current.

This phase decides whether business applications are capable of being migrated to one or more MIaaS cloud environments SCE is a non limiting example and which migration method to use. This is assumed to be integrated with general migration planning tools for migrations and IT transformations of other types than to an MIaaS that an organization might have e.g. the IBM Migration Factory. Within this tool the migration to MIaaS should share information such as for non virtualizable software software OS compatibility and upgrade costs with non cloud migration. Those might e.g. be available as static tables in a database underlying a planning appliance. One significant criterion for what workloads go into the path of rapid migration to an MIaaS cloud is that they already have the correct major OS version. For example if the image catalog of an MIaaS cloud contained only images with Windows 2003 2008 and Red Hat Enterprise Linux RHEL 5.6 as operating system versions the planning might decide to only use rapid migration to this MIaaS cloud for source instances or that already have one of these 3 operating systems or at most additionally RHEL 5.1 to 5.5 so that a minor upgrade is needed in adjustment . If there is non virtualizable software on an instance that has one of these operating systems or other exclusion criteria special hardware potentially clusters this instance still has to go to a different target environment or be significantly remediated first step . In some cases regulated workloads are not migrated but this is not intended to limit the scope of the claims unless expressly recited therein. In some cases this aspect is implemented via extended static tables and discovery to minimize potential issues although the skilled artisan given the teachings herein will appreciate that standard analysis techniques that analyze the possibility of physical to virtual techniques suitably modified can be employed to implement this aspect.

In one or more embodiments this phase also includes analyzing compatibility of the patch status of the source instance with standards of the MIaaS cloud this is specific to migration to MIaaS cloud.

In one or more embodiments this phase also includes the selection of an image size. In at least some cases simply retain the size unless it is necessary to increase it to fit the new agents in that have to be installed during adjustments. If the MIaaS cloud only allows certain fixed image sizes in terms of CPUs memory disk storage etc. it may be necessary to resize the image later to the next larger suitable size however this should not be an exclusion criterion.

In one or more embodiments this phase also includes wave planning i.e. grouping servers that will be migrated together. This can be carried out for example using standard migration tooling such aspects have been disclosed e.g. in the aforementioned United States Patent Application Publications 20110213883 and 20120109844 using dependencies locations subnets and so on optionally an attempt may be made at this stage to free hardware and the like. It should be noted that in the general case there is no guarantee that there will not be cross wave dependencies some environments are too interlinked.

In at least some cases security zones should be planned in this phase and certain cloud pools i.e. groupings of instances that the cloud provides and the like should also be planned. Refer to the discussion of the request GUI below with regard to .

In the baseline test the customer or the migration team performs all the tests that they will also apply after migration to make sure the existing system passes all those tests. In one or more embodiments the actual tests are the same as in user acceptance testing UAT . This can involve for example some UAT tests that write into databases or the like such that they cannot be performed on production servers e.g. production zone test servers from the customer environment may then be used for the baseline test can then be employed although the actual workload deployment there may be simpler than the production configuration.

In at least some cases backup is performed by the customer and the customer validates that it worked as instance capture can cause problems. In some cases the cloud services provider does not make backups on the customer side.

In some cases the customer may carry out additional steps in this phase. For example to enable the instance capture processes discussed just below there are other things the customer should do in particular 

Multiple variants can be employed for this step. Refer to . Non limiting examples will be presented all of which are valid for arbitrary transfers to virtualized environments 

Instance capture may include a suitable shut down process. In some embodiments the enterprise applications aka workloads are shut down before a potential P2V step if this has not already done during backup . This means to shut them down from the point of view of users in a multi component workload it does not necessarily mean shutting all components down e.g. just the frontend web server might be disabled. It is safer not to even have any software components running during the capture step cold P2V but it is possible with the given tools to do it while things are running warm P2V . The application owner in one or more embodiments defines what to shut down and preferably carries out shut down because the migration team being tasked with infrastructure level tasks may not have full insight into this.

Instance capture may include for example the P2V step for physical servers. For already virtualized servers in particular on VMware little is required in this step. In one or more embodiments after the end of P2V changes are no longer allowed on the source if this has not already been disallowed during backup as they would not be transferred to the target. That is typically the entire source instance is now shut down to ensure this. If the instance was already virtualized it is shut down either before the image to be transported is finalized or in an integrated transport at the latest before the final resynchronization within that transport.

If a capture step is separate from the transport step a starting zone should be provided for the captured instances i.e. storage space for them that is close to the transport technology.

Data transfer may by over a network or via a physical medium depending on network bandwidth and physical distance. This can be done in some cases with a resynchronizing tool one example is IBM Softek s TDMF especially for large images or for non boot drives. A tool such as TDMF should be installed beforehand and if there is a large data set as non boot drive background data transfer may be started earlier than the P2V. If it is certain that the boot drive does not contain normal data in at least some cases it may be feasible to only do a change freeze on that i.e. only resynchronize other drives. Due attention should of course be given to customer acceptability.

There should be sufficient bandwidth to the landing zone typically much more than the standard WAN connection to the MIaaS cloud as it will be needed in the business as usual phase . In some case special optical lines may be employed. It is possible to add WAN optimizers to same such as those available from Riverbed Technology San Francisco Calif. USA . In at least some embodiments sizing should be for the maximum wave load rather than average. Another option is to use physical storage media such as a high density SATA Serial ATA SATA or Serial AT Attachment disk array and to transport it by courier or similar means. By using a resynchronizing tool to copy data onto them resynchronization via the network is possible after that.

One or more embodiments employ a landing zone i.e. an environment in the same data center as the ultimate cloud place of the particular instance and with the same hardware and hypervisor version e.g. same ESX version for VMware ESX VMs where such imported instances can be run. In some cases with regard to the initial transport if it was done separately for an image file all that is needed is enough storage space as for any transport. However at the latest for the first functional test a runtime environment for the imported instance should be available. In one or more embodiments there will be at least one landing zone per data center as further WAN transfers are not employed once an instance is transferred to the cloud services provider. Potentially there may be even more landing zones in particular if the data center contains multiple physically separated or separately managed production zones then there can be one landing zone per production zone.

Any security zoning of the customer that needs to be replicated can be done virtually i.e. via the cloud service provider s VLANs and firewalls but unless the customer requires physical separation of certain security zones also in the production environment not usual in clouds the instances can all land on the same hardware controlled by the same management software.

As discussed before the entire landing zone may be physically or virtually separated from the corresponding production zone. Exact placement and address are pertinent considerations in one or more embodiments. In the case of virtual separation one preferably imports each instance physically close to where it will stay after registration so that no additional copying is needed. E.g. if the production zone is sub structured into several units where e.g. each unit is controlled by a VMware vCenter Server s or a TSAM IBM Tivoli Service Automation Manager software available from International Business Machines Corporation Armonk N.Y. USA and the landing zone is virtual even within such units the instance can be maintained on the same physical server and storage when transferring it from the landing zone into the production zone. For example the instances still belonging to the landing zone can have a flag tolerated so that TSAM knows they are there but not yet managed in the production zone sense. However if for additional security and lower complexity the landing zone resides in other units than the production zone then actual copying is needed and the registration flow which is largely executed in the production zone must be given an address of the instance in the landing zone and the authority to copy from such addresses e.g. by opening a special port in a firewall .

After transport to the cloud services provider testing should be carried out to verify that the P2V and transport worked correctly. For this standard methods employed in non cloud P2V transformation can be used as so far no MIaaS specific adjustments have been made. A minimum test is that the instance can be started at all. In some cases this testing may be limited to OS storage and the like in other cases it may be extended to whether software or even the entire business application still works. In some cases there may be a list of what was running from the time of shut down. In some cases a capability is provided by the migration team for automatic restart. On the other hand in some cases this is handled by the customer. The test is typically not identical to the complete baseline test.

Directly after the transport into the cloud services provider and optionally between any steps where tests are performed a backup may be made with a VMware snapshotting technique to enable easier remediation. However in particular with mature processes one may also decide not to make these intermediate backups in order to save time in the most common correct case. Backup is particularly useful before after steps that involve a human decision while automated steps can easily be re done from the first backup.

In at least some cases this is a largely human step. If something goes wrong it typically needs debugging. If too much difficulty is encountered the instance and possibly the entire business application should be taken out of the current wave i.e. the current weekend s or other pertinent time period s migrations. It is desirable to document such cases well so that in the future such cases can be caught in the phases of Discovery and Analysis Planning .

At this time start the adjustment flow with the running instance that just passed functional testing.

In at least some cases adoption referred to herein interchangeably as registration and adjustment are carried by small modifications of the provisioning flow as discussed above in reference to . For a more general view concentrating on the steps specific to migration showed the non migration steps and the specific migration steps were discussed in the text reference should be had to . In step determine whether any pre adoption adjustments are needed or desired i.e. adjustments that are done before and separate from the any registration steps i.e. steps that involve the MIaaS Cloud BSS and OSS . This determining may refer as needed to a decision document or the like as output by the Analysis and Plan step . In step start the adoption flow with appropriate instance parameters and cloud zone from analysis and planning step . In step the portal flow passes the adopt parameter through i.e. a parameter that indicates that the flow variant needs to be executed where an imported instance is registered. This flow modification will be implemented in the system that is the basis of the MIaaS portal for example in IBM Tivoli Service Request Manager TSRM software available from International Business Machines Corporation Armonk N.Y. USA . In step the provisioning takes place and the imported instance is picked up and any new adjustment sub flows are called can be carried out for example in TSAM . In step a virtual server is created. This is not needed if the instance remains the same i.e. if the landing zone is purely virtual as described above. This can be carried out by the normal instance creation internal to the MIaaS cloud for example in TSAM . In step carry out server validation of the MIaaS cloud assuming the MIaaS cloud has that and does not entirely rely on the prior steps to succeed without test preferably with no changes but more problems may be expected to be identified at this point for migrated instances than for instances provisioned from catalog images and thus more time for remediation may be reserved.

In step prepare the instance for customer test access by providing appropriate keys to the customer. In step fulfillment of the request i.e. the initial input to this flow is validated if needed this can be done via a shortened and automated process in one or more embodiments where this is just a sub flow in a larger migration flow compared with the normal situation where this was a customer request to the MIaaS cloud portal.

Backup snapshots and tests the neighboring overall steps may occur between any of these sub flows even inside them in particular in the provisioning flow after individual adjustments.

In a non limiting example the portal is implemented in TSRM and includes a graphical user interface GUI and REST API application program interface . In one or more embodiments starting via REST API is believed to be appropriate as all parameters should be clear from the results of the analysis and plan step . Those may reside in a database or another well defined repository so that they can be retrieved by software. While in the analysis and planning component is depicted in the customer environment where the discovered data arise at some point the relevant part of the data for the adjustments step should be transported to the MIaaS cloud environment in particular its Cloud Management zone this arrow was omitted in to avoid clutter . The transfer agent and transfer core component can take this on as an additional task besides transporting images. However in some cases it may be desirable to initially start via a GUI in order to more easily track the activities.

In one or more embodiments the results of the analysis and plan step relevant for this sub step should include the instance data zoning plans and the like so that the correct parameters can easily be input to the REST API or entered by a human operator into the GUI.

A naming location scheme should be provided for instances in the landing zone so that at this point information regarding which instance is to be registered can be input. In one or more embodiments this is the name under which VMware vCenter Server knows the instance in question. In one or more embodiments an automated check of the GUI inputs size OS with the actual values of the instance is useful.

Typically the portal is a separate software component in particular part of the BSS from the provisioning engine the component that carries out the actual registration often a workflow engine and part of the OSS Hence the portal transfers the registration request to the provisioning engine. Compared with the normal provisioning request transferred between these two components the choice of registration or import of a migrated instance and the location name of the instance is passed through i.e. those are new parameters in that request in that API.

In one or more embodiments based on a suitable naming location scheme in the landing zone and the provisioning engine e.g. TSAM obtaining the name location of the instance to adopt from the portal e.g. TSRM the pickup is clear. In a non limiting example the name of the instance in an underlying VMware vCenter server may be used. This name might not be globally unique but should be acceptable if the hostnames are used which can otherwise be assumed to be all different already.

In embodiments where the landing zone is physically separated certain firewall settings and a copying process to implement the actual pickup may be employed which are a bit different from taking an image from the MIaaS image library .

Turning now to at note the customer instance after migration but before adjustment i.e. the instance on a cloud hypervisor in the landing zone directly after transport and at the customer system after migration and adjustment broken down into customer portion and cloud service provider portion i.e. as it will be in the production zone at . With regard to application middleware layer little or no change is typically planned at this level in particular because migration only to an MIaaS cloud not a PaaS cloud is considered in this example except some configuration changes due to potential change of some basic OS configuration aspects such as IP address. In one or more embodiments applications are not touched in this flow inasmuch as P2V typically works well and this flow can be implemented with standard P2V techniques. With regard to application middleware management layer little or no change is typically planned at this level except some configuration changes in terms of security and due to potential change of some basic OS configuration aspects such as IP address.

With regard to OS management layer this flow includes removal of customer management suite components that are no longer required and policy adjustment of those that are and installation of a standard management suite of the cloud services provider as well as a cloud management tool of the cloud services provider with regard to the latter in at least some cases agents are implemented in the previous aspect and central tools are already present . In some cases installation is implemented via a standard provisioning flow. Removal and policy adjustment are significant tasks.

It should be noted with regard to aspects that some tools may be common for the OS and App MW layers.

With regard to OS layer in one or more embodiments a minimum set of OS patches are installed as required by the cloud services provider to accept the Base OS in an alternative embodiment this can be implemented as a separate flow within otherwise BAU cloud management . In some cases an open ports check is carried out. In one or more embodiments no change is needed at the base operating system level except for required OS configuration updates such as IP address.

In some embodiments the cloud services provider may inquire of the customer as to how the customer employs these tools what policies the customer has where the tools are installed and so on.

It should also be noted that any changes planned by the cloud services provider may need a significant new discovery effort at least if the customer s installs are as variable as those of other software and as little standardized.

It is worth noting that the BigFix tool now known as IBM Tivoli Endpoint Manager available from International Business Machines Corporation Armonk N.Y. USA is believed to be one particularly useful tool for security patches however other embodiments may use other tools.

Hence in one or more embodiments there is no need to change other servers or clients addressing the migrated instances assuming the other servers or clients use DNS names rather than using IP addresses directly this has become increasingly common.

In some cases where it is desired to reduce costs the migration team cannot readily determine whether the customer used IP addresses for addressing. In such cases it may be appropriate to assign to the customer a requirement to ensure that such is not the case. If this requirement is violated problems may occur in user acceptance testing and remediation will return the instances or entire workloads to the customer. This problem is independent of the migration path or target in particular of the fact that migration is to an MIaaS cloud.

In one or more embodiments if it is possible to just retain the instance and at most put it into a different VLAN via virtual switch and firewall changes then it is not necessary to create any server at this point. Otherwise the virtual server creation works exactly as in standard provisioning of the MIaaS cloud.

At this point in the adoption and adjustment flow all significant things that need to be done on the instance itself have been carried out and the customer is given access for testing the image as well. Most customer IDs should at this stage still be on the instance or the respective active directory AD . Those that changed due to rights reduction of agents should typically be set already. In some cases the cloud services provider may need to hand out keys if access to the image is key based. In one or more embodiments this works the same as in the provisioning flow for catalog images described elsewhere herein.

The validation as such can be unchanged from the provisioning flow for catalog images. In one or more embodiments failure at this point is believed to be significantly more likely in the case of a customer instance than in the case of a cloud services provider catalog image. In at least some cases the cloud services provider may provide appropriate remediation.

It will be preferable to automate as much as possible of this validation and also of appropriate remediation if tests fail. Even better however wherever automated tests and remediation can be done at all it may be advisable to undertake such aspects in the already in the adjustment step even if they are repeated again in the server validation phase for compliance or audit reasons.

In the migration scenario where it is known in advance what will happen on each weekend or other period of time this aspect is preferably kept short and largely automated. The final approval from the customer after UAT may still need manual entry though.

At this point the overall rapid migration flow from can be resumed after the details of adoption and adjustment Step and the subsequent transfer of the instance into the production zone as shown in . Now the user acceptance test UAT takes place typically not only of one instance but of a business application supported by this instance and possibly others . If it fails a manual decision should be taken together with the customer bearing in mind the following aspects 

If the UAT is passed the instances of one business application or other migration unit in the cloud begin to be used by the customer. In the addressing choices are made as in the example above the DNS of the customer is changed at this point this can include changing reverse DNS entries possibly as part of a standard procedure. In some cases the change window can end here. If the customer had specific warnings such as application down on a web entry page they can now be taken off. Appropriate customer training can be provided if desired.

It is worth repeating that one or more embodiments offer the advantages of traceability and or roll back capability. Furthermore in this regard traceability is a significant advantage and it is quite helpful for managed environments to have every step and especially adjustments done to the image clearly documented. The adjustment engine as well as TSAM TSRM have the ability to create instance specific logs for fully transparent change controlled migrations. With regard to roll back capability the adjustment engine operates in a step by step mode and offers the ability to roll back a certain adjustment if something went wrong. That ability together with the snapshots creates a relatively safe environment to execute the needed migration adjustment steps.

Given the discussion thus far it will be appreciated that in general terms an exemplary method according to an aspect of the invention includes the step of transferring a foreign instance from a customer environment to a target infrastructure as a service cloud environment as an image. This step can be carried out for example via component optionally by interfacing with agent . A further step includes adjusting the foreign instance to standards of the infrastructure as a service cloud environment to obtain an adjusted instance. This step can be carried out for example via component . A still further step includes registering the adjusted instance into a management system generally specifically in one or more embodiments of the infrastructure as a service cloud environment.

In general the adjusting may include adjusting the foreign instance while it is running or alternatively adjusting the foreign instance as the aforementioned image.

In some cases the registering includes running at least a portion of a provisioning flow e.g. as shown in for a standard catalog image of the infrastructure as a service cloud environment the standard catalog image is selected for similarity to the foreign image and swapping the image of the foreign instance for the standard catalog image. In general such swapping may be carried out during the provisioning flow or after the provisioning flow when carried out during the provisioning flow it is referred to as picking up the image of the foreign instance during the provisioning flow rather than swapping. Furthermore swapping after the provisioning flow should be understood to include being after step and optionally after most or all of step but before .

Furthermore in this regard consider three ways to proceed. Recall that provisioning flow for catalog images is shown in . In some cases proceed through the provisioning flow almost to the end like steps to obtain a provisioned instance then discard that provisioned instance and replace it with what is being migrated. This is referred to as swapping In some embodiments the catalog image is never re ally put on the server. At the point where the catalog image would be copied pick up the instance and let the rest of the provisioning flow work on the migrated instance so there is less work to do at the end step . In one or more embodiments this point is in the sub step create virtual server of step . Such creation is detailed in step . Within the virtual server creation this point is in the sub step copy the image over in this aspect the image of the imported instance instead of the catalog image is what is copied.

As noted in one or more embodiments the infrastructure as a service cloud environment is a managed infrastructure as a service cloud environment. Thus in such cases the transferring includes transferring to the managed infrastructure as a service cloud environment the adjusting includes adjusting to standards of the managed infrastructure as a service cloud environment and the registering into the management system includes registering into a management system of the managed infrastructure as a service cloud environment.

As noted elsewhere in the adjusting step in some cases the standards include one or more of security standards infrastructure standards patch managements standards and infrastructure management system standards e.g. standards of tools such as .

In some cases an additional step includes analyzing the foreign instance for suitability for transfer to the target infrastructure as a service cloud environment in such cases the transferring is responsive to the analyzing yielding an affirmative result.

As noted in some cases a plurality of foreign instances are treated as a whole in the analyzing step.

In some cases an additional step includes carrying out testing refer e.g. to decision blocks in general such testing can be carried out for example before the transport after the transport between different adjustments after adjustments and after migration. A further step includes carrying out at least one of remediation and back out if the testing fails Not OK branches of blocks . As noted elsewhere in some cases a plurality of foreign instances are treated as a whole in the testing step.

In some cases the testing includes a baseline test prior to the transferring step and a user acceptance test after the registering step. The user acceptance test has at least one test case. The baseline test validates that the foreign instance initially passed the at least one test case of the user acceptance test.

In another aspect an apparatus includes a memory e.g. RAM cache and at least one processor coupled to the memory and operative carry out or otherwise facilitate any one some or all of the aforementioned method steps. Optionally the apparatus further includes a plurality of distinct software modules . Each of the distinct software modules is embodied on a computer readable storage medium and the distinct software modules include a transfer core component module an adjustment component module and a registration component module as discussed elsewhere herein. The snapshot management system module optionally includes one some or all of the sub components in .

In some cases the transfer core component module obtains the foreign instance from a transfer agent in a customer environment and locates the foreign instance within a cloud landing zone of the infrastructure as a service cloud environment. In some embodiments the at least one processor is operative to instantiate the adjusted instance into a cloud production zone of the infrastructure as a service cloud environment.

In another aspect in some cases the infrastructure as a service cloud environment includes a cloud landing zone a cloud production zone and a cloud management zone. In at least some such cases the at least one processor is operative to transfer the foreign instance into the cloud landing zone under control of the cloud management zone the at least one processor is operative to carry out the adjusting on the foreign instance in the cloud landing zone under control of the cloud management zone the at least one processor is further operative to instantiate the adjusted instance into the cloud production zone and the management system forms at least a portion of the cloud management zone.

In some cases the cloud production zone includes cloud production zone computer hardware of a first type and cloud production zone hypervisors of a first type running on said cloud production zone computer hardware of said first type and the cloud landing zone includes cloud landing zone computer hardware of the first type and cloud landing zone hypervisors of the first type running on the cloud landing zone computer hardware of said first type. Fewer standards are imposed on instances managed within said cloud landing zone than on instances managed within said cloud production zone and said cloud landing zone is separated from said cloud production zone via at least one of physical and logical techniques so as to avoid impact of said cloud landing zone on security of said cloud production zone. Stated in another way the cloud landing zone is a set of computer hardware e.g. servers storage devices etc. and hypervisors of the same type as in the cloud production zone but with fewer standards on the instances managed there and physically and or logically separated from the cloud production zone so as not to impact the security of the cloud production zone.

One or more embodiments advantageously provide techniques for management infrastructure analysis for cloud migration. In current migration analysis techniques in particular the automated parts thereof the focus is on key middleware such as application servers or databases. One significant advantage of the cloud computing paradigm lies in simplified management which mainly comes from standardized infrastructure software and standardized management processes. One or more embodiments advantageously extend automated migration analysis to these management aspects.

In an Infrastructure as a Service IaaS cloud the capability provided to the consumer is to provision processing storage networks and other fundamental computing resources where the consumer is able to deploy and run arbitrary software which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems storage deployed applications and possibly limited control of select networking components e.g. host firewalls . A Hardware Infrastructure as a Service HIaaS cloud provides bare bones virtual machines as a service. It may also provide an operating system OS and even software but no support is typically provided for the OS or software.

On the other hand a Managed Infrastructure as a Service MIaaS cloud provides full service virtual machines. The service may e.g. include OS patching and support for security and compliance of the OS. One significant aspect of MIaaS is simpler management via standardization to a certain set of catalog images from which instances are generated automatic linkage of these instances to management tools during deployment and or not giving customers administration privileges on the OS level so that the operating systems on the instances remain as the cloud administrators configure them.

Heretofore prior to the emergence of the cloud computing paradigm there was much less need to analyze for compatibility with infrastructure standards or for the costs associated with transformation thereto. One aspect of the cloud computing paradigm involves enhanced efficiency through the standardization of infrastructure. The move to cloud computing also reflects a trend wherein information technology IT running costs have outpaced IT investment costs. To gain large benefits from investments in cloud computing resources one or more embodiments advantageously facilitate migration of existing environments to such standardized infrastructure management systems and processes starting with analysis.

Reference is made to the definitions of IaaS clouds HIaaS cloud MIaaS Clouds Instance Source instance Image Catalog image Provisioning Reinstall migration Image based migration and Rapid migration to MIaaS cloud as defined elsewhere herein.

Refer now to and note cloud description discovery and analysis of a source system to be migrated shown at an exemplary source system per se is shown in and an infrastructure comparison engine to carry out comparison referred to also as analyzing mapping and or matching between the two. Cloud description includes cloud infrastructure software standards and or configurations configs . Also included therein is an application level description of cloud infrastructure management for example a service level agreement SLA offered by a cloud or non functional requirements that can be set as part of an application program interface API . Optionally description also includes include cloud infrastructure management processes .

With regard to discovery and analysis on the source system to be migrated step includes discovery of source infrastructure clients and servers step includes discovery of source infrastructure configs and or logs and step includes obtaining for example by derivation of an application level description of the source infrastructure management. Optionally process also includes step namely discovery and or learning with regard to infrastructure management processes of the source.

Process includes a comparison between the source and the target cloud. Step includes a matching between the source and cloud software optionally taking transformation costs into account and based on the cloud infrastructure software standards and the discovered source infrastructure clients and or servers from step . In one or more embodiments this matching process involves looking for conflicts as described elsewhere herein 

In step map the infrastructure configurations based on the cloud infrastructure config standards and the discovered source infrastructure configs and or logs from step . In step map the application level descriptions e.g. descriptions of non functional requirements as discussed elsewhere herein of infrastructure management from the cloud from and the source from . In optional step map the infrastructure management processes from the cloud from and the source from .

Again comparison and or analysis steps can involve in one or more embodiments examining for conflicts.

With reference to steps and comparing the actual management processes is optional. In particular if a radical migration such as to an existing cloud is made then typically only the application level descriptions need to be mapped. With regard to step in one or more embodiments infrastructure configurations are discovered for mapping to potentially different software in the target cloud purely by way of a non limiting example HP event filters associated with products from Hewlett Packard Company Palo Alto Calif. USA might be used in the source environment and might be mapped to IBM Tivoli Monitoring ITM event filters available from International Business Machines Corporation Armonk N.Y. USA which might be used in the target environment . With regard to step several source aspects that are usually obtained by human interviews can be derived from the detailed discovery such as high availability configurations planned downtimes and patch management setups. Even if still obtained by human interviews they can be considered in automated analysis in step if the results are in a fixed format. With regard to step the application level description of the current infrastructure typically has to be reached or exceeded unless the business owners explicitly agree to a lower level.

In an alternative approach instead of having a cloud description already given derivation of the most suitable cloud description for the source environment may be part of the engagement e.g. when the overall goal is to build a suitable private cloud for an enterprise.

By way of review and provision of additional detail before performing any IT migration transformation modernization etc. it is advisable to analyze compatibility between components to be retained and new components to be used. This may include for example selection of what to retain and what to change as well as effort analysis of changes to be made to achieve compatibility.

Current migration analytics in particular the parts done with well defined methods or even in an automated way focus on compatibility on the operating system level and sometimes on compatibility of key middleware such as application servers or databases. That is to say they analyze whether an operating system version will still run on new hardware or whether a database version will still run on a newer or related operating system version.

With the advent of clouds in particular Managed Infrastructure as a Service MIaaS clouds current migration analytics are insufficient as these clouds also prescribe infrastructure management tooling and processes as well as certain standards on servers that allow the infrastructure management to operate in a standard way.

One or more embodiments advantageously provide a system and method for automated migration analysis for infrastructure management aspects primarily for cloud migrations.

One or more embodiments advantageously provide a systematic and or automated method for infrastructure management analysis.

Analyzing for infrastructure management migration is different from analyzing for middleware compatibility because a significant question is whether the source infrastructure management software conflicts with the standard infrastructure management software in the cloud in particular MIaaS and needs to be removed or modified as opposed to whether the source infrastructure management software will run on the cloud operating system s which is what would be analyzed if the analysis were for middleware compatibility . Furthermore other settings related to infrastructure management standards need to be analyzed such as assumed minimum patch levels.

In MIaaS cloud migration implies the need for infrastructure analysis. One or more embodiments advantageously provide the ability to systematically analyze infrastructure changes needed and to apply them in a rapid migration process as described elsewhere herein.

Referring now to in some instances an exemplary method is implemented in two phases. In a first phase the to be analyzed elements in particular the source infrastructure clients and servers from all source systems may be aggregated and discussed with the customer i.e. the owner of or party responsible for the source system . For example a cloud services provider may indicate to a customer that it is necessary to uninstall all of the customer s Vendor X patching systems. In a second phase the decisions are applied to individual source systems and possibly refined if no general decision was possible in the first phase.

In one or more embodiments it is believed advisable to detect conflicts pertaining to conflicting management in the first phase. Unless a comprehensive list of all potential infrastructure software is available this would be the case if Phase numbered could already fill in the database very well and all software in the customer s source environment were already in such database it is appropriate to analyze the overall software list at this time to see if there are such conflicts. Over time the aforementioned database of conflicting and non conflicting software can be developed.

In some instances the discovery of source infrastructure software can be done by carrying out discovery on the actual machines to be migrated which contain clients of this source infrastructure software e.g. asset management agents by detecting servers of this source infrastructure software e.g. a central asset management server and or from questionnaires of deployed infrastructure tooling.

Thus one or more embodiments advantageously provide a method for management infrastructure analysis for cloud migration including discovering infrastructure components in the source infrastructure and analyzing the discovered infrastructure components for conflicts with mandatory infrastructure components in the target infrastructure.

In some cases the infrastructure components include one or more of infrastructure clients infrastructure servers infrastructure configurations and infrastructure processes.

In some embodiments conflicts include those where a source infrastructure component manages the same objects that a mandatory target infrastructure component will manage.

In some cases conflicts include those where a source infrastructure component uses the same resources in particular a port as a mandatory target infrastructure component uses.

Non limiting examples of conflicts include one or more of the current lack of a mandatory target infrastructure component on a client the existence of a mandatory target infrastructure component in a different version and existence of a mandatory target infrastructure component with possibly different configurations.

In some embodiments the result of the analyzing step includes one or more of the recommendations to uninstall an infrastructure component to install an infrastructure component to modify the configuration of an infrastructure component to exclude servers with a particular component from migration or to further discuss with the customer about an infrastructure component. Furthermore in this regard the last two outcomes may occur in particular if a source infrastructure component is in a conflict but likely to also be used to manage objects that are not under control of the cloud e.g. middleware in a migration to an MIaaS cloud.

In some cases the analyzing step is done in two phases a first aggregated phase where all discovered infrastructure components are aggregated and generic recommendations given for them and a second per instance phase where the recommendations are applied to individual source systems and refined if the general recommendation was not conclusive.

The analyzing step can in at least some embodiments include configuration comparison and or process comparison.

With regard to configuration comparison step in some cases it is advisable to compare configurations and make decisions for changes. This is particularly advisable if infrastructure software is used to manage both operating system OS aspects and application aspects. For instance patching software on a source server may be set up to patch the OS as well as databases and web servers. If this source server is migrated to an MIaaS cloud then the OS level patching needs to be switched off in favor of the cloud patching software while the database and web server patching needs to remain. On the other hand in other cases the source software may be uninstalled but the server owners may wish to retain certain policies e.g. backup frequencies or types of monitored events.

Consider now aspects of customer dashboards as shown in . A related alignment question that can occur with MIaaS migration is integration into overall customer dashboards. For example the customer may have a CIO chief information officer dashboard that gives an overview of the status of applications and servers. The customer may desire to retain such a dashboard after migrating some servers to MIaaS both because the dashboard also shows applications and or because not all servers were migrated but the customer would like a joint overview over migrated and non migrated servers. In these cases adapters from the reporting features of the MIaaS software into the customer dashboard should be provided. This aspect is shown in by linking dashboard also to the target management program numbered which is provided by the cloud.

Pertinent observations will now be provided regarding OS versions patches and security. Another infrastructure aspect that an MIaaS cloud will typically prescribe are precise OS versions. For the OS it is typically appropriate to decide what level of deviation is tolerated and what may be automatically updated prior to migration. For example it might be decided to tolerate deviating minor versions e.g. v5.2 instead of 5.3 or not and there are often automatic updates tools among minor versions. It is also appropriate to consider non version OS types such as releases or editions.

Patches may need to be added in some cases. However if source servers with back level patching are found it is not unlikely that there were application problems with some newer patches. Ideally an effort should be made to try to find this out from the application owners beforehand. Patch updates should typically be followed by careful application tests.

With regard to other security settings there are a number of good practices for security such as not enabling certain services and access rights to certain OS files. The source server should be brought into compliance with such requirements. Ideally existing deviations from such best practices are not required by applications e.g. applications should not require that an operating system administration password is only 6 characters long but this should be discussed with application owners beforehand too.

In one or more embodiments there are at least two significant ways of deciding what to change regarding operating system settings and the like and in particular security related settings 

Thus in some cases there can be a general cloud migration analysis phase before both of the abovementioned phases wherein decisions are taken as to which security settings are mandatory. Phase in numbered depicts a general cloud migration analysis for management software a similar scheme as depicted therein can also be used to carry out a general cloud migration analysis for OS settings.

Continued reference should be had to and reference should also now be had to . shows an exemplary source environment on which discovery and analysis could be carried out. Environment includes a server with a management program numbered . Environment also includes a server with a management program interfacing with logs and or configurations in a data store . Physically data store may or may not reside on the same virtual or physical server as the management program . That is to say the configurations could also be inside server however with a large management program it is indeed possible that a configuration database is elsewhere i.e. outside server .

Two management programs are shown in for brevity in a typical scenario long lists will be present. The management programs could correspond for example to backup management and compliance management. 

Environment also includes in this example two instances . These are instances similar to those migrated in the rapid migration approach discussed elsewhere herein i.e. they can be physical or virtual. The servers can in principle be virtual too and a few of them might be migrated so in one view they are also instances. One or more embodiments however address the case wherein the cloud has its own management programs in the cloud management zone of so the servers are not migrated.

Environment includes one or more clients managed by management programs . These clients may for example reside on instances and may be clients in the sense of how they relate to management programs while instances may also function as servers on which one or more applications run. Instance is managed by both management programs while instance is managed only by management program . This demonstrates the desirability of per instance analysis.

Instance has OS settings and instance has OS settings . Client has configuration file client has configuration file and client has configuration file .

In which depicts an exemplary target cloud environment it is assumed that the management program numbered was retained and thus its server was migrated in the normal way into the cloud production zone see instance while program was exchanged for a corresponding program in the cloud particularly on server in the cloud management zone . Program utilizes logs and configurations in a similar manner as program used logs and configurations .

In some cases instead of retaining program or as program it is also possible that the same management program already exists in the cloud management zone. Then the corresponding client can be retained and the issue becomes whether the config also stays the same or is changed to cloud standards for such configs. 

During Phase numbered at discover source infrastructure clients and servers on each instance. In step aggregate the discovered versions. In step make a general plan per management client version part of matching step but not per source instance . Step takes input from step step and database and also updates database with its outputs. Step results in plan it will be understood that plan is illustrative and non limiting.

During Phase numbered per instance decisions are made. In optional step if carrying out Phase at a later time re discover infrastructure clients on the given instance e.g. instance contains management clients mentioned in exemplary plan . If no re discovery is done such knowledge is still available from step . In step apply the plan to these instances. In the non limiting example decide to uninstall client retain client . Step thus takes input from optional step else from Step and from plan . In step where plan indicated needs per instance decision perform further analysis to decide in the non limiting example decide for client . In optional step proceed to infrastructure configuration mapping as in step . In the example this is done possibly for clients and .

The following code snippet in SQL is a simplified version of code that could be used for decisions in Phase Step . Assume that software management software and applications installed on the source instances is gathered in a table MIDDLEWARE INSTALL MASTER . Furthermore assume that component is realized as a database table MW MANAGEMENT LOOKUP where it is assumed for simplicity that everything with any conflict s is uninstalled and precisely the software with known conflict s is collected in this table. The appropriate decision to make is whether to uninstall or not for each row in the former table based upon whether the middleware occurs in the second table. The following query does this assuming the decision goes into column FUNCTION of the former table 

A possible result for a small subset of instances given by column HOST NAME is shown in by way of a non limiting example.

Given the discussion thus far it will be appreciated that in general terms an exemplary method according to an aspect of the invention includes the step of discovering in a source computing system having a source management infrastructure at least one source infrastructure management component examples given below . This step can be carried out for example using a suitable discovery tool with appropriate modifications. In particular known discovery tools cover infrastructure software. However where per software modules are needed in the discovery software the focus in existing packages may so far lie on middleware databases web servers etc. that new modules for infrastructure software should be added. Furthermore it may be appropriate to extend the reporting features of the tools to include infrastructure software and for specific reports that characterize infrastructure software so that step has an output that makes steps and or easy. Given the teachings herein the skilled artisan will be enabled to make suitable changes to existing discovery tool packages to implement one or more embodiments.

A further step includes obtaining a description of a target cloud infrastructure having a target management infrastructure e.g. layer . The description includes at least one mandatory target infrastructure management component. This step could be carried out for example by using a suitable database program to query a description stored in a database non limiting examples include IBM DB2 software available from International Business Machines Corporation Armonk N.Y. USA and ORACLE software available from Oracle Corporation Santa Clara Calif. USA. It may also be done by querying a cloud portal if possible via a programmatic interface otherwise via one or more user interfaces. If none of these options is available it can be obtained manually from the cloud service provider. If that is also not possible a further option includes provisioning an image from the cloud catalog and performing discovery on that image to see what infrastructure software is installed on same. This infrastructure software is likely to be the cloud standard.

Thus far it has been assumed that migration to a given cloud with given standards is desired. In some instances there may still be a choice between multiple clouds then multiple descriptions may be given and step may additionally look for the best matching cloud. In another aspect the goal may be to build a private cloud for the given source environment then a suitable cloud infrastructure software standard may be derived in step from analysis of the discovered source infrastructure. For instance if it is discovered that 80 of the source servers are monitored with monitoring software X and 20 with other monitoring products then monitoring software X may be selected as the standard for the new private cloud and monitoring software changes will only be needed on the remaining 20 of servers.

A still further step includes analyzing the at least one source infrastructure management component to determine whether at least one conflict exists with the at least one mandatory target infrastructure management component. This step could be carried out for example using infrastructure comparison engine refer to description of block elsewhere herein.

In the discovering step the at least one source infrastructure management component could include for example at least one source infrastructure management client at least one source infrastructure management server with program clients and servers can be discovered in step at least one source infrastructure management configuration e.g. in data stores and or and or at least one source infrastructure management log e.g. in data store configurations and logs can be discovered in step . All the aforementioned elements things would typically be present but they might not all be discovered. For example the log might not be discovered. In at least some embodiments when the focus is on install uninstall it is sufficient to discover the client and for the Phase analysis it is sufficient to find the management programs.

In some cases a further step includes obtaining a description of non functional requirements of the source management infrastructure e.g. with the aforementioned discovery tool also referred to herein as an application level description .

In some cases in the obtaining step the description of the target cloud infrastructure includes cloud infrastructure software standards cloud infrastructure software configurations and or an application level description of the target management infrastructure i.e. a description of non functional requirements on the management infrastructure . These are typically given by the enterprise application supported by the currently considered instance. These can include for example an SLA or non functional requirement but SLAs can be seen as non functional requirements as well. Other examples include change windows up to dateness policies such as for patches or in monitoring for problems auditing requirements and the like. Many of these would typically be input manually. It should be ensured this is done in a fixed format to allow automatic comparison in step . By way of a non limiting example if a cloud only provides certain patches every 4 weeks but an enterprise application has a compliance requirement that requires such patches every week then such enterprise application cannot be run on this particular cloud.

In cases as mentioned in the preceding paragraph the analyzing step includes matching the cloud infrastructure software standards with the at least one source infrastructure management client and the at least one source infrastructure management server as at mapping the description of the non functional requirements of the source management infrastructure with the description of the non functional requirements of the target management infrastructure as at and mapping the cloud infrastructure software configurations with the at least one source infrastructure management configuration and the at least one source infrastructure management log as at .

As indicated by the arrows from block to block and from block to block in some cases the mapping at of the cloud infrastructure software configurations with the at least one source infrastructure management configuration and the at least one source infrastructure management log is at least partially based on the matching at of the cloud infrastructure software standards with the at least one source infrastructure management client and the at least one source infrastructure management server and the mapping at of the description of the non functional requirements of the source management infrastructure with the description of the non functional requirements of the target management infrastructure.

In some embodiments in the discovering step the at least one source infrastructure management component further includes at least one source infrastructure management process as shown at in the obtaining step the description of the target cloud infrastructure further includes at least one target infrastructure management process and as seen at the analyzing further includes mapping the at least one source infrastructure management process with the at least one target infrastructure management process.

As indicated by the arrow from block to block in some cases the mapping of the at least one source infrastructure management process with the at least one target infrastructure management process at is at least partially based on the mapping of the description of the non functional requirements of the source management infrastructure with the description of the non functional requirements of the target management infrastructure at .

In some cases in the analyzing step the at least one conflict includes the at least one source infrastructure management component managing at least one object that the at least one mandatory target infrastructure management component will manage in the target cloud infrastructure.

In some embodiments in the analyzing step the at least one conflict includes the at least one source infrastructure management component using at least one resource e.g. port that the at least one mandatory target infrastructure management component will use in the target cloud infrastructure.

In some cases in the analyzing step the at least one conflict includes one or more of the current lack of a mandatory target infrastructure component on a client the existence of a mandatory target infrastructure component in a different version and the existence of a mandatory target infrastructure component with possibly different configurations.

Consider the current lack of a mandatory target infrastructure component on a client. For example if the cloud requires event monitoring agent ABC in version 6.1 on all instances i.e. ABC is a mandatory component like and a source instance does not contain ABC in any version a decision would be to install ABC. Consider the existence of a mandatory target infrastructure component in a different version. For example if source instance already contains ABC in version 4.5 or 6.0 but the cloud requires 6.1 then it may be necessary to upgrade probably easy if it was 6.0 or uninstall and reinstall maybe needed if it was 4.5 i.e. rather old .

Consider further the existence of a mandatory target infrastructure component with possibly different configurations. If ABC in version 6.1 was already there or 6.0 was present and it has an upgrade feature to 6.1 it may have a local configuration specifying what events it monitors. On an instance provisioned from a cloud catalog image a different configuration for ABC 6.1 may be present that monitors a different set of events. One solution is to overwrite the source configuration with the cloud standard configuration. Another is in this example to join the two configurations such that the union of the two sets of events gets monitored. This is possible if the corresponding central cloud management program say ABCServer corresponding to tolerates when unexpected events come in. If ABCServer is the only tool that processes these events it may still be useless but if it forwards events to a customer dashboard it might pass these unexpected events through. This could help if e.g. the event monitoring system s was used both to monitor events from an application say crashes and restarts of this application as well as OS level events. The application remains under control of the customer and the customer might still want to see these events in the dashboard .

In some cases the analyzing step includes one or more of i recommending un installation of a source infrastructure component ii recommending installation of a target infrastructure component iii recommending modifying configuration of an infrastructure component iv recommending excluding servers in the source environment with a given source infrastructure component from migration and or v further discussing a given infrastructure component with a customer. The last two outcomes exclusions iv further discussions v may occur in particular if a source infrastructure component is in a conflict but the same source infrastructure component is likely to be used to manage objects that are not under control of the cloud e.g. middleware in a migration to an MIaaS cloud corresponding to application etc. . With regard to possibilities i iii the infrastructure component s mentioned could be in the source environment prior to migration could be adjusted during rapid migration and or after transport and so on. With regard to possibility iii the same might start on either side typically modification takes place if there was both a source configuration and a standard target configuration for the same software and some compromise is appropriate. With regard to i it could be decided that event monitoring software other than ABC is not desired and any such software other than ABC could be uninstalled.

It is worth noting that further discussion option v may involve human agency. However the automatic engine may need to output this as a recommendation. For example if in 90 of the instances it can make an automated decision but in 10 of the cases it cannot it is already well worthwhile using such an engine. But the engine cannot simply guess in the remaining 10 cases it must admit that it doesn t know. In some embodiments these questions pop up in an interface with a structured format to answer them so that automation can proceed from there on. If several people need to decide a collaboration tool can be provided.

In some cases the discovering includes discovering in the source computing system a plurality of source infrastructure management components and the analyzing includes initially aggregating all of the plurality of source infrastructure management components developing generic recommendations for the aggregated plurality of source infrastructure management components applying the recommendations on a per instance basis and refining at least some of the applied recommendations in cases where the generic recommendations are inconclusive. See e.g. and accompanying text.

In some instances the discovering is carried out on at least one physical machine in the source computing system and on this at least one physical machine is software or that is a client of the at least one source infrastructure management component. On the other hand in some cases the discovering is carried out on at least one physical machine in the source computing system and the at least one physical machine is a server on which the at least one source infrastructure management component runs. Questionnaires can also be used.

In some cases an additional step includes providing a system including distinct software modules each of the distinct software modules is embodied on a non transitory computer readable storage medium. The distinct software modules include a discovery tool module to carry out discovery a description module to hold and access description see discussion above of obtaining description and an infrastructure comparison engine module to implement engine and carry out analysis. Examples of a description module include a suitable database program to query a description stored in a database cloud portal query code querying if possible via a programmatic interface otherwise via one or more user interfaces or code to provision an image from the cloud catalog and perform discovery on that image to see what infrastructure software is installed on same. This infrastructure software is likely to be the cloud standard.

Non limiting examples of discovery tools include IBM Tivoli Application Dependency Discovery Manager TADDM available from International Business Machines Corporation Armonk N.Y. USA the IBM Galapagos tool and the like. With regard to the IBM Galapagos tool see e.g. Galapagos model driven discovery of end to end application storage relationships in distributed systems IBM Journal of Research and Development archive Volume 52 Issue 4 July 2008 Pages 367 377. In some instances with respect to the discovery tool at least a portion e.g. scripts or agents typically runs in the source environment while another portion runs on a dedicated server in the target environment. However the entire discovery tool could run on a dedicated server in the target environment with a connection or connections to the source environment . In some instances the entire discovery tool could run on the environment . Engine and the database with description would typically reside in the target environment e.g. . They can also reside in a separate analysis environment e.g. on servers of the team that performs the analysis. As discussed above existing tools can be modified to implement aspects of the invention.

A hardware infrastructure as a service cloud HIaaS Cloud provides bare bone virtual machines as a service. It may also provide an operating system and applications however support is typically not provided for any software installed on the virtual machine VM . A non limiting example is the Amazon Elastic Compute Cloud Amazon EC2 available from Amazon Web Services LLC Seattle Wash. USA. A managed infrastructure as a service cloud MIaaS Cloud provides full service virtual machines. The service contract includes providing software services for the underlying virtual machine. These services include software upgrades patch support support for compliance license management and the like for the provided software infrastructure. A non limiting example is the IBM SmartCloud Enterprise also known as IBM SCE cloud environment available from International Business Machines Corporation Armonk N.Y. USA. Image based migration uses customer images for migration of the application to the cloud. This approach minimizes expensive application re installation. A cloud standard is the minimum set of requirements needed to be met by a customer image to be run and managed in cloud.

From an information technology IT management perspective a hosting environment a cloud is a non limiting example that aggressively enforces standardization e.g. at operating system OS middleware and or application layer can lead to significant management cost savings. However migration of custom systems called source systems into such a standardized environment requires changes to be made to the software stack of the source system in order to comply with the standard. Those changes potentially carry a high risk of breaking the source system rendering it unusable.

In the recent years companies have increasingly adopted virtualization to achieve hardware consolidation. One or more embodiments address migration into a standardized virtualized environment. One example of such a standardized virtualized environment is an Infrastructure as a Service IaaS Cloud. In one or more embodiments herein a cloud environment is employed as a non limiting example of a standardized virtualized environment. However it is to be understood that one or more embodiments are broadly applicable to a general standardized virtualized environment that may or may not expose the same kinds of APIs of an IaaS cloud.

One or more embodiments advantageously provide a system that reduces the risk of migration via the use of snapshots to systematically capture system states at critical points of time during migration. Moreover one or more instances provide a system that supports two types of snapshots short term snapshots STS and long term snapshots LTS each optimized for specific usage scenarios. Furthermore one or more embodiments provide a method that balances various requirements of snapshotting resource utilization performance impact long term preservation and the like through a combination of short term snapshots and long term snapshots. Even further one or more instances provide a system that supports roll back to any type of snapshot. Yet further one or more embodiments provide a system that automatically provides an audit of the exact changes applied to the source system through the migration process. The changes can be viewed at two granularities file level and product level. Two levels of information are available for a long term snapshot the file system including meta data information about each file such as file name owner permission modified date and optionally a hash of the content of the file and the products software packages contained within the system.

For the avoidance of doubt snapshots as used herein include both long term snapshots and short term snapshots however the process of snapshotting refers to the creation of a short term snapshot while the creation of a long term snapshot is referred to as checking in or check in.

The following is a non limiting example of file level and product level changes referred to as diffs 

Advantageously one or more embodiments reduce the risk of migration by providing a time capsule of the system being migrated at critical points of time during migration such that the system can be rolled back to a known good state in case of failures. A customer will also know what changes have been applied to its system during migration before the system is on boarded into the cloud. The reduced risk translates to improved engagement success rate reduced downtime of applications and lower migration cost due to reduced debugging time during failures.

It is worth noting that virtual machine VM snapshot and roll back is a general mechanism available in modern hypervisors which have been used in various scenarios such as system debugging and or system security. In one or more embodiments the short term snapshot is essentially the same as a VM snapshot however the usage scenario is different reducing risk in migration . Additionally one or more embodiments employ novel long term snapshots and the novel combination of the two types of snapshots.

It is also worth noting that traditional backup tools are used to back up a system and later on restore the system to the state before the back up. In one or more embodiments the long term snapshot is stored as an image object in an image library existing backup systems deal with the concept of a file system whereas an image is a superset of a file system. An image also includes aspects of a virtual machine such as central processing unit CPU memory configuration and so on. An image library provides versioning and analytics capabilities.

Referring now to one or more embodiments advantageously reduce migration risk by using an image library . Here the snapshot action produces short term snapshots so are short term snapshots. The act of check in into the image library produces long term snapshots . In one or more instances the states at critical points of time are captured to form an image version chain e.g. version zero version one version two and version n . In the case of a system malfunction one or more embodiments revert to the last known good state. One or more instances retroactively introspect image versions i.e. inspect the content of the system at a point of time in the past . One or more instances diff i.e. carry out a comparison to identify differences any pair of versions at the file level to understand changes made between them. Furthermore in this regard one or more embodiments as part of the introspection aspect reconstruct an earlier state. For example when an image is checked into the image library the contents meta information are parsed and stored in the image library and the resulting data structure can subsequently be inspected. In the short term case short term snapshot such as in VMware a rollback process can be carried out.

Still referring to the process begins with an original image after physical to virtual P2V translation . This original image is imported into the image library as version zero at . An instance of the original image is started at . A first adjustment is made at to transition from instance to instance . Snapshots are taken of each incremental change i.e. of instance and instance instance is simply an instantiation of the original image after P 2 V so no snapshot is needed although one could be taken if desired . The snapshots are of a short term nature. Upon completion of the first adjustment snapshot is checked into the long term image library as version one at . A second adjustment is made at to transition from instance to instance . Snapshots are taken of each incremental change i.e. of instances . Upon completion of the second adjustment snapshot is checked into the image library as version two at . An even further adjustment is made at to transition from instance to instance . Snapshots are taken of each incremental change i.e. of instances . Upon completion of the third adjustment snapshot is checked into the image library as version n at . As indicated by the ellipsis any desired number of adjustments can be made. Time increases along the axis from left to right. Again the arrows from to represent a short term snapshotting process and the arrows from to represent a long term check in process.

Elements represent the same running instance at different points of time. Each small change is snapshotted as at however only the completion of significant adjustments triggers the check in of long term snapshots . The frequency of long term and short term snapshots is thus different.

Short term snapshots are relatively short lived such as the duration of the migration window which typically ranges from several hours to a weekend and contain memory states. Short term snapshots are employed for temporary debugging purposes and are typically intended to be discarded after debugging completes. Short term snapshots occur more frequently thus requiring fast on the order of seconds operation. Short term snapshots can be supported by a modern hypervisor VMware is a non limiting example VMware software is available from VMware Inc. Palo Alto Calif. USA . However each snapshot creates a new node in a snapshot chain. In almost all implementations of snapshots in modern hypervisors the technique of copy on write is used where a copy on write child is created on top of a read only parent allowing a very fast creation operation no data copying . Subsequent write operations only go to the child whereas read operations go to both the child and the parent. When multiple snapshots are created for the same VM a snapshot chain is formed where each snapshot is a node in the chain. The performance of a read operation then depends on the length of the chain because the hypervisor may have to traverse the chain all the way to the head in order to retrieve the data being asked for.

In at least some instances long chains lead to performance degradation and instability and thus may not be appropriate for production systems. In one or more embodiments short term snapshots of virtual machine instances are taken frequently and stored in the hypervisor as virtual machine images. Long term snapshots are taken less frequently e.g. at an initial state and after adjustments and checked in as images in image library . Long term snapshots resemble long term backups but are different in several ways.

In particular with regard to long term snapshots in some instances problems may occur long after migration e.g. in steady state in such cases it is still necessary to revert to the last known good state. The customer may require a snapshot of the original image before adjustment e.g. for audit and or compliance purposes . Use of an image library is more suitable in such circumstances. One or more embodiments thus store images in an image library as persistent data for long term preservation. In addition the image library provides versioning and analytics capabilities for the stored long term snapshots. However long term snapshots in an image library are typically less efficient in operation on the order of tens of minutes .

Referring now to in one or more instances a snapshot management system labeled in the figures as a snapper for brevity manages both short term snapshots and long term snapshots the snapshot management system also initiates rollbacks as described below . In one or more non limiting exemplary embodiments short term snapshots are VMware snapshots VM images of VM instances that reside on an operational repository in VMware data center while long term snapshots are checked into the reference repository of virtual image library . As used herein an operational repository is defined as a storage location where a hypervisor stores image files corresponding to running suspended and or stopped VM instances. Snapshot management system creates and deletes short term snapshots in the form of VM instances within VMware data center . Images of the instances are checked in and out of the operational repository as needed. The VMware data center is used for short term snapshots for rollback in the production environment . When a long term snapshot is desired an image in the operational repository is checked into the reference repository within analytics environment . Indexer indexes images in reference repository and optionally also indexes images in operational repository and or VM instances to create knowledge base . This knowledge base is used by engine to carry out analysis.

Furthermore in this regard snapshot management system creates frequently short term snapshots of executing virtual machine instances snapshot management system also deletes the short term snapshots from time to time . The short term snapshots are stored as virtual machine images of the virtual machine instances executing on the hypervisor in repository . When it is desired to create a long term snapshot e.g. prior to an adjustment snapshot management system causes a corresponding one of the virtual machine images in repository to be placed in reference repository . On the other hand as seen in when a rollback is desired snapshot management system checks the image out of reference repository as a template and places it into operational repository as seen at and then re configures the template to match an existing VM instance and instantiates a new virtual machine based on the template which VM image is swapped with the existing VM instance for which rollback is desired.

For the avoidance of doubt check in refers to placing something into the virtual image library and check out refers to taking something out of the virtual image library with version control these terms are not used in reference to the VMware data store because in this context VMware does not have version control and what occurs is simply a file copy operation. In one or more embodiments both long term and short term snapshots are triggered by adjustments. Short term snapshots are taken at each incremental step in an adjustment but long term snapshots are only taken at the beginning and end of a significant adjustment process skipping all incremental adjustments in the middle. This is shown in . Other approaches could be used in other embodiments.

Note that the VIL in is the same as the Image Library in and the operational repository in could be for example a VMware data store.

Again to summarize in one or more embodiments rolling back to a long term snapshot involves the following steps 

One or more embodiments thus advantageously provide a system that reduces risk in migration by using a combination of short term and long term snapshots to systematically capture system states and support roll back to any snapshot. One or more instances provide a method for initiating short term and long term snapshots and separating them as well as Virtual Image Library based VIL based long term snapshots. As seen in one or more embodiments provide a method for rolling back to a long term snapshot. One or more embodiments permit comparison of long term snapshots at the product and or file levels. Further as seen in one or more instances provide a method for computing the product level and file level changes made to the custom image during the migration process the output of which could serve as an audit record for clients that desire same. Even further as seen in one or more embodiments provide a process that integrates snapshot and rollback with each risky operation e.g. adjustments on a VM.

It is worth noting that while the idea of a checkpoint has been around for a long time it is mainly used to periodically save the states of a long running system so that if the system fails it can resume computation from the last checkpoint rather than starting from time zero as opposed to being used for cloud migration as in one or more embodiments .

Given the discussion thus far it will be appreciated that in general terms an exemplary method according to an aspect of the invention includes the step of during a process of migrating a source system into a standardized virtual environment snapshotting virtual machine instances of the source system executing in a hypervisor as virtual machine images in an operational repository of the hypervisor. The virtual machine images in the operational repository are short term snapshots . This step can be carried out for example by the snapshot management system invoking or issuing a command to the hypervisor VMware is a non limiting example of the latter . The method also includes from time to time during the migration process creating long term snapshots of the source system. The long term snapshots are created by checking given ones of the virtual machine images from the hypervisor operational repository into an image library as image objects e.g. in reference repository . This step can be carried out for example by the snapshot management system invoking or issuing a command to the virtual image library .

Furthermore with regard to the step of snapshotting snapshotting mechanisms per se are typically provided by known hypervisors. However in one or more embodiments snapshot management system issues a command to or invokes the hypervisor. That is to say existing hypervisors have snapshotting capability per se but in one or more embodiments a new piece of code namely snapshot management system is provided. Referring to the exemplary details in system has logic to determine when to issue commands. In one or more embodiments snapshot management system has a data structure or mapping table or the like that can map a given VM ID into a long term snapshot. System also has logic such that when asked to roll back to a long term snapshot system will know from the mapping which version of the long term snapshot is to be obtained from the image library checked out and swapped as shown in . Snapshot management system is thus a piece of software that implements the logic in based on external input. As seen in inputs include a command to take a long term snapshot a command to take a short term snapshot or a command to roll back to a previous state. API manager validates the arguments of input commands and creates and connects to any required services. Orchestrator decomposes the commands as needed to a sequence of commands that can be understood by the pertinent hypervisor and virtual image library in this non limiting example VMware vCenter and IBM VIL respectively . Orchestrator also orchestrates command execution and retrieves and processes results and errors.

For the taking of a short term snapshot orchestrator invokes VMware program API or other VMware adapter after the appropriate checking and conversion to an object are carried out. For the taking of a long term snapshot virtual image library query executor is employed to interact with image library as shown in . VMDK swap adapter builds and executes the VMDK swap command to implement the swapping process shown in .

Thus the step of creating the long term snapshots is carried out by the VIL under control of snapshot management system . One suitable virtual image library is the IBM SmartCloud Provisioning Virtual Image Library available from International Business machines Corporation Armonk N.Y. USA.

It will be appreciated that a cloud such as an MIaaS cloud or other cloud is one non limiting example of a standardized virtual environment.

In some cases the creating of the long term snapshots from time to time includes creating the long term snapshots prior to significant adjustments e.g. and in during the migration process.

As noted in one or more embodiments such rollbacks can be initiated during a steady state condition after the migration.

As shown in in some cases changes made during the migration can be determined by locating a first given one of the image objects in the image library as per step . The first given one of the image objects corresponds to one of the long term snapshots associated with an original customer image of the source system e.g. . A further step in determining changes includes as per step locating a second given one of the image objects in the image library. The second given one of the image objects corresponds to one of the long term snapshots associated with a customer image of the source system after the significant adjustments are complete e.g. . In step the differences between the first and second given ones of the image objects are computed e.g. with engine in some cases a diff feature of the aforementioned IBM SmartCloud Provisioning Virtual Image Library can be employed . An even further step includes making a representation of the differences available to a human operator e.g. via a suitable graphical user interface GUI displaying same on a display or the like . The differences that are computed can be for example file level differences and or product level differences.

In some cases a further step can include assigning a version number to each of the long term snapshots as shown in i.e. V. V. . . . V.n. The result is a version chain of images each corresponding to significant adjustments made effectively providing a source control system.

In another aspect an apparatus includes a memory e.g. RAM cache and at least one processor coupled to the memory and operative carry out or otherwise facilitate any one some or all of the aforementioned method steps. Optionally the apparatus further includes a plurality of distinct software modules . Each of the distinct software modules is embodied on a computer readable storage medium and the distinct software modules include a snapshot management system module a hypervisor module and a virtual image library module as discussed elsewhere herein. The snapshot management system module optionally includes one some or all of the sub components in .

A virtual machine VM is a software implementation of a computer that executes programs like a physical machine. Virtual machines may have one or more virtual disks associated therewith. One or more embodiments advantageously facilitate the growth of cloud computing by providing one or more of 

Advantageously one or more embodiments provide techniques for replacing the disks associated with an existing virtual machine with disks of another virtual machine or images thereof without impacting functionality or the identity of the virtual machine. Indeed one or more embodiments provide techniques to support the ability to replace the disks associated with a virtual machine with the disks associated with another virtual machine or image techniques which determine the compatibility of the virtual machine configurations and their disks and or techniques which ensure that the resulting virtual machine continues to function after the disks have been replaced.

Furthermore in this regard and referring now to in at least some embodiments there are four states overall as listed below. An image is offline dormant static as in image of a virtual machine. An instance is a running virtual machine or registered to be able to run in a virtual machine as in an instance of an image. As in a virtual machine image or image or virtual machine template includes a virtual disk containing at least an operating system and virtual hardware suggestions such as CPU memory and or disk. A virtual machine or instance or instance of an image includes and as well as virtual hardware allocations of CPU memory and or disk and a hypervisor of virtual machine runtime . The aforementioned four states include 

The replacing of the target could occur from any one of these source states. Therefore in the most general case the source can but need not be an image format as in 1 and 2 or it could be transported directly as per 3 or 4 .

Furthermore one or more embodiments provide a systematic way to enable a cloud to adopt an existing server without the need to migrate the application to a net new cloud instance and or a rule system to capture which attributes of a source and a target virtual machine should be preserved in order to maintain virtual machine functionality and to be undetectable to the parent hypervisor and or cloud.

In at least some cases virtual machines can be replaced without making it known to external elements such as for example a cloud management stack. This capability allows for substantial changes to be made to a virtual machine for example replacing the contents of all disks without the hypervisor or dependent management stack being aware of the change. One or more embodiments can be used for example to migrate an external virtual machine into a managed cloud thus enabling the cloud to import existing virtual machines. Furthermore one or more embodiments can be used to restore a virtual machine to a previous state.

Attention should now be given to the system diagram of . Note source virtual machine with one or more disks such as disk numbered and disk numbered . Disks are all virtual disks. Virtual disks are discussed further in connection with e.g. . The system also includes a virtual machine disk replacer such as image replacer which operates in accordance with merger rules . It is desired to replace Disk and Disk on target VM with disks . The disks also represent the after migration state that is prior to migration Disk and Disk are in an original state and after migration they have effectively been replaced with disks respectively. The target virtual machine is managed by hypervisor and the overall target cloud environment is managed by cloud management software .

Referring now also to cloud hypervisor same as hypervisor is a hypervisor which is managed by the desired target cloud all instances running within the hypervisor are assumed to be managed by the cloud. Note that in the source is depicted external to the cloud hypervisor while in both source and target are located on the same hypervisor. These scenarios are different but both are valid and possible. The customer image is imported into the cloud environment and is the source in the technique shown in cloud image is the target. As noted elsewhere an image of source is not always required. Source is implemented on virtual machine . Virtual disk descriptor is a meta file describing the attributes of the virtual disk s which are the actual block allocations where the disk content is stored.

The cloud adopter implements one or more techniques described herein in accordance with merge rules . Merge rules in and merger rules in are the same. Element is the same as element element is the same as element and element is the same as element . Disks include one of . Disks include one of disks . Note that provides additional details on the relationships of virtual disk descriptors to virtual disk extents to virtual disks. The merge rules provide specific rules about which attributes of the source virtual disk descriptor s the target virtual disk descriptor s and process are included in the final target disk descriptor . The merge rules ensure that the resulting virtual machine executes and that the cloud management layer and hypervisor cannot notice a difference. The virtual disks are the actual block allocations where the disk content is stored in the new virtual machine .

With continued attention to consider also which depicts a process of replacing a set of disks of a VM with those of a source virtual machine . In step identify the receiving cloud instance . In one or more embodiments the target is a virtual machine instance that is in a powered off state. In step identify the customer source . In step compare the virtual resources of VM with those of VM . In step determine if the resources are compatible if not reject the proposed replacement at and then the process ends at .

Reference should now be had to . Note VM image . In a hypervisor there is typically an overall VM description file setting forth all the virtual hardware characteristics of the virtual machine. In some cases as shown in FIG. all pertinent disk information regarding virtual disks is contained in this single master file. In other cases as seen in the master file references other files descriptors which include the details of one or more virtual disks .

Returning now to if the virtual resources are compatible as shown at the YES branch of decision block merge the source virtual resource descriptors e.g. virtual disk descriptors and the target virtual resource descriptors e.g. virtual disk descriptors in step . Furthermore in this regard elements and represent the target disk descriptor before the replacement occurs. After the merge and replace element becomes an updated version which is a combination of parameters for the source and the target. Part of step includes the step to write the new target disk descriptor . See .

In decision block determine if the merge of the virtual resource descriptors in step was successful if not the process ends at . On the other hand if the merge of the virtual resource descriptors in step was indeed successful proceed to step and replace the virtual disk as shown at in . In decision block determine whether the source VM has more disks if yes repeat steps as needed if not update the overall instance descriptor in step . Step is optional and depends on whether the approach of or is used by the VMs that are being operated on. Processing ends at .

Furthermore with regard to implementations can differ in that all virtual machine resource information including disks can be stored in a single file as in or it can be separated into many files as in . The approach is depend ent on the hypervisor and has to do with the level of decoupling of components i.e. for the examples with virtual disk descriptors there is a reference in the overall virtual machine definition linking to those descriptors then more information in the descriptors about the actual characteristics of the underlying disk . Step is appropriate where the approach of is utilized.

In this regard the merge rules are specific to the target hypervisor non limiting examples include VMware virtualization software available from VMware Inc. Palo Alto Calif. USA KVM software for Kernel based Virtual Machine available from RedHat Inc. Raleigh N.C. USA Xen software available from Citrix Systems Inc. Ft. Lauderdale Fla. USA and so on . In step and decision block a number of determinations are made as attributes of both the source and target environments are examined. Steps are discussed further below with regard to . With regard to source attributes it may be determined for example that Attribute A of the source must persist to ensure continued virtual machine functioning in the target cloud. Examples of such source attributes include the Virtual disk input output IO controller the block size the number of blocks and so on. The same are written to the new target descriptor which is a combination of both source and target parameter values in step see discussion of below. With regard to target attributes it may be determined for example that Attribute B of the target must persist to ensure that the cloud successfully adopts the virtual machine nether hypervisor nor cloud notices a difference . Examples of such target attributes include the virtual disk unique identifier. The same are written to the new merged descriptor in step . Processing then flows to step .

In decision block check to see if there are additional attributes if so loop back to step and repeat the process until all the attributes have been examined. If there are no more attributes the process ends at step and flow proceeds to step in .

Considering now source virtual machine descriptor includes Parameters with respective values A B C and D. Target virtual machine descriptor includes Parameters with respective values X Y and Z. As indicated at the logic in step is applied for each parameter in the source and target descriptors i.e. Parameters . In step target parameters dominate unless the source parameter is needed to maintain functionality or compatibility. Thus by default all target parameters are retained in updated target virtual machine descriptor but only the needed source parameters are retained. In the example in the source parameter values for parameters and were necessary while the target value of Y for parameter was retained by default because that source parameter was not needed to maintain identity or functionality. It should be noted that target parameters are assumed to all be compatible as they were the initial values for the existing virtual machine which presumably functioned and was properly known to the hypervisor management layer.

Thus one or more embodiments provide a system and method to support the ability to replace the disks associated with a virtual machine with the disks associated with another virtual machine or image a method which determines the compatibility of the virtual machine configurations and their disks and or a method which ensures that the resulting virtual machine continues to function after the disks have been replaced.

Referring now to the system diagram of one or more embodiments consider an existing physical or virtual server that does not reside within the managed cloud rather server resides in existing source environment . Server has existing disks . As seen at server is converted to an image . This hypervisor compatible image is then transported into the target cloud . During cloud adoption process merger and replacement of the cloud provisioned image with the customer image is carried out. This process can in some instances be facilitated by migration engineer . The cloud is unaware of any significant change to a virtual machine here VM numbered running under its control as indicated at .

Target cloud includes a management layer which in at least some instances can be similar to layer described above . Cloud user interacts with management layer . Management layer manages hardware and software of the cloud environment including one or more hypervisors such as . The hypervisors in turn manage one or more virtual machines in the example of Hypervisor numbered manages VMs numbered Hypervisor numbered manages VM numbered and Hypervisor numbered manages VMs numbered .

Thus one or more embodiments provide a method which allows a non cloud provisioned image to be adopted by the cloud and be treated as any other cloud provisioned instance a process which defines how to move an existing physical or virtual server into a cloud without formal support a system that supports merging virtual machine descriptors and or replacing target image disks with source image disks and or a method of merging virtual resource descriptors. This latter method can include for example retrieving virtual resource descriptor s from a source and target image comparing the attributes of each virtual resource descriptor and or merging both descriptors into a third descriptor which is compatible with the target virtual machine configuration the target hypervisor the target virtual machine operating system and the target cloud.

One or more embodiments thus provide the capability to replace one or more virtual disks associated with a source virtual machine over the same number of virtual disks associated with a target virtual machine. This capability enables the ability to migrate either a virtual machine or virtual machine image into an existing virtual machine definition. This is relevant for example in a cloud or managed cloud scenario where the identity and features of the virtual machine are managed at a higher level i.e. to track capacity licensing and so on . If the identity changes the management layer would lose track of the system. Another scenario allows for the restoration of a virtual machine to a previous state by allowing its current set of virtual disks to be replaced by a previously captured set of virtual disks. A further possibility allows the re use of virtual machine containers by simply replacing the virtual disk contents as opposed to creating entirely new containers each time.

Given the discussion thus far it will be appreciated that in general terms an exemplary method according to an aspect of the invention includes the step of merging at least one target virtual disk descriptor that describes at least one virtual disk associated with an existing target virtual machine in a target virtualized environment with at least one source virtual disk descriptor that describes at least one virtual disk associated with a source. The merging is carried out in order to obtain at least one merged virtual disk descriptor also represented by i.e. element represents the descriptor before the merge and also after the merge at which point it has some source parameters . The at least one merged virtual disk descriptor is compatible with the target virtualized environment. In some cases step can be carried out using a MergeDiskMetaData sub module of a swap module executing on at least one hardware processor as described below in connection with . A further step includes replacing the at least one virtual disk associated with the existing target virtual machine in the target virtualized environment with the at least one virtual disk associated with the source in accordance with the merged plurality of virtual resource descriptors. In some cases step can be carried out using a PutDisk sub module of a swap module executing on at least one hardware processor as described below in connection with .

Furthermore in this regard in note swap module . Preparation sub module ensures that the source and target VMs are in a state wherein they can be operated upon image versus instance . Any needed preparations are carried out by prepSource sub module and prepTarget sub module for the source and target respectively. CheckCompatibility sub module makes sure that the source and target are compatible. SwapDisks sub module and replaceDisk sub module include control logic to implement the looping in through the tasks assigned to sub modules and i.e. steps and .

TransformDisk sub module addresses issues if the source does not match the target specification it transforms the actual virtual disk to make it indistinguishable. One example is if the source and target virtual disks are of different sizes. This will typically not impact the hypervisors but could cause issues with future operations such as extend disk. The updateVMSpec sub module carries out the optional step associated with type configurations. Hypervisor adapter module merges in each of the functions to the APIs exposed by the hypervisors namely the ability to copy files move files obtain descriptors and update descriptors. The ellipses with regard to refer to operation implementation as spelled out in .

Furthermore with regard to prepare block refer to . The prepare function obtains or accesses the source image source physical machine or source virtual machine and brings same to a state where the replace operation can be carried out. Source image can simply be deployed to a VM under a hypervisor as shown at . Source physical machine can be converted to an image in the case of no hypervisor as shown at or converted to a VM in the case of a hypervisor as shown at . Source VM can also be converted to a VM as in . In each case flow proceeds as appropriate to the target VM disk replacement at .

The modules and or sub modules shown in can be written in a variety of languages Perl is a non limiting example.

In some cases the target virtualized environment is a target cloud environment. One or more embodiments are believed to be especially useful with respect to clouds because clouds are sensitive to the changing of identity.

One or more embodiments thus address the replacement of virtual disks which is supported by the merging of meta data about those virtual disks.

In some instances the source is a customer source outside the target cloud environment and the replacing includes migrating the at least one disk associated with the source to the at least one disk associated with the existing target virtual machine as depicted e.g. in .

In at least some embodiments an additional step includes comparing virtual resources of the at least one disk associated with the existing target virtual machine and the at least one disk associated with the customer source outside the target cloud environment. In such cases the merging is in response to the comparing of the virtual resources indicating compatibility thereof as per the YES branch of decision block .

In at least some embodiments an additional step includes checking for success of the merging step. In such cases the replacing in is response to the checking indicating the success of the merging step as per the YES branch of decision block .

With regard to the decision in decision block one or more embodiments make use of a data repository which tracks known compatibilities. These compatibilities for instance would compare the IO adapter or the like across the source and target to determine if the source operating system would be able to function with the target adapter if different . In some embodiments a check is also made to ensure that the number of disks matches i.e. might be unable to merge a source with two disks into a target with one disk . Overall the content of database may for example be mined from the technical limitations associated with both the operating system and software contained within the virtual machine image as well as any compatibility issues at the hypervisor level i.e. maximum disk size maximum number of disks and so on .

An analogous approach may be used to develop a data store omitted from figure to avoid clutter on which the decision in block may be based.

As indicated by decision block in some cases the merging and replacing steps are repeated for one or more additional source virtual disks. This overall flow can operate on each virtual disk associated with the source image virtual machine. The decision block check is a go no go before any changes are made. The processes are the actual updating of the disk meta data and replacing of the disk.

In at least some cases an additional step includes updating an overall instance descriptor. Again step is optional and depends on whether the approach of or is used by the VMs that are being operated on.

In some cases the merging step includes as seen at examining at least one source attribute associated with the at least one source virtual disk descriptor and examining at least one target attribute associated with the at least one target virtual disk descriptor. A further step includes applying a plurality of merge rules to the at least one source attribute and the at least one target attribute to obtain the at least one merged virtual disk descriptor. The merge rules persist in the at least one merged virtual disk descriptor source attributes needed to ensure continued virtual machine functioning in the target cloud and target attributes required for the target cloud to successfully adopt the virtual machine. Furthermore in this regard in one or more embodiments there are descriptors for the source the target before the merge and the target after the merge. The source and target merge to create an updated target. The target virtual machine continues to function properly as does the runtime of the virtual disks which have been replaced into it.

Non limiting examples of merge rules used in applying step include persisting a virtual disk input output controller of the at least one virtual disk associated with the source persisting a block size and number of blocks of the at least one virtual disk associated with the source and persisting a virtual disk unique identifier of the at least one virtual disk associated with the existing target virtual machine.

In some cases a source disk image is already available. Also as discussed above the replacing of the target could occur from any one of source states 1 4 and in the most general case the source can but need not be an image format. In some cases as seen at an additional step includes converting a source instance to obtain a source disk image .

In at least some cases the target virtual machine has a target virtual machine configuration the target virtual machine is hosted on a guest of a target hypervisor and the target virtual machine optionally has a target operating system. In the merging step the compatibility with the target virtualization environment includes at least compatibility with the target virtual machine configuration and the target hypervisor. Optionally the compatibility with the target virtualization environment further includes compatibility with the target operating system.

With regard to the target virtual machine not having an operating system in some cases one example is a PXE boot system or system booting from CD DVD the same could have all of its disks replaced without impacting the operating system. 

In addition to migration applications in some cases the source is a back up source and the replacing includes restoring the at least one disk e.g. or associated with the existing target virtual machine using the at least one disk image associated with the back up source.

As noted elsewhere in one or more embodiments there is no change to functionality and identity of the VM and or the process is not detectable to the parent hypervisor and cloud management . It should be noted that hypervisors typically have the concept of a unique identifier for the virtual machine that is not duplicated within the virtualization environment. The skilled artisan will be familiar with same for example from VMware and KVM for Kernel based Virtual Machine a full virtualization solution for Linux on x86 hardware containing virtualization extensions . The VMware Virtual Machine UUID backed by a field called uuid.bios in the virtual machine descriptor file a .vmx is a non limiting example of a unique identifier. This in one or more embodiments any type of unique identifier or associated data stored in the hypervisor or management stack remains consistent and unchanged. The operation behavior of the replaced target disks is equivalent to that of the original runtime with the source disks. Thus in some cases when replacing the at least one virtual disk associated with the existing target virtual machine in the target virtualized environment with the at least one virtual disk associated with the source a unique identifier of the existing target virtual machine is maintained prior and subsequent to the replacement.

In another aspect an apparatus includes a memory e.g. RAM cache and at least one processor coupled to the memory and operative carry out or otherwise facilitate any one some or all of the aforementioned method steps. Optionally the apparatus further includes a plurality of distinct software modules . Each of the distinct software modules is embodied on a computer readable storage medium and the distinct software modules include a MergeDiskMetaData module and a PutDisk module as discussed elsewhere herein.

A hardware infrastructure as a service cloud HIaaS Cloud provides bare bone virtual machines as a service. It may also provide an operating system and applications however support is typically not provided for any software installed on the virtual machine VM . A non limiting example is the Amazon Elastic Compute Cloud Amazon EC2 available from Amazon Web Services LLC Seattle Wash. USA. A managed infrastructure as a service cloud MIaaS Cloud provides full service virtual machines. The service contract includes providing software services for the underlying virtual machine. These services include software upgrades patch support support for compliance license management and the like for the provided software infrastructure. A non limiting example is the IBM SmartCloud Enterprise also known as IBM SCE cloud environment available from International Business Machines Corporation Armonk N.Y. USA. Image based migration uses customer images for migration of the application to the cloud. This approach minimizes expensive application re installation. A cloud standard is the minimum set of requirements needed to be met by a customer image to be run and managed in cloud.

One or more embodiments advantageously provide a system and method for rapid reliable and reduced cost adjustment to MIaaS cloud standard. One or more embodiments take an arbitrary customer instance and perform a set of changes so that the MIaaS management layer can manage the customer application exactly as it would manage an application created from its own golden masters reference models from which copies are mass produced . One or more embodiments provide a process which is rapid the end to end duration of standardization is small e.g. 

In one or more embodiments rules are used to uniformly encode adjustment recipes across various kinds of images image adjustments are used for standardization and or a generic orchestration framework is used to deal with multiple types of adjustment actions.

Currently with regard to attempts to standardize migration to MIaaS environments it should be noted that an MIaaS delivery model is dependent on having prefabricated virtual machine images which meet all the services requirements. Currently standardization for image based migration is manual and suffers from being time consuming costly and unreliable. Current techniques are time consuming because a large number of long running steps are needed. Current techniques are costly because all steps are performed manually. Furthermore current techniques are unreliable furthermore in this regard since source instances are different a migration engineer needs to manually identify the right set of steps to be performed on each source instance. The result is that required steps may be missed unwanted steps may be performed and corrupt the instance and or many decisions are not technical and need to be taken in consultation with the customer. That is to say the migration engineer may not be suited for deciding on the fly.

One or more embodiments advantageously provide a rapid standardization approach. One or more embodiments define a generic framework as seen in in which standardization plans can be injected. Note adjustment framework supporting tools including individual tools and adjustment zone . Adjustment plans can encompass a wide variety of adjustment actions. Each type of action is orchestrated by its orchestrator the orchestrators operate under control of adjustment choreographer . New actions can be added to an existing plan allowing the framework to be extensible. Adjustment actions can also include offline adjustments which do not require an instance to be running.

New orchestrators and actions can be registered in the adjustment plan for example using a suitable plan manager . Each orchestrator may interact with the virtual machines online image repository offline virtualization manager or any other supporting tools e.g. IBM Tivoli Endpoint Manager TEM server IBM Tivoli Provisioning Manager available from International Business Machines Corporation Armonk N.Y. USA VMware vCloud Director available from VMware Inc. Palo Alto Calif. USA .

One or more embodiments provide a rapid standardization system and method which utilizes offline adjustments. Offline adjustments are file system patches that can be applied to a virtual machine image. Adjustments will make changes to the image to meet the cloud standard e.g. install a Secure Shell SSH service . Offline adjustments can be applied in parallel and without using up any compute resources thus enabling rapid adjustments. Offline adjustments include simple file system copies or other operations not requiring the VM to be activated. This takes much less time than actual execution of the install configuration steps again enabling rapid adjustment . Offline adjustments can be applied without booting up the image and do not need network access to the image. This advantageously solves the chicken and egg problem wherein access to the VM in cloud requires configuration thus removing manual steps .

The flow chart of shows the flow of a sample offline adjustment. The flow chart begins at . In decision block determine for example whether cygwin ssh service exists. In this regard Cygwin is a Unix like environment and command line interface for Microsoft Windows. Cygwin provides native integration of Windows based applications data and other system resources with applications software tools and data of the Unix like environment. Thus it is possible to launch Windows applications from the Cygwin environment as well as to use Cygwin tools and applications within the Windows operating context.

In this example as seen at the YES branch of block if the cygwin ssh service already exists further processing is not needed so proceed to the end and . On the other hand if the cygwin ssh service does not already exist as seen at the NO branch of block in step power of the virtual machine and mount the virtual machine. In step copy the cygwin manifest onto the image. In step copy the required public keys onto the image. In step update the registry to run the script on the first boot of an instance. In step dismount the virtual machine and power on the virtual machine. In step the script to enable the ssh service now executes automatically proceed to end step . It should be emphasized that is but one specific detailed example demonstrating how an offline adjustment can be carried out in one or more embodiments. Furthermore in this regard as noted offline adjustments are file system patches that can be applied to a virtual machine image implementing cygwin ssh service is thus a non limiting specific example of many kinds of offline adjustments that can be carried out in one or more embodiments.

Reference should now be had to . One or more embodiments provide reduced cost standardization via an automated adjustment engine . One or more embodiments include an adjustment orchestrator and or . The orchestrator and or defines a set of phases where a dependent phase is executed only after all its antecedent phases have been executed. Steps in each phase are encapsulated as a script. Scripts can be run on the adjustment engine on target virtual machines or on any other management tool e.g. integrated with vCenter VMware vCenter Server provides a centralized and extensible platform for managing virtual infrastructure and is available from VMware Inc. of Palo Alto Calif. USA or TEM . In one or more embodiments a single user interface is provided for all kinds of images e.g. Windows Linux AIX . Furthermore in this regard in an exemplary embodiment element is the adjustment portal and the master choreographer which decides the order in which the individual orchestrators will be invoked. The adjustment engine is the sum of all components. The portal is an optional entity in element as the choreographer can be invoked directly using a programmable API. In summary in the non limiting example element equals the choreographer plus optionally the portal. In one or more embodiments multiple images can be adjusted in parallel this reduces the amount of time spent per image being standardized .

One or more embodiments provide reliable standardization. One or more embodiments provide a flexible rule framework that takes conditions and actions. Conditions provide the flexibility to handle different types of source images. Conditions and actions come up with associated scripts. In at least some cases this involves a two step process. The customer approves the valid set of rules for his or her data center and bootstraps the Adjustment Orchestrator and or see also with the rules. The tool allows migration engineers to execute the standardization in conformance with the rules. A log is maintained to audit the standardization process any later time. Furthermore in one or more embodiments snapshots are employed to allow rollback to a reliable version of the image in case of standardization failures. In some embodiments at least a two step process is employed however in certain cases a multiple step process is utilized. The customer may define a set of migration rules and the migration engineer may provide feedback that some rules cannot be enforced and thus there could be an iterative back and forth.

The following is an exemplary illustrative rule set that may be used in the reliable standardization process described just above 

In the event of any failure as seen at fix the errors rollback and retry. Once all steps are successful whether on the first attempt or a subsequent re try as seen at start the VM. Then implement an agent un install procedure for example 

In the event of any failure as seen at fix the errors rollback and retry. Once all steps are successful whether on the first attempt or a subsequent re try as seen at proceed to the agent install process for example 

In the event of any failure as seen at fix the errors rollback and retry. Once all steps are successful whether on the first attempt or a subsequent re try as seen at proceed to the patching process for example 

In the event of any failure as seen at fix the errors rollback and retry. Once all steps are successful whether on the first attempt or a subsequent re try as seen at proceed to the compliance process for example 

In the event of any failure as seen at fix the errors rollback and retry. Once all steps are successful whether on the first attempt or a subsequent re try as seen at proceed to the on boarding process.

Online adjustment orchestrator invokes compliance manager backup manager and script execution manager . Compliance manager also invokes script execution manager . Online adjustment orchestrator uses patch manager .

Attention should now be given to which show exemplary detailed steps in an adjustment phase. Each step is shown in a swim lane indicating what module or entity carries out the particular step in the exemplary embodiment. Please note that elements cloud portal and are not needed for the process depicted in but are included for illustrative purposes. Migration team captures all activities performed by the migration team. This includes activities that are performed by using the Adjustment GUI or invoking the Adjustment APIs as well as manual steps to check for success and failure. Test and Troubleshoot VM steps represent a manual process in the example of . The remaining steps are typically automated and involve clicking a button on the portal or calling an API. The entities include the TSAM IBM Tivoli Service Automation Manager software available from International Business Machines Corporation Armonk N.Y. USA administrator migration team VMware vSphere Virtualization Manager Portal TSAM and back up library . Processing begins at . In step carry out smoke testing i.e. a process of validating code changes before the changes are checked into the product s source tree . In step back up the VM in question in step check same into the back up library. In step the hypervisor provides the VM in step configure the VM. Step is analogous to step in . In step test and troubleshoot the VM. In step back up the configured and tested VM in step check same into the back up library. In step the hypervisor provides the configured and tested VM in step remove inappropriate software and or agents. Step is analogous to step in . In step test and troubleshoot the updated VM with the inappropriate software and or agents removed. Processing continues at .

In processing begins at point which is identical to point . In step back up the updated VM with the inappropriate software and or agents removed in step check same into the back up library. In step the hypervisor provides the updated VM with the inappropriate software and or agents removed in step install appropriate agents. Step is analogous to step in . In step test and troubleshoot the updated VM with the appropriate agents installed. In step back up the updated VM with the appropriate agents installed in step check same into the back up library. In step the hypervisor provides the updated VM with the appropriate agents installed in step install patches. Step is analogous to step in .

In step test and troubleshoot the updated VM with the patches installed. In decision block determine if the testing was successful if yes at proceed to the flow in if no at fix errors rollback and retry as at in . In processing begins at point which is identical to point . In step back up the updated VM with the patches installed in step check same into the back up library. In step the hypervisor provides the updated VM with the patches installed in step ensure compliance. Step is analogous to step in . In step test and troubleshoot the post compliance check VM. In decision block determine if the testing was successful if yes at proceed with on boarding if no at fix errors rollback and retry as at in . In general in case of errors roll back to any backup step in the flow is possible.

An IBM Tivoli Endpoint Manager TEM server may be employed for migration purposes communication with same may be had for example via transfer control protocol tcp . The TEM controls VM patching for the cloud managed environment in which adjusted VMs reside communication can be via http or User Datagram Protocol udp . TEM communicates with Internet via http on port .

One or more embodiments thus provide a system and method to adjust images so that they meet the image standard of a managed environment and can be managed using standard processes and tools. In one or more embodiments such a system includes one or more adjustment type orchestrators handling specific types of adjustments an adjustment plan capturing all the adjustments and an adjustment plan maintenance component .

Non limiting examples of orchestrators include an Access Enablement Orchestrator to ensure that all source images can be accessed by all relevant management entities including other orchestrators an Uninstall Orchestrator to uninstall unwanted software an install orchestrator to install required software a Patch Orchestrator to ensure patch standardization and a compliance orchestrator to ensure compliance with one or more cloud standards. Different embodiments could include additional orchestrators fewer orchestrators or precisely the orchestrators just described for example.

The orchestrators may operate on file system virtual machine images e.g. in image repository or on VM instances .

In some cases the actions executed by each of the orchestrators are determined by a rule engine. Furthermore in this regard the rule engine is not shown explicitly in the figures to avoid clutter however in one or more embodiments a rule evaluation engine is implicitly implemented in each orchestrator which needs to evaluate each condition and execute the action only if the condition is satisfied. In some cases such a rule engine includes a set of condition action pairs e.g. If Cygwin not installed Then Install Cygwin and so on as discussed above in such cases the action is executed only when the condition is satisfied. In some cases new rules can be injected in the rule engine to extend the tool for dealing with new kinds of customer images for example such rules can be injected by an adjustment plan maintenance component such as plan manager which allows for creation editing and or deletion of rules.

In at least some cases the overall adjustment flow can be tuned by changing the adjustment plan and or changing the order of the orchestrators or .

Given the discussion thus far it will be appreciated that in general terms an exemplary method according to an aspect of the invention includes the step transferring an arbitrary customer instance generally one or more such instances from a customer environment to a target infrastructure as a service cloud environment as a generally one or more transferred image. Transferring should be broadly understood to include acts by the provider of the infrastructure as a service cloud environment and or acts by the customer. This step can be carried out for example by a transfer core component e.g. a module in the target infrastructure as a service cloud environment configured to obtain the arbitrary customer instance from a customer environment . A further step includes formulating an image adjustment plan capturing at least one adjustment required to render the transferred image s compliant with standards of the target infrastructure as a service cloud environment. Formulating should be broadly understood to include acts performed solely by a machine e.g. storing instructions input by a human which codify the plan or acts by both a machine and a human. This step can be carried out for example by adjustment plan maintenance component . A further step includes executing the image adjustment plan to adjust the transferred image s to obtain an adjusted image compliant with standards of the target infrastructure as a service cloud environment. This step can be carried out by an orchestration component e.g. choreographer and one or more orchestrators . A still further step includes on boarding the adjusted image s into the infrastructure as a service cloud environment as a standard image thereof generally one or more standard image s . Standard implies that the image then works in the same manner as if it had been made from the systems own golden masters. This step can be carried out for example by cloud management layer .

In some cases the transferred image is adjusted online while running as an instance in the infrastructure as a service cloud environment e.g. . In such cases the executing step includes executing the image adjustment plan with an automated framework including at least one online orchestrator interacting with the instance in the infrastructure as a service cloud environment.

In some cases the transferred image is adjusted offline in a file system of the infrastructure as a service cloud environment. In such cases the executing step includes executing the image adjustment plan with an automated framework including at least one offline orchestrator interacting with the transferred image in the file system of the infrastructure as a service cloud environment.

In some cases the executing step includes executing the image adjustment plan with an automated framework including at least one orchestrator interacting with a virtualization manager and or supporting tools of the infrastructure as a service cloud environment.

In at least some embodiments the infrastructure as a service cloud environment includes a managed infrastructure as a service cloud environment having a management layer . In such cases in at least some instances a further step includes managing the standard image with the management layer together with at least one application created from a managed infrastructure as a service cloud environment application golden master i.e. an application created from a golden master associated with the managed infrastructure as a service cloud environment not meant to imply that it is somehow a golden master of the whole cloud environment .

In some embodiments the image adjustment plan is executed with an automated framework including at least one of an access enablement orchestrator which ensures that the adjusted image can be accessed by a management layer of the target infrastructure as a service cloud environment an agent uninstall orchestrator which uninstalls unwanted software from the transferred image an agent install orchestrator which installs required software to the transferred image a patching orchestrator which ensures that the adjusted image has installed thereon patches required by the standards of the target infrastructure as a service cloud environment and a compliance orchestrator which ensures that the adjusted image conforms to the standards of the target infrastructure as a service cloud environment.

In some cases the executing step includes executing the image adjustment plan with an automated framework by using an access enablement orchestrator to ensure that the adjusted image can be accessed by a management layer of the target infrastructure as a service cloud environment using an agent uninstall orchestrator to uninstall unwanted software from the transferred image using an agent install orchestrator to install required software to the transferred image using a patching orchestrator to ensure that the adjusted image has installed thereon patches required by the standards of the target infrastructure as a service cloud environment and using a compliance orchestrator to ensure that the adjusted image conforms to the standards of the target infrastructure as a service cloud environment.

In some cases adjustment plan includes rules that uniformly encode adjustment recipes across different kinds of images. Preferably but optionally the orchestration framework is generic and can deal with multiple types of adjustment actions. In at least some cases the adjustment orchestrator s define s a set of phases with steps in each phase encapsulated in a script. Such scripts may run in an adjustment engine and may target VMs management tools or the like. Some techniques adjust multiple images in parallel. In some cases the adjustment orchestrator s is are bootstrapped with rules. The actions of the orchestrators are determined by a rule engine a set of condition action pairs new rules can be injected by adjustment plan maintenance component . The adjustment flow can be changed by changing the plan and or changing the order of the orchestrators. The framework can be extended by adding and or registering a new action and or orchestrator to an existing plan.

In another aspect an exemplary apparatus includes a memory e.g. RAM cache at least one processor coupled to the memory and a non transitory computer readable storage medium embodying in a non transitory manner a plurality of distinct software modules . The plurality of distinct software modules in turn include an adjustment plan maintenance component module including instructions which when loaded into the memory configure the at least one processor to formulate an image adjustment plan capturing at least one adjustment required to render a transferred image compliant with standards of a target infrastructure as a service cloud environment. The transferred image includes an arbitrary customer instance from a customer environment. Also included are an adjustment orchestration module e.g. and including instructions which when loaded into the memory configure the at least one processor to execute the image adjustment plan to adjust the transferred image to obtain an adjusted image compliant with standards of the target infrastructure as a service cloud environment and a cloud management module including instructions which when loaded into the memory configure the at least one processor to on board the adjusted image into the infrastructure as a service cloud environment as a standard image thereof.

In some cases the adjustment orchestration module includes instructions which when loaded into the memory configure the at least one processor to adjust the transferred image online while running as an instance in the infrastructure as a service cloud environment as at . In some cases the adjustment orchestration module includes instructions which when loaded into the memory configure the at least one processor to adjust the transferred image offline in a file system of the infrastructure as a service cloud environment.

In some embodiments the adjustment orchestration module includes instructions which when loaded into the memory configure the at least one processor to interact with a virtualization manager of the infrastructure as a service cloud environment. In some embodiments the adjustment orchestration module includes instructions which when loaded into the memory configure the at least one processor to interact with a supporting tool of the infrastructure as a service cloud environment.

In at least some cases the infrastructure as a service cloud environment includes a managed infrastructure as a service cloud environment having a management layer . The management layer can for example manage the standard image together with at least one application created from a managed infrastructure as a service cloud environment application golden master.

In some embodiments the adjustment orchestration module includes an adjustment choreographer and at least one of an access enablement orchestrator which ensures that the adjusted image can be accessed by a management layer of the target infrastructure as a service cloud environment an agent uninstall orchestrator which uninstalls unwanted software from the transferred image an agent install orchestrator which installs required software to the transferred image a patching orchestrator which ensures that the adjusted image has installed thereon patches required by the standards of the target infrastructure as a service cloud environment and a compliance orchestrator which ensures that the adjusted image conforms to the standards of the target infrastructure as a service cloud environment.

In some cases the adjustment orchestration module includes an adjustment choreographer an access enablement orchestrator which ensures that the adjusted image can be accessed by a management layer of the target infrastructure as a service cloud environment an agent uninstall orchestrator which uninstalls unwanted software from the transferred image an agent install orchestrator which installs required software to the transferred image a patching orchestrator which ensures that the adjusted image has installed thereon patches required by the standards of the target infrastructure as a service cloud environment and a compliance orchestrator which ensures that the adjusted image conforms to the standards of the target infrastructure as a service cloud environment.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

One or more embodiments of the invention or elements thereof can be implemented in the form of an apparatus including a memory and at least one processor that is coupled to the memory and operative to perform exemplary method steps.

One or more embodiments can make use of software running on a general purpose computer or workstation. With reference to such an implementation might employ for example a processor a memory and an input output interface to a display and external device s such as a keyboard a pointing device or the like. The term processor as used herein is intended to include any processing device such as for example one that includes a CPU central processing unit and or other forms of processing circuitry. Further the term processor may refer to more than one individual processor. The term memory is intended to include memory associated with a processor or CPU such as for example RAM random access memory ROM read only memory a fixed memory device for example hard drive a removable memory device for example diskette a flash memory and the like. In addition the phrase input output interface as used herein is intended to contemplate an interface to for example one or more mechanisms for inputting data to the processing unit for example mouse and one or more mechanisms for providing results associated with the processing unit for example printer . The processor memory and input output interface can be interconnected for example via bus as part of a data processing unit . Suitable interconnections for example via bus can also be provided to a network interface such as a network card which can be provided to interface with a computer network and to a media interface such as a diskette or CD ROM drive which can be provided to interface with suitable media.

Accordingly computer software including instructions or code for performing the methodologies of the invention as described herein may be stored in one or more of the associated memory devices for example ROM fixed or removable memory and when ready to be utilized loaded in part or in whole for example into RAM and implemented by a CPU. Such software could include but is not limited to firmware resident software microcode and the like.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus . The memory elements can include local memory employed during actual implementation of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during implementation.

Input output or I O devices including but not limited to keyboards displays pointing devices and the like can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

As used herein including the claims a server includes a physical data processing system for example system as shown in running a server program. It will be understood that such a physical server may or may not include a display and keyboard.

As noted aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon. Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. In the most general case the program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . However one or more embodiments are particularly significant in the context of a cloud or virtual machine environment. Reference is made back to and accompanying text.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

It should be noted that any of the methods described herein can include an additional step of providing a system comprising distinct software modules embodied on a computer readable storage medium the modules can include for example any or all of the appropriate elements depicted in the block diagrams and or described herein by way of example and not limitation any one some or all of the modules blocks and or sub modules sub blocks in such as a swap module and a hypervisor adapter module . The method steps can then be carried out using the distinct software modules and or sub modules of the system as described above e.g. sub modules and executing on one or more hardware processors such as 16. Sub modules may be referred to in the claims simply as modules in some cases. Further a computer program product can include a computer readable storage medium with code adapted to be implemented to carry out one or more method steps described herein including the provision of the system with the distinct software modules.

In any case it should be understood that the components illustrated herein may be implemented in various forms of hardware software or combinations thereof for example application specific integrated circuit s ASICS functional circuitry one or more appropriately programmed general purpose digital computers with associated memory and the like. Given the teachings of the invention provided herein one of ordinary skill in the related art will be able to contemplate other implementations of the components of the invention.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

