---

title: Dynamic resource configuration based on context
abstract: Aspects of the disclosure allocate shares of processing resources or other physical resources among virtual machines (VMs) operating as, for example, virtual desktops on a plurality of host computing devices. Allocations of resources are adjusted based on the user activity, VM activity, and/or application activity detected by an agent executing on each VM. Allocated shares may be boosted, unboosted, or normalized, depending on the type and duration of detected activity, by a resource allocation manager executing on a management server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09513950&OS=09513950&RS=09513950
owner: VMware, Inc.
number: 09513950
owner_city: Palo Alto
owner_country: US
publication_date: 20150806
---
This application is a continuation in part of U.S. patent application Ser. No. 14 679 007 filed on Apr. 5 2015 by Daniel Beveridge entitled Dynamic Allocation of Physical Computing Resources Amongst Virtual Machines which is a continuation of U.S. Pat. No. 9 003 037 issued on Apr. 7 2015 by Daniel Beveridge entitled Dynamic Allocation of Physical Computing Resources Amongst Virtual Machines both of which are incorporated by reference herein in their entireties.

Some existing systems treat all virtual machines VMs as black boxes whose internal activities are assumed to be legitimate and needing the best service possible. Under some existing approaches a VM has the same amount of processing resources or the same storage priority independent of what applications the VM is executing whether or not the user is active or idle. In some existing systems shares of resources initially allocated to VMs are not adjusted.

However for many VMs and especially for virtual desktop interfaces VDIs prioritizing the value of operations executed by the VM allows a system to make better scheduling and resource allocation decisions. Even in systems where service level agreements SLAB terms of service TOS quality of service QoS or other policies allocate different levels of resources between VMs those systems usually do not evaluate whether an individual VM is optimizing use of the resources allocated to that VM. For example some applications are prioritized by users over other applications but under some existing systems no change is made to the allocated resources based upon whether or not a VM is executing a priority application. Likewise in some examples resources may be allocated to VMs which are idle because the idle or active status of the VM is not considered by the scheduling system.

Examples described herein disclose a method for improving user experience and business value by modifying an allocation of resources to virtual machines VMs based upon factors such as user activity machine activity and application activity. In some examples the operations of some VMs are prioritized over others and given more resources while operations with a lower priority are dynamically given reduced resources. As applications user and machine activity change the allocation of resources to the VM running the application are boosted or increased unboosted or decreased or normalized dynamically by returning to an initial allocated amount. In this manner aspects of the disclosure map user context onto a resource consumption profile in a way that improves or maintains a user experience inside boundaries defined by a business or other entity.

In some examples resources are allocated by assigning shares to VMs. A share of resources is in some examples measured in processing clock cycles as a portion of processing time etc. Initially in some examples shares are allocated evenly amongst VMs. In one example each VM is allocated 1 000 shares. In some examples boosting resources involves increasing the shares allotted to a VM by a factor of ten while unboosting resources involves decreasing the shares allotted to the VM by ten. In that example a boosted share allocation is 10 000 shares while an unboosted share allocation is 100 shares.

Some virtual desktop interface VDI users are sensitive to delays in user experience and notice fluctuations in performance. However not every operation users execute is perceived as equally important by the user. Users tend to weigh events they initiate and must wait upon for completion more highly than events they initiate but which are completed in the background. Further not all applications are equally important to either the user or a business. For example a critical call center application may outrank casual browsing or email work. Certain applications are deemed more important because of their business value because of their impact on user perceptions or for some other reason. In some examples policies are created to identify priority applications or those which are more important to a user under a service level agreement SLA quality of service QoS agreement terms of service TOS etc. The prioritized applications in some examples referred to as whitelist applications are given priority over other applications. The policies including what applications are on the whitelist what applications users or machines have storage priority graphics protocols for specific activity etc. are in some examples established by an administrator the user the SLA QoS agreement TOS etc.

Additionally VMs with no user activity or which are disconnected consume fewer or no resources. Consequently the resources allocated to an idle VM idle user or idle application are reduced with little to no adverse impact on the user experience at the idle VM user or application. However as resources are reduced to one VM more resources become available for another VM user or application with a higher priority. Consequently the higher priority VM user or application has a better user experience faster processing time etc.

In some examples the disclosed method sends suggested changes to VM resources to the platform in real time based on whether users are performing a whitelist activity or if their virtual desktop has been idle for some time or perhaps been disconnected. By triggering based on such key events the platform is better informed in real time which VMs best deserve priority. During regular load levels and particularly during higher than expected host load levels this rationalized prioritization benefits VMs doing the most time critical activities.

In some configurations the disclosed architecture includes an in guest agent e.g. executing in a guest operating system of a VM which triggers based on which applications are running the focus or activity of a user or how long a user has been idle. The agent located on individual VMs observes how long since a keyboard or mouse action by the user has been observed and triggers an idle state flag or marker accordingly. The agent communicates with an appliance or coordinator on the host computing device which receives input from multiple agents on the same hypervisor host and takes action accordingly by sending requests to a hypervisor management platform for resource shares adjustments to the various VMs per defined policies. In general the agent has visibility to user activity e.g. which applications processes are running which applications are in focus or in the foreground state etc. . Such user activity or the activity of the machine or application is in some examples the user session the monitored state activity information etc.

Whitelist and blacklist events are triggered by the agent and executed by a coordinator. If an excessive number of events arrive at the coordinator in close proximity resource modifications may be triaged to reduce the number of resource adjustments to a defined maximum rate.

Aspects of the disclosure further enable improved user experience during whitelisted operations or active periods. Users who are executing operations which are identified as whitelisted or users who are active receive more resources improving the user experience increasing productivity of high priority tasks and improving overall efficiency. More speed and memory resources are made available to machines applications or users which are performing whitelisted activities or are active over those which are inactive or performing blacklisted activity.

Aspects of the disclosure further promote more efficient allocation of resources between users machines and applications. Allocation decisions are centralized and the needs of individual VMs or users are routed through individual contacts such as activity appliances to streamline allocation decision making. This reduces strain on processing resources as well as reducing bandwidth allocation for communication between host computing devices and the management server.

Each host computing device includes a hardware platform hypervisor and multiple VMs . Although only two VMs are shown on each host computing device any number of VMs may reside on each of the any number of host computing devices . The resource allocation manager allocates physical resources amongst the VMs . The physical resources allocated include elements of the hardware platform illustrated in more detail in including a processor a memory a network communication interface a user interface device and a storage interface connected to a data storage device not illustrated .

In the illustrated example each of the VMs executes an activity agent and one or more applications . The management server and the host computing devices are all communicatively coupled to one another via a network not illustrated .

Each activity agent is configured to gather information about activities occurring on its associated VM . In some examples an activity agent tracks what applications are executing on the VM whether a given application is active or idle whether the VM is active or idle and or whether the user is active or idle.

In some examples whether a user is idle is established by user interface device input see . Specifically the activity agent in some examples tracks input from user interface devices such as mouse activity keyboard activity audio or video recordings etc. Other examples of monitoring activity include events and actions performed by a user accessing the application . Such events or actions may include user interface dialog boxes opening closing user interface control selection e.g. button presses mouse clicks menu selections and the like. The activity agent tracks the events and or actions by intercepting system calls and or event delivery such as by accessing or hooking into system and or platform application programming interfaces APIs e.g. Win32 Java .NET Linux system calls . The information tracked in some examples by the activity agent reflects the state of the machine user or application. In some examples this is referred to as the monitored state.

Examples of APIs and operations for determining user idle time are shown in Table 1 below although other examples are contemplated.

The activity agent forwards information about the tracked events and or actions to an activity appliance . Each appliance is a process running on a machine or virtual server. In some examples each host computing device executes its own activity appliance . In other examples activity appliances are omitted and activity agents communicate directly with the resource allocation manager . In systems without activity appliances the system is typically smaller with only a few host computing devices . Adding or eliminating the activity appliance is adjustable based on the size and scalability of the system.

In most examples the VM and the activity agent are located on the same host computing device as the activity appliance . However in other examples such as when a VM is migrated from one host computing device to another the activity agent continues to forward its tracked information to the original activity appliance associated with the original host computing device until the activity agent and activity appliance are updated. In some examples VMs are re tethered to the local host computing device on a schedule e.g. every hour . In another example the activity agent is updated for any patches or fixes or it is updated to re tether itself. In one example of re tethering the activity agent becomes aware that it is located on a new host e.g. a different hypervisor and as a result the activity agent tethers itself to the new activity appliance that is co located with it on the new host . For example the activity agent will periodically query to an agent e.g. VMTools by VMware Inc. inside the VM to determine what host the VM is running on. When the host changes the activity agent will pick up the change at its next query to the agent on the VM and as a result of the changed host the activity agent will initiate community to the activity appliance that is co located on same host .

Some examples contemplate one appliance per hypervisor host and the agents communicate with the appliance bypassing any other virtual management platform e.g. the agents make calls directly to the host such as an ESX host from VMware Inc. to keep the transactional overhead low.

Monitored or triggering activities may also or instead include VM state information such as may be related to virtual desktop sessions provided or hosted by each of the VMs . VM state information and generally other types of activity information may also be tracked by the activity agent or some other module. For example in some examples the hypervisor may itself include a module for tracking and providing indications of networking activity performed by each of the VMs .

The resource allocation manager receives and records information about activities that may occur or that are occurring on the VMs from the activity appliances . As another example the management server or some other computing system may include a virtual desktop management module that is configured to facilitate access by client devices to virtual desktops hosted by the VMs . The virtual desktop management module may monitor the connection status between a client device and a corresponding VM so as to determine state information such as whether a user is logged in whether a user is active or inactive whether a user is connected etc.

Note that while the resource allocation manager is shown executing on the management server in the resource allocation manager may be executed elsewhere in other examples. For example the resource allocation manager may execute on one of the VMs . As another example some or all of the functions of the resource allocation manager may be performed within the hypervisor . In some examples the resource allocation manager is not a centralized manager as shown and resource allocation decisions are instead made locally e.g. within the hypervisor of each of the computers such as based on information received from other localized managers using a peer to peer distribution model.

The management server may be part of a commercially available VM management system such as VirtualCenter by VMware Inc. Virtual Machine Manager by Microsoft Corp. XenCenter by Citrix Inc. or the like. Virtual desktop management facilities when employed may be provided by commercial available systems including VMware s Virtual Desktop Management Server. At least some of the functions of the activity agent may be provided by commercially available systems including end user monitoring and performance management tools or systems provided by Knoa Software Inc. The hypervisor may be or include a hypervisor such as ESXi by VMware Xen by Citrix Hyper V by Microsoft Corporation or the like.

There is a delay between the activity agent reporting activity which triggers boosting unboosting or normalizing the share allotment of a VM and the execution of the boosting unboosting or normalizing of the shares. In some examples the total delay in executing a boost request includes a network delay from VDI to harness e.g. automated controller or appliance VM of about less than one second issuing command to the resource allocation manager of about less than one second the processing of the request which takes 1 2 seconds and the new updated shares which is approximately one second. As the VM continues to execute its shares are constantly adjusted as the activity agent reports that the VM should be allocated fewer or more shares based on its activity.

As the user moves through various activities shares may be elevated or temporarily reduced to ensure that maximum priority is given to the highest value activities occurring on the ESX host at any given time. When CPU and I O resources are plentiful these background shares adjustments have a modest effect upon active users. However during periods of higher host resource consumption aspects of the disclosure offer a substantial and ongoing benefit to the more or most critical activities acting as an insurance policy for preserving user experience around the more or most critical application activities.

Initially a VM is executing applications. The activity agent monitors the activity of the VM the user and the applications . The activity agent identifies any activity which fits into predetermined policies for boosting unboosting or normalizing resource allocation. The identified activities are transmitted to the activity appliance .

The activity appliance aggregates all of the information from the activity agents on the VMs associated with the host computing device of that activity appliance . The activity appliances requests that the resource allocation manager change the shares allocated to VMs and the resource allocation manager responds by making shares adjustments in response to the reported activities.

If the application is determined to be idle at the resources assigned to the associated VM are unboosted at . However if the application is active at the activity agent evaluates whether the application is whitelisted at . If the application is whitelisted the resources of its associated VM are boosted at .

At if the application is not determined to be on the whitelist the activity agent evaluates the application to determine if it is on a blacklist. A blacklist in some examples includes applications which an administrator user or other policy maker has indicated are prohibited or entitled to fewer resources than other applications. Streaming of movies browsing of social media sites or other activities are in some examples examples of activities which could be blacklisted because they are in violation of company policies. If an application is blacklisted at the resources assigned to the associated VM are unboosted at .

The activity agent continues to monitor the VM until the application which precipitated the boosting or unboosting of resources has concluded at . Once the affected application has terminated the resources allocated to the VM are normalized at . The activity agent continues to monitor application activity at responding to application activity as described above.

Traditionally suspending a VM requires copying the full memory to disk which takes valuable processing time. Under the disclosed method at the activity agent monitors the VM idleness or activity. Suspending the VM when both the user and the machine are idle conserves resources and minimizes the effect on user experience. In some examples a VM is determined to be idle if the session state meets falls within established policies or guidelines. In one example a VM is considered idle if its VDI has disconnected. In other examples if the CPU and or I O loads fall below a defined level for a defined period of time. As an example policy if a user is idle and less than 5 of allocated CPU resources are utilized for a duration of 10 minutes or more then the VM is considered idle. Although a user is idle the VM is still capable of executing applications or processes in the background which consume resources and indicate that the state of the machine is not idle. In that example instead of suspending the VM the shares are unboosted. Unboosting the shares when the VM is active but the user is idle does not degrade the user experience.

If at the VM is idle then the VM is suspended at . Suspending the VM permits the resource allocation manager to reallocate the CPU resources assigned to the suspended VM to other VMs . The activity agent continues to monitor its associated VM at . Upon receipt of any new VM activity the activity agent in some examples requests that the activity appliance notify the resource allocation manager to re allocate shares to the suspended VM and the VM resumes at . In some examples the activity agent communicates directly with the resource allocation manager for re allocation of the shares as the VM is resumed.

At the activity agent evaluates whether the VM is executing an application which requires fault tolerance. If the application does not require fault tolerance the activity agent continues to monitor it but no further action is taken. At if the application requires fault tolerance the activity agent monitors the user activity and the application activity . If the application is idle at then the appliance is removed from fault tolerance at . In some examples of removing fault tolerance the host computing device ceases reporting the activity or state of the VM to any mirror sites for fault tolerance. In other examples of removing fault tolerance the host computing device hypervisor or other controlling logic discontinues the duplication of the state of the VM for fault tolerance.

If the application is not idle at but the user is idle at then the application is still removed from fault tolerance. However the activity agent continues to monitor the user activity and application activity at . If activity is detected then fault tolerance synchronization for that VM is resumed at . The activity agent continues to monitor the application removing or reinstating fault tolerance as appropriate.

The activity agent evaluates whether the application transmitting the data packet is active at . If the application does not meet the criteria for active then the activity agent instructs the filter driver to stamp the data packet header with a low priority code at . However if the application is active then the activity agent evaluates whether the application is whitelisted at . If the application is not whitelisted then the data packet header is again stamped with a low priority code at .

However if the application is whitelisted then the data packet is stamped as high priority at . The data packet is then transmitted to the hypervisor for storage at . At the data packets that the hypervisor receives are processed based on the priority code stamped on the data packet. In some examples multiple priorities are used. In other examples the system is binary and only high and low priority codes are used.

At the activity agent monitors the application . The activity agent evaluates whether the application is active at . If the application is not active then the graphics priority of the application is reduced at .

If the application is active then the activity agent compares the application to the whitelist. If the application is whitelisted then the graphics priority of the application is improved at . Otherwise if the application is not whitelisted at then the graphics priority of the application is reduced at .

The activity agent continues to monitor the application activity at . Once the application becomes idle or is complete the graphics priority is normalized at . Changing the graphics priority of an application also includes in some examples changing the encoding compression or framerates of the graphics. More or fewer resources are allocated to the application to perform these operations depending on the graphics priority of the application .

Testing was conducted at different VM densities to establish the relative impact of the disclosed method at various densities from 30 to 120 VMs per host computing device . The score of each test run is based on the View Planner score for the specific whitelist application . The EXCEL brand spreadsheet from Microsoft Corporation sort entry and sort compute task activities of ViewPlanner were used for whitelist operations.

The disclosed method offers a steady state enhancement for whitelist applications of highest value but it also provides a form of insurance for anomaly load conditions in which CPU or I O contention may be higher than normal or higher than expected. During these periods the disclosed method improves user experience for those applications that are identified as more important to user experience or to the business in accordance with an established policy.

Host computing device may include a user interface device for receiving data from a user and or for presenting data to user . User may interact indirectly with host computing device via another computing device such as a device running VMware s vCenter Server or other management device. User interface device may include for example a keyboard a pointing device a mouse a stylus a touch sensitive panel e.g. a touch pad or a touch screen a gyroscope an accelerometer a position detector and or an audio input device. In some examples user interface device operates to receive data from user while another device e.g. a presentation device operates to present data to user . In other examples user interface device has a single component such as a touch screen that functions to both output data to user and receive data from user . In such examples user interface device operates as a presentation device for presenting information to user . In such examples user interface device represents any component capable of conveying information to user . For example user interface device may include without limitation a display device e.g. a liquid crystal display LCD organic light emitting diode OLED display or electronic ink display and or an audio output device e.g. a speaker or headphones . In some examples user interface device includes an output adapter such as a video adapter and or an audio adapter. An output adapter is operatively coupled to processor and configured to be operatively coupled to an output device such as a display device or an audio output device.

Host computing device also includes a network communication interface which enables host computing device to communicate with a remote device e.g. another computing device via a communication medium such as a wired or wireless packet network. For example host computing device may transmit and or receive data via network communication interface . User interface device and or network communication interface may be referred to collectively as an input interface and may be configured to receive information from user .

Host computing device further includes a storage interface that enables host computing device to communicate with one or more data storage devices which store virtual disk images software applications and or any other data suitable for use with the methods described herein. In example examples storage interface couples host computing device to a storage area network SAN e.g. a Fibre Channel network and or to a network attached storage NAS system e.g. via a packet network . The storage interface may be integrated with network communication interface .

The virtualization software layer supports a virtual machine execution space within which multiple virtual machines VMs may be concurrently instantiated and executed. Hypervisor includes a device driver layer and maps physical resources of hardware platform e.g. processor memory network communication interface and or user interface device to virtual resources of each of VMs such that each of VMs has its own virtual hardware platform e.g. a corresponding one of virtual hardware platforms each virtual hardware platform having its own emulated hardware such as a processor a memory a network communication interface a user interface device and other emulated I O devices in VM . Hypervisor may manage e.g. monitor initiate and or terminate execution of VMs according to policies associated with hypervisor such as a policy specifying that VMs are to be automatically restarted upon unexpected termination and or upon initialization of hypervisor . In addition or alternatively hypervisor may manage execution VMs based on requests received from a device other than host computing device . For example hypervisor may receive an execution instruction specifying the initiation of execution of first VM from a management device via network communication interface and execute the execution instruction to initiate execution of first VM .

In some examples memory in first virtual hardware platform includes a virtual disk that is associated with or mapped to one or more virtual disk images stored on a disk e.g. a hard disk or solid state disk of host computing device . The virtual disk image represents a file system e.g. a hierarchy of directories and files used by first VM in a single file or in a plurality of files each of which includes a portion of the file system. In addition or alternatively virtual disk images may be stored on one or more remote computing devices such as in a storage area network SAN configuration. In such examples any quantity of virtual disk images may be stored by the remote computing devices.

Device driver layer includes for example a communication interface driver that interacts with network communication interface to receive and transmit data from for example a local area network LAN connected to host computing device . Communication interface driver also includes a virtual bridge that simulates the broadcasting of data packets in a physical network received from one communication interface e.g. network communication interface to other communication interfaces e.g. the virtual communication interfaces of VMs . Each virtual communication interface for each VM such as network communication interface for first VM may be assigned a unique virtual Media Access Control MAC address that enables virtual bridge to simulate the forwarding of incoming data packets from network communication interface . In an example network communication interface is an Ethernet adapter that is configured in promiscuous mode such that all Ethernet packets that it receives rather than just Ethernet packets addressed to its own physical MAC address are passed to virtual bridge which in turn is able to further forward the Ethernet packets to VMs . This configuration enables an Ethernet packet that has a virtual MAC address as its destination address to properly reach the VM in host computing device with a virtual communication interface that corresponds to such virtual MAC address.

Virtual hardware platform may function as an equivalent of a standard x86 hardware architecture such that any x86 compatible desktop operating system e.g. Microsoft WINDOWS brand operating system LINUX brand operating system SOLARIS brand operating system NETWARE or FREEBSD may be installed as guest operating system OS in order to execute applications for an instantiated VM such as first VM . Virtual hardware platforms may be considered to be part of virtual machine monitors VMM that implement virtual system support to coordinate operations between hypervisor and corresponding VMs . Those with ordinary skill in the art will recognize that the various terms layers and categorizations used to describe the virtualization components in may be referred to differently without departing from their functionality or the spirit or scope of the disclosure. For example virtual hardware platforms may also be considered to be separate from VMMs and VMMs may be considered to be separate from hypervisor . One example of hypervisor that may be used in an example of the disclosure is included as a component in VMware s ESX brand software which is commercially available from VMware Inc.

Some examples of the disclosed method include a system for federation of policy for QoS agreements TOS agreements and or user defined policies for VDI desktops. Under this example any established policy such as a QoS policy for a set of virtual desktops may be communicated or federated from a central console to a resource allocation manager which in turn federates the policy to the set of activity appliances resident on the cluster of host computing devices for the purpose of defining the QoS behaviors on a set of virtual desktops operating on virtual machines . In some examples a federated policy includes which applications are on the whitelist which are on the blacklist what constitutes user activity VM activity and application activity what increase or reduction in shares constitutes boosting and unboosting which graphics settings are tunable etc.

Other examples of the disclosed method include monitoring systems which monitor performance of applications e.g. application launch time . This monitored performance information is aggregated into a monitoring solution such as a product appliance application or the like and may be used as a feedback loop for external monitoring systems such as the vROPS product by VMware Inc. This external monitoring system may suggest and implement adaptations to the federated policy to maximize performance. This example includes a system for monitoring application performance that generates dynamic adjustments to the federated policy. Key performance metrics are fed into a performance monitoring framework which in some examples triggers upon abnormal low levels generating a signals which allows the external monitoring system to elevate or boost the resources associated with the underperforming applications . This dynamic feedback helps to ensure that application performance is elevated until a desired level of user experience is reached even under high levels of hypervisor utilization.

The operations described herein may be performed by a computer or computing device. The computing devices communicate with each other through an exchange of messages and or stored data. Communication may occur using any protocol or mechanism over any wired or wireless connection. A computing device may transmit a message as a broadcast message e.g. to an entire network and or data bus a multicast message e.g. addressed to a plurality of other computing devices and or as a plurality of unicast messages each of which is addressed to an individual computing device. Further in some examples messages are transmitted using a network protocol that does not guarantee delivery such as User Datagram Protocol UDP . Accordingly when transmitting a message a computing device may transmit multiple copies of the message enabling the computing device to reduce the risk of non delivery.

By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media are tangible non transitory and are mutually exclusive to communication media. In some examples computer storage media are implemented in hardware. Exemplary computer storage media include hard disks flash memory drives digital versatile discs DVDs compact discs CDs floppy disks tape cassettes and other solid state memory. In contrast communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media.

Although described in connection with an exemplary computing system environment examples of the disclosure are operative with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the disclosure include but are not limited to mobile computing devices personal computers server computers hand held or laptop devices multiprocessor systems gaming consoles microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Examples of the disclosure may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. The computer executable instructions may be organized into one or more computer executable components or modules. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. Aspects of the disclosure may be implemented with any number and organization of such components or modules. For example aspects of the disclosure are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other examples of the disclosure may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

Aspects of the disclosure transform a general purpose computer into a special purpose computing device when programmed to execute the instructions described herein.

The examples illustrated and described herein as well as examples not specifically described herein but within the scope of aspects of the disclosure constitute exemplary means for value based resource scheduling of virtual desktop interfaces. For example the operations illustrated in when executed by devices such as illustrated in constitute exemplary means for dynamically allocating physical computing resources of at least one physical computing system amongst a plurality of VMs including exemplary means for monitoring activity of the user the VM and the applications executed by the VM exemplary means for comparing the collected information to a policy and exemplary means for determining based on the comparison that one or more of the monitored activities has a higher or lower priority than the other activities and exemplary means for automatically modifying based on the policy and in response to the determination an allocation of physical computing resources of the at least one physical computing system to the plurality of VMs. In some examples reallocation occurs automatically when a machine goes idle when an application terminates when a user goes idle etc. In some examples idleness is defined as a period of inactivity of 15 minutes. In other examples an idle period is defined by a user. Policies created by an administrator and federated amongst the elements of the system are updated to include other automatic reallocation events as defined by the administrator.

At least a portion of the functionality of the various elements illustrated in the figures may be performed by other elements in the figures or an entity e.g. processor web service server application program computing device etc. not shown in the figures.

In some examples the operations illustrated in the figures may be implemented as software instructions encoded on a computer readable medium in hardware programmed or designed to perform the operations or both. For example aspects of the disclosure may be implemented as a system on a chip or other circuitry including a plurality of interconnected electrically conductive elements.

The order of execution or performance of the operations in examples of the disclosure illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and examples of the disclosure may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the disclosure.

When introducing elements of aspects of the disclosure or the examples thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements. The term exemplary is intended to mean an example of. Having described aspects of the disclosure in detail it will be apparent that modifications and variations are possible without departing from the scope of aspects of the disclosure as defined in the appended claims. As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the disclosure it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

