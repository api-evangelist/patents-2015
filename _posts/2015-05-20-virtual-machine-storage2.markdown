---

title: Virtual machine storage
abstract: Storing data that includes receiving an indication to perform an operation with respect to data associated with a virtual machine storage abstraction; and using a meta information identifying which data stored on a storage system is associated with the virtual machine storage abstraction to perform the requested operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09535739&OS=09535739&RS=09535739
owner: Tintri Inc.
number: 09535739
owner_city: Mountain View
owner_country: US
publication_date: 20150520
---
This application is a continuation of co pending U.S. patent application Ser. No. 13 094 636 entitled VIRTUAL MACHINE STORAGE filed Apr. 26 2011 which is incorporated herein by reference for all purposes which claims priority to U.S. Provisional Patent Application No. 61 343 385 entitled STORING AND MANAGING VIRTUAL MACHINE STORAGE USING VIRTUAL MACHINE ABSTRACTIONS filed Apr. 27 2010 which is incorporated herein by reference for all purposes.

Using virtual machines VMs to perform hardware virtualization is becoming increasingly common. Typical storage systems store data as files file systems LUNs and volumes for example. When a typical storage system is used for storing and running virtual machines VMs the administrators who manage the storage systems must create and maintain a mapping between VMs and the typical storage abstractions. Mapping VMs to typical storage abstractions is inefficient in part because each VM generally requires multiple files file systems LUNs and or volumes to store. The difficulty in mapping VMs to typical storage abstractions also makes imposing storage management policies at a desired granularity e.g. on a per VM basis inconvenient. Furthermore typical storage systems also makes viewing statistics at a desired granularity e.g. on a per VM basis difficult.

The invention can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer program product embodied on a computer readable storage medium and or a processor such as a processor configured to execute instructions stored on and or provided by a memory coupled to the processor. In this specification these implementations or any other form that the invention may take may be referred to as techniques. In general the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein the term processor refers to one or more devices circuits and or processing cores configured to process data such as computer program instructions.

A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.

Storing and managing the storage of virtual machines using virtual machine storage abstractions is disclosed. In various embodiments a virtual machine includes one or more files. As used herein the term virtual machine storage abstractions means identifying storage for virtual machines using the identity of the VM or vdisk that is associated with the storage. In some embodiments meta information mapping to the storage abstractions such as files of a specific VM is stored. The storage system detects modifications in the configurations of VMs made by a hypervisor or other entity that manages one or more VMs. In some embodiments the storage system is configured to determine resource management among the VMs managed by the hypervisor. The storage system updates its mapping to specific VMs when data is transferred to or from the storage system so that the mapping is consistently maintained. In various embodiments the storage system enables administrators of the storage to perform storage related operations at various granularities such as at specific VMs vdisks files or sets of files. The storage system also enables administrators to view statistics at various granularities. In some embodiments administrators manage the storage system through a user interface.

In various embodiments server runs several VMs. In the example shown VMs and and other VMs are running on server . A VM is a software implementation of a physical machine that executes programs like a physical machine. For example a physical machine e.g. a computer may be provisioned to run more than one VM. Each VM may run a different operating system. As such different operating systems may concurrently run and share the resources of the same physical machine. In various embodiments a VM may span more than one physical machine and or may be moved e.g. migrated from one physical machine to another. In various embodiments a VM includes one or more virtual disks vdisks and other data related to the specific VM e.g. configuration files and utility files for implementing functionality such as snapshots that are supported by the VM management infrastructure . A vdisk appears to be an ordinary physical disk drive to the guest operating system running on a VM. In various embodiments one or more files may be used to the store the contents of vdisks. In some embodiments a VM management infrastructure e.g. a hypervisor creates the files that store the contents of the vdisks e.g. the guest operating system program files and data files and the other data associated with the specific VM. For example the hypervisor may create a set of files in a directory for each specific VM. Examples of files created by the hypervisor store the content of the one or more vdisks the state of the VM s BIOS information and metadata about snapshots by the hypervisor configuration information of the specific VM etc. In various embodiments data associated with a particular VM is stored at a storage system as one or more files. In various embodiments the files are examples of virtual machine storage abstractions. In some embodiments the respective files associated with at least VMs and running on server are stored at storage system .

In some embodiments a hypervisor not shown manages the VMs running on server . In some embodiments the hypervisor is located at server . In some embodiments the hypervisor is located on another server that is in communication with server .

A storage system configured to store meta information identifying which stored data objects such as files or other virtual machine storage abstractions are associated with which VM or vdisk is disclosed. In various embodiments storage system stores the data of VMs running on server and also stores the information that provides mapping or other identification of which data objects are associated with which specific VMs. In various embodiments mapping or identification of specific VMs includes mapping to the files on the storage that are associated with each specific VM. In various embodiments storage system also stores at least a portion of the files associated with the specific VMs in addition to the mappings to those files. In various embodiments storage system refers to one or more physical systems and or associated hardware and or software components configured to work together to store and manage stored data such as files or other stored data objects. In some embodiments a hardware component that is used to at least in part implement the storage system may comprise of either disk or flash or a combination of disk and flash.

In some embodiments the information that provides mapping or identification is referred to as meta information. Meta information includes attributes and any policies associated with a specific VM. Examples of attributes include a unique identifier of the VM e.g. a universal unique identifier or UUID the files or vdisks that comprise the VM the storage location of each file or vdisk associated with the VM the type of guest operating system that is being run by the VM whether the VM is currently active or not etc. Examples of policies such as those that relate to storage management include quality of service i.e. the difference in prioritization that is given to different applications performance guarantees resources quotas replication and migration policies for the storage corresponding to the specific VM. In some embodiments some meta information is provided by the administrator e.g. through the administrator interface and some are collected and or updated from the hypervisor or other management entity e.g. via queries . In some embodiments all the meta information associated with a specific VM is stored as a set of meta information and identified by the unique identifier of the specific VM e.g. the set of meta information includes an attribute that is a unique identifier of the specific VM . In some embodiments meta information for VMs may be stored in data objects instantiated via object oriented programming where the set of meta information for a specific VM is a stored as a data object e.g. the meta information is stored as attributes of the data object . In some embodiments the meta information is not directly accessible by the administrator. One benefit to storing meta information that maps to specific VMs and their associated files is that storage management may be performed at one or more granularities of VMs vdisks or the VMs files or sets of files which are denoted by the stored meta information.

In some embodiments storage system includes one or more functional modules. Examples of functional modules include one of more the following statistics collector policy manager snapshotting resource management and administrator interface.

In some embodiments storage system includes communication with a hypervisor that manages the VMs running on server . The storage system is configured to detect changes if any that are made to the configurations of the VMs via the hypervisor and update its stored meta information accordingly. In some embodiments storage system is configured to receive network protocol calls regarding the transfer of data either to or from the system. If the network protocols calls affect the VMs for which it stores meta information then the meta information is updated accordingly. In some embodiments in response to a network protocol call for a transfer of data storage system is configured to use the stored meta information to determine how the transfer may be performed optimally with respect to the present storage of files e.g. based on the meta information newly written data can be directed to the most appropriate storage tier or stored with different levels of data guarantees . In some embodiments storage system is configured to receive a request for a storage management related operation with respect to a specific VM and use locally stored meta information to perform the operation with respect to the located files.

In some embodiments storage system also stores statistical information. Statistical information can be stored on either a per file or per VM basis. Examples of statistics include the rate of read and write access to a particular file or virtual disk the throughput of a particular virtual machine the cache hit ratio achieved by the storage system for a particular file or virtual machine and the amount of storage consumed by a thin provisioned file or virtual disk. The stored statistical information may be collected synthesized and or presented to an administrator interface of storage system .

In some embodiments storage system is configured to include logic that detects certain events. Examples of events include when storage space at the storage is running low or when a specific VM is utilizing a significant amount of storage space. In some embodiments when an event is detected storage system is configured to notify either or both the administrator interface or the hypervisor e.g. to affect further actions taken with respect to the storage system . For example in the event that storage system detects that storage space is low at the storage an indication may be sent to the administrator interface and or also sent to the hypervisor to warn that no new VMs should be created. For example in the event that storage system detects that a specific VM is utilizing a significant amount of storage space an indication may be sent to the hypervisor to advise that the VM should be moved to another storage system.

In some embodiments storage system is configured to categorize the files stored on it or the VMs for which it stores files into different eviction groups. Each eviction group includes a group of files or VMs that are to be treated similarly for the implementation of a particular policy. For example different priorities may be given to different eviction groups when implementing a particular policy such as the one regarding the allocation of different types of storage.

In some embodiments system is configured to receive a request at the administrator interface functional module for a storage management operation with respect to a specific VM for which system stores meta information. Either or both of storage and VM meta information database may be used to identify the relevant underlying files of the specific VM based on the stored meta information for the specific VM. Subsequently the operation is performed on identified files of the specific VM.

Statistics collector module collects statistics stored at the storage. In some embodiments statistics are stored and or collected on a VM per vdisk and or per file basis. In some embodiments statistics collector module polls the storage to dynamically synthesize the most current statistics of the VMs and their associated files. Statistics collector module may poll the storage periodically e.g. every 10 minutes or upon a request from administrator interface . In some embodiments statistics collector module may also store a history of statistical information collected from the storage.

Snapshotting module creates snapshots for VMs stored at the storage. In some embodiments snapshotting module is configured to create snapshots on a per VM per vdisk and or per file basis using the stored meta information. In some embodiments snapshotting module is configured to communicate with the hypervisor to either advise the hypervisor regarding its stored meta information or receive information regarding snapshots produced at the hypervisor. In some embodiments snapshotting module is configured to incorporate the received snapshot information from the hypervisor in creating its own per VM per vdisk and or per file snapshots.

Resource management manages the storage resources that are assigned to the VMs and files stored at the storage. In some embodiments the storage resources include one or both of flash and disk. In some embodiments resource management is configured to include logic to determine how much of each resource e.g. flash and or disk to assign to one or more specific VMs. In some embodiments resource management is configured to include logic to detect certain events. As mentioned above certain events at the storage may indicate when storage space is running low or that a specific VM is utilizing a significant amount of storage space e.g. relative to the total amount of space available . When an event is detected resource management is configured to notify either or both the administrator interface or the hypervisor to affect further actions taken with respect to the storage system. For example in the event that resource management detects that storage space is low at the storage an indication may be sent to the administrator interface and or also sent to the hypervisor to warn that no new VMs should be created. For example in the event that resource management detects that a specific VM is utilizing a significant amount of storage space an indication may be sent to the hypervisor to advise that the VM should be moved to another storage system.

Administrator interface communicates with an administrator and also with the other functional modules of the storage system. In some embodiments the administrator of the storage system will request certain information regarding the storage at administrator interface . Information requested by the administrator may include statistics at a per VM per vdisk or per file basis. In some embodiments the statistics may be collected by statistics collector . In some embodiments administrator interface is configured to present information regarding the occurrence of a certain event e.g. in response to receiving an indication of such an event . For example administrator interface may present to an administrator information regarding the event of low storage space. In some embodiments administrator interface receives a request e.g. from the administrator to perform a storage management operation with respect to a specific VM. Examples of storage management operations include creation deletion taking a snapshot cloning reverting to a snapshot replication migration importing the specific VM adding a vdisk to the specific VM deleting a vdisk from the specific VM monitoring setting a policy for the specific VM reading or writing to a VM or vdisk changing the size of a vdisk and reporting. More examples of operations include such as in anticipation of future access to data preloading data into a cache or copying or migrating data between different tiers of storage e.g. into or out of cache . In some embodiments the storage system will use the meta information of the specific VM to perform or execute the operation.

In some embodiments file system receives requests to access files stored at files via storage protocols. File system is configured to update the meta information of VM meta information if the requests to access files have affected any of the files stored in files e.g. new data is written to a file associated with a specific VM . In some embodiments file system communicates with the hypervisor that manages the VMs whose associated files and meta information are stored at files and VM meta information . In some embodiments file system is configured to communicate with the hypervisor to receive information regarding which files are associated with which VMs and what other attributes and policies are associated with each VM. File system is configured to store such information as VM meta information in . In some embodiments meta information pertaining to a single VM is stored as a set and identified by the unique identifier of the VM. In some embodiments file system is configured to detect any changes in the management of the VMs e.g. whether a new VM has been created or deleted whether a VM has been migrated etc . File system is configured to accordingly update meta information stored in VM meta information based on the detected changes.

In some embodiments file system is configured to receive a request to perform a storage management operation with respect to a specific VM that is associated with storage . Using the meta information stored in VM meta information that is associated with the specific VM the specific files of files that are associated with the specific VM may be identified so that the requested operation may be performed with respect to the relevant files of the specific VM. For example when a VM associated with storage is to be replicated or migrated to another storage similar to storage their associated files from are identified using the meta information of meta information that are associated with the VM. These identified files of may then be replicated and migrated to the other storage and the accompanying meta information of the VM may also be replicated and migrated to the other storage. As another example when a VM is snapshot cloned replicated migrated backed up or restored storage created a copy or a new instance of the specified VM and also records the relationship between the original VM and the derived one or more copies or new instance s of the specified VM. The copies and new instances may inherit or preserve some or all the meta information associated with the original VM. In some embodiments the copies or new instances may disable redefine or add to the inherited attributes.

At step which files are associated with which VM are kept track of. In some embodiments storage protocols are used to access the storage e.g. transfer data to or from the storage . Examples of storage protocols include NFS CIFS and iSCSI. Calls to the storage may include write functions that add or modify data in the stored files. In some embodiments in the event that files stored and maintained by the storage are modified the meta information of the associated VM is also updated.

At step VM information and VM file associations are used to perform storage related operations. In some embodiments the storage receives a storage management operation e.g. creation deletion taking a snapshot taking a snapshot . . . etc with respect to a specific VM or vdisk or file associated with a specific VM. In some embodiments the stored meta information includes attribute and policy information regarding each specific VM and their associated files or vdisks. The stored meta information is used to identify the specific VM and those of its files stored in storage that are relevant to the requested operation. For example for an operation to replicate a VM all the files that comprise that VM is identified using stored meta information and then the identified files can be replicated.

At step for each VM managed by the hypervisor its corresponding virtual disk i.e. vdisk is determined. As mentioned above each VM stores its data on one or more vdisks. In some embodiments because the hypervisor creates the one or more files that store the content for each vdisk of a VM it may be queried to determine which vdisks correspond to each managed VM and which files store the content of the vdisks. At step for each corresponding vdisk its properties are determined and stored as meta information associated with the VM. In various embodiments properties include attributes and policy settings. In some embodiments the properties of each corresponding vdisk may also be determined via querying the hypervisor. At decision step a change at the hypervisor is detected. Examples of a change at a hypervisor for example include creation of a new VM deletion of a VM creating of a vdisk for a VM deleting of a vdisk for a VM suspension of a VM cloning of a VM or migration of a VM. Detecting a change at the hypervisor may be accomplished by one or more of the following periodically querying the API e.g. querying VMware s vCenter subscribing to messages sent out by the hypervisor e.g. subscribing to messages sent out by vCenter listening to the hypervisor e.g. detecting when any activity is occurring at the vCenter detecting a deletion of a file known to be managed by the hypervisor detecting that the hypervisor is about to create a new file or polling the hypervisor. If a change is detected at decision step then the process begins at step once more. At decision step the process no longer repeats from step when it is done e.g. when the storage system is turned off .

At step information is requested from a hypervisor. In some embodiments step is optionally performed. Information requested from the hypervisor includes any new information e.g. a recent creation of a file by the hypervisor or updated information e.g. a recent deletion of a file by the hypervisor . In some embodiments the meta information may be updated in accordance with the requested information from the hypervisor. In some embodiments the execution or result of the network file system call may be modified based on the updated meta information. For example based on the updated meta information the storage system may refuse to create a file e.g. as requested in the network file system call that is not associated with any VM that is managed by the storage system. Or in another example based on the updated meta information the storage system may notify the hypervisor to not allow a VM to be powered on if there is insufficient storage space at the storage system.

At step the stored meta information is used to identify the affected VM if there is any. In various embodiments the specific VM to be affected by the network file system call is identified using the stored meta information which includes VM attribute information e.g. unique identifiers for each VM in the storage . For example the affected VM may be indicated by an identifier contained in the network file system call and that identifier may be compared with the unique VM identifier attribute of each set of stored meta information for each specific VM to find a match. At step the meta information of the VM is updated if required. Once the affected VM of the storage is identified based on the unique VM identifier attribute of the stored meta information then the other attributes e.g. which files are associated with the VM where the files are stored and policies of the identified VM may also be identified in the matched set of meta information and updated if appropriate. For example a network file system call to write to a vdisk of a specific VM may entail an update to the set of meta information associated with the specific VM if writing data to the vdisk causes another file to be created. The meta information associated with the affected VM may be updated to reflect that a new file e.g. a file created at location X has been added to the files that are associated with the affected VM. However if the network file system call were to read a file at the storage and no modification of data occurs then the meta information of the identified VM may not need to be updated.

At step a request to perform a storage related operation with respect to a VM is received. As mentioned before storage relation operations may include creation deletion taking a snapshot cloning reverting to a snapshot replication migration importing a VM adding a vdisk to a VM deleting a vdisk from a VM monitoring setting a policy for a VM vdisk files or set of files reading or writing to a VM or vdisk changing the size of a vdisk and reporting. In some embodiments the request to perform a storage related operation may be received from the administrator interface.

At step information is requested from a hypervisor. In some embodiments step is optionally performed. Information requested from the hypervisor includes any new information or updated information. In some embodiments the meta information may be updated in accordance with the requested information from the hypervisor. In some embodiments the execution or result of the storage related operation may be modified based on the updated meta information. In some embodiments storage system may delay or refuse the execution of requested storage system operations to ensure consistency of the data and meta information. In some embodiments in the event the hypervisor cannot be accessed for up to date meta information the requested management operation can be refused or the meta information will be marked as out of date.

At step the stored meta information that maps to the corresponding files of the affected VM is used to perform the operation. In some embodiments the request includes an identifier of the affected VM. The VM identifier in the request may then be used to compare against the unique VM identifier attribute of each set of stored meta information for each specific VM to find a match. Once the set of meta information for the affected VM is identified then the other attributes and policies of the identified VM may also be identified in the matched set of meta information. Based on the set of meta information of the affected VM the appropriate granularity of data e.g. all the files of the VM certain files storing vdisk content certain sets of files may be identified. The operation may then be performed on the identified granularity of data. In some embodiments the data is stored locally at the storage system.

At step the VM meta information is updated if required. In some embodiments the meta information may be updated for the performance or as a result of the requested operation e.g. setting a policy associated with a VM may require storing a new policy setting with the meta information of the VM or deleting a file from the storage system may require deleting the meta information associated the deleted file with a vdisk or virtual machine .

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.

