---

title: Obfuscation and de-obfuscation of identifiers
abstract: A service allowing for obfuscation of identifiers such that the obfuscated identifier values are within a set of valid identifier values. The service allows for resources to be associated with an obfuscated identifier, and for clients to request information regarding obfuscated identifiers and resources associated to obfuscated identifiers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09596263&OS=09596263&RS=09596263
owner: Amazon Technolgies, Inc.
number: 09596263
owner_city: Seattle
owner_country: US
publication_date: 20150223
---
Computing resource service providers and other large scale users of computing resources often utilize configurable and scalable computing resources to meet various types of computing needs. A computing resource service provider for example is designed to share large amounts of computing resources and can be distributed among a large number of users and may include multiple computing components configured to store and access data. Resources within a computing resource service provider may be assigned identifiers to distinguish the resources from one another.

Depending on how they are constructed identifiers can result in various issues. For example sequential assignment of identifiers may provide information about a distributed system e.g. information regarding various characteristics of the distributed system that is otherwise intended to be non public. As a second example a malicious user may use identifier values to learn about a system for malicious reasons such as denial of service DOS or distributed denial of service DDOS attacks. Furthermore identifiers can often be longer than necessary causing unnecessary use of space on a display and other adverse effects on user experience.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein include generating custom length obfuscated identifiers that may be used in various contexts. Identifiers may be used in many contexts and many purposes. For example an identifier may be used to identify define or specify a computing resource such as hardware e.g. a computer a router a storage device a network e.g. a local area network an intranet a user account a virtual machine instance a computer file a storage drive e.g. a hard disk drive a network drive or any combination thereof. In many instances the identifier may be presented to a human for example a user or an administrator of the computing resources. In many instances it is preferable to present to humans identifiers that are shorter rather than longer for various reasons such as memory retention humans generally may remember shorter identifiers as compared to longer identifiers customer experience e.g. more data may be presented via a computer screen when shorter identifiers are used compared to longer identifiers and physical consideration e.g. a human may need to copy down an identifier from a computer screen onto a piece of paper humans generally may be less likely to make a mistake copying down a shorter identifier as compared to a longer identifier . However having a short identifier may result in exhaustion of valid identifiers after which no new identifiers may be used to uniquely map an identifier to a resource. Thus it may be desirable to define a specific length or length range in which the identifiers are selected from. In some embodiments the desired length may not include a number of identifiers that is a power of two e.g. the designed length may be 47 bits . Such identifiers may provide a sufficient number to avoid exhaustion while avoiding issues resulting from excessive length.

Additionally there may be advantages to obfuscating identifiers. Obfuscating identifiers refers to transforming identifiers to obscure information that the identifiers would otherwise provide e.g. a sequence number while still allowing them to be used to identify corresponding computing resources. For example a computer system may assign identifiers to users when they create a user account starting from an initial value e.g. the first user may be assigned an identifier ID of value 0 and increment the value when a second user account is created e.g. the second user account may be assigned an ID value of 1 the third user account assigned an ID value of 2 . . . the N th user account assigned an ID value of N 1 . Additionally such a system may make the user ID available to the user for example through the user s account settings through an application programming interface API metadata associated with the user etc. In some computer systems obfuscating identifiers may involve transforming an identifier in a manner that renders the identifier less usable to obtain information about a system. In the previous example obfuscating an identifier may include performing a transformation on the sequentially assigned IDs such that the result of the transformation is a value that is not easily associated with the original un obfuscated identifier.

In such a system it may be possible to use the ID to determine properties of the system. For example in the system previously described it is possible to determine the number of user accounts created by creating an account and inspecting the user ID. In some systems it may be beneficial to make it harder to determine information regarding the system in this case the number of users created in the system which may also in some instances be the number of users in the system . In such a system a competitor may create a new user account and use the ID associated with the new user account to determine an estimate of the number of users on the system. This information may for example be used to determine the scale of business being done on a website.

Obfuscating identifiers may be performed by a computer system or a set of computer systems such as a server or multiple servers that includes a frontend a backend and computing resources that can be made available e.g. computer files . The server s may include a management service that is responsible for obfuscation of identifiers. In some embodiments the management service may contain a frontend including an authorization module and a backend. The management service may further have access to a cryptographic module that may be an additional component within the server and or management service or may be separate and communicatively accessible by the management service e.g. over a network . The computing system may further include computing resources such as compute instances storage space and user accounts that are associated with identifiers. Identifiers may map uniquely to a resource that is a resource specifies a single resource or may map to a set of redundant resources e.g. in a distributed system an identifier may map to any of the redundant copies of a resource .

In some embodiments the management service may create and or assign identifiers in a manner that is un obfuscated. The management service may further or instead be configured to receive identifiers. When the management service has obtained an identifier it may use a cryptographic module to perform an encryption operation on the identifier thereby obfuscating it. For example identifiers may be created or assigned sequentially.

Obfuscation of the identifier may be done using various methods. For example a cryptographic module may be used to obfuscate an identifier by performing an encryption operation using at least the identifier as a plaintext input and a cryptographic key in conjunction with an encryption algorithm.

In some embodiments the identifier is selected from a pre defined set of valid identifier values. The pre defined set of valid identifiers may be defined based on various properties of the identifiers allowing for greater flexibility and customization of allowable identifier values. For example the pre defined set of valid identifier values may include all integers between 0 and 2 1 inclusive in such a pre defined set exactly 45 bits is sufficient to represent every valid identifier value and exactly 45 bits is required to represent some values in the pre defined set without zero padding. Zero padding refers to a technique for expanding a number out to fill a certain number of bits. For example the decimal number 123 may be zero padded to a 16 bit binary number by representing it as 0000000001111011 that is 0000000001111011 base 2 whereas 123 may also be represented by the seven bit binary number 1111011without zero padding. As a second example of a pre defined set of valid identifier values the pre defined set may include all integers between 1 and 1 000 such a pre defined set may be represented in a computer using 10 bits. In some embodiments the pre defined set of valid identifier values may only include identifiers that meet certain requirements. As an example a pre defined set of identifiers may consist of 16 digit decimal numbers wherein the identifiers in the pre defined set must be valid credit card numbers. In each example identifiers in the pre defined set of valid identifier values may be represented by a number of bits is not an integer power of 2 e.g. 32 bits 64 bits 128 bits and so on . In some embodiments the pre defined set may be defined based on a rule e.g. all integers between 0 and 2 1 inclusive or may be explicitly defined e.g. by a vector containing all values belonging to the set .

Returning to the example provided above the pre defined set of valid identifier values that includes all integers between 0 and 2 1 inclusive may be represented by 45 bits. The obfuscated identifiers which may be generated through an encryption operation may also be a value within the pre defined set in this example the obfuscated identifier will also be a number that is representable by 45 bits. In some embodiments the encryption operation may result in the obfuscated identifier and resource identifier having the same value. In such a system the obfuscated identifier is no longer than the longest identifier from the pre defined set of valid identifier values.

The obfuscated identifier may be generated using various methods. For example the obfuscated identifier may be generated using a variable block size block cipher algorithm configured to have a block size equal to the length of the identifier. Continuing with the previous example where the pre defined set of valid identifier values includes all integers between 0 and 2 45 1 inclusive the block size will be configured to 45 bits. Examples of variable block size block cipher algorithms include Hasty Pudding Cipher.

However it may be desirable to use fixed block size block cipher algorithms such as Advanced Encryption Standard AES because its cryptographic properties have been widely studied and well understood. In some embodiments a custom length block cipher may be constructed from a fixed block size to match the identifier length. In the example previously provided where the pre defined set of values includes all integers between 0 and 2 1 inclusive a 32 bit block cipher may be used to construct a 45 bit block cipher. It should be noted that in many embodiments a block cipher may be used to construct a custom length block cipher that is not an integer multiple in size e.g. a 32 bit block cipher may be used to generate block ciphers that are not 64 bits 128 bits etc. in size .

Identifiers and by association obfuscated identifiers may be associated with computing resources. Computing resources may include user accounts databases storage devices computing resources computer files tokens computer tasks and other types of computer resources which it may be advantageous to uniquely identify. In several of these categories the identifier may be associated to hardware software or a combination of both for example computing resources may refer to a physical server or computer machine but may also refer to a purely software based virtual machine instance VMI capable of performing computing operations a hypervisor including both hardware and software and other similar configurations including the use of hardware software or a combination of both.

Upon generation of an obfuscated identifier the obfuscated identifier may be made available for example to a client. In some embodiments additional data or information related to the underlying resource associated to the identifier may also be presented. For example in a cloud computing platform a client issues a task to the cloud computing platform and after issuance of the task request information about which compute instance is running the task. For simplicity the platform may assign identifiers to compute instances sequentially but may wish to obfuscate that information to the client for example to prevent clients from probabilistically estimating the number of compute instances. Where compute instances are numbered sequentially e.g. starting from 1 2 3 . . . N and tasks are distributed in a nondeterministic manner across those compute instances it is possible to estimate N the total number of compute instances through successively issuing tasks. The platform may wish to keep the total number of compute instances a secret from the client for example as a precaution against malicious users that may attempt to perform a DOS DDOS attack against the platform. Thus an obfuscated identifier may be provided to the client as well as any other data or metadata that is needed by the client.

The management service may include or have access to components modules libraries or other executable code that operates as a frontend and backend . In some embodiments the frontend may comprise executable code software components hardware components or any combination thereof that is distributed among one or more computer systems for example in a distributed system. An example frontend may be a web server operable to receive API requests or a fleet of web servers operable to receive API requests. In an embodiment a service frontend receives a request from one or more clients and communicates with an authorization module to determine how to process the request. The authorization module may be a computer system computer system process program application service module or a combination of these and or other such computing system entities. The authorization module may be utilized by the management service to determine whether and or how to process requests submitted to the frontend . The authorization module may for instance verify digital signatures of requests submitted to the cryptography service or otherwise may determine whether fulfillment of requests is authorized. Further while a customer provider relationship is discussed throughout the present disclosure for the purpose of illustration the techniques described herein are adaptable to other contexts such as when the customer is an internal customer of the management service .

The management service may further be configured to use a cryptographic module for obfuscation and de obfuscation of identifiers. The cryptographic module may be any component e.g. a program module operable to perform cryptographic operations such as encryption and decryption. The cryptographic module may be implemented as hardware software or a combination thereof. In some embodiments the cryptographic module is a program module executing inside of a security module such as a Hardware Security Module HSM . In some embodiments the management service may access the security module indirectly via a cryptography service not shown in . For example the cryptography service may have a secure connection e.g. a Transport Layer Security TLS connection and or a virtual private network VPN connection to access a cryptographic module located on a remote server.

The frontend may further be configured to communicate with a backend system that is operable to access additional components and or data such as a cryptography service not shown in storage service computing services not shown in or other suitable systems for fulfilling requests received by the frontend . The backend may comprise executable code software components hardware components or any combination thereof that is distributed among one or more computer systems for example in a distributed system. An example backend is a server program operable to access a database or storage server within a server network. In some embodiments the frontend and backend may be implemented at least in part on additional services that are distinct from the management service in such embodiments the frontend and or backend may communicate with the management service for example via a secure TLS connection.

The storage service may be hardware software or a combination thereof that is used to access data that may be persisted in any suitable computer readable medium including hard disk drives and tape drives. It should be noted that some data accessible from a storage service is not necessarily stored in a persistent storage medium. For example some storage systems may use volatile memory to store data. In the storage service includes several data files with identifiers ID ID . . . ID. Each of these data files is associated with an identifier within the environment and the identifier may be used within the environment to obtain the data file resource. In the embodiment shown in data file has an identifier IDvalue of 193852 and data file has an identifier IDvalue of 314.

The embodiment shown in illustrates how data files and may be made available to a client . The management service for example in response to the frontend receiving a request from the client may via the backend identify the data files and to be made available. The identifiers for data files and respectively IDand IDmay be obtained by the management service and the management service may for example using an API use the cryptographic module to obfuscate the identifiers .

Identifiers may be obfuscated using an obfuscation algorithm the output of the obfuscation algorithm including at least an obfuscated identifier for example obfuscated identifiers . The obfuscation algorithm may be achieved using a variety of methods including at least block cipher encryption algorithms and hash functions. The obfuscation algorithm accepts as an input at least an identifier information usable to determine the set of valid identifier values and produces as an output at least an obfuscated identifier.

Obfuscation of the identifier may be done using various methods. For example a cryptographic module may be used to obfuscate an identifier by performing an encryption operation using at least the identifier as a plaintext input and a cryptographic key in conjunction with an encryption algorithm. In some embodiments there may be additional inputs accepted either as mandatory or optional inputs to the encryption operation such as a nonce initialization vector additional authenticated data AAD or any combination thereof.

As a result of the encryption operation at least a ciphertext is produced as an output. In some embodiments as a result of the encryption operation additional outputs may be generated such as an authentication tag. The authentication tag may for example be a message authentication code MAC calculated by a keyed hash message authentication code HMAC . The ciphertext is an encoded text that is cryptographically secure and wherein determining the plaintext from the ciphertext without access to the corresponding cryptographic key needed to perform the decryption operation is extremely difficult or impossible. The obfuscated identifier includes at least the ciphertext and in some embodiments may also include the MAC and or other information.

The set of valid identifier values may be expressed in various formats. In some embodiments the set of valid identifiers may be defined by an array of alphanumeric strings. However the set of valid identifiers may also be expressed based on certain properties shared by the set. For example the set of valid identifier values may be expressed as a maximum length in decimal digits for example the set of valid identifiers includes all integers between 0 and 999 999 inclusive may be expressed using the maximum valid identifier value 999 999 the maximum number of decimal digits in all valid identifier values 6 or any other suitable representation for expressing such a numerical set. Of course this set of valid identifiers may also be expressed as an array of numbers. The embodiment shown in illustrates an environment wherein the set of valid identifiers includes all 6 digit decimal numbers.

As a second example the set of valid identifier values may be expressed as a maximum length in binary digits for example the set of valid identifiers includes all binary numbers between 0 and 11111111 i.e. 11111111 base 2 or 255 base 10 inclusive may be expressed using the maximum valid identifier value 11111111or 255 the maximum number of binary digits in all valid identifier values 8 or any other suitable representation for expressing such a set. Of course this set of valid identifiers may also be expressed as an array of binary digits and or decimal numbers. Of course maximum lengths may also be expressed in other numeral systems including hexademical base 16 numeral system and ternary base 3 numeral system .

In some embodiments a maximum length may be used for example to ensure that identifiers displayed to a user for example in an end user console displayed on a computer monitor does not exceed a certain length. Customers may find such a maximum length helpful for example in being able to display several identifiers on an end user console in copying the identifiers by hand or for memorization.

Furthermore the set of valid identifiers may in some embodiments require valid identifiers to possess certain properties. For example a set of valid identifiers may include 16 digit numbers in accordance with the ISO IEC 7812 standard which is incorporated into this document by reference.

Turning back to the illustrative embodiment shown in the obfuscated identifiers are produced by the cryptographic module to be within the set of valid identifiers. In some embodiments the cryptographic module uses an obfuscation algorithm to map the identifier values to other values in the set of valid identifiers. Note that although the embodiment shown in shows two identifiers being obfuscated that identifiers may be obfuscated individually e.g. one identifier is obfuscated at a time or may also be obfuscated in batches e.g. a set of identifiers is provided for obfuscation .

In some embodiments an identifier value may map onto itself i.e. the obfuscated identifier has the same value as the identifier . The mapping may be achieved in various ways. For example a hashing function may be used to map an identifier value to a hashed value that corresponds to an identifier within the set of valid identifiers. As another example a format preserving encryption algorithm may be used to ensure that the desired output format is preserved. Format preserving encryption algorithms may use a variety of ways to ensure that the output obfuscated identifier is within the set of valid identifier values. Feistel networks including at least unbalanced Feistel networks may be used to construct custom length block ciphers from block ciphers that are not an integer multiple. As an example format preserving algorithms such as implementations of AES FFX in accordance with NIST 800 38G which is incorporated herein by reference may be used. Format preserving encryption algorithms may also be implemented at least in part by using a prefix cipher and or cycle walking.

In the embodiment illustrated in the identifier values 193852 and map respectively to obfuscated identifier values 225912 and 451245. The obfuscated identifiers are made available to the management service for example as part of a request response and may be provided back to the client along with the data files and associated with the obfuscated identifiers . Note that in some embodiments the data file and or corresponding obfuscated identifier may not be made available as a pair in the manner shown in . Rather in some embodiments it may be sufficient or even desirable for the management service to make only the resource e.g. data file or obfuscated identifier alone available to the client . In some embodiments obfuscated identifiers and a reference to the corresponding resource is made available to the client wherein a reference to the corresponding resource may be in the form of an IP address URL uniform resource identifier URI or other information usable to identify the resource.

In the embodiment illustrated in the client receives both the data files and and the obfuscated identifiers corresponding to the data files. The client may use the data file or other resource types along with the resource s corresponding obfuscated identifier to perform operations that would otherwise be performable having both the resource and identifier.

In an embodiment the management service may be configured to include a service frontend operable to receive requests from a client and provide a resource and the resource s corresponding obfuscated identifier OID. The service frontend may be configured in the manner described above in but may be further configured to communicate with an access control module for determining how to fulfill a request including whether to deny the request .

The cryptography service may further be configured to be used by the management service . In an embodiment a multi tenant API configurable cryptography service is configured to receive requests e.g. API requests also referred to as API calls from a client e.g. an internal client such as management service to perform cryptographic operations such as decryption of encrypted data and digital signature verification. The cryptography service may include a cryptographic module which is used to service requests for cryptographic operations such as encryption and decryption but may also provide additional services such as performing operations for verification of the authenticity or integrity of a message.

In some embodiments the cryptographic module may provide data to be encrypted or encrypted data to decrypt to a secure module . The security module may be used for storing cryptographic keys and performing cryptographic operations using cryptographic keys. Examples of security modules include a hardware security module HSM or other device with hardware based protection of cryptographic material e.g. a hardware token such as a trusted platform module TPM or other device configured to implement one or more services configured to implement techniques described herein. For clarity a single security module is shown in but one or more security modules e.g. a fleet of HSMs may be used by the cryptography service.

Various resources may be available to the system . Resources include but are not limited to user account data storage devices computing instances tokens computer files and computer system snapshots. In some embodiments resources are accessed through the service backend but other components may also be used to access the resources. In some embodiments the resources may be accessed through another service for example a data service may be used to access data file resources. In some embodiments computing resources may be hosted in a distributed system of a service provider for a customer of the service provider and the computing resource from a plurality of computing resources may be hosted by the service provider for different customers. In some embodiments information designating the resource type may be provided either as part of the obfuscated identifier or as metadata prepended appended or otherwise integrated into the obfuscated identifier. For example the obfuscated identifier may include the obfuscated resource identifier value and also be prepended with a short human readable tag denoting the resource type. As a specific example a compute instance resource identifier having an ID value 193852 with a corresponding obfuscated value of 225912 may have an obfuscated identifier I 225912 wherein the obfuscated identifier includes a prepended tag that identifies the resource as a compute instance and an obfuscated identifier value corresponding to the underlying compute instance. Additional tags may be associated with additional resource types e.g. DAT may be associated with data files SNAP may be associated with snapshots and so on . Additional tags may be used in addition to or instead of resource type tags such as tags associated with customer identifiers user identifiers use identifiers and in some embodiments custom defined identifiers.

User account data may be data or metadata associated with a user username handle client customer group etc. User account data may include for example a user s credit card information the creation date of a customer s account. Internal to the service an identifier may be associated with each user account for example a customer ID that is derived from an incremental counter e.g. the first customer is assigned a customer ID of 1 the second customer is assigned a customer ID of 2 and so on .

Storage devices may include a storage area network SAN disk drives tape drives and various other storage mediums. Computing instances may include resources that are capable of performing computer processing tasks such as physical processors execution cores virtual cores logical cores virtual machine instances and the like. Computing instances may include hardware software firmware and any combination thereof. Compute instances may further include management components operable to run such resources. For example a compute instance may refer to a virtual machine instance but may also refer to a compute instance and a hypervisor or virtual machine monitor used to manage the compute instance. In some embodiments compute instances are made available through a cloud based distributed computing platform.

As described above in connection with a resource and an obfuscated identifier associated to the resource may be made available to a client . In a reference to a compute instance is provided with the obfuscated identifier associated to the compute instance these may be provided for example as part of a response to a request to perform a computational task within a distributed computing environment.

In an embodiment the client makes a request including resources and or references to resources in a request and obfuscated identifiers . For example a client may issue a request to modify data files and stored on the server that are identified by obfuscated identifiers OIDand OIDrespectively.

The service frontend may receive the request from the client and de obfuscate e.g. decrypt the obfuscated identifiers . The frontend may request for the cryptographic module to perform a de obfuscation of the obfuscated identifiers . In an embodiment the obfuscated identifiers may correspond to the ciphertext of the associated identifiers encrypted with a cryptographic key. The identifiers may have been encrypted using a symmetric key algorithm such as AES FFX. Continuing with the example the cryptographic module may receive the obfuscated identifiers and de obfuscate the received obfuscated identifiers by performing a decryption operation using the obfuscated identifiers and the cryptographic key used to encrypt the obfuscated identifiers . The output of the decryption operation includes at least information usable to obtain the de obfuscated identifiers . In this example the obfuscated identifier OIDhas a de obfuscated identifier value of 193852 and the obfuscated identifier OIDhas a de obfuscated identifier value of 314. Various de obfuscation algorithms may be used including symmetric key algorithms and reverse hash functions corresponding to the algorithm function used to obfuscate the identifier. In some embodiments a mapping table with the resource identifier values and corresponding obfuscated identifier values may be used to de obfuscate the obfuscated identifier. An obfuscation algorithm and de obfuscation algorithm are inverses of each other where performing an obfuscation operation O on an identifier X produces an obfuscated identifier O X and performing a de obfuscation operation D on O X results in the original identifier X that is D O X X.

The cryptographic module may make the de obfuscated identifiers IDand IDavailable to the management service for completing the request. In the example illustrated in the identifiers and the modified data files and provided by the client are provided to the backend that accesses the storage service and persists the modifications to data files and .

In some embodiments the cryptographic module uses a resource identifier and additional context to obfuscate the resource identifier. For example the additional context may be the user id of the client issuing a request. In some embodiments the cryptographic module may use the resource identifier as the plaintext input the requestor s user id as an initialization vector or as a part as an initialization vector and a cryptographic key. In an example the resource identifier IDis obfuscated to two different obfuscated identifier values based at least in part on the requestors having different user IDs. The resource and obfuscated identifier associated with the first client is made available to the first client whereas the resource and the obfuscated identifier associated with the second client is made available to the second client . In other embodiments the cryptographic module may use the resource identifier as the plaintext input and a cryptographic key that is associated with the requestor. In this example the obfuscated ID for a first client and a second client may be varied because different cryptographic keys are used for their respective obfuscation operations.

In some embodiments the first client and second client may not have sufficient information between them to determine whether the first obfuscated identifier and second obfuscated identifier refer to the same resource for example where the resource is a snapshot or other type of resource wherein the resources themselves cannot be compared directly e.g. where a bit to bit comparison of two resources cannot be used to determine whether two resources are identical .

In an embodiment the obfuscated identifier may be de obfuscated by the cryptographic module for example in the manner described in . The resource identifiers may then be made available to the access control module which determines how the request should be fulfilled. The access control module may use the resource identifiers to determine whether the client is sufficiently privileged. For example client may be the owner or administrator of the resources associated with the identifiers and such status as the owner or administrator may entitle the client to fulfillment of the request. Conversely a second client not shown in that is neither the owner nor administrator of the resources associated with the identifiers may be denied fulfillment of its request to know whether the obfuscated identifiers are associated with the same underlying resource.

The access control module may be implemented as software hardware or a combination thereof. For example the access control module may include a software component within the management service for receiving requests and determining how fulfillment should proceed. The access control module may further include a hardware component storing a set of policies for determining fulfillment rules that the software component within the management service uses to retrieve policies applicable to determining how fulfillment should proceed. For example fulfillment rules may be based on the resource being accessed client information request information metadata associated with the resource e.g. whether the client is the owner or creator of the resource or any combination thereof. In some embodiments the access control module may deny fulfillment of a request based on the on the applicable policies.

The resource identifier may be associated to the resource for example through an association table that records both the resource identifier and a reference to the resource or the resource itself. In other embodiments the resource may include metadata that may be used to bind it to the identifier. An obfuscated identifier may be calculated based on the resource identifier wherein the obfuscated identifier is also from the set of valid identifiers . The obfuscated identifier may be calculated using various ways. For example a cryptographic module such as the cryptographic module of may use an obfuscation algorithm based on AES FFX to generate an obfuscated identifier that conforms to a maximum length requirement defining the set of valid identifiers. Finally a component such as the service frontend of may make available the obfuscated identifier for identification of the resource . In some embodiments the resource or a reference operable to obtain the resource may also be made available with the obfuscated identifier.

Where fulfillment of the request is allowed a security module for example may be used to obtain a first resource identifier from the first obfuscated identifier and obtain a second resource identifier form the second obfuscated identifier . The resource identifiers may be obtained in any suitable manner including de obfuscation in accordance with the embodiment described in .

The fulfillment of the request using at least the first resource identifier and the second resource identifier may be performed in any suitable manner and may in some embodiments also require obtaining the resource associated with the first resource identifier the second resource identifier or both. However in other embodiments the underlying resources associated with the resource identifiers might not be accessed for example where the client requests to know whether the two obfuscated identifiers are associated to the same resource. Finally the response may be made available for example to the client that issued the request.

In some embodiments more than two obfuscated identifiers may be provided e.g. a request to determine whether three obfuscated identifiers all are associated with the same resource . Similarly a single obfuscated identifier may be provided in the request e.g. a request to determine whether the resource associated with an obfuscated identifier is a specific type of resource .

The bus subsystem may provide a mechanism for enabling the various components and subsystems of computer system to communicate with each other as intended. Although the bus subsystem is shown schematically as a single bus alternative embodiments of the bus subsystem may utilize multiple busses.

The network interface subsystem may provide an interface to other computer systems and networks. The network interface subsystem may serve as an interface for receiving data from and transmitting data to other systems from the computer system . For example the network interface subsystem may enable transmission of authentication objects and other information such as electronic requests to access resources within a system e.g. receive a data file . The network interface subsystem may also facilitate the receipt and or transmission of data on other networks such as an organizations intranet and or other networks described below.

The user interface input devices may include one or more buttons a keyboard keypad pointing devices such as an integrated mouse trackball touchpad or graphics tablet a scanner a barcode scanner a fingerprint scanner a retinal scanner a touchscreen incorporated into a display audio input devices such as voice recognition systems microphones fingerprint readers retinal scanners and other types of input devices. Input devices may include for instance magnetic or other card readers one or more USB interfaces near field communications NFC devices interfaces and other devices interfaces usable to obtain data e.g. long term or short term credentials from other devices. In general use of the term input device is intended to include all possible types of devices and mechanisms for inputting information to the computer system . In some embodiments the computer system may be configured to operate without user interface input devices for example servers on a server rack. In some embodiments the computer system may be configured such that a user interface input device may be an optional component of the computer system for example an input device may be removed from the computer system during normal operations but added if the computer system is to be diagnosed by a technician or system administrator.

User interface output devices if any may include a display subsystem a printer or non visual displays such as audio and or tactile output devices etc. Generally the output devices may invoke one or more of any of the five senses of a user. The display subsystem may be a cathode ray tube CRT a flat panel device such as a liquid crystal display LCD light emitting diode LED display or a projection or other display device. In general use of the term output device is intended to include all possible types of devices and mechanisms for outputting information from the computer system . The output device s may be used for example to present user interfaces including obfuscated identifiers to facilitate user interaction with applications performing processes described herein and variations therein when such interaction may be appropriate. While a device with user interface output devices is used for the purpose of illustration it should be noted that the device may operate without an output device such as when the device is operated in a server rack and during typical operation an output device is not needed.

The storage subsystem may provide a computer readable storage medium for storing the basic programming and data constructs that may provide the functionality of at least one embodiment of the present disclosure. The applications programs code modules i.e. programming modules instructions that when executed by one or more processors may provide the functionality of one or more embodiments of the present disclosure may be stored in the storage subsystem . These application modules or instructions may be executed by the one or more processors . The storage subsystem may additionally provide a repository for storing data used in accordance with the present disclosure. The storage subsystem may comprise a memory subsystem and a file disk storage subsystem .

The cryptographic module which may be a trusted platform module TPM includes a memory subsystem including a main random access memory RAM for storage of instructions and data during program execution and a read only memory ROM in which fixed cryptographic information may be stored such as a hardware secret stored securely within the device so as to be non exportable i.e. inaccessible through any call to the cryptographic module . The cryptographic module in some embodiments operates wholly or partly in compliance with Trusted Computing Group s TPM Main Specification level 2 Version 1.2 Revision 116 TPM Main Specification level 2 Version 1.2 Revision 103 and or ISO IEC 11889 which are incorporated herein by reference. The device may also store cryptographic keys in RAM and or processor registers for temporary cryptographic processing. The cryptographic information stored in memory may be used in combination with cryptographic information obtained via the network interface and or one or more of the user interface input devices . The one or more cryptographic processors may be used to perform cryptographic operations in the device and may include a random number generator SHA 2 or other hash generator and an encryption decryption signature engine.

The one or more cryptographic processors may also be configured to perform one or more encryption decryption algorithms in accordance with one or more cryptographic algorithms such as public key and or private key cryptographic algorithms. For example as discussed numerous variations utilize symmetric and or asymmetric cryptographic primitives. The one or more cryptographic processors may further be configured to perform obfuscation and de obfuscation algorithms described herein. Obfuscation and de obfuscation algorithms may include various schemes for performing cryptographic operations on data including block ciphers stream ciphers and digital signature schemes. The cryptographic operations described herein may be implemented by software executing in the module by hardware within the module or a combination thereof. Symmetric key algorithms may include various schemes for performing cryptographic operations on data including block ciphers stream ciphers and digital signature schemes. Example symmetric key algorithms include but are not limited to the advanced encryption standard AES the data encryption standard DES triple DES 3DES Serpent Twofish blowfish CASTS RC4 and the international data encryption algorithm IDEA . Symmetric key algorithms may also include those used to generate output of one way functions and include but are not limited to algorithms that utilize hash based message authentication codes HMACs message authentication codes MACs in general PBKDF2 and Bcrypt. Asymmetric key algorithms may also include various schemes for performing cryptographic operations on data. Example algorithms include but are not limited to those that utilize the Diffie Hellman key exchange protocol the digital signature standard DSS the digital signature algorithm the ElGamal algorithm various elliptic curve algorithms password authenticated key agreement techniques the pallier cryptosystem the RSA encryption algorithm PKCS 1 the Cramer Shoup cryptosystem the YAK authenticated key agreement protocol the NTRUEncrypt cryptosystem the McEliece cryptosystem and others. Elliptic curve algorithms include the elliptic curve Diffie Hellman ECDH key agreement scheme the Elliptic Curve Integrated Encryption Scheme ECIES the Elliptic Curve Digital Signature Algorithm ECDSA the ECMQV key agreement scheme and the ECQV implicit certificate scheme. Other algorithms and combinations of algorithms are also considered as being within the scope of the present disclosure.

As noted above in various embodiments of the present disclosure hardware secrets are securely stored within the cryptographic module . In some embodiments the cryptographic module is implemented as or may contain a physically unclonable function PUF which is a function implemented in physical hardware to use one or more hardware secrets that are based at least in part on physical characteristics of the PUF. As a result any attempt to obtain a hardware secret may require physical intrusion into the PUF and physical intrusion may alter the physical characteristics of the PUF thereby destroying the hardware secret. Example PUFs that may be used include PUFs using explicitly introduced randomness optical PUFs coating PUFs PUFs using intrinsic randomness delay PUFs static random access memory SRAM PUFs butterfly PUFs bistable ring PUFs magnetic PUFs metal resistance PUFs and or other devices whose physical characteristics encode information usable as or for a hardware secret.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. Servers as used herein may be implemented in various ways such as hardware devices or virtual computer systems. In some contexts servers may refer to a programming module being executed on a computer system. As used herein unless otherwise stated or clear from context the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed virtual or clustered environment. The application server can include any appropriate hardware software and firmware for integrating with the data store as needed to execute aspects of one or more applications for the client device handling some or all of the data access and business logic for an application. The application server may provide access control services in cooperation with the data store and is able to generate content including but not limited to text graphics audio video and or other content usable to be provided to the user which may be served to the user by the web server in the form of HyperText Markup Language HTML Extensible Markup Language XML JavaScript Cascading Style Sheets CSS or another appropriate client side structured language. Content transferred to a client device may be processed by the client device to provide the content in one or more forms including but not limited to forms that are perceptible to the user audibly visually and or through other senses including touch taste and or smell. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the web server using PHP Hypertext Preprocessor PHP Python Ruby Perl Java HTML XML or another appropriate server side structured language in this example. It should be understood that the web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein. Further operations described herein as being performed by a single device may unless otherwise clear from context be performed collectively by multiple devices which may form a distributed and or virtual system.

The data store can include several separate data tables databases data documents dynamic data storage schemes and or other data storage mechanisms and media for storing data relating to a particular aspect of the present disclosure. For example the data store illustrated may include mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as page image information and access rights information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. The application server may provide static dynamic or a combination of static and dynamic data in response to the received instructions. Dynamic data such as data used in web logs blogs shopping applications news services and other such applications may be generated by server side structured languages as described herein or may be provided by a content management system CMS operating on or under the control of the application server. In one example a user through a device operated by the user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser. It should be noted however that embodiments of the present disclosure are not necessarily limited to the context of web pages but may be more generally applicable to processing requests in general where the requests are not necessarily requests for content.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed and or virtual computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop laptop or tablet computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network. These devices also can include virtual devices such as virtual machines hypervisors and other virtual devices capable of communicating via a network.

Various embodiments of the present disclosure utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as Transmission Control Protocol Internet Protocol TCP IP User Datagram Protocol UDP protocols operating in various layers of the Open System Interconnection OSI model File Transfer Protocol FTP Universal Plug and Play UpnP Network File System NFS Common Internet File System CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network a satellite network and any combination thereof.

In embodiments utilizing a web server the web server can run any of a variety of server or mid tier applications including Hypertext Transfer Protocol HTTP servers FTP servers Common Gateway Interface CGI servers data servers Java servers Apache servers and business application servers. The server s also may be capable of executing programs or scripts in response to requests from user devices such as by executing one or more web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Ruby PHP Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM as well as open source servers such as MySQL Postgres SQLite MongoDB and any other server capable of storing retrieving and accessing structured or unstructured data. Database servers may include table based servers document based servers unstructured servers relational servers non relational servers or combinations of these and or other database servers.

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU or processor at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disc Read Only Memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected when unmodified and referring to physical connections is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. The use of the term set e.g. a set of items or subset unless otherwise noted or contradicted by context is to be construed as a nonempty collection comprising one or more members. Further unless otherwise noted or contradicted by context the term subset of a corresponding set does not necessarily denote a proper subset of the corresponding set but the subset and the corresponding set may be equal.

Conjunctive language such as phrases of the form at least one of A B and C or at least one of A B and C unless specifically stated otherwise or otherwise clearly contradicted by context is otherwise understood with the context as used in general to present that an item term etc. may be either A or B or C or any nonempty subset of the set of A and B and C. For instance in the illustrative example of a set having three members the conjunctive phrases at least one of A B and C and at least one of A B and C refer to any of the following sets A B C A B A C B C A B C. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of A at least one of B and at least one of C each to be present.

Operations of processes described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. Processes described herein or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for embodiments of the present disclosure to be practiced otherwise than as specifically described herein. Accordingly the scope of the present disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the scope of the present disclosure unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

