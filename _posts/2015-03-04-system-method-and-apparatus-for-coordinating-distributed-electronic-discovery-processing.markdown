---

title: System, method, and apparatus for coordinating distributed electronic discovery processing
abstract: The present invention relates to a method, system, and apparatus for coordinating distributed electronic discovery processing. The method may comprise the steps of receiving electronic discovery data comprising a plurality of electronic files, determining, with at least one processor, a plurality of discrete tasks for processing the electronic discovery data, determining, with at least one processor, a coordinated distribution of the plurality of discrete tasks to a plurality of computers, and assigning at least a portion of the plurality of discrete tasks to the plurality of computers based on the coordinated distribution such that at least one discrete task is assigned to each computer at any given time or during any given time period. A system and apparatus configured to perform the method is also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09354936&OS=09354936&RS=09354936
owner: Driven, Inc.
number: 09354936
owner_city: Falls Church
owner_country: US
publication_date: 20150304
---
This application claims benefit of priority from U.S. Provisional Patent Application No. 61 948 275 filed Mar. 5 2014 which is incorporated herein by reference in its entirety.

This invention relates generally to electronic document processing and more specifically a system method and apparatus for coordinating distributed electronic discovery processing across multiple machines.

Performing electronic discovery processing on large data sets is a processor and memory intensive exercise often exceeding the resources available on a single physical computer. Even the most advanced multi core servers struggle to process data sets exceeding a few million documents in a timely manner.

Current electronic discovery processing software solutions focus on distributing the workload to multiple threads within a single instance of the running application. While this leverages all available resources granted to the application the maximum processing power is constrained by the physical limitations of the host computer. Given the vast CPU and memory requirements needed to efficiently process so many documents most electronic discovery processing systems typically reach bottlenecks when resource requirements exceed the available capabilities of the CPU and memory on the host computer. While these limitations may be acceptable for thousands or even millions of documents they are not acceptable as the order of magnitude of data grows.

Accordingly provided is a system method and apparatus for coordinating distributed electronic discovery processing that addresses the above described limitations associated with existing electronic discovery processing systems and methods. Preferably provided is a system method and apparatus for distributed electronic discovery processing that utilizes a coordinated and distributed approach to the electronic discovery process.

According to one preferred and non limiting embodiment provided is a computer implemented method for coordinating distributed electronic discovery processing comprising receiving electronic discovery data for each of a plurality of discovery processing sessions the electronic discovery data comprising a plurality of electronic files wherein each session is associated with a priority determining with at least one processor a plurality of discrete tasks for processing the electronic discovery data for each session of the plurality of discovery processing sessions determining with at least one processor a coordinated distribution of the plurality of discrete tasks to a plurality of available worker machines based at least partially on the priority of each session of the plurality of discovery processing sessions wherein the plurality of available worker machines comprise a plurality of virtual machines hosted by at least one physical host computer assigning the plurality of discrete tasks to the plurality of available worker machines based on the coordinated distribution and recording in at least one database processed data resulting from a performance of each discrete task by a worker machine.

According to another preferred and non limiting embodiment provided is a system for distributed electronic discovery processing comprising a at least one data storage device comprising electronic discovery data b a plurality of worker machines wherein each worker machine comprises at least one of a virtual machine and a physical computer programmed or configured to i receive a discrete processing task to process data from the electronic discovery data ii perform the discrete processing task resulting in processed data and iii record the processed data to at least one data storage device c an electronic discovery distribution engine executing on at least one computer and in communication with the at least one data storage device and the plurality of worker machines the electronic discovery distribution engine configured to i determine a plurality of discrete processing tasks for processing the electronic discovery data and ii automatically coordinate a distribution of the plurality of discrete processing tasks to available worker machines of the plurality of worker machines.

According to another preferred and non limiting embodiment provided is a computer program product for coordinating distributed electronic discovery processing for a plurality of discovery processing sessions comprising at least one non transitory computer readable medium including program instructions that when executed by at least one processor cause the at least one processor to receive electronic discovery data for each of a plurality of discovery processing sessions the electronic discovery data comprising a plurality of electronic files wherein each session is associated with a priority determine a plurality of discrete tasks for processing the electronic discovery data for each session of the plurality of discovery processing sessions determine a coordinated distribution of the plurality of discrete tasks to a plurality of available worker machines based at least partially on the priority of each session of the plurality of discovery processing sessions wherein the plurality of available worker machines comprise a plurality of virtual machines hosted by at least one physical host computer assign the plurality of discrete tasks to the plurality of worker machines based on the coordinated distribution and record processed data resulting from a performance of each discrete task by a worker machine.

According to a further preferred and non limiting embodiment provided is a distributed electronic discovery processing engine comprising at least one non transitory computer readable medium comprising a loading module in communication with at least one data source comprising electronic discovery data the loading module configured to start and or stop electronic discovery processing and a master module in communication with the loading module and a plurality of worker machines the master module configured to distribute a plurality of tasks to the plurality of worker machines wherein the plurality of tasks are generated by the loading module or master module based at least partially on user input.

These and other features and characteristics of the present invention as well as the methods of operation and functions of the related elements of structures and the combination of parts and economies of manufacture will become more apparent upon consideration of the following description and the appended claims with reference to the accompanying drawings all of which form a part of this specification wherein like reference numerals designate corresponding parts in the various figures. It is to be expressly understood however that the drawings are for the purpose of illustration and description only and are not intended as a definition of the limits of the invention. As used in the specification and the claims the singular form of a an and the include plural referents unless the context clearly dictates otherwise.

For purposes of the description hereinafter the terms upper lower right left vertical horizontal top bottom lateral longitudinal and derivatives thereof shall relate to the invention as it is oriented in the drawing figures. However it is to be understood that the invention may assume various alternative variations and step sequences except where expressly specified to the contrary. It is also to be understood that the specific devices and processes illustrated in the attached drawings and described in the following specification are simply exemplary embodiments of the invention. Hence specific dimensions and other physical characteristics related to the embodiments disclosed herein are not to be considered as limiting.

As used herein the terms communication and communicate refer to the receipt or transfer of one or more signals messages commands or other type of data. For one unit or device to be in communication with another unit or device means that the one unit or device is able to receive data from and or transmit data to the other unit or device. A communication may use a direct or indirect connection and may be wired and or wireless in nature. Additionally two units or devices may be in communication with each other even though the data transmitted may be modified processed routed etc. between the first and second unit or device. For example a first unit may be in communication with a second unit even though the first unit passively receives data and does not actively transmit data to the second unit. As another example a first unit may be in communication with a second unit if an intermediary unit processes data from one unit and transmits processed data to the second unit. It will be appreciated that numerous other arrangements are possible.

According to a preferred and non limiting embodiment of the present invention a coordinated distributed electronic discovery processing system coordinates and distributes tasks among a plurality of worker machines. The tasks may include for example the extraction of files metadata and images from electronic discovery data hard disk imaging endorsing electronic discovery data branding extracted data and performing optical character recognition OCR . The plurality of worker machines may include physical computers virtual machines and or a combination of physical computers and virtual machines. A physical computer may include for example memory one or more data storage units one or more processors and or the like. A virtual machine may include for example one or more emulations of a physical computer executing on one or more physical computers or devices.

Referring now to a coordinated distributed electronic discovery processing system is shown according to a preferred and non limiting embodiment. A data source includes electronic discovery data such as one or more hard drive images documents compressed files email archives computer forensic data raw data and or other like forms of electronic discovery. A host system includes a loading module and a master module . The loading module provides one or more user interfaces configured to facilitate a user to select a data source specify processing instructions and preferences and start or stop processing sessions. The user interfaces may also allow a user to manage the priority of multiple concurrent sessions. The loading module upon receiving a command to stop or start a processing session transmits processing instructions to the master module . The loading module may include for example one or more software functions programmed to generate a user interface that allows a user to input parameters and or select parameters from one or more selectable options and interface with the data source . Selectable options may include one or more drop down menus radio buttons check boxes input fields and or other like graphical user interface elements for user interaction and input.

With continued reference to the master module distributes tasks across the available worker machines . The master module may include one or more software functions programmed to analyze the data source to determine how the data should be processed although it will be appreciated that this processing task may also be performed by the loading module or a different software component. The master module then divides the necessary processing into discrete tasks. One or more discrete tasks are assigned to an available idling worker machine which performs the task s records the results of the processing in the file system and or a separate database and reports back to the master module that it is once again available for new tasks.

In a preferred and non limiting embodiment only a single discrete task is assigned to the available idling worker machine and in other embodiments only a specified or configurable number of discrete tasks are assigned to the available idling worker machine . The master module may assign and or unassign tasks to the worker machines and may allocate worker machines to various active sessions. It will be appreciated by those skilled in the art that the loading and master modules referred to are non limiting embodiments of how the system may be implemented and that in other embodiments the software processes and functions for implementing the system may be arranged in various ways. For example one or more software applications executing on one or more computers may perform the functions of the loading module and master module .

As already described the worker machines may include physical computers and or virtual machines on one or more networks. In a preferred and non limiting embodiment the worker machines are arranged in a virtualized environment in which a plurality of physical host computers pool their respective processing resources to implement a plurality of virtual machines as the worker machines . With continued reference to the worker machines may communicate with the host system directly or indirectly via a local area network LAN or wide area network WAN connection as examples. A task performed by one of the available worker machines results in processed data including but not limited to data that is extracted or converted such as files textual data image renditions metadata and or the like. This resulting processed data may be recorded to a file system and or database .

In a preferred and non limiting embodiment the time sensitivity of specific sessions or goals may influence how the tasks are distributed to the worker machines . As used herein a session may refer to a set of tasks to be performed on a given data set to achieve one or more desired results e.g. extraction image processing etc. . A user may specify a priority for a given session to influence the algorithm used to assign discrete tasks to available worker machines . For example the priority of all pending sessions may be factored into what sessions are initially commenced as active sessions. The priority may be input by the user into a user interface through one or more selectable options. As an example the priority may be specified based on categories e.g. low priority normal priority high priority etc. or on a numeric value or some other selectable or configurable basis. The specified priorities for different sessions influence which sessions are started first. For example all high priority sessions may be executed concurrently or substantially concurrently.

Further in a preferred and non limiting embodiment a bias may be specified to further prioritize different sessions. The bias may be in the form of a percentage or other numeric value or include further categories of priority. In this manner the bias for a given session may serve as a sub priority that influences the number of worker machines assigned to that session with respect to other concurrent sessions. For example if three high priority sessions are created all three of those sessions may be processed concurrently. However to determine the number of worker machines to be allocated to each session the bias value may be used. A session with a higher bias value will be assigned more worker machines than a session with a lower bias value even though both of those sessions are specified as high priority sessions. In a preferred and non limiting embodiment the bias value is specified by a user through a user interface generated by the loading module . However it will be appreciated that the bias value may be specified in other ways such as but not limited to project completion dates deadlines and other variables that are available to the system .

In non limiting embodiments one or more algorithms may be implemented to assign bias values to sessions based on a calculated urgency for that session. In a preferred and non limiting embodiment the bias value is a percentage and the allocation of worker machines is based on the percentage. For example if a bias value for a first session is 100 and a bias value for another session is 50 the first session will take precedence and all available workers will be allocated to the first session and any other session also having a bias value of 100. If the first session has a bias value of 90 for example and that is the highest bias of all sessions 90 of the available worker machines will be allocated to that session and 10 of the available worker machines will be allocated to one or more sessions having the next highest bias value.

In a preferred and non limiting embodiment worker machines can be added to the system at any time and be made available to running or new sessions or removed at any time and be made available to unrelated processes. For example additional worker machines in the form of physical computers and or virtual machines may be added to the network to contribute to the resource pool available to process the pending sessions. When new worker machines are added the worker allocation may be recalculated. If several new worker machines are added a majority of those worker machines may initially be dedicated to performing tasks for the sessions having the highest bias value in the highest priority. The additional worker machines may be allocated in proportion to the current allocation of worker machines to running sessions or in other examples may be allocated to new sessions.

Referring now to a method for coordinating distributed electronic discovery processing is shown according to a preferred and non limiting embodiment. Beginning with a first step electronic discovery data is loaded from a file system. The location of the electronic discovery data such as an identification of a file system and path name may be specified by a user through a user interface. In some examples user input may also specify the types of processing desired for a given data set which in turn allows the system to identify separate processing sessions to take place. At a next step additional user input is received to identify a priority and or bias for each processing session.

With continued reference to at a next step the system identifies the highest priority sessions. For example if there are three processing sessions indicated to be high priority and several normal priority or low priority processing sessions the high priority sessions will be identified first. If there are no high priority sessions the normal priority sessions will be identified first. It will be appreciated that various levels of priority may be used. Once the highest priority sessions are identified the method proceeds to step at which the available worker machines are identified. Available worker machines may be all worker machines on a given network that indicate availability. Availability may be determined by setting flags or other like binary indicators on the individual worker machines or in other instances maintaining a list or table of available worker machines that is modified when a task is assigned to a worker machine and when a worker machine reports that a task is complete. It will be appreciated that other methods of managing the statuses of the worker machines may be used.

Still referring to the method proceeds to step at which the identified sessions of highest priority are analyzed to determine a division of discrete tasks for completing those sessions. Each session may be associated with a plurality of processing tasks to be performed on the electronic discovery data such as for example extracting data recognizing characters and other types of data processing. Next at step the available worker machines are allocated to the discrete tasks based on a bias of the identified sessions. For example and as described herein if three sessions are running concurrently and a plurality of worker machines are available the plurality of worker machines will be allocated based on the bias of each session. The session with the highest bias will be allocated a greater number of worker machines than another session of equal priority having a lower bias. The worker machines allocated to each session are each assigned a discrete processing task and after completing the task each indicates that it is available for another task.

Referring again to at step the system determines if there are more tasks to be performed for the sessions identified to be of the highest priority. If there are more tasks the method proceeds back to step and the available worker machines are again identified. Once there are no more tasks to be performed for the sessions identified to be of the highest priority the method continues to step at which it is determined whether there are more sessions that require processing. If there are additional sessions to be processed the method proceeds back to step to identify the highest priority sessions. For example the next highest priority sessions may be of a normal priority or a low priority. The method then continues as described above. At step if there are no more sessions requiring processing the method ends.

Referring now to a method for coordinating distributed electronic discovery processing is shown according to a preferred and non limiting embodiment. At step a plurality of requests are received for a plurality of data processing sessions. The requests may be received for example through one or more user interfaces that facilitate input and identification of data sources. At step the high priority sessions if any are processed by continuing to steps . At step the system distributes a plurality of discrete tasks among a number of available worker machines based on a bias if any of each session. Each worker machine then performs the discrete task assigned to it and generates processed data at step records the processed data in a file system at step and reports back to the system to receive a new task at step . At step it is determined if any medium or normal priority sessions exist and if so steps are performed again. Likewise at step it is determined if any low priority sessions exist and if so steps are performed.

In a preferred and non limiting embodiment duplicate propagation may be used to save processing power and time e.g. CPU cycles that would otherwise be expended on tasks such as for example extracting text from a duplicate file that was already processed. For more efficient processing a duplicate file is first detected through techniques such as but not limited to comparing hash values for the file to hash values for previously processed files. Those skilled in the art will appreciate that various forms and sequences of hashing may be used and that different hash algorithms e.g. SHA MD5 etc. may be used alone or in combination. Once a duplicate file is detected through this process the system may propagate the duplicate file by creating a new record for the duplicate and storing in the new record a clone of the original file. This process eliminates the need to extract text and metadata from the duplicate file and thereby saves both storage space and processing power time.

As an example this duplicate propagation technique may be used in instances in which emails are produced for discovery that include duplicative file attachments. Such duplicates may be the result of forwarded emails or multiple custodians copied on an email. It will be appreciated that duplicate files may arise in various other situations as well. Further in other embodiments instead of cloning the original file and foregoing the processing steps the duplicate file may be processed e.g. extracting text and metadata and a pointer to the original extracted text may be included in the metadata instead of storing duplicate data. However unlike the duplicate propagation process described above that clones the original processed data using a pointer still expends processing power and time.

Referring now to a data source user interface is shown according to a preferred and non limiting embodiment. The user interface shown in lists the available data sources and is configured to allow a user to select a particular data source. As depicted in each data source has a name a path a custodian a time zone and a type of storage medium. Selectable options including for example file menus drop down menus radio buttons check boxes text fields tabs and or the like may be provided to facilitate user input. In a preferred and non limiting embodiment the data source user interface is generated by the loading module although it will be appreciated that the user interface may be generated by a variety of different software components.

Referring now to a query building user interface is shown according to a preferred and non limiting embodiment. In the depicted example a session directed to extracting data from a data source has been completed and the query building interface facilitates the filtering of results based on specified queries. A new session may then be created with a filtered subset of already extracted data. Selectable options are presented on the query building interface including a join operator option a search type option a field name option an operator option and a value option. Additional options may allow for a user to add a condition insert a value remove a value or remove all values. Through these tools a user can filter the processed data resulting from a processing session. In a preferred and non limiting embodiment the query building user interface is generated by the loading module although it will be appreciated that the interface may be generated by a variety of software components.

Referring now to a resource management user interface is shown according to a preferred and non limiting embodiment. The resource management interface includes two lists of sessions . The first list of sessions includes active sessions that are currently underway or pending. The second list of sessions includes sessions that have already been completed. Selectable options may be provided on the resource management user interface to facilitate user input. For example a user may input a priority bias and due date for each active session. As shown in the bias input field is selected for session 5433 and a bias of 25 has been entered.

Referring now to a resource monitor user interface is shown according to a preferred and non limiting embodiment. The resource monitor user interface lists active sessions and active worker machines . The list of active worker machines lists for each active worker machine a session identifier a source identifier a session type e.g. extracting printing OCR etc. a start time and any other relevant details. As can be seen the sessions 5448 and 5433 are active sessions. Session 5443 has only a single allocated worker machine and session 5448 has fourteen 14 allocated worker machines indicating that session has a lower bias than session . As in the resource management user interface selectable options may be provided on the resource monitor user interface to facilitate user input.

It will be appreciated that the user interfaces depicted in may take on a variety of forms and in some examples be combined into one interface or split into multiple interfaces shown on one or more computers. The interfaces may also be generated by a software application or accessed over a network through a web browser and or other like application.

Referring now to a working environment is shown according to a preferred and non limiting embodiment. The working environment includes a resource monitor user interface and several remote desktop interfaces . Selecting a worker machine on the resource monitor interface may initiate a remote desktop protocol RDP connection with a worker machine to allow for technical troubleshooting. The remote desktop interfaces show the current statuses of the corresponding worker machines including the details of the data processing that the worker machine is performing. The remote desktop interface shows details of a master module coordinating the distribution of tasks to the worker machines.

The present invention may be implemented on a variety of computing devices and systems including the client devices and or server computer wherein these computing devices include the appropriate processing mechanisms and computer readable media for storing and executing computer readable instructions such as programming instructions code and the like. As shown in personal computers in a computing system environment are provided. This computing system environment may include but is not limited to at least one computer having certain components for appropriate operation execution of code and creation and communication of data. For example the computer includes a processing unit typically referred to as a central processing unit or CPU that serves to execute computer based instructions received in the appropriate data form and format. Further this processing unit may be in the form of multiple processors executing code in series in parallel or in any other manner for appropriate implementation of the computer based instructions.

In order to facilitate appropriate data communication and processing information between the various components of the computer a system bus is utilized. The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus or a local bus using any of a variety of bus architectures. In particular the system bus facilitates data and information communication between the various components whether internal or external to the computer through a variety of interfaces as discussed hereinafter.

The computer may include a variety of discrete computer readable media components. For example this computer readable media may include any media that can be accessed by the computer such as volatile media non volatile media removable media non removable media etc. As a further example this computer readable media may include computer storage media such as media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data random access memory RAM read only memory ROM electrically erasable programmable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVDs or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer . Further this computer readable media may include communications media such as computer readable instructions data structures program modules or other data in other transport mechanisms and include any information delivery media wired media such as a wired network and a direct wired connection and wireless media. Computer readable media may include all machine readable media with the sole exception of transitory propagating signals. Of course combinations of any of the above should also be included within the scope of computer readable media.

The computer further includes a system memory with computer storage media in the form of volatile and non volatile memory such as ROM and RAM. A basic input output system BIOS with appropriate computer based routines assists in transferring information between components within the computer and is normally stored in ROM. The RAM portion of the system memory typically contains data and program modules that are immediately accessible to or presently being operated on by processing unit e.g. an operating system application programming interfaces application programs program modules program data and other instruction based computer readable codes.

With continued reference to the computer may also include other removable or non removable volatile or non volatile computer storage media products. For example the computer may include a non removable memory interface that communicates with and controls a hard disk drive i.e. a non removable non volatile magnetic medium and a removable non volatile memory interface that communicates with and controls a magnetic disk drive unit which reads from and writes to a removable non volatile magnetic disk an optical disk drive unit which reads from and writes to a removable non volatile optical disk such as a CD ROM a Universal Serial Bus USB port for use in connection with a removable memory card etc. However it is envisioned that other removable or non removable volatile or non volatile computer storage media can be used in the exemplary computing system environment including but not limited to magnetic tape cassettes DVDs digital video tape solid state RAM solid state ROM etc. These various removable or non removable volatile or non volatile magnetic media are in communication with the processing unit and other components of the computer via the system bus . The drives and their associated computer storage media discussed above and illustrated in provide storage of operating systems computer readable instructions application programs data structures program modules program data and other instruction based computer readable code for the computer whether duplicative or not of this information and data in the system memory .

A user may enter commands information and data into the computer through certain attachable or operable input devices such as a keyboard a mouse etc. via a user input interface . Of course a variety of such input devices may be utilized e.g. a microphone a trackball a joystick a touchpad a touch screen a scanner etc. including any arrangement that facilitates the input of data and information to the computer from an outside source. As discussed these and other input devices are often connected to the processing unit through the user input interface coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . Still further data and information can be presented or provided to a user in an intelligible form or format through certain output devices such as a monitor to visually display this information and data in electronic form a printer to physically display this information and data in print form a speaker to audibly present this information and data in audible form etc. All of these devices are in communication with the computer through an output interface coupled to the system bus . It is envisioned that any such peripheral output devices be used to provide information and data to the user.

The computer may operate in a network environment through the use of a communications device which is integral to the computer or remote therefrom. This communications device is operable by and in communication to the other components of the computer through a communications interface . Using such an arrangement the computer may connect with or otherwise communicate with one or more remote computers such as a remote computer which may be a personal computer a server a router a network personal computer a peer device or other common network nodes and typically includes many or all of the components described above in connection with the computer . Using appropriate communication devices e.g. a modem a network interface or adapter etc. the computer may operate within and communication through a local area network LAN and a wide area network WAN but may also include other networks such as a virtual private network VPN an office network an enterprise network an intranet the Internet etc. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

As used herein the computer includes or is operable to execute appropriate custom designed or conventional software to perform and implement the processing steps of the method and system of the present invention thereby forming a specialized and particular computing system. Accordingly the presently invented method and system may include one or more computers or similar computing devices having a computer readable storage medium capable of storing computer readable program code or instructions that cause the processing unit to execute configure or otherwise implement the methods processes and transformational data manipulations discussed hereinafter in connection with the present invention. Still further the computer may be in the form of a personal computer a personal digital assistant a portable computer a laptop a palmtop a mobile device a mobile telephone a server or any other type of computing device having the necessary processing hardware to appropriately process data to effectively implement the presently invented computer implemented method and system.

Although the invention has been described in detail for the purpose of illustration based on what is currently considered to be the most practical and preferred embodiments it is to be understood that such detail is solely for that purpose and that the invention is not limited to the disclosed embodiments but on the contrary is intended to cover modifications and equivalent arrangements that are within the spirit and scope of the appended claims. For example it is to be understood that the present invention contemplates that to the extent possible one or more features of any embodiment can be combined with one or more features of any other embodiment.

