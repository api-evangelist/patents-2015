---

title: Diagnosing entities associated with software components
abstract: In one embodiment, a method includes evaluating event history information for each of one or more events associated with a hardware entity against a symptom rule, the symptom rule defining a validity state of a diagnosis. The method also includes identifying contextual information by receiving and inspecting the event history information in response to the symptom rule being satisfied and the diagnosis being validated. An indication of the validity state of the diagnosis is sent to at least one subscriber that has requested a subscription specifically for the diagnosis.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09348721&OS=09348721&RS=09348721
owner: International Business Machines Corporation
number: 09348721
owner_city: Armonk
owner_country: US
publication_date: 20150720
---
This application is a continuation of copending U.S. patent application Ser. No. 13 484 200 filed May 30 2012 which is a continuation of U.S. patent application Ser. No. 13 223 170 filed Aug. 31 2011 which claims priority to European Patent Application No. 10186827.1 filed Oct. 7 2010 which are herein incorporated by reference.

The present invention relates to diagnostic methods for entities associated with software components and in particular it relates to independent symptom checking and event recording to provide a decoupled diagnosis arrangement.

In conventional large multi component software applications one component may wish to perform an action based upon what has happened to an entity associated with another component of the system by diagnosing a particular state of the entity. For example a software component supporting a redundant array of independent disks RAID may wish to know when one type of disk making up one of a set of disk arrays has been subject to a certain number of recording medium errors in a particular time period. Such a circumstance may result in a diagnosis of a disk failure and can be remedied by the removal of a disk from the array.

Typical approaches invoke a framework in which software components communicate directly with each other to obtain information relating to the status of associated entities such as by polling. This communication can produce a burdensome processing overhead for the components potentially reducing performance and furthermore requires a tight coupling between the components otherwise the process may fail. Tight coupling is disadvantageous in software design and development because it complicates software maintenance and reduces the potential for code reuse as software components are written specifically for either direct or indirect coupling between components.

In one embodiment a method includes evaluating event history information for each of one or more events associated with a hardware entity against a symptom rule the symptom rule defining a validity state of a diagnosis. The method also includes identifying contextual information by receiving and inspecting the event history information in response to the symptom rule being satisfied and the diagnosis being validated. An indication of the validity state of the diagnosis is sent to at least one subscriber that has requested a subscription specifically for the diagnosis.

A computer program product according to one embodiment includes a computer readable storage medium having program instructions embodied therewith the program instructions executable by a processing device to cause the processing device to perform the foregoing method.

A system according to one embodiment includes modules for performing various operations of the foregoing method.

Other aspects and embodiments as described in the present specification will become apparent from the following detailed description which when taken in conjunction with the drawings illustrate by way of example the principles of the invention.

The following description is made for the purpose of illustrating the general principles as described in the present specification and is not meant to limit the inventive concepts claimed herein. Further particular features described herein can be used in combination with other described features in each of the various possible combinations and permutations.

Unless otherwise specifically defined herein all terms are to be given their broadest possible interpretation including meanings implied from the specification as well as meanings understood by those skilled in the art and or as defined in dictionaries treatises etc.

It must also be noted that as used in the specification and the appended claims the singular forms a an and the include plural referents unless otherwise specified. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The following description discloses several preferred embodiments of systems methods and computer program products for diagnosing an entity associated with a software component for diagnosis of operating conditions for entities associated with decoupled software components without adversely impacting system performance and without other disadvantages of the existing approaches.

In one general embodiment a system includes a recording module adapted for recording event history information for one or more events associated with an entity an evaluating module adapted for evaluating the event history information for each of the one or more events associated with the entity against a symptom rule wherein the symptom rule defines a validity state of a diagnosis an issuing module adapted for issuing a subscription to one or more subscribers wherein the subscription enables the one or more subscribers to receive diagnosis information and an indicating module adapted for indicating the validity state of the diagnosis to the subscriber wherein the recording module and the evaluating module are independent such that the issuing module and the event history information are substantially decoupled.

In another general embodiment a computer program product includes a computer readable storage medium having computer readable program code embodied therewith the computer readable program code including computer readable program code configured to record event history information for one or more events associated with an entity evaluate the event history information for each of the one or more events associated with the entity against a symptom rule wherein the symptom rule defines a validity state of a diagnosis issue a subscription to one or more subscribers wherein the subscription enables the one or more subscribers to receive diagnosis information and indicate the validity state of the diagnosis to the subscriber wherein the computer readable program code configured to issue the subscription to the one or more subscribers and the event history information are substantially decoupled.

According to another general embodiment a method includes recording event history information for one or more events associated with an entity evaluating the event history information for each of the one or more events associated with the entity against a symptom rule wherein the symptom rule defines a validity state of a diagnosis issuing a subscription to one or more subscribers wherein the subscription enables the one or more subscribers to receive diagnosis information and indicating the validity state of the diagnosis to the subscriber wherein the recording and the evaluating are performed independently such that the event history information and the issuing are substantially decoupled.

As will be appreciated by one skilled in the art aspects as described in the present specification may be embodied as a system method or computer program product. Accordingly aspects as described in the present specification may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as logic a circuit module or system. Furthermore aspects as described in the present specification may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A non transitory computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. More specific examples a non exhaustive list of the computer readable signal medium would include the following an electrical connection having one or more wires an optical fiber any suitable combination of the foregoing etc. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects as described in the present specification may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects as described in the present specification are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Generally speaking embodiments of systems methods and computer program products as described herein may include and or utilize components such as a recording module adapted for recording event history information for one or more events associated with an entity an evaluating module adapted for evaluating the event history information for each of the one or more events associated with the entity against a symptom rule the symptom rule defining a validity state of a diagnosis an issuing module adapted for issuing a subscription to one or more subscribers the subscription enabling the one or more subscribers to receive diagnosis information and an indicating module adapted for indicating the validity state of the diagnosis to the subscriber. Furthermore the recording module and the evaluating module may operate independently such that the issuing module and the event history information and are substantially decoupled.

Referring now specifically to the event history information in one approach event information may be provided to the one or more subscribers as trace information for a problem diagnosis.

Referring now to the symptom rule in another approach the symptom rule may include one or more event history conditions relating to events occurring during operation including but not limited to types of events and frequency of events. Of course other event history conditions may also be included in the symptom rule and furthermore may be defined by a user as would be understood by one having ordinary skill in the art upon reading the present descriptions.

In one embodiment the recording module the evaluating module and the indicating module may each be independent components such as software and or hardware components according to one approach and may be capable of being utilized independently in methods systems and computer program products described herein. Furthermore in such embodiments the independent components may be interoperable via at least one of an application programming interface and or a shared data interface.

Moreover in another embodiment the recording module and the evaluating module may be independent components such as software and or hardware components that are also utilized independently in methods systems and computer program products as described herein. Moreover these independent components may be interoperable via a shared data interface including the event history information.

In another approach systems methods and computer program products as described herein my additionally include and or utilize an analyzing module adapted for analyzing an event profile comprising one or more events associated with the entity and may furthermore include and or utilize a determining module adapted for determining whether the one or more events associated with the entity are to be recorded to the event history information.

The entity may be any component associated with a software component including hardware and or software as would be understood by those having ordinary skill in the art upon reading the present descriptions. For example in one embodiment the entity may be a storage device in a redundant array of independent disks RAID .

Referring now to the Figures illustrates a network architecture in accordance with one embodiment. As shown in a plurality of remote networks are provided including a first remote network and a second remote network . A gateway may be coupled between the remote networks and a proximate network . In the context of the present network architecture the networks may each take any form including but not limited to a LAN a WAN such as the Internet PSTN internal telephone network etc.

In use the gateway serves as an entrance point from the remote networks to the proximate network . As such the gateway may function as a router which is capable of directing a given packet of data that arrives at the gateway and a switch which furnishes the actual path in and out of the gateway for a given packet.

Further included is at least one data server coupled to the proximate network and which is accessible from the remote networks via the gateway . It should be noted that the data server s may include any type of computing device groupware. Coupled to each data server is a plurality of user devices . Such user devices may include a desktop computer lap top computer hand held computer printer or any other type of logic. It should be noted that a user device may also be directly coupled to any of the networks in one embodiment.

A peripheral or series of peripherals e.g. facsimile machines printers networked and or local storage units or systems etc. may be coupled to one or more of the networks . It should be noted that databases and or additional components may be utilized with or integrated into any type of network element coupled to the networks . In the context of the present description a network element may refer to any component of a network.

According to some approaches methods and systems described herein may be implemented with and or on virtual systems and or systems which emulate one or more other systems such as a UNIX system which emulates an IBM z OS environment a UNIX system which virtually hosts a MICROSOFT WINDOWS environment a MICROSOFT WINDOWS system which emulates an IBM z OS environment etc. This virtualization and or emulation may be enhanced through the use of VMWARE software in some embodiments.

In more approaches one or more networks may represent a cluster of systems commonly referred to as a cloud. In cloud computing shared resources such as processing power peripherals software data servers etc. are provided to any system in the cloud in an on demand relationship thereby allowing access and distribution of services across many computing systems. Cloud computing typically involves an Internet connection between the systems operating in the cloud but other techniques of connecting the systems may also be used.

The workstation shown in includes a Random Access Memory RAM Read Only Memory ROM an I O adapter for connecting peripheral devices such as disk storage units to the bus a user interface adapter for connecting a keyboard a mouse a speaker a microphone and or other user interface devices such as a touch screen and a digital camera not shown to the bus communication adapter for connecting the workstation to a communication network e.g. a data processing network and a display adapter for connecting the bus to a display device .

The workstation may have resident thereon an operating system such as the Microsoft Windows Operating System OS a MAC OS a UNIX OS etc. It will be appreciated that a preferred embodiment may also be implemented on platforms and operating systems other than those mentioned. A preferred embodiment may be written using JAVA XML C and or C language or other programming languages along with an object oriented programming methodology. Object oriented programming OOP which has become increasingly used to develop complex applications may be used.

Of course this logic may be implemented as a method on any device and or system or as a computer program product according to various embodiments.

For example in one embodiment the software component may be associated with an array of storage entities such as a RAID . In such an arrangement the tracked entity is included with the software component although it will be clear to those skilled in the art that an entity associated with the software component may take other forms.

In an alternative embodiment the tracked entity may be separated from the software component by a hardware and or software interface communications mechanism or other suitable mechanism of association as understood by those with ordinary skill in the art.

In more embodiments a subscription issuing module may be provided as a component that requests and or relies on information regarding diagnosis of the tracked entity . Diagnosis information may include one or more specific diagnoses corresponding to a state of the tracked entity in one approach.

For example in one instance tracked entity states may include an operating state an error state a transition state a operational conclusion or any other state of the tracked entity as would be understood by those having ordinary skill in the art upon reading the present descriptions. Moreover a storage medium recording error within the tracked entity may be indicative of a particular diagnosis such as an entity failure. Further still in some embodiments a series of such storage medium diagnoses may be characterized as fitting a particular profile e.g. occurring in a particular timeframe occurring with a particular frequency occurring successively for a particular number of iterations etc. as would be understood by those having ordinary skill in the art. Such a diagnosis pattern may additionally correspond to a particular complex diagnosis in some embodiments.

The subscription issuing module preferably receives a notification of a diagnosis relating to the tracked entity via a diagnostic arrangement in accordance with a preferred embodiment as described herein. Advantages as described in the present specification are provided at least in part by the separation and decoupling of a diagnosis mechanism from the software component associated with the tracked entity as is described in further detail herein.

In one embodiment an event history recording module may be provided for recording event history information for example in a file buffer and or other similar data store mechanisms such as by using events generated for the tracked entity . The recording module may be a software and or hardware entity adapted for communication with a source of one or more events for the tracked entity . Alternatively in other embodiments all or some of the recording module functionality may be performed by the software component or the tracked entity . In one embodiment the recording module may include an event identifier adapted for identifying events generated for the tracked entity and communicated to the recording module . The events can include generation of information errors status reports and or other events reflecting the operation performance status and or other attributes of the tracked entity as would be understood by those having ordinary skill in the art upon reading the present descriptions.

Moreover as shown in the events may be reported via a communication connection from the tracked entity to the event identifier . It will be clear to those skilled in the art that events may alternatively be generated by the software component and in many cases these events originating from the software component result from the association between the software component and the tracked entity .

In a further alternative embodiment events may be generated by a different component not illustrated that is operable to work with either the tracked entity or the software component or both. It will be clear to those skilled in the art that the events relating to the tracked entity and communicated via communication connection to the recording module may be generated by any component or entity involved in the operation of the tracked entity capable of observing or responding to the behavior and or function of the tracked entity including a combination of the software component the tracked entity itself and other entities not explicitly specified here but would be understood by persons having ordinary skill in the art upon reading the present descriptions.

In some embodiments event history information may be stored in a data store such as a storage device data structure database and or other suitable storage mechanisms as would be understood by those having ordinary skill in the art. For example the event history information may be stored in one or more array data structures. Each entry in the event history information includes information from a communicated event. Preferably each entry further includes a timestamp and a uniqueness identifier for use in discerning entries from one another.

Optionally the recording module may include an event profile for defining which events generated for the tracked entity are to be recorded in the event history information . For example the event profile may be a software and or hardware component including rules that define what qualifies as an event suitable for recording in the event history information .

In some embodiments the diagnosis mechanism of further includes an evaluating module and an indicating module . The evaluating module is a software and or hardware component adapted to access and evaluate the event history information for the existence of predefined symptoms. The evaluating module may include one or more symptom definitions each including a symptom identifier a symptom rule and a reference to a specific diagnosis according to one embodiment. Notably the symptom identifier may be used to uniquely identify a symptom. In many cases the symptom rule may include criteria for the associated specific diagnosis to be rendered valid. The validation of the diagnosis indicates that the diagnosis is applicable to the tracked entity .

In one embodiment symptom rule may include criteria relating to the nature type and or identification of events generated for the tracked entity and stored in the event history information . Furthermore symptom rule may include criteria relating to the rate time period and or frequency of such events. For example in an exemplary arrangement where tracked entity is a disk in a RAID symptom rule may include the criterion that ten storage medium error events are generated within a five minute window. Such error events are recorded along with a timestamp in the event history information and the evaluating module can evaluate the event history information for satisfaction of the symptom rule according to an exemplary embodiment.

According to some embodiments the evaluating module may also evaluate the event history information in accordance with the symptom rule on a periodic routine random or scheduled basis. Alternatively the evaluating module may perform the evaluation each time the event history information is updated. Notably the evaluating module and the recording module may be substantially or entirely decoupled being interoperable via an abstraction such as an application programming interface API a shared data interface etc. For example in one embodiment the evaluating module and recording module may be interoperable by way of the shared event history information .

Upon satisfaction of the symptom rule an associated diagnosis may be designated as valid indicating that the particular diagnosis is applicable to the particular tracked entity . The indicating module may be a software and or hardware component adapted for indicating to the subscription issuing module that a particular diagnosis is valid via a notification when the symptom rule is satisfied.

Of course the subscription issuing module may cooperate such as by registering with the indicating module to indicate its interest in the diagnosis . Those skilled in the art will appreciate that the subscription issuing module may provide subscription service to one or more subscribers each capable of registering interest in one or more specific diagnoses. Moreover in some embodiments when a specific diagnosis is validated by way of the evaluating module all registered subscribers may receive notification of the diagnosis.

In one embodiment decoupling the evaluating module from the recording module as described herein avoids the drawbacks of a tightly coupled system such as lost capacity and or the inability to modify a structure of an entity for example a RAID array after initialization. Furthermore using a subscription mechanism for the subscription issuing module to register interest in particular diagnoses provides further decoupling between the subscription issuing module the evaluating module and the tracked entity which is still more advantageous.

As will be understood by those having ordinary skill in the art some embodiments also provide the advantage that the indicating module evaluating module and recording module may be developed and maintained as separate entities using different hardware and or software components interoperable by one or more interfaces. This enables simple modification addition and or deletion of symptom rules without any need for modifying the software component the tracked entity or the recording module . As a result preferred embodiments allow very complex systems to be modeled without code becoming increasingly complex a common problem with existing diagnosis techniques.

In alternative embodiments the indicating module is adapted to retrieve receive and or inspect the event history information when the diagnosis is validated. This evaluation provides context and or trace information to the subscription issuing module in addition to a notification . For example in some embodiments the diagnosis relates to an error state of the tracked entity . In response the indicating module may further provide historical event information from event history information as the contextual trace information for the subscription issuing module . Notably in such an arrangement the indicating module and the recording module may be substantially or entirely decoupled being interoperable via an abstraction layer such as an API or a shared data interface. For example the indicating module and the recording module may be interoperable by way of the shared event history information in some embodiments.

Referring now to at step the recording module records event history information for the tracked entity . At step the evaluating module performs an evaluation of the event history information for the tracked entity to determine if the symptom rule is satisfied. At step the indicating module sends a notification the subscription issuing module regarding the validity state of the diagnosis .

Referring now to at step the recording module monitors the tracked entity to identify new events occurring in or in relation to the tracked entity . In one embodiment for example the event identifier may perform the monitoring functions. Such monitoring may be undertaken actively so that the recording module actively requests or inspects event information from the tracked entity . Alternatively such monitoring may be undertaken passively such that the recording module receives event information from or in relation to the tracked entity . In this second instance the information may be transferred by way of messages API invocations software exceptions hardware exceptions interrupts and or other notification mechanisms as would be understood by those having ordinary skill in the art upon reading the present descriptions.

Moreover it will be clear to those skilled in the art that the monitoring of step is suitably undertaken in relation to any entity or component capable of generating events for or in relation to the tracked entity including the tracked entity itself the software component and or another component able to observe and or respond to the behavior or function of the tracked entity . In some embodiments the functions of step may utilize a combination of the software component the tracked entity itself and other entities not explicitly specified here.

At step according to one embodiment it is determined if a new event has occurred in relation to the tracked entity .

Next in optional step it is determined if the newly identified event is capable of being recorded to the event history information by referencing the optional event profile which defines events that qualify for recording. For example certain events may be uninteresting irrelevant duplicative or otherwise undesirable for recording in the event history information as would be understood by those having ordinary skill in the art upon reading the present descriptions and the optional profile included within step provides for the exclusion of such events in some embodiments. Moreover excluding uninteresting irrelevant duplicative or otherwise undesirable events advantageously preserves system resources for other more productive applications.

At step the method stores any newly identified events that qualify for recording in the event history information for subsequent reference by the evaluating module .

Referring now to at step a set of one or more symptom definitions is iterated through. It will be clear to those skilled in the art that iterating through symptom definitions in this way is a design choice and that alternative mechanisms for checking the validity of one or more of a set of symptoms may be achieved using alternative techniques such as by processing each symptom definition in parallel according to a user defined schedule and or other methodologies.

At step it is determined if the event history information satisfies the symptom rule for a given symptom definition. The evaluating module may access the event history information directly or through an API such that the evaluating module and the recording module are substantially or entirely decoupled in some approaches. Advantageously this allows each component to be independently designed and developed as well as enabling components to function independently. Moreover when the symptom rule is satisfied the diagnosis associated with the symptom rule is validated at step . This results in the indicating module sending a notification to the subscription issuing module regarding the validity of the diagnosis .

At step it is determined if more symptom definitions should be evaluated and evaluates subsequent symptom definitions at step .

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments as described in the present specification. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

