---

title: Generating and publishing applications for multiple platforms
abstract: Technologies are disclosed for generating and publishing multi-platform application binaries from hosted websites or website source code. A developer can provide source code for a website or a link to a hosted website and identify target platforms for which application binaries should be created. The website is then modified for optimized presentation on devices on the specified target platforms. For example, page layouts, menu styles, image resolutions, and other aspects of the website can be modified for presentation on a mobile device, a tablet, a set top box, or other type of device. Source code is then generated for the target platforms that includes a web view component for rendering the website. A cross-platform compilation service then compiles the source code to generate native applications for the target platforms. The generated applications can then be provided to the developer or automatically submitted to application stores associated with the target platforms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09645814&OS=09645814&RS=09645814
owner: Amazon Technologies, Inc.
number: 09645814
owner_city: Seattle
owner_country: US
publication_date: 20150504
---
Application stores which are commonly referred to as app stores typically provide functionality for allowing customers to browse and obtain applications for free or for a fee. For example and without limitation an application store might enable a customer utilizing a smartphone or tablet computing device to browse and obtain various types of applications that are suitable for use on the customer s particular type of computing device. Applications available through an application store might be provided by the operator of the application store or by third party application developers.

Application stores currently exist for a wide variety of different computing platforms. As a result developers commonly have to develop different versions of their applications for each of the different platforms in order to expose their applications to the greatest number of potential customers. Creating different versions of applications for different platforms can however be a difficult time consuming and expensive process. Consequently application developers frequently only develop versions of their applications for the most popular platforms thereby limiting the exposure of their applications to customers having devices that are compatible with those platforms.

The following detailed description is directed to technologies for generating and publishing applications for multiple computing platforms using a website. Utilizing an implementation of the technologies described herein a website can be utilized to generate native applications suitable for submission to multiple application stores. For example and without limitation a developer can provide a website or a link to a website and identify one or more target platforms for which application binaries should be created using the website. For instance the developer might indicate that application binaries are to be created for the APPLE iOS platform the GOOGLE ANDROID platform the MICROSOFT WINDOWS PHONE platform and or for other computing platforms.

The website identified by the developer may then be modified for optimized presentation on devices compatible with the specified target platforms. For example page layouts menu styles and other styles image resolutions and other aspects of the website can be modified for optimized presentation on a mobile device a tablet or a set top box on the specific platforms. Source code is then generated for the target platforms that includes a platform specific web view component configured to fetch and render the website. The source code is then compiled for the various target platforms to generate platform specific application binaries which might be referred to herein as application binaries binaries native applications or simply applications . The website might be included in the application binaries or hosted external to the application binaries such as at a network accessible location. The generated application binaries can then be provided to the developer or automatically submitted to application stores associated with the target platforms.

In one configuration the source code is compiled to the platform specific application binaries by a cross platform application compilation service. The cross platform compilation service may execute in a service provider network or other type of distributed environment. The cross platform compilation service can receive requests to generate platform specific application binaries for multiple computing platforms in parallel. For instance as in the example set forth above a developer might request generation of application binaries capable of executing on devices compatible with the APPLE iOS platform the GOOGLE ANDROID platform and the MICROSOFT WINDOWS PHONE platform. In response to such a request the cross platform compilation service may utilize a number of different virtual or physical compile systems in parallel to generate the requested binaries simultaneously.

Each of the compile systems may be configured with a development environment capable of compiling source code for a particular target platform. For example an Apple Mac Mini operating in the service provider network might be utilized to generate application binaries that are compatible with APPLE iOS platform devices. In parallel physical or virtual LINUX and WINDOWS computing systems might be utilized to generate the GOOGLE ANDROID and MICROSOFT WINDOWS PHONE application binaries respectively. The generated application binaries can then be stored in a location accessible to the developer such as within a storage service provided by the service provider network or automatically submitted for inclusion in application stores associated with the specified target platforms.

In some configurations the application binaries are also configured to support various cross platform services. For example and without limitation the technologies disclosed herein can generate binaries that include support for an in application purchasing service an analytics service an advertising service and or a testing service. The generated application binaries might also include software support for various platform or device specific features. For example and without limitation the generated binaries might provide support for specific user input devices such as wireless remote controls or touch screens various types of sensors global positioning system GPS hardware and or other types of platform specific functionality. Additional details regarding the various components and processes described briefly above for generating and publishing application binaries for multiple platforms using a website will be presented below with regard to .

It should be appreciated that the subject matter presented herein may be implemented as a computer process a computer controlled apparatus a computing system or an article of manufacture such as a computer readable storage medium. While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

Those skilled in the art will also appreciate that aspects of the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described herein including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants e readers mobile telephone devices tablet computing devices special purposed hardware devices network appliances and the like. As mentioned briefly above the configurations described herein may be practiced in distributed computing environments where tasks may be performed by remote computing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific configurations or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures which may be referred to herein as a FIG. or FIGS. .

As shown in an application builder service is provided in one configuration. The application builder service executes in the service provider network and is configured to receive requests such as from the developer to generate platform specific application binaries from a website . The platform specific application binaries are native applications that are directly executable on devices of the target platforms. In this regard the application builder service might expose various types of interfaces through which such a request might be submitted. For example and without limitation a web service application programming interface API might be exposed for receiving such a request from computing system i.e. the developer system in associated with the developer . Alternately or in addition thereto a web front end might be exposed that provides a graphical user interface UI through which the developer can make such a request. Other types of interfaces might also be provided.

In conjunction with a request to generate platform specific application binaries the developer might also supply a location of a hosted website from which the binaries are to be generated. Alternately the developer might also submit a packaged website . For example a .zip file might be submitted that contains the website . In another configuration the developer might submit a link to the source code for a website on a revision control system such as the GITHUB revision control system. The developer might identify the website to be utilized to create the application binaries to the application builder service in other ways in other configurations.

It should be appreciated that the website might include various components. For example and without limitation the website might include markup language such as HTML5. The website might also include executable components such as JAVASCRIPT and or a cascading style sheet CSS . The website might also include and or reference various types of content such as text video audio images and or other types of assets. The website might also encompass other components not specifically mentioned herein.

As also shown in the developer might also identify the target platforms for which application binaries are to be generated using the specified website . For example and without limitation the developer might indicate that application binaries capable of executing on devices compatible with the APPLE iOS platform the GOOGLE ANDROID platform and the MICROSOFT WINDOWS PHONE platform are to be generated. The developer might also indicate that application binaries are to be generated for other platforms not specifically identified herein in other configurations.

The developer might also specify application metadata for use in generating the application binaries . For example and without limitation the developer might specify a name for the application binaries text descriptions for content referenced by the website such as images or videos an icon for the application binaries and or other types of metadata. As will be discussed in greater detail application metadata might also be generated in some configurations from the website itself. It should be appreciated that the developer might also provide other types of application metadata for the application binaries in other configurations.

Once the application builder service has received or obtained the website that is to be used to generate the application binaries the target platforms the application metadata and or any other pertinent information the application builder service generates platform specific application source code for the platform specific application binaries . For example and without limitation if the developer has requested that a platform specific application binary A be generated that is compatible with the APPLE iOS platform the application builder service will generate platform specific application source code that can be compiled on a suitable development system in order to generate an appropriate application binary A that can be generated on APPLE iOS devices. Similarly if the developer has requested that a platform specific application binary B be generated that is compatible with the GOOGLE ANDROID platform the application builder service will generate platform specific application source code that can be compiled on a suitable development system in order to generate an application binary B that can be executed on GOOGLE ANDROID devices. Generation of the platform specific application source code might also include the utilization of pre prepared source code templates existing libraries and or other types of pre existing components.

In order to generate the platform specific application source code the application builder service may first modify the website for optimized presentation on computing devices configured according to the target platforms . For example and without limitation the application builder service might modify page layouts and or other types of layouts of the website . The application builder service might also or alternately modify menu styles of the website . The application builder service might also modify the resolution of images or other types of graphics referenced by the website to optimize the assets for presentation on devices of the target platforms .

As one specific example if the target platforms include smartphone devices having smaller screens the website might be modified such that its menus images and or other assets are suitable for presentation on a smaller screen. Similarly if the target platforms include a set top box that might be connected to a large display the menus images and or other assets of the website might be modified in a different manner for presentation on a larger screen. In this regard it should be appreciated that different versions of the website might be created for different target platforms and or different devices within the same target platform e.g. smartphone table and set top boxes on the same platform .

As discussed briefly above the application builder service might also be configured to generate application metadata for the application binaries from the website itself. For example and without limitation markup language e.g. HTML5 tags and or other types of contextual information within the website might be utilized to obtain textual descriptions for graphical content such as images or videos referenced by the website . Other types of application metadata might also be generated from the website in a similar manner.

The application builder service might also be configured to reference libraries and or other types of code for accessing cross platform services and platform specific functionality in the source code . For example and without limitation the source code may be configured with functionality for accessing cross platform services for providing in application purchasing advertising analytics testing and or other types of cross platform services. Similarly the source code may be configured to enable utilization of platform and or device specific functionality such as but not limited to wireless remote controls touch screens GPS devices and or other types of platform or device specific functionality. The particular type of functionality added to the source code may depend upon the specific preference of the developer and the capabilities of the particular target platforms specified by the developer. For instance and without limitation the source code might be configured to translate between the specific type of input provided by a platform specific input device and the type of input expected by the website. Commands received via a wireless remote control for example might be translated to key presses expected by the website. Other types of translations might also be performed. Additional details regarding the utilization of cross platform services and platform specific functionality will be provided below with regard to .

Once the platform specific application source code has been generated the application builder service requests compilation of the source code by a cross platform compilation service in one configuration. As will be discussed in detail below with regard to the cross platform compilation service provides functionality for compiling the platform specific application source code to generate platform specific application binaries A C for the target platforms specified by the developer .

As shown in the platform specific application binaries might be stored in a storage location in the service provider network in one configuration. The storage location may be provided by a storage service executing in the service provider network in one configuration. The address of the storage location may be provided to the developer . In this way the developer can retrieve the platform specific application binaries and test the binaries or manually submit the binaries to application stores associated with the target platforms .

In some configurations the platform specific application source code is provided to the developer . For example the platform specific application source code can be stored in the storage location . The network address of the storage location can then be provided to the developer . The developer may then review and or make modifications to the platform specific application source code . Subsequently the developer might provide the modified platform specific application source code to the cross platform compilation service for compilation and potentially submission to application stores in the manner described below.

The application binaries might be automatically submitted to application stores associated with the target platforms in some configurations. For example and as shown in once the platform specific application binaries have been generated an application submission service might also submit one or more of the generated binaries to the application stores A C for the target platforms on behalf of the developer . As discussed briefly above an application store is an electronic marketplace where customers can purchase application programs for download and use on their own customer devices. An application store might offer applications for use on customer devices such as smart phones tablet computers laptop or desktop computers game consoles set top boxes and or other types of computing devices.

An application store typically provides functionality for permitting customers to browse and purchase available applications. For instance an application store may receive a browse request from a customer device and in response thereto retrieve information regarding a particular application offered for sale from the application store referenced by the browse request generate or retrieve information describing the application and transmit the information over a network to a client application not shown in executing on the customer device for display to the customer. The application information may include a name of the application the name of the application developer that developed the application a text description of the application one or more images of the application during execution a price for the application and or other information. The application information might be stored in an suitable database or other type of data store maintained by the application store for each application offered for sale. If the customer requests to purchase the application the application may be downloaded to the customer device for execution.

The application stores might also provide functionality for allowing an application developer to submit an application for inclusion in the application store . For example and without limitation the application stores may be configured to provide an API or other type of interface through which a developer can submit an application for inclusion in the application stores in some configurations. Other types of interfaces such a web based interface through which an application developer can submit an application for inclusion in the application store and define application metadata for an application such as a description of the application the price for the application if any and other information pertinent to the application might also be provided. In some configurations the application submission service utilizes an API exposed by the application stores to submit the application binaries to the application stores . Other mechanisms might also be utilized.

In the example shown in the application stores are platform specific application stores. For example the application store A might be an application store operated by APPLE INC. for providing applications compatible with the APPLE iOS platform. In this example the platform specific application binary A is configured for execution on devices executing the APPLE iOS operating system. Similarly the application store B might be an application store operated by GOOGLE INC. for providing applications compatible with the GOOGLE ANDROID platform and the platform specific application binary B may be compatible with the GOOGLE ANDROID operating system. Likewise the application store C might be an application store provided by MICROSOFT CORP. for providing applications compatible with the MICROSOFT PHONE platform and the platform specific application binary C might be configured for execution on devices executing the WINDOWS PHONE operating system. Although three platform specific application stores A C have been illustrated in a different number and type of application stores might also be utilized in a similar manner.

In the example shown in the application store D is a cross platform application store. A cross platform application store D is able to provide applications compatible with multiple software platforms. For instance in the example shown in all of the platform specific application binaries A C are being submitted to the cross platform application store D. In this manner applications compatible with a multitude of computing platforms can be offered and sold through a single application store D. In this regard it should be appreciated that other types of application stores might be utilized in other configurations.

Although not illustrated in it should be appreciated that the application submission service might also be configured to distribute the modified website for consumption via the web. For example and without limitation the modified website might be stored in an appropriate location in the service provider network for access by device via the web. In this way the website can be configured for access via devices on the target platforms without the need to access an application store . The website might also be distributed in other ways in other configurations.

The type of web view component utilized for each platform specific binary will be dependent upon the target platform that the application binary is created for. For instance if the application binary is created for the APPLE iOS platform the web view component will typically be a UIWebView component or a WKWebView component. If the application binary is created for the GOOGLE ANDROID platform the web view component will typically be an instance of the ANDROID WebView class. Other web view components might be utilize in other configurations. For example and without limitation performance optimized web view components might be created for various target platforms and distributed with the platform specific application binaries .

As illustrated in in some configurations the website may be included in the platform specific application binary . For example if the developer desires offline access to the website the website may be included in the platform specific application binary . Similarly it may be desirable to include the website in the platform specific application binary to reduce latency i.e. the time required to fetch and render the website and thereby improve performance of the platform specific application binary . Other configurations might also be utilized wherein a portion of the website is contained in the platform specific application binary and another portion of the website is hosted. Other configurations might also be utilized. In this regard because the platform specific application binaries wrap the website the application binaries may be referred to herein as platform specific wrappers for a web site .

As discussed briefly above the platform specific application binaries can also provide support for cross platform services . In particular binaries can be generated that include support for an in application purchasing service an analytics service an advertising service a testing service and or other types of services. Through these mechanisms application binaries executing on the target platforms can utilize a common cross platform mechanism to purchase in application items to obtain and present advertisements to perform testing of the application binaries and to collect analytics information regarding the execution and utilization of the application binaries across the various target platforms . Other types of cross platform functionality might also be enabled through an implementation of the mechanisms disclosed herein.

The generated application binaries might also include software support for various platform or device specific features. For example and without limitation the generated binaries might provide support for specific user input devices such as wireless remote controls or touch screens various types of sensors GPS hardware and or other types of platform specific functionality.

The implementation of the various components described herein is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the FIGS. and described herein. These operations may also be performed in parallel or in a different order than those described herein. Some or all of these operations might also be performed by components other than those specifically identified.

The routine begins at operation where the application builder service receives a request to create application binaries from a website . As discussed briefly above such a request may specify a location of a hosted website from which the binaries are to be generated. Alternately the developer might also submit a packaged website . In another configuration the developer might submit a link to the source code for a website on a revision control system. The developer might identify the website to be utilized to create the application binaries to the application builder service in other ways in other configurations.

From operation the routine proceeds to operation where the application builder service receives application metadata from the developer . For example and without limitation the developer might specify a name for the application binaries text descriptions for content referenced by the website such as images or videos an icon for the application binaries and or other types of application metadata .

At operation the application builder service might also receive an identification of the target platforms for which application binaries are to be generated using the specified website from the developer . For instance as in the example set forth above the developer might indicate that application binaries capable of executing on devices compatible with the APPLE iOS platform the GOOGLE ANDROID platform and the MICROSOFT WINDOWS PHONE platform are to be generated. The developer might also indicate that application binaries are to be generated for other platforms not specifically identified herein in other configurations.

Once the application builder service has received or obtained the website that is to be used to generate the application binaries the target platforms the application metadata and or any other pertinent information the routine proceeds from operation to operation . At operation the application builder service modifies the website for optimized presentation on computing devices configured according to the target platforms . For example and as discussed above the application builder service might modify page layouts and or other types of layouts of the website modify menu styles of the website modify the resolution of images or other types of assets of the website to make the assets presentable on devices of the target platforms and or make other modifications to the website .

From operation the routine proceeds to operation where the application builder service generates application metadata for the application binaries from the website itself. For example markup language e.g. HTML5 tags and or other types of contextual information within the website might be utilized to generate textual descriptions for graphical content such as images or videos referenced by the website . Other types of application metadata might also be generated from the website in a similar manner.

From operation the routine proceeds to operation where the application builder service generates platform specific application source code for the platform specific application binaries . As discussed above the source code wraps the website by including a web view component configured to fetch and render the web site . The source code might also be configured to reference libraries and or other types of code for accessing cross platform services and platform specific functionality. In some examples different versions of the source code are generated based upon different themes or templates to provide different visual presentations. The application developer might be permitted to choose among the different versions.

Once the platform specific application source code has been generated the routine proceeds to operation where the application builder service calls the cross platform compilation service to compile the source code into application binaries for the target platforms . As discussed briefly above the cross platform compilation service provides functionality for compiling the platform specific application source code to generate platform specific application binaries for the target platforms specified by the developer . Additional details regarding the configuration and operation of the cross platform compilation service will be provided below with regard to .

As discussed above the platform specific application binaries generated for the target platforms are stored in a storage location in the service provider network in one configuration. At operation the address of the storage location containing the platform specific application binaries is provided to the developer . In this way the developer can retrieve the platform specific application binaries and test the binaries or manually submit the binaries to application stores associated with the target platforms .

In some configurations the routine proceeds from operation to operation where the application submission service is called in order to automatically submit the application binaries to the application stores associated with the target platforms . From operations and the routine proceeds to operation where it ends.

When the compile service receives a request to compile source code into the application binaries the compile service places compile requests on appropriate platform specific request queues . For example and without limitation a platform specific request queue A may be created for storing compile requests for compiling APPLE iOS application binaries . Similarly another platform request queue B may be created for storing compile requests for compiling GOOGLE ANDROID application binaries . Yet another platform request queue C might be created for storing compile requests for compiling WINDOWS PHONE application binaries . Other platform specific request queues might also be created for storing compile requests for other platforms. Additionally although only a single queue per platform is illustrated in more than one queue might be maintained for each target platform . Additional details regarding the content of the compile requests will be provided below with regard to .

As discussed briefly above a number of compile systems might also be maintained. The compile systems are virtual or physical computing systems configured with software components for compiling source code into application binaries for a particular target platform . For instance in the example given above the compile system A might be configured with a development environment and or other software components for building APPLE iOS application binaries the compile system B might be configured with a development environment and or other software components for building GOOGLE ANDROID application binaries and the compile system C might be configured with a development environment and or other software components for building WINDOWS PHONE application binaries . Additional compile systems might also be provided and configured to build application binaries for other target platforms .

In one configuration a deployment service executing in the service provider network is utilized to configure the compile systems . For example and without limitation the deployment service may be configured to deploy a suitable development environment to each of the compile systems that includes a compiler . The deployment service might also be configured to deploy libraries to the compile systems . The libraries might provide various types of functionality such as but not limited to enabling the utilization of cross platform services enabling device or platform specific functionality and or providing other types of functionality.

The deployment service might also be configured to deploy a queue worker to the compile systems . The queue worker is a software component configured to monitor a corresponding platform specific request queue for the presence of compile requests . For example a queue worker executing on the compile system A may monitor the queue A a queue worker executing on the compile system B may monitor the queue B and a queue worker executing on the compile system C may monitor the queue C.

If a queue worker determines that a compile request is present on its associated queue the queue worker will dequeue the compile request . The queue worker will then extract a compile script from the compile request end execute the compile script . The compile script is a script configured to cause a compile system to compile the source code contained in or referenced by a compile request .

As shown in a database service in the service provider network might be configured to provide a tracking database . The queue worker compile script and or other components may be configured to write data to the tracking database describing aspects of their operation. For example and without limitation a queue worker may be configured to write data to the tracking database when a compile request has been dequeued from a platform specific request queue . As another example the compile script might be configured to write data to the tracking database when compilation of source code has started or ended. The compile service may be configured to retrieve data from the tracking database to provide status updates to a requestor regarding the status of a compile job.

Additionally the compile script or another component might also be configured to place an entry in the completion queue when a compile job has completed. The compile service may dequeue these entries and in response thereto provide a notification to a requestor indicating that application binaries have been generated. As discussed above the compile service might also provide the address of the storage location containing the platform specific application binaries . Additional details regarding the configuration and operation of the cross platform compilation service will be provided below with regard to .

It should be appreciated that as a result of the architecture shown in multiple compile requests may be processed in parallel by the compile systems . In this way platform specific application binaries for a multitude of platforms can be generated simultaneously in response to a request from a developer . Other configurations might also be utilized.

The compile request might also include or reference any libraries that are required to build the source code . As discussed above the compile request might also include or reference a compile script for managing the compilation of the source code . The compile request might also include or reference an application icon and or other assets needed to compile the source code . The assets may be stored in a location in the service provider network provided by a storage service in some configurations.

The compile request might also include application metadata such as the name of the application received from the developer or generated in the manner described above. The compile request might also include author metadata providing information about the author of the source code i.e. the developer .

In some configurations the compile request also includes one or more digital certificates . The digital certificates may be utilized to cryptographically sign the application binaries prior to submission to application stores in some configurations. A password associated with the digital certificate might also be provided. In this regard it should be appreciated that the developer might be permitted to specify whether the application binaries are to be created for testing or for production. A production binary is a binary that is available for consumption by a user such as through an application store . Depending on the selection the developer makes the application binaries might be generated in different ways. For example if production binaries are to be generated the digital certificate might be utilized to sign the binaries . In a test environment the binaries might be unsigned or signed with a different digital certificate.

It should be appreciated that the structure of the compile request shown in is merely illustrative and that other configurations might be utilized. For example the compile request might include less or more information than shown in in other configurations.

From operation the routine proceeds to operation where the queue workers executing on the compile systems retrieve the compile requests from the platform specific request queues . In one configuration the queue workers also create an entry in the tracking database at operation indicating that a compile request has been dequeued. Other types of entries might also be made in the tracking database at other times during the operation of the queue workers .

From operation the routine proceeds to operation where the compile scripts contained in the compile requests are executed. As discussed above the compile scripts cause the source code contained in or referenced by a compile request to be compiled into a platform specific application binary . The generated platform specific application binaries are then stored in the storage location in one configuration. A status update may then be made to the tracking database at operation indicating that compilation has been completed. Alternatively or additionally an entry may be created in the completion queue indicating that the compile job has been completed.

From operation the routine proceeds to operation where the compile service notifies the requestor that the compile job has completed. Additionally and as discussed above the compile service may provide the location of the generated application binaries to the requestor. The routine then proceeds from operation to operation where it ends.

It should be appreciated that various other types of functionality might be enabled through an implementation of the technologies described above. For example and without limitation a developer may be provided with a unified account for monetization of services. In particular using the mechanism described above platform specific application binaries might be created that reference a single account for monetization. In this way rather than receiving payment separately from each of the application stores the developer might receive a single payment from the operator of the application builder service . As other examples cross platform reporting and marketing might also be enabled using the mechanisms described above. Other types of functionality might also be enabled through an implementation of the technologies presented herein.

Each type of computing resource provided by the service provider network may be general purpose or may be available in a number of specific configurations. For example data processing resources may be available as physical computers or virtual machine instances in a number of different configurations. The virtual machine instances may be configured to execute applications including web servers application servers media servers database servers some or all of the services described above and or other types of programs. Data storage resources may include file storage devices block storage devices and the like. The service provider network might also be configured to provide other types of resources and network services.

The computing resources provided by the service provider network are enabled in one implementation by one or more data centers A N which may be referred herein singularly as a data center or in the plural as the data centers . The data centers are facilities utilized to house and operate computer systems and associated components. The data centers typically include redundant and backup power communications cooling and security systems. The data centers might also be located in geographically disparate locations. One illustrative configuration for a data center that implements some of the technologies disclosed herein for generating and publishing application binaries from a website will be described below with regard to .

The customers and other users of the service provider network may access the computing resources provided by the service provider network over a network which may be a wide area communication network WAN such as the Internet an intranet or an Internet service provider ISP network or a combination of such networks. For example and without limitation a computing device operated by a customer or other user of the service provider network such as the developer might be utilized to access the service provider network by way of the network . It should be appreciated that a local area network LAN the Internet or any other networking topology known in the art that connects the data centers to remote customers and other users may be utilized. It should also be appreciated that combinations of such networks might also be utilized.

The server computers may be standard tower rack mount or blade server computers configured appropriately for providing the computing resources described herein. As mentioned above the computing resources might be data processing resources such as virtual machine instances or hardware computing systems data storage resources database resources networking resources and others. Some of the servers might also be configured to execute a resource manager capable of instantiating and or managing the computing resources. In the case of virtual machine instances for example the resource manager might be a hypervisor or another type of program configured to enable the execution of multiple virtual machine instances on a single server . Server computers in the data center might also be configured to provide network services and other types of services some of which are described in detail below with regard to .

The data center shown in also includes a server computer F that may execute some or all of the software components described above. For example and without limitation the server computer F might be configured to execute one or more of the application builder service the cross platform compilation service and or the application submission service each of which has been described in detail above. The server computer F might also be configured to execute other components and or to store data for providing some or all of the functionality described herein. In this regard it should be appreciated that the network services illustrated in as executing on the server computer F might execute on many other physical or virtual servers in the data centers in various configurations.

In the example data center shown in an appropriate LAN is also utilized to interconnect the server computers A F. The LAN is also connected to the network illustrated in . It should be appreciated that the configuration and network topology described herein has been greatly simplified and that many more computing systems software components networks and networking devices may be utilized to interconnect the various computing systems disclosed herein and to provide the functionality described above. Appropriate load balancing devices or other types of network infrastructure components might also be utilized for balancing a load between each of the data centers A N between each of the server computers A F in each data center and potentially between computing resources in each of the data centers . It should be appreciated that the configuration of the data center described with reference to is merely illustrative and that other implementations might be utilized.

It is noted that not all configurations described include the services described with reference to and that additional services may be provided in addition to or as an alternative to services explicitly described. Each of the services shown in might also expose web service interfaces that enable a caller to submit appropriately configured API calls to the various services through web service requests. In addition each of the illustrated services may include service interfaces that enable the services to access each other e.g. to enable a virtual computer system provided by the on demand computing service A to store data in or retrieve data from the data storage service B . Additional details regarding some of the services shown in will now be provided.

The on demand computing service A may be a collection of computing resources configured to instantiate virtual machine instances. For example a customer or other user of the service provider network A may interact with the on demand computing service A via appropriately configured and authenticated API calls to provision and operate virtual computer systems that are instantiated on physical computing devices hosted and operated by the service provider network .

The virtual computer systems provided by the on demand computing service A may be used for various purposes such as to implement the compile systems to implement other services described herein to operate as servers supporting a website to operate business applications or generally to serve as computing resources for the customer. Other applications for the virtual computer systems may be to support database applications electronic commerce applications business applications and or other applications. Although the on demand computing service A is shown in any other computer system or computer system service may be utilized in the service provider network to implement the functionality disclosed herein such as a computer system or computer system service that does not employ virtualization and instead provisions computing resources on dedicated or shared computers servers and or other physical devices.

The storage service B might include software and computing resources that collectively operate to store data using block or file level storage devices and or virtualizations thereof . The storage devices of the storage service B might for instance be operationally attached to virtual computer systems provided by the on demand computing service A to serve as logical units e.g. virtual drives for the computer systems. A storage device might also enable the persistent storage of data used generated by a corresponding virtual computer system where the virtual computer system service might only provide ephemeral data storage. As discussed above the storage service B might be utilized to provide a storage location for the platform specific application binaries for storing a website for storing website assets such as images and or videos and or for storing other types of programs and data.

The service provider network may also include a cryptography service C. The cryptography service C may utilize storage services of the service provider network such as the storage service B to store encryption keys in encrypted form whereby the keys may be usable to decrypt customer keys accessible only to particular devices of the cryptography service C. The cryptography service C might also provide other types of functionality not specifically mentioned herein.

As illustrated in the service provider network in various configurations also includes an authentication service D and a policy management service E. The authentication service D in one example is a computer system i.e. collection of computing resources configured to perform operations involved in authentication of users. For instance one of the services shown in may provide information from a user to the authentication service D to receive information in return that indicates whether or not the requests submitted by the user are authentic.

The policy management service E in one example is a network service configured to manage policies on behalf of customers or internal users of the service provider network . The policy management service E may include an interface that enables customers to submit requests related to the management of policy. Such requests may for instance be requests to add delete change or otherwise modify policy for a customer service or system or for other administrative actions such as providing an inventory of existing policies and the like.

The service provider network in various configurations is also configured with a task service F. The task service F is configured to receive a task package and to enable executing tasks as dictated by the task package. The task service F may be configured to use any resource of the service provider network such as instantiated virtual machines or virtual hosts for executing the task. The task service F may configure the instantiated virtual machines or virtual hosts to operate using a selected operating system and or a selected execution application in accordance with specified requirements.

The service provider network might also maintain a queue service H. The queue service H provides functionality for allowing users to define one or more queues such as the platform specific request queues and or the completion queue . The queue service H might also provide other types of functionality not specifically mentioned herein.

The service provider network may additionally maintain other services based at least in part on the needs of its customers. For instance the service provider network may maintain the deployment service for deploying program code and or a database service for providing the tracking database not shown in in some configurations. A database service may be a collection of computing resources that collectively operate to create maintain and allow queries to be performed on databases stored within the service provider network . For example a customer or other user of the service provider network may operate and manage a database such as the tracking database from the database service by utilizing appropriately configured network API calls. This in turn may allow the customer to maintain and potentially scale the operations in the database. Other services include object level archival data storage services and services that manage monitor interact with or support other services. The service provider network might also be configured with other services not specifically mentioned herein in other configurations.

The computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative configuration one or more central processing units CPUs operate in conjunction with a chipset . The CPUs may be standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .

The CPUs perform operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units and the like.

The chipset provides an interface between the CPUs and the remainder of the components and devices on the baseboard . The chipset may provide an interface to a RAM used as the main memory in the computer . The chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that help to startup the computer and to transfer information between the various components and devices. The ROM or NVRAM may also store other software components necessary for the operation of the computer in accordance with the configurations described herein.

The computer may operate in a networked environment using logical connections to remote computing devices and computer systems through a network such as the network . The chipset may include functionality for providing network connectivity through a NIC such as a gigabit Ethernet adapter. The NIC is capable of connecting the computer to other computing devices over the network . It should be appreciated that multiple NICs may be present in the computer connecting the computer to other types of networks and remote computer systems.

The computer may be connected to a mass storage device that provides non volatile storage for the computer. The mass storage device may store an operating system programs and data which have been described in greater detail herein. The mass storage device may be connected to the computer through a storage controller connected to the chipset . The mass storage device may consist of one or more physical storage units. The storage controller may interface with the physical storage units through a serial attached SCSI SAS interface a serial advanced technology attachment SATA interface a fiber channel FC interface or other type of interface for physically connecting and transferring data between computers and physical storage units.

The computer may store data on the mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether the mass storage device is characterized as primary or secondary storage and the like.

For example the computer may store information to the mass storage device by issuing instructions through the storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to the mass storage device described above the computer may have access to other computer readable storage media to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable storage media is any available media that provides for the non transitory storage of data and that may be accessed by the computer .

By way of example and not limitation computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology. Computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information in a non transitory fashion.

As mentioned briefly above the mass storage device may store an operating system utilized to control the operation of the computer . According to one configuration the operating system comprises the LINUX operating system. According to another configuration the operating system comprises the WINDOWS SERVER operating system from MICROSOFT Corporation. According to further configurations the operating system may comprise the UNIX operating system or one of its variants. It should be appreciated that other operating systems may also be utilized. The mass storage device may store other system or application programs and data utilized by the computer .

In one configuration the mass storage device or other computer readable storage media is encoded with computer executable instructions which when loaded into the computer transform the computer from a general purpose computing system into a special purpose computer capable of implementing the configurations described herein. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one configuration the computer has access to computer readable storage media storing computer executable instructions which when executed by the computer perform the various processes described above with regard to . The computer might also include computer readable storage media for performing any of the other computer implemented operations described herein.

The computer may also include one or more input output controllers for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. Similarly an input output controller may provide output to a display such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for generating and publishing applications for multiple platforms based upon a website have been presented herein. Moreover although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and media are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example configurations and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

